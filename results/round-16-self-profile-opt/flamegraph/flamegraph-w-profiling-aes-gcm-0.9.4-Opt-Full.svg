<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,125,765 samples, 3.71%)</title><rect x="0.5854%" y="181" width="3.7131%" height="15" fill="rgb(227,0,7)"/><text x="0.8354%" y="191.50">LLVM..</text></g><g><title>codegen_generate_lto_work (1,360,245 samples, 0.82%)</title><rect x="3.4740%" y="165" width="0.8245%" height="15" fill="rgb(217,0,24)"/><text x="3.7240%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,346,515 samples, 0.82%)</title><rect x="3.4823%" y="149" width="0.8162%" height="15" fill="rgb(221,193,54)"/><text x="3.7323%" y="159.50"></text></g><g><title>implied_outlives_bounds (199,902 samples, 0.12%)</title><rect x="6.3002%" y="133" width="0.1212%" height="15" fill="rgb(248,212,6)"/><text x="6.5502%" y="143.50"></text></g><g><title>param_env (173,781 samples, 0.11%)</title><rect x="6.7274%" y="101" width="0.1053%" height="15" fill="rgb(208,68,35)"/><text x="6.9774%" y="111.50"></text></g><g><title>is_copy_raw (582,826 samples, 0.35%)</title><rect x="7.4269%" y="53" width="0.3533%" height="15" fill="rgb(232,128,0)"/><text x="7.6769%" y="63.50"></text></g><g><title>evaluate_obligation (518,244 samples, 0.31%)</title><rect x="7.4661%" y="37" width="0.3141%" height="15" fill="rgb(207,160,47)"/><text x="7.7161%" y="47.50"></text></g><g><title>needs_drop_raw (2,329,813 samples, 1.41%)</title><rect x="7.3270%" y="69" width="1.4122%" height="15" fill="rgb(228,23,34)"/><text x="7.5770%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (1,582,136 samples, 0.96%)</title><rect x="7.7802%" y="53" width="0.9590%" height="15" fill="rgb(218,30,26)"/><text x="8.0302%" y="63.50"></text></g><g><title>normalize_projection_ty (1,554,886 samples, 0.94%)</title><rect x="7.7967%" y="37" width="0.9425%" height="15" fill="rgb(220,122,19)"/><text x="8.0467%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (6,183,307 samples, 3.75%)</title><rect x="8.8031%" y="53" width="3.7480%" height="15" fill="rgb(250,228,42)"/><text x="9.0531%" y="63.50">code..</text></g><g><title>evaluate_obligation (5,882,264 samples, 3.57%)</title><rect x="8.9855%" y="37" width="3.5655%" height="15" fill="rgb(240,193,28)"/><text x="9.2355%" y="47.50">eval..</text></g><g><title>specialization_graph_of (467,635 samples, 0.28%)</title><rect x="12.5864%" y="53" width="0.2835%" height="15" fill="rgb(216,20,37)"/><text x="12.8364%" y="63.50"></text></g><g><title>impl_trait_ref (197,361 samples, 0.12%)</title><rect x="12.7503%" y="37" width="0.1196%" height="15" fill="rgb(206,188,39)"/><text x="13.0003%" y="47.50"></text></g><g><title>resolve_instance (6,850,394 samples, 4.15%)</title><rect x="8.7392%" y="69" width="4.1523%" height="15" fill="rgb(217,207,13)"/><text x="8.9892%" y="79.50">resol..</text></g><g><title>thir_body (205,904 samples, 0.12%)</title><rect x="12.8940%" y="69" width="0.1248%" height="15" fill="rgb(231,73,38)"/><text x="13.1440%" y="79.50"></text></g><g><title>mir_const (10,588,753 samples, 6.42%)</title><rect x="6.6022%" y="117" width="6.4183%" height="15" fill="rgb(225,20,46)"/><text x="6.8522%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (10,208,509 samples, 6.19%)</title><rect x="6.8327%" y="101" width="6.1878%" height="15" fill="rgb(210,31,41)"/><text x="7.0827%" y="111.50">unsafety..</text></g><g><title>mir_built (9,970,508 samples, 6.04%)</title><rect x="6.9770%" y="85" width="6.0435%" height="15" fill="rgb(221,200,47)"/><text x="7.2270%" y="95.50">mir_built</text></g><g><title>mir_promoted (11,010,498 samples, 6.67%)</title><rect x="6.4876%" y="133" width="6.6739%" height="15" fill="rgb(226,26,5)"/><text x="6.7376%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (232,702 samples, 0.14%)</title><rect x="13.0205%" y="117" width="0.1411%" height="15" fill="rgb(249,33,26)"/><text x="13.2705%" y="127.50"></text></g><g><title>mir_const (192,621 samples, 0.12%)</title><rect x="13.0448%" y="101" width="0.1168%" height="15" fill="rgb(235,183,28)"/><text x="13.2948%" y="111.50"></text></g><g><title>type_op_normalize_fn_sig (317,943 samples, 0.19%)</title><rect x="13.2084%" y="133" width="0.1927%" height="15" fill="rgb(221,5,38)"/><text x="13.4584%" y="143.50"></text></g><g><title>normalize_projection_ty (195,311 samples, 0.12%)</title><rect x="13.2828%" y="117" width="0.1184%" height="15" fill="rgb(247,18,42)"/><text x="13.5328%" y="127.50"></text></g><g><title>type_op_prove_predicate (713,037 samples, 0.43%)</title><rect x="13.4547%" y="133" width="0.4322%" height="15" fill="rgb(241,131,45)"/><text x="13.7047%" y="143.50"></text></g><g><title>MIR_borrow_checking (15,549,925 samples, 9.43%)</title><rect x="4.4622%" y="165" width="9.4254%" height="15" fill="rgb(249,31,29)"/><text x="4.7122%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (15,529,915 samples, 9.41%)</title><rect x="4.4743%" y="149" width="9.4133%" height="15" fill="rgb(225,111,53)"/><text x="4.7243%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (201,192 samples, 0.12%)</title><rect x="13.9719%" y="165" width="0.1220%" height="15" fill="rgb(238,160,17)"/><text x="14.2219%" y="175.50"></text></g><g><title>codegen_fn_attrs (257,693 samples, 0.16%)</title><rect x="14.3151%" y="101" width="0.1562%" height="15" fill="rgb(214,148,48)"/><text x="14.5651%" y="111.50"></text></g><g><title>codegen_fn_attrs (400,514 samples, 0.24%)</title><rect x="14.2305%" y="133" width="0.2428%" height="15" fill="rgb(232,36,49)"/><text x="14.4805%" y="143.50"></text></g><g><title>should_inherit_track_caller (352,334 samples, 0.21%)</title><rect x="14.2597%" y="117" width="0.2136%" height="15" fill="rgb(209,103,24)"/><text x="14.5097%" y="127.50"></text></g><g><title>check_mod_attrs (585,796 samples, 0.36%)</title><rect x="14.1186%" y="149" width="0.3551%" height="15" fill="rgb(229,88,8)"/><text x="14.3686%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (311,464 samples, 0.19%)</title><rect x="14.5515%" y="149" width="0.1888%" height="15" fill="rgb(213,181,19)"/><text x="14.8015%" y="159.50"></text></g><g><title>misc_checking_1 (1,138,562 samples, 0.69%)</title><rect x="14.0941%" y="165" width="0.6901%" height="15" fill="rgb(254,191,54)"/><text x="14.3441%" y="175.50"></text></g><g><title>misc_checking_2 (268,893 samples, 0.16%)</title><rect x="14.7843%" y="165" width="0.1630%" height="15" fill="rgb(241,83,37)"/><text x="15.0343%" y="175.50"></text></g><g><title>death_checking (253,313 samples, 0.15%)</title><rect x="15.0077%" y="149" width="0.1535%" height="15" fill="rgb(233,36,39)"/><text x="15.2577%" y="159.50"></text></g><g><title>param_env (228,962 samples, 0.14%)</title><rect x="15.4832%" y="117" width="0.1388%" height="15" fill="rgb(226,3,54)"/><text x="15.7332%" y="127.50"></text></g><g><title>crate_lints (1,481,576 samples, 0.90%)</title><rect x="15.1621%" y="133" width="0.8980%" height="15" fill="rgb(245,192,40)"/><text x="15.4121%" y="143.50"></text></g><g><title>type_of (599,815 samples, 0.36%)</title><rect x="15.6966%" y="117" width="0.3636%" height="15" fill="rgb(238,167,29)"/><text x="15.9466%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (498,774 samples, 0.30%)</title><rect x="15.7579%" y="101" width="0.3023%" height="15" fill="rgb(232,182,51)"/><text x="16.0079%" y="111.50"></text></g><g><title>lint_checking (1,606,557 samples, 0.97%)</title><rect x="15.1612%" y="149" width="0.9738%" height="15" fill="rgb(231,60,39)"/><text x="15.4112%" y="159.50"></text></g><g><title>privacy_checking_modules (380,654 samples, 0.23%)</title><rect x="16.1992%" y="149" width="0.2307%" height="15" fill="rgb(208,69,12)"/><text x="16.4492%" y="159.50"></text></g><g><title>check_mod_privacy (379,204 samples, 0.23%)</title><rect x="16.2001%" y="133" width="0.2299%" height="15" fill="rgb(235,93,37)"/><text x="16.4501%" y="143.50"></text></g><g><title>misc_checking_3 (2,455,286 samples, 1.49%)</title><rect x="14.9473%" y="165" width="1.4882%" height="15" fill="rgb(213,116,39)"/><text x="15.1973%" y="175.50"></text></g><g><title>impl_parent (895,261 samples, 0.54%)</title><rect x="17.7159%" y="101" width="0.5427%" height="15" fill="rgb(222,207,29)"/><text x="17.9659%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (496,434 samples, 0.30%)</title><rect x="17.9576%" y="85" width="0.3009%" height="15" fill="rgb(206,96,30)"/><text x="18.2076%" y="95.50"></text></g><g><title>impl_trait_ref (2,959,960 samples, 1.79%)</title><rect x="18.2601%" y="101" width="1.7942%" height="15" fill="rgb(218,138,4)"/><text x="18.5101%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,548,805 samples, 1.54%)</title><rect x="18.5094%" y="85" width="1.5449%" height="15" fill="rgb(250,191,14)"/><text x="18.7594%" y="95.50"></text></g><g><title>trait_impls_of (420,565 samples, 0.25%)</title><rect x="20.1092%" y="101" width="0.2549%" height="15" fill="rgb(239,60,40)"/><text x="20.3592%" y="111.50"></text></g><g><title>coherent_trait (16,649,357 samples, 10.09%)</title><rect x="16.4754%" y="133" width="10.0919%" height="15" fill="rgb(206,27,48)"/><text x="16.7254%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,631,227 samples, 10.08%)</title><rect x="16.4864%" y="117" width="10.0809%" height="15" fill="rgb(225,35,8)"/><text x="16.7364%" y="127.50">specialization_..</text></g><g><title>visible_parent_map (10,231,378 samples, 6.20%)</title><rect x="20.3656%" y="101" width="6.2017%" height="15" fill="rgb(250,213,24)"/><text x="20.6156%" y="111.50">visible_..</text></g><g><title>module_children (9,166,117 samples, 5.56%)</title><rect x="21.0113%" y="85" width="5.5560%" height="15" fill="rgb(247,123,22)"/><text x="21.2613%" y="95.50">module_..</text></g><g><title>metadata_decode_entry_module_children (8,988,665 samples, 5.45%)</title><rect x="21.1188%" y="69" width="5.4484%" height="15" fill="rgb(231,138,38)"/><text x="21.3688%" y="79.50">metadat..</text></g><g><title>coherence_checking (16,731,308 samples, 10.14%)</title><rect x="16.4616%" y="149" width="10.1415%" height="15" fill="rgb(231,145,46)"/><text x="16.7116%" y="159.50">coherence_check..</text></g><g><title>associated_item (403,424 samples, 0.24%)</title><rect x="32.3637%" y="85" width="0.2445%" height="15" fill="rgb(251,118,11)"/><text x="32.6137%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (352,922 samples, 0.21%)</title><rect x="32.3943%" y="69" width="0.2139%" height="15" fill="rgb(217,147,25)"/><text x="32.6443%" y="79.50"></text></g><g><title>associated_items (513,245 samples, 0.31%)</title><rect x="32.3093%" y="101" width="0.3111%" height="15" fill="rgb(247,81,37)"/><text x="32.5593%" y="111.50"></text></g><g><title>evaluate_obligation (26,464,662 samples, 16.04%)</title><rect x="36.3731%" y="69" width="16.0413%" height="15" fill="rgb(209,12,38)"/><text x="36.6231%" y="79.50">evaluate_obligation</text></g><g><title>dropck_outlives (32,639,226 samples, 19.78%)</title><rect x="32.6455%" y="101" width="19.7840%" height="15" fill="rgb(227,1,9)"/><text x="32.8955%" y="111.50">dropck_outlives</text></g><g><title>normalize_projection_ty (32,348,575 samples, 19.61%)</title><rect x="32.8216%" y="85" width="19.6078%" height="15" fill="rgb(248,47,43)"/><text x="33.0716%" y="95.50">normalize_projection_ty</text></g><g><title>eval_to_const_value_raw (275,843 samples, 0.17%)</title><rect x="52.4316%" y="101" width="0.1672%" height="15" fill="rgb(221,10,30)"/><text x="52.6816%" y="111.50"></text></g><g><title>eval_to_const_value_raw (258,233 samples, 0.16%)</title><rect x="52.4422%" y="85" width="0.1565%" height="15" fill="rgb(210,229,1)"/><text x="52.6922%" y="95.50"></text></g><g><title>eval_to_allocation_raw (253,333 samples, 0.15%)</title><rect x="52.4452%" y="69" width="0.1536%" height="15" fill="rgb(222,148,37)"/><text x="52.6952%" y="79.50"></text></g><g><title>evaluate_obligation (2,460,893 samples, 1.49%)</title><rect x="52.5988%" y="101" width="1.4916%" height="15" fill="rgb(234,67,33)"/><text x="52.8488%" y="111.50"></text></g><g><title>trait_impls_of (219,962 samples, 0.13%)</title><rect x="53.9571%" y="85" width="0.1333%" height="15" fill="rgb(247,98,35)"/><text x="54.2071%" y="95.50"></text></g><g><title>impl_item_implementor_ids (287,313 samples, 0.17%)</title><rect x="54.2066%" y="101" width="0.1742%" height="15" fill="rgb(247,138,52)"/><text x="54.4566%" y="111.50"></text></g><g><title>associated_items (277,692 samples, 0.17%)</title><rect x="54.2124%" y="85" width="0.1683%" height="15" fill="rgb(213,79,30)"/><text x="54.4624%" y="95.50"></text></g><g><title>evaluate_obligation (290,513 samples, 0.18%)</title><rect x="54.5333%" y="85" width="0.1761%" height="15" fill="rgb(246,177,23)"/><text x="54.7833%" y="95.50"></text></g><g><title>method_autoderef_steps (439,174 samples, 0.27%)</title><rect x="54.4501%" y="101" width="0.2662%" height="15" fill="rgb(230,62,27)"/><text x="54.7001%" y="111.50"></text></g><g><title>predicates_of (243,801 samples, 0.15%)</title><rect x="54.7272%" y="101" width="0.1478%" height="15" fill="rgb(216,154,8)"/><text x="54.9772%" y="111.50"></text></g><g><title>item_bodies_checking (46,811,528 samples, 28.37%)</title><rect x="26.6289%" y="149" width="28.3744%" height="15" fill="rgb(244,35,45)"/><text x="26.8789%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (46,807,888 samples, 28.37%)</title><rect x="26.6311%" y="133" width="28.3722%" height="15" fill="rgb(251,115,12)"/><text x="26.8811%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (46,792,898 samples, 28.36%)</title><rect x="26.6402%" y="117" width="28.3631%" height="15" fill="rgb(240,54,50)"/><text x="26.8902%" y="127.50">typeck</text></g><g><title>adt_destructor (205,042 samples, 0.12%)</title><rect x="55.4737%" y="117" width="0.1243%" height="15" fill="rgb(233,84,52)"/><text x="55.7237%" y="127.50"></text></g><g><title>coherent_trait (201,942 samples, 0.12%)</title><rect x="55.4756%" y="101" width="0.1224%" height="15" fill="rgb(207,117,47)"/><text x="55.7256%" y="111.50"></text></g><g><title>specialization_graph_of (199,152 samples, 0.12%)</title><rect x="55.4773%" y="85" width="0.1207%" height="15" fill="rgb(249,43,39)"/><text x="55.7273%" y="95.50"></text></g><g><title>evaluate_obligation (251,854 samples, 0.15%)</title><rect x="55.6015%" y="117" width="0.1527%" height="15" fill="rgb(209,38,44)"/><text x="55.8515%" y="127.50"></text></g><g><title>generics_of (688,548 samples, 0.42%)</title><rect x="58.1674%" y="85" width="0.4174%" height="15" fill="rgb(236,212,23)"/><text x="58.4174%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (502,197 samples, 0.30%)</title><rect x="58.2803%" y="69" width="0.3044%" height="15" fill="rgb(242,79,21)"/><text x="58.5303%" y="79.50"></text></g><g><title>impl_trait_ref (980,873 samples, 0.59%)</title><rect x="58.6661%" y="85" width="0.5945%" height="15" fill="rgb(211,96,35)"/><text x="58.9161%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (795,051 samples, 0.48%)</title><rect x="58.7787%" y="69" width="0.4819%" height="15" fill="rgb(253,215,40)"/><text x="59.0287%" y="79.50"></text></g><g><title>predicates_of (664,547 samples, 0.40%)</title><rect x="59.2828%" y="85" width="0.4028%" height="15" fill="rgb(211,81,21)"/><text x="59.5328%" y="95.50"></text></g><g><title>predicates_defined_on (361,586 samples, 0.22%)</title><rect x="59.4664%" y="69" width="0.2192%" height="15" fill="rgb(208,190,38)"/><text x="59.7164%" y="79.50"></text></g><g><title>specializes (2,026,501 samples, 1.23%)</title><rect x="59.6856%" y="85" width="1.2283%" height="15" fill="rgb(235,213,38)"/><text x="59.9356%" y="95.50"></text></g><g><title>param_env (1,154,041 samples, 0.70%)</title><rect x="60.2144%" y="69" width="0.6995%" height="15" fill="rgb(237,122,38)"/><text x="60.4644%" y="79.50"></text></g><g><title>def_span (506,565 samples, 0.31%)</title><rect x="60.6069%" y="53" width="0.3070%" height="15" fill="rgb(244,218,35)"/><text x="60.8569%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (444,705 samples, 0.27%)</title><rect x="60.6444%" y="37" width="0.2696%" height="15" fill="rgb(240,68,47)"/><text x="60.8944%" y="47.50"></text></g><g><title>evaluate_obligation (7,160,765 samples, 4.34%)</title><rect x="56.5865%" y="101" width="4.3404%" height="15" fill="rgb(210,16,53)"/><text x="56.8365%" y="111.50">evalu..</text></g><g><title>specializes (176,921 samples, 0.11%)</title><rect x="60.9720%" y="101" width="0.1072%" height="15" fill="rgb(235,124,12)"/><text x="61.2220%" y="111.50"></text></g><g><title>item_types_checking (10,043,877 samples, 6.09%)</title><rect x="55.0033%" y="149" width="6.0880%" height="15" fill="rgb(224,169,11)"/><text x="55.2533%" y="159.50">item_typ..</text></g><g><title>check_mod_item_types (10,040,437 samples, 6.09%)</title><rect x="55.0054%" y="133" width="6.0859%" height="15" fill="rgb(250,166,2)"/><text x="55.2554%" y="143.50">check_mo..</text></g><g><title>typeck (8,705,382 samples, 5.28%)</title><rect x="55.8146%" y="117" width="5.2767%" height="15" fill="rgb(242,216,29)"/><text x="56.0646%" y="127.50">typeck</text></g><g><title>fn_sig (268,722 samples, 0.16%)</title><rect x="61.2205%" y="117" width="0.1629%" height="15" fill="rgb(230,116,27)"/><text x="61.4705%" y="127.50"></text></g><g><title>late_bound_vars_map (381,574 samples, 0.23%)</title><rect x="61.8260%" y="69" width="0.2313%" height="15" fill="rgb(228,99,48)"/><text x="62.0760%" y="79.50"></text></g><g><title>resolve_lifetimes (355,464 samples, 0.22%)</title><rect x="61.8418%" y="53" width="0.2155%" height="15" fill="rgb(253,11,6)"/><text x="62.0918%" y="63.50"></text></g><g><title>explicit_predicates_of (1,208,354 samples, 0.73%)</title><rect x="61.5386%" y="85" width="0.7324%" height="15" fill="rgb(247,143,39)"/><text x="61.7886%" y="95.50"></text></g><g><title>type_param_predicates (323,473 samples, 0.20%)</title><rect x="62.0749%" y="69" width="0.1961%" height="15" fill="rgb(236,97,10)"/><text x="62.3249%" y="79.50"></text></g><g><title>predicates_of (1,408,925 samples, 0.85%)</title><rect x="61.4841%" y="117" width="0.8540%" height="15" fill="rgb(233,208,19)"/><text x="61.7341%" y="127.50"></text></g><g><title>predicates_defined_on (1,378,145 samples, 0.84%)</title><rect x="61.5027%" y="101" width="0.8354%" height="15" fill="rgb(216,164,2)"/><text x="61.7527%" y="111.50"></text></g><g><title>type_collecting (2,397,765 samples, 1.45%)</title><rect x="61.0930%" y="149" width="1.4534%" height="15" fill="rgb(220,129,5)"/><text x="61.3430%" y="159.50"></text></g><g><title>collect_mod_item_types (2,385,195 samples, 1.45%)</title><rect x="61.1006%" y="133" width="1.4458%" height="15" fill="rgb(242,17,10)"/><text x="61.3506%" y="143.50"></text></g><g><title>type_of (343,704 samples, 0.21%)</title><rect x="62.3381%" y="117" width="0.2083%" height="15" fill="rgb(242,107,0)"/><text x="62.5881%" y="127.50"></text></g><g><title>impl_item_implementor_ids (178,120 samples, 0.11%)</title><rect x="67.3033%" y="101" width="0.1080%" height="15" fill="rgb(251,28,31)"/><text x="67.5533%" y="111.50"></text></g><g><title>predicates_of (325,456 samples, 0.20%)</title><rect x="67.4912%" y="101" width="0.1973%" height="15" fill="rgb(233,223,10)"/><text x="67.7412%" y="111.50"></text></g><g><title>predicates_defined_on (239,903 samples, 0.15%)</title><rect x="67.5430%" y="85" width="0.1454%" height="15" fill="rgb(215,21,27)"/><text x="67.7930%" y="95.50"></text></g><g><title>trait_impls_of (451,106 samples, 0.27%)</title><rect x="67.7002%" y="101" width="0.2734%" height="15" fill="rgb(232,23,21)"/><text x="67.9502%" y="111.50"></text></g><g><title>implementations_of_trait (211,724 samples, 0.13%)</title><rect x="67.8453%" y="85" width="0.1283%" height="15" fill="rgb(244,5,23)"/><text x="68.0953%" y="95.50"></text></g><g><title>evaluate_obligation (7,916,165 samples, 4.80%)</title><rect x="63.2010%" y="117" width="4.7983%" height="15" fill="rgb(226,81,46)"/><text x="63.4510%" y="127.50">evalua..</text></g><g><title>implied_outlives_bounds (168,092 samples, 0.10%)</title><rect x="68.0103%" y="117" width="0.1019%" height="15" fill="rgb(247,70,30)"/><text x="68.2603%" y="127.50"></text></g><g><title>param_env (270,672 samples, 0.16%)</title><rect x="68.1186%" y="117" width="0.1641%" height="15" fill="rgb(212,68,19)"/><text x="68.3686%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,520,452 samples, 5.77%)</title><rect x="62.5881%" y="133" width="5.7707%" height="15" fill="rgb(240,187,13)"/><text x="62.8381%" y="143.50">check_i..</text></g><g><title>evaluate_obligation (700,304 samples, 0.42%)</title><rect x="69.0011%" y="117" width="0.4245%" height="15" fill="rgb(223,113,26)"/><text x="69.2511%" y="127.50"></text></g><g><title>param_env (265,634 samples, 0.16%)</title><rect x="69.4948%" y="117" width="0.1610%" height="15" fill="rgb(206,192,2)"/><text x="69.7448%" y="127.50"></text></g><g><title>analysis (107,968,888 samples, 65.44%)</title><rect x="4.2985%" y="181" width="65.4444%" height="15" fill="rgb(241,108,4)"/><text x="4.5485%" y="191.50">analysis</text></g><g><title>type_check_crate (87,945,495 samples, 53.31%)</title><rect x="16.4355%" y="165" width="53.3074%" height="15" fill="rgb(247,173,49)"/><text x="16.6855%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,871,346 samples, 7.20%)</title><rect x="62.5472%" y="149" width="7.1957%" height="15" fill="rgb(224,114,35)"/><text x="62.7972%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (2,283,324 samples, 1.38%)</title><rect x="68.3589%" y="133" width="1.3840%" height="15" fill="rgb(245,159,27)"/><text x="68.6089%" y="143.50"></text></g><g><title>codegen_module (225,012 samples, 0.14%)</title><rect x="70.1378%" y="165" width="0.1364%" height="15" fill="rgb(245,172,44)"/><text x="70.3878%" y="175.50"></text></g><g><title>codegen_crate (964,940 samples, 0.58%)</title><rect x="69.7503%" y="181" width="0.5849%" height="15" fill="rgb(236,23,11)"/><text x="70.0003%" y="191.50"></text></g><g><title>codegen_module_optimize (852,879 samples, 0.52%)</title><rect x="70.3352%" y="181" width="0.5170%" height="15" fill="rgb(205,117,38)"/><text x="70.5852%" y="191.50"></text></g><g><title>LLVM_module_optimize (430,454 samples, 0.26%)</title><rect x="70.5912%" y="165" width="0.2609%" height="15" fill="rgb(237,72,25)"/><text x="70.8412%" y="175.50"></text></g><g><title>LLVM_lto_optimize (252,622 samples, 0.15%)</title><rect x="71.0993%" y="165" width="0.1531%" height="15" fill="rgb(244,70,9)"/><text x="71.3493%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,439,606 samples, 1.48%)</title><rect x="71.2524%" y="165" width="1.4787%" height="15" fill="rgb(217,125,39)"/><text x="71.5024%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,408,546 samples, 1.46%)</title><rect x="71.2712%" y="149" width="1.4599%" height="15" fill="rgb(235,36,10)"/><text x="71.5212%" y="159.50"></text></g><g><title>codegen_module_perform_lto (3,135,973 samples, 1.90%)</title><rect x="70.8521%" y="181" width="1.9008%" height="15" fill="rgb(251,123,47)"/><text x="71.1021%" y="191.50">c..</text></g><g><title>macro_expand_crate (19,172,254 samples, 11.62%)</title><rect x="73.0803%" y="165" width="11.6211%" height="15" fill="rgb(221,13,13)"/><text x="73.3303%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (19,154,494 samples, 11.61%)</title><rect x="73.0911%" y="149" width="11.6103%" height="15" fill="rgb(238,131,9)"/><text x="73.3411%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (1,650,208 samples, 1.00%)</title><rect x="83.7012%" y="133" width="1.0003%" height="15" fill="rgb(211,50,8)"/><text x="83.9512%" y="143.50"></text></g><g><title>metadata_register_crate (470,256 samples, 0.29%)</title><rect x="84.4164%" y="117" width="0.2850%" height="15" fill="rgb(245,182,24)"/><text x="84.6664%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (193,062 samples, 0.12%)</title><rect x="84.7048%" y="165" width="0.1170%" height="15" fill="rgb(242,14,37)"/><text x="84.9548%" y="175.50"></text></g><g><title>late_resolve_crate (1,456,455 samples, 0.88%)</title><rect x="84.9536%" y="149" width="0.8828%" height="15" fill="rgb(246,228,12)"/><text x="85.2036%" y="159.50"></text></g><g><title>configure_and_expand (21,693,141 samples, 13.15%)</title><rect x="72.7530%" y="181" width="13.1491%" height="15" fill="rgb(213,55,15)"/><text x="73.0030%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,782,239 samples, 1.08%)</title><rect x="84.8218%" y="165" width="1.0803%" height="15" fill="rgb(209,9,3)"/><text x="85.0718%" y="175.50"></text></g><g><title>early_lint_checks (302,224 samples, 0.18%)</title><rect x="85.9916%" y="181" width="0.1832%" height="15" fill="rgb(230,59,30)"/><text x="86.2416%" y="191.50"></text></g><g><title>free_global_ctxt (2,646,268 samples, 1.60%)</title><rect x="86.1748%" y="181" width="1.6040%" height="15" fill="rgb(209,121,21)"/><text x="86.4248%" y="191.50"></text></g><g><title>is_sized_raw (218,944 samples, 0.13%)</title><rect x="88.7240%" y="133" width="0.1327%" height="15" fill="rgb(220,109,13)"/><text x="88.9740%" y="143.50"></text></g><g><title>evaluate_obligation (193,164 samples, 0.12%)</title><rect x="88.7396%" y="117" width="0.1171%" height="15" fill="rgb(232,18,1)"/><text x="88.9896%" y="127.50"></text></g><g><title>layout_of (210,783 samples, 0.13%)</title><rect x="88.8958%" y="85" width="0.1278%" height="15" fill="rgb(215,41,42)"/><text x="89.1458%" y="95.50"></text></g><g><title>layout_of (313,874 samples, 0.19%)</title><rect x="88.8637%" y="117" width="0.1903%" height="15" fill="rgb(224,123,36)"/><text x="89.1137%" y="127.50"></text></g><g><title>layout_of (301,034 samples, 0.18%)</title><rect x="88.8715%" y="101" width="0.1825%" height="15" fill="rgb(240,125,3)"/><text x="89.1215%" y="111.50"></text></g><g><title>layout_of (7,809,673 samples, 4.73%)</title><rect x="88.8567%" y="133" width="4.7338%" height="15" fill="rgb(205,98,50)"/><text x="89.1067%" y="143.50">layout..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (7,484,209 samples, 4.54%)</title><rect x="89.0540%" y="117" width="4.5365%" height="15" fill="rgb(205,185,37)"/><text x="89.3040%" y="127.50">try_n..</text></g><g><title>normalize_projection_ty (7,461,509 samples, 4.52%)</title><rect x="89.0677%" y="101" width="4.5227%" height="15" fill="rgb(238,207,15)"/><text x="89.3177%" y="111.50">norma..</text></g><g><title>evaluate_obligation (2,426,485 samples, 1.47%)</title><rect x="92.1197%" y="85" width="1.4708%" height="15" fill="rgb(213,199,42)"/><text x="92.3697%" y="95.50"></text></g><g><title>layout_of (8,210,909 samples, 4.98%)</title><rect x="88.6568%" y="149" width="4.9770%" height="15" fill="rgb(235,201,11)"/><text x="88.9068%" y="159.50">layout..</text></g><g><title>mir_drops_elaborated_and_const_checked (636,646 samples, 0.39%)</title><rect x="93.6338%" y="149" width="0.3859%" height="15" fill="rgb(207,46,11)"/><text x="93.8838%" y="159.50"></text></g><g><title>optimized_mir (9,537,693 samples, 5.78%)</title><rect x="88.2475%" y="165" width="5.7812%" height="15" fill="rgb(241,35,35)"/><text x="88.4975%" y="175.50">optimiz..</text></g><g><title>generate_crate_metadata (10,328,130 samples, 6.26%)</title><rect x="87.7788%" y="181" width="6.2603%" height="15" fill="rgb(243,32,47)"/><text x="88.0288%" y="191.50">generate..</text></g><g><title>hir_lowering (1,931,380 samples, 1.17%)</title><rect x="94.0391%" y="181" width="1.1707%" height="15" fill="rgb(247,202,23)"/><text x="94.2891%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,011,002 samples, 1.83%)</title><rect x="95.2214%" y="165" width="1.8251%" height="15" fill="rgb(219,102,11)"/><text x="95.4714%" y="175.50">f..</text></g><g><title>link_crate (689,707 samples, 0.42%)</title><rect x="97.0465%" y="165" width="0.4181%" height="15" fill="rgb(243,110,44)"/><text x="97.2965%" y="175.50"></text></g><g><title>link_binary (676,287 samples, 0.41%)</title><rect x="97.0546%" y="149" width="0.4099%" height="15" fill="rgb(222,74,54)"/><text x="97.3046%" y="159.50"></text></g><g><title>link_rlib (415,845 samples, 0.25%)</title><rect x="97.2125%" y="133" width="0.2521%" height="15" fill="rgb(216,99,12)"/><text x="97.4625%" y="143.50"></text></g><g><title>link (3,727,959 samples, 2.26%)</title><rect x="95.2098%" y="181" width="2.2597%" height="15" fill="rgb(226,22,26)"/><text x="95.4598%" y="191.50">l..</text></g><g><title>parse_crate (2,547,047 samples, 1.54%)</title><rect x="97.4695%" y="181" width="1.5439%" height="15" fill="rgb(217,163,10)"/><text x="97.7195%" y="191.50"></text></g><g><title>prepare_outputs (338,853 samples, 0.21%)</title><rect x="99.0199%" y="181" width="0.2054%" height="15" fill="rgb(213,25,53)"/><text x="99.2699%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (776,688 samples, 0.47%)</title><rect x="99.2253%" y="181" width="0.4708%" height="15" fill="rgb(252,105,26)"/><text x="99.4753%" y="191.50"></text></g><g><title>all (164,978,124 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (164,978,124 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (364,034 samples, 0.22%)</title><rect x="99.7793%" y="181" width="0.2207%" height="15" fill="rgb(252,8,32)"/><text x="100.0293%" y="191.50"></text></g></svg></svg>