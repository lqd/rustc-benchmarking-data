<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (138,608,939 samples, 21.50%)</title><rect x="0.1097%" y="197" width="21.4955%" height="15" fill="rgb(227,0,7)"/><text x="0.3597%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (704,618 samples, 0.11%)</title><rect x="21.4960%" y="181" width="0.1093%" height="15" fill="rgb(217,0,24)"/><text x="21.7460%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (684,557 samples, 0.11%)</title><rect x="21.4991%" y="165" width="0.1062%" height="15" fill="rgb(221,193,54)"/><text x="21.7491%" y="175.50"></text></g><g><title>needs_drop_raw (742,649 samples, 0.12%)</title><rect x="22.5944%" y="85" width="0.1152%" height="15" fill="rgb(248,212,6)"/><text x="22.8444%" y="95.50"></text></g><g><title>specialization_graph_of (1,139,333 samples, 0.18%)</title><rect x="22.7541%" y="69" width="0.1767%" height="15" fill="rgb(208,68,35)"/><text x="23.0041%" y="79.50"></text></g><g><title>resolve_instance (1,460,658 samples, 0.23%)</title><rect x="22.7096%" y="85" width="0.2265%" height="15" fill="rgb(232,128,0)"/><text x="22.9596%" y="95.50"></text></g><g><title>mir_const (4,318,338 samples, 0.67%)</title><rect x="22.3214%" y="133" width="0.6697%" height="15" fill="rgb(207,160,47)"/><text x="22.5714%" y="143.50"></text></g><g><title>unsafety_check_result (3,900,834 samples, 0.60%)</title><rect x="22.3862%" y="117" width="0.6049%" height="15" fill="rgb(228,23,34)"/><text x="22.6362%" y="127.50"></text></g><g><title>mir_built (3,546,970 samples, 0.55%)</title><rect x="22.4410%" y="101" width="0.5501%" height="15" fill="rgb(218,30,26)"/><text x="22.6910%" y="111.50"></text></g><g><title>mir_promoted (4,663,764 samples, 0.72%)</title><rect x="22.2733%" y="149" width="0.7233%" height="15" fill="rgb(220,122,19)"/><text x="22.5233%" y="159.50"></text></g><g><title>type_op_prove_predicate (899,511 samples, 0.14%)</title><rect x="23.1040%" y="149" width="0.1395%" height="15" fill="rgb(250,228,42)"/><text x="23.3540%" y="159.50"></text></g><g><title>MIR_borrow_checking (10,320,404 samples, 1.60%)</title><rect x="21.6450%" y="181" width="1.6005%" height="15" fill="rgb(240,193,28)"/><text x="21.8950%" y="191.50"></text></g><g><title>mir_borrowck (10,280,524 samples, 1.59%)</title><rect x="21.6512%" y="165" width="1.5943%" height="15" fill="rgb(216,20,37)"/><text x="21.9012%" y="175.50"></text></g><g><title>check_mod_attrs (700,218 samples, 0.11%)</title><rect x="23.2857%" y="165" width="0.1086%" height="15" fill="rgb(206,188,39)"/><text x="23.5357%" y="175.50"></text></g><g><title>misc_checking_1 (1,342,705 samples, 0.21%)</title><rect x="23.2819%" y="181" width="0.2082%" height="15" fill="rgb(217,207,13)"/><text x="23.5319%" y="191.50"></text></g><g><title>crate_lints (1,929,362 samples, 0.30%)</title><rect x="23.6096%" y="149" width="0.2992%" height="15" fill="rgb(231,73,38)"/><text x="23.8596%" y="159.50"></text></g><g><title>type_of (1,053,811 samples, 0.16%)</title><rect x="23.7454%" y="133" width="0.1634%" height="15" fill="rgb(225,20,46)"/><text x="23.9954%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (821,266 samples, 0.13%)</title><rect x="23.7815%" y="117" width="0.1274%" height="15" fill="rgb(210,31,41)"/><text x="24.0315%" y="127.50"></text></g><g><title>lint_checking (2,076,484 samples, 0.32%)</title><rect x="23.6094%" y="165" width="0.3220%" height="15" fill="rgb(221,200,47)"/><text x="23.8594%" y="175.50"></text></g><g><title>misc_checking_3 (2,814,941 samples, 0.44%)</title><rect x="23.5599%" y="181" width="0.4365%" height="15" fill="rgb(226,26,5)"/><text x="23.8099%" y="191.50"></text></g><g><title>mir_borrowck (734,698 samples, 0.11%)</title><rect x="25.6022%" y="37" width="0.1139%" height="15" fill="rgb(249,33,26)"/><text x="25.8522%" y="47.50"></text></g><g><title>mir_for_ctfe (1,062,592 samples, 0.16%)</title><rect x="25.5517%" y="69" width="0.1648%" height="15" fill="rgb(235,183,28)"/><text x="25.8017%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (981,681 samples, 0.15%)</title><rect x="25.5643%" y="53" width="0.1522%" height="15" fill="rgb(221,5,38)"/><text x="25.8143%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,936,871 samples, 0.46%)</title><rect x="25.4599%" y="117" width="0.4555%" height="15" fill="rgb(247,18,42)"/><text x="25.7099%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,914,861 samples, 0.45%)</title><rect x="25.4633%" y="101" width="0.4520%" height="15" fill="rgb(241,131,45)"/><text x="25.7133%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,903,231 samples, 0.45%)</title><rect x="25.4651%" y="85" width="0.4502%" height="15" fill="rgb(249,31,29)"/><text x="25.7151%" y="95.50"></text></g><g><title>typeck (817,358 samples, 0.13%)</title><rect x="25.7886%" y="69" width="0.1268%" height="15" fill="rgb(225,111,53)"/><text x="26.0386%" y="79.50"></text></g><g><title>impl_parent (4,747,560 samples, 0.74%)</title><rect x="25.9168%" y="117" width="0.7363%" height="15" fill="rgb(238,160,17)"/><text x="26.1668%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,313,278 samples, 0.36%)</title><rect x="26.2943%" y="101" width="0.3587%" height="15" fill="rgb(214,148,48)"/><text x="26.5443%" y="111.50"></text></g><g><title>impl_trait_ref (10,118,301 samples, 1.57%)</title><rect x="26.6535%" y="117" width="1.5691%" height="15" fill="rgb(232,36,49)"/><text x="26.9035%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,870,131 samples, 1.22%)</title><rect x="27.0021%" y="101" width="1.2205%" height="15" fill="rgb(209,103,24)"/><text x="27.2521%" y="111.50"></text></g><g><title>trait_impls_of (2,015,443 samples, 0.31%)</title><rect x="28.2569%" y="117" width="0.3126%" height="15" fill="rgb(229,88,8)"/><text x="28.5069%" y="127.50"></text></g><g><title>coherent_trait (29,411,254 samples, 4.56%)</title><rect x="24.0088%" y="149" width="4.5611%" height="15" fill="rgb(213,181,19)"/><text x="24.2588%" y="159.50">coher..</text></g><g><title>specialization_graph_of (28,261,380 samples, 4.38%)</title><rect x="24.1871%" y="133" width="4.3828%" height="15" fill="rgb(254,191,54)"/><text x="24.4371%" y="143.50">speci..</text></g><g><title>coherence_checking (29,529,256 samples, 4.58%)</title><rect x="24.0039%" y="165" width="4.5794%" height="15" fill="rgb(241,83,37)"/><text x="24.2539%" y="175.50">coher..</text></g><g><title>associated_item (727,377 samples, 0.11%)</title><rect x="30.2002%" y="85" width="0.1128%" height="15" fill="rgb(233,36,39)"/><text x="30.4502%" y="95.50"></text></g><g><title>associated_items (905,137 samples, 0.14%)</title><rect x="30.1783%" y="101" width="0.1404%" height="15" fill="rgb(226,3,54)"/><text x="30.4283%" y="111.50"></text></g><g><title>evaluate_obligation (1,064,104 samples, 0.17%)</title><rect x="30.4108%" y="101" width="0.1650%" height="15" fill="rgb(245,192,40)"/><text x="30.6608%" y="111.50"></text></g><g><title>typeck (7,819,917 samples, 1.21%)</title><rect x="29.5361%" y="117" width="1.2127%" height="15" fill="rgb(238,167,29)"/><text x="29.7861%" y="127.50"></text></g><g><title>item_bodies_checking (13,948,824 samples, 2.16%)</title><rect x="28.5894%" y="165" width="2.1632%" height="15" fill="rgb(232,182,51)"/><text x="28.8394%" y="175.50">i..</text></g><g><title>typeck_item_bodies (13,945,924 samples, 2.16%)</title><rect x="28.5898%" y="149" width="2.1627%" height="15" fill="rgb(231,60,39)"/><text x="28.8398%" y="159.50">t..</text></g><g><title>typeck (13,915,524 samples, 2.16%)</title><rect x="28.5945%" y="133" width="2.1580%" height="15" fill="rgb(208,69,12)"/><text x="28.8445%" y="143.50">t..</text></g><g><title>item_types_checking (674,317 samples, 0.10%)</title><rect x="30.7525%" y="165" width="0.1046%" height="15" fill="rgb(235,93,37)"/><text x="31.0025%" y="175.50"></text></g><g><title>check_mod_item_types (671,697 samples, 0.10%)</title><rect x="30.7529%" y="149" width="0.1042%" height="15" fill="rgb(213,116,39)"/><text x="31.0029%" y="159.50"></text></g><g><title>type_collecting (1,430,745 samples, 0.22%)</title><rect x="30.8573%" y="165" width="0.2219%" height="15" fill="rgb(222,207,29)"/><text x="31.1073%" y="175.50"></text></g><g><title>collect_mod_item_types (1,421,335 samples, 0.22%)</title><rect x="30.8588%" y="149" width="0.2204%" height="15" fill="rgb(206,96,30)"/><text x="31.1088%" y="159.50"></text></g><g><title>eval_to_const_value_raw (916,551 samples, 0.14%)</title><rect x="31.1803%" y="133" width="0.1421%" height="15" fill="rgb(218,138,4)"/><text x="31.4303%" y="143.50"></text></g><g><title>eval_to_const_value_raw (910,881 samples, 0.14%)</title><rect x="31.1812%" y="117" width="0.1413%" height="15" fill="rgb(250,191,14)"/><text x="31.4312%" y="127.50"></text></g><g><title>eval_to_allocation_raw (900,041 samples, 0.14%)</title><rect x="31.1829%" y="101" width="0.1396%" height="15" fill="rgb(239,60,40)"/><text x="31.4329%" y="111.50"></text></g><g><title>check_impl_item_well_formed (1,974,900 samples, 0.31%)</title><rect x="31.0916%" y="149" width="0.3063%" height="15" fill="rgb(206,27,48)"/><text x="31.3416%" y="159.50"></text></g><g><title>analysis (64,004,716 samples, 9.93%)</title><rect x="21.6052%" y="197" width="9.9259%" height="15" fill="rgb(225,35,8)"/><text x="21.8552%" y="207.50">analysis</text></g><g><title>type_check_crate (48,585,895 samples, 7.53%)</title><rect x="23.9964%" y="181" width="7.5347%" height="15" fill="rgb(250,213,24)"/><text x="24.2464%" y="191.50">type_check..</text></g><g><title>wf_checking (2,910,082 samples, 0.45%)</title><rect x="31.0798%" y="165" width="0.4513%" height="15" fill="rgb(247,123,22)"/><text x="31.3298%" y="175.50"></text></g><g><title>check_item_well_formed (859,471 samples, 0.13%)</title><rect x="31.3978%" y="149" width="0.1333%" height="15" fill="rgb(231,138,38)"/><text x="31.6478%" y="159.50"></text></g><g><title>layout_of (970,909 samples, 0.15%)</title><rect x="33.7482%" y="149" width="0.1506%" height="15" fill="rgb(231,145,46)"/><text x="33.9982%" y="159.50"></text></g><g><title>predicates_of (768,031 samples, 0.12%)</title><rect x="34.0425%" y="133" width="0.1191%" height="15" fill="rgb(251,118,11)"/><text x="34.2925%" y="143.50"></text></g><g><title>param_env (1,697,553 samples, 0.26%)</title><rect x="33.8987%" y="149" width="0.2633%" height="15" fill="rgb(217,147,25)"/><text x="34.1487%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (709,197 samples, 0.11%)</title><rect x="34.1620%" y="149" width="0.1100%" height="15" fill="rgb(247,81,37)"/><text x="34.4120%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,661,859 samples, 0.88%)</title><rect x="33.3969%" y="165" width="0.8780%" height="15" fill="rgb(209,12,38)"/><text x="33.6469%" y="175.50"></text></g><g><title>codegen_module (17,145,287 samples, 2.66%)</title><rect x="31.7300%" y="181" width="2.6589%" height="15" fill="rgb(227,1,9)"/><text x="31.9800%" y="191.50">co..</text></g><g><title>item_attrs (857,178 samples, 0.13%)</title><rect x="34.5472%" y="117" width="0.1329%" height="15" fill="rgb(248,47,43)"/><text x="34.7972%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (835,198 samples, 0.13%)</title><rect x="34.5506%" y="101" width="0.1295%" height="15" fill="rgb(221,10,30)"/><text x="34.8006%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,166,812 samples, 0.18%)</title><rect x="34.5258%" y="133" width="0.1809%" height="15" fill="rgb(210,229,1)"/><text x="34.7758%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (876,219 samples, 0.14%)</title><rect x="35.0023%" y="117" width="0.1359%" height="15" fill="rgb(222,148,37)"/><text x="35.2523%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,243,626 samples, 0.19%)</title><rect x="35.1381%" y="117" width="0.1929%" height="15" fill="rgb(234,67,33)"/><text x="35.3881%" y="127.50"></text></g><g><title>optimized_mir (4,169,335 samples, 0.65%)</title><rect x="34.7762%" y="133" width="0.6466%" height="15" fill="rgb(247,98,35)"/><text x="35.0262%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (1,521,478 samples, 0.24%)</title><rect x="35.4914%" y="117" width="0.2360%" height="15" fill="rgb(247,138,52)"/><text x="35.7414%" y="127.50"></text></g><g><title>resolve_instance (3,160,016 samples, 0.49%)</title><rect x="35.4228%" y="133" width="0.4901%" height="15" fill="rgb(213,79,30)"/><text x="35.6728%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (10,261,512 samples, 1.59%)</title><rect x="34.3945%" y="149" width="1.5914%" height="15" fill="rgb(246,177,23)"/><text x="34.6445%" y="159.50"></text></g><g><title>monomorphization_collector (10,301,883 samples, 1.60%)</title><rect x="34.3942%" y="165" width="1.5976%" height="15" fill="rgb(230,62,27)"/><text x="34.6442%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (904,400 samples, 0.14%)</title><rect x="35.9925%" y="149" width="0.1403%" height="15" fill="rgb(216,154,8)"/><text x="36.2425%" y="159.50"></text></g><g><title>symbol_name (833,859 samples, 0.13%)</title><rect x="36.0034%" y="133" width="0.1293%" height="15" fill="rgb(244,35,45)"/><text x="36.2534%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (11,566,807 samples, 1.79%)</title><rect x="34.3896%" y="181" width="1.7938%" height="15" fill="rgb(251,115,12)"/><text x="34.6396%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,234,784 samples, 0.19%)</title><rect x="35.9919%" y="165" width="0.1915%" height="15" fill="rgb(240,54,50)"/><text x="36.2419%" y="175.50"></text></g><g><title>codegen_crate (30,137,792 samples, 4.67%)</title><rect x="31.5328%" y="197" width="4.6738%" height="15" fill="rgb(233,84,52)"/><text x="31.7828%" y="207.50">codeg..</text></g><g><title>codegen_module_optimize (133,077,320 samples, 20.64%)</title><rect x="36.2065%" y="197" width="20.6377%" height="15" fill="rgb(207,117,47)"/><text x="36.4565%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (122,709,793 samples, 19.03%)</title><rect x="37.8143%" y="181" width="19.0299%" height="15" fill="rgb(249,43,39)"/><text x="38.0643%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (47,224,964 samples, 7.32%)</title><rect x="57.7166%" y="181" width="7.3237%" height="15" fill="rgb(209,38,44)"/><text x="57.9666%" y="191.50">LLVM_lto_o..</text></g><g><title>LLVM_module_codegen (68,752,077 samples, 10.66%)</title><rect x="65.0402%" y="181" width="10.6621%" height="15" fill="rgb(236,212,23)"/><text x="65.2902%" y="191.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (67,582,565 samples, 10.48%)</title><rect x="65.2216%" y="165" width="10.4807%" height="15" fill="rgb(242,79,21)"/><text x="65.4716%" y="175.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (2,394,026 samples, 0.37%)</title><rect x="75.7023%" y="181" width="0.3713%" height="15" fill="rgb(211,96,35)"/><text x="75.9523%" y="191.50"></text></g><g><title>codegen_module_perform_lto (124,303,315 samples, 19.28%)</title><rect x="56.8442%" y="197" width="19.2770%" height="15" fill="rgb(253,215,40)"/><text x="57.0942%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (11,596,237 samples, 1.80%)</title><rect x="76.1910%" y="181" width="1.7983%" height="15" fill="rgb(211,81,21)"/><text x="76.4410%" y="191.50">m..</text></g><g><title>expand_crate (11,582,497 samples, 1.80%)</title><rect x="76.1932%" y="165" width="1.7962%" height="15" fill="rgb(208,190,38)"/><text x="76.4432%" y="175.50">e..</text></g><g><title>metadata_register_crate (2,400,347 samples, 0.37%)</title><rect x="77.6171%" y="149" width="0.3722%" height="15" fill="rgb(235,213,38)"/><text x="77.8671%" y="159.50"></text></g><g><title>metadata_register_crate (1,882,221 samples, 0.29%)</title><rect x="77.6975%" y="133" width="0.2919%" height="15" fill="rgb(237,122,38)"/><text x="77.9475%" y="143.50"></text></g><g><title>metadata_register_crate (863,089 samples, 0.13%)</title><rect x="77.8555%" y="117" width="0.1338%" height="15" fill="rgb(244,218,35)"/><text x="78.1055%" y="127.50"></text></g><g><title>late_resolve_crate (1,757,459 samples, 0.27%)</title><rect x="78.0648%" y="165" width="0.2725%" height="15" fill="rgb(240,68,47)"/><text x="78.3148%" y="175.50"></text></g><g><title>configure_and_expand (14,385,608 samples, 2.23%)</title><rect x="76.1212%" y="197" width="2.2309%" height="15" fill="rgb(210,16,53)"/><text x="76.3712%" y="207.50">c..</text></g><g><title>resolve_crate (2,135,713 samples, 0.33%)</title><rect x="78.0209%" y="181" width="0.3312%" height="15" fill="rgb(235,124,12)"/><text x="78.2709%" y="191.50"></text></g><g><title>free_global_ctxt (4,876,354 samples, 0.76%)</title><rect x="78.4206%" y="197" width="0.7562%" height="15" fill="rgb(224,169,11)"/><text x="78.6706%" y="207.50"></text></g><g><title>generate_crate_metadata (1,466,416 samples, 0.23%)</title><rect x="79.1768%" y="197" width="0.2274%" height="15" fill="rgb(250,166,2)"/><text x="79.4268%" y="207.50"></text></g><g><title>hir_lowering (2,048,423 samples, 0.32%)</title><rect x="79.4042%" y="197" width="0.3177%" height="15" fill="rgb(242,216,29)"/><text x="79.6542%" y="207.50"></text></g><g><title>finish_ongoing_codegen (124,387,531 samples, 19.29%)</title><rect x="79.7247%" y="181" width="19.2900%" height="15" fill="rgb(230,116,27)"/><text x="79.9747%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (983,151 samples, 0.15%)</title><rect x="99.0148%" y="181" width="0.1525%" height="15" fill="rgb(228,99,48)"/><text x="99.2648%" y="191.50"></text></g><g><title>link_binary (954,950 samples, 0.15%)</title><rect x="99.0192%" y="165" width="0.1481%" height="15" fill="rgb(253,11,6)"/><text x="99.2692%" y="175.50"></text></g><g><title>link (125,398,793 samples, 19.45%)</title><rect x="79.7219%" y="197" width="19.4469%" height="15" fill="rgb(247,143,39)"/><text x="79.9719%" y="207.50">link</text></g><g><title>parse_crate (2,903,482 samples, 0.45%)</title><rect x="99.1688%" y="197" width="0.4503%" height="15" fill="rgb(236,97,10)"/><text x="99.4188%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,695,288 samples, 0.26%)</title><rect x="99.6683%" y="197" width="0.2629%" height="15" fill="rgb(233,208,19)"/><text x="99.9183%" y="207.50"></text></g><g><title>all (644,827,668 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (644,827,668 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>