<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,614,367 samples, 19.99%)</title><rect x="0.6224%" y="197" width="19.9893%" height="15" fill="rgb(227,0,7)"/><text x="0.8724%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (265,772 samples, 0.23%)</title><rect x="21.9803%" y="85" width="0.2349%" height="15" fill="rgb(217,0,24)"/><text x="22.2303%" y="95.50"></text></g><g><title>is_copy_raw (169,451 samples, 0.15%)</title><rect x="22.0654%" y="69" width="0.1498%" height="15" fill="rgb(221,193,54)"/><text x="22.3154%" y="79.50"></text></g><g><title>evaluate_obligation (161,261 samples, 0.14%)</title><rect x="22.0726%" y="53" width="0.1425%" height="15" fill="rgb(248,212,6)"/><text x="22.3226%" y="63.50"></text></g><g><title>trait_impls_of (131,501 samples, 0.12%)</title><rect x="22.0989%" y="37" width="0.1162%" height="15" fill="rgb(208,68,35)"/><text x="22.3489%" y="47.50"></text></g><g><title>mir_const (727,088 samples, 0.64%)</title><rect x="21.6513%" y="133" width="0.6427%" height="15" fill="rgb(232,128,0)"/><text x="21.9013%" y="143.50"></text></g><g><title>unsafety_check_result (610,747 samples, 0.54%)</title><rect x="21.7542%" y="117" width="0.5399%" height="15" fill="rgb(207,160,47)"/><text x="22.0042%" y="127.50"></text></g><g><title>mir_built (544,676 samples, 0.48%)</title><rect x="21.8126%" y="101" width="0.4815%" height="15" fill="rgb(228,23,34)"/><text x="22.0626%" y="111.50"></text></g><g><title>mir_promoted (839,849 samples, 0.74%)</title><rect x="21.5572%" y="149" width="0.7424%" height="15" fill="rgb(218,30,26)"/><text x="21.8072%" y="159.50"></text></g><g><title>MIR_borrow_checking (1,923,431 samples, 1.70%)</title><rect x="20.7549%" y="181" width="1.7002%" height="15" fill="rgb(220,122,19)"/><text x="21.0049%" y="191.50"></text></g><g><title>mir_borrowck (1,915,521 samples, 1.69%)</title><rect x="20.7619%" y="165" width="1.6932%" height="15" fill="rgb(250,228,42)"/><text x="21.0119%" y="175.50"></text></g><g><title>hir_module_items (139,811 samples, 0.12%)</title><rect x="22.4581%" y="181" width="0.1236%" height="15" fill="rgb(240,193,28)"/><text x="22.7081%" y="191.50"></text></g><g><title>should_inherit_track_caller (166,801 samples, 0.15%)</title><rect x="22.8470%" y="133" width="0.1474%" height="15" fill="rgb(216,20,37)"/><text x="23.0970%" y="143.50"></text></g><g><title>codegen_fn_attrs (364,404 samples, 0.32%)</title><rect x="22.6984%" y="149" width="0.3221%" height="15" fill="rgb(206,188,39)"/><text x="22.9484%" y="159.50"></text></g><g><title>check_mod_attrs (467,755 samples, 0.41%)</title><rect x="22.6074%" y="165" width="0.4135%" height="15" fill="rgb(217,207,13)"/><text x="22.8574%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (263,333 samples, 0.23%)</title><rect x="23.0910%" y="165" width="0.2328%" height="15" fill="rgb(231,73,38)"/><text x="23.3410%" y="175.50"></text></g><g><title>misc_checking_1 (882,329 samples, 0.78%)</title><rect x="22.5820%" y="181" width="0.7799%" height="15" fill="rgb(225,20,46)"/><text x="22.8320%" y="191.50"></text></g><g><title>misc_checking_2 (142,482 samples, 0.13%)</title><rect x="23.3620%" y="181" width="0.1259%" height="15" fill="rgb(210,31,41)"/><text x="23.6120%" y="191.50"></text></g><g><title>crate_lints (1,794,679 samples, 1.59%)</title><rect x="23.6299%" y="149" width="1.5864%" height="15" fill="rgb(221,200,47)"/><text x="23.8799%" y="159.50"></text></g><g><title>type_of (1,038,741 samples, 0.92%)</title><rect x="24.2981%" y="133" width="0.9182%" height="15" fill="rgb(226,26,5)"/><text x="24.5481%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (769,289 samples, 0.68%)</title><rect x="24.5363%" y="117" width="0.6800%" height="15" fill="rgb(249,33,26)"/><text x="24.7863%" y="127.50"></text></g><g><title>lint_checking (1,870,630 samples, 1.65%)</title><rect x="23.6286%" y="165" width="1.6535%" height="15" fill="rgb(235,183,28)"/><text x="23.8786%" y="175.50"></text></g><g><title>misc_checking_3 (2,198,114 samples, 1.94%)</title><rect x="23.4879%" y="181" width="1.9430%" height="15" fill="rgb(221,5,38)"/><text x="23.7379%" y="191.50">m..</text></g><g><title>impl_parent (1,631,182 samples, 1.44%)</title><rect x="27.8728%" y="117" width="1.4418%" height="15" fill="rgb(247,18,42)"/><text x="28.1228%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (965,861 samples, 0.85%)</title><rect x="28.4609%" y="101" width="0.8537%" height="15" fill="rgb(241,131,45)"/><text x="28.7109%" y="111.50"></text></g><g><title>impl_trait_ref (6,226,759 samples, 5.50%)</title><rect x="29.3147%" y="117" width="5.5040%" height="15" fill="rgb(249,31,29)"/><text x="29.5647%" y="127.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,569,665 samples, 4.92%)</title><rect x="29.8955%" y="101" width="4.9231%" height="15" fill="rgb(225,111,53)"/><text x="30.1455%" y="111.50">metada..</text></g><g><title>coherent_trait (11,208,503 samples, 9.91%)</title><rect x="25.4656%" y="149" width="9.9074%" height="15" fill="rgb(238,160,17)"/><text x="25.7156%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (11,187,773 samples, 9.89%)</title><rect x="25.4839%" y="133" width="9.8891%" height="15" fill="rgb(214,148,48)"/><text x="25.7339%" y="143.50">specialization..</text></g><g><title>trait_impls_of (624,718 samples, 0.55%)</title><rect x="34.8208%" y="117" width="0.5522%" height="15" fill="rgb(232,36,49)"/><text x="35.0708%" y="127.50"></text></g><g><title>implementations_of_trait (161,233 samples, 0.14%)</title><rect x="35.2305%" y="101" width="0.1425%" height="15" fill="rgb(209,103,24)"/><text x="35.4805%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (129,723 samples, 0.11%)</title><rect x="35.2583%" y="85" width="0.1147%" height="15" fill="rgb(229,88,8)"/><text x="35.5083%" y="95.50"></text></g><g><title>coherence_checking (11,276,514 samples, 9.97%)</title><rect x="25.4495%" y="165" width="9.9676%" height="15" fill="rgb(213,181,19)"/><text x="25.6995%" y="175.50">coherence_chec..</text></g><g><title>object_safety_violations (161,382 samples, 0.14%)</title><rect x="36.7335%" y="117" width="0.1426%" height="15" fill="rgb(254,191,54)"/><text x="36.9835%" y="127.50"></text></g><g><title>item_bodies_checking (1,842,730 samples, 1.63%)</title><rect x="35.4386%" y="165" width="1.6288%" height="15" fill="rgb(241,83,37)"/><text x="35.6886%" y="175.50"></text></g><g><title>typeck_item_bodies (1,840,820 samples, 1.63%)</title><rect x="35.4402%" y="149" width="1.6271%" height="15" fill="rgb(233,36,39)"/><text x="35.6902%" y="159.50"></text></g><g><title>typeck (1,833,800 samples, 1.62%)</title><rect x="35.4464%" y="133" width="1.6209%" height="15" fill="rgb(226,3,54)"/><text x="35.6964%" y="143.50"></text></g><g><title>impl_trait_ref (153,903 samples, 0.14%)</title><rect x="37.3250%" y="85" width="0.1360%" height="15" fill="rgb(245,192,40)"/><text x="37.5750%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (134,513 samples, 0.12%)</title><rect x="37.3421%" y="69" width="0.1189%" height="15" fill="rgb(238,167,29)"/><text x="37.5921%" y="79.50"></text></g><g><title>adt_destructor (343,724 samples, 0.30%)</title><rect x="37.1872%" y="133" width="0.3038%" height="15" fill="rgb(232,182,51)"/><text x="37.4372%" y="143.50"></text></g><g><title>coherent_trait (339,944 samples, 0.30%)</title><rect x="37.1905%" y="117" width="0.3005%" height="15" fill="rgb(231,60,39)"/><text x="37.4405%" y="127.50"></text></g><g><title>specialization_graph_of (338,234 samples, 0.30%)</title><rect x="37.1920%" y="101" width="0.2990%" height="15" fill="rgb(208,69,12)"/><text x="37.4420%" y="111.50"></text></g><g><title>item_types_checking (515,416 samples, 0.46%)</title><rect x="37.0674%" y="165" width="0.4556%" height="15" fill="rgb(235,93,37)"/><text x="37.3174%" y="175.50"></text></g><g><title>check_mod_item_types (513,516 samples, 0.45%)</title><rect x="37.0691%" y="149" width="0.4539%" height="15" fill="rgb(213,116,39)"/><text x="37.3191%" y="159.50"></text></g><g><title>fn_sig (180,423 samples, 0.16%)</title><rect x="37.6485%" y="133" width="0.1595%" height="15" fill="rgb(222,207,29)"/><text x="37.8985%" y="143.50"></text></g><g><title>associated_items (136,071 samples, 0.12%)</title><rect x="38.0707%" y="85" width="0.1203%" height="15" fill="rgb(206,96,30)"/><text x="38.3207%" y="95.50"></text></g><g><title>named_region_map (433,384 samples, 0.38%)</title><rect x="37.8731%" y="117" width="0.3831%" height="15" fill="rgb(218,138,4)"/><text x="38.1231%" y="127.50"></text></g><g><title>resolve_lifetimes (417,894 samples, 0.37%)</title><rect x="37.8867%" y="101" width="0.3694%" height="15" fill="rgb(250,191,14)"/><text x="38.1367%" y="111.50"></text></g><g><title>generics_of (524,775 samples, 0.46%)</title><rect x="37.8080%" y="133" width="0.4639%" height="15" fill="rgb(239,60,40)"/><text x="38.0580%" y="143.50"></text></g><g><title>explicit_predicates_of (171,351 samples, 0.15%)</title><rect x="38.3476%" y="101" width="0.1515%" height="15" fill="rgb(206,27,48)"/><text x="38.5976%" y="111.50"></text></g><g><title>predicates_of (330,063 samples, 0.29%)</title><rect x="38.2986%" y="133" width="0.2917%" height="15" fill="rgb(225,35,8)"/><text x="38.5486%" y="143.50"></text></g><g><title>predicates_defined_on (307,723 samples, 0.27%)</title><rect x="38.3184%" y="117" width="0.2720%" height="15" fill="rgb(250,213,24)"/><text x="38.5684%" y="127.50"></text></g><g><title>type_collecting (1,338,095 samples, 1.18%)</title><rect x="37.5242%" y="165" width="1.1828%" height="15" fill="rgb(247,123,22)"/><text x="37.7742%" y="175.50"></text></g><g><title>collect_mod_item_types (1,326,355 samples, 1.17%)</title><rect x="37.5346%" y="149" width="1.1724%" height="15" fill="rgb(231,138,38)"/><text x="37.7846%" y="159.50"></text></g><g><title>check_impl_item_well_formed (271,704 samples, 0.24%)</title><rect x="38.7348%" y="149" width="0.2402%" height="15" fill="rgb(231,145,46)"/><text x="38.9848%" y="159.50"></text></g><g><title>param_env (136,211 samples, 0.12%)</title><rect x="39.2062%" y="133" width="0.1204%" height="15" fill="rgb(251,118,11)"/><text x="39.4562%" y="143.50"></text></g><g><title>check_item_well_formed (468,834 samples, 0.41%)</title><rect x="38.9749%" y="149" width="0.4144%" height="15" fill="rgb(217,147,25)"/><text x="39.2249%" y="159.50"></text></g><g><title>evaluate_obligation (114,621 samples, 0.10%)</title><rect x="39.5921%" y="133" width="0.1013%" height="15" fill="rgb(247,81,37)"/><text x="39.8421%" y="143.50"></text></g><g><title>analysis (21,861,430 samples, 19.32%)</title><rect x="20.6117%" y="197" width="19.3238%" height="15" fill="rgb(209,12,38)"/><text x="20.8617%" y="207.50">analysis</text></g><g><title>type_check_crate (16,409,460 samples, 14.50%)</title><rect x="25.4309%" y="181" width="14.5047%" height="15" fill="rgb(227,1,9)"/><text x="25.6809%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,389,285 samples, 1.23%)</title><rect x="38.7075%" y="165" width="1.2280%" height="15" fill="rgb(248,47,43)"/><text x="38.9575%" y="175.50"></text></g><g><title>check_trait_item_well_formed (617,907 samples, 0.55%)</title><rect x="39.3894%" y="149" width="0.5462%" height="15" fill="rgb(221,10,30)"/><text x="39.6394%" y="159.50"></text></g><g><title>is_unpin_raw (123,631 samples, 0.11%)</title><rect x="41.3581%" y="149" width="0.1093%" height="15" fill="rgb(210,229,1)"/><text x="41.6081%" y="159.50"></text></g><g><title>evaluate_obligation (118,091 samples, 0.10%)</title><rect x="41.3630%" y="133" width="0.1044%" height="15" fill="rgb(222,148,37)"/><text x="41.6130%" y="143.50"></text></g><g><title>fn_abi_of_instance (414,295 samples, 0.37%)</title><rect x="41.1880%" y="165" width="0.3662%" height="15" fill="rgb(234,67,33)"/><text x="41.4380%" y="175.50"></text></g><g><title>codegen_module (1,382,845 samples, 1.22%)</title><rect x="40.3973%" y="181" width="1.2223%" height="15" fill="rgb(247,98,35)"/><text x="40.6473%" y="191.50"></text></g><g><title>optimized_mir (581,065 samples, 0.51%)</title><rect x="41.8191%" y="133" width="0.5136%" height="15" fill="rgb(247,138,52)"/><text x="42.0691%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (206,963 samples, 0.18%)</title><rect x="42.1497%" y="117" width="0.1829%" height="15" fill="rgb(213,79,30)"/><text x="42.3997%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (936,751 samples, 0.83%)</title><rect x="41.6473%" y="149" width="0.8280%" height="15" fill="rgb(246,177,23)"/><text x="41.8973%" y="159.50"></text></g><g><title>vtable_entries (135,471 samples, 0.12%)</title><rect x="42.3556%" y="133" width="0.1197%" height="15" fill="rgb(230,62,27)"/><text x="42.6056%" y="143.50"></text></g><g><title>monomorphization_collector (963,131 samples, 0.85%)</title><rect x="41.6457%" y="165" width="0.8513%" height="15" fill="rgb(216,154,8)"/><text x="41.8957%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,072,202 samples, 0.95%)</title><rect x="41.6203%" y="181" width="0.9477%" height="15" fill="rgb(244,35,45)"/><text x="41.8703%" y="191.50"></text></g><g><title>codegen_crate (3,050,993 samples, 2.70%)</title><rect x="39.9452%" y="197" width="2.6968%" height="15" fill="rgb(251,115,12)"/><text x="40.1952%" y="207.50">co..</text></g><g><title>codegen_module_optimize (7,067,816 samples, 6.25%)</title><rect x="42.6420%" y="197" width="6.2474%" height="15" fill="rgb(240,54,50)"/><text x="42.8920%" y="207.50">codegen_..</text></g><g><title>LLVM_module_optimize (5,938,155 samples, 5.25%)</title><rect x="43.6405%" y="181" width="5.2489%" height="15" fill="rgb(233,84,52)"/><text x="43.8905%" y="191.50">LLVM_m..</text></g><g><title>LLVM_lto_optimize (3,854,122 samples, 3.41%)</title><rect x="49.6085%" y="181" width="3.4067%" height="15" fill="rgb(207,117,47)"/><text x="49.8585%" y="191.50">LLV..</text></g><g><title>LLVM_module_codegen (10,351,784 samples, 9.15%)</title><rect x="53.0153%" y="181" width="9.1502%" height="15" fill="rgb(249,43,39)"/><text x="53.2653%" y="191.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (10,243,963 samples, 9.05%)</title><rect x="53.1106%" y="165" width="9.0549%" height="15" fill="rgb(209,38,44)"/><text x="53.3606%" y="175.50">LLVM_module_c..</text></g><g><title>codegen_module_perform_lto (15,118,296 samples, 13.36%)</title><rect x="48.8894%" y="197" width="13.3634%" height="15" fill="rgb(236,212,23)"/><text x="49.1394%" y="207.50">codegen_module_perfo..</text></g><g><title>macro_expand_crate (14,199,756 samples, 12.55%)</title><rect x="62.6413%" y="181" width="12.5515%" height="15" fill="rgb(242,79,21)"/><text x="62.8913%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (14,174,476 samples, 12.53%)</title><rect x="62.6636%" y="165" width="12.5291%" height="15" fill="rgb(211,96,35)"/><text x="62.9136%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (3,086,714 samples, 2.73%)</title><rect x="72.4643%" y="149" width="2.7284%" height="15" fill="rgb(253,215,40)"/><text x="72.7143%" y="159.50">me..</text></g><g><title>metadata_register_crate (1,038,813 samples, 0.92%)</title><rect x="74.2745%" y="133" width="0.9182%" height="15" fill="rgb(211,81,21)"/><text x="74.5245%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (116,882 samples, 0.10%)</title><rect x="75.1977%" y="181" width="0.1033%" height="15" fill="rgb(208,190,38)"/><text x="75.4477%" y="191.50"></text></g><g><title>late_resolve_crate (1,164,383 samples, 1.03%)</title><rect x="75.3714%" y="165" width="1.0292%" height="15" fill="rgb(235,213,38)"/><text x="75.6214%" y="175.50"></text></g><g><title>configure_and_expand (16,070,346 samples, 14.20%)</title><rect x="62.2528%" y="197" width="14.2049%" height="15" fill="rgb(237,122,38)"/><text x="62.5028%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,308,574 samples, 1.16%)</title><rect x="75.3010%" y="181" width="1.1567%" height="15" fill="rgb(244,218,35)"/><text x="75.5510%" y="191.50"></text></g><g><title>early_lint_checks (155,521 samples, 0.14%)</title><rect x="76.5190%" y="197" width="0.1375%" height="15" fill="rgb(240,68,47)"/><text x="76.7690%" y="207.50"></text></g><g><title>free_global_ctxt (2,656,949 samples, 2.35%)</title><rect x="76.6565%" y="197" width="2.3485%" height="15" fill="rgb(210,16,53)"/><text x="76.9065%" y="207.50">f..</text></g><g><title>generate_crate_metadata (515,326 samples, 0.46%)</title><rect x="79.0050%" y="197" width="0.4555%" height="15" fill="rgb(235,124,12)"/><text x="79.2550%" y="207.50"></text></g><g><title>hir_lowering (887,299 samples, 0.78%)</title><rect x="79.4605%" y="197" width="0.7843%" height="15" fill="rgb(224,169,11)"/><text x="79.7105%" y="207.50"></text></g><g><title>finish_ongoing_codegen (19,717,615 samples, 17.43%)</title><rect x="80.2570%" y="181" width="17.4288%" height="15" fill="rgb(250,166,2)"/><text x="80.5070%" y="191.50">finish_ongoing_codegen</text></g><g><title>join_worker_thread (122,231 samples, 0.11%)</title><rect x="97.5777%" y="165" width="0.1080%" height="15" fill="rgb(242,216,29)"/><text x="97.8277%" y="175.50"></text></g><g><title>link_crate (596,166 samples, 0.53%)</title><rect x="97.6858%" y="181" width="0.5270%" height="15" fill="rgb(230,116,27)"/><text x="97.9358%" y="191.50"></text></g><g><title>link_binary (587,166 samples, 0.52%)</title><rect x="97.6937%" y="165" width="0.5190%" height="15" fill="rgb(228,99,48)"/><text x="97.9437%" y="175.50"></text></g><g><title>link_rlib (335,724 samples, 0.30%)</title><rect x="97.9160%" y="149" width="0.2968%" height="15" fill="rgb(253,11,6)"/><text x="98.1660%" y="159.50"></text></g><g><title>link (20,334,882 samples, 17.97%)</title><rect x="80.2448%" y="197" width="17.9744%" height="15" fill="rgb(247,143,39)"/><text x="80.4948%" y="207.50">link</text></g><g><title>parse_crate (867,870 samples, 0.77%)</title><rect x="98.2192%" y="197" width="0.7671%" height="15" fill="rgb(236,97,10)"/><text x="98.4692%" y="207.50"></text></g><g><title>prepare_outputs (345,274 samples, 0.31%)</title><rect x="98.9950%" y="197" width="0.3052%" height="15" fill="rgb(233,208,19)"/><text x="99.2450%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (406,454 samples, 0.36%)</title><rect x="99.3002%" y="197" width="0.3593%" height="15" fill="rgb(216,164,2)"/><text x="99.5502%" y="207.50"></text></g><g><title>setup_global_ctxt (125,602 samples, 0.11%)</title><rect x="99.6603%" y="197" width="0.1110%" height="15" fill="rgb(220,129,5)"/><text x="99.9103%" y="207.50"></text></g><g><title>all (113,132,247 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (113,132,247 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (258,763 samples, 0.23%)</title><rect x="99.7713%" y="197" width="0.2287%" height="15" fill="rgb(251,28,31)"/><text x="100.0213%" y="207.50"></text></g></svg></svg>