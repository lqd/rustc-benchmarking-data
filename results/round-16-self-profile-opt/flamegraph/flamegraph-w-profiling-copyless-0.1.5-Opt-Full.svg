<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,218,218 samples, 7.06%)</title><rect x="0.9397%" y="229" width="7.0569%" height="15" fill="rgb(227,0,7)"/><text x="1.1897%" y="239.50">LLVM_pass..</text></g><g><title>codegen_generate_lto_work (113,481 samples, 0.15%)</title><rect x="7.8432%" y="213" width="0.1535%" height="15" fill="rgb(217,0,24)"/><text x="8.0932%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (102,661 samples, 0.14%)</title><rect x="7.8578%" y="197" width="0.1388%" height="15" fill="rgb(221,193,54)"/><text x="8.1078%" y="207.50"></text></g><g><title>param_env (235,483 samples, 0.32%)</title><rect x="12.6062%" y="149" width="0.3185%" height="15" fill="rgb(248,212,6)"/><text x="12.8562%" y="159.50"></text></g><g><title>item_attrs (162,212 samples, 0.22%)</title><rect x="13.2846%" y="117" width="0.2194%" height="15" fill="rgb(208,68,35)"/><text x="13.5346%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (157,052 samples, 0.21%)</title><rect x="13.2916%" y="101" width="0.2124%" height="15" fill="rgb(232,128,0)"/><text x="13.5416%" y="111.50"></text></g><g><title>codegen_fn_attrs (248,113 samples, 0.34%)</title><rect x="13.1793%" y="133" width="0.3355%" height="15" fill="rgb(207,160,47)"/><text x="13.4293%" y="143.50"></text></g><g><title>is_copy_raw (178,962 samples, 0.24%)</title><rect x="14.5319%" y="117" width="0.2420%" height="15" fill="rgb(228,23,34)"/><text x="14.7819%" y="127.50"></text></g><g><title>evaluate_obligation (159,542 samples, 0.22%)</title><rect x="14.5582%" y="101" width="0.2158%" height="15" fill="rgb(218,30,26)"/><text x="14.8082%" y="111.50"></text></g><g><title>predicates_of (78,560 samples, 0.11%)</title><rect x="15.2073%" y="69" width="0.1062%" height="15" fill="rgb(220,122,19)"/><text x="15.4573%" y="79.50"></text></g><g><title>needs_drop_raw (403,914 samples, 0.55%)</title><rect x="14.7739%" y="117" width="0.5462%" height="15" fill="rgb(250,228,42)"/><text x="15.0239%" y="127.50"></text></g><g><title>is_copy_raw (342,613 samples, 0.46%)</title><rect x="14.8568%" y="101" width="0.4633%" height="15" fill="rgb(240,193,28)"/><text x="15.1068%" y="111.50"></text></g><g><title>evaluate_obligation (292,353 samples, 0.40%)</title><rect x="14.9248%" y="85" width="0.3954%" height="15" fill="rgb(216,20,37)"/><text x="15.1748%" y="95.50"></text></g><g><title>specialization_graph_of (81,401 samples, 0.11%)</title><rect x="15.4318%" y="101" width="0.1101%" height="15" fill="rgb(206,188,39)"/><text x="15.6818%" y="111.50"></text></g><g><title>resolve_instance (225,083 samples, 0.30%)</title><rect x="15.3202%" y="117" width="0.3044%" height="15" fill="rgb(217,207,13)"/><text x="15.5702%" y="127.50"></text></g><g><title>thir_body (266,722 samples, 0.36%)</title><rect x="15.6389%" y="117" width="0.3607%" height="15" fill="rgb(231,73,38)"/><text x="15.8889%" y="127.50"></text></g><g><title>mir_const (2,879,701 samples, 3.89%)</title><rect x="12.1216%" y="165" width="3.8944%" height="15" fill="rgb(225,20,46)"/><text x="12.3716%" y="175.50">mir_..</text></g><g><title>unsafety_check_result (2,285,865 samples, 3.09%)</title><rect x="12.9246%" y="149" width="3.0913%" height="15" fill="rgb(210,31,41)"/><text x="13.1746%" y="159.50">uns..</text></g><g><title>mir_built (1,849,430 samples, 2.50%)</title><rect x="13.5149%" y="133" width="2.5011%" height="15" fill="rgb(221,200,47)"/><text x="13.7649%" y="143.50">mi..</text></g><g><title>mir_promoted (3,141,236 samples, 4.25%)</title><rect x="11.7893%" y="181" width="4.2481%" height="15" fill="rgb(226,26,5)"/><text x="12.0393%" y="191.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (132,141 samples, 0.18%)</title><rect x="16.0373%" y="181" width="0.1787%" height="15" fill="rgb(249,33,26)"/><text x="16.2873%" y="191.50"></text></g><g><title>MIR_borrow_checking (6,317,730 samples, 8.54%)</title><rect x="8.2893%" y="213" width="8.5438%" height="15" fill="rgb(235,183,28)"/><text x="8.5393%" y="223.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (6,292,160 samples, 8.51%)</title><rect x="8.3239%" y="197" width="8.5092%" height="15" fill="rgb(221,5,38)"/><text x="8.5739%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (396,723 samples, 0.54%)</title><rect x="16.2966%" y="181" width="0.5365%" height="15" fill="rgb(247,18,42)"/><text x="16.5466%" y="191.50"></text></g><g><title>hir_module_items (167,781 samples, 0.23%)</title><rect x="16.8411%" y="213" width="0.2269%" height="15" fill="rgb(241,131,45)"/><text x="17.0911%" y="223.50"></text></g><g><title>should_inherit_track_caller (118,601 samples, 0.16%)</title><rect x="17.4769%" y="165" width="0.1604%" height="15" fill="rgb(249,31,29)"/><text x="17.7269%" y="175.50"></text></g><g><title>codegen_fn_attrs (307,845 samples, 0.42%)</title><rect x="17.2802%" y="181" width="0.4163%" height="15" fill="rgb(225,111,53)"/><text x="17.5302%" y="191.50"></text></g><g><title>check_mod_attrs (435,916 samples, 0.59%)</title><rect x="17.1072%" y="197" width="0.5895%" height="15" fill="rgb(238,160,17)"/><text x="17.3572%" y="207.50"></text></g><g><title>lookup_deprecation_entry (161,761 samples, 0.22%)</title><rect x="18.0782%" y="181" width="0.2188%" height="15" fill="rgb(214,148,48)"/><text x="18.3282%" y="191.50"></text></g><g><title>stability_index (82,151 samples, 0.11%)</title><rect x="18.1858%" y="165" width="0.1111%" height="15" fill="rgb(232,36,49)"/><text x="18.4358%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (411,275 samples, 0.56%)</title><rect x="17.8590%" y="197" width="0.5562%" height="15" fill="rgb(209,103,24)"/><text x="18.1090%" y="207.50"></text></g><g><title>misc_checking_1 (1,073,532 samples, 1.45%)</title><rect x="17.0685%" y="213" width="1.4518%" height="15" fill="rgb(229,88,8)"/><text x="17.3185%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (249,023 samples, 0.34%)</title><rect x="18.5241%" y="197" width="0.3368%" height="15" fill="rgb(213,181,19)"/><text x="18.7741%" y="207.50"></text></g><g><title>check_mod_liveness (189,872 samples, 0.26%)</title><rect x="18.6041%" y="181" width="0.2568%" height="15" fill="rgb(254,191,54)"/><text x="18.8541%" y="191.50"></text></g><g><title>misc_checking_2 (499,785 samples, 0.68%)</title><rect x="18.5203%" y="213" width="0.6759%" height="15" fill="rgb(241,83,37)"/><text x="18.7703%" y="223.50"></text></g><g><title>match_checking (247,952 samples, 0.34%)</title><rect x="18.8609%" y="197" width="0.3353%" height="15" fill="rgb(233,36,39)"/><text x="19.1109%" y="207.50"></text></g><g><title>check_match (233,772 samples, 0.32%)</title><rect x="18.8801%" y="181" width="0.3161%" height="15" fill="rgb(226,3,54)"/><text x="19.1301%" y="191.50"></text></g><g><title>death_checking (105,951 samples, 0.14%)</title><rect x="19.2877%" y="197" width="0.1433%" height="15" fill="rgb(245,192,40)"/><text x="19.5377%" y="207.50"></text></g><g><title>param_env (103,221 samples, 0.14%)</title><rect x="20.0341%" y="165" width="0.1396%" height="15" fill="rgb(238,167,29)"/><text x="20.2841%" y="175.50"></text></g><g><title>crate_lints (3,337,347 samples, 4.51%)</title><rect x="19.4331%" y="181" width="4.5133%" height="15" fill="rgb(232,182,51)"/><text x="19.6831%" y="191.50">crate..</text></g><g><title>type_of (2,786,929 samples, 3.77%)</title><rect x="20.1775%" y="165" width="3.7689%" height="15" fill="rgb(231,60,39)"/><text x="20.4275%" y="175.50">type..</text></g><g><title>metadata_decode_entry_type_of (2,540,947 samples, 3.44%)</title><rect x="20.5101%" y="149" width="3.4363%" height="15" fill="rgb(208,69,12)"/><text x="20.7601%" y="159.50">met..</text></g><g><title>adt_sized_constraint (75,331 samples, 0.10%)</title><rect x="24.1679%" y="101" width="0.1019%" height="15" fill="rgb(235,93,37)"/><text x="24.4179%" y="111.50"></text></g><g><title>layout_of (118,261 samples, 0.16%)</title><rect x="24.1100%" y="133" width="0.1599%" height="15" fill="rgb(213,116,39)"/><text x="24.3600%" y="143.50"></text></g><g><title>layout_of (81,461 samples, 0.11%)</title><rect x="24.1598%" y="117" width="0.1102%" height="15" fill="rgb(222,207,29)"/><text x="24.4098%" y="127.50"></text></g><g><title>lint_checking (3,579,070 samples, 4.84%)</title><rect x="19.4310%" y="197" width="4.8402%" height="15" fill="rgb(206,96,30)"/><text x="19.6810%" y="207.50">lint_c..</text></g><g><title>module_lints (240,143 samples, 0.32%)</title><rect x="23.9464%" y="181" width="0.3248%" height="15" fill="rgb(218,138,4)"/><text x="24.1964%" y="191.50"></text></g><g><title>lint_mod (236,503 samples, 0.32%)</title><rect x="23.9513%" y="165" width="0.3198%" height="15" fill="rgb(250,191,14)"/><text x="24.2013%" y="175.50"></text></g><g><title>layout_of (141,221 samples, 0.19%)</title><rect x="24.0802%" y="149" width="0.1910%" height="15" fill="rgb(239,60,40)"/><text x="24.3302%" y="159.50"></text></g><g><title>privacy_checking_modules (132,461 samples, 0.18%)</title><rect x="24.3680%" y="197" width="0.1791%" height="15" fill="rgb(206,27,48)"/><text x="24.6180%" y="207.50"></text></g><g><title>check_mod_privacy (130,141 samples, 0.18%)</title><rect x="24.3711%" y="181" width="0.1760%" height="15" fill="rgb(225,35,8)"/><text x="24.6211%" y="191.50"></text></g><g><title>misc_checking_3 (3,968,974 samples, 5.37%)</title><rect x="19.1962%" y="213" width="5.3675%" height="15" fill="rgb(250,213,24)"/><text x="19.4462%" y="223.50">misc_ch..</text></g><g><title>impl_parent (170,462 samples, 0.23%)</title><rect x="25.0843%" y="149" width="0.2305%" height="15" fill="rgb(247,123,22)"/><text x="25.3343%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,171 samples, 0.16%)</title><rect x="25.1523%" y="133" width="0.1625%" height="15" fill="rgb(231,138,38)"/><text x="25.4023%" y="143.50"></text></g><g><title>impl_trait_ref (625,795 samples, 0.85%)</title><rect x="25.3148%" y="149" width="0.8463%" height="15" fill="rgb(231,145,46)"/><text x="25.5648%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (574,755 samples, 0.78%)</title><rect x="25.3838%" y="133" width="0.7773%" height="15" fill="rgb(251,118,11)"/><text x="25.6338%" y="143.50"></text></g><g><title>coherent_trait (1,206,423 samples, 1.63%)</title><rect x="24.6755%" y="181" width="1.6315%" height="15" fill="rgb(217,147,25)"/><text x="24.9255%" y="191.50"></text></g><g><title>specialization_graph_of (1,194,173 samples, 1.61%)</title><rect x="24.6921%" y="165" width="1.6149%" height="15" fill="rgb(247,81,37)"/><text x="24.9421%" y="175.50"></text></g><g><title>trait_impls_of (107,931 samples, 0.15%)</title><rect x="26.1611%" y="149" width="0.1460%" height="15" fill="rgb(209,12,38)"/><text x="26.4111%" y="159.50"></text></g><g><title>coherence_checking (1,293,084 samples, 1.75%)</title><rect x="24.6384%" y="197" width="1.7487%" height="15" fill="rgb(227,1,9)"/><text x="24.8884%" y="207.50"></text></g><g><title>adt_sized_constraint (97,401 samples, 0.13%)</title><rect x="35.5414%" y="149" width="0.1317%" height="15" fill="rgb(248,47,43)"/><text x="35.7914%" y="159.50"></text></g><g><title>associated_item (580,388 samples, 0.78%)</title><rect x="36.0126%" y="133" width="0.7849%" height="15" fill="rgb(221,10,30)"/><text x="36.2626%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (414,355 samples, 0.56%)</title><rect x="36.2371%" y="117" width="0.5604%" height="15" fill="rgb(210,229,1)"/><text x="36.4871%" y="127.50"></text></g><g><title>associated_items (868,030 samples, 1.17%)</title><rect x="35.6952%" y="149" width="1.1739%" height="15" fill="rgb(222,148,37)"/><text x="35.9452%" y="159.50"></text></g><g><title>adt_def (96,681 samples, 0.13%)</title><rect x="37.2803%" y="85" width="0.1307%" height="15" fill="rgb(234,67,33)"/><text x="37.5303%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (96,091 samples, 0.13%)</title><rect x="37.2811%" y="69" width="0.1299%" height="15" fill="rgb(247,98,35)"/><text x="37.5311%" y="79.50"></text></g><g><title>item_attrs (91,281 samples, 0.12%)</title><rect x="37.2876%" y="53" width="0.1234%" height="15" fill="rgb(247,138,52)"/><text x="37.5376%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (90,671 samples, 0.12%)</title><rect x="37.2884%" y="37" width="0.1226%" height="15" fill="rgb(213,79,30)"/><text x="37.5384%" y="47.50"></text></g><g><title>adt_dtorck_constraint (106,001 samples, 0.14%)</title><rect x="37.2734%" y="101" width="0.1434%" height="15" fill="rgb(246,177,23)"/><text x="37.5234%" y="111.50"></text></g><g><title>adt_dtorck_constraint (177,252 samples, 0.24%)</title><rect x="37.1847%" y="117" width="0.2397%" height="15" fill="rgb(230,62,27)"/><text x="37.4347%" y="127.50"></text></g><g><title>dropck_outlives (402,346 samples, 0.54%)</title><rect x="36.9485%" y="149" width="0.5441%" height="15" fill="rgb(216,154,8)"/><text x="37.1985%" y="159.50"></text></g><g><title>adt_dtorck_constraint (293,204 samples, 0.40%)</title><rect x="37.0961%" y="133" width="0.3965%" height="15" fill="rgb(244,35,45)"/><text x="37.3461%" y="143.50"></text></g><g><title>adt_def (87,651 samples, 0.12%)</title><rect x="38.3472%" y="101" width="0.1185%" height="15" fill="rgb(251,115,12)"/><text x="38.5972%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (87,081 samples, 0.12%)</title><rect x="38.3480%" y="85" width="0.1178%" height="15" fill="rgb(240,54,50)"/><text x="38.5980%" y="95.50"></text></g><g><title>adt_sized_constraint (97,731 samples, 0.13%)</title><rect x="38.3442%" y="117" width="0.1322%" height="15" fill="rgb(233,84,52)"/><text x="38.5942%" y="127.50"></text></g><g><title>adt_sized_constraint (169,553 samples, 0.23%)</title><rect x="38.2637%" y="133" width="0.2293%" height="15" fill="rgb(207,117,47)"/><text x="38.5137%" y="143.50"></text></g><g><title>predicates_of (103,410 samples, 0.14%)</title><rect x="38.6739%" y="133" width="0.1398%" height="15" fill="rgb(249,43,39)"/><text x="38.9239%" y="143.50"></text></g><g><title>specializes (217,592 samples, 0.29%)</title><rect x="38.8137%" y="133" width="0.2943%" height="15" fill="rgb(209,38,44)"/><text x="39.0637%" y="143.50"></text></g><g><title>param_env (197,252 samples, 0.27%)</title><rect x="38.8412%" y="117" width="0.2668%" height="15" fill="rgb(236,212,23)"/><text x="39.0912%" y="127.50"></text></g><g><title>def_span (172,572 samples, 0.23%)</title><rect x="38.8746%" y="101" width="0.2334%" height="15" fill="rgb(242,79,21)"/><text x="39.1246%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (170,822 samples, 0.23%)</title><rect x="38.8770%" y="85" width="0.2310%" height="15" fill="rgb(211,96,35)"/><text x="39.1270%" y="95.50"></text></g><g><title>evaluate_obligation (2,296,994 samples, 3.11%)</title><rect x="37.4926%" y="149" width="3.1064%" height="15" fill="rgb(253,215,40)"/><text x="37.7426%" y="159.50">eva..</text></g><g><title>trait_impls_of (1,093,971 samples, 1.48%)</title><rect x="39.1195%" y="133" width="1.4794%" height="15" fill="rgb(211,81,21)"/><text x="39.3695%" y="143.50"></text></g><g><title>implementations_of_trait (330,622 samples, 0.45%)</title><rect x="40.1518%" y="117" width="0.4471%" height="15" fill="rgb(208,190,38)"/><text x="40.4018%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (254,571 samples, 0.34%)</title><rect x="40.2547%" y="101" width="0.3443%" height="15" fill="rgb(235,213,38)"/><text x="40.5047%" y="111.50"></text></g><g><title>fn_sig (136,581 samples, 0.18%)</title><rect x="40.6342%" y="149" width="0.1847%" height="15" fill="rgb(237,122,38)"/><text x="40.8842%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (117,861 samples, 0.16%)</title><rect x="40.6595%" y="133" width="0.1594%" height="15" fill="rgb(244,218,35)"/><text x="40.9095%" y="143.50"></text></g><g><title>generics_of (129,881 samples, 0.18%)</title><rect x="40.8189%" y="149" width="0.1756%" height="15" fill="rgb(240,68,47)"/><text x="41.0689%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (84,311 samples, 0.11%)</title><rect x="40.8805%" y="133" width="0.1140%" height="15" fill="rgb(210,16,53)"/><text x="41.1305%" y="143.50"></text></g><g><title>impl_item_implementor_ids (104,551 samples, 0.14%)</title><rect x="40.9945%" y="149" width="0.1414%" height="15" fill="rgb(235,124,12)"/><text x="41.2445%" y="159.50"></text></g><g><title>associated_items (96,440 samples, 0.13%)</title><rect x="41.0055%" y="133" width="0.1304%" height="15" fill="rgb(224,169,11)"/><text x="41.2555%" y="143.50"></text></g><g><title>impl_trait_ref (77,731 samples, 0.11%)</title><rect x="41.1495%" y="149" width="0.1051%" height="15" fill="rgb(250,166,2)"/><text x="41.3995%" y="159.50"></text></g><g><title>item_attrs (239,523 samples, 0.32%)</title><rect x="41.2909%" y="149" width="0.3239%" height="15" fill="rgb(242,216,29)"/><text x="41.5409%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (232,373 samples, 0.31%)</title><rect x="41.3005%" y="133" width="0.3143%" height="15" fill="rgb(230,116,27)"/><text x="41.5505%" y="143.50"></text></g><g><title>evaluate_obligation (273,822 samples, 0.37%)</title><rect x="41.9488%" y="133" width="0.3703%" height="15" fill="rgb(228,99,48)"/><text x="42.1988%" y="143.50"></text></g><g><title>method_autoderef_steps (494,896 samples, 0.67%)</title><rect x="41.6838%" y="149" width="0.6693%" height="15" fill="rgb(253,11,6)"/><text x="41.9338%" y="159.50"></text></g><g><title>explicit_predicates_of (137,352 samples, 0.19%)</title><rect x="42.6859%" y="117" width="0.1857%" height="15" fill="rgb(247,143,39)"/><text x="42.9359%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (106,852 samples, 0.14%)</title><rect x="42.7271%" y="101" width="0.1445%" height="15" fill="rgb(236,97,10)"/><text x="42.9771%" y="111.50"></text></g><g><title>predicates_of (420,906 samples, 0.57%)</title><rect x="42.3873%" y="149" width="0.5692%" height="15" fill="rgb(233,208,19)"/><text x="42.6373%" y="159.50"></text></g><g><title>predicates_defined_on (295,304 samples, 0.40%)</title><rect x="42.5572%" y="133" width="0.3994%" height="15" fill="rgb(216,164,2)"/><text x="42.8072%" y="143.50"></text></g><g><title>type_of (83,290 samples, 0.11%)</title><rect x="43.0223%" y="149" width="0.1126%" height="15" fill="rgb(220,129,5)"/><text x="43.2723%" y="159.50"></text></g><g><title>associated_item (77,171 samples, 0.10%)</title><rect x="45.2888%" y="117" width="0.1044%" height="15" fill="rgb(242,17,10)"/><text x="45.5388%" y="127.50"></text></g><g><title>associated_items (129,991 samples, 0.18%)</title><rect x="45.2264%" y="133" width="0.1758%" height="15" fill="rgb(242,107,0)"/><text x="45.4764%" y="143.50"></text></g><g><title>evaluate_obligation (88,750 samples, 0.12%)</title><rect x="45.4743%" y="133" width="0.1200%" height="15" fill="rgb(251,28,31)"/><text x="45.7243%" y="143.50"></text></g><g><title>is_copy_raw (444,075 samples, 0.60%)</title><rect x="45.6949%" y="133" width="0.6005%" height="15" fill="rgb(233,223,10)"/><text x="45.9449%" y="143.50"></text></g><g><title>evaluate_obligation (428,015 samples, 0.58%)</title><rect x="45.7166%" y="117" width="0.5788%" height="15" fill="rgb(215,21,27)"/><text x="45.9666%" y="127.50"></text></g><g><title>trait_impls_of (323,944 samples, 0.44%)</title><rect x="45.8574%" y="101" width="0.4381%" height="15" fill="rgb(232,23,21)"/><text x="46.1074%" y="111.50"></text></g><g><title>implementations_of_trait (80,661 samples, 0.11%)</title><rect x="46.1864%" y="85" width="0.1091%" height="15" fill="rgb(244,5,23)"/><text x="46.4364%" y="95.50"></text></g><g><title>item_attrs (97,961 samples, 0.13%)</title><rect x="46.2955%" y="133" width="0.1325%" height="15" fill="rgb(226,81,46)"/><text x="46.5455%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (94,341 samples, 0.13%)</title><rect x="46.3004%" y="117" width="0.1276%" height="15" fill="rgb(247,70,30)"/><text x="46.5504%" y="127.50"></text></g><g><title>predicates_of (109,441 samples, 0.15%)</title><rect x="46.4841%" y="133" width="0.1480%" height="15" fill="rgb(212,68,19)"/><text x="46.7341%" y="143.50"></text></g><g><title>typeck (2,627,640 samples, 3.55%)</title><rect x="43.1349%" y="149" width="3.5535%" height="15" fill="rgb(240,187,13)"/><text x="43.3849%" y="159.50">type..</text></g><g><title>item_bodies_checking (15,007,206 samples, 20.30%)</title><rect x="26.4339%" y="197" width="20.2951%" height="15" fill="rgb(223,113,26)"/><text x="26.6839%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,003,116 samples, 20.29%)</title><rect x="26.4394%" y="181" width="20.2896%" height="15" fill="rgb(206,192,2)"/><text x="26.6894%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (14,975,716 samples, 20.25%)</title><rect x="26.4764%" y="165" width="20.2525%" height="15" fill="rgb(241,108,4)"/><text x="26.7264%" y="175.50">typeck</text></g><g><title>item_types_checking (392,965 samples, 0.53%)</title><rect x="46.7290%" y="197" width="0.5314%" height="15" fill="rgb(247,173,49)"/><text x="46.9790%" y="207.50"></text></g><g><title>check_mod_item_types (386,575 samples, 0.52%)</title><rect x="46.7376%" y="181" width="0.5228%" height="15" fill="rgb(224,114,35)"/><text x="46.9876%" y="191.50"></text></g><g><title>fn_sig (165,872 samples, 0.22%)</title><rect x="47.5438%" y="165" width="0.2243%" height="15" fill="rgb(245,159,27)"/><text x="47.7938%" y="175.50"></text></g><g><title>is_late_bound_map (128,621 samples, 0.17%)</title><rect x="47.8980%" y="149" width="0.1739%" height="15" fill="rgb(245,172,44)"/><text x="48.1480%" y="159.50"></text></g><g><title>resolve_lifetimes (123,021 samples, 0.17%)</title><rect x="47.9056%" y="133" width="0.1664%" height="15" fill="rgb(236,23,11)"/><text x="48.1556%" y="143.50"></text></g><g><title>named_region_map (103,161 samples, 0.14%)</title><rect x="48.0720%" y="149" width="0.1395%" height="15" fill="rgb(205,117,38)"/><text x="48.3220%" y="159.50"></text></g><g><title>resolve_lifetimes (96,381 samples, 0.13%)</title><rect x="48.0812%" y="133" width="0.1303%" height="15" fill="rgb(237,72,25)"/><text x="48.3312%" y="143.50"></text></g><g><title>generics_of (350,932 samples, 0.47%)</title><rect x="47.7682%" y="165" width="0.4746%" height="15" fill="rgb(244,70,9)"/><text x="48.0182%" y="175.50"></text></g><g><title>explicit_predicates_of (150,083 samples, 0.20%)</title><rect x="48.3962%" y="133" width="0.2030%" height="15" fill="rgb(217,125,39)"/><text x="48.6462%" y="143.50"></text></g><g><title>predicates_of (670,678 samples, 0.91%)</title><rect x="48.2757%" y="165" width="0.9070%" height="15" fill="rgb(235,36,10)"/><text x="48.5257%" y="175.50"></text></g><g><title>predicates_defined_on (637,988 samples, 0.86%)</title><rect x="48.3199%" y="149" width="0.8628%" height="15" fill="rgb(251,123,47)"/><text x="48.5699%" y="159.50"></text></g><g><title>inferred_outlives_of (431,434 samples, 0.58%)</title><rect x="48.5992%" y="133" width="0.5835%" height="15" fill="rgb(221,13,13)"/><text x="48.8492%" y="143.50"></text></g><g><title>inferred_outlives_crate (408,694 samples, 0.55%)</title><rect x="48.6300%" y="117" width="0.5527%" height="15" fill="rgb(238,131,9)"/><text x="48.8800%" y="127.50"></text></g><g><title>type_of (205,163 samples, 0.28%)</title><rect x="48.9052%" y="101" width="0.2775%" height="15" fill="rgb(211,50,8)"/><text x="49.1552%" y="111.50"></text></g><g><title>type_collecting (1,572,327 samples, 2.13%)</title><rect x="47.2637%" y="197" width="2.1263%" height="15" fill="rgb(245,182,24)"/><text x="47.5137%" y="207.50">t..</text></g><g><title>collect_mod_item_types (1,551,327 samples, 2.10%)</title><rect x="47.2921%" y="181" width="2.0979%" height="15" fill="rgb(242,14,37)"/><text x="47.5421%" y="191.50">c..</text></g><g><title>type_of (120,732 samples, 0.16%)</title><rect x="49.2268%" y="165" width="0.1633%" height="15" fill="rgb(246,228,12)"/><text x="49.4768%" y="175.50"></text></g><g><title>evaluate_obligation (328,432 samples, 0.44%)</title><rect x="50.3340%" y="165" width="0.4442%" height="15" fill="rgb(213,55,15)"/><text x="50.5840%" y="175.50"></text></g><g><title>implied_outlives_bounds (118,820 samples, 0.16%)</title><rect x="50.7782%" y="165" width="0.1607%" height="15" fill="rgb(209,9,3)"/><text x="51.0282%" y="175.50"></text></g><g><title>param_env (92,510 samples, 0.13%)</title><rect x="50.9389%" y="165" width="0.1251%" height="15" fill="rgb(230,59,30)"/><text x="51.1889%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,287,014 samples, 1.74%)</title><rect x="49.5299%" y="181" width="1.7405%" height="15" fill="rgb(209,121,21)"/><text x="49.7799%" y="191.50"></text></g><g><title>region_scope_tree (140,322 samples, 0.19%)</title><rect x="51.0806%" y="165" width="0.1898%" height="15" fill="rgb(220,109,13)"/><text x="51.3306%" y="175.50"></text></g><g><title>implied_outlives_bounds (138,501 samples, 0.19%)</title><rect x="52.6105%" y="165" width="0.1873%" height="15" fill="rgb(232,18,1)"/><text x="52.8605%" y="175.50"></text></g><g><title>param_env (369,524 samples, 0.50%)</title><rect x="52.7978%" y="165" width="0.4997%" height="15" fill="rgb(215,41,42)"/><text x="53.0478%" y="175.50"></text></g><g><title>check_item_well_formed (1,630,599 samples, 2.21%)</title><rect x="51.2704%" y="181" width="2.2052%" height="15" fill="rgb(224,123,36)"/><text x="51.5204%" y="191.50">c..</text></g><g><title>variances_of (94,311 samples, 0.13%)</title><rect x="53.3480%" y="165" width="0.1275%" height="15" fill="rgb(240,125,3)"/><text x="53.5980%" y="175.50"></text></g><g><title>crate_variances (87,941 samples, 0.12%)</title><rect x="53.3566%" y="149" width="0.1189%" height="15" fill="rgb(205,98,50)"/><text x="53.6066%" y="159.50"></text></g><g><title>analysis (34,021,797 samples, 46.01%)</title><rect x="7.9966%" y="229" width="46.0096%" height="15" fill="rgb(205,185,37)"/><text x="8.2466%" y="239.50">analysis</text></g><g><title>type_check_crate (21,771,302 samples, 29.44%)</title><rect x="24.5637%" y="213" width="29.4426%" height="15" fill="rgb(238,207,15)"/><text x="24.8137%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,411,468 samples, 4.61%)</title><rect x="49.3927%" y="197" width="4.6135%" height="15" fill="rgb(213,199,42)"/><text x="49.6427%" y="207.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (392,425 samples, 0.53%)</title><rect x="53.4755%" y="181" width="0.5307%" height="15" fill="rgb(235,201,11)"/><text x="53.7255%" y="191.50"></text></g><g><title>codegen_module (216,072 samples, 0.29%)</title><rect x="54.6386%" y="213" width="0.2922%" height="15" fill="rgb(207,46,11)"/><text x="54.8886%" y="223.50"></text></g><g><title>codegen_crate (800,428 samples, 1.08%)</title><rect x="54.0202%" y="229" width="1.0825%" height="15" fill="rgb(241,35,35)"/><text x="54.2702%" y="239.50"></text></g><g><title>codegen_module_optimize (2,887,752 samples, 3.91%)</title><rect x="55.1027%" y="229" width="3.9053%" height="15" fill="rgb(243,32,47)"/><text x="55.3527%" y="239.50">code..</text></g><g><title>LLVM_module_optimize (448,205 samples, 0.61%)</title><rect x="58.4018%" y="213" width="0.6061%" height="15" fill="rgb(247,202,23)"/><text x="58.6518%" y="223.50"></text></g><g><title>LLVM_lto_optimize (126,391 samples, 0.17%)</title><rect x="59.3301%" y="213" width="0.1709%" height="15" fill="rgb(219,102,11)"/><text x="59.5801%" y="223.50"></text></g><g><title>LLVM_module_codegen (1,258,734 samples, 1.70%)</title><rect x="59.5011%" y="213" width="1.7023%" height="15" fill="rgb(243,110,44)"/><text x="59.7511%" y="223.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,232,904 samples, 1.67%)</title><rect x="59.5360%" y="197" width="1.6673%" height="15" fill="rgb(222,74,54)"/><text x="59.7860%" y="207.50"></text></g><g><title>codegen_module_perform_lto (1,645,838 samples, 2.23%)</title><rect x="59.0079%" y="229" width="2.2258%" height="15" fill="rgb(216,99,12)"/><text x="59.2579%" y="239.50">c..</text></g><g><title>AST_validation (112,361 samples, 0.15%)</title><rect x="61.5558%" y="213" width="0.1520%" height="15" fill="rgb(226,22,26)"/><text x="61.8058%" y="223.50"></text></g><g><title>crate_injection (109,601 samples, 0.15%)</title><rect x="61.7766%" y="213" width="0.1482%" height="15" fill="rgb(217,163,10)"/><text x="62.0266%" y="223.50"></text></g><g><title>metadata_load_macro (110,992 samples, 0.15%)</title><rect x="77.3165%" y="181" width="0.1501%" height="15" fill="rgb(213,25,53)"/><text x="77.5665%" y="191.50"></text></g><g><title>metadata_register_crate (2,718,160 samples, 3.68%)</title><rect x="77.4666%" y="181" width="3.6759%" height="15" fill="rgb(252,105,26)"/><text x="77.7166%" y="191.50">meta..</text></g><g><title>metadata_register_crate (984,071 samples, 1.33%)</title><rect x="79.8117%" y="165" width="1.3308%" height="15" fill="rgb(220,39,43)"/><text x="80.0617%" y="175.50"></text></g><g><title>macro_expand_crate (14,299,989 samples, 19.34%)</title><rect x="61.9249%" y="213" width="19.3387%" height="15" fill="rgb(229,68,48)"/><text x="62.1749%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (14,274,969 samples, 19.30%)</title><rect x="61.9587%" y="197" width="19.3048%" height="15" fill="rgb(252,8,32)"/><text x="62.2087%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (89,490 samples, 0.12%)</title><rect x="81.1425%" y="181" width="0.1210%" height="15" fill="rgb(223,20,43)"/><text x="81.3925%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (105,071 samples, 0.14%)</title><rect x="81.2695%" y="213" width="0.1421%" height="15" fill="rgb(229,81,49)"/><text x="81.5195%" y="223.50"></text></g><g><title>finalize_imports (391,895 samples, 0.53%)</title><rect x="81.4247%" y="197" width="0.5300%" height="15" fill="rgb(236,28,36)"/><text x="81.6747%" y="207.50"></text></g><g><title>late_resolve_crate (1,917,761 samples, 2.59%)</title><rect x="81.9733%" y="197" width="2.5935%" height="15" fill="rgb(249,185,26)"/><text x="82.2233%" y="207.50">la..</text></g><g><title>configure_and_expand (17,329,583 samples, 23.44%)</title><rect x="61.2337%" y="229" width="23.4358%" height="15" fill="rgb(249,174,33)"/><text x="61.4837%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (2,409,057 samples, 3.26%)</title><rect x="81.4116%" y="213" width="3.2579%" height="15" fill="rgb(233,201,37)"/><text x="81.6616%" y="223.50">res..</text></g><g><title>drop_ast (90,701 samples, 0.12%)</title><rect x="84.6695%" y="229" width="0.1227%" height="15" fill="rgb(221,78,26)"/><text x="84.9195%" y="239.50"></text></g><g><title>early_lint_checks (212,592 samples, 0.29%)</title><rect x="84.8090%" y="229" width="0.2875%" height="15" fill="rgb(250,127,30)"/><text x="85.0590%" y="239.50"></text></g><g><title>free_global_ctxt (2,780,371 samples, 3.76%)</title><rect x="85.0965%" y="229" width="3.7601%" height="15" fill="rgb(230,49,44)"/><text x="85.3465%" y="239.50">free..</text></g><g><title>layout_of (108,431 samples, 0.15%)</title><rect x="90.8306%" y="181" width="0.1466%" height="15" fill="rgb(229,67,23)"/><text x="91.0806%" y="191.50"></text></g><g><title>layout_of (266,053 samples, 0.36%)</title><rect x="90.6379%" y="197" width="0.3598%" height="15" fill="rgb(249,83,47)"/><text x="90.8879%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (603,666 samples, 0.82%)</title><rect x="90.9977%" y="197" width="0.8164%" height="15" fill="rgb(215,43,3)"/><text x="91.2477%" y="207.50"></text></g><g><title>optimized_mir (1,514,917 samples, 2.05%)</title><rect x="89.7936%" y="213" width="2.0487%" height="15" fill="rgb(238,154,13)"/><text x="90.0436%" y="223.50">o..</text></g><g><title>generate_crate_metadata (2,230,045 samples, 3.02%)</title><rect x="88.8565%" y="229" width="3.0158%" height="15" fill="rgb(219,56,2)"/><text x="89.1065%" y="239.50">gen..</text></g><g><title>hir_lowering (1,485,757 samples, 2.01%)</title><rect x="91.8723%" y="229" width="2.0093%" height="15" fill="rgb(233,0,4)"/><text x="92.1223%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (2,337,506 samples, 3.16%)</title><rect x="93.8969%" y="213" width="3.1611%" height="15" fill="rgb(235,30,7)"/><text x="94.1469%" y="223.50">fin..</text></g><g><title>link_crate (625,227 samples, 0.85%)</title><rect x="97.0581%" y="213" width="0.8455%" height="15" fill="rgb(250,79,13)"/><text x="97.3081%" y="223.50"></text></g><g><title>link_binary (617,167 samples, 0.83%)</title><rect x="97.0690%" y="197" width="0.8346%" height="15" fill="rgb(211,146,34)"/><text x="97.3190%" y="207.50"></text></g><g><title>link_rlib (384,915 samples, 0.52%)</title><rect x="97.3831%" y="181" width="0.5205%" height="15" fill="rgb(228,22,38)"/><text x="97.6331%" y="191.50"></text></g><g><title>link (2,981,393 samples, 4.03%)</title><rect x="93.8816%" y="229" width="4.0319%" height="15" fill="rgb(235,168,5)"/><text x="94.1316%" y="239.50">link</text></g><g><title>parse_crate (280,224 samples, 0.38%)</title><rect x="97.9135%" y="229" width="0.3790%" height="15" fill="rgb(221,155,16)"/><text x="98.1635%" y="239.50"></text></g><g><title>prepare_outputs (376,404 samples, 0.51%)</title><rect x="98.3062%" y="229" width="0.5090%" height="15" fill="rgb(215,215,53)"/><text x="98.5562%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (405,514 samples, 0.55%)</title><rect x="98.8153%" y="229" width="0.5484%" height="15" fill="rgb(223,4,10)"/><text x="99.0653%" y="239.50"></text></g><g><title>setup_global_ctxt (135,552 samples, 0.18%)</title><rect x="99.3649%" y="229" width="0.1833%" height="15" fill="rgb(234,103,6)"/><text x="99.6149%" y="239.50"></text></g><g><title>all (73,944,990 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (73,944,990 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (334,093 samples, 0.45%)</title><rect x="99.5482%" y="229" width="0.4518%" height="15" fill="rgb(228,201,54)"/><text x="99.7982%" y="239.50"></text></g></svg></svg>