<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,992,606 samples, 6.53%)</title><rect x="1.0966%" y="245" width="6.5291%" height="15" fill="rgb(227,0,7)"/><text x="1.3466%" y="255.50">LLVM_pass..</text></g><g><title>codegen_generate_lto_work (126,171 samples, 0.16%)</title><rect x="7.4607%" y="229" width="0.1650%" height="15" fill="rgb(217,0,24)"/><text x="7.7107%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (104,151 samples, 0.14%)</title><rect x="7.4895%" y="213" width="0.1362%" height="15" fill="rgb(221,193,54)"/><text x="7.7395%" y="223.50"></text></g><g><title>implied_outlives_bounds (81,461 samples, 0.11%)</title><rect x="15.2688%" y="197" width="0.1065%" height="15" fill="rgb(248,212,6)"/><text x="15.5188%" y="207.50"></text></g><g><title>is_sized_raw (248,765 samples, 0.33%)</title><rect x="15.4148%" y="197" width="0.3253%" height="15" fill="rgb(208,68,35)"/><text x="15.6648%" y="207.50"></text></g><g><title>evaluate_obligation (140,172 samples, 0.18%)</title><rect x="15.5568%" y="181" width="0.1833%" height="15" fill="rgb(232,128,0)"/><text x="15.8068%" y="191.50"></text></g><g><title>param_env (105,861 samples, 0.14%)</title><rect x="17.0197%" y="165" width="0.1384%" height="15" fill="rgb(207,160,47)"/><text x="17.2697%" y="175.50"></text></g><g><title>explicit_predicates_of (108,050 samples, 0.14%)</title><rect x="20.4187%" y="53" width="0.1413%" height="15" fill="rgb(228,23,34)"/><text x="20.6687%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (107,240 samples, 0.14%)</title><rect x="20.4198%" y="37" width="0.1402%" height="15" fill="rgb(218,30,26)"/><text x="20.6698%" y="47.50"></text></g><g><title>predicates_of (118,320 samples, 0.15%)</title><rect x="20.4071%" y="85" width="0.1547%" height="15" fill="rgb(220,122,19)"/><text x="20.6571%" y="95.50"></text></g><g><title>predicates_defined_on (112,580 samples, 0.15%)</title><rect x="20.4146%" y="69" width="0.1472%" height="15" fill="rgb(250,228,42)"/><text x="20.6646%" y="79.50"></text></g><g><title>needs_drop_raw (793,959 samples, 1.04%)</title><rect x="19.5638%" y="133" width="1.0383%" height="15" fill="rgb(240,193,28)"/><text x="19.8138%" y="143.50"></text></g><g><title>is_copy_raw (715,428 samples, 0.94%)</title><rect x="19.6665%" y="117" width="0.9356%" height="15" fill="rgb(216,20,37)"/><text x="19.9165%" y="127.50"></text></g><g><title>evaluate_obligation (562,587 samples, 0.74%)</title><rect x="19.8664%" y="101" width="0.7357%" height="15" fill="rgb(206,188,39)"/><text x="20.1164%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (209,085 samples, 0.27%)</title><rect x="20.7300%" y="117" width="0.2734%" height="15" fill="rgb(217,207,13)"/><text x="20.9800%" y="127.50"></text></g><g><title>resolve_instance (325,777 samples, 0.43%)</title><rect x="20.6021%" y="133" width="0.4260%" height="15" fill="rgb(231,73,38)"/><text x="20.8521%" y="143.50"></text></g><g><title>thir_body (479,997 samples, 0.63%)</title><rect x="21.0489%" y="133" width="0.6277%" height="15" fill="rgb(225,20,46)"/><text x="21.2989%" y="143.50"></text></g><g><title>mir_const (4,092,250 samples, 5.35%)</title><rect x="16.3377%" y="181" width="5.3516%" height="15" fill="rgb(210,31,41)"/><text x="16.5877%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (3,464,912 samples, 4.53%)</title><rect x="17.1581%" y="165" width="4.5312%" height="15" fill="rgb(221,200,47)"/><text x="17.4081%" y="175.50">unsaf..</text></g><g><title>mir_built (3,170,818 samples, 4.15%)</title><rect x="17.5427%" y="149" width="4.1466%" height="15" fill="rgb(226,26,5)"/><text x="17.7927%" y="159.50">mir_b..</text></g><g><title>mir_promoted (4,579,254 samples, 5.99%)</title><rect x="15.7401%" y="197" width="5.9885%" height="15" fill="rgb(249,33,26)"/><text x="15.9901%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (227,832 samples, 0.30%)</title><rect x="21.7286%" y="197" width="0.2979%" height="15" fill="rgb(235,183,28)"/><text x="21.9786%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (784,672 samples, 1.03%)</title><rect x="22.0266%" y="197" width="1.0262%" height="15" fill="rgb(221,5,38)"/><text x="22.2766%" y="207.50"></text></g><g><title>normalize_projection_ty (412,550 samples, 0.54%)</title><rect x="22.5132%" y="181" width="0.5395%" height="15" fill="rgb(247,18,42)"/><text x="22.7632%" y="191.50"></text></g><g><title>type_op_normalize_predicate (84,202 samples, 0.11%)</title><rect x="23.0527%" y="197" width="0.1101%" height="15" fill="rgb(241,131,45)"/><text x="23.3027%" y="207.50"></text></g><g><title>MIR_borrow_checking (12,831,894 samples, 16.78%)</title><rect x="8.0153%" y="229" width="16.7809%" height="15" fill="rgb(249,31,29)"/><text x="8.2653%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (12,759,073 samples, 16.69%)</title><rect x="8.1105%" y="213" width="16.6856%" height="15" fill="rgb(225,111,53)"/><text x="8.3605%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,241,356 samples, 1.62%)</title><rect x="23.1728%" y="197" width="1.6234%" height="15" fill="rgb(238,160,17)"/><text x="23.4228%" y="207.50"></text></g><g><title>hir_module_items (194,932 samples, 0.25%)</title><rect x="24.8156%" y="229" width="0.2549%" height="15" fill="rgb(214,148,48)"/><text x="25.0656%" y="239.50"></text></g><g><title>should_inherit_track_caller (78,681 samples, 0.10%)</title><rect x="25.4584%" y="181" width="0.1029%" height="15" fill="rgb(232,36,49)"/><text x="25.7084%" y="191.50"></text></g><g><title>codegen_fn_attrs (222,793 samples, 0.29%)</title><rect x="25.2962%" y="197" width="0.2914%" height="15" fill="rgb(209,103,24)"/><text x="25.5462%" y="207.50"></text></g><g><title>check_mod_attrs (363,935 samples, 0.48%)</title><rect x="25.1119%" y="213" width="0.4759%" height="15" fill="rgb(229,88,8)"/><text x="25.3619%" y="223.50"></text></g><g><title>lookup_deprecation_entry (121,281 samples, 0.16%)</title><rect x="25.9095%" y="197" width="0.1586%" height="15" fill="rgb(213,181,19)"/><text x="26.1595%" y="207.50"></text></g><g><title>stability_index (88,011 samples, 0.12%)</title><rect x="25.9530%" y="181" width="0.1151%" height="15" fill="rgb(254,191,54)"/><text x="26.2030%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (287,924 samples, 0.38%)</title><rect x="25.7414%" y="213" width="0.3765%" height="15" fill="rgb(241,83,37)"/><text x="25.9914%" y="223.50"></text></g><g><title>misc_checking_1 (846,569 samples, 1.11%)</title><rect x="25.0710%" y="229" width="1.1071%" height="15" fill="rgb(233,36,39)"/><text x="25.3210%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (197,322 samples, 0.26%)</title><rect x="26.1799%" y="213" width="0.2580%" height="15" fill="rgb(226,3,54)"/><text x="26.4299%" y="223.50"></text></g><g><title>check_mod_liveness (159,121 samples, 0.21%)</title><rect x="26.2299%" y="197" width="0.2081%" height="15" fill="rgb(245,192,40)"/><text x="26.4799%" y="207.50"></text></g><g><title>misc_checking_2 (438,465 samples, 0.57%)</title><rect x="26.1781%" y="229" width="0.5734%" height="15" fill="rgb(238,167,29)"/><text x="26.4281%" y="239.50"></text></g><g><title>match_checking (239,763 samples, 0.31%)</title><rect x="26.4380%" y="213" width="0.3135%" height="15" fill="rgb(232,182,51)"/><text x="26.6880%" y="223.50"></text></g><g><title>check_match (223,043 samples, 0.29%)</title><rect x="26.4598%" y="197" width="0.2917%" height="15" fill="rgb(231,60,39)"/><text x="26.7098%" y="207.50"></text></g><g><title>check_private_in_public (123,771 samples, 0.16%)</title><rect x="26.7625%" y="213" width="0.1619%" height="15" fill="rgb(208,69,12)"/><text x="27.0125%" y="223.50"></text></g><g><title>death_checking (215,663 samples, 0.28%)</title><rect x="26.9244%" y="213" width="0.2820%" height="15" fill="rgb(235,93,37)"/><text x="27.1744%" y="223.50"></text></g><g><title>crate_lints (287,803 samples, 0.38%)</title><rect x="27.2083%" y="197" width="0.3764%" height="15" fill="rgb(213,116,39)"/><text x="27.4583%" y="207.50"></text></g><g><title>param_env (147,481 samples, 0.19%)</title><rect x="27.3918%" y="181" width="0.1929%" height="15" fill="rgb(222,207,29)"/><text x="27.6418%" y="191.50"></text></g><g><title>lint_checking (404,824 samples, 0.53%)</title><rect x="27.2064%" y="213" width="0.5294%" height="15" fill="rgb(206,96,30)"/><text x="27.4564%" y="223.50"></text></g><g><title>module_lints (115,601 samples, 0.15%)</title><rect x="27.5847%" y="197" width="0.1512%" height="15" fill="rgb(218,138,4)"/><text x="27.8347%" y="207.50"></text></g><g><title>lint_mod (111,861 samples, 0.15%)</title><rect x="27.5896%" y="181" width="0.1463%" height="15" fill="rgb(250,191,14)"/><text x="27.8396%" y="191.50"></text></g><g><title>privacy_access_levels (147,812 samples, 0.19%)</title><rect x="27.7358%" y="213" width="0.1933%" height="15" fill="rgb(239,60,40)"/><text x="27.9858%" y="223.50"></text></g><g><title>privacy_checking_modules (438,775 samples, 0.57%)</title><rect x="27.9291%" y="213" width="0.5738%" height="15" fill="rgb(206,27,48)"/><text x="28.1791%" y="223.50"></text></g><g><title>check_mod_privacy (435,635 samples, 0.57%)</title><rect x="27.9332%" y="197" width="0.5697%" height="15" fill="rgb(225,35,8)"/><text x="28.1832%" y="207.50"></text></g><g><title>misc_checking_3 (1,355,785 samples, 1.77%)</title><rect x="26.7515%" y="229" width="1.7730%" height="15" fill="rgb(250,213,24)"/><text x="27.0015%" y="239.50">m..</text></g><g><title>coherence_checking (110,741 samples, 0.14%)</title><rect x="28.5754%" y="213" width="0.1448%" height="15" fill="rgb(247,123,22)"/><text x="28.8254%" y="223.50"></text></g><g><title>adt_dtorck_constraint (80,631 samples, 0.11%)</title><rect x="38.2933%" y="149" width="0.1054%" height="15" fill="rgb(231,138,38)"/><text x="38.5433%" y="159.50"></text></g><g><title>dropck_outlives (243,863 samples, 0.32%)</title><rect x="38.0906%" y="165" width="0.3189%" height="15" fill="rgb(231,145,46)"/><text x="38.3406%" y="175.50"></text></g><g><title>evaluate_obligation (821,506 samples, 1.07%)</title><rect x="38.4095%" y="165" width="1.0743%" height="15" fill="rgb(251,118,11)"/><text x="38.6595%" y="175.50"></text></g><g><title>item_bodies_checking (8,580,975 samples, 11.22%)</title><rect x="28.7384%" y="213" width="11.2217%" height="15" fill="rgb(217,147,25)"/><text x="28.9884%" y="223.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (8,579,065 samples, 11.22%)</title><rect x="28.7409%" y="197" width="11.2192%" height="15" fill="rgb(247,81,37)"/><text x="28.9909%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (8,524,325 samples, 11.15%)</title><rect x="28.8125%" y="181" width="11.1477%" height="15" fill="rgb(209,12,38)"/><text x="29.0625%" y="191.50">typeck</text></g><g><title>item_types_checking (518,696 samples, 0.68%)</title><rect x="39.9601%" y="213" width="0.6783%" height="15" fill="rgb(227,1,9)"/><text x="40.2101%" y="223.50"></text></g><g><title>check_mod_item_types (515,176 samples, 0.67%)</title><rect x="39.9647%" y="197" width="0.6737%" height="15" fill="rgb(248,47,43)"/><text x="40.2147%" y="207.50"></text></g><g><title>late_bound_vars_map (267,253 samples, 0.35%)</title><rect x="41.0549%" y="165" width="0.3495%" height="15" fill="rgb(221,10,30)"/><text x="41.3049%" y="175.50"></text></g><g><title>resolve_lifetimes (250,042 samples, 0.33%)</title><rect x="41.0774%" y="149" width="0.3270%" height="15" fill="rgb(210,229,1)"/><text x="41.3274%" y="159.50"></text></g><g><title>fn_sig (489,526 samples, 0.64%)</title><rect x="40.8835%" y="181" width="0.6402%" height="15" fill="rgb(222,148,37)"/><text x="41.1335%" y="191.50"></text></g><g><title>generics_of (106,321 samples, 0.14%)</title><rect x="41.5237%" y="181" width="0.1390%" height="15" fill="rgb(234,67,33)"/><text x="41.7737%" y="191.50"></text></g><g><title>explicit_predicates_of (532,406 samples, 0.70%)</title><rect x="41.8055%" y="149" width="0.6963%" height="15" fill="rgb(247,98,35)"/><text x="42.0555%" y="159.50"></text></g><g><title>predicates_of (627,957 samples, 0.82%)</title><rect x="41.6975%" y="181" width="0.8212%" height="15" fill="rgb(247,138,52)"/><text x="41.9475%" y="191.50"></text></g><g><title>predicates_defined_on (595,217 samples, 0.78%)</title><rect x="41.7403%" y="165" width="0.7784%" height="15" fill="rgb(213,79,30)"/><text x="41.9903%" y="175.50"></text></g><g><title>super_predicates_of (128,441 samples, 0.17%)</title><rect x="42.5187%" y="181" width="0.1680%" height="15" fill="rgb(246,177,23)"/><text x="42.7687%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (116,731 samples, 0.15%)</title><rect x="42.5340%" y="165" width="0.1527%" height="15" fill="rgb(230,62,27)"/><text x="42.7840%" y="175.50"></text></g><g><title>type_collecting (1,630,838 samples, 2.13%)</title><rect x="40.6402%" y="213" width="2.1327%" height="15" fill="rgb(216,154,8)"/><text x="40.8902%" y="223.50">t..</text></g><g><title>collect_mod_item_types (1,616,278 samples, 2.11%)</title><rect x="40.6593%" y="197" width="2.1137%" height="15" fill="rgb(244,35,45)"/><text x="40.9093%" y="207.50">c..</text></g><g><title>check_impl_item_well_formed (395,325 samples, 0.52%)</title><rect x="42.9281%" y="197" width="0.5170%" height="15" fill="rgb(251,115,12)"/><text x="43.1781%" y="207.50"></text></g><g><title>param_env (171,132 samples, 0.22%)</title><rect x="44.1336%" y="181" width="0.2238%" height="15" fill="rgb(240,54,50)"/><text x="44.3836%" y="191.50"></text></g><g><title>check_item_well_formed (717,618 samples, 0.94%)</title><rect x="43.4451%" y="197" width="0.9385%" height="15" fill="rgb(233,84,52)"/><text x="43.6951%" y="207.50"></text></g><g><title>evaluate_obligation (214,922 samples, 0.28%)</title><rect x="47.1326%" y="181" width="0.2811%" height="15" fill="rgb(207,117,47)"/><text x="47.3826%" y="191.50"></text></g><g><title>implied_outlives_bounds (245,982 samples, 0.32%)</title><rect x="47.4451%" y="181" width="0.3217%" height="15" fill="rgb(249,43,39)"/><text x="47.6951%" y="191.50"></text></g><g><title>param_env (480,113 samples, 0.63%)</title><rect x="47.7793%" y="181" width="0.6279%" height="15" fill="rgb(209,38,44)"/><text x="48.0293%" y="191.50"></text></g><g><title>predicates_of (82,762 samples, 0.11%)</title><rect x="48.4071%" y="181" width="0.1082%" height="15" fill="rgb(236,212,23)"/><text x="48.6571%" y="191.50"></text></g><g><title>region_scope_tree (137,300 samples, 0.18%)</title><rect x="48.5154%" y="181" width="0.1796%" height="15" fill="rgb(242,79,21)"/><text x="48.7654%" y="191.50"></text></g><g><title>analysis (31,511,812 samples, 41.21%)</title><rect x="7.6257%" y="245" width="41.2094%" height="15" fill="rgb(211,96,35)"/><text x="7.8757%" y="255.50">analysis</text></g><g><title>type_check_crate (15,531,013 samples, 20.31%)</title><rect x="28.5245%" y="229" width="20.3106%" height="15" fill="rgb(253,215,40)"/><text x="28.7745%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,632,622 samples, 6.06%)</title><rect x="42.7769%" y="213" width="6.0583%" height="15" fill="rgb(211,81,21)"/><text x="43.0269%" y="223.50">wf_check..</text></g><g><title>check_trait_item_well_formed (3,404,038 samples, 4.45%)</title><rect x="44.3835%" y="197" width="4.4516%" height="15" fill="rgb(208,190,38)"/><text x="44.6335%" y="207.50">check..</text></g><g><title>trait_impls_of (106,090 samples, 0.14%)</title><rect x="48.6964%" y="181" width="0.1387%" height="15" fill="rgb(235,213,38)"/><text x="48.9464%" y="191.50"></text></g><g><title>codegen_module (202,413 samples, 0.26%)</title><rect x="49.4496%" y="229" width="0.2647%" height="15" fill="rgb(237,122,38)"/><text x="49.6996%" y="239.50"></text></g><g><title>codegen_crate (728,148 samples, 0.95%)</title><rect x="48.8485%" y="245" width="0.9522%" height="15" fill="rgb(244,218,35)"/><text x="49.0985%" y="255.50"></text></g><g><title>codegen_module_optimize (1,600,328 samples, 2.09%)</title><rect x="49.8007%" y="245" width="2.0928%" height="15" fill="rgb(240,68,47)"/><text x="50.0507%" y="255.50">c..</text></g><g><title>LLVM_module_optimize (442,065 samples, 0.58%)</title><rect x="51.3154%" y="229" width="0.5781%" height="15" fill="rgb(210,16,53)"/><text x="51.5654%" y="239.50"></text></g><g><title>LLVM_lto_optimize (203,642 samples, 0.27%)</title><rect x="52.3604%" y="229" width="0.2663%" height="15" fill="rgb(235,124,12)"/><text x="52.6104%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,349,356 samples, 3.07%)</title><rect x="52.6267%" y="229" width="3.0724%" height="15" fill="rgb(224,169,11)"/><text x="52.8767%" y="239.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (2,320,236 samples, 3.03%)</title><rect x="52.6648%" y="213" width="3.0343%" height="15" fill="rgb(250,166,2)"/><text x="52.9148%" y="223.50">LLV..</text></g><g><title>codegen_module_perform_lto (2,946,163 samples, 3.85%)</title><rect x="51.8935%" y="245" width="3.8528%" height="15" fill="rgb(242,216,29)"/><text x="52.1435%" y="255.50">code..</text></g><g><title>AST_validation (198,682 samples, 0.26%)</title><rect x="56.0300%" y="229" width="0.2598%" height="15" fill="rgb(230,116,27)"/><text x="56.2800%" y="239.50"></text></g><g><title>complete_gated_feature_checking (77,491 samples, 0.10%)</title><rect x="56.2898%" y="229" width="0.1013%" height="15" fill="rgb(228,99,48)"/><text x="56.5398%" y="239.50"></text></g><g><title>crate_injection (90,461 samples, 0.12%)</title><rect x="56.3911%" y="229" width="0.1183%" height="15" fill="rgb(253,11,6)"/><text x="56.6411%" y="239.50"></text></g><g><title>metadata_register_crate (203,752 samples, 0.27%)</title><rect x="72.9988%" y="197" width="0.2665%" height="15" fill="rgb(247,143,39)"/><text x="73.2488%" y="207.50"></text></g><g><title>macro_expand_crate (13,029,765 samples, 17.04%)</title><rect x="56.5094%" y="229" width="17.0396%" height="15" fill="rgb(236,97,10)"/><text x="56.7594%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (13,004,975 samples, 17.01%)</title><rect x="56.5418%" y="213" width="17.0072%" height="15" fill="rgb(233,208,19)"/><text x="56.7918%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (216,974 samples, 0.28%)</title><rect x="73.2653%" y="197" width="0.2837%" height="15" fill="rgb(216,164,2)"/><text x="73.5153%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (83,691 samples, 0.11%)</title><rect x="73.5558%" y="229" width="0.1094%" height="15" fill="rgb(220,129,5)"/><text x="73.8058%" y="239.50"></text></g><g><title>finalize_macro_resolutions (227,023 samples, 0.30%)</title><rect x="73.7442%" y="213" width="0.2969%" height="15" fill="rgb(242,17,10)"/><text x="73.9942%" y="223.50"></text></g><g><title>late_resolve_crate (1,246,204 samples, 1.63%)</title><rect x="74.0411%" y="213" width="1.6297%" height="15" fill="rgb(242,107,0)"/><text x="74.2911%" y="223.50"></text></g><g><title>configure_and_expand (15,373,731 samples, 20.10%)</title><rect x="55.7464%" y="245" width="20.1049%" height="15" fill="rgb(251,28,31)"/><text x="55.9964%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,671,659 samples, 2.19%)</title><rect x="73.6652%" y="229" width="2.1861%" height="15" fill="rgb(233,223,10)"/><text x="73.9152%" y="239.50">r..</text></g><g><title>drop_ast (172,762 samples, 0.23%)</title><rect x="75.8513%" y="245" width="0.2259%" height="15" fill="rgb(215,21,27)"/><text x="76.1013%" y="255.50"></text></g><g><title>early_lint_checks (320,924 samples, 0.42%)</title><rect x="76.1017%" y="245" width="0.4197%" height="15" fill="rgb(232,23,21)"/><text x="76.3517%" y="255.50"></text></g><g><title>free_global_ctxt (1,295,165 samples, 1.69%)</title><rect x="76.5213%" y="245" width="1.6937%" height="15" fill="rgb(244,5,23)"/><text x="76.7713%" y="255.50"></text></g><g><title>is_sized_raw (161,651 samples, 0.21%)</title><rect x="82.8802%" y="197" width="0.2114%" height="15" fill="rgb(226,81,46)"/><text x="83.1302%" y="207.50"></text></g><g><title>evaluate_obligation (113,180 samples, 0.15%)</title><rect x="82.9436%" y="181" width="0.1480%" height="15" fill="rgb(247,70,30)"/><text x="83.1936%" y="191.50"></text></g><g><title>layout_of (111,370 samples, 0.15%)</title><rect x="83.0916%" y="197" width="0.1456%" height="15" fill="rgb(212,68,19)"/><text x="83.3416%" y="207.50"></text></g><g><title>is_sized_raw (95,940 samples, 0.13%)</title><rect x="83.1118%" y="181" width="0.1255%" height="15" fill="rgb(240,187,13)"/><text x="83.3618%" y="191.50"></text></g><g><title>layout_of (461,937 samples, 0.60%)</title><rect x="82.7132%" y="213" width="0.6041%" height="15" fill="rgb(223,113,26)"/><text x="82.9632%" y="223.50"></text></g><g><title>needs_drop_raw (604,696 samples, 0.79%)</title><rect x="86.1442%" y="197" width="0.7908%" height="15" fill="rgb(206,192,2)"/><text x="86.3942%" y="207.50"></text></g><g><title>is_copy_raw (535,266 samples, 0.70%)</title><rect x="86.2350%" y="181" width="0.7000%" height="15" fill="rgb(241,108,4)"/><text x="86.4850%" y="191.50"></text></g><g><title>evaluate_obligation (376,654 samples, 0.49%)</title><rect x="86.4424%" y="165" width="0.4926%" height="15" fill="rgb(247,173,49)"/><text x="86.6924%" y="175.50"></text></g><g><title>optimized_mir (5,369,421 samples, 7.02%)</title><rect x="79.9904%" y="229" width="7.0218%" height="15" fill="rgb(224,114,35)"/><text x="80.2404%" y="239.50">optimized..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,825,380 samples, 3.69%)</title><rect x="83.3173%" y="213" width="3.6949%" height="15" fill="rgb(245,159,27)"/><text x="83.5673%" y="223.50">mir_..</text></g><g><title>generate_crate_metadata (6,821,396 samples, 8.92%)</title><rect x="78.2151%" y="245" width="8.9207%" height="15" fill="rgb(245,172,44)"/><text x="78.4651%" y="255.50">generate_crat..</text></g><g><title>hir_lowering (3,403,628 samples, 4.45%)</title><rect x="87.1357%" y="245" width="4.4511%" height="15" fill="rgb(236,23,11)"/><text x="87.3857%" y="255.50">hir_l..</text></g><g><title>finish_ongoing_codegen (3,436,858 samples, 4.49%)</title><rect x="91.6099%" y="229" width="4.4945%" height="15" fill="rgb(205,117,38)"/><text x="91.8599%" y="239.50">finis..</text></g><g><title>link_crate (1,238,834 samples, 1.62%)</title><rect x="96.1044%" y="229" width="1.6201%" height="15" fill="rgb(237,72,25)"/><text x="96.3544%" y="239.50"></text></g><g><title>link_binary (1,211,344 samples, 1.58%)</title><rect x="96.1404%" y="213" width="1.5841%" height="15" fill="rgb(244,70,9)"/><text x="96.3904%" y="223.50"></text></g><g><title>link_rlib (857,860 samples, 1.12%)</title><rect x="96.6027%" y="197" width="1.1219%" height="15" fill="rgb(217,125,39)"/><text x="96.8527%" y="207.50"></text></g><g><title>link (4,705,132 samples, 6.15%)</title><rect x="91.5868%" y="245" width="6.1531%" height="15" fill="rgb(235,36,10)"/><text x="91.8368%" y="255.50">link</text></g><g><title>parse_crate (484,226 samples, 0.63%)</title><rect x="97.7399%" y="245" width="0.6332%" height="15" fill="rgb(251,123,47)"/><text x="97.9899%" y="255.50"></text></g><g><title>prepare_outputs (348,284 samples, 0.46%)</title><rect x="98.3840%" y="245" width="0.4555%" height="15" fill="rgb(221,13,13)"/><text x="98.6340%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (391,054 samples, 0.51%)</title><rect x="98.8394%" y="245" width="0.5114%" height="15" fill="rgb(238,131,9)"/><text x="99.0894%" y="255.50"></text></g><g><title>setup_global_ctxt (116,742 samples, 0.15%)</title><rect x="99.3521%" y="245" width="0.1527%" height="15" fill="rgb(211,50,8)"/><text x="99.6021%" y="255.50"></text></g><g><title>all (76,467,445 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (76,467,445 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (378,694 samples, 0.50%)</title><rect x="99.5048%" y="245" width="0.4952%" height="15" fill="rgb(246,228,12)"/><text x="99.7548%" y="255.50"></text></g></svg></svg>