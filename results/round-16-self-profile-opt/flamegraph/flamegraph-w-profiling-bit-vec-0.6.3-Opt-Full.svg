<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (98,142,502 samples, 15.77%)</title><rect x="0.0952%" y="181" width="15.7671%" height="15" fill="rgb(227,0,7)"/><text x="0.3452%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (665,307 samples, 0.11%)</title><rect x="19.7859%" y="85" width="0.1069%" height="15" fill="rgb(217,0,24)"/><text x="20.0359%" y="95.50"></text></g><g><title>needs_drop_raw (1,487,359 samples, 0.24%)</title><rect x="20.6649%" y="69" width="0.2390%" height="15" fill="rgb(221,193,54)"/><text x="20.9149%" y="79.50"></text></g><g><title>is_copy_raw (1,134,703 samples, 0.18%)</title><rect x="20.7216%" y="53" width="0.1823%" height="15" fill="rgb(248,212,6)"/><text x="20.9716%" y="63.50"></text></g><g><title>evaluate_obligation (945,123 samples, 0.15%)</title><rect x="20.7520%" y="37" width="0.1518%" height="15" fill="rgb(208,68,35)"/><text x="21.0020%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (637,878 samples, 0.10%)</title><rect x="20.9769%" y="53" width="0.1025%" height="15" fill="rgb(232,128,0)"/><text x="21.2269%" y="63.50"></text></g><g><title>specialization_graph_of (1,038,071 samples, 0.17%)</title><rect x="21.1015%" y="53" width="0.1668%" height="15" fill="rgb(207,160,47)"/><text x="21.3515%" y="63.50"></text></g><g><title>resolve_instance (2,400,156 samples, 0.39%)</title><rect x="20.9084%" y="69" width="0.3856%" height="15" fill="rgb(228,23,34)"/><text x="21.1584%" y="79.50"></text></g><g><title>thir_body (1,855,949 samples, 0.30%)</title><rect x="21.3029%" y="69" width="0.2982%" height="15" fill="rgb(218,30,26)"/><text x="21.5529%" y="79.50"></text></g><g><title>mir_const (14,202,761 samples, 2.28%)</title><rect x="19.3257%" y="117" width="2.2817%" height="15" fill="rgb(220,122,19)"/><text x="19.5757%" y="127.50">m..</text></g><g><title>unsafety_check_result (12,146,327 samples, 1.95%)</title><rect x="19.6560%" y="101" width="1.9514%" height="15" fill="rgb(250,228,42)"/><text x="19.9060%" y="111.50">u..</text></g><g><title>mir_built (10,672,629 samples, 1.71%)</title><rect x="19.8928%" y="85" width="1.7146%" height="15" fill="rgb(240,193,28)"/><text x="20.1428%" y="95.50"></text></g><g><title>mir_promoted (15,634,062 samples, 2.51%)</title><rect x="19.1158%" y="133" width="2.5117%" height="15" fill="rgb(216,20,37)"/><text x="19.3658%" y="143.50">mi..</text></g><g><title>type_op_normalize_fn_sig (1,484,158 samples, 0.24%)</title><rect x="21.6703%" y="133" width="0.2384%" height="15" fill="rgb(206,188,39)"/><text x="21.9203%" y="143.50"></text></g><g><title>normalize_projection_ty (868,892 samples, 0.14%)</title><rect x="21.7691%" y="117" width="0.1396%" height="15" fill="rgb(217,207,13)"/><text x="22.0191%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,741,241 samples, 0.60%)</title><rect x="21.9866%" y="133" width="0.6010%" height="15" fill="rgb(231,73,38)"/><text x="22.2366%" y="143.50"></text></g><g><title>MIR_borrow_checking (41,521,991 samples, 6.67%)</title><rect x="15.9173%" y="165" width="6.6707%" height="15" fill="rgb(225,20,46)"/><text x="16.1673%" y="175.50">MIR_borro..</text></g><g><title>mir_borrowck (41,303,446 samples, 6.64%)</title><rect x="15.9524%" y="149" width="6.6356%" height="15" fill="rgb(210,31,41)"/><text x="16.2024%" y="159.50">mir_borro..</text></g><g><title>check_mod_attrs (807,929 samples, 0.13%)</title><rect x="22.6416%" y="149" width="0.1298%" height="15" fill="rgb(221,200,47)"/><text x="22.8916%" y="159.50"></text></g><g><title>misc_checking_1 (1,710,178 samples, 0.27%)</title><rect x="22.6397%" y="165" width="0.2747%" height="15" fill="rgb(226,26,5)"/><text x="22.8897%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (690,068 samples, 0.11%)</title><rect x="22.9147%" y="149" width="0.1109%" height="15" fill="rgb(249,33,26)"/><text x="23.1647%" y="159.50"></text></g><g><title>misc_checking_2 (1,623,537 samples, 0.26%)</title><rect x="22.9145%" y="165" width="0.2608%" height="15" fill="rgb(235,183,28)"/><text x="23.1645%" y="175.50"></text></g><g><title>match_checking (932,089 samples, 0.15%)</title><rect x="23.0256%" y="149" width="0.1497%" height="15" fill="rgb(221,5,38)"/><text x="23.2756%" y="159.50"></text></g><g><title>check_match (881,449 samples, 0.14%)</title><rect x="23.0337%" y="133" width="0.1416%" height="15" fill="rgb(247,18,42)"/><text x="23.2837%" y="143.50"></text></g><g><title>crate_lints (2,107,852 samples, 0.34%)</title><rect x="23.2785%" y="133" width="0.3386%" height="15" fill="rgb(241,131,45)"/><text x="23.5285%" y="143.50"></text></g><g><title>type_of (1,094,370 samples, 0.18%)</title><rect x="23.4413%" y="117" width="0.1758%" height="15" fill="rgb(249,31,29)"/><text x="23.6913%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (852,267 samples, 0.14%)</title><rect x="23.4802%" y="101" width="0.1369%" height="15" fill="rgb(225,111,53)"/><text x="23.7302%" y="111.50"></text></g><g><title>lint_checking (2,640,227 samples, 0.42%)</title><rect x="23.2783%" y="149" width="0.4242%" height="15" fill="rgb(238,160,17)"/><text x="23.5283%" y="159.50"></text></g><g><title>privacy_checking_modules (920,190 samples, 0.15%)</title><rect x="23.7547%" y="149" width="0.1478%" height="15" fill="rgb(214,148,48)"/><text x="24.0047%" y="159.50"></text></g><g><title>check_mod_privacy (918,830 samples, 0.15%)</title><rect x="23.7549%" y="133" width="0.1476%" height="15" fill="rgb(232,36,49)"/><text x="24.0049%" y="143.50"></text></g><g><title>misc_checking_3 (4,540,068 samples, 0.73%)</title><rect x="23.1753%" y="165" width="0.7294%" height="15" fill="rgb(209,103,24)"/><text x="23.4253%" y="175.50"></text></g><g><title>impl_parent (2,626,187 samples, 0.42%)</title><rect x="24.5826%" y="101" width="0.4219%" height="15" fill="rgb(229,88,8)"/><text x="24.8326%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,451,799 samples, 0.23%)</title><rect x="24.7713%" y="85" width="0.2332%" height="15" fill="rgb(213,181,19)"/><text x="25.0213%" y="95.50"></text></g><g><title>impl_trait_ref (5,313,884 samples, 0.85%)</title><rect x="25.0045%" y="101" width="0.8537%" height="15" fill="rgb(254,191,54)"/><text x="25.2545%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,371,038 samples, 0.70%)</title><rect x="25.1560%" y="85" width="0.7022%" height="15" fill="rgb(241,83,37)"/><text x="25.4060%" y="95.50"></text></g><g><title>trait_impls_of (807,879 samples, 0.13%)</title><rect x="25.9012%" y="101" width="0.1298%" height="15" fill="rgb(233,36,39)"/><text x="26.1512%" y="111.50"></text></g><g><title>coherent_trait (13,152,859 samples, 2.11%)</title><rect x="23.9212%" y="133" width="2.1131%" height="15" fill="rgb(226,3,54)"/><text x="24.1712%" y="143.50">c..</text></g><g><title>specialization_graph_of (13,128,809 samples, 2.11%)</title><rect x="23.9251%" y="117" width="2.1092%" height="15" fill="rgb(245,192,40)"/><text x="24.1751%" y="127.50">s..</text></g><g><title>coherence_checking (13,244,060 samples, 2.13%)</title><rect x="23.9171%" y="149" width="2.1277%" height="15" fill="rgb(238,167,29)"/><text x="24.1671%" y="159.50">c..</text></g><g><title>associated_item (989,071 samples, 0.16%)</title><rect x="30.8976%" y="85" width="0.1589%" height="15" fill="rgb(232,182,51)"/><text x="31.1476%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (843,119 samples, 0.14%)</title><rect x="30.9211%" y="69" width="0.1355%" height="15" fill="rgb(231,60,39)"/><text x="31.1711%" y="79.50"></text></g><g><title>associated_items (1,259,213 samples, 0.20%)</title><rect x="30.8606%" y="101" width="0.2023%" height="15" fill="rgb(208,69,12)"/><text x="31.1106%" y="111.50"></text></g><g><title>specializes (1,263,218 samples, 0.20%)</title><rect x="31.9940%" y="85" width="0.2029%" height="15" fill="rgb(235,93,37)"/><text x="32.2440%" y="95.50"></text></g><g><title>param_env (731,091 samples, 0.12%)</title><rect x="32.0795%" y="69" width="0.1175%" height="15" fill="rgb(213,116,39)"/><text x="32.3295%" y="79.50"></text></g><g><title>evaluate_obligation (6,812,665 samples, 1.09%)</title><rect x="31.1721%" y="101" width="1.0945%" height="15" fill="rgb(222,207,29)"/><text x="31.4221%" y="111.50"></text></g><g><title>evaluate_obligation (630,376 samples, 0.10%)</title><rect x="34.3510%" y="85" width="0.1013%" height="15" fill="rgb(206,96,30)"/><text x="34.6010%" y="95.50"></text></g><g><title>typeck (11,464,290 samples, 1.84%)</title><rect x="32.7069%" y="101" width="1.8418%" height="15" fill="rgb(218,138,4)"/><text x="32.9569%" y="111.50">t..</text></g><g><title>item_bodies_checking (52,960,003 samples, 8.51%)</title><rect x="26.0507%" y="149" width="8.5083%" height="15" fill="rgb(250,191,14)"/><text x="26.3007%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (52,957,823 samples, 8.51%)</title><rect x="26.0511%" y="133" width="8.5079%" height="15" fill="rgb(239,60,40)"/><text x="26.3011%" y="143.50">typeck_item_..</text></g><g><title>typeck (52,828,881 samples, 8.49%)</title><rect x="26.0718%" y="117" width="8.4872%" height="15" fill="rgb(206,27,48)"/><text x="26.3218%" y="127.50">typeck</text></g><g><title>item_types_checking (2,382,295 samples, 0.38%)</title><rect x="34.5590%" y="149" width="0.3827%" height="15" fill="rgb(225,35,8)"/><text x="34.8090%" y="159.50"></text></g><g><title>check_mod_item_types (2,379,805 samples, 0.38%)</title><rect x="34.5594%" y="133" width="0.3823%" height="15" fill="rgb(250,213,24)"/><text x="34.8094%" y="143.50"></text></g><g><title>predicates_of (873,142 samples, 0.14%)</title><rect x="35.0980%" y="117" width="0.1403%" height="15" fill="rgb(247,123,22)"/><text x="35.3480%" y="127.50"></text></g><g><title>predicates_defined_on (814,181 samples, 0.13%)</title><rect x="35.1075%" y="101" width="0.1308%" height="15" fill="rgb(231,138,38)"/><text x="35.3575%" y="111.50"></text></g><g><title>type_collecting (2,196,004 samples, 0.35%)</title><rect x="34.9419%" y="149" width="0.3528%" height="15" fill="rgb(231,145,46)"/><text x="35.1919%" y="159.50"></text></g><g><title>collect_mod_item_types (2,191,224 samples, 0.35%)</title><rect x="34.9427%" y="133" width="0.3520%" height="15" fill="rgb(251,118,11)"/><text x="35.1927%" y="143.50"></text></g><g><title>param_env (1,427,136 samples, 0.23%)</title><rect x="36.3985%" y="117" width="0.2293%" height="15" fill="rgb(217,147,25)"/><text x="36.6485%" y="127.50"></text></g><g><title>region_scope_tree (677,496 samples, 0.11%)</title><rect x="36.6371%" y="117" width="0.1088%" height="15" fill="rgb(247,81,37)"/><text x="36.8871%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,797,722 samples, 1.41%)</title><rect x="35.3387%" y="133" width="1.4134%" height="15" fill="rgb(209,12,38)"/><text x="35.5887%" y="143.50"></text></g><g><title>evaluate_obligation (1,816,371 samples, 0.29%)</title><rect x="37.2967%" y="117" width="0.2918%" height="15" fill="rgb(227,1,9)"/><text x="37.5467%" y="127.50"></text></g><g><title>check_item_well_formed (6,646,329 samples, 1.07%)</title><rect x="36.7521%" y="133" width="1.0678%" height="15" fill="rgb(248,47,43)"/><text x="37.0021%" y="143.50"></text></g><g><title>analysis (137,386,388 samples, 22.07%)</title><rect x="15.8622%" y="181" width="22.0718%" height="15" fill="rgb(221,10,30)"/><text x="16.1122%" y="191.50">analysis</text></g><g><title>type_check_crate (87,325,978 samples, 14.03%)</title><rect x="23.9047%" y="165" width="14.0293%" height="15" fill="rgb(210,229,1)"/><text x="24.1547%" y="175.50">type_check_crate</text></g><g><title>wf_checking (16,419,515 samples, 2.64%)</title><rect x="35.2961%" y="149" width="2.6379%" height="15" fill="rgb(222,148,37)"/><text x="35.5461%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (710,708 samples, 0.11%)</title><rect x="37.8198%" y="133" width="0.1142%" height="15" fill="rgb(234,67,33)"/><text x="38.0698%" y="143.50"></text></g><g><title>layout_of (1,111,771 samples, 0.18%)</title><rect x="40.3621%" y="133" width="0.1786%" height="15" fill="rgb(247,98,35)"/><text x="40.6121%" y="143.50"></text></g><g><title>predicates_of (748,037 samples, 0.12%)</title><rect x="40.7490%" y="117" width="0.1202%" height="15" fill="rgb(247,138,52)"/><text x="40.9990%" y="127.50"></text></g><g><title>param_env (2,046,145 samples, 0.33%)</title><rect x="40.5407%" y="133" width="0.3287%" height="15" fill="rgb(213,79,30)"/><text x="40.7907%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,453,322 samples, 0.88%)</title><rect x="40.0542%" y="149" width="0.8761%" height="15" fill="rgb(246,177,23)"/><text x="40.3042%" y="159.50"></text></g><g><title>codegen_module (17,121,341 samples, 2.75%)</title><rect x="38.2576%" y="165" width="2.7506%" height="15" fill="rgb(230,62,27)"/><text x="38.5076%" y="175.50">co..</text></g><g><title>item_attrs (713,385 samples, 0.11%)</title><rect x="41.1958%" y="101" width="0.1146%" height="15" fill="rgb(216,154,8)"/><text x="41.4458%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (683,765 samples, 0.11%)</title><rect x="41.2005%" y="85" width="0.1099%" height="15" fill="rgb(244,35,45)"/><text x="41.4505%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,154,560 samples, 0.19%)</title><rect x="41.1637%" y="117" width="0.1855%" height="15" fill="rgb(251,115,12)"/><text x="41.4137%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,205,079 samples, 0.19%)</title><rect x="41.4980%" y="101" width="0.1936%" height="15" fill="rgb(240,54,50)"/><text x="41.7480%" y="111.50"></text></g><g><title>optimized_mir (2,103,769 samples, 0.34%)</title><rect x="41.4181%" y="117" width="0.3380%" height="15" fill="rgb(233,84,52)"/><text x="41.6681%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,177,284 samples, 0.19%)</title><rect x="41.8355%" y="101" width="0.1891%" height="15" fill="rgb(207,117,47)"/><text x="42.0855%" y="111.50"></text></g><g><title>resolve_instance (2,422,566 samples, 0.39%)</title><rect x="41.7561%" y="117" width="0.3892%" height="15" fill="rgb(249,43,39)"/><text x="42.0061%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (7,292,518 samples, 1.17%)</title><rect x="41.0128%" y="133" width="1.1716%" height="15" fill="rgb(209,38,44)"/><text x="41.2628%" y="143.50"></text></g><g><title>monomorphization_collector (7,515,290 samples, 1.21%)</title><rect x="41.0125%" y="149" width="1.2074%" height="15" fill="rgb(236,212,23)"/><text x="41.2625%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (940,690 samples, 0.15%)</title><rect x="42.2205%" y="133" width="0.1511%" height="15" fill="rgb(242,79,21)"/><text x="42.4705%" y="143.50"></text></g><g><title>symbol_name (850,810 samples, 0.14%)</title><rect x="42.2349%" y="117" width="0.1367%" height="15" fill="rgb(211,96,35)"/><text x="42.4849%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (8,779,903 samples, 1.41%)</title><rect x="41.0089%" y="165" width="1.4105%" height="15" fill="rgb(253,215,40)"/><text x="41.2589%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,242,333 samples, 0.20%)</title><rect x="42.2199%" y="149" width="0.1996%" height="15" fill="rgb(211,81,21)"/><text x="42.4699%" y="159.50"></text></g><g><title>codegen_crate (27,969,396 samples, 4.49%)</title><rect x="37.9354%" y="181" width="4.4934%" height="15" fill="rgb(208,190,38)"/><text x="38.1854%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (128,317,242 samples, 20.61%)</title><rect x="42.4288%" y="181" width="20.6148%" height="15" fill="rgb(235,213,38)"/><text x="42.6788%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (122,522,522 samples, 19.68%)</title><rect x="43.3598%" y="165" width="19.6838%" height="15" fill="rgb(237,122,38)"/><text x="43.6098%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (29,398,372 samples, 4.72%)</title><rect x="63.6682%" y="165" width="4.7230%" height="15" fill="rgb(244,218,35)"/><text x="63.9182%" y="175.50">LLVM_l..</text></g><g><title>LLVM_module_codegen (49,927,981 samples, 8.02%)</title><rect x="68.3912%" y="165" width="8.0212%" height="15" fill="rgb(240,68,47)"/><text x="68.6412%" y="175.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (49,077,741 samples, 7.88%)</title><rect x="68.5278%" y="149" width="7.8846%" height="15" fill="rgb(210,16,53)"/><text x="68.7778%" y="159.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (2,045,272 samples, 0.33%)</title><rect x="76.4124%" y="165" width="0.3286%" height="15" fill="rgb(235,124,12)"/><text x="76.6624%" y="175.50"></text></g><g><title>codegen_module_perform_lto (85,436,696 samples, 13.73%)</title><rect x="63.0436%" y="181" width="13.7258%" height="15" fill="rgb(224,169,11)"/><text x="63.2936%" y="191.50">codegen_module_perfor..</text></g><g><title>macro_expand_crate (16,122,181 samples, 2.59%)</title><rect x="76.8412%" y="165" width="2.5901%" height="15" fill="rgb(250,166,2)"/><text x="77.0912%" y="175.50">ma..</text></g><g><title>expand_crate (16,112,171 samples, 2.59%)</title><rect x="76.8428%" y="149" width="2.5885%" height="15" fill="rgb(242,216,29)"/><text x="77.0928%" y="159.50">ex..</text></g><g><title>metadata_register_crate (1,900,480 samples, 0.31%)</title><rect x="79.1260%" y="133" width="0.3053%" height="15" fill="rgb(230,116,27)"/><text x="79.3760%" y="143.50"></text></g><g><title>metadata_register_crate (699,218 samples, 0.11%)</title><rect x="79.3190%" y="117" width="0.1123%" height="15" fill="rgb(228,99,48)"/><text x="79.5690%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (936,611 samples, 0.15%)</title><rect x="79.4317%" y="165" width="0.1505%" height="15" fill="rgb(253,11,6)"/><text x="79.6817%" y="175.50"></text></g><g><title>late_resolve_crate (2,118,502 samples, 0.34%)</title><rect x="79.5996%" y="149" width="0.3403%" height="15" fill="rgb(247,143,39)"/><text x="79.8496%" y="159.50"></text></g><g><title>configure_and_expand (19,859,911 samples, 3.19%)</title><rect x="76.7694%" y="181" width="3.1906%" height="15" fill="rgb(236,97,10)"/><text x="77.0194%" y="191.50">con..</text></g><g><title>resolve_crate (2,352,086 samples, 0.38%)</title><rect x="79.5821%" y="165" width="0.3779%" height="15" fill="rgb(233,208,19)"/><text x="79.8321%" y="175.50"></text></g><g><title>free_global_ctxt (6,349,757 samples, 1.02%)</title><rect x="80.0858%" y="181" width="1.0201%" height="15" fill="rgb(216,164,2)"/><text x="80.3358%" y="191.50"></text></g><g><title>layout_of (1,010,685 samples, 0.16%)</title><rect x="82.3866%" y="149" width="0.1624%" height="15" fill="rgb(220,129,5)"/><text x="82.6366%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,240,001 samples, 0.84%)</title><rect x="82.5490%" y="149" width="0.8418%" height="15" fill="rgb(242,17,10)"/><text x="82.7990%" y="159.50"></text></g><g><title>optimized_mir (11,850,502 samples, 1.90%)</title><rect x="81.5311%" y="165" width="1.9038%" height="15" fill="rgb(242,107,0)"/><text x="81.7811%" y="175.50">o..</text></g><g><title>generate_crate_metadata (14,629,776 samples, 2.35%)</title><rect x="81.1059%" y="181" width="2.3503%" height="15" fill="rgb(251,28,31)"/><text x="81.3559%" y="191.50">g..</text></g><g><title>hir_lowering (3,290,215 samples, 0.53%)</title><rect x="83.4562%" y="181" width="0.5286%" height="15" fill="rgb(233,223,10)"/><text x="83.7062%" y="191.50"></text></g><g><title>finish_ongoing_codegen (78,881,938 samples, 12.67%)</title><rect x="83.9877%" y="165" width="12.6728%" height="15" fill="rgb(215,21,27)"/><text x="84.2377%" y="175.50">finish_ongoing_code..</text></g><g><title>link_crate (1,349,214 samples, 0.22%)</title><rect x="96.6605%" y="165" width="0.2168%" height="15" fill="rgb(232,23,21)"/><text x="96.9105%" y="175.50"></text></g><g><title>link_binary (1,147,342 samples, 0.18%)</title><rect x="96.6929%" y="149" width="0.1843%" height="15" fill="rgb(244,5,23)"/><text x="96.9429%" y="159.50"></text></g><g><title>link_rlib (771,898 samples, 0.12%)</title><rect x="96.7532%" y="133" width="0.1240%" height="15" fill="rgb(226,81,46)"/><text x="97.0032%" y="143.50"></text></g><g><title>link (80,258,113 samples, 12.89%)</title><rect x="83.9848%" y="181" width="12.8939%" height="15" fill="rgb(247,70,30)"/><text x="84.2348%" y="191.50">link</text></g><g><title>parse_crate (16,600,666 samples, 2.67%)</title><rect x="96.8787%" y="181" width="2.6670%" height="15" fill="rgb(212,68,19)"/><text x="97.1287%" y="191.50">pa..</text></g><g><title>self_profile_alloc_query_strings (2,099,642 samples, 0.34%)</title><rect x="99.5814%" y="181" width="0.3373%" height="15" fill="rgb(240,187,13)"/><text x="99.8314%" y="191.50"></text></g><g><title>all (622,452,648 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (622,452,648 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>