<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,377,005 samples, 6.32%)</title><rect x="0.1717%" y="325" width="6.3216%" height="15" fill="rgb(227,0,7)"/><text x="0.4217%" y="335.50">LLVM_pas..</text></g><g><title>needs_drop_raw (1,367,144 samples, 0.42%)</title><rect x="12.6852%" y="213" width="0.4241%" height="15" fill="rgb(217,0,24)"/><text x="12.9352%" y="223.50"></text></g><g><title>is_copy_raw (1,052,280 samples, 0.33%)</title><rect x="12.7829%" y="197" width="0.3264%" height="15" fill="rgb(221,193,54)"/><text x="13.0329%" y="207.50"></text></g><g><title>evaluate_obligation (864,027 samples, 0.27%)</title><rect x="12.8413%" y="181" width="0.2680%" height="15" fill="rgb(248,212,6)"/><text x="13.0913%" y="191.50"></text></g><g><title>specialization_graph_of (1,023,323 samples, 0.32%)</title><rect x="13.2746%" y="197" width="0.3175%" height="15" fill="rgb(208,68,35)"/><text x="13.5246%" y="207.50"></text></g><g><title>impl_trait_ref (385,584 samples, 0.12%)</title><rect x="13.4724%" y="181" width="0.1196%" height="15" fill="rgb(232,128,0)"/><text x="13.7224%" y="191.50"></text></g><g><title>resolve_instance (1,628,932 samples, 0.51%)</title><rect x="13.1093%" y="213" width="0.5053%" height="15" fill="rgb(207,160,47)"/><text x="13.3593%" y="223.50"></text></g><g><title>thir_body (1,003,141 samples, 0.31%)</title><rect x="13.6225%" y="213" width="0.3112%" height="15" fill="rgb(228,23,34)"/><text x="13.8725%" y="223.50"></text></g><g><title>mir_const (8,363,025 samples, 2.59%)</title><rect x="11.3480%" y="261" width="2.5945%" height="15" fill="rgb(218,30,26)"/><text x="11.5980%" y="271.50">mi..</text></g><g><title>unsafety_check_result (7,402,926 samples, 2.30%)</title><rect x="11.6458%" y="245" width="2.2966%" height="15" fill="rgb(220,122,19)"/><text x="11.8958%" y="255.50">u..</text></g><g><title>mir_built (6,700,341 samples, 2.08%)</title><rect x="11.8638%" y="229" width="2.0787%" height="15" fill="rgb(250,228,42)"/><text x="12.1138%" y="239.50">m..</text></g><g><title>mir_promoted (9,346,302 samples, 2.90%)</title><rect x="11.0514%" y="277" width="2.8995%" height="15" fill="rgb(240,193,28)"/><text x="11.3014%" y="287.50">mi..</text></g><g><title>type_op_ascribe_user_type (758,010 samples, 0.24%)</title><rect x="13.9509%" y="277" width="0.2352%" height="15" fill="rgb(216,20,37)"/><text x="14.2009%" y="287.50"></text></g><g><title>type_op_normalize_fn_sig (370,052 samples, 0.11%)</title><rect x="14.1861%" y="277" width="0.1148%" height="15" fill="rgb(206,188,39)"/><text x="14.4361%" y="287.50"></text></g><g><title>type_op_prove_predicate (3,319,628 samples, 1.03%)</title><rect x="14.3822%" y="277" width="1.0299%" height="15" fill="rgb(217,207,13)"/><text x="14.6322%" y="287.50"></text></g><g><title>MIR_borrow_checking (28,309,294 samples, 8.78%)</title><rect x="6.6323%" y="309" width="8.7824%" height="15" fill="rgb(231,73,38)"/><text x="6.8823%" y="319.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (28,200,163 samples, 8.75%)</title><rect x="6.6661%" y="293" width="8.7486%" height="15" fill="rgb(225,20,46)"/><text x="6.9161%" y="303.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (523,955 samples, 0.16%)</title><rect x="15.6111%" y="277" width="0.1625%" height="15" fill="rgb(210,31,41)"/><text x="15.8611%" y="287.50"></text></g><g><title>check_mod_attrs (840,211 samples, 0.26%)</title><rect x="15.5130%" y="293" width="0.2607%" height="15" fill="rgb(221,200,47)"/><text x="15.7630%" y="303.50"></text></g><g><title>check_mod_unstable_api_usage (514,446 samples, 0.16%)</title><rect x="15.8597%" y="293" width="0.1596%" height="15" fill="rgb(226,26,5)"/><text x="16.1097%" y="303.50"></text></g><g><title>misc_checking_1 (1,743,280 samples, 0.54%)</title><rect x="15.5022%" y="309" width="0.5408%" height="15" fill="rgb(249,33,26)"/><text x="15.7522%" y="319.50"></text></g><g><title>liveness_and_intrinsic_checking (1,384,916 samples, 0.43%)</title><rect x="16.0435%" y="293" width="0.4296%" height="15" fill="rgb(235,183,28)"/><text x="16.2935%" y="303.50"></text></g><g><title>check_mod_liveness (1,225,505 samples, 0.38%)</title><rect x="16.0930%" y="277" width="0.3802%" height="15" fill="rgb(221,5,38)"/><text x="16.3430%" y="287.50"></text></g><g><title>type_uninhabited_from (604,206 samples, 0.19%)</title><rect x="16.2857%" y="261" width="0.1874%" height="15" fill="rgb(247,18,42)"/><text x="16.5357%" y="271.50"></text></g><g><title>type_uninhabited_from (483,586 samples, 0.15%)</title><rect x="16.3232%" y="245" width="0.1500%" height="15" fill="rgb(241,131,45)"/><text x="16.5732%" y="255.50"></text></g><g><title>type_uninhabited_from (437,456 samples, 0.14%)</title><rect x="16.3375%" y="229" width="0.1357%" height="15" fill="rgb(249,31,29)"/><text x="16.5875%" y="239.50"></text></g><g><title>type_uninhabited_from (405,086 samples, 0.13%)</title><rect x="16.3475%" y="213" width="0.1257%" height="15" fill="rgb(225,111,53)"/><text x="16.5975%" y="223.50"></text></g><g><title>type_uninhabited_from (363,275 samples, 0.11%)</title><rect x="16.3605%" y="197" width="0.1127%" height="15" fill="rgb(238,160,17)"/><text x="16.6105%" y="207.50"></text></g><g><title>misc_checking_2 (2,335,846 samples, 0.72%)</title><rect x="16.0430%" y="309" width="0.7247%" height="15" fill="rgb(214,148,48)"/><text x="16.2930%" y="319.50"></text></g><g><title>match_checking (949,160 samples, 0.29%)</title><rect x="16.4732%" y="293" width="0.2945%" height="15" fill="rgb(232,36,49)"/><text x="16.7232%" y="303.50"></text></g><g><title>check_match (903,899 samples, 0.28%)</title><rect x="16.4872%" y="277" width="0.2804%" height="15" fill="rgb(209,103,24)"/><text x="16.7372%" y="287.50"></text></g><g><title>check_private_in_public (350,804 samples, 0.11%)</title><rect x="16.7710%" y="293" width="0.1088%" height="15" fill="rgb(229,88,8)"/><text x="17.0210%" y="303.50"></text></g><g><title>death_checking (643,147 samples, 0.20%)</title><rect x="16.8799%" y="293" width="0.1995%" height="15" fill="rgb(213,181,19)"/><text x="17.1299%" y="303.50"></text></g><g><title>param_env (816,268 samples, 0.25%)</title><rect x="17.5126%" y="261" width="0.2532%" height="15" fill="rgb(254,191,54)"/><text x="17.7626%" y="271.50"></text></g><g><title>crate_lints (3,752,392 samples, 1.16%)</title><rect x="17.0799%" y="277" width="1.1641%" height="15" fill="rgb(241,83,37)"/><text x="17.3299%" y="287.50"></text></g><g><title>type_of (1,527,258 samples, 0.47%)</title><rect x="17.7702%" y="261" width="0.4738%" height="15" fill="rgb(233,36,39)"/><text x="18.0202%" y="271.50"></text></g><g><title>metadata_decode_entry_type_of (1,174,015 samples, 0.36%)</title><rect x="17.8798%" y="245" width="0.3642%" height="15" fill="rgb(226,3,54)"/><text x="18.1298%" y="255.50"></text></g><g><title>lint_checking (4,667,983 samples, 1.45%)</title><rect x="17.0794%" y="293" width="1.4482%" height="15" fill="rgb(245,192,40)"/><text x="17.3294%" y="303.50"></text></g><g><title>module_lints (913,831 samples, 0.28%)</title><rect x="18.2441%" y="277" width="0.2835%" height="15" fill="rgb(238,167,29)"/><text x="18.4941%" y="287.50"></text></g><g><title>lint_mod (905,110 samples, 0.28%)</title><rect x="18.2468%" y="261" width="0.2808%" height="15" fill="rgb(232,182,51)"/><text x="18.4968%" y="271.50"></text></g><g><title>privacy_access_levels (661,637 samples, 0.21%)</title><rect x="18.5275%" y="293" width="0.2053%" height="15" fill="rgb(231,60,39)"/><text x="18.7775%" y="303.50"></text></g><g><title>privacy_checking_modules (1,967,601 samples, 0.61%)</title><rect x="18.7328%" y="293" width="0.6104%" height="15" fill="rgb(208,69,12)"/><text x="18.9828%" y="303.50"></text></g><g><title>check_mod_privacy (1,961,921 samples, 0.61%)</title><rect x="18.7346%" y="277" width="0.6086%" height="15" fill="rgb(235,93,37)"/><text x="18.9846%" y="287.50"></text></g><g><title>misc_checking_3 (8,316,542 samples, 2.58%)</title><rect x="16.7676%" y="309" width="2.5800%" height="15" fill="rgb(213,116,39)"/><text x="17.0176%" y="319.50">mi..</text></g><g><title>impl_parent (1,522,211 samples, 0.47%)</title><rect x="20.0800%" y="245" width="0.4722%" height="15" fill="rgb(222,207,29)"/><text x="20.3300%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,001,083 samples, 0.31%)</title><rect x="20.2417%" y="229" width="0.3106%" height="15" fill="rgb(206,96,30)"/><text x="20.4917%" y="239.50"></text></g><g><title>impl_trait_ref (4,688,836 samples, 1.45%)</title><rect x="20.5522%" y="245" width="1.4546%" height="15" fill="rgb(218,138,4)"/><text x="20.8022%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,938,897 samples, 1.22%)</title><rect x="20.7849%" y="229" width="1.2220%" height="15" fill="rgb(250,191,14)"/><text x="21.0349%" y="239.50"></text></g><g><title>coherent_trait (9,160,941 samples, 2.84%)</title><rect x="19.3931%" y="277" width="2.8420%" height="15" fill="rgb(239,60,40)"/><text x="19.6431%" y="287.50">co..</text></g><g><title>specialization_graph_of (9,144,331 samples, 2.84%)</title><rect x="19.3983%" y="261" width="2.8369%" height="15" fill="rgb(206,27,48)"/><text x="19.6483%" y="271.50">sp..</text></g><g><title>trait_impls_of (732,436 samples, 0.23%)</title><rect x="22.0079%" y="245" width="0.2272%" height="15" fill="rgb(225,35,8)"/><text x="22.2579%" y="255.50"></text></g><g><title>coherence_checking (9,252,713 samples, 2.87%)</title><rect x="19.3874%" y="293" width="2.8705%" height="15" fill="rgb(250,213,24)"/><text x="19.6374%" y="303.50">co..</text></g><g><title>dropck_outlives (717,231 samples, 0.22%)</title><rect x="26.6625%" y="245" width="0.2225%" height="15" fill="rgb(247,123,22)"/><text x="26.9125%" y="255.50"></text></g><g><title>evaluate_obligation (1,571,235 samples, 0.49%)</title><rect x="26.8851%" y="245" width="0.4874%" height="15" fill="rgb(231,138,38)"/><text x="27.1351%" y="255.50"></text></g><g><title>method_autoderef_steps (402,845 samples, 0.12%)</title><rect x="27.4977%" y="245" width="0.1250%" height="15" fill="rgb(231,145,46)"/><text x="27.7477%" y="255.50"></text></g><g><title>evaluate_obligation (1,215,406 samples, 0.38%)</title><rect x="31.5609%" y="229" width="0.3771%" height="15" fill="rgb(251,118,11)"/><text x="31.8109%" y="239.50"></text></g><g><title>is_copy_raw (366,463 samples, 0.11%)</title><rect x="31.9751%" y="229" width="0.1137%" height="15" fill="rgb(217,147,25)"/><text x="32.2251%" y="239.50"></text></g><g><title>typeck (14,247,399 samples, 4.42%)</title><rect x="27.7856%" y="245" width="4.4200%" height="15" fill="rgb(247,81,37)"/><text x="28.0356%" y="255.50">typeck</text></g><g><title>item_bodies_checking (32,054,785 samples, 9.94%)</title><rect x="22.2685%" y="293" width="9.9444%" height="15" fill="rgb(209,12,38)"/><text x="22.5185%" y="303.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (32,050,885 samples, 9.94%)</title><rect x="22.2697%" y="277" width="9.9432%" height="15" fill="rgb(227,1,9)"/><text x="22.5197%" y="287.50">typeck_item_bo..</text></g><g><title>typeck (31,978,545 samples, 9.92%)</title><rect x="22.2921%" y="261" width="9.9207%" height="15" fill="rgb(248,47,43)"/><text x="22.5421%" y="271.50">typeck</text></g><g><title>type_op_prove_predicate (686,300 samples, 0.21%)</title><rect x="37.9357%" y="197" width="0.2129%" height="15" fill="rgb(221,10,30)"/><text x="38.1857%" y="207.50"></text></g><g><title>mir_borrowck (2,606,520 samples, 0.81%)</title><rect x="37.3404%" y="213" width="0.8086%" height="15" fill="rgb(210,229,1)"/><text x="37.5904%" y="223.50"></text></g><g><title>mir_const (736,866 samples, 0.23%)</title><rect x="38.3422%" y="197" width="0.2286%" height="15" fill="rgb(222,148,37)"/><text x="38.5922%" y="207.50"></text></g><g><title>mir_promoted (1,375,300 samples, 0.43%)</title><rect x="38.1491%" y="213" width="0.4267%" height="15" fill="rgb(234,67,33)"/><text x="38.3991%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (1,466,826 samples, 0.46%)</title><rect x="38.6131%" y="213" width="0.4551%" height="15" fill="rgb(247,98,35)"/><text x="38.8631%" y="223.50"></text></g><g><title>normalize_projection_ty (1,027,984 samples, 0.32%)</title><rect x="38.7493%" y="197" width="0.3189%" height="15" fill="rgb(247,138,52)"/><text x="38.9993%" y="207.50"></text></g><g><title>type_op_normalize_predicate (512,557 samples, 0.16%)</title><rect x="39.0682%" y="213" width="0.1590%" height="15" fill="rgb(213,79,30)"/><text x="39.3182%" y="223.50"></text></g><g><title>type_op_prove_predicate (3,687,467 samples, 1.14%)</title><rect x="39.2644%" y="213" width="1.1440%" height="15" fill="rgb(246,177,23)"/><text x="39.5144%" y="223.50"></text></g><g><title>mir_borrowck (19,938,999 samples, 6.19%)</title><rect x="34.2232%" y="229" width="6.1857%" height="15" fill="rgb(230,62,27)"/><text x="34.4732%" y="239.50">mir_borr..</text></g><g><title>needs_drop_raw (457,145 samples, 0.14%)</title><rect x="40.8048%" y="165" width="0.1418%" height="15" fill="rgb(216,154,8)"/><text x="41.0548%" y="175.50"></text></g><g><title>associated_items (384,384 samples, 0.12%)</title><rect x="49.2723%" y="149" width="0.1192%" height="15" fill="rgb(244,35,45)"/><text x="49.5223%" y="159.50"></text></g><g><title>impl_trait_ref (383,664 samples, 0.12%)</title><rect x="50.0593%" y="53" width="0.1190%" height="15" fill="rgb(251,115,12)"/><text x="50.3093%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (350,114 samples, 0.11%)</title><rect x="50.0697%" y="37" width="0.1086%" height="15" fill="rgb(240,54,50)"/><text x="50.3197%" y="47.50"></text></g><g><title>coherent_trait (696,898 samples, 0.22%)</title><rect x="49.9801%" y="85" width="0.2162%" height="15" fill="rgb(233,84,52)"/><text x="50.2301%" y="95.50"></text></g><g><title>specialization_graph_of (693,628 samples, 0.22%)</title><rect x="49.9811%" y="69" width="0.2152%" height="15" fill="rgb(207,117,47)"/><text x="50.2311%" y="79.50"></text></g><g><title>adt_destructor (746,858 samples, 0.23%)</title><rect x="49.9674%" y="117" width="0.2317%" height="15" fill="rgb(249,43,39)"/><text x="50.2174%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (728,498 samples, 0.23%)</title><rect x="49.9731%" y="101" width="0.2260%" height="15" fill="rgb(209,38,44)"/><text x="50.2231%" y="111.50"></text></g><g><title>adt_dtorck_constraint (721,116 samples, 0.22%)</title><rect x="50.3717%" y="85" width="0.2237%" height="15" fill="rgb(236,212,23)"/><text x="50.6217%" y="95.50"></text></g><g><title>adt_dtorck_constraint (930,529 samples, 0.29%)</title><rect x="50.3191%" y="101" width="0.2887%" height="15" fill="rgb(242,79,21)"/><text x="50.5691%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,378,683 samples, 0.43%)</title><rect x="50.1991%" y="117" width="0.4277%" height="15" fill="rgb(211,96,35)"/><text x="50.4491%" y="127.50"></text></g><g><title>adt_dtorck_constraint (2,580,766 samples, 0.80%)</title><rect x="49.8447%" y="133" width="0.8006%" height="15" fill="rgb(253,215,40)"/><text x="50.0947%" y="143.50"></text></g><g><title>normalize_projection_ty (348,871 samples, 0.11%)</title><rect x="50.7000%" y="133" width="0.1082%" height="15" fill="rgb(211,81,21)"/><text x="50.9500%" y="143.50"></text></g><g><title>dropck_outlives (4,516,736 samples, 1.40%)</title><rect x="49.4083%" y="149" width="1.4012%" height="15" fill="rgb(208,190,38)"/><text x="49.6583%" y="159.50"></text></g><g><title>evaluate_obligation (5,139,783 samples, 1.59%)</title><rect x="50.8116%" y="149" width="1.5945%" height="15" fill="rgb(235,213,38)"/><text x="51.0616%" y="159.50"></text></g><g><title>trait_impls_of (606,899 samples, 0.19%)</title><rect x="52.2178%" y="133" width="0.1883%" height="15" fill="rgb(237,122,38)"/><text x="52.4678%" y="143.50"></text></g><g><title>implied_outlives_bounds (331,125 samples, 0.10%)</title><rect x="52.5094%" y="149" width="0.1027%" height="15" fill="rgb(244,218,35)"/><text x="52.7594%" y="159.50"></text></g><g><title>is_copy_raw (2,212,076 samples, 0.69%)</title><rect x="52.6271%" y="149" width="0.6863%" height="15" fill="rgb(240,68,47)"/><text x="52.8771%" y="159.50"></text></g><g><title>evaluate_obligation (1,850,412 samples, 0.57%)</title><rect x="52.7393%" y="133" width="0.5741%" height="15" fill="rgb(210,16,53)"/><text x="52.9893%" y="143.50"></text></g><g><title>item_attrs (526,447 samples, 0.16%)</title><rect x="53.3133%" y="149" width="0.1633%" height="15" fill="rgb(235,124,12)"/><text x="53.5633%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (516,317 samples, 0.16%)</title><rect x="53.3165%" y="133" width="0.1602%" height="15" fill="rgb(224,169,11)"/><text x="53.5665%" y="143.50"></text></g><g><title>item_bounds (368,523 samples, 0.11%)</title><rect x="53.4766%" y="149" width="0.1143%" height="15" fill="rgb(250,166,2)"/><text x="53.7266%" y="159.50"></text></g><g><title>predicates_of (359,252 samples, 0.11%)</title><rect x="53.7028%" y="149" width="0.1115%" height="15" fill="rgb(242,216,29)"/><text x="53.9528%" y="159.50"></text></g><g><title>mir_built (43,192,951 samples, 13.40%)</title><rect x="40.5830%" y="181" width="13.3998%" height="15" fill="rgb(230,116,27)"/><text x="40.8330%" y="191.50">mir_built</text></g><g><title>typeck (41,738,045 samples, 12.95%)</title><rect x="41.0344%" y="165" width="12.9484%" height="15" fill="rgb(228,99,48)"/><text x="41.2844%" y="175.50">typeck</text></g><g><title>adt_drop_tys (443,666 samples, 0.14%)</title><rect x="54.9041%" y="133" width="0.1376%" height="15" fill="rgb(253,11,6)"/><text x="55.1541%" y="143.50"></text></g><g><title>needs_drop_raw (950,411 samples, 0.29%)</title><rect x="54.8479%" y="149" width="0.2948%" height="15" fill="rgb(247,143,39)"/><text x="55.0979%" y="159.50"></text></g><g><title>param_env (343,994 samples, 0.11%)</title><rect x="55.3366%" y="133" width="0.1067%" height="15" fill="rgb(236,97,10)"/><text x="55.5866%" y="143.50"></text></g><g><title>thir_body (932,732 samples, 0.29%)</title><rect x="55.1569%" y="149" width="0.2894%" height="15" fill="rgb(233,208,19)"/><text x="55.4069%" y="159.50"></text></g><g><title>mir_built (4,308,459 samples, 1.34%)</title><rect x="54.1223%" y="165" width="1.3366%" height="15" fill="rgb(216,164,2)"/><text x="54.3723%" y="175.50"></text></g><g><title>needs_drop_raw (336,534 samples, 0.10%)</title><rect x="55.5984%" y="133" width="0.1044%" height="15" fill="rgb(220,129,5)"/><text x="55.8484%" y="143.50"></text></g><g><title>mir_built (839,408 samples, 0.26%)</title><rect x="55.5046%" y="149" width="0.2604%" height="15" fill="rgb(242,17,10)"/><text x="55.7546%" y="159.50"></text></g><g><title>mir_const (49,298,561 samples, 15.29%)</title><rect x="40.4716%" y="213" width="15.2939%" height="15" fill="rgb(242,107,0)"/><text x="40.7216%" y="223.50">mir_const</text></g><g><title>unsafety_check_result (49,032,754 samples, 15.21%)</title><rect x="40.5541%" y="197" width="15.2115%" height="15" fill="rgb(251,28,31)"/><text x="40.8041%" y="207.50">unsafety_check_result</text></g><g><title>unsafety_check_result (5,746,563 samples, 1.78%)</title><rect x="53.9828%" y="181" width="1.7828%" height="15" fill="rgb(233,223,10)"/><text x="54.2328%" y="191.50">u..</text></g><g><title>unsafety_check_result (983,561 samples, 0.31%)</title><rect x="55.4604%" y="165" width="0.3051%" height="15" fill="rgb(215,21,27)"/><text x="55.7104%" y="175.50"></text></g><g><title>mir_promoted (49,518,951 samples, 15.36%)</title><rect x="40.4089%" y="229" width="15.3623%" height="15" fill="rgb(232,23,21)"/><text x="40.6589%" y="239.50">mir_promoted</text></g><g><title>item_types_checking (77,382,728 samples, 24.01%)</title><rect x="32.2129%" y="293" width="24.0065%" height="15" fill="rgb(244,5,23)"/><text x="32.4629%" y="303.50">item_types_checking</text></g><g><title>check_mod_item_types (77,368,588 samples, 24.00%)</title><rect x="32.2173%" y="277" width="24.0021%" height="15" fill="rgb(226,81,46)"/><text x="32.4673%" y="287.50">check_mod_item_types</text></g><g><title>type_of (74,508,807 samples, 23.11%)</title><rect x="33.1045%" y="261" width="23.1149%" height="15" fill="rgb(247,70,30)"/><text x="33.3545%" y="271.50">type_of</text></g><g><title>mir_borrowck (74,442,147 samples, 23.09%)</title><rect x="33.1251%" y="245" width="23.0942%" height="15" fill="rgb(212,68,19)"/><text x="33.3751%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,175,997 samples, 0.36%)</title><rect x="55.8545%" y="229" width="0.3648%" height="15" fill="rgb(240,187,13)"/><text x="56.1045%" y="239.50"></text></g><g><title>fn_sig (491,194 samples, 0.15%)</title><rect x="56.3259%" y="261" width="0.1524%" height="15" fill="rgb(223,113,26)"/><text x="56.5759%" y="271.50"></text></g><g><title>late_bound_vars_map (728,779 samples, 0.23%)</title><rect x="56.7566%" y="213" width="0.2261%" height="15" fill="rgb(206,192,2)"/><text x="57.0066%" y="223.50"></text></g><g><title>resolve_lifetimes (708,209 samples, 0.22%)</title><rect x="56.7630%" y="197" width="0.2197%" height="15" fill="rgb(241,108,4)"/><text x="57.0130%" y="207.50"></text></g><g><title>explicit_predicates_of (1,272,816 samples, 0.39%)</title><rect x="56.6254%" y="229" width="0.3949%" height="15" fill="rgb(247,173,49)"/><text x="56.8754%" y="239.50"></text></g><g><title>predicates_of (1,685,410 samples, 0.52%)</title><rect x="56.5845%" y="261" width="0.5229%" height="15" fill="rgb(224,114,35)"/><text x="56.8345%" y="271.50"></text></g><g><title>predicates_defined_on (1,636,180 samples, 0.51%)</title><rect x="56.5998%" y="245" width="0.5076%" height="15" fill="rgb(245,159,27)"/><text x="56.8498%" y="255.50"></text></g><g><title>type_collecting (2,972,393 samples, 0.92%)</title><rect x="56.2219%" y="293" width="0.9221%" height="15" fill="rgb(245,172,44)"/><text x="56.4719%" y="303.50"></text></g><g><title>collect_mod_item_types (2,960,823 samples, 0.92%)</title><rect x="56.2255%" y="277" width="0.9185%" height="15" fill="rgb(236,23,11)"/><text x="56.4755%" y="287.50"></text></g><g><title>evaluate_obligation (833,958 samples, 0.26%)</title><rect x="57.9979%" y="261" width="0.2587%" height="15" fill="rgb(205,117,38)"/><text x="58.2479%" y="271.50"></text></g><g><title>implied_outlives_bounds (326,046 samples, 0.10%)</title><rect x="58.2690%" y="261" width="0.1011%" height="15" fill="rgb(237,72,25)"/><text x="58.5190%" y="271.50"></text></g><g><title>region_scope_tree (353,103 samples, 0.11%)</title><rect x="58.4868%" y="261" width="0.1095%" height="15" fill="rgb(244,70,9)"/><text x="58.7368%" y="271.50"></text></g><g><title>check_impl_item_well_formed (4,439,139 samples, 1.38%)</title><rect x="57.2314%" y="277" width="1.3772%" height="15" fill="rgb(217,125,39)"/><text x="57.4814%" y="287.50"></text></g><g><title>adt_sized_constraint (365,734 samples, 0.11%)</title><rect x="59.3631%" y="245" width="0.1135%" height="15" fill="rgb(235,36,10)"/><text x="59.6131%" y="255.50"></text></g><g><title>evaluate_obligation (614,916 samples, 0.19%)</title><rect x="59.3263%" y="261" width="0.1908%" height="15" fill="rgb(251,123,47)"/><text x="59.5763%" y="271.50"></text></g><g><title>param_env (661,935 samples, 0.21%)</title><rect x="59.5745%" y="261" width="0.2054%" height="15" fill="rgb(221,13,13)"/><text x="59.8245%" y="271.50"></text></g><g><title>region_scope_tree (322,565 samples, 0.10%)</title><rect x="59.8201%" y="261" width="0.1001%" height="15" fill="rgb(238,131,9)"/><text x="60.0701%" y="271.50"></text></g><g><title>check_item_well_formed (4,548,512 samples, 1.41%)</title><rect x="58.6085%" y="277" width="1.4111%" height="15" fill="rgb(211,50,8)"/><text x="58.8585%" y="287.50"></text></g><g><title>analysis (172,845,576 samples, 53.62%)</title><rect x="6.4933%" y="325" width="53.6220%" height="15" fill="rgb(245,182,24)"/><text x="6.7433%" y="335.50">analysis</text></g><g><title>type_check_crate (131,410,667 samples, 40.77%)</title><rect x="19.3477%" y="309" width="40.7676%" height="15" fill="rgb(242,14,37)"/><text x="19.5977%" y="319.50">type_check_crate</text></g><g><title>wf_checking (9,569,966 samples, 2.97%)</title><rect x="57.1464%" y="293" width="2.9689%" height="15" fill="rgb(246,228,12)"/><text x="57.3964%" y="303.50">wf_..</text></g><g><title>fn_abi_of_instance (497,968 samples, 0.15%)</title><rect x="60.7204%" y="293" width="0.1545%" height="15" fill="rgb(213,55,15)"/><text x="60.9704%" y="303.50"></text></g><g><title>codegen_module (1,834,560 samples, 0.57%)</title><rect x="60.3789%" y="309" width="0.5691%" height="15" fill="rgb(209,9,3)"/><text x="60.6289%" y="319.50"></text></g><g><title>optimized_mir (339,334 samples, 0.11%)</title><rect x="61.0560%" y="261" width="0.1053%" height="15" fill="rgb(230,59,30)"/><text x="61.3060%" y="271.50"></text></g><g><title>monomorphization_collector_graph_walk (894,140 samples, 0.28%)</title><rect x="60.9544%" y="277" width="0.2774%" height="15" fill="rgb(209,121,21)"/><text x="61.2044%" y="287.50"></text></g><g><title>monomorphization_collector (928,320 samples, 0.29%)</title><rect x="60.9536%" y="293" width="0.2880%" height="15" fill="rgb(220,109,13)"/><text x="61.2036%" y="303.50"></text></g><g><title>collect_and_partition_mono_items (1,097,392 samples, 0.34%)</title><rect x="60.9483%" y="309" width="0.3404%" height="15" fill="rgb(232,18,1)"/><text x="61.1983%" y="319.50"></text></g><g><title>codegen_crate (3,963,874 samples, 1.23%)</title><rect x="60.1172%" y="325" width="1.2297%" height="15" fill="rgb(215,41,42)"/><text x="60.3672%" y="335.50"></text></g><g><title>codegen_module_optimize (14,171,656 samples, 4.40%)</title><rect x="61.3469%" y="325" width="4.3965%" height="15" fill="rgb(224,123,36)"/><text x="61.5969%" y="335.50">codeg..</text></g><g><title>LLVM_module_optimize (12,477,937 samples, 3.87%)</title><rect x="61.8724%" y="309" width="3.8710%" height="15" fill="rgb(240,125,3)"/><text x="62.1224%" y="319.50">LLVM..</text></g><g><title>LLVM_lto_optimize (3,969,213 samples, 1.23%)</title><rect x="66.0917%" y="309" width="1.2314%" height="15" fill="rgb(205,98,50)"/><text x="66.3417%" y="319.50"></text></g><g><title>LLVM_module_codegen (11,968,174 samples, 3.71%)</title><rect x="67.3230%" y="309" width="3.7129%" height="15" fill="rgb(205,185,37)"/><text x="67.5730%" y="319.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (11,754,951 samples, 3.65%)</title><rect x="67.3892%" y="293" width="3.6467%" height="15" fill="rgb(238,207,15)"/><text x="67.6392%" y="303.50">LLVM..</text></g><g><title>codegen_module_perform_lto (17,175,830 samples, 5.33%)</title><rect x="65.7434%" y="325" width="5.3285%" height="15" fill="rgb(213,199,42)"/><text x="65.9934%" y="335.50">codegen..</text></g><g><title>metadata_register_crate (10,636,547 samples, 3.30%)</title><rect x="76.3331%" y="277" width="3.2998%" height="15" fill="rgb(235,201,11)"/><text x="76.5831%" y="287.50">met..</text></g><g><title>metadata_register_crate (8,609,835 samples, 2.67%)</title><rect x="76.9618%" y="261" width="2.6710%" height="15" fill="rgb(207,46,11)"/><text x="77.2118%" y="271.50">me..</text></g><g><title>metadata_register_crate (4,007,884 samples, 1.24%)</title><rect x="78.3895%" y="245" width="1.2434%" height="15" fill="rgb(241,35,35)"/><text x="78.6395%" y="255.50"></text></g><g><title>macro_expand_crate (27,324,593 samples, 8.48%)</title><rect x="71.2051%" y="309" width="8.4769%" height="15" fill="rgb(243,32,47)"/><text x="71.4551%" y="319.50">macro_expand..</text></g><g><title>expand_crate (27,314,953 samples, 8.47%)</title><rect x="71.2081%" y="293" width="8.4739%" height="15" fill="rgb(247,202,23)"/><text x="71.4581%" y="303.50">expand_crate</text></g><g><title>late_resolve_crate (2,226,015 samples, 0.69%)</title><rect x="79.8269%" y="293" width="0.6906%" height="15" fill="rgb(219,102,11)"/><text x="80.0769%" y="303.50"></text></g><g><title>configure_and_expand (30,590,959 samples, 9.49%)</title><rect x="71.0719%" y="325" width="9.4903%" height="15" fill="rgb(243,110,44)"/><text x="71.3219%" y="335.50">configure_and_..</text></g><g><title>resolve_crate (2,717,920 samples, 0.84%)</title><rect x="79.7189%" y="309" width="0.8432%" height="15" fill="rgb(222,74,54)"/><text x="79.9689%" y="319.50"></text></g><g><title>early_lint_checks (411,645 samples, 0.13%)</title><rect x="80.6438%" y="325" width="0.1277%" height="15" fill="rgb(216,99,12)"/><text x="80.8938%" y="335.50"></text></g><g><title>free_global_ctxt (5,444,470 samples, 1.69%)</title><rect x="80.7715%" y="325" width="1.6890%" height="15" fill="rgb(226,22,26)"/><text x="81.0215%" y="335.50"></text></g><g><title>layout_of (343,704 samples, 0.11%)</title><rect x="87.3151%" y="165" width="0.1066%" height="15" fill="rgb(217,163,10)"/><text x="87.5651%" y="175.50"></text></g><g><title>layout_of (441,885 samples, 0.14%)</title><rect x="87.2920%" y="181" width="0.1371%" height="15" fill="rgb(213,25,53)"/><text x="87.5420%" y="191.50"></text></g><g><title>layout_of (591,206 samples, 0.18%)</title><rect x="87.2645%" y="197" width="0.1834%" height="15" fill="rgb(252,105,26)"/><text x="87.5145%" y="207.50"></text></g><g><title>layout_of (749,818 samples, 0.23%)</title><rect x="87.2266%" y="213" width="0.2326%" height="15" fill="rgb(220,39,43)"/><text x="87.4766%" y="223.50"></text></g><g><title>layout_of (958,930 samples, 0.30%)</title><rect x="87.1791%" y="229" width="0.2975%" height="15" fill="rgb(229,68,48)"/><text x="87.4291%" y="239.50"></text></g><g><title>layout_of (1,103,901 samples, 0.34%)</title><rect x="87.1499%" y="245" width="0.3425%" height="15" fill="rgb(252,8,32)"/><text x="87.3999%" y="255.50"></text></g><g><title>layout_of (1,455,294 samples, 0.45%)</title><rect x="87.0580%" y="261" width="0.4515%" height="15" fill="rgb(223,20,43)"/><text x="87.3080%" y="271.50"></text></g><g><title>layout_of (1,803,461 samples, 0.56%)</title><rect x="86.9676%" y="277" width="0.5595%" height="15" fill="rgb(229,81,49)"/><text x="87.2176%" y="287.50"></text></g><g><title>layout_of (3,038,244 samples, 0.94%)</title><rect x="86.6588%" y="293" width="0.9426%" height="15" fill="rgb(236,28,36)"/><text x="86.9088%" y="303.50"></text></g><g><title>is_copy_raw (2,476,638 samples, 0.77%)</title><rect x="91.0797%" y="261" width="0.7683%" height="15" fill="rgb(249,185,26)"/><text x="91.3297%" y="271.50"></text></g><g><title>evaluate_obligation (2,069,092 samples, 0.64%)</title><rect x="91.2062%" y="245" width="0.6419%" height="15" fill="rgb(249,174,33)"/><text x="91.4562%" y="255.50"></text></g><g><title>needs_drop_raw (2,916,053 samples, 0.90%)</title><rect x="90.9452%" y="277" width="0.9046%" height="15" fill="rgb(233,201,37)"/><text x="91.1952%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,531,575 samples, 4.51%)</title><rect x="87.6014%" y="293" width="4.5081%" height="15" fill="rgb(221,78,26)"/><text x="87.8514%" y="303.50">mir_d..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (799,599 samples, 0.25%)</title><rect x="91.8615%" y="277" width="0.2481%" height="15" fill="rgb(250,127,30)"/><text x="92.1115%" y="287.50"></text></g><g><title>normalize_projection_ty (448,966 samples, 0.14%)</title><rect x="91.9703%" y="261" width="0.1393%" height="15" fill="rgb(230,49,44)"/><text x="92.2203%" y="271.50"></text></g><g><title>specialization_graph_of (622,196 samples, 0.19%)</title><rect x="92.1688%" y="277" width="0.1930%" height="15" fill="rgb(229,67,23)"/><text x="92.4188%" y="287.50"></text></g><g><title>resolve_instance (784,519 samples, 0.24%)</title><rect x="92.1201%" y="293" width="0.2434%" height="15" fill="rgb(249,83,47)"/><text x="92.3701%" y="303.50"></text></g><g><title>optimized_mir (27,632,598 samples, 8.57%)</title><rect x="83.8015%" y="309" width="8.5725%" height="15" fill="rgb(215,43,3)"/><text x="84.0515%" y="319.50">optimized_mir</text></g><g><title>promoted_mir (900,549 samples, 0.28%)</title><rect x="92.3740%" y="309" width="0.2794%" height="15" fill="rgb(238,154,13)"/><text x="92.6240%" y="319.50"></text></g><g><title>generate_crate_metadata (32,896,655 samples, 10.21%)</title><rect x="82.4605%" y="325" width="10.2056%" height="15" fill="rgb(219,56,2)"/><text x="82.7105%" y="335.50">generate_crate_..</text></g><g><title>hir_lowering (4,268,667 samples, 1.32%)</title><rect x="92.6661%" y="325" width="1.3243%" height="15" fill="rgb(233,0,4)"/><text x="92.9161%" y="335.50"></text></g><g><title>finish_ongoing_codegen (13,749,972 samples, 4.27%)</title><rect x="93.9961%" y="309" width="4.2657%" height="15" fill="rgb(235,30,7)"/><text x="94.2461%" y="319.50">finis..</text></g><g><title>link_crate (2,066,473 samples, 0.64%)</title><rect x="98.2618%" y="309" width="0.6411%" height="15" fill="rgb(250,79,13)"/><text x="98.5118%" y="319.50"></text></g><g><title>link_binary (2,029,272 samples, 0.63%)</title><rect x="98.2733%" y="293" width="0.6295%" height="15" fill="rgb(211,146,34)"/><text x="98.5233%" y="303.50"></text></g><g><title>link_rlib (1,574,588 samples, 0.49%)</title><rect x="98.4144%" y="277" width="0.4885%" height="15" fill="rgb(228,22,38)"/><text x="98.6644%" y="287.50"></text></g><g><title>link (15,848,876 samples, 4.92%)</title><rect x="93.9904%" y="325" width="4.9168%" height="15" fill="rgb(235,168,5)"/><text x="94.2404%" y="335.50">link</text></g><g><title>parse_crate (1,524,617 samples, 0.47%)</title><rect x="98.9072%" y="325" width="0.4730%" height="15" fill="rgb(221,155,16)"/><text x="99.1572%" y="335.50"></text></g><g><title>self_profile_alloc_query_strings (1,118,043 samples, 0.35%)</title><rect x="99.4605%" y="325" width="0.3469%" height="15" fill="rgb(215,215,53)"/><text x="99.7105%" y="335.50"></text></g><g><title>all (322,340,701 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="367.50"></text></g><g><title>rustc (322,340,701 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="351.50">rustc</text></g><g><title>write_crate_metadata (536,496 samples, 0.17%)</title><rect x="99.8336%" y="325" width="0.1664%" height="15" fill="rgb(227,97,0)"/><text x="100.0836%" y="335.50"></text></g></svg></svg>