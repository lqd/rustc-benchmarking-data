<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (83,887,204 samples, 19.37%)</title><rect x="0.1744%" y="229" width="19.3652%" height="15" fill="rgb(227,0,7)"/><text x="0.4244%" y="239.50">LLVM_passes</text></g><g><title>needs_drop_raw (595,466 samples, 0.14%)</title><rect x="19.9926%" y="117" width="0.1375%" height="15" fill="rgb(217,0,24)"/><text x="20.2426%" y="127.50"></text></g><g><title>mir_const (1,443,906 samples, 0.33%)</title><rect x="19.8488%" y="165" width="0.3333%" height="15" fill="rgb(221,193,54)"/><text x="20.0988%" y="175.50"></text></g><g><title>unsafety_check_result (1,268,884 samples, 0.29%)</title><rect x="19.8892%" y="149" width="0.2929%" height="15" fill="rgb(248,212,6)"/><text x="20.1392%" y="159.50"></text></g><g><title>mir_built (1,163,543 samples, 0.27%)</title><rect x="19.9135%" y="133" width="0.2686%" height="15" fill="rgb(208,68,35)"/><text x="20.1635%" y="143.50"></text></g><g><title>mir_promoted (2,510,539 samples, 0.58%)</title><rect x="19.8284%" y="181" width="0.5796%" height="15" fill="rgb(232,128,0)"/><text x="20.0784%" y="191.50"></text></g><g><title>mir_const_qualif (978,301 samples, 0.23%)</title><rect x="20.1821%" y="165" width="0.2258%" height="15" fill="rgb(207,160,47)"/><text x="20.4321%" y="175.50"></text></g><g><title>MIR_borrow_checking (3,916,464 samples, 0.90%)</title><rect x="19.5743%" y="213" width="0.9041%" height="15" fill="rgb(228,23,34)"/><text x="19.8243%" y="223.50"></text></g><g><title>mir_borrowck (3,908,284 samples, 0.90%)</title><rect x="19.5761%" y="197" width="0.9022%" height="15" fill="rgb(218,30,26)"/><text x="19.8261%" y="207.50"></text></g><g><title>misc_checking_1 (601,506 samples, 0.14%)</title><rect x="20.5285%" y="213" width="0.1389%" height="15" fill="rgb(220,122,19)"/><text x="20.7785%" y="223.50"></text></g><g><title>misc_checking_3 (710,228 samples, 0.16%)</title><rect x="20.7191%" y="213" width="0.1640%" height="15" fill="rgb(250,228,42)"/><text x="20.9691%" y="223.50"></text></g><g><title>object_safety_violations (676,147 samples, 0.16%)</title><rect x="21.8182%" y="149" width="0.1561%" height="15" fill="rgb(240,193,28)"/><text x="22.0682%" y="159.50"></text></g><g><title>item_bodies_checking (5,064,316 samples, 1.17%)</title><rect x="20.9016%" y="197" width="1.1691%" height="15" fill="rgb(216,20,37)"/><text x="21.1516%" y="207.50"></text></g><g><title>typeck_item_bodies (5,061,186 samples, 1.17%)</title><rect x="20.9023%" y="181" width="1.1684%" height="15" fill="rgb(206,188,39)"/><text x="21.1523%" y="191.50"></text></g><g><title>typeck (5,055,096 samples, 1.17%)</title><rect x="20.9037%" y="165" width="1.1670%" height="15" fill="rgb(217,207,13)"/><text x="21.1537%" y="175.50"></text></g><g><title>impl_trait_ref (674,476 samples, 0.16%)</title><rect x="22.2139%" y="53" width="0.1557%" height="15" fill="rgb(231,73,38)"/><text x="22.4639%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (608,335 samples, 0.14%)</title><rect x="22.2292%" y="37" width="0.1404%" height="15" fill="rgb(225,20,46)"/><text x="22.4792%" y="47.50"></text></g><g><title>adt_destructor (1,127,563 samples, 0.26%)</title><rect x="22.1245%" y="117" width="0.2603%" height="15" fill="rgb(210,31,41)"/><text x="22.3745%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,126,253 samples, 0.26%)</title><rect x="22.1248%" y="101" width="0.2600%" height="15" fill="rgb(221,200,47)"/><text x="22.3748%" y="111.50"></text></g><g><title>coherent_trait (1,119,633 samples, 0.26%)</title><rect x="22.1264%" y="85" width="0.2585%" height="15" fill="rgb(226,26,5)"/><text x="22.3764%" y="95.50"></text></g><g><title>specialization_graph_of (1,110,583 samples, 0.26%)</title><rect x="22.1285%" y="69" width="0.2564%" height="15" fill="rgb(249,33,26)"/><text x="22.3785%" y="79.50"></text></g><g><title>dropck_outlives (1,180,783 samples, 0.27%)</title><rect x="22.1128%" y="149" width="0.2726%" height="15" fill="rgb(235,183,28)"/><text x="22.3628%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,146,073 samples, 0.26%)</title><rect x="22.1209%" y="133" width="0.2646%" height="15" fill="rgb(221,5,38)"/><text x="22.3709%" y="143.50"></text></g><g><title>item_types_checking (1,437,506 samples, 0.33%)</title><rect x="22.0707%" y="197" width="0.3318%" height="15" fill="rgb(247,18,42)"/><text x="22.3207%" y="207.50"></text></g><g><title>check_mod_item_types (1,433,446 samples, 0.33%)</title><rect x="22.0716%" y="181" width="0.3309%" height="15" fill="rgb(241,131,45)"/><text x="22.3216%" y="191.50"></text></g><g><title>typeck (1,425,626 samples, 0.33%)</title><rect x="22.0734%" y="165" width="0.3291%" height="15" fill="rgb(249,31,29)"/><text x="22.3234%" y="175.50"></text></g><g><title>fn_sig (455,335 samples, 0.11%)</title><rect x="22.4215%" y="165" width="0.1051%" height="15" fill="rgb(225,111,53)"/><text x="22.6715%" y="175.50"></text></g><g><title>type_collecting (759,389 samples, 0.18%)</title><rect x="22.4029%" y="197" width="0.1753%" height="15" fill="rgb(238,160,17)"/><text x="22.6529%" y="207.50"></text></g><g><title>collect_mod_item_types (748,109 samples, 0.17%)</title><rect x="22.4055%" y="181" width="0.1727%" height="15" fill="rgb(214,148,48)"/><text x="22.6555%" y="191.50"></text></g><g><title>object_safety_violations (488,296 samples, 0.11%)</title><rect x="22.7743%" y="165" width="0.1127%" height="15" fill="rgb(232,36,49)"/><text x="23.0243%" y="175.50"></text></g><g><title>analysis (14,764,306 samples, 3.41%)</title><rect x="19.5396%" y="229" width="3.4083%" height="15" fill="rgb(209,103,24)"/><text x="19.7896%" y="239.50">ana..</text></g><g><title>type_check_crate (8,944,781 samples, 2.06%)</title><rect x="20.8830%" y="213" width="2.0649%" height="15" fill="rgb(229,88,8)"/><text x="21.1330%" y="223.50">t..</text></g><g><title>wf_checking (1,600,708 samples, 0.37%)</title><rect x="22.5784%" y="197" width="0.3695%" height="15" fill="rgb(213,181,19)"/><text x="22.8284%" y="207.50"></text></g><g><title>check_item_well_formed (1,558,497 samples, 0.36%)</title><rect x="22.5881%" y="181" width="0.3598%" height="15" fill="rgb(254,191,54)"/><text x="22.8381%" y="191.50"></text></g><g><title>layout_of (496,534 samples, 0.11%)</title><rect x="25.0306%" y="181" width="0.1146%" height="15" fill="rgb(241,83,37)"/><text x="25.2806%" y="191.50"></text></g><g><title>param_env (712,606 samples, 0.16%)</title><rect x="25.1453%" y="181" width="0.1645%" height="15" fill="rgb(233,36,39)"/><text x="25.3953%" y="191.50"></text></g><g><title>fn_abi_of_instance (2,954,680 samples, 0.68%)</title><rect x="24.6840%" y="197" width="0.6821%" height="15" fill="rgb(226,3,54)"/><text x="24.9340%" y="207.50"></text></g><g><title>codegen_module (9,824,319 samples, 2.27%)</title><rect x="23.1908%" y="213" width="2.2679%" height="15" fill="rgb(245,192,40)"/><text x="23.4408%" y="223.50">c..</text></g><g><title>codegen_fn_attrs (615,755 samples, 0.14%)</title><rect x="25.5921%" y="165" width="0.1421%" height="15" fill="rgb(238,167,29)"/><text x="25.8421%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (649,897 samples, 0.15%)</title><rect x="25.8895%" y="149" width="0.1500%" height="15" fill="rgb(232,182,51)"/><text x="26.1395%" y="159.50"></text></g><g><title>optimized_mir (1,130,963 samples, 0.26%)</title><rect x="25.8040%" y="165" width="0.2611%" height="15" fill="rgb(231,60,39)"/><text x="26.0540%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (1,566,396 samples, 0.36%)</title><rect x="26.1317%" y="149" width="0.3616%" height="15" fill="rgb(208,69,12)"/><text x="26.3817%" y="159.50"></text></g><g><title>impl_parent (1,597,753 samples, 0.37%)</title><rect x="27.0728%" y="133" width="0.3688%" height="15" fill="rgb(235,93,37)"/><text x="27.3228%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (864,815 samples, 0.20%)</title><rect x="27.2420%" y="117" width="0.1996%" height="15" fill="rgb(213,116,39)"/><text x="27.4920%" y="127.50"></text></g><g><title>impl_trait_ref (4,039,783 samples, 0.93%)</title><rect x="27.4416%" y="133" width="0.9326%" height="15" fill="rgb(222,207,29)"/><text x="27.6916%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,557,537 samples, 0.82%)</title><rect x="27.5529%" y="117" width="0.8213%" height="15" fill="rgb(206,96,30)"/><text x="27.8029%" y="127.50"></text></g><g><title>specialization_graph_of (7,579,976 samples, 1.75%)</title><rect x="26.6248%" y="149" width="1.7498%" height="15" fill="rgb(218,138,4)"/><text x="26.8748%" y="159.50"></text></g><g><title>resolve_instance (10,122,930 samples, 2.34%)</title><rect x="26.0650%" y="165" width="2.3369%" height="15" fill="rgb(250,191,14)"/><text x="26.3150%" y="175.50">r..</text></g><g><title>layout_of (476,065 samples, 0.11%)</title><rect x="28.4289%" y="101" width="0.1099%" height="15" fill="rgb(239,60,40)"/><text x="28.6789%" y="111.50"></text></g><g><title>layout_of (449,105 samples, 0.10%)</title><rect x="28.4351%" y="85" width="0.1037%" height="15" fill="rgb(206,27,48)"/><text x="28.6851%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (615,966 samples, 0.14%)</title><rect x="28.4019%" y="165" width="0.1422%" height="15" fill="rgb(225,35,8)"/><text x="28.6519%" y="175.50"></text></g><g><title>eval_to_const_value_raw (598,316 samples, 0.14%)</title><rect x="28.4060%" y="149" width="0.1381%" height="15" fill="rgb(250,213,24)"/><text x="28.6560%" y="159.50"></text></g><g><title>eval_to_const_value_raw (594,076 samples, 0.14%)</title><rect x="28.4070%" y="133" width="0.1371%" height="15" fill="rgb(247,123,22)"/><text x="28.6570%" y="143.50"></text></g><g><title>eval_to_allocation_raw (585,385 samples, 0.14%)</title><rect x="28.4090%" y="117" width="0.1351%" height="15" fill="rgb(231,138,38)"/><text x="28.6590%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (13,796,165 samples, 3.18%)</title><rect x="25.4678%" y="181" width="3.1848%" height="15" fill="rgb(231,145,46)"/><text x="25.7178%" y="191.50">mon..</text></g><g><title>vtable_entries (470,196 samples, 0.11%)</title><rect x="28.5441%" y="165" width="0.1085%" height="15" fill="rgb(251,118,11)"/><text x="28.7941%" y="175.50"></text></g><g><title>monomorphization_collector (13,815,005 samples, 3.19%)</title><rect x="25.4674%" y="197" width="3.1892%" height="15" fill="rgb(217,147,25)"/><text x="25.7174%" y="207.50">mon..</text></g><g><title>assert_symbols_are_distinct (706,528 samples, 0.16%)</title><rect x="28.6577%" y="181" width="0.1631%" height="15" fill="rgb(247,81,37)"/><text x="28.9077%" y="191.50"></text></g><g><title>symbol_name (652,688 samples, 0.15%)</title><rect x="28.6701%" y="165" width="0.1507%" height="15" fill="rgb(209,12,38)"/><text x="28.9201%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (14,756,856 samples, 3.41%)</title><rect x="25.4591%" y="213" width="3.4066%" height="15" fill="rgb(227,1,9)"/><text x="25.7091%" y="223.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (905,960 samples, 0.21%)</title><rect x="28.6565%" y="197" width="0.2091%" height="15" fill="rgb(248,47,43)"/><text x="28.9065%" y="207.50"></text></g><g><title>codegen_crate (25,687,909 samples, 5.93%)</title><rect x="22.9504%" y="229" width="5.9300%" height="15" fill="rgb(221,10,30)"/><text x="23.2004%" y="239.50">codegen_..</text></g><g><title>codegen_module_optimize (105,782,182 samples, 24.42%)</title><rect x="28.8804%" y="229" width="24.4196%" height="15" fill="rgb(210,229,1)"/><text x="29.1304%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (100,072,525 samples, 23.10%)</title><rect x="30.1985%" y="213" width="23.1015%" height="15" fill="rgb(222,148,37)"/><text x="30.4485%" y="223.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (45,546,272 samples, 10.51%)</title><rect x="54.3463%" y="213" width="10.5143%" height="15" fill="rgb(234,67,33)"/><text x="54.5963%" y="223.50">LLVM_lto_optimi..</text></g><g><title>LLVM_module_codegen (51,284,758 samples, 11.84%)</title><rect x="64.8606%" y="213" width="11.8390%" height="15" fill="rgb(247,98,35)"/><text x="65.1106%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (50,483,229 samples, 11.65%)</title><rect x="65.0456%" y="197" width="11.6540%" height="15" fill="rgb(247,138,52)"/><text x="65.2956%" y="207.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (2,824,752 samples, 0.65%)</title><rect x="76.6996%" y="213" width="0.6521%" height="15" fill="rgb(213,79,30)"/><text x="76.9496%" y="223.50"></text></g><g><title>codegen_module_perform_lto (104,372,706 samples, 24.09%)</title><rect x="53.3000%" y="229" width="24.0942%" height="15" fill="rgb(246,177,23)"/><text x="53.5500%" y="239.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (13,267,069 samples, 3.06%)</title><rect x="77.5141%" y="213" width="3.0627%" height="15" fill="rgb(230,62,27)"/><text x="77.7641%" y="223.50">mac..</text></g><g><title>expand_crate (13,243,129 samples, 3.06%)</title><rect x="77.5196%" y="197" width="3.0572%" height="15" fill="rgb(216,154,8)"/><text x="77.7696%" y="207.50">exp..</text></g><g><title>metadata_register_crate (3,018,683 samples, 0.70%)</title><rect x="79.8799%" y="181" width="0.6969%" height="15" fill="rgb(244,35,45)"/><text x="80.1299%" y="191.50"></text></g><g><title>metadata_register_crate (1,014,660 samples, 0.23%)</title><rect x="80.3426%" y="165" width="0.2342%" height="15" fill="rgb(251,115,12)"/><text x="80.5926%" y="175.50"></text></g><g><title>late_resolve_crate (852,099 samples, 0.20%)</title><rect x="80.7110%" y="197" width="0.1967%" height="15" fill="rgb(240,54,50)"/><text x="80.9610%" y="207.50"></text></g><g><title>configure_and_expand (15,277,822 samples, 3.53%)</title><rect x="77.3943%" y="229" width="3.5269%" height="15" fill="rgb(233,84,52)"/><text x="77.6443%" y="239.50">con..</text></g><g><title>resolve_crate (1,261,794 samples, 0.29%)</title><rect x="80.6298%" y="213" width="0.2913%" height="15" fill="rgb(207,117,47)"/><text x="80.8798%" y="223.50"></text></g><g><title>free_global_ctxt (4,280,398 samples, 0.99%)</title><rect x="80.9733%" y="229" width="0.9881%" height="15" fill="rgb(249,43,39)"/><text x="81.2233%" y="239.50"></text></g><g><title>generate_crate_metadata (595,657 samples, 0.14%)</title><rect x="81.9614%" y="229" width="0.1375%" height="15" fill="rgb(209,38,44)"/><text x="82.2114%" y="239.50"></text></g><g><title>hir_lowering (1,232,764 samples, 0.28%)</title><rect x="82.0989%" y="229" width="0.2846%" height="15" fill="rgb(236,212,23)"/><text x="82.3489%" y="239.50"></text></g><g><title>finish_ongoing_codegen (72,055,392 samples, 16.63%)</title><rect x="82.3868%" y="213" width="16.6338%" height="15" fill="rgb(242,79,21)"/><text x="82.6368%" y="223.50">finish_ongoing_codegen</text></g><g><title>link_crate (797,659 samples, 0.18%)</title><rect x="99.0206%" y="213" width="0.1841%" height="15" fill="rgb(211,96,35)"/><text x="99.2706%" y="223.50"></text></g><g><title>link_binary (784,949 samples, 0.18%)</title><rect x="99.0236%" y="197" width="0.1812%" height="15" fill="rgb(253,215,40)"/><text x="99.2736%" y="207.50"></text></g><g><title>link_rlib (475,515 samples, 0.11%)</title><rect x="99.0950%" y="181" width="0.1098%" height="15" fill="rgb(211,81,21)"/><text x="99.3450%" y="191.50"></text></g><g><title>link (72,875,421 samples, 16.82%)</title><rect x="82.3835%" y="229" width="16.8232%" height="15" fill="rgb(208,190,38)"/><text x="82.6335%" y="239.50">link</text></g><g><title>parse_crate (1,675,919 samples, 0.39%)</title><rect x="99.2066%" y="229" width="0.3869%" height="15" fill="rgb(235,213,38)"/><text x="99.4566%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (968,931 samples, 0.22%)</title><rect x="99.6742%" y="229" width="0.2237%" height="15" fill="rgb(237,122,38)"/><text x="99.9242%" y="239.50"></text></g><g><title>all (433,185,348 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (433,185,348 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>