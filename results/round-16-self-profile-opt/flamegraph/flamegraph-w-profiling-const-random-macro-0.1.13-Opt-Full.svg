<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (262,369,411 samples, 11.15%)</title><rect x="0.0295%" y="197" width="11.1511%" height="15" fill="rgb(227,0,7)"/><text x="0.2795%" y="207.50">LLVM_passes</text></g><g><title>specialization_graph_of (4,205,326 samples, 0.18%)</title><rect x="11.5156%" y="69" width="0.1787%" height="15" fill="rgb(217,0,24)"/><text x="11.7656%" y="79.50"></text></g><g><title>resolve_instance (4,483,058 samples, 0.19%)</title><rect x="11.5051%" y="85" width="0.1905%" height="15" fill="rgb(221,193,54)"/><text x="11.7551%" y="95.50"></text></g><g><title>mir_const (7,448,608 samples, 0.32%)</title><rect x="11.3975%" y="133" width="0.3166%" height="15" fill="rgb(248,212,6)"/><text x="11.6475%" y="143.50"></text></g><g><title>unsafety_check_result (6,970,792 samples, 0.30%)</title><rect x="11.4178%" y="117" width="0.2963%" height="15" fill="rgb(208,68,35)"/><text x="11.6678%" y="127.50"></text></g><g><title>mir_built (6,559,487 samples, 0.28%)</title><rect x="11.4353%" y="101" width="0.2788%" height="15" fill="rgb(232,128,0)"/><text x="11.6853%" y="111.50"></text></g><g><title>mir_promoted (8,633,991 samples, 0.37%)</title><rect x="11.3812%" y="149" width="0.3670%" height="15" fill="rgb(207,160,47)"/><text x="11.6312%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,223,647 samples, 0.60%)</title><rect x="11.1919%" y="181" width="0.6045%" height="15" fill="rgb(228,23,34)"/><text x="11.4419%" y="191.50"></text></g><g><title>mir_borrowck (14,181,027 samples, 0.60%)</title><rect x="11.1938%" y="165" width="0.6027%" height="15" fill="rgb(218,30,26)"/><text x="11.4438%" y="175.50"></text></g><g><title>specialization_graph_of (3,633,570 samples, 0.15%)</title><rect x="11.9528%" y="117" width="0.1544%" height="15" fill="rgb(220,122,19)"/><text x="12.2028%" y="127.50"></text></g><g><title>resolve_instance (3,684,181 samples, 0.16%)</title><rect x="11.9507%" y="133" width="0.1566%" height="15" fill="rgb(250,228,42)"/><text x="12.2007%" y="143.50"></text></g><g><title>crate_lints (5,045,875 samples, 0.21%)</title><rect x="11.8932%" y="149" width="0.2145%" height="15" fill="rgb(240,193,28)"/><text x="12.1432%" y="159.50"></text></g><g><title>lint_checking (5,220,007 samples, 0.22%)</title><rect x="11.8931%" y="165" width="0.2219%" height="15" fill="rgb(216,20,37)"/><text x="12.1431%" y="175.50"></text></g><g><title>misc_checking_3 (5,858,995 samples, 0.25%)</title><rect x="11.8835%" y="181" width="0.2490%" height="15" fill="rgb(206,188,39)"/><text x="12.1335%" y="191.50"></text></g><g><title>evaluate_obligation (4,634,108 samples, 0.20%)</title><rect x="12.5838%" y="117" width="0.1970%" height="15" fill="rgb(217,207,13)"/><text x="12.8338%" y="127.50"></text></g><g><title>item_bodies_checking (16,174,339 samples, 0.69%)</title><rect x="12.1669%" y="165" width="0.6874%" height="15" fill="rgb(231,73,38)"/><text x="12.4169%" y="175.50"></text></g><g><title>typeck_item_bodies (16,170,049 samples, 0.69%)</title><rect x="12.1671%" y="149" width="0.6873%" height="15" fill="rgb(225,20,46)"/><text x="12.4171%" y="159.50"></text></g><g><title>typeck (16,120,369 samples, 0.69%)</title><rect x="12.1692%" y="133" width="0.6851%" height="15" fill="rgb(210,31,41)"/><text x="12.4192%" y="143.50"></text></g><g><title>mir_const (5,300,689 samples, 0.23%)</title><rect x="12.9327%" y="85" width="0.2253%" height="15" fill="rgb(221,200,47)"/><text x="13.1827%" y="95.50"></text></g><g><title>unsafety_check_result (5,188,018 samples, 0.22%)</title><rect x="12.9375%" y="69" width="0.2205%" height="15" fill="rgb(226,26,5)"/><text x="13.1875%" y="79.50"></text></g><g><title>mir_built (5,099,067 samples, 0.22%)</title><rect x="12.9412%" y="53" width="0.2167%" height="15" fill="rgb(249,33,26)"/><text x="13.1912%" y="63.50"></text></g><g><title>typeck (3,706,531 samples, 0.16%)</title><rect x="13.0004%" y="37" width="0.1575%" height="15" fill="rgb(235,183,28)"/><text x="13.2504%" y="47.50"></text></g><g><title>mir_promoted (5,391,071 samples, 0.23%)</title><rect x="12.9292%" y="101" width="0.2291%" height="15" fill="rgb(221,5,38)"/><text x="13.1792%" y="111.50"></text></g><g><title>type_of (6,378,162 samples, 0.27%)</title><rect x="12.8977%" y="133" width="0.2711%" height="15" fill="rgb(247,18,42)"/><text x="13.1477%" y="143.50"></text></g><g><title>mir_borrowck (6,373,762 samples, 0.27%)</title><rect x="12.8979%" y="117" width="0.2709%" height="15" fill="rgb(241,131,45)"/><text x="13.1479%" y="127.50"></text></g><g><title>item_types_checking (10,361,345 samples, 0.44%)</title><rect x="12.8544%" y="165" width="0.4404%" height="15" fill="rgb(249,31,29)"/><text x="13.1044%" y="175.50"></text></g><g><title>check_mod_item_types (10,354,615 samples, 0.44%)</title><rect x="12.8546%" y="149" width="0.4401%" height="15" fill="rgb(225,111,53)"/><text x="13.1046%" y="159.50"></text></g><g><title>typeck (2,964,022 samples, 0.13%)</title><rect x="13.1688%" y="133" width="0.1260%" height="15" fill="rgb(238,160,17)"/><text x="13.4188%" y="143.50"></text></g><g><title>check_item_well_formed (2,851,039 samples, 0.12%)</title><rect x="13.3909%" y="149" width="0.1212%" height="15" fill="rgb(214,148,48)"/><text x="13.6409%" y="159.50"></text></g><g><title>analysis (54,907,949 samples, 2.33%)</title><rect x="11.1806%" y="197" width="2.3337%" height="15" fill="rgb(232,36,49)"/><text x="11.4306%" y="207.50">a..</text></g><g><title>type_check_crate (32,511,971 samples, 1.38%)</title><rect x="12.1325%" y="181" width="1.3818%" height="15" fill="rgb(209,103,24)"/><text x="12.3825%" y="191.50"></text></g><g><title>wf_checking (3,871,414 samples, 0.16%)</title><rect x="13.3497%" y="165" width="0.1645%" height="15" fill="rgb(229,88,8)"/><text x="13.5997%" y="175.50"></text></g><g><title>layout_of (4,481,796 samples, 0.19%)</title><rect x="17.1607%" y="149" width="0.1905%" height="15" fill="rgb(213,181,19)"/><text x="17.4107%" y="159.50"></text></g><g><title>predicates_of (2,486,915 samples, 0.11%)</title><rect x="17.5650%" y="133" width="0.1057%" height="15" fill="rgb(254,191,54)"/><text x="17.8150%" y="143.50"></text></g><g><title>param_env (7,536,225 samples, 0.32%)</title><rect x="17.3512%" y="149" width="0.3203%" height="15" fill="rgb(241,83,37)"/><text x="17.6012%" y="159.50"></text></g><g><title>fn_abi_of_instance (26,844,004 samples, 1.14%)</title><rect x="16.6291%" y="165" width="1.1409%" height="15" fill="rgb(233,36,39)"/><text x="16.8791%" y="175.50"></text></g><g><title>codegen_module (101,716,239 samples, 4.32%)</title><rect x="13.6370%" y="181" width="4.3231%" height="15" fill="rgb(226,3,54)"/><text x="13.8870%" y="191.50">codeg..</text></g><g><title>codegen_fn_attrs (3,350,504 samples, 0.14%)</title><rect x="18.1759%" y="133" width="0.1424%" height="15" fill="rgb(245,192,40)"/><text x="18.4259%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,921,450 samples, 0.17%)</title><rect x="18.5201%" y="117" width="0.1667%" height="15" fill="rgb(238,167,29)"/><text x="18.7701%" y="127.50"></text></g><g><title>optimized_mir (8,605,324 samples, 0.37%)</title><rect x="18.4286%" y="133" width="0.3657%" height="15" fill="rgb(232,182,51)"/><text x="18.6786%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (5,332,713 samples, 0.23%)</title><rect x="18.8755%" y="117" width="0.2266%" height="15" fill="rgb(231,60,39)"/><text x="19.1255%" y="127.50"></text></g><g><title>resolve_instance (12,399,184 samples, 0.53%)</title><rect x="18.7943%" y="133" width="0.5270%" height="15" fill="rgb(208,69,12)"/><text x="19.0443%" y="143.50"></text></g><g><title>specialization_graph_of (2,920,273 samples, 0.12%)</title><rect x="19.4730%" y="101" width="0.1241%" height="15" fill="rgb(235,93,37)"/><text x="19.7230%" y="111.50"></text></g><g><title>resolve_instance (3,714,769 samples, 0.16%)</title><rect x="19.4399%" y="117" width="0.1579%" height="15" fill="rgb(213,116,39)"/><text x="19.6899%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (38,463,377 samples, 1.63%)</title><rect x="17.9633%" y="149" width="1.6348%" height="15" fill="rgb(222,207,29)"/><text x="18.2133%" y="159.50"></text></g><g><title>vtable_entries (4,701,650 samples, 0.20%)</title><rect x="19.3983%" y="133" width="0.1998%" height="15" fill="rgb(206,96,30)"/><text x="19.6483%" y="143.50"></text></g><g><title>monomorphization_collector (38,491,518 samples, 1.64%)</title><rect x="17.9633%" y="165" width="1.6360%" height="15" fill="rgb(218,138,4)"/><text x="18.2133%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (3,671,920 samples, 0.16%)</title><rect x="19.5994%" y="149" width="0.1561%" height="15" fill="rgb(250,191,14)"/><text x="19.8494%" y="159.50"></text></g><g><title>symbol_name (3,299,794 samples, 0.14%)</title><rect x="19.6152%" y="133" width="0.1402%" height="15" fill="rgb(239,60,40)"/><text x="19.8652%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (43,538,824 samples, 1.85%)</title><rect x="17.9606%" y="181" width="1.8505%" height="15" fill="rgb(206,27,48)"/><text x="18.2106%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (4,984,465 samples, 0.21%)</title><rect x="19.5992%" y="165" width="0.2118%" height="15" fill="rgb(225,35,8)"/><text x="19.8492%" y="175.50"></text></g><g><title>codegen_crate (148,653,631 samples, 6.32%)</title><rect x="13.5146%" y="197" width="6.3180%" height="15" fill="rgb(250,213,24)"/><text x="13.7646%" y="207.50">codegen_..</text></g><g><title>LLVM_module_codegen (2,471,108 samples, 0.11%)</title><rect x="21.0754%" y="181" width="0.1050%" height="15" fill="rgb(247,123,22)"/><text x="21.3254%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,415,937 samples, 0.10%)</title><rect x="21.0778%" y="165" width="0.1027%" height="15" fill="rgb(231,138,38)"/><text x="21.3278%" y="175.50"></text></g><g><title>codegen_module_optimize (620,517,205 samples, 26.37%)</title><rect x="19.8326%" y="197" width="26.3730%" height="15" fill="rgb(231,145,46)"/><text x="20.0826%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (588,805,032 samples, 25.03%)</title><rect x="21.1805%" y="181" width="25.0252%" height="15" fill="rgb(251,118,11)"/><text x="21.4305%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (393,406,654 samples, 16.72%)</title><rect x="47.0246%" y="181" width="16.7204%" height="15" fill="rgb(217,147,25)"/><text x="47.2746%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (294,648,749 samples, 12.52%)</title><rect x="63.7451%" y="181" width="12.5230%" height="15" fill="rgb(247,81,37)"/><text x="63.9951%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (291,265,275 samples, 12.38%)</title><rect x="63.8889%" y="165" width="12.3792%" height="15" fill="rgb(209,12,38)"/><text x="64.1389%" y="175.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (86,578,266 samples, 3.68%)</title><rect x="76.2681%" y="181" width="3.6797%" height="15" fill="rgb(227,1,9)"/><text x="76.5181%" y="191.50">LLVM..</text></g><g><title>codegen_module_perform_lto (795,369,145 samples, 33.80%)</title><rect x="46.2056%" y="197" width="33.8045%" height="15" fill="rgb(248,47,43)"/><text x="46.4556%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (3,272,516 samples, 0.14%)</title><rect x="80.8542%" y="149" width="0.1391%" height="15" fill="rgb(221,10,30)"/><text x="81.1042%" y="159.50"></text></g><g><title>macro_expand_crate (22,714,952 samples, 0.97%)</title><rect x="80.0296%" y="181" width="0.9654%" height="15" fill="rgb(210,229,1)"/><text x="80.2796%" y="191.50"></text></g><g><title>expand_crate (22,693,612 samples, 0.96%)</title><rect x="80.0305%" y="165" width="0.9645%" height="15" fill="rgb(222,148,37)"/><text x="80.2805%" y="175.50"></text></g><g><title>late_resolve_crate (3,168,095 samples, 0.13%)</title><rect x="81.0320%" y="165" width="0.1346%" height="15" fill="rgb(234,67,33)"/><text x="81.2820%" y="175.50"></text></g><g><title>configure_and_expand (27,308,863 samples, 1.16%)</title><rect x="80.0101%" y="197" width="1.1607%" height="15" fill="rgb(247,98,35)"/><text x="80.2601%" y="207.50"></text></g><g><title>resolve_crate (3,587,629 samples, 0.15%)</title><rect x="81.0183%" y="181" width="0.1525%" height="15" fill="rgb(247,138,52)"/><text x="81.2683%" y="191.50"></text></g><g><title>free_global_ctxt (6,483,792 samples, 0.28%)</title><rect x="81.1943%" y="197" width="0.2756%" height="15" fill="rgb(213,79,30)"/><text x="81.4443%" y="207.50"></text></g><g><title>finish_ongoing_codegen (164,595,207 samples, 7.00%)</title><rect x="81.5730%" y="181" width="6.9956%" height="15" fill="rgb(246,177,23)"/><text x="81.8230%" y="191.50">finish_on..</text></g><g><title>link_crate (265,439,426 samples, 11.28%)</title><rect x="88.5685%" y="181" width="11.2816%" height="15" fill="rgb(230,62,27)"/><text x="88.8185%" y="191.50">link_crate</text></g><g><title>link_binary (265,266,944 samples, 11.27%)</title><rect x="88.5758%" y="165" width="11.2743%" height="15" fill="rgb(216,154,8)"/><text x="88.8258%" y="175.50">link_binary</text></g><g><title>run_linker (263,614,065 samples, 11.20%)</title><rect x="88.6461%" y="149" width="11.2040%" height="15" fill="rgb(244,35,45)"/><text x="88.8961%" y="159.50">run_linker</text></g><g><title>link (430,068,273 samples, 18.28%)</title><rect x="81.5720%" y="197" width="18.2786%" height="15" fill="rgb(251,115,12)"/><text x="81.8220%" y="207.50">link</text></g><g><title>all (2,352,852,517 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,54,50)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,352,852,517 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,84,52)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>