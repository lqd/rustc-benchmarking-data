<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (234,563,456 samples, 14.30%)</title><rect x="0.1127%" y="213" width="14.2992%" height="15" fill="rgb(227,0,7)"/><text x="0.3627%" y="223.50">LLVM_passes</text></g><g><title>mir_const (6,338,845 samples, 0.39%)</title><rect x="16.9926%" y="149" width="0.3864%" height="15" fill="rgb(217,0,24)"/><text x="17.2426%" y="159.50"></text></g><g><title>unsafety_check_result (5,476,116 samples, 0.33%)</title><rect x="17.0452%" y="133" width="0.3338%" height="15" fill="rgb(221,193,54)"/><text x="17.2952%" y="143.50"></text></g><g><title>mir_built (5,041,161 samples, 0.31%)</title><rect x="17.0717%" y="117" width="0.3073%" height="15" fill="rgb(248,212,6)"/><text x="17.3217%" y="127.50"></text></g><g><title>thir_body (11,857,280 samples, 0.72%)</title><rect x="18.6279%" y="85" width="0.7228%" height="15" fill="rgb(208,68,35)"/><text x="18.8779%" y="95.50"></text></g><g><title>mir_const (28,487,445 samples, 1.74%)</title><rect x="17.6142%" y="133" width="1.7366%" height="15" fill="rgb(232,128,0)"/><text x="17.8642%" y="143.50"></text></g><g><title>unsafety_check_result (27,280,771 samples, 1.66%)</title><rect x="17.6878%" y="117" width="1.6631%" height="15" fill="rgb(207,160,47)"/><text x="17.9378%" y="127.50"></text></g><g><title>mir_built (25,979,756 samples, 1.58%)</title><rect x="17.7671%" y="101" width="1.5837%" height="15" fill="rgb(228,23,34)"/><text x="18.0171%" y="111.50"></text></g><g><title>mir_const_qualif (32,496,150 samples, 1.98%)</title><rect x="17.3791%" y="149" width="1.9810%" height="15" fill="rgb(218,30,26)"/><text x="17.6291%" y="159.50">m..</text></g><g><title>mir_promoted (46,840,804 samples, 2.86%)</title><rect x="16.5047%" y="165" width="2.8555%" height="15" fill="rgb(220,122,19)"/><text x="16.7547%" y="175.50">mi..</text></g><g><title>MIR_borrow_checking (79,845,120 samples, 4.87%)</title><rect x="14.5479%" y="197" width="4.8674%" height="15" fill="rgb(250,228,42)"/><text x="14.7979%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (79,671,849 samples, 4.86%)</title><rect x="14.5584%" y="181" width="4.8569%" height="15" fill="rgb(240,193,28)"/><text x="14.8084%" y="191.50">mir_bo..</text></g><g><title>check_mod_attrs (1,922,711 samples, 0.12%)</title><rect x="19.5071%" y="181" width="0.1172%" height="15" fill="rgb(216,20,37)"/><text x="19.7571%" y="191.50"></text></g><g><title>misc_checking_1 (3,564,479 samples, 0.22%)</title><rect x="19.5044%" y="197" width="0.2173%" height="15" fill="rgb(206,188,39)"/><text x="19.7544%" y="207.50"></text></g><g><title>misc_checking_2 (2,886,942 samples, 0.18%)</title><rect x="19.7217%" y="197" width="0.1760%" height="15" fill="rgb(217,207,13)"/><text x="19.9717%" y="207.50"></text></g><g><title>match_checking (1,669,979 samples, 0.10%)</title><rect x="19.7959%" y="181" width="0.1018%" height="15" fill="rgb(231,73,38)"/><text x="20.0459%" y="191.50"></text></g><g><title>death_checking (2,064,253 samples, 0.13%)</title><rect x="19.9235%" y="181" width="0.1258%" height="15" fill="rgb(225,20,46)"/><text x="20.1735%" y="191.50"></text></g><g><title>eval_to_const_value_raw (45,858,887 samples, 2.80%)</title><rect x="20.9686%" y="85" width="2.7956%" height="15" fill="rgb(210,31,41)"/><text x="21.2186%" y="95.50">ev..</text></g><g><title>eval_to_const_value_raw (45,851,697 samples, 2.80%)</title><rect x="20.9690%" y="69" width="2.7952%" height="15" fill="rgb(221,200,47)"/><text x="21.2190%" y="79.50">ev..</text></g><g><title>eval_to_allocation_raw (45,831,787 samples, 2.79%)</title><rect x="20.9702%" y="53" width="2.7939%" height="15" fill="rgb(226,26,5)"/><text x="21.2202%" y="63.50">ev..</text></g><g><title>promoted_mir (11,440,458 samples, 0.70%)</title><rect x="23.0667%" y="37" width="0.6974%" height="15" fill="rgb(249,33,26)"/><text x="23.3167%" y="47.50"></text></g><g><title>eval_to_const_value_raw (57,587,675 samples, 3.51%)</title><rect x="20.2550%" y="149" width="3.5106%" height="15" fill="rgb(235,183,28)"/><text x="20.5050%" y="159.50">eva..</text></g><g><title>eval_to_const_value_raw (57,567,074 samples, 3.51%)</title><rect x="20.2563%" y="133" width="3.5093%" height="15" fill="rgb(221,5,38)"/><text x="20.5063%" y="143.50">eva..</text></g><g><title>eval_to_allocation_raw (57,505,903 samples, 3.51%)</title><rect x="20.2600%" y="117" width="3.5056%" height="15" fill="rgb(247,18,42)"/><text x="20.5100%" y="127.50">eva..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (45,934,548 samples, 2.80%)</title><rect x="20.9654%" y="101" width="2.8002%" height="15" fill="rgb(241,131,45)"/><text x="21.2154%" y="111.50">tr..</text></g><g><title>crate_lints (62,754,912 samples, 3.83%)</title><rect x="20.0496%" y="165" width="3.8256%" height="15" fill="rgb(249,31,29)"/><text x="20.2996%" y="175.50">crat..</text></g><g><title>lint_checking (66,712,946 samples, 4.07%)</title><rect x="20.0494%" y="181" width="4.0669%" height="15" fill="rgb(225,111,53)"/><text x="20.2994%" y="191.50">lint..</text></g><g><title>module_lints (3,954,303 samples, 0.24%)</title><rect x="23.8752%" y="165" width="0.2411%" height="15" fill="rgb(238,160,17)"/><text x="24.1252%" y="175.50"></text></g><g><title>lint_mod (3,940,683 samples, 0.24%)</title><rect x="23.8760%" y="149" width="0.2402%" height="15" fill="rgb(214,148,48)"/><text x="24.1260%" y="159.50"></text></g><g><title>privacy_checking_modules (4,436,730 samples, 0.27%)</title><rect x="24.1580%" y="181" width="0.2705%" height="15" fill="rgb(232,36,49)"/><text x="24.4080%" y="191.50"></text></g><g><title>check_mod_privacy (4,428,480 samples, 0.27%)</title><rect x="24.1585%" y="165" width="0.2700%" height="15" fill="rgb(209,103,24)"/><text x="24.4085%" y="175.50"></text></g><g><title>misc_checking_3 (74,353,131 samples, 4.53%)</title><rect x="19.8977%" y="197" width="4.5326%" height="15" fill="rgb(229,88,8)"/><text x="20.1477%" y="207.50">misc_..</text></g><g><title>coherent_trait (4,668,192 samples, 0.28%)</title><rect x="24.4358%" y="165" width="0.2846%" height="15" fill="rgb(213,181,19)"/><text x="24.6858%" y="175.50"></text></g><g><title>specialization_graph_of (4,498,720 samples, 0.27%)</title><rect x="24.4461%" y="149" width="0.2742%" height="15" fill="rgb(254,191,54)"/><text x="24.6961%" y="159.50"></text></g><g><title>coherence_checking (4,828,354 samples, 0.29%)</title><rect x="24.4346%" y="181" width="0.2943%" height="15" fill="rgb(241,83,37)"/><text x="24.6846%" y="191.50"></text></g><g><title>item_bodies_checking (22,144,555 samples, 1.35%)</title><rect x="24.7317%" y="181" width="1.3499%" height="15" fill="rgb(233,36,39)"/><text x="24.9817%" y="191.50"></text></g><g><title>typeck_item_bodies (22,140,755 samples, 1.35%)</title><rect x="24.7319%" y="165" width="1.3497%" height="15" fill="rgb(226,3,54)"/><text x="24.9819%" y="175.50"></text></g><g><title>typeck (22,076,865 samples, 1.35%)</title><rect x="24.7358%" y="149" width="1.3458%" height="15" fill="rgb(245,192,40)"/><text x="24.9858%" y="159.50"></text></g><g><title>item_types_checking (53,949,455 samples, 3.29%)</title><rect x="26.0816%" y="181" width="3.2888%" height="15" fill="rgb(238,167,29)"/><text x="26.3316%" y="191.50">ite..</text></g><g><title>check_mod_item_types (53,936,665 samples, 3.29%)</title><rect x="26.0824%" y="165" width="3.2880%" height="15" fill="rgb(232,182,51)"/><text x="26.3324%" y="175.50">che..</text></g><g><title>typeck (52,906,564 samples, 3.23%)</title><rect x="26.1452%" y="149" width="3.2252%" height="15" fill="rgb(231,60,39)"/><text x="26.3952%" y="159.50">typ..</text></g><g><title>type_collecting (2,827,631 samples, 0.17%)</title><rect x="29.3705%" y="181" width="0.1724%" height="15" fill="rgb(208,69,12)"/><text x="29.6205%" y="191.50"></text></g><g><title>collect_mod_item_types (2,811,341 samples, 0.17%)</title><rect x="29.3715%" y="165" width="0.1714%" height="15" fill="rgb(235,93,37)"/><text x="29.6215%" y="175.50"></text></g><g><title>check_impl_item_well_formed (2,129,581 samples, 0.13%)</title><rect x="29.5639%" y="165" width="0.1298%" height="15" fill="rgb(213,116,39)"/><text x="29.8139%" y="175.50"></text></g><g><title>analysis (253,735,588 samples, 15.47%)</title><rect x="14.4118%" y="213" width="15.4679%" height="15" fill="rgb(222,207,29)"/><text x="14.6618%" y="223.50">analysis</text></g><g><title>type_check_crate (89,392,766 samples, 5.45%)</title><rect x="24.4303%" y="197" width="5.4495%" height="15" fill="rgb(206,96,30)"/><text x="24.6803%" y="207.50">type_ch..</text></g><g><title>wf_checking (5,520,400 samples, 0.34%)</title><rect x="29.5432%" y="181" width="0.3365%" height="15" fill="rgb(218,138,4)"/><text x="29.7932%" y="191.50"></text></g><g><title>check_item_well_formed (3,052,295 samples, 0.19%)</title><rect x="29.6937%" y="165" width="0.1861%" height="15" fill="rgb(250,191,14)"/><text x="29.9437%" y="175.50"></text></g><g><title>fn_abi_of_instance (4,308,591 samples, 0.26%)</title><rect x="31.0121%" y="181" width="0.2627%" height="15" fill="rgb(239,60,40)"/><text x="31.2621%" y="191.50"></text></g><g><title>codegen_module (22,078,605 samples, 1.35%)</title><rect x="29.9733%" y="197" width="1.3459%" height="15" fill="rgb(206,27,48)"/><text x="30.2233%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,714,844 samples, 0.23%)</title><rect x="31.7652%" y="133" width="0.2265%" height="15" fill="rgb(225,35,8)"/><text x="32.0152%" y="143.50"></text></g><g><title>optimized_mir (18,937,869 samples, 1.15%)</title><rect x="31.4613%" y="149" width="1.1545%" height="15" fill="rgb(250,213,24)"/><text x="31.7113%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,238,563 samples, 0.62%)</title><rect x="31.9916%" y="133" width="0.6242%" height="15" fill="rgb(247,123,22)"/><text x="32.2416%" y="143.50"></text></g><g><title>eval_to_const_value_raw (10,214,913 samples, 0.62%)</title><rect x="31.9931%" y="117" width="0.6227%" height="15" fill="rgb(231,138,38)"/><text x="32.2431%" y="127.50"></text></g><g><title>eval_to_const_value_raw (10,211,263 samples, 0.62%)</title><rect x="31.9933%" y="101" width="0.6225%" height="15" fill="rgb(231,145,46)"/><text x="32.2433%" y="111.50"></text></g><g><title>eval_to_allocation_raw (10,203,272 samples, 0.62%)</title><rect x="31.9938%" y="85" width="0.6220%" height="15" fill="rgb(251,118,11)"/><text x="32.2438%" y="95.50"></text></g><g><title>resolve_instance (3,631,190 samples, 0.22%)</title><rect x="32.6158%" y="149" width="0.2214%" height="15" fill="rgb(217,147,25)"/><text x="32.8658%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (25,729,254 samples, 1.57%)</title><rect x="31.3218%" y="165" width="1.5685%" height="15" fill="rgb(247,81,37)"/><text x="31.5718%" y="175.50"></text></g><g><title>monomorphization_collector (25,869,085 samples, 1.58%)</title><rect x="31.3216%" y="181" width="1.5770%" height="15" fill="rgb(209,12,38)"/><text x="31.5716%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (27,043,777 samples, 1.65%)</title><rect x="31.3195%" y="197" width="1.6486%" height="15" fill="rgb(227,1,9)"/><text x="31.5695%" y="207.50"></text></g><g><title>codegen_crate (50,675,589 samples, 3.09%)</title><rect x="29.8803%" y="213" width="3.0892%" height="15" fill="rgb(248,47,43)"/><text x="30.1303%" y="223.50">cod..</text></g><g><title>codegen_module_optimize (205,785,669 samples, 12.54%)</title><rect x="32.9695%" y="213" width="12.5449%" height="15" fill="rgb(221,10,30)"/><text x="33.2195%" y="223.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (190,951,527 samples, 11.64%)</title><rect x="33.8738%" y="197" width="11.6406%" height="15" fill="rgb(210,229,1)"/><text x="34.1238%" y="207.50">LLVM_module_optim..</text></g><g><title>LLVM_lto_optimize (284,142,144 samples, 17.32%)</title><rect x="45.9256%" y="197" width="17.3215%" height="15" fill="rgb(222,148,37)"/><text x="46.1756%" y="207.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (171,543,351 samples, 10.46%)</title><rect x="63.2472%" y="197" width="10.4574%" height="15" fill="rgb(234,67,33)"/><text x="63.4972%" y="207.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (169,909,043 samples, 10.36%)</title><rect x="63.3468%" y="181" width="10.3578%" height="15" fill="rgb(247,98,35)"/><text x="63.5968%" y="191.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (7,265,329 samples, 0.44%)</title><rect x="73.7046%" y="197" width="0.4429%" height="15" fill="rgb(247,138,52)"/><text x="73.9546%" y="207.50"></text></g><g><title>codegen_module_perform_lto (470,287,544 samples, 28.67%)</title><rect x="45.5144%" y="213" width="28.6691%" height="15" fill="rgb(213,79,30)"/><text x="45.7644%" y="223.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (124,580,504 samples, 7.59%)</title><rect x="74.2866%" y="197" width="7.5945%" height="15" fill="rgb(246,177,23)"/><text x="74.5366%" y="207.50">macro_expa..</text></g><g><title>expand_crate (124,552,094 samples, 7.59%)</title><rect x="74.2884%" y="181" width="7.5928%" height="15" fill="rgb(230,62,27)"/><text x="74.5384%" y="191.50">expand_cra..</text></g><g><title>finalize_macro_resolutions (2,037,153 samples, 0.12%)</title><rect x="81.8987%" y="181" width="0.1242%" height="15" fill="rgb(216,154,8)"/><text x="82.1487%" y="191.50"></text></g><g><title>late_resolve_crate (11,217,334 samples, 0.68%)</title><rect x="82.0229%" y="181" width="0.6838%" height="15" fill="rgb(244,35,45)"/><text x="82.2729%" y="191.50"></text></g><g><title>configure_and_expand (141,520,341 samples, 8.63%)</title><rect x="74.1835%" y="213" width="8.6272%" height="15" fill="rgb(251,115,12)"/><text x="74.4335%" y="223.50">configure_an..</text></g><g><title>resolve_crate (15,136,347 samples, 0.92%)</title><rect x="81.8880%" y="197" width="0.9227%" height="15" fill="rgb(240,54,50)"/><text x="82.1380%" y="207.50"></text></g><g><title>drop_ast (1,663,479 samples, 0.10%)</title><rect x="82.8107%" y="213" width="0.1014%" height="15" fill="rgb(233,84,52)"/><text x="83.0607%" y="223.50"></text></g><g><title>early_lint_checks (4,078,825 samples, 0.25%)</title><rect x="82.9134%" y="213" width="0.2486%" height="15" fill="rgb(207,117,47)"/><text x="83.1634%" y="223.50"></text></g><g><title>free_global_ctxt (7,459,962 samples, 0.45%)</title><rect x="83.1620%" y="213" width="0.4548%" height="15" fill="rgb(249,43,39)"/><text x="83.4120%" y="223.50"></text></g><g><title>generate_crate_metadata (28,908,298 samples, 1.76%)</title><rect x="83.6168%" y="213" width="1.7623%" height="15" fill="rgb(209,38,44)"/><text x="83.8668%" y="223.50"></text></g><g><title>hir_lowering (21,479,987 samples, 1.31%)</title><rect x="85.3790%" y="213" width="1.3094%" height="15" fill="rgb(236,212,23)"/><text x="85.6290%" y="223.50"></text></g><g><title>finish_ongoing_codegen (208,363,518 samples, 12.70%)</title><rect x="86.6894%" y="197" width="12.7020%" height="15" fill="rgb(242,79,21)"/><text x="86.9394%" y="207.50">finish_ongoing_code..</text></g><g><title>link_crate (6,316,000 samples, 0.39%)</title><rect x="99.3914%" y="197" width="0.3850%" height="15" fill="rgb(211,96,35)"/><text x="99.6414%" y="207.50"></text></g><g><title>link_binary (6,219,319 samples, 0.38%)</title><rect x="99.3973%" y="181" width="0.3791%" height="15" fill="rgb(253,215,40)"/><text x="99.6473%" y="191.50"></text></g><g><title>link_rlib (4,551,731 samples, 0.28%)</title><rect x="99.4990%" y="165" width="0.2775%" height="15" fill="rgb(211,81,21)"/><text x="99.7490%" y="175.50"></text></g><g><title>link (214,706,378 samples, 13.09%)</title><rect x="86.6885%" y="213" width="13.0887%" height="15" fill="rgb(208,190,38)"/><text x="86.9385%" y="223.50">link</text></g><g><title>all (1,640,399,166 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (1,640,399,166 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (1,739,899 samples, 0.11%)</title><rect x="99.8939%" y="213" width="0.1061%" height="15" fill="rgb(244,218,35)"/><text x="100.1439%" y="223.50"></text></g></svg></svg>