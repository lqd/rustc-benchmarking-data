<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (212,431,755 samples, 10.76%)</title><rect x="0.0497%" y="181" width="10.7580%" height="15" fill="rgb(227,0,7)"/><text x="0.2997%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (3,580,630 samples, 0.18%)</title><rect x="15.2550%" y="69" width="0.1813%" height="15" fill="rgb(217,0,24)"/><text x="15.5050%" y="79.50"></text></g><g><title>is_copy_raw (2,700,484 samples, 0.14%)</title><rect x="15.2996%" y="53" width="0.1368%" height="15" fill="rgb(221,193,54)"/><text x="15.5496%" y="63.50"></text></g><g><title>evaluate_obligation (2,181,559 samples, 0.11%)</title><rect x="15.3259%" y="37" width="0.1105%" height="15" fill="rgb(248,212,6)"/><text x="15.5759%" y="47.50"></text></g><g><title>resolve_instance (3,632,928 samples, 0.18%)</title><rect x="15.4402%" y="69" width="0.1840%" height="15" fill="rgb(208,68,35)"/><text x="15.6902%" y="79.50"></text></g><g><title>thir_body (5,424,390 samples, 0.27%)</title><rect x="15.6321%" y="69" width="0.2747%" height="15" fill="rgb(232,128,0)"/><text x="15.8821%" y="79.50"></text></g><g><title>mir_const (35,569,146 samples, 1.80%)</title><rect x="14.1105%" y="117" width="1.8013%" height="15" fill="rgb(207,160,47)"/><text x="14.3605%" y="127.50">m..</text></g><g><title>unsafety_check_result (30,642,049 samples, 1.55%)</title><rect x="14.3600%" y="101" width="1.5518%" height="15" fill="rgb(228,23,34)"/><text x="14.6100%" y="111.50"></text></g><g><title>mir_built (27,431,982 samples, 1.39%)</title><rect x="14.5226%" y="85" width="1.3892%" height="15" fill="rgb(218,30,26)"/><text x="14.7726%" y="95.50"></text></g><g><title>mir_promoted (40,395,354 samples, 2.05%)</title><rect x="13.9015%" y="133" width="2.0457%" height="15" fill="rgb(220,122,19)"/><text x="14.1515%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (2,092,316 samples, 0.11%)</title><rect x="15.9473%" y="133" width="0.1060%" height="15" fill="rgb(250,228,42)"/><text x="16.1973%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,676,171 samples, 0.44%)</title><rect x="16.1435%" y="133" width="0.4394%" height="15" fill="rgb(240,193,28)"/><text x="16.3935%" y="143.50"></text></g><g><title>MIR_borrow_checking (112,973,622 samples, 5.72%)</title><rect x="10.8624%" y="165" width="5.7212%" height="15" fill="rgb(216,20,37)"/><text x="11.1124%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (112,202,695 samples, 5.68%)</title><rect x="10.9015%" y="149" width="5.6822%" height="15" fill="rgb(206,188,39)"/><text x="11.1515%" y="159.50">mir_bor..</text></g><g><title>check_mod_attrs (2,216,782 samples, 0.11%)</title><rect x="16.6573%" y="149" width="0.1123%" height="15" fill="rgb(217,207,13)"/><text x="16.9073%" y="159.50"></text></g><g><title>misc_checking_1 (4,479,920 samples, 0.23%)</title><rect x="16.6547%" y="165" width="0.2269%" height="15" fill="rgb(231,73,38)"/><text x="16.9047%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,022,552 samples, 0.10%)</title><rect x="16.8816%" y="149" width="0.1024%" height="15" fill="rgb(225,20,46)"/><text x="17.1316%" y="159.50"></text></g><g><title>misc_checking_2 (4,521,770 samples, 0.23%)</title><rect x="16.8815%" y="165" width="0.2290%" height="15" fill="rgb(210,31,41)"/><text x="17.1315%" y="175.50"></text></g><g><title>match_checking (2,497,638 samples, 0.13%)</title><rect x="16.9840%" y="149" width="0.1265%" height="15" fill="rgb(221,200,47)"/><text x="17.2340%" y="159.50"></text></g><g><title>check_match (2,316,475 samples, 0.12%)</title><rect x="16.9932%" y="133" width="0.1173%" height="15" fill="rgb(226,26,5)"/><text x="17.2432%" y="143.50"></text></g><g><title>death_checking (2,175,163 samples, 0.11%)</title><rect x="17.1635%" y="149" width="0.1102%" height="15" fill="rgb(249,33,26)"/><text x="17.4135%" y="159.50"></text></g><g><title>crate_lints (4,638,581 samples, 0.23%)</title><rect x="17.2737%" y="133" width="0.2349%" height="15" fill="rgb(235,183,28)"/><text x="17.5237%" y="143.50"></text></g><g><title>lint_checking (6,934,876 samples, 0.35%)</title><rect x="17.2736%" y="149" width="0.3512%" height="15" fill="rgb(221,5,38)"/><text x="17.5236%" y="159.50"></text></g><g><title>module_lints (2,293,845 samples, 0.12%)</title><rect x="17.5086%" y="133" width="0.1162%" height="15" fill="rgb(247,18,42)"/><text x="17.7586%" y="143.50"></text></g><g><title>lint_mod (2,273,725 samples, 0.12%)</title><rect x="17.5097%" y="117" width="0.1151%" height="15" fill="rgb(241,131,45)"/><text x="17.7597%" y="127.50"></text></g><g><title>privacy_checking_modules (3,871,892 samples, 0.20%)</title><rect x="17.6929%" y="149" width="0.1961%" height="15" fill="rgb(249,31,29)"/><text x="17.9429%" y="159.50"></text></g><g><title>check_mod_privacy (3,856,032 samples, 0.20%)</title><rect x="17.6937%" y="133" width="0.1953%" height="15" fill="rgb(225,111,53)"/><text x="17.9437%" y="143.50"></text></g><g><title>misc_checking_3 (15,414,849 samples, 0.78%)</title><rect x="17.1105%" y="165" width="0.7806%" height="15" fill="rgb(238,160,17)"/><text x="17.3605%" y="175.50"></text></g><g><title>impl_parent (2,861,260 samples, 0.14%)</title><rect x="18.1237%" y="101" width="0.1449%" height="15" fill="rgb(214,148,48)"/><text x="18.3737%" y="111.50"></text></g><g><title>impl_trait_ref (5,894,198 samples, 0.30%)</title><rect x="18.2686%" y="101" width="0.2985%" height="15" fill="rgb(232,36,49)"/><text x="18.5186%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,595,542 samples, 0.23%)</title><rect x="18.3344%" y="85" width="0.2327%" height="15" fill="rgb(209,103,24)"/><text x="18.5844%" y="95.50"></text></g><g><title>coherent_trait (13,951,353 samples, 0.71%)</title><rect x="17.9094%" y="133" width="0.7065%" height="15" fill="rgb(229,88,8)"/><text x="18.1594%" y="143.50"></text></g><g><title>specialization_graph_of (13,783,781 samples, 0.70%)</title><rect x="17.9179%" y="117" width="0.6980%" height="15" fill="rgb(213,181,19)"/><text x="18.1679%" y="127.50"></text></g><g><title>coherence_checking (14,223,376 samples, 0.72%)</title><rect x="17.9081%" y="149" width="0.7203%" height="15" fill="rgb(254,191,54)"/><text x="18.1581%" y="159.50"></text></g><g><title>evaluate_obligation (11,263,519 samples, 0.57%)</title><rect x="24.1154%" y="101" width="0.5704%" height="15" fill="rgb(241,83,37)"/><text x="24.3654%" y="111.50"></text></g><g><title>typeck (11,668,838 samples, 0.59%)</title><rect x="24.9910%" y="101" width="0.5909%" height="15" fill="rgb(233,36,39)"/><text x="25.2410%" y="111.50"></text></g><g><title>item_bodies_checking (137,356,630 samples, 6.96%)</title><rect x="18.6368%" y="149" width="6.9560%" height="15" fill="rgb(226,3,54)"/><text x="18.8868%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (137,352,320 samples, 6.96%)</title><rect x="18.6370%" y="133" width="6.9558%" height="15" fill="rgb(245,192,40)"/><text x="18.8870%" y="143.50">typeck_it..</text></g><g><title>typeck (136,813,902 samples, 6.93%)</title><rect x="18.6643%" y="117" width="6.9285%" height="15" fill="rgb(238,167,29)"/><text x="18.9143%" y="127.50">typeck</text></g><g><title>evaluate_obligation (6,039,757 samples, 0.31%)</title><rect x="25.8540%" y="101" width="0.3059%" height="15" fill="rgb(232,182,51)"/><text x="26.1040%" y="111.50"></text></g><g><title>item_types_checking (11,426,736 samples, 0.58%)</title><rect x="25.5928%" y="149" width="0.5787%" height="15" fill="rgb(231,60,39)"/><text x="25.8428%" y="159.50"></text></g><g><title>check_mod_item_types (11,406,606 samples, 0.58%)</title><rect x="25.5939%" y="133" width="0.5777%" height="15" fill="rgb(208,69,12)"/><text x="25.8439%" y="143.50"></text></g><g><title>typeck (7,397,581 samples, 0.37%)</title><rect x="25.7969%" y="117" width="0.3746%" height="15" fill="rgb(235,93,37)"/><text x="26.0469%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,977,802 samples, 0.10%)</title><rect x="26.3330%" y="53" width="0.1002%" height="15" fill="rgb(213,116,39)"/><text x="26.5830%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,018,372 samples, 0.10%)</title><rect x="26.3317%" y="69" width="0.1022%" height="15" fill="rgb(222,207,29)"/><text x="26.5817%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,421,179 samples, 0.22%)</title><rect x="26.2409%" y="117" width="0.2239%" height="15" fill="rgb(206,96,30)"/><text x="26.4909%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,402,109 samples, 0.22%)</title><rect x="26.2418%" y="101" width="0.2229%" height="15" fill="rgb(218,138,4)"/><text x="26.4918%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,389,949 samples, 0.22%)</title><rect x="26.2424%" y="85" width="0.2223%" height="15" fill="rgb(250,191,14)"/><text x="26.4924%" y="95.50"></text></g><g><title>generics_of (2,396,086 samples, 0.12%)</title><rect x="26.5342%" y="117" width="0.1213%" height="15" fill="rgb(239,60,40)"/><text x="26.7842%" y="127.50"></text></g><g><title>predicates_of (3,299,044 samples, 0.17%)</title><rect x="26.6745%" y="117" width="0.1671%" height="15" fill="rgb(206,27,48)"/><text x="26.9245%" y="127.50"></text></g><g><title>predicates_defined_on (3,031,901 samples, 0.15%)</title><rect x="26.6880%" y="101" width="0.1535%" height="15" fill="rgb(225,35,8)"/><text x="26.9380%" y="111.50"></text></g><g><title>type_collecting (13,647,619 samples, 0.69%)</title><rect x="26.1720%" y="149" width="0.6911%" height="15" fill="rgb(250,213,24)"/><text x="26.4220%" y="159.50"></text></g><g><title>collect_mod_item_types (13,623,959 samples, 0.69%)</title><rect x="26.1732%" y="133" width="0.6899%" height="15" fill="rgb(247,123,22)"/><text x="26.4232%" y="143.50"></text></g><g><title>evaluate_obligation (2,800,242 samples, 0.14%)</title><rect x="27.5163%" y="117" width="0.1418%" height="15" fill="rgb(231,138,38)"/><text x="27.7663%" y="127.50"></text></g><g><title>check_impl_item_well_formed (19,579,375 samples, 0.99%)</title><rect x="26.9185%" y="133" width="0.9915%" height="15" fill="rgb(231,145,46)"/><text x="27.1685%" y="143.50"></text></g><g><title>evaluate_obligation (2,142,892 samples, 0.11%)</title><rect x="28.2133%" y="117" width="0.1085%" height="15" fill="rgb(251,118,11)"/><text x="28.4633%" y="127.50"></text></g><g><title>check_item_well_formed (10,819,544 samples, 0.55%)</title><rect x="27.9101%" y="133" width="0.5479%" height="15" fill="rgb(217,147,25)"/><text x="28.1601%" y="143.50"></text></g><g><title>analysis (349,357,920 samples, 17.69%)</title><rect x="10.8077%" y="181" width="17.6922%" height="15" fill="rgb(247,81,37)"/><text x="11.0577%" y="191.50">analysis</text></g><g><title>type_check_crate (209,484,873 samples, 10.61%)</title><rect x="17.8912%" y="165" width="10.6087%" height="15" fill="rgb(209,12,38)"/><text x="18.1412%" y="175.50">type_check_crate</text></g><g><title>wf_checking (32,285,265 samples, 1.63%)</title><rect x="26.8649%" y="149" width="1.6350%" height="15" fill="rgb(227,1,9)"/><text x="27.1149%" y="159.50"></text></g><g><title>is_freeze_raw (2,697,739 samples, 0.14%)</title><rect x="31.9480%" y="133" width="0.1366%" height="15" fill="rgb(248,47,43)"/><text x="32.1980%" y="143.50"></text></g><g><title>evaluate_obligation (2,399,395 samples, 0.12%)</title><rect x="31.9632%" y="117" width="0.1215%" height="15" fill="rgb(221,10,30)"/><text x="32.2132%" y="127.50"></text></g><g><title>layout_of (2,147,087 samples, 0.11%)</title><rect x="32.1754%" y="133" width="0.1087%" height="15" fill="rgb(210,229,1)"/><text x="32.4254%" y="143.50"></text></g><g><title>param_env (5,129,075 samples, 0.26%)</title><rect x="32.2841%" y="133" width="0.2597%" height="15" fill="rgb(222,148,37)"/><text x="32.5341%" y="143.50"></text></g><g><title>fn_abi_of_instance (19,852,240 samples, 1.01%)</title><rect x="31.6141%" y="149" width="1.0054%" height="15" fill="rgb(234,67,33)"/><text x="31.8641%" y="159.50"></text></g><g><title>codegen_module (82,878,068 samples, 4.20%)</title><rect x="28.6036%" y="165" width="4.1971%" height="15" fill="rgb(247,98,35)"/><text x="28.8536%" y="175.50">codeg..</text></g><g><title>metadata_decode_entry_optimized_mir (2,592,151 samples, 0.13%)</title><rect x="33.3750%" y="101" width="0.1313%" height="15" fill="rgb(247,138,52)"/><text x="33.6250%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,928,948 samples, 0.20%)</title><rect x="33.5063%" y="101" width="0.1990%" height="15" fill="rgb(213,79,30)"/><text x="33.7563%" y="111.50"></text></g><g><title>optimized_mir (12,002,702 samples, 0.61%)</title><rect x="33.1158%" y="117" width="0.6078%" height="15" fill="rgb(246,177,23)"/><text x="33.3658%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (5,023,310 samples, 0.25%)</title><rect x="33.7926%" y="101" width="0.2544%" height="15" fill="rgb(230,62,27)"/><text x="34.0426%" y="111.50"></text></g><g><title>specialization_graph_of (2,241,863 samples, 0.11%)</title><rect x="34.1229%" y="101" width="0.1135%" height="15" fill="rgb(216,154,8)"/><text x="34.3729%" y="111.50"></text></g><g><title>resolve_instance (10,535,967 samples, 0.53%)</title><rect x="33.7237%" y="117" width="0.5336%" height="15" fill="rgb(244,35,45)"/><text x="33.9737%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (31,421,035 samples, 1.59%)</title><rect x="32.8036%" y="133" width="1.5912%" height="15" fill="rgb(251,115,12)"/><text x="33.0536%" y="143.50"></text></g><g><title>monomorphization_collector (31,638,697 samples, 1.60%)</title><rect x="32.8033%" y="149" width="1.6022%" height="15" fill="rgb(240,54,50)"/><text x="33.0533%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (2,639,359 samples, 0.13%)</title><rect x="34.4058%" y="133" width="0.1337%" height="15" fill="rgb(233,84,52)"/><text x="34.6558%" y="143.50"></text></g><g><title>symbol_name (2,383,805 samples, 0.12%)</title><rect x="34.4188%" y="117" width="0.1207%" height="15" fill="rgb(207,117,47)"/><text x="34.6688%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (35,412,949 samples, 1.79%)</title><rect x="32.8013%" y="165" width="1.7934%" height="15" fill="rgb(249,43,39)"/><text x="33.0513%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (3,734,122 samples, 0.19%)</title><rect x="34.4056%" y="149" width="0.1891%" height="15" fill="rgb(209,38,44)"/><text x="34.6556%" y="159.50"></text></g><g><title>codegen_crate (120,418,053 samples, 6.10%)</title><rect x="28.5002%" y="181" width="6.0982%" height="15" fill="rgb(236,212,23)"/><text x="28.7502%" y="191.50">codegen_..</text></g><g><title>codegen_module_optimize (453,564,350 samples, 22.97%)</title><rect x="34.5984%" y="181" width="22.9694%" height="15" fill="rgb(242,79,21)"/><text x="34.8484%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (425,991,406 samples, 21.57%)</title><rect x="35.9948%" y="165" width="21.5731%" height="15" fill="rgb(211,96,35)"/><text x="36.2448%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (281,708,469 samples, 14.27%)</title><rect x="58.5573%" y="165" width="14.2663%" height="15" fill="rgb(253,215,40)"/><text x="58.8073%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (264,549,861 samples, 13.40%)</title><rect x="72.8236%" y="165" width="13.3974%" height="15" fill="rgb(211,81,21)"/><text x="73.0736%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (262,016,012 samples, 13.27%)</title><rect x="72.9519%" y="149" width="13.2690%" height="15" fill="rgb(208,190,38)"/><text x="73.2019%" y="159.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (29,691,056 samples, 1.50%)</title><rect x="86.2209%" y="165" width="1.5036%" height="15" fill="rgb(235,213,38)"/><text x="86.4709%" y="175.50"></text></g><g><title>codegen_module_perform_lto (596,786,750 samples, 30.22%)</title><rect x="57.5679%" y="181" width="30.2225%" height="15" fill="rgb(237,122,38)"/><text x="57.8179%" y="191.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (33,846,532 samples, 1.71%)</title><rect x="87.8307%" y="165" width="1.7141%" height="15" fill="rgb(244,218,35)"/><text x="88.0807%" y="175.50"></text></g><g><title>expand_crate (33,836,142 samples, 1.71%)</title><rect x="87.8312%" y="149" width="1.7135%" height="15" fill="rgb(240,68,47)"/><text x="88.0812%" y="159.50"></text></g><g><title>late_resolve_crate (6,511,962 samples, 0.33%)</title><rect x="89.5732%" y="149" width="0.3298%" height="15" fill="rgb(210,16,53)"/><text x="89.8232%" y="159.50"></text></g><g><title>configure_and_expand (42,246,555 samples, 2.14%)</title><rect x="87.7904%" y="181" width="2.1395%" height="15" fill="rgb(235,124,12)"/><text x="88.0404%" y="191.50">c..</text></g><g><title>resolve_crate (7,522,533 samples, 0.38%)</title><rect x="89.5489%" y="165" width="0.3810%" height="15" fill="rgb(224,169,11)"/><text x="89.7989%" y="175.50"></text></g><g><title>free_global_ctxt (11,585,158 samples, 0.59%)</title><rect x="90.0543%" y="181" width="0.5867%" height="15" fill="rgb(250,166,2)"/><text x="90.3043%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,273,737 samples, 0.87%)</title><rect x="91.8981%" y="149" width="0.8748%" height="15" fill="rgb(242,216,29)"/><text x="92.1481%" y="159.50"></text></g><g><title>optimized_mir (32,799,823 samples, 1.66%)</title><rect x="91.1169%" y="165" width="1.6611%" height="15" fill="rgb(230,116,27)"/><text x="91.3669%" y="175.50"></text></g><g><title>generate_crate_metadata (42,784,141 samples, 2.17%)</title><rect x="90.6410%" y="181" width="2.1667%" height="15" fill="rgb(228,99,48)"/><text x="90.8910%" y="191.50">g..</text></g><g><title>hir_lowering (13,030,273 samples, 0.66%)</title><rect x="92.8076%" y="181" width="0.6599%" height="15" fill="rgb(253,11,6)"/><text x="93.0576%" y="191.50"></text></g><g><title>finish_ongoing_codegen (120,427,614 samples, 6.10%)</title><rect x="93.4685%" y="165" width="6.0987%" height="15" fill="rgb(247,143,39)"/><text x="93.7185%" y="175.50">finish_o..</text></g><g><title>link_crate (2,667,860 samples, 0.14%)</title><rect x="99.5672%" y="165" width="0.1351%" height="15" fill="rgb(236,97,10)"/><text x="99.8172%" y="175.50"></text></g><g><title>link_binary (2,596,649 samples, 0.13%)</title><rect x="99.5708%" y="149" width="0.1315%" height="15" fill="rgb(233,208,19)"/><text x="99.8208%" y="159.50"></text></g><g><title>link (123,126,434 samples, 6.24%)</title><rect x="93.4675%" y="181" width="6.2354%" height="15" fill="rgb(216,164,2)"/><text x="93.7175%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (4,191,006 samples, 0.21%)</title><rect x="99.7476%" y="181" width="0.2122%" height="15" fill="rgb(220,129,5)"/><text x="99.9976%" y="191.50"></text></g><g><title>all (1,974,642,441 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,974,642,441 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>