<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,742,411 samples, 24.58%)</title><rect x="0.8396%" y="229" width="24.5795%" height="15" fill="rgb(227,0,7)"/><text x="1.0896%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (141,481 samples, 0.30%)</title><rect x="25.1229%" y="213" width="0.2962%" height="15" fill="rgb(217,0,24)"/><text x="25.3729%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (127,211 samples, 0.27%)</title><rect x="25.1528%" y="197" width="0.2663%" height="15" fill="rgb(221,193,54)"/><text x="25.4028%" y="207.50"></text></g><g><title>mir_const (191,973 samples, 0.40%)</title><rect x="26.4299%" y="165" width="0.4018%" height="15" fill="rgb(248,212,6)"/><text x="26.6799%" y="175.50"></text></g><g><title>unsafety_check_result (141,922 samples, 0.30%)</title><rect x="26.5347%" y="149" width="0.2971%" height="15" fill="rgb(208,68,35)"/><text x="26.7847%" y="159.50"></text></g><g><title>mir_built (102,632 samples, 0.21%)</title><rect x="26.6169%" y="133" width="0.2148%" height="15" fill="rgb(232,128,0)"/><text x="26.8669%" y="143.50"></text></g><g><title>MIR_borrow_checking (603,197 samples, 1.26%)</title><rect x="25.5799%" y="213" width="1.2626%" height="15" fill="rgb(207,160,47)"/><text x="25.8299%" y="223.50"></text></g><g><title>mir_borrowck (599,997 samples, 1.26%)</title><rect x="25.5866%" y="197" width="1.2559%" height="15" fill="rgb(228,23,34)"/><text x="25.8366%" y="207.50"></text></g><g><title>mir_promoted (246,684 samples, 0.52%)</title><rect x="26.3261%" y="181" width="0.5164%" height="15" fill="rgb(218,30,26)"/><text x="26.5761%" y="191.50"></text></g><g><title>hir_module_items (61,191 samples, 0.13%)</title><rect x="26.8469%" y="213" width="0.1281%" height="15" fill="rgb(220,122,19)"/><text x="27.0969%" y="223.50"></text></g><g><title>codegen_fn_attrs (120,742 samples, 0.25%)</title><rect x="27.0844%" y="181" width="0.2527%" height="15" fill="rgb(250,228,42)"/><text x="27.3344%" y="191.50"></text></g><g><title>check_mod_attrs (157,322 samples, 0.33%)</title><rect x="27.0080%" y="197" width="0.3293%" height="15" fill="rgb(240,193,28)"/><text x="27.2580%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (60,050 samples, 0.13%)</title><rect x="27.3823%" y="197" width="0.1257%" height="15" fill="rgb(216,20,37)"/><text x="27.6323%" y="207.50"></text></g><g><title>misc_checking_1 (272,803 samples, 0.57%)</title><rect x="26.9754%" y="213" width="0.5710%" height="15" fill="rgb(206,188,39)"/><text x="27.2254%" y="223.50"></text></g><g><title>misc_checking_2 (61,240 samples, 0.13%)</title><rect x="27.5465%" y="213" width="0.1282%" height="15" fill="rgb(217,207,13)"/><text x="27.7965%" y="223.50"></text></g><g><title>crate_lints (66,061 samples, 0.14%)</title><rect x="27.7961%" y="181" width="0.1383%" height="15" fill="rgb(231,73,38)"/><text x="28.0461%" y="191.50"></text></g><g><title>lint_checking (83,481 samples, 0.17%)</title><rect x="27.7938%" y="197" width="0.1747%" height="15" fill="rgb(225,20,46)"/><text x="28.0438%" y="207.50"></text></g><g><title>misc_checking_3 (211,543 samples, 0.44%)</title><rect x="27.6747%" y="213" width="0.4428%" height="15" fill="rgb(210,31,41)"/><text x="27.9247%" y="223.50"></text></g><g><title>impl_parent (98,012 samples, 0.21%)</title><rect x="29.0906%" y="53" width="0.2052%" height="15" fill="rgb(221,200,47)"/><text x="29.3406%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (76,302 samples, 0.16%)</title><rect x="29.1361%" y="37" width="0.1597%" height="15" fill="rgb(226,26,5)"/><text x="29.3861%" y="47.50"></text></g><g><title>impl_trait_ref (453,925 samples, 0.95%)</title><rect x="29.2958%" y="53" width="0.9502%" height="15" fill="rgb(249,33,26)"/><text x="29.5458%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (431,164 samples, 0.90%)</title><rect x="29.3434%" y="37" width="0.9025%" height="15" fill="rgb(235,183,28)"/><text x="29.5934%" y="47.50"></text></g><g><title>adt_destructor (691,378 samples, 1.45%)</title><rect x="28.8594%" y="117" width="1.4472%" height="15" fill="rgb(221,5,38)"/><text x="29.1094%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (690,888 samples, 1.45%)</title><rect x="28.8605%" y="101" width="1.4462%" height="15" fill="rgb(247,18,42)"/><text x="29.1105%" y="111.50"></text></g><g><title>coherent_trait (686,228 samples, 1.44%)</title><rect x="28.8702%" y="85" width="1.4364%" height="15" fill="rgb(241,131,45)"/><text x="29.1202%" y="95.50"></text></g><g><title>specialization_graph_of (681,558 samples, 1.43%)</title><rect x="28.8800%" y="69" width="1.4267%" height="15" fill="rgb(249,31,29)"/><text x="29.1300%" y="79.50"></text></g><g><title>dropck_outlives (730,828 samples, 1.53%)</title><rect x="28.7855%" y="149" width="1.5298%" height="15" fill="rgb(225,111,53)"/><text x="29.0355%" y="159.50"></text></g><g><title>adt_dtorck_constraint (708,168 samples, 1.48%)</title><rect x="28.8329%" y="133" width="1.4824%" height="15" fill="rgb(238,160,17)"/><text x="29.0829%" y="143.50"></text></g><g><title>item_bodies_checking (1,136,103 samples, 2.38%)</title><rect x="28.1840%" y="197" width="2.3781%" height="15" fill="rgb(214,148,48)"/><text x="28.4340%" y="207.50">it..</text></g><g><title>typeck_item_bodies (1,134,803 samples, 2.38%)</title><rect x="28.1867%" y="181" width="2.3754%" height="15" fill="rgb(232,36,49)"/><text x="28.4367%" y="191.50">ty..</text></g><g><title>typeck (1,131,263 samples, 2.37%)</title><rect x="28.1941%" y="165" width="2.3680%" height="15" fill="rgb(209,103,24)"/><text x="28.4441%" y="175.50">ty..</text></g><g><title>fn_sig (108,721 samples, 0.23%)</title><rect x="30.6580%" y="165" width="0.2276%" height="15" fill="rgb(229,88,8)"/><text x="30.9080%" y="175.50"></text></g><g><title>type_collecting (222,472 samples, 0.47%)</title><rect x="30.5689%" y="197" width="0.4657%" height="15" fill="rgb(213,181,19)"/><text x="30.8189%" y="207.50"></text></g><g><title>collect_mod_item_types (215,582 samples, 0.45%)</title><rect x="30.5833%" y="181" width="0.4513%" height="15" fill="rgb(254,191,54)"/><text x="30.8333%" y="191.50"></text></g><g><title>evaluate_obligation (53,050 samples, 0.11%)</title><rect x="31.5002%" y="165" width="0.1110%" height="15" fill="rgb(241,83,37)"/><text x="31.7502%" y="175.50"></text></g><g><title>param_env (119,441 samples, 0.25%)</title><rect x="31.7059%" y="165" width="0.2500%" height="15" fill="rgb(233,36,39)"/><text x="31.9559%" y="175.50"></text></g><g><title>analysis (3,157,056 samples, 6.61%)</title><rect x="25.4191%" y="229" width="6.6084%" height="15" fill="rgb(226,3,54)"/><text x="25.6691%" y="239.50">analysis</text></g><g><title>type_check_crate (1,867,951 samples, 3.91%)</title><rect x="28.1175%" y="213" width="3.9100%" height="15" fill="rgb(245,192,40)"/><text x="28.3675%" y="223.50">type..</text></g><g><title>wf_checking (473,946 samples, 0.99%)</title><rect x="31.0354%" y="197" width="0.9921%" height="15" fill="rgb(238,167,29)"/><text x="31.2854%" y="207.50"></text></g><g><title>check_item_well_formed (459,185 samples, 0.96%)</title><rect x="31.0663%" y="181" width="0.9612%" height="15" fill="rgb(232,182,51)"/><text x="31.3163%" y="191.50"></text></g><g><title>codegen_module (420,644 samples, 0.88%)</title><rect x="33.1993%" y="213" width="0.8805%" height="15" fill="rgb(231,60,39)"/><text x="33.4493%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (302,163 samples, 0.63%)</title><rect x="34.1215%" y="181" width="0.6325%" height="15" fill="rgb(208,69,12)"/><text x="34.3715%" y="191.50"></text></g><g><title>optimized_mir (288,483 samples, 0.60%)</title><rect x="34.1501%" y="165" width="0.6039%" height="15" fill="rgb(235,93,37)"/><text x="34.4001%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (140,741 samples, 0.29%)</title><rect x="34.4594%" y="149" width="0.2946%" height="15" fill="rgb(213,116,39)"/><text x="34.7094%" y="159.50"></text></g><g><title>monomorphization_collector (325,054 samples, 0.68%)</title><rect x="34.1178%" y="197" width="0.6804%" height="15" fill="rgb(222,207,29)"/><text x="34.3678%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (380,255 samples, 0.80%)</title><rect x="34.0810%" y="213" width="0.7960%" height="15" fill="rgb(206,96,30)"/><text x="34.3310%" y="223.50"></text></g><g><title>codegen_crate (1,421,846 samples, 2.98%)</title><rect x="32.0411%" y="229" width="2.9762%" height="15" fill="rgb(218,138,4)"/><text x="32.2911%" y="239.50">cod..</text></g><g><title>codegen_module_optimize (4,105,426 samples, 8.59%)</title><rect x="35.0173%" y="229" width="8.5936%" height="15" fill="rgb(250,191,14)"/><text x="35.2673%" y="239.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (3,371,578 samples, 7.06%)</title><rect x="36.5534%" y="213" width="7.0575%" height="15" fill="rgb(239,60,40)"/><text x="36.8034%" y="223.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (1,620,619 samples, 3.39%)</title><rect x="44.4636%" y="213" width="3.3923%" height="15" fill="rgb(206,27,48)"/><text x="44.7136%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen (5,100,266 samples, 10.68%)</title><rect x="47.8559%" y="213" width="10.6760%" height="15" fill="rgb(225,35,8)"/><text x="48.1059%" y="223.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (5,002,185 samples, 10.47%)</title><rect x="48.0612%" y="197" width="10.4707%" height="15" fill="rgb(250,213,24)"/><text x="48.3112%" y="207.50">LLVM_module_cod..</text></g><g><title>codegen_module_perform_lto (7,165,689 samples, 15.00%)</title><rect x="43.6109%" y="229" width="14.9994%" height="15" fill="rgb(247,123,22)"/><text x="43.8609%" y="239.50">codegen_module_perform_..</text></g><g><title>crate_injection (50,051 samples, 0.10%)</title><rect x="58.9867%" y="213" width="0.1048%" height="15" fill="rgb(231,138,38)"/><text x="59.2367%" y="223.50"></text></g><g><title>macro_expand_crate (5,203,618 samples, 10.89%)</title><rect x="59.0915%" y="213" width="10.8923%" height="15" fill="rgb(231,145,46)"/><text x="59.3415%" y="223.50">macro_expand_cra..</text></g><g><title>expand_crate (5,190,278 samples, 10.86%)</title><rect x="59.1194%" y="197" width="10.8644%" height="15" fill="rgb(251,118,11)"/><text x="59.3694%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (1,277,395 samples, 2.67%)</title><rect x="67.3100%" y="181" width="2.6739%" height="15" fill="rgb(217,147,25)"/><text x="67.5600%" y="191.50">me..</text></g><g><title>metadata_register_crate (445,635 samples, 0.93%)</title><rect x="69.0510%" y="165" width="0.9328%" height="15" fill="rgb(247,81,37)"/><text x="69.3010%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (53,150 samples, 0.11%)</title><rect x="69.9895%" y="213" width="0.1113%" height="15" fill="rgb(209,12,38)"/><text x="70.2395%" y="223.50"></text></g><g><title>finalize_macro_resolutions (175,452 samples, 0.37%)</title><rect x="70.1266%" y="197" width="0.3673%" height="15" fill="rgb(227,1,9)"/><text x="70.3766%" y="207.50"></text></g><g><title>configure_and_expand (5,727,935 samples, 11.99%)</title><rect x="58.6103%" y="229" width="11.9899%" height="15" fill="rgb(248,47,43)"/><text x="58.8603%" y="239.50">configure_and_expa..</text></g><g><title>resolve_crate (238,582 samples, 0.50%)</title><rect x="70.1008%" y="213" width="0.4994%" height="15" fill="rgb(221,10,30)"/><text x="70.3508%" y="223.50"></text></g><g><title>early_lint_checks (161,621 samples, 0.34%)</title><rect x="70.6736%" y="229" width="0.3383%" height="15" fill="rgb(210,229,1)"/><text x="70.9236%" y="239.50"></text></g><g><title>free_global_ctxt (1,456,476 samples, 3.05%)</title><rect x="71.0119%" y="229" width="3.0487%" height="15" fill="rgb(222,148,37)"/><text x="71.2619%" y="239.50">fre..</text></g><g><title>crate_hash (67,570 samples, 0.14%)</title><rect x="74.3673%" y="213" width="0.1414%" height="15" fill="rgb(234,67,33)"/><text x="74.6173%" y="223.50"></text></g><g><title>exported_symbols (78,891 samples, 0.17%)</title><rect x="74.5521%" y="213" width="0.1651%" height="15" fill="rgb(247,98,35)"/><text x="74.8021%" y="223.50"></text></g><g><title>generate_crate_metadata (351,464 samples, 0.74%)</title><rect x="74.0607%" y="229" width="0.7357%" height="15" fill="rgb(247,138,52)"/><text x="74.3107%" y="239.50"></text></g><g><title>hir_lowering (166,312 samples, 0.35%)</title><rect x="74.7964%" y="229" width="0.3481%" height="15" fill="rgb(213,79,30)"/><text x="75.0464%" y="239.50"></text></g><g><title>finish_ongoing_codegen (10,047,472 samples, 21.03%)</title><rect x="75.1715%" y="213" width="21.0316%" height="15" fill="rgb(246,177,23)"/><text x="75.4215%" y="223.50">finish_ongoing_codegen</text></g><g><title>link_crate (571,666 samples, 1.20%)</title><rect x="96.2031%" y="213" width="1.1966%" height="15" fill="rgb(230,62,27)"/><text x="96.4531%" y="223.50"></text></g><g><title>link_binary (563,596 samples, 1.18%)</title><rect x="96.2200%" y="197" width="1.1797%" height="15" fill="rgb(216,154,8)"/><text x="96.4700%" y="207.50"></text></g><g><title>link_rlib (350,194 samples, 0.73%)</title><rect x="96.6667%" y="181" width="0.7330%" height="15" fill="rgb(244,35,45)"/><text x="96.9167%" y="191.50"></text></g><g><title>link (10,639,708 samples, 22.27%)</title><rect x="75.1445%" y="229" width="22.2713%" height="15" fill="rgb(251,115,12)"/><text x="75.3945%" y="239.50">link</text></g><g><title>parse_crate (445,725 samples, 0.93%)</title><rect x="97.4158%" y="229" width="0.9330%" height="15" fill="rgb(240,54,50)"/><text x="97.6658%" y="239.50"></text></g><g><title>prepare_outputs (180,652 samples, 0.38%)</title><rect x="98.3603%" y="229" width="0.3781%" height="15" fill="rgb(233,84,52)"/><text x="98.6103%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (288,724 samples, 0.60%)</title><rect x="98.7384%" y="229" width="0.6044%" height="15" fill="rgb(207,117,47)"/><text x="98.9884%" y="239.50"></text></g><g><title>setup_global_ctxt (77,731 samples, 0.16%)</title><rect x="99.3448%" y="229" width="0.1627%" height="15" fill="rgb(249,43,39)"/><text x="99.5948%" y="239.50"></text></g><g><title>all (47,773,153 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (47,773,153 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (235,302 samples, 0.49%)</title><rect x="99.5075%" y="229" width="0.4925%" height="15" fill="rgb(242,79,21)"/><text x="99.7575%" y="239.50"></text></g></svg></svg>