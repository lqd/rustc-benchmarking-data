<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (77,635,383 samples, 17.98%)</title><rect x="0.1472%" y="181" width="17.9755%" height="15" fill="rgb(227,0,7)"/><text x="0.3972%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (674,948 samples, 0.16%)</title><rect x="17.9663%" y="165" width="0.1563%" height="15" fill="rgb(217,0,24)"/><text x="18.2163%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (655,218 samples, 0.15%)</title><rect x="17.9709%" y="149" width="0.1517%" height="15" fill="rgb(221,193,54)"/><text x="18.2209%" y="159.50"></text></g><g><title>specialization_graph_of (480,385 samples, 0.11%)</title><rect x="20.2845%" y="53" width="0.1112%" height="15" fill="rgb(248,212,6)"/><text x="20.5345%" y="63.50"></text></g><g><title>resolve_instance (707,838 samples, 0.16%)</title><rect x="20.2433%" y="69" width="0.1639%" height="15" fill="rgb(208,68,35)"/><text x="20.4933%" y="79.50"></text></g><g><title>thir_body (565,521 samples, 0.13%)</title><rect x="20.4105%" y="69" width="0.1309%" height="15" fill="rgb(232,128,0)"/><text x="20.6605%" y="79.50"></text></g><g><title>mir_const (3,930,826 samples, 0.91%)</title><rect x="19.6333%" y="117" width="0.9101%" height="15" fill="rgb(207,160,47)"/><text x="19.8833%" y="127.50"></text></g><g><title>unsafety_check_result (3,339,539 samples, 0.77%)</title><rect x="19.7702%" y="101" width="0.7732%" height="15" fill="rgb(228,23,34)"/><text x="20.0202%" y="111.50"></text></g><g><title>mir_built (2,879,756 samples, 0.67%)</title><rect x="19.8766%" y="85" width="0.6668%" height="15" fill="rgb(218,30,26)"/><text x="20.1266%" y="95.50"></text></g><g><title>mir_promoted (4,852,088 samples, 1.12%)</title><rect x="19.5242%" y="133" width="1.1234%" height="15" fill="rgb(220,122,19)"/><text x="19.7742%" y="143.50"></text></g><g><title>mir_const_qualif (450,235 samples, 0.10%)</title><rect x="20.5434%" y="117" width="0.1042%" height="15" fill="rgb(250,228,42)"/><text x="20.7934%" y="127.50"></text></g><g><title>type_op_prove_predicate (480,585 samples, 0.11%)</title><rect x="20.6921%" y="133" width="0.1113%" height="15" fill="rgb(240,193,28)"/><text x="20.9421%" y="143.50"></text></g><g><title>MIR_borrow_checking (11,253,777 samples, 2.61%)</title><rect x="18.1994%" y="165" width="2.6057%" height="15" fill="rgb(216,20,37)"/><text x="18.4494%" y="175.50">MI..</text></g><g><title>mir_borrowck (11,159,257 samples, 2.58%)</title><rect x="18.2212%" y="149" width="2.5838%" height="15" fill="rgb(206,188,39)"/><text x="18.4712%" y="159.50">mi..</text></g><g><title>check_mod_attrs (574,876 samples, 0.13%)</title><rect x="20.9180%" y="149" width="0.1331%" height="15" fill="rgb(217,207,13)"/><text x="21.1680%" y="159.50"></text></g><g><title>misc_checking_1 (1,091,182 samples, 0.25%)</title><rect x="20.9118%" y="165" width="0.2526%" height="15" fill="rgb(231,73,38)"/><text x="21.1618%" y="175.50"></text></g><g><title>misc_checking_2 (519,626 samples, 0.12%)</title><rect x="21.1645%" y="165" width="0.1203%" height="15" fill="rgb(225,20,46)"/><text x="21.4145%" y="175.50"></text></g><g><title>crate_lints (1,018,772 samples, 0.24%)</title><rect x="21.3827%" y="133" width="0.2359%" height="15" fill="rgb(210,31,41)"/><text x="21.6327%" y="143.50"></text></g><g><title>lint_checking (1,242,524 samples, 0.29%)</title><rect x="21.3824%" y="149" width="0.2877%" height="15" fill="rgb(221,200,47)"/><text x="21.6324%" y="159.50"></text></g><g><title>misc_checking_3 (2,178,545 samples, 0.50%)</title><rect x="21.2848%" y="165" width="0.5044%" height="15" fill="rgb(226,26,5)"/><text x="21.5348%" y="175.50"></text></g><g><title>impl_parent (662,397 samples, 0.15%)</title><rect x="22.0436%" y="101" width="0.1534%" height="15" fill="rgb(249,33,26)"/><text x="22.2936%" y="111.50"></text></g><g><title>impl_trait_ref (1,313,525 samples, 0.30%)</title><rect x="22.1970%" y="101" width="0.3041%" height="15" fill="rgb(235,183,28)"/><text x="22.4470%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,043,112 samples, 0.24%)</title><rect x="22.2596%" y="85" width="0.2415%" height="15" fill="rgb(221,5,38)"/><text x="22.5096%" y="95.50"></text></g><g><title>coherent_trait (3,223,047 samples, 0.75%)</title><rect x="21.8050%" y="133" width="0.7463%" height="15" fill="rgb(247,18,42)"/><text x="22.0550%" y="143.50"></text></g><g><title>specialization_graph_of (3,208,787 samples, 0.74%)</title><rect x="21.8084%" y="117" width="0.7430%" height="15" fill="rgb(241,131,45)"/><text x="22.0584%" y="127.50"></text></g><g><title>coherence_checking (3,287,147 samples, 0.76%)</title><rect x="21.8008%" y="149" width="0.7611%" height="15" fill="rgb(249,31,29)"/><text x="22.0508%" y="159.50"></text></g><g><title>associated_items (587,679 samples, 0.14%)</title><rect x="24.6854%" y="101" width="0.1361%" height="15" fill="rgb(225,111,53)"/><text x="24.9354%" y="111.50"></text></g><g><title>predicates_of (591,516 samples, 0.14%)</title><rect x="25.2927%" y="85" width="0.1370%" height="15" fill="rgb(238,160,17)"/><text x="25.5427%" y="95.50"></text></g><g><title>specializes (946,263 samples, 0.22%)</title><rect x="25.4296%" y="85" width="0.2191%" height="15" fill="rgb(214,148,48)"/><text x="25.6796%" y="95.50"></text></g><g><title>param_env (588,626 samples, 0.14%)</title><rect x="25.5124%" y="69" width="0.1363%" height="15" fill="rgb(232,36,49)"/><text x="25.7624%" y="79.50"></text></g><g><title>evaluate_obligation (3,598,289 samples, 0.83%)</title><rect x="24.8954%" y="101" width="0.8331%" height="15" fill="rgb(209,103,24)"/><text x="25.1454%" y="111.50"></text></g><g><title>item_bodies_checking (14,548,155 samples, 3.37%)</title><rect x="22.5679%" y="149" width="3.3684%" height="15" fill="rgb(229,88,8)"/><text x="22.8179%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (14,545,495 samples, 3.37%)</title><rect x="22.5685%" y="133" width="3.3678%" height="15" fill="rgb(213,181,19)"/><text x="22.8185%" y="143.50">typ..</text></g><g><title>typeck (14,485,115 samples, 3.35%)</title><rect x="22.5825%" y="117" width="3.3538%" height="15" fill="rgb(254,191,54)"/><text x="22.8325%" y="127.50">typ..</text></g><g><title>mir_for_ctfe (893,391 samples, 0.21%)</title><rect x="26.4230%" y="53" width="0.2069%" height="15" fill="rgb(241,83,37)"/><text x="26.6730%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (884,511 samples, 0.20%)</title><rect x="26.4250%" y="37" width="0.2048%" height="15" fill="rgb(233,36,39)"/><text x="26.6750%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,889,059 samples, 0.44%)</title><rect x="26.1990%" y="101" width="0.4374%" height="15" fill="rgb(226,3,54)"/><text x="26.4490%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,849,708 samples, 0.43%)</title><rect x="26.2082%" y="85" width="0.4283%" height="15" fill="rgb(245,192,40)"/><text x="26.4582%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,811,138 samples, 0.42%)</title><rect x="26.2171%" y="69" width="0.4193%" height="15" fill="rgb(238,167,29)"/><text x="26.4671%" y="79.50"></text></g><g><title>evaluate_obligation (2,563,590 samples, 0.59%)</title><rect x="26.1003%" y="117" width="0.5936%" height="15" fill="rgb(232,182,51)"/><text x="26.3503%" y="127.50"></text></g><g><title>item_types_checking (3,517,691 samples, 0.81%)</title><rect x="25.9363%" y="149" width="0.8145%" height="15" fill="rgb(231,60,39)"/><text x="26.1863%" y="159.50"></text></g><g><title>check_mod_item_types (3,514,511 samples, 0.81%)</title><rect x="25.9371%" y="133" width="0.8137%" height="15" fill="rgb(208,69,12)"/><text x="26.1871%" y="143.50"></text></g><g><title>type_collecting (1,236,894 samples, 0.29%)</title><rect x="26.7511%" y="149" width="0.2864%" height="15" fill="rgb(235,93,37)"/><text x="27.0011%" y="159.50"></text></g><g><title>collect_mod_item_types (1,224,903 samples, 0.28%)</title><rect x="26.7539%" y="133" width="0.2836%" height="15" fill="rgb(213,116,39)"/><text x="27.0039%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,817,198 samples, 0.42%)</title><rect x="27.0647%" y="133" width="0.4207%" height="15" fill="rgb(222,207,29)"/><text x="27.3147%" y="143.50"></text></g><g><title>analysis (41,730,555 samples, 9.66%)</title><rect x="18.1226%" y="181" width="9.6622%" height="15" fill="rgb(206,96,30)"/><text x="18.3726%" y="191.50">analysis</text></g><g><title>type_check_crate (25,894,675 samples, 6.00%)</title><rect x="21.7892%" y="165" width="5.9956%" height="15" fill="rgb(218,138,4)"/><text x="22.0392%" y="175.50">type_che..</text></g><g><title>wf_checking (3,223,316 samples, 0.75%)</title><rect x="27.0385%" y="149" width="0.7463%" height="15" fill="rgb(250,191,14)"/><text x="27.2885%" y="159.50"></text></g><g><title>check_item_well_formed (1,292,968 samples, 0.30%)</title><rect x="27.4854%" y="133" width="0.2994%" height="15" fill="rgb(239,60,40)"/><text x="27.7354%" y="143.50"></text></g><g><title>is_freeze_raw (472,527 samples, 0.11%)</title><rect x="30.9548%" y="133" width="0.1094%" height="15" fill="rgb(206,27,48)"/><text x="31.2048%" y="143.50"></text></g><g><title>layout_of (731,778 samples, 0.17%)</title><rect x="31.1231%" y="133" width="0.1694%" height="15" fill="rgb(225,35,8)"/><text x="31.3731%" y="143.50"></text></g><g><title>predicates_of (472,598 samples, 0.11%)</title><rect x="31.4849%" y="117" width="0.1094%" height="15" fill="rgb(250,213,24)"/><text x="31.7349%" y="127.50"></text></g><g><title>param_env (1,307,812 samples, 0.30%)</title><rect x="31.2926%" y="133" width="0.3028%" height="15" fill="rgb(247,123,22)"/><text x="31.5426%" y="143.50"></text></g><g><title>normalize_projection_ty (480,133 samples, 0.11%)</title><rect x="31.6403%" y="117" width="0.1112%" height="15" fill="rgb(231,138,38)"/><text x="31.8903%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (680,375 samples, 0.16%)</title><rect x="31.5954%" y="133" width="0.1575%" height="15" fill="rgb(231,145,46)"/><text x="31.8454%" y="143.50"></text></g><g><title>fn_abi_of_instance (4,635,572 samples, 1.07%)</title><rect x="30.6822%" y="149" width="1.0733%" height="15" fill="rgb(251,118,11)"/><text x="30.9322%" y="159.50"></text></g><g><title>codegen_module (15,958,641 samples, 3.70%)</title><rect x="28.2187%" y="165" width="3.6950%" height="15" fill="rgb(217,147,25)"/><text x="28.4687%" y="175.50">code..</text></g><g><title>item_attrs (448,674 samples, 0.10%)</title><rect x="32.0807%" y="101" width="0.1039%" height="15" fill="rgb(247,81,37)"/><text x="32.3307%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (432,614 samples, 0.10%)</title><rect x="32.0845%" y="85" width="0.1002%" height="15" fill="rgb(209,12,38)"/><text x="32.3345%" y="95.50"></text></g><g><title>codegen_fn_attrs (717,859 samples, 0.17%)</title><rect x="32.0556%" y="117" width="0.1662%" height="15" fill="rgb(227,1,9)"/><text x="32.3056%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (660,155 samples, 0.15%)</title><rect x="32.4490%" y="101" width="0.1529%" height="15" fill="rgb(248,47,43)"/><text x="32.6990%" y="111.50"></text></g><g><title>optimized_mir (2,028,010 samples, 0.47%)</title><rect x="32.2765%" y="117" width="0.4696%" height="15" fill="rgb(221,10,30)"/><text x="32.5265%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,447,440 samples, 0.34%)</title><rect x="32.8195%" y="101" width="0.3351%" height="15" fill="rgb(210,229,1)"/><text x="33.0695%" y="111.50"></text></g><g><title>specialization_graph_of (1,277,634 samples, 0.30%)</title><rect x="33.2395%" y="101" width="0.2958%" height="15" fill="rgb(222,148,37)"/><text x="33.4895%" y="111.50"></text></g><g><title>impl_trait_ref (466,633 samples, 0.11%)</title><rect x="33.4273%" y="85" width="0.1080%" height="15" fill="rgb(234,67,33)"/><text x="33.6773%" y="95.50"></text></g><g><title>resolve_instance (3,555,441 samples, 0.82%)</title><rect x="32.7461%" y="117" width="0.8232%" height="15" fill="rgb(247,98,35)"/><text x="32.9961%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (7,755,229 samples, 1.80%)</title><rect x="31.9232%" y="133" width="1.7956%" height="15" fill="rgb(247,138,52)"/><text x="32.1732%" y="143.50">m..</text></g><g><title>vtable_entries (435,986 samples, 0.10%)</title><rect x="33.6179%" y="117" width="0.1009%" height="15" fill="rgb(213,79,30)"/><text x="33.8679%" y="127.50"></text></g><g><title>monomorphization_collector (7,800,279 samples, 1.81%)</title><rect x="31.9227%" y="149" width="1.8061%" height="15" fill="rgb(246,177,23)"/><text x="32.1727%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (555,907 samples, 0.13%)</title><rect x="33.7297%" y="133" width="0.1287%" height="15" fill="rgb(230,62,27)"/><text x="33.9797%" y="143.50"></text></g><g><title>symbol_name (516,017 samples, 0.12%)</title><rect x="33.7389%" y="117" width="0.1195%" height="15" fill="rgb(216,154,8)"/><text x="33.9889%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (8,618,238 samples, 2.00%)</title><rect x="31.9149%" y="165" width="1.9954%" height="15" fill="rgb(244,35,45)"/><text x="32.1649%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (784,309 samples, 0.18%)</title><rect x="33.7288%" y="149" width="0.1816%" height="15" fill="rgb(251,115,12)"/><text x="33.9788%" y="159.50"></text></g><g><title>codegen_crate (26,461,920 samples, 6.13%)</title><rect x="27.7869%" y="181" width="6.1269%" height="15" fill="rgb(240,54,50)"/><text x="28.0369%" y="191.50">codegen_..</text></g><g><title>codegen_module_optimize (86,607,315 samples, 20.05%)</title><rect x="33.9138%" y="181" width="20.0528%" height="15" fill="rgb(233,84,52)"/><text x="34.1638%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (79,391,053 samples, 18.38%)</title><rect x="35.5847%" y="165" width="18.3820%" height="15" fill="rgb(207,117,47)"/><text x="35.8347%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (46,633,972 samples, 10.80%)</title><rect x="55.2316%" y="165" width="10.7975%" height="15" fill="rgb(249,43,39)"/><text x="55.4816%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (51,930,939 samples, 12.02%)</title><rect x="66.0290%" y="165" width="12.0239%" height="15" fill="rgb(209,38,44)"/><text x="66.2790%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (50,850,408 samples, 11.77%)</title><rect x="66.2792%" y="149" width="11.7737%" height="15" fill="rgb(236,212,23)"/><text x="66.5292%" y="159.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (3,463,048 samples, 0.80%)</title><rect x="78.0530%" y="165" width="0.8018%" height="15" fill="rgb(242,79,21)"/><text x="78.3030%" y="175.50"></text></g><g><title>codegen_module_perform_lto (107,773,525 samples, 24.95%)</title><rect x="53.9666%" y="181" width="24.9535%" height="15" fill="rgb(211,96,35)"/><text x="54.2166%" y="191.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (12,058,787 samples, 2.79%)</title><rect x="79.0459%" y="165" width="2.7921%" height="15" fill="rgb(253,215,40)"/><text x="79.2959%" y="175.50">ma..</text></g><g><title>expand_crate (12,036,187 samples, 2.79%)</title><rect x="79.0511%" y="149" width="2.7868%" height="15" fill="rgb(211,81,21)"/><text x="79.3011%" y="159.50">ex..</text></g><g><title>late_resolve_crate (1,847,321 samples, 0.43%)</title><rect x="81.9360%" y="149" width="0.4277%" height="15" fill="rgb(208,190,38)"/><text x="82.1860%" y="159.50"></text></g><g><title>configure_and_expand (15,010,200 samples, 3.48%)</title><rect x="78.9202%" y="181" width="3.4754%" height="15" fill="rgb(235,213,38)"/><text x="79.1702%" y="191.50">con..</text></g><g><title>resolve_crate (2,312,016 samples, 0.54%)</title><rect x="81.8603%" y="165" width="0.5353%" height="15" fill="rgb(237,122,38)"/><text x="82.1103%" y="175.50"></text></g><g><title>free_global_ctxt (3,337,688 samples, 0.77%)</title><rect x="82.5293%" y="181" width="0.7728%" height="15" fill="rgb(244,218,35)"/><text x="82.7793%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,157,901 samples, 0.27%)</title><rect x="83.9436%" y="149" width="0.2681%" height="15" fill="rgb(240,68,47)"/><text x="84.1936%" y="159.50"></text></g><g><title>optimized_mir (2,738,154 samples, 0.63%)</title><rect x="83.5841%" y="165" width="0.6340%" height="15" fill="rgb(210,16,53)"/><text x="83.8341%" y="175.50"></text></g><g><title>generate_crate_metadata (3,993,186 samples, 0.92%)</title><rect x="83.3021%" y="181" width="0.9246%" height="15" fill="rgb(235,124,12)"/><text x="83.5521%" y="191.50"></text></g><g><title>hir_lowering (2,918,923 samples, 0.68%)</title><rect x="84.2267%" y="181" width="0.6758%" height="15" fill="rgb(224,169,11)"/><text x="84.4767%" y="191.50"></text></g><g><title>finish_ongoing_codegen (61,773,003 samples, 14.30%)</title><rect x="84.9059%" y="165" width="14.3027%" height="15" fill="rgb(250,166,2)"/><text x="85.1559%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,044,502 samples, 0.24%)</title><rect x="99.2086%" y="165" width="0.2418%" height="15" fill="rgb(242,216,29)"/><text x="99.4586%" y="175.50"></text></g><g><title>link_binary (1,008,031 samples, 0.23%)</title><rect x="99.2171%" y="149" width="0.2334%" height="15" fill="rgb(230,116,27)"/><text x="99.4671%" y="159.50"></text></g><g><title>link_rlib (617,587 samples, 0.14%)</title><rect x="99.3075%" y="133" width="0.1430%" height="15" fill="rgb(228,99,48)"/><text x="99.5575%" y="143.50"></text></g><g><title>link (62,843,205 samples, 14.55%)</title><rect x="84.9025%" y="181" width="14.5505%" height="15" fill="rgb(253,11,6)"/><text x="85.1525%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (1,207,654 samples, 0.28%)</title><rect x="99.6130%" y="181" width="0.2796%" height="15" fill="rgb(247,143,39)"/><text x="99.8630%" y="191.50"></text></g><g><title>all (431,896,650 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (431,896,650 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>