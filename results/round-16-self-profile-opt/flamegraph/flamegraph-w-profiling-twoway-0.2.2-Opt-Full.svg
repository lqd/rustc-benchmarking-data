<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (229,484,322 samples, 19.80%)</title><rect x="0.0916%" y="181" width="19.8050%" height="15" fill="rgb(227,0,7)"/><text x="0.3416%" y="191.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,427,705 samples, 0.12%)</title><rect x="21.6880%" y="53" width="0.1232%" height="15" fill="rgb(217,0,24)"/><text x="21.9380%" y="63.50"></text></g><g><title>resolve_instance (1,797,927 samples, 0.16%)</title><rect x="21.6629%" y="69" width="0.1552%" height="15" fill="rgb(221,193,54)"/><text x="21.9129%" y="79.50"></text></g><g><title>thir_body (1,529,734 samples, 0.13%)</title><rect x="21.8197%" y="69" width="0.1320%" height="15" fill="rgb(248,212,6)"/><text x="22.0697%" y="79.50"></text></g><g><title>mir_const (9,950,667 samples, 0.86%)</title><rect x="21.0947%" y="117" width="0.8588%" height="15" fill="rgb(208,68,35)"/><text x="21.3447%" y="127.50"></text></g><g><title>unsafety_check_result (8,749,796 samples, 0.76%)</title><rect x="21.1983%" y="101" width="0.7551%" height="15" fill="rgb(232,128,0)"/><text x="21.4483%" y="111.50"></text></g><g><title>mir_built (7,836,694 samples, 0.68%)</title><rect x="21.2771%" y="85" width="0.6763%" height="15" fill="rgb(207,160,47)"/><text x="21.5271%" y="95.50"></text></g><g><title>mir_promoted (10,793,118 samples, 0.93%)</title><rect x="21.0246%" y="133" width="0.9315%" height="15" fill="rgb(228,23,34)"/><text x="21.2746%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,174,005 samples, 0.10%)</title><rect x="22.0163%" y="133" width="0.1013%" height="15" fill="rgb(218,30,26)"/><text x="22.2663%" y="143.50"></text></g><g><title>MIR_borrow_checking (25,399,100 samples, 2.19%)</title><rect x="19.9261%" y="165" width="2.1920%" height="15" fill="rgb(220,122,19)"/><text x="20.1761%" y="175.50">M..</text></g><g><title>mir_borrowck (25,316,149 samples, 2.18%)</title><rect x="19.9332%" y="149" width="2.1848%" height="15" fill="rgb(250,228,42)"/><text x="20.1832%" y="159.50">m..</text></g><g><title>misc_checking_1 (1,623,598 samples, 0.14%)</title><rect x="22.1400%" y="165" width="0.1401%" height="15" fill="rgb(240,193,28)"/><text x="22.3900%" y="175.50"></text></g><g><title>misc_checking_2 (1,171,543 samples, 0.10%)</title><rect x="22.2801%" y="165" width="0.1011%" height="15" fill="rgb(216,20,37)"/><text x="22.5301%" y="175.50"></text></g><g><title>death_checking (1,257,584 samples, 0.11%)</title><rect x="22.3953%" y="149" width="0.1085%" height="15" fill="rgb(206,188,39)"/><text x="22.6453%" y="159.50"></text></g><g><title>crate_lints (2,198,435 samples, 0.19%)</title><rect x="22.5040%" y="133" width="0.1897%" height="15" fill="rgb(217,207,13)"/><text x="22.7540%" y="143.50"></text></g><g><title>lint_checking (2,788,691 samples, 0.24%)</title><rect x="22.5038%" y="149" width="0.2407%" height="15" fill="rgb(231,73,38)"/><text x="22.7538%" y="159.50"></text></g><g><title>misc_checking_3 (5,163,217 samples, 0.45%)</title><rect x="22.3812%" y="165" width="0.4456%" height="15" fill="rgb(225,20,46)"/><text x="22.6312%" y="175.50"></text></g><g><title>impl_parent (1,529,885 samples, 0.13%)</title><rect x="22.9879%" y="101" width="0.1320%" height="15" fill="rgb(210,31,41)"/><text x="23.2379%" y="111.50"></text></g><g><title>impl_trait_ref (3,608,792 samples, 0.31%)</title><rect x="23.1199%" y="101" width="0.3114%" height="15" fill="rgb(221,200,47)"/><text x="23.3699%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,142,629 samples, 0.27%)</title><rect x="23.1602%" y="85" width="0.2712%" height="15" fill="rgb(226,26,5)"/><text x="23.4102%" y="95.50"></text></g><g><title>coherent_trait (7,288,221 samples, 0.63%)</title><rect x="22.8330%" y="133" width="0.6290%" height="15" fill="rgb(249,33,26)"/><text x="23.0830%" y="143.50"></text></g><g><title>specialization_graph_of (7,279,361 samples, 0.63%)</title><rect x="22.8337%" y="117" width="0.6282%" height="15" fill="rgb(235,183,28)"/><text x="23.0837%" y="127.50"></text></g><g><title>coherence_checking (7,345,391 samples, 0.63%)</title><rect x="22.8314%" y="149" width="0.6339%" height="15" fill="rgb(221,5,38)"/><text x="23.0814%" y="159.50"></text></g><g><title>generics_of (1,549,410 samples, 0.13%)</title><rect x="26.3598%" y="85" width="0.1337%" height="15" fill="rgb(247,18,42)"/><text x="26.6098%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,216,609 samples, 0.10%)</title><rect x="26.3885%" y="69" width="0.1050%" height="15" fill="rgb(241,131,45)"/><text x="26.6385%" y="79.50"></text></g><g><title>impl_trait_ref (1,472,387 samples, 0.13%)</title><rect x="26.5017%" y="85" width="0.1271%" height="15" fill="rgb(249,31,29)"/><text x="26.7517%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,165,873 samples, 0.10%)</title><rect x="26.5282%" y="69" width="0.1006%" height="15" fill="rgb(225,111,53)"/><text x="26.7782%" y="79.50"></text></g><g><title>evaluate_obligation (9,063,680 samples, 0.78%)</title><rect x="26.0110%" y="101" width="0.7822%" height="15" fill="rgb(238,160,17)"/><text x="26.2610%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,266,944 samples, 0.11%)</title><rect x="26.9876%" y="69" width="0.1093%" height="15" fill="rgb(214,148,48)"/><text x="27.2376%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,255,114 samples, 0.11%)</title><rect x="26.9887%" y="53" width="0.1083%" height="15" fill="rgb(232,36,49)"/><text x="27.2387%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,250,234 samples, 0.11%)</title><rect x="26.9891%" y="37" width="0.1079%" height="15" fill="rgb(209,103,24)"/><text x="27.2391%" y="47.50"></text></g><g><title>opt_const_param_of (2,658,679 samples, 0.23%)</title><rect x="26.8934%" y="101" width="0.2294%" height="15" fill="rgb(229,88,8)"/><text x="27.1434%" y="111.50"></text></g><g><title>typeck (2,641,649 samples, 0.23%)</title><rect x="26.8949%" y="85" width="0.2280%" height="15" fill="rgb(213,181,19)"/><text x="27.1449%" y="95.50"></text></g><g><title>specializes (2,312,236 samples, 0.20%)</title><rect x="27.8753%" y="69" width="0.1996%" height="15" fill="rgb(254,191,54)"/><text x="28.1253%" y="79.50"></text></g><g><title>param_env (1,236,894 samples, 0.11%)</title><rect x="27.9681%" y="53" width="0.1067%" height="15" fill="rgb(241,83,37)"/><text x="28.2181%" y="63.50"></text></g><g><title>evaluate_obligation (7,721,623 samples, 0.67%)</title><rect x="27.4390%" y="85" width="0.6664%" height="15" fill="rgb(233,36,39)"/><text x="27.6890%" y="95.50"></text></g><g><title>typeck (11,131,214 samples, 0.96%)</title><rect x="27.1771%" y="101" width="0.9606%" height="15" fill="rgb(226,3,54)"/><text x="27.4271%" y="111.50"></text></g><g><title>item_bodies_checking (54,188,329 samples, 4.68%)</title><rect x="23.4670%" y="149" width="4.6766%" height="15" fill="rgb(245,192,40)"/><text x="23.7170%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (54,185,099 samples, 4.68%)</title><rect x="23.4672%" y="133" width="4.6763%" height="15" fill="rgb(238,167,29)"/><text x="23.7172%" y="143.50">typec..</text></g><g><title>typeck (54,124,639 samples, 4.67%)</title><rect x="23.4724%" y="117" width="4.6711%" height="15" fill="rgb(232,182,51)"/><text x="23.7224%" y="127.50">typeck</text></g><g><title>type_collecting (1,191,623 samples, 0.10%)</title><rect x="28.1994%" y="149" width="0.1028%" height="15" fill="rgb(231,60,39)"/><text x="28.4494%" y="159.50"></text></g><g><title>collect_mod_item_types (1,184,153 samples, 0.10%)</title><rect x="28.2001%" y="133" width="0.1022%" height="15" fill="rgb(208,69,12)"/><text x="28.4501%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,161,362 samples, 0.10%)</title><rect x="28.3134%" y="133" width="0.1002%" height="15" fill="rgb(235,93,37)"/><text x="28.5634%" y="143.50"></text></g><g><title>check_item_well_formed (1,798,481 samples, 0.16%)</title><rect x="28.4136%" y="133" width="0.1552%" height="15" fill="rgb(213,116,39)"/><text x="28.6636%" y="143.50"></text></g><g><title>analysis (100,584,280 samples, 8.68%)</title><rect x="19.8966%" y="181" width="8.6806%" height="15" fill="rgb(222,207,29)"/><text x="20.1466%" y="191.50">analysis</text></g><g><title>type_check_crate (66,630,855 samples, 5.75%)</title><rect x="22.8268%" y="165" width="5.7504%" height="15" fill="rgb(206,96,30)"/><text x="23.0768%" y="175.50">type_ch..</text></g><g><title>wf_checking (3,180,805 samples, 0.27%)</title><rect x="28.3027%" y="149" width="0.2745%" height="15" fill="rgb(218,138,4)"/><text x="28.5527%" y="159.50"></text></g><g><title>param_env (1,945,965 samples, 0.17%)</title><rect x="30.5978%" y="133" width="0.1679%" height="15" fill="rgb(250,191,14)"/><text x="30.8478%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,652,862 samples, 0.57%)</title><rect x="30.2577%" y="149" width="0.5742%" height="15" fill="rgb(239,60,40)"/><text x="30.5077%" y="159.50"></text></g><g><title>codegen_module (25,993,816 samples, 2.24%)</title><rect x="28.6830%" y="165" width="2.2433%" height="15" fill="rgb(206,27,48)"/><text x="28.9330%" y="175.50">c..</text></g><g><title>metadata_decode_entry_optimized_mir (1,160,963 samples, 0.10%)</title><rect x="31.3981%" y="101" width="0.1002%" height="15" fill="rgb(225,35,8)"/><text x="31.6481%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,600,447 samples, 0.22%)</title><rect x="31.4983%" y="101" width="0.2244%" height="15" fill="rgb(250,213,24)"/><text x="31.7483%" y="111.50"></text></g><g><title>optimized_mir (6,608,166 samples, 0.57%)</title><rect x="31.1619%" y="117" width="0.5703%" height="15" fill="rgb(247,123,22)"/><text x="31.4119%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,462,136 samples, 0.13%)</title><rect x="31.7822%" y="101" width="0.1262%" height="15" fill="rgb(231,138,38)"/><text x="32.0322%" y="111.50"></text></g><g><title>specialization_graph_of (1,929,480 samples, 0.17%)</title><rect x="31.9462%" y="101" width="0.1665%" height="15" fill="rgb(231,145,46)"/><text x="32.1962%" y="111.50"></text></g><g><title>resolve_instance (4,646,046 samples, 0.40%)</title><rect x="31.7322%" y="117" width="0.4010%" height="15" fill="rgb(251,118,11)"/><text x="31.9822%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (14,947,245 samples, 1.29%)</title><rect x="30.9302%" y="133" width="1.2900%" height="15" fill="rgb(217,147,25)"/><text x="31.1802%" y="143.50"></text></g><g><title>monomorphization_collector (14,991,646 samples, 1.29%)</title><rect x="30.9300%" y="149" width="1.2938%" height="15" fill="rgb(247,81,37)"/><text x="31.1800%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (16,547,483 samples, 1.43%)</title><rect x="30.9268%" y="165" width="1.4281%" height="15" fill="rgb(209,12,38)"/><text x="31.1768%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,518,667 samples, 0.13%)</title><rect x="32.2238%" y="149" width="0.1311%" height="15" fill="rgb(227,1,9)"/><text x="32.4738%" y="159.50"></text></g><g><title>codegen_crate (43,827,884 samples, 3.78%)</title><rect x="28.5782%" y="181" width="3.7824%" height="15" fill="rgb(248,47,43)"/><text x="28.8282%" y="191.50">code..</text></g><g><title>codegen_module_optimize (251,231,242 samples, 21.68%)</title><rect x="32.3607%" y="181" width="21.6818%" height="15" fill="rgb(221,10,30)"/><text x="32.6107%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (241,944,121 samples, 20.88%)</title><rect x="33.1622%" y="165" width="20.8803%" height="15" fill="rgb(210,229,1)"/><text x="33.4122%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (113,463,412 samples, 9.79%)</title><rect x="54.5403%" y="165" width="9.7921%" height="15" fill="rgb(222,148,37)"/><text x="54.7903%" y="175.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (140,446,460 samples, 12.12%)</title><rect x="64.3324%" y="165" width="12.1208%" height="15" fill="rgb(234,67,33)"/><text x="64.5824%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (139,242,936 samples, 12.02%)</title><rect x="64.4363%" y="149" width="12.0170%" height="15" fill="rgb(247,98,35)"/><text x="64.6863%" y="159.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (2,534,308 samples, 0.22%)</title><rect x="76.4532%" y="165" width="0.2187%" height="15" fill="rgb(247,138,52)"/><text x="76.7032%" y="175.50"></text></g><g><title>codegen_module_perform_lto (262,548,284 samples, 22.66%)</title><rect x="54.0424%" y="181" width="22.6585%" height="15" fill="rgb(213,79,30)"/><text x="54.2924%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,603,699 samples, 0.22%)</title><rect x="79.0538%" y="133" width="0.2247%" height="15" fill="rgb(246,177,23)"/><text x="79.3038%" y="143.50"></text></g><g><title>macro_expand_crate (29,810,889 samples, 2.57%)</title><rect x="76.7513%" y="165" width="2.5727%" height="15" fill="rgb(230,62,27)"/><text x="77.0013%" y="175.50">ma..</text></g><g><title>expand_crate (29,796,929 samples, 2.57%)</title><rect x="76.7525%" y="149" width="2.5715%" height="15" fill="rgb(216,154,8)"/><text x="77.0025%" y="159.50">ex..</text></g><g><title>late_resolve_crate (2,096,983 samples, 0.18%)</title><rect x="79.3926%" y="149" width="0.1810%" height="15" fill="rgb(244,35,45)"/><text x="79.6426%" y="159.50"></text></g><g><title>configure_and_expand (33,413,659 samples, 2.88%)</title><rect x="76.7009%" y="181" width="2.8837%" height="15" fill="rgb(251,115,12)"/><text x="76.9509%" y="191.50">co..</text></g><g><title>resolve_crate (2,464,607 samples, 0.21%)</title><rect x="79.3719%" y="165" width="0.2127%" height="15" fill="rgb(240,54,50)"/><text x="79.6219%" y="175.50"></text></g><g><title>free_global_ctxt (5,043,865 samples, 0.44%)</title><rect x="79.6765%" y="181" width="0.4353%" height="15" fill="rgb(233,84,52)"/><text x="79.9265%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,635,530 samples, 0.14%)</title><rect x="80.4507%" y="149" width="0.1411%" height="15" fill="rgb(207,117,47)"/><text x="80.7007%" y="159.50"></text></g><g><title>optimized_mir (3,440,749 samples, 0.30%)</title><rect x="80.2961%" y="165" width="0.2969%" height="15" fill="rgb(249,43,39)"/><text x="80.5461%" y="175.50"></text></g><g><title>generate_crate_metadata (5,620,562 samples, 0.49%)</title><rect x="80.1118%" y="181" width="0.4851%" height="15" fill="rgb(209,38,44)"/><text x="80.3618%" y="191.50"></text></g><g><title>hir_lowering (2,796,850 samples, 0.24%)</title><rect x="80.5969%" y="181" width="0.2414%" height="15" fill="rgb(236,212,23)"/><text x="80.8469%" y="191.50"></text></g><g><title>finish_ongoing_codegen (206,928,773 samples, 17.86%)</title><rect x="80.8401%" y="165" width="17.8584%" height="15" fill="rgb(242,79,21)"/><text x="81.0901%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,651,619 samples, 0.23%)</title><rect x="98.6985%" y="165" width="0.2288%" height="15" fill="rgb(211,96,35)"/><text x="98.9485%" y="175.50"></text></g><g><title>link_binary (2,626,218 samples, 0.23%)</title><rect x="98.7007%" y="149" width="0.2266%" height="15" fill="rgb(253,215,40)"/><text x="98.9507%" y="159.50"></text></g><g><title>link_rlib (1,912,001 samples, 0.17%)</title><rect x="98.7623%" y="133" width="0.1650%" height="15" fill="rgb(211,81,21)"/><text x="99.0123%" y="143.50"></text></g><g><title>link (209,614,873 samples, 18.09%)</title><rect x="80.8382%" y="181" width="18.0902%" height="15" fill="rgb(208,190,38)"/><text x="81.0882%" y="191.50">link</text></g><g><title>parse_crate (9,810,008 samples, 0.85%)</title><rect x="98.9284%" y="181" width="0.8466%" height="15" fill="rgb(235,213,38)"/><text x="99.1784%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,854,491 samples, 0.16%)</title><rect x="99.7945%" y="181" width="0.1600%" height="15" fill="rgb(237,122,38)"/><text x="100.0445%" y="191.50"></text></g><g><title>all (1,158,721,082 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,158,721,082 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>