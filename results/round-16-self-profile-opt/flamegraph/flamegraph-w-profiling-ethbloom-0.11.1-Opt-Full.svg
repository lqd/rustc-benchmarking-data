<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (208,331,013 samples, 19.24%)</title><rect x="0.0823%" y="165" width="19.2353%" height="15" fill="rgb(227,0,7)"/><text x="0.3323%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (1,086,515 samples, 0.10%)</title><rect x="21.4878%" y="37" width="0.1003%" height="15" fill="rgb(217,0,24)"/><text x="21.7378%" y="47.50"></text></g><g><title>needs_drop_raw (1,479,001 samples, 0.14%)</title><rect x="21.4519%" y="53" width="0.1366%" height="15" fill="rgb(221,193,54)"/><text x="21.7019%" y="63.50"></text></g><g><title>resolve_instance (2,182,884 samples, 0.20%)</title><rect x="21.5910%" y="53" width="0.2015%" height="15" fill="rgb(248,212,6)"/><text x="21.8410%" y="63.50"></text></g><g><title>thir_body (1,362,948 samples, 0.13%)</title><rect x="21.7956%" y="53" width="0.1258%" height="15" fill="rgb(208,68,35)"/><text x="22.0456%" y="63.50"></text></g><g><title>mir_const (11,115,589 samples, 1.03%)</title><rect x="20.8981%" y="101" width="1.0263%" height="15" fill="rgb(232,128,0)"/><text x="21.1481%" y="111.50"></text></g><g><title>unsafety_check_result (10,059,274 samples, 0.93%)</title><rect x="20.9956%" y="85" width="0.9288%" height="15" fill="rgb(207,160,47)"/><text x="21.2456%" y="95.50"></text></g><g><title>mir_built (9,141,443 samples, 0.84%)</title><rect x="21.0803%" y="69" width="0.8440%" height="15" fill="rgb(228,23,34)"/><text x="21.3303%" y="79.50"></text></g><g><title>mir_promoted (12,694,550 samples, 1.17%)</title><rect x="20.8003%" y="117" width="1.1721%" height="15" fill="rgb(218,30,26)"/><text x="21.0503%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,138,699 samples, 0.29%)</title><rect x="22.1334%" y="117" width="0.2898%" height="15" fill="rgb(220,122,19)"/><text x="22.3834%" y="127.50"></text></g><g><title>MIR_borrow_checking (33,307,118 samples, 3.08%)</title><rect x="19.3493%" y="149" width="3.0753%" height="15" fill="rgb(250,228,42)"/><text x="19.5993%" y="159.50">MIR..</text></g><g><title>mir_borrowck (33,131,844 samples, 3.06%)</title><rect x="19.3655%" y="133" width="3.0591%" height="15" fill="rgb(240,193,28)"/><text x="19.6155%" y="143.50">mir..</text></g><g><title>misc_checking_1 (1,601,648 samples, 0.15%)</title><rect x="22.4687%" y="149" width="0.1479%" height="15" fill="rgb(216,20,37)"/><text x="22.7187%" y="159.50"></text></g><g><title>misc_checking_2 (1,358,765 samples, 0.13%)</title><rect x="22.6166%" y="149" width="0.1255%" height="15" fill="rgb(206,188,39)"/><text x="22.8666%" y="159.50"></text></g><g><title>crate_lints (2,603,649 samples, 0.24%)</title><rect x="22.8034%" y="117" width="0.2404%" height="15" fill="rgb(217,207,13)"/><text x="23.0534%" y="127.50"></text></g><g><title>type_of (1,444,075 samples, 0.13%)</title><rect x="22.9105%" y="101" width="0.1333%" height="15" fill="rgb(231,73,38)"/><text x="23.1605%" y="111.50"></text></g><g><title>lint_checking (3,176,935 samples, 0.29%)</title><rect x="22.8032%" y="133" width="0.2933%" height="15" fill="rgb(225,20,46)"/><text x="23.0532%" y="143.50"></text></g><g><title>misc_checking_3 (5,234,737 samples, 0.48%)</title><rect x="22.7421%" y="149" width="0.4833%" height="15" fill="rgb(210,31,41)"/><text x="22.9921%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,964,902 samples, 0.18%)</title><rect x="24.0331%" y="85" width="0.1814%" height="15" fill="rgb(221,200,47)"/><text x="24.2831%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,951,242 samples, 0.18%)</title><rect x="24.0343%" y="69" width="0.1802%" height="15" fill="rgb(226,26,5)"/><text x="24.2843%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,941,572 samples, 0.18%)</title><rect x="24.0352%" y="53" width="0.1793%" height="15" fill="rgb(249,33,26)"/><text x="24.2852%" y="63.50"></text></g><g><title>impl_parent (3,714,132 samples, 0.34%)</title><rect x="24.2272%" y="85" width="0.3429%" height="15" fill="rgb(235,183,28)"/><text x="24.4772%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,218,975 samples, 0.20%)</title><rect x="24.3653%" y="69" width="0.2049%" height="15" fill="rgb(221,5,38)"/><text x="24.6153%" y="79.50"></text></g><g><title>impl_trait_ref (7,801,941 samples, 0.72%)</title><rect x="24.5701%" y="85" width="0.7204%" height="15" fill="rgb(247,18,42)"/><text x="24.8201%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,293,890 samples, 0.58%)</title><rect x="24.7094%" y="69" width="0.5811%" height="15" fill="rgb(241,131,45)"/><text x="24.9594%" y="79.50"></text></g><g><title>trait_impls_of (1,954,273 samples, 0.18%)</title><rect x="25.4146%" y="85" width="0.1804%" height="15" fill="rgb(249,31,29)"/><text x="25.6646%" y="95.50"></text></g><g><title>coherent_trait (25,631,952 samples, 2.37%)</title><rect x="23.2386%" y="117" width="2.3666%" height="15" fill="rgb(225,111,53)"/><text x="23.4886%" y="127.50">co..</text></g><g><title>specialization_graph_of (24,708,822 samples, 2.28%)</title><rect x="23.3239%" y="101" width="2.2814%" height="15" fill="rgb(238,160,17)"/><text x="23.5739%" y="111.50">s..</text></g><g><title>coherence_checking (25,842,114 samples, 2.39%)</title><rect x="23.2347%" y="133" width="2.3860%" height="15" fill="rgb(214,148,48)"/><text x="23.4847%" y="143.50">co..</text></g><g><title>mir_for_ctfe (1,200,336 samples, 0.11%)</title><rect x="28.7410%" y="37" width="0.1108%" height="15" fill="rgb(232,36,49)"/><text x="28.9910%" y="47.50"></text></g><g><title>eval_to_const_value_raw (3,159,164 samples, 0.29%)</title><rect x="28.5629%" y="85" width="0.2917%" height="15" fill="rgb(209,103,24)"/><text x="28.8129%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,128,274 samples, 0.20%)</title><rect x="28.6581%" y="69" width="0.1965%" height="15" fill="rgb(229,88,8)"/><text x="28.9081%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,084,383 samples, 0.19%)</title><rect x="28.6621%" y="53" width="0.1925%" height="15" fill="rgb(213,181,19)"/><text x="28.9121%" y="63.50"></text></g><g><title>impl_trait_ref (1,518,308 samples, 0.14%)</title><rect x="29.6157%" y="69" width="0.1402%" height="15" fill="rgb(254,191,54)"/><text x="29.8657%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,283,675 samples, 0.12%)</title><rect x="29.6374%" y="53" width="0.1185%" height="15" fill="rgb(241,83,37)"/><text x="29.8874%" y="63.50"></text></g><g><title>predicates_of (1,314,442 samples, 0.12%)</title><rect x="29.7609%" y="69" width="0.1214%" height="15" fill="rgb(233,36,39)"/><text x="30.0109%" y="79.50"></text></g><g><title>specializes (2,597,648 samples, 0.24%)</title><rect x="29.8823%" y="69" width="0.2398%" height="15" fill="rgb(226,3,54)"/><text x="30.1323%" y="79.50"></text></g><g><title>param_env (1,483,724 samples, 0.14%)</title><rect x="29.9852%" y="53" width="0.1370%" height="15" fill="rgb(245,192,40)"/><text x="30.2352%" y="63.50"></text></g><g><title>evaluate_obligation (14,394,377 samples, 1.33%)</title><rect x="28.8546%" y="85" width="1.3290%" height="15" fill="rgb(238,167,29)"/><text x="29.1046%" y="95.50"></text></g><g><title>generics_of (1,198,389 samples, 0.11%)</title><rect x="30.2143%" y="85" width="0.1106%" height="15" fill="rgb(232,182,51)"/><text x="30.4643%" y="95.50"></text></g><g><title>typeck (2,670,411 samples, 0.25%)</title><rect x="30.6337%" y="85" width="0.2466%" height="15" fill="rgb(231,60,39)"/><text x="30.8837%" y="95.50"></text></g><g><title>item_bodies_checking (57,002,427 samples, 5.26%)</title><rect x="25.6247%" y="133" width="5.2630%" height="15" fill="rgb(208,69,12)"/><text x="25.8747%" y="143.50">item_b..</text></g><g><title>typeck_item_bodies (56,998,797 samples, 5.26%)</title><rect x="25.6251%" y="117" width="5.2627%" height="15" fill="rgb(235,93,37)"/><text x="25.8751%" y="127.50">typeck..</text></g><g><title>typeck (56,864,896 samples, 5.25%)</title><rect x="25.6374%" y="101" width="5.2504%" height="15" fill="rgb(213,116,39)"/><text x="25.8874%" y="111.50">typeck</text></g><g><title>evaluate_obligation (1,210,234 samples, 0.11%)</title><rect x="31.0887%" y="85" width="0.1117%" height="15" fill="rgb(222,207,29)"/><text x="31.3387%" y="95.50"></text></g><g><title>typeck (1,686,990 samples, 0.16%)</title><rect x="31.0510%" y="101" width="0.1558%" height="15" fill="rgb(206,96,30)"/><text x="31.3010%" y="111.50"></text></g><g><title>item_types_checking (3,455,548 samples, 0.32%)</title><rect x="30.8878%" y="133" width="0.3191%" height="15" fill="rgb(218,138,4)"/><text x="31.1378%" y="143.50"></text></g><g><title>check_mod_item_types (3,452,928 samples, 0.32%)</title><rect x="30.8880%" y="117" width="0.3188%" height="15" fill="rgb(250,191,14)"/><text x="31.1380%" y="127.50"></text></g><g><title>type_collecting (2,777,500 samples, 0.26%)</title><rect x="31.2070%" y="133" width="0.2564%" height="15" fill="rgb(239,60,40)"/><text x="31.4570%" y="143.50"></text></g><g><title>collect_mod_item_types (2,770,420 samples, 0.26%)</title><rect x="31.2077%" y="117" width="0.2558%" height="15" fill="rgb(206,27,48)"/><text x="31.4577%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,539,819 samples, 0.14%)</title><rect x="31.7289%" y="101" width="0.1422%" height="15" fill="rgb(225,35,8)"/><text x="31.9789%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,528,109 samples, 0.14%)</title><rect x="31.7300%" y="85" width="0.1411%" height="15" fill="rgb(250,213,24)"/><text x="31.9800%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,508,838 samples, 0.14%)</title><rect x="31.7318%" y="69" width="0.1393%" height="15" fill="rgb(247,123,22)"/><text x="31.9818%" y="79.50"></text></g><g><title>check_impl_item_well_formed (6,422,647 samples, 0.59%)</title><rect x="31.4886%" y="117" width="0.5930%" height="15" fill="rgb(231,138,38)"/><text x="31.7386%" y="127.50"></text></g><g><title>analysis (141,083,583 samples, 13.03%)</title><rect x="19.3176%" y="165" width="13.0263%" height="15" fill="rgb(231,145,46)"/><text x="19.5676%" y="175.50">analysis</text></g><g><title>type_check_crate (98,759,246 samples, 9.12%)</title><rect x="23.2254%" y="149" width="9.1185%" height="15" fill="rgb(251,118,11)"/><text x="23.4754%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (9,522,985 samples, 0.88%)</title><rect x="31.4646%" y="133" width="0.8793%" height="15" fill="rgb(217,147,25)"/><text x="31.7146%" y="143.50"></text></g><g><title>check_item_well_formed (2,841,006 samples, 0.26%)</title><rect x="32.0816%" y="117" width="0.2623%" height="15" fill="rgb(247,81,37)"/><text x="32.3316%" y="127.50"></text></g><g><title>param_env (2,518,837 samples, 0.23%)</title><rect x="34.9545%" y="117" width="0.2326%" height="15" fill="rgb(209,12,38)"/><text x="35.2045%" y="127.50"></text></g><g><title>fn_abi_of_instance (8,240,082 samples, 0.76%)</title><rect x="34.5087%" y="133" width="0.7608%" height="15" fill="rgb(227,1,9)"/><text x="34.7587%" y="143.50"></text></g><g><title>codegen_module (31,145,164 samples, 2.88%)</title><rect x="32.4987%" y="149" width="2.8756%" height="15" fill="rgb(248,47,43)"/><text x="32.7487%" y="159.50">co..</text></g><g><title>metadata_decode_entry_optimized_mir (1,255,642 samples, 0.12%)</title><rect x="35.9283%" y="85" width="0.1159%" height="15" fill="rgb(221,10,30)"/><text x="36.1783%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,461,245 samples, 0.23%)</title><rect x="36.0443%" y="85" width="0.2272%" height="15" fill="rgb(210,229,1)"/><text x="36.2943%" y="95.50"></text></g><g><title>optimized_mir (8,056,910 samples, 0.74%)</title><rect x="35.6256%" y="101" width="0.7439%" height="15" fill="rgb(222,148,37)"/><text x="35.8756%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,487,366 samples, 0.23%)</title><rect x="36.4317%" y="85" width="0.2297%" height="15" fill="rgb(234,67,33)"/><text x="36.6817%" y="95.50"></text></g><g><title>resolve_instance (4,092,205 samples, 0.38%)</title><rect x="36.3694%" y="101" width="0.3778%" height="15" fill="rgb(247,98,35)"/><text x="36.6194%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (15,359,229 samples, 1.42%)</title><rect x="35.3780%" y="117" width="1.4181%" height="15" fill="rgb(247,138,52)"/><text x="35.6280%" y="127.50"></text></g><g><title>monomorphization_collector (15,445,600 samples, 1.43%)</title><rect x="35.3778%" y="133" width="1.4261%" height="15" fill="rgb(213,79,30)"/><text x="35.6278%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (1,183,193 samples, 0.11%)</title><rect x="36.8042%" y="117" width="0.1092%" height="15" fill="rgb(246,177,23)"/><text x="37.0542%" y="127.50"></text></g><g><title>symbol_name (1,089,079 samples, 0.10%)</title><rect x="36.8129%" y="101" width="0.1006%" height="15" fill="rgb(230,62,27)"/><text x="37.0629%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (17,104,348 samples, 1.58%)</title><rect x="35.3750%" y="149" width="1.5792%" height="15" fill="rgb(216,154,8)"/><text x="35.6250%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,628,238 samples, 0.15%)</title><rect x="36.8039%" y="133" width="0.1503%" height="15" fill="rgb(244,35,45)"/><text x="37.0539%" y="143.50"></text></g><g><title>codegen_crate (50,019,880 samples, 4.62%)</title><rect x="32.3448%" y="165" width="4.6183%" height="15" fill="rgb(251,115,12)"/><text x="32.5948%" y="175.50">codeg..</text></g><g><title>codegen_module_optimize (212,524,169 samples, 19.62%)</title><rect x="36.9632%" y="165" width="19.6224%" height="15" fill="rgb(240,54,50)"/><text x="37.2132%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (199,382,776 samples, 18.41%)</title><rect x="38.1765%" y="149" width="18.4091%" height="15" fill="rgb(233,84,52)"/><text x="38.4265%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (87,045,366 samples, 8.04%)</title><rect x="57.3072%" y="149" width="8.0369%" height="15" fill="rgb(207,117,47)"/><text x="57.5572%" y="159.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (134,734,343 samples, 12.44%)</title><rect x="65.3441%" y="149" width="12.4401%" height="15" fill="rgb(249,43,39)"/><text x="65.5941%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (132,990,201 samples, 12.28%)</title><rect x="65.5051%" y="133" width="12.2790%" height="15" fill="rgb(209,38,44)"/><text x="65.7551%" y="143.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (4,198,217 samples, 0.39%)</title><rect x="77.7841%" y="149" width="0.3876%" height="15" fill="rgb(236,212,23)"/><text x="78.0341%" y="159.50"></text></g><g><title>codegen_module_perform_lto (234,172,093 samples, 21.62%)</title><rect x="56.5856%" y="165" width="21.6212%" height="15" fill="rgb(242,79,21)"/><text x="56.8356%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_load_macro (2,233,306 samples, 0.21%)</title><rect x="80.0808%" y="117" width="0.2062%" height="15" fill="rgb(211,96,35)"/><text x="80.3308%" y="127.50"></text></g><g><title>macro_expand_crate (25,678,463 samples, 2.37%)</title><rect x="78.2525%" y="149" width="2.3709%" height="15" fill="rgb(253,215,40)"/><text x="78.5025%" y="159.50">ma..</text></g><g><title>expand_crate (25,665,303 samples, 2.37%)</title><rect x="78.2538%" y="133" width="2.3697%" height="15" fill="rgb(211,81,21)"/><text x="78.5038%" y="143.50">ex..</text></g><g><title>metadata_register_crate (3,643,611 samples, 0.34%)</title><rect x="80.2870%" y="117" width="0.3364%" height="15" fill="rgb(208,190,38)"/><text x="80.5370%" y="127.50"></text></g><g><title>metadata_register_crate (1,491,256 samples, 0.14%)</title><rect x="80.4857%" y="101" width="0.1377%" height="15" fill="rgb(235,213,38)"/><text x="80.7357%" y="111.50"></text></g><g><title>late_resolve_crate (2,459,587 samples, 0.23%)</title><rect x="80.6584%" y="133" width="0.2271%" height="15" fill="rgb(237,122,38)"/><text x="80.9084%" y="143.50"></text></g><g><title>configure_and_expand (29,121,480 samples, 2.69%)</title><rect x="78.2067%" y="165" width="2.6888%" height="15" fill="rgb(244,218,35)"/><text x="78.4567%" y="175.50">co..</text></g><g><title>resolve_crate (2,737,460 samples, 0.25%)</title><rect x="80.6428%" y="149" width="0.2528%" height="15" fill="rgb(240,68,47)"/><text x="80.8928%" y="159.50"></text></g><g><title>free_global_ctxt (9,057,300 samples, 0.84%)</title><rect x="80.9505%" y="165" width="0.8363%" height="15" fill="rgb(210,16,53)"/><text x="81.2005%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,059,475 samples, 0.19%)</title><rect x="82.2385%" y="133" width="0.1902%" height="15" fill="rgb(235,124,12)"/><text x="82.4885%" y="143.50"></text></g><g><title>optimized_mir (4,769,275 samples, 0.44%)</title><rect x="81.9985%" y="149" width="0.4403%" height="15" fill="rgb(224,169,11)"/><text x="82.2485%" y="159.50"></text></g><g><title>generate_crate_metadata (7,218,699 samples, 0.67%)</title><rect x="81.7868%" y="165" width="0.6665%" height="15" fill="rgb(250,166,2)"/><text x="82.0368%" y="175.50"></text></g><g><title>hir_lowering (3,377,327 samples, 0.31%)</title><rect x="82.4533%" y="165" width="0.3118%" height="15" fill="rgb(242,216,29)"/><text x="82.7033%" y="175.50"></text></g><g><title>finish_ongoing_codegen (178,416,073 samples, 16.47%)</title><rect x="82.7668%" y="149" width="16.4732%" height="15" fill="rgb(230,116,27)"/><text x="83.0168%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,019,262 samples, 0.19%)</title><rect x="99.2400%" y="149" width="0.1864%" height="15" fill="rgb(228,99,48)"/><text x="99.4900%" y="159.50"></text></g><g><title>link_binary (1,995,472 samples, 0.18%)</title><rect x="99.2422%" y="133" width="0.1842%" height="15" fill="rgb(253,11,6)"/><text x="99.4922%" y="143.50"></text></g><g><title>link_rlib (1,294,114 samples, 0.12%)</title><rect x="99.3070%" y="117" width="0.1195%" height="15" fill="rgb(247,143,39)"/><text x="99.5570%" y="127.50"></text></g><g><title>link (180,468,986 samples, 16.66%)</title><rect x="82.7651%" y="165" width="16.6627%" height="15" fill="rgb(236,97,10)"/><text x="83.0151%" y="175.50">link</text></g><g><title>parse_crate (2,460,907 samples, 0.23%)</title><rect x="99.4279%" y="165" width="0.2272%" height="15" fill="rgb(233,208,19)"/><text x="99.6779%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (3,003,963 samples, 0.28%)</title><rect x="99.6773%" y="165" width="0.2774%" height="15" fill="rgb(216,164,2)"/><text x="99.9273%" y="175.50"></text></g><g><title>all (1,083,068,535 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,083,068,535 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>