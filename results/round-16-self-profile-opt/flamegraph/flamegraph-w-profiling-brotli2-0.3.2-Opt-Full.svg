<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (125,440,571 samples, 15.12%)</title><rect x="0.1137%" y="181" width="15.1245%" height="15" fill="rgb(227,0,7)"/><text x="0.3637%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,109,212 samples, 0.13%)</title><rect x="15.1045%" y="165" width="0.1337%" height="15" fill="rgb(217,0,24)"/><text x="15.3545%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,076,642 samples, 0.13%)</title><rect x="15.1084%" y="149" width="0.1298%" height="15" fill="rgb(221,193,54)"/><text x="15.3584%" y="159.50"></text></g><g><title>needs_drop_raw (1,054,462 samples, 0.13%)</title><rect x="18.1887%" y="69" width="0.1271%" height="15" fill="rgb(248,212,6)"/><text x="18.4387%" y="79.50"></text></g><g><title>is_copy_raw (835,760 samples, 0.10%)</title><rect x="18.2151%" y="53" width="0.1008%" height="15" fill="rgb(208,68,35)"/><text x="18.4651%" y="63.50"></text></g><g><title>thir_body (1,604,969 samples, 0.19%)</title><rect x="18.4004%" y="69" width="0.1935%" height="15" fill="rgb(232,128,0)"/><text x="18.6504%" y="79.50"></text></g><g><title>mir_const (10,150,746 samples, 1.22%)</title><rect x="17.3725%" y="117" width="1.2239%" height="15" fill="rgb(207,160,47)"/><text x="17.6225%" y="127.50"></text></g><g><title>unsafety_check_result (8,573,124 samples, 1.03%)</title><rect x="17.5627%" y="101" width="1.0337%" height="15" fill="rgb(228,23,34)"/><text x="17.8127%" y="111.50"></text></g><g><title>mir_built (7,576,064 samples, 0.91%)</title><rect x="17.6829%" y="85" width="0.9135%" height="15" fill="rgb(218,30,26)"/><text x="17.9329%" y="95.50"></text></g><g><title>mir_promoted (11,395,785 samples, 1.37%)</title><rect x="17.2330%" y="133" width="1.3740%" height="15" fill="rgb(220,122,19)"/><text x="17.4830%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,560,237 samples, 0.19%)</title><rect x="18.7120%" y="133" width="0.1881%" height="15" fill="rgb(250,228,42)"/><text x="18.9620%" y="143.50"></text></g><g><title>MIR_borrow_checking (29,621,295 samples, 3.57%)</title><rect x="15.3299%" y="165" width="3.5715%" height="15" fill="rgb(240,193,28)"/><text x="15.5799%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (29,444,404 samples, 3.55%)</title><rect x="15.3512%" y="149" width="3.5502%" height="15" fill="rgb(216,20,37)"/><text x="15.6012%" y="159.50">mir_..</text></g><g><title>codegen_fn_attrs (879,051 samples, 0.11%)</title><rect x="19.0430%" y="133" width="0.1060%" height="15" fill="rgb(206,188,39)"/><text x="19.2930%" y="143.50"></text></g><g><title>check_mod_attrs (1,517,466 samples, 0.18%)</title><rect x="18.9661%" y="149" width="0.1830%" height="15" fill="rgb(217,207,13)"/><text x="19.2161%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,338,683 samples, 0.16%)</title><rect x="19.2173%" y="149" width="0.1614%" height="15" fill="rgb(231,73,38)"/><text x="19.4673%" y="159.50"></text></g><g><title>misc_checking_1 (3,591,108 samples, 0.43%)</title><rect x="18.9613%" y="165" width="0.4330%" height="15" fill="rgb(225,20,46)"/><text x="19.2113%" y="175.50"></text></g><g><title>misc_checking_2 (1,365,384 samples, 0.16%)</title><rect x="19.3943%" y="165" width="0.1646%" height="15" fill="rgb(210,31,41)"/><text x="19.6443%" y="175.50"></text></g><g><title>crate_lints (2,515,566 samples, 0.30%)</title><rect x="19.6618%" y="133" width="0.3033%" height="15" fill="rgb(221,200,47)"/><text x="19.9118%" y="143.50"></text></g><g><title>type_of (1,077,620 samples, 0.13%)</title><rect x="19.8352%" y="117" width="0.1299%" height="15" fill="rgb(226,26,5)"/><text x="20.0852%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (848,229 samples, 0.10%)</title><rect x="19.8629%" y="101" width="0.1023%" height="15" fill="rgb(249,33,26)"/><text x="20.1129%" y="111.50"></text></g><g><title>lint_checking (3,112,072 samples, 0.38%)</title><rect x="19.6616%" y="149" width="0.3752%" height="15" fill="rgb(235,183,28)"/><text x="19.9116%" y="159.50"></text></g><g><title>privacy_checking_modules (1,052,032 samples, 0.13%)</title><rect x="20.0790%" y="149" width="0.1268%" height="15" fill="rgb(221,5,38)"/><text x="20.3290%" y="159.50"></text></g><g><title>check_mod_privacy (1,047,612 samples, 0.13%)</title><rect x="20.0795%" y="133" width="0.1263%" height="15" fill="rgb(247,18,42)"/><text x="20.3295%" y="143.50"></text></g><g><title>misc_checking_3 (5,377,957 samples, 0.65%)</title><rect x="19.5589%" y="165" width="0.6484%" height="15" fill="rgb(241,131,45)"/><text x="19.8089%" y="175.50"></text></g><g><title>impl_parent (2,857,428 samples, 0.34%)</title><rect x="20.8789%" y="101" width="0.3445%" height="15" fill="rgb(249,31,29)"/><text x="21.1289%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,603,923 samples, 0.19%)</title><rect x="21.0301%" y="85" width="0.1934%" height="15" fill="rgb(225,111,53)"/><text x="21.2801%" y="95.50"></text></g><g><title>impl_trait_ref (6,692,007 samples, 0.81%)</title><rect x="21.2234%" y="101" width="0.8069%" height="15" fill="rgb(238,160,17)"/><text x="21.4734%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,443,447 samples, 0.66%)</title><rect x="21.3740%" y="85" width="0.6563%" height="15" fill="rgb(214,148,48)"/><text x="21.6240%" y="95.50"></text></g><g><title>trait_impls_of (1,166,622 samples, 0.14%)</title><rect x="22.0332%" y="101" width="0.1407%" height="15" fill="rgb(232,36,49)"/><text x="22.2832%" y="111.50"></text></g><g><title>coherent_trait (16,205,292 samples, 1.95%)</title><rect x="20.2201%" y="133" width="1.9539%" height="15" fill="rgb(209,103,24)"/><text x="20.4701%" y="143.50">c..</text></g><g><title>specialization_graph_of (15,861,839 samples, 1.91%)</title><rect x="20.2615%" y="117" width="1.9125%" height="15" fill="rgb(229,88,8)"/><text x="20.5115%" y="127.50">s..</text></g><g><title>coherence_checking (16,331,564 samples, 1.97%)</title><rect x="20.2172%" y="149" width="1.9691%" height="15" fill="rgb(213,181,19)"/><text x="20.4672%" y="159.50">c..</text></g><g><title>associated_items (963,171 samples, 0.12%)</title><rect x="25.9223%" y="101" width="0.1161%" height="15" fill="rgb(254,191,54)"/><text x="26.1723%" y="111.50"></text></g><g><title>evaluate_obligation (2,868,182 samples, 0.35%)</title><rect x="26.1150%" y="101" width="0.3458%" height="15" fill="rgb(241,83,37)"/><text x="26.3650%" y="111.50"></text></g><g><title>item_bodies_checking (37,342,436 samples, 4.50%)</title><rect x="22.1974%" y="149" width="4.5024%" height="15" fill="rgb(233,36,39)"/><text x="22.4474%" y="159.50">item_..</text></g><g><title>typeck_item_bodies (37,339,516 samples, 4.50%)</title><rect x="22.1977%" y="133" width="4.5021%" height="15" fill="rgb(226,3,54)"/><text x="22.4477%" y="143.50">typec..</text></g><g><title>typeck (37,225,235 samples, 4.49%)</title><rect x="22.2115%" y="117" width="4.4883%" height="15" fill="rgb(245,192,40)"/><text x="22.4615%" y="127.50">typeck</text></g><g><title>evaluate_obligation (1,431,465 samples, 0.17%)</title><rect x="26.8621%" y="101" width="0.1726%" height="15" fill="rgb(238,167,29)"/><text x="27.1121%" y="111.50"></text></g><g><title>item_types_checking (3,019,123 samples, 0.36%)</title><rect x="26.6998%" y="149" width="0.3640%" height="15" fill="rgb(232,182,51)"/><text x="26.9498%" y="159.50"></text></g><g><title>check_mod_item_types (3,013,483 samples, 0.36%)</title><rect x="26.7005%" y="133" width="0.3633%" height="15" fill="rgb(231,60,39)"/><text x="26.9505%" y="143.50"></text></g><g><title>typeck (1,976,322 samples, 0.24%)</title><rect x="26.8255%" y="117" width="0.2383%" height="15" fill="rgb(208,69,12)"/><text x="27.0755%" y="127.50"></text></g><g><title>mir_borrowck (1,205,172 samples, 0.15%)</title><rect x="27.3360%" y="37" width="0.1453%" height="15" fill="rgb(235,93,37)"/><text x="27.5860%" y="47.50"></text></g><g><title>mir_for_ctfe (1,729,068 samples, 0.21%)</title><rect x="27.2734%" y="69" width="0.2085%" height="15" fill="rgb(213,116,39)"/><text x="27.5234%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,605,368 samples, 0.19%)</title><rect x="27.2884%" y="53" width="0.1936%" height="15" fill="rgb(222,207,29)"/><text x="27.5384%" y="63.50"></text></g><g><title>eval_to_const_value_raw (4,007,574 samples, 0.48%)</title><rect x="27.1692%" y="117" width="0.4832%" height="15" fill="rgb(206,96,30)"/><text x="27.4192%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,984,344 samples, 0.48%)</title><rect x="27.1720%" y="101" width="0.4804%" height="15" fill="rgb(218,138,4)"/><text x="27.4220%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,968,264 samples, 0.48%)</title><rect x="27.1740%" y="85" width="0.4785%" height="15" fill="rgb(250,191,14)"/><text x="27.4240%" y="95.50"></text></g><g><title>typeck (995,531 samples, 0.12%)</title><rect x="27.5324%" y="69" width="0.1200%" height="15" fill="rgb(239,60,40)"/><text x="27.7824%" y="79.50"></text></g><g><title>predicates_of (1,888,371 samples, 0.23%)</title><rect x="27.8949%" y="117" width="0.2277%" height="15" fill="rgb(206,27,48)"/><text x="28.1449%" y="127.50"></text></g><g><title>predicates_defined_on (1,713,909 samples, 0.21%)</title><rect x="27.9160%" y="101" width="0.2066%" height="15" fill="rgb(225,35,8)"/><text x="28.1660%" y="111.50"></text></g><g><title>type_collecting (9,002,535 samples, 1.09%)</title><rect x="27.0641%" y="149" width="1.0854%" height="15" fill="rgb(250,213,24)"/><text x="27.3141%" y="159.50"></text></g><g><title>collect_mod_item_types (8,981,495 samples, 1.08%)</title><rect x="27.0667%" y="133" width="1.0829%" height="15" fill="rgb(247,123,22)"/><text x="27.3167%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,386,631 samples, 0.53%)</title><rect x="28.1843%" y="133" width="0.5289%" height="15" fill="rgb(231,138,38)"/><text x="28.4343%" y="143.50"></text></g><g><title>analysis (114,692,667 samples, 13.83%)</title><rect x="15.2382%" y="181" width="13.8286%" height="15" fill="rgb(231,145,46)"/><text x="15.4882%" y="191.50">analysis</text></g><g><title>type_check_crate (73,479,550 samples, 8.86%)</title><rect x="20.2074%" y="165" width="8.8595%" height="15" fill="rgb(251,118,11)"/><text x="20.4574%" y="175.50">type_check_cr..</text></g><g><title>wf_checking (7,600,370 samples, 0.92%)</title><rect x="28.1505%" y="149" width="0.9164%" height="15" fill="rgb(217,147,25)"/><text x="28.4005%" y="159.50"></text></g><g><title>check_item_well_formed (2,933,357 samples, 0.35%)</title><rect x="28.7132%" y="133" width="0.3537%" height="15" fill="rgb(247,81,37)"/><text x="28.9632%" y="143.50"></text></g><g><title>layout_of (1,427,147 samples, 0.17%)</title><rect x="31.6777%" y="133" width="0.1721%" height="15" fill="rgb(209,12,38)"/><text x="31.9277%" y="143.50"></text></g><g><title>predicates_of (863,102 samples, 0.10%)</title><rect x="32.0131%" y="117" width="0.1041%" height="15" fill="rgb(227,1,9)"/><text x="32.2631%" y="127.50"></text></g><g><title>param_env (2,221,107 samples, 0.27%)</title><rect x="31.8497%" y="133" width="0.2678%" height="15" fill="rgb(248,47,43)"/><text x="32.0997%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,126,741 samples, 0.86%)</title><rect x="31.2927%" y="149" width="0.8593%" height="15" fill="rgb(221,10,30)"/><text x="31.5427%" y="159.50"></text></g><g><title>codegen_module (24,540,499 samples, 2.96%)</title><rect x="29.3262%" y="165" width="2.9589%" height="15" fill="rgb(210,229,1)"/><text x="29.5762%" y="175.50">cod..</text></g><g><title>codegen_fn_attrs (1,044,844 samples, 0.13%)</title><rect x="32.4000%" y="117" width="0.1260%" height="15" fill="rgb(222,148,37)"/><text x="32.6500%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (882,567 samples, 0.11%)</title><rect x="32.8233%" y="101" width="0.1064%" height="15" fill="rgb(234,67,33)"/><text x="33.0733%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,369,432 samples, 0.17%)</title><rect x="32.9297%" y="101" width="0.1651%" height="15" fill="rgb(247,98,35)"/><text x="33.1797%" y="111.50"></text></g><g><title>optimized_mir (4,634,248 samples, 0.56%)</title><rect x="32.5875%" y="117" width="0.5588%" height="15" fill="rgb(247,138,52)"/><text x="32.8375%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,220,553 samples, 0.15%)</title><rect x="33.2007%" y="101" width="0.1472%" height="15" fill="rgb(213,79,30)"/><text x="33.4507%" y="111.50"></text></g><g><title>resolve_instance (2,466,543 samples, 0.30%)</title><rect x="33.1463%" y="117" width="0.2974%" height="15" fill="rgb(246,177,23)"/><text x="33.3963%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (10,340,721 samples, 1.25%)</title><rect x="32.2899%" y="133" width="1.2468%" height="15" fill="rgb(230,62,27)"/><text x="32.5399%" y="143.50"></text></g><g><title>monomorphization_collector (10,409,291 samples, 1.26%)</title><rect x="32.2896%" y="149" width="1.2551%" height="15" fill="rgb(216,154,8)"/><text x="32.5396%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (864,919 samples, 0.10%)</title><rect x="33.5451%" y="133" width="0.1043%" height="15" fill="rgb(244,35,45)"/><text x="33.7951%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (11,651,144 samples, 1.40%)</title><rect x="32.2862%" y="165" width="1.4048%" height="15" fill="rgb(251,115,12)"/><text x="32.5362%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,213,353 samples, 0.15%)</title><rect x="33.5447%" y="149" width="0.1463%" height="15" fill="rgb(240,54,50)"/><text x="33.7947%" y="159.50"></text></g><g><title>codegen_crate (38,406,857 samples, 4.63%)</title><rect x="29.0679%" y="181" width="4.6308%" height="15" fill="rgb(233,84,52)"/><text x="29.3179%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (131,886,289 samples, 15.90%)</title><rect x="33.6986%" y="181" width="15.9017%" height="15" fill="rgb(207,117,47)"/><text x="33.9486%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (116,318,324 samples, 14.02%)</title><rect x="35.5757%" y="165" width="14.0247%" height="15" fill="rgb(249,43,39)"/><text x="35.8257%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (79,969,013 samples, 9.64%)</title><rect x="51.1902%" y="165" width="9.6420%" height="15" fill="rgb(209,38,44)"/><text x="51.4402%" y="175.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (143,448,840 samples, 17.30%)</title><rect x="60.8322%" y="165" width="17.2958%" height="15" fill="rgb(236,212,23)"/><text x="61.0822%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (141,539,003 samples, 17.07%)</title><rect x="61.0625%" y="149" width="17.0655%" height="15" fill="rgb(242,79,21)"/><text x="61.3125%" y="159.50">LLVM_module_codegen_emit_o..</text></g><g><title>LLVM_thin_lto_import (7,301,449 samples, 0.88%)</title><rect x="78.1280%" y="165" width="0.8803%" height="15" fill="rgb(211,96,35)"/><text x="78.3780%" y="175.50"></text></g><g><title>codegen_module_perform_lto (244,601,800 samples, 29.49%)</title><rect x="49.6003%" y="181" width="29.4920%" height="15" fill="rgb(253,215,40)"/><text x="49.8503%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,458,457 samples, 0.30%)</title><rect x="82.9948%" y="133" width="0.2964%" height="15" fill="rgb(211,81,21)"/><text x="83.2448%" y="143.50"></text></g><g><title>metadata_register_crate (879,568 samples, 0.11%)</title><rect x="83.1852%" y="117" width="0.1061%" height="15" fill="rgb(208,190,38)"/><text x="83.4352%" y="127.50"></text></g><g><title>macro_expand_crate (34,663,668 samples, 4.18%)</title><rect x="79.1750%" y="165" width="4.1794%" height="15" fill="rgb(235,213,38)"/><text x="79.4250%" y="175.50">macro..</text></g><g><title>expand_crate (34,643,418 samples, 4.18%)</title><rect x="79.1774%" y="149" width="4.1770%" height="15" fill="rgb(237,122,38)"/><text x="79.4274%" y="159.50">expan..</text></g><g><title>late_resolve_crate (5,881,962 samples, 0.71%)</title><rect x="83.4275%" y="149" width="0.7092%" height="15" fill="rgb(244,218,35)"/><text x="83.6775%" y="159.50"></text></g><g><title>configure_and_expand (42,132,887 samples, 5.08%)</title><rect x="79.0923%" y="181" width="5.0800%" height="15" fill="rgb(240,68,47)"/><text x="79.3423%" y="191.50">config..</text></g><g><title>resolve_crate (6,682,251 samples, 0.81%)</title><rect x="83.3666%" y="165" width="0.8057%" height="15" fill="rgb(210,16,53)"/><text x="83.6166%" y="175.50"></text></g><g><title>early_lint_checks (1,120,112 samples, 0.14%)</title><rect x="84.2297%" y="181" width="0.1351%" height="15" fill="rgb(235,124,12)"/><text x="84.4797%" y="191.50"></text></g><g><title>free_global_ctxt (6,368,577 samples, 0.77%)</title><rect x="84.3648%" y="181" width="0.7679%" height="15" fill="rgb(224,169,11)"/><text x="84.6148%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,594,308 samples, 0.55%)</title><rect x="85.9048%" y="149" width="0.5539%" height="15" fill="rgb(250,166,2)"/><text x="86.1548%" y="159.50"></text></g><g><title>optimized_mir (8,627,125 samples, 1.04%)</title><rect x="85.4203%" y="165" width="1.0402%" height="15" fill="rgb(242,216,29)"/><text x="85.6703%" y="175.50"></text></g><g><title>generate_crate_metadata (11,254,969 samples, 1.36%)</title><rect x="85.1327%" y="181" width="1.3570%" height="15" fill="rgb(230,116,27)"/><text x="85.3827%" y="191.50"></text></g><g><title>hir_lowering (8,040,376 samples, 0.97%)</title><rect x="86.4897%" y="181" width="0.9694%" height="15" fill="rgb(228,99,48)"/><text x="86.7397%" y="191.50"></text></g><g><title>finish_ongoing_codegen (97,788,349 samples, 11.79%)</title><rect x="87.4615%" y="165" width="11.7905%" height="15" fill="rgb(253,11,6)"/><text x="87.7115%" y="175.50">finish_ongoing_co..</text></g><g><title>link_crate (2,052,571 samples, 0.25%)</title><rect x="99.2520%" y="165" width="0.2475%" height="15" fill="rgb(247,143,39)"/><text x="99.5020%" y="175.50"></text></g><g><title>link_binary (2,028,251 samples, 0.24%)</title><rect x="99.2549%" y="149" width="0.2445%" height="15" fill="rgb(236,97,10)"/><text x="99.5049%" y="159.50"></text></g><g><title>link_rlib (1,197,223 samples, 0.14%)</title><rect x="99.3551%" y="133" width="0.1444%" height="15" fill="rgb(233,208,19)"/><text x="99.6051%" y="143.50"></text></g><g><title>link (99,869,950 samples, 12.04%)</title><rect x="87.4591%" y="181" width="12.0415%" height="15" fill="rgb(216,164,2)"/><text x="87.7091%" y="191.50">link</text></g><g><title>parse_crate (895,589 samples, 0.11%)</title><rect x="99.5006%" y="181" width="0.1080%" height="15" fill="rgb(220,129,5)"/><text x="99.7506%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,378,225 samples, 0.29%)</title><rect x="99.6512%" y="181" width="0.2867%" height="15" fill="rgb(242,17,10)"/><text x="99.9012%" y="191.50"></text></g><g><title>all (829,384,706 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (829,384,706 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>