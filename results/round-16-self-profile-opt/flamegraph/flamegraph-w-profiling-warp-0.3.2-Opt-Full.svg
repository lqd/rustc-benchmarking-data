<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,155,293,864 samples, 27.21%)</title><rect x="0.0117%" y="325" width="27.2124%" height="15" fill="rgb(227,0,7)"/><text x="0.2617%" y="335.50">LLVM_passes</text></g><g><title>mir_const (101,187,783 samples, 0.45%)</title><rect x="28.2240%" y="261" width="0.4473%" height="15" fill="rgb(217,0,24)"/><text x="28.4740%" y="271.50"></text></g><g><title>unsafety_check_result (91,175,357 samples, 0.40%)</title><rect x="28.2683%" y="245" width="0.4031%" height="15" fill="rgb(221,193,54)"/><text x="28.5183%" y="255.50"></text></g><g><title>mir_built (83,506,404 samples, 0.37%)</title><rect x="28.3022%" y="229" width="0.3692%" height="15" fill="rgb(248,212,6)"/><text x="28.5522%" y="239.50"></text></g><g><title>mir_promoted (129,696,500 samples, 0.57%)</title><rect x="28.1755%" y="277" width="0.5734%" height="15" fill="rgb(208,68,35)"/><text x="28.4255%" y="287.50"></text></g><g><title>type_op_prove_predicate (48,190,765 samples, 0.21%)</title><rect x="28.8737%" y="277" width="0.2131%" height="15" fill="rgb(232,128,0)"/><text x="29.1237%" y="287.50"></text></g><g><title>MIR_borrow_checking (416,444,910 samples, 1.84%)</title><rect x="27.2457%" y="309" width="1.8411%" height="15" fill="rgb(207,160,47)"/><text x="27.4957%" y="319.50">M..</text></g><g><title>mir_borrowck (413,926,284 samples, 1.83%)</title><rect x="27.2568%" y="293" width="1.8300%" height="15" fill="rgb(228,23,34)"/><text x="27.5068%" y="303.50">m..</text></g><g><title>misc_checking_1 (23,132,187 samples, 0.10%)</title><rect x="29.1454%" y="309" width="0.1023%" height="15" fill="rgb(218,30,26)"/><text x="29.3954%" y="319.50"></text></g><g><title>misc_checking_2 (36,786,865 samples, 0.16%)</title><rect x="29.2477%" y="309" width="0.1626%" height="15" fill="rgb(220,122,19)"/><text x="29.4977%" y="319.50"></text></g><g><title>crate_lints (45,131,556 samples, 0.20%)</title><rect x="29.4953%" y="277" width="0.1995%" height="15" fill="rgb(250,228,42)"/><text x="29.7453%" y="287.50"></text></g><g><title>lint_checking (59,979,495 samples, 0.27%)</title><rect x="29.4953%" y="293" width="0.2652%" height="15" fill="rgb(240,193,28)"/><text x="29.7453%" y="303.50"></text></g><g><title>privacy_checking_modules (29,211,843 samples, 0.13%)</title><rect x="29.8183%" y="293" width="0.1291%" height="15" fill="rgb(216,20,37)"/><text x="30.0683%" y="303.50"></text></g><g><title>check_mod_privacy (29,167,623 samples, 0.13%)</title><rect x="29.8185%" y="277" width="0.1289%" height="15" fill="rgb(206,188,39)"/><text x="30.0685%" y="287.50"></text></g><g><title>misc_checking_3 (121,753,461 samples, 0.54%)</title><rect x="29.4103%" y="309" width="0.5383%" height="15" fill="rgb(217,207,13)"/><text x="29.6603%" y="319.50"></text></g><g><title>coherent_trait (37,946,920 samples, 0.17%)</title><rect x="29.9581%" y="277" width="0.1678%" height="15" fill="rgb(231,73,38)"/><text x="30.2081%" y="287.50"></text></g><g><title>specialization_graph_of (36,523,011 samples, 0.16%)</title><rect x="29.9644%" y="261" width="0.1615%" height="15" fill="rgb(225,20,46)"/><text x="30.2144%" y="271.50"></text></g><g><title>coherence_checking (39,056,943 samples, 0.17%)</title><rect x="29.9578%" y="293" width="0.1727%" height="15" fill="rgb(210,31,41)"/><text x="30.2078%" y="303.50"></text></g><g><title>evaluate_obligation (28,814,252 samples, 0.13%)</title><rect x="31.3279%" y="245" width="0.1274%" height="15" fill="rgb(221,200,47)"/><text x="31.5779%" y="255.50"></text></g><g><title>typeck (115,752,360 samples, 0.51%)</title><rect x="31.5037%" y="245" width="0.5117%" height="15" fill="rgb(226,26,5)"/><text x="31.7537%" y="255.50"></text></g><g><title>item_bodies_checking (425,585,991 samples, 1.88%)</title><rect x="30.1352%" y="293" width="1.8815%" height="15" fill="rgb(249,33,26)"/><text x="30.3852%" y="303.50">i..</text></g><g><title>typeck_item_bodies (425,581,771 samples, 1.88%)</title><rect x="30.1352%" y="277" width="1.8815%" height="15" fill="rgb(235,183,28)"/><text x="30.3852%" y="287.50">t..</text></g><g><title>typeck (423,220,809 samples, 1.87%)</title><rect x="30.1457%" y="261" width="1.8710%" height="15" fill="rgb(221,5,38)"/><text x="30.3957%" y="271.50">t..</text></g><g><title>mir_borrowck (63,412,683 samples, 0.28%)</title><rect x="33.1173%" y="213" width="0.2803%" height="15" fill="rgb(247,18,42)"/><text x="33.3673%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (31,002,069 samples, 0.14%)</title><rect x="33.4423%" y="213" width="0.1371%" height="15" fill="rgb(241,131,45)"/><text x="33.6923%" y="223.50"></text></g><g><title>normalize_projection_ty (28,258,672 samples, 0.12%)</title><rect x="33.4544%" y="197" width="0.1249%" height="15" fill="rgb(249,31,29)"/><text x="33.7044%" y="207.50"></text></g><g><title>type_op_prove_predicate (75,085,072 samples, 0.33%)</title><rect x="33.6606%" y="213" width="0.3319%" height="15" fill="rgb(225,111,53)"/><text x="33.9106%" y="223.50"></text></g><g><title>mir_borrowck (281,753,379 samples, 1.25%)</title><rect x="32.7470%" y="229" width="1.2456%" height="15" fill="rgb(238,160,17)"/><text x="32.9970%" y="239.50"></text></g><g><title>codegen_fulfill_obligation (34,520,677 samples, 0.15%)</title><rect x="34.0588%" y="149" width="0.1526%" height="15" fill="rgb(214,148,48)"/><text x="34.3088%" y="159.50"></text></g><g><title>resolve_instance (38,867,668 samples, 0.17%)</title><rect x="34.0554%" y="165" width="0.1718%" height="15" fill="rgb(232,36,49)"/><text x="34.3054%" y="175.50"></text></g><g><title>mir_built (40,944,594 samples, 0.18%)</title><rect x="36.7249%" y="53" width="0.1810%" height="15" fill="rgb(209,103,24)"/><text x="36.9749%" y="63.50"></text></g><g><title>typeck (39,982,902 samples, 0.18%)</title><rect x="36.7291%" y="37" width="0.1768%" height="15" fill="rgb(229,88,8)"/><text x="36.9791%" y="47.50"></text></g><g><title>mir_const (45,116,092 samples, 0.20%)</title><rect x="36.7239%" y="85" width="0.1995%" height="15" fill="rgb(213,181,19)"/><text x="36.9739%" y="95.50"></text></g><g><title>unsafety_check_result (44,952,071 samples, 0.20%)</title><rect x="36.7246%" y="69" width="0.1987%" height="15" fill="rgb(254,191,54)"/><text x="36.9746%" y="79.50"></text></g><g><title>mir_promoted (45,250,147 samples, 0.20%)</title><rect x="36.7233%" y="101" width="0.2000%" height="15" fill="rgb(241,83,37)"/><text x="36.9733%" y="111.50"></text></g><g><title>evaluate_obligation (144,197,944 samples, 0.64%)</title><rect x="36.3034%" y="149" width="0.6375%" height="15" fill="rgb(233,36,39)"/><text x="36.5534%" y="159.50"></text></g><g><title>type_of (69,472,062 samples, 0.31%)</title><rect x="36.6338%" y="133" width="0.3071%" height="15" fill="rgb(226,3,54)"/><text x="36.8838%" y="143.50"></text></g><g><title>mir_borrowck (69,235,717 samples, 0.31%)</title><rect x="36.6348%" y="117" width="0.3061%" height="15" fill="rgb(245,192,40)"/><text x="36.8848%" y="127.50"></text></g><g><title>mir_built (690,933,857 samples, 3.05%)</title><rect x="34.0159%" y="181" width="3.0546%" height="15" fill="rgb(238,167,29)"/><text x="34.2659%" y="191.50">mir..</text></g><g><title>typeck (640,719,825 samples, 2.83%)</title><rect x="34.2379%" y="165" width="2.8326%" height="15" fill="rgb(232,182,51)"/><text x="34.4879%" y="175.50">ty..</text></g><g><title>mir_built (28,668,754 samples, 0.13%)</title><rect x="37.0865%" y="165" width="0.1267%" height="15" fill="rgb(231,60,39)"/><text x="37.3365%" y="175.50"></text></g><g><title>mir_const (741,685,164 samples, 3.28%)</title><rect x="33.9981%" y="213" width="3.2790%" height="15" fill="rgb(208,69,12)"/><text x="34.2481%" y="223.50">mir..</text></g><g><title>unsafety_check_result (738,705,348 samples, 3.27%)</title><rect x="34.0113%" y="197" width="3.2658%" height="15" fill="rgb(235,93,37)"/><text x="34.2613%" y="207.50">uns..</text></g><g><title>unsafety_check_result (46,730,397 samples, 0.21%)</title><rect x="37.0705%" y="181" width="0.2066%" height="15" fill="rgb(213,116,39)"/><text x="37.3205%" y="191.50"></text></g><g><title>mir_promoted (743,131,265 samples, 3.29%)</title><rect x="33.9926%" y="229" width="3.2854%" height="15" fill="rgb(222,207,29)"/><text x="34.2426%" y="239.50">mir..</text></g><g><title>type_op_normalize_predicate (35,365,266 samples, 0.16%)</title><rect x="37.2834%" y="229" width="0.1563%" height="15" fill="rgb(206,96,30)"/><text x="37.5334%" y="239.50"></text></g><g><title>normalize_projection_ty (31,345,735 samples, 0.14%)</title><rect x="37.3012%" y="213" width="0.1386%" height="15" fill="rgb(218,138,4)"/><text x="37.5512%" y="223.50"></text></g><g><title>type_of (1,200,296,293 samples, 5.31%)</title><rect x="32.4037%" y="261" width="5.3065%" height="15" fill="rgb(250,191,14)"/><text x="32.6537%" y="271.50">type_of</text></g><g><title>mir_borrowck (1,199,925,969 samples, 5.30%)</title><rect x="32.4054%" y="245" width="5.3048%" height="15" fill="rgb(239,60,40)"/><text x="32.6554%" y="255.50">mir_bo..</text></g><g><title>type_op_prove_predicate (60,400,763 samples, 0.27%)</title><rect x="37.4432%" y="229" width="0.2670%" height="15" fill="rgb(206,27,48)"/><text x="37.6932%" y="239.50"></text></g><g><title>item_types_checking (1,335,726,095 samples, 5.91%)</title><rect x="32.0167%" y="293" width="5.9052%" height="15" fill="rgb(225,35,8)"/><text x="32.2667%" y="303.50">item_typ..</text></g><g><title>check_mod_item_types (1,335,617,044 samples, 5.90%)</title><rect x="32.0172%" y="277" width="5.9047%" height="15" fill="rgb(250,213,24)"/><text x="32.2672%" y="287.50">check_mo..</text></g><g><title>typeck (47,887,977 samples, 0.21%)</title><rect x="37.7102%" y="261" width="0.2117%" height="15" fill="rgb(247,123,22)"/><text x="37.9602%" y="271.50"></text></g><g><title>predicates_of (27,183,456 samples, 0.12%)</title><rect x="37.9959%" y="261" width="0.1202%" height="15" fill="rgb(231,138,38)"/><text x="38.2459%" y="271.50"></text></g><g><title>predicates_defined_on (26,251,514 samples, 0.12%)</title><rect x="38.0000%" y="245" width="0.1161%" height="15" fill="rgb(231,145,46)"/><text x="38.2500%" y="255.50"></text></g><g><title>type_collecting (47,141,936 samples, 0.21%)</title><rect x="37.9224%" y="293" width="0.2084%" height="15" fill="rgb(251,118,11)"/><text x="38.1724%" y="303.50"></text></g><g><title>collect_mod_item_types (47,076,926 samples, 0.21%)</title><rect x="37.9227%" y="277" width="0.2081%" height="15" fill="rgb(217,147,25)"/><text x="38.1727%" y="287.50"></text></g><g><title>check_impl_item_well_formed (67,462,038 samples, 0.30%)</title><rect x="38.1524%" y="277" width="0.2982%" height="15" fill="rgb(247,81,37)"/><text x="38.4024%" y="287.50"></text></g><g><title>check_item_well_formed (98,136,120 samples, 0.43%)</title><rect x="38.4506%" y="277" width="0.4339%" height="15" fill="rgb(209,12,38)"/><text x="38.7006%" y="287.50"></text></g><g><title>analysis (2,641,020,619 samples, 11.68%)</title><rect x="27.2241%" y="325" width="11.6759%" height="15" fill="rgb(227,1,9)"/><text x="27.4741%" y="335.50">analysis</text></g><g><title>type_check_crate (2,024,750,372 samples, 8.95%)</title><rect x="29.9486%" y="309" width="8.9514%" height="15" fill="rgb(248,47,43)"/><text x="30.1986%" y="319.50">type_check_cr..</text></g><g><title>wf_checking (173,838,457 samples, 0.77%)</title><rect x="38.1315%" y="293" width="0.7685%" height="15" fill="rgb(221,10,30)"/><text x="38.3815%" y="303.50"></text></g><g><title>fn_abi_of_instance (98,729,580 samples, 0.44%)</title><rect x="39.9525%" y="293" width="0.4365%" height="15" fill="rgb(210,229,1)"/><text x="40.2025%" y="303.50"></text></g><g><title>codegen_module (349,979,238 samples, 1.55%)</title><rect x="38.9037%" y="309" width="1.5472%" height="15" fill="rgb(222,148,37)"/><text x="39.1537%" y="319.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (37,294,612 samples, 0.16%)</title><rect x="40.9649%" y="245" width="0.1649%" height="15" fill="rgb(234,67,33)"/><text x="41.2149%" y="255.50"></text></g><g><title>optimized_mir (83,755,188 samples, 0.37%)</title><rect x="40.7737%" y="261" width="0.3703%" height="15" fill="rgb(247,98,35)"/><text x="41.0237%" y="271.50"></text></g><g><title>evaluate_obligation (39,553,832 samples, 0.17%)</title><rect x="41.5477%" y="229" width="0.1749%" height="15" fill="rgb(247,138,52)"/><text x="41.7977%" y="239.50"></text></g><g><title>codegen_fulfill_obligation (123,842,370 samples, 0.55%)</title><rect x="41.1967%" y="245" width="0.5475%" height="15" fill="rgb(213,79,30)"/><text x="41.4467%" y="255.50"></text></g><g><title>resolve_instance (152,565,126 samples, 0.67%)</title><rect x="41.1440%" y="261" width="0.6745%" height="15" fill="rgb(246,177,23)"/><text x="41.3940%" y="271.50"></text></g><g><title>monomorphization_collector_graph_walk (341,695,387 samples, 1.51%)</title><rect x="40.4516%" y="277" width="1.5106%" height="15" fill="rgb(230,62,27)"/><text x="40.7016%" y="287.50"></text></g><g><title>monomorphization_collector (342,768,360 samples, 1.52%)</title><rect x="40.4516%" y="293" width="1.5154%" height="15" fill="rgb(216,154,8)"/><text x="40.7016%" y="303.50"></text></g><g><title>assert_symbols_are_distinct (25,561,629 samples, 0.11%)</title><rect x="41.9670%" y="277" width="0.1130%" height="15" fill="rgb(244,35,45)"/><text x="42.2170%" y="287.50"></text></g><g><title>collect_and_partition_mono_items (375,827,199 samples, 1.66%)</title><rect x="40.4509%" y="309" width="1.6615%" height="15" fill="rgb(251,115,12)"/><text x="40.7009%" y="319.50"></text></g><g><title>partition_and_assert_distinct_symbols (32,899,078 samples, 0.15%)</title><rect x="41.9670%" y="293" width="0.1454%" height="15" fill="rgb(240,54,50)"/><text x="42.2170%" y="303.50"></text></g><g><title>codegen_crate (726,907,051 samples, 3.21%)</title><rect x="38.9000%" y="325" width="3.2136%" height="15" fill="rgb(233,84,52)"/><text x="39.1500%" y="335.50">cod..</text></g><g><title>LLVM_module_codegen (1,206,411,610 samples, 5.33%)</title><rect x="42.1138%" y="309" width="5.3335%" height="15" fill="rgb(207,117,47)"/><text x="42.3638%" y="319.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (1,176,968,155 samples, 5.20%)</title><rect x="42.2440%" y="293" width="5.2033%" height="15" fill="rgb(249,43,39)"/><text x="42.4940%" y="303.50">LLVM_m..</text></g><g><title>codegen_module_optimize (6,155,032,601 samples, 27.21%)</title><rect x="42.1137%" y="325" width="27.2113%" height="15" fill="rgb(209,38,44)"/><text x="42.3637%" y="335.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,948,589,741 samples, 21.88%)</title><rect x="47.4473%" y="309" width="21.8776%" height="15" fill="rgb(236,212,23)"/><text x="47.6973%" y="319.50">LLVM_module_optimize</text></g><g><title>macro_expand_crate (361,178,098 samples, 1.60%)</title><rect x="69.3712%" y="309" width="1.5968%" height="15" fill="rgb(242,79,21)"/><text x="69.6212%" y="319.50"></text></g><g><title>expand_crate (361,159,368 samples, 1.60%)</title><rect x="69.3713%" y="293" width="1.5967%" height="15" fill="rgb(211,96,35)"/><text x="69.6213%" y="303.50"></text></g><g><title>late_resolve_crate (36,305,311 samples, 0.16%)</title><rect x="70.9944%" y="293" width="0.1605%" height="15" fill="rgb(253,215,40)"/><text x="71.2444%" y="303.50"></text></g><g><title>configure_and_expand (422,507,518 samples, 1.87%)</title><rect x="69.3249%" y="325" width="1.8679%" height="15" fill="rgb(211,81,21)"/><text x="69.5749%" y="335.50">c..</text></g><g><title>resolve_crate (50,772,108 samples, 0.22%)</title><rect x="70.9683%" y="309" width="0.2245%" height="15" fill="rgb(208,190,38)"/><text x="71.2183%" y="319.50"></text></g><g><title>free_global_ctxt (30,798,122 samples, 0.14%)</title><rect x="71.3207%" y="325" width="0.1362%" height="15" fill="rgb(235,213,38)"/><text x="71.5707%" y="335.50"></text></g><g><title>layout_of (24,576,691 samples, 0.11%)</title><rect x="71.9271%" y="293" width="0.1087%" height="15" fill="rgb(237,122,38)"/><text x="72.1771%" y="303.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (97,651,018 samples, 0.43%)</title><rect x="72.0358%" y="293" width="0.4317%" height="15" fill="rgb(244,218,35)"/><text x="72.2858%" y="303.50"></text></g><g><title>optimized_mir (180,893,478 samples, 0.80%)</title><rect x="71.6774%" y="309" width="0.7997%" height="15" fill="rgb(240,68,47)"/><text x="71.9274%" y="319.50"></text></g><g><title>generate_crate_metadata (236,613,668 samples, 1.05%)</title><rect x="71.4568%" y="325" width="1.0461%" height="15" fill="rgb(210,16,53)"/><text x="71.7068%" y="335.50"></text></g><g><title>hir_lowering (73,546,391 samples, 0.33%)</title><rect x="72.5029%" y="325" width="0.3251%" height="15" fill="rgb(235,124,12)"/><text x="72.7529%" y="335.50"></text></g><g><title>finish_ongoing_codegen (6,116,310,803 samples, 27.04%)</title><rect x="72.8283%" y="309" width="27.0401%" height="15" fill="rgb(224,169,11)"/><text x="73.0783%" y="319.50">finish_ongoing_codegen</text></g><g><title>link (6,133,342,689 samples, 27.12%)</title><rect x="72.8280%" y="325" width="27.1154%" height="15" fill="rgb(250,166,2)"/><text x="73.0780%" y="335.50">link</text></g><g><title>all (22,619,439,242 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="367.50"></text></g><g><title>rustc (22,619,439,242 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="351.50">rustc</text></g></svg></svg>