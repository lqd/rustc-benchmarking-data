<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,720,173 samples, 10.15%)</title><rect x="1.1517%" y="181" width="10.1514%" height="15" fill="rgb(227,0,7)"/><text x="1.4017%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (128,741 samples, 0.28%)</title><rect x="11.0263%" y="165" width="0.2769%" height="15" fill="rgb(217,0,24)"/><text x="11.2763%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (115,341 samples, 0.25%)</title><rect x="11.0551%" y="149" width="0.2481%" height="15" fill="rgb(221,193,54)"/><text x="11.3051%" y="159.50"></text></g><g><title>eval_to_const_value_raw (101,541 samples, 0.22%)</title><rect x="18.7676%" y="69" width="0.2184%" height="15" fill="rgb(248,212,6)"/><text x="19.0176%" y="79.50"></text></g><g><title>eval_to_const_value_raw (98,041 samples, 0.21%)</title><rect x="18.7751%" y="53" width="0.2109%" height="15" fill="rgb(208,68,35)"/><text x="19.0251%" y="63.50"></text></g><g><title>eval_to_allocation_raw (91,141 samples, 0.20%)</title><rect x="18.7899%" y="37" width="0.1960%" height="15" fill="rgb(232,128,0)"/><text x="19.0399%" y="47.50"></text></g><g><title>is_copy_raw (57,671 samples, 0.12%)</title><rect x="18.9892%" y="69" width="0.1240%" height="15" fill="rgb(207,160,47)"/><text x="19.2392%" y="79.50"></text></g><g><title>needs_drop_raw (118,800 samples, 0.26%)</title><rect x="19.1338%" y="69" width="0.2555%" height="15" fill="rgb(228,23,34)"/><text x="19.3838%" y="79.50"></text></g><g><title>is_copy_raw (104,790 samples, 0.23%)</title><rect x="19.1639%" y="53" width="0.2254%" height="15" fill="rgb(218,30,26)"/><text x="19.4139%" y="63.50"></text></g><g><title>evaluate_obligation (84,520 samples, 0.18%)</title><rect x="19.2075%" y="37" width="0.1818%" height="15" fill="rgb(220,122,19)"/><text x="19.4575%" y="47.50"></text></g><g><title>resolve_instance (71,212 samples, 0.15%)</title><rect x="19.4415%" y="69" width="0.1532%" height="15" fill="rgb(250,228,42)"/><text x="19.6915%" y="79.50"></text></g><g><title>thir_body (212,363 samples, 0.46%)</title><rect x="19.6052%" y="69" width="0.4567%" height="15" fill="rgb(240,193,28)"/><text x="19.8552%" y="79.50"></text></g><g><title>mir_const (1,597,018 samples, 3.43%)</title><rect x="16.6338%" y="117" width="3.4346%" height="15" fill="rgb(216,20,37)"/><text x="16.8838%" y="127.50">mir..</text></g><g><title>unsafety_check_result (1,378,737 samples, 2.97%)</title><rect x="17.1032%" y="101" width="2.9652%" height="15" fill="rgb(206,188,39)"/><text x="17.3532%" y="111.50">uns..</text></g><g><title>mir_built (1,236,616 samples, 2.66%)</title><rect x="17.4089%" y="85" width="2.6595%" height="15" fill="rgb(217,207,13)"/><text x="17.6589%" y="95.50">mi..</text></g><g><title>mir_promoted (1,822,580 samples, 3.92%)</title><rect x="16.1720%" y="133" width="3.9197%" height="15" fill="rgb(231,73,38)"/><text x="16.4220%" y="143.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (84,201 samples, 0.18%)</title><rect x="20.0917%" y="133" width="0.1811%" height="15" fill="rgb(225,20,46)"/><text x="20.3417%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,311,188 samples, 9.27%)</title><rect x="11.5663%" y="165" width="9.2719%" height="15" fill="rgb(210,31,41)"/><text x="11.8163%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (4,293,268 samples, 9.23%)</title><rect x="11.6048%" y="149" width="9.2333%" height="15" fill="rgb(221,200,47)"/><text x="11.8548%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (262,892 samples, 0.57%)</title><rect x="20.2728%" y="133" width="0.5654%" height="15" fill="rgb(226,26,5)"/><text x="20.5228%" y="143.50"></text></g><g><title>hir_module_items (90,601 samples, 0.19%)</title><rect x="20.8495%" y="165" width="0.1949%" height="15" fill="rgb(249,33,26)"/><text x="21.0995%" y="175.50"></text></g><g><title>codegen_fn_attrs (150,462 samples, 0.32%)</title><rect x="21.4722%" y="101" width="0.3236%" height="15" fill="rgb(235,183,28)"/><text x="21.7222%" y="111.50"></text></g><g><title>codegen_fn_attrs (243,843 samples, 0.52%)</title><rect x="21.2760%" y="133" width="0.5244%" height="15" fill="rgb(221,5,38)"/><text x="21.5260%" y="143.50"></text></g><g><title>should_inherit_track_caller (218,803 samples, 0.47%)</title><rect x="21.3299%" y="117" width="0.4706%" height="15" fill="rgb(247,18,42)"/><text x="21.5799%" y="127.50"></text></g><g><title>check_mod_attrs (335,734 samples, 0.72%)</title><rect x="21.0788%" y="149" width="0.7220%" height="15" fill="rgb(241,131,45)"/><text x="21.3288%" y="159.50"></text></g><g><title>lookup_deprecation_entry (69,610 samples, 0.15%)</title><rect x="22.0511%" y="133" width="0.1497%" height="15" fill="rgb(249,31,29)"/><text x="22.3011%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (180,502 samples, 0.39%)</title><rect x="21.9143%" y="149" width="0.3882%" height="15" fill="rgb(225,111,53)"/><text x="22.1643%" y="159.50"></text></g><g><title>misc_checking_1 (608,707 samples, 1.31%)</title><rect x="21.0452%" y="165" width="1.3091%" height="15" fill="rgb(238,160,17)"/><text x="21.2952%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (78,711 samples, 0.17%)</title><rect x="22.3579%" y="149" width="0.1693%" height="15" fill="rgb(214,148,48)"/><text x="22.6079%" y="159.50"></text></g><g><title>check_mod_liveness (51,551 samples, 0.11%)</title><rect x="22.4163%" y="133" width="0.1109%" height="15" fill="rgb(232,36,49)"/><text x="22.6663%" y="143.50"></text></g><g><title>misc_checking_2 (264,243 samples, 0.57%)</title><rect x="22.3543%" y="165" width="0.5683%" height="15" fill="rgb(209,103,24)"/><text x="22.6043%" y="175.50"></text></g><g><title>match_checking (183,832 samples, 0.40%)</title><rect x="22.5272%" y="149" width="0.3954%" height="15" fill="rgb(229,88,8)"/><text x="22.7772%" y="159.50"></text></g><g><title>check_match (177,962 samples, 0.38%)</title><rect x="22.5398%" y="133" width="0.3827%" height="15" fill="rgb(213,181,19)"/><text x="22.7898%" y="143.50"></text></g><g><title>check_private_in_public (54,341 samples, 0.12%)</title><rect x="22.9401%" y="149" width="0.1169%" height="15" fill="rgb(254,191,54)"/><text x="23.1901%" y="159.50"></text></g><g><title>death_checking (245,973 samples, 0.53%)</title><rect x="23.0570%" y="149" width="0.5290%" height="15" fill="rgb(241,83,37)"/><text x="23.3070%" y="159.50"></text></g><g><title>item_attrs (152,462 samples, 0.33%)</title><rect x="23.2581%" y="133" width="0.3279%" height="15" fill="rgb(233,36,39)"/><text x="23.5081%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,642 samples, 0.32%)</title><rect x="23.2620%" y="117" width="0.3240%" height="15" fill="rgb(226,3,54)"/><text x="23.5120%" y="127.50"></text></g><g><title>crate_lints (658,097 samples, 1.42%)</title><rect x="23.5892%" y="133" width="1.4153%" height="15" fill="rgb(245,192,40)"/><text x="23.8392%" y="143.50"></text></g><g><title>type_of (305,644 samples, 0.66%)</title><rect x="24.3472%" y="117" width="0.6573%" height="15" fill="rgb(238,167,29)"/><text x="24.5972%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (227,884 samples, 0.49%)</title><rect x="24.5145%" y="101" width="0.4901%" height="15" fill="rgb(232,182,51)"/><text x="24.7645%" y="111.50"></text></g><g><title>lint_checking (751,008 samples, 1.62%)</title><rect x="23.5860%" y="149" width="1.6152%" height="15" fill="rgb(231,60,39)"/><text x="23.8360%" y="159.50"></text></g><g><title>module_lints (91,391 samples, 0.20%)</title><rect x="25.0046%" y="133" width="0.1966%" height="15" fill="rgb(208,69,12)"/><text x="25.2546%" y="143.50"></text></g><g><title>lint_mod (89,631 samples, 0.19%)</title><rect x="25.0083%" y="117" width="0.1928%" height="15" fill="rgb(235,93,37)"/><text x="25.2583%" y="127.50"></text></g><g><title>privacy_access_levels (80,441 samples, 0.17%)</title><rect x="25.2011%" y="149" width="0.1730%" height="15" fill="rgb(213,116,39)"/><text x="25.4511%" y="159.50"></text></g><g><title>privacy_checking_modules (172,242 samples, 0.37%)</title><rect x="25.3741%" y="149" width="0.3704%" height="15" fill="rgb(222,207,29)"/><text x="25.6241%" y="159.50"></text></g><g><title>check_mod_privacy (170,882 samples, 0.37%)</title><rect x="25.3770%" y="133" width="0.3675%" height="15" fill="rgb(206,96,30)"/><text x="25.6270%" y="143.50"></text></g><g><title>misc_checking_3 (1,328,725 samples, 2.86%)</title><rect x="22.9226%" y="165" width="2.8576%" height="15" fill="rgb(218,138,4)"/><text x="23.1726%" y="175.50">mi..</text></g><g><title>is_copy_raw (49,991 samples, 0.11%)</title><rect x="26.0410%" y="117" width="0.1075%" height="15" fill="rgb(250,191,14)"/><text x="26.2910%" y="127.50"></text></g><g><title>param_env (59,130 samples, 0.13%)</title><rect x="26.1485%" y="117" width="0.1272%" height="15" fill="rgb(239,60,40)"/><text x="26.3985%" y="127.50"></text></g><g><title>impl_parent (1,011,155 samples, 2.17%)</title><rect x="30.3550%" y="101" width="2.1746%" height="15" fill="rgb(206,27,48)"/><text x="30.6050%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (540,020 samples, 1.16%)</title><rect x="31.3683%" y="85" width="1.1614%" height="15" fill="rgb(225,35,8)"/><text x="31.6183%" y="95.50"></text></g><g><title>impl_trait_ref (1,689,300 samples, 3.63%)</title><rect x="32.5379%" y="101" width="3.6331%" height="15" fill="rgb(250,213,24)"/><text x="32.7879%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,266,227 samples, 2.72%)</title><rect x="33.4478%" y="85" width="2.7232%" height="15" fill="rgb(247,123,22)"/><text x="33.6978%" y="95.50">me..</text></g><g><title>trait_impls_of (342,483 samples, 0.74%)</title><rect x="36.2746%" y="101" width="0.7366%" height="15" fill="rgb(231,138,38)"/><text x="36.5246%" y="111.50"></text></g><g><title>implementations_of_trait (77,731 samples, 0.17%)</title><rect x="36.8440%" y="85" width="0.1672%" height="15" fill="rgb(231,145,46)"/><text x="37.0940%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (69,211 samples, 0.15%)</title><rect x="36.8623%" y="69" width="0.1488%" height="15" fill="rgb(251,118,11)"/><text x="37.1123%" y="79.50"></text></g><g><title>coherent_trait (5,184,418 samples, 11.15%)</title><rect x="25.8635%" y="133" width="11.1499%" height="15" fill="rgb(217,147,25)"/><text x="26.1135%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (4,992,776 samples, 10.74%)</title><rect x="26.2756%" y="117" width="10.7377%" height="15" fill="rgb(247,81,37)"/><text x="26.5256%" y="127.50">specialization_g..</text></g><g><title>coherence_checking (5,241,158 samples, 11.27%)</title><rect x="25.8239%" y="149" width="11.2719%" height="15" fill="rgb(209,12,38)"/><text x="26.0739%" y="159.50">coherence_checking</text></g><g><title>dropck_outlives (73,921 samples, 0.16%)</title><rect x="44.5000%" y="101" width="0.1590%" height="15" fill="rgb(227,1,9)"/><text x="44.7500%" y="111.50"></text></g><g><title>evaluate_obligation (345,552 samples, 0.74%)</title><rect x="44.6590%" y="101" width="0.7432%" height="15" fill="rgb(248,47,43)"/><text x="44.9090%" y="111.50"></text></g><g><title>predicates_of (272,723 samples, 0.59%)</title><rect x="45.7008%" y="101" width="0.5865%" height="15" fill="rgb(221,10,30)"/><text x="45.9508%" y="111.50"></text></g><g><title>item_bodies_checking (4,305,078 samples, 9.26%)</title><rect x="37.1311%" y="149" width="9.2587%" height="15" fill="rgb(210,229,1)"/><text x="37.3811%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (4,303,338 samples, 9.25%)</title><rect x="37.1348%" y="133" width="9.2550%" height="15" fill="rgb(222,148,37)"/><text x="37.3848%" y="143.50">typeck_item_b..</text></g><g><title>typeck (4,289,288 samples, 9.22%)</title><rect x="37.1650%" y="117" width="9.2248%" height="15" fill="rgb(234,67,33)"/><text x="37.4150%" y="127.50">typeck</text></g><g><title>item_types_checking (379,505 samples, 0.82%)</title><rect x="46.3898%" y="149" width="0.8162%" height="15" fill="rgb(247,98,35)"/><text x="46.6398%" y="159.50"></text></g><g><title>check_mod_item_types (377,495 samples, 0.81%)</title><rect x="46.3941%" y="133" width="0.8119%" height="15" fill="rgb(247,138,52)"/><text x="46.6441%" y="143.50"></text></g><g><title>fn_sig (73,312 samples, 0.16%)</title><rect x="47.4122%" y="117" width="0.1577%" height="15" fill="rgb(213,79,30)"/><text x="47.6622%" y="127.50"></text></g><g><title>generics_of (64,351 samples, 0.14%)</title><rect x="47.5698%" y="117" width="0.1384%" height="15" fill="rgb(246,177,23)"/><text x="47.8198%" y="127.50"></text></g><g><title>late_bound_vars_map (170,441 samples, 0.37%)</title><rect x="48.1513%" y="69" width="0.3666%" height="15" fill="rgb(230,62,27)"/><text x="48.4013%" y="79.50"></text></g><g><title>resolve_lifetimes (161,421 samples, 0.35%)</title><rect x="48.1707%" y="53" width="0.3472%" height="15" fill="rgb(216,154,8)"/><text x="48.4207%" y="63.50"></text></g><g><title>explicit_predicates_of (306,651 samples, 0.66%)</title><rect x="47.8741%" y="85" width="0.6595%" height="15" fill="rgb(244,35,45)"/><text x="48.1241%" y="95.50"></text></g><g><title>predicates_of (374,531 samples, 0.81%)</title><rect x="47.7994%" y="117" width="0.8055%" height="15" fill="rgb(251,115,12)"/><text x="48.0494%" y="127.50"></text></g><g><title>predicates_defined_on (361,641 samples, 0.78%)</title><rect x="47.8271%" y="101" width="0.7778%" height="15" fill="rgb(240,54,50)"/><text x="48.0771%" y="111.50"></text></g><g><title>type_collecting (784,678 samples, 1.69%)</title><rect x="47.2078%" y="149" width="1.6876%" height="15" fill="rgb(233,84,52)"/><text x="47.4578%" y="159.50"></text></g><g><title>collect_mod_item_types (777,548 samples, 1.67%)</title><rect x="47.2231%" y="133" width="1.6722%" height="15" fill="rgb(207,117,47)"/><text x="47.4731%" y="143.50"></text></g><g><title>type_of (135,073 samples, 0.29%)</title><rect x="48.6049%" y="117" width="0.2905%" height="15" fill="rgb(249,43,39)"/><text x="48.8549%" y="127.50"></text></g><g><title>type_of (53,121 samples, 0.11%)</title><rect x="48.7811%" y="101" width="0.1142%" height="15" fill="rgb(209,38,44)"/><text x="49.0311%" y="111.50"></text></g><g><title>evaluate_obligation (205,593 samples, 0.44%)</title><rect x="50.0987%" y="117" width="0.4422%" height="15" fill="rgb(236,212,23)"/><text x="50.3487%" y="127.50"></text></g><g><title>implied_outlives_bounds (84,780 samples, 0.18%)</title><rect x="50.5409%" y="117" width="0.1823%" height="15" fill="rgb(242,79,21)"/><text x="50.7909%" y="127.50"></text></g><g><title>param_env (73,650 samples, 0.16%)</title><rect x="50.7232%" y="117" width="0.1584%" height="15" fill="rgb(211,96,35)"/><text x="50.9732%" y="127.50"></text></g><g><title>region_scope_tree (90,470 samples, 0.19%)</title><rect x="50.9767%" y="117" width="0.1946%" height="15" fill="rgb(253,215,40)"/><text x="51.2267%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,025,181 samples, 2.20%)</title><rect x="49.0034%" y="133" width="2.2048%" height="15" fill="rgb(211,81,21)"/><text x="49.2534%" y="143.50">c..</text></g><g><title>implied_outlives_bounds (82,891 samples, 0.18%)</title><rect x="52.4923%" y="117" width="0.1783%" height="15" fill="rgb(208,190,38)"/><text x="52.7423%" y="127.50"></text></g><g><title>param_env (104,361 samples, 0.22%)</title><rect x="52.6706%" y="117" width="0.2244%" height="15" fill="rgb(235,213,38)"/><text x="52.9206%" y="127.50"></text></g><g><title>predicates_of (51,220 samples, 0.11%)</title><rect x="52.8950%" y="117" width="0.1102%" height="15" fill="rgb(237,122,38)"/><text x="53.1450%" y="127.50"></text></g><g><title>analysis (19,437,378 samples, 41.80%)</title><rect x="11.3032%" y="181" width="41.8030%" height="15" fill="rgb(244,218,35)"/><text x="11.5532%" y="191.50">analysis</text></g><g><title>type_check_crate (12,705,912 samples, 27.33%)</title><rect x="25.7802%" y="165" width="27.3260%" height="15" fill="rgb(240,68,47)"/><text x="26.0302%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,957,082 samples, 4.21%)</title><rect x="48.8972%" y="149" width="4.2090%" height="15" fill="rgb(210,16,53)"/><text x="49.1472%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (882,501 samples, 1.90%)</title><rect x="51.2082%" y="133" width="1.8980%" height="15" fill="rgb(235,124,12)"/><text x="51.4582%" y="143.50">c..</text></g><g><title>codegen_module (217,482 samples, 0.47%)</title><rect x="53.9849%" y="165" width="0.4677%" height="15" fill="rgb(224,169,11)"/><text x="54.2349%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (53,050 samples, 0.11%)</title><rect x="54.4538%" y="165" width="0.1141%" height="15" fill="rgb(250,166,2)"/><text x="54.7038%" y="175.50"></text></g><g><title>codegen_crate (688,928 samples, 1.48%)</title><rect x="53.1272%" y="181" width="1.4816%" height="15" fill="rgb(242,216,29)"/><text x="53.3772%" y="191.50"></text></g><g><title>codegen_module_optimize (1,762,900 samples, 3.79%)</title><rect x="54.6089%" y="181" width="3.7914%" height="15" fill="rgb(230,116,27)"/><text x="54.8589%" y="191.50">code..</text></g><g><title>LLVM_module_optimize (430,195 samples, 0.93%)</title><rect x="57.4751%" y="165" width="0.9252%" height="15" fill="rgb(228,99,48)"/><text x="57.7251%" y="175.50"></text></g><g><title>LLVM_lto_optimize (174,652 samples, 0.38%)</title><rect x="59.1188%" y="165" width="0.3756%" height="15" fill="rgb(253,11,6)"/><text x="59.3688%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,013,493 samples, 4.33%)</title><rect x="59.4944%" y="165" width="4.3303%" height="15" fill="rgb(247,143,39)"/><text x="59.7444%" y="175.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (1,987,863 samples, 4.28%)</title><rect x="59.5495%" y="149" width="4.2752%" height="15" fill="rgb(236,97,10)"/><text x="59.7995%" y="159.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (2,550,959 samples, 5.49%)</title><rect x="58.4003%" y="181" width="5.4862%" height="15" fill="rgb(233,208,19)"/><text x="58.6503%" y="191.50">codegen..</text></g><g><title>AST_validation (57,761 samples, 0.12%)</title><rect x="64.2931%" y="165" width="0.1242%" height="15" fill="rgb(216,164,2)"/><text x="64.5431%" y="175.50"></text></g><g><title>crate_injection (84,581 samples, 0.18%)</title><rect x="64.4800%" y="165" width="0.1819%" height="15" fill="rgb(220,129,5)"/><text x="64.7300%" y="175.50"></text></g><g><title>metadata_load_macro (62,570 samples, 0.13%)</title><rect x="73.1455%" y="133" width="0.1346%" height="15" fill="rgb(242,17,10)"/><text x="73.3955%" y="143.50"></text></g><g><title>macro_expand_crate (4,130,606 samples, 8.88%)</title><rect x="64.6619%" y="165" width="8.8835%" height="15" fill="rgb(242,107,0)"/><text x="64.9119%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (4,113,606 samples, 8.85%)</title><rect x="64.6985%" y="149" width="8.8469%" height="15" fill="rgb(251,28,31)"/><text x="64.9485%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (123,382 samples, 0.27%)</title><rect x="73.2801%" y="133" width="0.2654%" height="15" fill="rgb(233,223,10)"/><text x="73.5301%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (79,491 samples, 0.17%)</title><rect x="73.5510%" y="165" width="0.1710%" height="15" fill="rgb(215,21,27)"/><text x="73.8010%" y="175.50"></text></g><g><title>finalize_macro_resolutions (162,622 samples, 0.35%)</title><rect x="73.7577%" y="149" width="0.3497%" height="15" fill="rgb(232,23,21)"/><text x="74.0077%" y="159.50"></text></g><g><title>late_resolve_crate (994,601 samples, 2.14%)</title><rect x="74.1075%" y="149" width="2.1390%" height="15" fill="rgb(244,5,23)"/><text x="74.3575%" y="159.50">l..</text></g><g><title>configure_and_expand (5,789,745 samples, 12.45%)</title><rect x="63.8865%" y="181" width="12.4517%" height="15" fill="rgb(226,81,46)"/><text x="64.1365%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,216,493 samples, 2.62%)</title><rect x="73.7219%" y="165" width="2.6163%" height="15" fill="rgb(247,70,30)"/><text x="73.9719%" y="175.50">re..</text></g><g><title>early_lint_checks (121,621 samples, 0.26%)</title><rect x="76.4787%" y="181" width="0.2616%" height="15" fill="rgb(212,68,19)"/><text x="76.7287%" y="191.50"></text></g><g><title>free_global_ctxt (1,497,947 samples, 3.22%)</title><rect x="76.7403%" y="181" width="3.2216%" height="15" fill="rgb(240,187,13)"/><text x="76.9903%" y="191.50">fre..</text></g><g><title>crate_hash (59,391 samples, 0.13%)</title><rect x="80.9967%" y="165" width="0.1277%" height="15" fill="rgb(223,113,26)"/><text x="81.2467%" y="175.50"></text></g><g><title>is_sized_raw (73,750 samples, 0.16%)</title><rect x="83.2268%" y="133" width="0.1586%" height="15" fill="rgb(206,192,2)"/><text x="83.4768%" y="143.50"></text></g><g><title>evaluate_obligation (55,030 samples, 0.12%)</title><rect x="83.2670%" y="117" width="0.1184%" height="15" fill="rgb(241,108,4)"/><text x="83.5170%" y="127.50"></text></g><g><title>layout_of (222,282 samples, 0.48%)</title><rect x="82.9427%" y="149" width="0.4781%" height="15" fill="rgb(247,173,49)"/><text x="83.1927%" y="159.50"></text></g><g><title>needs_drop_raw (92,161 samples, 0.20%)</title><rect x="84.9787%" y="133" width="0.1982%" height="15" fill="rgb(224,114,35)"/><text x="85.2287%" y="143.50"></text></g><g><title>is_copy_raw (83,951 samples, 0.18%)</title><rect x="84.9963%" y="117" width="0.1805%" height="15" fill="rgb(245,159,27)"/><text x="85.2463%" y="127.50"></text></g><g><title>evaluate_obligation (72,881 samples, 0.16%)</title><rect x="85.0201%" y="101" width="0.1567%" height="15" fill="rgb(245,172,44)"/><text x="85.2701%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (826,457 samples, 1.78%)</title><rect x="83.4207%" y="149" width="1.7774%" height="15" fill="rgb(236,23,11)"/><text x="83.6707%" y="159.50">m..</text></g><g><title>optimized_mir (1,799,141 samples, 3.87%)</title><rect x="81.3530%" y="165" width="3.8693%" height="15" fill="rgb(205,117,38)"/><text x="81.6030%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (2,465,898 samples, 5.30%)</title><rect x="79.9619%" y="181" width="5.3033%" height="15" fill="rgb(237,72,25)"/><text x="80.2119%" y="191.50">genera..</text></g><g><title>hir_lowering (793,389 samples, 1.71%)</title><rect x="85.2652%" y="181" width="1.7063%" height="15" fill="rgb(244,70,9)"/><text x="85.5152%" y="191.50"></text></g><g><title>finish_ongoing_codegen (3,018,554 samples, 6.49%)</title><rect x="87.0061%" y="165" width="6.4919%" height="15" fill="rgb(217,125,39)"/><text x="87.2561%" y="175.50">finish_on..</text></g><g><title>link_crate (1,069,962 samples, 2.30%)</title><rect x="93.4979%" y="165" width="2.3011%" height="15" fill="rgb(235,36,10)"/><text x="93.7479%" y="175.50">l..</text></g><g><title>link_binary (1,061,942 samples, 2.28%)</title><rect x="93.5152%" y="149" width="2.2839%" height="15" fill="rgb(251,123,47)"/><text x="93.7652%" y="159.50">l..</text></g><g><title>link_rlib (682,918 samples, 1.47%)</title><rect x="94.3303%" y="133" width="1.4687%" height="15" fill="rgb(221,13,13)"/><text x="94.5803%" y="143.50"></text></g><g><title>link (4,116,096 samples, 8.85%)</title><rect x="86.9715%" y="181" width="8.8523%" height="15" fill="rgb(238,131,9)"/><text x="87.2215%" y="191.50">link</text></g><g><title>parse_crate (929,710 samples, 2.00%)</title><rect x="95.8237%" y="181" width="1.9995%" height="15" fill="rgb(211,50,8)"/><text x="96.0737%" y="191.50">p..</text></g><g><title>prepare_outputs (186,872 samples, 0.40%)</title><rect x="97.8409%" y="181" width="0.4019%" height="15" fill="rgb(245,182,24)"/><text x="98.0909%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (405,834 samples, 0.87%)</title><rect x="98.2428%" y="181" width="0.8728%" height="15" fill="rgb(242,14,37)"/><text x="98.4928%" y="191.50"></text></g><g><title>setup_global_ctxt (79,991 samples, 0.17%)</title><rect x="99.1173%" y="181" width="0.1720%" height="15" fill="rgb(246,228,12)"/><text x="99.3673%" y="191.50"></text></g><g><title>all (46,497,562 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (46,497,562 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (330,464 samples, 0.71%)</title><rect x="99.2893%" y="181" width="0.7107%" height="15" fill="rgb(230,59,30)"/><text x="99.5393%" y="191.50"></text></g></svg></svg>