<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (88,559,629 samples, 16.63%)</title><rect x="0.1572%" y="181" width="16.6263%" height="15" fill="rgb(227,0,7)"/><text x="0.4072%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (599,436 samples, 0.11%)</title><rect x="16.6710%" y="165" width="0.1125%" height="15" fill="rgb(217,0,24)"/><text x="16.9210%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (581,846 samples, 0.11%)</title><rect x="16.6743%" y="149" width="0.1092%" height="15" fill="rgb(221,193,54)"/><text x="16.9243%" y="159.50"></text></g><g><title>is_copy_raw (1,046,679 samples, 0.20%)</title><rect x="18.8768%" y="53" width="0.1965%" height="15" fill="rgb(248,212,6)"/><text x="19.1268%" y="63.50"></text></g><g><title>evaluate_obligation (891,459 samples, 0.17%)</title><rect x="18.9060%" y="37" width="0.1674%" height="15" fill="rgb(208,68,35)"/><text x="19.1560%" y="47.50"></text></g><g><title>needs_drop_raw (1,531,063 samples, 0.29%)</title><rect x="18.7910%" y="69" width="0.2874%" height="15" fill="rgb(232,128,0)"/><text x="19.0410%" y="79.50"></text></g><g><title>specialization_graph_of (572,136 samples, 0.11%)</title><rect x="19.1608%" y="53" width="0.1074%" height="15" fill="rgb(207,160,47)"/><text x="19.4108%" y="63.50"></text></g><g><title>resolve_instance (1,040,461 samples, 0.20%)</title><rect x="19.0831%" y="69" width="0.1953%" height="15" fill="rgb(228,23,34)"/><text x="19.3331%" y="79.50"></text></g><g><title>thir_body (607,883 samples, 0.11%)</title><rect x="19.2815%" y="69" width="0.1141%" height="15" fill="rgb(218,30,26)"/><text x="19.5315%" y="79.50"></text></g><g><title>mir_const (6,355,929 samples, 1.19%)</title><rect x="18.2077%" y="117" width="1.1933%" height="15" fill="rgb(220,122,19)"/><text x="18.4577%" y="127.50"></text></g><g><title>unsafety_check_result (5,617,664 samples, 1.05%)</title><rect x="18.3463%" y="101" width="1.0547%" height="15" fill="rgb(250,228,42)"/><text x="18.5963%" y="111.50"></text></g><g><title>mir_built (5,097,755 samples, 0.96%)</title><rect x="18.4439%" y="85" width="0.9571%" height="15" fill="rgb(240,193,28)"/><text x="18.6939%" y="95.50"></text></g><g><title>mir_promoted (6,819,934 samples, 1.28%)</title><rect x="18.1289%" y="133" width="1.2804%" height="15" fill="rgb(216,20,37)"/><text x="18.3789%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (767,589 samples, 0.14%)</title><rect x="19.4729%" y="133" width="0.1441%" height="15" fill="rgb(206,188,39)"/><text x="19.7229%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,795,878 samples, 0.34%)</title><rect x="19.6777%" y="133" width="0.3372%" height="15" fill="rgb(217,207,13)"/><text x="19.9277%" y="143.50"></text></g><g><title>MIR_borrow_checking (16,855,318 samples, 3.16%)</title><rect x="16.8528%" y="165" width="3.1644%" height="15" fill="rgb(231,73,38)"/><text x="17.1028%" y="175.50">MIR..</text></g><g><title>mir_borrowck (16,791,897 samples, 3.15%)</title><rect x="16.8647%" y="149" width="3.1525%" height="15" fill="rgb(225,20,46)"/><text x="17.1147%" y="159.50">mir..</text></g><g><title>codegen_fn_attrs (642,668 samples, 0.12%)</title><rect x="20.1480%" y="133" width="0.1207%" height="15" fill="rgb(210,31,41)"/><text x="20.3980%" y="143.50"></text></g><g><title>check_mod_attrs (982,951 samples, 0.18%)</title><rect x="20.0841%" y="149" width="0.1845%" height="15" fill="rgb(221,200,47)"/><text x="20.3341%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (595,656 samples, 0.11%)</title><rect x="20.3141%" y="149" width="0.1118%" height="15" fill="rgb(226,26,5)"/><text x="20.5641%" y="159.50"></text></g><g><title>misc_checking_1 (1,932,121 samples, 0.36%)</title><rect x="20.0777%" y="165" width="0.3627%" height="15" fill="rgb(249,33,26)"/><text x="20.3277%" y="175.50"></text></g><g><title>mir_borrowck (534,087 samples, 0.10%)</title><rect x="20.9535%" y="37" width="0.1003%" height="15" fill="rgb(235,183,28)"/><text x="21.2035%" y="47.50"></text></g><g><title>mir_for_ctfe (1,137,152 samples, 0.21%)</title><rect x="20.8404%" y="69" width="0.2135%" height="15" fill="rgb(221,5,38)"/><text x="21.0904%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (645,257 samples, 0.12%)</title><rect x="20.9328%" y="53" width="0.1211%" height="15" fill="rgb(247,18,42)"/><text x="21.1828%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,465,298 samples, 0.46%)</title><rect x="20.6012%" y="117" width="0.4628%" height="15" fill="rgb(241,131,45)"/><text x="20.8512%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,463,608 samples, 0.46%)</title><rect x="20.6015%" y="101" width="0.4625%" height="15" fill="rgb(249,31,29)"/><text x="20.8515%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,459,488 samples, 0.46%)</title><rect x="20.6023%" y="85" width="0.4617%" height="15" fill="rgb(225,111,53)"/><text x="20.8523%" y="95.50"></text></g><g><title>misc_checking_2 (3,789,863 samples, 0.71%)</title><rect x="20.4404%" y="165" width="0.7115%" height="15" fill="rgb(238,160,17)"/><text x="20.6904%" y="175.50"></text></g><g><title>match_checking (3,389,518 samples, 0.64%)</title><rect x="20.5156%" y="149" width="0.6364%" height="15" fill="rgb(214,148,48)"/><text x="20.7656%" y="159.50"></text></g><g><title>check_match (3,366,618 samples, 0.63%)</title><rect x="20.5199%" y="133" width="0.6321%" height="15" fill="rgb(232,36,49)"/><text x="20.7699%" y="143.50"></text></g><g><title>crate_lints (1,160,943 samples, 0.22%)</title><rect x="21.2596%" y="133" width="0.2180%" height="15" fill="rgb(209,103,24)"/><text x="21.5096%" y="143.50"></text></g><g><title>lint_checking (1,429,236 samples, 0.27%)</title><rect x="21.2593%" y="149" width="0.2683%" height="15" fill="rgb(229,88,8)"/><text x="21.5093%" y="159.50"></text></g><g><title>misc_checking_3 (2,711,630 samples, 0.51%)</title><rect x="21.1519%" y="165" width="0.5091%" height="15" fill="rgb(213,181,19)"/><text x="21.4019%" y="175.50"></text></g><g><title>impl_parent (2,584,913 samples, 0.49%)</title><rect x="22.8664%" y="101" width="0.4853%" height="15" fill="rgb(254,191,54)"/><text x="23.1164%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,259,204 samples, 0.24%)</title><rect x="23.1153%" y="85" width="0.2364%" height="15" fill="rgb(241,83,37)"/><text x="23.3653%" y="95.50"></text></g><g><title>impl_trait_ref (5,377,018 samples, 1.01%)</title><rect x="23.3522%" y="101" width="1.0095%" height="15" fill="rgb(233,36,39)"/><text x="23.6022%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,047,483 samples, 0.76%)</title><rect x="23.6018%" y="85" width="0.7599%" height="15" fill="rgb(226,3,54)"/><text x="23.8518%" y="95.50"></text></g><g><title>trait_impls_of (1,316,025 samples, 0.25%)</title><rect x="24.3944%" y="101" width="0.2471%" height="15" fill="rgb(245,192,40)"/><text x="24.6444%" y="111.50"></text></g><g><title>coherent_trait (15,780,676 samples, 2.96%)</title><rect x="21.6792%" y="133" width="2.9627%" height="15" fill="rgb(238,167,29)"/><text x="21.9292%" y="143.50">coh..</text></g><g><title>specialization_graph_of (15,216,200 samples, 2.86%)</title><rect x="21.7852%" y="117" width="2.8567%" height="15" fill="rgb(232,182,51)"/><text x="22.0352%" y="127.50">sp..</text></g><g><title>coherence_checking (15,910,468 samples, 2.99%)</title><rect x="21.6723%" y="149" width="2.9871%" height="15" fill="rgb(231,60,39)"/><text x="21.9223%" y="159.50">coh..</text></g><g><title>evaluate_obligation (895,811 samples, 0.17%)</title><rect x="26.1977%" y="101" width="0.1682%" height="15" fill="rgb(208,69,12)"/><text x="26.4477%" y="111.50"></text></g><g><title>associated_items (680,939 samples, 0.13%)</title><rect x="28.0342%" y="85" width="0.1278%" height="15" fill="rgb(235,93,37)"/><text x="28.2842%" y="95.50"></text></g><g><title>evaluate_obligation (43,426,808 samples, 8.15%)</title><rect x="28.2495%" y="85" width="8.1530%" height="15" fill="rgb(213,116,39)"/><text x="28.4995%" y="95.50">evaluate_ob..</text></g><g><title>typeck (54,241,696 samples, 10.18%)</title><rect x="26.5265%" y="101" width="10.1834%" height="15" fill="rgb(222,207,29)"/><text x="26.7765%" y="111.50">typeck</text></g><g><title>item_bodies_checking (64,152,666 samples, 12.04%)</title><rect x="24.6698%" y="149" width="12.0441%" height="15" fill="rgb(206,96,30)"/><text x="24.9198%" y="159.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (64,149,996 samples, 12.04%)</title><rect x="24.6703%" y="133" width="12.0436%" height="15" fill="rgb(218,138,4)"/><text x="24.9203%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (64,104,786 samples, 12.04%)</title><rect x="24.6787%" y="117" width="12.0351%" height="15" fill="rgb(250,191,14)"/><text x="24.9287%" y="127.50">typeck</text></g><g><title>item_types_checking (1,779,430 samples, 0.33%)</title><rect x="36.7139%" y="149" width="0.3341%" height="15" fill="rgb(239,60,40)"/><text x="36.9639%" y="159.50"></text></g><g><title>check_mod_item_types (1,776,390 samples, 0.33%)</title><rect x="36.7145%" y="133" width="0.3335%" height="15" fill="rgb(206,27,48)"/><text x="36.9645%" y="143.50"></text></g><g><title>generics_of (731,871 samples, 0.14%)</title><rect x="37.1835%" y="117" width="0.1374%" height="15" fill="rgb(225,35,8)"/><text x="37.4335%" y="127.50"></text></g><g><title>predicates_of (542,872 samples, 0.10%)</title><rect x="37.3483%" y="117" width="0.1019%" height="15" fill="rgb(250,213,24)"/><text x="37.5983%" y="127.50"></text></g><g><title>type_collecting (2,627,420 samples, 0.49%)</title><rect x="37.0485%" y="149" width="0.4933%" height="15" fill="rgb(247,123,22)"/><text x="37.2985%" y="159.50"></text></g><g><title>collect_mod_item_types (2,614,950 samples, 0.49%)</title><rect x="37.0508%" y="133" width="0.4909%" height="15" fill="rgb(231,138,38)"/><text x="37.3008%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,695,569 samples, 0.32%)</title><rect x="37.5650%" y="133" width="0.3183%" height="15" fill="rgb(231,145,46)"/><text x="37.8150%" y="143.50"></text></g><g><title>analysis (114,317,456 samples, 21.46%)</title><rect x="16.7835%" y="181" width="21.4622%" height="15" fill="rgb(251,118,11)"/><text x="17.0335%" y="191.50">analysis</text></g><g><title>type_check_crate (88,337,666 samples, 16.58%)</title><rect x="21.6610%" y="165" width="16.5847%" height="15" fill="rgb(217,147,25)"/><text x="21.9110%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,746,572 samples, 0.70%)</title><rect x="37.5423%" y="149" width="0.7034%" height="15" fill="rgb(247,81,37)"/><text x="37.7923%" y="159.50"></text></g><g><title>check_item_well_formed (1,930,278 samples, 0.36%)</title><rect x="37.8833%" y="133" width="0.3624%" height="15" fill="rgb(209,12,38)"/><text x="38.1333%" y="143.50"></text></g><g><title>param_env (890,074 samples, 0.17%)</title><rect x="40.6442%" y="133" width="0.1671%" height="15" fill="rgb(227,1,9)"/><text x="40.8942%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,338,761 samples, 0.63%)</title><rect x="40.2727%" y="149" width="0.6268%" height="15" fill="rgb(248,47,43)"/><text x="40.5227%" y="159.50"></text></g><g><title>codegen_module (13,593,662 samples, 2.55%)</title><rect x="38.4742%" y="165" width="2.5521%" height="15" fill="rgb(221,10,30)"/><text x="38.7242%" y="175.50">co..</text></g><g><title>metadata_decode_entry_optimized_mir (743,877 samples, 0.14%)</title><rect x="41.4880%" y="101" width="0.1397%" height="15" fill="rgb(210,229,1)"/><text x="41.7380%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (795,223 samples, 0.15%)</title><rect x="41.6276%" y="101" width="0.1493%" height="15" fill="rgb(222,148,37)"/><text x="41.8776%" y="111.50"></text></g><g><title>optimized_mir (2,711,309 samples, 0.51%)</title><rect x="41.2692%" y="117" width="0.5090%" height="15" fill="rgb(234,67,33)"/><text x="41.5192%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,337,070 samples, 0.25%)</title><rect x="41.8444%" y="101" width="0.2510%" height="15" fill="rgb(247,98,35)"/><text x="42.0944%" y="111.50"></text></g><g><title>resolve_instance (2,391,087 samples, 0.45%)</title><rect x="41.7782%" y="117" width="0.4489%" height="15" fill="rgb(247,138,52)"/><text x="42.0282%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (7,180,700 samples, 1.35%)</title><rect x="41.0315%" y="133" width="1.3481%" height="15" fill="rgb(213,79,30)"/><text x="41.2815%" y="143.50"></text></g><g><title>monomorphization_collector (7,228,901 samples, 1.36%)</title><rect x="41.0311%" y="149" width="1.3572%" height="15" fill="rgb(246,177,23)"/><text x="41.2811%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (568,596 samples, 0.11%)</title><rect x="42.3890%" y="133" width="0.1067%" height="15" fill="rgb(230,62,27)"/><text x="42.6390%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (8,019,469 samples, 1.51%)</title><rect x="41.0269%" y="165" width="1.5056%" height="15" fill="rgb(216,154,8)"/><text x="41.2769%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (767,968 samples, 0.14%)</title><rect x="42.3883%" y="149" width="0.1442%" height="15" fill="rgb(244,35,45)"/><text x="42.6383%" y="159.50"></text></g><g><title>codegen_crate (22,868,315 samples, 4.29%)</title><rect x="38.2474%" y="181" width="4.2933%" height="15" fill="rgb(251,115,12)"/><text x="38.4974%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (74,945,026 samples, 14.07%)</title><rect x="42.5408%" y="181" width="14.0703%" height="15" fill="rgb(240,54,50)"/><text x="42.7908%" y="191.50">codegen_module_optimi..</text></g><g><title>LLVM_module_optimize (68,098,721 samples, 12.78%)</title><rect x="43.8261%" y="165" width="12.7850%" height="15" fill="rgb(233,84,52)"/><text x="44.0761%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (45,507,066 samples, 8.54%)</title><rect x="57.4843%" y="165" width="8.5436%" height="15" fill="rgb(207,117,47)"/><text x="57.7343%" y="175.50">LLVM_lto_opt..</text></g><g><title>LLVM_module_codegen (63,311,276 samples, 11.89%)</title><rect x="66.0279%" y="165" width="11.8862%" height="15" fill="rgb(249,43,39)"/><text x="66.2779%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (62,560,897 samples, 11.75%)</title><rect x="66.1688%" y="149" width="11.7453%" height="15" fill="rgb(209,38,44)"/><text x="66.4188%" y="159.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (2,646,219 samples, 0.50%)</title><rect x="77.9141%" y="165" width="0.4968%" height="15" fill="rgb(236,212,23)"/><text x="78.1641%" y="175.50"></text></g><g><title>codegen_module_perform_lto (116,442,786 samples, 21.86%)</title><rect x="56.6111%" y="181" width="21.8612%" height="15" fill="rgb(242,79,21)"/><text x="56.8611%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,238,033 samples, 0.23%)</title><rect x="81.7900%" y="133" width="0.2324%" height="15" fill="rgb(211,96,35)"/><text x="82.0400%" y="143.50"></text></g><g><title>macro_expand_crate (18,480,406 samples, 3.47%)</title><rect x="78.5697%" y="165" width="3.4695%" height="15" fill="rgb(253,215,40)"/><text x="78.8197%" y="175.50">mac..</text></g><g><title>expand_crate (18,466,856 samples, 3.47%)</title><rect x="78.5722%" y="149" width="3.4670%" height="15" fill="rgb(211,81,21)"/><text x="78.8222%" y="159.50">exp..</text></g><g><title>late_resolve_crate (2,100,434 samples, 0.39%)</title><rect x="82.1191%" y="149" width="0.3943%" height="15" fill="rgb(208,190,38)"/><text x="82.3691%" y="159.50"></text></g><g><title>configure_and_expand (21,667,152 samples, 4.07%)</title><rect x="78.4723%" y="181" width="4.0678%" height="15" fill="rgb(235,213,38)"/><text x="78.7223%" y="191.50">conf..</text></g><g><title>resolve_crate (2,575,108 samples, 0.48%)</title><rect x="82.0566%" y="165" width="0.4835%" height="15" fill="rgb(237,122,38)"/><text x="82.3066%" y="175.50"></text></g><g><title>free_global_ctxt (3,840,072 samples, 0.72%)</title><rect x="82.6639%" y="181" width="0.7209%" height="15" fill="rgb(244,218,35)"/><text x="82.9139%" y="191.50"></text></g><g><title>layout_of (727,220 samples, 0.14%)</title><rect x="83.8765%" y="149" width="0.1365%" height="15" fill="rgb(240,68,47)"/><text x="84.1265%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,402,763 samples, 0.26%)</title><rect x="84.0131%" y="149" width="0.2634%" height="15" fill="rgb(210,16,53)"/><text x="84.2631%" y="159.50"></text></g><g><title>optimized_mir (3,391,468 samples, 0.64%)</title><rect x="83.6403%" y="165" width="0.6367%" height="15" fill="rgb(235,124,12)"/><text x="83.8903%" y="175.50"></text></g><g><title>generate_crate_metadata (4,786,154 samples, 0.90%)</title><rect x="83.3848%" y="181" width="0.8986%" height="15" fill="rgb(224,169,11)"/><text x="83.6348%" y="191.50"></text></g><g><title>hir_lowering (3,691,381 samples, 0.69%)</title><rect x="84.2834%" y="181" width="0.6930%" height="15" fill="rgb(250,166,2)"/><text x="84.5334%" y="191.50"></text></g><g><title>finish_ongoing_codegen (74,572,803 samples, 14.00%)</title><rect x="84.9792%" y="165" width="14.0004%" height="15" fill="rgb(242,216,29)"/><text x="85.2292%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (980,941 samples, 0.18%)</title><rect x="98.9796%" y="165" width="0.1842%" height="15" fill="rgb(230,116,27)"/><text x="99.2296%" y="175.50"></text></g><g><title>link_binary (954,481 samples, 0.18%)</title><rect x="98.9846%" y="149" width="0.1792%" height="15" fill="rgb(228,99,48)"/><text x="99.2346%" y="159.50"></text></g><g><title>link_rlib (609,287 samples, 0.11%)</title><rect x="99.0494%" y="133" width="0.1144%" height="15" fill="rgb(253,11,6)"/><text x="99.2994%" y="143.50"></text></g><g><title>link (75,578,954 samples, 14.19%)</title><rect x="84.9764%" y="181" width="14.1893%" height="15" fill="rgb(247,143,39)"/><text x="85.2264%" y="191.50">link</text></g><g><title>parse_crate (1,162,643 samples, 0.22%)</title><rect x="99.1657%" y="181" width="0.2183%" height="15" fill="rgb(236,97,10)"/><text x="99.4157%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,569,059 samples, 0.48%)</title><rect x="99.4396%" y="181" width="0.4823%" height="15" fill="rgb(233,208,19)"/><text x="99.6896%" y="191.50"></text></g><g><title>all (532,646,422 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (532,646,422 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>