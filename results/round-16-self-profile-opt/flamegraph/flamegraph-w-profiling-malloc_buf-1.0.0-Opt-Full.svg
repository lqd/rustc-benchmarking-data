<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (18,117,603 samples, 16.69%)</title><rect x="0.6602%" y="181" width="16.6862%" height="15" fill="rgb(227,0,7)"/><text x="0.9102%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (178,042 samples, 0.16%)</title><rect x="17.1824%" y="165" width="0.1640%" height="15" fill="rgb(217,0,24)"/><text x="17.4324%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (165,311 samples, 0.15%)</title><rect x="17.1941%" y="149" width="0.1523%" height="15" fill="rgb(221,193,54)"/><text x="17.4441%" y="159.50"></text></g><g><title>param_env (148,122 samples, 0.14%)</title><rect x="20.5812%" y="101" width="0.1364%" height="15" fill="rgb(248,212,6)"/><text x="20.8312%" y="111.50"></text></g><g><title>is_copy_raw (204,324 samples, 0.19%)</title><rect x="21.4189%" y="69" width="0.1882%" height="15" fill="rgb(208,68,35)"/><text x="21.6689%" y="79.50"></text></g><g><title>evaluate_obligation (170,453 samples, 0.16%)</title><rect x="21.4501%" y="53" width="0.1570%" height="15" fill="rgb(232,128,0)"/><text x="21.7001%" y="63.50"></text></g><g><title>needs_drop_raw (137,293 samples, 0.13%)</title><rect x="21.6151%" y="69" width="0.1264%" height="15" fill="rgb(207,160,47)"/><text x="21.8651%" y="79.50"></text></g><g><title>is_copy_raw (130,533 samples, 0.12%)</title><rect x="21.6214%" y="53" width="0.1202%" height="15" fill="rgb(228,23,34)"/><text x="21.8714%" y="63.50"></text></g><g><title>evaluate_obligation (120,023 samples, 0.11%)</title><rect x="21.6310%" y="37" width="0.1105%" height="15" fill="rgb(218,30,26)"/><text x="21.8810%" y="47.50"></text></g><g><title>resolve_instance (204,543 samples, 0.19%)</title><rect x="21.7416%" y="69" width="0.1884%" height="15" fill="rgb(220,122,19)"/><text x="21.9916%" y="79.50"></text></g><g><title>thir_body (212,620 samples, 0.20%)</title><rect x="21.9368%" y="69" width="0.1958%" height="15" fill="rgb(250,228,42)"/><text x="22.1868%" y="79.50"></text></g><g><title>mir_const (1,945,351 samples, 1.79%)</title><rect x="20.3463%" y="117" width="1.7917%" height="15" fill="rgb(240,193,28)"/><text x="20.5963%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,542,216 samples, 1.42%)</title><rect x="20.7176%" y="101" width="1.4204%" height="15" fill="rgb(216,20,37)"/><text x="20.9676%" y="111.50"></text></g><g><title>mir_built (1,354,304 samples, 1.25%)</title><rect x="20.8907%" y="85" width="1.2473%" height="15" fill="rgb(206,188,39)"/><text x="21.1407%" y="95.50"></text></g><g><title>mir_promoted (2,450,845 samples, 2.26%)</title><rect x="20.1287%" y="133" width="2.2572%" height="15" fill="rgb(217,207,13)"/><text x="20.3787%" y="143.50">m..</text></g><g><title>mir_const_qualif (269,213 samples, 0.25%)</title><rect x="22.1380%" y="117" width="0.2479%" height="15" fill="rgb(231,73,38)"/><text x="22.3880%" y="127.50"></text></g><g><title>mir_const (205,392 samples, 0.19%)</title><rect x="22.1968%" y="101" width="0.1892%" height="15" fill="rgb(225,20,46)"/><text x="22.4468%" y="111.50"></text></g><g><title>unsafety_check_result (148,811 samples, 0.14%)</title><rect x="22.2489%" y="85" width="0.1371%" height="15" fill="rgb(210,31,41)"/><text x="22.4989%" y="95.50"></text></g><g><title>type_op_normalize_fn_sig (128,792 samples, 0.12%)</title><rect x="22.4059%" y="133" width="0.1186%" height="15" fill="rgb(221,200,47)"/><text x="22.6559%" y="143.50"></text></g><g><title>type_op_prove_predicate (518,432 samples, 0.48%)</title><rect x="22.5245%" y="133" width="0.4775%" height="15" fill="rgb(226,26,5)"/><text x="22.7745%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,984,177 samples, 5.51%)</title><rect x="17.4925%" y="165" width="5.5114%" height="15" fill="rgb(249,33,26)"/><text x="17.7425%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (5,945,806 samples, 5.48%)</title><rect x="17.5278%" y="149" width="5.4760%" height="15" fill="rgb(235,183,28)"/><text x="17.7778%" y="159.50">mir_bor..</text></g><g><title>MIR_effect_checking (167,952 samples, 0.15%)</title><rect x="23.0038%" y="165" width="0.1547%" height="15" fill="rgb(221,5,38)"/><text x="23.2538%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (128,652 samples, 0.12%)</title><rect x="23.0400%" y="149" width="0.1185%" height="15" fill="rgb(247,18,42)"/><text x="23.2900%" y="159.50"></text></g><g><title>hir_module_items (130,842 samples, 0.12%)</title><rect x="23.1585%" y="165" width="0.1205%" height="15" fill="rgb(241,131,45)"/><text x="23.4085%" y="175.50"></text></g><g><title>should_inherit_track_caller (188,512 samples, 0.17%)</title><rect x="23.4965%" y="117" width="0.1736%" height="15" fill="rgb(249,31,29)"/><text x="23.7465%" y="127.50"></text></g><g><title>codegen_fn_attrs (337,904 samples, 0.31%)</title><rect x="23.3864%" y="133" width="0.3112%" height="15" fill="rgb(225,111,53)"/><text x="23.6364%" y="143.50"></text></g><g><title>check_mod_attrs (431,005 samples, 0.40%)</title><rect x="23.3011%" y="149" width="0.3970%" height="15" fill="rgb(238,160,17)"/><text x="23.5511%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (246,152 samples, 0.23%)</title><rect x="23.7669%" y="149" width="0.2267%" height="15" fill="rgb(214,148,48)"/><text x="24.0169%" y="159.50"></text></g><g><title>misc_checking_1 (811,879 samples, 0.75%)</title><rect x="23.2796%" y="165" width="0.7477%" height="15" fill="rgb(232,36,49)"/><text x="23.5296%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (157,512 samples, 0.15%)</title><rect x="24.0296%" y="149" width="0.1451%" height="15" fill="rgb(209,103,24)"/><text x="24.2796%" y="159.50"></text></g><g><title>check_mod_liveness (125,542 samples, 0.12%)</title><rect x="24.0591%" y="133" width="0.1156%" height="15" fill="rgb(229,88,8)"/><text x="24.3091%" y="143.50"></text></g><g><title>misc_checking_2 (335,274 samples, 0.31%)</title><rect x="24.0274%" y="165" width="0.3088%" height="15" fill="rgb(213,181,19)"/><text x="24.2774%" y="175.50"></text></g><g><title>match_checking (175,322 samples, 0.16%)</title><rect x="24.1747%" y="149" width="0.1615%" height="15" fill="rgb(254,191,54)"/><text x="24.4247%" y="159.50"></text></g><g><title>check_match (162,131 samples, 0.15%)</title><rect x="24.1868%" y="133" width="0.1493%" height="15" fill="rgb(241,83,37)"/><text x="24.4368%" y="143.50"></text></g><g><title>check_private_in_public (111,222 samples, 0.10%)</title><rect x="24.3471%" y="149" width="0.1024%" height="15" fill="rgb(233,36,39)"/><text x="24.5971%" y="159.50"></text></g><g><title>death_checking (151,451 samples, 0.14%)</title><rect x="24.4496%" y="149" width="0.1395%" height="15" fill="rgb(226,3,54)"/><text x="24.6996%" y="159.50"></text></g><g><title>eval_to_const_value_raw (203,422 samples, 0.19%)</title><rect x="24.9096%" y="117" width="0.1874%" height="15" fill="rgb(245,192,40)"/><text x="25.1596%" y="127.50"></text></g><g><title>eval_to_const_value_raw (192,302 samples, 0.18%)</title><rect x="24.9198%" y="101" width="0.1771%" height="15" fill="rgb(238,167,29)"/><text x="25.1698%" y="111.50"></text></g><g><title>eval_to_allocation_raw (184,932 samples, 0.17%)</title><rect x="24.9266%" y="85" width="0.1703%" height="15" fill="rgb(232,182,51)"/><text x="25.1766%" y="95.50"></text></g><g><title>param_env (165,572 samples, 0.15%)</title><rect x="25.0969%" y="117" width="0.1525%" height="15" fill="rgb(231,60,39)"/><text x="25.3469%" y="127.50"></text></g><g><title>crate_lints (1,190,813 samples, 1.10%)</title><rect x="24.5913%" y="133" width="1.0967%" height="15" fill="rgb(208,69,12)"/><text x="24.8413%" y="143.50"></text></g><g><title>type_of (476,194 samples, 0.44%)</title><rect x="25.2494%" y="117" width="0.4386%" height="15" fill="rgb(235,93,37)"/><text x="25.4994%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (320,621 samples, 0.30%)</title><rect x="25.3927%" y="101" width="0.2953%" height="15" fill="rgb(213,116,39)"/><text x="25.6427%" y="111.50"></text></g><g><title>lint_checking (1,280,254 samples, 1.18%)</title><rect x="24.5890%" y="149" width="1.1791%" height="15" fill="rgb(222,207,29)"/><text x="24.8390%" y="159.50"></text></g><g><title>privacy_checking_modules (188,432 samples, 0.17%)</title><rect x="25.8671%" y="149" width="0.1735%" height="15" fill="rgb(206,96,30)"/><text x="26.1171%" y="159.50"></text></g><g><title>check_mod_privacy (186,232 samples, 0.17%)</title><rect x="25.8692%" y="133" width="0.1715%" height="15" fill="rgb(218,138,4)"/><text x="26.1192%" y="143.50"></text></g><g><title>misc_checking_3 (1,866,971 samples, 1.72%)</title><rect x="24.3361%" y="165" width="1.7195%" height="15" fill="rgb(250,191,14)"/><text x="24.5861%" y="175.50"></text></g><g><title>impl_parent (520,197 samples, 0.48%)</title><rect x="27.0062%" y="101" width="0.4791%" height="15" fill="rgb(239,60,40)"/><text x="27.2562%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (292,294 samples, 0.27%)</title><rect x="27.2161%" y="85" width="0.2692%" height="15" fill="rgb(206,27,48)"/><text x="27.4661%" y="95.50"></text></g><g><title>impl_trait_ref (1,712,860 samples, 1.58%)</title><rect x="27.4853%" y="101" width="1.5775%" height="15" fill="rgb(225,35,8)"/><text x="27.7353%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,482,129 samples, 1.37%)</title><rect x="27.6978%" y="85" width="1.3650%" height="15" fill="rgb(250,213,24)"/><text x="27.9478%" y="95.50"></text></g><g><title>coherent_trait (3,424,668 samples, 3.15%)</title><rect x="26.1193%" y="133" width="3.1541%" height="15" fill="rgb(247,123,22)"/><text x="26.3693%" y="143.50">coh..</text></g><g><title>specialization_graph_of (3,407,598 samples, 3.14%)</title><rect x="26.1350%" y="117" width="3.1384%" height="15" fill="rgb(231,138,38)"/><text x="26.3850%" y="127.50">spe..</text></g><g><title>trait_impls_of (226,162 samples, 0.21%)</title><rect x="29.0651%" y="101" width="0.2083%" height="15" fill="rgb(231,145,46)"/><text x="29.3151%" y="111.50"></text></g><g><title>coherence_checking (3,505,969 samples, 3.23%)</title><rect x="26.0997%" y="149" width="3.2290%" height="15" fill="rgb(251,118,11)"/><text x="26.3497%" y="159.50">coh..</text></g><g><title>associated_items (112,592 samples, 0.10%)</title><rect x="32.1006%" y="101" width="0.1037%" height="15" fill="rgb(217,147,25)"/><text x="32.3506%" y="111.50"></text></g><g><title>evaluate_obligation (407,747 samples, 0.38%)</title><rect x="32.2855%" y="101" width="0.3755%" height="15" fill="rgb(247,81,37)"/><text x="32.5355%" y="111.50"></text></g><g><title>associated_item (141,232 samples, 0.13%)</title><rect x="34.1488%" y="69" width="0.1301%" height="15" fill="rgb(209,12,38)"/><text x="34.3988%" y="79.50"></text></g><g><title>associated_items (218,423 samples, 0.20%)</title><rect x="34.0847%" y="85" width="0.2012%" height="15" fill="rgb(227,1,9)"/><text x="34.3347%" y="95.50"></text></g><g><title>evaluate_obligation (355,584 samples, 0.33%)</title><rect x="34.3411%" y="85" width="0.3275%" height="15" fill="rgb(248,47,43)"/><text x="34.5911%" y="95.50"></text></g><g><title>trait_impls_of (147,341 samples, 0.14%)</title><rect x="34.5329%" y="69" width="0.1357%" height="15" fill="rgb(221,10,30)"/><text x="34.7829%" y="79.50"></text></g><g><title>typeck (2,199,865 samples, 2.03%)</title><rect x="32.9693%" y="101" width="2.0261%" height="15" fill="rgb(210,229,1)"/><text x="33.2193%" y="111.50">t..</text></g><g><title>item_bodies_checking (6,131,929 samples, 5.65%)</title><rect x="29.3550%" y="149" width="5.6475%" height="15" fill="rgb(222,148,37)"/><text x="29.6050%" y="159.50">item_bo..</text></g><g><title>typeck_item_bodies (6,128,609 samples, 5.64%)</title><rect x="29.3580%" y="133" width="5.6444%" height="15" fill="rgb(234,67,33)"/><text x="29.6080%" y="143.50">typeck_..</text></g><g><title>typeck (6,106,359 samples, 5.62%)</title><rect x="29.3785%" y="117" width="5.6239%" height="15" fill="rgb(247,98,35)"/><text x="29.6285%" y="127.50">typeck</text></g><g><title>item_types_checking (762,159 samples, 0.70%)</title><rect x="35.0024%" y="149" width="0.7019%" height="15" fill="rgb(247,138,52)"/><text x="35.2524%" y="159.50"></text></g><g><title>check_mod_item_types (758,619 samples, 0.70%)</title><rect x="35.0057%" y="133" width="0.6987%" height="15" fill="rgb(213,79,30)"/><text x="35.2557%" y="143.50"></text></g><g><title>typeck (236,773 samples, 0.22%)</title><rect x="35.4863%" y="117" width="0.2181%" height="15" fill="rgb(246,177,23)"/><text x="35.7363%" y="127.50"></text></g><g><title>fn_sig (213,773 samples, 0.20%)</title><rect x="35.8371%" y="117" width="0.1969%" height="15" fill="rgb(230,62,27)"/><text x="36.0871%" y="127.50"></text></g><g><title>generics_of (139,643 samples, 0.13%)</title><rect x="36.0339%" y="117" width="0.1286%" height="15" fill="rgb(216,154,8)"/><text x="36.2839%" y="127.50"></text></g><g><title>late_bound_vars_map (138,281 samples, 0.13%)</title><rect x="36.3648%" y="69" width="0.1274%" height="15" fill="rgb(244,35,45)"/><text x="36.6148%" y="79.50"></text></g><g><title>resolve_lifetimes (126,171 samples, 0.12%)</title><rect x="36.3760%" y="53" width="0.1162%" height="15" fill="rgb(251,115,12)"/><text x="36.6260%" y="63.50"></text></g><g><title>explicit_predicates_of (257,473 samples, 0.24%)</title><rect x="36.2583%" y="85" width="0.2371%" height="15" fill="rgb(240,54,50)"/><text x="36.5083%" y="95.50"></text></g><g><title>predicates_of (368,193 samples, 0.34%)</title><rect x="36.1992%" y="117" width="0.3391%" height="15" fill="rgb(233,84,52)"/><text x="36.4492%" y="127.50"></text></g><g><title>predicates_defined_on (348,393 samples, 0.32%)</title><rect x="36.2174%" y="101" width="0.3209%" height="15" fill="rgb(207,117,47)"/><text x="36.4674%" y="111.50"></text></g><g><title>type_collecting (1,044,162 samples, 0.96%)</title><rect x="35.7067%" y="149" width="0.9617%" height="15" fill="rgb(249,43,39)"/><text x="35.9567%" y="159.50"></text></g><g><title>collect_mod_item_types (1,035,042 samples, 0.95%)</title><rect x="35.7151%" y="133" width="0.9533%" height="15" fill="rgb(209,38,44)"/><text x="35.9651%" y="143.50"></text></g><g><title>type_of (141,282 samples, 0.13%)</title><rect x="36.5383%" y="117" width="0.1301%" height="15" fill="rgb(236,212,23)"/><text x="36.7883%" y="127.50"></text></g><g><title>adt_sized_constraint (115,391 samples, 0.11%)</title><rect x="37.5527%" y="101" width="0.1063%" height="15" fill="rgb(242,79,21)"/><text x="37.8027%" y="111.50"></text></g><g><title>evaluate_obligation (404,714 samples, 0.37%)</title><rect x="37.3368%" y="117" width="0.3727%" height="15" fill="rgb(211,96,35)"/><text x="37.5868%" y="127.50"></text></g><g><title>implied_outlives_bounds (133,341 samples, 0.12%)</title><rect x="37.7095%" y="117" width="0.1228%" height="15" fill="rgb(253,215,40)"/><text x="37.9595%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,396,626 samples, 1.29%)</title><rect x="36.7523%" y="133" width="1.2863%" height="15" fill="rgb(211,81,21)"/><text x="37.0023%" y="143.50"></text></g><g><title>param_env (281,973 samples, 0.26%)</title><rect x="38.8280%" y="117" width="0.2597%" height="15" fill="rgb(208,190,38)"/><text x="39.0780%" y="127.50"></text></g><g><title>analysis (23,768,437 samples, 21.89%)</title><rect x="17.3464%" y="181" width="21.8906%" height="15" fill="rgb(235,213,38)"/><text x="17.5964%" y="191.50">analysis</text></g><g><title>type_check_crate (14,312,051 samples, 13.18%)</title><rect x="26.0556%" y="165" width="13.1813%" height="15" fill="rgb(237,122,38)"/><text x="26.3056%" y="175.50">type_check_crate</text></g><g><title>wf_checking (2,786,792 samples, 2.57%)</title><rect x="36.6703%" y="149" width="2.5666%" height="15" fill="rgb(244,218,35)"/><text x="36.9203%" y="159.50">wf..</text></g><g><title>check_item_well_formed (1,301,124 samples, 1.20%)</title><rect x="38.0386%" y="133" width="1.1983%" height="15" fill="rgb(240,68,47)"/><text x="38.2886%" y="143.50"></text></g><g><title>fn_abi_of_instance (194,752 samples, 0.18%)</title><rect x="40.6705%" y="149" width="0.1794%" height="15" fill="rgb(210,16,53)"/><text x="40.9205%" y="159.50"></text></g><g><title>layout_of (123,021 samples, 0.11%)</title><rect x="40.8727%" y="149" width="0.1133%" height="15" fill="rgb(235,124,12)"/><text x="41.1227%" y="159.50"></text></g><g><title>codegen_module (1,388,316 samples, 1.28%)</title><rect x="39.7211%" y="165" width="1.2786%" height="15" fill="rgb(224,169,11)"/><text x="39.9711%" y="175.50"></text></g><g><title>optimized_mir (233,874 samples, 0.22%)</title><rect x="41.1995%" y="117" width="0.2154%" height="15" fill="rgb(250,166,2)"/><text x="41.4495%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (493,475 samples, 0.45%)</title><rect x="41.0286%" y="133" width="0.4545%" height="15" fill="rgb(242,216,29)"/><text x="41.2786%" y="143.50"></text></g><g><title>monomorphization_collector (513,176 samples, 0.47%)</title><rect x="41.0267%" y="149" width="0.4726%" height="15" fill="rgb(230,116,27)"/><text x="41.2767%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (698,068 samples, 0.64%)</title><rect x="41.0004%" y="165" width="0.6429%" height="15" fill="rgb(228,99,48)"/><text x="41.2504%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (156,322 samples, 0.14%)</title><rect x="41.4994%" y="149" width="0.1440%" height="15" fill="rgb(253,11,6)"/><text x="41.7494%" y="159.50"></text></g><g><title>codegen_crate (2,630,400 samples, 2.42%)</title><rect x="39.2450%" y="181" width="2.4226%" height="15" fill="rgb(247,143,39)"/><text x="39.4950%" y="191.50">co..</text></g><g><title>codegen_module_optimize (10,906,423 samples, 10.04%)</title><rect x="41.6676%" y="181" width="10.0447%" height="15" fill="rgb(236,97,10)"/><text x="41.9176%" y="191.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (9,898,871 samples, 9.12%)</title><rect x="42.5955%" y="165" width="9.1168%" height="15" fill="rgb(233,208,19)"/><text x="42.8455%" y="175.50">LLVM_module_o..</text></g><g><title>LLVM_lto_optimize (2,949,953 samples, 2.72%)</title><rect x="52.6491%" y="165" width="2.7169%" height="15" fill="rgb(216,164,2)"/><text x="52.8991%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (7,606,305 samples, 7.01%)</title><rect x="55.3660%" y="165" width="7.0054%" height="15" fill="rgb(220,129,5)"/><text x="55.6160%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (7,442,164 samples, 6.85%)</title><rect x="55.5172%" y="149" width="6.8542%" height="15" fill="rgb(242,17,10)"/><text x="55.7672%" y="159.50">LLVM_modu..</text></g><g><title>LLVM_thin_lto_import (236,983 samples, 0.22%)</title><rect x="62.3714%" y="165" width="0.2183%" height="15" fill="rgb(242,107,0)"/><text x="62.6214%" y="175.50"></text></g><g><title>codegen_module_perform_lto (11,853,263 samples, 10.92%)</title><rect x="51.7123%" y="181" width="10.9168%" height="15" fill="rgb(251,28,31)"/><text x="51.9623%" y="191.50">codegen_module_p..</text></g><g><title>macro_expand_crate (13,674,523 samples, 12.59%)</title><rect x="62.9473%" y="165" width="12.5941%" height="15" fill="rgb(233,223,10)"/><text x="63.1973%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (13,651,923 samples, 12.57%)</title><rect x="62.9681%" y="149" width="12.5733%" height="15" fill="rgb(215,21,27)"/><text x="63.2181%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (202,613 samples, 0.19%)</title><rect x="75.3548%" y="133" width="0.1866%" height="15" fill="rgb(232,23,21)"/><text x="75.6048%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (130,451 samples, 0.12%)</title><rect x="75.5460%" y="165" width="0.1201%" height="15" fill="rgb(244,5,23)"/><text x="75.7960%" y="175.50"></text></g><g><title>finalize_macro_resolutions (148,371 samples, 0.14%)</title><rect x="75.7052%" y="149" width="0.1366%" height="15" fill="rgb(226,81,46)"/><text x="75.9552%" y="159.50"></text></g><g><title>late_resolve_crate (1,319,115 samples, 1.21%)</title><rect x="75.8419%" y="149" width="1.2149%" height="15" fill="rgb(247,70,30)"/><text x="76.0919%" y="159.50"></text></g><g><title>configure_and_expand (15,726,036 samples, 14.48%)</title><rect x="62.6291%" y="181" width="14.4836%" height="15" fill="rgb(212,68,19)"/><text x="62.8791%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,570,618 samples, 1.45%)</title><rect x="75.6661%" y="165" width="1.4465%" height="15" fill="rgb(240,187,13)"/><text x="75.9161%" y="175.50"></text></g><g><title>early_lint_checks (135,661 samples, 0.12%)</title><rect x="77.2027%" y="181" width="0.1249%" height="15" fill="rgb(223,113,26)"/><text x="77.4527%" y="191.50"></text></g><g><title>free_global_ctxt (1,448,406 samples, 1.33%)</title><rect x="77.3277%" y="181" width="1.3340%" height="15" fill="rgb(206,192,2)"/><text x="77.5777%" y="191.50"></text></g><g><title>layout_of (255,062 samples, 0.23%)</title><rect x="80.0777%" y="149" width="0.2349%" height="15" fill="rgb(241,108,4)"/><text x="80.3277%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (516,678 samples, 0.48%)</title><rect x="80.3126%" y="149" width="0.4759%" height="15" fill="rgb(247,173,49)"/><text x="80.5626%" y="159.50"></text></g><g><title>optimized_mir (1,476,848 samples, 1.36%)</title><rect x="79.4380%" y="165" width="1.3602%" height="15" fill="rgb(224,114,35)"/><text x="79.6880%" y="175.50"></text></g><g><title>generate_crate_metadata (2,343,736 samples, 2.16%)</title><rect x="78.6617%" y="181" width="2.1586%" height="15" fill="rgb(245,159,27)"/><text x="78.9117%" y="191.50">g..</text></g><g><title>hir_lowering (1,034,562 samples, 0.95%)</title><rect x="80.8202%" y="181" width="0.9528%" height="15" fill="rgb(245,172,44)"/><text x="81.0702%" y="191.50"></text></g><g><title>finish_ongoing_codegen (16,115,082 samples, 14.84%)</title><rect x="81.7847%" y="165" width="14.8419%" height="15" fill="rgb(236,23,11)"/><text x="82.0347%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (619,717 samples, 0.57%)</title><rect x="96.6266%" y="165" width="0.5708%" height="15" fill="rgb(205,117,38)"/><text x="96.8766%" y="175.50"></text></g><g><title>link_binary (614,817 samples, 0.57%)</title><rect x="96.6311%" y="149" width="0.5662%" height="15" fill="rgb(237,72,25)"/><text x="96.8811%" y="159.50"></text></g><g><title>link_rlib (379,094 samples, 0.35%)</title><rect x="96.8482%" y="133" width="0.3491%" height="15" fill="rgb(244,70,9)"/><text x="97.0982%" y="143.50"></text></g><g><title>link (16,756,059 samples, 15.43%)</title><rect x="81.7730%" y="181" width="15.4322%" height="15" fill="rgb(217,125,39)"/><text x="82.0230%" y="191.50">link</text></g><g><title>parse_crate (1,796,620 samples, 1.65%)</title><rect x="97.2053%" y="181" width="1.6547%" height="15" fill="rgb(235,36,10)"/><text x="97.4553%" y="191.50"></text></g><g><title>prepare_outputs (322,784 samples, 0.30%)</title><rect x="98.8672%" y="181" width="0.2973%" height="15" fill="rgb(251,123,47)"/><text x="99.1172%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (368,194 samples, 0.34%)</title><rect x="99.1644%" y="181" width="0.3391%" height="15" fill="rgb(221,13,13)"/><text x="99.4144%" y="191.50"></text></g><g><title>setup_global_ctxt (113,521 samples, 0.10%)</title><rect x="99.5043%" y="181" width="0.1046%" height="15" fill="rgb(238,131,9)"/><text x="99.7543%" y="191.50"></text></g><g><title>all (108,578,509 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (108,578,509 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (424,755 samples, 0.39%)</title><rect x="99.6088%" y="181" width="0.3912%" height="15" fill="rgb(242,14,37)"/><text x="99.8588%" y="191.50"></text></g></svg></svg>