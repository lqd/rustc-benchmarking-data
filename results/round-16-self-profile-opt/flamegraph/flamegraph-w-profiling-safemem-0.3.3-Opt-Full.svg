<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,812,854 samples, 13.33%)</title><rect x="0.8493%" y="245" width="13.3348%" height="15" fill="rgb(227,0,7)"/><text x="1.0993%" y="255.50">LLVM_passes</text></g><g><title>param_env (90,801 samples, 0.10%)</title><rect x="17.7379%" y="165" width="0.1025%" height="15" fill="rgb(217,0,24)"/><text x="17.9879%" y="175.50"></text></g><g><title>item_attrs (149,424 samples, 0.17%)</title><rect x="18.0387%" y="133" width="0.1687%" height="15" fill="rgb(221,193,54)"/><text x="18.2887%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (145,364 samples, 0.16%)</title><rect x="18.0433%" y="117" width="0.1641%" height="15" fill="rgb(248,212,6)"/><text x="18.2933%" y="127.50"></text></g><g><title>codegen_fn_attrs (199,264 samples, 0.22%)</title><rect x="17.9874%" y="149" width="0.2249%" height="15" fill="rgb(208,68,35)"/><text x="18.2374%" y="159.50"></text></g><g><title>is_copy_raw (120,741 samples, 0.14%)</title><rect x="18.8250%" y="133" width="0.1363%" height="15" fill="rgb(232,128,0)"/><text x="19.0750%" y="143.50"></text></g><g><title>evaluate_obligation (104,160 samples, 0.12%)</title><rect x="18.8437%" y="117" width="0.1176%" height="15" fill="rgb(207,160,47)"/><text x="19.0937%" y="127.50"></text></g><g><title>needs_drop_raw (217,251 samples, 0.25%)</title><rect x="18.9613%" y="133" width="0.2452%" height="15" fill="rgb(228,23,34)"/><text x="19.2113%" y="143.50"></text></g><g><title>is_copy_raw (209,161 samples, 0.24%)</title><rect x="18.9704%" y="117" width="0.2361%" height="15" fill="rgb(218,30,26)"/><text x="19.2204%" y="127.50"></text></g><g><title>evaluate_obligation (197,971 samples, 0.22%)</title><rect x="18.9830%" y="101" width="0.2235%" height="15" fill="rgb(220,122,19)"/><text x="19.2330%" y="111.50"></text></g><g><title>predicates_of (100,701 samples, 0.11%)</title><rect x="19.0928%" y="85" width="0.1137%" height="15" fill="rgb(250,228,42)"/><text x="19.3428%" y="95.50"></text></g><g><title>predicates_defined_on (93,621 samples, 0.11%)</title><rect x="19.1008%" y="69" width="0.1057%" height="15" fill="rgb(240,193,28)"/><text x="19.3508%" y="79.50"></text></g><g><title>thir_body (269,873 samples, 0.30%)</title><rect x="19.2332%" y="133" width="0.3046%" height="15" fill="rgb(216,20,37)"/><text x="19.4832%" y="143.50"></text></g><g><title>mir_const (1,810,469 samples, 2.04%)</title><rect x="17.4963%" y="181" width="2.0437%" height="15" fill="rgb(206,188,39)"/><text x="17.7463%" y="191.50">m..</text></g><g><title>unsafety_check_result (1,505,587 samples, 1.70%)</title><rect x="17.8404%" y="165" width="1.6996%" height="15" fill="rgb(217,207,13)"/><text x="18.0904%" y="175.50"></text></g><g><title>mir_built (1,176,093 samples, 1.33%)</title><rect x="18.2124%" y="149" width="1.3276%" height="15" fill="rgb(231,73,38)"/><text x="18.4624%" y="159.50"></text></g><g><title>mir_promoted (2,059,423 samples, 2.32%)</title><rect x="17.2251%" y="197" width="2.3247%" height="15" fill="rgb(225,20,46)"/><text x="17.4751%" y="207.50">m..</text></g><g><title>type_op_ascribe_user_type (97,942 samples, 0.11%)</title><rect x="19.5498%" y="197" width="0.1106%" height="15" fill="rgb(210,31,41)"/><text x="19.7998%" y="207.50"></text></g><g><title>type_op_prove_predicate (416,643 samples, 0.47%)</title><rect x="19.6604%" y="197" width="0.4703%" height="15" fill="rgb(221,200,47)"/><text x="19.9104%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,091,998 samples, 5.75%)</title><rect x="14.3932%" y="229" width="5.7480%" height="15" fill="rgb(226,26,5)"/><text x="14.6432%" y="239.50">MIR_bor..</text></g><g><title>mir_borrowck (5,085,468 samples, 5.74%)</title><rect x="14.4005%" y="213" width="5.7407%" height="15" fill="rgb(249,33,26)"/><text x="14.6505%" y="223.50">mir_bor..</text></g><g><title>hir_module_items (124,132 samples, 0.14%)</title><rect x="20.1460%" y="229" width="0.1401%" height="15" fill="rgb(235,183,28)"/><text x="20.3960%" y="239.50"></text></g><g><title>get_lang_items (95,851 samples, 0.11%)</title><rect x="20.4975%" y="181" width="0.1082%" height="15" fill="rgb(221,5,38)"/><text x="20.7475%" y="191.50"></text></g><g><title>codegen_fn_attrs (225,404 samples, 0.25%)</title><rect x="20.4171%" y="197" width="0.2544%" height="15" fill="rgb(247,18,42)"/><text x="20.6671%" y="207.50"></text></g><g><title>check_mod_attrs (315,384 samples, 0.36%)</title><rect x="20.3157%" y="213" width="0.3560%" height="15" fill="rgb(241,131,45)"/><text x="20.5657%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (241,932 samples, 0.27%)</title><rect x="20.7463%" y="213" width="0.2731%" height="15" fill="rgb(249,31,29)"/><text x="20.9963%" y="223.50"></text></g><g><title>misc_checking_1 (689,648 samples, 0.78%)</title><rect x="20.2866%" y="229" width="0.7785%" height="15" fill="rgb(225,111,53)"/><text x="20.5366%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (151,911 samples, 0.17%)</title><rect x="21.0676%" y="213" width="0.1715%" height="15" fill="rgb(238,160,17)"/><text x="21.3176%" y="223.50"></text></g><g><title>check_mod_liveness (119,841 samples, 0.14%)</title><rect x="21.1038%" y="197" width="0.1353%" height="15" fill="rgb(214,148,48)"/><text x="21.3538%" y="207.50"></text></g><g><title>misc_checking_2 (293,833 samples, 0.33%)</title><rect x="21.0651%" y="229" width="0.3317%" height="15" fill="rgb(232,36,49)"/><text x="21.3151%" y="239.50"></text></g><g><title>match_checking (139,692 samples, 0.16%)</title><rect x="21.2391%" y="213" width="0.1577%" height="15" fill="rgb(209,103,24)"/><text x="21.4891%" y="223.50"></text></g><g><title>check_match (134,882 samples, 0.15%)</title><rect x="21.2445%" y="197" width="0.1523%" height="15" fill="rgb(229,88,8)"/><text x="21.4945%" y="207.50"></text></g><g><title>crate_lints (103,141 samples, 0.12%)</title><rect x="21.5183%" y="197" width="0.1164%" height="15" fill="rgb(213,181,19)"/><text x="21.7683%" y="207.50"></text></g><g><title>lint_checking (172,732 samples, 0.19%)</title><rect x="21.5170%" y="213" width="0.1950%" height="15" fill="rgb(254,191,54)"/><text x="21.7670%" y="223.50"></text></g><g><title>privacy_checking_modules (126,601 samples, 0.14%)</title><rect x="21.7586%" y="213" width="0.1429%" height="15" fill="rgb(241,83,37)"/><text x="22.0086%" y="223.50"></text></g><g><title>check_mod_privacy (125,551 samples, 0.14%)</title><rect x="21.7598%" y="197" width="0.1417%" height="15" fill="rgb(233,36,39)"/><text x="22.0098%" y="207.50"></text></g><g><title>misc_checking_3 (453,835 samples, 0.51%)</title><rect x="21.3968%" y="229" width="0.5123%" height="15" fill="rgb(226,3,54)"/><text x="21.6468%" y="239.50"></text></g><g><title>adt_sized_constraint (89,870 samples, 0.10%)</title><rect x="35.0722%" y="165" width="0.1014%" height="15" fill="rgb(245,192,40)"/><text x="35.3222%" y="175.50"></text></g><g><title>associated_item (714,828 samples, 0.81%)</title><rect x="35.5058%" y="149" width="0.8069%" height="15" fill="rgb(238,167,29)"/><text x="35.7558%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (527,645 samples, 0.60%)</title><rect x="35.7171%" y="133" width="0.5956%" height="15" fill="rgb(232,182,51)"/><text x="35.9671%" y="143.50"></text></g><g><title>associated_items (1,050,642 samples, 1.19%)</title><rect x="35.1770%" y="165" width="1.1860%" height="15" fill="rgb(231,60,39)"/><text x="35.4270%" y="175.50"></text></g><g><title>impl_parent (160,581 samples, 0.18%)</title><rect x="36.8945%" y="53" width="0.1813%" height="15" fill="rgb(208,69,12)"/><text x="37.1445%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (110,570 samples, 0.12%)</title><rect x="36.9509%" y="37" width="0.1248%" height="15" fill="rgb(235,93,37)"/><text x="37.2009%" y="47.50"></text></g><g><title>impl_trait_ref (661,383 samples, 0.75%)</title><rect x="37.0757%" y="53" width="0.7466%" height="15" fill="rgb(213,116,39)"/><text x="37.3257%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (612,353 samples, 0.69%)</title><rect x="37.1311%" y="37" width="0.6912%" height="15" fill="rgb(222,207,29)"/><text x="37.3811%" y="47.50"></text></g><g><title>coherent_trait (1,152,882 samples, 1.30%)</title><rect x="36.6144%" y="85" width="1.3014%" height="15" fill="rgb(206,96,30)"/><text x="36.8644%" y="95.50"></text></g><g><title>specialization_graph_of (1,142,962 samples, 1.29%)</title><rect x="36.6256%" y="69" width="1.2902%" height="15" fill="rgb(218,138,4)"/><text x="36.8756%" y="79.50"></text></g><g><title>adt_destructor (1,163,354 samples, 1.31%)</title><rect x="36.6041%" y="117" width="1.3132%" height="15" fill="rgb(250,191,14)"/><text x="36.8541%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,161,524 samples, 1.31%)</title><rect x="36.6061%" y="101" width="1.3112%" height="15" fill="rgb(239,60,40)"/><text x="36.8561%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,192,744 samples, 1.35%)</title><rect x="36.5733%" y="133" width="1.3464%" height="15" fill="rgb(206,27,48)"/><text x="36.8233%" y="143.50"></text></g><g><title>dropck_outlives (1,310,595 samples, 1.48%)</title><rect x="36.4627%" y="165" width="1.4794%" height="15" fill="rgb(225,35,8)"/><text x="36.7127%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,232,965 samples, 1.39%)</title><rect x="36.5503%" y="149" width="1.3918%" height="15" fill="rgb(250,213,24)"/><text x="36.8003%" y="159.50"></text></g><g><title>trait_impls_of (718,588 samples, 0.81%)</title><rect x="39.0596%" y="149" width="0.8112%" height="15" fill="rgb(247,123,22)"/><text x="39.3096%" y="159.50"></text></g><g><title>implementations_of_trait (205,233 samples, 0.23%)</title><rect x="39.6391%" y="133" width="0.2317%" height="15" fill="rgb(231,138,38)"/><text x="39.8891%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (146,242 samples, 0.17%)</title><rect x="39.7057%" y="117" width="0.1651%" height="15" fill="rgb(231,145,46)"/><text x="39.9557%" y="127.50"></text></g><g><title>evaluate_obligation (1,710,729 samples, 1.93%)</title><rect x="37.9421%" y="165" width="1.9311%" height="15" fill="rgb(251,118,11)"/><text x="38.1921%" y="175.50">e..</text></g><g><title>fn_sig (201,462 samples, 0.23%)</title><rect x="39.8974%" y="165" width="0.2274%" height="15" fill="rgb(217,147,25)"/><text x="40.1474%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (181,512 samples, 0.20%)</title><rect x="39.9199%" y="149" width="0.2049%" height="15" fill="rgb(247,81,37)"/><text x="40.1699%" y="159.50"></text></g><g><title>generics_of (121,032 samples, 0.14%)</title><rect x="40.1248%" y="165" width="0.1366%" height="15" fill="rgb(209,12,38)"/><text x="40.3748%" y="175.50"></text></g><g><title>associated_item (127,971 samples, 0.14%)</title><rect x="40.2687%" y="133" width="0.1445%" height="15" fill="rgb(227,1,9)"/><text x="40.5187%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (126,861 samples, 0.14%)</title><rect x="40.2700%" y="117" width="0.1432%" height="15" fill="rgb(248,47,43)"/><text x="40.5200%" y="127.50"></text></g><g><title>impl_item_implementor_ids (135,671 samples, 0.15%)</title><rect x="40.2614%" y="165" width="0.1532%" height="15" fill="rgb(221,10,30)"/><text x="40.5114%" y="175.50"></text></g><g><title>associated_items (132,081 samples, 0.15%)</title><rect x="40.2655%" y="149" width="0.1491%" height="15" fill="rgb(210,229,1)"/><text x="40.5155%" y="159.50"></text></g><g><title>item_attrs (176,010 samples, 0.20%)</title><rect x="40.5158%" y="165" width="0.1987%" height="15" fill="rgb(222,148,37)"/><text x="40.7658%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (170,120 samples, 0.19%)</title><rect x="40.5224%" y="149" width="0.1920%" height="15" fill="rgb(234,67,33)"/><text x="40.7724%" y="159.50"></text></g><g><title>evaluate_obligation (204,033 samples, 0.23%)</title><rect x="40.9965%" y="149" width="0.2303%" height="15" fill="rgb(247,98,35)"/><text x="41.2465%" y="159.50"></text></g><g><title>method_autoderef_steps (378,005 samples, 0.43%)</title><rect x="40.8284%" y="165" width="0.4267%" height="15" fill="rgb(247,138,52)"/><text x="41.0784%" y="175.50"></text></g><g><title>explicit_predicates_of (140,901 samples, 0.16%)</title><rect x="41.5388%" y="133" width="0.1591%" height="15" fill="rgb(213,79,30)"/><text x="41.7888%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (110,961 samples, 0.13%)</title><rect x="41.5726%" y="117" width="0.1253%" height="15" fill="rgb(246,177,23)"/><text x="41.8226%" y="127.50"></text></g><g><title>predicates_of (431,484 samples, 0.49%)</title><rect x="41.2900%" y="165" width="0.4871%" height="15" fill="rgb(230,62,27)"/><text x="41.5400%" y="175.50"></text></g><g><title>predicates_defined_on (310,513 samples, 0.35%)</title><rect x="41.4266%" y="149" width="0.3505%" height="15" fill="rgb(216,154,8)"/><text x="41.6766%" y="159.50"></text></g><g><title>type_of (115,481 samples, 0.13%)</title><rect x="41.8485%" y="165" width="0.1304%" height="15" fill="rgb(244,35,45)"/><text x="42.0985%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (100,910 samples, 0.11%)</title><rect x="41.8649%" y="149" width="0.1139%" height="15" fill="rgb(251,115,12)"/><text x="42.1149%" y="159.50"></text></g><g><title>item_bodies_checking (17,739,100 samples, 20.02%)</title><rect x="21.9932%" y="213" width="20.0245%" height="15" fill="rgb(240,54,50)"/><text x="22.2432%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,734,240 samples, 20.02%)</title><rect x="21.9987%" y="197" width="20.0190%" height="15" fill="rgb(233,84,52)"/><text x="22.2487%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (17,722,160 samples, 20.01%)</title><rect x="22.0123%" y="181" width="20.0054%" height="15" fill="rgb(207,117,47)"/><text x="22.2623%" y="191.50">typeck</text></g><g><title>fn_sig (93,201 samples, 0.11%)</title><rect x="42.1023%" y="181" width="0.1052%" height="15" fill="rgb(249,43,39)"/><text x="42.3523%" y="191.50"></text></g><g><title>named_region_map (128,021 samples, 0.14%)</title><rect x="42.2638%" y="165" width="0.1445%" height="15" fill="rgb(209,38,44)"/><text x="42.5138%" y="175.50"></text></g><g><title>resolve_lifetimes (120,081 samples, 0.14%)</title><rect x="42.2728%" y="149" width="0.1356%" height="15" fill="rgb(236,212,23)"/><text x="42.5228%" y="159.50"></text></g><g><title>generics_of (186,022 samples, 0.21%)</title><rect x="42.2075%" y="181" width="0.2100%" height="15" fill="rgb(242,79,21)"/><text x="42.4575%" y="191.50"></text></g><g><title>explicit_predicates_of (128,952 samples, 0.15%)</title><rect x="42.4368%" y="149" width="0.1456%" height="15" fill="rgb(211,96,35)"/><text x="42.6868%" y="159.50"></text></g><g><title>predicates_of (153,982 samples, 0.17%)</title><rect x="42.4175%" y="181" width="0.1738%" height="15" fill="rgb(253,215,40)"/><text x="42.6675%" y="191.50"></text></g><g><title>predicates_defined_on (148,162 samples, 0.17%)</title><rect x="42.4241%" y="165" width="0.1673%" height="15" fill="rgb(211,81,21)"/><text x="42.6741%" y="175.50"></text></g><g><title>type_collecting (527,196 samples, 0.60%)</title><rect x="42.0254%" y="213" width="0.5951%" height="15" fill="rgb(208,190,38)"/><text x="42.2754%" y="223.50"></text></g><g><title>collect_mod_item_types (515,896 samples, 0.58%)</title><rect x="42.0381%" y="197" width="0.5824%" height="15" fill="rgb(235,213,38)"/><text x="42.2881%" y="207.50"></text></g><g><title>evaluate_obligation (196,621 samples, 0.22%)</title><rect x="43.3821%" y="181" width="0.2220%" height="15" fill="rgb(237,122,38)"/><text x="43.6321%" y="191.50"></text></g><g><title>implied_outlives_bounds (183,053 samples, 0.21%)</title><rect x="43.6040%" y="181" width="0.2066%" height="15" fill="rgb(244,218,35)"/><text x="43.8540%" y="191.50"></text></g><g><title>param_env (300,843 samples, 0.34%)</title><rect x="43.8122%" y="181" width="0.3396%" height="15" fill="rgb(240,68,47)"/><text x="44.0622%" y="191.50"></text></g><g><title>region_scope_tree (104,001 samples, 0.12%)</title><rect x="44.2414%" y="181" width="0.1174%" height="15" fill="rgb(210,16,53)"/><text x="44.4914%" y="191.50"></text></g><g><title>analysis (27,382,078 samples, 30.91%)</title><rect x="14.1840%" y="245" width="30.9099%" height="15" fill="rgb(235,124,12)"/><text x="14.4340%" y="255.50">analysis</text></g><g><title>type_check_crate (20,538,671 samples, 23.18%)</title><rect x="21.9091%" y="229" width="23.1848%" height="15" fill="rgb(224,169,11)"/><text x="22.1591%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,190,155 samples, 2.47%)</title><rect x="42.6216%" y="213" width="2.4723%" height="15" fill="rgb(250,166,2)"/><text x="42.8716%" y="223.50">wf..</text></g><g><title>check_item_well_formed (2,150,824 samples, 2.43%)</title><rect x="42.6660%" y="197" width="2.4279%" height="15" fill="rgb(242,216,29)"/><text x="42.9160%" y="207.50">ch..</text></g><g><title>trait_impls_of (651,218 samples, 0.74%)</title><rect x="44.3588%" y="181" width="0.7351%" height="15" fill="rgb(230,116,27)"/><text x="44.6088%" y="191.50"></text></g><g><title>implementations_of_trait (128,242 samples, 0.14%)</title><rect x="44.9491%" y="165" width="0.1448%" height="15" fill="rgb(228,99,48)"/><text x="45.1991%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (108,352 samples, 0.12%)</title><rect x="44.9716%" y="149" width="0.1223%" height="15" fill="rgb(253,11,6)"/><text x="45.2216%" y="159.50"></text></g><g><title>codegen_module (603,697 samples, 0.68%)</title><rect x="45.6290%" y="229" width="0.6815%" height="15" fill="rgb(247,143,39)"/><text x="45.8790%" y="239.50"></text></g><g><title>optimized_mir (132,901 samples, 0.15%)</title><rect x="46.4485%" y="181" width="0.1500%" height="15" fill="rgb(236,97,10)"/><text x="46.6985%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (241,622 samples, 0.27%)</title><rect x="46.3381%" y="197" width="0.2728%" height="15" fill="rgb(233,208,19)"/><text x="46.5881%" y="207.50"></text></g><g><title>monomorphization_collector (258,552 samples, 0.29%)</title><rect x="46.3357%" y="213" width="0.2919%" height="15" fill="rgb(216,164,2)"/><text x="46.5857%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (359,124 samples, 0.41%)</title><rect x="46.3110%" y="229" width="0.4054%" height="15" fill="rgb(220,129,5)"/><text x="46.5610%" y="239.50"></text></g><g><title>codegen_crate (1,499,097 samples, 1.69%)</title><rect x="45.1071%" y="245" width="1.6922%" height="15" fill="rgb(242,17,10)"/><text x="45.3571%" y="255.50"></text></g><g><title>codegen_module_optimize (5,372,930 samples, 6.07%)</title><rect x="46.7994%" y="245" width="6.0652%" height="15" fill="rgb(242,107,0)"/><text x="47.0494%" y="255.50">codegen_..</text></g><g><title>LLVM_module_optimize (4,743,413 samples, 5.35%)</title><rect x="47.5100%" y="229" width="5.3545%" height="15" fill="rgb(251,28,31)"/><text x="47.7600%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_lto_optimize (1,438,666 samples, 1.62%)</title><rect x="53.3520%" y="229" width="1.6240%" height="15" fill="rgb(233,223,10)"/><text x="53.6020%" y="239.50"></text></g><g><title>LLVM_module_codegen (4,120,986 samples, 4.65%)</title><rect x="54.9760%" y="229" width="4.6519%" height="15" fill="rgb(215,21,27)"/><text x="55.2260%" y="239.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (4,036,785 samples, 4.56%)</title><rect x="55.0710%" y="213" width="4.5569%" height="15" fill="rgb(232,23,21)"/><text x="55.3210%" y="223.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (6,027,298 samples, 6.80%)</title><rect x="52.8645%" y="245" width="6.8038%" height="15" fill="rgb(244,5,23)"/><text x="53.1145%" y="255.50">codegen_m..</text></g><g><title>AST_validation (93,701 samples, 0.11%)</title><rect x="59.9041%" y="229" width="0.1058%" height="15" fill="rgb(226,81,46)"/><text x="60.1541%" y="239.50"></text></g><g><title>crate_injection (111,721 samples, 0.13%)</title><rect x="60.0376%" y="229" width="0.1261%" height="15" fill="rgb(247,70,30)"/><text x="60.2876%" y="239.50"></text></g><g><title>metadata_load_macro (254,115 samples, 0.29%)</title><rect x="72.7184%" y="197" width="0.2869%" height="15" fill="rgb(212,68,19)"/><text x="72.9684%" y="207.50"></text></g><g><title>macro_expand_crate (14,044,159 samples, 15.85%)</title><rect x="60.1637%" y="229" width="15.8535%" height="15" fill="rgb(240,187,13)"/><text x="60.4137%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (14,028,229 samples, 15.84%)</title><rect x="60.1817%" y="213" width="15.8356%" height="15" fill="rgb(223,113,26)"/><text x="60.4317%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,668,231 samples, 3.01%)</title><rect x="73.0053%" y="197" width="3.0120%" height="15" fill="rgb(206,192,2)"/><text x="73.2553%" y="207.50">met..</text></g><g><title>metadata_register_crate (972,212 samples, 1.10%)</title><rect x="74.9198%" y="181" width="1.0975%" height="15" fill="rgb(241,108,4)"/><text x="75.1698%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (111,081 samples, 0.13%)</title><rect x="76.0220%" y="229" width="0.1254%" height="15" fill="rgb(247,173,49)"/><text x="76.2720%" y="239.50"></text></g><g><title>finalize_macro_resolutions (341,624 samples, 0.39%)</title><rect x="76.1809%" y="213" width="0.3856%" height="15" fill="rgb(224,114,35)"/><text x="76.4309%" y="223.50"></text></g><g><title>late_resolve_crate (1,963,702 samples, 2.22%)</title><rect x="76.5665%" y="213" width="2.2167%" height="15" fill="rgb(245,159,27)"/><text x="76.8165%" y="223.50">l..</text></g><g><title>configure_and_expand (16,981,612 samples, 19.17%)</title><rect x="59.6683%" y="245" width="19.1694%" height="15" fill="rgb(245,172,44)"/><text x="59.9183%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,383,377 samples, 2.69%)</title><rect x="76.1473%" y="229" width="2.6904%" height="15" fill="rgb(236,23,11)"/><text x="76.3973%" y="239.50">re..</text></g><g><title>early_lint_checks (168,052 samples, 0.19%)</title><rect x="78.9423%" y="245" width="0.1897%" height="15" fill="rgb(205,117,38)"/><text x="79.1923%" y="255.50"></text></g><g><title>free_global_ctxt (2,391,557 samples, 2.70%)</title><rect x="79.1320%" y="245" width="2.6997%" height="15" fill="rgb(237,72,25)"/><text x="79.3820%" y="255.50">fr..</text></g><g><title>layout_of (215,003 samples, 0.24%)</title><rect x="82.8608%" y="213" width="0.2427%" height="15" fill="rgb(244,70,9)"/><text x="83.1108%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (340,884 samples, 0.38%)</title><rect x="83.1035%" y="213" width="0.3848%" height="15" fill="rgb(217,125,39)"/><text x="83.3535%" y="223.50"></text></g><g><title>impl_parent (133,521 samples, 0.15%)</title><rect x="83.6952%" y="181" width="0.1507%" height="15" fill="rgb(235,36,10)"/><text x="83.9452%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (102,891 samples, 0.12%)</title><rect x="83.7298%" y="165" width="0.1161%" height="15" fill="rgb(251,123,47)"/><text x="83.9798%" y="175.50"></text></g><g><title>specialization_graph_of (725,778 samples, 0.82%)</title><rect x="83.5475%" y="197" width="0.8193%" height="15" fill="rgb(221,13,13)"/><text x="83.7975%" y="207.50"></text></g><g><title>impl_trait_ref (461,455 samples, 0.52%)</title><rect x="83.8459%" y="181" width="0.5209%" height="15" fill="rgb(238,131,9)"/><text x="84.0959%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (428,534 samples, 0.48%)</title><rect x="83.8831%" y="165" width="0.4837%" height="15" fill="rgb(211,50,8)"/><text x="84.1331%" y="175.50"></text></g><g><title>optimized_mir (1,760,700 samples, 1.99%)</title><rect x="82.3815%" y="229" width="1.9875%" height="15" fill="rgb(245,182,24)"/><text x="82.6315%" y="239.50">o..</text></g><g><title>resolve_instance (780,199 samples, 0.88%)</title><rect x="83.4883%" y="213" width="0.8807%" height="15" fill="rgb(242,14,37)"/><text x="83.7383%" y="223.50"></text></g><g><title>generate_crate_metadata (2,319,547 samples, 2.62%)</title><rect x="81.8317%" y="245" width="2.6184%" height="15" fill="rgb(246,228,12)"/><text x="82.0817%" y="255.50">ge..</text></g><g><title>hir_lowering (1,098,082 samples, 1.24%)</title><rect x="84.4501%" y="245" width="1.2396%" height="15" fill="rgb(213,55,15)"/><text x="84.7001%" y="255.50"></text></g><g><title>finish_ongoing_codegen (9,104,453 samples, 10.28%)</title><rect x="85.7115%" y="229" width="10.2774%" height="15" fill="rgb(209,9,3)"/><text x="85.9615%" y="239.50">finish_ongoing_..</text></g><g><title>link_crate (975,601 samples, 1.10%)</title><rect x="95.9889%" y="229" width="1.1013%" height="15" fill="rgb(230,59,30)"/><text x="96.2389%" y="239.50"></text></g><g><title>link_binary (958,361 samples, 1.08%)</title><rect x="96.0084%" y="213" width="1.0818%" height="15" fill="rgb(209,121,21)"/><text x="96.2584%" y="223.50"></text></g><g><title>link_rlib (596,157 samples, 0.67%)</title><rect x="96.4173%" y="197" width="0.6730%" height="15" fill="rgb(220,109,13)"/><text x="96.6673%" y="207.50"></text></g><g><title>link (10,111,344 samples, 11.41%)</title><rect x="85.6896%" y="245" width="11.4140%" height="15" fill="rgb(232,18,1)"/><text x="85.9396%" y="255.50">link</text></g><g><title>parse_crate (1,367,536 samples, 1.54%)</title><rect x="97.1037%" y="245" width="1.5437%" height="15" fill="rgb(215,41,42)"/><text x="97.3537%" y="255.50"></text></g><g><title>prepare_outputs (355,184 samples, 0.40%)</title><rect x="98.6580%" y="245" width="0.4009%" height="15" fill="rgb(224,123,36)"/><text x="98.9080%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (356,134 samples, 0.40%)</title><rect x="99.0590%" y="245" width="0.4020%" height="15" fill="rgb(240,125,3)"/><text x="99.3090%" y="255.50"></text></g><g><title>setup_global_ctxt (150,051 samples, 0.17%)</title><rect x="99.4672%" y="245" width="0.1694%" height="15" fill="rgb(205,98,50)"/><text x="99.7172%" y="255.50"></text></g><g><title>all (88,586,860 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (88,586,860 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (321,943 samples, 0.36%)</title><rect x="99.6366%" y="245" width="0.3634%" height="15" fill="rgb(213,199,42)"/><text x="99.8866%" y="255.50"></text></g></svg></svg>