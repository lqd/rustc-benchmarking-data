<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,453,763 samples, 9.78%)</title><rect x="1.1544%" y="197" width="9.7789%" height="15" fill="rgb(227,0,7)"/><text x="1.4044%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (111,842 samples, 0.17%)</title><rect x="10.7637%" y="181" width="0.1695%" height="15" fill="rgb(217,0,24)"/><text x="11.0137%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (99,941 samples, 0.15%)</title><rect x="10.7818%" y="165" width="0.1514%" height="15" fill="rgb(221,193,54)"/><text x="11.0318%" y="175.50"></text></g><g><title>param_env (70,910 samples, 0.11%)</title><rect x="15.1235%" y="117" width="0.1074%" height="15" fill="rgb(248,212,6)"/><text x="15.3735%" y="127.50"></text></g><g><title>needs_drop_raw (381,665 samples, 0.58%)</title><rect x="16.3114%" y="85" width="0.5783%" height="15" fill="rgb(208,68,35)"/><text x="16.5614%" y="95.50"></text></g><g><title>is_copy_raw (366,785 samples, 0.56%)</title><rect x="16.3340%" y="69" width="0.5558%" height="15" fill="rgb(232,128,0)"/><text x="16.5840%" y="79.50"></text></g><g><title>evaluate_obligation (347,035 samples, 0.53%)</title><rect x="16.3639%" y="53" width="0.5258%" height="15" fill="rgb(207,160,47)"/><text x="16.6139%" y="63.50"></text></g><g><title>trait_impls_of (301,424 samples, 0.46%)</title><rect x="16.4330%" y="37" width="0.4567%" height="15" fill="rgb(228,23,34)"/><text x="16.6830%" y="47.50"></text></g><g><title>resolve_instance (108,991 samples, 0.17%)</title><rect x="16.8898%" y="85" width="0.1651%" height="15" fill="rgb(218,30,26)"/><text x="17.1398%" y="95.50"></text></g><g><title>thir_body (253,391 samples, 0.38%)</title><rect x="17.0652%" y="85" width="0.3839%" height="15" fill="rgb(220,122,19)"/><text x="17.3152%" y="95.50"></text></g><g><title>mir_const (1,868,101 samples, 2.83%)</title><rect x="14.6251%" y="133" width="2.8306%" height="15" fill="rgb(250,228,42)"/><text x="14.8751%" y="143.50">mi..</text></g><g><title>unsafety_check_result (1,468,257 samples, 2.22%)</title><rect x="15.2309%" y="117" width="2.2247%" height="15" fill="rgb(240,193,28)"/><text x="15.4809%" y="127.50">u..</text></g><g><title>mir_built (1,297,915 samples, 1.97%)</title><rect x="15.4891%" y="101" width="1.9666%" height="15" fill="rgb(216,20,37)"/><text x="15.7391%" y="111.50">m..</text></g><g><title>mir_promoted (2,134,665 samples, 3.23%)</title><rect x="14.2471%" y="149" width="3.2345%" height="15" fill="rgb(206,188,39)"/><text x="14.4971%" y="159.50">mir..</text></g><g><title>type_op_normalize_fn_sig (79,161 samples, 0.12%)</title><rect x="17.4816%" y="149" width="0.1199%" height="15" fill="rgb(217,207,13)"/><text x="17.7316%" y="159.50"></text></g><g><title>MIR_borrow_checking (4,514,170 samples, 6.84%)</title><rect x="11.1811%" y="181" width="6.8399%" height="15" fill="rgb(231,73,38)"/><text x="11.4311%" y="191.50">MIR_borro..</text></g><g><title>mir_borrowck (4,486,900 samples, 6.80%)</title><rect x="11.2224%" y="165" width="6.7986%" height="15" fill="rgb(225,20,46)"/><text x="11.4724%" y="175.50">mir_borro..</text></g><g><title>type_op_prove_predicate (276,865 samples, 0.42%)</title><rect x="17.6015%" y="149" width="0.4195%" height="15" fill="rgb(210,31,41)"/><text x="17.8515%" y="159.50"></text></g><g><title>MIR_effect_checking (68,931 samples, 0.10%)</title><rect x="18.0210%" y="181" width="0.1044%" height="15" fill="rgb(221,200,47)"/><text x="18.2710%" y="191.50"></text></g><g><title>hir_module_items (135,931 samples, 0.21%)</title><rect x="18.1255%" y="181" width="0.2060%" height="15" fill="rgb(226,26,5)"/><text x="18.3755%" y="191.50"></text></g><g><title>get_lang_items (77,421 samples, 0.12%)</title><rect x="18.6175%" y="133" width="0.1173%" height="15" fill="rgb(249,33,26)"/><text x="18.8675%" y="143.50"></text></g><g><title>codegen_fn_attrs (70,681 samples, 0.11%)</title><rect x="18.8083%" y="117" width="0.1071%" height="15" fill="rgb(235,183,28)"/><text x="19.0583%" y="127.50"></text></g><g><title>should_inherit_track_caller (121,963 samples, 0.18%)</title><rect x="18.7349%" y="133" width="0.1848%" height="15" fill="rgb(221,5,38)"/><text x="18.9849%" y="143.50"></text></g><g><title>codegen_fn_attrs (287,174 samples, 0.44%)</title><rect x="18.5372%" y="149" width="0.4351%" height="15" fill="rgb(247,18,42)"/><text x="18.7872%" y="159.50"></text></g><g><title>check_mod_attrs (393,055 samples, 0.60%)</title><rect x="18.3770%" y="165" width="0.5956%" height="15" fill="rgb(241,131,45)"/><text x="18.6270%" y="175.50"></text></g><g><title>lookup_deprecation_entry (94,311 samples, 0.14%)</title><rect x="19.2756%" y="149" width="0.1429%" height="15" fill="rgb(249,31,29)"/><text x="19.5256%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (274,213 samples, 0.42%)</title><rect x="19.0939%" y="165" width="0.4155%" height="15" fill="rgb(225,111,53)"/><text x="19.3439%" y="175.50"></text></g><g><title>misc_checking_1 (817,869 samples, 1.24%)</title><rect x="18.3323%" y="181" width="1.2392%" height="15" fill="rgb(238,160,17)"/><text x="18.5823%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (139,092 samples, 0.21%)</title><rect x="19.5753%" y="165" width="0.2108%" height="15" fill="rgb(214,148,48)"/><text x="19.8253%" y="175.50"></text></g><g><title>check_mod_liveness (107,951 samples, 0.16%)</title><rect x="19.6225%" y="149" width="0.1636%" height="15" fill="rgb(232,36,49)"/><text x="19.8725%" y="159.50"></text></g><g><title>misc_checking_2 (301,364 samples, 0.46%)</title><rect x="19.5715%" y="181" width="0.4566%" height="15" fill="rgb(209,103,24)"/><text x="19.8215%" y="191.50"></text></g><g><title>match_checking (159,762 samples, 0.24%)</title><rect x="19.7861%" y="165" width="0.2421%" height="15" fill="rgb(229,88,8)"/><text x="20.0361%" y="175.50"></text></g><g><title>check_match (149,792 samples, 0.23%)</title><rect x="19.8012%" y="149" width="0.2270%" height="15" fill="rgb(213,181,19)"/><text x="20.0512%" y="159.50"></text></g><g><title>check_private_in_public (76,281 samples, 0.12%)</title><rect x="20.0467%" y="165" width="0.1156%" height="15" fill="rgb(254,191,54)"/><text x="20.2967%" y="175.50"></text></g><g><title>death_checking (154,542 samples, 0.23%)</title><rect x="20.1623%" y="165" width="0.2342%" height="15" fill="rgb(241,83,37)"/><text x="20.4123%" y="175.50"></text></g><g><title>all_diagnostic_items (70,021 samples, 0.11%)</title><rect x="21.7325%" y="133" width="0.1061%" height="15" fill="rgb(233,36,39)"/><text x="21.9825%" y="143.50"></text></g><g><title>param_env (127,372 samples, 0.19%)</title><rect x="21.8395%" y="133" width="0.1930%" height="15" fill="rgb(226,3,54)"/><text x="22.0895%" y="143.50"></text></g><g><title>trait_impls_of (496,706 samples, 0.75%)</title><rect x="22.0325%" y="133" width="0.7526%" height="15" fill="rgb(245,192,40)"/><text x="22.2825%" y="143.50"></text></g><g><title>implementations_of_trait (98,271 samples, 0.15%)</title><rect x="22.6363%" y="117" width="0.1489%" height="15" fill="rgb(238,167,29)"/><text x="22.8863%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (88,461 samples, 0.13%)</title><rect x="22.6511%" y="101" width="0.1340%" height="15" fill="rgb(232,182,51)"/><text x="22.9011%" y="111.50"></text></g><g><title>crate_lints (7,299,422 samples, 11.06%)</title><rect x="20.4015%" y="149" width="11.0602%" height="15" fill="rgb(231,60,39)"/><text x="20.6515%" y="159.50">crate_lints</text></g><g><title>type_of (5,726,270 samples, 8.68%)</title><rect x="22.7852%" y="133" width="8.6765%" height="15" fill="rgb(208,69,12)"/><text x="23.0352%" y="143.50">type_of</text></g><g><title>metadata_decode_entry_type_of (5,105,684 samples, 7.74%)</title><rect x="23.7255%" y="117" width="7.7362%" height="15" fill="rgb(235,93,37)"/><text x="23.9755%" y="127.50">metadata_de..</text></g><g><title>lint_checking (7,416,983 samples, 11.24%)</title><rect x="20.3965%" y="165" width="11.2383%" height="15" fill="rgb(213,116,39)"/><text x="20.6465%" y="175.50">lint_checking</text></g><g><title>module_lints (114,241 samples, 0.17%)</title><rect x="31.4617%" y="149" width="0.1731%" height="15" fill="rgb(222,207,29)"/><text x="31.7117%" y="159.50"></text></g><g><title>lint_mod (108,711 samples, 0.16%)</title><rect x="31.4701%" y="133" width="0.1647%" height="15" fill="rgb(206,96,30)"/><text x="31.7201%" y="143.50"></text></g><g><title>privacy_access_levels (102,111 samples, 0.15%)</title><rect x="31.6348%" y="165" width="0.1547%" height="15" fill="rgb(218,138,4)"/><text x="31.8848%" y="175.50"></text></g><g><title>privacy_checking_modules (123,912 samples, 0.19%)</title><rect x="31.7895%" y="165" width="0.1878%" height="15" fill="rgb(250,191,14)"/><text x="32.0395%" y="175.50"></text></g><g><title>check_mod_privacy (120,952 samples, 0.18%)</title><rect x="31.7940%" y="149" width="0.1833%" height="15" fill="rgb(239,60,40)"/><text x="32.0440%" y="159.50"></text></g><g><title>misc_checking_3 (7,914,639 samples, 11.99%)</title><rect x="20.0282%" y="181" width="11.9924%" height="15" fill="rgb(206,27,48)"/><text x="20.2782%" y="191.50">misc_checking_3</text></g><g><title>impl_parent (226,710 samples, 0.34%)</title><rect x="32.7582%" y="117" width="0.3435%" height="15" fill="rgb(225,35,8)"/><text x="33.0082%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (156,690 samples, 0.24%)</title><rect x="32.8643%" y="101" width="0.2374%" height="15" fill="rgb(250,213,24)"/><text x="33.1143%" y="111.50"></text></g><g><title>impl_trait_ref (835,949 samples, 1.27%)</title><rect x="33.1018%" y="117" width="1.2666%" height="15" fill="rgb(247,123,22)"/><text x="33.3518%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (764,179 samples, 1.16%)</title><rect x="33.2105%" y="101" width="1.1579%" height="15" fill="rgb(231,138,38)"/><text x="33.4605%" y="111.50"></text></g><g><title>coherent_trait (1,651,098 samples, 2.50%)</title><rect x="32.1145%" y="149" width="2.5018%" height="15" fill="rgb(231,145,46)"/><text x="32.3645%" y="159.50">co..</text></g><g><title>specialization_graph_of (1,636,868 samples, 2.48%)</title><rect x="32.1361%" y="133" width="2.4802%" height="15" fill="rgb(251,118,11)"/><text x="32.3861%" y="143.50">sp..</text></g><g><title>trait_impls_of (163,601 samples, 0.25%)</title><rect x="34.3684%" y="117" width="0.2479%" height="15" fill="rgb(217,147,25)"/><text x="34.6184%" y="127.50"></text></g><g><title>coherence_checking (1,721,979 samples, 2.61%)</title><rect x="32.0854%" y="165" width="2.6092%" height="15" fill="rgb(247,81,37)"/><text x="32.3354%" y="175.50">co..</text></g><g><title>evaluate_obligation (510,635 samples, 0.77%)</title><rect x="38.6799%" y="117" width="0.7737%" height="15" fill="rgb(209,12,38)"/><text x="38.9299%" y="127.50"></text></g><g><title>trait_impls_of (196,192 samples, 0.30%)</title><rect x="39.1564%" y="101" width="0.2973%" height="15" fill="rgb(227,1,9)"/><text x="39.4064%" y="111.50"></text></g><g><title>implementations_of_trait (77,632 samples, 0.12%)</title><rect x="39.3360%" y="85" width="0.1176%" height="15" fill="rgb(248,47,43)"/><text x="39.5860%" y="95.50"></text></g><g><title>associated_item (121,911 samples, 0.18%)</title><rect x="39.5727%" y="85" width="0.1847%" height="15" fill="rgb(221,10,30)"/><text x="39.8227%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (120,761 samples, 0.18%)</title><rect x="39.5745%" y="69" width="0.1830%" height="15" fill="rgb(210,229,1)"/><text x="39.8245%" y="79.50"></text></g><g><title>impl_item_implementor_ids (128,951 samples, 0.20%)</title><rect x="39.5639%" y="117" width="0.1954%" height="15" fill="rgb(222,148,37)"/><text x="39.8139%" y="127.50"></text></g><g><title>associated_items (126,711 samples, 0.19%)</title><rect x="39.5673%" y="101" width="0.1920%" height="15" fill="rgb(234,67,33)"/><text x="39.8173%" y="111.50"></text></g><g><title>item_attrs (159,764 samples, 0.24%)</title><rect x="39.8650%" y="117" width="0.2421%" height="15" fill="rgb(247,98,35)"/><text x="40.1150%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (155,434 samples, 0.24%)</title><rect x="39.8715%" y="101" width="0.2355%" height="15" fill="rgb(247,138,52)"/><text x="40.1215%" y="111.50"></text></g><g><title>predicates_of (127,611 samples, 0.19%)</title><rect x="40.1250%" y="117" width="0.1934%" height="15" fill="rgb(213,79,30)"/><text x="40.3750%" y="127.50"></text></g><g><title>predicates_defined_on (94,201 samples, 0.14%)</title><rect x="40.1757%" y="101" width="0.1427%" height="15" fill="rgb(246,177,23)"/><text x="40.4257%" y="111.50"></text></g><g><title>item_bodies_checking (3,792,233 samples, 5.75%)</title><rect x="34.7354%" y="165" width="5.7461%" height="15" fill="rgb(230,62,27)"/><text x="34.9854%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (3,788,593 samples, 5.74%)</title><rect x="34.7410%" y="149" width="5.7405%" height="15" fill="rgb(216,154,8)"/><text x="34.9910%" y="159.50">typeck_..</text></g><g><title>typeck (3,767,252 samples, 5.71%)</title><rect x="34.7733%" y="133" width="5.7082%" height="15" fill="rgb(244,35,45)"/><text x="35.0233%" y="143.50">typeck</text></g><g><title>item_types_checking (532,986 samples, 0.81%)</title><rect x="40.4815%" y="165" width="0.8076%" height="15" fill="rgb(251,115,12)"/><text x="40.7315%" y="175.50"></text></g><g><title>check_mod_item_types (528,746 samples, 0.80%)</title><rect x="40.4879%" y="149" width="0.8012%" height="15" fill="rgb(240,54,50)"/><text x="40.7379%" y="159.50"></text></g><g><title>fn_sig (132,404 samples, 0.20%)</title><rect x="41.5232%" y="133" width="0.2006%" height="15" fill="rgb(233,84,52)"/><text x="41.7732%" y="143.50"></text></g><g><title>late_bound_vars_map (73,602 samples, 0.11%)</title><rect x="41.6123%" y="117" width="0.1115%" height="15" fill="rgb(207,117,47)"/><text x="41.8623%" y="127.50"></text></g><g><title>generics_of (149,571 samples, 0.23%)</title><rect x="41.7239%" y="133" width="0.2266%" height="15" fill="rgb(249,43,39)"/><text x="41.9739%" y="143.50"></text></g><g><title>explicit_predicates_of (129,582 samples, 0.20%)</title><rect x="42.0788%" y="101" width="0.1963%" height="15" fill="rgb(209,38,44)"/><text x="42.3288%" y="111.50"></text></g><g><title>predicates_of (282,824 samples, 0.43%)</title><rect x="41.9950%" y="133" width="0.4285%" height="15" fill="rgb(236,212,23)"/><text x="42.2450%" y="143.50"></text></g><g><title>predicates_defined_on (262,854 samples, 0.40%)</title><rect x="42.0252%" y="117" width="0.3983%" height="15" fill="rgb(242,79,21)"/><text x="42.2752%" y="127.50"></text></g><g><title>inferred_outlives_of (97,891 samples, 0.15%)</title><rect x="42.2752%" y="101" width="0.1483%" height="15" fill="rgb(211,96,35)"/><text x="42.5252%" y="111.50"></text></g><g><title>inferred_outlives_crate (78,851 samples, 0.12%)</title><rect x="42.3040%" y="85" width="0.1195%" height="15" fill="rgb(253,215,40)"/><text x="42.5540%" y="95.50"></text></g><g><title>type_collecting (851,820 samples, 1.29%)</title><rect x="41.2924%" y="165" width="1.2907%" height="15" fill="rgb(211,81,21)"/><text x="41.5424%" y="175.50"></text></g><g><title>collect_mod_item_types (833,690 samples, 1.26%)</title><rect x="41.3198%" y="149" width="1.2632%" height="15" fill="rgb(208,190,38)"/><text x="41.5698%" y="159.50"></text></g><g><title>type_of (105,301 samples, 0.16%)</title><rect x="42.4235%" y="133" width="0.1596%" height="15" fill="rgb(235,213,38)"/><text x="42.6735%" y="143.50"></text></g><g><title>evaluate_obligation (203,032 samples, 0.31%)</title><rect x="43.3136%" y="133" width="0.3076%" height="15" fill="rgb(237,122,38)"/><text x="43.5636%" y="143.50"></text></g><g><title>implied_outlives_bounds (76,550 samples, 0.12%)</title><rect x="43.6213%" y="133" width="0.1160%" height="15" fill="rgb(244,218,35)"/><text x="43.8713%" y="143.50"></text></g><g><title>param_env (71,680 samples, 0.11%)</title><rect x="43.7372%" y="133" width="0.1086%" height="15" fill="rgb(240,68,47)"/><text x="43.9872%" y="143.50"></text></g><g><title>check_impl_item_well_formed (826,540 samples, 1.25%)</title><rect x="42.6857%" y="149" width="1.2524%" height="15" fill="rgb(210,16,53)"/><text x="42.9357%" y="159.50"></text></g><g><title>implied_outlives_bounds (72,531 samples, 0.11%)</title><rect x="45.0392%" y="133" width="0.1099%" height="15" fill="rgb(235,124,12)"/><text x="45.2892%" y="143.50"></text></g><g><title>param_env (295,712 samples, 0.45%)</title><rect x="45.1491%" y="133" width="0.4481%" height="15" fill="rgb(224,169,11)"/><text x="45.3991%" y="143.50"></text></g><g><title>predicates_of (74,830 samples, 0.11%)</title><rect x="45.5971%" y="133" width="0.1134%" height="15" fill="rgb(250,166,2)"/><text x="45.8471%" y="143.50"></text></g><g><title>analysis (23,050,788 samples, 34.93%)</title><rect x="10.9332%" y="197" width="34.9269%" height="15" fill="rgb(242,216,29)"/><text x="11.1832%" y="207.50">analysis</text></g><g><title>type_check_crate (9,133,742 samples, 13.84%)</title><rect x="32.0205%" y="181" width="13.8396%" height="15" fill="rgb(230,116,27)"/><text x="32.2705%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,161,214 samples, 3.27%)</title><rect x="42.5854%" y="165" width="3.2747%" height="15" fill="rgb(228,99,48)"/><text x="42.8354%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (1,268,513 samples, 1.92%)</title><rect x="43.9381%" y="149" width="1.9221%" height="15" fill="rgb(253,11,6)"/><text x="44.1881%" y="159.50">c..</text></g><g><title>codegen_module (314,263 samples, 0.48%)</title><rect x="47.0367%" y="181" width="0.4762%" height="15" fill="rgb(247,143,39)"/><text x="47.2867%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (68,411 samples, 0.10%)</title><rect x="47.5142%" y="181" width="0.1037%" height="15" fill="rgb(236,97,10)"/><text x="47.7642%" y="191.50"></text></g><g><title>codegen_crate (1,252,444 samples, 1.90%)</title><rect x="45.8772%" y="197" width="1.8977%" height="15" fill="rgb(233,208,19)"/><text x="46.1272%" y="207.50">c..</text></g><g><title>codegen_module_optimize (2,890,013 samples, 4.38%)</title><rect x="47.7749%" y="197" width="4.3790%" height="15" fill="rgb(216,164,2)"/><text x="48.0249%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (416,855 samples, 0.63%)</title><rect x="51.5223%" y="181" width="0.6316%" height="15" fill="rgb(220,129,5)"/><text x="51.7723%" y="191.50"></text></g><g><title>LLVM_lto_optimize (230,243 samples, 0.35%)</title><rect x="52.7182%" y="181" width="0.3489%" height="15" fill="rgb(242,17,10)"/><text x="52.9682%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,433,467 samples, 3.69%)</title><rect x="53.0671%" y="181" width="3.6872%" height="15" fill="rgb(242,107,0)"/><text x="53.3171%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,401,737 samples, 3.64%)</title><rect x="53.1152%" y="165" width="3.6392%" height="15" fill="rgb(251,28,31)"/><text x="53.3652%" y="175.50">LLVM..</text></g><g><title>codegen_module_perform_lto (3,074,314 samples, 4.66%)</title><rect x="52.1539%" y="197" width="4.6583%" height="15" fill="rgb(233,223,10)"/><text x="52.4039%" y="207.50">codeg..</text></g><g><title>AST_validation (91,051 samples, 0.14%)</title><rect x="57.1393%" y="181" width="0.1380%" height="15" fill="rgb(215,21,27)"/><text x="57.3893%" y="191.50"></text></g><g><title>crate_injection (79,261 samples, 0.12%)</title><rect x="57.3147%" y="181" width="0.1201%" height="15" fill="rgb(232,23,21)"/><text x="57.5647%" y="191.50"></text></g><g><title>metadata_load_macro (410,613 samples, 0.62%)</title><rect x="72.7755%" y="149" width="0.6222%" height="15" fill="rgb(244,5,23)"/><text x="73.0255%" y="159.50"></text></g><g><title>macro_expand_crate (13,082,807 samples, 19.82%)</title><rect x="57.4348%" y="181" width="19.8233%" height="15" fill="rgb(226,81,46)"/><text x="57.6848%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,063,527 samples, 19.79%)</title><rect x="57.4641%" y="165" width="19.7941%" height="15" fill="rgb(247,70,30)"/><text x="57.7141%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,547,789 samples, 3.86%)</title><rect x="73.3977%" y="149" width="3.8605%" height="15" fill="rgb(212,68,19)"/><text x="73.6477%" y="159.50">meta..</text></g><g><title>metadata_register_crate (927,511 samples, 1.41%)</title><rect x="75.8527%" y="133" width="1.4054%" height="15" fill="rgb(240,187,13)"/><text x="76.1027%" y="143.50"></text></g><g><title>metadata_register_crate (73,331 samples, 0.11%)</title><rect x="77.1470%" y="117" width="0.1111%" height="15" fill="rgb(223,113,26)"/><text x="77.3970%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (120,671 samples, 0.18%)</title><rect x="77.2654%" y="181" width="0.1828%" height="15" fill="rgb(206,192,2)"/><text x="77.5154%" y="191.50"></text></g><g><title>finalize_macro_resolutions (245,862 samples, 0.37%)</title><rect x="77.5155%" y="165" width="0.3725%" height="15" fill="rgb(241,108,4)"/><text x="77.7655%" y="175.50"></text></g><g><title>late_resolve_crate (1,043,042 samples, 1.58%)</title><rect x="77.8880%" y="165" width="1.5804%" height="15" fill="rgb(247,173,49)"/><text x="78.1380%" y="175.50"></text></g><g><title>configure_and_expand (15,000,118 samples, 22.73%)</title><rect x="56.8121%" y="197" width="22.7284%" height="15" fill="rgb(224,114,35)"/><text x="57.0621%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,380,866 samples, 2.09%)</title><rect x="77.4483%" y="181" width="2.0923%" height="15" fill="rgb(245,159,27)"/><text x="77.6983%" y="191.50">r..</text></g><g><title>drop_ast (99,251 samples, 0.15%)</title><rect x="79.5406%" y="197" width="0.1504%" height="15" fill="rgb(245,172,44)"/><text x="79.7906%" y="207.50"></text></g><g><title>early_lint_checks (149,481 samples, 0.23%)</title><rect x="79.7084%" y="197" width="0.2265%" height="15" fill="rgb(236,23,11)"/><text x="79.9584%" y="207.50"></text></g><g><title>free_global_ctxt (2,631,880 samples, 3.99%)</title><rect x="79.9349%" y="197" width="3.9879%" height="15" fill="rgb(205,117,38)"/><text x="80.1849%" y="207.50">free..</text></g><g><title>crate_hash (117,901 samples, 0.18%)</title><rect x="84.8991%" y="181" width="0.1786%" height="15" fill="rgb(237,72,25)"/><text x="85.1491%" y="191.50"></text></g><g><title>exported_symbols (82,161 samples, 0.12%)</title><rect x="85.1640%" y="181" width="0.1245%" height="15" fill="rgb(244,70,9)"/><text x="85.4140%" y="191.50"></text></g><g><title>layout_of (99,321 samples, 0.15%)</title><rect x="86.4682%" y="165" width="0.1505%" height="15" fill="rgb(217,125,39)"/><text x="86.7182%" y="175.50"></text></g><g><title>needs_drop_raw (88,161 samples, 0.13%)</title><rect x="87.6371%" y="149" width="0.1336%" height="15" fill="rgb(235,36,10)"/><text x="87.8871%" y="159.50"></text></g><g><title>is_copy_raw (75,231 samples, 0.11%)</title><rect x="87.6567%" y="133" width="0.1140%" height="15" fill="rgb(251,123,47)"/><text x="87.9067%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (764,517 samples, 1.16%)</title><rect x="86.6187%" y="165" width="1.1584%" height="15" fill="rgb(221,13,13)"/><text x="86.8687%" y="175.50"></text></g><g><title>optimized_mir (1,595,677 samples, 2.42%)</title><rect x="85.4166%" y="181" width="2.4178%" height="15" fill="rgb(238,131,9)"/><text x="85.6666%" y="191.50">op..</text></g><g><title>generate_crate_metadata (2,615,189 samples, 3.96%)</title><rect x="83.9228%" y="197" width="3.9626%" height="15" fill="rgb(211,50,8)"/><text x="84.1728%" y="207.50">gene..</text></g><g><title>hir_lowering (858,280 samples, 1.30%)</title><rect x="87.8854%" y="197" width="1.3005%" height="15" fill="rgb(245,182,24)"/><text x="88.1354%" y="207.50"></text></g><g><title>finish_ongoing_codegen (3,433,928 samples, 5.20%)</title><rect x="89.2035%" y="181" width="5.2031%" height="15" fill="rgb(242,14,37)"/><text x="89.4535%" y="191.50">finish..</text></g><g><title>link_crate (550,866 samples, 0.83%)</title><rect x="94.4066%" y="181" width="0.8347%" height="15" fill="rgb(246,228,12)"/><text x="94.6566%" y="191.50"></text></g><g><title>link_binary (538,616 samples, 0.82%)</title><rect x="94.4252%" y="165" width="0.8161%" height="15" fill="rgb(213,55,15)"/><text x="94.6752%" y="175.50"></text></g><g><title>link_rlib (317,094 samples, 0.48%)</title><rect x="94.7608%" y="149" width="0.4805%" height="15" fill="rgb(209,9,3)"/><text x="95.0108%" y="159.50"></text></g><g><title>link (4,004,584 samples, 6.07%)</title><rect x="89.1859%" y="197" width="6.0678%" height="15" fill="rgb(230,59,30)"/><text x="89.4359%" y="207.50">link</text></g><g><title>parse_crate (1,615,668 samples, 2.45%)</title><rect x="95.2537%" y="197" width="2.4481%" height="15" fill="rgb(209,121,21)"/><text x="95.5037%" y="207.50">pa..</text></g><g><title>prepare_outputs (345,084 samples, 0.52%)</title><rect x="97.7162%" y="197" width="0.5229%" height="15" fill="rgb(220,109,13)"/><text x="97.9662%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (572,226 samples, 0.87%)</title><rect x="98.2390%" y="197" width="0.8670%" height="15" fill="rgb(232,18,1)"/><text x="98.4890%" y="207.50"></text></g><g><title>setup_global_ctxt (142,482 samples, 0.22%)</title><rect x="99.1079%" y="197" width="0.2159%" height="15" fill="rgb(215,41,42)"/><text x="99.3579%" y="207.50"></text></g><g><title>all (65,997,151 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (65,997,151 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (446,305 samples, 0.68%)</title><rect x="99.3238%" y="197" width="0.6762%" height="15" fill="rgb(205,98,50)"/><text x="99.5738%" y="207.50"></text></g></svg></svg>