<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (19,878,260 samples, 5.37%)</title><rect x="0.2246%" y="197" width="5.3710%" height="15" fill="rgb(227,0,7)"/><text x="0.4746%" y="207.50">LLVM_pa..</text></g><g><title>implied_outlives_bounds (490,895 samples, 0.13%)</title><rect x="11.5195%" y="149" width="0.1326%" height="15" fill="rgb(217,0,24)"/><text x="11.7695%" y="159.50"></text></g><g><title>is_copy_raw (3,278,340 samples, 0.89%)</title><rect x="14.0641%" y="69" width="0.8858%" height="15" fill="rgb(221,193,54)"/><text x="14.3141%" y="79.50"></text></g><g><title>evaluate_obligation (2,726,599 samples, 0.74%)</title><rect x="14.2132%" y="53" width="0.7367%" height="15" fill="rgb(248,212,6)"/><text x="14.4632%" y="63.50"></text></g><g><title>needs_drop_raw (3,920,434 samples, 1.06%)</title><rect x="13.9013%" y="85" width="1.0593%" height="15" fill="rgb(208,68,35)"/><text x="14.1513%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (614,436 samples, 0.17%)</title><rect x="15.0469%" y="69" width="0.1660%" height="15" fill="rgb(232,128,0)"/><text x="15.2969%" y="79.50"></text></g><g><title>resolve_instance (1,193,124 samples, 0.32%)</title><rect x="14.9606%" y="85" width="0.3224%" height="15" fill="rgb(207,160,47)"/><text x="15.2106%" y="95.50"></text></g><g><title>thir_body (1,383,646 samples, 0.37%)</title><rect x="15.2933%" y="85" width="0.3739%" height="15" fill="rgb(228,23,34)"/><text x="15.5433%" y="95.50"></text></g><g><title>mir_const (13,594,804 samples, 3.67%)</title><rect x="12.0600%" y="133" width="3.6732%" height="15" fill="rgb(218,30,26)"/><text x="12.3100%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (12,034,568 samples, 3.25%)</title><rect x="12.4815%" y="117" width="3.2517%" height="15" fill="rgb(220,122,19)"/><text x="12.7315%" y="127.50">uns..</text></g><g><title>mir_built (11,042,370 samples, 2.98%)</title><rect x="12.7496%" y="101" width="2.9836%" height="15" fill="rgb(250,228,42)"/><text x="12.9996%" y="111.50">mir..</text></g><g><title>mir_promoted (15,035,797 samples, 4.06%)</title><rect x="11.7350%" y="149" width="4.0626%" height="15" fill="rgb(240,193,28)"/><text x="11.9850%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (2,165,877 samples, 0.59%)</title><rect x="15.7976%" y="149" width="0.5852%" height="15" fill="rgb(216,20,37)"/><text x="16.0476%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,602,589 samples, 0.43%)</title><rect x="16.3828%" y="149" width="0.4330%" height="15" fill="rgb(206,188,39)"/><text x="16.6328%" y="159.50"></text></g><g><title>normalize_projection_ty (914,440 samples, 0.25%)</title><rect x="16.5688%" y="133" width="0.2471%" height="15" fill="rgb(217,207,13)"/><text x="16.8188%" y="143.50"></text></g><g><title>type_op_normalize_predicate (602,954 samples, 0.16%)</title><rect x="16.8158%" y="149" width="0.1629%" height="15" fill="rgb(231,73,38)"/><text x="17.0658%" y="159.50"></text></g><g><title>type_op_normalize_ty (1,218,472 samples, 0.33%)</title><rect x="16.9788%" y="149" width="0.3292%" height="15" fill="rgb(225,20,46)"/><text x="17.2288%" y="159.50"></text></g><g><title>normalize_projection_ty (660,076 samples, 0.18%)</title><rect x="17.1296%" y="133" width="0.1783%" height="15" fill="rgb(210,31,41)"/><text x="17.3796%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,414,461 samples, 2.00%)</title><rect x="17.3080%" y="149" width="2.0033%" height="15" fill="rgb(221,200,47)"/><text x="17.5580%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (50,248,945 samples, 13.58%)</title><rect x="5.7375%" y="181" width="13.5770%" height="15" fill="rgb(226,26,5)"/><text x="5.9875%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (50,016,994 samples, 13.51%)</title><rect x="5.8002%" y="165" width="13.5143%" height="15" fill="rgb(249,33,26)"/><text x="6.0502%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (380,346 samples, 0.10%)</title><rect x="19.3837%" y="181" width="0.1028%" height="15" fill="rgb(235,183,28)"/><text x="19.6337%" y="191.50"></text></g><g><title>codegen_fn_attrs (551,895 samples, 0.15%)</title><rect x="19.6198%" y="149" width="0.1491%" height="15" fill="rgb(221,5,38)"/><text x="19.8698%" y="159.50"></text></g><g><title>check_mod_attrs (1,000,840 samples, 0.27%)</title><rect x="19.4985%" y="165" width="0.2704%" height="15" fill="rgb(247,18,42)"/><text x="19.7485%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (765,078 samples, 0.21%)</title><rect x="19.8759%" y="165" width="0.2067%" height="15" fill="rgb(241,131,45)"/><text x="20.1259%" y="175.50"></text></g><g><title>misc_checking_1 (2,339,506 samples, 0.63%)</title><rect x="19.4866%" y="181" width="0.6321%" height="15" fill="rgb(249,31,29)"/><text x="19.7366%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (845,619 samples, 0.23%)</title><rect x="20.1192%" y="165" width="0.2285%" height="15" fill="rgb(225,111,53)"/><text x="20.3692%" y="175.50"></text></g><g><title>check_mod_liveness (682,359 samples, 0.18%)</title><rect x="20.1633%" y="149" width="0.1844%" height="15" fill="rgb(238,160,17)"/><text x="20.4133%" y="159.50"></text></g><g><title>misc_checking_2 (1,749,789 samples, 0.47%)</title><rect x="20.1187%" y="181" width="0.4728%" height="15" fill="rgb(214,148,48)"/><text x="20.3687%" y="191.50"></text></g><g><title>match_checking (902,620 samples, 0.24%)</title><rect x="20.3476%" y="165" width="0.2439%" height="15" fill="rgb(232,36,49)"/><text x="20.5976%" y="175.50"></text></g><g><title>check_match (846,790 samples, 0.23%)</title><rect x="20.3627%" y="149" width="0.2288%" height="15" fill="rgb(209,103,24)"/><text x="20.6127%" y="159.50"></text></g><g><title>check_private_in_public (662,397 samples, 0.18%)</title><rect x="20.5944%" y="165" width="0.1790%" height="15" fill="rgb(229,88,8)"/><text x="20.8444%" y="175.50"></text></g><g><title>death_checking (1,097,082 samples, 0.30%)</title><rect x="20.7734%" y="165" width="0.2964%" height="15" fill="rgb(213,181,19)"/><text x="21.0234%" y="175.50"></text></g><g><title>param_env (821,911 samples, 0.22%)</title><rect x="21.7345%" y="133" width="0.2221%" height="15" fill="rgb(254,191,54)"/><text x="21.9845%" y="143.50"></text></g><g><title>crate_lints (4,541,020 samples, 1.23%)</title><rect x="21.0703%" y="149" width="1.2270%" height="15" fill="rgb(241,83,37)"/><text x="21.3203%" y="159.50"></text></g><g><title>type_of (1,255,904 samples, 0.34%)</title><rect x="21.9579%" y="133" width="0.3393%" height="15" fill="rgb(233,36,39)"/><text x="22.2079%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (966,920 samples, 0.26%)</title><rect x="22.0360%" y="117" width="0.2613%" height="15" fill="rgb(226,3,54)"/><text x="22.2860%" y="127.50"></text></g><g><title>lint_checking (5,532,791 samples, 1.49%)</title><rect x="21.0698%" y="165" width="1.4949%" height="15" fill="rgb(245,192,40)"/><text x="21.3198%" y="175.50"></text></g><g><title>module_lints (989,981 samples, 0.27%)</title><rect x="22.2973%" y="149" width="0.2675%" height="15" fill="rgb(238,167,29)"/><text x="22.5473%" y="159.50"></text></g><g><title>lint_mod (975,040 samples, 0.26%)</title><rect x="22.3013%" y="133" width="0.2635%" height="15" fill="rgb(232,182,51)"/><text x="22.5513%" y="143.50"></text></g><g><title>privacy_access_levels (664,618 samples, 0.18%)</title><rect x="22.5647%" y="165" width="0.1796%" height="15" fill="rgb(231,60,39)"/><text x="22.8147%" y="175.50"></text></g><g><title>privacy_checking_modules (2,418,877 samples, 0.65%)</title><rect x="22.7443%" y="165" width="0.6536%" height="15" fill="rgb(208,69,12)"/><text x="22.9943%" y="175.50"></text></g><g><title>check_mod_privacy (2,404,707 samples, 0.65%)</title><rect x="22.7481%" y="149" width="0.6497%" height="15" fill="rgb(235,93,37)"/><text x="22.9981%" y="159.50"></text></g><g><title>misc_checking_3 (10,408,855 samples, 2.81%)</title><rect x="20.5915%" y="181" width="2.8124%" height="15" fill="rgb(213,116,39)"/><text x="20.8415%" y="191.50">mi..</text></g><g><title>impl_parent (2,142,893 samples, 0.58%)</title><rect x="24.4729%" y="117" width="0.5790%" height="15" fill="rgb(222,207,29)"/><text x="24.7229%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,183,831 samples, 0.32%)</title><rect x="24.7320%" y="101" width="0.3199%" height="15" fill="rgb(206,96,30)"/><text x="24.9820%" y="111.50"></text></g><g><title>impl_trait_ref (4,847,773 samples, 1.31%)</title><rect x="25.0519%" y="117" width="1.3098%" height="15" fill="rgb(218,138,4)"/><text x="25.3019%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,908,660 samples, 1.06%)</title><rect x="25.3056%" y="101" width="1.0561%" height="15" fill="rgb(250,191,14)"/><text x="25.5556%" y="111.50"></text></g><g><title>coherent_trait (11,570,348 samples, 3.13%)</title><rect x="23.4534%" y="149" width="3.1262%" height="15" fill="rgb(239,60,40)"/><text x="23.7034%" y="159.50">coh..</text></g><g><title>specialization_graph_of (11,098,443 samples, 3.00%)</title><rect x="23.5809%" y="133" width="2.9987%" height="15" fill="rgb(206,27,48)"/><text x="23.8309%" y="143.50">spe..</text></g><g><title>trait_impls_of (758,620 samples, 0.20%)</title><rect x="26.3747%" y="117" width="0.2050%" height="15" fill="rgb(225,35,8)"/><text x="26.6247%" y="127.50"></text></g><g><title>coherence_checking (11,737,829 samples, 3.17%)</title><rect x="23.4444%" y="165" width="3.1715%" height="15" fill="rgb(250,213,24)"/><text x="23.6944%" y="175.50">coh..</text></g><g><title>associated_items (429,156 samples, 0.12%)</title><rect x="38.1790%" y="117" width="0.1160%" height="15" fill="rgb(247,123,22)"/><text x="38.4290%" y="127.50"></text></g><g><title>adt_def (456,976 samples, 0.12%)</title><rect x="38.8088%" y="85" width="0.1235%" height="15" fill="rgb(231,138,38)"/><text x="39.0588%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (453,966 samples, 0.12%)</title><rect x="38.8096%" y="69" width="0.1227%" height="15" fill="rgb(231,145,46)"/><text x="39.0596%" y="79.50"></text></g><g><title>item_attrs (415,814 samples, 0.11%)</title><rect x="38.8199%" y="53" width="0.1124%" height="15" fill="rgb(251,118,11)"/><text x="39.0699%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (412,934 samples, 0.11%)</title><rect x="38.8207%" y="37" width="0.1116%" height="15" fill="rgb(217,147,25)"/><text x="39.0707%" y="47.50"></text></g><g><title>adt_dtorck_constraint (469,535 samples, 0.13%)</title><rect x="38.9412%" y="85" width="0.1269%" height="15" fill="rgb(247,81,37)"/><text x="39.1912%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,147,503 samples, 0.31%)</title><rect x="38.7746%" y="101" width="0.3100%" height="15" fill="rgb(209,12,38)"/><text x="39.0246%" y="111.50"></text></g><g><title>dropck_outlives (3,109,564 samples, 0.84%)</title><rect x="38.3230%" y="117" width="0.8402%" height="15" fill="rgb(227,1,9)"/><text x="38.5730%" y="127.50"></text></g><g><title>evaluate_obligation (2,522,280 samples, 0.68%)</title><rect x="39.1632%" y="117" width="0.6815%" height="15" fill="rgb(248,47,43)"/><text x="39.4132%" y="127.50"></text></g><g><title>method_autoderef_steps (2,454,339 samples, 0.66%)</title><rect x="40.0709%" y="117" width="0.6631%" height="15" fill="rgb(221,10,30)"/><text x="40.3209%" y="127.50"></text></g><g><title>evaluate_obligation (882,222 samples, 0.24%)</title><rect x="40.4957%" y="101" width="0.2384%" height="15" fill="rgb(210,229,1)"/><text x="40.7457%" y="111.50"></text></g><g><title>predicates_of (423,144 samples, 0.11%)</title><rect x="40.7626%" y="117" width="0.1143%" height="15" fill="rgb(222,148,37)"/><text x="41.0126%" y="127.50"></text></g><g><title>typeck (733,478 samples, 0.20%)</title><rect x="40.9092%" y="117" width="0.1982%" height="15" fill="rgb(234,67,33)"/><text x="41.1592%" y="127.50"></text></g><g><title>item_bodies_checking (53,600,483 samples, 14.48%)</title><rect x="26.6429%" y="165" width="14.4826%" height="15" fill="rgb(247,98,35)"/><text x="26.8929%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (53,597,073 samples, 14.48%)</title><rect x="26.6438%" y="149" width="14.4817%" height="15" fill="rgb(247,138,52)"/><text x="26.8938%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (53,419,387 samples, 14.43%)</title><rect x="26.6919%" y="133" width="14.4336%" height="15" fill="rgb(213,79,30)"/><text x="26.9419%" y="143.50">typeck</text></g><g><title>item_types_checking (5,612,772 samples, 1.52%)</title><rect x="41.1255%" y="165" width="1.5165%" height="15" fill="rgb(246,177,23)"/><text x="41.3755%" y="175.50"></text></g><g><title>check_mod_item_types (5,594,652 samples, 1.51%)</title><rect x="41.1304%" y="149" width="1.5116%" height="15" fill="rgb(230,62,27)"/><text x="41.3804%" y="159.50"></text></g><g><title>fn_sig (551,386 samples, 0.15%)</title><rect x="42.8397%" y="133" width="0.1490%" height="15" fill="rgb(216,154,8)"/><text x="43.0897%" y="143.50"></text></g><g><title>is_late_bound_map (650,496 samples, 0.18%)</title><rect x="43.0616%" y="117" width="0.1758%" height="15" fill="rgb(244,35,45)"/><text x="43.3116%" y="127.50"></text></g><g><title>resolve_lifetimes (630,506 samples, 0.17%)</title><rect x="43.0670%" y="101" width="0.1704%" height="15" fill="rgb(251,115,12)"/><text x="43.3170%" y="111.50"></text></g><g><title>lint_levels (434,584 samples, 0.12%)</title><rect x="43.1200%" y="85" width="0.1174%" height="15" fill="rgb(240,54,50)"/><text x="43.3700%" y="95.50"></text></g><g><title>generics_of (1,143,984 samples, 0.31%)</title><rect x="42.9886%" y="133" width="0.3091%" height="15" fill="rgb(233,84,52)"/><text x="43.2386%" y="143.50"></text></g><g><title>late_bound_vars_map (704,600 samples, 0.19%)</title><rect x="43.6768%" y="85" width="0.1904%" height="15" fill="rgb(207,117,47)"/><text x="43.9268%" y="95.50"></text></g><g><title>resolve_lifetimes (660,130 samples, 0.18%)</title><rect x="43.6889%" y="69" width="0.1784%" height="15" fill="rgb(249,43,39)"/><text x="43.9389%" y="79.50"></text></g><g><title>explicit_predicates_of (1,902,703 samples, 0.51%)</title><rect x="43.4265%" y="101" width="0.5141%" height="15" fill="rgb(209,38,44)"/><text x="43.6765%" y="111.50"></text></g><g><title>predicates_of (3,445,143 samples, 0.93%)</title><rect x="43.3182%" y="133" width="0.9309%" height="15" fill="rgb(236,212,23)"/><text x="43.5682%" y="143.50"></text></g><g><title>predicates_defined_on (3,293,760 samples, 0.89%)</title><rect x="43.3591%" y="117" width="0.8900%" height="15" fill="rgb(242,79,21)"/><text x="43.6091%" y="127.50"></text></g><g><title>inferred_outlives_of (1,141,263 samples, 0.31%)</title><rect x="43.9406%" y="101" width="0.3084%" height="15" fill="rgb(211,96,35)"/><text x="44.1906%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,085,292 samples, 0.29%)</title><rect x="43.9558%" y="85" width="0.2932%" height="15" fill="rgb(253,215,40)"/><text x="44.2058%" y="95.50"></text></g><g><title>type_of (712,127 samples, 0.19%)</title><rect x="44.0566%" y="69" width="0.1924%" height="15" fill="rgb(211,81,21)"/><text x="44.3066%" y="79.50"></text></g><g><title>type_collecting (6,811,566 samples, 1.84%)</title><rect x="42.6441%" y="165" width="1.8405%" height="15" fill="rgb(208,190,38)"/><text x="42.8941%" y="175.50">t..</text></g><g><title>collect_mod_item_types (6,792,066 samples, 1.84%)</title><rect x="42.6494%" y="149" width="1.8352%" height="15" fill="rgb(235,213,38)"/><text x="42.8994%" y="159.50">c..</text></g><g><title>type_of (815,396 samples, 0.22%)</title><rect x="44.2643%" y="133" width="0.2203%" height="15" fill="rgb(237,122,38)"/><text x="44.5143%" y="143.50"></text></g><g><title>evaluate_obligation (2,063,681 samples, 0.56%)</title><rect x="46.7462%" y="133" width="0.5576%" height="15" fill="rgb(244,218,35)"/><text x="46.9962%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,163,373 samples, 0.31%)</title><rect x="47.3199%" y="133" width="0.3143%" height="15" fill="rgb(240,68,47)"/><text x="47.5699%" y="143.50"></text></g><g><title>param_env (1,071,089 samples, 0.29%)</title><rect x="47.6355%" y="133" width="0.2894%" height="15" fill="rgb(210,16,53)"/><text x="47.8855%" y="143.50"></text></g><g><title>region_scope_tree (556,954 samples, 0.15%)</title><rect x="47.9315%" y="133" width="0.1505%" height="15" fill="rgb(235,124,12)"/><text x="48.1815%" y="143.50"></text></g><g><title>check_impl_item_well_formed (12,762,489 samples, 3.45%)</title><rect x="44.6424%" y="149" width="3.4484%" height="15" fill="rgb(224,169,11)"/><text x="44.8924%" y="159.50">che..</text></g><g><title>implied_outlives_bounds (371,963 samples, 0.10%)</title><rect x="50.1598%" y="133" width="0.1005%" height="15" fill="rgb(250,166,2)"/><text x="50.4098%" y="143.50"></text></g><g><title>object_safety_violations (894,680 samples, 0.24%)</title><rect x="50.2616%" y="133" width="0.2417%" height="15" fill="rgb(242,216,29)"/><text x="50.5116%" y="143.50"></text></g><g><title>param_env (1,261,213 samples, 0.34%)</title><rect x="50.5035%" y="133" width="0.3408%" height="15" fill="rgb(230,116,27)"/><text x="50.7535%" y="143.50"></text></g><g><title>check_item_well_formed (10,802,141 samples, 2.92%)</title><rect x="48.0908%" y="149" width="2.9187%" height="15" fill="rgb(228,99,48)"/><text x="48.3408%" y="159.50">ch..</text></g><g><title>analysis (168,773,996 samples, 45.60%)</title><rect x="5.5956%" y="197" width="45.6019%" height="15" fill="rgb(253,11,6)"/><text x="5.8456%" y="207.50">analysis</text></g><g><title>type_check_crate (102,864,587 samples, 27.79%)</title><rect x="23.4039%" y="181" width="27.7935%" height="15" fill="rgb(247,143,39)"/><text x="23.6539%" y="191.50">type_check_crate</text></g><g><title>wf_checking (24,835,985 samples, 6.71%)</title><rect x="44.4869%" y="165" width="6.7106%" height="15" fill="rgb(236,97,10)"/><text x="44.7369%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (695,758 samples, 0.19%)</title><rect x="51.0094%" y="149" width="0.1880%" height="15" fill="rgb(233,208,19)"/><text x="51.2594%" y="159.50"></text></g><g><title>fn_abi_of_instance (579,248 samples, 0.16%)</title><rect x="51.7141%" y="165" width="0.1565%" height="15" fill="rgb(216,164,2)"/><text x="51.9641%" y="175.50"></text></g><g><title>codegen_module (2,073,023 samples, 0.56%)</title><rect x="51.3644%" y="181" width="0.5601%" height="15" fill="rgb(220,129,5)"/><text x="51.6144%" y="191.50"></text></g><g><title>optimized_mir (701,637 samples, 0.19%)</title><rect x="51.9913%" y="133" width="0.1896%" height="15" fill="rgb(242,17,10)"/><text x="52.2413%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (1,166,393 samples, 0.32%)</title><rect x="51.9309%" y="149" width="0.3152%" height="15" fill="rgb(242,107,0)"/><text x="52.1809%" y="159.50"></text></g><g><title>monomorphization_collector (1,217,414 samples, 0.33%)</title><rect x="51.9302%" y="165" width="0.3289%" height="15" fill="rgb(251,28,31)"/><text x="52.1802%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,360,205 samples, 0.37%)</title><rect x="51.9248%" y="181" width="0.3675%" height="15" fill="rgb(233,223,10)"/><text x="52.1748%" y="191.50"></text></g><g><title>codegen_crate (4,128,415 samples, 1.12%)</title><rect x="51.2002%" y="197" width="1.1155%" height="15" fill="rgb(215,21,27)"/><text x="51.4502%" y="207.50"></text></g><g><title>codegen_module_optimize (13,499,190 samples, 3.65%)</title><rect x="52.3157%" y="197" width="3.6474%" height="15" fill="rgb(232,23,21)"/><text x="52.5657%" y="207.50">code..</text></g><g><title>LLVM_module_optimize (11,907,973 samples, 3.22%)</title><rect x="52.7456%" y="181" width="3.2175%" height="15" fill="rgb(244,5,23)"/><text x="52.9956%" y="191.50">LLV..</text></g><g><title>LLVM_lto_optimize (4,389,219 samples, 1.19%)</title><rect x="56.2951%" y="181" width="1.1859%" height="15" fill="rgb(226,81,46)"/><text x="56.5451%" y="191.50"></text></g><g><title>LLVM_module_codegen (12,729,531 samples, 3.44%)</title><rect x="57.4810%" y="181" width="3.4395%" height="15" fill="rgb(247,70,30)"/><text x="57.7310%" y="191.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (12,495,718 samples, 3.38%)</title><rect x="57.5442%" y="165" width="3.3763%" height="15" fill="rgb(212,68,19)"/><text x="57.7942%" y="175.50">LLV..</text></g><g><title>codegen_module_perform_lto (18,471,974 samples, 4.99%)</title><rect x="55.9631%" y="197" width="4.9910%" height="15" fill="rgb(240,187,13)"/><text x="56.2131%" y="207.50">codege..</text></g><g><title>AST_validation (460,335 samples, 0.12%)</title><rect x="61.0158%" y="181" width="0.1244%" height="15" fill="rgb(223,113,26)"/><text x="61.2658%" y="191.50"></text></g><g><title>metadata_register_crate (10,063,442 samples, 2.72%)</title><rect x="82.2184%" y="149" width="2.7191%" height="15" fill="rgb(206,192,2)"/><text x="82.4684%" y="159.50">me..</text></g><g><title>metadata_register_crate (7,180,690 samples, 1.94%)</title><rect x="82.9973%" y="133" width="1.9402%" height="15" fill="rgb(241,108,4)"/><text x="83.2473%" y="143.50">m..</text></g><g><title>macro_expand_crate (88,418,848 samples, 23.89%)</title><rect x="61.2043%" y="181" width="23.8903%" height="15" fill="rgb(247,173,49)"/><text x="61.4543%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (88,404,887 samples, 23.89%)</title><rect x="61.2080%" y="165" width="23.8865%" height="15" fill="rgb(224,114,35)"/><text x="61.4580%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (581,499 samples, 0.16%)</title><rect x="84.9375%" y="149" width="0.1571%" height="15" fill="rgb(245,159,27)"/><text x="85.1875%" y="159.50"></text></g><g><title>late_resolve_crate (2,806,091 samples, 0.76%)</title><rect x="85.2396%" y="165" width="0.7582%" height="15" fill="rgb(245,172,44)"/><text x="85.4896%" y="175.50"></text></g><g><title>configure_and_expand (92,918,697 samples, 25.11%)</title><rect x="60.9541%" y="197" width="25.1062%" height="15" fill="rgb(236,23,11)"/><text x="61.2041%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,417,558 samples, 0.92%)</title><rect x="85.1369%" y="181" width="0.9234%" height="15" fill="rgb(205,117,38)"/><text x="85.3869%" y="191.50"></text></g><g><title>early_lint_checks (891,090 samples, 0.24%)</title><rect x="86.1647%" y="197" width="0.2408%" height="15" fill="rgb(237,72,25)"/><text x="86.4147%" y="207.50"></text></g><g><title>free_global_ctxt (4,177,217 samples, 1.13%)</title><rect x="86.4055%" y="197" width="1.1287%" height="15" fill="rgb(244,70,9)"/><text x="86.6555%" y="207.50"></text></g><g><title>layout_of (629,366 samples, 0.17%)</title><rect x="90.6712%" y="133" width="0.1701%" height="15" fill="rgb(217,125,39)"/><text x="90.9212%" y="143.50"></text></g><g><title>layout_of (1,073,659 samples, 0.29%)</title><rect x="90.5907%" y="149" width="0.2901%" height="15" fill="rgb(235,36,10)"/><text x="90.8407%" y="159.50"></text></g><g><title>layout_of (2,202,731 samples, 0.60%)</title><rect x="90.3392%" y="165" width="0.5952%" height="15" fill="rgb(251,123,47)"/><text x="90.5892%" y="175.50"></text></g><g><title>is_copy_raw (1,784,880 samples, 0.48%)</title><rect x="92.5598%" y="133" width="0.4823%" height="15" fill="rgb(221,13,13)"/><text x="92.8098%" y="143.50"></text></g><g><title>evaluate_obligation (1,440,939 samples, 0.39%)</title><rect x="92.6527%" y="117" width="0.3893%" height="15" fill="rgb(238,131,9)"/><text x="92.9027%" y="127.50"></text></g><g><title>needs_drop_raw (2,007,511 samples, 0.54%)</title><rect x="92.5084%" y="149" width="0.5424%" height="15" fill="rgb(211,50,8)"/><text x="92.7584%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,159,488 samples, 2.20%)</title><rect x="90.9344%" y="165" width="2.2047%" height="15" fill="rgb(245,182,24)"/><text x="91.1844%" y="175.50">m..</text></g><g><title>optimized_mir (15,155,296 samples, 4.09%)</title><rect x="89.0860%" y="181" width="4.0949%" height="15" fill="rgb(242,14,37)"/><text x="89.3360%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (21,048,953 samples, 5.69%)</title><rect x="87.5341%" y="197" width="5.6873%" height="15" fill="rgb(246,228,12)"/><text x="87.7841%" y="207.50">generat..</text></g><g><title>hir_lowering (6,515,672 samples, 1.76%)</title><rect x="93.2215%" y="197" width="1.7605%" height="15" fill="rgb(213,55,15)"/><text x="93.4715%" y="207.50"></text></g><g><title>finish_ongoing_codegen (14,112,706 samples, 3.81%)</title><rect x="94.9866%" y="181" width="3.8132%" height="15" fill="rgb(209,9,3)"/><text x="95.2366%" y="191.50">fini..</text></g><g><title>link_crate (1,413,816 samples, 0.38%)</title><rect x="98.7997%" y="181" width="0.3820%" height="15" fill="rgb(230,59,30)"/><text x="99.0497%" y="191.50"></text></g><g><title>link_binary (1,357,495 samples, 0.37%)</title><rect x="98.8150%" y="165" width="0.3668%" height="15" fill="rgb(209,121,21)"/><text x="99.0650%" y="175.50"></text></g><g><title>link_rlib (1,059,281 samples, 0.29%)</title><rect x="98.8955%" y="149" width="0.2862%" height="15" fill="rgb(220,109,13)"/><text x="99.1455%" y="159.50"></text></g><g><title>link (15,553,292 samples, 4.20%)</title><rect x="94.9820%" y="197" width="4.2024%" height="15" fill="rgb(232,18,1)"/><text x="95.2320%" y="207.50">link</text></g><g><title>parse_crate (939,540 samples, 0.25%)</title><rect x="99.1844%" y="197" width="0.2539%" height="15" fill="rgb(215,41,42)"/><text x="99.4344%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,212,953 samples, 0.33%)</title><rect x="99.5048%" y="197" width="0.3277%" height="15" fill="rgb(224,123,36)"/><text x="99.7548%" y="207.50"></text></g><g><title>all (370,103,272 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (370,103,272 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (535,996 samples, 0.14%)</title><rect x="99.8552%" y="197" width="0.1448%" height="15" fill="rgb(205,185,37)"/><text x="100.1052%" y="207.50"></text></g></svg></svg>