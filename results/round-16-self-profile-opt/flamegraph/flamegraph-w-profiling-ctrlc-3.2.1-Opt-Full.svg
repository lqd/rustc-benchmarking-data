<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (75,658,556 samples, 17.29%)</title><rect x="0.1289%" y="245" width="17.2901%" height="15" fill="rgb(227,0,7)"/><text x="0.3789%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (701,108 samples, 0.16%)</title><rect x="17.2587%" y="229" width="0.1602%" height="15" fill="rgb(217,0,24)"/><text x="17.5087%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (680,318 samples, 0.16%)</title><rect x="17.2635%" y="213" width="0.1555%" height="15" fill="rgb(221,193,54)"/><text x="17.5135%" y="223.50"></text></g><g><title>eval_to_const_value_raw (1,290,213 samples, 0.29%)</title><rect x="19.1421%" y="69" width="0.2948%" height="15" fill="rgb(248,212,6)"/><text x="19.3921%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,230,243 samples, 0.28%)</title><rect x="19.1558%" y="53" width="0.2811%" height="15" fill="rgb(208,68,35)"/><text x="19.4058%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,093,591 samples, 0.25%)</title><rect x="19.1870%" y="37" width="0.2499%" height="15" fill="rgb(232,128,0)"/><text x="19.4370%" y="47.50"></text></g><g><title>eval_to_const_value_raw (3,415,918 samples, 0.78%)</title><rect x="18.7672%" y="133" width="0.7806%" height="15" fill="rgb(207,160,47)"/><text x="19.0172%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,284,178 samples, 0.75%)</title><rect x="18.7973%" y="117" width="0.7505%" height="15" fill="rgb(228,23,34)"/><text x="19.0473%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,152,584 samples, 0.72%)</title><rect x="18.8273%" y="101" width="0.7205%" height="15" fill="rgb(218,30,26)"/><text x="19.0773%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,084,550 samples, 0.48%)</title><rect x="19.0714%" y="85" width="0.4764%" height="15" fill="rgb(220,122,19)"/><text x="19.3214%" y="95.50"></text></g><g><title>resolve_instance (485,075 samples, 0.11%)</title><rect x="19.4369%" y="69" width="0.1109%" height="15" fill="rgb(250,228,42)"/><text x="19.6869%" y="79.50"></text></g><g><title>needs_drop_raw (846,815 samples, 0.19%)</title><rect x="19.5628%" y="133" width="0.1935%" height="15" fill="rgb(240,193,28)"/><text x="19.8128%" y="143.50"></text></g><g><title>is_copy_raw (523,784 samples, 0.12%)</title><rect x="19.6366%" y="117" width="0.1197%" height="15" fill="rgb(216,20,37)"/><text x="19.8866%" y="127.50"></text></g><g><title>evaluate_obligation (451,494 samples, 0.10%)</title><rect x="19.6531%" y="101" width="0.1032%" height="15" fill="rgb(206,188,39)"/><text x="19.9031%" y="111.50"></text></g><g><title>param_env (961,211 samples, 0.22%)</title><rect x="19.7563%" y="133" width="0.2197%" height="15" fill="rgb(217,207,13)"/><text x="20.0063%" y="143.50"></text></g><g><title>mir_const (7,684,275 samples, 1.76%)</title><rect x="18.3397%" y="181" width="1.7561%" height="15" fill="rgb(231,73,38)"/><text x="18.5897%" y="191.50"></text></g><g><title>unsafety_check_result (7,248,180 samples, 1.66%)</title><rect x="18.4394%" y="165" width="1.6564%" height="15" fill="rgb(225,20,46)"/><text x="18.6894%" y="175.50"></text></g><g><title>mir_built (6,937,085 samples, 1.59%)</title><rect x="18.5105%" y="149" width="1.5853%" height="15" fill="rgb(210,31,41)"/><text x="18.7605%" y="159.50"></text></g><g><title>mir_promoted (8,458,197 samples, 1.93%)</title><rect x="18.2720%" y="197" width="1.9329%" height="15" fill="rgb(221,200,47)"/><text x="18.5220%" y="207.50">m..</text></g><g><title>mir_const_qualif (477,607 samples, 0.11%)</title><rect x="20.0958%" y="181" width="0.1091%" height="15" fill="rgb(226,26,5)"/><text x="20.3458%" y="191.50"></text></g><g><title>type_op_prove_predicate (696,876 samples, 0.16%)</title><rect x="20.2953%" y="197" width="0.1593%" height="15" fill="rgb(249,33,26)"/><text x="20.5453%" y="207.50"></text></g><g><title>MIR_borrow_checking (13,150,016 samples, 3.01%)</title><rect x="17.4506%" y="229" width="3.0051%" height="15" fill="rgb(235,183,28)"/><text x="17.7006%" y="239.50">MIR..</text></g><g><title>mir_borrowck (13,119,175 samples, 3.00%)</title><rect x="17.4577%" y="213" width="2.9981%" height="15" fill="rgb(221,5,38)"/><text x="17.7077%" y="223.50">mir..</text></g><g><title>misc_checking_1 (681,377 samples, 0.16%)</title><rect x="20.5088%" y="229" width="0.1557%" height="15" fill="rgb(247,18,42)"/><text x="20.7588%" y="239.50"></text></g><g><title>misc_checking_2 (908,130 samples, 0.21%)</title><rect x="20.6645%" y="229" width="0.2075%" height="15" fill="rgb(241,131,45)"/><text x="20.9145%" y="239.50"></text></g><g><title>match_checking (581,946 samples, 0.13%)</title><rect x="20.7390%" y="213" width="0.1330%" height="15" fill="rgb(249,31,29)"/><text x="20.9890%" y="223.50"></text></g><g><title>check_match (570,355 samples, 0.13%)</title><rect x="20.7417%" y="197" width="0.1303%" height="15" fill="rgb(225,111,53)"/><text x="20.9917%" y="207.50"></text></g><g><title>crate_lints (2,205,284 samples, 0.50%)</title><rect x="20.9302%" y="197" width="0.5040%" height="15" fill="rgb(238,160,17)"/><text x="21.1802%" y="207.50"></text></g><g><title>type_of (1,215,895 samples, 0.28%)</title><rect x="21.1563%" y="181" width="0.2779%" height="15" fill="rgb(214,148,48)"/><text x="21.4063%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (916,641 samples, 0.21%)</title><rect x="21.2247%" y="165" width="0.2095%" height="15" fill="rgb(232,36,49)"/><text x="21.4747%" y="175.50"></text></g><g><title>eval_to_const_value_raw (685,385 samples, 0.16%)</title><rect x="21.4980%" y="117" width="0.1566%" height="15" fill="rgb(209,103,24)"/><text x="21.7480%" y="127.50"></text></g><g><title>eval_to_const_value_raw (670,295 samples, 0.15%)</title><rect x="21.5015%" y="101" width="0.1532%" height="15" fill="rgb(229,88,8)"/><text x="21.7515%" y="111.50"></text></g><g><title>eval_to_allocation_raw (646,815 samples, 0.15%)</title><rect x="21.5068%" y="85" width="0.1478%" height="15" fill="rgb(213,181,19)"/><text x="21.7568%" y="95.50"></text></g><g><title>lint_checking (3,490,368 samples, 0.80%)</title><rect x="20.9299%" y="213" width="0.7976%" height="15" fill="rgb(254,191,54)"/><text x="21.1799%" y="223.50"></text></g><g><title>module_lints (1,283,734 samples, 0.29%)</title><rect x="21.4342%" y="197" width="0.2934%" height="15" fill="rgb(241,83,37)"/><text x="21.6842%" y="207.50"></text></g><g><title>lint_mod (1,277,724 samples, 0.29%)</title><rect x="21.4356%" y="181" width="0.2920%" height="15" fill="rgb(233,36,39)"/><text x="21.6856%" y="191.50"></text></g><g><title>layout_of (1,130,332 samples, 0.26%)</title><rect x="21.4693%" y="165" width="0.2583%" height="15" fill="rgb(226,3,54)"/><text x="21.7193%" y="175.50"></text></g><g><title>layout_of (1,113,892 samples, 0.25%)</title><rect x="21.4730%" y="149" width="0.2546%" height="15" fill="rgb(245,192,40)"/><text x="21.7230%" y="159.50"></text></g><g><title>layout_of (1,095,362 samples, 0.25%)</title><rect x="21.4772%" y="133" width="0.2503%" height="15" fill="rgb(238,167,29)"/><text x="21.7272%" y="143.50"></text></g><g><title>misc_checking_3 (4,108,665 samples, 0.94%)</title><rect x="20.8720%" y="229" width="0.9389%" height="15" fill="rgb(232,182,51)"/><text x="21.1220%" y="239.50"></text></g><g><title>impl_parent (1,253,356 samples, 0.29%)</title><rect x="22.2378%" y="165" width="0.2864%" height="15" fill="rgb(231,60,39)"/><text x="22.4878%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (791,650 samples, 0.18%)</title><rect x="22.3433%" y="149" width="0.1809%" height="15" fill="rgb(208,69,12)"/><text x="22.5933%" y="159.50"></text></g><g><title>impl_trait_ref (3,841,679 samples, 0.88%)</title><rect x="22.5242%" y="165" width="0.8779%" height="15" fill="rgb(235,93,37)"/><text x="22.7742%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,389,255 samples, 0.77%)</title><rect x="22.6276%" y="149" width="0.7745%" height="15" fill="rgb(213,116,39)"/><text x="22.8776%" y="159.50"></text></g><g><title>coherent_trait (7,272,941 samples, 1.66%)</title><rect x="21.8218%" y="197" width="1.6621%" height="15" fill="rgb(222,207,29)"/><text x="22.0718%" y="207.50"></text></g><g><title>specialization_graph_of (7,263,590 samples, 1.66%)</title><rect x="21.8240%" y="181" width="1.6599%" height="15" fill="rgb(206,96,30)"/><text x="22.0740%" y="191.50"></text></g><g><title>coherence_checking (7,312,241 samples, 1.67%)</title><rect x="21.8186%" y="213" width="1.6710%" height="15" fill="rgb(218,138,4)"/><text x="22.0686%" y="223.50"></text></g><g><title>evaluate_obligation (587,857 samples, 0.13%)</title><rect x="24.4421%" y="165" width="0.1343%" height="15" fill="rgb(250,191,14)"/><text x="24.6921%" y="175.50"></text></g><g><title>dropck_outlives (438,443 samples, 0.10%)</title><rect x="25.2749%" y="149" width="0.1002%" height="15" fill="rgb(239,60,40)"/><text x="25.5249%" y="159.50"></text></g><g><title>evaluate_obligation (642,189 samples, 0.15%)</title><rect x="25.3751%" y="149" width="0.1468%" height="15" fill="rgb(206,27,48)"/><text x="25.6251%" y="159.50"></text></g><g><title>typeck (4,442,989 samples, 1.02%)</title><rect x="24.7097%" y="165" width="1.0153%" height="15" fill="rgb(225,35,8)"/><text x="24.9597%" y="175.50"></text></g><g><title>item_bodies_checking (9,794,168 samples, 2.24%)</title><rect x="23.4931%" y="213" width="2.2382%" height="15" fill="rgb(250,213,24)"/><text x="23.7431%" y="223.50">i..</text></g><g><title>typeck_item_bodies (9,791,728 samples, 2.24%)</title><rect x="23.4937%" y="197" width="2.2377%" height="15" fill="rgb(247,123,22)"/><text x="23.7437%" y="207.50">t..</text></g><g><title>typeck (9,773,528 samples, 2.23%)</title><rect x="23.4979%" y="181" width="2.2335%" height="15" fill="rgb(231,138,38)"/><text x="23.7479%" y="191.50">t..</text></g><g><title>typeck (790,888 samples, 0.18%)</title><rect x="25.7911%" y="181" width="0.1807%" height="15" fill="rgb(231,145,46)"/><text x="26.0411%" y="191.50"></text></g><g><title>item_types_checking (1,053,292 samples, 0.24%)</title><rect x="25.7314%" y="213" width="0.2407%" height="15" fill="rgb(251,118,11)"/><text x="25.9814%" y="223.50"></text></g><g><title>check_mod_item_types (1,047,682 samples, 0.24%)</title><rect x="25.7327%" y="197" width="0.2394%" height="15" fill="rgb(217,147,25)"/><text x="25.9827%" y="207.50"></text></g><g><title>type_collecting (1,019,321 samples, 0.23%)</title><rect x="25.9724%" y="213" width="0.2329%" height="15" fill="rgb(247,81,37)"/><text x="26.2224%" y="223.50"></text></g><g><title>collect_mod_item_types (1,010,391 samples, 0.23%)</title><rect x="25.9745%" y="197" width="0.2309%" height="15" fill="rgb(209,12,38)"/><text x="26.2245%" y="207.50"></text></g><g><title>object_safety_violations (456,025 samples, 0.10%)</title><rect x="26.3384%" y="181" width="0.1042%" height="15" fill="rgb(227,1,9)"/><text x="26.5884%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,102,892 samples, 0.25%)</title><rect x="26.2175%" y="197" width="0.2520%" height="15" fill="rgb(248,47,43)"/><text x="26.4675%" y="207.50"></text></g><g><title>evaluate_obligation (555,525 samples, 0.13%)</title><rect x="26.5529%" y="181" width="0.1270%" height="15" fill="rgb(221,10,30)"/><text x="26.8029%" y="191.50"></text></g><g><title>analysis (40,934,982 samples, 9.35%)</title><rect x="17.4189%" y="245" width="9.3548%" height="15" fill="rgb(210,229,1)"/><text x="17.6689%" y="255.50">analysis</text></g><g><title>type_check_crate (21,716,241 samples, 4.96%)</title><rect x="21.8109%" y="229" width="4.9628%" height="15" fill="rgb(222,148,37)"/><text x="22.0609%" y="239.50">type_c..</text></g><g><title>wf_checking (2,485,537 samples, 0.57%)</title><rect x="26.2057%" y="213" width="0.5680%" height="15" fill="rgb(234,67,33)"/><text x="26.4557%" y="223.50"></text></g><g><title>check_item_well_formed (1,331,094 samples, 0.30%)</title><rect x="26.4695%" y="197" width="0.3042%" height="15" fill="rgb(247,98,35)"/><text x="26.7195%" y="207.50"></text></g><g><title>param_env (438,716 samples, 0.10%)</title><rect x="29.2490%" y="181" width="0.1003%" height="15" fill="rgb(247,138,52)"/><text x="29.4990%" y="191.50"></text></g><g><title>layout_of (1,171,045 samples, 0.27%)</title><rect x="29.0830%" y="197" width="0.2676%" height="15" fill="rgb(213,79,30)"/><text x="29.3330%" y="207.50"></text></g><g><title>param_env (781,877 samples, 0.18%)</title><rect x="29.3506%" y="197" width="0.1787%" height="15" fill="rgb(246,177,23)"/><text x="29.6006%" y="207.50"></text></g><g><title>fn_abi_of_instance (3,551,382 samples, 0.81%)</title><rect x="28.7442%" y="213" width="0.8116%" height="15" fill="rgb(230,62,27)"/><text x="28.9942%" y="223.50"></text></g><g><title>codegen_module (11,543,756 samples, 2.64%)</title><rect x="27.0949%" y="229" width="2.6381%" height="15" fill="rgb(216,154,8)"/><text x="27.3449%" y="239.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (438,964 samples, 0.10%)</title><rect x="30.3217%" y="165" width="0.1003%" height="15" fill="rgb(244,35,45)"/><text x="30.5717%" y="175.50"></text></g><g><title>optimized_mir (1,718,431 samples, 0.39%)</title><rect x="30.0664%" y="181" width="0.3927%" height="15" fill="rgb(251,115,12)"/><text x="30.3164%" y="191.50"></text></g><g><title>resolve_instance (897,187 samples, 0.21%)</title><rect x="30.4591%" y="181" width="0.2050%" height="15" fill="rgb(240,54,50)"/><text x="30.7091%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (4,620,721 samples, 1.06%)</title><rect x="29.7394%" y="197" width="1.0560%" height="15" fill="rgb(233,84,52)"/><text x="29.9894%" y="207.50"></text></g><g><title>vtable_entries (469,245 samples, 0.11%)</title><rect x="30.6882%" y="181" width="0.1072%" height="15" fill="rgb(207,117,47)"/><text x="30.9382%" y="191.50"></text></g><g><title>monomorphization_collector (4,651,771 samples, 1.06%)</title><rect x="29.7390%" y="213" width="1.0631%" height="15" fill="rgb(249,43,39)"/><text x="29.9890%" y="223.50"></text></g><g><title>assert_symbols_are_distinct (499,995 samples, 0.11%)</title><rect x="30.8029%" y="197" width="0.1143%" height="15" fill="rgb(209,38,44)"/><text x="31.0529%" y="207.50"></text></g><g><title>symbol_name (457,585 samples, 0.10%)</title><rect x="30.8126%" y="181" width="0.1046%" height="15" fill="rgb(236,212,23)"/><text x="31.0626%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (5,377,199 samples, 1.23%)</title><rect x="29.7339%" y="229" width="1.2288%" height="15" fill="rgb(242,79,21)"/><text x="29.9839%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (703,328 samples, 0.16%)</title><rect x="30.8021%" y="213" width="0.1607%" height="15" fill="rgb(211,96,35)"/><text x="31.0521%" y="223.50"></text></g><g><title>codegen_crate (18,396,653 samples, 4.20%)</title><rect x="26.7751%" y="245" width="4.2041%" height="15" fill="rgb(253,215,40)"/><text x="27.0251%" y="255.50">codeg..</text></g><g><title>codegen_module_optimize (81,678,444 samples, 18.67%)</title><rect x="30.9793%" y="245" width="18.6658%" height="15" fill="rgb(211,81,21)"/><text x="31.2293%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (67,839,092 samples, 15.50%)</title><rect x="34.1419%" y="229" width="15.5031%" height="15" fill="rgb(208,190,38)"/><text x="34.3919%" y="239.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (39,512,436 samples, 9.03%)</title><rect x="51.1828%" y="229" width="9.0297%" height="15" fill="rgb(235,213,38)"/><text x="51.4328%" y="239.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (79,391,950 samples, 18.14%)</title><rect x="60.2125%" y="229" width="18.1432%" height="15" fill="rgb(237,122,38)"/><text x="60.4625%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (78,090,918 samples, 17.85%)</title><rect x="60.5098%" y="213" width="17.8459%" height="15" fill="rgb(244,218,35)"/><text x="60.7598%" y="223.50">LLVM_module_codegen_emit_obj</text></g><g><title>LLVM_thin_lto_import (4,597,531 samples, 1.05%)</title><rect x="78.3558%" y="229" width="1.0507%" height="15" fill="rgb(240,68,47)"/><text x="78.6058%" y="239.50"></text></g><g><title>codegen_module_perform_lto (130,693,856 samples, 29.87%)</title><rect x="49.6450%" y="245" width="29.8671%" height="15" fill="rgb(210,16,53)"/><text x="49.8950%" y="255.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,559,878 samples, 0.36%)</title><rect x="81.1539%" y="197" width="0.3565%" height="15" fill="rgb(235,124,12)"/><text x="81.4039%" y="207.50"></text></g><g><title>metadata_register_crate (485,946 samples, 0.11%)</title><rect x="81.3993%" y="181" width="0.1111%" height="15" fill="rgb(224,169,11)"/><text x="81.6493%" y="191.50"></text></g><g><title>macro_expand_crate (8,530,405 samples, 1.95%)</title><rect x="79.5735%" y="229" width="1.9494%" height="15" fill="rgb(250,166,2)"/><text x="79.8235%" y="239.50">m..</text></g><g><title>expand_crate (8,515,435 samples, 1.95%)</title><rect x="79.5770%" y="213" width="1.9460%" height="15" fill="rgb(242,216,29)"/><text x="79.8270%" y="223.50">e..</text></g><g><title>late_resolve_crate (4,699,832 samples, 1.07%)</title><rect x="81.5569%" y="213" width="1.0740%" height="15" fill="rgb(230,116,27)"/><text x="81.8069%" y="223.50"></text></g><g><title>configure_and_expand (13,696,571 samples, 3.13%)</title><rect x="79.5122%" y="245" width="3.1300%" height="15" fill="rgb(228,99,48)"/><text x="79.7622%" y="255.50">con..</text></g><g><title>resolve_crate (4,822,493 samples, 1.10%)</title><rect x="81.5401%" y="229" width="1.1021%" height="15" fill="rgb(253,11,6)"/><text x="81.7901%" y="239.50"></text></g><g><title>free_global_ctxt (5,038,226 samples, 1.15%)</title><rect x="82.7028%" y="245" width="1.1514%" height="15" fill="rgb(247,143,39)"/><text x="82.9528%" y="255.50"></text></g><g><title>layout_of (670,357 samples, 0.15%)</title><rect x="84.2209%" y="213" width="0.1532%" height="15" fill="rgb(236,97,10)"/><text x="84.4709%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (662,549 samples, 0.15%)</title><rect x="84.3741%" y="213" width="0.1514%" height="15" fill="rgb(233,208,19)"/><text x="84.6241%" y="223.50"></text></g><g><title>optimized_mir (2,139,055 samples, 0.49%)</title><rect x="84.0494%" y="229" width="0.4888%" height="15" fill="rgb(216,164,2)"/><text x="84.2994%" y="239.50"></text></g><g><title>generate_crate_metadata (3,018,554 samples, 0.69%)</title><rect x="83.8542%" y="245" width="0.6898%" height="15" fill="rgb(220,129,5)"/><text x="84.1042%" y="255.50"></text></g><g><title>hir_lowering (836,959 samples, 0.19%)</title><rect x="84.5440%" y="245" width="0.1913%" height="15" fill="rgb(242,17,10)"/><text x="84.7940%" y="255.50"></text></g><g><title>finish_ongoing_codegen (61,347,278 samples, 14.02%)</title><rect x="84.7431%" y="229" width="14.0195%" height="15" fill="rgb(242,107,0)"/><text x="84.9931%" y="239.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,090,013 samples, 0.48%)</title><rect x="98.7626%" y="229" width="0.4776%" height="15" fill="rgb(251,28,31)"/><text x="99.0126%" y="239.50"></text></g><g><title>link_binary (2,030,592 samples, 0.46%)</title><rect x="98.7762%" y="213" width="0.4640%" height="15" fill="rgb(233,223,10)"/><text x="99.0262%" y="223.50"></text></g><g><title>link_rlib (1,227,634 samples, 0.28%)</title><rect x="98.9597%" y="197" width="0.2805%" height="15" fill="rgb(215,21,27)"/><text x="99.2097%" y="207.50"></text></g><g><title>link (63,488,712 samples, 14.51%)</title><rect x="84.7353%" y="245" width="14.5089%" height="15" fill="rgb(232,23,21)"/><text x="84.9853%" y="255.50">link</text></g><g><title>parse_crate (466,466 samples, 0.11%)</title><rect x="99.2442%" y="245" width="0.1066%" height="15" fill="rgb(244,5,23)"/><text x="99.4942%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (2,189,685 samples, 0.50%)</title><rect x="99.4024%" y="245" width="0.5004%" height="15" fill="rgb(226,81,46)"/><text x="99.6524%" y="255.50"></text></g><g><title>all (437,584,151 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (437,584,151 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>