<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,148,816 samples, 4.10%)</title><rect x="0.9199%" y="213" width="4.0994%" height="15" fill="rgb(227,0,7)"/><text x="1.1699%" y="223.50">LLVM..</text></g><g><title>codegen_generate_lto_work (123,511 samples, 0.12%)</title><rect x="4.8973%" y="197" width="0.1220%" height="15" fill="rgb(217,0,24)"/><text x="5.1473%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (104,411 samples, 0.10%)</title><rect x="4.9162%" y="181" width="0.1032%" height="15" fill="rgb(221,193,54)"/><text x="5.1662%" y="191.50"></text></g><g><title>param_env (333,105 samples, 0.33%)</title><rect x="11.0525%" y="133" width="0.3291%" height="15" fill="rgb(248,212,6)"/><text x="11.3025%" y="143.50"></text></g><g><title>item_attrs (127,481 samples, 0.13%)</title><rect x="11.6199%" y="101" width="0.1260%" height="15" fill="rgb(208,68,35)"/><text x="11.8699%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (122,231 samples, 0.12%)</title><rect x="11.6251%" y="85" width="0.1208%" height="15" fill="rgb(232,128,0)"/><text x="11.8751%" y="95.50"></text></g><g><title>codegen_fn_attrs (190,712 samples, 0.19%)</title><rect x="11.5712%" y="117" width="0.1884%" height="15" fill="rgb(207,160,47)"/><text x="11.8212%" y="127.50"></text></g><g><title>impl_polarity (235,853 samples, 0.23%)</title><rect x="12.9232%" y="37" width="0.2330%" height="15" fill="rgb(228,23,34)"/><text x="13.1732%" y="47.50"></text></g><g><title>is_copy_raw (334,663 samples, 0.33%)</title><rect x="12.8392%" y="69" width="0.3307%" height="15" fill="rgb(218,30,26)"/><text x="13.0892%" y="79.50"></text></g><g><title>evaluate_obligation (321,163 samples, 0.32%)</title><rect x="12.8525%" y="53" width="0.3173%" height="15" fill="rgb(220,122,19)"/><text x="13.1025%" y="63.50"></text></g><g><title>adt_drop_tys (456,884 samples, 0.45%)</title><rect x="12.7603%" y="85" width="0.4514%" height="15" fill="rgb(250,228,42)"/><text x="13.0103%" y="95.50"></text></g><g><title>is_copy_raw (580,207 samples, 0.57%)</title><rect x="13.2118%" y="85" width="0.5733%" height="15" fill="rgb(240,193,28)"/><text x="13.4618%" y="95.50"></text></g><g><title>evaluate_obligation (527,025 samples, 0.52%)</title><rect x="13.2643%" y="69" width="0.5207%" height="15" fill="rgb(216,20,37)"/><text x="13.5143%" y="79.50"></text></g><g><title>needs_drop_raw (1,104,493 samples, 1.09%)</title><rect x="12.7025%" y="101" width="1.0913%" height="15" fill="rgb(206,188,39)"/><text x="12.9525%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (348,965 samples, 0.34%)</title><rect x="13.9455%" y="85" width="0.3448%" height="15" fill="rgb(217,207,13)"/><text x="14.1955%" y="95.50"></text></g><g><title>impl_parent (202,540 samples, 0.20%)</title><rect x="14.6143%" y="69" width="0.2001%" height="15" fill="rgb(231,73,38)"/><text x="14.8643%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (132,260 samples, 0.13%)</title><rect x="14.6838%" y="53" width="0.1307%" height="15" fill="rgb(225,20,46)"/><text x="14.9338%" y="63.50"></text></g><g><title>specialization_graph_of (963,811 samples, 0.95%)</title><rect x="14.3289%" y="85" width="0.9523%" height="15" fill="rgb(210,31,41)"/><text x="14.5789%" y="95.50"></text></g><g><title>impl_trait_ref (472,448 samples, 0.47%)</title><rect x="14.8144%" y="69" width="0.4668%" height="15" fill="rgb(221,200,47)"/><text x="15.0644%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (402,546 samples, 0.40%)</title><rect x="14.8835%" y="53" width="0.3978%" height="15" fill="rgb(226,26,5)"/><text x="15.1335%" y="63.50"></text></g><g><title>resolve_instance (1,569,038 samples, 1.55%)</title><rect x="13.7939%" y="101" width="1.5503%" height="15" fill="rgb(249,33,26)"/><text x="14.0439%" y="111.50"></text></g><g><title>thir_body (359,923 samples, 0.36%)</title><rect x="15.3547%" y="101" width="0.3556%" height="15" fill="rgb(235,183,28)"/><text x="15.6047%" y="111.50"></text></g><g><title>mir_const (5,089,648 samples, 5.03%)</title><rect x="10.7174%" y="149" width="5.0290%" height="15" fill="rgb(221,5,38)"/><text x="10.9674%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (4,417,389 samples, 4.36%)</title><rect x="11.3816%" y="133" width="4.3648%" height="15" fill="rgb(247,18,42)"/><text x="11.6316%" y="143.50">unsaf..</text></g><g><title>mir_built (4,034,845 samples, 3.99%)</title><rect x="11.7596%" y="117" width="3.9868%" height="15" fill="rgb(241,131,45)"/><text x="12.0096%" y="127.50">mir_..</text></g><g><title>mir_promoted (5,509,274 samples, 5.44%)</title><rect x="10.3726%" y="165" width="5.4436%" height="15" fill="rgb(249,31,29)"/><text x="10.6226%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (298,223 samples, 0.29%)</title><rect x="15.8163%" y="165" width="0.2947%" height="15" fill="rgb(225,111,53)"/><text x="16.0663%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (502,613 samples, 0.50%)</title><rect x="16.1109%" y="165" width="0.4966%" height="15" fill="rgb(238,160,17)"/><text x="16.3609%" y="175.50"></text></g><g><title>normalize_projection_ty (272,511 samples, 0.27%)</title><rect x="16.3383%" y="149" width="0.2693%" height="15" fill="rgb(214,148,48)"/><text x="16.5883%" y="159.50"></text></g><g><title>type_op_normalize_predicate (139,162 samples, 0.14%)</title><rect x="16.6076%" y="165" width="0.1375%" height="15" fill="rgb(232,36,49)"/><text x="16.8576%" y="175.50"></text></g><g><title>type_op_normalize_ty (405,425 samples, 0.40%)</title><rect x="16.7451%" y="165" width="0.4006%" height="15" fill="rgb(209,103,24)"/><text x="16.9951%" y="175.50"></text></g><g><title>normalize_projection_ty (225,694 samples, 0.22%)</title><rect x="16.9227%" y="149" width="0.2230%" height="15" fill="rgb(229,88,8)"/><text x="17.1727%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,479,478 samples, 1.46%)</title><rect x="17.1457%" y="165" width="1.4619%" height="15" fill="rgb(213,181,19)"/><text x="17.3957%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,398,592 samples, 13.24%)</title><rect x="5.3711%" y="197" width="13.2390%" height="15" fill="rgb(254,191,54)"/><text x="5.6211%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,363,852 samples, 13.20%)</title><rect x="5.4055%" y="181" width="13.2047%" height="15" fill="rgb(241,83,37)"/><text x="5.6555%" y="191.50">mir_borrowck</text></g><g><title>MIR_effect_checking (132,072 samples, 0.13%)</title><rect x="18.6101%" y="197" width="0.1305%" height="15" fill="rgb(233,36,39)"/><text x="18.8601%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (104,772 samples, 0.10%)</title><rect x="18.6371%" y="181" width="0.1035%" height="15" fill="rgb(226,3,54)"/><text x="18.8871%" y="191.50"></text></g><g><title>hir_module_items (272,293 samples, 0.27%)</title><rect x="18.7406%" y="197" width="0.2690%" height="15" fill="rgb(245,192,40)"/><text x="18.9906%" y="207.50"></text></g><g><title>get_lang_items (118,852 samples, 0.12%)</title><rect x="19.3835%" y="149" width="0.1174%" height="15" fill="rgb(238,167,29)"/><text x="19.6335%" y="159.50"></text></g><g><title>codegen_fn_attrs (135,151 samples, 0.13%)</title><rect x="19.6092%" y="133" width="0.1335%" height="15" fill="rgb(232,182,51)"/><text x="19.8592%" y="143.50"></text></g><g><title>should_inherit_track_caller (250,444 samples, 0.25%)</title><rect x="19.5010%" y="149" width="0.2475%" height="15" fill="rgb(231,60,39)"/><text x="19.7510%" y="159.50"></text></g><g><title>codegen_fn_attrs (508,627 samples, 0.50%)</title><rect x="19.2802%" y="165" width="0.5026%" height="15" fill="rgb(208,69,12)"/><text x="19.5302%" y="175.50"></text></g><g><title>check_mod_attrs (746,399 samples, 0.74%)</title><rect x="19.0454%" y="181" width="0.7375%" height="15" fill="rgb(235,93,37)"/><text x="19.2954%" y="191.50"></text></g><g><title>check_mod_const_bodies (111,492 samples, 0.11%)</title><rect x="19.7829%" y="181" width="0.1102%" height="15" fill="rgb(213,116,39)"/><text x="20.0329%" y="191.50"></text></g><g><title>lookup_deprecation_entry (189,823 samples, 0.19%)</title><rect x="20.1880%" y="165" width="0.1876%" height="15" fill="rgb(222,207,29)"/><text x="20.4380%" y="175.50"></text></g><g><title>stability_index (104,241 samples, 0.10%)</title><rect x="20.2725%" y="149" width="0.1030%" height="15" fill="rgb(206,96,30)"/><text x="20.5225%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (445,244 samples, 0.44%)</title><rect x="19.9892%" y="181" width="0.4399%" height="15" fill="rgb(218,138,4)"/><text x="20.2392%" y="191.50"></text></g><g><title>misc_checking_1 (1,529,887 samples, 1.51%)</title><rect x="19.0101%" y="197" width="1.5117%" height="15" fill="rgb(250,191,14)"/><text x="19.2601%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (194,162 samples, 0.19%)</title><rect x="20.5233%" y="181" width="0.1918%" height="15" fill="rgb(239,60,40)"/><text x="20.7733%" y="191.50"></text></g><g><title>check_mod_liveness (151,321 samples, 0.15%)</title><rect x="20.5656%" y="165" width="0.1495%" height="15" fill="rgb(206,27,48)"/><text x="20.8156%" y="175.50"></text></g><g><title>misc_checking_2 (415,455 samples, 0.41%)</title><rect x="20.5218%" y="197" width="0.4105%" height="15" fill="rgb(225,35,8)"/><text x="20.7718%" y="207.50"></text></g><g><title>match_checking (219,743 samples, 0.22%)</title><rect x="20.7151%" y="181" width="0.2171%" height="15" fill="rgb(250,213,24)"/><text x="20.9651%" y="191.50"></text></g><g><title>check_match (206,193 samples, 0.20%)</title><rect x="20.7285%" y="165" width="0.2037%" height="15" fill="rgb(247,123,22)"/><text x="20.9785%" y="175.50"></text></g><g><title>check_private_in_public (130,881 samples, 0.13%)</title><rect x="20.9414%" y="181" width="0.1293%" height="15" fill="rgb(231,138,38)"/><text x="21.1914%" y="191.50"></text></g><g><title>death_checking (255,663 samples, 0.25%)</title><rect x="21.0707%" y="181" width="0.2526%" height="15" fill="rgb(231,145,46)"/><text x="21.3207%" y="191.50"></text></g><g><title>eval_to_const_value_raw (141,831 samples, 0.14%)</title><rect x="21.7492%" y="149" width="0.1401%" height="15" fill="rgb(251,118,11)"/><text x="21.9992%" y="159.50"></text></g><g><title>eval_to_const_value_raw (133,391 samples, 0.13%)</title><rect x="21.7576%" y="133" width="0.1318%" height="15" fill="rgb(217,147,25)"/><text x="22.0076%" y="143.50"></text></g><g><title>eval_to_allocation_raw (126,741 samples, 0.13%)</title><rect x="21.7642%" y="117" width="0.1252%" height="15" fill="rgb(247,81,37)"/><text x="22.0142%" y="127.50"></text></g><g><title>param_env (345,094 samples, 0.34%)</title><rect x="21.8894%" y="149" width="0.3410%" height="15" fill="rgb(209,12,38)"/><text x="22.1394%" y="159.50"></text></g><g><title>predicates_of (158,742 samples, 0.16%)</title><rect x="22.0735%" y="133" width="0.1569%" height="15" fill="rgb(227,1,9)"/><text x="22.3235%" y="143.50"></text></g><g><title>predicates_defined_on (126,352 samples, 0.12%)</title><rect x="22.1055%" y="117" width="0.1248%" height="15" fill="rgb(248,47,43)"/><text x="22.3555%" y="127.50"></text></g><g><title>crate_lints (1,350,156 samples, 1.33%)</title><rect x="21.3248%" y="165" width="1.3341%" height="15" fill="rgb(221,10,30)"/><text x="21.5748%" y="175.50"></text></g><g><title>type_of (433,653 samples, 0.43%)</title><rect x="22.2304%" y="149" width="0.4285%" height="15" fill="rgb(210,229,1)"/><text x="22.4804%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (339,692 samples, 0.34%)</title><rect x="22.3232%" y="133" width="0.3356%" height="15" fill="rgb(222,148,37)"/><text x="22.5732%" y="143.50"></text></g><g><title>lint_checking (1,497,737 samples, 1.48%)</title><rect x="21.3233%" y="181" width="1.4799%" height="15" fill="rgb(234,67,33)"/><text x="21.5733%" y="191.50"></text></g><g><title>module_lints (146,111 samples, 0.14%)</title><rect x="22.6589%" y="165" width="0.1444%" height="15" fill="rgb(247,98,35)"/><text x="22.9089%" y="175.50"></text></g><g><title>lint_mod (142,911 samples, 0.14%)</title><rect x="22.6620%" y="149" width="0.1412%" height="15" fill="rgb(247,138,52)"/><text x="22.9120%" y="159.50"></text></g><g><title>privacy_access_levels (181,322 samples, 0.18%)</title><rect x="22.8032%" y="181" width="0.1792%" height="15" fill="rgb(213,79,30)"/><text x="23.0532%" y="191.50"></text></g><g><title>privacy_checking_modules (632,758 samples, 0.63%)</title><rect x="22.9824%" y="181" width="0.6252%" height="15" fill="rgb(246,177,23)"/><text x="23.2324%" y="191.50"></text></g><g><title>check_mod_privacy (629,917 samples, 0.62%)</title><rect x="22.9852%" y="165" width="0.6224%" height="15" fill="rgb(230,62,27)"/><text x="23.2352%" y="175.50"></text></g><g><title>misc_checking_3 (2,718,861 samples, 2.69%)</title><rect x="20.9323%" y="197" width="2.6865%" height="15" fill="rgb(216,154,8)"/><text x="21.1823%" y="207.50">mi..</text></g><g><title>impl_parent (1,059,774 samples, 1.05%)</title><rect x="26.1885%" y="133" width="1.0471%" height="15" fill="rgb(244,35,45)"/><text x="26.4385%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (605,417 samples, 0.60%)</title><rect x="26.6375%" y="117" width="0.5982%" height="15" fill="rgb(251,115,12)"/><text x="26.8875%" y="127.50"></text></g><g><title>impl_trait_ref (2,894,367 samples, 2.86%)</title><rect x="27.2357%" y="133" width="2.8599%" height="15" fill="rgb(240,54,50)"/><text x="27.4857%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,439,509 samples, 2.41%)</title><rect x="27.6851%" y="117" width="2.4104%" height="15" fill="rgb(233,84,52)"/><text x="27.9351%" y="127.50">me..</text></g><g><title>trait_impls_of (535,725 samples, 0.53%)</title><rect x="30.1810%" y="133" width="0.5293%" height="15" fill="rgb(207,117,47)"/><text x="30.4310%" y="143.50"></text></g><g><title>implementations_of_trait (175,990 samples, 0.17%)</title><rect x="30.5364%" y="117" width="0.1739%" height="15" fill="rgb(249,43,39)"/><text x="30.7864%" y="127.50"></text></g><g><title>coherent_trait (7,087,661 samples, 7.00%)</title><rect x="23.7098%" y="165" width="7.0032%" height="15" fill="rgb(209,38,44)"/><text x="23.9598%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (7,049,901 samples, 6.97%)</title><rect x="23.7471%" y="149" width="6.9659%" height="15" fill="rgb(236,212,23)"/><text x="23.9971%" y="159.50">specializ..</text></g><g><title>coherence_checking (7,207,983 samples, 7.12%)</title><rect x="23.6769%" y="181" width="7.1221%" height="15" fill="rgb(242,79,21)"/><text x="23.9269%" y="191.50">coherence_..</text></g><g><title>associated_item (474,754 samples, 0.47%)</title><rect x="39.3328%" y="117" width="0.4691%" height="15" fill="rgb(211,96,35)"/><text x="39.5828%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (428,934 samples, 0.42%)</title><rect x="39.3781%" y="101" width="0.4238%" height="15" fill="rgb(253,215,40)"/><text x="39.6281%" y="111.50"></text></g><g><title>associated_items (565,744 samples, 0.56%)</title><rect x="39.2621%" y="133" width="0.5590%" height="15" fill="rgb(211,81,21)"/><text x="39.5121%" y="143.50"></text></g><g><title>adt_dtorck_constraint (151,792 samples, 0.15%)</title><rect x="39.9872%" y="117" width="0.1500%" height="15" fill="rgb(208,190,38)"/><text x="40.2372%" y="127.50"></text></g><g><title>dropck_outlives (336,094 samples, 0.33%)</title><rect x="39.8670%" y="133" width="0.3321%" height="15" fill="rgb(235,213,38)"/><text x="40.1170%" y="143.50"></text></g><g><title>predicates_of (110,100 samples, 0.11%)</title><rect x="40.9731%" y="117" width="0.1088%" height="15" fill="rgb(237,122,38)"/><text x="41.2231%" y="127.50"></text></g><g><title>trait_impls_of (286,473 samples, 0.28%)</title><rect x="41.1552%" y="117" width="0.2831%" height="15" fill="rgb(244,218,35)"/><text x="41.4052%" y="127.50"></text></g><g><title>evaluate_obligation (1,258,933 samples, 1.24%)</title><rect x="40.1991%" y="133" width="1.2439%" height="15" fill="rgb(240,68,47)"/><text x="40.4491%" y="143.50"></text></g><g><title>impl_trait_ref (149,242 samples, 0.15%)</title><rect x="41.7042%" y="133" width="0.1475%" height="15" fill="rgb(210,16,53)"/><text x="41.9542%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (136,632 samples, 0.14%)</title><rect x="41.7166%" y="117" width="0.1350%" height="15" fill="rgb(235,124,12)"/><text x="41.9666%" y="127.50"></text></g><g><title>evaluate_obligation (148,493 samples, 0.15%)</title><rect x="42.1553%" y="117" width="0.1467%" height="15" fill="rgb(224,169,11)"/><text x="42.4053%" y="127.50"></text></g><g><title>method_autoderef_steps (345,373 samples, 0.34%)</title><rect x="41.9713%" y="133" width="0.3413%" height="15" fill="rgb(250,166,2)"/><text x="42.2213%" y="143.50"></text></g><g><title>object_safety_violations (128,131 samples, 0.13%)</title><rect x="42.3126%" y="133" width="0.1266%" height="15" fill="rgb(242,216,29)"/><text x="42.5626%" y="143.50"></text></g><g><title>explicit_predicates_of (187,393 samples, 0.19%)</title><rect x="42.6239%" y="101" width="0.1852%" height="15" fill="rgb(230,116,27)"/><text x="42.8739%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (168,132 samples, 0.17%)</title><rect x="42.6429%" y="85" width="0.1661%" height="15" fill="rgb(228,99,48)"/><text x="42.8929%" y="95.50"></text></g><g><title>predicates_of (385,326 samples, 0.38%)</title><rect x="42.4615%" y="133" width="0.3807%" height="15" fill="rgb(253,11,6)"/><text x="42.7115%" y="143.50"></text></g><g><title>predicates_defined_on (293,084 samples, 0.29%)</title><rect x="42.5526%" y="117" width="0.2896%" height="15" fill="rgb(247,143,39)"/><text x="42.8026%" y="127.50"></text></g><g><title>evaluate_obligation (113,020 samples, 0.11%)</title><rect x="44.1658%" y="117" width="0.1117%" height="15" fill="rgb(236,97,10)"/><text x="44.4158%" y="127.50"></text></g><g><title>typeck (1,589,829 samples, 1.57%)</title><rect x="42.9482%" y="133" width="1.5709%" height="15" fill="rgb(233,208,19)"/><text x="43.1982%" y="143.50"></text></g><g><title>item_bodies_checking (13,846,537 samples, 13.68%)</title><rect x="30.8597%" y="181" width="13.6816%" height="15" fill="rgb(216,164,2)"/><text x="31.1097%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (13,844,247 samples, 13.68%)</title><rect x="30.8619%" y="165" width="13.6793%" height="15" fill="rgb(220,129,5)"/><text x="31.1119%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (13,821,557 samples, 13.66%)</title><rect x="30.8844%" y="149" width="13.6569%" height="15" fill="rgb(242,17,10)"/><text x="31.1344%" y="159.50">typeck</text></g><g><title>adt_destructor (185,172 samples, 0.18%)</title><rect x="46.0412%" y="149" width="0.1830%" height="15" fill="rgb(242,107,0)"/><text x="46.2912%" y="159.50"></text></g><g><title>coherent_trait (181,792 samples, 0.18%)</title><rect x="46.0445%" y="133" width="0.1796%" height="15" fill="rgb(251,28,31)"/><text x="46.2945%" y="143.50"></text></g><g><title>specialization_graph_of (179,972 samples, 0.18%)</title><rect x="46.0463%" y="117" width="0.1778%" height="15" fill="rgb(233,223,10)"/><text x="46.2963%" y="127.50"></text></g><g><title>item_types_checking (1,987,953 samples, 1.96%)</title><rect x="44.5413%" y="181" width="1.9643%" height="15" fill="rgb(215,21,27)"/><text x="44.7913%" y="191.50">i..</text></g><g><title>check_mod_item_types (1,984,563 samples, 1.96%)</title><rect x="44.5446%" y="165" width="1.9609%" height="15" fill="rgb(232,23,21)"/><text x="44.7946%" y="175.50">c..</text></g><g><title>fn_sig (276,102 samples, 0.27%)</title><rect x="46.8420%" y="149" width="0.2728%" height="15" fill="rgb(244,5,23)"/><text x="47.0920%" y="159.50"></text></g><g><title>generics_of (254,852 samples, 0.25%)</title><rect x="47.1148%" y="149" width="0.2518%" height="15" fill="rgb(226,81,46)"/><text x="47.3648%" y="159.50"></text></g><g><title>late_bound_vars_map (627,007 samples, 0.62%)</title><rect x="48.5410%" y="101" width="0.6195%" height="15" fill="rgb(247,70,30)"/><text x="48.7910%" y="111.50"></text></g><g><title>resolve_lifetimes (592,786 samples, 0.59%)</title><rect x="48.5748%" y="85" width="0.5857%" height="15" fill="rgb(212,68,19)"/><text x="48.8248%" y="95.50"></text></g><g><title>explicit_predicates_of (2,012,543 samples, 1.99%)</title><rect x="47.5887%" y="117" width="1.9886%" height="15" fill="rgb(240,187,13)"/><text x="47.8387%" y="127.50">e..</text></g><g><title>type_param_predicates (341,182 samples, 0.34%)</title><rect x="49.2401%" y="101" width="0.3371%" height="15" fill="rgb(223,113,26)"/><text x="49.4901%" y="111.50"></text></g><g><title>predicates_of (2,308,456 samples, 2.28%)</title><rect x="47.4447%" y="149" width="2.2810%" height="15" fill="rgb(206,192,2)"/><text x="47.6947%" y="159.50">p..</text></g><g><title>predicates_defined_on (2,257,416 samples, 2.23%)</title><rect x="47.4951%" y="133" width="2.2305%" height="15" fill="rgb(241,108,4)"/><text x="47.7451%" y="143.50">p..</text></g><g><title>inferred_outlives_of (150,211 samples, 0.15%)</title><rect x="49.5773%" y="117" width="0.1484%" height="15" fill="rgb(247,173,49)"/><text x="49.8273%" y="127.50"></text></g><g><title>inferred_outlives_crate (126,001 samples, 0.12%)</title><rect x="49.6012%" y="101" width="0.1245%" height="15" fill="rgb(224,114,35)"/><text x="49.8512%" y="111.50"></text></g><g><title>type_collecting (3,529,119 samples, 3.49%)</title><rect x="46.5098%" y="181" width="3.4871%" height="15" fill="rgb(245,159,27)"/><text x="46.7598%" y="191.50">typ..</text></g><g><title>collect_mod_item_types (3,513,789 samples, 3.47%)</title><rect x="46.5249%" y="165" width="3.4719%" height="15" fill="rgb(245,172,44)"/><text x="46.7749%" y="175.50">col..</text></g><g><title>type_of (274,446 samples, 0.27%)</title><rect x="49.7257%" y="149" width="0.2712%" height="15" fill="rgb(236,23,11)"/><text x="49.9757%" y="159.50"></text></g><g><title>evaluate_obligation (326,785 samples, 0.32%)</title><rect x="51.9763%" y="149" width="0.3229%" height="15" fill="rgb(205,117,38)"/><text x="52.2263%" y="159.50"></text></g><g><title>implied_outlives_bounds (291,931 samples, 0.29%)</title><rect x="52.3142%" y="149" width="0.2885%" height="15" fill="rgb(237,72,25)"/><text x="52.5642%" y="159.50"></text></g><g><title>param_env (423,223 samples, 0.42%)</title><rect x="52.6201%" y="149" width="0.4182%" height="15" fill="rgb(244,70,9)"/><text x="52.8701%" y="159.50"></text></g><g><title>region_scope_tree (122,622 samples, 0.12%)</title><rect x="53.1106%" y="149" width="0.1212%" height="15" fill="rgb(217,125,39)"/><text x="53.3606%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,140,615 samples, 3.10%)</title><rect x="50.1420%" y="165" width="3.1032%" height="15" fill="rgb(235,36,10)"/><text x="50.3920%" y="175.50">che..</text></g><g><title>evaluate_obligation (218,411 samples, 0.22%)</title><rect x="56.6393%" y="149" width="0.2158%" height="15" fill="rgb(251,123,47)"/><text x="56.8893%" y="159.50"></text></g><g><title>implied_outlives_bounds (117,851 samples, 0.12%)</title><rect x="56.8746%" y="149" width="0.1164%" height="15" fill="rgb(221,13,13)"/><text x="57.1246%" y="159.50"></text></g><g><title>param_env (1,079,833 samples, 1.07%)</title><rect x="57.0214%" y="149" width="1.0670%" height="15" fill="rgb(238,131,9)"/><text x="57.2714%" y="159.50"></text></g><g><title>predicates_of (214,582 samples, 0.21%)</title><rect x="58.0883%" y="149" width="0.2120%" height="15" fill="rgb(211,50,8)"/><text x="58.3383%" y="159.50"></text></g><g><title>predicates_defined_on (138,651 samples, 0.14%)</title><rect x="58.1634%" y="133" width="0.1370%" height="15" fill="rgb(245,182,24)"/><text x="58.4134%" y="143.50"></text></g><g><title>trait_impls_of (138,201 samples, 0.14%)</title><rect x="58.3441%" y="149" width="0.1366%" height="15" fill="rgb(242,14,37)"/><text x="58.5941%" y="159.50"></text></g><g><title>analysis (54,180,636 samples, 53.54%)</title><rect x="5.0193%" y="213" width="53.5352%" height="15" fill="rgb(246,228,12)"/><text x="5.2693%" y="223.50">analysis</text></g><g><title>type_check_crate (35,356,982 samples, 34.94%)</title><rect x="23.6187%" y="197" width="34.9358%" height="15" fill="rgb(213,55,15)"/><text x="23.8687%" y="207.50">type_check_crate</text></g><g><title>wf_checking (8,659,388 samples, 8.56%)</title><rect x="49.9983%" y="181" width="8.5562%" height="15" fill="rgb(209,9,3)"/><text x="50.2483%" y="191.50">wf_checking</text></g><g><title>check_item_well_formed (5,373,343 samples, 5.31%)</title><rect x="53.2452%" y="165" width="5.3093%" height="15" fill="rgb(230,59,30)"/><text x="53.4952%" y="175.50">check_..</text></g><g><title>codegen_module (217,062 samples, 0.21%)</title><rect x="59.1115%" y="197" width="0.2145%" height="15" fill="rgb(209,121,21)"/><text x="59.3615%" y="207.50"></text></g><g><title>codegen_crate (872,900 samples, 0.86%)</title><rect x="58.5647%" y="213" width="0.8625%" height="15" fill="rgb(220,109,13)"/><text x="58.8147%" y="223.50"></text></g><g><title>codegen_module_optimize (559,206 samples, 0.55%)</title><rect x="59.4272%" y="213" width="0.5525%" height="15" fill="rgb(232,18,1)"/><text x="59.6772%" y="223.50"></text></g><g><title>LLVM_module_optimize (278,823 samples, 0.28%)</title><rect x="59.7042%" y="197" width="0.2755%" height="15" fill="rgb(215,41,42)"/><text x="59.9542%" y="207.50"></text></g><g><title>LLVM_lto_optimize (241,093 samples, 0.24%)</title><rect x="60.3205%" y="197" width="0.2382%" height="15" fill="rgb(224,123,36)"/><text x="60.5705%" y="207.50"></text></g><g><title>LLVM_module_codegen (2,526,958 samples, 2.50%)</title><rect x="60.5588%" y="197" width="2.4969%" height="15" fill="rgb(240,125,3)"/><text x="60.8088%" y="207.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,491,658 samples, 2.46%)</title><rect x="60.5936%" y="181" width="2.4620%" height="15" fill="rgb(205,98,50)"/><text x="60.8436%" y="191.50">LL..</text></g><g><title>codegen_module_perform_lto (3,151,646 samples, 3.11%)</title><rect x="59.9797%" y="213" width="3.1141%" height="15" fill="rgb(205,185,37)"/><text x="60.2297%" y="223.50">cod..</text></g><g><title>AST_validation (182,872 samples, 0.18%)</title><rect x="63.3181%" y="197" width="0.1807%" height="15" fill="rgb(238,207,15)"/><text x="63.5681%" y="207.50"></text></g><g><title>metadata_register_crate (1,149,254 samples, 1.14%)</title><rect x="80.4918%" y="165" width="1.1356%" height="15" fill="rgb(213,199,42)"/><text x="80.7418%" y="175.50"></text></g><g><title>metadata_register_crate (410,065 samples, 0.41%)</title><rect x="81.2222%" y="149" width="0.4052%" height="15" fill="rgb(235,201,11)"/><text x="81.4722%" y="159.50"></text></g><g><title>macro_expand_crate (18,355,928 samples, 18.14%)</title><rect x="63.6480%" y="197" width="18.1373%" height="15" fill="rgb(207,46,11)"/><text x="63.8980%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (18,328,808 samples, 18.11%)</title><rect x="63.6748%" y="181" width="18.1105%" height="15" fill="rgb(241,35,35)"/><text x="63.9248%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (159,832 samples, 0.16%)</title><rect x="81.6274%" y="165" width="0.1579%" height="15" fill="rgb(243,32,47)"/><text x="81.8774%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (108,842 samples, 0.11%)</title><rect x="81.7902%" y="197" width="0.1075%" height="15" fill="rgb(247,202,23)"/><text x="82.0402%" y="207.50"></text></g><g><title>finalize_imports (216,863 samples, 0.21%)</title><rect x="81.9073%" y="181" width="0.2143%" height="15" fill="rgb(219,102,11)"/><text x="82.1573%" y="191.50"></text></g><g><title>late_resolve_crate (2,229,665 samples, 2.20%)</title><rect x="82.1761%" y="181" width="2.2031%" height="15" fill="rgb(243,110,44)"/><text x="82.4261%" y="191.50">l..</text></g><g><title>configure_and_expand (21,668,086 samples, 21.41%)</title><rect x="63.0939%" y="213" width="21.4100%" height="15" fill="rgb(222,74,54)"/><text x="63.3439%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,637,520 samples, 2.61%)</title><rect x="81.8977%" y="197" width="2.6061%" height="15" fill="rgb(216,99,12)"/><text x="82.1477%" y="207.50">re..</text></g><g><title>drop_ast (193,122 samples, 0.19%)</title><rect x="84.5038%" y="213" width="0.1908%" height="15" fill="rgb(226,22,26)"/><text x="84.7538%" y="223.50"></text></g><g><title>early_lint_checks (319,894 samples, 0.32%)</title><rect x="84.7113%" y="213" width="0.3161%" height="15" fill="rgb(217,163,10)"/><text x="84.9613%" y="223.50"></text></g><g><title>free_global_ctxt (2,709,910 samples, 2.68%)</title><rect x="85.0273%" y="213" width="2.6776%" height="15" fill="rgb(213,25,53)"/><text x="85.2773%" y="223.50">fr..</text></g><g><title>is_sized_raw (271,202 samples, 0.27%)</title><rect x="90.0764%" y="165" width="0.2680%" height="15" fill="rgb(252,105,26)"/><text x="90.3264%" y="175.50"></text></g><g><title>evaluate_obligation (231,741 samples, 0.23%)</title><rect x="90.1154%" y="149" width="0.2290%" height="15" fill="rgb(220,39,43)"/><text x="90.3654%" y="159.50"></text></g><g><title>layout_of (570,094 samples, 0.56%)</title><rect x="89.8900%" y="181" width="0.5633%" height="15" fill="rgb(229,68,48)"/><text x="90.1400%" y="191.50"></text></g><g><title>is_copy_raw (356,365 samples, 0.35%)</title><rect x="91.7346%" y="149" width="0.3521%" height="15" fill="rgb(252,8,32)"/><text x="91.9846%" y="159.50"></text></g><g><title>evaluate_obligation (302,265 samples, 0.30%)</title><rect x="91.7880%" y="133" width="0.2987%" height="15" fill="rgb(223,20,43)"/><text x="92.0380%" y="143.50"></text></g><g><title>needs_drop_raw (455,525 samples, 0.45%)</title><rect x="91.7017%" y="165" width="0.4501%" height="15" fill="rgb(229,81,49)"/><text x="91.9517%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,796,220 samples, 1.77%)</title><rect x="90.4533%" y="181" width="1.7748%" height="15" fill="rgb(236,28,36)"/><text x="90.7033%" y="191.50">m..</text></g><g><title>optimized_mir (3,491,140 samples, 3.45%)</title><rect x="88.7893%" y="197" width="3.4496%" height="15" fill="rgb(249,185,26)"/><text x="89.0393%" y="207.50">opt..</text></g><g><title>generate_crate_metadata (4,631,063 samples, 4.58%)</title><rect x="87.7050%" y="213" width="4.5759%" height="15" fill="rgb(249,174,33)"/><text x="87.9550%" y="223.50">gener..</text></g><g><title>hir_lowering (3,608,881 samples, 3.57%)</title><rect x="92.2809%" y="213" width="3.5659%" height="15" fill="rgb(233,201,37)"/><text x="92.5309%" y="223.50">hir_..</text></g><g><title>finish_ongoing_codegen (362,264 samples, 0.36%)</title><rect x="95.8627%" y="197" width="0.3579%" height="15" fill="rgb(221,78,26)"/><text x="96.1127%" y="207.50"></text></g><g><title>link_crate (952,631 samples, 0.94%)</title><rect x="96.2207%" y="197" width="0.9413%" height="15" fill="rgb(250,127,30)"/><text x="96.4707%" y="207.50"></text></g><g><title>link_binary (938,101 samples, 0.93%)</title><rect x="96.2350%" y="181" width="0.9269%" height="15" fill="rgb(230,49,44)"/><text x="96.4850%" y="191.50"></text></g><g><title>link_rlib (639,907 samples, 0.63%)</title><rect x="96.5297%" y="165" width="0.6323%" height="15" fill="rgb(229,67,23)"/><text x="96.7797%" y="175.50"></text></g><g><title>link (1,339,445 samples, 1.32%)</title><rect x="95.8468%" y="213" width="1.3235%" height="15" fill="rgb(249,83,47)"/><text x="96.0968%" y="223.50"></text></g><g><title>parse_crate (983,941 samples, 0.97%)</title><rect x="97.1702%" y="213" width="0.9722%" height="15" fill="rgb(215,43,3)"/><text x="97.4202%" y="223.50"></text></g><g><title>prepare_outputs (354,354 samples, 0.35%)</title><rect x="98.1530%" y="213" width="0.3501%" height="15" fill="rgb(238,154,13)"/><text x="98.4030%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,043,291 samples, 1.03%)</title><rect x="98.5031%" y="213" width="1.0309%" height="15" fill="rgb(219,56,2)"/><text x="98.7531%" y="223.50"></text></g><g><title>setup_global_ctxt (138,202 samples, 0.14%)</title><rect x="99.5430%" y="213" width="0.1366%" height="15" fill="rgb(233,0,4)"/><text x="99.7930%" y="223.50"></text></g><g><title>all (101,205,608 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (101,205,608 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (324,313 samples, 0.32%)</title><rect x="99.6796%" y="213" width="0.3204%" height="15" fill="rgb(211,146,34)"/><text x="99.9296%" y="223.50"></text></g></svg></svg>