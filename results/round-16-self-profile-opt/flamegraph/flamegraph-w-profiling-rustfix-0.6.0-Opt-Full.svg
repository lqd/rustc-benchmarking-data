<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (356,428,492 samples, 10.61%)</title><rect x="0.0375%" y="165" width="10.6111%" height="15" fill="rgb(227,0,7)"/><text x="0.2875%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (3,894,226 samples, 0.12%)</title><rect x="12.8667%" y="37" width="0.1159%" height="15" fill="rgb(217,0,24)"/><text x="13.1167%" y="47.50"></text></g><g><title>needs_drop_raw (4,807,587 samples, 0.14%)</title><rect x="12.8396%" y="53" width="0.1431%" height="15" fill="rgb(221,193,54)"/><text x="13.0896%" y="63.50"></text></g><g><title>resolve_instance (3,505,185 samples, 0.10%)</title><rect x="12.9827%" y="53" width="0.1044%" height="15" fill="rgb(248,212,6)"/><text x="13.2327%" y="63.50"></text></g><g><title>thir_body (4,106,183 samples, 0.12%)</title><rect x="13.0894%" y="53" width="0.1222%" height="15" fill="rgb(208,68,35)"/><text x="13.3394%" y="63.50"></text></g><g><title>mir_const (30,359,051 samples, 0.90%)</title><rect x="12.3166%" y="101" width="0.9038%" height="15" fill="rgb(232,128,0)"/><text x="12.5666%" y="111.50"></text></g><g><title>unsafety_check_result (27,073,740 samples, 0.81%)</title><rect x="12.4144%" y="85" width="0.8060%" height="15" fill="rgb(207,160,47)"/><text x="12.6644%" y="95.50"></text></g><g><title>mir_built (24,850,694 samples, 0.74%)</title><rect x="12.4806%" y="69" width="0.7398%" height="15" fill="rgb(228,23,34)"/><text x="12.7306%" y="79.50"></text></g><g><title>mir_promoted (33,956,733 samples, 1.01%)</title><rect x="12.2257%" y="117" width="1.0109%" height="15" fill="rgb(218,30,26)"/><text x="12.4757%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,972,223 samples, 0.24%)</title><rect x="13.4236%" y="117" width="0.2373%" height="15" fill="rgb(220,122,19)"/><text x="13.6736%" y="127.50"></text></g><g><title>MIR_borrow_checking (100,222,821 samples, 2.98%)</title><rect x="10.6777%" y="149" width="2.9837%" height="15" fill="rgb(250,228,42)"/><text x="10.9277%" y="159.50">MIR..</text></g><g><title>mir_borrowck (99,869,856 samples, 2.97%)</title><rect x="10.6882%" y="133" width="2.9732%" height="15" fill="rgb(240,193,28)"/><text x="10.9382%" y="143.50">mir..</text></g><g><title>misc_checking_2 (4,896,055 samples, 0.15%)</title><rect x="13.7739%" y="149" width="0.1458%" height="15" fill="rgb(216,20,37)"/><text x="14.0239%" y="159.50"></text></g><g><title>match_checking (3,422,589 samples, 0.10%)</title><rect x="13.8178%" y="133" width="0.1019%" height="15" fill="rgb(206,188,39)"/><text x="14.0678%" y="143.50"></text></g><g><title>crate_lints (4,130,558 samples, 0.12%)</title><rect x="13.9696%" y="117" width="0.1230%" height="15" fill="rgb(217,207,13)"/><text x="14.2196%" y="127.50"></text></g><g><title>lint_checking (5,939,738 samples, 0.18%)</title><rect x="13.9695%" y="133" width="0.1768%" height="15" fill="rgb(231,73,38)"/><text x="14.2195%" y="143.50"></text></g><g><title>privacy_checking_modules (3,382,988 samples, 0.10%)</title><rect x="14.1700%" y="133" width="0.1007%" height="15" fill="rgb(225,20,46)"/><text x="14.4200%" y="143.50"></text></g><g><title>check_mod_privacy (3,379,158 samples, 0.10%)</title><rect x="14.1701%" y="117" width="0.1006%" height="15" fill="rgb(210,31,41)"/><text x="14.4201%" y="127.50"></text></g><g><title>misc_checking_3 (11,809,453 samples, 0.35%)</title><rect x="13.9197%" y="149" width="0.3516%" height="15" fill="rgb(221,200,47)"/><text x="14.1697%" y="159.50"></text></g><g><title>impl_trait_ref (6,179,846 samples, 0.18%)</title><rect x="14.5145%" y="85" width="0.1840%" height="15" fill="rgb(226,26,5)"/><text x="14.7645%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,785,746 samples, 0.14%)</title><rect x="14.5560%" y="69" width="0.1425%" height="15" fill="rgb(249,33,26)"/><text x="14.8060%" y="79.50"></text></g><g><title>coherent_trait (15,139,821 samples, 0.45%)</title><rect x="14.2759%" y="117" width="0.4507%" height="15" fill="rgb(235,183,28)"/><text x="14.5259%" y="127.50"></text></g><g><title>specialization_graph_of (14,528,334 samples, 0.43%)</title><rect x="14.2941%" y="101" width="0.4325%" height="15" fill="rgb(221,5,38)"/><text x="14.5441%" y="111.50"></text></g><g><title>coherence_checking (15,275,793 samples, 0.45%)</title><rect x="14.2752%" y="133" width="0.4548%" height="15" fill="rgb(247,18,42)"/><text x="14.5252%" y="143.50"></text></g><g><title>evaluate_obligation (4,263,186 samples, 0.13%)</title><rect x="17.1850%" y="85" width="0.1269%" height="15" fill="rgb(241,131,45)"/><text x="17.4350%" y="95.50"></text></g><g><title>evaluate_obligation (3,410,373 samples, 0.10%)</title><rect x="17.8818%" y="69" width="0.1015%" height="15" fill="rgb(249,31,29)"/><text x="18.1318%" y="79.50"></text></g><g><title>typeck (23,289,293 samples, 0.69%)</title><rect x="17.3691%" y="85" width="0.6933%" height="15" fill="rgb(225,111,53)"/><text x="17.6191%" y="95.50"></text></g><g><title>item_bodies_checking (111,940,412 samples, 3.33%)</title><rect x="14.7323%" y="133" width="3.3325%" height="15" fill="rgb(238,160,17)"/><text x="14.9823%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (111,936,452 samples, 3.33%)</title><rect x="14.7324%" y="117" width="3.3324%" height="15" fill="rgb(214,148,48)"/><text x="14.9824%" y="127.50">typ..</text></g><g><title>typeck (111,705,860 samples, 3.33%)</title><rect x="14.7393%" y="101" width="3.3256%" height="15" fill="rgb(232,36,49)"/><text x="14.9893%" y="111.50">typ..</text></g><g><title>item_types_checking (4,976,027 samples, 0.15%)</title><rect x="18.0649%" y="133" width="0.1481%" height="15" fill="rgb(209,103,24)"/><text x="18.3149%" y="143.50"></text></g><g><title>check_mod_item_types (4,971,777 samples, 0.15%)</title><rect x="18.0650%" y="117" width="0.1480%" height="15" fill="rgb(229,88,8)"/><text x="18.3150%" y="127.50"></text></g><g><title>type_collecting (5,780,655 samples, 0.17%)</title><rect x="18.2130%" y="133" width="0.1721%" height="15" fill="rgb(213,181,19)"/><text x="18.4630%" y="143.50"></text></g><g><title>collect_mod_item_types (5,771,165 samples, 0.17%)</title><rect x="18.2133%" y="117" width="0.1718%" height="15" fill="rgb(254,191,54)"/><text x="18.4633%" y="127.50"></text></g><g><title>check_impl_item_well_formed (10,076,492 samples, 0.30%)</title><rect x="18.4027%" y="117" width="0.3000%" height="15" fill="rgb(241,83,37)"/><text x="18.6527%" y="127.50"></text></g><g><title>analysis (276,056,605 samples, 8.22%)</title><rect x="10.6486%" y="165" width="8.2184%" height="15" fill="rgb(233,36,39)"/><text x="10.8986%" y="175.50">analysis</text></g><g><title>type_check_crate (154,372,922 samples, 4.60%)</title><rect x="14.2712%" y="149" width="4.5958%" height="15" fill="rgb(226,3,54)"/><text x="14.5212%" y="159.50">type_..</text></g><g><title>wf_checking (16,172,232 samples, 0.48%)</title><rect x="18.3856%" y="133" width="0.4815%" height="15" fill="rgb(245,192,40)"/><text x="18.6356%" y="143.50"></text></g><g><title>check_item_well_formed (5,520,014 samples, 0.16%)</title><rect x="18.7027%" y="117" width="0.1643%" height="15" fill="rgb(238,167,29)"/><text x="18.9527%" y="127.50"></text></g><g><title>param_env (7,301,124 samples, 0.22%)</title><rect x="22.6154%" y="117" width="0.2174%" height="15" fill="rgb(232,182,51)"/><text x="22.8654%" y="127.50"></text></g><g><title>fn_abi_of_instance (28,118,756 samples, 0.84%)</title><rect x="22.0367%" y="133" width="0.8371%" height="15" fill="rgb(231,60,39)"/><text x="22.2867%" y="143.50"></text></g><g><title>codegen_module (136,710,043 samples, 4.07%)</title><rect x="18.9404%" y="149" width="4.0700%" height="15" fill="rgb(208,69,12)"/><text x="19.1904%" y="159.50">code..</text></g><g><title>metadata_decode_entry_optimized_mir (4,108,336 samples, 0.12%)</title><rect x="23.5104%" y="85" width="0.1223%" height="15" fill="rgb(235,93,37)"/><text x="23.7604%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,909,155 samples, 0.12%)</title><rect x="23.6327%" y="85" width="0.1164%" height="15" fill="rgb(213,116,39)"/><text x="23.8827%" y="95.50"></text></g><g><title>optimized_mir (12,435,789 samples, 0.37%)</title><rect x="23.3901%" y="101" width="0.3702%" height="15" fill="rgb(222,207,29)"/><text x="23.6401%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (8,091,738 samples, 0.24%)</title><rect x="23.8376%" y="85" width="0.2409%" height="15" fill="rgb(206,96,30)"/><text x="24.0876%" y="95.50"></text></g><g><title>specialization_graph_of (3,444,408 samples, 0.10%)</title><rect x="24.1355%" y="85" width="0.1025%" height="15" fill="rgb(218,138,4)"/><text x="24.3855%" y="95.50"></text></g><g><title>resolve_instance (16,666,727 samples, 0.50%)</title><rect x="23.7603%" y="101" width="0.4962%" height="15" fill="rgb(250,191,14)"/><text x="24.0103%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (48,114,652 samples, 1.43%)</title><rect x="23.0128%" y="117" width="1.4324%" height="15" fill="rgb(239,60,40)"/><text x="23.2628%" y="127.50"></text></g><g><title>monomorphization_collector (48,266,474 samples, 1.44%)</title><rect x="23.0127%" y="133" width="1.4369%" height="15" fill="rgb(206,27,48)"/><text x="23.2627%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (5,793,446 samples, 0.17%)</title><rect x="24.4501%" y="117" width="0.1725%" height="15" fill="rgb(225,35,8)"/><text x="24.7001%" y="127.50"></text></g><g><title>symbol_name (5,094,697 samples, 0.15%)</title><rect x="24.4709%" y="101" width="0.1517%" height="15" fill="rgb(250,213,24)"/><text x="24.7209%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (56,221,214 samples, 1.67%)</title><rect x="23.0107%" y="149" width="1.6737%" height="15" fill="rgb(247,123,22)"/><text x="23.2607%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (7,886,849 samples, 0.23%)</title><rect x="24.4497%" y="133" width="0.2348%" height="15" fill="rgb(231,138,38)"/><text x="24.6997%" y="143.50"></text></g><g><title>codegen_crate (195,480,705 samples, 5.82%)</title><rect x="18.8673%" y="165" width="5.8196%" height="15" fill="rgb(231,145,46)"/><text x="19.1173%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (1,051,869,497 samples, 31.31%)</title><rect x="24.6869%" y="165" width="31.3149%" height="15" fill="rgb(251,118,11)"/><text x="24.9369%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,012,016,777 samples, 30.13%)</title><rect x="25.8734%" y="149" width="30.1285%" height="15" fill="rgb(217,147,25)"/><text x="26.1234%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (507,105,429 samples, 15.10%)</title><rect x="56.5956%" y="149" width="15.0969%" height="15" fill="rgb(247,81,37)"/><text x="56.8456%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (445,975,659 samples, 13.28%)</title><rect x="71.6925%" y="149" width="13.2770%" height="15" fill="rgb(209,12,38)"/><text x="71.9425%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (442,317,390 samples, 13.17%)</title><rect x="71.8015%" y="133" width="13.1681%" height="15" fill="rgb(227,1,9)"/><text x="72.0515%" y="143.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (63,045,121 samples, 1.88%)</title><rect x="84.9696%" y="149" width="1.8769%" height="15" fill="rgb(248,47,43)"/><text x="85.2196%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (1,038,081,768 samples, 30.90%)</title><rect x="56.0019%" y="165" width="30.9045%" height="15" fill="rgb(221,10,30)"/><text x="56.2519%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (8,027,719 samples, 0.24%)</title><rect x="90.5339%" y="117" width="0.2390%" height="15" fill="rgb(210,229,1)"/><text x="90.7839%" y="127.50"></text></g><g><title>metadata_register_crate (5,560,624 samples, 0.17%)</title><rect x="90.6073%" y="101" width="0.1655%" height="15" fill="rgb(222,148,37)"/><text x="90.8573%" y="111.50"></text></g><g><title>macro_expand_crate (129,150,618 samples, 3.84%)</title><rect x="86.9322%" y="149" width="3.8449%" height="15" fill="rgb(234,67,33)"/><text x="87.1822%" y="159.50">macr..</text></g><g><title>expand_crate (129,130,107 samples, 3.84%)</title><rect x="86.9328%" y="133" width="3.8443%" height="15" fill="rgb(247,98,35)"/><text x="87.1828%" y="143.50">expa..</text></g><g><title>late_resolve_crate (7,807,158 samples, 0.23%)</title><rect x="90.7973%" y="133" width="0.2324%" height="15" fill="rgb(247,138,52)"/><text x="91.0473%" y="143.50"></text></g><g><title>configure_and_expand (138,888,258 samples, 4.13%)</title><rect x="86.9063%" y="165" width="4.1348%" height="15" fill="rgb(213,79,30)"/><text x="87.1563%" y="175.50">confi..</text></g><g><title>resolve_crate (8,688,748 samples, 0.26%)</title><rect x="90.7824%" y="149" width="0.2587%" height="15" fill="rgb(246,177,23)"/><text x="91.0324%" y="159.50"></text></g><g><title>free_global_ctxt (15,324,693 samples, 0.46%)</title><rect x="91.1111%" y="165" width="0.4562%" height="15" fill="rgb(230,62,27)"/><text x="91.3611%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,752,119 samples, 0.56%)</title><rect x="92.2186%" y="133" width="0.5583%" height="15" fill="rgb(216,154,8)"/><text x="92.4686%" y="143.50"></text></g><g><title>optimized_mir (31,191,673 samples, 0.93%)</title><rect x="91.8544%" y="149" width="0.9286%" height="15" fill="rgb(244,35,45)"/><text x="92.1044%" y="159.50"></text></g><g><title>generate_crate_metadata (41,347,937 samples, 1.23%)</title><rect x="91.5673%" y="165" width="1.2310%" height="15" fill="rgb(251,115,12)"/><text x="91.8173%" y="175.50"></text></g><g><title>hir_lowering (10,395,297 samples, 0.31%)</title><rect x="92.7983%" y="165" width="0.3095%" height="15" fill="rgb(240,54,50)"/><text x="93.0483%" y="175.50"></text></g><g><title>finish_ongoing_codegen (220,368,587 samples, 6.56%)</title><rect x="93.1083%" y="149" width="6.5605%" height="15" fill="rgb(233,84,52)"/><text x="93.3583%" y="159.50">finish_on..</text></g><g><title>link (223,556,033 samples, 6.66%)</title><rect x="93.1078%" y="165" width="6.6554%" height="15" fill="rgb(207,117,47)"/><text x="93.3578%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (4,370,499 samples, 0.13%)</title><rect x="99.8420%" y="165" width="0.1301%" height="15" fill="rgb(249,43,39)"/><text x="100.0920%" y="175.50"></text></g><g><title>all (3,359,003,414 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,359,003,414 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>