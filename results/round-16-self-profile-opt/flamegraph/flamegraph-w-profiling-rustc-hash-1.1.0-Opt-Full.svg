<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,597,784 samples, 8.59%)</title><rect x="0.8867%" y="229" width="8.5898%" height="15" fill="rgb(227,0,7)"/><text x="1.1367%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (132,741 samples, 0.17%)</title><rect x="9.3036%" y="213" width="0.1728%" height="15" fill="rgb(217,0,24)"/><text x="9.5536%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (119,091 samples, 0.16%)</title><rect x="9.3214%" y="197" width="0.1550%" height="15" fill="rgb(221,193,54)"/><text x="9.5714%" y="207.50"></text></g><g><title>param_env (114,783 samples, 0.15%)</title><rect x="13.1389%" y="149" width="0.1494%" height="15" fill="rgb(248,212,6)"/><text x="13.3889%" y="159.50"></text></g><g><title>item_attrs (117,240 samples, 0.15%)</title><rect x="13.4916%" y="117" width="0.1526%" height="15" fill="rgb(208,68,35)"/><text x="13.7416%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (112,750 samples, 0.15%)</title><rect x="13.4974%" y="101" width="0.1468%" height="15" fill="rgb(232,128,0)"/><text x="13.7474%" y="111.50"></text></g><g><title>codegen_fn_attrs (170,762 samples, 0.22%)</title><rect x="13.4290%" y="133" width="0.2223%" height="15" fill="rgb(207,160,47)"/><text x="13.6790%" y="143.50"></text></g><g><title>needs_drop_raw (156,872 samples, 0.20%)</title><rect x="14.5365%" y="117" width="0.2042%" height="15" fill="rgb(228,23,34)"/><text x="14.7865%" y="127.50"></text></g><g><title>is_copy_raw (140,982 samples, 0.18%)</title><rect x="14.5572%" y="101" width="0.1835%" height="15" fill="rgb(218,30,26)"/><text x="14.8072%" y="111.50"></text></g><g><title>evaluate_obligation (119,392 samples, 0.16%)</title><rect x="14.5853%" y="85" width="0.1554%" height="15" fill="rgb(220,122,19)"/><text x="14.8353%" y="95.50"></text></g><g><title>impl_parent (176,304 samples, 0.23%)</title><rect x="15.1926%" y="85" width="0.2295%" height="15" fill="rgb(250,228,42)"/><text x="15.4426%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (99,342 samples, 0.13%)</title><rect x="15.2928%" y="69" width="0.1293%" height="15" fill="rgb(240,193,28)"/><text x="15.5428%" y="79.50"></text></g><g><title>specialization_graph_of (877,920 samples, 1.14%)</title><rect x="14.8094%" y="101" width="1.1430%" height="15" fill="rgb(216,20,37)"/><text x="15.0594%" y="111.50"></text></g><g><title>impl_trait_ref (407,274 samples, 0.53%)</title><rect x="15.4221%" y="85" width="0.5302%" height="15" fill="rgb(206,188,39)"/><text x="15.6721%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (327,383 samples, 0.43%)</title><rect x="15.5261%" y="69" width="0.4262%" height="15" fill="rgb(217,207,13)"/><text x="15.7761%" y="79.50"></text></g><g><title>resolve_instance (962,031 samples, 1.25%)</title><rect x="14.7407%" y="117" width="1.2525%" height="15" fill="rgb(231,73,38)"/><text x="14.9907%" y="127.50"></text></g><g><title>thir_body (257,093 samples, 0.33%)</title><rect x="15.9994%" y="117" width="0.3347%" height="15" fill="rgb(225,20,46)"/><text x="16.2494%" y="127.50"></text></g><g><title>mir_const (2,659,920 samples, 3.46%)</title><rect x="12.8772%" y="165" width="3.4630%" height="15" fill="rgb(210,31,41)"/><text x="13.1272%" y="175.50">mir..</text></g><g><title>unsafety_check_result (2,344,066 samples, 3.05%)</title><rect x="13.2884%" y="149" width="3.0518%" height="15" fill="rgb(221,200,47)"/><text x="13.5384%" y="159.50">uns..</text></g><g><title>mir_built (2,065,304 samples, 2.69%)</title><rect x="13.6513%" y="133" width="2.6888%" height="15" fill="rgb(226,26,5)"/><text x="13.9013%" y="143.50">mi..</text></g><g><title>mir_promoted (3,033,924 samples, 3.95%)</title><rect x="12.6439%" y="181" width="3.9499%" height="15" fill="rgb(249,33,26)"/><text x="12.8939%" y="191.50">mir_..</text></g><g><title>mir_const_qualif (194,843 samples, 0.25%)</title><rect x="16.3401%" y="165" width="0.2537%" height="15" fill="rgb(235,183,28)"/><text x="16.5901%" y="175.50"></text></g><g><title>mir_const (160,972 samples, 0.21%)</title><rect x="16.3842%" y="149" width="0.2096%" height="15" fill="rgb(221,5,38)"/><text x="16.6342%" y="159.50"></text></g><g><title>unsafety_check_result (112,291 samples, 0.15%)</title><rect x="16.4476%" y="133" width="0.1462%" height="15" fill="rgb(247,18,42)"/><text x="16.6976%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (389,833 samples, 0.51%)</title><rect x="16.6071%" y="181" width="0.5075%" height="15" fill="rgb(241,131,45)"/><text x="16.8571%" y="191.50"></text></g><g><title>normalize_projection_ty (261,751 samples, 0.34%)</title><rect x="16.7739%" y="165" width="0.3408%" height="15" fill="rgb(249,31,29)"/><text x="17.0239%" y="175.50"></text></g><g><title>MIR_borrow_checking (6,007,838 samples, 7.82%)</title><rect x="9.7502%" y="213" width="7.8217%" height="15" fill="rgb(225,111,53)"/><text x="10.0002%" y="223.50">MIR_borrow_..</text></g><g><title>mir_borrowck (5,981,747 samples, 7.79%)</title><rect x="9.7842%" y="197" width="7.7877%" height="15" fill="rgb(238,160,17)"/><text x="10.0342%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (351,203 samples, 0.46%)</title><rect x="17.1147%" y="181" width="0.4572%" height="15" fill="rgb(214,148,48)"/><text x="17.3647%" y="191.50"></text></g><g><title>MIR_effect_checking (90,071 samples, 0.12%)</title><rect x="17.5719%" y="213" width="0.1173%" height="15" fill="rgb(232,36,49)"/><text x="17.8219%" y="223.50"></text></g><g><title>hir_module_items (158,422 samples, 0.21%)</title><rect x="17.6892%" y="213" width="0.2063%" height="15" fill="rgb(209,103,24)"/><text x="17.9392%" y="223.50"></text></g><g><title>get_lang_items (87,101 samples, 0.11%)</title><rect x="18.3631%" y="133" width="0.1134%" height="15" fill="rgb(229,88,8)"/><text x="18.6131%" y="143.50"></text></g><g><title>codegen_fn_attrs (275,793 samples, 0.36%)</title><rect x="18.2992%" y="149" width="0.3591%" height="15" fill="rgb(213,181,19)"/><text x="18.5492%" y="159.50"></text></g><g><title>codegen_fn_attrs (446,595 samples, 0.58%)</title><rect x="18.0819%" y="181" width="0.5814%" height="15" fill="rgb(254,191,54)"/><text x="18.3319%" y="191.50"></text></g><g><title>should_inherit_track_caller (396,464 samples, 0.52%)</title><rect x="18.1472%" y="165" width="0.5162%" height="15" fill="rgb(241,83,37)"/><text x="18.3972%" y="175.50"></text></g><g><title>check_mod_attrs (561,546 samples, 0.73%)</title><rect x="17.9329%" y="197" width="0.7311%" height="15" fill="rgb(233,36,39)"/><text x="18.1829%" y="207.50"></text></g><g><title>lookup_deprecation_entry (80,151 samples, 0.10%)</title><rect x="18.8861%" y="181" width="0.1043%" height="15" fill="rgb(226,3,54)"/><text x="19.1361%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (231,483 samples, 0.30%)</title><rect x="18.7848%" y="197" width="0.3014%" height="15" fill="rgb(245,192,40)"/><text x="19.0348%" y="207.50"></text></g><g><title>misc_checking_1 (964,091 samples, 1.26%)</title><rect x="17.8959%" y="213" width="1.2552%" height="15" fill="rgb(238,167,29)"/><text x="18.1459%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (190,792 samples, 0.25%)</title><rect x="19.1551%" y="197" width="0.2484%" height="15" fill="rgb(232,182,51)"/><text x="19.4051%" y="207.50"></text></g><g><title>check_mod_liveness (149,752 samples, 0.19%)</title><rect x="19.2085%" y="181" width="0.1950%" height="15" fill="rgb(231,60,39)"/><text x="19.4585%" y="191.50"></text></g><g><title>misc_checking_2 (407,374 samples, 0.53%)</title><rect x="19.1511%" y="213" width="0.5304%" height="15" fill="rgb(208,69,12)"/><text x="19.4011%" y="223.50"></text></g><g><title>match_checking (213,512 samples, 0.28%)</title><rect x="19.4035%" y="197" width="0.2780%" height="15" fill="rgb(235,93,37)"/><text x="19.6535%" y="207.50"></text></g><g><title>check_match (199,022 samples, 0.26%)</title><rect x="19.4223%" y="181" width="0.2591%" height="15" fill="rgb(213,116,39)"/><text x="19.6723%" y="191.50"></text></g><g><title>eval_to_const_value_raw (99,131 samples, 0.13%)</title><rect x="20.4093%" y="165" width="0.1291%" height="15" fill="rgb(222,207,29)"/><text x="20.6593%" y="175.50"></text></g><g><title>eval_to_const_value_raw (97,521 samples, 0.13%)</title><rect x="20.4114%" y="149" width="0.1270%" height="15" fill="rgb(206,96,30)"/><text x="20.6614%" y="159.50"></text></g><g><title>eval_to_allocation_raw (92,331 samples, 0.12%)</title><rect x="20.4182%" y="133" width="0.1202%" height="15" fill="rgb(218,138,4)"/><text x="20.6682%" y="143.50"></text></g><g><title>param_env (85,322 samples, 0.11%)</title><rect x="20.5384%" y="165" width="0.1111%" height="15" fill="rgb(250,191,14)"/><text x="20.7884%" y="175.50"></text></g><g><title>crate_lints (3,100,295 samples, 4.04%)</title><rect x="19.8390%" y="181" width="4.0363%" height="15" fill="rgb(239,60,40)"/><text x="20.0890%" y="191.50">crat..</text></g><g><title>type_of (2,474,767 samples, 3.22%)</title><rect x="20.6534%" y="165" width="3.2219%" height="15" fill="rgb(206,27,48)"/><text x="20.9034%" y="175.50">typ..</text></g><g><title>metadata_decode_entry_type_of (2,223,794 samples, 2.90%)</title><rect x="20.9801%" y="149" width="2.8952%" height="15" fill="rgb(225,35,8)"/><text x="21.2301%" y="159.50">me..</text></g><g><title>lint_checking (3,182,166 samples, 4.14%)</title><rect x="19.8372%" y="197" width="4.1429%" height="15" fill="rgb(250,213,24)"/><text x="20.0872%" y="207.50">lint_..</text></g><g><title>module_lints (80,471 samples, 0.10%)</title><rect x="23.8753%" y="181" width="0.1048%" height="15" fill="rgb(247,123,22)"/><text x="24.1253%" y="191.50"></text></g><g><title>lint_mod (78,071 samples, 0.10%)</title><rect x="23.8784%" y="165" width="0.1016%" height="15" fill="rgb(231,138,38)"/><text x="24.1284%" y="175.50"></text></g><g><title>privacy_checking_modules (119,562 samples, 0.16%)</title><rect x="24.0424%" y="197" width="0.1557%" height="15" fill="rgb(231,145,46)"/><text x="24.2924%" y="207.50"></text></g><g><title>check_mod_privacy (117,862 samples, 0.15%)</title><rect x="24.0446%" y="181" width="0.1534%" height="15" fill="rgb(251,118,11)"/><text x="24.2946%" y="191.50"></text></g><g><title>misc_checking_3 (3,481,770 samples, 4.53%)</title><rect x="19.6814%" y="213" width="4.5330%" height="15" fill="rgb(217,147,25)"/><text x="19.9314%" y="223.50">misc_..</text></g><g><title>impl_parent (436,537 samples, 0.57%)</title><rect x="24.9965%" y="149" width="0.5683%" height="15" fill="rgb(247,81,37)"/><text x="25.2465%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (316,295 samples, 0.41%)</title><rect x="25.1530%" y="133" width="0.4118%" height="15" fill="rgb(209,12,38)"/><text x="25.4030%" y="143.50"></text></g><g><title>impl_trait_ref (1,215,762 samples, 1.58%)</title><rect x="25.5648%" y="149" width="1.5828%" height="15" fill="rgb(227,1,9)"/><text x="25.8148%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,102,251 samples, 1.44%)</title><rect x="25.7126%" y="133" width="1.4350%" height="15" fill="rgb(248,47,43)"/><text x="25.9626%" y="143.50"></text></g><g><title>coherent_trait (2,344,547 samples, 3.05%)</title><rect x="24.3083%" y="181" width="3.0524%" height="15" fill="rgb(221,10,30)"/><text x="24.5583%" y="191.50">coh..</text></g><g><title>specialization_graph_of (2,333,736 samples, 3.04%)</title><rect x="24.3224%" y="165" width="3.0383%" height="15" fill="rgb(210,229,1)"/><text x="24.5724%" y="175.50">spe..</text></g><g><title>trait_impls_of (163,652 samples, 0.21%)</title><rect x="27.1477%" y="149" width="0.2131%" height="15" fill="rgb(222,148,37)"/><text x="27.3977%" y="159.50"></text></g><g><title>coherence_checking (2,422,127 samples, 3.15%)</title><rect x="24.2831%" y="197" width="3.1534%" height="15" fill="rgb(234,67,33)"/><text x="24.5331%" y="207.50">coh..</text></g><g><title>associated_item (343,274 samples, 0.45%)</title><rect x="30.0147%" y="133" width="0.4469%" height="15" fill="rgb(247,98,35)"/><text x="30.2647%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (294,083 samples, 0.38%)</title><rect x="30.0787%" y="117" width="0.3829%" height="15" fill="rgb(247,138,52)"/><text x="30.3287%" y="127.50"></text></g><g><title>associated_items (425,435 samples, 0.55%)</title><rect x="29.9170%" y="149" width="0.5539%" height="15" fill="rgb(213,79,30)"/><text x="30.1670%" y="159.50"></text></g><g><title>evaluate_obligation (288,573 samples, 0.38%)</title><rect x="30.5387%" y="149" width="0.3757%" height="15" fill="rgb(246,177,23)"/><text x="30.7887%" y="159.50"></text></g><g><title>method_autoderef_steps (109,021 samples, 0.14%)</title><rect x="31.0428%" y="149" width="0.1419%" height="15" fill="rgb(230,62,27)"/><text x="31.2928%" y="159.50"></text></g><g><title>evaluate_obligation (83,051 samples, 0.11%)</title><rect x="31.0766%" y="133" width="0.1081%" height="15" fill="rgb(216,154,8)"/><text x="31.3266%" y="143.50"></text></g><g><title>associated_item (832,280 samples, 1.08%)</title><rect x="40.9569%" y="117" width="1.0836%" height="15" fill="rgb(244,35,45)"/><text x="41.2069%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (602,015 samples, 0.78%)</title><rect x="41.2567%" y="101" width="0.7838%" height="15" fill="rgb(251,115,12)"/><text x="41.5067%" y="111.50"></text></g><g><title>associated_items (1,204,275 samples, 1.57%)</title><rect x="40.5182%" y="133" width="1.5679%" height="15" fill="rgb(240,54,50)"/><text x="40.7682%" y="143.50"></text></g><g><title>dropck_outlives (100,242 samples, 0.13%)</title><rect x="42.1370%" y="133" width="0.1305%" height="15" fill="rgb(233,84,52)"/><text x="42.3870%" y="143.50"></text></g><g><title>item_attrs (88,901 samples, 0.12%)</title><rect x="42.7759%" y="53" width="0.1157%" height="15" fill="rgb(207,117,47)"/><text x="43.0259%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,191 samples, 0.11%)</title><rect x="42.7768%" y="37" width="0.1148%" height="15" fill="rgb(249,43,39)"/><text x="43.0268%" y="47.50"></text></g><g><title>codegen_fn_attrs (106,541 samples, 0.14%)</title><rect x="42.7542%" y="69" width="0.1387%" height="15" fill="rgb(209,38,44)"/><text x="43.0042%" y="79.50"></text></g><g><title>fn_abi_of_instance (176,622 samples, 0.23%)</title><rect x="42.7090%" y="85" width="0.2299%" height="15" fill="rgb(236,212,23)"/><text x="42.9590%" y="95.50"></text></g><g><title>eval_to_const_value_raw (663,077 samples, 0.86%)</title><rect x="42.2675%" y="133" width="0.8633%" height="15" fill="rgb(242,79,21)"/><text x="42.5175%" y="143.50"></text></g><g><title>eval_to_const_value_raw (626,847 samples, 0.82%)</title><rect x="42.3147%" y="117" width="0.8161%" height="15" fill="rgb(211,96,35)"/><text x="42.5647%" y="127.50"></text></g><g><title>eval_to_allocation_raw (610,907 samples, 0.80%)</title><rect x="42.3354%" y="101" width="0.7953%" height="15" fill="rgb(253,215,40)"/><text x="42.5854%" y="111.50"></text></g><g><title>adt_sized_constraint (84,552 samples, 0.11%)</title><rect x="44.0080%" y="117" width="0.1101%" height="15" fill="rgb(211,81,21)"/><text x="44.2580%" y="127.50"></text></g><g><title>predicates_of (110,423 samples, 0.14%)</title><rect x="44.2453%" y="117" width="0.1438%" height="15" fill="rgb(208,190,38)"/><text x="44.4953%" y="127.50"></text></g><g><title>predicates_defined_on (78,202 samples, 0.10%)</title><rect x="44.2873%" y="101" width="0.1018%" height="15" fill="rgb(235,213,38)"/><text x="44.5373%" y="111.50"></text></g><g><title>evaluate_obligation (2,038,636 samples, 2.65%)</title><rect x="43.1308%" y="133" width="2.6541%" height="15" fill="rgb(237,122,38)"/><text x="43.3808%" y="143.50">ev..</text></g><g><title>trait_impls_of (1,061,110 samples, 1.38%)</title><rect x="44.4034%" y="117" width="1.3815%" height="15" fill="rgb(244,218,35)"/><text x="44.6534%" y="127.50"></text></g><g><title>implementations_of_trait (321,342 samples, 0.42%)</title><rect x="45.3665%" y="101" width="0.4184%" height="15" fill="rgb(240,68,47)"/><text x="45.6165%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (225,221 samples, 0.29%)</title><rect x="45.4917%" y="85" width="0.2932%" height="15" fill="rgb(210,16,53)"/><text x="45.7417%" y="95.50"></text></g><g><title>fn_sig (87,420 samples, 0.11%)</title><rect x="45.8190%" y="133" width="0.1138%" height="15" fill="rgb(235,124,12)"/><text x="46.0690%" y="143.50"></text></g><g><title>generics_of (116,050 samples, 0.15%)</title><rect x="45.9329%" y="133" width="0.1511%" height="15" fill="rgb(224,169,11)"/><text x="46.1829%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (83,530 samples, 0.11%)</title><rect x="45.9752%" y="117" width="0.1087%" height="15" fill="rgb(250,166,2)"/><text x="46.2252%" y="127.50"></text></g><g><title>associated_item (117,502 samples, 0.15%)</title><rect x="46.1712%" y="101" width="0.1530%" height="15" fill="rgb(242,216,29)"/><text x="46.4212%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (102,772 samples, 0.13%)</title><rect x="46.1904%" y="85" width="0.1338%" height="15" fill="rgb(230,116,27)"/><text x="46.4404%" y="95.50"></text></g><g><title>impl_item_implementor_ids (194,313 samples, 0.25%)</title><rect x="46.0854%" y="133" width="0.2530%" height="15" fill="rgb(228,99,48)"/><text x="46.3354%" y="143.50"></text></g><g><title>associated_items (171,763 samples, 0.22%)</title><rect x="46.1148%" y="117" width="0.2236%" height="15" fill="rgb(253,11,6)"/><text x="46.3648%" y="127.50"></text></g><g><title>impl_trait_ref (106,451 samples, 0.14%)</title><rect x="46.3503%" y="133" width="0.1386%" height="15" fill="rgb(247,143,39)"/><text x="46.6003%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (90,931 samples, 0.12%)</title><rect x="46.3705%" y="117" width="0.1184%" height="15" fill="rgb(236,97,10)"/><text x="46.6205%" y="127.50"></text></g><g><title>predicates_of (91,580 samples, 0.12%)</title><rect x="46.8653%" y="101" width="0.1192%" height="15" fill="rgb(233,208,19)"/><text x="47.1153%" y="111.50"></text></g><g><title>is_copy_raw (368,855 samples, 0.48%)</title><rect x="46.5064%" y="133" width="0.4802%" height="15" fill="rgb(216,164,2)"/><text x="46.7564%" y="143.50"></text></g><g><title>evaluate_obligation (337,085 samples, 0.44%)</title><rect x="46.5478%" y="117" width="0.4389%" height="15" fill="rgb(220,129,5)"/><text x="46.7978%" y="127.50"></text></g><g><title>item_attrs (205,173 samples, 0.27%)</title><rect x="46.9867%" y="133" width="0.2671%" height="15" fill="rgb(242,17,10)"/><text x="47.2367%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (201,073 samples, 0.26%)</title><rect x="46.9920%" y="117" width="0.2618%" height="15" fill="rgb(242,107,0)"/><text x="47.2420%" y="127.50"></text></g><g><title>lint_levels (77,721 samples, 0.10%)</title><rect x="47.2538%" y="133" width="0.1012%" height="15" fill="rgb(251,28,31)"/><text x="47.5038%" y="143.50"></text></g><g><title>method_autoderef_steps (91,091 samples, 0.12%)</title><rect x="47.3969%" y="133" width="0.1186%" height="15" fill="rgb(233,223,10)"/><text x="47.6469%" y="143.50"></text></g><g><title>explicit_predicates_of (108,961 samples, 0.14%)</title><rect x="47.7817%" y="101" width="0.1419%" height="15" fill="rgb(215,21,27)"/><text x="48.0317%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (85,461 samples, 0.11%)</title><rect x="47.8123%" y="85" width="0.1113%" height="15" fill="rgb(232,23,21)"/><text x="48.0623%" y="95.50"></text></g><g><title>predicates_of (340,078 samples, 0.44%)</title><rect x="47.5451%" y="133" width="0.4428%" height="15" fill="rgb(244,5,23)"/><text x="47.7951%" y="143.50"></text></g><g><title>predicates_defined_on (227,122 samples, 0.30%)</title><rect x="47.6921%" y="117" width="0.2957%" height="15" fill="rgb(226,81,46)"/><text x="47.9421%" y="127.50"></text></g><g><title>trait_impls_of (587,556 samples, 0.76%)</title><rect x="48.0380%" y="133" width="0.7649%" height="15" fill="rgb(247,70,30)"/><text x="48.2880%" y="143.50"></text></g><g><title>implementations_of_trait (155,511 samples, 0.20%)</title><rect x="48.6005%" y="117" width="0.2025%" height="15" fill="rgb(212,68,19)"/><text x="48.8505%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (116,941 samples, 0.15%)</title><rect x="48.6507%" y="101" width="0.1522%" height="15" fill="rgb(240,187,13)"/><text x="48.9007%" y="111.50"></text></g><g><title>typeck (13,534,143 samples, 17.62%)</title><rect x="31.3249%" y="149" width="17.6203%" height="15" fill="rgb(223,113,26)"/><text x="31.5749%" y="159.50">typeck</text></g><g><title>item_bodies_checking (16,507,626 samples, 21.49%)</title><rect x="27.4678%" y="197" width="21.4915%" height="15" fill="rgb(206,192,2)"/><text x="27.7178%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,503,356 samples, 21.49%)</title><rect x="27.4733%" y="181" width="21.4860%" height="15" fill="rgb(241,108,4)"/><text x="27.7233%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (16,476,566 samples, 21.45%)</title><rect x="27.5082%" y="165" width="21.4511%" height="15" fill="rgb(247,173,49)"/><text x="27.7582%" y="175.50">typeck</text></g><g><title>impl_parent (120,101 samples, 0.16%)</title><rect x="49.6963%" y="117" width="0.1564%" height="15" fill="rgb(224,114,35)"/><text x="49.9463%" y="127.50"></text></g><g><title>impl_trait_ref (417,593 samples, 0.54%)</title><rect x="49.8526%" y="117" width="0.5437%" height="15" fill="rgb(245,159,27)"/><text x="50.1026%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (368,471 samples, 0.48%)</title><rect x="49.9166%" y="101" width="0.4797%" height="15" fill="rgb(245,172,44)"/><text x="50.1666%" y="111.50"></text></g><g><title>adt_destructor (794,799 samples, 1.03%)</title><rect x="49.4491%" y="165" width="1.0348%" height="15" fill="rgb(236,23,11)"/><text x="49.6991%" y="175.50"></text></g><g><title>coherent_trait (788,029 samples, 1.03%)</title><rect x="49.4579%" y="149" width="1.0259%" height="15" fill="rgb(205,117,38)"/><text x="49.7079%" y="159.50"></text></g><g><title>specialization_graph_of (784,749 samples, 1.02%)</title><rect x="49.4622%" y="133" width="1.0217%" height="15" fill="rgb(237,72,25)"/><text x="49.7122%" y="143.50"></text></g><g><title>item_types_checking (1,459,167 samples, 1.90%)</title><rect x="48.9593%" y="197" width="1.8997%" height="15" fill="rgb(244,70,9)"/><text x="49.2093%" y="207.50">i..</text></g><g><title>check_mod_item_types (1,454,826 samples, 1.89%)</title><rect x="48.9650%" y="181" width="1.8941%" height="15" fill="rgb(217,125,39)"/><text x="49.2150%" y="191.50">c..</text></g><g><title>typeck (154,722 samples, 0.20%)</title><rect x="50.6576%" y="165" width="0.2014%" height="15" fill="rgb(235,36,10)"/><text x="50.9076%" y="175.50"></text></g><g><title>fn_sig (102,321 samples, 0.13%)</title><rect x="51.0315%" y="165" width="0.1332%" height="15" fill="rgb(251,123,47)"/><text x="51.2815%" y="175.50"></text></g><g><title>named_region_map (79,821 samples, 0.10%)</title><rect x="51.2560%" y="149" width="0.1039%" height="15" fill="rgb(221,13,13)"/><text x="51.5060%" y="159.50"></text></g><g><title>generics_of (169,933 samples, 0.22%)</title><rect x="51.1647%" y="165" width="0.2212%" height="15" fill="rgb(238,131,9)"/><text x="51.4147%" y="175.50"></text></g><g><title>predicates_of (177,703 samples, 0.23%)</title><rect x="51.4201%" y="165" width="0.2314%" height="15" fill="rgb(211,50,8)"/><text x="51.6701%" y="175.50"></text></g><g><title>predicates_defined_on (160,603 samples, 0.21%)</title><rect x="51.4423%" y="149" width="0.2091%" height="15" fill="rgb(245,182,24)"/><text x="51.6923%" y="159.50"></text></g><g><title>type_collecting (854,799 samples, 1.11%)</title><rect x="50.8627%" y="197" width="1.1129%" height="15" fill="rgb(242,14,37)"/><text x="51.1127%" y="207.50"></text></g><g><title>collect_mod_item_types (843,329 samples, 1.10%)</title><rect x="50.8777%" y="181" width="1.0979%" height="15" fill="rgb(246,228,12)"/><text x="51.1277%" y="191.50"></text></g><g><title>type_of (249,002 samples, 0.32%)</title><rect x="51.6514%" y="165" width="0.3242%" height="15" fill="rgb(213,55,15)"/><text x="51.9014%" y="175.50"></text></g><g><title>type_of (109,861 samples, 0.14%)</title><rect x="51.8326%" y="149" width="0.1430%" height="15" fill="rgb(209,9,3)"/><text x="52.0826%" y="159.50"></text></g><g><title>evaluate_obligation (235,903 samples, 0.31%)</title><rect x="52.7673%" y="165" width="0.3071%" height="15" fill="rgb(230,59,30)"/><text x="53.0173%" y="175.50"></text></g><g><title>implied_outlives_bounds (79,051 samples, 0.10%)</title><rect x="53.0745%" y="165" width="0.1029%" height="15" fill="rgb(209,121,21)"/><text x="53.3245%" y="175.50"></text></g><g><title>param_env (80,604 samples, 0.10%)</title><rect x="53.1774%" y="165" width="0.1049%" height="15" fill="rgb(220,109,13)"/><text x="53.4274%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,042,112 samples, 1.36%)</title><rect x="52.0752%" y="181" width="1.3567%" height="15" fill="rgb(232,18,1)"/><text x="52.3252%" y="191.50"></text></g><g><title>region_scope_tree (114,902 samples, 0.15%)</title><rect x="53.2823%" y="165" width="0.1496%" height="15" fill="rgb(215,41,42)"/><text x="53.5323%" y="175.50"></text></g><g><title>evaluate_obligation (133,241 samples, 0.17%)</title><rect x="53.9211%" y="165" width="0.1735%" height="15" fill="rgb(224,123,36)"/><text x="54.1711%" y="175.50"></text></g><g><title>param_env (178,242 samples, 0.23%)</title><rect x="54.1751%" y="165" width="0.2321%" height="15" fill="rgb(240,125,3)"/><text x="54.4251%" y="175.50"></text></g><g><title>analysis (34,619,721 samples, 45.07%)</title><rect x="9.4765%" y="229" width="45.0719%" height="15" fill="rgb(205,98,50)"/><text x="9.7265%" y="239.50">analysis</text></g><g><title>type_check_crate (23,299,513 samples, 30.33%)</title><rect x="24.2144%" y="213" width="30.3340%" height="15" fill="rgb(205,185,37)"/><text x="24.4644%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,973,952 samples, 2.57%)</title><rect x="51.9785%" y="197" width="2.5699%" height="15" fill="rgb(238,207,15)"/><text x="52.2285%" y="207.50">wf..</text></g><g><title>check_item_well_formed (857,569 samples, 1.12%)</title><rect x="53.4319%" y="181" width="1.1165%" height="15" fill="rgb(213,199,42)"/><text x="53.6819%" y="191.50"></text></g><g><title>codegen_module (211,692 samples, 0.28%)</title><rect x="55.1498%" y="213" width="0.2756%" height="15" fill="rgb(235,201,11)"/><text x="55.3998%" y="223.50"></text></g><g><title>codegen_crate (790,419 samples, 1.03%)</title><rect x="54.5638%" y="229" width="1.0291%" height="15" fill="rgb(207,46,11)"/><text x="54.8138%" y="239.50"></text></g><g><title>codegen_module_optimize (2,909,453 samples, 3.79%)</title><rect x="55.5929%" y="229" width="3.7879%" height="15" fill="rgb(241,35,35)"/><text x="55.8429%" y="239.50">code..</text></g><g><title>LLVM_module_optimize (449,315 samples, 0.58%)</title><rect x="58.7958%" y="213" width="0.5850%" height="15" fill="rgb(243,32,47)"/><text x="59.0458%" y="223.50"></text></g><g><title>LLVM_lto_optimize (277,743 samples, 0.36%)</title><rect x="59.8980%" y="213" width="0.3616%" height="15" fill="rgb(247,202,23)"/><text x="60.1480%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,373,487 samples, 3.09%)</title><rect x="60.2596%" y="213" width="3.0901%" height="15" fill="rgb(219,102,11)"/><text x="60.5096%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (2,334,427 samples, 3.04%)</title><rect x="60.3104%" y="197" width="3.0392%" height="15" fill="rgb(243,110,44)"/><text x="60.5604%" y="207.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,081,765 samples, 4.01%)</title><rect x="59.3807%" y="229" width="4.0122%" height="15" fill="rgb(222,74,54)"/><text x="59.6307%" y="239.50">code..</text></g><g><title>AST_validation (128,861 samples, 0.17%)</title><rect x="63.6742%" y="213" width="0.1678%" height="15" fill="rgb(216,99,12)"/><text x="63.9242%" y="223.50"></text></g><g><title>crate_injection (107,331 samples, 0.14%)</title><rect x="63.8812%" y="213" width="0.1397%" height="15" fill="rgb(226,22,26)"/><text x="64.1312%" y="223.50"></text></g><g><title>metadata_load_macro (80,630 samples, 0.10%)</title><rect x="78.5470%" y="181" width="0.1050%" height="15" fill="rgb(217,163,10)"/><text x="78.7970%" y="191.50"></text></g><g><title>macro_expand_crate (13,377,402 samples, 17.42%)</title><rect x="64.0210%" y="213" width="17.4162%" height="15" fill="rgb(213,25,53)"/><text x="64.2710%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (13,360,522 samples, 17.39%)</title><rect x="64.0429%" y="197" width="17.3943%" height="15" fill="rgb(252,105,26)"/><text x="64.2929%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,139,344 samples, 2.79%)</title><rect x="78.6520%" y="181" width="2.7852%" height="15" fill="rgb(220,39,43)"/><text x="78.9020%" y="191.50">me..</text></g><g><title>metadata_register_crate (768,457 samples, 1.00%)</title><rect x="80.4367%" y="165" width="1.0005%" height="15" fill="rgb(229,68,48)"/><text x="80.6867%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (116,191 samples, 0.15%)</title><rect x="81.4434%" y="213" width="0.1513%" height="15" fill="rgb(252,8,32)"/><text x="81.6934%" y="223.50"></text></g><g><title>finalize_macro_resolutions (187,862 samples, 0.24%)</title><rect x="81.6842%" y="197" width="0.2446%" height="15" fill="rgb(223,20,43)"/><text x="81.9342%" y="207.50"></text></g><g><title>late_resolve_crate (988,881 samples, 1.29%)</title><rect x="81.9288%" y="197" width="1.2874%" height="15" fill="rgb(229,81,49)"/><text x="82.1788%" y="207.50"></text></g><g><title>configure_and_expand (15,290,323 samples, 19.91%)</title><rect x="63.3929%" y="229" width="19.9067%" height="15" fill="rgb(236,28,36)"/><text x="63.6429%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,309,585 samples, 1.70%)</title><rect x="81.5947%" y="213" width="1.7050%" height="15" fill="rgb(249,185,26)"/><text x="81.8447%" y="223.50"></text></g><g><title>drop_ast (85,281 samples, 0.11%)</title><rect x="83.2996%" y="229" width="0.1110%" height="15" fill="rgb(249,174,33)"/><text x="83.5496%" y="239.50"></text></g><g><title>early_lint_checks (155,832 samples, 0.20%)</title><rect x="83.4272%" y="229" width="0.2029%" height="15" fill="rgb(233,201,37)"/><text x="83.6772%" y="239.50"></text></g><g><title>free_global_ctxt (2,910,593 samples, 3.79%)</title><rect x="83.6301%" y="229" width="3.7893%" height="15" fill="rgb(221,78,26)"/><text x="83.8801%" y="239.50">free..</text></g><g><title>layout_of (162,532 samples, 0.21%)</title><rect x="88.9051%" y="197" width="0.2116%" height="15" fill="rgb(250,127,30)"/><text x="89.1551%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (494,415 samples, 0.64%)</title><rect x="89.1167%" y="197" width="0.6437%" height="15" fill="rgb(230,49,44)"/><text x="89.3667%" y="207.50"></text></g><g><title>optimized_mir (1,219,942 samples, 1.59%)</title><rect x="88.1744%" y="213" width="1.5883%" height="15" fill="rgb(229,67,23)"/><text x="88.4244%" y="223.50"></text></g><g><title>generate_crate_metadata (1,816,300 samples, 2.36%)</title><rect x="87.4195%" y="229" width="2.3647%" height="15" fill="rgb(249,83,47)"/><text x="87.6695%" y="239.50">ge..</text></g><g><title>hir_lowering (1,020,781 samples, 1.33%)</title><rect x="89.7841%" y="229" width="1.3290%" height="15" fill="rgb(215,43,3)"/><text x="90.0341%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,426,558 samples, 4.46%)</title><rect x="91.1313%" y="213" width="4.4611%" height="15" fill="rgb(238,154,13)"/><text x="91.3813%" y="223.50">finis..</text></g><g><title>link_crate (607,816 samples, 0.79%)</title><rect x="95.5924%" y="213" width="0.7913%" height="15" fill="rgb(219,56,2)"/><text x="95.8424%" y="223.50"></text></g><g><title>link_binary (599,026 samples, 0.78%)</title><rect x="95.6038%" y="197" width="0.7799%" height="15" fill="rgb(233,0,4)"/><text x="95.8538%" y="207.50"></text></g><g><title>link_rlib (364,574 samples, 0.47%)</title><rect x="95.9091%" y="181" width="0.4746%" height="15" fill="rgb(235,30,7)"/><text x="96.1591%" y="191.50"></text></g><g><title>link (4,055,405 samples, 5.28%)</title><rect x="91.1131%" y="229" width="5.2798%" height="15" fill="rgb(250,79,13)"/><text x="91.3631%" y="239.50">link</text></g><g><title>parse_crate (1,534,167 samples, 2.00%)</title><rect x="96.3929%" y="229" width="1.9974%" height="15" fill="rgb(211,146,34)"/><text x="96.6429%" y="239.50">p..</text></g><g><title>prepare_outputs (351,444 samples, 0.46%)</title><rect x="98.4022%" y="229" width="0.4576%" height="15" fill="rgb(228,22,38)"/><text x="98.6522%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (406,655 samples, 0.53%)</title><rect x="98.8598%" y="229" width="0.5294%" height="15" fill="rgb(235,168,5)"/><text x="99.1098%" y="239.50"></text></g><g><title>setup_global_ctxt (137,041 samples, 0.18%)</title><rect x="99.3905%" y="229" width="0.1784%" height="15" fill="rgb(221,155,16)"/><text x="99.6405%" y="239.50"></text></g><g><title>all (76,809,948 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (76,809,948 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (331,114 samples, 0.43%)</title><rect x="99.5689%" y="229" width="0.4311%" height="15" fill="rgb(234,103,6)"/><text x="99.8189%" y="239.50"></text></g></svg></svg>