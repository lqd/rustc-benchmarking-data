<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,783,032 samples, 11.62%)</title><rect x="0.7849%" y="181" width="11.6190%" height="15" fill="rgb(227,0,7)"/><text x="1.0349%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (165,192 samples, 0.16%)</title><rect x="12.2410%" y="165" width="0.1629%" height="15" fill="rgb(217,0,24)"/><text x="12.4910%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (150,311 samples, 0.15%)</title><rect x="12.2557%" y="149" width="0.1482%" height="15" fill="rgb(221,193,54)"/><text x="12.5057%" y="159.50"></text></g><g><title>is_copy_raw (172,893 samples, 0.17%)</title><rect x="17.7515%" y="69" width="0.1705%" height="15" fill="rgb(248,212,6)"/><text x="18.0015%" y="79.50"></text></g><g><title>evaluate_obligation (143,233 samples, 0.14%)</title><rect x="17.7808%" y="53" width="0.1412%" height="15" fill="rgb(208,68,35)"/><text x="18.0308%" y="63.50"></text></g><g><title>needs_drop_raw (164,092 samples, 0.16%)</title><rect x="17.9279%" y="69" width="0.1618%" height="15" fill="rgb(232,128,0)"/><text x="18.1779%" y="79.50"></text></g><g><title>is_copy_raw (156,391 samples, 0.15%)</title><rect x="17.9355%" y="53" width="0.1542%" height="15" fill="rgb(207,160,47)"/><text x="18.1855%" y="63.50"></text></g><g><title>evaluate_obligation (144,921 samples, 0.14%)</title><rect x="17.9468%" y="37" width="0.1429%" height="15" fill="rgb(228,23,34)"/><text x="18.1968%" y="47.50"></text></g><g><title>thir_body (369,843 samples, 0.36%)</title><rect x="18.1688%" y="69" width="0.3647%" height="15" fill="rgb(218,30,26)"/><text x="18.4188%" y="79.50"></text></g><g><title>mir_const (2,342,285 samples, 2.31%)</title><rect x="16.2297%" y="117" width="2.3097%" height="15" fill="rgb(220,122,19)"/><text x="16.4797%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,915,759 samples, 1.89%)</title><rect x="16.6503%" y="101" width="1.8891%" height="15" fill="rgb(250,228,42)"/><text x="16.9003%" y="111.50">u..</text></g><g><title>mir_built (1,650,316 samples, 1.63%)</title><rect x="16.9121%" y="85" width="1.6273%" height="15" fill="rgb(240,193,28)"/><text x="17.1621%" y="95.50"></text></g><g><title>mir_promoted (2,666,670 samples, 2.63%)</title><rect x="15.9283%" y="133" width="2.6295%" height="15" fill="rgb(216,20,37)"/><text x="16.1783%" y="143.50">mi..</text></g><g><title>type_op_prove_predicate (422,061 samples, 0.42%)</title><rect x="18.6411%" y="133" width="0.4162%" height="15" fill="rgb(206,188,39)"/><text x="18.8911%" y="143.50"></text></g><g><title>MIR_borrow_checking (6,429,402 samples, 6.34%)</title><rect x="12.7187%" y="165" width="6.3399%" height="15" fill="rgb(217,207,13)"/><text x="12.9687%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (6,390,441 samples, 6.30%)</title><rect x="12.7572%" y="149" width="6.3015%" height="15" fill="rgb(231,73,38)"/><text x="13.0072%" y="159.50">mir_borr..</text></g><g><title>hir_module_items (213,251 samples, 0.21%)</title><rect x="19.0714%" y="165" width="0.2103%" height="15" fill="rgb(225,20,46)"/><text x="19.3214%" y="175.50"></text></g><g><title>codegen_fn_attrs (225,603 samples, 0.22%)</title><rect x="19.7254%" y="101" width="0.2225%" height="15" fill="rgb(210,31,41)"/><text x="19.9754%" y="111.50"></text></g><g><title>codegen_fn_attrs (409,004 samples, 0.40%)</title><rect x="19.5513%" y="133" width="0.4033%" height="15" fill="rgb(221,200,47)"/><text x="19.8013%" y="143.50"></text></g><g><title>should_inherit_track_caller (321,114 samples, 0.32%)</title><rect x="19.6379%" y="117" width="0.3166%" height="15" fill="rgb(226,26,5)"/><text x="19.8879%" y="127.50"></text></g><g><title>check_mod_attrs (639,947 samples, 0.63%)</title><rect x="19.3238%" y="149" width="0.6310%" height="15" fill="rgb(249,33,26)"/><text x="19.5738%" y="159.50"></text></g><g><title>check_mod_const_bodies (118,842 samples, 0.12%)</title><rect x="19.9548%" y="149" width="0.1172%" height="15" fill="rgb(235,183,28)"/><text x="20.2048%" y="159.50"></text></g><g><title>lookup_deprecation_entry (143,221 samples, 0.14%)</title><rect x="20.3394%" y="133" width="0.1412%" height="15" fill="rgb(221,5,38)"/><text x="20.5894%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (419,604 samples, 0.41%)</title><rect x="20.1482%" y="149" width="0.4138%" height="15" fill="rgb(247,18,42)"/><text x="20.3982%" y="159.50"></text></g><g><title>misc_checking_1 (1,391,856 samples, 1.37%)</title><rect x="19.2821%" y="165" width="1.3725%" height="15" fill="rgb(241,131,45)"/><text x="19.5321%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (163,712 samples, 0.16%)</title><rect x="20.6558%" y="149" width="0.1614%" height="15" fill="rgb(249,31,29)"/><text x="20.9058%" y="159.50"></text></g><g><title>check_mod_liveness (124,741 samples, 0.12%)</title><rect x="20.6943%" y="133" width="0.1230%" height="15" fill="rgb(225,111,53)"/><text x="20.9443%" y="143.50"></text></g><g><title>misc_checking_2 (354,264 samples, 0.35%)</title><rect x="20.6546%" y="165" width="0.3493%" height="15" fill="rgb(238,160,17)"/><text x="20.9046%" y="175.50"></text></g><g><title>match_checking (189,262 samples, 0.19%)</title><rect x="20.8173%" y="149" width="0.1866%" height="15" fill="rgb(214,148,48)"/><text x="21.0673%" y="159.50"></text></g><g><title>check_match (178,922 samples, 0.18%)</title><rect x="20.8275%" y="133" width="0.1764%" height="15" fill="rgb(232,36,49)"/><text x="21.0775%" y="143.50"></text></g><g><title>death_checking (266,323 samples, 0.26%)</title><rect x="21.0824%" y="149" width="0.2626%" height="15" fill="rgb(209,103,24)"/><text x="21.3324%" y="159.50"></text></g><g><title>item_attrs (103,381 samples, 0.10%)</title><rect x="21.2431%" y="133" width="0.1019%" height="15" fill="rgb(229,88,8)"/><text x="21.4931%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (102,081 samples, 0.10%)</title><rect x="21.2443%" y="117" width="0.1007%" height="15" fill="rgb(213,181,19)"/><text x="21.4943%" y="127.50"></text></g><g><title>param_env (131,581 samples, 0.13%)</title><rect x="21.8677%" y="117" width="0.1297%" height="15" fill="rgb(254,191,54)"/><text x="22.1177%" y="127.50"></text></g><g><title>crate_lints (971,481 samples, 0.96%)</title><rect x="21.3466%" y="133" width="0.9580%" height="15" fill="rgb(241,83,37)"/><text x="21.5966%" y="143.50"></text></g><g><title>type_of (309,803 samples, 0.31%)</title><rect x="21.9991%" y="117" width="0.3055%" height="15" fill="rgb(233,36,39)"/><text x="22.2491%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (229,182 samples, 0.23%)</title><rect x="22.0786%" y="101" width="0.2260%" height="15" fill="rgb(226,3,54)"/><text x="22.3286%" y="111.50"></text></g><g><title>lint_checking (1,116,302 samples, 1.10%)</title><rect x="21.3450%" y="149" width="1.1008%" height="15" fill="rgb(245,192,40)"/><text x="21.5950%" y="159.50"></text></g><g><title>module_lints (143,151 samples, 0.14%)</title><rect x="22.3046%" y="133" width="0.1412%" height="15" fill="rgb(238,167,29)"/><text x="22.5546%" y="143.50"></text></g><g><title>lint_mod (139,791 samples, 0.14%)</title><rect x="22.3079%" y="117" width="0.1378%" height="15" fill="rgb(232,182,51)"/><text x="22.5579%" y="127.50"></text></g><g><title>privacy_access_levels (108,051 samples, 0.11%)</title><rect x="22.4458%" y="149" width="0.1065%" height="15" fill="rgb(231,60,39)"/><text x="22.6958%" y="159.50"></text></g><g><title>privacy_checking_modules (266,223 samples, 0.26%)</title><rect x="22.5523%" y="149" width="0.2625%" height="15" fill="rgb(208,69,12)"/><text x="22.8023%" y="159.50"></text></g><g><title>check_mod_privacy (263,803 samples, 0.26%)</title><rect x="22.5547%" y="133" width="0.2601%" height="15" fill="rgb(235,93,37)"/><text x="22.8047%" y="143.50"></text></g><g><title>misc_checking_3 (1,854,190 samples, 1.83%)</title><rect x="21.0039%" y="165" width="1.8284%" height="15" fill="rgb(213,116,39)"/><text x="21.2539%" y="175.50">m..</text></g><g><title>param_env (181,772 samples, 0.18%)</title><rect x="23.0480%" y="117" width="0.1792%" height="15" fill="rgb(222,207,29)"/><text x="23.2980%" y="127.50"></text></g><g><title>impl_parent (1,455,404 samples, 1.44%)</title><rect x="25.9141%" y="101" width="1.4351%" height="15" fill="rgb(206,96,30)"/><text x="26.1641%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (736,626 samples, 0.73%)</title><rect x="26.6229%" y="85" width="0.7264%" height="15" fill="rgb(218,138,4)"/><text x="26.8729%" y="95.50"></text></g><g><title>impl_trait_ref (3,066,735 samples, 3.02%)</title><rect x="27.3493%" y="101" width="3.0240%" height="15" fill="rgb(250,191,14)"/><text x="27.5993%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,338,119 samples, 2.31%)</title><rect x="28.0677%" y="85" width="2.3056%" height="15" fill="rgb(239,60,40)"/><text x="28.3177%" y="95.50">m..</text></g><g><title>coherent_trait (8,140,591 samples, 8.03%)</title><rect x="22.9025%" y="133" width="8.0273%" height="15" fill="rgb(206,27,48)"/><text x="23.1525%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (7,811,298 samples, 7.70%)</title><rect x="23.2272%" y="117" width="7.7026%" height="15" fill="rgb(225,35,8)"/><text x="23.4772%" y="127.50">specializat..</text></g><g><title>trait_impls_of (561,516 samples, 0.55%)</title><rect x="30.3761%" y="101" width="0.5537%" height="15" fill="rgb(250,213,24)"/><text x="30.6261%" y="111.50"></text></g><g><title>implementations_of_trait (131,712 samples, 0.13%)</title><rect x="30.7999%" y="85" width="0.1299%" height="15" fill="rgb(247,123,22)"/><text x="31.0499%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (118,302 samples, 0.12%)</title><rect x="30.8131%" y="69" width="0.1167%" height="15" fill="rgb(231,138,38)"/><text x="31.0631%" y="79.50"></text></g><g><title>coherence_checking (8,241,722 samples, 8.13%)</title><rect x="22.8729%" y="149" width="8.1270%" height="15" fill="rgb(231,145,46)"/><text x="23.1229%" y="159.50">coherence_c..</text></g><g><title>associated_item (208,693 samples, 0.21%)</title><rect x="40.1752%" y="85" width="0.2058%" height="15" fill="rgb(251,118,11)"/><text x="40.4252%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (158,933 samples, 0.16%)</title><rect x="40.2243%" y="69" width="0.1567%" height="15" fill="rgb(217,147,25)"/><text x="40.4743%" y="79.50"></text></g><g><title>associated_items (305,354 samples, 0.30%)</title><rect x="40.0889%" y="101" width="0.3011%" height="15" fill="rgb(247,81,37)"/><text x="40.3389%" y="111.50"></text></g><g><title>dropck_outlives (200,193 samples, 0.20%)</title><rect x="40.4140%" y="101" width="0.1974%" height="15" fill="rgb(209,12,38)"/><text x="40.6640%" y="111.50"></text></g><g><title>specializes (114,932 samples, 0.11%)</title><rect x="41.5527%" y="85" width="0.1133%" height="15" fill="rgb(227,1,9)"/><text x="41.8027%" y="95.50"></text></g><g><title>trait_impls_of (194,204 samples, 0.19%)</title><rect x="41.6764%" y="85" width="0.1915%" height="15" fill="rgb(248,47,43)"/><text x="41.9264%" y="95.50"></text></g><g><title>evaluate_obligation (1,282,092 samples, 1.26%)</title><rect x="40.6115%" y="101" width="1.2642%" height="15" fill="rgb(221,10,30)"/><text x="40.8615%" y="111.50"></text></g><g><title>item_attrs (234,323 samples, 0.23%)</title><rect x="42.1085%" y="101" width="0.2311%" height="15" fill="rgb(210,229,1)"/><text x="42.3585%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,193 samples, 0.23%)</title><rect x="42.1146%" y="85" width="0.2250%" height="15" fill="rgb(222,148,37)"/><text x="42.3646%" y="95.50"></text></g><g><title>predicates_of (195,606 samples, 0.19%)</title><rect x="42.4603%" y="101" width="0.1929%" height="15" fill="rgb(234,67,33)"/><text x="42.7103%" y="111.50"></text></g><g><title>predicates_defined_on (140,445 samples, 0.14%)</title><rect x="42.5147%" y="85" width="0.1385%" height="15" fill="rgb(247,98,35)"/><text x="42.7647%" y="95.50"></text></g><g><title>item_bodies_checking (11,877,712 samples, 11.71%)</title><rect x="31.0277%" y="149" width="11.7124%" height="15" fill="rgb(247,138,52)"/><text x="31.2777%" y="159.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (11,873,942 samples, 11.71%)</title><rect x="31.0314%" y="133" width="11.7086%" height="15" fill="rgb(213,79,30)"/><text x="31.2814%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (11,827,712 samples, 11.66%)</title><rect x="31.0770%" y="117" width="11.6631%" height="15" fill="rgb(246,177,23)"/><text x="31.3270%" y="127.50">typeck</text></g><g><title>item_types_checking (451,005 samples, 0.44%)</title><rect x="42.7401%" y="149" width="0.4447%" height="15" fill="rgb(230,62,27)"/><text x="42.9901%" y="159.50"></text></g><g><title>check_mod_item_types (444,005 samples, 0.44%)</title><rect x="42.7470%" y="133" width="0.4378%" height="15" fill="rgb(216,154,8)"/><text x="42.9970%" y="143.50"></text></g><g><title>fn_sig (279,891 samples, 0.28%)</title><rect x="43.4905%" y="117" width="0.2760%" height="15" fill="rgb(244,35,45)"/><text x="43.7405%" y="127.50"></text></g><g><title>named_region_map (518,887 samples, 0.51%)</title><rect x="43.8758%" y="101" width="0.5117%" height="15" fill="rgb(251,115,12)"/><text x="44.1258%" y="111.50"></text></g><g><title>resolve_lifetimes (488,186 samples, 0.48%)</title><rect x="43.9061%" y="85" width="0.4814%" height="15" fill="rgb(240,54,50)"/><text x="44.1561%" y="95.50"></text></g><g><title>lint_levels (115,771 samples, 0.11%)</title><rect x="44.2733%" y="69" width="0.1142%" height="15" fill="rgb(233,84,52)"/><text x="44.5233%" y="79.50"></text></g><g><title>generics_of (655,749 samples, 0.65%)</title><rect x="43.7665%" y="117" width="0.6466%" height="15" fill="rgb(207,117,47)"/><text x="44.0165%" y="127.50"></text></g><g><title>explicit_predicates_of (219,790 samples, 0.22%)</title><rect x="44.6178%" y="85" width="0.2167%" height="15" fill="rgb(249,43,39)"/><text x="44.8678%" y="95.50"></text></g><g><title>predicates_of (397,291 samples, 0.39%)</title><rect x="44.4948%" y="117" width="0.3918%" height="15" fill="rgb(209,38,44)"/><text x="44.7448%" y="127.50"></text></g><g><title>predicates_defined_on (345,110 samples, 0.34%)</title><rect x="44.5462%" y="101" width="0.3403%" height="15" fill="rgb(236,212,23)"/><text x="44.7962%" y="111.50"></text></g><g><title>type_collecting (1,899,921 samples, 1.87%)</title><rect x="43.1861%" y="149" width="1.8735%" height="15" fill="rgb(242,79,21)"/><text x="43.4361%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,875,980 samples, 1.85%)</title><rect x="43.2097%" y="133" width="1.8499%" height="15" fill="rgb(211,96,35)"/><text x="43.4597%" y="143.50">c..</text></g><g><title>type_of (146,021 samples, 0.14%)</title><rect x="44.9156%" y="117" width="0.1440%" height="15" fill="rgb(253,215,40)"/><text x="45.1656%" y="127.50"></text></g><g><title>evaluate_obligation (148,642 samples, 0.15%)</title><rect x="45.5818%" y="117" width="0.1466%" height="15" fill="rgb(211,81,21)"/><text x="45.8318%" y="127.50"></text></g><g><title>check_impl_item_well_formed (635,067 samples, 0.63%)</title><rect x="45.2447%" y="133" width="0.6262%" height="15" fill="rgb(208,190,38)"/><text x="45.4947%" y="143.50"></text></g><g><title>evaluate_obligation (358,215 samples, 0.35%)</title><rect x="47.7412%" y="117" width="0.3532%" height="15" fill="rgb(235,213,38)"/><text x="47.9912%" y="127.50"></text></g><g><title>implied_outlives_bounds (273,582 samples, 0.27%)</title><rect x="48.1056%" y="117" width="0.2698%" height="15" fill="rgb(237,122,38)"/><text x="48.3556%" y="127.50"></text></g><g><title>param_env (395,536 samples, 0.39%)</title><rect x="48.3754%" y="117" width="0.3900%" height="15" fill="rgb(244,218,35)"/><text x="48.6254%" y="127.50"></text></g><g><title>region_scope_tree (237,824 samples, 0.23%)</title><rect x="48.8646%" y="117" width="0.2345%" height="15" fill="rgb(240,68,47)"/><text x="49.1146%" y="127.50"></text></g><g><title>check_item_well_formed (3,372,738 samples, 3.33%)</title><rect x="45.8709%" y="133" width="3.3258%" height="15" fill="rgb(210,16,53)"/><text x="46.1209%" y="143.50">che..</text></g><g><title>evaluate_obligation (202,973 samples, 0.20%)</title><rect x="50.0136%" y="117" width="0.2001%" height="15" fill="rgb(235,124,12)"/><text x="50.2636%" y="127.50"></text></g><g><title>implied_outlives_bounds (229,223 samples, 0.23%)</title><rect x="50.2137%" y="117" width="0.2260%" height="15" fill="rgb(224,169,11)"/><text x="50.4637%" y="127.50"></text></g><g><title>param_env (121,092 samples, 0.12%)</title><rect x="50.4397%" y="117" width="0.1194%" height="15" fill="rgb(250,166,2)"/><text x="50.6897%" y="127.50"></text></g><g><title>analysis (38,796,762 samples, 38.26%)</title><rect x="12.4039%" y="181" width="38.2567%" height="15" fill="rgb(242,216,29)"/><text x="12.6539%" y="191.50">analysis</text></g><g><title>type_check_crate (28,221,174 samples, 27.83%)</title><rect x="22.8323%" y="165" width="27.8283%" height="15" fill="rgb(230,116,27)"/><text x="23.0823%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,678,353 samples, 5.60%)</title><rect x="45.0613%" y="149" width="5.5993%" height="15" fill="rgb(228,99,48)"/><text x="45.3113%" y="159.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,484,526 samples, 1.46%)</title><rect x="49.1967%" y="133" width="1.4639%" height="15" fill="rgb(253,11,6)"/><text x="49.4467%" y="143.50"></text></g><g><title>fn_abi_of_instance (253,853 samples, 0.25%)</title><rect x="51.8991%" y="149" width="0.2503%" height="15" fill="rgb(247,143,39)"/><text x="52.1491%" y="159.50"></text></g><g><title>codegen_module (944,560 samples, 0.93%)</title><rect x="51.2500%" y="165" width="0.9314%" height="15" fill="rgb(236,97,10)"/><text x="51.5000%" y="175.50"></text></g><g><title>optimized_mir (165,562 samples, 0.16%)</title><rect x="52.2865%" y="117" width="0.1633%" height="15" fill="rgb(233,208,19)"/><text x="52.5365%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (254,752 samples, 0.25%)</title><rect x="52.2036%" y="133" width="0.2512%" height="15" fill="rgb(216,164,2)"/><text x="52.4536%" y="143.50"></text></g><g><title>monomorphization_collector (279,013 samples, 0.28%)</title><rect x="52.2019%" y="149" width="0.2751%" height="15" fill="rgb(220,129,5)"/><text x="52.4519%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (383,885 samples, 0.38%)</title><rect x="52.1819%" y="165" width="0.3785%" height="15" fill="rgb(242,17,10)"/><text x="52.4319%" y="175.50"></text></g><g><title>codegen_crate (1,936,182 samples, 1.91%)</title><rect x="50.6710%" y="181" width="1.9092%" height="15" fill="rgb(242,107,0)"/><text x="50.9210%" y="191.50">c..</text></g><g><title>codegen_module_optimize (4,210,917 samples, 4.15%)</title><rect x="52.5803%" y="181" width="4.1523%" height="15" fill="rgb(251,28,31)"/><text x="52.8303%" y="191.50">codeg..</text></g><g><title>LLVM_module_optimize (3,477,439 samples, 3.43%)</title><rect x="53.3035%" y="165" width="3.4290%" height="15" fill="rgb(233,223,10)"/><text x="53.5535%" y="175.50">LLV..</text></g><g><title>LLVM_lto_optimize (1,672,119 samples, 1.65%)</title><rect x="57.1915%" y="165" width="1.6488%" height="15" fill="rgb(215,21,27)"/><text x="57.4415%" y="175.50"></text></g><g><title>LLVM_module_codegen (4,898,955 samples, 4.83%)</title><rect x="58.8403%" y="165" width="4.8308%" height="15" fill="rgb(232,23,21)"/><text x="59.0903%" y="175.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (4,808,484 samples, 4.74%)</title><rect x="58.9295%" y="149" width="4.7415%" height="15" fill="rgb(244,5,23)"/><text x="59.1795%" y="159.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (7,087,519 samples, 6.99%)</title><rect x="56.7326%" y="181" width="6.9889%" height="15" fill="rgb(226,81,46)"/><text x="56.9826%" y="191.50">codegen_m..</text></g><g><title>AST_validation (144,982 samples, 0.14%)</title><rect x="63.9454%" y="165" width="0.1430%" height="15" fill="rgb(247,70,30)"/><text x="64.1954%" y="175.50"></text></g><g><title>crate_injection (105,201 samples, 0.10%)</title><rect x="64.1558%" y="165" width="0.1037%" height="15" fill="rgb(212,68,19)"/><text x="64.4058%" y="175.50"></text></g><g><title>metadata_load_macro (355,343 samples, 0.35%)</title><rect x="75.7222%" y="133" width="0.3504%" height="15" fill="rgb(240,187,13)"/><text x="75.9722%" y="143.50"></text></g><g><title>metadata_register_crate (206,022 samples, 0.20%)</title><rect x="76.0726%" y="133" width="0.2032%" height="15" fill="rgb(223,113,26)"/><text x="76.3226%" y="143.50"></text></g><g><title>macro_expand_crate (12,342,017 samples, 12.17%)</title><rect x="64.2596%" y="165" width="12.1702%" height="15" fill="rgb(206,192,2)"/><text x="64.5096%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (12,315,547 samples, 12.14%)</title><rect x="64.2857%" y="149" width="12.1441%" height="15" fill="rgb(241,108,4)"/><text x="64.5357%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (156,212 samples, 0.15%)</title><rect x="76.2757%" y="133" width="0.1540%" height="15" fill="rgb(247,173,49)"/><text x="76.5257%" y="143.50"></text></g><g><title>finalize_macro_resolutions (345,184 samples, 0.34%)</title><rect x="76.5760%" y="149" width="0.3404%" height="15" fill="rgb(224,114,35)"/><text x="76.8260%" y="159.50"></text></g><g><title>late_resolve_crate (2,688,660 samples, 2.65%)</title><rect x="76.9163%" y="149" width="2.6512%" height="15" fill="rgb(245,159,27)"/><text x="77.1663%" y="159.50">la..</text></g><g><title>configure_and_expand (16,195,840 samples, 15.97%)</title><rect x="63.7214%" y="181" width="15.9704%" height="15" fill="rgb(245,172,44)"/><text x="63.9714%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,238,546 samples, 3.19%)</title><rect x="76.4983%" y="165" width="3.1935%" height="15" fill="rgb(236,23,11)"/><text x="76.7483%" y="175.50">res..</text></g><g><title>drop_ast (170,522 samples, 0.17%)</title><rect x="79.6918%" y="181" width="0.1681%" height="15" fill="rgb(205,117,38)"/><text x="79.9418%" y="191.50"></text></g><g><title>early_lint_checks (384,334 samples, 0.38%)</title><rect x="79.8724%" y="181" width="0.3790%" height="15" fill="rgb(237,72,25)"/><text x="80.1224%" y="191.50"></text></g><g><title>free_global_ctxt (1,505,786 samples, 1.48%)</title><rect x="80.2514%" y="181" width="1.4848%" height="15" fill="rgb(244,70,9)"/><text x="80.5014%" y="191.50"></text></g><g><title>layout_of (274,995 samples, 0.27%)</title><rect x="83.7056%" y="149" width="0.2712%" height="15" fill="rgb(217,125,39)"/><text x="83.9556%" y="159.50"></text></g><g><title>optimized_mir (2,392,809 samples, 2.36%)</title><rect x="82.5704%" y="165" width="2.3595%" height="15" fill="rgb(235,36,10)"/><text x="82.8204%" y="175.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (966,622 samples, 0.95%)</title><rect x="83.9768%" y="149" width="0.9532%" height="15" fill="rgb(251,123,47)"/><text x="84.2268%" y="159.50"></text></g><g><title>generate_crate_metadata (3,268,227 samples, 3.22%)</title><rect x="81.7362%" y="181" width="3.2227%" height="15" fill="rgb(221,13,13)"/><text x="81.9862%" y="191.50">gen..</text></g><g><title>hir_lowering (2,664,470 samples, 2.63%)</title><rect x="84.9590%" y="181" width="2.6274%" height="15" fill="rgb(238,131,9)"/><text x="85.2090%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (10,015,442 samples, 9.88%)</title><rect x="87.5987%" y="165" width="9.8760%" height="15" fill="rgb(211,50,8)"/><text x="87.8487%" y="175.50">finish_ongoing..</text></g><g><title>link_crate (699,798 samples, 0.69%)</title><rect x="97.4747%" y="165" width="0.6901%" height="15" fill="rgb(245,182,24)"/><text x="97.7247%" y="175.50"></text></g><g><title>link_binary (694,948 samples, 0.69%)</title><rect x="97.4795%" y="149" width="0.6853%" height="15" fill="rgb(242,14,37)"/><text x="97.7295%" y="159.50"></text></g><g><title>link_rlib (440,575 samples, 0.43%)</title><rect x="97.7303%" y="133" width="0.4344%" height="15" fill="rgb(246,228,12)"/><text x="97.9803%" y="143.50"></text></g><g><title>link (10,735,400 samples, 10.59%)</title><rect x="87.5863%" y="181" width="10.5860%" height="15" fill="rgb(213,55,15)"/><text x="87.8363%" y="191.50">link</text></g><g><title>parse_crate (583,657 samples, 0.58%)</title><rect x="98.1723%" y="181" width="0.5755%" height="15" fill="rgb(209,9,3)"/><text x="98.4223%" y="191.50"></text></g><g><title>prepare_outputs (346,604 samples, 0.34%)</title><rect x="98.7574%" y="181" width="0.3418%" height="15" fill="rgb(230,59,30)"/><text x="99.0074%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (434,675 samples, 0.43%)</title><rect x="99.0992%" y="181" width="0.4286%" height="15" fill="rgb(209,121,21)"/><text x="99.3492%" y="191.50"></text></g><g><title>setup_global_ctxt (153,022 samples, 0.15%)</title><rect x="99.5287%" y="181" width="0.1509%" height="15" fill="rgb(220,109,13)"/><text x="99.7787%" y="191.50"></text></g><g><title>all (101,411,711 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (101,411,711 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (324,933 samples, 0.32%)</title><rect x="99.6796%" y="181" width="0.3204%" height="15" fill="rgb(224,123,36)"/><text x="99.9296%" y="191.50"></text></g></svg></svg>