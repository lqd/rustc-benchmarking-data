<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,973,915 samples, 6.10%)</title><rect x="1.2749%" y="197" width="6.1044%" height="15" fill="rgb(227,0,7)"/><text x="1.5249%" y="207.50">LLVM_pas..</text></g><g><title>codegen_generate_lto_work (144,271 samples, 0.22%)</title><rect x="7.1577%" y="181" width="0.2216%" height="15" fill="rgb(217,0,24)"/><text x="7.4077%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (133,361 samples, 0.20%)</title><rect x="7.1744%" y="165" width="0.2049%" height="15" fill="rgb(221,193,54)"/><text x="7.4244%" y="175.50"></text></g><g><title>mir_promoted (324,305 samples, 0.50%)</title><rect x="11.2578%" y="133" width="0.4982%" height="15" fill="rgb(248,212,6)"/><text x="11.5078%" y="143.50"></text></g><g><title>mir_const_qualif_const_arg (278,974 samples, 0.43%)</title><rect x="11.3274%" y="117" width="0.4285%" height="15" fill="rgb(208,68,35)"/><text x="11.5774%" y="127.50"></text></g><g><title>mir_const (217,632 samples, 0.33%)</title><rect x="11.4216%" y="101" width="0.3343%" height="15" fill="rgb(232,128,0)"/><text x="11.6716%" y="111.50"></text></g><g><title>unsafety_check_result_for_const_arg (133,361 samples, 0.20%)</title><rect x="11.5511%" y="85" width="0.2049%" height="15" fill="rgb(207,160,47)"/><text x="11.8011%" y="95.50"></text></g><g><title>mir_built (79,371 samples, 0.12%)</title><rect x="11.6340%" y="69" width="0.1219%" height="15" fill="rgb(228,23,34)"/><text x="11.8840%" y="79.50"></text></g><g><title>mir_borrowck_const_arg (787,199 samples, 1.21%)</title><rect x="10.5481%" y="149" width="1.2092%" height="15" fill="rgb(218,30,26)"/><text x="10.7981%" y="159.50"></text></g><g><title>param_env (126,322 samples, 0.19%)</title><rect x="12.2474%" y="117" width="0.1940%" height="15" fill="rgb(220,122,19)"/><text x="12.4974%" y="127.50"></text></g><g><title>item_attrs (154,872 samples, 0.24%)</title><rect x="12.6543%" y="85" width="0.2379%" height="15" fill="rgb(250,228,42)"/><text x="12.9043%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (149,902 samples, 0.23%)</title><rect x="12.6619%" y="69" width="0.2303%" height="15" fill="rgb(240,193,28)"/><text x="12.9119%" y="79.50"></text></g><g><title>codegen_fn_attrs (207,283 samples, 0.32%)</title><rect x="12.5813%" y="101" width="0.3184%" height="15" fill="rgb(216,20,37)"/><text x="12.8313%" y="111.50"></text></g><g><title>is_copy_raw (100,661 samples, 0.15%)</title><rect x="13.7554%" y="85" width="0.1546%" height="15" fill="rgb(206,188,39)"/><text x="14.0054%" y="95.50"></text></g><g><title>evaluate_obligation (86,751 samples, 0.13%)</title><rect x="13.7768%" y="69" width="0.1333%" height="15" fill="rgb(217,207,13)"/><text x="14.0268%" y="79.50"></text></g><g><title>needs_drop_raw (107,231 samples, 0.16%)</title><rect x="13.9101%" y="85" width="0.1647%" height="15" fill="rgb(231,73,38)"/><text x="14.1601%" y="95.50"></text></g><g><title>is_copy_raw (101,121 samples, 0.16%)</title><rect x="13.9195%" y="69" width="0.1553%" height="15" fill="rgb(225,20,46)"/><text x="14.1695%" y="79.50"></text></g><g><title>evaluate_obligation (90,841 samples, 0.14%)</title><rect x="13.9352%" y="53" width="0.1395%" height="15" fill="rgb(210,31,41)"/><text x="14.1852%" y="63.50"></text></g><g><title>resolve_instance (220,792 samples, 0.34%)</title><rect x="14.0748%" y="85" width="0.3392%" height="15" fill="rgb(221,200,47)"/><text x="14.3248%" y="95.50"></text></g><g><title>thir_body (268,811 samples, 0.41%)</title><rect x="14.4178%" y="85" width="0.4129%" height="15" fill="rgb(226,26,5)"/><text x="14.6678%" y="95.50"></text></g><g><title>mir_const (1,886,921 samples, 2.90%)</title><rect x="11.9344%" y="133" width="2.8985%" height="15" fill="rgb(249,33,26)"/><text x="12.1844%" y="143.50">mi..</text></g><g><title>unsafety_check_result (1,556,787 samples, 2.39%)</title><rect x="12.4415%" y="117" width="2.3914%" height="15" fill="rgb(235,183,28)"/><text x="12.6915%" y="127.50">un..</text></g><g><title>mir_built (1,258,463 samples, 1.93%)</title><rect x="12.8997%" y="101" width="1.9331%" height="15" fill="rgb(221,5,38)"/><text x="13.1497%" y="111.50">m..</text></g><g><title>mir_promoted (2,006,252 samples, 3.08%)</title><rect x="11.7573%" y="149" width="3.0818%" height="15" fill="rgb(247,18,42)"/><text x="12.0073%" y="159.50">mir..</text></g><g><title>type_op_normalize_fn_sig (101,091 samples, 0.16%)</title><rect x="14.8391%" y="149" width="0.1553%" height="15" fill="rgb(241,131,45)"/><text x="15.0891%" y="159.50"></text></g><g><title>MIR_borrow_checking (5,157,628 samples, 7.92%)</title><rect x="7.6984%" y="181" width="7.9227%" height="15" fill="rgb(249,31,29)"/><text x="7.9484%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (5,142,568 samples, 7.90%)</title><rect x="7.7215%" y="165" width="7.8996%" height="15" fill="rgb(225,111,53)"/><text x="7.9715%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (407,936 samples, 0.63%)</title><rect x="14.9944%" y="149" width="0.6266%" height="15" fill="rgb(238,160,17)"/><text x="15.2444%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (88,361 samples, 0.14%)</title><rect x="15.6376%" y="165" width="0.1357%" height="15" fill="rgb(214,148,48)"/><text x="15.8876%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (86,901 samples, 0.13%)</title><rect x="15.6398%" y="149" width="0.1335%" height="15" fill="rgb(232,36,49)"/><text x="15.8898%" y="159.50"></text></g><g><title>MIR_effect_checking (100,141 samples, 0.15%)</title><rect x="15.6211%" y="181" width="0.1538%" height="15" fill="rgb(209,103,24)"/><text x="15.8711%" y="191.50"></text></g><g><title>hir_module_items (134,941 samples, 0.21%)</title><rect x="15.7749%" y="181" width="0.2073%" height="15" fill="rgb(229,88,8)"/><text x="16.0249%" y="191.50"></text></g><g><title>codegen_fn_attrs (66,091 samples, 0.10%)</title><rect x="16.5083%" y="117" width="0.1015%" height="15" fill="rgb(213,181,19)"/><text x="16.7583%" y="127.50"></text></g><g><title>should_inherit_track_caller (122,192 samples, 0.19%)</title><rect x="16.4262%" y="133" width="0.1877%" height="15" fill="rgb(254,191,54)"/><text x="16.6762%" y="143.50"></text></g><g><title>codegen_fn_attrs (299,934 samples, 0.46%)</title><rect x="16.1993%" y="149" width="0.4607%" height="15" fill="rgb(241,83,37)"/><text x="16.4493%" y="159.50"></text></g><g><title>check_mod_attrs (413,124 samples, 0.63%)</title><rect x="16.0259%" y="165" width="0.6346%" height="15" fill="rgb(233,36,39)"/><text x="16.2759%" y="175.50"></text></g><g><title>lookup_stability (83,781 samples, 0.13%)</title><rect x="16.9997%" y="149" width="0.1287%" height="15" fill="rgb(226,3,54)"/><text x="17.2497%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (206,723 samples, 0.32%)</title><rect x="16.8347%" y="165" width="0.3176%" height="15" fill="rgb(245,192,40)"/><text x="17.0847%" y="175.50"></text></g><g><title>misc_checking_1 (811,370 samples, 1.25%)</title><rect x="15.9828%" y="181" width="1.2464%" height="15" fill="rgb(238,167,29)"/><text x="16.2328%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (148,812 samples, 0.23%)</title><rect x="17.2320%" y="165" width="0.2286%" height="15" fill="rgb(232,182,51)"/><text x="17.4820%" y="175.50"></text></g><g><title>check_mod_liveness (113,052 samples, 0.17%)</title><rect x="17.2870%" y="149" width="0.1737%" height="15" fill="rgb(231,60,39)"/><text x="17.5370%" y="159.50"></text></g><g><title>misc_checking_2 (270,073 samples, 0.41%)</title><rect x="17.2292%" y="181" width="0.4149%" height="15" fill="rgb(208,69,12)"/><text x="17.4792%" y="191.50"></text></g><g><title>match_checking (119,421 samples, 0.18%)</title><rect x="17.4606%" y="165" width="0.1834%" height="15" fill="rgb(235,93,37)"/><text x="17.7106%" y="175.50"></text></g><g><title>check_match (111,471 samples, 0.17%)</title><rect x="17.4728%" y="149" width="0.1712%" height="15" fill="rgb(213,116,39)"/><text x="17.7228%" y="159.50"></text></g><g><title>death_checking (100,551 samples, 0.15%)</title><rect x="17.7258%" y="165" width="0.1545%" height="15" fill="rgb(222,207,29)"/><text x="17.9758%" y="175.50"></text></g><g><title>crate_lints (117,121 samples, 0.18%)</title><rect x="17.8820%" y="149" width="0.1799%" height="15" fill="rgb(206,96,30)"/><text x="18.1320%" y="159.50"></text></g><g><title>lint_checking (193,192 samples, 0.30%)</title><rect x="17.8803%" y="165" width="0.2968%" height="15" fill="rgb(218,138,4)"/><text x="18.1303%" y="175.50"></text></g><g><title>module_lints (74,921 samples, 0.12%)</title><rect x="18.0620%" y="149" width="0.1151%" height="15" fill="rgb(250,191,14)"/><text x="18.3120%" y="159.50"></text></g><g><title>lint_mod (72,911 samples, 0.11%)</title><rect x="18.0650%" y="133" width="0.1120%" height="15" fill="rgb(239,60,40)"/><text x="18.3150%" y="143.50"></text></g><g><title>privacy_checking_modules (143,142 samples, 0.22%)</title><rect x="18.2594%" y="165" width="0.2199%" height="15" fill="rgb(206,27,48)"/><text x="18.5094%" y="175.50"></text></g><g><title>check_mod_privacy (142,012 samples, 0.22%)</title><rect x="18.2612%" y="149" width="0.2181%" height="15" fill="rgb(225,35,8)"/><text x="18.5112%" y="159.50"></text></g><g><title>misc_checking_3 (552,036 samples, 0.85%)</title><rect x="17.6441%" y="181" width="0.8480%" height="15" fill="rgb(250,213,24)"/><text x="17.8941%" y="191.50"></text></g><g><title>impl_trait_ref (342,255 samples, 0.53%)</title><rect x="19.0385%" y="117" width="0.5257%" height="15" fill="rgb(247,123,22)"/><text x="19.2885%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (311,065 samples, 0.48%)</title><rect x="19.0864%" y="101" width="0.4778%" height="15" fill="rgb(231,138,38)"/><text x="19.3364%" y="111.50"></text></g><g><title>coherent_trait (693,647 samples, 1.07%)</title><rect x="18.5849%" y="149" width="1.0655%" height="15" fill="rgb(231,145,46)"/><text x="18.8349%" y="159.50"></text></g><g><title>specialization_graph_of (682,677 samples, 1.05%)</title><rect x="18.6017%" y="133" width="1.0487%" height="15" fill="rgb(251,118,11)"/><text x="18.8517%" y="143.50"></text></g><g><title>coherence_checking (770,179 samples, 1.18%)</title><rect x="18.5542%" y="165" width="1.1831%" height="15" fill="rgb(217,147,25)"/><text x="18.8042%" y="175.50"></text></g><g><title>associated_item (279,015 samples, 0.43%)</title><rect x="31.7973%" y="101" width="0.4286%" height="15" fill="rgb(247,81,37)"/><text x="32.0473%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (200,684 samples, 0.31%)</title><rect x="31.9177%" y="85" width="0.3083%" height="15" fill="rgb(209,12,38)"/><text x="32.1677%" y="95.50"></text></g><g><title>associated_items (450,306 samples, 0.69%)</title><rect x="31.5609%" y="117" width="0.6917%" height="15" fill="rgb(227,1,9)"/><text x="31.8109%" y="127.50"></text></g><g><title>generics_of (804,058 samples, 1.24%)</title><rect x="36.2532%" y="101" width="1.2351%" height="15" fill="rgb(248,47,43)"/><text x="36.5032%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (658,835 samples, 1.01%)</title><rect x="36.4763%" y="85" width="1.0120%" height="15" fill="rgb(221,10,30)"/><text x="36.7263%" y="95.50"></text></g><g><title>impl_trait_ref (1,139,874 samples, 1.75%)</title><rect x="37.5736%" y="101" width="1.7510%" height="15" fill="rgb(210,229,1)"/><text x="37.8236%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (990,844 samples, 1.52%)</title><rect x="37.8026%" y="85" width="1.5220%" height="15" fill="rgb(222,148,37)"/><text x="38.0526%" y="95.50"></text></g><g><title>predicates_of (285,212 samples, 0.44%)</title><rect x="39.3839%" y="101" width="0.4381%" height="15" fill="rgb(234,67,33)"/><text x="39.6339%" y="111.50"></text></g><g><title>predicates_defined_on (160,281 samples, 0.25%)</title><rect x="39.5759%" y="85" width="0.2462%" height="15" fill="rgb(247,98,35)"/><text x="39.8259%" y="95.50"></text></g><g><title>specializes (726,219 samples, 1.12%)</title><rect x="39.8221%" y="101" width="1.1156%" height="15" fill="rgb(247,138,52)"/><text x="40.0721%" y="111.50"></text></g><g><title>param_env (442,174 samples, 0.68%)</title><rect x="40.2584%" y="85" width="0.6792%" height="15" fill="rgb(213,79,30)"/><text x="40.5084%" y="95.50"></text></g><g><title>def_span (199,241 samples, 0.31%)</title><rect x="40.6316%" y="69" width="0.3061%" height="15" fill="rgb(246,177,23)"/><text x="40.8816%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (178,731 samples, 0.27%)</title><rect x="40.6631%" y="53" width="0.2746%" height="15" fill="rgb(230,62,27)"/><text x="40.9131%" y="63.50"></text></g><g><title>trait_impls_of (239,282 samples, 0.37%)</title><rect x="40.9620%" y="101" width="0.3676%" height="15" fill="rgb(216,154,8)"/><text x="41.2120%" y="111.50"></text></g><g><title>implementations_of_trait (74,570 samples, 0.11%)</title><rect x="41.2150%" y="85" width="0.1145%" height="15" fill="rgb(244,35,45)"/><text x="41.4650%" y="95.50"></text></g><g><title>evaluate_obligation (5,885,947 samples, 9.04%)</title><rect x="32.3121%" y="117" width="9.0415%" height="15" fill="rgb(251,115,12)"/><text x="32.5621%" y="127.50">evaluate_obli..</text></g><g><title>fn_sig (125,681 samples, 0.19%)</title><rect x="41.3742%" y="117" width="0.1931%" height="15" fill="rgb(240,54,50)"/><text x="41.6242%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (111,591 samples, 0.17%)</title><rect x="41.3958%" y="101" width="0.1714%" height="15" fill="rgb(233,84,52)"/><text x="41.6458%" y="111.50"></text></g><g><title>generics_of (721,219 samples, 1.11%)</title><rect x="41.5673%" y="117" width="1.1079%" height="15" fill="rgb(207,117,47)"/><text x="41.8173%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (543,178 samples, 0.83%)</title><rect x="41.8408%" y="101" width="0.8344%" height="15" fill="rgb(249,43,39)"/><text x="42.0908%" y="111.50"></text></g><g><title>impl_trait_ref (1,018,920 samples, 1.57%)</title><rect x="42.7127%" y="117" width="1.5652%" height="15" fill="rgb(209,38,44)"/><text x="42.9627%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (861,039 samples, 1.32%)</title><rect x="42.9552%" y="101" width="1.3227%" height="15" fill="rgb(236,212,23)"/><text x="43.2052%" y="111.50"></text></g><g><title>item_attrs (154,502 samples, 0.24%)</title><rect x="44.2894%" y="117" width="0.2373%" height="15" fill="rgb(242,79,21)"/><text x="44.5394%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (151,162 samples, 0.23%)</title><rect x="44.2946%" y="101" width="0.2322%" height="15" fill="rgb(211,96,35)"/><text x="44.5446%" y="111.50"></text></g><g><title>method_autoderef_steps (317,415 samples, 0.49%)</title><rect x="44.5786%" y="117" width="0.4876%" height="15" fill="rgb(253,215,40)"/><text x="44.8286%" y="127.50"></text></g><g><title>evaluate_obligation (168,003 samples, 0.26%)</title><rect x="44.8081%" y="101" width="0.2581%" height="15" fill="rgb(211,81,21)"/><text x="45.0581%" y="111.50"></text></g><g><title>associated_item (354,496 samples, 0.54%)</title><rect x="48.3556%" y="69" width="0.5445%" height="15" fill="rgb(208,190,38)"/><text x="48.6056%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (265,515 samples, 0.41%)</title><rect x="48.4923%" y="53" width="0.4079%" height="15" fill="rgb(235,213,38)"/><text x="48.7423%" y="63.50"></text></g><g><title>associated_items (500,786 samples, 0.77%)</title><rect x="48.1685%" y="85" width="0.7693%" height="15" fill="rgb(237,122,38)"/><text x="48.4185%" y="95.50"></text></g><g><title>predicates_of (66,180 samples, 0.10%)</title><rect x="49.4319%" y="69" width="0.1017%" height="15" fill="rgb(244,218,35)"/><text x="49.6819%" y="79.50"></text></g><g><title>evaluate_obligation (523,197 samples, 0.80%)</title><rect x="49.0439%" y="85" width="0.8037%" height="15" fill="rgb(240,68,47)"/><text x="49.2939%" y="95.50"></text></g><g><title>trait_impls_of (202,343 samples, 0.31%)</title><rect x="49.5367%" y="69" width="0.3108%" height="15" fill="rgb(210,16,53)"/><text x="49.7867%" y="79.50"></text></g><g><title>implementations_of_trait (67,772 samples, 0.10%)</title><rect x="49.7434%" y="53" width="0.1041%" height="15" fill="rgb(235,124,12)"/><text x="49.9934%" y="63.50"></text></g><g><title>associated_item (122,242 samples, 0.19%)</title><rect x="49.9958%" y="53" width="0.1878%" height="15" fill="rgb(224,169,11)"/><text x="50.2458%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (121,042 samples, 0.19%)</title><rect x="49.9976%" y="37" width="0.1859%" height="15" fill="rgb(250,166,2)"/><text x="50.2476%" y="47.50"></text></g><g><title>impl_item_implementor_ids (136,052 samples, 0.21%)</title><rect x="49.9879%" y="85" width="0.2090%" height="15" fill="rgb(242,216,29)"/><text x="50.2379%" y="95.50"></text></g><g><title>associated_items (133,802 samples, 0.21%)</title><rect x="49.9913%" y="69" width="0.2055%" height="15" fill="rgb(230,116,27)"/><text x="50.2413%" y="79.50"></text></g><g><title>evaluate_obligation (124,542 samples, 0.19%)</title><rect x="50.4915%" y="69" width="0.1913%" height="15" fill="rgb(228,99,48)"/><text x="50.7415%" y="79.50"></text></g><g><title>method_autoderef_steps (233,093 samples, 0.36%)</title><rect x="50.3662%" y="85" width="0.3581%" height="15" fill="rgb(253,11,6)"/><text x="50.6162%" y="95.50"></text></g><g><title>predicates_of (92,580 samples, 0.14%)</title><rect x="50.7347%" y="85" width="0.1422%" height="15" fill="rgb(247,143,39)"/><text x="50.9847%" y="95.50"></text></g><g><title>opt_const_param_of (3,864,835 samples, 5.94%)</title><rect x="45.0662%" y="117" width="5.9368%" height="15" fill="rgb(236,97,10)"/><text x="45.3162%" y="127.50">opt_cons..</text></g><g><title>typeck (3,850,314 samples, 5.91%)</title><rect x="45.0885%" y="101" width="5.9145%" height="15" fill="rgb(233,208,19)"/><text x="45.3385%" y="111.50">typeck</text></g><g><title>metadata_decode_entry_explicit_predicates_of (71,971 samples, 0.11%)</title><rect x="51.3616%" y="69" width="0.1106%" height="15" fill="rgb(216,164,2)"/><text x="51.6116%" y="79.50"></text></g><g><title>explicit_predicates_of (99,831 samples, 0.15%)</title><rect x="51.3197%" y="85" width="0.1534%" height="15" fill="rgb(220,129,5)"/><text x="51.5697%" y="95.50"></text></g><g><title>predicates_of (331,796 samples, 0.51%)</title><rect x="51.0156%" y="117" width="0.5097%" height="15" fill="rgb(242,17,10)"/><text x="51.2656%" y="127.50"></text></g><g><title>predicates_defined_on (220,183 samples, 0.34%)</title><rect x="51.1870%" y="101" width="0.3382%" height="15" fill="rgb(242,107,0)"/><text x="51.4370%" y="111.50"></text></g><g><title>specializes (205,642 samples, 0.32%)</title><rect x="51.5253%" y="117" width="0.3159%" height="15" fill="rgb(251,28,31)"/><text x="51.7753%" y="127.50"></text></g><g><title>param_env (96,982 samples, 0.15%)</title><rect x="51.6922%" y="101" width="0.1490%" height="15" fill="rgb(233,223,10)"/><text x="51.9422%" y="111.50"></text></g><g><title>typeck_const_arg (196,833 samples, 0.30%)</title><rect x="51.8989%" y="117" width="0.3024%" height="15" fill="rgb(215,21,27)"/><text x="52.1489%" y="127.50"></text></g><g><title>item_bodies_checking (21,116,620 samples, 32.44%)</title><rect x="19.7784%" y="165" width="32.4375%" height="15" fill="rgb(232,23,21)"/><text x="20.0284%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,112,930 samples, 32.43%)</title><rect x="19.7840%" y="149" width="32.4319%" height="15" fill="rgb(244,5,23)"/><text x="20.0340%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (21,096,330 samples, 32.41%)</title><rect x="19.8095%" y="133" width="32.4064%" height="15" fill="rgb(226,81,46)"/><text x="20.0595%" y="143.50">typeck</text></g><g><title>item_types_checking (582,377 samples, 0.89%)</title><rect x="52.2159%" y="165" width="0.8946%" height="15" fill="rgb(247,70,30)"/><text x="52.4659%" y="175.50"></text></g><g><title>check_mod_item_types (577,967 samples, 0.89%)</title><rect x="52.2227%" y="149" width="0.8878%" height="15" fill="rgb(212,68,19)"/><text x="52.4727%" y="159.50"></text></g><g><title>is_late_bound_map (98,361 samples, 0.15%)</title><rect x="53.5483%" y="117" width="0.1511%" height="15" fill="rgb(240,187,13)"/><text x="53.7983%" y="127.50"></text></g><g><title>resolve_lifetimes (82,131 samples, 0.13%)</title><rect x="53.5733%" y="101" width="0.1262%" height="15" fill="rgb(223,113,26)"/><text x="53.8233%" y="111.50"></text></g><g><title>named_region_map (134,913 samples, 0.21%)</title><rect x="53.6994%" y="117" width="0.2072%" height="15" fill="rgb(206,192,2)"/><text x="53.9494%" y="127.50"></text></g><g><title>resolve_lifetimes (124,293 samples, 0.19%)</title><rect x="53.7158%" y="101" width="0.1909%" height="15" fill="rgb(241,108,4)"/><text x="53.9658%" y="111.50"></text></g><g><title>generics_of (337,966 samples, 0.52%)</title><rect x="53.4187%" y="133" width="0.5192%" height="15" fill="rgb(247,173,49)"/><text x="53.6687%" y="143.50"></text></g><g><title>explicit_predicates_of (447,913 samples, 0.69%)</title><rect x="54.0465%" y="101" width="0.6880%" height="15" fill="rgb(224,114,35)"/><text x="54.2965%" y="111.50"></text></g><g><title>predicates_of (701,937 samples, 1.08%)</title><rect x="53.9697%" y="133" width="1.0783%" height="15" fill="rgb(245,159,27)"/><text x="54.2197%" y="143.50"></text></g><g><title>predicates_defined_on (682,197 samples, 1.05%)</title><rect x="54.0000%" y="117" width="1.0479%" height="15" fill="rgb(245,172,44)"/><text x="54.2500%" y="127.50"></text></g><g><title>inferred_outlives_of (204,043 samples, 0.31%)</title><rect x="54.7345%" y="101" width="0.3134%" height="15" fill="rgb(236,23,11)"/><text x="54.9845%" y="111.50"></text></g><g><title>inferred_outlives_crate (186,122 samples, 0.29%)</title><rect x="54.7620%" y="85" width="0.2859%" height="15" fill="rgb(205,117,38)"/><text x="55.0120%" y="95.50"></text></g><g><title>type_collecting (1,476,757 samples, 2.27%)</title><rect x="53.1122%" y="165" width="2.2685%" height="15" fill="rgb(237,72,25)"/><text x="53.3622%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,459,047 samples, 2.24%)</title><rect x="53.1394%" y="149" width="2.2413%" height="15" fill="rgb(244,70,9)"/><text x="53.3894%" y="159.50">c..</text></g><g><title>type_of (162,420 samples, 0.25%)</title><rect x="55.1312%" y="133" width="0.2495%" height="15" fill="rgb(217,125,39)"/><text x="55.3812%" y="143.50"></text></g><g><title>evaluate_obligation (160,814 samples, 0.25%)</title><rect x="56.1034%" y="133" width="0.2470%" height="15" fill="rgb(235,36,10)"/><text x="56.3534%" y="143.50"></text></g><g><title>implied_outlives_bounds (84,432 samples, 0.13%)</title><rect x="56.3504%" y="133" width="0.1297%" height="15" fill="rgb(251,123,47)"/><text x="56.6004%" y="143.50"></text></g><g><title>param_env (71,093 samples, 0.11%)</title><rect x="56.4801%" y="133" width="0.1092%" height="15" fill="rgb(221,13,13)"/><text x="56.7301%" y="143.50"></text></g><g><title>check_impl_item_well_formed (823,130 samples, 1.26%)</title><rect x="55.4904%" y="149" width="1.2644%" height="15" fill="rgb(238,131,9)"/><text x="55.7404%" y="159.50"></text></g><g><title>region_scope_tree (107,711 samples, 0.17%)</title><rect x="56.5893%" y="133" width="0.1655%" height="15" fill="rgb(211,50,8)"/><text x="56.8393%" y="143.50"></text></g><g><title>evaluate_obligation (141,342 samples, 0.22%)</title><rect x="57.9273%" y="133" width="0.2171%" height="15" fill="rgb(245,182,24)"/><text x="58.1773%" y="143.50"></text></g><g><title>implied_outlives_bounds (75,630 samples, 0.12%)</title><rect x="58.1493%" y="133" width="0.1162%" height="15" fill="rgb(242,14,37)"/><text x="58.3993%" y="143.50"></text></g><g><title>param_env (241,634 samples, 0.37%)</title><rect x="58.2654%" y="133" width="0.3712%" height="15" fill="rgb(246,228,12)"/><text x="58.5154%" y="143.50"></text></g><g><title>check_item_well_formed (1,355,485 samples, 2.08%)</title><rect x="56.7548%" y="149" width="2.0822%" height="15" fill="rgb(213,55,15)"/><text x="57.0048%" y="159.50">c..</text></g><g><title>evaluate_obligation (187,042 samples, 0.29%)</title><rect x="59.2511%" y="133" width="0.2873%" height="15" fill="rgb(209,9,3)"/><text x="59.5011%" y="143.50"></text></g><g><title>implied_outlives_bounds (65,581 samples, 0.10%)</title><rect x="59.5384%" y="133" width="0.1007%" height="15" fill="rgb(230,59,30)"/><text x="59.7884%" y="143.50"></text></g><g><title>analysis (34,081,657 samples, 52.35%)</title><rect x="7.3793%" y="197" width="52.3533%" height="15" fill="rgb(209,121,21)"/><text x="7.6293%" y="207.50">analysis</text></g><g><title>type_check_crate (26,847,324 samples, 41.24%)</title><rect x="18.4921%" y="181" width="41.2405%" height="15" fill="rgb(220,109,13)"/><text x="18.7421%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,831,911 samples, 4.35%)</title><rect x="55.3825%" y="165" width="4.3501%" height="15" fill="rgb(232,18,1)"/><text x="55.6325%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (583,046 samples, 0.90%)</title><rect x="58.8370%" y="149" width="0.8956%" height="15" fill="rgb(215,41,42)"/><text x="59.0870%" y="159.50"></text></g><g><title>codegen_module (219,222 samples, 0.34%)</title><rect x="60.4174%" y="181" width="0.3367%" height="15" fill="rgb(224,123,36)"/><text x="60.6674%" y="191.50"></text></g><g><title>codegen_crate (716,738 samples, 1.10%)</title><rect x="59.7509%" y="197" width="1.1010%" height="15" fill="rgb(240,125,3)"/><text x="60.0009%" y="207.50"></text></g><g><title>codegen_module_optimize (1,825,871 samples, 2.80%)</title><rect x="60.8519%" y="197" width="2.8047%" height="15" fill="rgb(205,98,50)"/><text x="61.1019%" y="207.50">co..</text></g><g><title>LLVM_module_optimize (290,134 samples, 0.45%)</title><rect x="63.2110%" y="181" width="0.4457%" height="15" fill="rgb(205,185,37)"/><text x="63.4610%" y="191.50"></text></g><g><title>LLVM_lto_optimize (121,682 samples, 0.19%)</title><rect x="64.0436%" y="181" width="0.1869%" height="15" fill="rgb(238,207,15)"/><text x="64.2936%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,302,654 samples, 2.00%)</title><rect x="64.2305%" y="181" width="2.0010%" height="15" fill="rgb(213,199,42)"/><text x="64.4805%" y="191.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (1,278,454 samples, 1.96%)</title><rect x="64.2677%" y="165" width="1.9639%" height="15" fill="rgb(235,201,11)"/><text x="64.5177%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (1,698,299 samples, 2.61%)</title><rect x="63.6567%" y="197" width="2.6088%" height="15" fill="rgb(207,46,11)"/><text x="63.9067%" y="207.50">co..</text></g><g><title>AST_validation (146,451 samples, 0.22%)</title><rect x="66.5911%" y="181" width="0.2250%" height="15" fill="rgb(241,35,35)"/><text x="66.8411%" y="191.50"></text></g><g><title>crate_injection (84,221 samples, 0.13%)</title><rect x="66.8732%" y="181" width="0.1294%" height="15" fill="rgb(243,32,47)"/><text x="67.1232%" y="191.50"></text></g><g><title>macro_expand_crate (9,407,387 samples, 14.45%)</title><rect x="67.0026%" y="181" width="14.4508%" height="15" fill="rgb(247,202,23)"/><text x="67.2526%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (9,382,306 samples, 14.41%)</title><rect x="67.0411%" y="165" width="14.4123%" height="15" fill="rgb(219,102,11)"/><text x="67.2911%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (229,712 samples, 0.35%)</title><rect x="81.1006%" y="149" width="0.3529%" height="15" fill="rgb(243,110,44)"/><text x="81.3506%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (113,502 samples, 0.17%)</title><rect x="81.4619%" y="181" width="0.1744%" height="15" fill="rgb(222,74,54)"/><text x="81.7119%" y="191.50"></text></g><g><title>finalize_macro_resolutions (224,142 samples, 0.34%)</title><rect x="81.7028%" y="165" width="0.3443%" height="15" fill="rgb(216,99,12)"/><text x="81.9528%" y="175.50"></text></g><g><title>late_resolve_crate (1,229,214 samples, 1.89%)</title><rect x="82.0471%" y="165" width="1.8882%" height="15" fill="rgb(226,22,26)"/><text x="82.2971%" y="175.50">l..</text></g><g><title>configure_and_expand (11,566,241 samples, 17.77%)</title><rect x="66.2654%" y="197" width="17.7671%" height="15" fill="rgb(217,163,10)"/><text x="66.5154%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,559,958 samples, 2.40%)</title><rect x="81.6362%" y="181" width="2.3963%" height="15" fill="rgb(213,25,53)"/><text x="81.8862%" y="191.50">re..</text></g><g><title>drop_ast (90,771 samples, 0.14%)</title><rect x="84.0325%" y="197" width="0.1394%" height="15" fill="rgb(252,105,26)"/><text x="84.2825%" y="207.50"></text></g><g><title>early_lint_checks (188,852 samples, 0.29%)</title><rect x="84.1913%" y="197" width="0.2901%" height="15" fill="rgb(220,39,43)"/><text x="84.4413%" y="207.50"></text></g><g><title>free_global_ctxt (1,889,182 samples, 2.90%)</title><rect x="84.4814%" y="197" width="2.9020%" height="15" fill="rgb(229,68,48)"/><text x="84.7314%" y="207.50">fr..</text></g><g><title>adt_sized_constraint (73,681 samples, 0.11%)</title><rect x="89.1673%" y="133" width="0.1132%" height="15" fill="rgb(252,8,32)"/><text x="89.4173%" y="143.50"></text></g><g><title>adt_def (70,521 samples, 0.11%)</title><rect x="89.1722%" y="117" width="0.1083%" height="15" fill="rgb(223,20,43)"/><text x="89.4222%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (69,901 samples, 0.11%)</title><rect x="89.1731%" y="101" width="0.1074%" height="15" fill="rgb(229,81,49)"/><text x="89.4231%" y="111.50"></text></g><g><title>layout_of (209,212 samples, 0.32%)</title><rect x="88.9766%" y="165" width="0.3214%" height="15" fill="rgb(236,28,36)"/><text x="89.2266%" y="175.50"></text></g><g><title>layout_of (89,981 samples, 0.14%)</title><rect x="89.1597%" y="149" width="0.1382%" height="15" fill="rgb(249,185,26)"/><text x="89.4097%" y="159.50"></text></g><g><title>optimized_mir (1,135,242 samples, 1.74%)</title><rect x="88.2700%" y="181" width="1.7439%" height="15" fill="rgb(249,174,33)"/><text x="88.5200%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (466,074 samples, 0.72%)</title><rect x="89.2980%" y="165" width="0.7159%" height="15" fill="rgb(233,201,37)"/><text x="89.5480%" y="175.50"></text></g><g><title>generate_crate_metadata (1,733,020 samples, 2.66%)</title><rect x="87.3834%" y="197" width="2.6621%" height="15" fill="rgb(221,78,26)"/><text x="87.6334%" y="207.50">ge..</text></g><g><title>hir_lowering (1,212,304 samples, 1.86%)</title><rect x="90.0455%" y="197" width="1.8622%" height="15" fill="rgb(250,127,30)"/><text x="90.2955%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (1,676,139 samples, 2.57%)</title><rect x="91.9250%" y="181" width="2.5747%" height="15" fill="rgb(230,49,44)"/><text x="92.1750%" y="191.50">fi..</text></g><g><title>link_crate (559,896 samples, 0.86%)</title><rect x="94.4997%" y="181" width="0.8601%" height="15" fill="rgb(229,67,23)"/><text x="94.7497%" y="191.50"></text></g><g><title>link_binary (555,576 samples, 0.85%)</title><rect x="94.5063%" y="165" width="0.8534%" height="15" fill="rgb(249,83,47)"/><text x="94.7563%" y="175.50"></text></g><g><title>link_rlib (354,874 samples, 0.55%)</title><rect x="94.8146%" y="149" width="0.5451%" height="15" fill="rgb(215,43,3)"/><text x="95.0646%" y="159.50"></text></g><g><title>link (2,253,935 samples, 3.46%)</title><rect x="91.9078%" y="197" width="3.4623%" height="15" fill="rgb(238,154,13)"/><text x="92.1578%" y="207.50">link</text></g><g><title>parse_crate (1,759,080 samples, 2.70%)</title><rect x="95.3701%" y="197" width="2.7021%" height="15" fill="rgb(219,56,2)"/><text x="95.6201%" y="207.50">pa..</text></g><g><title>prepare_outputs (361,254 samples, 0.55%)</title><rect x="98.0877%" y="197" width="0.5549%" height="15" fill="rgb(233,0,4)"/><text x="98.3377%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (417,695 samples, 0.64%)</title><rect x="98.6426%" y="197" width="0.6416%" height="15" fill="rgb(235,30,7)"/><text x="98.8926%" y="207.50"></text></g><g><title>setup_global_ctxt (168,112 samples, 0.26%)</title><rect x="99.2856%" y="197" width="0.2582%" height="15" fill="rgb(250,79,13)"/><text x="99.5356%" y="207.50"></text></g><g><title>all (65,099,338 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (65,099,338 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (296,933 samples, 0.46%)</title><rect x="99.5439%" y="197" width="0.4561%" height="15" fill="rgb(235,168,5)"/><text x="99.7939%" y="207.50"></text></g></svg></svg>