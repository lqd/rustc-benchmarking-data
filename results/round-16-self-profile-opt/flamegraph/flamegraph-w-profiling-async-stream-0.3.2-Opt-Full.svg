<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,707,055 samples, 10.75%)</title><rect x="0.3755%" y="245" width="10.7529%" height="15" fill="rgb(227,0,7)"/><text x="0.6255%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (239,302 samples, 0.20%)</title><rect x="10.9259%" y="229" width="0.2025%" height="15" fill="rgb(217,0,24)"/><text x="11.1759%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (226,922 samples, 0.19%)</title><rect x="10.9364%" y="213" width="0.1920%" height="15" fill="rgb(221,193,54)"/><text x="11.1864%" y="223.50"></text></g><g><title>param_env (137,022 samples, 0.12%)</title><rect x="14.8934%" y="165" width="0.1160%" height="15" fill="rgb(248,212,6)"/><text x="15.1434%" y="175.50"></text></g><g><title>codegen_fn_attrs (150,451 samples, 0.13%)</title><rect x="15.1266%" y="149" width="0.1273%" height="15" fill="rgb(208,68,35)"/><text x="15.3766%" y="159.50"></text></g><g><title>needs_drop_raw (715,397 samples, 0.61%)</title><rect x="15.8871%" y="133" width="0.6054%" height="15" fill="rgb(232,128,0)"/><text x="16.1371%" y="143.50"></text></g><g><title>is_copy_raw (556,416 samples, 0.47%)</title><rect x="16.0216%" y="117" width="0.4708%" height="15" fill="rgb(207,160,47)"/><text x="16.2716%" y="127.50"></text></g><g><title>evaluate_obligation (256,872 samples, 0.22%)</title><rect x="16.2751%" y="101" width="0.2174%" height="15" fill="rgb(228,23,34)"/><text x="16.5251%" y="111.50"></text></g><g><title>specialization_graph_of (169,892 samples, 0.14%)</title><rect x="16.6267%" y="117" width="0.1438%" height="15" fill="rgb(218,30,26)"/><text x="16.8767%" y="127.50"></text></g><g><title>resolve_instance (356,695 samples, 0.30%)</title><rect x="16.4924%" y="133" width="0.3018%" height="15" fill="rgb(220,122,19)"/><text x="16.7424%" y="143.50"></text></g><g><title>thir_body (293,192 samples, 0.25%)</title><rect x="16.8055%" y="133" width="0.2481%" height="15" fill="rgb(250,228,42)"/><text x="17.0555%" y="143.50"></text></g><g><title>mir_const (2,819,239 samples, 2.39%)</title><rect x="14.6737%" y="181" width="2.3857%" height="15" fill="rgb(240,193,28)"/><text x="14.9237%" y="191.50">mi..</text></g><g><title>unsafety_check_result (2,422,616 samples, 2.05%)</title><rect x="15.0094%" y="165" width="2.0501%" height="15" fill="rgb(216,20,37)"/><text x="15.2594%" y="175.50">u..</text></g><g><title>mir_built (2,133,654 samples, 1.81%)</title><rect x="15.2539%" y="149" width="1.8055%" height="15" fill="rgb(206,188,39)"/><text x="15.5039%" y="159.50">m..</text></g><g><title>has_structural_eq_impls (187,602 samples, 0.16%)</title><rect x="17.1532%" y="165" width="0.1588%" height="15" fill="rgb(217,207,13)"/><text x="17.4032%" y="175.50"></text></g><g><title>evaluate_obligation (167,102 samples, 0.14%)</title><rect x="17.1706%" y="149" width="0.1414%" height="15" fill="rgb(231,73,38)"/><text x="17.4206%" y="159.50"></text></g><g><title>trait_impls_of (138,822 samples, 0.12%)</title><rect x="17.1945%" y="133" width="0.1175%" height="15" fill="rgb(225,20,46)"/><text x="17.4445%" y="143.50"></text></g><g><title>mir_const_qualif (526,195 samples, 0.45%)</title><rect x="17.0594%" y="181" width="0.4453%" height="15" fill="rgb(210,31,41)"/><text x="17.3094%" y="191.50"></text></g><g><title>mir_promoted (3,583,329 samples, 3.03%)</title><rect x="14.4727%" y="197" width="3.0323%" height="15" fill="rgb(221,200,47)"/><text x="14.7227%" y="207.50">mir..</text></g><g><title>type_op_ascribe_user_type (355,221 samples, 0.30%)</title><rect x="17.5050%" y="197" width="0.3006%" height="15" fill="rgb(226,26,5)"/><text x="17.7550%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (150,792 samples, 0.13%)</title><rect x="17.8056%" y="197" width="0.1276%" height="15" fill="rgb(249,33,26)"/><text x="18.0556%" y="207.50"></text></g><g><title>type_op_prove_predicate (977,402 samples, 0.83%)</title><rect x="18.0092%" y="197" width="0.8271%" height="15" fill="rgb(235,183,28)"/><text x="18.2592%" y="207.50"></text></g><g><title>MIR_borrow_checking (8,962,356 samples, 7.58%)</title><rect x="11.2566%" y="229" width="7.5841%" height="15" fill="rgb(221,5,38)"/><text x="11.5066%" y="239.50">MIR_borrow..</text></g><g><title>mir_borrowck (8,909,906 samples, 7.54%)</title><rect x="11.3010%" y="213" width="7.5397%" height="15" fill="rgb(247,18,42)"/><text x="11.5510%" y="223.50">mir_borrow..</text></g><g><title>MIR_effect_checking (275,393 samples, 0.23%)</title><rect x="18.8407%" y="229" width="0.2330%" height="15" fill="rgb(241,131,45)"/><text x="19.0907%" y="239.50"></text></g><g><title>codegen_fn_attrs (164,652 samples, 0.14%)</title><rect x="19.3418%" y="165" width="0.1393%" height="15" fill="rgb(249,31,29)"/><text x="19.5918%" y="175.50"></text></g><g><title>codegen_fn_attrs (234,062 samples, 0.20%)</title><rect x="19.2854%" y="197" width="0.1981%" height="15" fill="rgb(225,111,53)"/><text x="19.5354%" y="207.50"></text></g><g><title>should_inherit_track_caller (206,692 samples, 0.17%)</title><rect x="19.3086%" y="181" width="0.1749%" height="15" fill="rgb(238,160,17)"/><text x="19.5586%" y="191.50"></text></g><g><title>check_mod_attrs (346,703 samples, 0.29%)</title><rect x="19.1902%" y="213" width="0.2934%" height="15" fill="rgb(214,148,48)"/><text x="19.4402%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (259,232 samples, 0.22%)</title><rect x="19.5638%" y="213" width="0.2194%" height="15" fill="rgb(232,36,49)"/><text x="19.8138%" y="223.50"></text></g><g><title>misc_checking_1 (768,608 samples, 0.65%)</title><rect x="19.1720%" y="229" width="0.6504%" height="15" fill="rgb(209,103,24)"/><text x="19.4220%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (151,951 samples, 0.13%)</title><rect x="19.8236%" y="213" width="0.1286%" height="15" fill="rgb(229,88,8)"/><text x="20.0736%" y="223.50"></text></g><g><title>misc_checking_2 (318,053 samples, 0.27%)</title><rect x="19.8224%" y="229" width="0.2691%" height="15" fill="rgb(213,181,19)"/><text x="20.0724%" y="239.50"></text></g><g><title>match_checking (164,772 samples, 0.14%)</title><rect x="19.9522%" y="213" width="0.1394%" height="15" fill="rgb(254,191,54)"/><text x="20.2022%" y="223.50"></text></g><g><title>check_match (151,832 samples, 0.13%)</title><rect x="19.9631%" y="197" width="0.1285%" height="15" fill="rgb(241,83,37)"/><text x="20.2131%" y="207.50"></text></g><g><title>death_checking (222,703 samples, 0.19%)</title><rect x="20.1906%" y="213" width="0.1885%" height="15" fill="rgb(233,36,39)"/><text x="20.4406%" y="223.50"></text></g><g><title>eval_to_allocation_raw (240,012 samples, 0.20%)</title><rect x="21.0149%" y="181" width="0.2031%" height="15" fill="rgb(226,3,54)"/><text x="21.2649%" y="191.50"></text></g><g><title>eval_to_allocation_raw (239,142 samples, 0.20%)</title><rect x="21.0156%" y="165" width="0.2024%" height="15" fill="rgb(245,192,40)"/><text x="21.2656%" y="175.50"></text></g><g><title>erase_regions_ty (183,032 samples, 0.15%)</title><rect x="21.3010%" y="117" width="0.1549%" height="15" fill="rgb(238,167,29)"/><text x="21.5510%" y="127.50"></text></g><g><title>erase_regions_ty (181,632 samples, 0.15%)</title><rect x="21.3022%" y="101" width="0.1537%" height="15" fill="rgb(232,182,51)"/><text x="21.5522%" y="111.50"></text></g><g><title>fn_abi_of_instance (208,062 samples, 0.18%)</title><rect x="21.2874%" y="133" width="0.1761%" height="15" fill="rgb(231,60,39)"/><text x="21.5374%" y="143.50"></text></g><g><title>eval_to_const_value_raw (404,155 samples, 0.34%)</title><rect x="21.2180%" y="181" width="0.3420%" height="15" fill="rgb(208,69,12)"/><text x="21.4680%" y="191.50"></text></g><g><title>eval_to_const_value_raw (396,024 samples, 0.34%)</title><rect x="21.2248%" y="165" width="0.3351%" height="15" fill="rgb(235,93,37)"/><text x="21.4748%" y="175.50"></text></g><g><title>eval_to_allocation_raw (392,464 samples, 0.33%)</title><rect x="21.2279%" y="149" width="0.3321%" height="15" fill="rgb(213,116,39)"/><text x="21.4779%" y="159.50"></text></g><g><title>param_env (193,922 samples, 0.16%)</title><rect x="21.5600%" y="181" width="0.1641%" height="15" fill="rgb(222,207,29)"/><text x="21.8100%" y="191.50"></text></g><g><title>crate_lints (2,650,778 samples, 2.24%)</title><rect x="20.3807%" y="197" width="2.2431%" height="15" fill="rgb(206,96,30)"/><text x="20.6307%" y="207.50">c..</text></g><g><title>type_of (1,057,032 samples, 0.89%)</title><rect x="21.7293%" y="181" width="0.8945%" height="15" fill="rgb(218,138,4)"/><text x="21.9793%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (821,407 samples, 0.70%)</title><rect x="21.9287%" y="165" width="0.6951%" height="15" fill="rgb(250,191,14)"/><text x="22.1787%" y="175.50"></text></g><g><title>lint_checking (2,787,460 samples, 2.36%)</title><rect x="20.3791%" y="213" width="2.3588%" height="15" fill="rgb(239,60,40)"/><text x="20.6291%" y="223.50">l..</text></g><g><title>module_lints (134,802 samples, 0.11%)</title><rect x="22.6238%" y="197" width="0.1141%" height="15" fill="rgb(206,27,48)"/><text x="22.8738%" y="207.50"></text></g><g><title>lint_mod (129,492 samples, 0.11%)</title><rect x="22.6283%" y="181" width="0.1096%" height="15" fill="rgb(225,35,8)"/><text x="22.8783%" y="191.50"></text></g><g><title>privacy_access_levels (134,311 samples, 0.11%)</title><rect x="22.7379%" y="213" width="0.1137%" height="15" fill="rgb(250,213,24)"/><text x="22.9879%" y="223.50"></text></g><g><title>privacy_checking_modules (341,393 samples, 0.29%)</title><rect x="22.8515%" y="213" width="0.2889%" height="15" fill="rgb(247,123,22)"/><text x="23.1015%" y="223.50"></text></g><g><title>check_mod_privacy (338,133 samples, 0.29%)</title><rect x="22.8543%" y="197" width="0.2861%" height="15" fill="rgb(231,138,38)"/><text x="23.1043%" y="207.50"></text></g><g><title>misc_checking_3 (3,617,298 samples, 3.06%)</title><rect x="20.0916%" y="229" width="3.0610%" height="15" fill="rgb(231,145,46)"/><text x="20.3416%" y="239.50">mis..</text></g><g><title>impl_parent (875,733 samples, 0.74%)</title><rect x="24.1909%" y="165" width="0.7411%" height="15" fill="rgb(251,118,11)"/><text x="24.4409%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (588,658 samples, 0.50%)</title><rect x="24.4338%" y="149" width="0.4981%" height="15" fill="rgb(217,147,25)"/><text x="24.6838%" y="159.50"></text></g><g><title>impl_trait_ref (3,042,700 samples, 2.57%)</title><rect x="24.9319%" y="165" width="2.5748%" height="15" fill="rgb(247,81,37)"/><text x="25.1819%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,745,897 samples, 2.32%)</title><rect x="25.1831%" y="149" width="2.3236%" height="15" fill="rgb(209,12,38)"/><text x="25.4331%" y="159.50">m..</text></g><g><title>coherent_trait (5,362,817 samples, 4.54%)</title><rect x="23.2030%" y="197" width="4.5381%" height="15" fill="rgb(227,1,9)"/><text x="23.4530%" y="207.50">coher..</text></g><g><title>specialization_graph_of (5,350,427 samples, 4.53%)</title><rect x="23.2135%" y="181" width="4.5276%" height="15" fill="rgb(248,47,43)"/><text x="23.4635%" y="191.50">speci..</text></g><g><title>trait_impls_of (274,714 samples, 0.23%)</title><rect x="27.5087%" y="165" width="0.2325%" height="15" fill="rgb(221,10,30)"/><text x="27.7587%" y="175.50"></text></g><g><title>coherence_checking (5,416,367 samples, 4.58%)</title><rect x="23.1893%" y="213" width="4.5834%" height="15" fill="rgb(210,229,1)"/><text x="23.4393%" y="223.50">coher..</text></g><g><title>associated_item (135,182 samples, 0.11%)</title><rect x="31.9719%" y="149" width="0.1144%" height="15" fill="rgb(222,148,37)"/><text x="32.2219%" y="159.50"></text></g><g><title>associated_items (218,833 samples, 0.19%)</title><rect x="31.9125%" y="165" width="0.1852%" height="15" fill="rgb(234,67,33)"/><text x="32.1625%" y="175.50"></text></g><g><title>dropck_outlives (132,152 samples, 0.11%)</title><rect x="32.1222%" y="165" width="0.1118%" height="15" fill="rgb(247,98,35)"/><text x="32.3722%" y="175.50"></text></g><g><title>evaluate_obligation (369,073 samples, 0.31%)</title><rect x="32.2341%" y="165" width="0.3123%" height="15" fill="rgb(247,138,52)"/><text x="32.4841%" y="175.50"></text></g><g><title>method_autoderef_steps (148,002 samples, 0.13%)</title><rect x="32.7699%" y="165" width="0.1252%" height="15" fill="rgb(213,79,30)"/><text x="33.0199%" y="175.50"></text></g><g><title>object_safety_violations (124,082 samples, 0.11%)</title><rect x="32.8952%" y="165" width="0.1050%" height="15" fill="rgb(246,177,23)"/><text x="33.1452%" y="175.50"></text></g><g><title>predicates_of (152,691 samples, 0.13%)</title><rect x="33.0120%" y="165" width="0.1292%" height="15" fill="rgb(230,62,27)"/><text x="33.2620%" y="175.50"></text></g><g><title>evaluate_obligation (176,773 samples, 0.15%)</title><rect x="34.8731%" y="149" width="0.1496%" height="15" fill="rgb(216,154,8)"/><text x="35.1231%" y="159.50"></text></g><g><title>is_copy_raw (213,273 samples, 0.18%)</title><rect x="35.0923%" y="149" width="0.1805%" height="15" fill="rgb(244,35,45)"/><text x="35.3423%" y="159.50"></text></g><g><title>evaluate_obligation (185,813 samples, 0.16%)</title><rect x="35.1155%" y="133" width="0.1572%" height="15" fill="rgb(251,115,12)"/><text x="35.3655%" y="143.50"></text></g><g><title>typeck (2,634,248 samples, 2.23%)</title><rect x="33.1811%" y="165" width="2.2292%" height="15" fill="rgb(240,54,50)"/><text x="33.4311%" y="175.50">t..</text></g><g><title>item_bodies_checking (9,015,386 samples, 7.63%)</title><rect x="27.7922%" y="213" width="7.6290%" height="15" fill="rgb(233,84,52)"/><text x="28.0422%" y="223.50">item_bodie..</text></g><g><title>typeck_item_bodies (9,012,735 samples, 7.63%)</title><rect x="27.7944%" y="197" width="7.6267%" height="15" fill="rgb(207,117,47)"/><text x="28.0444%" y="207.50">typeck_ite..</text></g><g><title>typeck (8,985,595 samples, 7.60%)</title><rect x="27.8174%" y="181" width="7.6038%" height="15" fill="rgb(249,43,39)"/><text x="28.0674%" y="191.50">typeck</text></g><g><title>needs_drop_raw (257,033 samples, 0.22%)</title><rect x="36.8893%" y="85" width="0.2175%" height="15" fill="rgb(209,38,44)"/><text x="37.1393%" y="95.50"></text></g><g><title>is_copy_raw (252,073 samples, 0.21%)</title><rect x="36.8935%" y="69" width="0.2133%" height="15" fill="rgb(236,212,23)"/><text x="37.1435%" y="79.50"></text></g><g><title>evaluate_obligation (246,903 samples, 0.21%)</title><rect x="36.8979%" y="53" width="0.2089%" height="15" fill="rgb(242,79,21)"/><text x="37.1479%" y="63.50"></text></g><g><title>trait_impls_of (149,992 samples, 0.13%)</title><rect x="36.9799%" y="37" width="0.1269%" height="15" fill="rgb(211,96,35)"/><text x="37.2299%" y="47.50"></text></g><g><title>impl_trait_ref (119,291 samples, 0.10%)</title><rect x="37.5463%" y="69" width="0.1009%" height="15" fill="rgb(253,215,40)"/><text x="37.7963%" y="79.50"></text></g><g><title>mir_const (1,176,072 samples, 1.00%)</title><rect x="36.7162%" y="133" width="0.9952%" height="15" fill="rgb(211,81,21)"/><text x="36.9662%" y="143.50"></text></g><g><title>unsafety_check_result (1,128,781 samples, 0.96%)</title><rect x="36.7563%" y="117" width="0.9552%" height="15" fill="rgb(208,190,38)"/><text x="37.0063%" y="127.50"></text></g><g><title>mir_built (1,075,481 samples, 0.91%)</title><rect x="36.8014%" y="101" width="0.9101%" height="15" fill="rgb(235,213,38)"/><text x="37.0514%" y="111.50"></text></g><g><title>typeck (684,177 samples, 0.58%)</title><rect x="37.1325%" y="85" width="0.5790%" height="15" fill="rgb(237,122,38)"/><text x="37.3825%" y="95.50"></text></g><g><title>mir_promoted (1,256,462 samples, 1.06%)</title><rect x="36.6542%" y="149" width="1.0632%" height="15" fill="rgb(244,218,35)"/><text x="36.9042%" y="159.50"></text></g><g><title>type_of (1,832,459 samples, 1.55%)</title><rect x="36.1981%" y="181" width="1.5507%" height="15" fill="rgb(240,68,47)"/><text x="36.4481%" y="191.50"></text></g><g><title>mir_borrowck (1,827,568 samples, 1.55%)</title><rect x="36.2022%" y="165" width="1.5465%" height="15" fill="rgb(210,16,53)"/><text x="36.4522%" y="175.50"></text></g><g><title>item_types_checking (3,223,265 samples, 2.73%)</title><rect x="35.4212%" y="213" width="2.7276%" height="15" fill="rgb(235,124,12)"/><text x="35.6712%" y="223.50">it..</text></g><g><title>check_mod_item_types (3,216,855 samples, 2.72%)</title><rect x="35.4266%" y="197" width="2.7222%" height="15" fill="rgb(224,169,11)"/><text x="35.6766%" y="207.50">ch..</text></g><g><title>typeck (472,745 samples, 0.40%)</title><rect x="37.7487%" y="181" width="0.4000%" height="15" fill="rgb(250,166,2)"/><text x="37.9987%" y="191.50"></text></g><g><title>fn_sig (197,004 samples, 0.17%)</title><rect x="38.2735%" y="181" width="0.1667%" height="15" fill="rgb(242,216,29)"/><text x="38.5235%" y="191.50"></text></g><g><title>generics_of (186,761 samples, 0.16%)</title><rect x="38.4403%" y="181" width="0.1580%" height="15" fill="rgb(230,116,27)"/><text x="38.6903%" y="191.50"></text></g><g><title>late_bound_vars_map (167,682 samples, 0.14%)</title><rect x="38.7873%" y="133" width="0.1419%" height="15" fill="rgb(228,99,48)"/><text x="39.0373%" y="143.50"></text></g><g><title>resolve_lifetimes (162,512 samples, 0.14%)</title><rect x="38.7917%" y="117" width="0.1375%" height="15" fill="rgb(253,11,6)"/><text x="39.0417%" y="127.50"></text></g><g><title>explicit_predicates_of (316,164 samples, 0.27%)</title><rect x="38.6671%" y="149" width="0.2675%" height="15" fill="rgb(247,143,39)"/><text x="38.9171%" y="159.50"></text></g><g><title>predicates_of (579,167 samples, 0.49%)</title><rect x="38.6184%" y="181" width="0.4901%" height="15" fill="rgb(236,97,10)"/><text x="38.8684%" y="191.50"></text></g><g><title>predicates_defined_on (557,886 samples, 0.47%)</title><rect x="38.6364%" y="165" width="0.4721%" height="15" fill="rgb(233,208,19)"/><text x="38.8864%" y="175.50"></text></g><g><title>inferred_outlives_of (205,422 samples, 0.17%)</title><rect x="38.9346%" y="149" width="0.1738%" height="15" fill="rgb(216,164,2)"/><text x="39.1846%" y="159.50"></text></g><g><title>inferred_outlives_crate (191,422 samples, 0.16%)</title><rect x="38.9465%" y="133" width="0.1620%" height="15" fill="rgb(220,129,5)"/><text x="39.1965%" y="143.50"></text></g><g><title>type_collecting (1,271,754 samples, 1.08%)</title><rect x="38.1504%" y="213" width="1.0762%" height="15" fill="rgb(242,17,10)"/><text x="38.4004%" y="223.50"></text></g><g><title>collect_mod_item_types (1,258,854 samples, 1.07%)</title><rect x="38.1613%" y="197" width="1.0653%" height="15" fill="rgb(242,107,0)"/><text x="38.4113%" y="207.50"></text></g><g><title>type_of (139,512 samples, 0.12%)</title><rect x="39.1085%" y="181" width="0.1181%" height="15" fill="rgb(251,28,31)"/><text x="39.3585%" y="191.50"></text></g><g><title>evaluate_obligation (496,506 samples, 0.42%)</title><rect x="40.0662%" y="181" width="0.4202%" height="15" fill="rgb(233,223,10)"/><text x="40.3162%" y="191.50"></text></g><g><title>implied_outlives_bounds (162,862 samples, 0.14%)</title><rect x="40.5040%" y="181" width="0.1378%" height="15" fill="rgb(215,21,27)"/><text x="40.7540%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,820,350 samples, 1.54%)</title><rect x="39.3116%" y="197" width="1.5404%" height="15" fill="rgb(232,23,21)"/><text x="39.5616%" y="207.50"></text></g><g><title>evaluate_obligation (145,502 samples, 0.12%)</title><rect x="41.7096%" y="181" width="0.1231%" height="15" fill="rgb(244,5,23)"/><text x="41.9596%" y="191.50"></text></g><g><title>implied_outlives_bounds (120,253 samples, 0.10%)</title><rect x="41.8387%" y="181" width="0.1018%" height="15" fill="rgb(226,81,46)"/><text x="42.0887%" y="191.50"></text></g><g><title>param_env (224,421 samples, 0.19%)</title><rect x="41.9416%" y="181" width="0.1899%" height="15" fill="rgb(247,70,30)"/><text x="42.1916%" y="191.50"></text></g><g><title>analysis (36,805,951 samples, 31.15%)</title><rect x="11.1284%" y="245" width="31.1459%" height="15" fill="rgb(212,68,19)"/><text x="11.3784%" y="255.50">analysis</text></g><g><title>type_check_crate (22,596,650 samples, 19.12%)</title><rect x="23.1526%" y="229" width="19.1217%" height="15" fill="rgb(240,187,13)"/><text x="23.4026%" y="239.50">type_check_crate</text></g><g><title>wf_checking (3,598,828 samples, 3.05%)</title><rect x="39.2289%" y="213" width="3.0454%" height="15" fill="rgb(223,113,26)"/><text x="39.4789%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (1,680,728 samples, 1.42%)</title><rect x="40.8521%" y="197" width="1.4223%" height="15" fill="rgb(206,192,2)"/><text x="41.1021%" y="207.50"></text></g><g><title>is_freeze_raw (146,072 samples, 0.12%)</title><rect x="45.8258%" y="197" width="0.1236%" height="15" fill="rgb(241,108,4)"/><text x="46.0758%" y="207.50"></text></g><g><title>evaluate_obligation (127,622 samples, 0.11%)</title><rect x="45.8414%" y="181" width="0.1080%" height="15" fill="rgb(247,173,49)"/><text x="46.0914%" y="191.50"></text></g><g><title>is_unpin_raw (127,910 samples, 0.11%)</title><rect x="45.9494%" y="197" width="0.1082%" height="15" fill="rgb(224,114,35)"/><text x="46.1994%" y="207.50"></text></g><g><title>adt_sized_constraint (120,412 samples, 0.10%)</title><rect x="46.1585%" y="181" width="0.1019%" height="15" fill="rgb(245,159,27)"/><text x="46.4085%" y="191.50"></text></g><g><title>eval_to_const_value_raw (179,862 samples, 0.15%)</title><rect x="46.2665%" y="181" width="0.1522%" height="15" fill="rgb(245,172,44)"/><text x="46.5165%" y="191.50"></text></g><g><title>eval_to_const_value_raw (166,272 samples, 0.14%)</title><rect x="46.2780%" y="165" width="0.1407%" height="15" fill="rgb(236,23,11)"/><text x="46.5280%" y="175.50"></text></g><g><title>eval_to_allocation_raw (142,062 samples, 0.12%)</title><rect x="46.2985%" y="149" width="0.1202%" height="15" fill="rgb(205,117,38)"/><text x="46.5485%" y="159.50"></text></g><g><title>param_env (150,920 samples, 0.13%)</title><rect x="46.5375%" y="181" width="0.1277%" height="15" fill="rgb(237,72,25)"/><text x="46.7875%" y="191.50"></text></g><g><title>layout_of (724,048 samples, 0.61%)</title><rect x="46.0576%" y="197" width="0.6127%" height="15" fill="rgb(244,70,9)"/><text x="46.3076%" y="207.50"></text></g><g><title>param_env (342,614 samples, 0.29%)</title><rect x="46.6703%" y="197" width="0.2899%" height="15" fill="rgb(217,125,39)"/><text x="46.9203%" y="207.50"></text></g><g><title>fn_abi_of_instance (1,784,457 samples, 1.51%)</title><rect x="45.5055%" y="213" width="1.5100%" height="15" fill="rgb(235,36,10)"/><text x="45.7555%" y="223.50"></text></g><g><title>codegen_module (4,725,199 samples, 4.00%)</title><rect x="43.1783%" y="229" width="3.9986%" height="15" fill="rgb(251,123,47)"/><text x="43.4283%" y="239.50">code..</text></g><g><title>item_attrs (202,263 samples, 0.17%)</title><rect x="47.4260%" y="165" width="0.1712%" height="15" fill="rgb(221,13,13)"/><text x="47.6760%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (197,022 samples, 0.17%)</title><rect x="47.4305%" y="149" width="0.1667%" height="15" fill="rgb(238,131,9)"/><text x="47.6805%" y="159.50"></text></g><g><title>codegen_fn_attrs (278,694 samples, 0.24%)</title><rect x="47.3901%" y="181" width="0.2358%" height="15" fill="rgb(211,50,8)"/><text x="47.6401%" y="191.50"></text></g><g><title>is_reachable_non_generic (152,102 samples, 0.13%)</title><rect x="47.6660%" y="181" width="0.1287%" height="15" fill="rgb(245,182,24)"/><text x="47.9160%" y="191.50"></text></g><g><title>reachable_non_generics (145,792 samples, 0.12%)</title><rect x="47.6714%" y="165" width="0.1234%" height="15" fill="rgb(242,14,37)"/><text x="47.9214%" y="175.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (144,512 samples, 0.12%)</title><rect x="47.6725%" y="149" width="0.1223%" height="15" fill="rgb(246,228,12)"/><text x="47.9225%" y="159.50"></text></g><g><title>optimized_mir (218,644 samples, 0.19%)</title><rect x="47.8556%" y="181" width="0.1850%" height="15" fill="rgb(213,55,15)"/><text x="48.1056%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (210,774 samples, 0.18%)</title><rect x="47.8623%" y="165" width="0.1784%" height="15" fill="rgb(209,9,3)"/><text x="48.1123%" y="175.50"></text></g><g><title>needs_drop_raw (151,061 samples, 0.13%)</title><rect x="48.1661%" y="165" width="0.1278%" height="15" fill="rgb(230,59,30)"/><text x="48.4161%" y="175.50"></text></g><g><title>is_copy_raw (135,351 samples, 0.11%)</title><rect x="48.1794%" y="149" width="0.1145%" height="15" fill="rgb(209,121,21)"/><text x="48.4294%" y="159.50"></text></g><g><title>evaluate_obligation (120,571 samples, 0.10%)</title><rect x="48.1919%" y="133" width="0.1020%" height="15" fill="rgb(220,109,13)"/><text x="48.4419%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (1,332,145 samples, 1.13%)</title><rect x="47.2069%" y="197" width="1.1273%" height="15" fill="rgb(232,18,1)"/><text x="47.4569%" y="207.50"></text></g><g><title>resolve_instance (346,872 samples, 0.29%)</title><rect x="48.0406%" y="181" width="0.2935%" height="15" fill="rgb(215,41,42)"/><text x="48.2906%" y="191.50"></text></g><g><title>monomorphization_collector (1,362,405 samples, 1.15%)</title><rect x="47.2050%" y="213" width="1.1529%" height="15" fill="rgb(224,123,36)"/><text x="47.4550%" y="223.50"></text></g><g><title>assert_symbols_are_distinct (219,862 samples, 0.19%)</title><rect x="48.3667%" y="197" width="0.1861%" height="15" fill="rgb(240,125,3)"/><text x="48.6167%" y="207.50"></text></g><g><title>symbol_name (190,712 samples, 0.16%)</title><rect x="48.3914%" y="181" width="0.1614%" height="15" fill="rgb(205,98,50)"/><text x="48.6414%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (1,727,178 samples, 1.46%)</title><rect x="47.1779%" y="229" width="1.4616%" height="15" fill="rgb(205,185,37)"/><text x="47.4279%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (332,793 samples, 0.28%)</title><rect x="48.3578%" y="213" width="0.2816%" height="15" fill="rgb(238,207,15)"/><text x="48.6078%" y="223.50"></text></g><g><title>codegen_crate (7,584,580 samples, 6.42%)</title><rect x="42.2790%" y="245" width="6.4182%" height="15" fill="rgb(213,199,42)"/><text x="42.5290%" y="255.50">codegen_..</text></g><g><title>codegen_module_optimize (19,521,338 samples, 16.52%)</title><rect x="48.6972%" y="245" width="16.5193%" height="15" fill="rgb(235,201,11)"/><text x="48.9472%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (17,968,052 samples, 15.20%)</title><rect x="50.0116%" y="229" width="15.2049%" height="15" fill="rgb(207,46,11)"/><text x="50.2616%" y="239.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (1,616,547 samples, 1.37%)</title><rect x="66.1405%" y="229" width="1.3680%" height="15" fill="rgb(241,35,35)"/><text x="66.3905%" y="239.50"></text></g><g><title>LLVM_module_codegen (6,951,743 samples, 5.88%)</title><rect x="67.5084%" y="229" width="5.8827%" height="15" fill="rgb(243,32,47)"/><text x="67.7584%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (6,770,551 samples, 5.73%)</title><rect x="67.6618%" y="213" width="5.7294%" height="15" fill="rgb(247,202,23)"/><text x="67.9118%" y="223.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (9,741,575 samples, 8.24%)</title><rect x="65.2165%" y="245" width="8.2435%" height="15" fill="rgb(219,102,11)"/><text x="65.4665%" y="255.50">codegen_mod..</text></g><g><title>metadata_load_macro (156,931 samples, 0.13%)</title><rect x="79.6070%" y="197" width="0.1328%" height="15" fill="rgb(243,110,44)"/><text x="79.8570%" y="207.50"></text></g><g><title>metadata_register_crate (5,435,657 samples, 4.60%)</title><rect x="79.7398%" y="197" width="4.5998%" height="15" fill="rgb(222,74,54)"/><text x="79.9898%" y="207.50">metad..</text></g><g><title>metadata_register_crate (472,853 samples, 0.40%)</title><rect x="83.9395%" y="181" width="0.4001%" height="15" fill="rgb(216,99,12)"/><text x="84.1895%" y="191.50"></text></g><g><title>macro_expand_crate (12,607,694 samples, 10.67%)</title><rect x="73.7175%" y="229" width="10.6689%" height="15" fill="rgb(226,22,26)"/><text x="73.9675%" y="239.50">macro_expand_cra..</text></g><g><title>expand_crate (12,592,804 samples, 10.66%)</title><rect x="73.7301%" y="213" width="10.6563%" height="15" fill="rgb(217,163,10)"/><text x="73.9801%" y="223.50">expand_crate</text></g><g><title>late_resolve_crate (1,112,961 samples, 0.94%)</title><rect x="84.5191%" y="213" width="0.9418%" height="15" fill="rgb(213,25,53)"/><text x="84.7691%" y="223.50"></text></g><g><title>configure_and_expand (14,232,531 samples, 12.04%)</title><rect x="73.4600%" y="245" width="12.0438%" height="15" fill="rgb(252,105,26)"/><text x="73.7100%" y="255.50">configure_and_expa..</text></g><g><title>resolve_crate (1,268,794 samples, 1.07%)</title><rect x="84.4302%" y="229" width="1.0737%" height="15" fill="rgb(220,39,43)"/><text x="84.6802%" y="239.50"></text></g><g><title>early_lint_checks (164,292 samples, 0.14%)</title><rect x="85.5887%" y="245" width="0.1390%" height="15" fill="rgb(229,68,48)"/><text x="85.8387%" y="255.50"></text></g><g><title>free_global_ctxt (4,116,394 samples, 3.48%)</title><rect x="85.7277%" y="245" width="3.4834%" height="15" fill="rgb(252,8,32)"/><text x="85.9777%" y="255.50">fre..</text></g><g><title>layout_of (333,083 samples, 0.28%)</title><rect x="91.0139%" y="213" width="0.2819%" height="15" fill="rgb(223,20,43)"/><text x="91.2639%" y="223.50"></text></g><g><title>optimized_mir (2,243,715 samples, 1.90%)</title><rect x="90.2193%" y="229" width="1.8987%" height="15" fill="rgb(229,81,49)"/><text x="90.4693%" y="239.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (971,561 samples, 0.82%)</title><rect x="91.2958%" y="213" width="0.8222%" height="15" fill="rgb(236,28,36)"/><text x="91.5458%" y="223.50"></text></g><g><title>generate_crate_metadata (3,504,417 samples, 2.97%)</title><rect x="89.2111%" y="245" width="2.9655%" height="15" fill="rgb(249,185,26)"/><text x="89.4611%" y="255.50">gen..</text></g><g><title>hir_lowering (1,197,773 samples, 1.01%)</title><rect x="92.1766%" y="245" width="1.0136%" height="15" fill="rgb(249,174,33)"/><text x="92.4266%" y="255.50"></text></g><g><title>finish_ongoing_codegen (5,566,059 samples, 4.71%)</title><rect x="93.2004%" y="229" width="4.7101%" height="15" fill="rgb(233,201,37)"/><text x="93.4504%" y="239.50">finis..</text></g><g><title>link_crate (743,918 samples, 0.63%)</title><rect x="97.9105%" y="229" width="0.6295%" height="15" fill="rgb(221,78,26)"/><text x="98.1605%" y="239.50"></text></g><g><title>link_binary (734,518 samples, 0.62%)</title><rect x="97.9184%" y="213" width="0.6216%" height="15" fill="rgb(250,127,30)"/><text x="98.1684%" y="223.50"></text></g><g><title>link_rlib (458,025 samples, 0.39%)</title><rect x="98.1524%" y="197" width="0.3876%" height="15" fill="rgb(230,49,44)"/><text x="98.4024%" y="207.50"></text></g><g><title>link (6,329,667 samples, 5.36%)</title><rect x="93.1902%" y="245" width="5.3563%" height="15" fill="rgb(229,67,23)"/><text x="93.4402%" y="255.50">link</text></g><g><title>parse_crate (317,713 samples, 0.27%)</title><rect x="98.5465%" y="245" width="0.2689%" height="15" fill="rgb(249,83,47)"/><text x="98.7965%" y="255.50"></text></g><g><title>prepare_outputs (238,173 samples, 0.20%)</title><rect x="98.8190%" y="245" width="0.2015%" height="15" fill="rgb(215,43,3)"/><text x="99.0690%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (746,498 samples, 0.63%)</title><rect x="99.0206%" y="245" width="0.6317%" height="15" fill="rgb(238,154,13)"/><text x="99.2706%" y="255.50"></text></g><g><title>all (118,172,747 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (118,172,747 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (345,364 samples, 0.29%)</title><rect x="99.7077%" y="245" width="0.2923%" height="15" fill="rgb(235,30,7)"/><text x="99.9577%" y="255.50"></text></g></svg></svg>