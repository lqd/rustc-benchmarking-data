<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,646,093 samples, 13.52%)</title><rect x="0.4461%" y="245" width="13.5221%" height="15" fill="rgb(227,0,7)"/><text x="0.6961%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (225,732 samples, 0.20%)</title><rect x="13.7731%" y="229" width="0.1951%" height="15" fill="rgb(217,0,24)"/><text x="14.0231%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (203,102 samples, 0.18%)</title><rect x="13.7927%" y="213" width="0.1755%" height="15" fill="rgb(221,193,54)"/><text x="14.0427%" y="223.50"></text></g><g><title>is_copy_raw (228,404 samples, 0.20%)</title><rect x="21.2100%" y="133" width="0.1974%" height="15" fill="rgb(248,212,6)"/><text x="21.4600%" y="143.50"></text></g><g><title>evaluate_obligation (192,863 samples, 0.17%)</title><rect x="21.2407%" y="117" width="0.1667%" height="15" fill="rgb(208,68,35)"/><text x="21.4907%" y="127.50"></text></g><g><title>needs_drop_raw (321,992 samples, 0.28%)</title><rect x="21.4074%" y="133" width="0.2783%" height="15" fill="rgb(232,128,0)"/><text x="21.6574%" y="143.50"></text></g><g><title>is_copy_raw (189,831 samples, 0.16%)</title><rect x="21.5216%" y="117" width="0.1641%" height="15" fill="rgb(207,160,47)"/><text x="21.7716%" y="127.50"></text></g><g><title>evaluate_obligation (164,201 samples, 0.14%)</title><rect x="21.5437%" y="101" width="0.1419%" height="15" fill="rgb(228,23,34)"/><text x="21.7937%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (193,041 samples, 0.17%)</title><rect x="21.7339%" y="117" width="0.1668%" height="15" fill="rgb(218,30,26)"/><text x="21.9839%" y="127.50"></text></g><g><title>specialization_graph_of (335,974 samples, 0.29%)</title><rect x="21.9029%" y="117" width="0.2904%" height="15" fill="rgb(220,122,19)"/><text x="22.1529%" y="127.50"></text></g><g><title>impl_trait_ref (173,832 samples, 0.15%)</title><rect x="22.0430%" y="101" width="0.1502%" height="15" fill="rgb(250,228,42)"/><text x="22.2930%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (152,832 samples, 0.13%)</title><rect x="22.0612%" y="85" width="0.1321%" height="15" fill="rgb(240,193,28)"/><text x="22.3112%" y="95.50"></text></g><g><title>resolve_instance (605,466 samples, 0.52%)</title><rect x="21.6856%" y="133" width="0.5233%" height="15" fill="rgb(216,20,37)"/><text x="21.9356%" y="143.50"></text></g><g><title>thir_body (655,926 samples, 0.57%)</title><rect x="22.2162%" y="133" width="0.5669%" height="15" fill="rgb(206,188,39)"/><text x="22.4662%" y="143.50"></text></g><g><title>mir_const (4,224,188 samples, 3.65%)</title><rect x="19.1383%" y="181" width="3.6507%" height="15" fill="rgb(217,207,13)"/><text x="19.3883%" y="191.50">mir_..</text></g><g><title>unsafety_check_result (3,795,172 samples, 3.28%)</title><rect x="19.5091%" y="165" width="3.2800%" height="15" fill="rgb(231,73,38)"/><text x="19.7591%" y="175.50">uns..</text></g><g><title>mir_built (3,500,407 samples, 3.03%)</title><rect x="19.7638%" y="149" width="3.0252%" height="15" fill="rgb(225,20,46)"/><text x="20.0138%" y="159.50">mir..</text></g><g><title>mir_promoted (4,624,073 samples, 4.00%)</title><rect x="18.8061%" y="197" width="3.9963%" height="15" fill="rgb(210,31,41)"/><text x="19.0561%" y="207.50">mir_..</text></g><g><title>type_op_ascribe_user_type (122,702 samples, 0.11%)</title><rect x="22.8024%" y="197" width="0.1060%" height="15" fill="rgb(221,200,47)"/><text x="23.0524%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (465,915 samples, 0.40%)</title><rect x="22.9085%" y="197" width="0.4027%" height="15" fill="rgb(226,26,5)"/><text x="23.1585%" y="207.50"></text></g><g><title>normalize_projection_ty (348,055 samples, 0.30%)</title><rect x="23.0103%" y="181" width="0.3008%" height="15" fill="rgb(249,33,26)"/><text x="23.2603%" y="191.50"></text></g><g><title>type_op_prove_predicate (908,151 samples, 0.78%)</title><rect x="23.3817%" y="197" width="0.7849%" height="15" fill="rgb(235,183,28)"/><text x="23.6317%" y="207.50"></text></g><g><title>evaluate_obligation (132,851 samples, 0.11%)</title><rect x="24.0517%" y="181" width="0.1148%" height="15" fill="rgb(221,5,38)"/><text x="24.3017%" y="191.50"></text></g><g><title>MIR_borrow_checking (11,615,778 samples, 10.04%)</title><rect x="14.1288%" y="229" width="10.0389%" height="15" fill="rgb(247,18,42)"/><text x="14.3788%" y="239.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (11,567,138 samples, 10.00%)</title><rect x="14.1709%" y="213" width="9.9969%" height="15" fill="rgb(241,131,45)"/><text x="14.4209%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (202,832 samples, 0.18%)</title><rect x="24.4091%" y="197" width="0.1753%" height="15" fill="rgb(249,31,29)"/><text x="24.6591%" y="207.50"></text></g><g><title>check_mod_attrs (338,974 samples, 0.29%)</title><rect x="24.2915%" y="213" width="0.2930%" height="15" fill="rgb(225,111,53)"/><text x="24.5415%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (164,082 samples, 0.14%)</title><rect x="24.6704%" y="213" width="0.1418%" height="15" fill="rgb(238,160,17)"/><text x="24.9204%" y="223.50"></text></g><g><title>misc_checking_1 (660,798 samples, 0.57%)</title><rect x="24.2715%" y="229" width="0.5711%" height="15" fill="rgb(214,148,48)"/><text x="24.5215%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (264,493 samples, 0.23%)</title><rect x="24.8438%" y="213" width="0.2286%" height="15" fill="rgb(232,36,49)"/><text x="25.0938%" y="223.50"></text></g><g><title>check_mod_liveness (209,932 samples, 0.18%)</title><rect x="24.8910%" y="197" width="0.1814%" height="15" fill="rgb(209,103,24)"/><text x="25.1410%" y="207.50"></text></g><g><title>misc_checking_2 (548,706 samples, 0.47%)</title><rect x="24.8426%" y="229" width="0.4742%" height="15" fill="rgb(229,88,8)"/><text x="25.0926%" y="239.50"></text></g><g><title>match_checking (282,823 samples, 0.24%)</title><rect x="25.0724%" y="213" width="0.2444%" height="15" fill="rgb(213,181,19)"/><text x="25.3224%" y="223.50"></text></g><g><title>check_match (263,943 samples, 0.23%)</title><rect x="25.0887%" y="197" width="0.2281%" height="15" fill="rgb(254,191,54)"/><text x="25.3387%" y="207.50"></text></g><g><title>death_checking (254,293 samples, 0.22%)</title><rect x="25.3822%" y="213" width="0.2198%" height="15" fill="rgb(241,83,37)"/><text x="25.6322%" y="223.50"></text></g><g><title>crate_lints (924,191 samples, 0.80%)</title><rect x="25.6032%" y="197" width="0.7987%" height="15" fill="rgb(233,36,39)"/><text x="25.8532%" y="207.50"></text></g><g><title>type_of (540,015 samples, 0.47%)</title><rect x="25.9352%" y="181" width="0.4667%" height="15" fill="rgb(226,3,54)"/><text x="26.1852%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (239,643 samples, 0.21%)</title><rect x="26.1948%" y="165" width="0.2071%" height="15" fill="rgb(245,192,40)"/><text x="26.4448%" y="175.50"></text></g><g><title>lint_checking (1,179,733 samples, 1.02%)</title><rect x="25.6020%" y="213" width="1.0196%" height="15" fill="rgb(238,167,29)"/><text x="25.8520%" y="223.50"></text></g><g><title>module_lints (254,102 samples, 0.22%)</title><rect x="26.4019%" y="197" width="0.2196%" height="15" fill="rgb(232,182,51)"/><text x="26.6519%" y="207.50"></text></g><g><title>lint_mod (250,632 samples, 0.22%)</title><rect x="26.4049%" y="181" width="0.2166%" height="15" fill="rgb(231,60,39)"/><text x="26.6549%" y="191.50"></text></g><g><title>privacy_checking_modules (340,324 samples, 0.29%)</title><rect x="26.7182%" y="213" width="0.2941%" height="15" fill="rgb(208,69,12)"/><text x="26.9682%" y="223.50"></text></g><g><title>check_mod_privacy (338,404 samples, 0.29%)</title><rect x="26.7198%" y="197" width="0.2925%" height="15" fill="rgb(235,93,37)"/><text x="26.9698%" y="207.50"></text></g><g><title>misc_checking_3 (1,978,522 samples, 1.71%)</title><rect x="25.3169%" y="229" width="1.7099%" height="15" fill="rgb(213,116,39)"/><text x="25.5669%" y="239.50"></text></g><g><title>impl_parent (676,633 samples, 0.58%)</title><rect x="28.0015%" y="165" width="0.5848%" height="15" fill="rgb(222,207,29)"/><text x="28.2515%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (409,523 samples, 0.35%)</title><rect x="28.2323%" y="149" width="0.3539%" height="15" fill="rgb(206,96,30)"/><text x="28.4823%" y="159.50"></text></g><g><title>impl_trait_ref (1,347,387 samples, 1.16%)</title><rect x="28.5863%" y="165" width="1.1645%" height="15" fill="rgb(218,138,4)"/><text x="28.8363%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,070,413 samples, 0.93%)</title><rect x="28.8256%" y="149" width="0.9251%" height="15" fill="rgb(250,191,14)"/><text x="29.0756%" y="159.50"></text></g><g><title>coherent_trait (3,322,387 samples, 2.87%)</title><rect x="27.0705%" y="197" width="2.8714%" height="15" fill="rgb(239,60,40)"/><text x="27.3205%" y="207.50">co..</text></g><g><title>specialization_graph_of (3,310,977 samples, 2.86%)</title><rect x="27.0804%" y="181" width="2.8615%" height="15" fill="rgb(206,27,48)"/><text x="27.3304%" y="191.50">sp..</text></g><g><title>trait_impls_of (219,903 samples, 0.19%)</title><rect x="29.7518%" y="165" width="0.1901%" height="15" fill="rgb(225,35,8)"/><text x="30.0018%" y="175.50"></text></g><g><title>coherence_checking (3,368,477 samples, 2.91%)</title><rect x="27.0568%" y="213" width="2.9112%" height="15" fill="rgb(250,213,24)"/><text x="27.3068%" y="223.50">co..</text></g><g><title>adt_sized_constraint (151,200 samples, 0.13%)</title><rect x="41.3383%" y="165" width="0.1307%" height="15" fill="rgb(247,123,22)"/><text x="41.5883%" y="175.50"></text></g><g><title>associated_item (667,990 samples, 0.58%)</title><rect x="41.6559%" y="149" width="0.5773%" height="15" fill="rgb(231,138,38)"/><text x="41.9059%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (523,795 samples, 0.45%)</title><rect x="41.7805%" y="133" width="0.4527%" height="15" fill="rgb(231,145,46)"/><text x="42.0305%" y="143.50"></text></g><g><title>associated_items (909,130 samples, 0.79%)</title><rect x="41.4742%" y="165" width="0.7857%" height="15" fill="rgb(251,118,11)"/><text x="41.7242%" y="175.50"></text></g><g><title>dropck_outlives (193,611 samples, 0.17%)</title><rect x="42.2804%" y="165" width="0.1673%" height="15" fill="rgb(217,147,25)"/><text x="42.5304%" y="175.50"></text></g><g><title>mir_const_qualif (168,142 samples, 0.15%)</title><rect x="42.5533%" y="117" width="0.1453%" height="15" fill="rgb(247,81,37)"/><text x="42.8033%" y="127.50"></text></g><g><title>mir_const (140,262 samples, 0.12%)</title><rect x="42.5774%" y="101" width="0.1212%" height="15" fill="rgb(209,12,38)"/><text x="42.8274%" y="111.50"></text></g><g><title>mir_borrowck (361,705 samples, 0.31%)</title><rect x="42.8608%" y="85" width="0.3126%" height="15" fill="rgb(227,1,9)"/><text x="43.1108%" y="95.50"></text></g><g><title>mir_for_ctfe (551,366 samples, 0.48%)</title><rect x="42.6986%" y="117" width="0.4765%" height="15" fill="rgb(248,47,43)"/><text x="42.9486%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (502,925 samples, 0.43%)</title><rect x="42.7405%" y="101" width="0.4347%" height="15" fill="rgb(221,10,30)"/><text x="42.9905%" y="111.50"></text></g><g><title>eval_to_const_value_raw (843,120 samples, 0.73%)</title><rect x="42.4477%" y="165" width="0.7287%" height="15" fill="rgb(210,229,1)"/><text x="42.6977%" y="175.50"></text></g><g><title>eval_to_const_value_raw (837,280 samples, 0.72%)</title><rect x="42.4528%" y="149" width="0.7236%" height="15" fill="rgb(222,148,37)"/><text x="42.7028%" y="159.50"></text></g><g><title>eval_to_allocation_raw (824,590 samples, 0.71%)</title><rect x="42.4638%" y="133" width="0.7127%" height="15" fill="rgb(234,67,33)"/><text x="42.7138%" y="143.50"></text></g><g><title>generics_of (478,985 samples, 0.41%)</title><rect x="45.7191%" y="149" width="0.4140%" height="15" fill="rgb(247,98,35)"/><text x="45.9691%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (367,863 samples, 0.32%)</title><rect x="45.8152%" y="133" width="0.3179%" height="15" fill="rgb(247,138,52)"/><text x="46.0652%" y="143.50"></text></g><g><title>impl_polarity (139,540 samples, 0.12%)</title><rect x="46.1678%" y="149" width="0.1206%" height="15" fill="rgb(213,79,30)"/><text x="46.4178%" y="159.50"></text></g><g><title>impl_trait_ref (521,855 samples, 0.45%)</title><rect x="46.2884%" y="149" width="0.4510%" height="15" fill="rgb(246,177,23)"/><text x="46.5384%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (416,504 samples, 0.36%)</title><rect x="46.3794%" y="133" width="0.3600%" height="15" fill="rgb(230,62,27)"/><text x="46.6294%" y="143.50"></text></g><g><title>issue33140_self_ty (280,193 samples, 0.24%)</title><rect x="46.7394%" y="149" width="0.2422%" height="15" fill="rgb(216,154,8)"/><text x="46.9894%" y="159.50"></text></g><g><title>associated_item_def_ids (236,803 samples, 0.20%)</title><rect x="46.7769%" y="133" width="0.2047%" height="15" fill="rgb(244,35,45)"/><text x="47.0269%" y="143.50"></text></g><g><title>opt_def_kind (147,600 samples, 0.13%)</title><rect x="47.1849%" y="133" width="0.1276%" height="15" fill="rgb(251,115,12)"/><text x="47.4349%" y="143.50"></text></g><g><title>explicit_predicates_of (143,841 samples, 0.12%)</title><rect x="47.5083%" y="117" width="0.1243%" height="15" fill="rgb(240,54,50)"/><text x="47.7583%" y="127.50"></text></g><g><title>predicates_of (858,382 samples, 0.74%)</title><rect x="46.9899%" y="149" width="0.7419%" height="15" fill="rgb(233,84,52)"/><text x="47.2399%" y="159.50"></text></g><g><title>predicates_defined_on (485,158 samples, 0.42%)</title><rect x="47.3125%" y="133" width="0.4193%" height="15" fill="rgb(207,117,47)"/><text x="47.5625%" y="143.50"></text></g><g><title>specializes (2,332,827 samples, 2.02%)</title><rect x="47.7318%" y="149" width="2.0161%" height="15" fill="rgb(249,43,39)"/><text x="47.9818%" y="159.50">s..</text></g><g><title>param_env (1,383,497 samples, 1.20%)</title><rect x="48.5522%" y="133" width="1.1957%" height="15" fill="rgb(209,38,44)"/><text x="48.8022%" y="143.50"></text></g><g><title>def_span (623,435 samples, 0.54%)</title><rect x="49.2091%" y="117" width="0.5388%" height="15" fill="rgb(236,212,23)"/><text x="49.4591%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (556,904 samples, 0.48%)</title><rect x="49.2666%" y="101" width="0.4813%" height="15" fill="rgb(242,79,21)"/><text x="49.5166%" y="111.50"></text></g><g><title>trait_impls_of (360,464 samples, 0.31%)</title><rect x="49.7661%" y="149" width="0.3115%" height="15" fill="rgb(211,96,35)"/><text x="50.0161%" y="159.50"></text></g><g><title>implementations_of_trait (143,841 samples, 0.12%)</title><rect x="49.9533%" y="133" width="0.1243%" height="15" fill="rgb(253,215,40)"/><text x="50.2033%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (131,991 samples, 0.11%)</title><rect x="49.9636%" y="117" width="0.1141%" height="15" fill="rgb(211,81,21)"/><text x="50.2136%" y="127.50"></text></g><g><title>evaluate_obligation (7,992,419 samples, 6.91%)</title><rect x="43.1764%" y="165" width="6.9074%" height="15" fill="rgb(208,190,38)"/><text x="43.4264%" y="175.50">evaluate_..</text></g><g><title>impl_item_implementor_ids (138,522 samples, 0.12%)</title><rect x="50.2362%" y="165" width="0.1197%" height="15" fill="rgb(235,213,38)"/><text x="50.4862%" y="175.50"></text></g><g><title>associated_items (119,982 samples, 0.10%)</title><rect x="50.2523%" y="149" width="0.1037%" height="15" fill="rgb(237,122,38)"/><text x="50.5023%" y="159.50"></text></g><g><title>method_autoderef_steps (127,591 samples, 0.11%)</title><rect x="50.4793%" y="165" width="0.1103%" height="15" fill="rgb(244,218,35)"/><text x="50.7293%" y="175.50"></text></g><g><title>predicates_of (261,911 samples, 0.23%)</title><rect x="50.6698%" y="165" width="0.2264%" height="15" fill="rgb(240,68,47)"/><text x="50.9198%" y="175.50"></text></g><g><title>predicates_defined_on (182,660 samples, 0.16%)</title><rect x="50.7383%" y="149" width="0.1579%" height="15" fill="rgb(210,16,53)"/><text x="50.9883%" y="159.50"></text></g><g><title>typeck (633,647 samples, 0.55%)</title><rect x="51.0413%" y="165" width="0.5476%" height="15" fill="rgb(235,124,12)"/><text x="51.2913%" y="175.50"></text></g><g><title>item_bodies_checking (25,045,315 samples, 21.65%)</title><rect x="29.9802%" y="213" width="21.6454%" height="15" fill="rgb(224,169,11)"/><text x="30.2302%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,042,275 samples, 21.64%)</title><rect x="29.9829%" y="197" width="21.6427%" height="15" fill="rgb(250,166,2)"/><text x="30.2329%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (25,000,105 samples, 21.61%)</title><rect x="30.0193%" y="181" width="21.6063%" height="15" fill="rgb(242,216,29)"/><text x="30.2693%" y="191.50">typeck</text></g><g><title>item_types_checking (285,803 samples, 0.25%)</title><rect x="51.6256%" y="213" width="0.2470%" height="15" fill="rgb(230,116,27)"/><text x="51.8756%" y="223.50"></text></g><g><title>check_mod_item_types (282,943 samples, 0.24%)</title><rect x="51.6281%" y="197" width="0.2445%" height="15" fill="rgb(228,99,48)"/><text x="51.8781%" y="207.50"></text></g><g><title>fn_sig (184,644 samples, 0.16%)</title><rect x="51.9933%" y="181" width="0.1596%" height="15" fill="rgb(253,11,6)"/><text x="52.2433%" y="191.50"></text></g><g><title>named_region_map (214,262 samples, 0.19%)</title><rect x="52.1971%" y="165" width="0.1852%" height="15" fill="rgb(247,143,39)"/><text x="52.4471%" y="175.50"></text></g><g><title>resolve_lifetimes (205,292 samples, 0.18%)</title><rect x="52.2049%" y="149" width="0.1774%" height="15" fill="rgb(236,97,10)"/><text x="52.4549%" y="159.50"></text></g><g><title>generics_of (277,522 samples, 0.24%)</title><rect x="52.1528%" y="181" width="0.2398%" height="15" fill="rgb(233,208,19)"/><text x="52.4028%" y="191.50"></text></g><g><title>predicates_of (121,961 samples, 0.11%)</title><rect x="52.4223%" y="181" width="0.1054%" height="15" fill="rgb(216,164,2)"/><text x="52.6723%" y="191.50"></text></g><g><title>type_collecting (825,259 samples, 0.71%)</title><rect x="51.8741%" y="213" width="0.7132%" height="15" fill="rgb(220,129,5)"/><text x="52.1241%" y="223.50"></text></g><g><title>collect_mod_item_types (812,089 samples, 0.70%)</title><rect x="51.8855%" y="197" width="0.7018%" height="15" fill="rgb(242,17,10)"/><text x="52.1355%" y="207.50"></text></g><g><title>check_impl_item_well_formed (420,906 samples, 0.36%)</title><rect x="52.6591%" y="197" width="0.3638%" height="15" fill="rgb(242,107,0)"/><text x="52.9091%" y="207.50"></text></g><g><title>mir_const_qualif (386,585 samples, 0.33%)</title><rect x="54.0411%" y="133" width="0.3341%" height="15" fill="rgb(251,28,31)"/><text x="54.2911%" y="143.50"></text></g><g><title>mir_const (328,605 samples, 0.28%)</title><rect x="54.0912%" y="117" width="0.2840%" height="15" fill="rgb(233,223,10)"/><text x="54.3412%" y="127.50"></text></g><g><title>unsafety_check_result (221,052 samples, 0.19%)</title><rect x="54.1841%" y="101" width="0.1910%" height="15" fill="rgb(215,21,27)"/><text x="54.4341%" y="111.50"></text></g><g><title>mir_built (183,972 samples, 0.16%)</title><rect x="54.2162%" y="85" width="0.1590%" height="15" fill="rgb(232,23,21)"/><text x="54.4662%" y="95.50"></text></g><g><title>mir_borrowck (909,180 samples, 0.79%)</title><rect x="54.7605%" y="101" width="0.7858%" height="15" fill="rgb(244,5,23)"/><text x="55.0105%" y="111.50"></text></g><g><title>mir_for_ctfe (1,359,014 samples, 1.17%)</title><rect x="54.3752%" y="133" width="1.1745%" height="15" fill="rgb(226,81,46)"/><text x="54.6252%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,245,634 samples, 1.08%)</title><rect x="54.4732%" y="117" width="1.0765%" height="15" fill="rgb(247,70,30)"/><text x="54.7232%" y="127.50"></text></g><g><title>mir_const_qualif (144,391 samples, 0.12%)</title><rect x="55.6951%" y="69" width="0.1248%" height="15" fill="rgb(212,68,19)"/><text x="55.9451%" y="79.50"></text></g><g><title>mir_const (123,331 samples, 0.11%)</title><rect x="55.7133%" y="53" width="0.1066%" height="15" fill="rgb(240,187,13)"/><text x="55.9633%" y="63.50"></text></g><g><title>mir_borrowck (285,953 samples, 0.25%)</title><rect x="55.9673%" y="37" width="0.2471%" height="15" fill="rgb(223,113,26)"/><text x="56.2173%" y="47.50"></text></g><g><title>mir_for_ctfe (458,616 samples, 0.40%)</title><rect x="55.8199%" y="69" width="0.3964%" height="15" fill="rgb(206,192,2)"/><text x="56.0699%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (420,864 samples, 0.36%)</title><rect x="55.8525%" y="53" width="0.3637%" height="15" fill="rgb(241,108,4)"/><text x="56.1025%" y="63.50"></text></g><g><title>eval_to_const_value_raw (936,050 samples, 0.81%)</title><rect x="55.5790%" y="117" width="0.8090%" height="15" fill="rgb(247,173,49)"/><text x="55.8290%" y="127.50"></text></g><g><title>eval_to_const_value_raw (930,099 samples, 0.80%)</title><rect x="55.5841%" y="101" width="0.8038%" height="15" fill="rgb(224,114,35)"/><text x="55.8341%" y="111.50"></text></g><g><title>eval_to_allocation_raw (917,529 samples, 0.79%)</title><rect x="55.5950%" y="85" width="0.7930%" height="15" fill="rgb(245,159,27)"/><text x="55.8450%" y="95.50"></text></g><g><title>typeck (197,421 samples, 0.17%)</title><rect x="56.2173%" y="69" width="0.1706%" height="15" fill="rgb(245,172,44)"/><text x="56.4673%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (982,090 samples, 0.85%)</title><rect x="55.5520%" y="133" width="0.8488%" height="15" fill="rgb(236,23,11)"/><text x="55.8020%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,492,351 samples, 3.02%)</title><rect x="53.7873%" y="181" width="3.0183%" height="15" fill="rgb(205,117,38)"/><text x="54.0373%" y="191.50">eva..</text></g><g><title>eval_to_const_value_raw (3,467,131 samples, 3.00%)</title><rect x="53.8091%" y="165" width="2.9965%" height="15" fill="rgb(237,72,25)"/><text x="54.0591%" y="175.50">eva..</text></g><g><title>eval_to_allocation_raw (3,447,570 samples, 2.98%)</title><rect x="53.8260%" y="149" width="2.9796%" height="15" fill="rgb(244,70,9)"/><text x="54.0760%" y="159.50">eva..</text></g><g><title>typeck (468,305 samples, 0.40%)</title><rect x="56.4008%" y="133" width="0.4047%" height="15" fill="rgb(217,125,39)"/><text x="56.6508%" y="143.50"></text></g><g><title>evaluate_obligation (126,131 samples, 0.11%)</title><rect x="56.8055%" y="181" width="0.1090%" height="15" fill="rgb(235,36,10)"/><text x="57.0555%" y="191.50"></text></g><g><title>implied_outlives_bounds (158,361 samples, 0.14%)</title><rect x="56.9278%" y="181" width="0.1369%" height="15" fill="rgb(251,123,47)"/><text x="57.1778%" y="191.50"></text></g><g><title>param_env (207,591 samples, 0.18%)</title><rect x="57.0652%" y="181" width="0.1794%" height="15" fill="rgb(221,13,13)"/><text x="57.3152%" y="191.50"></text></g><g><title>region_scope_tree (254,315 samples, 0.22%)</title><rect x="57.2824%" y="181" width="0.2198%" height="15" fill="rgb(238,131,9)"/><text x="57.5324%" y="191.50"></text></g><g><title>analysis (50,431,106 samples, 43.58%)</title><rect x="13.9682%" y="245" width="43.5850%" height="15" fill="rgb(211,50,8)"/><text x="14.2182%" y="255.50">analysis</text></g><g><title>type_check_crate (35,321,349 samples, 30.53%)</title><rect x="27.0268%" y="229" width="30.5264%" height="15" fill="rgb(245,182,24)"/><text x="27.2768%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,740,914 samples, 4.96%)</title><rect x="52.5916%" y="213" width="4.9616%" height="15" fill="rgb(242,14,37)"/><text x="52.8416%" y="223.50">wf_che..</text></g><g><title>check_item_well_formed (5,241,907 samples, 4.53%)</title><rect x="53.0229%" y="197" width="4.5303%" height="15" fill="rgb(246,228,12)"/><text x="53.2729%" y="207.50">check..</text></g><g><title>fn_abi_of_instance (242,472 samples, 0.21%)</title><rect x="58.7963%" y="213" width="0.2096%" height="15" fill="rgb(213,55,15)"/><text x="59.0463%" y="223.50"></text></g><g><title>codegen_module (1,013,521 samples, 0.88%)</title><rect x="58.1595%" y="229" width="0.8759%" height="15" fill="rgb(209,9,3)"/><text x="58.4095%" y="239.50"></text></g><g><title>optimized_mir (310,163 samples, 0.27%)</title><rect x="59.1306%" y="181" width="0.2681%" height="15" fill="rgb(230,59,30)"/><text x="59.3806%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (121,970 samples, 0.11%)</title><rect x="59.2933%" y="165" width="0.1054%" height="15" fill="rgb(209,121,21)"/><text x="59.5433%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (398,564 samples, 0.34%)</title><rect x="59.0564%" y="197" width="0.3445%" height="15" fill="rgb(220,109,13)"/><text x="59.3064%" y="207.50"></text></g><g><title>monomorphization_collector (431,065 samples, 0.37%)</title><rect x="59.0549%" y="213" width="0.3725%" height="15" fill="rgb(232,18,1)"/><text x="59.3049%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (488,296 samples, 0.42%)</title><rect x="59.0361%" y="229" width="0.4220%" height="15" fill="rgb(215,41,42)"/><text x="59.2861%" y="239.50"></text></g><g><title>codegen_crate (2,218,304 samples, 1.92%)</title><rect x="57.5585%" y="245" width="1.9172%" height="15" fill="rgb(224,123,36)"/><text x="57.8085%" y="255.50">c..</text></g><g><title>codegen_module_optimize (4,198,417 samples, 3.63%)</title><rect x="59.4757%" y="245" width="3.6285%" height="15" fill="rgb(240,125,3)"/><text x="59.7257%" y="255.50">code..</text></g><g><title>LLVM_module_optimize (3,669,451 samples, 3.17%)</title><rect x="59.9328%" y="229" width="3.1713%" height="15" fill="rgb(205,98,50)"/><text x="60.1828%" y="239.50">LLV..</text></g><g><title>LLVM_lto_optimize (2,424,197 samples, 2.10%)</title><rect x="63.5452%" y="229" width="2.0951%" height="15" fill="rgb(205,185,37)"/><text x="63.7952%" y="239.50">L..</text></g><g><title>LLVM_module_codegen (7,642,294 samples, 6.60%)</title><rect x="65.6403%" y="229" width="6.6048%" height="15" fill="rgb(238,207,15)"/><text x="65.8903%" y="239.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (7,537,653 samples, 6.51%)</title><rect x="65.7308%" y="213" width="6.5144%" height="15" fill="rgb(213,199,42)"/><text x="65.9808%" y="223.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (10,649,547 samples, 9.20%)</title><rect x="63.1041%" y="245" width="9.2039%" height="15" fill="rgb(235,201,11)"/><text x="63.3541%" y="255.50">codegen_modul..</text></g><g><title>macro_expand_crate (6,366,801 samples, 5.50%)</title><rect x="72.5572%" y="229" width="5.5025%" height="15" fill="rgb(207,46,11)"/><text x="72.8072%" y="239.50">macro_e..</text></g><g><title>expand_crate (6,352,711 samples, 5.49%)</title><rect x="72.5693%" y="213" width="5.4903%" height="15" fill="rgb(241,35,35)"/><text x="72.8193%" y="223.50">expand_..</text></g><g><title>finalize_macro_resolutions (116,761 samples, 0.10%)</title><rect x="78.1184%" y="213" width="0.1009%" height="15" fill="rgb(243,32,47)"/><text x="78.3684%" y="223.50"></text></g><g><title>late_resolve_crate (1,116,163 samples, 0.96%)</title><rect x="78.2193%" y="213" width="0.9646%" height="15" fill="rgb(247,202,23)"/><text x="78.4693%" y="223.50"></text></g><g><title>configure_and_expand (8,016,789 samples, 6.93%)</title><rect x="72.3080%" y="245" width="6.9285%" height="15" fill="rgb(219,102,11)"/><text x="72.5580%" y="255.50">configure..</text></g><g><title>resolve_crate (1,313,114 samples, 1.13%)</title><rect x="78.1016%" y="229" width="1.1349%" height="15" fill="rgb(243,110,44)"/><text x="78.3516%" y="239.50"></text></g><g><title>early_lint_checks (187,232 samples, 0.16%)</title><rect x="79.3212%" y="245" width="0.1618%" height="15" fill="rgb(222,74,54)"/><text x="79.5712%" y="255.50"></text></g><g><title>free_global_ctxt (2,587,899 samples, 2.24%)</title><rect x="79.4830%" y="245" width="2.2366%" height="15" fill="rgb(216,99,12)"/><text x="79.7330%" y="255.50">f..</text></g><g><title>exported_symbols (133,621 samples, 0.12%)</title><rect x="82.4971%" y="229" width="0.1155%" height="15" fill="rgb(226,22,26)"/><text x="82.7471%" y="239.50"></text></g><g><title>layout_of (128,281 samples, 0.11%)</title><rect x="84.4448%" y="197" width="0.1109%" height="15" fill="rgb(217,163,10)"/><text x="84.6948%" y="207.50"></text></g><g><title>layout_of (356,973 samples, 0.31%)</title><rect x="84.2755%" y="213" width="0.3085%" height="15" fill="rgb(213,25,53)"/><text x="84.5255%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,687,146 samples, 1.46%)</title><rect x="84.5840%" y="213" width="1.4581%" height="15" fill="rgb(252,105,26)"/><text x="84.8340%" y="223.50"></text></g><g><title>eval_to_const_value_raw (237,992 samples, 0.21%)</title><rect x="86.0785%" y="197" width="0.2057%" height="15" fill="rgb(220,39,43)"/><text x="86.3285%" y="207.50"></text></g><g><title>eval_to_const_value_raw (230,982 samples, 0.20%)</title><rect x="86.0846%" y="181" width="0.1996%" height="15" fill="rgb(229,68,48)"/><text x="86.3346%" y="191.50"></text></g><g><title>eval_to_allocation_raw (218,272 samples, 0.19%)</title><rect x="86.0955%" y="165" width="0.1886%" height="15" fill="rgb(252,8,32)"/><text x="86.3455%" y="175.50"></text></g><g><title>optimized_mir (4,240,345 samples, 3.66%)</title><rect x="82.6266%" y="229" width="3.6647%" height="15" fill="rgb(223,20,43)"/><text x="82.8766%" y="239.50">opti..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (272,592 samples, 0.24%)</title><rect x="86.0558%" y="213" width="0.2356%" height="15" fill="rgb(229,81,49)"/><text x="86.3058%" y="223.50"></text></g><g><title>generate_crate_metadata (5,322,639 samples, 4.60%)</title><rect x="81.7196%" y="245" width="4.6001%" height="15" fill="rgb(236,28,36)"/><text x="81.9696%" y="255.50">gener..</text></g><g><title>hir_lowering (1,317,654 samples, 1.14%)</title><rect x="86.3196%" y="245" width="1.1388%" height="15" fill="rgb(249,185,26)"/><text x="86.5696%" y="255.50"></text></g><g><title>finish_ongoing_codegen (12,036,302 samples, 10.40%)</title><rect x="87.4723%" y="229" width="10.4024%" height="15" fill="rgb(249,174,33)"/><text x="87.7223%" y="239.50">finish_ongoing_..</text></g><g><title>link_crate (656,948 samples, 0.57%)</title><rect x="97.8747%" y="229" width="0.5678%" height="15" fill="rgb(233,201,37)"/><text x="98.1247%" y="239.50"></text></g><g><title>link_binary (651,258 samples, 0.56%)</title><rect x="97.8796%" y="213" width="0.5628%" height="15" fill="rgb(221,78,26)"/><text x="98.1296%" y="223.50"></text></g><g><title>link_rlib (433,474 samples, 0.37%)</title><rect x="98.0678%" y="197" width="0.3746%" height="15" fill="rgb(250,127,30)"/><text x="98.3178%" y="207.50"></text></g><g><title>link (12,718,440 samples, 10.99%)</title><rect x="87.4584%" y="245" width="10.9919%" height="15" fill="rgb(230,49,44)"/><text x="87.7084%" y="255.50">link</text></g><g><title>parse_crate (213,912 samples, 0.18%)</title><rect x="98.4503%" y="245" width="0.1849%" height="15" fill="rgb(229,67,23)"/><text x="98.7003%" y="255.50"></text></g><g><title>prepare_outputs (181,662 samples, 0.16%)</title><rect x="98.6398%" y="245" width="0.1570%" height="15" fill="rgb(249,83,47)"/><text x="98.8898%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,004,651 samples, 0.87%)</title><rect x="98.7968%" y="245" width="0.8683%" height="15" fill="rgb(215,43,3)"/><text x="99.0468%" y="255.50"></text></g><g><title>all (115,707,516 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (115,707,516 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (310,923 samples, 0.27%)</title><rect x="99.7313%" y="245" width="0.2687%" height="15" fill="rgb(233,0,4)"/><text x="99.9813%" y="255.50"></text></g></svg></svg>