<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (65,377,686 samples, 10.97%)</title><rect x="0.1352%" y="197" width="10.9728%" height="15" fill="rgb(227,0,7)"/><text x="0.3852%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (707,688 samples, 0.12%)</title><rect x="10.9892%" y="181" width="0.1188%" height="15" fill="rgb(217,0,24)"/><text x="11.2392%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (689,388 samples, 0.12%)</title><rect x="10.9922%" y="165" width="0.1157%" height="15" fill="rgb(221,193,54)"/><text x="11.2422%" y="175.50"></text></g><g><title>codegen_fn_attrs (908,408 samples, 0.15%)</title><rect x="16.4176%" y="101" width="0.1525%" height="15" fill="rgb(248,212,6)"/><text x="16.6676%" y="111.50"></text></g><g><title>is_copy_raw (1,799,726 samples, 0.30%)</title><rect x="17.7134%" y="69" width="0.3021%" height="15" fill="rgb(208,68,35)"/><text x="17.9634%" y="79.50"></text></g><g><title>evaluate_obligation (1,439,559 samples, 0.24%)</title><rect x="17.7738%" y="53" width="0.2416%" height="15" fill="rgb(232,128,0)"/><text x="18.0238%" y="63.50"></text></g><g><title>needs_drop_raw (2,356,953 samples, 0.40%)</title><rect x="17.6234%" y="85" width="0.3956%" height="15" fill="rgb(207,160,47)"/><text x="17.8734%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (654,529 samples, 0.11%)</title><rect x="18.1107%" y="69" width="0.1099%" height="15" fill="rgb(228,23,34)"/><text x="18.3607%" y="79.50"></text></g><g><title>specialization_graph_of (804,298 samples, 0.13%)</title><rect x="18.2331%" y="69" width="0.1350%" height="15" fill="rgb(218,30,26)"/><text x="18.4831%" y="79.50"></text></g><g><title>resolve_instance (2,245,416 samples, 0.38%)</title><rect x="18.0233%" y="85" width="0.3769%" height="15" fill="rgb(220,122,19)"/><text x="18.2733%" y="95.50"></text></g><g><title>thir_body (2,182,537 samples, 0.37%)</title><rect x="18.4128%" y="85" width="0.3663%" height="15" fill="rgb(250,228,42)"/><text x="18.6628%" y="95.50"></text></g><g><title>mir_const (17,614,976 samples, 2.96%)</title><rect x="15.8456%" y="133" width="2.9564%" height="15" fill="rgb(240,193,28)"/><text x="16.0956%" y="143.50">mir..</text></g><g><title>unsafety_check_result (15,247,461 samples, 2.56%)</title><rect x="16.2429%" y="117" width="2.5591%" height="15" fill="rgb(216,20,37)"/><text x="16.4929%" y="127.50">un..</text></g><g><title>mir_built (13,298,351 samples, 2.23%)</title><rect x="16.5700%" y="101" width="2.2320%" height="15" fill="rgb(206,188,39)"/><text x="16.8200%" y="111.50">m..</text></g><g><title>mir_const_qualif (813,859 samples, 0.14%)</title><rect x="18.8020%" y="133" width="0.1366%" height="15" fill="rgb(217,207,13)"/><text x="19.0520%" y="143.50"></text></g><g><title>mir_promoted (20,125,778 samples, 3.38%)</title><rect x="15.5609%" y="149" width="3.3778%" height="15" fill="rgb(231,73,38)"/><text x="15.8109%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (1,906,252 samples, 0.32%)</title><rect x="18.9388%" y="149" width="0.3199%" height="15" fill="rgb(225,20,46)"/><text x="19.1888%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,049,577 samples, 0.18%)</title><rect x="19.2587%" y="149" width="0.1762%" height="15" fill="rgb(210,31,41)"/><text x="19.5087%" y="159.50"></text></g><g><title>type_op_normalize_ty (746,883 samples, 0.13%)</title><rect x="19.4595%" y="149" width="0.1254%" height="15" fill="rgb(221,200,47)"/><text x="19.7095%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,992,863 samples, 1.01%)</title><rect x="19.5848%" y="149" width="1.0058%" height="15" fill="rgb(226,26,5)"/><text x="19.8348%" y="159.50"></text></g><g><title>MIR_borrow_checking (55,946,635 samples, 9.39%)</title><rect x="11.2031%" y="181" width="9.3899%" height="15" fill="rgb(249,33,26)"/><text x="11.4531%" y="191.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (55,644,411 samples, 9.34%)</title><rect x="11.2539%" y="165" width="9.3392%" height="15" fill="rgb(235,183,28)"/><text x="11.5039%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (654,456 samples, 0.11%)</title><rect x="20.8315%" y="149" width="0.1098%" height="15" fill="rgb(221,5,38)"/><text x="21.0815%" y="159.50"></text></g><g><title>check_mod_attrs (1,154,404 samples, 0.19%)</title><rect x="20.7476%" y="165" width="0.1938%" height="15" fill="rgb(247,18,42)"/><text x="20.9976%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (824,369 samples, 0.14%)</title><rect x="21.0188%" y="165" width="0.1384%" height="15" fill="rgb(241,131,45)"/><text x="21.2688%" y="175.50"></text></g><g><title>misc_checking_1 (2,599,278 samples, 0.44%)</title><rect x="20.7402%" y="181" width="0.4363%" height="15" fill="rgb(249,31,29)"/><text x="20.9902%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,057,492 samples, 0.18%)</title><rect x="21.1767%" y="165" width="0.1775%" height="15" fill="rgb(225,111,53)"/><text x="21.4267%" y="175.50"></text></g><g><title>check_mod_liveness (844,700 samples, 0.14%)</title><rect x="21.2124%" y="149" width="0.1418%" height="15" fill="rgb(238,160,17)"/><text x="21.4624%" y="159.50"></text></g><g><title>misc_checking_2 (2,580,338 samples, 0.43%)</title><rect x="21.1764%" y="181" width="0.4331%" height="15" fill="rgb(214,148,48)"/><text x="21.4264%" y="191.50"></text></g><g><title>match_checking (1,520,966 samples, 0.26%)</title><rect x="21.3542%" y="165" width="0.2553%" height="15" fill="rgb(232,36,49)"/><text x="21.6042%" y="175.50"></text></g><g><title>check_match (1,437,355 samples, 0.24%)</title><rect x="21.3682%" y="149" width="0.2412%" height="15" fill="rgb(209,103,24)"/><text x="21.6182%" y="159.50"></text></g><g><title>death_checking (1,246,453 samples, 0.21%)</title><rect x="21.7088%" y="165" width="0.2092%" height="15" fill="rgb(229,88,8)"/><text x="21.9588%" y="175.50"></text></g><g><title>param_env (879,430 samples, 0.15%)</title><rect x="22.2675%" y="133" width="0.1476%" height="15" fill="rgb(213,181,19)"/><text x="22.5175%" y="143.50"></text></g><g><title>crate_lints (4,059,313 samples, 0.68%)</title><rect x="21.9184%" y="149" width="0.6813%" height="15" fill="rgb(254,191,54)"/><text x="22.1684%" y="159.50"></text></g><g><title>type_of (1,089,089 samples, 0.18%)</title><rect x="22.4169%" y="133" width="0.1828%" height="15" fill="rgb(241,83,37)"/><text x="22.6669%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (857,867 samples, 0.14%)</title><rect x="22.4557%" y="117" width="0.1440%" height="15" fill="rgb(233,36,39)"/><text x="22.7057%" y="127.50"></text></g><g><title>lint_checking (4,936,742 samples, 0.83%)</title><rect x="21.9180%" y="165" width="0.8286%" height="15" fill="rgb(226,3,54)"/><text x="22.1680%" y="175.50"></text></g><g><title>module_lints (875,419 samples, 0.15%)</title><rect x="22.5997%" y="149" width="0.1469%" height="15" fill="rgb(245,192,40)"/><text x="22.8497%" y="159.50"></text></g><g><title>lint_mod (861,649 samples, 0.14%)</title><rect x="22.6020%" y="133" width="0.1446%" height="15" fill="rgb(238,167,29)"/><text x="22.8520%" y="143.50"></text></g><g><title>privacy_access_levels (1,175,442 samples, 0.20%)</title><rect x="22.7466%" y="165" width="0.1973%" height="15" fill="rgb(232,182,51)"/><text x="22.9966%" y="175.50"></text></g><g><title>privacy_checking_modules (2,112,192 samples, 0.35%)</title><rect x="22.9439%" y="165" width="0.3545%" height="15" fill="rgb(231,60,39)"/><text x="23.1939%" y="175.50"></text></g><g><title>check_mod_privacy (2,099,882 samples, 0.35%)</title><rect x="22.9459%" y="149" width="0.3524%" height="15" fill="rgb(208,69,12)"/><text x="23.1959%" y="159.50"></text></g><g><title>misc_checking_3 (10,092,736 samples, 1.69%)</title><rect x="21.6095%" y="181" width="1.6939%" height="15" fill="rgb(235,93,37)"/><text x="21.8595%" y="191.50"></text></g><g><title>impl_parent (3,122,689 samples, 0.52%)</title><rect x="24.3486%" y="117" width="0.5241%" height="15" fill="rgb(213,116,39)"/><text x="24.5986%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,723,434 samples, 0.29%)</title><rect x="24.5834%" y="101" width="0.2893%" height="15" fill="rgb(222,207,29)"/><text x="24.8334%" y="111.50"></text></g><g><title>impl_trait_ref (6,002,207 samples, 1.01%)</title><rect x="24.8730%" y="117" width="1.0074%" height="15" fill="rgb(206,96,30)"/><text x="25.1230%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,804,184 samples, 0.81%)</title><rect x="25.0741%" y="101" width="0.8063%" height="15" fill="rgb(218,138,4)"/><text x="25.3241%" y="111.50"></text></g><g><title>trait_impls_of (1,047,491 samples, 0.18%)</title><rect x="25.9301%" y="117" width="0.1758%" height="15" fill="rgb(250,191,14)"/><text x="26.1801%" y="127.50"></text></g><g><title>coherent_trait (19,820,301 samples, 3.33%)</title><rect x="23.3365%" y="149" width="3.3266%" height="15" fill="rgb(239,60,40)"/><text x="23.5865%" y="159.50">coh..</text></g><g><title>specialization_graph_of (19,255,905 samples, 3.23%)</title><rect x="23.4312%" y="133" width="3.2318%" height="15" fill="rgb(206,27,48)"/><text x="23.6812%" y="143.50">spe..</text></g><g><title>visible_parent_map (3,303,815 samples, 0.55%)</title><rect x="26.1085%" y="117" width="0.5545%" height="15" fill="rgb(225,35,8)"/><text x="26.3585%" y="127.50"></text></g><g><title>module_children (2,991,833 samples, 0.50%)</title><rect x="26.1609%" y="101" width="0.5021%" height="15" fill="rgb(250,213,24)"/><text x="26.4109%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (2,931,032 samples, 0.49%)</title><rect x="26.1711%" y="85" width="0.4919%" height="15" fill="rgb(247,123,22)"/><text x="26.4211%" y="95.50"></text></g><g><title>coherence_checking (19,988,813 samples, 3.35%)</title><rect x="23.3321%" y="165" width="3.3549%" height="15" fill="rgb(231,138,38)"/><text x="23.5821%" y="175.50">coh..</text></g><g><title>associated_item (739,311 samples, 0.12%)</title><rect x="33.4177%" y="101" width="0.1241%" height="15" fill="rgb(231,145,46)"/><text x="33.6677%" y="111.50"></text></g><g><title>associated_items (1,001,693 samples, 0.17%)</title><rect x="33.3814%" y="117" width="0.1681%" height="15" fill="rgb(251,118,11)"/><text x="33.6314%" y="127.50"></text></g><g><title>dropck_outlives (1,186,295 samples, 0.20%)</title><rect x="33.5734%" y="117" width="0.1991%" height="15" fill="rgb(217,147,25)"/><text x="33.8234%" y="127.50"></text></g><g><title>adt_sized_constraint (762,068 samples, 0.13%)</title><rect x="34.2284%" y="101" width="0.1279%" height="15" fill="rgb(247,81,37)"/><text x="34.4784%" y="111.50"></text></g><g><title>adt_def (754,938 samples, 0.13%)</title><rect x="34.2296%" y="85" width="0.1267%" height="15" fill="rgb(209,12,38)"/><text x="34.4796%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (753,668 samples, 0.13%)</title><rect x="34.2298%" y="69" width="0.1265%" height="15" fill="rgb(227,1,9)"/><text x="34.4798%" y="79.50"></text></g><g><title>item_attrs (740,738 samples, 0.12%)</title><rect x="34.2320%" y="53" width="0.1243%" height="15" fill="rgb(248,47,43)"/><text x="34.4820%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (739,268 samples, 0.12%)</title><rect x="34.2323%" y="37" width="0.1241%" height="15" fill="rgb(221,10,30)"/><text x="34.4823%" y="47.50"></text></g><g><title>mir_for_ctfe (857,490 samples, 0.14%)</title><rect x="34.4852%" y="53" width="0.1439%" height="15" fill="rgb(210,229,1)"/><text x="34.7352%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (848,879 samples, 0.14%)</title><rect x="34.4867%" y="37" width="0.1425%" height="15" fill="rgb(222,148,37)"/><text x="34.7367%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,651,100 samples, 0.28%)</title><rect x="34.3567%" y="101" width="0.2771%" height="15" fill="rgb(234,67,33)"/><text x="34.6067%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,625,820 samples, 0.27%)</title><rect x="34.3610%" y="85" width="0.2729%" height="15" fill="rgb(247,98,35)"/><text x="34.6110%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,586,859 samples, 0.27%)</title><rect x="34.3675%" y="69" width="0.2663%" height="15" fill="rgb(247,138,52)"/><text x="34.6175%" y="79.50"></text></g><g><title>evaluate_obligation (5,980,777 samples, 1.00%)</title><rect x="33.7725%" y="117" width="1.0038%" height="15" fill="rgb(213,79,30)"/><text x="34.0225%" y="127.50"></text></g><g><title>method_autoderef_steps (1,176,230 samples, 0.20%)</title><rect x="34.9494%" y="117" width="0.1974%" height="15" fill="rgb(246,177,23)"/><text x="35.1994%" y="127.50"></text></g><g><title>evaluate_obligation (1,018,596 samples, 0.17%)</title><rect x="36.4563%" y="101" width="0.1710%" height="15" fill="rgb(230,62,27)"/><text x="36.7063%" y="111.50"></text></g><g><title>typeck (8,988,426 samples, 1.51%)</title><rect x="35.2789%" y="117" width="1.5086%" height="15" fill="rgb(216,154,8)"/><text x="35.5289%" y="127.50"></text></g><g><title>item_bodies_checking (60,177,009 samples, 10.10%)</title><rect x="26.7049%" y="165" width="10.0999%" height="15" fill="rgb(244,35,45)"/><text x="26.9549%" y="175.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (60,174,539 samples, 10.10%)</title><rect x="26.7053%" y="149" width="10.0995%" height="15" fill="rgb(251,115,12)"/><text x="26.9553%" y="159.50">typeck_item_bod..</text></g><g><title>typeck (59,967,008 samples, 10.06%)</title><rect x="26.7401%" y="133" width="10.0647%" height="15" fill="rgb(240,54,50)"/><text x="26.9901%" y="143.50">typeck</text></g><g><title>item_types_checking (5,412,327 samples, 0.91%)</title><rect x="36.8048%" y="165" width="0.9084%" height="15" fill="rgb(233,84,52)"/><text x="37.0548%" y="175.50"></text></g><g><title>check_mod_item_types (5,397,597 samples, 0.91%)</title><rect x="36.8072%" y="149" width="0.9059%" height="15" fill="rgb(207,117,47)"/><text x="37.0572%" y="159.50"></text></g><g><title>typeck (819,047 samples, 0.14%)</title><rect x="37.5757%" y="133" width="0.1375%" height="15" fill="rgb(249,43,39)"/><text x="37.8257%" y="143.50"></text></g><g><title>fn_sig (668,708 samples, 0.11%)</title><rect x="37.8366%" y="133" width="0.1122%" height="15" fill="rgb(209,38,44)"/><text x="38.0866%" y="143.50"></text></g><g><title>generics_of (934,394 samples, 0.16%)</title><rect x="37.9489%" y="133" width="0.1568%" height="15" fill="rgb(236,212,23)"/><text x="38.1989%" y="143.50"></text></g><g><title>late_bound_vars_map (700,198 samples, 0.12%)</title><rect x="38.3480%" y="85" width="0.1175%" height="15" fill="rgb(242,79,21)"/><text x="38.5980%" y="95.50"></text></g><g><title>resolve_lifetimes (647,818 samples, 0.11%)</title><rect x="38.3568%" y="69" width="0.1087%" height="15" fill="rgb(211,96,35)"/><text x="38.6068%" y="79.50"></text></g><g><title>explicit_predicates_of (1,727,678 samples, 0.29%)</title><rect x="38.2088%" y="101" width="0.2900%" height="15" fill="rgb(253,215,40)"/><text x="38.4588%" y="111.50"></text></g><g><title>predicates_of (2,836,649 samples, 0.48%)</title><rect x="38.1391%" y="133" width="0.4761%" height="15" fill="rgb(211,81,21)"/><text x="38.3891%" y="143.50"></text></g><g><title>predicates_defined_on (2,670,068 samples, 0.45%)</title><rect x="38.1671%" y="117" width="0.4481%" height="15" fill="rgb(208,190,38)"/><text x="38.4171%" y="127.50"></text></g><g><title>inferred_outlives_of (694,077 samples, 0.12%)</title><rect x="38.4987%" y="101" width="0.1165%" height="15" fill="rgb(235,213,38)"/><text x="38.7487%" y="111.50"></text></g><g><title>inferred_outlives_crate (642,587 samples, 0.11%)</title><rect x="38.5074%" y="85" width="0.1078%" height="15" fill="rgb(237,122,38)"/><text x="38.7574%" y="95.50"></text></g><g><title>type_collecting (5,755,641 samples, 0.97%)</title><rect x="37.7144%" y="165" width="0.9660%" height="15" fill="rgb(244,218,35)"/><text x="37.9644%" y="175.50"></text></g><g><title>collect_mod_item_types (5,738,151 samples, 0.96%)</title><rect x="37.7174%" y="149" width="0.9631%" height="15" fill="rgb(240,68,47)"/><text x="37.9674%" y="159.50"></text></g><g><title>evaluate_obligation (1,496,761 samples, 0.25%)</title><rect x="39.8677%" y="133" width="0.2512%" height="15" fill="rgb(210,16,53)"/><text x="40.1177%" y="143.50"></text></g><g><title>implied_outlives_bounds (944,879 samples, 0.16%)</title><rect x="40.1240%" y="133" width="0.1586%" height="15" fill="rgb(235,124,12)"/><text x="40.3740%" y="143.50"></text></g><g><title>param_env (1,137,337 samples, 0.19%)</title><rect x="40.2826%" y="133" width="0.1909%" height="15" fill="rgb(224,169,11)"/><text x="40.5326%" y="143.50"></text></g><g><title>region_scope_tree (870,507 samples, 0.15%)</title><rect x="40.4822%" y="133" width="0.1461%" height="15" fill="rgb(250,166,2)"/><text x="40.7322%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,038,814 samples, 1.85%)</title><rect x="38.7801%" y="149" width="1.8527%" height="15" fill="rgb(242,216,29)"/><text x="39.0301%" y="159.50">c..</text></g><g><title>eval_to_const_value_raw (938,659 samples, 0.16%)</title><rect x="41.7707%" y="133" width="0.1575%" height="15" fill="rgb(230,116,27)"/><text x="42.0207%" y="143.50"></text></g><g><title>eval_to_const_value_raw (926,449 samples, 0.16%)</title><rect x="41.7728%" y="117" width="0.1555%" height="15" fill="rgb(228,99,48)"/><text x="42.0228%" y="127.50"></text></g><g><title>eval_to_allocation_raw (925,139 samples, 0.16%)</title><rect x="41.7730%" y="101" width="0.1553%" height="15" fill="rgb(253,11,6)"/><text x="42.0230%" y="111.50"></text></g><g><title>param_env (1,045,996 samples, 0.18%)</title><rect x="42.0989%" y="133" width="0.1756%" height="15" fill="rgb(247,143,39)"/><text x="42.3489%" y="143.50"></text></g><g><title>check_item_well_formed (10,371,854 samples, 1.74%)</title><rect x="40.6328%" y="149" width="1.7408%" height="15" fill="rgb(236,97,10)"/><text x="40.8828%" y="159.50"></text></g><g><title>analysis (187,375,112 samples, 31.45%)</title><rect x="11.1079%" y="197" width="31.4484%" height="15" fill="rgb(233,208,19)"/><text x="11.3579%" y="207.50">analysis</text></g><g><title>type_check_crate (114,712,359 samples, 19.25%)</title><rect x="23.3034%" y="181" width="19.2529%" height="15" fill="rgb(216,164,2)"/><text x="23.5534%" y="191.50">type_check_crate</text></g><g><title>wf_checking (23,080,375 samples, 3.87%)</title><rect x="38.6826%" y="165" width="3.8737%" height="15" fill="rgb(220,129,5)"/><text x="38.9326%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (1,089,212 samples, 0.18%)</title><rect x="42.3736%" y="149" width="0.1828%" height="15" fill="rgb(242,17,10)"/><text x="42.6236%" y="159.50"></text></g><g><title>layout_of (969,330 samples, 0.16%)</title><rect x="46.2018%" y="149" width="0.1627%" height="15" fill="rgb(242,107,0)"/><text x="46.4518%" y="159.50"></text></g><g><title>param_env (1,896,019 samples, 0.32%)</title><rect x="46.3645%" y="149" width="0.3182%" height="15" fill="rgb(251,28,31)"/><text x="46.6145%" y="159.50"></text></g><g><title>predicates_of (649,384 samples, 0.11%)</title><rect x="46.5737%" y="133" width="0.1090%" height="15" fill="rgb(233,223,10)"/><text x="46.8237%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,408,509 samples, 1.08%)</title><rect x="45.6540%" y="165" width="1.0756%" height="15" fill="rgb(215,21,27)"/><text x="45.9040%" y="175.50"></text></g><g><title>codegen_module (23,382,716 samples, 3.92%)</title><rect x="42.9688%" y="181" width="3.9245%" height="15" fill="rgb(232,23,21)"/><text x="43.2188%" y="191.50">code..</text></g><g><title>codegen_fn_attrs (748,738 samples, 0.13%)</title><rect x="47.0742%" y="133" width="0.1257%" height="15" fill="rgb(244,5,23)"/><text x="47.3242%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (966,460 samples, 0.16%)</title><rect x="47.5130%" y="117" width="0.1622%" height="15" fill="rgb(226,81,46)"/><text x="47.7630%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,053,921 samples, 0.18%)</title><rect x="47.6752%" y="117" width="0.1769%" height="15" fill="rgb(247,70,30)"/><text x="47.9252%" y="127.50"></text></g><g><title>optimized_mir (3,675,278 samples, 0.62%)</title><rect x="47.2828%" y="133" width="0.6168%" height="15" fill="rgb(212,68,19)"/><text x="47.5328%" y="143.50"></text></g><g><title>resolve_instance (1,660,419 samples, 0.28%)</title><rect x="47.8997%" y="133" width="0.2787%" height="15" fill="rgb(240,187,13)"/><text x="48.1497%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (8,213,468 samples, 1.38%)</title><rect x="46.9013%" y="149" width="1.3785%" height="15" fill="rgb(223,113,26)"/><text x="47.1513%" y="159.50"></text></g><g><title>monomorphization_collector (8,290,569 samples, 1.39%)</title><rect x="46.9010%" y="165" width="1.3915%" height="15" fill="rgb(206,192,2)"/><text x="47.1510%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (807,049 samples, 0.14%)</title><rect x="48.2929%" y="149" width="0.1355%" height="15" fill="rgb(241,108,4)"/><text x="48.5429%" y="159.50"></text></g><g><title>symbol_name (717,508 samples, 0.12%)</title><rect x="48.3080%" y="133" width="0.1204%" height="15" fill="rgb(247,173,49)"/><text x="48.5580%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (9,464,211 samples, 1.59%)</title><rect x="46.8943%" y="181" width="1.5884%" height="15" fill="rgb(224,114,35)"/><text x="47.1443%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,133,872 samples, 0.19%)</title><rect x="48.2924%" y="165" width="0.1903%" height="15" fill="rgb(245,159,27)"/><text x="48.5424%" y="175.50"></text></g><g><title>codegen_crate (35,360,956 samples, 5.93%)</title><rect x="42.5579%" y="197" width="5.9349%" height="15" fill="rgb(245,172,44)"/><text x="42.8079%" y="207.50">codegen_..</text></g><g><title>codegen_module_optimize (91,668,194 samples, 15.39%)</title><rect x="48.4928%" y="197" width="15.3853%" height="15" fill="rgb(236,23,11)"/><text x="48.7428%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (85,538,720 samples, 14.36%)</title><rect x="49.5215%" y="181" width="14.3565%" height="15" fill="rgb(205,117,38)"/><text x="49.7715%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (26,930,228 samples, 4.52%)</title><rect x="64.8558%" y="181" width="4.5199%" height="15" fill="rgb(237,72,25)"/><text x="65.1058%" y="191.50">LLVM_..</text></g><g><title>LLVM_module_codegen (51,153,382 samples, 8.59%)</title><rect x="69.3757%" y="181" width="8.5854%" height="15" fill="rgb(244,70,9)"/><text x="69.6257%" y="191.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (50,265,372 samples, 8.44%)</title><rect x="69.5247%" y="165" width="8.4364%" height="15" fill="rgb(217,125,39)"/><text x="69.7747%" y="175.50">LLVM_module_..</text></g><g><title>LLVM_thin_lto_import (2,254,974 samples, 0.38%)</title><rect x="77.9611%" y="181" width="0.3785%" height="15" fill="rgb(235,36,10)"/><text x="78.2111%" y="191.50"></text></g><g><title>codegen_module_perform_lto (86,401,072 samples, 14.50%)</title><rect x="63.8780%" y="197" width="14.5013%" height="15" fill="rgb(251,123,47)"/><text x="64.1280%" y="207.50">codegen_module_perform..</text></g><g><title>metadata_register_crate (2,285,404 samples, 0.38%)</title><rect x="83.8876%" y="149" width="0.3836%" height="15" fill="rgb(221,13,13)"/><text x="84.1376%" y="159.50"></text></g><g><title>metadata_register_crate (832,799 samples, 0.14%)</title><rect x="84.1314%" y="133" width="0.1398%" height="15" fill="rgb(238,131,9)"/><text x="84.3814%" y="143.50"></text></g><g><title>macro_expand_crate (35,197,095 samples, 5.91%)</title><rect x="78.4904%" y="181" width="5.9074%" height="15" fill="rgb(211,50,8)"/><text x="78.7404%" y="191.50">macro_ex..</text></g><g><title>expand_crate (35,180,264 samples, 5.90%)</title><rect x="78.4932%" y="165" width="5.9045%" height="15" fill="rgb(245,182,24)"/><text x="78.7432%" y="175.50">expand_c..</text></g><g><title>pre_AST_expansion_lint_checks (754,226 samples, 0.13%)</title><rect x="84.2712%" y="149" width="0.1266%" height="15" fill="rgb(242,14,37)"/><text x="84.5212%" y="159.50"></text></g><g><title>late_resolve_crate (3,371,906 samples, 0.57%)</title><rect x="84.5148%" y="165" width="0.5659%" height="15" fill="rgb(246,228,12)"/><text x="84.7648%" y="175.50"></text></g><g><title>configure_and_expand (40,217,348 samples, 6.75%)</title><rect x="78.3793%" y="197" width="6.7499%" height="15" fill="rgb(213,55,15)"/><text x="78.6293%" y="207.50">configure..</text></g><g><title>resolve_crate (3,985,252 samples, 0.67%)</title><rect x="84.4604%" y="181" width="0.6689%" height="15" fill="rgb(209,9,3)"/><text x="84.7104%" y="191.50"></text></g><g><title>early_lint_checks (864,219 samples, 0.15%)</title><rect x="85.2014%" y="197" width="0.1450%" height="15" fill="rgb(230,59,30)"/><text x="85.4514%" y="207.50"></text></g><g><title>free_global_ctxt (6,700,712 samples, 1.12%)</title><rect x="85.3465%" y="197" width="1.1246%" height="15" fill="rgb(209,121,21)"/><text x="85.5965%" y="207.50"></text></g><g><title>is_sized_raw (877,146 samples, 0.15%)</title><rect x="88.5635%" y="149" width="0.1472%" height="15" fill="rgb(220,109,13)"/><text x="88.8135%" y="159.50"></text></g><g><title>evaluate_obligation (696,695 samples, 0.12%)</title><rect x="88.5938%" y="133" width="0.1169%" height="15" fill="rgb(232,18,1)"/><text x="88.8438%" y="143.50"></text></g><g><title>layout_of (775,615 samples, 0.13%)</title><rect x="88.7107%" y="149" width="0.1302%" height="15" fill="rgb(215,41,42)"/><text x="88.9607%" y="159.50"></text></g><g><title>layout_of (2,909,989 samples, 0.49%)</title><rect x="88.4083%" y="165" width="0.4884%" height="15" fill="rgb(224,123,36)"/><text x="88.6583%" y="175.50"></text></g><g><title>is_copy_raw (756,297 samples, 0.13%)</title><rect x="89.9802%" y="133" width="0.1269%" height="15" fill="rgb(240,125,3)"/><text x="90.2302%" y="143.50"></text></g><g><title>needs_drop_raw (935,337 samples, 0.16%)</title><rect x="89.9603%" y="149" width="0.1570%" height="15" fill="rgb(205,98,50)"/><text x="90.2103%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,451,677 samples, 1.25%)</title><rect x="88.8967%" y="165" width="1.2507%" height="15" fill="rgb(205,185,37)"/><text x="89.1467%" y="175.50"></text></g><g><title>optimized_mir (16,962,366 samples, 2.85%)</title><rect x="87.3525%" y="181" width="2.8469%" height="15" fill="rgb(238,207,15)"/><text x="87.6025%" y="191.50">op..</text></g><g><title>generate_crate_metadata (22,429,019 samples, 3.76%)</title><rect x="86.4711%" y="197" width="3.7644%" height="15" fill="rgb(213,199,42)"/><text x="86.7211%" y="207.50">gene..</text></g><g><title>hir_lowering (7,395,819 samples, 1.24%)</title><rect x="90.2355%" y="197" width="1.2413%" height="15" fill="rgb(235,201,11)"/><text x="90.4855%" y="207.50"></text></g><g><title>finish_ongoing_codegen (38,643,881 samples, 6.49%)</title><rect x="91.4811%" y="181" width="6.4859%" height="15" fill="rgb(207,46,11)"/><text x="91.7311%" y="191.50">finish_o..</text></g><g><title>link_crate (1,770,149 samples, 0.30%)</title><rect x="97.9669%" y="181" width="0.2971%" height="15" fill="rgb(241,35,35)"/><text x="98.2169%" y="191.50"></text></g><g><title>link_binary (1,711,358 samples, 0.29%)</title><rect x="97.9768%" y="165" width="0.2872%" height="15" fill="rgb(243,32,47)"/><text x="98.2268%" y="175.50"></text></g><g><title>link_rlib (1,232,803 samples, 0.21%)</title><rect x="98.0571%" y="149" width="0.2069%" height="15" fill="rgb(247,202,23)"/><text x="98.3071%" y="159.50"></text></g><g><title>link (40,449,050 samples, 6.79%)</title><rect x="91.4768%" y="197" width="6.7888%" height="15" fill="rgb(219,102,11)"/><text x="91.7268%" y="207.50">link</text></g><g><title>parse_crate (5,950,483 samples, 1.00%)</title><rect x="98.2657%" y="197" width="0.9987%" height="15" fill="rgb(243,110,44)"/><text x="98.5157%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (3,512,548 samples, 0.59%)</title><rect x="99.3031%" y="197" width="0.5895%" height="15" fill="rgb(222,74,54)"/><text x="99.5531%" y="207.50"></text></g><g><title>all (595,817,179 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (595,817,179 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>