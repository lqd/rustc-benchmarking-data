<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,515,376 samples, 6.51%)</title><rect x="0.3541%" y="181" width="6.5139%" height="15" fill="rgb(227,0,7)"/><text x="0.6041%" y="191.50">LLVM_pass..</text></g><g><title>codegen_generate_lto_work (254,672 samples, 0.10%)</title><rect x="6.7675%" y="165" width="0.1004%" height="15" fill="rgb(217,0,24)"/><text x="7.0175%" y="175.50"></text></g><g><title>implied_outlives_bounds (542,336 samples, 0.21%)</title><rect x="15.2297%" y="133" width="0.2139%" height="15" fill="rgb(221,193,54)"/><text x="15.4797%" y="143.50"></text></g><g><title>param_env (576,153 samples, 0.23%)</title><rect x="16.6827%" y="101" width="0.2272%" height="15" fill="rgb(248,212,6)"/><text x="16.9327%" y="111.50"></text></g><g><title>def_span (263,542 samples, 0.10%)</title><rect x="16.8060%" y="85" width="0.1039%" height="15" fill="rgb(208,68,35)"/><text x="17.0560%" y="95.50"></text></g><g><title>item_attrs (452,527 samples, 0.18%)</title><rect x="17.2747%" y="69" width="0.1785%" height="15" fill="rgb(232,128,0)"/><text x="17.5247%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (439,136 samples, 0.17%)</title><rect x="17.2800%" y="53" width="0.1732%" height="15" fill="rgb(207,160,47)"/><text x="17.5300%" y="63.50"></text></g><g><title>codegen_fn_attrs (610,308 samples, 0.24%)</title><rect x="17.2187%" y="85" width="0.2407%" height="15" fill="rgb(228,23,34)"/><text x="17.4687%" y="95.50"></text></g><g><title>is_copy_raw (260,504 samples, 0.10%)</title><rect x="19.1635%" y="69" width="0.1027%" height="15" fill="rgb(218,30,26)"/><text x="19.4135%" y="79.50"></text></g><g><title>needs_drop_raw (1,365,948 samples, 0.54%)</title><rect x="19.2662%" y="69" width="0.5387%" height="15" fill="rgb(220,122,19)"/><text x="19.5162%" y="79.50"></text></g><g><title>is_copy_raw (1,123,275 samples, 0.44%)</title><rect x="19.3620%" y="53" width="0.4430%" height="15" fill="rgb(250,228,42)"/><text x="19.6120%" y="63.50"></text></g><g><title>evaluate_obligation (906,842 samples, 0.36%)</title><rect x="19.4473%" y="37" width="0.3577%" height="15" fill="rgb(240,193,28)"/><text x="19.6973%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (257,423 samples, 0.10%)</title><rect x="19.9443%" y="53" width="0.1015%" height="15" fill="rgb(216,20,37)"/><text x="20.1943%" y="63.50"></text></g><g><title>resolve_instance (721,747 samples, 0.28%)</title><rect x="19.8050%" y="69" width="0.2847%" height="15" fill="rgb(206,188,39)"/><text x="20.0550%" y="79.50"></text></g><g><title>thir_body (1,637,981 samples, 0.65%)</title><rect x="20.1149%" y="69" width="0.6460%" height="15" fill="rgb(217,207,13)"/><text x="20.3649%" y="79.50"></text></g><g><title>mir_const (11,789,239 samples, 4.65%)</title><rect x="16.1261%" y="117" width="4.6498%" height="15" fill="rgb(231,73,38)"/><text x="16.3761%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (9,801,916 samples, 3.87%)</title><rect x="16.9099%" y="101" width="3.8660%" height="15" fill="rgb(225,20,46)"/><text x="17.1599%" y="111.50">unsa..</text></g><g><title>mir_built (8,408,589 samples, 3.32%)</title><rect x="17.4595%" y="85" width="3.3165%" height="15" fill="rgb(210,31,41)"/><text x="17.7095%" y="95.50">mir..</text></g><g><title>is_freeze_raw (305,182 samples, 0.12%)</title><rect x="21.1046%" y="101" width="0.1204%" height="15" fill="rgb(221,200,47)"/><text x="21.3546%" y="111.50"></text></g><g><title>evaluate_obligation (275,821 samples, 0.11%)</title><rect x="21.1162%" y="85" width="0.1088%" height="15" fill="rgb(226,26,5)"/><text x="21.3662%" y="95.50"></text></g><g><title>needs_drop_raw (290,263 samples, 0.11%)</title><rect x="21.4628%" y="53" width="0.1145%" height="15" fill="rgb(249,33,26)"/><text x="21.7128%" y="63.50"></text></g><g><title>mir_const (999,131 samples, 0.39%)</title><rect x="21.2353%" y="101" width="0.3941%" height="15" fill="rgb(235,183,28)"/><text x="21.4853%" y="111.50"></text></g><g><title>unsafety_check_result (816,267 samples, 0.32%)</title><rect x="21.3075%" y="85" width="0.3219%" height="15" fill="rgb(221,5,38)"/><text x="21.5575%" y="95.50"></text></g><g><title>mir_built (703,187 samples, 0.28%)</title><rect x="21.3521%" y="69" width="0.2773%" height="15" fill="rgb(247,18,42)"/><text x="21.6021%" y="79.50"></text></g><g><title>mir_const_qualif (2,283,529 samples, 0.90%)</title><rect x="20.7759%" y="117" width="0.9007%" height="15" fill="rgb(241,131,45)"/><text x="21.0259%" y="127.50"></text></g><g><title>mir_promoted (15,605,082 samples, 6.15%)</title><rect x="15.5219%" y="133" width="6.1549%" height="15" fill="rgb(249,31,29)"/><text x="15.7719%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (850,272 samples, 0.34%)</title><rect x="21.6775%" y="133" width="0.3354%" height="15" fill="rgb(225,111,53)"/><text x="21.9275%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (495,423 samples, 0.20%)</title><rect x="22.0129%" y="133" width="0.1954%" height="15" fill="rgb(238,160,17)"/><text x="22.2629%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,466,521 samples, 1.37%)</title><rect x="22.2083%" y="133" width="1.3672%" height="15" fill="rgb(214,148,48)"/><text x="22.4583%" y="143.50"></text></g><g><title>MIR_borrow_checking (41,949,009 samples, 16.55%)</title><rect x="7.0331%" y="165" width="16.5453%" height="15" fill="rgb(232,36,49)"/><text x="7.2831%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (41,670,317 samples, 16.44%)</title><rect x="7.1430%" y="149" width="16.4354%" height="15" fill="rgb(209,103,24)"/><text x="7.3930%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (655,418 samples, 0.26%)</title><rect x="23.5784%" y="165" width="0.2585%" height="15" fill="rgb(229,88,8)"/><text x="23.8284%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (518,325 samples, 0.20%)</title><rect x="23.6325%" y="149" width="0.2044%" height="15" fill="rgb(213,181,19)"/><text x="23.8825%" y="159.50"></text></g><g><title>hir_module_items (317,043 samples, 0.13%)</title><rect x="23.8369%" y="165" width="0.1250%" height="15" fill="rgb(254,191,54)"/><text x="24.0869%" y="175.50"></text></g><g><title>should_inherit_track_caller (352,904 samples, 0.14%)</title><rect x="24.2008%" y="117" width="0.1392%" height="15" fill="rgb(241,83,37)"/><text x="24.4508%" y="127.50"></text></g><g><title>codegen_fn_attrs (592,296 samples, 0.23%)</title><rect x="24.1143%" y="133" width="0.2336%" height="15" fill="rgb(233,36,39)"/><text x="24.3643%" y="143.50"></text></g><g><title>check_mod_attrs (944,370 samples, 0.37%)</title><rect x="23.9754%" y="149" width="0.3725%" height="15" fill="rgb(226,3,54)"/><text x="24.2254%" y="159.50"></text></g><g><title>lookup_deprecation_entry (278,303 samples, 0.11%)</title><rect x="24.5988%" y="133" width="0.1098%" height="15" fill="rgb(245,192,40)"/><text x="24.8488%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (659,838 samples, 0.26%)</title><rect x="24.4861%" y="149" width="0.2602%" height="15" fill="rgb(238,167,29)"/><text x="24.7361%" y="159.50"></text></g><g><title>misc_checking_1 (2,072,473 samples, 0.82%)</title><rect x="23.9621%" y="165" width="0.8174%" height="15" fill="rgb(232,182,51)"/><text x="24.2121%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (758,158 samples, 0.30%)</title><rect x="24.7802%" y="149" width="0.2990%" height="15" fill="rgb(231,60,39)"/><text x="25.0302%" y="159.50"></text></g><g><title>check_mod_liveness (582,298 samples, 0.23%)</title><rect x="24.8495%" y="133" width="0.2297%" height="15" fill="rgb(208,69,12)"/><text x="25.0995%" y="143.50"></text></g><g><title>misc_checking_2 (1,515,277 samples, 0.60%)</title><rect x="24.7795%" y="165" width="0.5976%" height="15" fill="rgb(235,93,37)"/><text x="25.0295%" y="175.50"></text></g><g><title>match_checking (755,479 samples, 0.30%)</title><rect x="25.0792%" y="149" width="0.2980%" height="15" fill="rgb(213,116,39)"/><text x="25.3292%" y="159.50"></text></g><g><title>check_match (690,699 samples, 0.27%)</title><rect x="25.1048%" y="133" width="0.2724%" height="15" fill="rgb(222,207,29)"/><text x="25.3548%" y="143.50"></text></g><g><title>check_private_in_public (418,405 samples, 0.17%)</title><rect x="25.3813%" y="149" width="0.1650%" height="15" fill="rgb(206,96,30)"/><text x="25.6313%" y="159.50"></text></g><g><title>death_checking (811,678 samples, 0.32%)</title><rect x="25.5463%" y="149" width="0.3201%" height="15" fill="rgb(218,138,4)"/><text x="25.7963%" y="159.50"></text></g><g><title>param_env (604,537 samples, 0.24%)</title><rect x="26.1834%" y="117" width="0.2384%" height="15" fill="rgb(250,191,14)"/><text x="26.4334%" y="127.50"></text></g><g><title>predicates_of (284,584 samples, 0.11%)</title><rect x="26.3095%" y="101" width="0.1122%" height="15" fill="rgb(239,60,40)"/><text x="26.5595%" y="111.50"></text></g><g><title>crate_lints (1,778,589 samples, 0.70%)</title><rect x="25.8670%" y="133" width="0.7015%" height="15" fill="rgb(206,27,48)"/><text x="26.1170%" y="143.50"></text></g><g><title>type_of (363,523 samples, 0.14%)</title><rect x="26.4251%" y="117" width="0.1434%" height="15" fill="rgb(225,35,8)"/><text x="26.6751%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (282,693 samples, 0.11%)</title><rect x="26.4570%" y="101" width="0.1115%" height="15" fill="rgb(250,213,24)"/><text x="26.7070%" y="111.50"></text></g><g><title>lint_checking (2,443,627 samples, 0.96%)</title><rect x="25.8664%" y="149" width="0.9638%" height="15" fill="rgb(247,123,22)"/><text x="26.1164%" y="159.50"></text></g><g><title>module_lints (663,578 samples, 0.26%)</title><rect x="26.5685%" y="133" width="0.2617%" height="15" fill="rgb(231,138,38)"/><text x="26.8185%" y="143.50"></text></g><g><title>lint_mod (654,278 samples, 0.26%)</title><rect x="26.5722%" y="117" width="0.2581%" height="15" fill="rgb(231,145,46)"/><text x="26.8222%" y="127.50"></text></g><g><title>privacy_access_levels (554,976 samples, 0.22%)</title><rect x="26.8302%" y="149" width="0.2189%" height="15" fill="rgb(251,118,11)"/><text x="27.0802%" y="159.50"></text></g><g><title>privacy_checking_modules (1,286,314 samples, 0.51%)</title><rect x="27.0491%" y="149" width="0.5073%" height="15" fill="rgb(217,147,25)"/><text x="27.2991%" y="159.50"></text></g><g><title>check_mod_privacy (1,280,083 samples, 0.50%)</title><rect x="27.0516%" y="133" width="0.5049%" height="15" fill="rgb(247,81,37)"/><text x="27.3016%" y="143.50"></text></g><g><title>misc_checking_3 (5,554,671 samples, 2.19%)</title><rect x="25.3772%" y="165" width="2.1908%" height="15" fill="rgb(209,12,38)"/><text x="25.6272%" y="175.50">m..</text></g><g><title>impl_parent (819,547 samples, 0.32%)</title><rect x="28.3123%" y="101" width="0.3232%" height="15" fill="rgb(227,1,9)"/><text x="28.5623%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (480,883 samples, 0.19%)</title><rect x="28.4458%" y="85" width="0.1897%" height="15" fill="rgb(248,47,43)"/><text x="28.6958%" y="95.50"></text></g><g><title>impl_trait_ref (2,051,993 samples, 0.81%)</title><rect x="28.6363%" y="101" width="0.8093%" height="15" fill="rgb(221,10,30)"/><text x="28.8863%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,470,985 samples, 0.58%)</title><rect x="28.8655%" y="85" width="0.5802%" height="15" fill="rgb(210,229,1)"/><text x="29.1155%" y="95.50"></text></g><g><title>trait_impls_of (298,593 samples, 0.12%)</title><rect x="29.4599%" y="101" width="0.1178%" height="15" fill="rgb(222,148,37)"/><text x="29.7099%" y="111.50"></text></g><g><title>coherent_trait (4,950,766 samples, 1.95%)</title><rect x="27.6255%" y="133" width="1.9527%" height="15" fill="rgb(234,67,33)"/><text x="27.8755%" y="143.50">c..</text></g><g><title>specialization_graph_of (4,841,945 samples, 1.91%)</title><rect x="27.6684%" y="117" width="1.9097%" height="15" fill="rgb(247,98,35)"/><text x="27.9184%" y="127.50">s..</text></g><g><title>coherence_checking (5,070,657 samples, 2.00%)</title><rect x="27.6176%" y="149" width="1.9999%" height="15" fill="rgb(247,138,52)"/><text x="27.8676%" y="159.50">c..</text></g><g><title>associated_item (458,585 samples, 0.18%)</title><rect x="39.4952%" y="85" width="0.1809%" height="15" fill="rgb(213,79,30)"/><text x="39.7452%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (366,823 samples, 0.14%)</title><rect x="39.5314%" y="69" width="0.1447%" height="15" fill="rgb(246,177,23)"/><text x="39.7814%" y="79.50"></text></g><g><title>associated_items (657,987 samples, 0.26%)</title><rect x="39.4318%" y="101" width="0.2595%" height="15" fill="rgb(230,62,27)"/><text x="39.6818%" y="111.50"></text></g><g><title>dropck_outlives (508,622 samples, 0.20%)</title><rect x="39.7279%" y="101" width="0.2006%" height="15" fill="rgb(216,154,8)"/><text x="39.9779%" y="111.50"></text></g><g><title>evaluate_obligation (1,698,431 samples, 0.67%)</title><rect x="39.9285%" y="101" width="0.6699%" height="15" fill="rgb(244,35,45)"/><text x="40.1785%" y="111.50"></text></g><g><title>item_attrs (253,811 samples, 0.10%)</title><rect x="40.7314%" y="101" width="0.1001%" height="15" fill="rgb(251,115,12)"/><text x="40.9814%" y="111.50"></text></g><g><title>method_autoderef_steps (610,836 samples, 0.24%)</title><rect x="40.8636%" y="101" width="0.2409%" height="15" fill="rgb(240,54,50)"/><text x="41.1136%" y="111.50"></text></g><g><title>evaluate_obligation (310,532 samples, 0.12%)</title><rect x="40.9820%" y="85" width="0.1225%" height="15" fill="rgb(233,84,52)"/><text x="41.2320%" y="95.50"></text></g><g><title>predicates_of (292,301 samples, 0.12%)</title><rect x="41.1847%" y="101" width="0.1153%" height="15" fill="rgb(207,117,47)"/><text x="41.4347%" y="111.50"></text></g><g><title>evaluate_obligation (683,878 samples, 0.27%)</title><rect x="44.4148%" y="85" width="0.2697%" height="15" fill="rgb(249,43,39)"/><text x="44.6648%" y="95.50"></text></g><g><title>method_autoderef_steps (271,811 samples, 0.11%)</title><rect x="44.8384%" y="85" width="0.1072%" height="15" fill="rgb(209,38,44)"/><text x="45.0884%" y="95.50"></text></g><g><title>typeck (9,330,164 samples, 3.68%)</title><rect x="41.3265%" y="101" width="3.6799%" height="15" fill="rgb(236,212,23)"/><text x="41.5765%" y="111.50">type..</text></g><g><title>item_bodies_checking (39,002,827 samples, 15.38%)</title><rect x="29.6491%" y="149" width="15.3833%" height="15" fill="rgb(242,79,21)"/><text x="29.8991%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,999,217 samples, 15.38%)</title><rect x="29.6506%" y="133" width="15.3818%" height="15" fill="rgb(211,96,35)"/><text x="29.9006%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (38,809,981 samples, 15.31%)</title><rect x="29.7252%" y="117" width="15.3072%" height="15" fill="rgb(253,215,40)"/><text x="29.9752%" y="127.50">typeck</text></g><g><title>generics_of (455,857 samples, 0.18%)</title><rect x="47.0055%" y="85" width="0.1798%" height="15" fill="rgb(211,81,21)"/><text x="47.2555%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (321,794 samples, 0.13%)</title><rect x="47.0584%" y="69" width="0.1269%" height="15" fill="rgb(208,190,38)"/><text x="47.3084%" y="79.50"></text></g><g><title>impl_trait_ref (641,896 samples, 0.25%)</title><rect x="47.2319%" y="85" width="0.2532%" height="15" fill="rgb(235,213,38)"/><text x="47.4819%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (511,994 samples, 0.20%)</title><rect x="47.2831%" y="69" width="0.2019%" height="15" fill="rgb(237,122,38)"/><text x="47.5331%" y="79.50"></text></g><g><title>predicates_of (813,565 samples, 0.32%)</title><rect x="47.4973%" y="85" width="0.3209%" height="15" fill="rgb(244,218,35)"/><text x="47.7473%" y="95.50"></text></g><g><title>predicates_defined_on (542,633 samples, 0.21%)</title><rect x="47.6041%" y="69" width="0.2140%" height="15" fill="rgb(240,68,47)"/><text x="47.8541%" y="79.50"></text></g><g><title>specializes (1,939,520 samples, 0.76%)</title><rect x="47.8181%" y="85" width="0.7650%" height="15" fill="rgb(210,16,53)"/><text x="48.0681%" y="95.50"></text></g><g><title>param_env (1,145,291 samples, 0.45%)</title><rect x="48.1314%" y="69" width="0.4517%" height="15" fill="rgb(235,124,12)"/><text x="48.3814%" y="79.50"></text></g><g><title>def_span (539,026 samples, 0.21%)</title><rect x="48.3705%" y="53" width="0.2126%" height="15" fill="rgb(224,169,11)"/><text x="48.6205%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (482,196 samples, 0.19%)</title><rect x="48.3929%" y="37" width="0.1902%" height="15" fill="rgb(250,166,2)"/><text x="48.6429%" y="47.50"></text></g><g><title>evaluate_obligation (6,026,007 samples, 2.38%)</title><rect x="46.2320%" y="101" width="2.3767%" height="15" fill="rgb(242,216,29)"/><text x="46.4820%" y="111.50">ev..</text></g><g><title>item_types_checking (9,284,523 samples, 3.66%)</title><rect x="45.0324%" y="149" width="3.6619%" height="15" fill="rgb(230,116,27)"/><text x="45.2824%" y="159.50">item..</text></g><g><title>check_mod_item_types (9,274,253 samples, 3.66%)</title><rect x="45.0365%" y="133" width="3.6579%" height="15" fill="rgb(228,99,48)"/><text x="45.2865%" y="143.50">chec..</text></g><g><title>typeck (7,206,620 samples, 2.84%)</title><rect x="45.8520%" y="117" width="2.8424%" height="15" fill="rgb(253,11,6)"/><text x="46.1020%" y="127.50">ty..</text></g><g><title>mir_borrowck (516,456 samples, 0.20%)</title><rect x="49.2104%" y="37" width="0.2037%" height="15" fill="rgb(247,143,39)"/><text x="49.4604%" y="47.50"></text></g><g><title>mir_for_ctfe (714,319 samples, 0.28%)</title><rect x="49.1330%" y="69" width="0.2817%" height="15" fill="rgb(236,97,10)"/><text x="49.3830%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (657,838 samples, 0.26%)</title><rect x="49.1553%" y="53" width="0.2595%" height="15" fill="rgb(233,208,19)"/><text x="49.4053%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,560,407 samples, 0.62%)</title><rect x="48.9327%" y="117" width="0.6154%" height="15" fill="rgb(216,164,2)"/><text x="49.1827%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,538,727 samples, 0.61%)</title><rect x="48.9412%" y="101" width="0.6069%" height="15" fill="rgb(220,129,5)"/><text x="49.1912%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,527,997 samples, 0.60%)</title><rect x="48.9455%" y="85" width="0.6027%" height="15" fill="rgb(242,17,10)"/><text x="49.1955%" y="95.50"></text></g><g><title>typeck (337,144 samples, 0.13%)</title><rect x="49.4152%" y="69" width="0.1330%" height="15" fill="rgb(242,107,0)"/><text x="49.6652%" y="79.50"></text></g><g><title>fn_sig (445,507 samples, 0.18%)</title><rect x="49.5481%" y="117" width="0.1757%" height="15" fill="rgb(251,28,31)"/><text x="49.7981%" y="127.50"></text></g><g><title>is_late_bound_map (353,534 samples, 0.14%)</title><rect x="49.8229%" y="101" width="0.1394%" height="15" fill="rgb(233,223,10)"/><text x="50.0729%" y="111.50"></text></g><g><title>resolve_lifetimes (316,493 samples, 0.12%)</title><rect x="49.8375%" y="85" width="0.1248%" height="15" fill="rgb(215,21,27)"/><text x="50.0875%" y="95.50"></text></g><g><title>generics_of (770,859 samples, 0.30%)</title><rect x="49.7239%" y="117" width="0.3040%" height="15" fill="rgb(232,23,21)"/><text x="49.9739%" y="127.50"></text></g><g><title>late_bound_vars_map (494,067 samples, 0.19%)</title><rect x="50.3983%" y="69" width="0.1949%" height="15" fill="rgb(244,5,23)"/><text x="50.6483%" y="79.50"></text></g><g><title>resolve_lifetimes (472,537 samples, 0.19%)</title><rect x="50.4068%" y="53" width="0.1864%" height="15" fill="rgb(226,81,46)"/><text x="50.6568%" y="63.50"></text></g><g><title>explicit_predicates_of (911,551 samples, 0.36%)</title><rect x="50.2432%" y="85" width="0.3595%" height="15" fill="rgb(247,70,30)"/><text x="50.4932%" y="95.50"></text></g><g><title>predicates_of (1,644,588 samples, 0.65%)</title><rect x="50.1265%" y="117" width="0.6486%" height="15" fill="rgb(212,68,19)"/><text x="50.3765%" y="127.50"></text></g><g><title>predicates_defined_on (1,529,477 samples, 0.60%)</title><rect x="50.1719%" y="101" width="0.6032%" height="15" fill="rgb(240,187,13)"/><text x="50.4219%" y="111.50"></text></g><g><title>inferred_outlives_of (436,945 samples, 0.17%)</title><rect x="50.6028%" y="85" width="0.1723%" height="15" fill="rgb(223,113,26)"/><text x="50.8528%" y="95.50"></text></g><g><title>inferred_outlives_crate (390,305 samples, 0.15%)</title><rect x="50.6212%" y="69" width="0.1539%" height="15" fill="rgb(206,192,2)"/><text x="50.8712%" y="79.50"></text></g><g><title>type_collecting (5,785,775 samples, 2.28%)</title><rect x="48.6964%" y="149" width="2.2820%" height="15" fill="rgb(241,108,4)"/><text x="48.9464%" y="159.50">t..</text></g><g><title>collect_mod_item_types (5,771,135 samples, 2.28%)</title><rect x="48.7022%" y="133" width="2.2762%" height="15" fill="rgb(247,173,49)"/><text x="48.9522%" y="143.50">c..</text></g><g><title>type_of (501,658 samples, 0.20%)</title><rect x="50.7805%" y="117" width="0.1979%" height="15" fill="rgb(224,114,35)"/><text x="51.0305%" y="127.50"></text></g><g><title>evaluate_obligation (1,040,056 samples, 0.41%)</title><rect x="52.9087%" y="117" width="0.4102%" height="15" fill="rgb(245,159,27)"/><text x="53.1587%" y="127.50"></text></g><g><title>implied_outlives_bounds (630,536 samples, 0.25%)</title><rect x="53.3189%" y="117" width="0.2487%" height="15" fill="rgb(245,172,44)"/><text x="53.5689%" y="127.50"></text></g><g><title>param_env (739,381 samples, 0.29%)</title><rect x="53.5676%" y="117" width="0.2916%" height="15" fill="rgb(236,23,11)"/><text x="53.8176%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,532,921 samples, 2.97%)</title><rect x="51.1456%" y="133" width="2.9711%" height="15" fill="rgb(205,117,38)"/><text x="51.3956%" y="143.50">che..</text></g><g><title>region_scope_tree (633,198 samples, 0.25%)</title><rect x="53.8670%" y="117" width="0.2497%" height="15" fill="rgb(237,72,25)"/><text x="54.1170%" y="127.50"></text></g><g><title>param_env (594,622 samples, 0.23%)</title><rect x="55.5675%" y="117" width="0.2345%" height="15" fill="rgb(244,70,9)"/><text x="55.8175%" y="127.50"></text></g><g><title>check_item_well_formed (4,617,382 samples, 1.82%)</title><rect x="54.1167%" y="133" width="1.8212%" height="15" fill="rgb(217,125,39)"/><text x="54.3667%" y="143.50">c..</text></g><g><title>analysis (124,435,871 samples, 49.08%)</title><rect x="6.8680%" y="181" width="49.0793%" height="15" fill="rgb(235,36,10)"/><text x="7.1180%" y="191.50">analysis</text></g><g><title>type_check_crate (71,952,835 samples, 28.38%)</title><rect x="27.5680%" y="165" width="28.3792%" height="15" fill="rgb(251,123,47)"/><text x="27.8180%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,586,241 samples, 4.96%)</title><rect x="50.9830%" y="149" width="4.9642%" height="15" fill="rgb(221,13,13)"/><text x="51.2330%" y="159.50">wf_che..</text></g><g><title>fn_abi_of_instance (660,175 samples, 0.26%)</title><rect x="56.7808%" y="149" width="0.2604%" height="15" fill="rgb(238,131,9)"/><text x="57.0308%" y="159.50"></text></g><g><title>codegen_module (2,325,246 samples, 0.92%)</title><rect x="56.1909%" y="165" width="0.9171%" height="15" fill="rgb(211,50,8)"/><text x="56.4409%" y="175.50"></text></g><g><title>optimized_mir (510,584 samples, 0.20%)</title><rect x="57.1860%" y="117" width="0.2014%" height="15" fill="rgb(245,182,24)"/><text x="57.4360%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (887,020 samples, 0.35%)</title><rect x="57.1193%" y="133" width="0.3499%" height="15" fill="rgb(242,14,37)"/><text x="57.3693%" y="143.50"></text></g><g><title>monomorphization_collector (937,410 samples, 0.37%)</title><rect x="57.1182%" y="149" width="0.3697%" height="15" fill="rgb(246,228,12)"/><text x="57.3682%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,070,742 samples, 0.42%)</title><rect x="57.1084%" y="165" width="0.4223%" height="15" fill="rgb(213,55,15)"/><text x="57.3584%" y="175.50"></text></g><g><title>codegen_crate (4,024,675 samples, 1.59%)</title><rect x="55.9511%" y="181" width="1.5874%" height="15" fill="rgb(209,9,3)"/><text x="56.2011%" y="191.50"></text></g><g><title>codegen_module_optimize (15,132,469 samples, 5.97%)</title><rect x="57.5385%" y="181" width="5.9685%" height="15" fill="rgb(230,59,30)"/><text x="57.7885%" y="191.50">codegen_..</text></g><g><title>LLVM_module_optimize (13,023,916 samples, 5.14%)</title><rect x="58.3701%" y="165" width="5.1368%" height="15" fill="rgb(209,121,21)"/><text x="58.6201%" y="175.50">LLVM_m..</text></g><g><title>LLVM_lto_optimize (5,270,489 samples, 2.08%)</title><rect x="64.0152%" y="165" width="2.0788%" height="15" fill="rgb(220,109,13)"/><text x="64.2652%" y="175.50">L..</text></g><g><title>LLVM_module_codegen (15,423,213 samples, 6.08%)</title><rect x="66.0940%" y="165" width="6.0831%" height="15" fill="rgb(232,18,1)"/><text x="66.3440%" y="175.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (15,112,409 samples, 5.96%)</title><rect x="66.2165%" y="149" width="5.9605%" height="15" fill="rgb(215,41,42)"/><text x="66.4665%" y="159.50">LLVM_mod..</text></g><g><title>codegen_module_perform_lto (22,105,099 samples, 8.72%)</title><rect x="63.5070%" y="181" width="8.7186%" height="15" fill="rgb(224,123,36)"/><text x="63.7570%" y="191.50">codegen_modu..</text></g><g><title>AST_validation (297,953 samples, 0.12%)</title><rect x="72.3060%" y="165" width="0.1175%" height="15" fill="rgb(240,125,3)"/><text x="72.5560%" y="175.50"></text></g><g><title>macro_expand_crate (23,226,160 samples, 9.16%)</title><rect x="72.4927%" y="165" width="9.1607%" height="15" fill="rgb(205,98,50)"/><text x="72.7427%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (23,213,720 samples, 9.16%)</title><rect x="72.4976%" y="149" width="9.1558%" height="15" fill="rgb(205,185,37)"/><text x="72.7476%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (647,669 samples, 0.26%)</title><rect x="81.3980%" y="133" width="0.2554%" height="15" fill="rgb(238,207,15)"/><text x="81.6480%" y="143.50"></text></g><g><title>late_resolve_crate (3,452,269 samples, 1.36%)</title><rect x="81.7524%" y="149" width="1.3616%" height="15" fill="rgb(213,199,42)"/><text x="82.0024%" y="159.50"></text></g><g><title>configure_and_expand (27,790,581 samples, 10.96%)</title><rect x="72.2255%" y="181" width="10.9610%" height="15" fill="rgb(235,201,11)"/><text x="72.4755%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (3,804,673 samples, 1.50%)</title><rect x="81.6859%" y="165" width="1.5006%" height="15" fill="rgb(207,46,11)"/><text x="81.9359%" y="175.50"></text></g><g><title>drop_ast (372,785 samples, 0.15%)</title><rect x="83.1865%" y="181" width="0.1470%" height="15" fill="rgb(241,35,35)"/><text x="83.4365%" y="191.50"></text></g><g><title>early_lint_checks (594,646 samples, 0.23%)</title><rect x="83.3409%" y="181" width="0.2345%" height="15" fill="rgb(243,32,47)"/><text x="83.5909%" y="191.50"></text></g><g><title>free_global_ctxt (3,337,507 samples, 1.32%)</title><rect x="83.5754%" y="181" width="1.3164%" height="15" fill="rgb(247,202,23)"/><text x="83.8254%" y="191.50"></text></g><g><title>reachable_non_generics (257,703 samples, 0.10%)</title><rect x="86.2822%" y="149" width="0.1016%" height="15" fill="rgb(219,102,11)"/><text x="86.5322%" y="159.50"></text></g><g><title>exported_symbols (342,503 samples, 0.14%)</title><rect x="86.2759%" y="165" width="0.1351%" height="15" fill="rgb(243,110,44)"/><text x="86.5259%" y="175.50"></text></g><g><title>is_sized_raw (338,124 samples, 0.13%)</title><rect x="89.0338%" y="133" width="0.1334%" height="15" fill="rgb(222,74,54)"/><text x="89.2838%" y="143.50"></text></g><g><title>evaluate_obligation (261,061 samples, 0.10%)</title><rect x="89.0642%" y="117" width="0.1030%" height="15" fill="rgb(216,99,12)"/><text x="89.3142%" y="127.50"></text></g><g><title>layout_of (1,209,586 samples, 0.48%)</title><rect x="88.7852%" y="149" width="0.4771%" height="15" fill="rgb(226,22,26)"/><text x="89.0352%" y="159.50"></text></g><g><title>needs_drop_raw (681,330 samples, 0.27%)</title><rect x="91.3470%" y="133" width="0.2687%" height="15" fill="rgb(217,163,10)"/><text x="91.5970%" y="143.50"></text></g><g><title>is_copy_raw (603,429 samples, 0.24%)</title><rect x="91.3778%" y="117" width="0.2380%" height="15" fill="rgb(213,25,53)"/><text x="91.6278%" y="127.50"></text></g><g><title>evaluate_obligation (479,405 samples, 0.19%)</title><rect x="91.4267%" y="101" width="0.1891%" height="15" fill="rgb(252,105,26)"/><text x="91.6767%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,017,280 samples, 2.37%)</title><rect x="89.2623%" y="149" width="2.3733%" height="15" fill="rgb(220,39,43)"/><text x="89.5123%" y="159.50">mi..</text></g><g><title>optimized_mir (13,109,976 samples, 5.17%)</title><rect x="86.5112%" y="165" width="5.1708%" height="15" fill="rgb(229,68,48)"/><text x="86.7612%" y="175.50">optimi..</text></g><g><title>promoted_mir (510,497 samples, 0.20%)</title><rect x="91.6820%" y="165" width="0.2013%" height="15" fill="rgb(252,8,32)"/><text x="91.9320%" y="175.50"></text></g><g><title>generate_crate_metadata (17,779,509 samples, 7.01%)</title><rect x="84.8918%" y="181" width="7.0125%" height="15" fill="rgb(223,20,43)"/><text x="85.1418%" y="191.50">generate_..</text></g><g><title>hir_lowering (4,899,815 samples, 1.93%)</title><rect x="91.9043%" y="181" width="1.9326%" height="15" fill="rgb(229,81,49)"/><text x="92.1543%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (11,283,047 samples, 4.45%)</title><rect x="93.8441%" y="165" width="4.4502%" height="15" fill="rgb(236,28,36)"/><text x="94.0941%" y="175.50">finis..</text></g><g><title>link_crate (1,194,463 samples, 0.47%)</title><rect x="98.2942%" y="165" width="0.4711%" height="15" fill="rgb(249,185,26)"/><text x="98.5442%" y="175.50"></text></g><g><title>link_binary (1,169,863 samples, 0.46%)</title><rect x="98.3039%" y="149" width="0.4614%" height="15" fill="rgb(249,174,33)"/><text x="98.5539%" y="159.50"></text></g><g><title>link_rlib (859,250 samples, 0.34%)</title><rect x="98.4265%" y="133" width="0.3389%" height="15" fill="rgb(233,201,37)"/><text x="98.6765%" y="143.50"></text></g><g><title>link (12,504,190 samples, 4.93%)</title><rect x="93.8368%" y="181" width="4.9318%" height="15" fill="rgb(221,78,26)"/><text x="94.0868%" y="191.50">link</text></g><g><title>parse_crate (1,240,784 samples, 0.49%)</title><rect x="98.7686%" y="181" width="0.4894%" height="15" fill="rgb(250,127,30)"/><text x="99.0186%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,151,013 samples, 0.45%)</title><rect x="99.3274%" y="181" width="0.4540%" height="15" fill="rgb(230,49,44)"/><text x="99.5774%" y="191.50"></text></g><g><title>all (253,540,549 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (253,540,549 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (470,216 samples, 0.19%)</title><rect x="99.8145%" y="181" width="0.1855%" height="15" fill="rgb(215,43,3)"/><text x="100.0645%" y="191.50"></text></g></svg></svg>