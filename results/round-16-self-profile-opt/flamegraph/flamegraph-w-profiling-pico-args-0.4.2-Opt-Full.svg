<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (187,414,969 samples, 14.62%)</title><rect x="0.0707%" y="165" width="14.6192%" height="15" fill="rgb(227,0,7)"/><text x="0.3207%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,339,284 samples, 0.10%)</title><rect x="16.3434%" y="37" width="0.1045%" height="15" fill="rgb(217,0,24)"/><text x="16.5934%" y="47.50"></text></g><g><title>resolve_instance (1,823,210 samples, 0.14%)</title><rect x="16.3117%" y="53" width="0.1422%" height="15" fill="rgb(221,193,54)"/><text x="16.5617%" y="63.50"></text></g><g><title>thir_body (1,414,438 samples, 0.11%)</title><rect x="16.4563%" y="53" width="0.1103%" height="15" fill="rgb(248,212,6)"/><text x="16.7063%" y="63.50"></text></g><g><title>mir_const (10,040,247 samples, 0.78%)</title><rect x="15.7869%" y="101" width="0.7832%" height="15" fill="rgb(208,68,35)"/><text x="16.0369%" y="111.50"></text></g><g><title>unsafety_check_result (8,670,869 samples, 0.68%)</title><rect x="15.8937%" y="85" width="0.6764%" height="15" fill="rgb(232,128,0)"/><text x="16.1437%" y="95.50"></text></g><g><title>mir_built (7,494,157 samples, 0.58%)</title><rect x="15.9855%" y="69" width="0.5846%" height="15" fill="rgb(207,160,47)"/><text x="16.2355%" y="79.50"></text></g><g><title>mir_promoted (11,056,521 samples, 0.86%)</title><rect x="15.7171%" y="117" width="0.8625%" height="15" fill="rgb(228,23,34)"/><text x="15.9671%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,309,013 samples, 0.18%)</title><rect x="16.6613%" y="117" width="0.1801%" height="15" fill="rgb(218,30,26)"/><text x="16.9113%" y="127.50"></text></g><g><title>MIR_borrow_checking (27,019,251 samples, 2.11%)</title><rect x="14.7352%" y="149" width="2.1076%" height="15" fill="rgb(220,122,19)"/><text x="14.9852%" y="159.50">M..</text></g><g><title>mir_borrowck (26,918,051 samples, 2.10%)</title><rect x="14.7431%" y="133" width="2.0997%" height="15" fill="rgb(250,228,42)"/><text x="14.9931%" y="143.50">m..</text></g><g><title>misc_checking_1 (2,335,236 samples, 0.18%)</title><rect x="16.8779%" y="149" width="0.1822%" height="15" fill="rgb(240,193,28)"/><text x="17.1279%" y="159.50"></text></g><g><title>crate_lints (1,793,650 samples, 0.14%)</title><rect x="17.1796%" y="117" width="0.1399%" height="15" fill="rgb(216,20,37)"/><text x="17.4296%" y="127.50"></text></g><g><title>lint_checking (2,313,866 samples, 0.18%)</title><rect x="17.1795%" y="133" width="0.1805%" height="15" fill="rgb(206,188,39)"/><text x="17.4295%" y="143.50"></text></g><g><title>misc_checking_3 (3,869,313 samples, 0.30%)</title><rect x="17.1405%" y="149" width="0.3018%" height="15" fill="rgb(217,207,13)"/><text x="17.3905%" y="159.50"></text></g><g><title>impl_parent (2,309,154 samples, 0.18%)</title><rect x="17.8041%" y="85" width="0.1801%" height="15" fill="rgb(231,73,38)"/><text x="18.0541%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,366,042 samples, 0.11%)</title><rect x="17.8777%" y="69" width="0.1066%" height="15" fill="rgb(225,20,46)"/><text x="18.1277%" y="79.50"></text></g><g><title>impl_trait_ref (5,453,681 samples, 0.43%)</title><rect x="17.9843%" y="85" width="0.4254%" height="15" fill="rgb(210,31,41)"/><text x="18.2343%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,522,514 samples, 0.35%)</title><rect x="18.0569%" y="69" width="0.3528%" height="15" fill="rgb(221,200,47)"/><text x="18.3069%" y="79.50"></text></g><g><title>coherent_trait (13,216,287 samples, 1.03%)</title><rect x="17.4488%" y="117" width="1.0309%" height="15" fill="rgb(226,26,5)"/><text x="17.6988%" y="127.50"></text></g><g><title>specialization_graph_of (12,635,249 samples, 0.99%)</title><rect x="17.4942%" y="101" width="0.9856%" height="15" fill="rgb(249,33,26)"/><text x="17.7442%" y="111.50"></text></g><g><title>coherence_checking (13,295,978 samples, 1.04%)</title><rect x="17.4472%" y="133" width="1.0371%" height="15" fill="rgb(235,183,28)"/><text x="17.6972%" y="143.50"></text></g><g><title>evaluate_obligation (1,477,026 samples, 0.12%)</title><rect x="20.7332%" y="69" width="0.1152%" height="15" fill="rgb(221,5,38)"/><text x="20.9832%" y="79.50"></text></g><g><title>typeck (10,358,696 samples, 0.81%)</title><rect x="20.1213%" y="85" width="0.8080%" height="15" fill="rgb(247,18,42)"/><text x="20.3713%" y="95.50"></text></g><g><title>item_bodies_checking (31,374,460 samples, 2.45%)</title><rect x="18.4865%" y="133" width="2.4474%" height="15" fill="rgb(241,131,45)"/><text x="18.7365%" y="143.50">it..</text></g><g><title>typeck_item_bodies (31,371,300 samples, 2.45%)</title><rect x="18.4867%" y="117" width="2.4471%" height="15" fill="rgb(249,31,29)"/><text x="18.7367%" y="127.50">ty..</text></g><g><title>typeck (31,306,879 samples, 2.44%)</title><rect x="18.4917%" y="101" width="2.4421%" height="15" fill="rgb(225,111,53)"/><text x="18.7417%" y="111.50">ty..</text></g><g><title>type_collecting (2,997,564 samples, 0.23%)</title><rect x="20.9648%" y="133" width="0.2338%" height="15" fill="rgb(238,160,17)"/><text x="21.2148%" y="143.50"></text></g><g><title>collect_mod_item_types (2,986,034 samples, 0.23%)</title><rect x="20.9657%" y="117" width="0.2329%" height="15" fill="rgb(214,148,48)"/><text x="21.2157%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,239,876 samples, 0.25%)</title><rect x="21.2100%" y="117" width="0.2527%" height="15" fill="rgb(232,36,49)"/><text x="21.4600%" y="127.50"></text></g><g><title>analysis (87,811,589 samples, 6.85%)</title><rect x="14.6900%" y="165" width="6.8497%" height="15" fill="rgb(209,103,24)"/><text x="14.9400%" y="175.50">analysis</text></g><g><title>type_check_crate (52,526,886 samples, 4.10%)</title><rect x="17.4423%" y="149" width="4.0973%" height="15" fill="rgb(229,88,8)"/><text x="17.6923%" y="159.50">type..</text></g><g><title>wf_checking (4,368,369 samples, 0.34%)</title><rect x="21.1989%" y="133" width="0.3408%" height="15" fill="rgb(213,181,19)"/><text x="21.4489%" y="143.50"></text></g><g><title>layout_of (1,568,841 samples, 0.12%)</title><rect x="24.5659%" y="117" width="0.1224%" height="15" fill="rgb(254,191,54)"/><text x="24.8159%" y="127.50"></text></g><g><title>predicates_of (1,341,117 samples, 0.10%)</title><rect x="24.8607%" y="101" width="0.1046%" height="15" fill="rgb(241,83,37)"/><text x="25.1107%" y="111.50"></text></g><g><title>param_env (3,554,912 samples, 0.28%)</title><rect x="24.6883%" y="117" width="0.2773%" height="15" fill="rgb(233,36,39)"/><text x="24.9383%" y="127.50"></text></g><g><title>fn_abi_of_instance (10,799,332 samples, 0.84%)</title><rect x="24.1848%" y="133" width="0.8424%" height="15" fill="rgb(226,3,54)"/><text x="24.4348%" y="143.50"></text></g><g><title>codegen_module (44,691,017 samples, 3.49%)</title><rect x="21.6697%" y="149" width="3.4861%" height="15" fill="rgb(245,192,40)"/><text x="21.9197%" y="159.50">cod..</text></g><g><title>codegen_fn_attrs (1,839,043 samples, 0.14%)</title><rect x="25.3352%" y="101" width="0.1435%" height="15" fill="rgb(238,167,29)"/><text x="25.5852%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,307,119 samples, 0.18%)</title><rect x="25.7187%" y="85" width="0.1800%" height="15" fill="rgb(232,182,51)"/><text x="25.9687%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,716,246 samples, 0.13%)</title><rect x="25.8987%" y="85" width="0.1339%" height="15" fill="rgb(231,60,39)"/><text x="26.1487%" y="95.50"></text></g><g><title>optimized_mir (6,799,996 samples, 0.53%)</title><rect x="25.5514%" y="101" width="0.5304%" height="15" fill="rgb(208,69,12)"/><text x="25.8014%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (3,446,531 samples, 0.27%)</title><rect x="26.1643%" y="85" width="0.2688%" height="15" fill="rgb(235,93,37)"/><text x="26.4143%" y="95.50"></text></g><g><title>specialization_graph_of (1,492,907 samples, 0.12%)</title><rect x="26.5072%" y="85" width="0.1165%" height="15" fill="rgb(213,116,39)"/><text x="26.7572%" y="95.50"></text></g><g><title>resolve_instance (7,336,172 samples, 0.57%)</title><rect x="26.0818%" y="101" width="0.5723%" height="15" fill="rgb(222,207,29)"/><text x="26.3318%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (20,529,759 samples, 1.60%)</title><rect x="25.1597%" y="117" width="1.6014%" height="15" fill="rgb(206,96,30)"/><text x="25.4097%" y="127.50"></text></g><g><title>monomorphization_collector (20,591,480 samples, 1.61%)</title><rect x="25.1595%" y="133" width="1.6062%" height="15" fill="rgb(218,138,4)"/><text x="25.4095%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (2,166,615 samples, 0.17%)</title><rect x="26.7661%" y="117" width="0.1690%" height="15" fill="rgb(250,191,14)"/><text x="27.0161%" y="127.50"></text></g><g><title>symbol_name (1,976,464 samples, 0.15%)</title><rect x="26.7809%" y="101" width="0.1542%" height="15" fill="rgb(239,60,40)"/><text x="27.0309%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (23,479,312 samples, 1.83%)</title><rect x="25.1565%" y="149" width="1.8315%" height="15" fill="rgb(206,27,48)"/><text x="25.4065%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (2,848,772 samples, 0.22%)</title><rect x="26.7657%" y="133" width="0.2222%" height="15" fill="rgb(225,35,8)"/><text x="27.0157%" y="143.50"></text></g><g><title>codegen_crate (69,894,149 samples, 5.45%)</title><rect x="21.5407%" y="165" width="5.4521%" height="15" fill="rgb(250,213,24)"/><text x="21.7907%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (392,880,716 samples, 30.65%)</title><rect x="26.9927%" y="165" width="30.6465%" height="15" fill="rgb(247,123,22)"/><text x="27.2427%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (377,035,353 samples, 29.41%)</title><rect x="28.2287%" y="149" width="29.4105%" height="15" fill="rgb(231,138,38)"/><text x="28.4787%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (153,043,892 samples, 11.94%)</title><rect x="58.4863%" y="149" width="11.9381%" height="15" fill="rgb(231,145,46)"/><text x="58.7363%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (163,348,470 samples, 12.74%)</title><rect x="70.4244%" y="149" width="12.7419%" height="15" fill="rgb(251,118,11)"/><text x="70.6744%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (161,127,075 samples, 12.57%)</title><rect x="70.5977%" y="133" width="12.5687%" height="15" fill="rgb(217,147,25)"/><text x="70.8477%" y="143.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (11,277,157 samples, 0.88%)</title><rect x="83.1664%" y="149" width="0.8797%" height="15" fill="rgb(247,81,37)"/><text x="83.4164%" y="159.50"></text></g><g><title>codegen_module_perform_lto (339,144,908 samples, 26.45%)</title><rect x="57.6392%" y="165" width="26.4549%" height="15" fill="rgb(209,12,38)"/><text x="57.8892%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (18,740,189 samples, 1.46%)</title><rect x="84.1587%" y="149" width="1.4618%" height="15" fill="rgb(227,1,9)"/><text x="84.4087%" y="159.50"></text></g><g><title>expand_crate (18,722,619 samples, 1.46%)</title><rect x="84.1600%" y="133" width="1.4605%" height="15" fill="rgb(248,47,43)"/><text x="84.4100%" y="143.50"></text></g><g><title>metadata_register_crate (2,700,591 samples, 0.21%)</title><rect x="85.4098%" y="117" width="0.2107%" height="15" fill="rgb(221,10,30)"/><text x="85.6598%" y="127.50"></text></g><g><title>late_resolve_crate (3,438,459 samples, 0.27%)</title><rect x="85.6868%" y="133" width="0.2682%" height="15" fill="rgb(210,229,1)"/><text x="85.9368%" y="143.50"></text></g><g><title>configure_and_expand (24,069,958 samples, 1.88%)</title><rect x="84.0941%" y="165" width="1.8776%" height="15" fill="rgb(222,148,37)"/><text x="84.3441%" y="175.50">c..</text></g><g><title>resolve_crate (4,086,276 samples, 0.32%)</title><rect x="85.6529%" y="149" width="0.3187%" height="15" fill="rgb(234,67,33)"/><text x="85.9029%" y="159.50"></text></g><g><title>free_global_ctxt (5,906,536 samples, 0.46%)</title><rect x="86.0633%" y="165" width="0.4607%" height="15" fill="rgb(247,98,35)"/><text x="86.3133%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,193,660 samples, 0.25%)</title><rect x="86.8465%" y="133" width="0.2491%" height="15" fill="rgb(247,138,52)"/><text x="87.0965%" y="143.50"></text></g><g><title>optimized_mir (5,818,306 samples, 0.45%)</title><rect x="86.6431%" y="149" width="0.4539%" height="15" fill="rgb(213,79,30)"/><text x="86.8931%" y="159.50"></text></g><g><title>generate_crate_metadata (7,417,393 samples, 0.58%)</title><rect x="86.5240%" y="165" width="0.5786%" height="15" fill="rgb(246,177,23)"/><text x="86.7740%" y="175.50"></text></g><g><title>hir_lowering (5,527,901 samples, 0.43%)</title><rect x="87.1026%" y="165" width="0.4312%" height="15" fill="rgb(230,62,27)"/><text x="87.3526%" y="175.50"></text></g><g><title>finish_ongoing_codegen (148,353,874 samples, 11.57%)</title><rect x="87.5353%" y="149" width="11.5723%" height="15" fill="rgb(216,154,8)"/><text x="87.7853%" y="159.50">finish_ongoing_co..</text></g><g><title>link_crate (2,278,475 samples, 0.18%)</title><rect x="99.1076%" y="149" width="0.1777%" height="15" fill="rgb(244,35,45)"/><text x="99.3576%" y="159.50"></text></g><g><title>link_binary (2,252,505 samples, 0.18%)</title><rect x="99.1097%" y="133" width="0.1757%" height="15" fill="rgb(251,115,12)"/><text x="99.3597%" y="143.50"></text></g><g><title>link (150,666,119 samples, 11.75%)</title><rect x="87.5338%" y="165" width="11.7527%" height="15" fill="rgb(240,54,50)"/><text x="87.7838%" y="175.50">link</text></g><g><title>parse_crate (6,754,265 samples, 0.53%)</title><rect x="99.2864%" y="165" width="0.5269%" height="15" fill="rgb(233,84,52)"/><text x="99.5364%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,495,326 samples, 0.12%)</title><rect x="99.8443%" y="165" width="0.1166%" height="15" fill="rgb(207,117,47)"/><text x="100.0943%" y="175.50"></text></g><g><title>all (1,281,975,484 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,281,975,484 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(209,38,44)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>