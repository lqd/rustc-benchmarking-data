<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (102,857,189 samples, 5.39%)</title><rect x="0.0913%" y="181" width="5.3908%" height="15" fill="rgb(227,0,7)"/><text x="0.3413%" y="191.50">LLVM_pa..</text></g><g><title>is_copy_raw (13,915,216 samples, 0.73%)</title><rect x="14.1573%" y="53" width="0.7293%" height="15" fill="rgb(217,0,24)"/><text x="14.4073%" y="63.50"></text></g><g><title>evaluate_obligation (11,728,655 samples, 0.61%)</title><rect x="14.2719%" y="37" width="0.6147%" height="15" fill="rgb(221,193,54)"/><text x="14.5219%" y="47.50"></text></g><g><title>needs_drop_raw (16,020,406 samples, 0.84%)</title><rect x="14.0497%" y="69" width="0.8396%" height="15" fill="rgb(248,212,6)"/><text x="14.2997%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,587,591 samples, 0.14%)</title><rect x="14.9799%" y="53" width="0.1356%" height="15" fill="rgb(208,68,35)"/><text x="15.2299%" y="63.50"></text></g><g><title>resolve_instance (5,332,616 samples, 0.28%)</title><rect x="14.8916%" y="69" width="0.2795%" height="15" fill="rgb(232,128,0)"/><text x="15.1416%" y="79.50"></text></g><g><title>thir_body (8,536,512 samples, 0.45%)</title><rect x="15.1834%" y="69" width="0.4474%" height="15" fill="rgb(207,160,47)"/><text x="15.4334%" y="79.50"></text></g><g><title>mir_const (67,719,339 samples, 3.55%)</title><rect x="12.0971%" y="117" width="3.5492%" height="15" fill="rgb(228,23,34)"/><text x="12.3471%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (60,264,512 samples, 3.16%)</title><rect x="12.4878%" y="101" width="3.1585%" height="15" fill="rgb(218,30,26)"/><text x="12.7378%" y="111.50">uns..</text></g><g><title>mir_built (55,138,076 samples, 2.89%)</title><rect x="12.7565%" y="85" width="2.8898%" height="15" fill="rgb(220,122,19)"/><text x="13.0065%" y="95.50">mi..</text></g><g><title>mir_const_qualif (2,033,613 samples, 0.11%)</title><rect x="15.6463%" y="117" width="0.1066%" height="15" fill="rgb(250,228,42)"/><text x="15.8963%" y="127.50"></text></g><g><title>mir_promoted (76,202,062 samples, 3.99%)</title><rect x="11.7591%" y="133" width="3.9938%" height="15" fill="rgb(240,193,28)"/><text x="12.0091%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (5,589,955 samples, 0.29%)</title><rect x="15.7529%" y="133" width="0.2930%" height="15" fill="rgb(216,20,37)"/><text x="16.0029%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,109,771 samples, 0.27%)</title><rect x="16.0458%" y="133" width="0.2678%" height="15" fill="rgb(206,188,39)"/><text x="16.2958%" y="143.50"></text></g><g><title>normalize_projection_ty (2,802,601 samples, 0.15%)</title><rect x="16.1668%" y="117" width="0.1469%" height="15" fill="rgb(217,207,13)"/><text x="16.4168%" y="127.50"></text></g><g><title>type_op_normalize_ty (3,405,170 samples, 0.18%)</title><rect x="16.3647%" y="133" width="0.1785%" height="15" fill="rgb(231,73,38)"/><text x="16.6147%" y="143.50"></text></g><g><title>normalize_projection_ty (2,288,555 samples, 0.12%)</title><rect x="16.4232%" y="117" width="0.1199%" height="15" fill="rgb(225,20,46)"/><text x="16.6732%" y="127.50"></text></g><g><title>type_op_prove_predicate (25,736,528 samples, 1.35%)</title><rect x="16.5431%" y="133" width="1.3489%" height="15" fill="rgb(210,31,41)"/><text x="16.7931%" y="143.50"></text></g><g><title>MIR_borrow_checking (234,402,516 samples, 12.29%)</title><rect x="5.6077%" y="165" width="12.2851%" height="15" fill="rgb(221,200,47)"/><text x="5.8577%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (233,151,764 samples, 12.22%)</title><rect x="5.6733%" y="149" width="12.2195%" height="15" fill="rgb(226,26,5)"/><text x="5.9233%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (4,295,157 samples, 0.23%)</title><rect x="18.0598%" y="149" width="0.2251%" height="15" fill="rgb(249,33,26)"/><text x="18.3098%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (3,455,649 samples, 0.18%)</title><rect x="18.3865%" y="149" width="0.1811%" height="15" fill="rgb(235,183,28)"/><text x="18.6365%" y="159.50"></text></g><g><title>misc_checking_1 (10,156,831 samples, 0.53%)</title><rect x="18.0579%" y="165" width="0.5323%" height="15" fill="rgb(221,5,38)"/><text x="18.3079%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,361,908 samples, 0.23%)</title><rect x="18.5904%" y="149" width="0.2286%" height="15" fill="rgb(247,18,42)"/><text x="18.8404%" y="159.50"></text></g><g><title>check_mod_liveness (3,558,669 samples, 0.19%)</title><rect x="18.6325%" y="133" width="0.1865%" height="15" fill="rgb(241,131,45)"/><text x="18.8825%" y="143.50"></text></g><g><title>misc_checking_2 (9,283,162 samples, 0.49%)</title><rect x="18.5902%" y="165" width="0.4865%" height="15" fill="rgb(249,31,29)"/><text x="18.8402%" y="175.50"></text></g><g><title>match_checking (4,918,504 samples, 0.26%)</title><rect x="18.8190%" y="149" width="0.2578%" height="15" fill="rgb(225,111,53)"/><text x="19.0690%" y="159.50"></text></g><g><title>check_match (4,580,561 samples, 0.24%)</title><rect x="18.8367%" y="133" width="0.2401%" height="15" fill="rgb(238,160,17)"/><text x="19.0867%" y="143.50"></text></g><g><title>check_private_in_public (2,428,947 samples, 0.13%)</title><rect x="19.0776%" y="149" width="0.1273%" height="15" fill="rgb(214,148,48)"/><text x="19.3276%" y="159.50"></text></g><g><title>death_checking (4,108,255 samples, 0.22%)</title><rect x="19.2049%" y="149" width="0.2153%" height="15" fill="rgb(232,36,49)"/><text x="19.4549%" y="159.50"></text></g><g><title>crate_lints (8,340,591 samples, 0.44%)</title><rect x="19.4204%" y="133" width="0.4371%" height="15" fill="rgb(209,103,24)"/><text x="19.6704%" y="143.50"></text></g><g><title>lint_checking (12,684,159 samples, 0.66%)</title><rect x="19.4202%" y="149" width="0.6648%" height="15" fill="rgb(229,88,8)"/><text x="19.6702%" y="159.50"></text></g><g><title>module_lints (4,340,218 samples, 0.23%)</title><rect x="19.8575%" y="133" width="0.2275%" height="15" fill="rgb(213,181,19)"/><text x="20.1075%" y="143.50"></text></g><g><title>lint_mod (4,331,888 samples, 0.23%)</title><rect x="19.8580%" y="117" width="0.2270%" height="15" fill="rgb(254,191,54)"/><text x="20.1080%" y="127.50"></text></g><g><title>privacy_access_levels (3,511,948 samples, 0.18%)</title><rect x="20.0850%" y="149" width="0.1841%" height="15" fill="rgb(241,83,37)"/><text x="20.3350%" y="159.50"></text></g><g><title>privacy_checking_modules (11,687,699 samples, 0.61%)</title><rect x="20.2691%" y="149" width="0.6126%" height="15" fill="rgb(233,36,39)"/><text x="20.5191%" y="159.50"></text></g><g><title>check_mod_privacy (11,679,409 samples, 0.61%)</title><rect x="20.2695%" y="133" width="0.6121%" height="15" fill="rgb(226,3,54)"/><text x="20.5195%" y="143.50"></text></g><g><title>misc_checking_3 (34,589,310 samples, 1.81%)</title><rect x="19.0768%" y="165" width="1.8128%" height="15" fill="rgb(245,192,40)"/><text x="19.3268%" y="175.50">m..</text></g><g><title>impl_parent (3,273,675 samples, 0.17%)</title><rect x="21.2299%" y="101" width="0.1716%" height="15" fill="rgb(238,167,29)"/><text x="21.4799%" y="111.50"></text></g><g><title>impl_trait_ref (6,227,453 samples, 0.33%)</title><rect x="21.4014%" y="101" width="0.3264%" height="15" fill="rgb(232,182,51)"/><text x="21.6514%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,052,320 samples, 0.26%)</title><rect x="21.4630%" y="85" width="0.2648%" height="15" fill="rgb(231,60,39)"/><text x="21.7130%" y="95.50"></text></g><g><title>coherent_trait (16,784,984 samples, 0.88%)</title><rect x="20.9205%" y="133" width="0.8797%" height="15" fill="rgb(208,69,12)"/><text x="21.1705%" y="143.50"></text></g><g><title>specialization_graph_of (16,257,478 samples, 0.85%)</title><rect x="20.9482%" y="117" width="0.8521%" height="15" fill="rgb(235,93,37)"/><text x="21.1982%" y="127.50"></text></g><g><title>coherence_checking (17,536,413 samples, 0.92%)</title><rect x="20.9174%" y="149" width="0.9191%" height="15" fill="rgb(213,116,39)"/><text x="21.1674%" y="159.50"></text></g><g><title>dropck_outlives (4,205,164 samples, 0.22%)</title><rect x="32.3459%" y="101" width="0.2204%" height="15" fill="rgb(222,207,29)"/><text x="32.5959%" y="111.50"></text></g><g><title>evaluate_obligation (10,882,552 samples, 0.57%)</title><rect x="32.5663%" y="101" width="0.5704%" height="15" fill="rgb(206,96,30)"/><text x="32.8163%" y="111.50"></text></g><g><title>evaluate_obligation (2,904,195 samples, 0.15%)</title><rect x="33.6871%" y="85" width="0.1522%" height="15" fill="rgb(218,138,4)"/><text x="33.9371%" y="95.50"></text></g><g><title>method_autoderef_steps (10,601,264 samples, 0.56%)</title><rect x="33.2852%" y="101" width="0.5556%" height="15" fill="rgb(250,191,14)"/><text x="33.5352%" y="111.50"></text></g><g><title>evaluate_obligation (2,306,118 samples, 0.12%)</title><rect x="34.6301%" y="85" width="0.1209%" height="15" fill="rgb(239,60,40)"/><text x="34.8801%" y="95.50"></text></g><g><title>typeck (18,241,149 samples, 0.96%)</title><rect x="33.9247%" y="101" width="0.9560%" height="15" fill="rgb(206,27,48)"/><text x="34.1747%" y="111.50"></text></g><g><title>item_bodies_checking (248,657,162 samples, 13.03%)</title><rect x="21.8622%" y="149" width="13.0321%" height="15" fill="rgb(225,35,8)"/><text x="22.1122%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (248,652,902 samples, 13.03%)</title><rect x="21.8624%" y="133" width="13.0319%" height="15" fill="rgb(250,213,24)"/><text x="22.1124%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (247,769,150 samples, 12.99%)</title><rect x="21.9087%" y="117" width="12.9856%" height="15" fill="rgb(247,123,22)"/><text x="22.1587%" y="127.50">typeck</text></g><g><title>mir_built (1,980,601 samples, 0.10%)</title><rect x="35.7979%" y="37" width="0.1038%" height="15" fill="rgb(231,138,38)"/><text x="36.0479%" y="47.50"></text></g><g><title>mir_const (2,461,727 samples, 0.13%)</title><rect x="35.7917%" y="69" width="0.1290%" height="15" fill="rgb(231,145,46)"/><text x="36.0417%" y="79.50"></text></g><g><title>unsafety_check_result (2,363,855 samples, 0.12%)</title><rect x="35.7969%" y="53" width="0.1239%" height="15" fill="rgb(251,118,11)"/><text x="36.0469%" y="63.50"></text></g><g><title>mir_promoted (2,519,218 samples, 0.13%)</title><rect x="35.7890%" y="85" width="0.1320%" height="15" fill="rgb(217,147,25)"/><text x="36.0390%" y="95.50"></text></g><g><title>type_of (4,162,116 samples, 0.22%)</title><rect x="35.7061%" y="117" width="0.2181%" height="15" fill="rgb(247,81,37)"/><text x="35.9561%" y="127.50"></text></g><g><title>mir_borrowck (4,150,046 samples, 0.22%)</title><rect x="35.7067%" y="101" width="0.2175%" height="15" fill="rgb(209,12,38)"/><text x="35.9567%" y="111.50"></text></g><g><title>item_types_checking (23,529,478 samples, 1.23%)</title><rect x="34.8943%" y="149" width="1.2332%" height="15" fill="rgb(227,1,9)"/><text x="35.1443%" y="159.50"></text></g><g><title>check_mod_item_types (23,520,548 samples, 1.23%)</title><rect x="34.8948%" y="133" width="1.2327%" height="15" fill="rgb(248,47,43)"/><text x="35.1448%" y="143.50"></text></g><g><title>typeck (3,878,045 samples, 0.20%)</title><rect x="35.9242%" y="117" width="0.2032%" height="15" fill="rgb(221,10,30)"/><text x="36.1742%" y="127.50"></text></g><g><title>fn_sig (2,866,644 samples, 0.15%)</title><rect x="36.3174%" y="117" width="0.1502%" height="15" fill="rgb(210,229,1)"/><text x="36.5674%" y="127.50"></text></g><g><title>is_late_bound_map (6,969,822 samples, 0.37%)</title><rect x="36.5498%" y="101" width="0.3653%" height="15" fill="rgb(222,148,37)"/><text x="36.7998%" y="111.50"></text></g><g><title>resolve_lifetimes (6,785,581 samples, 0.36%)</title><rect x="36.5595%" y="85" width="0.3556%" height="15" fill="rgb(234,67,33)"/><text x="36.8095%" y="95.50"></text></g><g><title>lint_levels (4,473,359 samples, 0.23%)</title><rect x="36.6807%" y="69" width="0.2344%" height="15" fill="rgb(247,98,35)"/><text x="36.9307%" y="79.50"></text></g><g><title>generics_of (9,674,129 samples, 0.51%)</title><rect x="36.4677%" y="117" width="0.5070%" height="15" fill="rgb(247,138,52)"/><text x="36.7177%" y="127.50"></text></g><g><title>late_bound_vars_map (2,852,432 samples, 0.15%)</title><rect x="37.3194%" y="69" width="0.1495%" height="15" fill="rgb(213,79,30)"/><text x="37.5694%" y="79.50"></text></g><g><title>resolve_lifetimes (2,636,511 samples, 0.14%)</title><rect x="37.3307%" y="53" width="0.1382%" height="15" fill="rgb(246,177,23)"/><text x="37.5807%" y="63.50"></text></g><g><title>explicit_predicates_of (7,384,860 samples, 0.39%)</title><rect x="37.1061%" y="85" width="0.3870%" height="15" fill="rgb(230,62,27)"/><text x="37.3561%" y="95.50"></text></g><g><title>predicates_of (14,156,861 samples, 0.74%)</title><rect x="36.9905%" y="117" width="0.7420%" height="15" fill="rgb(216,154,8)"/><text x="37.2405%" y="127.50"></text></g><g><title>predicates_defined_on (13,189,806 samples, 0.69%)</title><rect x="37.0412%" y="101" width="0.6913%" height="15" fill="rgb(244,35,45)"/><text x="37.2912%" y="111.50"></text></g><g><title>inferred_outlives_of (4,566,967 samples, 0.24%)</title><rect x="37.4931%" y="85" width="0.2394%" height="15" fill="rgb(251,115,12)"/><text x="37.7431%" y="95.50"></text></g><g><title>inferred_outlives_crate (4,239,026 samples, 0.22%)</title><rect x="37.5103%" y="69" width="0.2222%" height="15" fill="rgb(240,54,50)"/><text x="37.7603%" y="79.50"></text></g><g><title>type_of (2,500,365 samples, 0.13%)</title><rect x="37.6014%" y="53" width="0.1310%" height="15" fill="rgb(233,84,52)"/><text x="37.8514%" y="63.50"></text></g><g><title>type_collecting (32,407,915 samples, 1.70%)</title><rect x="36.1277%" y="149" width="1.6985%" height="15" fill="rgb(207,117,47)"/><text x="36.3777%" y="159.50"></text></g><g><title>collect_mod_item_types (32,385,075 samples, 1.70%)</title><rect x="36.1289%" y="133" width="1.6973%" height="15" fill="rgb(249,43,39)"/><text x="36.3789%" y="143.50"></text></g><g><title>evaluate_obligation (13,357,712 samples, 0.70%)</title><rect x="39.5495%" y="117" width="0.7001%" height="15" fill="rgb(209,38,44)"/><text x="39.7995%" y="127.50"></text></g><g><title>implied_outlives_bounds (4,406,840 samples, 0.23%)</title><rect x="40.2600%" y="117" width="0.2310%" height="15" fill="rgb(236,212,23)"/><text x="40.5100%" y="127.50"></text></g><g><title>param_env (3,568,341 samples, 0.19%)</title><rect x="40.5015%" y="117" width="0.1870%" height="15" fill="rgb(242,79,21)"/><text x="40.7515%" y="127.50"></text></g><g><title>region_scope_tree (3,043,933 samples, 0.16%)</title><rect x="40.6914%" y="117" width="0.1595%" height="15" fill="rgb(211,96,35)"/><text x="40.9414%" y="127.50"></text></g><g><title>check_impl_item_well_formed (54,983,746 samples, 2.88%)</title><rect x="37.9711%" y="133" width="2.8817%" height="15" fill="rgb(253,215,40)"/><text x="38.2211%" y="143.50">ch..</text></g><g><title>implied_outlives_bounds (2,368,808 samples, 0.12%)</title><rect x="42.5624%" y="117" width="0.1241%" height="15" fill="rgb(211,81,21)"/><text x="42.8124%" y="127.50"></text></g><g><title>param_env (5,920,956 samples, 0.31%)</title><rect x="42.6868%" y="117" width="0.3103%" height="15" fill="rgb(208,190,38)"/><text x="42.9368%" y="127.50"></text></g><g><title>check_item_well_formed (43,292,655 samples, 2.27%)</title><rect x="40.8528%" y="133" width="2.2690%" height="15" fill="rgb(235,213,38)"/><text x="41.1028%" y="143.50">c..</text></g><g><title>analysis (724,960,964 samples, 38.00%)</title><rect x="5.4821%" y="181" width="37.9953%" height="15" fill="rgb(237,122,38)"/><text x="5.7321%" y="191.50">analysis</text></g><g><title>type_check_crate (430,980,984 samples, 22.59%)</title><rect x="20.8896%" y="165" width="22.5878%" height="15" fill="rgb(244,218,35)"/><text x="21.1396%" y="175.50">type_check_crate</text></g><g><title>wf_checking (107,767,364 samples, 5.65%)</title><rect x="37.8292%" y="149" width="5.6481%" height="15" fill="rgb(240,68,47)"/><text x="38.0792%" y="159.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (6,785,019 samples, 0.36%)</title><rect x="43.1217%" y="133" width="0.3556%" height="15" fill="rgb(210,16,53)"/><text x="43.3717%" y="143.50"></text></g><g><title>param_env (4,085,181 samples, 0.21%)</title><rect x="45.9073%" y="133" width="0.2141%" height="15" fill="rgb(235,124,12)"/><text x="46.1573%" y="143.50"></text></g><g><title>fn_abi_of_instance (13,521,212 samples, 0.71%)</title><rect x="45.4422%" y="149" width="0.7086%" height="15" fill="rgb(224,169,11)"/><text x="45.6922%" y="159.50"></text></g><g><title>codegen_module (51,227,145 samples, 2.68%)</title><rect x="43.5704%" y="165" width="2.6848%" height="15" fill="rgb(250,166,2)"/><text x="43.8204%" y="175.50">co..</text></g><g><title>codegen_fn_attrs (2,157,774 samples, 0.11%)</title><rect x="46.3697%" y="117" width="0.1131%" height="15" fill="rgb(242,216,29)"/><text x="46.6197%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,457,522 samples, 0.13%)</title><rect x="46.6131%" y="101" width="0.1288%" height="15" fill="rgb(230,116,27)"/><text x="46.8631%" y="111.50"></text></g><g><title>optimized_mir (4,652,050 samples, 0.24%)</title><rect x="46.5509%" y="117" width="0.2438%" height="15" fill="rgb(228,99,48)"/><text x="46.8009%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,610,238 samples, 0.14%)</title><rect x="46.8601%" y="101" width="0.1368%" height="15" fill="rgb(253,11,6)"/><text x="47.1101%" y="111.50"></text></g><g><title>specialization_graph_of (2,941,811 samples, 0.15%)</title><rect x="47.0421%" y="101" width="0.1542%" height="15" fill="rgb(247,143,39)"/><text x="47.2921%" y="111.50"></text></g><g><title>impl_trait_ref (2,094,101 samples, 0.11%)</title><rect x="47.0865%" y="85" width="0.1098%" height="15" fill="rgb(236,97,10)"/><text x="47.3365%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,000,011 samples, 0.10%)</title><rect x="47.0914%" y="69" width="0.1048%" height="15" fill="rgb(233,208,19)"/><text x="47.3414%" y="79.50"></text></g><g><title>resolve_instance (8,078,286 samples, 0.42%)</title><rect x="46.7947%" y="117" width="0.4234%" height="15" fill="rgb(216,164,2)"/><text x="47.0447%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (19,496,614 samples, 1.02%)</title><rect x="46.2582%" y="133" width="1.0218%" height="15" fill="rgb(220,129,5)"/><text x="46.5082%" y="143.50"></text></g><g><title>monomorphization_collector (19,822,888 samples, 1.04%)</title><rect x="46.2580%" y="149" width="1.0389%" height="15" fill="rgb(242,17,10)"/><text x="46.5080%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (1,978,512 samples, 0.10%)</title><rect x="47.2972%" y="133" width="0.1037%" height="15" fill="rgb(242,107,0)"/><text x="47.5472%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (22,555,647 samples, 1.18%)</title><rect x="46.2557%" y="165" width="1.1821%" height="15" fill="rgb(251,28,31)"/><text x="46.5057%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,689,819 samples, 0.14%)</title><rect x="47.2969%" y="149" width="0.1410%" height="15" fill="rgb(233,223,10)"/><text x="47.5469%" y="159.50"></text></g><g><title>codegen_crate (75,639,640 samples, 3.96%)</title><rect x="43.4778%" y="181" width="3.9643%" height="15" fill="rgb(215,21,27)"/><text x="43.7278%" y="191.50">code..</text></g><g><title>codegen_module_optimize (344,797,131 samples, 18.07%)</title><rect x="47.4421%" y="181" width="18.0709%" height="15" fill="rgb(232,23,21)"/><text x="47.6921%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (326,170,638 samples, 17.09%)</title><rect x="48.4183%" y="165" width="17.0946%" height="15" fill="rgb(244,5,23)"/><text x="48.6683%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (85,012,181 samples, 4.46%)</title><rect x="66.0968%" y="165" width="4.4555%" height="15" fill="rgb(226,81,46)"/><text x="66.3468%" y="175.50">LLVM_..</text></g><g><title>LLVM_module_codegen (127,386,778 samples, 6.68%)</title><rect x="70.5523%" y="165" width="6.6764%" height="15" fill="rgb(247,70,30)"/><text x="70.8023%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (125,538,338 samples, 6.58%)</title><rect x="70.6492%" y="149" width="6.5795%" height="15" fill="rgb(212,68,19)"/><text x="70.8992%" y="159.50">LLVM_modu..</text></g><g><title>LLVM_thin_lto_import (8,665,913 samples, 0.45%)</title><rect x="77.2287%" y="165" width="0.4542%" height="15" fill="rgb(240,187,13)"/><text x="77.4787%" y="175.50"></text></g><g><title>codegen_module_perform_lto (232,848,883 samples, 12.20%)</title><rect x="65.5129%" y="181" width="12.2036%" height="15" fill="rgb(223,113,26)"/><text x="65.7629%" y="191.50">codegen_module_per..</text></g><g><title>AST_validation (3,494,938 samples, 0.18%)</title><rect x="77.7273%" y="165" width="0.1832%" height="15" fill="rgb(206,192,2)"/><text x="77.9773%" y="175.50"></text></g><g><title>macro_expand_crate (170,940,538 samples, 8.96%)</title><rect x="77.9670%" y="165" width="8.9590%" height="15" fill="rgb(241,108,4)"/><text x="78.2170%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (170,910,138 samples, 8.96%)</title><rect x="77.9686%" y="149" width="8.9574%" height="15" fill="rgb(247,173,49)"/><text x="78.2186%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (15,387,179 samples, 0.81%)</title><rect x="87.0377%" y="149" width="0.8064%" height="15" fill="rgb(224,114,35)"/><text x="87.2877%" y="159.50"></text></g><g><title>configure_and_expand (195,509,828 samples, 10.25%)</title><rect x="77.7166%" y="181" width="10.2467%" height="15" fill="rgb(245,159,27)"/><text x="77.9666%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (19,694,237 samples, 1.03%)</title><rect x="86.9311%" y="165" width="1.0322%" height="15" fill="rgb(245,172,44)"/><text x="87.1811%" y="175.50"></text></g><g><title>drop_ast (5,227,909 samples, 0.27%)</title><rect x="87.9633%" y="181" width="0.2740%" height="15" fill="rgb(236,23,11)"/><text x="88.2133%" y="191.50"></text></g><g><title>early_lint_checks (9,327,852 samples, 0.49%)</title><rect x="88.2386%" y="181" width="0.4889%" height="15" fill="rgb(205,117,38)"/><text x="88.4886%" y="191.50"></text></g><g><title>free_global_ctxt (16,376,570 samples, 0.86%)</title><rect x="88.7275%" y="181" width="0.8583%" height="15" fill="rgb(237,72,25)"/><text x="88.9775%" y="191.50"></text></g><g><title>layout_of (2,329,909 samples, 0.12%)</title><rect x="92.9607%" y="133" width="0.1221%" height="15" fill="rgb(244,70,9)"/><text x="93.2107%" y="143.50"></text></g><g><title>layout_of (8,193,762 samples, 0.43%)</title><rect x="92.6714%" y="149" width="0.4294%" height="15" fill="rgb(217,125,39)"/><text x="92.9214%" y="159.50"></text></g><g><title>is_copy_raw (5,395,355 samples, 0.28%)</title><rect x="95.0306%" y="117" width="0.2828%" height="15" fill="rgb(235,36,10)"/><text x="95.2806%" y="127.50"></text></g><g><title>evaluate_obligation (4,504,768 samples, 0.24%)</title><rect x="95.0773%" y="101" width="0.2361%" height="15" fill="rgb(251,123,47)"/><text x="95.3273%" y="111.50"></text></g><g><title>needs_drop_raw (6,038,970 samples, 0.32%)</title><rect x="94.9989%" y="133" width="0.3165%" height="15" fill="rgb(221,13,13)"/><text x="95.2489%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,244,746 samples, 2.27%)</title><rect x="93.1008%" y="149" width="2.2665%" height="15" fill="rgb(238,131,9)"/><text x="93.3508%" y="159.50">m..</text></g><g><title>optimized_mir (81,723,759 samples, 4.28%)</title><rect x="91.1326%" y="165" width="4.2832%" height="15" fill="rgb(211,50,8)"/><text x="91.3826%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (112,194,262 samples, 5.88%)</title><rect x="89.5858%" y="181" width="5.8801%" height="15" fill="rgb(245,182,24)"/><text x="89.8358%" y="191.50">generat..</text></g><g><title>hir_lowering (37,395,360 samples, 1.96%)</title><rect x="95.4659%" y="181" width="1.9599%" height="15" fill="rgb(242,14,37)"/><text x="95.7159%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (34,557,629 samples, 1.81%)</title><rect x="97.4267%" y="165" width="1.8112%" height="15" fill="rgb(246,228,12)"/><text x="97.6767%" y="175.50">f..</text></g><g><title>link_crate (5,445,901 samples, 0.29%)</title><rect x="99.2379%" y="165" width="0.2854%" height="15" fill="rgb(213,55,15)"/><text x="99.4879%" y="175.50"></text></g><g><title>link_binary (5,260,279 samples, 0.28%)</title><rect x="99.2476%" y="149" width="0.2757%" height="15" fill="rgb(209,9,3)"/><text x="99.4976%" y="159.50"></text></g><g><title>link_rlib (4,293,938 samples, 0.23%)</title><rect x="99.2982%" y="133" width="0.2250%" height="15" fill="rgb(230,59,30)"/><text x="99.5482%" y="143.50"></text></g><g><title>link (40,031,160 samples, 2.10%)</title><rect x="97.4258%" y="181" width="2.0980%" height="15" fill="rgb(209,121,21)"/><text x="97.6758%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (6,239,629 samples, 0.33%)</title><rect x="99.5629%" y="181" width="0.3270%" height="15" fill="rgb(220,109,13)"/><text x="99.8129%" y="191.50"></text></g><g><title>all (1,908,029,138 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,908,029,138 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>