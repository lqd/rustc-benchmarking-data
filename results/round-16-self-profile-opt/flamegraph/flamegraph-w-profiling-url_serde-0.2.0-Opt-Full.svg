<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,963,616 samples, 6.21%)</title><rect x="0.5271%" y="197" width="6.2090%" height="15" fill="rgb(227,0,7)"/><text x="0.7771%" y="207.50">LLVM_pas..</text></g><g><title>codegen_generate_lto_work (448,485 samples, 0.40%)</title><rect x="6.3362%" y="181" width="0.3999%" height="15" fill="rgb(217,0,24)"/><text x="6.5862%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (433,965 samples, 0.39%)</title><rect x="6.3492%" y="165" width="0.3869%" height="15" fill="rgb(221,193,54)"/><text x="6.5992%" y="175.50"></text></g><g><title>implied_outlives_bounds (162,581 samples, 0.14%)</title><rect x="11.6060%" y="149" width="0.1450%" height="15" fill="rgb(248,212,6)"/><text x="11.8560%" y="159.50"></text></g><g><title>param_env (162,043 samples, 0.14%)</title><rect x="12.4494%" y="117" width="0.1445%" height="15" fill="rgb(208,68,35)"/><text x="12.6994%" y="127.50"></text></g><g><title>item_attrs (127,681 samples, 0.11%)</title><rect x="12.8285%" y="85" width="0.1138%" height="15" fill="rgb(232,128,0)"/><text x="13.0785%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,241 samples, 0.11%)</title><rect x="12.8324%" y="69" width="0.1099%" height="15" fill="rgb(207,160,47)"/><text x="13.0824%" y="79.50"></text></g><g><title>codegen_fn_attrs (187,192 samples, 0.17%)</title><rect x="12.7865%" y="101" width="0.1669%" height="15" fill="rgb(228,23,34)"/><text x="13.0365%" y="111.50"></text></g><g><title>adt_drop_tys (122,952 samples, 0.11%)</title><rect x="14.0788%" y="53" width="0.1096%" height="15" fill="rgb(218,30,26)"/><text x="14.3288%" y="63.50"></text></g><g><title>adt_drop_tys (267,674 samples, 0.24%)</title><rect x="14.0562%" y="69" width="0.2387%" height="15" fill="rgb(220,122,19)"/><text x="14.3062%" y="79.50"></text></g><g><title>is_copy_raw (1,000,279 samples, 0.89%)</title><rect x="14.2949%" y="69" width="0.8919%" height="15" fill="rgb(250,228,42)"/><text x="14.5449%" y="79.50"></text></g><g><title>evaluate_obligation (822,968 samples, 0.73%)</title><rect x="14.4530%" y="53" width="0.7338%" height="15" fill="rgb(240,193,28)"/><text x="14.7030%" y="63.50"></text></g><g><title>needs_drop_raw (1,392,665 samples, 1.24%)</title><rect x="13.9611%" y="85" width="1.2418%" height="15" fill="rgb(216,20,37)"/><text x="14.2111%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (229,902 samples, 0.20%)</title><rect x="15.3070%" y="69" width="0.2050%" height="15" fill="rgb(206,188,39)"/><text x="15.5570%" y="79.50"></text></g><g><title>specialization_graph_of (242,143 samples, 0.22%)</title><rect x="15.5443%" y="69" width="0.2159%" height="15" fill="rgb(217,207,13)"/><text x="15.7943%" y="79.50"></text></g><g><title>impl_trait_ref (118,122 samples, 0.11%)</title><rect x="15.6549%" y="53" width="0.1053%" height="15" fill="rgb(231,73,38)"/><text x="15.9049%" y="63.50"></text></g><g><title>resolve_instance (696,848 samples, 0.62%)</title><rect x="15.2029%" y="85" width="0.6213%" height="15" fill="rgb(225,20,46)"/><text x="15.4529%" y="95.50"></text></g><g><title>thir_body (360,954 samples, 0.32%)</title><rect x="15.8357%" y="85" width="0.3218%" height="15" fill="rgb(210,31,41)"/><text x="16.0857%" y="95.50"></text></g><g><title>mir_const (4,603,869 samples, 4.10%)</title><rect x="12.1192%" y="133" width="4.1050%" height="15" fill="rgb(221,200,47)"/><text x="12.3692%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (4,071,535 samples, 3.63%)</title><rect x="12.5938%" y="117" width="3.6303%" height="15" fill="rgb(226,26,5)"/><text x="12.8438%" y="127.50">unsa..</text></g><g><title>mir_built (3,668,311 samples, 3.27%)</title><rect x="12.9534%" y="101" width="3.2708%" height="15" fill="rgb(249,33,26)"/><text x="13.2034%" y="111.50">mir..</text></g><g><title>mir_promoted (4,945,712 samples, 4.41%)</title><rect x="11.8318%" y="149" width="4.4098%" height="15" fill="rgb(235,183,28)"/><text x="12.0818%" y="159.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (440,225 samples, 0.39%)</title><rect x="16.2416%" y="149" width="0.3925%" height="15" fill="rgb(221,5,38)"/><text x="16.4916%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (326,431 samples, 0.29%)</title><rect x="16.6341%" y="149" width="0.2911%" height="15" fill="rgb(247,18,42)"/><text x="16.8841%" y="159.50"></text></g><g><title>type_op_normalize_predicate (264,813 samples, 0.24%)</title><rect x="16.9252%" y="149" width="0.2361%" height="15" fill="rgb(241,131,45)"/><text x="17.1752%" y="159.50"></text></g><g><title>type_op_normalize_ty (168,742 samples, 0.15%)</title><rect x="17.1613%" y="149" width="0.1505%" height="15" fill="rgb(249,31,29)"/><text x="17.4113%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,485,050 samples, 2.22%)</title><rect x="17.3117%" y="149" width="2.2158%" height="15" fill="rgb(225,111,53)"/><text x="17.5617%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (14,191,196 samples, 12.65%)</title><rect x="6.8869%" y="181" width="12.6534%" height="15" fill="rgb(238,160,17)"/><text x="7.1369%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,135,845 samples, 12.60%)</title><rect x="6.9362%" y="165" width="12.6041%" height="15" fill="rgb(214,148,48)"/><text x="7.1862%" y="175.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (160,502 samples, 0.14%)</title><rect x="19.8759%" y="133" width="0.1431%" height="15" fill="rgb(232,36,49)"/><text x="20.1259%" y="143.50"></text></g><g><title>codegen_fn_attrs (303,153 samples, 0.27%)</title><rect x="19.7656%" y="149" width="0.2703%" height="15" fill="rgb(209,103,24)"/><text x="20.0156%" y="159.50"></text></g><g><title>check_mod_attrs (415,885 samples, 0.37%)</title><rect x="19.6651%" y="165" width="0.3708%" height="15" fill="rgb(229,88,8)"/><text x="19.9151%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (263,693 samples, 0.24%)</title><rect x="20.1239%" y="165" width="0.2351%" height="15" fill="rgb(213,181,19)"/><text x="20.3739%" y="175.50"></text></g><g><title>misc_checking_1 (831,409 samples, 0.74%)</title><rect x="19.6501%" y="181" width="0.7413%" height="15" fill="rgb(254,191,54)"/><text x="19.9001%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (227,093 samples, 0.20%)</title><rect x="20.3930%" y="165" width="0.2025%" height="15" fill="rgb(241,83,37)"/><text x="20.6430%" y="175.50"></text></g><g><title>check_mod_liveness (185,712 samples, 0.17%)</title><rect x="20.4299%" y="149" width="0.1656%" height="15" fill="rgb(233,36,39)"/><text x="20.6799%" y="159.50"></text></g><g><title>misc_checking_2 (518,446 samples, 0.46%)</title><rect x="20.3914%" y="181" width="0.4623%" height="15" fill="rgb(226,3,54)"/><text x="20.6414%" y="191.50"></text></g><g><title>match_checking (289,603 samples, 0.26%)</title><rect x="20.5955%" y="165" width="0.2582%" height="15" fill="rgb(245,192,40)"/><text x="20.8455%" y="175.50"></text></g><g><title>check_match (272,192 samples, 0.24%)</title><rect x="20.6110%" y="149" width="0.2427%" height="15" fill="rgb(238,167,29)"/><text x="20.8610%" y="159.50"></text></g><g><title>check_private_in_public (128,452 samples, 0.11%)</title><rect x="20.8620%" y="165" width="0.1145%" height="15" fill="rgb(232,182,51)"/><text x="21.1120%" y="175.50"></text></g><g><title>death_checking (742,188 samples, 0.66%)</title><rect x="20.9766%" y="165" width="0.6618%" height="15" fill="rgb(231,60,39)"/><text x="21.2266%" y="175.50"></text></g><g><title>item_attrs (556,476 samples, 0.50%)</title><rect x="21.1422%" y="149" width="0.4962%" height="15" fill="rgb(208,69,12)"/><text x="21.3922%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (554,446 samples, 0.49%)</title><rect x="21.1440%" y="133" width="0.4944%" height="15" fill="rgb(235,93,37)"/><text x="21.3940%" y="143.50"></text></g><g><title>param_env (144,212 samples, 0.13%)</title><rect x="22.2106%" y="133" width="0.1286%" height="15" fill="rgb(213,116,39)"/><text x="22.4606%" y="143.50"></text></g><g><title>crate_lints (2,251,955 samples, 2.01%)</title><rect x="21.6397%" y="149" width="2.0079%" height="15" fill="rgb(222,207,29)"/><text x="21.8897%" y="159.50">c..</text></g><g><title>type_of (1,463,045 samples, 1.30%)</title><rect x="22.3431%" y="133" width="1.3045%" height="15" fill="rgb(206,96,30)"/><text x="22.5931%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (960,759 samples, 0.86%)</title><rect x="22.7910%" y="117" width="0.8567%" height="15" fill="rgb(218,138,4)"/><text x="23.0410%" y="127.50"></text></g><g><title>lint_checking (2,421,887 samples, 2.16%)</title><rect x="21.6383%" y="165" width="2.1594%" height="15" fill="rgb(250,191,14)"/><text x="21.8883%" y="175.50">l..</text></g><g><title>module_lints (168,402 samples, 0.15%)</title><rect x="23.6476%" y="149" width="0.1502%" height="15" fill="rgb(239,60,40)"/><text x="23.8976%" y="159.50"></text></g><g><title>lint_mod (165,422 samples, 0.15%)</title><rect x="23.6503%" y="133" width="0.1475%" height="15" fill="rgb(206,27,48)"/><text x="23.9003%" y="143.50"></text></g><g><title>privacy_access_levels (149,291 samples, 0.13%)</title><rect x="23.7978%" y="165" width="0.1331%" height="15" fill="rgb(225,35,8)"/><text x="24.0478%" y="175.50"></text></g><g><title>privacy_checking_modules (526,885 samples, 0.47%)</title><rect x="23.9309%" y="165" width="0.4698%" height="15" fill="rgb(250,213,24)"/><text x="24.1809%" y="175.50"></text></g><g><title>check_mod_privacy (524,885 samples, 0.47%)</title><rect x="23.9327%" y="149" width="0.4680%" height="15" fill="rgb(247,123,22)"/><text x="24.1827%" y="159.50"></text></g><g><title>misc_checking_3 (3,990,043 samples, 3.56%)</title><rect x="20.8537%" y="181" width="3.5577%" height="15" fill="rgb(231,138,38)"/><text x="21.1037%" y="191.50">misc..</text></g><g><title>impl_parent (2,333,929 samples, 2.08%)</title><rect x="28.3127%" y="117" width="2.0810%" height="15" fill="rgb(231,145,46)"/><text x="28.5627%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,413,688 samples, 1.26%)</title><rect x="29.1332%" y="101" width="1.2605%" height="15" fill="rgb(251,118,11)"/><text x="29.3832%" y="111.50"></text></g><g><title>impl_trait_ref (5,644,993 samples, 5.03%)</title><rect x="30.3937%" y="117" width="5.0333%" height="15" fill="rgb(217,147,25)"/><text x="30.6437%" y="127.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,713,211 samples, 4.20%)</title><rect x="31.2245%" y="101" width="4.2025%" height="15" fill="rgb(247,81,37)"/><text x="31.4745%" y="111.50">metad..</text></g><g><title>coherent_trait (13,177,956 samples, 11.75%)</title><rect x="24.4725%" y="149" width="11.7500%" height="15" fill="rgb(209,12,38)"/><text x="24.7225%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (13,156,935 samples, 11.73%)</title><rect x="24.4912%" y="133" width="11.7312%" height="15" fill="rgb(227,1,9)"/><text x="24.7412%" y="143.50">specialization_gr..</text></g><g><title>trait_impls_of (888,171 samples, 0.79%)</title><rect x="35.4305%" y="117" width="0.7919%" height="15" fill="rgb(248,47,43)"/><text x="35.6805%" y="127.50"></text></g><g><title>implementations_of_trait (242,785 samples, 0.22%)</title><rect x="36.0060%" y="101" width="0.2165%" height="15" fill="rgb(221,10,30)"/><text x="36.2560%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (183,043 samples, 0.16%)</title><rect x="36.0593%" y="85" width="0.1632%" height="15" fill="rgb(210,229,1)"/><text x="36.3093%" y="95.50"></text></g><g><title>coherence_checking (13,247,696 samples, 11.81%)</title><rect x="24.4543%" y="165" width="11.8122%" height="15" fill="rgb(222,148,37)"/><text x="24.7043%" y="175.50">coherence_checking</text></g><g><title>associated_item (374,756 samples, 0.33%)</title><rect x="42.3652%" y="101" width="0.3341%" height="15" fill="rgb(234,67,33)"/><text x="42.6152%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (303,155 samples, 0.27%)</title><rect x="42.4290%" y="85" width="0.2703%" height="15" fill="rgb(247,98,35)"/><text x="42.6790%" y="95.50"></text></g><g><title>associated_items (530,937 samples, 0.47%)</title><rect x="42.2460%" y="117" width="0.4734%" height="15" fill="rgb(247,138,52)"/><text x="42.4960%" y="127.50"></text></g><g><title>adt_dtorck_constraint (116,061 samples, 0.10%)</title><rect x="42.9937%" y="85" width="0.1035%" height="15" fill="rgb(213,79,30)"/><text x="43.2437%" y="95.50"></text></g><g><title>adt_dtorck_constraint (190,691 samples, 0.17%)</title><rect x="42.9464%" y="101" width="0.1700%" height="15" fill="rgb(246,177,23)"/><text x="43.1964%" y="111.50"></text></g><g><title>dropck_outlives (467,677 samples, 0.42%)</title><rect x="42.7748%" y="117" width="0.4170%" height="15" fill="rgb(230,62,27)"/><text x="43.0248%" y="127.50"></text></g><g><title>mir_const_qualif (162,661 samples, 0.15%)</title><rect x="43.3113%" y="85" width="0.1450%" height="15" fill="rgb(216,154,8)"/><text x="43.5613%" y="95.50"></text></g><g><title>mir_const (130,661 samples, 0.12%)</title><rect x="43.3398%" y="69" width="0.1165%" height="15" fill="rgb(244,35,45)"/><text x="43.5898%" y="79.50"></text></g><g><title>mir_borrowck (357,344 samples, 0.32%)</title><rect x="43.5793%" y="53" width="0.3186%" height="15" fill="rgb(251,115,12)"/><text x="43.8293%" y="63.50"></text></g><g><title>mir_for_ctfe (500,675 samples, 0.45%)</title><rect x="43.4563%" y="85" width="0.4464%" height="15" fill="rgb(240,54,50)"/><text x="43.7063%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (462,445 samples, 0.41%)</title><rect x="43.4904%" y="69" width="0.4123%" height="15" fill="rgb(233,84,52)"/><text x="43.7404%" y="79.50"></text></g><g><title>eval_to_const_value_raw (178,562 samples, 0.16%)</title><rect x="43.9195%" y="69" width="0.1592%" height="15" fill="rgb(207,117,47)"/><text x="44.1695%" y="79.50"></text></g><g><title>eval_to_const_value_raw (176,772 samples, 0.16%)</title><rect x="43.9211%" y="53" width="0.1576%" height="15" fill="rgb(249,43,39)"/><text x="44.1711%" y="63.50"></text></g><g><title>eval_to_allocation_raw (172,782 samples, 0.15%)</title><rect x="43.9246%" y="37" width="0.1541%" height="15" fill="rgb(209,38,44)"/><text x="44.1746%" y="47.50"></text></g><g><title>eval_to_const_value_raw (995,641 samples, 0.89%)</title><rect x="43.1921%" y="117" width="0.8878%" height="15" fill="rgb(236,212,23)"/><text x="43.4421%" y="127.50"></text></g><g><title>eval_to_allocation_raw (979,061 samples, 0.87%)</title><rect x="43.2069%" y="101" width="0.8730%" height="15" fill="rgb(242,79,21)"/><text x="43.4569%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (186,862 samples, 0.17%)</title><rect x="43.9133%" y="85" width="0.1666%" height="15" fill="rgb(211,96,35)"/><text x="44.1633%" y="95.50"></text></g><g><title>adt_sized_constraint (116,761 samples, 0.10%)</title><rect x="44.6533%" y="101" width="0.1041%" height="15" fill="rgb(253,215,40)"/><text x="44.9033%" y="111.50"></text></g><g><title>trait_impls_of (163,572 samples, 0.15%)</title><rect x="44.9053%" y="101" width="0.1458%" height="15" fill="rgb(211,81,21)"/><text x="45.1553%" y="111.50"></text></g><g><title>evaluate_obligation (1,094,041 samples, 0.98%)</title><rect x="44.0799%" y="117" width="0.9755%" height="15" fill="rgb(208,190,38)"/><text x="44.3299%" y="127.50"></text></g><g><title>method_autoderef_steps (180,361 samples, 0.16%)</title><rect x="45.3460%" y="117" width="0.1608%" height="15" fill="rgb(235,213,38)"/><text x="45.5960%" y="127.50"></text></g><g><title>object_safety_violations (134,091 samples, 0.12%)</title><rect x="45.5068%" y="117" width="0.1196%" height="15" fill="rgb(237,122,38)"/><text x="45.7568%" y="127.50"></text></g><g><title>predicates_of (199,211 samples, 0.18%)</title><rect x="45.6634%" y="117" width="0.1776%" height="15" fill="rgb(244,218,35)"/><text x="45.9134%" y="127.50"></text></g><g><title>predicates_defined_on (140,621 samples, 0.13%)</title><rect x="45.7156%" y="101" width="0.1254%" height="15" fill="rgb(240,68,47)"/><text x="45.9656%" y="111.50"></text></g><g><title>adt_dtorck_constraint (135,802 samples, 0.12%)</title><rect x="49.3038%" y="85" width="0.1211%" height="15" fill="rgb(210,16,53)"/><text x="49.5538%" y="95.50"></text></g><g><title>dropck_outlives (276,643 samples, 0.25%)</title><rect x="49.1972%" y="101" width="0.2467%" height="15" fill="rgb(235,124,12)"/><text x="49.4472%" y="111.50"></text></g><g><title>evaluate_obligation (390,564 samples, 0.35%)</title><rect x="49.4439%" y="101" width="0.3482%" height="15" fill="rgb(224,169,11)"/><text x="49.6939%" y="111.50"></text></g><g><title>is_copy_raw (200,612 samples, 0.18%)</title><rect x="49.8833%" y="101" width="0.1789%" height="15" fill="rgb(250,166,2)"/><text x="50.1333%" y="111.50"></text></g><g><title>evaluate_obligation (180,522 samples, 0.16%)</title><rect x="49.9012%" y="85" width="0.1610%" height="15" fill="rgb(242,216,29)"/><text x="50.1512%" y="95.50"></text></g><g><title>trait_impls_of (150,892 samples, 0.13%)</title><rect x="49.9276%" y="69" width="0.1345%" height="15" fill="rgb(230,116,27)"/><text x="50.1776%" y="79.50"></text></g><g><title>typeck (5,023,105 samples, 4.48%)</title><rect x="45.9101%" y="117" width="4.4788%" height="15" fill="rgb(228,99,48)"/><text x="46.1601%" y="127.50">typeck</text></g><g><title>item_bodies_checking (15,840,585 samples, 14.12%)</title><rect x="36.2892%" y="165" width="14.1241%" height="15" fill="rgb(253,11,6)"/><text x="36.5392%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,837,525 samples, 14.12%)</title><rect x="36.2919%" y="149" width="14.1214%" height="15" fill="rgb(247,143,39)"/><text x="36.5419%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (15,796,885 samples, 14.09%)</title><rect x="36.3281%" y="133" width="14.0851%" height="15" fill="rgb(236,97,10)"/><text x="36.5781%" y="143.50">typeck</text></g><g><title>impl_trait_ref (161,201 samples, 0.14%)</title><rect x="51.1743%" y="85" width="0.1437%" height="15" fill="rgb(233,208,19)"/><text x="51.4243%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (140,061 samples, 0.12%)</title><rect x="51.1931%" y="69" width="0.1249%" height="15" fill="rgb(216,164,2)"/><text x="51.4431%" y="79.50"></text></g><g><title>adt_destructor (349,774 samples, 0.31%)</title><rect x="51.0328%" y="133" width="0.3119%" height="15" fill="rgb(220,129,5)"/><text x="51.2828%" y="143.50"></text></g><g><title>coherent_trait (345,304 samples, 0.31%)</title><rect x="51.0368%" y="117" width="0.3079%" height="15" fill="rgb(242,17,10)"/><text x="51.2868%" y="127.50"></text></g><g><title>specialization_graph_of (343,784 samples, 0.31%)</title><rect x="51.0382%" y="101" width="0.3065%" height="15" fill="rgb(242,107,0)"/><text x="51.2882%" y="111.50"></text></g><g><title>item_types_checking (1,259,764 samples, 1.12%)</title><rect x="50.4133%" y="165" width="1.1233%" height="15" fill="rgb(251,28,31)"/><text x="50.6633%" y="175.50"></text></g><g><title>check_mod_item_types (1,257,164 samples, 1.12%)</title><rect x="50.4156%" y="149" width="1.1209%" height="15" fill="rgb(233,223,10)"/><text x="50.6656%" y="159.50"></text></g><g><title>fn_sig (387,765 samples, 0.35%)</title><rect x="51.6830%" y="133" width="0.3457%" height="15" fill="rgb(215,21,27)"/><text x="51.9330%" y="143.50"></text></g><g><title>type_param_predicates (164,641 samples, 0.15%)</title><rect x="51.8820%" y="117" width="0.1468%" height="15" fill="rgb(232,23,21)"/><text x="52.1320%" y="127.50"></text></g><g><title>is_late_bound_map (262,732 samples, 0.23%)</title><rect x="52.1191%" y="117" width="0.2343%" height="15" fill="rgb(244,5,23)"/><text x="52.3691%" y="127.50"></text></g><g><title>resolve_lifetimes (244,462 samples, 0.22%)</title><rect x="52.1354%" y="101" width="0.2180%" height="15" fill="rgb(226,81,46)"/><text x="52.3854%" y="111.50"></text></g><g><title>named_region_map (159,052 samples, 0.14%)</title><rect x="52.3533%" y="117" width="0.1418%" height="15" fill="rgb(247,70,30)"/><text x="52.6033%" y="127.50"></text></g><g><title>resolve_lifetimes (147,992 samples, 0.13%)</title><rect x="52.3632%" y="101" width="0.1320%" height="15" fill="rgb(212,68,19)"/><text x="52.6132%" y="111.50"></text></g><g><title>generics_of (532,904 samples, 0.48%)</title><rect x="52.0288%" y="133" width="0.4752%" height="15" fill="rgb(240,187,13)"/><text x="52.2788%" y="143.50"></text></g><g><title>explicit_predicates_of (351,724 samples, 0.31%)</title><rect x="52.6251%" y="101" width="0.3136%" height="15" fill="rgb(223,113,26)"/><text x="52.8751%" y="111.50"></text></g><g><title>predicates_of (489,916 samples, 0.44%)</title><rect x="52.5557%" y="133" width="0.4368%" height="15" fill="rgb(206,192,2)"/><text x="52.8057%" y="143.50"></text></g><g><title>predicates_defined_on (461,805 samples, 0.41%)</title><rect x="52.5807%" y="117" width="0.4118%" height="15" fill="rgb(241,108,4)"/><text x="52.8307%" y="127.50"></text></g><g><title>type_collecting (1,725,749 samples, 1.54%)</title><rect x="51.5381%" y="165" width="1.5387%" height="15" fill="rgb(247,173,49)"/><text x="51.7881%" y="175.50"></text></g><g><title>collect_mod_item_types (1,719,149 samples, 1.53%)</title><rect x="51.5439%" y="149" width="1.5329%" height="15" fill="rgb(224,114,35)"/><text x="51.7939%" y="159.50"></text></g><g><title>evaluate_obligation (373,701 samples, 0.33%)</title><rect x="54.3185%" y="133" width="0.3332%" height="15" fill="rgb(245,159,27)"/><text x="54.5685%" y="143.50"></text></g><g><title>implied_outlives_bounds (307,572 samples, 0.27%)</title><rect x="54.6517%" y="133" width="0.2742%" height="15" fill="rgb(245,172,44)"/><text x="54.9017%" y="143.50"></text></g><g><title>param_env (186,501 samples, 0.17%)</title><rect x="54.9260%" y="133" width="0.1663%" height="15" fill="rgb(236,23,11)"/><text x="55.1760%" y="143.50"></text></g><g><title>region_scope_tree (154,071 samples, 0.14%)</title><rect x="55.1019%" y="133" width="0.1374%" height="15" fill="rgb(205,117,38)"/><text x="55.3519%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,340,153 samples, 2.09%)</title><rect x="53.1953%" y="149" width="2.0866%" height="15" fill="rgb(237,72,25)"/><text x="53.4453%" y="159.50">c..</text></g><g><title>adt_sized_constraint (133,932 samples, 0.12%)</title><rect x="56.8208%" y="117" width="0.1194%" height="15" fill="rgb(244,70,9)"/><text x="57.0708%" y="127.50"></text></g><g><title>adt_sized_constraint (150,872 samples, 0.13%)</title><rect x="56.8086%" y="133" width="0.1345%" height="15" fill="rgb(217,125,39)"/><text x="57.0586%" y="143.50"></text></g><g><title>evaluate_obligation (240,974 samples, 0.21%)</title><rect x="56.9432%" y="133" width="0.2149%" height="15" fill="rgb(235,36,10)"/><text x="57.1932%" y="143.50"></text></g><g><title>adt_sized_constraint (184,923 samples, 0.16%)</title><rect x="56.9931%" y="117" width="0.1649%" height="15" fill="rgb(251,123,47)"/><text x="57.2431%" y="127.50"></text></g><g><title>implied_outlives_bounds (255,782 samples, 0.23%)</title><rect x="57.1709%" y="133" width="0.2281%" height="15" fill="rgb(221,13,13)"/><text x="57.4209%" y="143.50"></text></g><g><title>param_env (274,275 samples, 0.24%)</title><rect x="57.4568%" y="133" width="0.2446%" height="15" fill="rgb(238,131,9)"/><text x="57.7068%" y="143.50"></text></g><g><title>predicates_of (152,140 samples, 0.14%)</title><rect x="57.7014%" y="133" width="0.1357%" height="15" fill="rgb(211,50,8)"/><text x="57.9514%" y="143.50"></text></g><g><title>trait_impls_of (140,542 samples, 0.13%)</title><rect x="57.8805%" y="133" width="0.1253%" height="15" fill="rgb(245,182,24)"/><text x="58.1305%" y="143.50"></text></g><g><title>analysis (57,565,754 samples, 51.33%)</title><rect x="6.7361%" y="197" width="51.3279%" height="15" fill="rgb(242,14,37)"/><text x="6.9861%" y="207.50">analysis</text></g><g><title>type_check_crate (37,742,456 samples, 33.65%)</title><rect x="24.4114%" y="181" width="33.6527%" height="15" fill="rgb(246,228,12)"/><text x="24.6614%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,590,321 samples, 4.98%)</title><rect x="53.0795%" y="165" width="4.9845%" height="15" fill="rgb(213,55,15)"/><text x="53.3295%" y="175.50">wf_che..</text></g><g><title>check_item_well_formed (3,120,197 samples, 2.78%)</title><rect x="55.2819%" y="149" width="2.7821%" height="15" fill="rgb(209,9,3)"/><text x="55.5319%" y="159.50">ch..</text></g><g><title>codegen_module (226,862 samples, 0.20%)</title><rect x="58.4885%" y="181" width="0.2023%" height="15" fill="rgb(230,59,30)"/><text x="58.7385%" y="191.50"></text></g><g><title>codegen_crate (868,289 samples, 0.77%)</title><rect x="58.0755%" y="197" width="0.7742%" height="15" fill="rgb(209,121,21)"/><text x="58.3255%" y="207.50"></text></g><g><title>codegen_module_optimize (918,470 samples, 0.82%)</title><rect x="58.8497%" y="197" width="0.8189%" height="15" fill="rgb(220,109,13)"/><text x="59.0997%" y="207.50"></text></g><g><title>LLVM_module_optimize (449,045 samples, 0.40%)</title><rect x="59.2683%" y="181" width="0.4004%" height="15" fill="rgb(232,18,1)"/><text x="59.5183%" y="191.50"></text></g><g><title>LLVM_lto_optimize (226,032 samples, 0.20%)</title><rect x="60.0134%" y="181" width="0.2015%" height="15" fill="rgb(215,41,42)"/><text x="60.2634%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,396,366 samples, 2.14%)</title><rect x="60.2149%" y="181" width="2.1367%" height="15" fill="rgb(224,123,36)"/><text x="60.4649%" y="191.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,361,736 samples, 2.11%)</title><rect x="60.2458%" y="165" width="2.1058%" height="15" fill="rgb(240,125,3)"/><text x="60.4958%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (3,049,964 samples, 2.72%)</title><rect x="59.6686%" y="197" width="2.7195%" height="15" fill="rgb(205,98,50)"/><text x="59.9186%" y="207.50">co..</text></g><g><title>AST_validation (143,951 samples, 0.13%)</title><rect x="62.5947%" y="181" width="0.1284%" height="15" fill="rgb(205,185,37)"/><text x="62.8447%" y="191.50"></text></g><g><title>metadata_load_macro (228,572 samples, 0.20%)</title><rect x="75.4866%" y="149" width="0.2038%" height="15" fill="rgb(238,207,15)"/><text x="75.7366%" y="159.50"></text></g><g><title>macro_expand_crate (18,041,749 samples, 16.09%)</title><rect x="62.8487%" y="181" width="16.0867%" height="15" fill="rgb(213,199,42)"/><text x="63.0987%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (18,018,989 samples, 16.07%)</title><rect x="62.8690%" y="165" width="16.0664%" height="15" fill="rgb(235,201,11)"/><text x="63.1190%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (3,639,380 samples, 3.25%)</title><rect x="75.6904%" y="149" width="3.2450%" height="15" fill="rgb(207,46,11)"/><text x="75.9404%" y="159.50">met..</text></g><g><title>metadata_register_crate (1,502,387 samples, 1.34%)</title><rect x="77.5958%" y="133" width="1.3396%" height="15" fill="rgb(241,35,35)"/><text x="77.8458%" y="143.50"></text></g><g><title>metadata_register_crate (353,613 samples, 0.32%)</title><rect x="78.6201%" y="117" width="0.3153%" height="15" fill="rgb(243,32,47)"/><text x="78.8701%" y="127.50"></text></g><g><title>metadata_register_crate (137,161 samples, 0.12%)</title><rect x="78.8131%" y="101" width="0.1223%" height="15" fill="rgb(247,202,23)"/><text x="79.0631%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (265,663 samples, 0.24%)</title><rect x="78.9394%" y="181" width="0.2369%" height="15" fill="rgb(219,102,11)"/><text x="79.1894%" y="191.50"></text></g><g><title>late_resolve_crate (2,417,056 samples, 2.16%)</title><rect x="79.2905%" y="165" width="2.1551%" height="15" fill="rgb(243,110,44)"/><text x="79.5405%" y="175.50">l..</text></g><g><title>configure_and_expand (21,475,576 samples, 19.15%)</title><rect x="62.3881%" y="197" width="19.1485%" height="15" fill="rgb(222,74,54)"/><text x="62.6381%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,647,139 samples, 2.36%)</title><rect x="79.1763%" y="181" width="2.3603%" height="15" fill="rgb(216,99,12)"/><text x="79.4263%" y="191.50">re..</text></g><g><title>early_lint_checks (172,462 samples, 0.15%)</title><rect x="81.6507%" y="197" width="0.1538%" height="15" fill="rgb(226,22,26)"/><text x="81.9007%" y="207.50"></text></g><g><title>free_global_ctxt (4,091,345 samples, 3.65%)</title><rect x="81.8045%" y="197" width="3.6480%" height="15" fill="rgb(217,163,10)"/><text x="82.0545%" y="207.50">free..</text></g><g><title>is_sized_raw (130,463 samples, 0.12%)</title><rect x="88.0649%" y="149" width="0.1163%" height="15" fill="rgb(213,25,53)"/><text x="88.3149%" y="159.50"></text></g><g><title>layout_of (247,151 samples, 0.22%)</title><rect x="88.2632%" y="133" width="0.2204%" height="15" fill="rgb(252,105,26)"/><text x="88.5132%" y="143.50"></text></g><g><title>layout_of (178,441 samples, 0.16%)</title><rect x="88.3245%" y="117" width="0.1591%" height="15" fill="rgb(220,39,43)"/><text x="88.5745%" y="127.50"></text></g><g><title>layout_of (349,502 samples, 0.31%)</title><rect x="88.1812%" y="149" width="0.3116%" height="15" fill="rgb(229,68,48)"/><text x="88.4312%" y="159.50"></text></g><g><title>layout_of (943,971 samples, 0.84%)</title><rect x="87.8116%" y="165" width="0.8417%" height="15" fill="rgb(252,8,32)"/><text x="88.0616%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (152,742 samples, 0.14%)</title><rect x="88.5170%" y="149" width="0.1362%" height="15" fill="rgb(223,20,43)"/><text x="88.7670%" y="159.50"></text></g><g><title>is_copy_raw (659,580 samples, 0.59%)</title><rect x="90.1032%" y="133" width="0.5881%" height="15" fill="rgb(229,81,49)"/><text x="90.3532%" y="143.50"></text></g><g><title>evaluate_obligation (542,458 samples, 0.48%)</title><rect x="90.2076%" y="117" width="0.4837%" height="15" fill="rgb(236,28,36)"/><text x="90.4576%" y="127.50"></text></g><g><title>needs_drop_raw (730,201 samples, 0.65%)</title><rect x="90.0470%" y="149" width="0.6511%" height="15" fill="rgb(249,185,26)"/><text x="90.2970%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,411,746 samples, 2.15%)</title><rect x="88.6532%" y="165" width="2.1504%" height="15" fill="rgb(249,174,33)"/><text x="88.9032%" y="175.50">m..</text></g><g><title>optimized_mir (4,757,152 samples, 4.24%)</title><rect x="86.5866%" y="181" width="4.2417%" height="15" fill="rgb(233,201,37)"/><text x="86.8366%" y="191.50">optim..</text></g><g><title>generate_crate_metadata (6,089,378 samples, 5.43%)</title><rect x="85.4525%" y="197" width="5.4295%" height="15" fill="rgb(221,78,26)"/><text x="85.7025%" y="207.50">generat..</text></g><g><title>hir_lowering (1,644,818 samples, 1.47%)</title><rect x="90.8820%" y="197" width="1.4666%" height="15" fill="rgb(250,127,30)"/><text x="91.1320%" y="207.50"></text></g><g><title>finish_ongoing_codegen (2,205,544 samples, 1.97%)</title><rect x="92.3623%" y="181" width="1.9665%" height="15" fill="rgb(230,49,44)"/><text x="92.6123%" y="191.50">f..</text></g><g><title>link_crate (755,878 samples, 0.67%)</title><rect x="94.3289%" y="181" width="0.6740%" height="15" fill="rgb(229,67,23)"/><text x="94.5789%" y="191.50"></text></g><g><title>link_binary (739,818 samples, 0.66%)</title><rect x="94.3432%" y="165" width="0.6597%" height="15" fill="rgb(249,83,47)"/><text x="94.5932%" y="175.50"></text></g><g><title>link_rlib (468,935 samples, 0.42%)</title><rect x="94.5847%" y="149" width="0.4181%" height="15" fill="rgb(215,43,3)"/><text x="94.8347%" y="159.50"></text></g><g><title>link (2,984,513 samples, 2.66%)</title><rect x="92.3486%" y="197" width="2.6611%" height="15" fill="rgb(238,154,13)"/><text x="92.5986%" y="207.50">li..</text></g><g><title>parse_crate (3,981,644 samples, 3.55%)</title><rect x="95.0097%" y="197" width="3.5502%" height="15" fill="rgb(219,56,2)"/><text x="95.2597%" y="207.50">pars..</text></g><g><title>prepare_outputs (308,054 samples, 0.27%)</title><rect x="98.5687%" y="197" width="0.2747%" height="15" fill="rgb(233,0,4)"/><text x="98.8187%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (859,479 samples, 0.77%)</title><rect x="98.8433%" y="197" width="0.7663%" height="15" fill="rgb(235,30,7)"/><text x="99.0933%" y="207.50"></text></g><g><title>all (112,152,995 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,79,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (112,152,995 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (345,374 samples, 0.31%)</title><rect x="99.6921%" y="197" width="0.3079%" height="15" fill="rgb(228,22,38)"/><text x="99.9421%" y="207.50"></text></g></svg></svg>