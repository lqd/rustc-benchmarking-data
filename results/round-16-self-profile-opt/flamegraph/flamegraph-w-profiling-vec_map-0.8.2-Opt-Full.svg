<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,991,476 samples, 3.62%)</title><rect x="0.4085%" y="181" width="3.6174%" height="15" fill="rgb(227,0,7)"/><text x="0.6585%" y="191.50">LLVM..</text></g><g><title>param_env (519,527 samples, 0.31%)</title><rect x="13.7945%" y="101" width="0.3137%" height="15" fill="rgb(217,0,24)"/><text x="14.0445%" y="111.50"></text></g><g><title>item_attrs (330,975 samples, 0.20%)</title><rect x="14.5076%" y="69" width="0.1998%" height="15" fill="rgb(221,193,54)"/><text x="14.7576%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (319,915 samples, 0.19%)</title><rect x="14.5143%" y="53" width="0.1931%" height="15" fill="rgb(248,212,6)"/><text x="14.7643%" y="63.50"></text></g><g><title>codegen_fn_attrs (444,265 samples, 0.27%)</title><rect x="14.4480%" y="85" width="0.2682%" height="15" fill="rgb(208,68,35)"/><text x="14.6980%" y="95.50"></text></g><g><title>adt_drop_tys (344,814 samples, 0.21%)</title><rect x="16.6862%" y="53" width="0.2082%" height="15" fill="rgb(232,128,0)"/><text x="16.9362%" y="63.50"></text></g><g><title>needs_drop_raw (1,733,721 samples, 1.05%)</title><rect x="16.5679%" y="69" width="1.0467%" height="15" fill="rgb(207,160,47)"/><text x="16.8179%" y="79.50"></text></g><g><title>is_copy_raw (1,192,824 samples, 0.72%)</title><rect x="16.8944%" y="53" width="0.7202%" height="15" fill="rgb(228,23,34)"/><text x="17.1444%" y="63.50"></text></g><g><title>evaluate_obligation (988,729 samples, 0.60%)</title><rect x="17.0177%" y="37" width="0.5969%" height="15" fill="rgb(218,30,26)"/><text x="17.2677%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (860,229 samples, 0.52%)</title><rect x="17.8496%" y="53" width="0.5194%" height="15" fill="rgb(220,122,19)"/><text x="18.0996%" y="63.50"></text></g><g><title>specialization_graph_of (172,243 samples, 0.10%)</title><rect x="18.4410%" y="53" width="0.1040%" height="15" fill="rgb(250,228,42)"/><text x="18.6910%" y="63.50"></text></g><g><title>resolve_instance (1,669,699 samples, 1.01%)</title><rect x="17.6146%" y="69" width="1.0081%" height="15" fill="rgb(240,193,28)"/><text x="17.8646%" y="79.50"></text></g><g><title>thir_body (1,130,391 samples, 0.68%)</title><rect x="18.6488%" y="69" width="0.6825%" height="15" fill="rgb(216,20,37)"/><text x="18.8988%" y="79.50"></text></g><g><title>mir_const (10,250,805 samples, 6.19%)</title><rect x="13.1692%" y="117" width="6.1889%" height="15" fill="rgb(206,188,39)"/><text x="13.4192%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (8,695,538 samples, 5.25%)</title><rect x="14.1081%" y="101" width="5.2499%" height="15" fill="rgb(217,207,13)"/><text x="14.3581%" y="111.50">unsafe..</text></g><g><title>mir_built (7,688,346 samples, 4.64%)</title><rect x="14.7162%" y="85" width="4.6418%" height="15" fill="rgb(231,73,38)"/><text x="14.9662%" y="95.50">mir_b..</text></g><g><title>mir_promoted (11,217,533 samples, 6.77%)</title><rect x="12.6253%" y="133" width="6.7726%" height="15" fill="rgb(225,20,46)"/><text x="12.8753%" y="143.50">mir_promo..</text></g><g><title>type_op_normalize_fn_sig (718,781 samples, 0.43%)</title><rect x="19.4907%" y="133" width="0.4340%" height="15" fill="rgb(210,31,41)"/><text x="19.7407%" y="143.50"></text></g><g><title>normalize_projection_ty (447,484 samples, 0.27%)</title><rect x="19.6545%" y="117" width="0.2702%" height="15" fill="rgb(221,200,47)"/><text x="19.9045%" y="127.50"></text></g><g><title>type_op_normalize_predicate (856,838 samples, 0.52%)</title><rect x="19.9247%" y="133" width="0.5173%" height="15" fill="rgb(226,26,5)"/><text x="20.1747%" y="143.50"></text></g><g><title>normalize_projection_ty (590,365 samples, 0.36%)</title><rect x="20.0856%" y="117" width="0.3564%" height="15" fill="rgb(249,33,26)"/><text x="20.3356%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,184,641 samples, 2.53%)</title><rect x="20.4534%" y="133" width="2.5265%" height="15" fill="rgb(235,183,28)"/><text x="20.7034%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (31,114,703 samples, 18.79%)</title><rect x="4.1954%" y="165" width="18.7855%" height="15" fill="rgb(221,5,38)"/><text x="4.4454%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (30,929,922 samples, 18.67%)</title><rect x="4.3070%" y="149" width="18.6740%" height="15" fill="rgb(247,18,42)"/><text x="4.5570%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (197,212 samples, 0.12%)</title><rect x="23.0113%" y="165" width="0.1191%" height="15" fill="rgb(241,131,45)"/><text x="23.2613%" y="175.50"></text></g><g><title>codegen_fn_attrs (216,673 samples, 0.13%)</title><rect x="23.4601%" y="101" width="0.1308%" height="15" fill="rgb(249,31,29)"/><text x="23.7101%" y="111.50"></text></g><g><title>should_inherit_track_caller (365,325 samples, 0.22%)</title><rect x="23.3766%" y="117" width="0.2206%" height="15" fill="rgb(225,111,53)"/><text x="23.6266%" y="127.50"></text></g><g><title>codegen_fn_attrs (566,187 samples, 0.34%)</title><rect x="23.2647%" y="133" width="0.3418%" height="15" fill="rgb(238,160,17)"/><text x="23.5147%" y="143.50"></text></g><g><title>check_mod_attrs (770,919 samples, 0.47%)</title><rect x="23.1411%" y="149" width="0.4654%" height="15" fill="rgb(214,148,48)"/><text x="23.3911%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (401,484 samples, 0.24%)</title><rect x="23.7264%" y="149" width="0.2424%" height="15" fill="rgb(232,36,49)"/><text x="23.9764%" y="159.50"></text></g><g><title>misc_checking_1 (1,442,156 samples, 0.87%)</title><rect x="23.1307%" y="165" width="0.8707%" height="15" fill="rgb(209,103,24)"/><text x="23.3807%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (536,646 samples, 0.32%)</title><rect x="24.0024%" y="149" width="0.3240%" height="15" fill="rgb(229,88,8)"/><text x="24.2524%" y="159.50"></text></g><g><title>check_mod_liveness (454,305 samples, 0.27%)</title><rect x="24.0521%" y="133" width="0.2743%" height="15" fill="rgb(213,181,19)"/><text x="24.3021%" y="143.50"></text></g><g><title>misc_checking_2 (1,091,712 samples, 0.66%)</title><rect x="24.0014%" y="165" width="0.6591%" height="15" fill="rgb(254,191,54)"/><text x="24.2514%" y="175.50"></text></g><g><title>match_checking (553,416 samples, 0.33%)</title><rect x="24.3264%" y="149" width="0.3341%" height="15" fill="rgb(241,83,37)"/><text x="24.5764%" y="159.50"></text></g><g><title>check_match (513,676 samples, 0.31%)</title><rect x="24.3504%" y="133" width="0.3101%" height="15" fill="rgb(233,36,39)"/><text x="24.6004%" y="143.50"></text></g><g><title>check_private_in_public (252,143 samples, 0.15%)</title><rect x="24.6670%" y="149" width="0.1522%" height="15" fill="rgb(226,3,54)"/><text x="24.9170%" y="159.50"></text></g><g><title>death_checking (353,284 samples, 0.21%)</title><rect x="24.8193%" y="149" width="0.2133%" height="15" fill="rgb(245,192,40)"/><text x="25.0693%" y="159.50"></text></g><g><title>param_env (193,412 samples, 0.12%)</title><rect x="25.4483%" y="117" width="0.1168%" height="15" fill="rgb(238,167,29)"/><text x="25.6983%" y="127.50"></text></g><g><title>crate_lints (2,052,502 samples, 1.24%)</title><rect x="25.0335%" y="133" width="1.2392%" height="15" fill="rgb(232,182,51)"/><text x="25.2835%" y="143.50"></text></g><g><title>type_of (1,167,502 samples, 0.70%)</title><rect x="25.5678%" y="117" width="0.7049%" height="15" fill="rgb(231,60,39)"/><text x="25.8178%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (934,008 samples, 0.56%)</title><rect x="25.7088%" y="101" width="0.5639%" height="15" fill="rgb(208,69,12)"/><text x="25.9588%" y="111.50"></text></g><g><title>lint_checking (2,469,677 samples, 1.49%)</title><rect x="25.0326%" y="149" width="1.4911%" height="15" fill="rgb(235,93,37)"/><text x="25.2826%" y="159.50"></text></g><g><title>module_lints (415,595 samples, 0.25%)</title><rect x="26.2727%" y="133" width="0.2509%" height="15" fill="rgb(213,116,39)"/><text x="26.5227%" y="143.50"></text></g><g><title>lint_mod (412,665 samples, 0.25%)</title><rect x="26.2745%" y="117" width="0.2491%" height="15" fill="rgb(222,207,29)"/><text x="26.5245%" y="127.50"></text></g><g><title>privacy_access_levels (353,344 samples, 0.21%)</title><rect x="26.5236%" y="149" width="0.2133%" height="15" fill="rgb(206,96,30)"/><text x="26.7736%" y="159.50"></text></g><g><title>privacy_checking_modules (879,490 samples, 0.53%)</title><rect x="26.7370%" y="149" width="0.5310%" height="15" fill="rgb(218,138,4)"/><text x="26.9870%" y="159.50"></text></g><g><title>check_mod_privacy (877,660 samples, 0.53%)</title><rect x="26.7381%" y="133" width="0.5299%" height="15" fill="rgb(250,191,14)"/><text x="26.9881%" y="143.50"></text></g><g><title>misc_checking_3 (4,339,628 samples, 2.62%)</title><rect x="24.6605%" y="165" width="2.6201%" height="15" fill="rgb(239,60,40)"/><text x="24.9105%" y="175.50">mi..</text></g><g><title>impl_parent (2,515,844 samples, 1.52%)</title><rect x="30.2542%" y="101" width="1.5189%" height="15" fill="rgb(206,27,48)"/><text x="30.5042%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,560,334 samples, 0.94%)</title><rect x="30.8311%" y="85" width="0.9421%" height="15" fill="rgb(225,35,8)"/><text x="31.0811%" y="95.50"></text></g><g><title>impl_trait_ref (5,606,763 samples, 3.39%)</title><rect x="31.7742%" y="101" width="3.3851%" height="15" fill="rgb(250,213,24)"/><text x="32.0242%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,655,212 samples, 2.81%)</title><rect x="32.3487%" y="85" width="2.8106%" height="15" fill="rgb(247,123,22)"/><text x="32.5987%" y="95.50">me..</text></g><g><title>predicates_of (218,081 samples, 0.13%)</title><rect x="35.2403%" y="101" width="0.1317%" height="15" fill="rgb(231,138,38)"/><text x="35.4903%" y="111.50"></text></g><g><title>predicates_defined_on (182,141 samples, 0.11%)</title><rect x="35.2620%" y="85" width="0.1100%" height="15" fill="rgb(231,145,46)"/><text x="35.5120%" y="95.50"></text></g><g><title>trait_impls_of (912,426 samples, 0.55%)</title><rect x="35.3731%" y="101" width="0.5509%" height="15" fill="rgb(251,118,11)"/><text x="35.6231%" y="111.50"></text></g><g><title>implementations_of_trait (258,580 samples, 0.16%)</title><rect x="35.7679%" y="85" width="0.1561%" height="15" fill="rgb(217,147,25)"/><text x="36.0179%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (199,520 samples, 0.12%)</title><rect x="35.8035%" y="69" width="0.1205%" height="15" fill="rgb(247,81,37)"/><text x="36.0535%" y="79.50"></text></g><g><title>coherent_trait (14,241,897 samples, 8.60%)</title><rect x="27.3436%" y="133" width="8.5986%" height="15" fill="rgb(209,12,38)"/><text x="27.5936%" y="143.50">coherent_tra..</text></g><g><title>specialization_graph_of (14,208,957 samples, 8.58%)</title><rect x="27.3635%" y="117" width="8.5787%" height="15" fill="rgb(227,1,9)"/><text x="27.6135%" y="127.50">specializati..</text></g><g><title>coherence_checking (14,344,758 samples, 8.66%)</title><rect x="27.3276%" y="149" width="8.6607%" height="15" fill="rgb(248,47,43)"/><text x="27.5776%" y="159.50">coherence_ch..</text></g><g><title>associated_item (471,247 samples, 0.28%)</title><rect x="46.7691%" y="85" width="0.2845%" height="15" fill="rgb(221,10,30)"/><text x="47.0191%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (397,547 samples, 0.24%)</title><rect x="46.8136%" y="69" width="0.2400%" height="15" fill="rgb(210,229,1)"/><text x="47.0636%" y="79.50"></text></g><g><title>associated_items (653,918 samples, 0.39%)</title><rect x="46.6798%" y="101" width="0.3948%" height="15" fill="rgb(222,148,37)"/><text x="46.9298%" y="111.50"></text></g><g><title>adt_dtorck_constraint (208,531 samples, 0.13%)</title><rect x="47.3457%" y="85" width="0.1259%" height="15" fill="rgb(234,67,33)"/><text x="47.5957%" y="95.50"></text></g><g><title>dropck_outlives (564,424 samples, 0.34%)</title><rect x="47.1384%" y="101" width="0.3408%" height="15" fill="rgb(247,98,35)"/><text x="47.3884%" y="111.50"></text></g><g><title>predicates_of (503,576 samples, 0.30%)</title><rect x="48.4801%" y="85" width="0.3040%" height="15" fill="rgb(247,138,52)"/><text x="48.7301%" y="95.50"></text></g><g><title>predicates_defined_on (432,734 samples, 0.26%)</title><rect x="48.5229%" y="69" width="0.2613%" height="15" fill="rgb(213,79,30)"/><text x="48.7729%" y="79.50"></text></g><g><title>trait_impls_of (171,684 samples, 0.10%)</title><rect x="48.8483%" y="85" width="0.1037%" height="15" fill="rgb(246,177,23)"/><text x="49.0983%" y="95.50"></text></g><g><title>evaluate_obligation (2,440,287 samples, 1.47%)</title><rect x="47.4792%" y="101" width="1.4733%" height="15" fill="rgb(230,62,27)"/><text x="47.7292%" y="111.50"></text></g><g><title>evaluate_obligation (374,774 samples, 0.23%)</title><rect x="49.4474%" y="85" width="0.2263%" height="15" fill="rgb(216,154,8)"/><text x="49.6974%" y="95.50"></text></g><g><title>method_autoderef_steps (718,516 samples, 0.43%)</title><rect x="49.2458%" y="101" width="0.4338%" height="15" fill="rgb(244,35,45)"/><text x="49.4958%" y="111.50"></text></g><g><title>predicates_of (263,303 samples, 0.16%)</title><rect x="49.7195%" y="101" width="0.1590%" height="15" fill="rgb(251,115,12)"/><text x="49.9695%" y="111.50"></text></g><g><title>predicates_defined_on (190,423 samples, 0.11%)</title><rect x="49.7635%" y="85" width="0.1150%" height="15" fill="rgb(240,54,50)"/><text x="50.0135%" y="95.50"></text></g><g><title>specializes (184,011 samples, 0.11%)</title><rect x="54.4561%" y="69" width="0.1111%" height="15" fill="rgb(233,84,52)"/><text x="54.7061%" y="79.50"></text></g><g><title>evaluate_obligation (1,497,215 samples, 0.90%)</title><rect x="53.6967%" y="85" width="0.9039%" height="15" fill="rgb(207,117,47)"/><text x="53.9467%" y="95.50"></text></g><g><title>typeck (8,449,402 samples, 5.10%)</title><rect x="49.9204%" y="101" width="5.1013%" height="15" fill="rgb(249,43,39)"/><text x="50.1704%" y="111.50">typeck</text></g><g><title>item_bodies_checking (31,528,396 samples, 19.04%)</title><rect x="36.0159%" y="149" width="19.0353%" height="15" fill="rgb(209,38,44)"/><text x="36.2659%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (31,524,866 samples, 19.03%)</title><rect x="36.0180%" y="133" width="19.0332%" height="15" fill="rgb(236,212,23)"/><text x="36.2680%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (31,405,281 samples, 18.96%)</title><rect x="36.0902%" y="117" width="18.9610%" height="15" fill="rgb(242,79,21)"/><text x="36.3402%" y="127.50">typeck</text></g><g><title>adt_destructor (331,313 samples, 0.20%)</title><rect x="56.5820%" y="117" width="0.2000%" height="15" fill="rgb(211,96,35)"/><text x="56.8320%" y="127.50"></text></g><g><title>coherent_trait (324,633 samples, 0.20%)</title><rect x="56.5861%" y="101" width="0.1960%" height="15" fill="rgb(253,215,40)"/><text x="56.8361%" y="111.50"></text></g><g><title>specialization_graph_of (322,843 samples, 0.19%)</title><rect x="56.5871%" y="85" width="0.1949%" height="15" fill="rgb(211,81,21)"/><text x="56.8371%" y="95.50"></text></g><g><title>item_types_checking (3,200,256 samples, 1.93%)</title><rect x="55.0512%" y="149" width="1.9322%" height="15" fill="rgb(208,190,38)"/><text x="55.3012%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,197,056 samples, 1.93%)</title><rect x="55.0531%" y="133" width="1.9302%" height="15" fill="rgb(235,213,38)"/><text x="55.3031%" y="143.50">c..</text></g><g><title>fn_sig (316,483 samples, 0.19%)</title><rect x="57.1791%" y="117" width="0.1911%" height="15" fill="rgb(237,122,38)"/><text x="57.4291%" y="127.50"></text></g><g><title>is_late_bound_map (334,844 samples, 0.20%)</title><rect x="57.4693%" y="101" width="0.2022%" height="15" fill="rgb(244,218,35)"/><text x="57.7193%" y="111.50"></text></g><g><title>resolve_lifetimes (306,784 samples, 0.19%)</title><rect x="57.4863%" y="85" width="0.1852%" height="15" fill="rgb(240,68,47)"/><text x="57.7363%" y="95.50"></text></g><g><title>generics_of (577,105 samples, 0.35%)</title><rect x="57.3702%" y="117" width="0.3484%" height="15" fill="rgb(210,16,53)"/><text x="57.6202%" y="127.50"></text></g><g><title>late_bound_vars_map (184,201 samples, 0.11%)</title><rect x="58.0773%" y="69" width="0.1112%" height="15" fill="rgb(235,124,12)"/><text x="58.3273%" y="79.50"></text></g><g><title>resolve_lifetimes (177,831 samples, 0.11%)</title><rect x="58.0811%" y="53" width="0.1074%" height="15" fill="rgb(224,169,11)"/><text x="58.3311%" y="63.50"></text></g><g><title>explicit_predicates_of (541,585 samples, 0.33%)</title><rect x="57.8761%" y="85" width="0.3270%" height="15" fill="rgb(250,166,2)"/><text x="58.1261%" y="95.50"></text></g><g><title>predicates_of (1,246,371 samples, 0.75%)</title><rect x="57.7658%" y="117" width="0.7525%" height="15" fill="rgb(242,216,29)"/><text x="58.0158%" y="127.50"></text></g><g><title>predicates_defined_on (1,176,531 samples, 0.71%)</title><rect x="57.8080%" y="101" width="0.7103%" height="15" fill="rgb(230,116,27)"/><text x="58.0580%" y="111.50"></text></g><g><title>inferred_outlives_of (522,206 samples, 0.32%)</title><rect x="58.2030%" y="85" width="0.3153%" height="15" fill="rgb(228,99,48)"/><text x="58.4530%" y="95.50"></text></g><g><title>inferred_outlives_crate (496,416 samples, 0.30%)</title><rect x="58.2186%" y="69" width="0.2997%" height="15" fill="rgb(253,11,6)"/><text x="58.4686%" y="79.50"></text></g><g><title>type_of (277,383 samples, 0.17%)</title><rect x="58.3509%" y="53" width="0.1675%" height="15" fill="rgb(247,143,39)"/><text x="58.6009%" y="63.50"></text></g><g><title>type_collecting (2,724,150 samples, 1.64%)</title><rect x="56.9845%" y="149" width="1.6447%" height="15" fill="rgb(236,97,10)"/><text x="57.2345%" y="159.50"></text></g><g><title>collect_mod_item_types (2,717,260 samples, 1.64%)</title><rect x="56.9887%" y="133" width="1.6405%" height="15" fill="rgb(233,208,19)"/><text x="57.2387%" y="143.50"></text></g><g><title>type_of (183,726 samples, 0.11%)</title><rect x="58.5183%" y="117" width="0.1109%" height="15" fill="rgb(216,164,2)"/><text x="58.7683%" y="127.50"></text></g><g><title>evaluate_obligation (751,359 samples, 0.45%)</title><rect x="60.6090%" y="117" width="0.4536%" height="15" fill="rgb(220,129,5)"/><text x="60.8590%" y="127.50"></text></g><g><title>implied_outlives_bounds (431,934 samples, 0.26%)</title><rect x="61.0633%" y="117" width="0.2608%" height="15" fill="rgb(242,17,10)"/><text x="61.3133%" y="127.50"></text></g><g><title>param_env (512,573 samples, 0.31%)</title><rect x="61.3241%" y="117" width="0.3095%" height="15" fill="rgb(242,107,0)"/><text x="61.5741%" y="127.50"></text></g><g><title>region_scope_tree (451,754 samples, 0.27%)</title><rect x="61.6579%" y="117" width="0.2727%" height="15" fill="rgb(251,28,31)"/><text x="61.9079%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,216,779 samples, 3.15%)</title><rect x="58.7974%" y="133" width="3.1496%" height="15" fill="rgb(233,223,10)"/><text x="59.0474%" y="143.50">che..</text></g><g><title>implied_outlives_bounds (246,934 samples, 0.15%)</title><rect x="63.7334%" y="117" width="0.1491%" height="15" fill="rgb(215,21,27)"/><text x="63.9834%" y="127.50"></text></g><g><title>param_env (448,844 samples, 0.27%)</title><rect x="63.8824%" y="117" width="0.2710%" height="15" fill="rgb(232,23,21)"/><text x="64.1324%" y="127.50"></text></g><g><title>analysis (100,038,192 samples, 60.40%)</title><rect x="4.0259%" y="181" width="60.3982%" height="15" fill="rgb(244,5,23)"/><text x="4.2759%" y="191.50">analysis</text></g><g><title>type_check_crate (61,521,117 samples, 37.14%)</title><rect x="27.2806%" y="165" width="37.1434%" height="15" fill="rgb(226,81,46)"/><text x="27.5306%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,590,416 samples, 5.79%)</title><rect x="58.6338%" y="149" width="5.7902%" height="15" fill="rgb(247,70,30)"/><text x="58.8838%" y="159.50">wf_chec..</text></g><g><title>check_item_well_formed (4,102,701 samples, 2.48%)</title><rect x="61.9470%" y="133" width="2.4770%" height="15" fill="rgb(212,68,19)"/><text x="62.1970%" y="143.50">ch..</text></g><g><title>codegen_module (230,313 samples, 0.14%)</title><rect x="64.7076%" y="165" width="0.1391%" height="15" fill="rgb(240,187,13)"/><text x="64.9576%" y="175.50"></text></g><g><title>codegen_crate (839,749 samples, 0.51%)</title><rect x="64.4322%" y="181" width="0.5070%" height="15" fill="rgb(223,113,26)"/><text x="64.6822%" y="191.50"></text></g><g><title>codegen_module_optimize (896,220 samples, 0.54%)</title><rect x="64.9392%" y="181" width="0.5411%" height="15" fill="rgb(206,192,2)"/><text x="65.1892%" y="191.50"></text></g><g><title>LLVM_module_optimize (330,394 samples, 0.20%)</title><rect x="65.2808%" y="165" width="0.1995%" height="15" fill="rgb(241,108,4)"/><text x="65.5308%" y="175.50"></text></g><g><title>LLVM_lto_optimize (233,813 samples, 0.14%)</title><rect x="65.7403%" y="165" width="0.1412%" height="15" fill="rgb(247,173,49)"/><text x="65.9903%" y="175.50"></text></g><g><title>LLVM_module_codegen (3,555,919 samples, 2.15%)</title><rect x="65.8815%" y="165" width="2.1469%" height="15" fill="rgb(224,114,35)"/><text x="66.1315%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (3,516,919 samples, 2.12%)</title><rect x="65.9051%" y="149" width="2.1233%" height="15" fill="rgb(245,159,27)"/><text x="66.1551%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (4,256,517 samples, 2.57%)</title><rect x="65.4803%" y="181" width="2.5699%" height="15" fill="rgb(245,172,44)"/><text x="65.7303%" y="191.50">co..</text></g><g><title>macro_expand_crate (14,068,685 samples, 8.49%)</title><rect x="68.3362%" y="165" width="8.4940%" height="15" fill="rgb(236,23,11)"/><text x="68.5862%" y="175.50">macro_expand..</text></g><g><title>expand_crate (14,050,505 samples, 8.48%)</title><rect x="68.3472%" y="149" width="8.4830%" height="15" fill="rgb(205,117,38)"/><text x="68.5972%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,526,717 samples, 1.53%)</title><rect x="75.3047%" y="133" width="1.5255%" height="15" fill="rgb(237,72,25)"/><text x="75.5547%" y="143.50"></text></g><g><title>metadata_register_crate (928,930 samples, 0.56%)</title><rect x="76.2694%" y="117" width="0.5608%" height="15" fill="rgb(244,70,9)"/><text x="76.5194%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (695,578 samples, 0.42%)</title><rect x="76.8323%" y="165" width="0.4200%" height="15" fill="rgb(217,125,39)"/><text x="77.0823%" y="175.50"></text></g><g><title>late_resolve_crate (1,377,606 samples, 0.83%)</title><rect x="77.3380%" y="149" width="0.8317%" height="15" fill="rgb(235,36,10)"/><text x="77.5880%" y="159.50"></text></g><g><title>configure_and_expand (16,863,375 samples, 10.18%)</title><rect x="68.0502%" y="181" width="10.1813%" height="15" fill="rgb(251,123,47)"/><text x="68.3002%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (1,621,899 samples, 0.98%)</title><rect x="77.2522%" y="165" width="0.9792%" height="15" fill="rgb(221,13,13)"/><text x="77.5022%" y="175.50"></text></g><g><title>drop_ast (270,243 samples, 0.16%)</title><rect x="78.2315%" y="181" width="0.1632%" height="15" fill="rgb(238,131,9)"/><text x="78.4815%" y="191.50"></text></g><g><title>early_lint_checks (621,587 samples, 0.38%)</title><rect x="78.4044%" y="181" width="0.3753%" height="15" fill="rgb(211,50,8)"/><text x="78.6544%" y="191.50"></text></g><g><title>free_global_ctxt (4,091,955 samples, 2.47%)</title><rect x="78.7797%" y="181" width="2.4705%" height="15" fill="rgb(245,182,24)"/><text x="79.0297%" y="191.50">fr..</text></g><g><title>exported_symbols (179,762 samples, 0.11%)</title><rect x="82.5988%" y="165" width="0.1085%" height="15" fill="rgb(242,14,37)"/><text x="82.8488%" y="175.50"></text></g><g><title>reachable_non_generics (171,952 samples, 0.10%)</title><rect x="82.6035%" y="149" width="0.1038%" height="15" fill="rgb(246,228,12)"/><text x="82.8535%" y="159.50"></text></g><g><title>layout_of (218,921 samples, 0.13%)</title><rect x="85.6539%" y="117" width="0.1322%" height="15" fill="rgb(213,55,15)"/><text x="85.9039%" y="127.50"></text></g><g><title>layout_of (538,326 samples, 0.33%)</title><rect x="85.4786%" y="133" width="0.3250%" height="15" fill="rgb(209,9,3)"/><text x="85.7286%" y="143.50"></text></g><g><title>layout_of (1,175,663 samples, 0.71%)</title><rect x="85.1101%" y="149" width="0.7098%" height="15" fill="rgb(230,59,30)"/><text x="85.3601%" y="159.50"></text></g><g><title>is_copy_raw (387,606 samples, 0.23%)</title><rect x="88.1745%" y="117" width="0.2340%" height="15" fill="rgb(209,121,21)"/><text x="88.4245%" y="127.50"></text></g><g><title>evaluate_obligation (279,895 samples, 0.17%)</title><rect x="88.2396%" y="101" width="0.1690%" height="15" fill="rgb(220,109,13)"/><text x="88.4896%" y="111.50"></text></g><g><title>needs_drop_raw (449,556 samples, 0.27%)</title><rect x="88.1385%" y="133" width="0.2714%" height="15" fill="rgb(232,18,1)"/><text x="88.3885%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,386,226 samples, 2.65%)</title><rect x="85.8199%" y="149" width="2.6482%" height="15" fill="rgb(215,41,42)"/><text x="86.0699%" y="159.50">mi..</text></g><g><title>optimized_mir (9,409,801 samples, 5.68%)</title><rect x="82.7988%" y="165" width="5.6812%" height="15" fill="rgb(224,123,36)"/><text x="83.0488%" y="175.50">optimiz..</text></g><g><title>generate_crate_metadata (12,061,903 samples, 7.28%)</title><rect x="81.2502%" y="181" width="7.2824%" height="15" fill="rgb(240,125,3)"/><text x="81.5002%" y="191.50">generate_c..</text></g><g><title>hir_lowering (2,744,360 samples, 1.66%)</title><rect x="88.5326%" y="181" width="1.6569%" height="15" fill="rgb(205,98,50)"/><text x="88.7826%" y="191.50"></text></g><g><title>finish_ongoing_codegen (1,034,711 samples, 0.62%)</title><rect x="90.1991%" y="165" width="0.6247%" height="15" fill="rgb(205,185,37)"/><text x="90.4491%" y="175.50"></text></g><g><title>link_crate (991,991 samples, 0.60%)</title><rect x="90.8238%" y="165" width="0.5989%" height="15" fill="rgb(238,207,15)"/><text x="91.0738%" y="175.50"></text></g><g><title>link_binary (960,050 samples, 0.58%)</title><rect x="90.8431%" y="149" width="0.5796%" height="15" fill="rgb(213,199,42)"/><text x="91.0931%" y="159.50"></text></g><g><title>link_rlib (672,347 samples, 0.41%)</title><rect x="91.0168%" y="133" width="0.4059%" height="15" fill="rgb(235,201,11)"/><text x="91.2668%" y="143.50"></text></g><g><title>link (2,050,513 samples, 1.24%)</title><rect x="90.1895%" y="181" width="1.2380%" height="15" fill="rgb(207,46,11)"/><text x="90.4395%" y="191.50"></text></g><g><title>parse_crate (12,394,117 samples, 7.48%)</title><rect x="91.4275%" y="181" width="7.4830%" height="15" fill="rgb(241,35,35)"/><text x="91.6775%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (223,303 samples, 0.13%)</title><rect x="98.9158%" y="181" width="0.1348%" height="15" fill="rgb(243,32,47)"/><text x="99.1658%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,058,442 samples, 0.64%)</title><rect x="99.0507%" y="181" width="0.6390%" height="15" fill="rgb(247,202,23)"/><text x="99.3007%" y="191.50"></text></g><g><title>all (165,631,205 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (165,631,205 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (438,815 samples, 0.26%)</title><rect x="99.7351%" y="181" width="0.2649%" height="15" fill="rgb(222,74,54)"/><text x="99.9851%" y="191.50"></text></g></svg></svg>