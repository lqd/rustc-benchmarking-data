<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,572,114 samples, 8.66%)</title><rect x="0.8829%" y="261" width="8.6564%" height="15" fill="rgb(227,0,7)"/><text x="1.1329%" y="271.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (123,572 samples, 0.16%)</title><rect x="9.3765%" y="245" width="0.1628%" height="15" fill="rgb(217,0,24)"/><text x="9.6265%" y="255.50"></text></g><g><title>LLVM_thin_lto_global_analysis (110,522 samples, 0.15%)</title><rect x="9.3937%" y="229" width="0.1456%" height="15" fill="rgb(221,193,54)"/><text x="9.6437%" y="239.50"></text></g><g><title>param_env (85,091 samples, 0.11%)</title><rect x="12.9535%" y="181" width="0.1121%" height="15" fill="rgb(248,212,6)"/><text x="13.2035%" y="191.50"></text></g><g><title>codegen_fn_attrs (108,341 samples, 0.14%)</title><rect x="13.2073%" y="165" width="0.1427%" height="15" fill="rgb(208,68,35)"/><text x="13.4573%" y="175.50"></text></g><g><title>adt_drop_tys (85,401 samples, 0.11%)</title><rect x="14.1321%" y="117" width="0.1125%" height="15" fill="rgb(232,128,0)"/><text x="14.3821%" y="127.50"></text></g><g><title>is_copy_raw (107,011 samples, 0.14%)</title><rect x="14.2446%" y="117" width="0.1409%" height="15" fill="rgb(207,160,47)"/><text x="14.4946%" y="127.50"></text></g><g><title>evaluate_obligation (88,980 samples, 0.12%)</title><rect x="14.2683%" y="101" width="0.1172%" height="15" fill="rgb(228,23,34)"/><text x="14.5183%" y="111.50"></text></g><g><title>param_env (89,872 samples, 0.12%)</title><rect x="14.3855%" y="117" width="0.1184%" height="15" fill="rgb(218,30,26)"/><text x="14.6355%" y="127.50"></text></g><g><title>adt_drop_tys (319,904 samples, 0.42%)</title><rect x="14.0903%" y="133" width="0.4214%" height="15" fill="rgb(220,122,19)"/><text x="14.3403%" y="143.50"></text></g><g><title>needs_drop_raw (869,661 samples, 1.15%)</title><rect x="14.0314%" y="149" width="1.1455%" height="15" fill="rgb(250,228,42)"/><text x="14.2814%" y="159.50"></text></g><g><title>is_copy_raw (505,057 samples, 0.67%)</title><rect x="14.5116%" y="133" width="0.6652%" height="15" fill="rgb(240,193,28)"/><text x="14.7616%" y="143.50"></text></g><g><title>evaluate_obligation (449,396 samples, 0.59%)</title><rect x="14.5849%" y="117" width="0.5919%" height="15" fill="rgb(216,20,37)"/><text x="14.8349%" y="127.50"></text></g><g><title>trait_impls_of (127,491 samples, 0.17%)</title><rect x="15.0089%" y="101" width="0.1679%" height="15" fill="rgb(206,188,39)"/><text x="15.2589%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (83,620 samples, 0.11%)</title><rect x="15.2665%" y="133" width="0.1101%" height="15" fill="rgb(217,207,13)"/><text x="15.5165%" y="143.50"></text></g><g><title>impl_parent (214,162 samples, 0.28%)</title><rect x="15.7806%" y="117" width="0.2821%" height="15" fill="rgb(231,73,38)"/><text x="16.0306%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (149,401 samples, 0.20%)</title><rect x="15.8659%" y="101" width="0.1968%" height="15" fill="rgb(225,20,46)"/><text x="16.1159%" y="111.50"></text></g><g><title>specialization_graph_of (1,286,954 samples, 1.70%)</title><rect x="15.4162%" y="133" width="1.6951%" height="15" fill="rgb(210,31,41)"/><text x="15.6662%" y="143.50"></text></g><g><title>impl_trait_ref (796,089 samples, 1.05%)</title><rect x="16.0627%" y="117" width="1.0486%" height="15" fill="rgb(221,200,47)"/><text x="16.3127%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (733,027 samples, 0.97%)</title><rect x="16.1458%" y="101" width="0.9655%" height="15" fill="rgb(226,26,5)"/><text x="16.3958%" y="111.50"></text></g><g><title>resolve_instance (1,492,598 samples, 1.97%)</title><rect x="15.1768%" y="149" width="1.9660%" height="15" fill="rgb(249,33,26)"/><text x="15.4268%" y="159.50">r..</text></g><g><title>thir_body (153,960 samples, 0.20%)</title><rect x="17.1499%" y="149" width="0.2028%" height="15" fill="rgb(235,183,28)"/><text x="17.3999%" y="159.50"></text></g><g><title>mir_const (3,557,420 samples, 4.69%)</title><rect x="12.6712%" y="197" width="4.6856%" height="15" fill="rgb(221,5,38)"/><text x="12.9212%" y="207.50">mir_c..</text></g><g><title>unsafety_check_result (3,257,927 samples, 4.29%)</title><rect x="13.0656%" y="181" width="4.2911%" height="15" fill="rgb(247,18,42)"/><text x="13.3156%" y="191.50">unsaf..</text></g><g><title>mir_built (3,042,055 samples, 4.01%)</title><rect x="13.3500%" y="165" width="4.0068%" height="15" fill="rgb(241,131,45)"/><text x="13.6000%" y="175.50">mir_..</text></g><g><title>mir_promoted (3,760,412 samples, 4.95%)</title><rect x="12.4179%" y="213" width="4.9530%" height="15" fill="rgb(249,31,29)"/><text x="12.6679%" y="223.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (140,051 samples, 0.18%)</title><rect x="17.3708%" y="213" width="0.1845%" height="15" fill="rgb(225,111,53)"/><text x="17.6208%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (117,011 samples, 0.15%)</title><rect x="17.5553%" y="213" width="0.1541%" height="15" fill="rgb(238,160,17)"/><text x="17.8053%" y="223.50"></text></g><g><title>type_op_prove_predicate (437,967 samples, 0.58%)</title><rect x="17.7730%" y="213" width="0.5769%" height="15" fill="rgb(214,148,48)"/><text x="18.0230%" y="223.50"></text></g><g><title>MIR_borrow_checking (6,500,343 samples, 8.56%)</title><rect x="9.7900%" y="245" width="8.5618%" height="15" fill="rgb(232,36,49)"/><text x="10.0400%" y="255.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (6,482,563 samples, 8.54%)</title><rect x="9.8135%" y="229" width="8.5384%" height="15" fill="rgb(209,103,24)"/><text x="10.0635%" y="239.50">mir_borrowck</text></g><g><title>hir_module_items (147,002 samples, 0.19%)</title><rect x="18.3588%" y="245" width="0.1936%" height="15" fill="rgb(229,88,8)"/><text x="18.6088%" y="255.50"></text></g><g><title>get_lang_items (106,381 samples, 0.14%)</title><rect x="18.8612%" y="197" width="0.1401%" height="15" fill="rgb(213,181,19)"/><text x="19.1112%" y="207.50"></text></g><g><title>codegen_fn_attrs (95,451 samples, 0.13%)</title><rect x="19.1076%" y="181" width="0.1257%" height="15" fill="rgb(254,191,54)"/><text x="19.3576%" y="191.50"></text></g><g><title>should_inherit_track_caller (179,501 samples, 0.24%)</title><rect x="19.0014%" y="197" width="0.2364%" height="15" fill="rgb(241,83,37)"/><text x="19.2514%" y="207.50"></text></g><g><title>codegen_fn_attrs (399,054 samples, 0.53%)</title><rect x="18.7590%" y="213" width="0.5256%" height="15" fill="rgb(233,36,39)"/><text x="19.0090%" y="223.50"></text></g><g><title>check_mod_attrs (527,816 samples, 0.70%)</title><rect x="18.5898%" y="229" width="0.6952%" height="15" fill="rgb(226,3,54)"/><text x="18.8398%" y="239.50"></text></g><g><title>lookup_deprecation_entry (114,812 samples, 0.15%)</title><rect x="19.5595%" y="213" width="0.1512%" height="15" fill="rgb(245,192,40)"/><text x="19.8095%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (319,524 samples, 0.42%)</title><rect x="19.4132%" y="229" width="0.4209%" height="15" fill="rgb(238,167,29)"/><text x="19.6632%" y="239.50"></text></g><g><title>misc_checking_1 (1,015,332 samples, 1.34%)</title><rect x="18.5531%" y="245" width="1.3373%" height="15" fill="rgb(232,182,51)"/><text x="18.8031%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (278,923 samples, 0.37%)</title><rect x="19.8921%" y="229" width="0.3674%" height="15" fill="rgb(231,60,39)"/><text x="20.1421%" y="239.50"></text></g><g><title>check_mod_liveness (258,323 samples, 0.34%)</title><rect x="19.9193%" y="213" width="0.3402%" height="15" fill="rgb(208,69,12)"/><text x="20.1693%" y="223.50"></text></g><g><title>type_uninhabited_from (184,903 samples, 0.24%)</title><rect x="20.0160%" y="197" width="0.2435%" height="15" fill="rgb(235,93,37)"/><text x="20.2660%" y="207.50"></text></g><g><title>type_uninhabited_from (164,922 samples, 0.22%)</title><rect x="20.0423%" y="181" width="0.2172%" height="15" fill="rgb(213,116,39)"/><text x="20.2923%" y="191.50"></text></g><g><title>type_uninhabited_from (142,982 samples, 0.19%)</title><rect x="20.0712%" y="165" width="0.1883%" height="15" fill="rgb(222,207,29)"/><text x="20.3212%" y="175.50"></text></g><g><title>misc_checking_2 (407,194 samples, 0.54%)</title><rect x="19.8904%" y="245" width="0.5363%" height="15" fill="rgb(206,96,30)"/><text x="20.1404%" y="255.50"></text></g><g><title>match_checking (126,951 samples, 0.17%)</title><rect x="20.2595%" y="229" width="0.1672%" height="15" fill="rgb(218,138,4)"/><text x="20.5095%" y="239.50"></text></g><g><title>check_match (121,011 samples, 0.16%)</title><rect x="20.2673%" y="213" width="0.1594%" height="15" fill="rgb(250,191,14)"/><text x="20.5173%" y="223.50"></text></g><g><title>death_checking (132,961 samples, 0.18%)</title><rect x="20.5079%" y="229" width="0.1751%" height="15" fill="rgb(239,60,40)"/><text x="20.7579%" y="239.50"></text></g><g><title>trait_impls_of (218,372 samples, 0.29%)</title><rect x="21.3750%" y="197" width="0.2876%" height="15" fill="rgb(206,27,48)"/><text x="21.6250%" y="207.50"></text></g><g><title>crate_lints (3,203,186 samples, 4.22%)</title><rect x="20.6850%" y="213" width="4.2190%" height="15" fill="rgb(225,35,8)"/><text x="20.9350%" y="223.50">crate..</text></g><g><title>type_of (2,457,359 samples, 3.24%)</title><rect x="21.6673%" y="197" width="3.2367%" height="15" fill="rgb(250,213,24)"/><text x="21.9173%" y="207.50">typ..</text></g><g><title>metadata_decode_entry_type_of (2,201,627 samples, 2.90%)</title><rect x="22.0042%" y="181" width="2.8998%" height="15" fill="rgb(247,123,22)"/><text x="22.2542%" y="191.50">me..</text></g><g><title>lint_checking (3,281,417 samples, 4.32%)</title><rect x="20.6831%" y="229" width="4.3221%" height="15" fill="rgb(231,138,38)"/><text x="20.9331%" y="239.50">lint_..</text></g><g><title>module_lints (76,781 samples, 0.10%)</title><rect x="24.9040%" y="213" width="0.1011%" height="15" fill="rgb(231,145,46)"/><text x="25.1540%" y="223.50"></text></g><g><title>privacy_checking_modules (170,642 samples, 0.22%)</title><rect x="25.0857%" y="229" width="0.2248%" height="15" fill="rgb(251,118,11)"/><text x="25.3357%" y="239.50"></text></g><g><title>check_mod_privacy (169,072 samples, 0.22%)</title><rect x="25.0877%" y="213" width="0.2227%" height="15" fill="rgb(217,147,25)"/><text x="25.3377%" y="223.50"></text></g><g><title>misc_checking_3 (3,715,142 samples, 4.89%)</title><rect x="20.4267%" y="245" width="4.8933%" height="15" fill="rgb(247,81,37)"/><text x="20.6767%" y="255.50">misc_c..</text></g><g><title>impl_trait_ref (146,951 samples, 0.19%)</title><rect x="25.6667%" y="181" width="0.1936%" height="15" fill="rgb(209,12,38)"/><text x="25.9167%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (130,731 samples, 0.17%)</title><rect x="25.6880%" y="165" width="0.1722%" height="15" fill="rgb(227,1,9)"/><text x="25.9380%" y="175.50"></text></g><g><title>coherent_trait (457,305 samples, 0.60%)</title><rect x="25.3918%" y="213" width="0.6023%" height="15" fill="rgb(248,47,43)"/><text x="25.6418%" y="223.50"></text></g><g><title>specialization_graph_of (447,405 samples, 0.59%)</title><rect x="25.4048%" y="197" width="0.5893%" height="15" fill="rgb(221,10,30)"/><text x="25.6548%" y="207.50"></text></g><g><title>trait_impls_of (101,642 samples, 0.13%)</title><rect x="25.8602%" y="181" width="0.1339%" height="15" fill="rgb(210,229,1)"/><text x="26.1102%" y="191.50"></text></g><g><title>coherence_checking (535,276 samples, 0.71%)</title><rect x="25.3668%" y="229" width="0.7050%" height="15" fill="rgb(222,148,37)"/><text x="25.6168%" y="239.50"></text></g><g><title>adt_def (86,691 samples, 0.11%)</title><rect x="32.3544%" y="165" width="0.1142%" height="15" fill="rgb(234,67,33)"/><text x="32.6044%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (84,671 samples, 0.11%)</title><rect x="32.3571%" y="149" width="0.1115%" height="15" fill="rgb(247,98,35)"/><text x="32.6071%" y="159.50"></text></g><g><title>adt_sized_constraint (101,711 samples, 0.13%)</title><rect x="32.3431%" y="181" width="0.1340%" height="15" fill="rgb(247,138,52)"/><text x="32.5931%" y="191.50"></text></g><g><title>associated_item (355,895 samples, 0.47%)</title><rect x="32.6855%" y="165" width="0.4688%" height="15" fill="rgb(213,79,30)"/><text x="32.9355%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (270,542 samples, 0.36%)</title><rect x="32.7979%" y="149" width="0.3563%" height="15" fill="rgb(246,177,23)"/><text x="33.0479%" y="159.50"></text></g><g><title>associated_items (521,117 samples, 0.69%)</title><rect x="32.5028%" y="181" width="0.6864%" height="15" fill="rgb(230,62,27)"/><text x="32.7528%" y="191.50"></text></g><g><title>adt_def (119,440 samples, 0.16%)</title><rect x="33.8775%" y="85" width="0.1573%" height="15" fill="rgb(216,154,8)"/><text x="34.1275%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (118,820 samples, 0.16%)</title><rect x="33.8783%" y="69" width="0.1565%" height="15" fill="rgb(244,35,45)"/><text x="34.1283%" y="79.50"></text></g><g><title>item_attrs (107,450 samples, 0.14%)</title><rect x="33.8933%" y="53" width="0.1415%" height="15" fill="rgb(251,115,12)"/><text x="34.1433%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (106,700 samples, 0.14%)</title><rect x="33.8943%" y="37" width="0.1405%" height="15" fill="rgb(240,54,50)"/><text x="34.1443%" y="47.50"></text></g><g><title>adt_dtorck_constraint (128,201 samples, 0.17%)</title><rect x="33.8714%" y="101" width="0.1689%" height="15" fill="rgb(233,84,52)"/><text x="34.1214%" y="111.50"></text></g><g><title>adt_dtorck_constraint (181,782 samples, 0.24%)</title><rect x="33.8069%" y="117" width="0.2394%" height="15" fill="rgb(207,117,47)"/><text x="34.0569%" y="127.50"></text></g><g><title>adt_dtorck_constraint (271,664 samples, 0.36%)</title><rect x="33.7044%" y="133" width="0.3578%" height="15" fill="rgb(249,43,39)"/><text x="33.9544%" y="143.50"></text></g><g><title>adt_dtorck_constraint (346,435 samples, 0.46%)</title><rect x="33.6139%" y="149" width="0.4563%" height="15" fill="rgb(209,38,44)"/><text x="33.8639%" y="159.50"></text></g><g><title>adt_dtorck_constraint (477,836 samples, 0.63%)</title><rect x="33.4849%" y="165" width="0.6294%" height="15" fill="rgb(236,212,23)"/><text x="33.7349%" y="175.50"></text></g><g><title>eval_to_const_value_raw (163,372 samples, 0.22%)</title><rect x="34.1143%" y="165" width="0.2152%" height="15" fill="rgb(242,79,21)"/><text x="34.3643%" y="175.50"></text></g><g><title>eval_to_const_value_raw (149,182 samples, 0.20%)</title><rect x="34.1330%" y="149" width="0.1965%" height="15" fill="rgb(211,96,35)"/><text x="34.3830%" y="159.50"></text></g><g><title>eval_to_allocation_raw (147,362 samples, 0.19%)</title><rect x="34.1354%" y="133" width="0.1941%" height="15" fill="rgb(253,215,40)"/><text x="34.3854%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (78,431 samples, 0.10%)</title><rect x="34.2261%" y="117" width="0.1033%" height="15" fill="rgb(211,81,21)"/><text x="34.4761%" y="127.50"></text></g><g><title>normalize_projection_ty (433,415 samples, 0.57%)</title><rect x="34.3324%" y="165" width="0.5709%" height="15" fill="rgb(208,190,38)"/><text x="34.5824%" y="175.50"></text></g><g><title>dropck_outlives (1,253,535 samples, 1.65%)</title><rect x="33.2576%" y="181" width="1.6511%" height="15" fill="rgb(235,213,38)"/><text x="33.5076%" y="191.50"></text></g><g><title>adt_def (82,730 samples, 0.11%)</title><rect x="35.6456%" y="149" width="0.1090%" height="15" fill="rgb(237,122,38)"/><text x="35.8956%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (81,110 samples, 0.11%)</title><rect x="35.6477%" y="133" width="0.1068%" height="15" fill="rgb(244,218,35)"/><text x="35.8977%" y="143.50"></text></g><g><title>adt_sized_constraint (135,181 samples, 0.18%)</title><rect x="35.6343%" y="165" width="0.1781%" height="15" fill="rgb(240,68,47)"/><text x="35.8843%" y="175.50"></text></g><g><title>evaluate_obligation (1,193,675 samples, 1.57%)</title><rect x="34.9086%" y="181" width="1.5722%" height="15" fill="rgb(210,16,53)"/><text x="35.1586%" y="191.50"></text></g><g><title>trait_impls_of (406,566 samples, 0.54%)</title><rect x="35.9454%" y="165" width="0.5355%" height="15" fill="rgb(235,124,12)"/><text x="36.1954%" y="175.50"></text></g><g><title>implementations_of_trait (139,122 samples, 0.18%)</title><rect x="36.2976%" y="149" width="0.1832%" height="15" fill="rgb(224,169,11)"/><text x="36.5476%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (94,201 samples, 0.12%)</title><rect x="36.3568%" y="133" width="0.1241%" height="15" fill="rgb(250,166,2)"/><text x="36.6068%" y="143.50"></text></g><g><title>fn_sig (127,304 samples, 0.17%)</title><rect x="36.5087%" y="181" width="0.1677%" height="15" fill="rgb(242,216,29)"/><text x="36.7587%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (115,964 samples, 0.15%)</title><rect x="36.5236%" y="165" width="0.1527%" height="15" fill="rgb(230,116,27)"/><text x="36.7736%" y="175.50"></text></g><g><title>generics_of (78,481 samples, 0.10%)</title><rect x="36.6764%" y="181" width="0.1034%" height="15" fill="rgb(228,99,48)"/><text x="36.9264%" y="191.50"></text></g><g><title>item_attrs (110,841 samples, 0.15%)</title><rect x="36.9666%" y="181" width="0.1460%" height="15" fill="rgb(253,11,6)"/><text x="37.2166%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,361 samples, 0.14%)</title><rect x="36.9738%" y="165" width="0.1388%" height="15" fill="rgb(247,143,39)"/><text x="37.2238%" y="175.50"></text></g><g><title>method_autoderef_steps (177,352 samples, 0.23%)</title><rect x="37.1733%" y="181" width="0.2336%" height="15" fill="rgb(236,97,10)"/><text x="37.4233%" y="191.50"></text></g><g><title>evaluate_obligation (125,342 samples, 0.17%)</title><rect x="37.2418%" y="165" width="0.1651%" height="15" fill="rgb(233,208,19)"/><text x="37.4918%" y="175.50"></text></g><g><title>explicit_predicates_of (136,623 samples, 0.18%)</title><rect x="37.6578%" y="149" width="0.1800%" height="15" fill="rgb(216,164,2)"/><text x="37.9078%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (116,252 samples, 0.15%)</title><rect x="37.6847%" y="133" width="0.1531%" height="15" fill="rgb(220,129,5)"/><text x="37.9347%" y="143.50"></text></g><g><title>predicates_of (351,215 samples, 0.46%)</title><rect x="37.4417%" y="181" width="0.4626%" height="15" fill="rgb(242,17,10)"/><text x="37.6917%" y="191.50"></text></g><g><title>predicates_defined_on (260,364 samples, 0.34%)</title><rect x="37.5613%" y="165" width="0.3429%" height="15" fill="rgb(242,107,0)"/><text x="37.8113%" y="175.50"></text></g><g><title>type_of (84,810 samples, 0.11%)</title><rect x="37.9895%" y="181" width="0.1117%" height="15" fill="rgb(251,28,31)"/><text x="38.2395%" y="191.50"></text></g><g><title>item_bodies_checking (9,154,433 samples, 12.06%)</title><rect x="26.1036%" y="229" width="12.0576%" height="15" fill="rgb(233,223,10)"/><text x="26.3536%" y="239.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (9,151,542 samples, 12.05%)</title><rect x="26.1074%" y="213" width="12.0538%" height="15" fill="rgb(215,21,27)"/><text x="26.3574%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (9,135,111 samples, 12.03%)</title><rect x="26.1290%" y="197" width="12.0322%" height="15" fill="rgb(232,23,21)"/><text x="26.3790%" y="207.50">typeck</text></g><g><title>impl_parent (160,394 samples, 0.21%)</title><rect x="39.0373%" y="149" width="0.2113%" height="15" fill="rgb(244,5,23)"/><text x="39.2873%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (105,413 samples, 0.14%)</title><rect x="39.1097%" y="133" width="0.1388%" height="15" fill="rgb(226,81,46)"/><text x="39.3597%" y="143.50"></text></g><g><title>impl_trait_ref (649,307 samples, 0.86%)</title><rect x="39.2486%" y="149" width="0.8552%" height="15" fill="rgb(247,70,30)"/><text x="39.4986%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (585,747 samples, 0.77%)</title><rect x="39.3323%" y="133" width="0.7715%" height="15" fill="rgb(212,68,19)"/><text x="39.5823%" y="143.50"></text></g><g><title>adt_destructor (1,105,882 samples, 1.46%)</title><rect x="38.7337%" y="197" width="1.4566%" height="15" fill="rgb(240,187,13)"/><text x="38.9837%" y="207.50"></text></g><g><title>coherent_trait (1,096,642 samples, 1.44%)</title><rect x="38.7459%" y="181" width="1.4444%" height="15" fill="rgb(223,113,26)"/><text x="38.9959%" y="191.50"></text></g><g><title>specialization_graph_of (1,093,182 samples, 1.44%)</title><rect x="38.7505%" y="165" width="1.4399%" height="15" fill="rgb(206,192,2)"/><text x="39.0005%" y="175.50"></text></g><g><title>item_types_checking (1,736,850 samples, 2.29%)</title><rect x="38.1612%" y="229" width="2.2877%" height="15" fill="rgb(241,108,4)"/><text x="38.4112%" y="239.50">i..</text></g><g><title>check_mod_item_types (1,732,910 samples, 2.28%)</title><rect x="38.1664%" y="213" width="2.2825%" height="15" fill="rgb(247,173,49)"/><text x="38.4164%" y="223.50">c..</text></g><g><title>type_of (91,631 samples, 0.12%)</title><rect x="40.3282%" y="197" width="0.1207%" height="15" fill="rgb(224,114,35)"/><text x="40.5782%" y="207.50"></text></g><g><title>fn_sig (184,773 samples, 0.24%)</title><rect x="40.6482%" y="197" width="0.2434%" height="15" fill="rgb(245,159,27)"/><text x="40.8982%" y="207.50"></text></g><g><title>generics_of (93,981 samples, 0.12%)</title><rect x="40.8916%" y="197" width="0.1238%" height="15" fill="rgb(245,172,44)"/><text x="41.1416%" y="207.50"></text></g><g><title>late_bound_vars_map (218,144 samples, 0.29%)</title><rect x="41.3582%" y="149" width="0.2873%" height="15" fill="rgb(236,23,11)"/><text x="41.6082%" y="159.50"></text></g><g><title>resolve_lifetimes (196,594 samples, 0.26%)</title><rect x="41.3866%" y="133" width="0.2589%" height="15" fill="rgb(205,117,38)"/><text x="41.6366%" y="143.50"></text></g><g><title>explicit_predicates_of (421,985 samples, 0.56%)</title><rect x="41.1030%" y="165" width="0.5558%" height="15" fill="rgb(237,72,25)"/><text x="41.3530%" y="175.50"></text></g><g><title>predicates_of (729,718 samples, 0.96%)</title><rect x="41.0300%" y="197" width="0.9611%" height="15" fill="rgb(244,70,9)"/><text x="41.2800%" y="207.50"></text></g><g><title>predicates_defined_on (709,848 samples, 0.93%)</title><rect x="41.0562%" y="181" width="0.9350%" height="15" fill="rgb(217,125,39)"/><text x="41.3062%" y="191.50"></text></g><g><title>inferred_outlives_of (252,303 samples, 0.33%)</title><rect x="41.6588%" y="165" width="0.3323%" height="15" fill="rgb(235,36,10)"/><text x="41.9088%" y="175.50"></text></g><g><title>inferred_outlives_crate (239,683 samples, 0.32%)</title><rect x="41.6754%" y="149" width="0.3157%" height="15" fill="rgb(251,123,47)"/><text x="41.9254%" y="159.50"></text></g><g><title>type_of (103,121 samples, 0.14%)</title><rect x="41.8553%" y="133" width="0.1358%" height="15" fill="rgb(221,13,13)"/><text x="42.1053%" y="143.50"></text></g><g><title>type_collecting (1,259,214 samples, 1.66%)</title><rect x="40.4508%" y="229" width="1.6586%" height="15" fill="rgb(238,131,9)"/><text x="40.7008%" y="239.50"></text></g><g><title>collect_mod_item_types (1,248,264 samples, 1.64%)</title><rect x="40.4652%" y="213" width="1.6441%" height="15" fill="rgb(211,50,8)"/><text x="40.7152%" y="223.50"></text></g><g><title>type_of (89,740 samples, 0.12%)</title><rect x="41.9911%" y="197" width="0.1182%" height="15" fill="rgb(245,182,24)"/><text x="42.2411%" y="207.50"></text></g><g><title>evaluate_obligation (246,213 samples, 0.32%)</title><rect x="43.2285%" y="197" width="0.3243%" height="15" fill="rgb(242,14,37)"/><text x="43.4785%" y="207.50"></text></g><g><title>implied_outlives_bounds (107,771 samples, 0.14%)</title><rect x="43.5528%" y="197" width="0.1419%" height="15" fill="rgb(246,228,12)"/><text x="43.8028%" y="207.50"></text></g><g><title>param_env (111,862 samples, 0.15%)</title><rect x="43.6948%" y="197" width="0.1473%" height="15" fill="rgb(213,55,15)"/><text x="43.9448%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,342,544 samples, 1.77%)</title><rect x="42.2255%" y="213" width="1.7683%" height="15" fill="rgb(209,9,3)"/><text x="42.4755%" y="223.50"></text></g><g><title>region_scope_tree (93,131 samples, 0.12%)</title><rect x="43.8711%" y="197" width="0.1227%" height="15" fill="rgb(230,59,30)"/><text x="44.1211%" y="207.50"></text></g><g><title>adt_sized_constraint (79,611 samples, 0.10%)</title><rect x="45.1013%" y="181" width="0.1049%" height="15" fill="rgb(209,121,21)"/><text x="45.3513%" y="191.50"></text></g><g><title>adt_sized_constraint (140,461 samples, 0.19%)</title><rect x="45.0230%" y="197" width="0.1850%" height="15" fill="rgb(220,109,13)"/><text x="45.2730%" y="207.50"></text></g><g><title>adt_def (146,612 samples, 0.19%)</title><rect x="45.3930%" y="165" width="0.1931%" height="15" fill="rgb(232,18,1)"/><text x="45.6430%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (144,492 samples, 0.19%)</title><rect x="45.3958%" y="149" width="0.1903%" height="15" fill="rgb(215,41,42)"/><text x="45.6458%" y="159.50"></text></g><g><title>item_attrs (125,172 samples, 0.16%)</title><rect x="45.4213%" y="133" width="0.1649%" height="15" fill="rgb(224,123,36)"/><text x="45.6713%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (122,662 samples, 0.16%)</title><rect x="45.4246%" y="117" width="0.1616%" height="15" fill="rgb(240,125,3)"/><text x="45.6746%" y="127.50"></text></g><g><title>adt_sized_constraint (82,081 samples, 0.11%)</title><rect x="45.6092%" y="149" width="0.1081%" height="15" fill="rgb(205,98,50)"/><text x="45.8592%" y="159.50"></text></g><g><title>adt_sized_constraint (124,261 samples, 0.16%)</title><rect x="45.5861%" y="165" width="0.1637%" height="15" fill="rgb(205,185,37)"/><text x="45.8361%" y="175.50"></text></g><g><title>adt_sized_constraint (288,964 samples, 0.38%)</title><rect x="45.3815%" y="181" width="0.3806%" height="15" fill="rgb(238,207,15)"/><text x="45.6315%" y="191.50"></text></g><g><title>evaluate_obligation (469,775 samples, 0.62%)</title><rect x="45.2080%" y="197" width="0.6188%" height="15" fill="rgb(213,199,42)"/><text x="45.4580%" y="207.50"></text></g><g><title>implied_outlives_bounds (94,501 samples, 0.12%)</title><rect x="45.8324%" y="197" width="0.1245%" height="15" fill="rgb(235,201,11)"/><text x="46.0824%" y="207.50"></text></g><g><title>param_env (308,673 samples, 0.41%)</title><rect x="45.9569%" y="197" width="0.4066%" height="15" fill="rgb(207,46,11)"/><text x="46.2069%" y="207.50"></text></g><g><title>predicates_of (84,691 samples, 0.11%)</title><rect x="46.3634%" y="197" width="0.1115%" height="15" fill="rgb(241,35,35)"/><text x="46.6134%" y="207.50"></text></g><g><title>analysis (28,234,606 samples, 37.19%)</title><rect x="9.5393%" y="261" width="37.1888%" height="15" fill="rgb(243,32,47)"/><text x="9.7893%" y="271.50">analysis</text></g><g><title>type_check_crate (16,253,452 samples, 21.41%)</title><rect x="25.3201%" y="245" width="21.4080%" height="15" fill="rgb(247,202,23)"/><text x="25.5701%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,505,829 samples, 4.62%)</title><rect x="42.1104%" y="229" width="4.6177%" height="15" fill="rgb(219,102,11)"/><text x="42.3604%" y="239.50">wf_ch..</text></g><g><title>check_item_well_formed (2,075,952 samples, 2.73%)</title><rect x="43.9938%" y="213" width="2.7343%" height="15" fill="rgb(243,110,44)"/><text x="44.2438%" y="223.50">ch..</text></g><g><title>variances_of (95,611 samples, 0.13%)</title><rect x="46.6022%" y="197" width="0.1259%" height="15" fill="rgb(222,74,54)"/><text x="46.8522%" y="207.50"></text></g><g><title>crate_variances (89,791 samples, 0.12%)</title><rect x="46.6098%" y="181" width="0.1183%" height="15" fill="rgb(216,99,12)"/><text x="46.8598%" y="191.50"></text></g><g><title>codegen_module (229,263 samples, 0.30%)</title><rect x="47.3170%" y="245" width="0.3020%" height="15" fill="rgb(226,22,26)"/><text x="47.5670%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (107,901 samples, 0.14%)</title><rect x="47.6196%" y="245" width="0.1421%" height="15" fill="rgb(217,163,10)"/><text x="47.8696%" y="255.50"></text></g><g><title>codegen_crate (853,429 samples, 1.12%)</title><rect x="46.7435%" y="261" width="1.1241%" height="15" fill="rgb(213,25,53)"/><text x="46.9935%" y="271.50"></text></g><g><title>codegen_module_optimize (1,851,850 samples, 2.44%)</title><rect x="47.8676%" y="261" width="2.4391%" height="15" fill="rgb(252,105,26)"/><text x="48.1176%" y="271.50">co..</text></g><g><title>LLVM_module_optimize (473,085 samples, 0.62%)</title><rect x="49.6836%" y="245" width="0.6231%" height="15" fill="rgb(220,39,43)"/><text x="49.9336%" y="255.50"></text></g><g><title>LLVM_lto_optimize (249,633 samples, 0.33%)</title><rect x="50.8727%" y="245" width="0.3288%" height="15" fill="rgb(229,68,48)"/><text x="51.1227%" y="255.50"></text></g><g><title>LLVM_module_codegen (2,729,921 samples, 3.60%)</title><rect x="51.2015%" y="245" width="3.5957%" height="15" fill="rgb(252,8,32)"/><text x="51.4515%" y="255.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,687,210 samples, 3.54%)</title><rect x="51.2578%" y="229" width="3.5394%" height="15" fill="rgb(223,20,43)"/><text x="51.5078%" y="239.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,451,969 samples, 4.55%)</title><rect x="50.3067%" y="261" width="4.5467%" height="15" fill="rgb(229,81,49)"/><text x="50.5567%" y="271.50">codeg..</text></g><g><title>metadata_load_macro (165,462 samples, 0.22%)</title><rect x="70.0236%" y="213" width="0.2179%" height="15" fill="rgb(236,28,36)"/><text x="70.2736%" y="223.50"></text></g><g><title>macro_expand_crate (16,542,305 samples, 21.79%)</title><rect x="55.3924%" y="245" width="21.7885%" height="15" fill="rgb(249,185,26)"/><text x="55.6424%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (16,516,255 samples, 21.75%)</title><rect x="55.4267%" y="229" width="21.7542%" height="15" fill="rgb(249,174,33)"/><text x="55.6767%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (5,268,530 samples, 6.94%)</title><rect x="70.2415%" y="213" width="6.9394%" height="15" fill="rgb(233,201,37)"/><text x="70.4915%" y="223.50">metadata_..</text></g><g><title>metadata_register_crate (2,911,736 samples, 3.84%)</title><rect x="73.3457%" y="197" width="3.8352%" height="15" fill="rgb(221,78,26)"/><text x="73.5957%" y="207.50">meta..</text></g><g><title>metadata_register_crate (83,891 samples, 0.11%)</title><rect x="77.0704%" y="181" width="0.1105%" height="15" fill="rgb(250,127,30)"/><text x="77.3204%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (116,211 samples, 0.15%)</title><rect x="77.1875%" y="245" width="0.1531%" height="15" fill="rgb(230,49,44)"/><text x="77.4375%" y="255.50"></text></g><g><title>finalize_macro_resolutions (365,744 samples, 0.48%)</title><rect x="77.4012%" y="229" width="0.4817%" height="15" fill="rgb(229,67,23)"/><text x="77.6512%" y="239.50"></text></g><g><title>late_resolve_crate (930,510 samples, 1.23%)</title><rect x="77.8830%" y="229" width="1.2256%" height="15" fill="rgb(249,83,47)"/><text x="78.1330%" y="239.50"></text></g><g><title>configure_and_expand (18,469,726 samples, 24.33%)</title><rect x="54.8534%" y="261" width="24.3271%" height="15" fill="rgb(215,43,3)"/><text x="55.1034%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,396,996 samples, 1.84%)</title><rect x="77.3406%" y="245" width="1.8400%" height="15" fill="rgb(238,154,13)"/><text x="77.5906%" y="255.50">r..</text></g><g><title>early_lint_checks (164,602 samples, 0.22%)</title><rect x="79.2951%" y="261" width="0.2168%" height="15" fill="rgb(219,56,2)"/><text x="79.5451%" y="271.50"></text></g><g><title>free_global_ctxt (2,690,400 samples, 3.54%)</title><rect x="79.5119%" y="261" width="3.5436%" height="15" fill="rgb(233,0,4)"/><text x="79.7619%" y="271.50">free..</text></g><g><title>eval_to_const_value_raw (187,131 samples, 0.25%)</title><rect x="85.4818%" y="181" width="0.2465%" height="15" fill="rgb(235,30,7)"/><text x="85.7318%" y="191.50"></text></g><g><title>eval_to_const_value_raw (176,221 samples, 0.23%)</title><rect x="85.4961%" y="165" width="0.2321%" height="15" fill="rgb(250,79,13)"/><text x="85.7461%" y="175.50"></text></g><g><title>eval_to_allocation_raw (157,450 samples, 0.21%)</title><rect x="85.5209%" y="149" width="0.2074%" height="15" fill="rgb(211,146,34)"/><text x="85.7709%" y="159.50"></text></g><g><title>eval_to_const_value_raw (84,300 samples, 0.11%)</title><rect x="85.8388%" y="165" width="0.1110%" height="15" fill="rgb(228,22,38)"/><text x="86.0888%" y="175.50"></text></g><g><title>layout_of (115,341 samples, 0.15%)</title><rect x="86.1271%" y="149" width="0.1519%" height="15" fill="rgb(235,168,5)"/><text x="86.3771%" y="159.50"></text></g><g><title>layout_of (313,033 samples, 0.41%)</title><rect x="86.0286%" y="165" width="0.4123%" height="15" fill="rgb(221,155,16)"/><text x="86.2786%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (112,241 samples, 0.15%)</title><rect x="86.2930%" y="149" width="0.1478%" height="15" fill="rgb(215,215,53)"/><text x="86.5430%" y="159.50"></text></g><g><title>normalize_projection_ty (106,441 samples, 0.14%)</title><rect x="86.3007%" y="133" width="0.1402%" height="15" fill="rgb(223,4,10)"/><text x="86.5507%" y="143.50"></text></g><g><title>layout_of (591,857 samples, 0.78%)</title><rect x="85.7610%" y="181" width="0.7796%" height="15" fill="rgb(234,103,6)"/><text x="86.0110%" y="191.50"></text></g><g><title>param_env (114,831 samples, 0.15%)</title><rect x="86.5406%" y="181" width="0.1512%" height="15" fill="rgb(227,97,0)"/><text x="86.7906%" y="191.50"></text></g><g><title>layout_of (1,019,451 samples, 1.34%)</title><rect x="85.3642%" y="197" width="1.3428%" height="15" fill="rgb(234,150,53)"/><text x="85.6142%" y="207.50"></text></g><g><title>layout_of (1,095,852 samples, 1.44%)</title><rect x="85.2738%" y="213" width="1.4434%" height="15" fill="rgb(228,201,54)"/><text x="85.5238%" y="223.50"></text></g><g><title>layout_of (1,266,194 samples, 1.67%)</title><rect x="85.0772%" y="229" width="1.6678%" height="15" fill="rgb(222,22,37)"/><text x="85.3272%" y="239.50"></text></g><g><title>needs_drop_raw (244,471 samples, 0.32%)</title><rect x="87.8424%" y="213" width="0.3220%" height="15" fill="rgb(237,53,32)"/><text x="88.0924%" y="223.50"></text></g><g><title>is_copy_raw (217,501 samples, 0.29%)</title><rect x="87.8779%" y="197" width="0.2865%" height="15" fill="rgb(233,25,53)"/><text x="88.1279%" y="207.50"></text></g><g><title>evaluate_obligation (187,921 samples, 0.25%)</title><rect x="87.9169%" y="181" width="0.2475%" height="15" fill="rgb(210,40,34)"/><text x="88.1669%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,080,830 samples, 1.42%)</title><rect x="86.7449%" y="229" width="1.4236%" height="15" fill="rgb(241,220,44)"/><text x="86.9949%" y="239.50"></text></g><g><title>impl_parent (99,051 samples, 0.13%)</title><rect x="88.4026%" y="197" width="0.1305%" height="15" fill="rgb(235,28,35)"/><text x="88.6526%" y="207.50"></text></g><g><title>specialization_graph_of (350,934 samples, 0.46%)</title><rect x="88.2189%" y="213" width="0.4622%" height="15" fill="rgb(210,56,17)"/><text x="88.4689%" y="223.50"></text></g><g><title>impl_trait_ref (112,431 samples, 0.15%)</title><rect x="88.5331%" y="197" width="0.1481%" height="15" fill="rgb(224,130,29)"/><text x="88.7831%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (80,070 samples, 0.11%)</title><rect x="88.5757%" y="181" width="0.1055%" height="15" fill="rgb(235,212,8)"/><text x="88.8257%" y="191.50"></text></g><g><title>optimized_mir (3,400,518 samples, 4.48%)</title><rect x="84.2049%" y="245" width="4.4789%" height="15" fill="rgb(223,33,50)"/><text x="84.4549%" y="255.50">optim..</text></g><g><title>resolve_instance (391,224 samples, 0.52%)</title><rect x="88.1685%" y="229" width="0.5153%" height="15" fill="rgb(219,149,13)"/><text x="88.4185%" y="239.50"></text></g><g><title>generate_crate_metadata (4,331,538 samples, 5.71%)</title><rect x="83.0555%" y="261" width="5.7052%" height="15" fill="rgb(250,156,29)"/><text x="83.3055%" y="271.50">generat..</text></g><g><title>hir_lowering (1,227,694 samples, 1.62%)</title><rect x="88.7607%" y="261" width="1.6170%" height="15" fill="rgb(216,193,19)"/><text x="89.0107%" y="271.50"></text></g><g><title>finish_ongoing_codegen (3,556,190 samples, 4.68%)</title><rect x="90.3951%" y="245" width="4.6840%" height="15" fill="rgb(216,135,14)"/><text x="90.6451%" y="255.50">finis..</text></g><g><title>link_crate (603,337 samples, 0.79%)</title><rect x="95.0790%" y="245" width="0.7947%" height="15" fill="rgb(241,47,5)"/><text x="95.3290%" y="255.50"></text></g><g><title>link_binary (588,337 samples, 0.77%)</title><rect x="95.0988%" y="229" width="0.7749%" height="15" fill="rgb(233,42,35)"/><text x="95.3488%" y="239.50"></text></g><g><title>link_rlib (363,004 samples, 0.48%)</title><rect x="95.3956%" y="213" width="0.4781%" height="15" fill="rgb(231,13,6)"/><text x="95.6456%" y="223.50"></text></g><g><title>link (4,180,797 samples, 5.51%)</title><rect x="90.3778%" y="261" width="5.5067%" height="15" fill="rgb(207,181,40)"/><text x="90.6278%" y="271.50">link</text></g><g><title>parse_crate (1,864,531 samples, 2.46%)</title><rect x="95.8844%" y="261" width="2.4558%" height="15" fill="rgb(254,173,49)"/><text x="96.1344%" y="271.50">pa..</text></g><g><title>prepare_outputs (359,414 samples, 0.47%)</title><rect x="98.3523%" y="261" width="0.4734%" height="15" fill="rgb(221,1,38)"/><text x="98.6023%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (467,296 samples, 0.62%)</title><rect x="98.8257%" y="261" width="0.6155%" height="15" fill="rgb(206,124,46)"/><text x="99.0757%" y="271.50"></text></g><g><title>setup_global_ctxt (145,462 samples, 0.19%)</title><rect x="99.4486%" y="261" width="0.1916%" height="15" fill="rgb(249,21,11)"/><text x="99.6986%" y="271.50"></text></g><g><title>all (75,922,279 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(222,201,40)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (75,922,279 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,61,29)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (273,183 samples, 0.36%)</title><rect x="99.6402%" y="261" width="0.3598%" height="15" fill="rgb(219,207,3)"/><text x="99.8902%" y="271.50"></text></g></svg></svg>