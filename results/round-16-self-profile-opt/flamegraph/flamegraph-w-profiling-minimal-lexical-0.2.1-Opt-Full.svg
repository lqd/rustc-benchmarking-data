<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (162,449,655 samples, 18.33%)</title><rect x="0.0772%" y="197" width="18.3261%" height="15" fill="rgb(227,0,7)"/><text x="0.3272%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,214,609 samples, 0.14%)</title><rect x="22.7818%" y="85" width="0.1370%" height="15" fill="rgb(217,0,24)"/><text x="23.0318%" y="95.50"></text></g><g><title>is_copy_raw (887,916 samples, 0.10%)</title><rect x="22.8186%" y="69" width="0.1002%" height="15" fill="rgb(221,193,54)"/><text x="23.0686%" y="79.50"></text></g><g><title>resolve_instance (1,766,489 samples, 0.20%)</title><rect x="22.9221%" y="85" width="0.1993%" height="15" fill="rgb(248,212,6)"/><text x="23.1721%" y="95.50"></text></g><g><title>thir_body (2,673,096 samples, 0.30%)</title><rect x="23.1269%" y="85" width="0.3016%" height="15" fill="rgb(208,68,35)"/><text x="23.3769%" y="95.50"></text></g><g><title>mir_const (16,679,215 samples, 1.88%)</title><rect x="21.5502%" y="133" width="1.8816%" height="15" fill="rgb(232,128,0)"/><text x="21.8002%" y="143.50">m..</text></g><g><title>unsafety_check_result (14,408,015 samples, 1.63%)</title><rect x="21.8064%" y="117" width="1.6254%" height="15" fill="rgb(207,160,47)"/><text x="22.0564%" y="127.50"></text></g><g><title>mir_built (12,909,306 samples, 1.46%)</title><rect x="21.9755%" y="101" width="1.4563%" height="15" fill="rgb(228,23,34)"/><text x="22.2255%" y="111.50"></text></g><g><title>thir_body (1,474,839 samples, 0.17%)</title><rect x="23.6648%" y="69" width="0.1664%" height="15" fill="rgb(218,30,26)"/><text x="23.9148%" y="79.50"></text></g><g><title>mir_const (3,138,744 samples, 0.35%)</title><rect x="23.4789%" y="117" width="0.3541%" height="15" fill="rgb(220,122,19)"/><text x="23.7289%" y="127.50"></text></g><g><title>unsafety_check_result (2,806,020 samples, 0.32%)</title><rect x="23.5165%" y="101" width="0.3165%" height="15" fill="rgb(250,228,42)"/><text x="23.7665%" y="111.50"></text></g><g><title>mir_built (2,684,060 samples, 0.30%)</title><rect x="23.5302%" y="85" width="0.3028%" height="15" fill="rgb(240,193,28)"/><text x="23.7802%" y="95.50"></text></g><g><title>mir_const_qualif (3,557,727 samples, 0.40%)</title><rect x="23.4318%" y="133" width="0.4013%" height="15" fill="rgb(216,20,37)"/><text x="23.6818%" y="143.50"></text></g><g><title>mir_promoted (22,075,339 samples, 2.49%)</title><rect x="21.3430%" y="149" width="2.4903%" height="15" fill="rgb(206,188,39)"/><text x="21.5930%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (1,655,382 samples, 0.19%)</title><rect x="23.8343%" y="149" width="0.1867%" height="15" fill="rgb(217,207,13)"/><text x="24.0843%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,244,946 samples, 0.14%)</title><rect x="24.0211%" y="149" width="0.1404%" height="15" fill="rgb(231,73,38)"/><text x="24.2711%" y="159.50"></text></g><g><title>type_op_prove_predicate (3,004,075 samples, 0.34%)</title><rect x="24.1831%" y="149" width="0.3389%" height="15" fill="rgb(225,20,46)"/><text x="24.4331%" y="159.50"></text></g><g><title>MIR_borrow_checking (53,609,462 samples, 6.05%)</title><rect x="18.4748%" y="181" width="6.0477%" height="15" fill="rgb(210,31,41)"/><text x="18.7248%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (53,315,288 samples, 6.01%)</title><rect x="18.5080%" y="165" width="6.0145%" height="15" fill="rgb(221,200,47)"/><text x="18.7580%" y="175.50">mir_borr..</text></g><g><title>MIR_effect_checking (1,302,105 samples, 0.15%)</title><rect x="24.5225%" y="181" width="0.1469%" height="15" fill="rgb(226,26,5)"/><text x="24.7725%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,090,622 samples, 0.12%)</title><rect x="24.5464%" y="165" width="0.1230%" height="15" fill="rgb(249,33,26)"/><text x="24.7964%" y="175.50"></text></g><g><title>check_mod_attrs (1,184,388 samples, 0.13%)</title><rect x="24.7158%" y="165" width="0.1336%" height="15" fill="rgb(235,183,28)"/><text x="24.9658%" y="175.50"></text></g><g><title>misc_checking_1 (2,485,769 samples, 0.28%)</title><rect x="24.7108%" y="181" width="0.2804%" height="15" fill="rgb(221,5,38)"/><text x="24.9608%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,168,804 samples, 0.13%)</title><rect x="24.9914%" y="165" width="0.1319%" height="15" fill="rgb(247,18,42)"/><text x="25.2414%" y="175.50"></text></g><g><title>check_mod_liveness (919,361 samples, 0.10%)</title><rect x="25.0195%" y="149" width="0.1037%" height="15" fill="rgb(241,131,45)"/><text x="25.2695%" y="159.50"></text></g><g><title>misc_checking_2 (2,436,608 samples, 0.27%)</title><rect x="24.9912%" y="181" width="0.2749%" height="15" fill="rgb(249,31,29)"/><text x="25.2412%" y="191.50"></text></g><g><title>match_checking (1,266,144 samples, 0.14%)</title><rect x="25.1232%" y="165" width="0.1428%" height="15" fill="rgb(225,111,53)"/><text x="25.3732%" y="175.50"></text></g><g><title>check_match (1,197,653 samples, 0.14%)</title><rect x="25.1310%" y="149" width="0.1351%" height="15" fill="rgb(238,160,17)"/><text x="25.3810%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,819,771 samples, 0.21%)</title><rect x="25.5760%" y="133" width="0.2053%" height="15" fill="rgb(214,148,48)"/><text x="25.8260%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,817,001 samples, 0.20%)</title><rect x="25.5763%" y="117" width="0.2050%" height="15" fill="rgb(232,36,49)"/><text x="25.8263%" y="127.50"></text></g><g><title>crate_lints (5,199,858 samples, 0.59%)</title><rect x="25.4011%" y="149" width="0.5866%" height="15" fill="rgb(209,103,24)"/><text x="25.6511%" y="159.50"></text></g><g><title>type_of (1,137,499 samples, 0.13%)</title><rect x="25.8594%" y="133" width="0.1283%" height="15" fill="rgb(229,88,8)"/><text x="26.1094%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (908,177 samples, 0.10%)</title><rect x="25.8853%" y="117" width="0.1025%" height="15" fill="rgb(213,181,19)"/><text x="26.1353%" y="127.50"></text></g><g><title>lint_checking (6,523,933 samples, 0.74%)</title><rect x="25.4009%" y="165" width="0.7360%" height="15" fill="rgb(254,191,54)"/><text x="25.6509%" y="175.50"></text></g><g><title>module_lints (1,321,795 samples, 0.15%)</title><rect x="25.9877%" y="149" width="0.1491%" height="15" fill="rgb(241,83,37)"/><text x="26.2377%" y="159.50"></text></g><g><title>lint_mod (1,309,145 samples, 0.15%)</title><rect x="25.9892%" y="133" width="0.1477%" height="15" fill="rgb(233,36,39)"/><text x="26.2392%" y="143.50"></text></g><g><title>privacy_checking_modules (1,483,897 samples, 0.17%)</title><rect x="26.2008%" y="165" width="0.1674%" height="15" fill="rgb(226,3,54)"/><text x="26.4508%" y="175.50"></text></g><g><title>check_mod_privacy (1,475,297 samples, 0.17%)</title><rect x="26.2018%" y="149" width="0.1664%" height="15" fill="rgb(245,192,40)"/><text x="26.4518%" y="159.50"></text></g><g><title>misc_checking_3 (9,791,630 samples, 1.10%)</title><rect x="25.2661%" y="181" width="1.1046%" height="15" fill="rgb(238,167,29)"/><text x="25.5161%" y="191.50"></text></g><g><title>impl_parent (2,775,036 samples, 0.31%)</title><rect x="26.9278%" y="117" width="0.3131%" height="15" fill="rgb(232,182,51)"/><text x="27.1778%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,524,402 samples, 0.17%)</title><rect x="27.0689%" y="101" width="0.1720%" height="15" fill="rgb(231,60,39)"/><text x="27.3189%" y="111.50"></text></g><g><title>impl_trait_ref (5,685,172 samples, 0.64%)</title><rect x="27.2409%" y="117" width="0.6413%" height="15" fill="rgb(208,69,12)"/><text x="27.4909%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,632,193 samples, 0.52%)</title><rect x="27.3597%" y="101" width="0.5226%" height="15" fill="rgb(235,93,37)"/><text x="27.6097%" y="111.50"></text></g><g><title>coherent_trait (14,111,308 samples, 1.59%)</title><rect x="26.3881%" y="149" width="1.5919%" height="15" fill="rgb(213,116,39)"/><text x="26.6381%" y="159.50"></text></g><g><title>specialization_graph_of (13,492,432 samples, 1.52%)</title><rect x="26.4579%" y="133" width="1.5221%" height="15" fill="rgb(222,207,29)"/><text x="26.7079%" y="143.50"></text></g><g><title>coherence_checking (14,199,929 samples, 1.60%)</title><rect x="26.3857%" y="165" width="1.6019%" height="15" fill="rgb(206,96,30)"/><text x="26.6357%" y="175.50"></text></g><g><title>associated_items (1,029,652 samples, 0.12%)</title><rect x="33.6348%" y="117" width="0.1162%" height="15" fill="rgb(218,138,4)"/><text x="33.8848%" y="127.50"></text></g><g><title>generics_of (2,049,942 samples, 0.23%)</title><rect x="35.1109%" y="101" width="0.2313%" height="15" fill="rgb(250,191,14)"/><text x="35.3609%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (1,412,414 samples, 0.16%)</title><rect x="35.1828%" y="85" width="0.1593%" height="15" fill="rgb(239,60,40)"/><text x="35.4328%" y="95.50"></text></g><g><title>impl_trait_ref (1,603,660 samples, 0.18%)</title><rect x="35.3859%" y="101" width="0.1809%" height="15" fill="rgb(206,27,48)"/><text x="35.6359%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,324,199 samples, 0.15%)</title><rect x="35.4174%" y="85" width="0.1494%" height="15" fill="rgb(225,35,8)"/><text x="35.6674%" y="95.50"></text></g><g><title>predicates_of (1,440,278 samples, 0.16%)</title><rect x="35.5773%" y="101" width="0.1625%" height="15" fill="rgb(250,213,24)"/><text x="35.8273%" y="111.50"></text></g><g><title>specializes (3,852,094 samples, 0.43%)</title><rect x="35.7398%" y="101" width="0.4346%" height="15" fill="rgb(247,123,22)"/><text x="35.9898%" y="111.50"></text></g><g><title>param_env (2,218,638 samples, 0.25%)</title><rect x="35.9241%" y="85" width="0.2503%" height="15" fill="rgb(231,138,38)"/><text x="36.1741%" y="95.50"></text></g><g><title>def_span (948,392 samples, 0.11%)</title><rect x="36.0674%" y="69" width="0.1070%" height="15" fill="rgb(231,145,46)"/><text x="36.3174%" y="79.50"></text></g><g><title>evaluate_obligation (21,251,667 samples, 2.40%)</title><rect x="33.8459%" y="117" width="2.3974%" height="15" fill="rgb(251,118,11)"/><text x="34.0959%" y="127.50">ev..</text></g><g><title>evaluate_obligation (1,272,903 samples, 0.14%)</title><rect x="36.9968%" y="101" width="0.1436%" height="15" fill="rgb(217,147,25)"/><text x="37.2468%" y="111.50"></text></g><g><title>typeck (5,236,359 samples, 0.59%)</title><rect x="36.5782%" y="117" width="0.5907%" height="15" fill="rgb(247,81,37)"/><text x="36.8282%" y="127.50"></text></g><g><title>item_bodies_checking (81,434,215 samples, 9.19%)</title><rect x="27.9925%" y="165" width="9.1867%" height="15" fill="rgb(209,12,38)"/><text x="28.2425%" y="175.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (81,430,555 samples, 9.19%)</title><rect x="27.9929%" y="149" width="9.1862%" height="15" fill="rgb(227,1,9)"/><text x="28.2429%" y="159.50">typeck_item_b..</text></g><g><title>typeck (81,234,343 samples, 9.16%)</title><rect x="28.0151%" y="133" width="9.1641%" height="15" fill="rgb(248,47,43)"/><text x="28.2651%" y="143.50">typeck</text></g><g><title>item_types_checking (3,372,928 samples, 0.38%)</title><rect x="37.1792%" y="165" width="0.3805%" height="15" fill="rgb(221,10,30)"/><text x="37.4292%" y="175.50"></text></g><g><title>check_mod_item_types (3,362,478 samples, 0.38%)</title><rect x="37.1804%" y="149" width="0.3793%" height="15" fill="rgb(210,229,1)"/><text x="37.4304%" y="159.50"></text></g><g><title>typeck (2,474,727 samples, 0.28%)</title><rect x="37.2805%" y="133" width="0.2792%" height="15" fill="rgb(222,148,37)"/><text x="37.5305%" y="143.50"></text></g><g><title>generics_of (1,166,779 samples, 0.13%)</title><rect x="37.6658%" y="133" width="0.1316%" height="15" fill="rgb(234,67,33)"/><text x="37.9158%" y="143.50"></text></g><g><title>type_collecting (3,385,328 samples, 0.38%)</title><rect x="37.5602%" y="165" width="0.3819%" height="15" fill="rgb(247,98,35)"/><text x="37.8102%" y="175.50"></text></g><g><title>collect_mod_item_types (3,361,388 samples, 0.38%)</title><rect x="37.5629%" y="149" width="0.3792%" height="15" fill="rgb(247,138,52)"/><text x="37.8129%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,669,362 samples, 0.30%)</title><rect x="37.9825%" y="149" width="0.3011%" height="15" fill="rgb(213,79,30)"/><text x="38.2325%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,965,073 samples, 0.22%)</title><rect x="38.7305%" y="69" width="0.2217%" height="15" fill="rgb(246,177,23)"/><text x="38.9805%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,963,653 samples, 0.22%)</title><rect x="38.7307%" y="53" width="0.2215%" height="15" fill="rgb(230,62,27)"/><text x="38.9807%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,961,933 samples, 0.22%)</title><rect x="38.7308%" y="37" width="0.2213%" height="15" fill="rgb(216,154,8)"/><text x="38.9808%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,980,803 samples, 0.22%)</title><rect x="38.7294%" y="85" width="0.2235%" height="15" fill="rgb(244,35,45)"/><text x="38.9794%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,095,176 samples, 0.35%)</title><rect x="38.6212%" y="133" width="0.3492%" height="15" fill="rgb(251,115,12)"/><text x="38.8712%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,078,615 samples, 0.35%)</title><rect x="38.6230%" y="117" width="0.3473%" height="15" fill="rgb(240,54,50)"/><text x="38.8730%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,069,425 samples, 0.35%)</title><rect x="38.6241%" y="101" width="0.3463%" height="15" fill="rgb(233,84,52)"/><text x="38.8741%" y="111.50"></text></g><g><title>evaluate_obligation (989,921 samples, 0.11%)</title><rect x="38.9703%" y="133" width="0.1117%" height="15" fill="rgb(207,117,47)"/><text x="39.2203%" y="143.50"></text></g><g><title>check_item_well_formed (9,332,612 samples, 1.05%)</title><rect x="38.2837%" y="149" width="1.0528%" height="15" fill="rgb(249,43,39)"/><text x="38.5337%" y="159.50"></text></g><g><title>analysis (186,737,398 samples, 21.07%)</title><rect x="18.4033%" y="197" width="21.0660%" height="15" fill="rgb(209,38,44)"/><text x="18.6533%" y="207.50">analysis</text></g><g><title>type_check_crate (116,111,283 samples, 13.10%)</title><rect x="26.3707%" y="181" width="13.0986%" height="15" fill="rgb(236,212,23)"/><text x="26.6207%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,521,641 samples, 1.53%)</title><rect x="37.9439%" y="165" width="1.5254%" height="15" fill="rgb(242,79,21)"/><text x="38.1939%" y="175.50"></text></g><g><title>check_trait_item_well_formed (1,177,063 samples, 0.13%)</title><rect x="39.3365%" y="149" width="0.1328%" height="15" fill="rgb(211,96,35)"/><text x="39.5865%" y="159.50"></text></g><g><title>param_env (1,248,365 samples, 0.14%)</title><rect x="41.0622%" y="149" width="0.1408%" height="15" fill="rgb(253,215,40)"/><text x="41.3122%" y="159.50"></text></g><g><title>fn_abi_of_instance (3,888,805 samples, 0.44%)</title><rect x="40.7833%" y="165" width="0.4387%" height="15" fill="rgb(211,81,21)"/><text x="41.0333%" y="175.50"></text></g><g><title>codegen_module (14,899,316 samples, 1.68%)</title><rect x="39.6118%" y="181" width="1.6808%" height="15" fill="rgb(208,190,38)"/><text x="39.8618%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,044,174 samples, 0.12%)</title><rect x="41.6981%" y="117" width="0.1178%" height="15" fill="rgb(235,213,38)"/><text x="41.9481%" y="127.50"></text></g><g><title>optimized_mir (3,035,859 samples, 0.34%)</title><rect x="41.4832%" y="133" width="0.3425%" height="15" fill="rgb(237,122,38)"/><text x="41.7332%" y="143.50"></text></g><g><title>resolve_instance (2,124,235 samples, 0.24%)</title><rect x="41.8257%" y="133" width="0.2396%" height="15" fill="rgb(244,218,35)"/><text x="42.0757%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (7,128,481 samples, 0.80%)</title><rect x="41.2964%" y="149" width="0.8042%" height="15" fill="rgb(240,68,47)"/><text x="41.5464%" y="159.50"></text></g><g><title>monomorphization_collector (7,211,112 samples, 0.81%)</title><rect x="41.2961%" y="165" width="0.8135%" height="15" fill="rgb(210,16,53)"/><text x="41.5461%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (8,194,203 samples, 0.92%)</title><rect x="41.2933%" y="181" width="0.9244%" height="15" fill="rgb(235,124,12)"/><text x="41.5433%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (958,361 samples, 0.11%)</title><rect x="42.1096%" y="165" width="0.1081%" height="15" fill="rgb(224,169,11)"/><text x="42.3596%" y="175.50"></text></g><g><title>codegen_crate (24,413,684 samples, 2.75%)</title><rect x="39.4703%" y="197" width="2.7541%" height="15" fill="rgb(250,166,2)"/><text x="39.7203%" y="207.50">co..</text></g><g><title>codegen_module_optimize (135,907,966 samples, 15.33%)</title><rect x="42.2244%" y="197" width="15.3319%" height="15" fill="rgb(242,216,29)"/><text x="42.4744%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (125,157,937 samples, 14.12%)</title><rect x="43.4372%" y="181" width="14.1192%" height="15" fill="rgb(230,116,27)"/><text x="43.6872%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (50,538,061 samples, 5.70%)</title><rect x="58.3585%" y="181" width="5.7012%" height="15" fill="rgb(228,99,48)"/><text x="58.6085%" y="191.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (81,406,478 samples, 9.18%)</title><rect x="64.0598%" y="181" width="9.1835%" height="15" fill="rgb(253,11,6)"/><text x="64.3098%" y="191.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (80,268,076 samples, 9.06%)</title><rect x="64.1882%" y="165" width="9.0551%" height="15" fill="rgb(247,143,39)"/><text x="64.4382%" y="175.50">LLVM_module_c..</text></g><g><title>LLVM_thin_lto_import (945,020 samples, 0.11%)</title><rect x="73.2433%" y="181" width="0.1066%" height="15" fill="rgb(236,97,10)"/><text x="73.4933%" y="191.50"></text></g><g><title>codegen_module_perform_lto (140,302,252 samples, 15.83%)</title><rect x="57.5563%" y="197" width="15.8276%" height="15" fill="rgb(233,208,19)"/><text x="57.8063%" y="207.50">codegen_module_perform_l..</text></g><g><title>metadata_register_crate (1,298,145 samples, 0.15%)</title><rect x="78.1582%" y="149" width="0.1464%" height="15" fill="rgb(216,164,2)"/><text x="78.4082%" y="159.50"></text></g><g><title>macro_expand_crate (44,681,632 samples, 5.04%)</title><rect x="73.4692%" y="181" width="5.0406%" height="15" fill="rgb(220,129,5)"/><text x="73.7192%" y="191.50">macro_..</text></g><g><title>expand_crate (44,669,062 samples, 5.04%)</title><rect x="73.4706%" y="165" width="5.0391%" height="15" fill="rgb(242,17,10)"/><text x="73.7206%" y="175.50">expand..</text></g><g><title>pre_AST_expansion_lint_checks (1,817,929 samples, 0.21%)</title><rect x="78.3047%" y="149" width="0.2051%" height="15" fill="rgb(242,107,0)"/><text x="78.5547%" y="159.50"></text></g><g><title>late_resolve_crate (3,090,774 samples, 0.35%)</title><rect x="78.5570%" y="165" width="0.3487%" height="15" fill="rgb(251,28,31)"/><text x="78.8070%" y="175.50"></text></g><g><title>configure_and_expand (49,203,043 samples, 5.55%)</title><rect x="73.3839%" y="197" width="5.5506%" height="15" fill="rgb(233,223,10)"/><text x="73.6339%" y="207.50">configu..</text></g><g><title>resolve_crate (3,700,461 samples, 0.42%)</title><rect x="78.5171%" y="181" width="0.4175%" height="15" fill="rgb(215,21,27)"/><text x="78.7671%" y="191.50"></text></g><g><title>early_lint_checks (1,010,391 samples, 0.11%)</title><rect x="79.0091%" y="197" width="0.1140%" height="15" fill="rgb(232,23,21)"/><text x="79.2591%" y="207.50"></text></g><g><title>free_global_ctxt (5,817,036 samples, 0.66%)</title><rect x="79.1231%" y="197" width="0.6562%" height="15" fill="rgb(244,5,23)"/><text x="79.3731%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,481,130 samples, 0.73%)</title><rect x="81.1975%" y="165" width="0.7311%" height="15" fill="rgb(226,81,46)"/><text x="81.4475%" y="175.50"></text></g><g><title>optimized_mir (14,321,983 samples, 1.62%)</title><rect x="80.3426%" y="181" width="1.6157%" height="15" fill="rgb(247,70,30)"/><text x="80.5926%" y="191.50"></text></g><g><title>generate_crate_metadata (19,454,648 samples, 2.19%)</title><rect x="79.7793%" y="197" width="2.1947%" height="15" fill="rgb(212,68,19)"/><text x="80.0293%" y="207.50">g..</text></g><g><title>hir_lowering (6,299,261 samples, 0.71%)</title><rect x="81.9740%" y="197" width="0.7106%" height="15" fill="rgb(240,187,13)"/><text x="82.2240%" y="207.50"></text></g><g><title>finish_ongoing_codegen (146,468,965 samples, 16.52%)</title><rect x="82.6870%" y="181" width="16.5233%" height="15" fill="rgb(223,113,26)"/><text x="82.9370%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,780,911 samples, 0.31%)</title><rect x="99.2103%" y="181" width="0.3137%" height="15" fill="rgb(206,192,2)"/><text x="99.4603%" y="191.50"></text></g><g><title>link_binary (2,470,028 samples, 0.28%)</title><rect x="99.2453%" y="165" width="0.2786%" height="15" fill="rgb(241,108,4)"/><text x="99.4953%" y="175.50"></text></g><g><title>link_rlib (1,807,420 samples, 0.20%)</title><rect x="99.3201%" y="149" width="0.2039%" height="15" fill="rgb(247,173,49)"/><text x="99.5701%" y="159.50"></text></g><g><title>link (149,282,916 samples, 16.84%)</title><rect x="82.6846%" y="197" width="16.8407%" height="15" fill="rgb(224,114,35)"/><text x="82.9346%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (2,980,303 samples, 0.34%)</title><rect x="99.5915%" y="197" width="0.3362%" height="15" fill="rgb(245,159,27)"/><text x="99.8415%" y="207.50"></text></g><g><title>all (886,440,752 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (886,440,752 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>