<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,866,385 samples, 4.32%)</title><rect x="0.7043%" y="197" width="4.3181%" height="15" fill="rgb(227,0,7)"/><text x="0.9543%" y="207.50">LLVM_..</text></g><g><title>item_attrs (145,192 samples, 0.11%)</title><rect x="15.9773%" y="85" width="0.1069%" height="15" fill="rgb(217,0,24)"/><text x="16.2273%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (140,992 samples, 0.10%)</title><rect x="15.9804%" y="69" width="0.1038%" height="15" fill="rgb(221,193,54)"/><text x="16.2304%" y="79.50"></text></g><g><title>codegen_fn_attrs (200,542 samples, 0.15%)</title><rect x="15.9450%" y="101" width="0.1476%" height="15" fill="rgb(248,212,6)"/><text x="16.1950%" y="111.50"></text></g><g><title>is_copy_raw (1,957,400 samples, 1.44%)</title><rect x="18.4307%" y="69" width="1.4408%" height="15" fill="rgb(208,68,35)"/><text x="18.6807%" y="79.50"></text></g><g><title>evaluate_obligation (1,732,919 samples, 1.28%)</title><rect x="18.5959%" y="53" width="1.2756%" height="15" fill="rgb(232,128,0)"/><text x="18.8459%" y="63.50"></text></g><g><title>needs_drop_raw (2,222,064 samples, 1.64%)</title><rect x="18.2502%" y="85" width="1.6356%" height="15" fill="rgb(207,160,47)"/><text x="18.5002%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (314,933 samples, 0.23%)</title><rect x="20.0234%" y="69" width="0.2318%" height="15" fill="rgb(228,23,34)"/><text x="20.2734%" y="79.50"></text></g><g><title>specialization_graph_of (625,648 samples, 0.46%)</title><rect x="20.2620%" y="69" width="0.4605%" height="15" fill="rgb(218,30,26)"/><text x="20.5120%" y="79.50"></text></g><g><title>impl_trait_ref (195,532 samples, 0.14%)</title><rect x="20.5786%" y="53" width="0.1439%" height="15" fill="rgb(220,122,19)"/><text x="20.8286%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (169,172 samples, 0.12%)</title><rect x="20.5980%" y="37" width="0.1245%" height="15" fill="rgb(250,228,42)"/><text x="20.8480%" y="47.50"></text></g><g><title>resolve_instance (1,184,865 samples, 0.87%)</title><rect x="19.8858%" y="85" width="0.8722%" height="15" fill="rgb(240,193,28)"/><text x="20.1358%" y="95.50"></text></g><g><title>thir_body (919,205 samples, 0.68%)</title><rect x="20.7823%" y="85" width="0.6766%" height="15" fill="rgb(216,20,37)"/><text x="21.0323%" y="95.50"></text></g><g><title>mir_const (9,069,715 samples, 6.68%)</title><rect x="14.8701%" y="133" width="6.6760%" height="15" fill="rgb(206,188,39)"/><text x="15.1201%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (8,067,913 samples, 5.94%)</title><rect x="15.6075%" y="117" width="5.9386%" height="15" fill="rgb(217,207,13)"/><text x="15.8575%" y="127.50">unsafety..</text></g><g><title>mir_built (7,408,927 samples, 5.45%)</title><rect x="16.0926%" y="101" width="5.4536%" height="15" fill="rgb(231,73,38)"/><text x="16.3426%" y="111.50">mir_bui..</text></g><g><title>mir_promoted (9,894,560 samples, 7.28%)</title><rect x="14.2984%" y="149" width="7.2832%" height="15" fill="rgb(225,20,46)"/><text x="14.5484%" y="159.50">mir_promot..</text></g><g><title>type_op_normalize_fn_sig (953,658 samples, 0.70%)</title><rect x="21.5816%" y="149" width="0.7020%" height="15" fill="rgb(210,31,41)"/><text x="21.8316%" y="159.50"></text></g><g><title>normalize_projection_ty (426,085 samples, 0.31%)</title><rect x="21.9699%" y="133" width="0.3136%" height="15" fill="rgb(221,200,47)"/><text x="22.2199%" y="143.50"></text></g><g><title>type_op_normalize_predicate (776,806 samples, 0.57%)</title><rect x="22.2836%" y="149" width="0.5718%" height="15" fill="rgb(226,26,5)"/><text x="22.5336%" y="159.50"></text></g><g><title>normalize_projection_ty (283,512 samples, 0.21%)</title><rect x="22.6467%" y="133" width="0.2087%" height="15" fill="rgb(249,33,26)"/><text x="22.8967%" y="143.50"></text></g><g><title>type_op_normalize_ty (340,213 samples, 0.25%)</title><rect x="22.8554%" y="149" width="0.2504%" height="15" fill="rgb(235,183,28)"/><text x="23.1054%" y="159.50"></text></g><g><title>MIR_borrow_checking (27,601,483 samples, 20.32%)</title><rect x="5.4301%" y="181" width="20.3169%" height="15" fill="rgb(221,5,38)"/><text x="5.6801%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (27,473,863 samples, 20.22%)</title><rect x="5.5241%" y="165" width="20.2229%" height="15" fill="rgb(247,18,42)"/><text x="5.7741%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (3,588,230 samples, 2.64%)</title><rect x="23.1058%" y="149" width="2.6412%" height="15" fill="rgb(241,131,45)"/><text x="23.3558%" y="159.50">ty..</text></g><g><title>hir_module_items (359,554 samples, 0.26%)</title><rect x="25.7703%" y="181" width="0.2647%" height="15" fill="rgb(249,31,29)"/><text x="26.0203%" y="191.50"></text></g><g><title>get_lang_items (142,772 samples, 0.11%)</title><rect x="26.4211%" y="133" width="0.1051%" height="15" fill="rgb(225,111,53)"/><text x="26.6711%" y="143.50"></text></g><g><title>should_inherit_track_caller (228,633 samples, 0.17%)</title><rect x="26.5262%" y="133" width="0.1683%" height="15" fill="rgb(238,160,17)"/><text x="26.7762%" y="143.50"></text></g><g><title>codegen_fn_attrs (526,797 samples, 0.39%)</title><rect x="26.3279%" y="149" width="0.3878%" height="15" fill="rgb(214,148,48)"/><text x="26.5779%" y="159.50"></text></g><g><title>check_mod_attrs (900,689 samples, 0.66%)</title><rect x="26.0529%" y="165" width="0.6630%" height="15" fill="rgb(232,36,49)"/><text x="26.3029%" y="175.50"></text></g><g><title>check_mod_const_bodies (208,393 samples, 0.15%)</title><rect x="26.7158%" y="165" width="0.1534%" height="15" fill="rgb(209,103,24)"/><text x="26.9658%" y="175.50"></text></g><g><title>lookup_deprecation_entry (190,342 samples, 0.14%)</title><rect x="27.1412%" y="149" width="0.1401%" height="15" fill="rgb(229,88,8)"/><text x="27.3912%" y="159.50"></text></g><g><title>stability_index (143,382 samples, 0.11%)</title><rect x="27.1758%" y="133" width="0.1055%" height="15" fill="rgb(213,181,19)"/><text x="27.4258%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (493,325 samples, 0.36%)</title><rect x="26.9570%" y="165" width="0.3631%" height="15" fill="rgb(254,191,54)"/><text x="27.2070%" y="175.50"></text></g><g><title>misc_checking_1 (1,799,270 samples, 1.32%)</title><rect x="26.0354%" y="181" width="1.3244%" height="15" fill="rgb(241,83,37)"/><text x="26.2854%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (446,745 samples, 0.33%)</title><rect x="27.3609%" y="165" width="0.3288%" height="15" fill="rgb(233,36,39)"/><text x="27.6109%" y="175.50"></text></g><g><title>check_mod_liveness (370,744 samples, 0.27%)</title><rect x="27.4169%" y="149" width="0.2729%" height="15" fill="rgb(226,3,54)"/><text x="27.6669%" y="159.50"></text></g><g><title>misc_checking_2 (1,039,272 samples, 0.76%)</title><rect x="27.3598%" y="181" width="0.7650%" height="15" fill="rgb(245,192,40)"/><text x="27.6098%" y="191.50"></text></g><g><title>match_checking (591,027 samples, 0.44%)</title><rect x="27.6898%" y="165" width="0.4350%" height="15" fill="rgb(238,167,29)"/><text x="27.9398%" y="175.50"></text></g><g><title>check_match (555,646 samples, 0.41%)</title><rect x="27.7158%" y="149" width="0.4090%" height="15" fill="rgb(232,182,51)"/><text x="27.9658%" y="159.50"></text></g><g><title>check_private_in_public (190,522 samples, 0.14%)</title><rect x="28.1326%" y="165" width="0.1402%" height="15" fill="rgb(231,60,39)"/><text x="28.3826%" y="175.50"></text></g><g><title>death_checking (303,673 samples, 0.22%)</title><rect x="28.2729%" y="165" width="0.2235%" height="15" fill="rgb(208,69,12)"/><text x="28.5229%" y="175.50"></text></g><g><title>crate_lints (977,920 samples, 0.72%)</title><rect x="28.4975%" y="149" width="0.7198%" height="15" fill="rgb(235,93,37)"/><text x="28.7475%" y="159.50"></text></g><g><title>type_of (478,186 samples, 0.35%)</title><rect x="28.8654%" y="133" width="0.3520%" height="15" fill="rgb(213,116,39)"/><text x="29.1154%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (396,205 samples, 0.29%)</title><rect x="28.9257%" y="117" width="0.2916%" height="15" fill="rgb(222,207,29)"/><text x="29.1757%" y="127.50"></text></g><g><title>lint_checking (1,318,514 samples, 0.97%)</title><rect x="28.4964%" y="165" width="0.9705%" height="15" fill="rgb(206,96,30)"/><text x="28.7464%" y="175.50"></text></g><g><title>module_lints (339,064 samples, 0.25%)</title><rect x="29.2173%" y="149" width="0.2496%" height="15" fill="rgb(218,138,4)"/><text x="29.4673%" y="159.50"></text></g><g><title>lint_mod (336,784 samples, 0.25%)</title><rect x="29.2190%" y="133" width="0.2479%" height="15" fill="rgb(250,191,14)"/><text x="29.4690%" y="143.50"></text></g><g><title>privacy_access_levels (284,783 samples, 0.21%)</title><rect x="29.4669%" y="165" width="0.2096%" height="15" fill="rgb(239,60,40)"/><text x="29.7169%" y="175.50"></text></g><g><title>privacy_checking_modules (1,063,822 samples, 0.78%)</title><rect x="29.6765%" y="165" width="0.7831%" height="15" fill="rgb(206,27,48)"/><text x="29.9265%" y="175.50"></text></g><g><title>check_mod_privacy (1,062,162 samples, 0.78%)</title><rect x="29.6778%" y="149" width="0.7818%" height="15" fill="rgb(225,35,8)"/><text x="29.9278%" y="159.50"></text></g><g><title>misc_checking_3 (3,190,965 samples, 2.35%)</title><rect x="28.1248%" y="181" width="2.3488%" height="15" fill="rgb(250,213,24)"/><text x="28.3748%" y="191.50">m..</text></g><g><title>impl_parent (268,684 samples, 0.20%)</title><rect x="30.9153%" y="117" width="0.1978%" height="15" fill="rgb(247,123,22)"/><text x="31.1653%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (173,573 samples, 0.13%)</title><rect x="30.9853%" y="101" width="0.1278%" height="15" fill="rgb(231,138,38)"/><text x="31.2353%" y="111.50"></text></g><g><title>impl_trait_ref (762,787 samples, 0.56%)</title><rect x="31.1130%" y="117" width="0.5615%" height="15" fill="rgb(231,145,46)"/><text x="31.3630%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (670,396 samples, 0.49%)</title><rect x="31.1810%" y="101" width="0.4935%" height="15" fill="rgb(251,118,11)"/><text x="31.4310%" y="111.50"></text></g><g><title>coherent_trait (1,647,468 samples, 1.21%)</title><rect x="30.5196%" y="149" width="1.2127%" height="15" fill="rgb(217,147,25)"/><text x="30.7696%" y="159.50"></text></g><g><title>specialization_graph_of (1,521,097 samples, 1.12%)</title><rect x="30.6126%" y="133" width="1.1196%" height="15" fill="rgb(247,81,37)"/><text x="30.8626%" y="143.50"></text></g><g><title>coherence_checking (1,702,979 samples, 1.25%)</title><rect x="30.5087%" y="165" width="1.2535%" height="15" fill="rgb(209,12,38)"/><text x="30.7587%" y="175.50"></text></g><g><title>dropck_outlives (713,600 samples, 0.53%)</title><rect x="44.8145%" y="117" width="0.5253%" height="15" fill="rgb(227,1,9)"/><text x="45.0645%" y="127.50"></text></g><g><title>generics_of (152,971 samples, 0.11%)</title><rect x="46.0467%" y="101" width="0.1126%" height="15" fill="rgb(248,47,43)"/><text x="46.2967%" y="111.50"></text></g><g><title>impl_trait_ref (148,872 samples, 0.11%)</title><rect x="46.1713%" y="101" width="0.1096%" height="15" fill="rgb(221,10,30)"/><text x="46.4213%" y="111.50"></text></g><g><title>specializes (240,602 samples, 0.18%)</title><rect x="46.3779%" y="101" width="0.1771%" height="15" fill="rgb(210,229,1)"/><text x="46.6279%" y="111.50"></text></g><g><title>param_env (160,281 samples, 0.12%)</title><rect x="46.4371%" y="85" width="0.1180%" height="15" fill="rgb(222,148,37)"/><text x="46.6871%" y="95.50"></text></g><g><title>trait_impls_of (172,153 samples, 0.13%)</title><rect x="46.5591%" y="101" width="0.1267%" height="15" fill="rgb(234,67,33)"/><text x="46.8091%" y="111.50"></text></g><g><title>evaluate_obligation (1,829,418 samples, 1.35%)</title><rect x="45.3398%" y="117" width="1.3466%" height="15" fill="rgb(247,98,35)"/><text x="45.5898%" y="127.50"></text></g><g><title>method_autoderef_steps (294,896 samples, 0.22%)</title><rect x="46.9933%" y="117" width="0.2171%" height="15" fill="rgb(247,138,52)"/><text x="47.2433%" y="127.50"></text></g><g><title>evaluate_obligation (145,071 samples, 0.11%)</title><rect x="47.1036%" y="101" width="0.1068%" height="15" fill="rgb(213,79,30)"/><text x="47.3536%" y="111.50"></text></g><g><title>predicates_of (211,652 samples, 0.16%)</title><rect x="47.2412%" y="117" width="0.1558%" height="15" fill="rgb(246,177,23)"/><text x="47.4912%" y="127.50"></text></g><g><title>predicates_defined_on (155,432 samples, 0.11%)</title><rect x="47.2826%" y="101" width="0.1144%" height="15" fill="rgb(230,62,27)"/><text x="47.5326%" y="111.50"></text></g><g><title>associated_item (137,421 samples, 0.10%)</title><rect x="48.6812%" y="85" width="0.1012%" height="15" fill="rgb(216,154,8)"/><text x="48.9312%" y="95.50"></text></g><g><title>associated_items (188,091 samples, 0.14%)</title><rect x="48.6478%" y="101" width="0.1384%" height="15" fill="rgb(244,35,45)"/><text x="48.8978%" y="111.50"></text></g><g><title>typeck (2,182,664 samples, 1.61%)</title><rect x="47.4571%" y="117" width="1.6066%" height="15" fill="rgb(251,115,12)"/><text x="47.7071%" y="127.50"></text></g><g><title>item_bodies_checking (23,507,539 samples, 17.30%)</title><rect x="31.7909%" y="165" width="17.3034%" height="15" fill="rgb(240,54,50)"/><text x="32.0409%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,505,329 samples, 17.30%)</title><rect x="31.7925%" y="149" width="17.3018%" height="15" fill="rgb(233,84,52)"/><text x="32.0425%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,412,568 samples, 17.23%)</title><rect x="31.8608%" y="133" width="17.2335%" height="15" fill="rgb(207,117,47)"/><text x="32.1108%" y="143.50">typeck</text></g><g><title>item_types_checking (2,781,271 samples, 2.05%)</title><rect x="49.0942%" y="165" width="2.0472%" height="15" fill="rgb(249,43,39)"/><text x="49.3442%" y="175.50">i..</text></g><g><title>check_mod_item_types (2,779,521 samples, 2.05%)</title><rect x="49.0955%" y="149" width="2.0459%" height="15" fill="rgb(209,38,44)"/><text x="49.3455%" y="159.50">c..</text></g><g><title>fn_sig (418,165 samples, 0.31%)</title><rect x="51.4172%" y="133" width="0.3078%" height="15" fill="rgb(236,212,23)"/><text x="51.6672%" y="143.50"></text></g><g><title>lint_levels (249,013 samples, 0.18%)</title><rect x="52.1100%" y="85" width="0.1833%" height="15" fill="rgb(242,79,21)"/><text x="52.3600%" y="95.50"></text></g><g><title>is_late_bound_map (629,796 samples, 0.46%)</title><rect x="51.8513%" y="117" width="0.4636%" height="15" fill="rgb(211,96,35)"/><text x="52.1013%" y="127.50"></text></g><g><title>resolve_lifetimes (618,275 samples, 0.46%)</title><rect x="51.8598%" y="101" width="0.4551%" height="15" fill="rgb(253,215,40)"/><text x="52.1098%" y="111.50"></text></g><g><title>named_region_map (147,501 samples, 0.11%)</title><rect x="52.3149%" y="117" width="0.1086%" height="15" fill="rgb(211,81,21)"/><text x="52.5649%" y="127.50"></text></g><g><title>generics_of (972,869 samples, 0.72%)</title><rect x="51.7250%" y="133" width="0.7161%" height="15" fill="rgb(208,190,38)"/><text x="51.9750%" y="143.50"></text></g><g><title>late_bound_vars_map (263,115 samples, 0.19%)</title><rect x="53.1261%" y="85" width="0.1937%" height="15" fill="rgb(235,213,38)"/><text x="53.3761%" y="95.50"></text></g><g><title>resolve_lifetimes (250,044 samples, 0.18%)</title><rect x="53.1357%" y="69" width="0.1841%" height="15" fill="rgb(237,122,38)"/><text x="53.3857%" y="79.50"></text></g><g><title>explicit_predicates_of (1,178,705 samples, 0.87%)</title><rect x="52.6244%" y="101" width="0.8676%" height="15" fill="rgb(244,218,35)"/><text x="52.8744%" y="111.50"></text></g><g><title>predicates_of (1,691,762 samples, 1.25%)</title><rect x="52.4714%" y="133" width="1.2453%" height="15" fill="rgb(240,68,47)"/><text x="52.7214%" y="143.50"></text></g><g><title>predicates_defined_on (1,616,471 samples, 1.19%)</title><rect x="52.5268%" y="117" width="1.1898%" height="15" fill="rgb(210,16,53)"/><text x="52.7768%" y="127.50"></text></g><g><title>inferred_outlives_of (305,204 samples, 0.22%)</title><rect x="53.4920%" y="101" width="0.2247%" height="15" fill="rgb(235,124,12)"/><text x="53.7420%" y="111.50"></text></g><g><title>inferred_outlives_crate (269,053 samples, 0.20%)</title><rect x="53.5186%" y="85" width="0.1980%" height="15" fill="rgb(224,169,11)"/><text x="53.7686%" y="95.50"></text></g><g><title>type_collecting (3,809,142 samples, 2.80%)</title><rect x="51.1420%" y="165" width="2.8038%" height="15" fill="rgb(250,166,2)"/><text x="51.3920%" y="175.50">ty..</text></g><g><title>collect_mod_item_types (3,799,842 samples, 2.80%)</title><rect x="51.1489%" y="149" width="2.7970%" height="15" fill="rgb(242,216,29)"/><text x="51.3989%" y="159.50">co..</text></g><g><title>type_of (200,292 samples, 0.15%)</title><rect x="53.7984%" y="133" width="0.1474%" height="15" fill="rgb(230,116,27)"/><text x="54.0484%" y="143.50"></text></g><g><title>evaluate_obligation (622,885 samples, 0.46%)</title><rect x="56.1051%" y="133" width="0.4585%" height="15" fill="rgb(228,99,48)"/><text x="56.3551%" y="143.50"></text></g><g><title>implied_outlives_bounds (424,134 samples, 0.31%)</title><rect x="56.5635%" y="133" width="0.3122%" height="15" fill="rgb(253,11,6)"/><text x="56.8135%" y="143.50"></text></g><g><title>param_env (693,999 samples, 0.51%)</title><rect x="56.8757%" y="133" width="0.5108%" height="15" fill="rgb(247,143,39)"/><text x="57.1257%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,682,943 samples, 3.45%)</title><rect x="54.1180%" y="149" width="3.4470%" height="15" fill="rgb(236,97,10)"/><text x="54.3680%" y="159.50">che..</text></g><g><title>region_scope_tree (242,462 samples, 0.18%)</title><rect x="57.3866%" y="133" width="0.1785%" height="15" fill="rgb(233,208,19)"/><text x="57.6366%" y="143.50"></text></g><g><title>param_env (315,903 samples, 0.23%)</title><rect x="58.9058%" y="133" width="0.2325%" height="15" fill="rgb(216,164,2)"/><text x="59.1558%" y="143.50"></text></g><g><title>check_item_well_formed (2,309,214 samples, 1.70%)</title><rect x="57.5651%" y="149" width="1.6998%" height="15" fill="rgb(220,129,5)"/><text x="57.8151%" y="159.50"></text></g><g><title>evaluate_obligation (213,983 samples, 0.16%)</title><rect x="60.1549%" y="133" width="0.1575%" height="15" fill="rgb(242,17,10)"/><text x="60.4049%" y="143.50"></text></g><g><title>implied_outlives_bounds (212,732 samples, 0.16%)</title><rect x="60.3125%" y="133" width="0.1566%" height="15" fill="rgb(242,107,0)"/><text x="60.5625%" y="143.50"></text></g><g><title>param_env (266,792 samples, 0.20%)</title><rect x="60.4690%" y="133" width="0.1964%" height="15" fill="rgb(251,28,31)"/><text x="60.7190%" y="143.50"></text></g><g><title>analysis (75,764,114 samples, 55.77%)</title><rect x="5.0224%" y="197" width="55.7683%" height="15" fill="rgb(233,223,10)"/><text x="5.2724%" y="207.50">analysis</text></g><g><title>type_check_crate (41,187,393 samples, 30.32%)</title><rect x="30.4736%" y="181" width="30.3171%" height="15" fill="rgb(215,21,27)"/><text x="30.7236%" y="191.50">type_check_crate</text></g><g><title>wf_checking (9,294,141 samples, 6.84%)</title><rect x="53.9495%" y="165" width="6.8412%" height="15" fill="rgb(232,23,21)"/><text x="54.1995%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (2,073,061 samples, 1.53%)</title><rect x="59.2648%" y="149" width="1.5259%" height="15" fill="rgb(244,5,23)"/><text x="59.5148%" y="159.50"></text></g><g><title>codegen_module (216,112 samples, 0.16%)</title><rect x="61.2336%" y="181" width="0.1591%" height="15" fill="rgb(226,81,46)"/><text x="61.4836%" y="191.50"></text></g><g><title>codegen_crate (884,069 samples, 0.65%)</title><rect x="60.7994%" y="197" width="0.6507%" height="15" fill="rgb(247,70,30)"/><text x="61.0494%" y="207.50"></text></g><g><title>codegen_module_optimize (2,198,044 samples, 1.62%)</title><rect x="61.4502%" y="197" width="1.6179%" height="15" fill="rgb(212,68,19)"/><text x="61.7002%" y="207.50"></text></g><g><title>LLVM_module_optimize (501,975 samples, 0.37%)</title><rect x="62.6986%" y="181" width="0.3695%" height="15" fill="rgb(240,187,13)"/><text x="62.9486%" y="191.50"></text></g><g><title>LLVM_lto_optimize (287,833 samples, 0.21%)</title><rect x="63.3523%" y="181" width="0.2119%" height="15" fill="rgb(223,113,26)"/><text x="63.6023%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,399,007 samples, 1.77%)</title><rect x="63.5642%" y="181" width="1.7659%" height="15" fill="rgb(206,192,2)"/><text x="63.8142%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,354,197 samples, 1.73%)</title><rect x="63.5971%" y="165" width="1.7329%" height="15" fill="rgb(241,108,4)"/><text x="63.8471%" y="175.50"></text></g><g><title>codegen_module_perform_lto (3,106,435 samples, 2.29%)</title><rect x="63.0681%" y="197" width="2.2866%" height="15" fill="rgb(247,173,49)"/><text x="63.3181%" y="207.50">c..</text></g><g><title>AST_validation (237,862 samples, 0.18%)</title><rect x="65.5226%" y="181" width="0.1751%" height="15" fill="rgb(224,114,35)"/><text x="65.7726%" y="191.50"></text></g><g><title>macro_expand_crate (8,383,461 samples, 6.17%)</title><rect x="65.8524%" y="181" width="6.1709%" height="15" fill="rgb(245,159,27)"/><text x="66.1024%" y="191.50">macro_ex..</text></g><g><title>expand_crate (8,358,431 samples, 6.15%)</title><rect x="65.8709%" y="165" width="6.1525%" height="15" fill="rgb(245,172,44)"/><text x="66.1209%" y="175.50">expand_c..</text></g><g><title>metadata_register_crate (205,682 samples, 0.15%)</title><rect x="71.8719%" y="149" width="0.1514%" height="15" fill="rgb(236,23,11)"/><text x="72.1219%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (369,684 samples, 0.27%)</title><rect x="72.0269%" y="181" width="0.2721%" height="15" fill="rgb(205,117,38)"/><text x="72.2769%" y="191.50"></text></g><g><title>late_resolve_crate (2,329,356 samples, 1.71%)</title><rect x="72.4062%" y="165" width="1.7146%" height="15" fill="rgb(237,72,25)"/><text x="72.6562%" y="175.50"></text></g><g><title>configure_and_expand (12,108,293 samples, 8.91%)</title><rect x="65.3547%" y="197" width="8.9127%" height="15" fill="rgb(244,70,9)"/><text x="65.6047%" y="207.50">configure_and..</text></g><g><title>resolve_crate (2,673,990 samples, 1.97%)</title><rect x="72.2990%" y="181" width="1.9683%" height="15" fill="rgb(217,125,39)"/><text x="72.5490%" y="191.50">r..</text></g><g><title>drop_ast (376,824 samples, 0.28%)</title><rect x="74.2673%" y="197" width="0.2774%" height="15" fill="rgb(235,36,10)"/><text x="74.5173%" y="207.50"></text></g><g><title>early_lint_checks (598,777 samples, 0.44%)</title><rect x="74.5555%" y="197" width="0.4407%" height="15" fill="rgb(251,123,47)"/><text x="74.8055%" y="207.50"></text></g><g><title>free_global_ctxt (2,995,643 samples, 2.21%)</title><rect x="74.9962%" y="197" width="2.2050%" height="15" fill="rgb(221,13,13)"/><text x="75.2462%" y="207.50">f..</text></g><g><title>is_sized_raw (147,152 samples, 0.11%)</title><rect x="81.3711%" y="149" width="0.1083%" height="15" fill="rgb(238,131,9)"/><text x="81.6211%" y="159.50"></text></g><g><title>layout_of (254,364 samples, 0.19%)</title><rect x="81.4794%" y="149" width="0.1872%" height="15" fill="rgb(211,50,8)"/><text x="81.7294%" y="159.50"></text></g><g><title>layout_of (935,931 samples, 0.69%)</title><rect x="81.0792%" y="165" width="0.6889%" height="15" fill="rgb(245,182,24)"/><text x="81.3292%" y="175.50"></text></g><g><title>is_copy_raw (1,487,384 samples, 1.09%)</title><rect x="85.0308%" y="133" width="1.0948%" height="15" fill="rgb(242,14,37)"/><text x="85.2808%" y="143.50"></text></g><g><title>evaluate_obligation (1,325,353 samples, 0.98%)</title><rect x="85.1500%" y="117" width="0.9756%" height="15" fill="rgb(246,228,12)"/><text x="85.4000%" y="127.50"></text></g><g><title>needs_drop_raw (1,645,646 samples, 1.21%)</title><rect x="84.9326%" y="149" width="1.2113%" height="15" fill="rgb(213,55,15)"/><text x="85.1826%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,250,504 samples, 4.60%)</title><rect x="81.7681%" y="165" width="4.6009%" height="15" fill="rgb(209,9,3)"/><text x="82.0181%" y="175.50">mir_d..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (267,370 samples, 0.20%)</title><rect x="86.1722%" y="149" width="0.1968%" height="15" fill="rgb(230,59,30)"/><text x="86.4222%" y="159.50"></text></g><g><title>normalize_projection_ty (161,450 samples, 0.12%)</title><rect x="86.2501%" y="133" width="0.1188%" height="15" fill="rgb(209,121,21)"/><text x="86.5001%" y="143.50"></text></g><g><title>optimized_mir (10,557,800 samples, 7.77%)</title><rect x="78.6058%" y="181" width="7.7714%" height="15" fill="rgb(220,109,13)"/><text x="78.8558%" y="191.50">optimized_m..</text></g><g><title>generate_crate_metadata (12,536,717 samples, 9.23%)</title><rect x="77.2013%" y="197" width="9.2280%" height="15" fill="rgb(232,18,1)"/><text x="77.4513%" y="207.50">generate_crat..</text></g><g><title>hir_lowering (6,096,107 samples, 4.49%)</title><rect x="86.4293%" y="197" width="4.4872%" height="15" fill="rgb(215,41,42)"/><text x="86.6793%" y="207.50">hir_l..</text></g><g><title>finish_ongoing_codegen (2,551,419 samples, 1.88%)</title><rect x="90.9279%" y="181" width="1.8780%" height="15" fill="rgb(224,123,36)"/><text x="91.1779%" y="191.50">f..</text></g><g><title>link_crate (831,959 samples, 0.61%)</title><rect x="92.8059%" y="181" width="0.6124%" height="15" fill="rgb(240,125,3)"/><text x="93.0559%" y="191.50"></text></g><g><title>link_binary (827,159 samples, 0.61%)</title><rect x="92.8095%" y="165" width="0.6089%" height="15" fill="rgb(205,98,50)"/><text x="93.0595%" y="175.50"></text></g><g><title>link_rlib (553,376 samples, 0.41%)</title><rect x="93.0110%" y="149" width="0.4073%" height="15" fill="rgb(205,185,37)"/><text x="93.2610%" y="159.50"></text></g><g><title>link (3,406,948 samples, 2.51%)</title><rect x="90.9165%" y="197" width="2.5078%" height="15" fill="rgb(238,207,15)"/><text x="91.1665%" y="207.50">li..</text></g><g><title>parse_crate (7,476,483 samples, 5.50%)</title><rect x="93.4243%" y="197" width="5.5033%" height="15" fill="rgb(213,199,42)"/><text x="93.6743%" y="207.50">parse_c..</text></g><g><title>prepare_outputs (359,174 samples, 0.26%)</title><rect x="98.9349%" y="197" width="0.2644%" height="15" fill="rgb(235,201,11)"/><text x="99.1849%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (557,666 samples, 0.41%)</title><rect x="99.1993%" y="197" width="0.4105%" height="15" fill="rgb(207,46,11)"/><text x="99.4493%" y="207.50"></text></g><g><title>all (135,855,106 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (135,855,106 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,32,47)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (396,955 samples, 0.29%)</title><rect x="99.7078%" y="197" width="0.2922%" height="15" fill="rgb(247,202,23)"/><text x="99.9578%" y="207.50"></text></g></svg></svg>