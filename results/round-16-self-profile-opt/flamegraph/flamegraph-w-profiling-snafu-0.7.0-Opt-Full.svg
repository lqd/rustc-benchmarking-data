<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (93,877,601 samples, 13.17%)</title><rect x="0.0803%" y="149" width="13.1696%" height="15" fill="rgb(227,0,7)"/><text x="0.3303%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,315,055 samples, 0.18%)</title><rect x="13.0654%" y="133" width="0.1845%" height="15" fill="rgb(217,0,24)"/><text x="13.3154%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,284,124 samples, 0.18%)</title><rect x="13.0697%" y="117" width="0.1801%" height="15" fill="rgb(221,193,54)"/><text x="13.3197%" y="127.50"></text></g><g><title>needs_drop_raw (822,309 samples, 0.12%)</title><rect x="14.7498%" y="37" width="0.1154%" height="15" fill="rgb(248,212,6)"/><text x="14.9998%" y="47.50"></text></g><g><title>mir_const (4,264,459 samples, 0.60%)</title><rect x="14.3731%" y="85" width="0.5982%" height="15" fill="rgb(208,68,35)"/><text x="14.6231%" y="95.50"></text></g><g><title>unsafety_check_result (3,604,573 samples, 0.51%)</title><rect x="14.4657%" y="69" width="0.5057%" height="15" fill="rgb(232,128,0)"/><text x="14.7157%" y="79.50"></text></g><g><title>mir_built (3,095,934 samples, 0.43%)</title><rect x="14.5371%" y="53" width="0.4343%" height="15" fill="rgb(207,160,47)"/><text x="14.7871%" y="63.50"></text></g><g><title>mir_promoted (5,336,121 samples, 0.75%)</title><rect x="14.2960%" y="101" width="0.7486%" height="15" fill="rgb(228,23,34)"/><text x="14.5460%" y="111.50"></text></g><g><title>type_op_prove_predicate (1,830,226 samples, 0.26%)</title><rect x="15.1145%" y="101" width="0.2568%" height="15" fill="rgb(218,30,26)"/><text x="15.3645%" y="111.50"></text></g><g><title>MIR_borrow_checking (14,917,147 samples, 2.09%)</title><rect x="13.2811%" y="133" width="2.0926%" height="15" fill="rgb(220,122,19)"/><text x="13.5311%" y="143.50">M..</text></g><g><title>mir_borrowck (14,830,667 samples, 2.08%)</title><rect x="13.2932%" y="117" width="2.0805%" height="15" fill="rgb(250,228,42)"/><text x="13.5432%" y="127.50">m..</text></g><g><title>codegen_fn_attrs (1,068,033 samples, 0.15%)</title><rect x="15.5032%" y="101" width="0.1498%" height="15" fill="rgb(240,193,28)"/><text x="15.7532%" y="111.50"></text></g><g><title>check_mod_attrs (1,643,239 samples, 0.23%)</title><rect x="15.4226%" y="117" width="0.2305%" height="15" fill="rgb(216,20,37)"/><text x="15.6726%" y="127.50"></text></g><g><title>misc_checking_1 (2,146,774 samples, 0.30%)</title><rect x="15.4166%" y="133" width="0.3012%" height="15" fill="rgb(206,188,39)"/><text x="15.6666%" y="143.50"></text></g><g><title>death_checking (717,478 samples, 0.10%)</title><rect x="15.8403%" y="117" width="0.1007%" height="15" fill="rgb(217,207,13)"/><text x="16.0903%" y="127.50"></text></g><g><title>crate_lints (3,170,066 samples, 0.44%)</title><rect x="15.9411%" y="101" width="0.4447%" height="15" fill="rgb(231,73,38)"/><text x="16.1911%" y="111.50"></text></g><g><title>type_of (1,065,913 samples, 0.15%)</title><rect x="16.2363%" y="85" width="0.1495%" height="15" fill="rgb(225,20,46)"/><text x="16.4863%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (830,021 samples, 0.12%)</title><rect x="16.2694%" y="69" width="0.1164%" height="15" fill="rgb(210,31,41)"/><text x="16.5194%" y="79.50"></text></g><g><title>lint_checking (3,479,549 samples, 0.49%)</title><rect x="15.9409%" y="117" width="0.4881%" height="15" fill="rgb(221,200,47)"/><text x="16.1909%" y="127.50"></text></g><g><title>privacy_checking_modules (754,009 samples, 0.11%)</title><rect x="16.4627%" y="117" width="0.1058%" height="15" fill="rgb(226,26,5)"/><text x="16.7127%" y="127.50"></text></g><g><title>check_mod_privacy (745,348 samples, 0.10%)</title><rect x="16.4639%" y="101" width="0.1046%" height="15" fill="rgb(249,33,26)"/><text x="16.7139%" y="111.50"></text></g><g><title>misc_checking_3 (5,402,351 samples, 0.76%)</title><rect x="15.8131%" y="133" width="0.7579%" height="15" fill="rgb(235,183,28)"/><text x="16.0631%" y="143.50"></text></g><g><title>impl_parent (1,927,742 samples, 0.27%)</title><rect x="17.2077%" y="69" width="0.2704%" height="15" fill="rgb(221,5,38)"/><text x="17.4577%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,160,896 samples, 0.16%)</title><rect x="17.3153%" y="53" width="0.1629%" height="15" fill="rgb(247,18,42)"/><text x="17.5653%" y="63.50"></text></g><g><title>impl_trait_ref (4,593,413 samples, 0.64%)</title><rect x="17.4781%" y="69" width="0.6444%" height="15" fill="rgb(241,131,45)"/><text x="17.7281%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,846,547 samples, 0.54%)</title><rect x="17.5829%" y="53" width="0.5396%" height="15" fill="rgb(249,31,29)"/><text x="17.8329%" y="63.50"></text></g><g><title>coherent_trait (11,601,610 samples, 1.63%)</title><rect x="16.5812%" y="101" width="1.6275%" height="15" fill="rgb(225,111,53)"/><text x="16.8312%" y="111.50"></text></g><g><title>specialization_graph_of (10,535,868 samples, 1.48%)</title><rect x="16.7307%" y="85" width="1.4780%" height="15" fill="rgb(238,160,17)"/><text x="16.9807%" y="95.50"></text></g><g><title>coherence_checking (11,676,691 samples, 1.64%)</title><rect x="16.5782%" y="117" width="1.6381%" height="15" fill="rgb(214,148,48)"/><text x="16.8282%" y="127.50"></text></g><g><title>typeck (3,024,915 samples, 0.42%)</title><rect x="19.8885%" y="69" width="0.4243%" height="15" fill="rgb(232,36,49)"/><text x="20.1385%" y="79.50"></text></g><g><title>item_bodies_checking (14,939,056 samples, 2.10%)</title><rect x="18.2211%" y="117" width="2.0957%" height="15" fill="rgb(209,103,24)"/><text x="18.4711%" y="127.50">i..</text></g><g><title>typeck_item_bodies (14,936,226 samples, 2.10%)</title><rect x="18.2215%" y="101" width="2.0953%" height="15" fill="rgb(229,88,8)"/><text x="18.4715%" y="111.50">t..</text></g><g><title>typeck (14,878,186 samples, 2.09%)</title><rect x="18.2296%" y="85" width="2.0872%" height="15" fill="rgb(213,181,19)"/><text x="18.4796%" y="95.50">t..</text></g><g><title>item_types_checking (1,544,177 samples, 0.22%)</title><rect x="20.3168%" y="117" width="0.2166%" height="15" fill="rgb(254,191,54)"/><text x="20.5668%" y="127.50"></text></g><g><title>check_mod_item_types (1,534,357 samples, 0.22%)</title><rect x="20.3182%" y="101" width="0.2152%" height="15" fill="rgb(241,83,37)"/><text x="20.5682%" y="111.50"></text></g><g><title>predicates_of (805,962 samples, 0.11%)</title><rect x="20.6782%" y="85" width="0.1131%" height="15" fill="rgb(233,36,39)"/><text x="20.9282%" y="95.50"></text></g><g><title>predicates_defined_on (755,441 samples, 0.11%)</title><rect x="20.6853%" y="69" width="0.1060%" height="15" fill="rgb(226,3,54)"/><text x="20.9353%" y="79.50"></text></g><g><title>type_collecting (2,063,774 samples, 0.29%)</title><rect x="20.5337%" y="117" width="0.2895%" height="15" fill="rgb(245,192,40)"/><text x="20.7837%" y="127.50"></text></g><g><title>collect_mod_item_types (2,050,821 samples, 0.29%)</title><rect x="20.5355%" y="101" width="0.2877%" height="15" fill="rgb(238,167,29)"/><text x="20.7855%" y="111.50"></text></g><g><title>check_impl_item_well_formed (2,785,831 samples, 0.39%)</title><rect x="20.8496%" y="101" width="0.3908%" height="15" fill="rgb(232,182,51)"/><text x="21.0996%" y="111.50"></text></g><g><title>check_item_well_formed (2,127,154 samples, 0.30%)</title><rect x="21.2404%" y="101" width="0.2984%" height="15" fill="rgb(231,60,39)"/><text x="21.4904%" y="111.50"></text></g><g><title>analysis (60,746,450 samples, 8.52%)</title><rect x="13.2499%" y="149" width="8.5218%" height="15" fill="rgb(208,69,12)"/><text x="13.4999%" y="159.50">analysis</text></g><g><title>type_check_crate (37,072,295 samples, 5.20%)</title><rect x="16.5710%" y="133" width="5.2007%" height="15" fill="rgb(235,93,37)"/><text x="16.8210%" y="143.50">type_c..</text></g><g><title>wf_checking (6,757,166 samples, 0.95%)</title><rect x="20.8238%" y="117" width="0.9479%" height="15" fill="rgb(213,116,39)"/><text x="21.0738%" y="127.50"></text></g><g><title>check_trait_item_well_formed (1,660,218 samples, 0.23%)</title><rect x="21.5388%" y="101" width="0.2329%" height="15" fill="rgb(222,207,29)"/><text x="21.7888%" y="111.50"></text></g><g><title>layout_of (1,153,593 samples, 0.16%)</title><rect x="24.4080%" y="101" width="0.1618%" height="15" fill="rgb(206,96,30)"/><text x="24.6580%" y="111.50"></text></g><g><title>param_env (1,684,257 samples, 0.24%)</title><rect x="24.5699%" y="101" width="0.2363%" height="15" fill="rgb(218,138,4)"/><text x="24.8199%" y="111.50"></text></g><g><title>fn_abi_of_instance (6,097,444 samples, 0.86%)</title><rect x="23.9883%" y="117" width="0.8554%" height="15" fill="rgb(250,191,14)"/><text x="24.2383%" y="127.50"></text></g><g><title>codegen_module (21,636,192 samples, 3.04%)</title><rect x="21.9538%" y="133" width="3.0352%" height="15" fill="rgb(239,60,40)"/><text x="22.2038%" y="143.50">cod..</text></g><g><title>codegen_fn_attrs (851,558 samples, 0.12%)</title><rect x="25.1294%" y="85" width="0.1195%" height="15" fill="rgb(206,27,48)"/><text x="25.3794%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (824,179 samples, 0.12%)</title><rect x="25.5667%" y="69" width="0.1156%" height="15" fill="rgb(225,35,8)"/><text x="25.8167%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,071,643 samples, 0.15%)</title><rect x="25.6823%" y="69" width="0.1503%" height="15" fill="rgb(250,213,24)"/><text x="25.9323%" y="79.50"></text></g><g><title>optimized_mir (3,861,672 samples, 0.54%)</title><rect x="25.3369%" y="85" width="0.5417%" height="15" fill="rgb(247,123,22)"/><text x="25.5869%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (951,125 samples, 0.13%)</title><rect x="25.9431%" y="69" width="0.1334%" height="15" fill="rgb(231,138,38)"/><text x="26.1931%" y="79.50"></text></g><g><title>specialization_graph_of (2,575,308 samples, 0.36%)</title><rect x="26.1413%" y="69" width="0.3613%" height="15" fill="rgb(231,145,46)"/><text x="26.3913%" y="79.50"></text></g><g><title>impl_trait_ref (907,526 samples, 0.13%)</title><rect x="26.3752%" y="53" width="0.1273%" height="15" fill="rgb(251,118,11)"/><text x="26.6252%" y="63.50"></text></g><g><title>resolve_instance (4,641,325 samples, 0.65%)</title><rect x="25.8786%" y="85" width="0.6511%" height="15" fill="rgb(217,147,25)"/><text x="26.1286%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (11,932,514 samples, 1.67%)</title><rect x="24.9945%" y="101" width="1.6740%" height="15" fill="rgb(247,81,37)"/><text x="25.2445%" y="111.50"></text></g><g><title>monomorphization_collector (12,022,205 samples, 1.69%)</title><rect x="24.9942%" y="117" width="1.6865%" height="15" fill="rgb(209,12,38)"/><text x="25.2442%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (836,749 samples, 0.12%)</title><rect x="26.6814%" y="101" width="0.1174%" height="15" fill="rgb(227,1,9)"/><text x="26.9314%" y="111.50"></text></g><g><title>symbol_name (755,907 samples, 0.11%)</title><rect x="26.6927%" y="85" width="0.1060%" height="15" fill="rgb(248,47,43)"/><text x="26.9427%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (13,260,948 samples, 1.86%)</title><rect x="24.9900%" y="133" width="1.8603%" height="15" fill="rgb(221,10,30)"/><text x="25.2400%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,208,943 samples, 0.17%)</title><rect x="26.6807%" y="117" width="0.1696%" height="15" fill="rgb(210,229,1)"/><text x="26.9307%" y="127.50"></text></g><g><title>codegen_crate (36,262,735 samples, 5.09%)</title><rect x="21.7727%" y="149" width="5.0871%" height="15" fill="rgb(222,148,37)"/><text x="22.0227%" y="159.50">codege..</text></g><g><title>codegen_module_optimize (153,381,859 samples, 21.52%)</title><rect x="26.8598%" y="149" width="21.5171%" height="15" fill="rgb(234,67,33)"/><text x="27.1098%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (131,838,297 samples, 18.49%)</title><rect x="29.8820%" y="133" width="18.4949%" height="15" fill="rgb(247,98,35)"/><text x="30.1320%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (81,486,476 samples, 11.43%)</title><rect x="50.8929%" y="133" width="11.4313%" height="15" fill="rgb(247,138,52)"/><text x="51.1429%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (138,424,587 samples, 19.42%)</title><rect x="62.3242%" y="133" width="19.4189%" height="15" fill="rgb(213,79,30)"/><text x="62.5742%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (136,387,024 samples, 19.13%)</title><rect x="62.6100%" y="117" width="19.1330%" height="15" fill="rgb(246,177,23)"/><text x="62.8600%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>LLVM_thin_lto_import (12,600,560 samples, 1.77%)</title><rect x="81.7431%" y="133" width="1.7677%" height="15" fill="rgb(230,62,27)"/><text x="81.9931%" y="143.50"></text></g><g><title>codegen_module_perform_lto (251,278,718 samples, 35.25%)</title><rect x="48.3770%" y="149" width="35.2506%" height="15" fill="rgb(216,154,8)"/><text x="48.6270%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (5,236,119 samples, 0.73%)</title><rect x="86.2573%" y="101" width="0.7345%" height="15" fill="rgb(244,35,45)"/><text x="86.5073%" y="111.50"></text></g><g><title>macro_expand_crate (23,562,893 samples, 3.31%)</title><rect x="83.6889%" y="133" width="3.3055%" height="15" fill="rgb(251,115,12)"/><text x="83.9389%" y="143.50">mac..</text></g><g><title>expand_crate (23,552,223 samples, 3.30%)</title><rect x="83.6904%" y="117" width="3.3040%" height="15" fill="rgb(240,54,50)"/><text x="83.9404%" y="127.50">exp..</text></g><g><title>late_resolve_crate (1,158,233 samples, 0.16%)</title><rect x="87.0413%" y="117" width="0.1625%" height="15" fill="rgb(233,84,52)"/><text x="87.2913%" y="127.50"></text></g><g><title>configure_and_expand (25,590,987 samples, 3.59%)</title><rect x="83.6275%" y="149" width="3.5900%" height="15" fill="rgb(207,117,47)"/><text x="83.8775%" y="159.50">conf..</text></g><g><title>resolve_crate (1,459,296 samples, 0.20%)</title><rect x="87.0129%" y="133" width="0.2047%" height="15" fill="rgb(249,43,39)"/><text x="87.2629%" y="143.50"></text></g><g><title>free_global_ctxt (5,501,561 samples, 0.77%)</title><rect x="87.2865%" y="149" width="0.7718%" height="15" fill="rgb(209,38,44)"/><text x="87.5365%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,729,771 samples, 0.24%)</title><rect x="88.4778%" y="117" width="0.2427%" height="15" fill="rgb(236,212,23)"/><text x="88.7278%" y="127.50"></text></g><g><title>optimized_mir (3,042,285 samples, 0.43%)</title><rect x="88.2948%" y="133" width="0.4268%" height="15" fill="rgb(242,79,21)"/><text x="88.5448%" y="143.50"></text></g><g><title>generate_crate_metadata (4,779,664 samples, 0.67%)</title><rect x="88.0583%" y="149" width="0.6705%" height="15" fill="rgb(211,96,35)"/><text x="88.3083%" y="159.50"></text></g><g><title>hir_lowering (2,862,242 samples, 0.40%)</title><rect x="88.7288%" y="149" width="0.4015%" height="15" fill="rgb(253,215,40)"/><text x="88.9788%" y="159.50"></text></g><g><title>finish_ongoing_codegen (70,012,014 samples, 9.82%)</title><rect x="89.1337%" y="133" width="9.8216%" height="15" fill="rgb(211,81,21)"/><text x="89.3837%" y="143.50">finish_ongoing..</text></g><g><title>link_crate (2,508,908 samples, 0.35%)</title><rect x="98.9554%" y="133" width="0.3520%" height="15" fill="rgb(208,190,38)"/><text x="99.2054%" y="143.50"></text></g><g><title>link_binary (2,466,768 samples, 0.35%)</title><rect x="98.9613%" y="117" width="0.3461%" height="15" fill="rgb(235,213,38)"/><text x="99.2113%" y="127.50"></text></g><g><title>link_rlib (1,532,477 samples, 0.21%)</title><rect x="99.0923%" y="101" width="0.2150%" height="15" fill="rgb(237,122,38)"/><text x="99.3423%" y="111.50"></text></g><g><title>link (72,560,992 samples, 10.18%)</title><rect x="89.1303%" y="149" width="10.1792%" height="15" fill="rgb(244,218,35)"/><text x="89.3803%" y="159.50">link</text></g><g><title>parse_crate (2,561,309 samples, 0.36%)</title><rect x="99.3095%" y="149" width="0.3593%" height="15" fill="rgb(240,68,47)"/><text x="99.5595%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,670,898 samples, 0.23%)</title><rect x="99.7005%" y="149" width="0.2344%" height="15" fill="rgb(210,16,53)"/><text x="99.9505%" y="159.50"></text></g><g><title>all (712,835,466 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (712,835,466 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>