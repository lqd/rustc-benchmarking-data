<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,581,222 samples, 13.00%)</title><rect x="1.5378%" y="245" width="13.0007%" height="15" fill="rgb(227,0,7)"/><text x="1.7878%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (147,181 samples, 0.34%)</title><rect x="14.1957%" y="229" width="0.3428%" height="15" fill="rgb(217,0,24)"/><text x="14.4457%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (131,691 samples, 0.31%)</title><rect x="14.2318%" y="213" width="0.3068%" height="15" fill="rgb(221,193,54)"/><text x="14.4818%" y="223.50"></text></g><g><title>explicit_predicates_of (67,341 samples, 0.16%)</title><rect x="16.2669%" y="53" width="0.1569%" height="15" fill="rgb(248,212,6)"/><text x="16.5169%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (66,771 samples, 0.16%)</title><rect x="16.2682%" y="37" width="0.1555%" height="15" fill="rgb(208,68,35)"/><text x="16.5182%" y="47.50"></text></g><g><title>needs_drop_raw (138,362 samples, 0.32%)</title><rect x="16.1141%" y="133" width="0.3223%" height="15" fill="rgb(232,128,0)"/><text x="16.3641%" y="143.50"></text></g><g><title>is_copy_raw (136,352 samples, 0.32%)</title><rect x="16.1188%" y="117" width="0.3176%" height="15" fill="rgb(207,160,47)"/><text x="16.3688%" y="127.50"></text></g><g><title>evaluate_obligation (132,952 samples, 0.31%)</title><rect x="16.1267%" y="101" width="0.3097%" height="15" fill="rgb(228,23,34)"/><text x="16.3767%" y="111.50"></text></g><g><title>predicates_of (86,382 samples, 0.20%)</title><rect x="16.2352%" y="85" width="0.2012%" height="15" fill="rgb(218,30,26)"/><text x="16.4852%" y="95.50"></text></g><g><title>predicates_defined_on (76,012 samples, 0.18%)</title><rect x="16.2594%" y="69" width="0.1771%" height="15" fill="rgb(220,122,19)"/><text x="16.5094%" y="79.50"></text></g><g><title>mir_const (414,064 samples, 0.96%)</title><rect x="15.5900%" y="181" width="0.9645%" height="15" fill="rgb(250,228,42)"/><text x="15.8400%" y="191.50"></text></g><g><title>unsafety_check_result (351,313 samples, 0.82%)</title><rect x="15.7361%" y="165" width="0.8183%" height="15" fill="rgb(240,193,28)"/><text x="15.9861%" y="175.50"></text></g><g><title>mir_built (339,733 samples, 0.79%)</title><rect x="15.7631%" y="149" width="0.7914%" height="15" fill="rgb(216,20,37)"/><text x="16.0131%" y="159.50"></text></g><g><title>mir_promoted (443,445 samples, 1.03%)</title><rect x="15.5235%" y="197" width="1.0329%" height="15" fill="rgb(206,188,39)"/><text x="15.7735%" y="207.50"></text></g><g><title>MIR_borrow_checking (791,149 samples, 1.84%)</title><rect x="14.8664%" y="229" width="1.8429%" height="15" fill="rgb(217,207,13)"/><text x="15.1164%" y="239.50">M..</text></g><g><title>mir_borrowck (789,429 samples, 1.84%)</title><rect x="14.8704%" y="213" width="1.8389%" height="15" fill="rgb(231,73,38)"/><text x="15.1204%" y="223.50">m..</text></g><g><title>hir_module_items (145,131 samples, 0.34%)</title><rect x="16.7156%" y="229" width="0.3381%" height="15" fill="rgb(225,20,46)"/><text x="16.9656%" y="239.50"></text></g><g><title>get_lang_items (81,171 samples, 0.19%)</title><rect x="17.4707%" y="181" width="0.1891%" height="15" fill="rgb(210,31,41)"/><text x="17.7207%" y="191.50"></text></g><g><title>codegen_fn_attrs (60,680 samples, 0.14%)</title><rect x="17.8087%" y="165" width="0.1413%" height="15" fill="rgb(221,200,47)"/><text x="18.0587%" y="175.50"></text></g><g><title>should_inherit_track_caller (126,641 samples, 0.29%)</title><rect x="17.6598%" y="181" width="0.2950%" height="15" fill="rgb(226,26,5)"/><text x="17.9098%" y="191.50"></text></g><g><title>codegen_fn_attrs (309,273 samples, 0.72%)</title><rect x="17.3055%" y="197" width="0.7204%" height="15" fill="rgb(249,33,26)"/><text x="17.5555%" y="207.50"></text></g><g><title>check_mod_attrs (392,325 samples, 0.91%)</title><rect x="17.1127%" y="213" width="0.9139%" height="15" fill="rgb(235,183,28)"/><text x="17.3627%" y="223.50"></text></g><g><title>lookup_deprecation_entry (50,001 samples, 0.12%)</title><rect x="18.2391%" y="197" width="0.1165%" height="15" fill="rgb(221,5,38)"/><text x="18.4891%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (138,441 samples, 0.32%)</title><rect x="18.1282%" y="213" width="0.3225%" height="15" fill="rgb(247,18,42)"/><text x="18.3782%" y="223.50"></text></g><g><title>misc_checking_1 (637,628 samples, 1.49%)</title><rect x="17.0541%" y="229" width="1.4853%" height="15" fill="rgb(241,131,45)"/><text x="17.3041%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (56,660 samples, 0.13%)</title><rect x="18.5433%" y="213" width="0.1320%" height="15" fill="rgb(249,31,29)"/><text x="18.7933%" y="223.50"></text></g><g><title>check_mod_liveness (45,160 samples, 0.11%)</title><rect x="18.5701%" y="197" width="0.1052%" height="15" fill="rgb(225,111,53)"/><text x="18.8201%" y="207.50"></text></g><g><title>misc_checking_2 (109,041 samples, 0.25%)</title><rect x="18.5394%" y="229" width="0.2540%" height="15" fill="rgb(238,160,17)"/><text x="18.7894%" y="239.50"></text></g><g><title>match_checking (50,701 samples, 0.12%)</title><rect x="18.6753%" y="213" width="0.1181%" height="15" fill="rgb(214,148,48)"/><text x="18.9253%" y="223.50"></text></g><g><title>check_match (48,120 samples, 0.11%)</title><rect x="18.6813%" y="197" width="0.1121%" height="15" fill="rgb(232,36,49)"/><text x="18.9313%" y="207.50"></text></g><g><title>death_checking (82,171 samples, 0.19%)</title><rect x="18.8721%" y="213" width="0.1914%" height="15" fill="rgb(209,103,24)"/><text x="19.1221%" y="223.50"></text></g><g><title>crate_lints (61,241 samples, 0.14%)</title><rect x="19.0670%" y="197" width="0.1427%" height="15" fill="rgb(229,88,8)"/><text x="19.3170%" y="207.50"></text></g><g><title>lint_checking (97,251 samples, 0.23%)</title><rect x="19.0635%" y="213" width="0.2265%" height="15" fill="rgb(213,181,19)"/><text x="19.3135%" y="223.50"></text></g><g><title>privacy_access_levels (50,151 samples, 0.12%)</title><rect x="19.2901%" y="213" width="0.1168%" height="15" fill="rgb(254,191,54)"/><text x="19.5401%" y="223.50"></text></g><g><title>privacy_checking_modules (53,031 samples, 0.12%)</title><rect x="19.4069%" y="213" width="0.1235%" height="15" fill="rgb(241,83,37)"/><text x="19.6569%" y="223.50"></text></g><g><title>check_mod_privacy (52,011 samples, 0.12%)</title><rect x="19.4093%" y="197" width="0.1212%" height="15" fill="rgb(233,36,39)"/><text x="19.6593%" y="207.50"></text></g><g><title>misc_checking_3 (329,564 samples, 0.77%)</title><rect x="18.7934%" y="229" width="0.7677%" height="15" fill="rgb(226,3,54)"/><text x="19.0434%" y="239.50"></text></g><g><title>impl_parent (353,836 samples, 0.82%)</title><rect x="20.7714%" y="165" width="0.8242%" height="15" fill="rgb(245,192,40)"/><text x="21.0214%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (259,954 samples, 0.61%)</title><rect x="20.9901%" y="149" width="0.6055%" height="15" fill="rgb(238,167,29)"/><text x="21.2401%" y="159.50"></text></g><g><title>impl_trait_ref (1,222,995 samples, 2.85%)</title><rect x="21.5956%" y="165" width="2.8488%" height="15" fill="rgb(232,182,51)"/><text x="21.8456%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,129,284 samples, 2.63%)</title><rect x="21.8139%" y="149" width="2.6305%" height="15" fill="rgb(231,60,39)"/><text x="22.0639%" y="159.50">me..</text></g><g><title>coherent_trait (2,181,384 samples, 5.08%)</title><rect x="19.6297%" y="197" width="5.0812%" height="15" fill="rgb(208,69,12)"/><text x="19.8797%" y="207.50">cohere..</text></g><g><title>specialization_graph_of (2,174,494 samples, 5.07%)</title><rect x="19.6458%" y="181" width="5.0652%" height="15" fill="rgb(235,93,37)"/><text x="19.8958%" y="191.50">specia..</text></g><g><title>trait_impls_of (114,431 samples, 0.27%)</title><rect x="24.4444%" y="165" width="0.2666%" height="15" fill="rgb(213,116,39)"/><text x="24.6944%" y="175.50"></text></g><g><title>coherence_checking (2,236,605 samples, 5.21%)</title><rect x="19.5951%" y="213" width="5.2099%" height="15" fill="rgb(222,207,29)"/><text x="19.8451%" y="223.50">cohere..</text></g><g><title>method_autoderef_steps (47,301 samples, 0.11%)</title><rect x="25.9667%" y="165" width="0.1102%" height="15" fill="rgb(206,96,30)"/><text x="26.2167%" y="175.50"></text></g><g><title>item_bodies_checking (537,166 samples, 1.25%)</title><rect x="24.8403%" y="213" width="1.2513%" height="15" fill="rgb(218,138,4)"/><text x="25.0903%" y="223.50"></text></g><g><title>typeck_item_bodies (535,256 samples, 1.25%)</title><rect x="24.8448%" y="197" width="1.2468%" height="15" fill="rgb(250,191,14)"/><text x="25.0948%" y="207.50"></text></g><g><title>typeck (533,046 samples, 1.24%)</title><rect x="24.8499%" y="181" width="1.2417%" height="15" fill="rgb(239,60,40)"/><text x="25.0999%" y="191.50"></text></g><g><title>impl_parent (54,472 samples, 0.13%)</title><rect x="26.6634%" y="133" width="0.1269%" height="15" fill="rgb(206,27,48)"/><text x="26.9134%" y="143.50"></text></g><g><title>impl_trait_ref (207,831 samples, 0.48%)</title><rect x="26.7903%" y="133" width="0.4841%" height="15" fill="rgb(225,35,8)"/><text x="27.0403%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (188,231 samples, 0.44%)</title><rect x="26.8359%" y="117" width="0.4385%" height="15" fill="rgb(250,213,24)"/><text x="27.0859%" y="127.50"></text></g><g><title>adt_destructor (385,344 samples, 0.90%)</title><rect x="26.4529%" y="181" width="0.8976%" height="15" fill="rgb(247,123,22)"/><text x="26.7029%" y="191.50"></text></g><g><title>coherent_trait (378,424 samples, 0.88%)</title><rect x="26.4690%" y="165" width="0.8815%" height="15" fill="rgb(231,138,38)"/><text x="26.7190%" y="175.50"></text></g><g><title>specialization_graph_of (376,724 samples, 0.88%)</title><rect x="26.4730%" y="149" width="0.8775%" height="15" fill="rgb(231,145,46)"/><text x="26.7230%" y="159.50"></text></g><g><title>needs_drop_raw (154,622 samples, 0.36%)</title><rect x="28.9237%" y="85" width="0.3602%" height="15" fill="rgb(251,118,11)"/><text x="29.1737%" y="95.50"></text></g><g><title>is_copy_raw (150,162 samples, 0.35%)</title><rect x="28.9340%" y="69" width="0.3498%" height="15" fill="rgb(217,147,25)"/><text x="29.1840%" y="79.50"></text></g><g><title>evaluate_obligation (145,002 samples, 0.34%)</title><rect x="28.9461%" y="53" width="0.3378%" height="15" fill="rgb(247,81,37)"/><text x="29.1961%" y="63.50"></text></g><g><title>trait_impls_of (134,042 samples, 0.31%)</title><rect x="28.9716%" y="37" width="0.3122%" height="15" fill="rgb(209,12,38)"/><text x="29.2216%" y="47.50"></text></g><g><title>thir_body (44,401 samples, 0.10%)</title><rect x="29.2880%" y="85" width="0.1034%" height="15" fill="rgb(227,1,9)"/><text x="29.5380%" y="95.50"></text></g><g><title>mir_const (697,298 samples, 1.62%)</title><rect x="28.5603%" y="133" width="1.6243%" height="15" fill="rgb(248,47,43)"/><text x="28.8103%" y="143.50"></text></g><g><title>unsafety_check_result (660,048 samples, 1.54%)</title><rect x="28.6470%" y="117" width="1.5375%" height="15" fill="rgb(221,10,30)"/><text x="28.8970%" y="127.50"></text></g><g><title>mir_built (623,667 samples, 1.45%)</title><rect x="28.7318%" y="101" width="1.4527%" height="15" fill="rgb(210,229,1)"/><text x="28.9818%" y="111.50"></text></g><g><title>typeck (335,444 samples, 0.78%)</title><rect x="29.4031%" y="85" width="0.7814%" height="15" fill="rgb(222,148,37)"/><text x="29.6531%" y="95.50"></text></g><g><title>mir_promoted (769,779 samples, 1.79%)</title><rect x="28.4033%" y="149" width="1.7931%" height="15" fill="rgb(234,67,33)"/><text x="28.6533%" y="159.50">m..</text></g><g><title>item_types_checking (1,782,170 samples, 4.15%)</title><rect x="26.0916%" y="213" width="4.1513%" height="15" fill="rgb(247,98,35)"/><text x="26.3416%" y="223.50">item_..</text></g><g><title>check_mod_item_types (1,780,000 samples, 4.15%)</title><rect x="26.0967%" y="197" width="4.1463%" height="15" fill="rgb(247,138,52)"/><text x="26.3467%" y="207.50">check..</text></g><g><title>type_of (1,193,033 samples, 2.78%)</title><rect x="27.4639%" y="181" width="2.7790%" height="15" fill="rgb(213,79,30)"/><text x="27.7139%" y="191.50">ty..</text></g><g><title>mir_borrowck (1,189,963 samples, 2.77%)</title><rect x="27.4711%" y="165" width="2.7719%" height="15" fill="rgb(246,177,23)"/><text x="27.7211%" y="175.50">mi..</text></g><g><title>fn_sig (59,481 samples, 0.14%)</title><rect x="30.4128%" y="181" width="0.1386%" height="15" fill="rgb(230,62,27)"/><text x="30.6628%" y="191.50"></text></g><g><title>generics_of (53,200 samples, 0.12%)</title><rect x="30.5513%" y="181" width="0.1239%" height="15" fill="rgb(216,154,8)"/><text x="30.8013%" y="191.50"></text></g><g><title>associated_item (56,901 samples, 0.13%)</title><rect x="31.3807%" y="85" width="0.1325%" height="15" fill="rgb(244,35,45)"/><text x="31.6307%" y="95.50"></text></g><g><title>associated_items (99,501 samples, 0.23%)</title><rect x="31.2879%" y="101" width="0.2318%" height="15" fill="rgb(251,115,12)"/><text x="31.5379%" y="111.50"></text></g><g><title>late_bound_vars_map (204,122 samples, 0.48%)</title><rect x="31.0572%" y="133" width="0.4755%" height="15" fill="rgb(240,54,50)"/><text x="31.3072%" y="143.50"></text></g><g><title>resolve_lifetimes (198,352 samples, 0.46%)</title><rect x="31.0707%" y="117" width="0.4620%" height="15" fill="rgb(233,84,52)"/><text x="31.3207%" y="127.50"></text></g><g><title>explicit_predicates_of (353,084 samples, 0.82%)</title><rect x="30.7273%" y="149" width="0.8225%" height="15" fill="rgb(207,117,47)"/><text x="30.9773%" y="159.50"></text></g><g><title>predicates_of (421,315 samples, 0.98%)</title><rect x="30.6813%" y="181" width="0.9814%" height="15" fill="rgb(249,43,39)"/><text x="30.9313%" y="191.50"></text></g><g><title>predicates_defined_on (414,124 samples, 0.96%)</title><rect x="30.6981%" y="165" width="0.9646%" height="15" fill="rgb(209,38,44)"/><text x="30.9481%" y="175.50"></text></g><g><title>inferred_outlives_of (48,510 samples, 0.11%)</title><rect x="31.5497%" y="149" width="0.1130%" height="15" fill="rgb(236,212,23)"/><text x="31.7997%" y="159.50"></text></g><g><title>type_collecting (666,577 samples, 1.55%)</title><rect x="30.2441%" y="213" width="1.5527%" height="15" fill="rgb(242,79,21)"/><text x="30.4941%" y="223.50"></text></g><g><title>collect_mod_item_types (657,107 samples, 1.53%)</title><rect x="30.2662%" y="197" width="1.5306%" height="15" fill="rgb(211,96,35)"/><text x="30.5162%" y="207.50"></text></g><g><title>type_of (57,561 samples, 0.13%)</title><rect x="31.6627%" y="181" width="0.1341%" height="15" fill="rgb(253,215,40)"/><text x="31.9127%" y="191.50"></text></g><g><title>evaluate_obligation (118,971 samples, 0.28%)</title><rect x="32.1149%" y="181" width="0.2771%" height="15" fill="rgb(211,81,21)"/><text x="32.3649%" y="191.50"></text></g><g><title>check_impl_item_well_formed (306,233 samples, 0.71%)</title><rect x="31.8453%" y="197" width="0.7133%" height="15" fill="rgb(208,190,38)"/><text x="32.0953%" y="207.50"></text></g><g><title>implied_outlives_bounds (89,382 samples, 0.21%)</title><rect x="33.5763%" y="181" width="0.2082%" height="15" fill="rgb(235,213,38)"/><text x="33.8263%" y="191.50"></text></g><g><title>param_env (189,482 samples, 0.44%)</title><rect x="33.7845%" y="181" width="0.4414%" height="15" fill="rgb(237,122,38)"/><text x="34.0345%" y="191.50"></text></g><g><title>predicates_of (44,500 samples, 0.10%)</title><rect x="34.2259%" y="181" width="0.1037%" height="15" fill="rgb(244,218,35)"/><text x="34.4759%" y="191.50"></text></g><g><title>analysis (8,552,666 samples, 19.92%)</title><rect x="14.5386%" y="245" width="19.9223%" height="15" fill="rgb(240,68,47)"/><text x="14.7886%" y="255.50">analysis</text></g><g><title>type_check_crate (6,396,491 samples, 14.90%)</title><rect x="19.5611%" y="229" width="14.8998%" height="15" fill="rgb(210,16,53)"/><text x="19.8111%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,142,953 samples, 2.66%)</title><rect x="31.7985%" y="213" width="2.6624%" height="15" fill="rgb(235,124,12)"/><text x="32.0485%" y="223.50">wf..</text></g><g><title>check_item_well_formed (816,640 samples, 1.90%)</title><rect x="32.5586%" y="197" width="1.9023%" height="15" fill="rgb(224,169,11)"/><text x="32.8086%" y="207.50">c..</text></g><g><title>codegen_module (215,173 samples, 0.50%)</title><rect x="35.5983%" y="229" width="0.5012%" height="15" fill="rgb(250,166,2)"/><text x="35.8483%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (51,101 samples, 0.12%)</title><rect x="36.1012%" y="229" width="0.1190%" height="15" fill="rgb(242,216,29)"/><text x="36.3512%" y="239.50"></text></g><g><title>codegen_crate (804,479 samples, 1.87%)</title><rect x="34.4876%" y="245" width="1.8739%" height="15" fill="rgb(230,116,27)"/><text x="34.7376%" y="255.50">c..</text></g><g><title>codegen_module_optimize (1,479,256 samples, 3.45%)</title><rect x="36.3615%" y="245" width="3.4457%" height="15" fill="rgb(228,99,48)"/><text x="36.6115%" y="255.50">cod..</text></g><g><title>LLVM_module_optimize (438,765 samples, 1.02%)</title><rect x="38.7852%" y="229" width="1.0220%" height="15" fill="rgb(253,11,6)"/><text x="39.0352%" y="239.50"></text></g><g><title>LLVM_lto_optimize (277,823 samples, 0.65%)</title><rect x="40.7556%" y="229" width="0.6472%" height="15" fill="rgb(247,143,39)"/><text x="41.0056%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,446,767 samples, 5.70%)</title><rect x="41.4028%" y="229" width="5.6994%" height="15" fill="rgb(236,97,10)"/><text x="41.6528%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (2,401,886 samples, 5.59%)</title><rect x="41.5073%" y="213" width="5.5949%" height="15" fill="rgb(233,208,19)"/><text x="41.7573%" y="223.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (3,165,105 samples, 7.37%)</title><rect x="39.8072%" y="245" width="7.3727%" height="15" fill="rgb(216,164,2)"/><text x="40.0572%" y="255.50">codegen_mo..</text></g><g><title>AST_validation (88,361 samples, 0.21%)</title><rect x="47.6925%" y="229" width="0.2058%" height="15" fill="rgb(220,129,5)"/><text x="47.9425%" y="239.50"></text></g><g><title>crate_injection (113,811 samples, 0.27%)</title><rect x="47.9435%" y="229" width="0.2651%" height="15" fill="rgb(242,17,10)"/><text x="48.1935%" y="239.50"></text></g><g><title>metadata_load_macro (59,431 samples, 0.14%)</title><rect x="68.9913%" y="197" width="0.1384%" height="15" fill="rgb(242,107,0)"/><text x="69.2413%" y="207.50"></text></g><g><title>macro_expand_crate (11,662,181 samples, 27.17%)</title><rect x="48.2086%" y="229" width="27.1655%" height="15" fill="rgb(251,28,31)"/><text x="48.4586%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (11,639,730 samples, 27.11%)</title><rect x="48.2609%" y="213" width="27.1132%" height="15" fill="rgb(233,223,10)"/><text x="48.5109%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,680,730 samples, 6.24%)</title><rect x="69.1297%" y="197" width="6.2444%" height="15" fill="rgb(215,21,27)"/><text x="69.3797%" y="207.50">metadata..</text></g><g><title>metadata_register_crate (964,902 samples, 2.25%)</title><rect x="73.1265%" y="181" width="2.2476%" height="15" fill="rgb(232,23,21)"/><text x="73.3765%" y="191.50">m..</text></g><g><title>metadata_register_crate (71,930 samples, 0.17%)</title><rect x="75.2066%" y="165" width="0.1676%" height="15" fill="rgb(244,5,23)"/><text x="75.4566%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (114,662 samples, 0.27%)</title><rect x="75.3835%" y="229" width="0.2671%" height="15" fill="rgb(226,81,46)"/><text x="75.6335%" y="239.50"></text></g><g><title>finalize_macro_resolutions (364,775 samples, 0.85%)</title><rect x="75.6973%" y="213" width="0.8497%" height="15" fill="rgb(247,70,30)"/><text x="75.9473%" y="223.50"></text></g><g><title>late_resolve_crate (456,165 samples, 1.06%)</title><rect x="76.5470%" y="213" width="1.0626%" height="15" fill="rgb(212,68,19)"/><text x="76.7970%" y="223.50"></text></g><g><title>configure_and_expand (13,108,606 samples, 30.53%)</title><rect x="47.1799%" y="245" width="30.5348%" height="15" fill="rgb(240,187,13)"/><text x="47.4299%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (886,110 samples, 2.06%)</title><rect x="75.6506%" y="229" width="2.0641%" height="15" fill="rgb(223,113,26)"/><text x="75.9006%" y="239.50">r..</text></g><g><title>drop_ast (45,961 samples, 0.11%)</title><rect x="77.7147%" y="245" width="0.1071%" height="15" fill="rgb(206,192,2)"/><text x="77.9647%" y="255.50"></text></g><g><title>early_lint_checks (109,051 samples, 0.25%)</title><rect x="77.8516%" y="245" width="0.2540%" height="15" fill="rgb(241,108,4)"/><text x="78.1016%" y="255.50"></text></g><g><title>free_global_ctxt (2,012,173 samples, 4.69%)</title><rect x="78.1056%" y="245" width="4.6871%" height="15" fill="rgb(247,173,49)"/><text x="78.3556%" y="255.50">free_..</text></g><g><title>crate_hash (66,582 samples, 0.16%)</title><rect x="83.3451%" y="229" width="0.1551%" height="15" fill="rgb(224,114,35)"/><text x="83.5951%" y="239.50"></text></g><g><title>exported_symbols (43,971 samples, 0.10%)</title><rect x="83.5561%" y="229" width="0.1024%" height="15" fill="rgb(245,159,27)"/><text x="83.8061%" y="239.50"></text></g><g><title>layout_of (54,011 samples, 0.13%)</title><rect x="84.1976%" y="213" width="0.1258%" height="15" fill="rgb(245,172,44)"/><text x="84.4476%" y="223.50"></text></g><g><title>optimized_mir (447,495 samples, 1.04%)</title><rect x="83.7363%" y="229" width="1.0424%" height="15" fill="rgb(236,23,11)"/><text x="83.9863%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (195,472 samples, 0.46%)</title><rect x="84.3234%" y="213" width="0.4553%" height="15" fill="rgb(205,117,38)"/><text x="84.5734%" y="223.50"></text></g><g><title>generate_crate_metadata (864,370 samples, 2.01%)</title><rect x="82.7927%" y="245" width="2.0134%" height="15" fill="rgb(237,72,25)"/><text x="83.0427%" y="255.50">g..</text></g><g><title>hir_lowering (544,826 samples, 1.27%)</title><rect x="84.8061%" y="245" width="1.2691%" height="15" fill="rgb(244,70,9)"/><text x="85.0561%" y="255.50"></text></g><g><title>finish_ongoing_codegen (3,407,857 samples, 7.94%)</title><rect x="86.1039%" y="229" width="7.9382%" height="15" fill="rgb(217,125,39)"/><text x="86.3539%" y="239.50">finish_ongo..</text></g><g><title>link_crate (516,676 samples, 1.20%)</title><rect x="94.0421%" y="229" width="1.2035%" height="15" fill="rgb(235,36,10)"/><text x="94.2921%" y="239.50"></text></g><g><title>link_binary (507,436 samples, 1.18%)</title><rect x="94.0636%" y="213" width="1.1820%" height="15" fill="rgb(251,123,47)"/><text x="94.3136%" y="223.50"></text></g><g><title>link_rlib (305,204 samples, 0.71%)</title><rect x="94.5347%" y="197" width="0.7109%" height="15" fill="rgb(221,13,13)"/><text x="94.7847%" y="207.50"></text></g><g><title>link (3,943,453 samples, 9.19%)</title><rect x="86.0752%" y="245" width="9.1858%" height="15" fill="rgb(238,131,9)"/><text x="86.3252%" y="255.50">link</text></g><g><title>parse_crate (920,620 samples, 2.14%)</title><rect x="95.2610%" y="245" width="2.1445%" height="15" fill="rgb(211,50,8)"/><text x="95.5110%" y="255.50">p..</text></g><g><title>prepare_outputs (350,864 samples, 0.82%)</title><rect x="97.4271%" y="245" width="0.8173%" height="15" fill="rgb(245,182,24)"/><text x="97.6771%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (313,203 samples, 0.73%)</title><rect x="98.2444%" y="245" width="0.7296%" height="15" fill="rgb(242,14,37)"/><text x="98.4944%" y="255.50"></text></g><g><title>setup_global_ctxt (127,562 samples, 0.30%)</title><rect x="98.9765%" y="245" width="0.2971%" height="15" fill="rgb(246,228,12)"/><text x="99.2265%" y="255.50"></text></g><g><title>all (42,930,108 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (42,930,108 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (311,813 samples, 0.73%)</title><rect x="99.2737%" y="245" width="0.7263%" height="15" fill="rgb(230,59,30)"/><text x="99.5237%" y="255.50"></text></g></svg></svg>