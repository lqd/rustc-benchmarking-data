<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (137,295,564 samples, 18.90%)</title><rect x="0.1026%" y="165" width="18.8998%" height="15" fill="rgb(227,0,7)"/><text x="0.3526%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (914,560 samples, 0.13%)</title><rect x="18.8765%" y="149" width="0.1259%" height="15" fill="rgb(217,0,24)"/><text x="19.1265%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (893,330 samples, 0.12%)</title><rect x="18.8794%" y="133" width="0.1230%" height="15" fill="rgb(221,193,54)"/><text x="19.1294%" y="143.50"></text></g><g><title>needs_drop_raw (1,017,288 samples, 0.14%)</title><rect x="20.6474%" y="53" width="0.1400%" height="15" fill="rgb(248,212,6)"/><text x="20.8974%" y="63.50"></text></g><g><title>is_copy_raw (782,996 samples, 0.11%)</title><rect x="20.6796%" y="37" width="0.1078%" height="15" fill="rgb(208,68,35)"/><text x="20.9296%" y="47.50"></text></g><g><title>thir_body (746,871 samples, 0.10%)</title><rect x="20.8481%" y="53" width="0.1028%" height="15" fill="rgb(232,128,0)"/><text x="21.0981%" y="63.50"></text></g><g><title>mir_const (5,368,532 samples, 0.74%)</title><rect x="20.2131%" y="101" width="0.7390%" height="15" fill="rgb(207,160,47)"/><text x="20.4631%" y="111.50"></text></g><g><title>unsafety_check_result (4,705,742 samples, 0.65%)</title><rect x="20.3043%" y="85" width="0.6478%" height="15" fill="rgb(228,23,34)"/><text x="20.5543%" y="95.50"></text></g><g><title>mir_built (4,103,006 samples, 0.56%)</title><rect x="20.3873%" y="69" width="0.5648%" height="15" fill="rgb(218,30,26)"/><text x="20.6373%" y="79.50"></text></g><g><title>mir_promoted (6,003,817 samples, 0.83%)</title><rect x="20.1387%" y="117" width="0.8265%" height="15" fill="rgb(220,122,19)"/><text x="20.3887%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,537,595 samples, 0.21%)</title><rect x="21.0502%" y="117" width="0.2117%" height="15" fill="rgb(250,228,42)"/><text x="21.3002%" y="127.50"></text></g><g><title>MIR_borrow_checking (15,968,686 samples, 2.20%)</title><rect x="19.0659%" y="149" width="2.1982%" height="15" fill="rgb(240,193,28)"/><text x="19.3159%" y="159.50">M..</text></g><g><title>mir_borrowck (15,913,896 samples, 2.19%)</title><rect x="19.0735%" y="133" width="2.1907%" height="15" fill="rgb(216,20,37)"/><text x="19.3235%" y="143.50">m..</text></g><g><title>check_mod_attrs (881,420 samples, 0.12%)</title><rect x="21.3217%" y="133" width="0.1213%" height="15" fill="rgb(206,188,39)"/><text x="21.5717%" y="143.50"></text></g><g><title>misc_checking_1 (1,924,961 samples, 0.26%)</title><rect x="21.3167%" y="149" width="0.2650%" height="15" fill="rgb(217,207,13)"/><text x="21.5667%" y="159.50"></text></g><g><title>misc_checking_2 (759,808 samples, 0.10%)</title><rect x="21.5817%" y="149" width="0.1046%" height="15" fill="rgb(231,73,38)"/><text x="21.8317%" y="159.50"></text></g><g><title>crate_lints (2,125,114 samples, 0.29%)</title><rect x="21.7454%" y="117" width="0.2925%" height="15" fill="rgb(225,20,46)"/><text x="21.9954%" y="127.50"></text></g><g><title>type_of (1,166,624 samples, 0.16%)</title><rect x="21.8773%" y="101" width="0.1606%" height="15" fill="rgb(210,31,41)"/><text x="22.1273%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (937,190 samples, 0.13%)</title><rect x="21.9089%" y="85" width="0.1290%" height="15" fill="rgb(221,200,47)"/><text x="22.1589%" y="95.50"></text></g><g><title>lint_checking (2,569,469 samples, 0.35%)</title><rect x="21.7451%" y="133" width="0.3537%" height="15" fill="rgb(226,26,5)"/><text x="21.9951%" y="143.50"></text></g><g><title>misc_checking_3 (3,798,102 samples, 0.52%)</title><rect x="21.6863%" y="149" width="0.5228%" height="15" fill="rgb(249,33,26)"/><text x="21.9363%" y="159.50"></text></g><g><title>impl_parent (3,011,998 samples, 0.41%)</title><rect x="23.1726%" y="85" width="0.4146%" height="15" fill="rgb(235,183,28)"/><text x="23.4226%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,611,901 samples, 0.22%)</title><rect x="23.3654%" y="69" width="0.2219%" height="15" fill="rgb(221,5,38)"/><text x="23.6154%" y="79.50"></text></g><g><title>impl_trait_ref (8,289,223 samples, 1.14%)</title><rect x="23.5873%" y="85" width="1.1411%" height="15" fill="rgb(247,18,42)"/><text x="23.8373%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,918,964 samples, 0.95%)</title><rect x="23.7759%" y="69" width="0.9524%" height="15" fill="rgb(241,131,45)"/><text x="24.0259%" y="79.50"></text></g><g><title>coherent_trait (19,373,413 samples, 2.67%)</title><rect x="22.2183%" y="117" width="2.6669%" height="15" fill="rgb(249,31,29)"/><text x="22.4683%" y="127.50">co..</text></g><g><title>specialization_graph_of (18,047,909 samples, 2.48%)</title><rect x="22.4008%" y="101" width="2.4844%" height="15" fill="rgb(225,111,53)"/><text x="22.6508%" y="111.50">sp..</text></g><g><title>trait_impls_of (1,136,063 samples, 0.16%)</title><rect x="24.7288%" y="85" width="0.1564%" height="15" fill="rgb(238,160,17)"/><text x="24.9788%" y="95.50"></text></g><g><title>coherence_checking (19,453,434 samples, 2.68%)</title><rect x="22.2153%" y="133" width="2.6779%" height="15" fill="rgb(214,148,48)"/><text x="22.4653%" y="143.50">co..</text></g><g><title>evaluate_obligation (1,622,961 samples, 0.22%)</title><rect x="27.3303%" y="85" width="0.2234%" height="15" fill="rgb(232,36,49)"/><text x="27.5803%" y="95.50"></text></g><g><title>generics_of (918,162 samples, 0.13%)</title><rect x="27.5763%" y="85" width="0.1264%" height="15" fill="rgb(209,103,24)"/><text x="27.8263%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (734,012 samples, 0.10%)</title><rect x="27.6016%" y="69" width="0.1010%" height="15" fill="rgb(229,88,8)"/><text x="27.8516%" y="79.50"></text></g><g><title>typeck (1,114,592 samples, 0.15%)</title><rect x="27.9041%" y="85" width="0.1534%" height="15" fill="rgb(213,181,19)"/><text x="28.1541%" y="95.50"></text></g><g><title>item_bodies_checking (22,994,494 samples, 3.17%)</title><rect x="24.8997%" y="133" width="3.1654%" height="15" fill="rgb(254,191,54)"/><text x="25.1497%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (22,991,754 samples, 3.16%)</title><rect x="24.9000%" y="117" width="3.1650%" height="15" fill="rgb(241,83,37)"/><text x="25.1500%" y="127.50">typ..</text></g><g><title>typeck (22,953,544 samples, 3.16%)</title><rect x="24.9053%" y="101" width="3.1597%" height="15" fill="rgb(233,36,39)"/><text x="25.1553%" y="111.50">typ..</text></g><g><title>generics_of (843,758 samples, 0.12%)</title><rect x="28.2568%" y="101" width="0.1161%" height="15" fill="rgb(226,3,54)"/><text x="28.5068%" y="111.50"></text></g><g><title>predicates_of (1,159,452 samples, 0.16%)</title><rect x="28.3825%" y="101" width="0.1596%" height="15" fill="rgb(245,192,40)"/><text x="28.6325%" y="111.50"></text></g><g><title>predicates_defined_on (1,080,492 samples, 0.15%)</title><rect x="28.3933%" y="85" width="0.1487%" height="15" fill="rgb(238,167,29)"/><text x="28.6433%" y="95.50"></text></g><g><title>type_collecting (3,233,535 samples, 0.45%)</title><rect x="28.1285%" y="133" width="0.4451%" height="15" fill="rgb(232,182,51)"/><text x="28.3785%" y="143.50"></text></g><g><title>collect_mod_item_types (3,217,775 samples, 0.44%)</title><rect x="28.1307%" y="117" width="0.4430%" height="15" fill="rgb(231,60,39)"/><text x="28.3807%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,314,874 samples, 0.32%)</title><rect x="28.5888%" y="117" width="0.3187%" height="15" fill="rgb(208,69,12)"/><text x="28.8388%" y="127.50"></text></g><g><title>analysis (73,166,516 samples, 10.07%)</title><rect x="19.0024%" y="165" width="10.0719%" height="15" fill="rgb(235,93,37)"/><text x="19.2524%" y="175.50">analysis</text></g><g><title>type_check_crate (49,871,630 samples, 6.87%)</title><rect x="22.2091%" y="149" width="6.8652%" height="15" fill="rgb(213,116,39)"/><text x="22.4591%" y="159.50">type_chec..</text></g><g><title>wf_checking (3,633,700 samples, 0.50%)</title><rect x="28.5741%" y="133" width="0.5002%" height="15" fill="rgb(222,207,29)"/><text x="28.8241%" y="143.50"></text></g><g><title>check_item_well_formed (1,212,136 samples, 0.17%)</title><rect x="28.9075%" y="117" width="0.1669%" height="15" fill="rgb(206,96,30)"/><text x="29.1575%" y="127.50"></text></g><g><title>layout_of (1,340,704 samples, 0.18%)</title><rect x="31.5180%" y="117" width="0.1846%" height="15" fill="rgb(218,138,4)"/><text x="31.7680%" y="127.50"></text></g><g><title>param_env (1,737,727 samples, 0.24%)</title><rect x="31.7025%" y="117" width="0.2392%" height="15" fill="rgb(250,191,14)"/><text x="31.9525%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,710,911 samples, 0.92%)</title><rect x="31.1017%" y="133" width="0.9238%" height="15" fill="rgb(239,60,40)"/><text x="31.3517%" y="143.50"></text></g><g><title>codegen_module (21,206,343 samples, 2.92%)</title><rect x="29.2592%" y="149" width="2.9192%" height="15" fill="rgb(206,27,48)"/><text x="29.5092%" y="159.50">co..</text></g><g><title>item_attrs (967,070 samples, 0.13%)</title><rect x="32.3252%" y="85" width="0.1331%" height="15" fill="rgb(225,35,8)"/><text x="32.5752%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (947,340 samples, 0.13%)</title><rect x="32.3279%" y="69" width="0.1304%" height="15" fill="rgb(250,213,24)"/><text x="32.5779%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,292,133 samples, 0.18%)</title><rect x="32.3073%" y="101" width="0.1779%" height="15" fill="rgb(247,123,22)"/><text x="32.5573%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (798,487 samples, 0.11%)</title><rect x="32.8100%" y="85" width="0.1099%" height="15" fill="rgb(231,138,38)"/><text x="33.0600%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,148,841 samples, 0.16%)</title><rect x="32.9199%" y="85" width="0.1581%" height="15" fill="rgb(231,145,46)"/><text x="33.1699%" y="95.50"></text></g><g><title>optimized_mir (4,496,216 samples, 0.62%)</title><rect x="32.5658%" y="101" width="0.6189%" height="15" fill="rgb(251,118,11)"/><text x="32.8158%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (871,890 samples, 0.12%)</title><rect x="33.2413%" y="85" width="0.1200%" height="15" fill="rgb(217,147,25)"/><text x="33.4913%" y="95.50"></text></g><g><title>specialization_graph_of (3,438,588 samples, 0.47%)</title><rect x="33.4106%" y="85" width="0.4733%" height="15" fill="rgb(247,81,37)"/><text x="33.6606%" y="95.50"></text></g><g><title>impl_trait_ref (1,612,568 samples, 0.22%)</title><rect x="33.6619%" y="69" width="0.2220%" height="15" fill="rgb(209,12,38)"/><text x="33.9119%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,402,625 samples, 0.19%)</title><rect x="33.6908%" y="53" width="0.1931%" height="15" fill="rgb(227,1,9)"/><text x="33.9408%" y="63.50"></text></g><g><title>resolve_instance (5,265,228 samples, 0.72%)</title><rect x="33.1847%" y="101" width="0.7248%" height="15" fill="rgb(248,47,43)"/><text x="33.4347%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (13,152,356 samples, 1.81%)</title><rect x="32.1842%" y="117" width="1.8105%" height="15" fill="rgb(221,10,30)"/><text x="32.4342%" y="127.50">m..</text></g><g><title>monomorphization_collector (13,199,496 samples, 1.82%)</title><rect x="32.1839%" y="133" width="1.8170%" height="15" fill="rgb(210,229,1)"/><text x="32.4339%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (873,000 samples, 0.12%)</title><rect x="34.0027%" y="117" width="0.1202%" height="15" fill="rgb(222,148,37)"/><text x="34.2527%" y="127.50"></text></g><g><title>symbol_name (799,919 samples, 0.11%)</title><rect x="34.0128%" y="101" width="0.1101%" height="15" fill="rgb(234,67,33)"/><text x="34.2628%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (14,409,779 samples, 1.98%)</title><rect x="32.1790%" y="149" width="1.9836%" height="15" fill="rgb(247,98,35)"/><text x="32.4290%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,174,843 samples, 0.16%)</title><rect x="34.0009%" y="133" width="0.1617%" height="15" fill="rgb(247,138,52)"/><text x="34.2509%" y="143.50"></text></g><g><title>codegen_crate (37,016,838 samples, 5.10%)</title><rect x="29.0760%" y="165" width="5.0957%" height="15" fill="rgb(213,79,30)"/><text x="29.3260%" y="175.50">codege..</text></g><g><title>codegen_module_optimize (117,297,684 samples, 16.15%)</title><rect x="34.1716%" y="165" width="16.1469%" height="15" fill="rgb(246,177,23)"/><text x="34.4216%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (106,861,158 samples, 14.71%)</title><rect x="35.6083%" y="149" width="14.7103%" height="15" fill="rgb(230,62,27)"/><text x="35.8583%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (75,732,964 samples, 10.43%)</title><rect x="51.4707%" y="149" width="10.4252%" height="15" fill="rgb(216,154,8)"/><text x="51.7207%" y="159.50">LLVM_lto_optimi..</text></g><g><title>LLVM_module_codegen (112,015,727 samples, 15.42%)</title><rect x="61.8959%" y="149" width="15.4198%" height="15" fill="rgb(244,35,45)"/><text x="62.1459%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (110,561,140 samples, 15.22%)</title><rect x="62.0961%" y="133" width="15.2196%" height="15" fill="rgb(251,115,12)"/><text x="62.3461%" y="143.50">LLVM_module_codegen_emi..</text></g><g><title>LLVM_thin_lto_import (5,523,120 samples, 0.76%)</title><rect x="77.3157%" y="149" width="0.7603%" height="15" fill="rgb(240,54,50)"/><text x="77.5657%" y="159.50"></text></g><g><title>codegen_module_perform_lto (202,171,446 samples, 27.83%)</title><rect x="50.3186%" y="165" width="27.8305%" height="15" fill="rgb(233,84,52)"/><text x="50.5686%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,561,499 samples, 0.35%)</title><rect x="80.4027%" y="117" width="0.3526%" height="15" fill="rgb(207,117,47)"/><text x="80.6527%" y="127.50"></text></g><g><title>metadata_register_crate (926,311 samples, 0.13%)</title><rect x="80.6278%" y="101" width="0.1275%" height="15" fill="rgb(249,43,39)"/><text x="80.8778%" y="111.50"></text></g><g><title>macro_expand_crate (18,499,964 samples, 2.55%)</title><rect x="78.2268%" y="149" width="2.5467%" height="15" fill="rgb(209,38,44)"/><text x="78.4768%" y="159.50">ma..</text></g><g><title>expand_crate (18,475,473 samples, 2.54%)</title><rect x="78.2302%" y="133" width="2.5433%" height="15" fill="rgb(236,212,23)"/><text x="78.4802%" y="143.50">ex..</text></g><g><title>late_resolve_crate (3,107,144 samples, 0.43%)</title><rect x="80.8285%" y="133" width="0.4277%" height="15" fill="rgb(242,79,21)"/><text x="81.0785%" y="143.50"></text></g><g><title>configure_and_expand (22,746,600 samples, 3.13%)</title><rect x="78.1491%" y="165" width="3.1312%" height="15" fill="rgb(211,96,35)"/><text x="78.3991%" y="175.50">con..</text></g><g><title>resolve_crate (3,530,639 samples, 0.49%)</title><rect x="80.7943%" y="149" width="0.4860%" height="15" fill="rgb(253,215,40)"/><text x="81.0443%" y="159.50"></text></g><g><title>free_global_ctxt (5,765,064 samples, 0.79%)</title><rect x="81.4017%" y="165" width="0.7936%" height="15" fill="rgb(211,81,21)"/><text x="81.6517%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,394,933 samples, 0.19%)</title><rect x="82.5281%" y="133" width="0.1920%" height="15" fill="rgb(208,190,38)"/><text x="82.7781%" y="143.50"></text></g><g><title>optimized_mir (2,693,508 samples, 0.37%)</title><rect x="82.3525%" y="149" width="0.3708%" height="15" fill="rgb(235,213,38)"/><text x="82.6025%" y="159.50"></text></g><g><title>generate_crate_metadata (3,871,353 samples, 0.53%)</title><rect x="82.1953%" y="165" width="0.5329%" height="15" fill="rgb(237,122,38)"/><text x="82.4453%" y="175.50"></text></g><g><title>hir_lowering (4,027,705 samples, 0.55%)</title><rect x="82.7282%" y="165" width="0.5544%" height="15" fill="rgb(244,218,35)"/><text x="82.9782%" y="175.50"></text></g><g><title>finish_ongoing_codegen (115,410,641 samples, 15.89%)</title><rect x="83.2859%" y="149" width="15.8872%" height="15" fill="rgb(240,68,47)"/><text x="83.5359%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,075,181 samples, 0.15%)</title><rect x="99.1731%" y="149" width="0.1480%" height="15" fill="rgb(210,16,53)"/><text x="99.4231%" y="159.50"></text></g><g><title>link_binary (1,058,501 samples, 0.15%)</title><rect x="99.1754%" y="133" width="0.1457%" height="15" fill="rgb(235,124,12)"/><text x="99.4254%" y="143.50"></text></g><g><title>link (116,518,383 samples, 16.04%)</title><rect x="83.2827%" y="165" width="16.0397%" height="15" fill="rgb(224,169,11)"/><text x="83.5327%" y="175.50">link</text></g><g><title>parse_crate (2,078,873 samples, 0.29%)</title><rect x="99.3223%" y="165" width="0.2862%" height="15" fill="rgb(250,166,2)"/><text x="99.5723%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,965,512 samples, 0.27%)</title><rect x="99.6601%" y="165" width="0.2706%" height="15" fill="rgb(242,216,29)"/><text x="99.9101%" y="175.50"></text></g><g><title>all (726,438,846 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (726,438,846 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>