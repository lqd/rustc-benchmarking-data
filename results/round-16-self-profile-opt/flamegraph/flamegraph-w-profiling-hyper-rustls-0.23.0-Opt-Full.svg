<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (156,007,221 samples, 12.20%)</title><rect x="0.0397%" y="165" width="12.2009%" height="15" fill="rgb(227,0,7)"/><text x="0.2897%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,581,288 samples, 0.12%)</title><rect x="12.1170%" y="149" width="0.1237%" height="15" fill="rgb(217,0,24)"/><text x="12.3670%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,560,018 samples, 0.12%)</title><rect x="12.1187%" y="133" width="0.1220%" height="15" fill="rgb(221,193,54)"/><text x="12.3687%" y="143.50"></text></g><g><title>needs_drop_raw (1,651,079 samples, 0.13%)</title><rect x="13.3575%" y="53" width="0.1291%" height="15" fill="rgb(248,212,6)"/><text x="13.6075%" y="63.50"></text></g><g><title>specialization_graph_of (1,349,375 samples, 0.11%)</title><rect x="13.5031%" y="37" width="0.1055%" height="15" fill="rgb(208,68,35)"/><text x="13.7531%" y="47.50"></text></g><g><title>resolve_instance (1,617,128 samples, 0.13%)</title><rect x="13.4867%" y="53" width="0.1265%" height="15" fill="rgb(232,128,0)"/><text x="13.7367%" y="63.50"></text></g><g><title>mir_const (7,497,077 samples, 0.59%)</title><rect x="13.0858%" y="101" width="0.5863%" height="15" fill="rgb(207,160,47)"/><text x="13.3358%" y="111.50"></text></g><g><title>unsafety_check_result (6,602,275 samples, 0.52%)</title><rect x="13.1558%" y="85" width="0.5163%" height="15" fill="rgb(228,23,34)"/><text x="13.4058%" y="95.50"></text></g><g><title>mir_built (5,990,739 samples, 0.47%)</title><rect x="13.2036%" y="69" width="0.4685%" height="15" fill="rgb(218,30,26)"/><text x="13.4536%" y="79.50"></text></g><g><title>mir_promoted (8,151,074 samples, 0.64%)</title><rect x="13.0369%" y="117" width="0.6375%" height="15" fill="rgb(220,122,19)"/><text x="13.2869%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,754,802 samples, 0.29%)</title><rect x="13.8499%" y="117" width="0.2937%" height="15" fill="rgb(250,228,42)"/><text x="14.0999%" y="127.50"></text></g><g><title>MIR_borrow_checking (24,144,904 samples, 1.89%)</title><rect x="12.2561%" y="149" width="1.8883%" height="15" fill="rgb(240,193,28)"/><text x="12.5061%" y="159.50">M..</text></g><g><title>mir_borrowck (24,080,124 samples, 1.88%)</title><rect x="12.2611%" y="133" width="1.8832%" height="15" fill="rgb(216,20,37)"/><text x="12.5111%" y="143.50">m..</text></g><g><title>crate_lints (3,181,345 samples, 0.25%)</title><rect x="14.3552%" y="117" width="0.2488%" height="15" fill="rgb(206,188,39)"/><text x="14.6052%" y="127.50"></text></g><g><title>type_of (1,781,921 samples, 0.14%)</title><rect x="14.4646%" y="101" width="0.1394%" height="15" fill="rgb(217,207,13)"/><text x="14.7146%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (1,345,536 samples, 0.11%)</title><rect x="14.4988%" y="85" width="0.1052%" height="15" fill="rgb(231,73,38)"/><text x="14.7488%" y="95.50"></text></g><g><title>lint_checking (3,563,640 samples, 0.28%)</title><rect x="14.3551%" y="133" width="0.2787%" height="15" fill="rgb(225,20,46)"/><text x="14.6051%" y="143.50"></text></g><g><title>misc_checking_3 (5,005,837 samples, 0.39%)</title><rect x="14.3182%" y="149" width="0.3915%" height="15" fill="rgb(210,31,41)"/><text x="14.5682%" y="159.50"></text></g><g><title>impl_parent (2,674,707 samples, 0.21%)</title><rect x="15.0536%" y="85" width="0.2092%" height="15" fill="rgb(221,200,47)"/><text x="15.3036%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,659,665 samples, 0.13%)</title><rect x="15.1330%" y="69" width="0.1298%" height="15" fill="rgb(226,26,5)"/><text x="15.3830%" y="79.50"></text></g><g><title>impl_trait_ref (7,668,386 samples, 0.60%)</title><rect x="15.2629%" y="85" width="0.5997%" height="15" fill="rgb(249,33,26)"/><text x="15.5129%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,435,637 samples, 0.50%)</title><rect x="15.3593%" y="69" width="0.5033%" height="15" fill="rgb(235,183,28)"/><text x="15.6093%" y="79.50"></text></g><g><title>coherent_trait (15,707,298 samples, 1.23%)</title><rect x="14.7158%" y="117" width="1.2284%" height="15" fill="rgb(221,5,38)"/><text x="14.9658%" y="127.50"></text></g><g><title>specialization_graph_of (15,689,958 samples, 1.23%)</title><rect x="14.7172%" y="101" width="1.2271%" height="15" fill="rgb(247,18,42)"/><text x="14.9672%" y="111.50"></text></g><g><title>coherence_checking (15,775,709 samples, 1.23%)</title><rect x="14.7142%" y="133" width="1.2338%" height="15" fill="rgb(241,131,45)"/><text x="14.9642%" y="143.50"></text></g><g><title>evaluate_obligation (4,309,498 samples, 0.34%)</title><rect x="16.8877%" y="85" width="0.3370%" height="15" fill="rgb(249,31,29)"/><text x="17.1377%" y="95.50"></text></g><g><title>dropck_outlives (1,526,585 samples, 0.12%)</title><rect x="18.2611%" y="69" width="0.1194%" height="15" fill="rgb(225,111,53)"/><text x="18.5111%" y="79.50"></text></g><g><title>evaluate_obligation (4,145,073 samples, 0.32%)</title><rect x="18.3805%" y="69" width="0.3242%" height="15" fill="rgb(238,160,17)"/><text x="18.6305%" y="79.50"></text></g><g><title>typeck (18,368,249 samples, 1.44%)</title><rect x="17.4140%" y="85" width="1.4365%" height="15" fill="rgb(214,148,48)"/><text x="17.6640%" y="95.50"></text></g><g><title>item_bodies_checking (37,130,181 samples, 2.90%)</title><rect x="15.9501%" y="133" width="2.9039%" height="15" fill="rgb(232,36,49)"/><text x="16.2001%" y="143.50">it..</text></g><g><title>typeck_item_bodies (37,126,581 samples, 2.90%)</title><rect x="15.9503%" y="117" width="2.9036%" height="15" fill="rgb(209,103,24)"/><text x="16.2003%" y="127.50">ty..</text></g><g><title>typeck (37,081,980 samples, 2.90%)</title><rect x="15.9538%" y="101" width="2.9001%" height="15" fill="rgb(229,88,8)"/><text x="16.2038%" y="111.50">ty..</text></g><g><title>item_types_checking (2,066,683 samples, 0.16%)</title><rect x="18.8539%" y="133" width="0.1616%" height="15" fill="rgb(213,181,19)"/><text x="19.1039%" y="143.50"></text></g><g><title>check_mod_item_types (2,060,483 samples, 0.16%)</title><rect x="18.8544%" y="117" width="0.1611%" height="15" fill="rgb(254,191,54)"/><text x="19.1044%" y="127.50"></text></g><g><title>type_collecting (1,692,519 samples, 0.13%)</title><rect x="19.0158%" y="133" width="0.1324%" height="15" fill="rgb(241,83,37)"/><text x="19.2658%" y="143.50"></text></g><g><title>collect_mod_item_types (1,677,489 samples, 0.13%)</title><rect x="19.0170%" y="117" width="0.1312%" height="15" fill="rgb(233,36,39)"/><text x="19.2670%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,807,940 samples, 0.22%)</title><rect x="19.1579%" y="117" width="0.2196%" height="15" fill="rgb(226,3,54)"/><text x="19.4079%" y="127.50"></text></g><g><title>check_item_well_formed (2,530,821 samples, 0.20%)</title><rect x="19.3775%" y="117" width="0.1979%" height="15" fill="rgb(245,192,40)"/><text x="19.6275%" y="127.50"></text></g><g><title>analysis (94,101,618 samples, 7.36%)</title><rect x="12.2407%" y="165" width="7.3594%" height="15" fill="rgb(238,167,29)"/><text x="12.4907%" y="175.50">analysis</text></g><g><title>type_check_crate (62,531,280 samples, 4.89%)</title><rect x="14.7097%" y="149" width="4.8904%" height="15" fill="rgb(232,182,51)"/><text x="14.9597%" y="159.50">type_c..</text></g><g><title>wf_checking (5,775,225 samples, 0.45%)</title><rect x="19.1484%" y="133" width="0.4517%" height="15" fill="rgb(231,60,39)"/><text x="19.3984%" y="143.50"></text></g><g><title>is_freeze_raw (2,245,608 samples, 0.18%)</title><rect x="24.0066%" y="117" width="0.1756%" height="15" fill="rgb(208,69,12)"/><text x="24.2566%" y="127.50"></text></g><g><title>evaluate_obligation (1,897,030 samples, 0.15%)</title><rect x="24.0338%" y="101" width="0.1484%" height="15" fill="rgb(235,93,37)"/><text x="24.2838%" y="111.50"></text></g><g><title>is_unpin_raw (1,549,191 samples, 0.12%)</title><rect x="24.1822%" y="117" width="0.1212%" height="15" fill="rgb(213,116,39)"/><text x="24.4322%" y="127.50"></text></g><g><title>evaluate_obligation (1,401,840 samples, 0.11%)</title><rect x="24.1937%" y="101" width="0.1096%" height="15" fill="rgb(222,207,29)"/><text x="24.4437%" y="111.50"></text></g><g><title>layout_of (2,186,790 samples, 0.17%)</title><rect x="24.3033%" y="117" width="0.1710%" height="15" fill="rgb(206,96,30)"/><text x="24.5533%" y="127.50"></text></g><g><title>predicates_of (1,775,209 samples, 0.14%)</title><rect x="24.7116%" y="101" width="0.1388%" height="15" fill="rgb(218,138,4)"/><text x="24.9616%" y="111.50"></text></g><g><title>predicates_defined_on (1,303,074 samples, 0.10%)</title><rect x="24.7485%" y="85" width="0.1019%" height="15" fill="rgb(250,191,14)"/><text x="24.9985%" y="95.50"></text></g><g><title>param_env (4,818,231 samples, 0.38%)</title><rect x="24.4744%" y="117" width="0.3768%" height="15" fill="rgb(239,60,40)"/><text x="24.7244%" y="127.50"></text></g><g><title>fn_abi_of_instance (16,623,498 samples, 1.30%)</title><rect x="23.5720%" y="133" width="1.3001%" height="15" fill="rgb(206,27,48)"/><text x="23.8220%" y="143.50"></text></g><g><title>layout_of (1,746,923 samples, 0.14%)</title><rect x="24.9144%" y="133" width="0.1366%" height="15" fill="rgb(225,35,8)"/><text x="25.1644%" y="143.50"></text></g><g><title>codegen_module (68,349,085 samples, 5.35%)</title><rect x="19.7720%" y="149" width="5.3454%" height="15" fill="rgb(250,213,24)"/><text x="20.0220%" y="159.50">codegen..</text></g><g><title>item_attrs (1,492,382 samples, 0.12%)</title><rect x="25.3794%" y="85" width="0.1167%" height="15" fill="rgb(247,123,22)"/><text x="25.6294%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,440,301 samples, 0.11%)</title><rect x="25.3835%" y="69" width="0.1126%" height="15" fill="rgb(231,138,38)"/><text x="25.6335%" y="79.50"></text></g><g><title>codegen_fn_attrs (2,208,741 samples, 0.17%)</title><rect x="25.3522%" y="101" width="0.1727%" height="15" fill="rgb(231,145,46)"/><text x="25.6022%" y="111.50"></text></g><g><title>mir_shims (1,508,341 samples, 0.12%)</title><rect x="25.5693%" y="101" width="0.1180%" height="15" fill="rgb(251,118,11)"/><text x="25.8193%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,146,050 samples, 0.17%)</title><rect x="25.7867%" y="85" width="0.1678%" height="15" fill="rgb(217,147,25)"/><text x="26.0367%" y="95.50"></text></g><g><title>optimized_mir (4,964,612 samples, 0.39%)</title><rect x="25.6872%" y="101" width="0.3883%" height="15" fill="rgb(247,81,37)"/><text x="25.9372%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,310,075 samples, 0.18%)</title><rect x="26.1614%" y="85" width="0.1807%" height="15" fill="rgb(209,12,38)"/><text x="26.4114%" y="95.50"></text></g><g><title>specialization_graph_of (4,088,995 samples, 0.32%)</title><rect x="26.4198%" y="85" width="0.3198%" height="15" fill="rgb(227,1,9)"/><text x="26.6698%" y="95.50"></text></g><g><title>impl_trait_ref (1,353,074 samples, 0.11%)</title><rect x="26.6338%" y="69" width="0.1058%" height="15" fill="rgb(248,47,43)"/><text x="26.8838%" y="79.50"></text></g><g><title>resolve_instance (8,938,678 samples, 0.70%)</title><rect x="26.0755%" y="101" width="0.6991%" height="15" fill="rgb(221,10,30)"/><text x="26.3255%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (22,653,867 samples, 1.77%)</title><rect x="25.1220%" y="117" width="1.7717%" height="15" fill="rgb(210,229,1)"/><text x="25.3720%" y="127.50">m..</text></g><g><title>monomorphization_collector (22,688,048 samples, 1.77%)</title><rect x="25.1218%" y="133" width="1.7744%" height="15" fill="rgb(222,148,37)"/><text x="25.3718%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (2,415,667 samples, 0.19%)</title><rect x="26.8966%" y="117" width="0.1889%" height="15" fill="rgb(234,67,33)"/><text x="27.1466%" y="127.50"></text></g><g><title>symbol_name (2,143,784 samples, 0.17%)</title><rect x="26.9179%" y="101" width="0.1677%" height="15" fill="rgb(247,98,35)"/><text x="27.1679%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (26,009,865 samples, 2.03%)</title><rect x="25.1183%" y="149" width="2.0342%" height="15" fill="rgb(247,138,52)"/><text x="25.3683%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (3,277,297 samples, 0.26%)</title><rect x="26.8962%" y="133" width="0.2563%" height="15" fill="rgb(213,79,30)"/><text x="27.1462%" y="143.50"></text></g><g><title>codegen_crate (96,734,557 samples, 7.57%)</title><rect x="19.6006%" y="165" width="7.5654%" height="15" fill="rgb(246,177,23)"/><text x="19.8506%" y="175.50">codegen_cr..</text></g><g><title>codegen_module_optimize (466,940,738 samples, 36.52%)</title><rect x="27.1660%" y="165" width="36.5182%" height="15" fill="rgb(230,62,27)"/><text x="27.4160%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (447,279,655 samples, 34.98%)</title><rect x="28.7036%" y="149" width="34.9806%" height="15" fill="rgb(216,154,8)"/><text x="28.9536%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (144,358,672 samples, 11.29%)</title><rect x="64.5751%" y="149" width="11.2899%" height="15" fill="rgb(244,35,45)"/><text x="64.8251%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (163,456,394 samples, 12.78%)</title><rect x="75.8651%" y="149" width="12.7835%" height="15" fill="rgb(251,115,12)"/><text x="76.1151%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (161,382,313 samples, 12.62%)</title><rect x="76.0273%" y="133" width="12.6213%" height="15" fill="rgb(240,54,50)"/><text x="76.2773%" y="143.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (11,135,385 samples, 0.87%)</title><rect x="88.6486%" y="149" width="0.8709%" height="15" fill="rgb(233,84,52)"/><text x="88.8986%" y="159.50"></text></g><g><title>codegen_module_perform_lto (331,118,809 samples, 25.90%)</title><rect x="63.6842%" y="165" width="25.8960%" height="15" fill="rgb(207,117,47)"/><text x="63.9342%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (7,770,148 samples, 0.61%)</title><rect x="90.4852%" y="117" width="0.6077%" height="15" fill="rgb(249,43,39)"/><text x="90.7352%" y="127.50"></text></g><g><title>metadata_register_crate (5,995,264 samples, 0.47%)</title><rect x="90.6240%" y="101" width="0.4689%" height="15" fill="rgb(209,38,44)"/><text x="90.8740%" y="111.50"></text></g><g><title>metadata_register_crate (4,280,998 samples, 0.33%)</title><rect x="90.7581%" y="85" width="0.3348%" height="15" fill="rgb(236,212,23)"/><text x="91.0081%" y="95.50"></text></g><g><title>macro_expand_crate (19,139,588 samples, 1.50%)</title><rect x="89.6056%" y="149" width="1.4969%" height="15" fill="rgb(242,79,21)"/><text x="89.8556%" y="159.50"></text></g><g><title>expand_crate (19,129,387 samples, 1.50%)</title><rect x="89.6064%" y="133" width="1.4961%" height="15" fill="rgb(211,96,35)"/><text x="89.8564%" y="143.50"></text></g><g><title>late_resolve_crate (1,747,640 samples, 0.14%)</title><rect x="91.1183%" y="133" width="0.1367%" height="15" fill="rgb(253,215,40)"/><text x="91.3683%" y="143.50"></text></g><g><title>configure_and_expand (21,490,534 samples, 1.68%)</title><rect x="89.5802%" y="165" width="1.6807%" height="15" fill="rgb(211,81,21)"/><text x="89.8302%" y="175.50"></text></g><g><title>resolve_crate (1,968,172 samples, 0.15%)</title><rect x="91.1070%" y="149" width="0.1539%" height="15" fill="rgb(208,190,38)"/><text x="91.3570%" y="159.50"></text></g><g><title>free_global_ctxt (8,672,319 samples, 0.68%)</title><rect x="91.2892%" y="165" width="0.6782%" height="15" fill="rgb(235,213,38)"/><text x="91.5392%" y="175.50"></text></g><g><title>layout_of (1,509,378 samples, 0.12%)</title><rect x="92.2712%" y="133" width="0.1180%" height="15" fill="rgb(237,122,38)"/><text x="92.5212%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,773,422 samples, 0.30%)</title><rect x="92.3892%" y="133" width="0.2951%" height="15" fill="rgb(244,218,35)"/><text x="92.6392%" y="143.50"></text></g><g><title>optimized_mir (7,894,228 samples, 0.62%)</title><rect x="92.1007%" y="149" width="0.6174%" height="15" fill="rgb(240,68,47)"/><text x="92.3507%" y="159.50"></text></g><g><title>generate_crate_metadata (9,700,920 samples, 0.76%)</title><rect x="91.9675%" y="165" width="0.7587%" height="15" fill="rgb(210,16,53)"/><text x="92.2175%" y="175.50"></text></g><g><title>hir_lowering (1,692,219 samples, 0.13%)</title><rect x="92.7262%" y="165" width="0.1323%" height="15" fill="rgb(235,124,12)"/><text x="92.9762%" y="175.50"></text></g><g><title>finish_ongoing_codegen (86,327,090 samples, 6.75%)</title><rect x="92.8605%" y="149" width="6.7514%" height="15" fill="rgb(224,169,11)"/><text x="93.1105%" y="159.50">finish_on..</text></g><g><title>link_crate (1,598,028 samples, 0.12%)</title><rect x="99.6119%" y="149" width="0.1250%" height="15" fill="rgb(250,166,2)"/><text x="99.8619%" y="159.50"></text></g><g><title>link_binary (1,579,068 samples, 0.12%)</title><rect x="99.6134%" y="133" width="0.1235%" height="15" fill="rgb(242,216,29)"/><text x="99.8634%" y="143.50"></text></g><g><title>link (87,961,908 samples, 6.88%)</title><rect x="92.8585%" y="165" width="6.8793%" height="15" fill="rgb(230,116,27)"/><text x="93.1085%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,494,388 samples, 0.20%)</title><rect x="99.7713%" y="165" width="0.1951%" height="15" fill="rgb(228,99,48)"/><text x="100.0213%" y="175.50"></text></g><g><title>all (1,278,650,771 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,278,650,771 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>