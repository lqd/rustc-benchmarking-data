<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,388,083 samples, 16.32%)</title><rect x="1.0123%" y="229" width="16.3230%" height="15" fill="rgb(227,0,7)"/><text x="1.2623%" y="239.50">LLVM_passes</text></g><g><title>is_copy_raw (134,381 samples, 0.13%)</title><rect x="21.9776%" y="117" width="0.1338%" height="15" fill="rgb(217,0,24)"/><text x="22.2276%" y="127.50"></text></g><g><title>evaluate_obligation (118,911 samples, 0.12%)</title><rect x="21.9930%" y="101" width="0.1184%" height="15" fill="rgb(221,193,54)"/><text x="22.2430%" y="111.50"></text></g><g><title>needs_drop_raw (430,745 samples, 0.43%)</title><rect x="22.1206%" y="117" width="0.4290%" height="15" fill="rgb(248,212,6)"/><text x="22.3706%" y="127.50"></text></g><g><title>is_copy_raw (424,155 samples, 0.42%)</title><rect x="22.1271%" y="101" width="0.4225%" height="15" fill="rgb(208,68,35)"/><text x="22.3771%" y="111.50"></text></g><g><title>evaluate_obligation (413,774 samples, 0.41%)</title><rect x="22.1375%" y="85" width="0.4121%" height="15" fill="rgb(232,128,0)"/><text x="22.3875%" y="95.50"></text></g><g><title>trait_impls_of (350,744 samples, 0.35%)</title><rect x="22.2002%" y="69" width="0.3494%" height="15" fill="rgb(207,160,47)"/><text x="22.4502%" y="79.50"></text></g><g><title>thir_body (362,634 samples, 0.36%)</title><rect x="22.5907%" y="117" width="0.3612%" height="15" fill="rgb(228,23,34)"/><text x="22.8407%" y="127.50"></text></g><g><title>mir_const (2,352,417 samples, 2.34%)</title><rect x="20.6130%" y="165" width="2.3431%" height="15" fill="rgb(218,30,26)"/><text x="20.8630%" y="175.50">m..</text></g><g><title>unsafety_check_result (1,973,562 samples, 1.97%)</title><rect x="20.9903%" y="149" width="1.9657%" height="15" fill="rgb(220,122,19)"/><text x="21.2403%" y="159.50">u..</text></g><g><title>mir_built (1,839,181 samples, 1.83%)</title><rect x="21.1242%" y="133" width="1.8319%" height="15" fill="rgb(250,228,42)"/><text x="21.3742%" y="143.50">m..</text></g><g><title>mir_promoted (2,931,533 samples, 2.92%)</title><rect x="20.3208%" y="181" width="2.9199%" height="15" fill="rgb(240,193,28)"/><text x="20.5708%" y="191.50">mi..</text></g><g><title>mir_const_qualif (285,803 samples, 0.28%)</title><rect x="22.9561%" y="165" width="0.2847%" height="15" fill="rgb(216,20,37)"/><text x="23.2061%" y="175.50"></text></g><g><title>mir_const (208,773 samples, 0.21%)</title><rect x="23.0328%" y="149" width="0.2079%" height="15" fill="rgb(206,188,39)"/><text x="23.2828%" y="159.50"></text></g><g><title>unsafety_check_result (142,042 samples, 0.14%)</title><rect x="23.0993%" y="133" width="0.1415%" height="15" fill="rgb(217,207,13)"/><text x="23.3493%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,823,175 samples, 5.80%)</title><rect x="17.5286%" y="213" width="5.8001%" height="15" fill="rgb(231,73,38)"/><text x="17.7786%" y="223.50">MIR_bor..</text></g><g><title>mir_borrowck (5,785,585 samples, 5.76%)</title><rect x="17.5661%" y="197" width="5.7626%" height="15" fill="rgb(225,20,46)"/><text x="17.8161%" y="207.50">mir_bor..</text></g><g><title>MIR_effect_checking (245,833 samples, 0.24%)</title><rect x="23.3287%" y="213" width="0.2449%" height="15" fill="rgb(210,31,41)"/><text x="23.5787%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (104,601 samples, 0.10%)</title><rect x="23.4694%" y="197" width="0.1042%" height="15" fill="rgb(221,200,47)"/><text x="23.7194%" y="207.50"></text></g><g><title>hir_module_items (155,871 samples, 0.16%)</title><rect x="23.5736%" y="213" width="0.1553%" height="15" fill="rgb(226,26,5)"/><text x="23.8236%" y="223.50"></text></g><g><title>codegen_fn_attrs (192,882 samples, 0.19%)</title><rect x="23.8962%" y="181" width="0.1921%" height="15" fill="rgb(249,33,26)"/><text x="24.1462%" y="191.50"></text></g><g><title>check_mod_attrs (322,934 samples, 0.32%)</title><rect x="23.7669%" y="197" width="0.3217%" height="15" fill="rgb(235,183,28)"/><text x="24.0169%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (254,292 samples, 0.25%)</title><rect x="24.1819%" y="197" width="0.2533%" height="15" fill="rgb(221,5,38)"/><text x="24.4319%" y="207.50"></text></g><g><title>misc_checking_1 (769,149 samples, 0.77%)</title><rect x="23.7294%" y="213" width="0.7661%" height="15" fill="rgb(247,18,42)"/><text x="23.9794%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (175,732 samples, 0.18%)</title><rect x="24.4980%" y="197" width="0.1750%" height="15" fill="rgb(241,131,45)"/><text x="24.7480%" y="207.50"></text></g><g><title>check_mod_liveness (136,071 samples, 0.14%)</title><rect x="24.5375%" y="181" width="0.1355%" height="15" fill="rgb(249,31,29)"/><text x="24.7875%" y="191.50"></text></g><g><title>misc_checking_2 (356,274 samples, 0.35%)</title><rect x="24.4955%" y="213" width="0.3549%" height="15" fill="rgb(225,111,53)"/><text x="24.7455%" y="223.50"></text></g><g><title>match_checking (178,002 samples, 0.18%)</title><rect x="24.6731%" y="197" width="0.1773%" height="15" fill="rgb(238,160,17)"/><text x="24.9231%" y="207.50"></text></g><g><title>check_match (165,042 samples, 0.16%)</title><rect x="24.6860%" y="181" width="0.1644%" height="15" fill="rgb(214,148,48)"/><text x="24.9360%" y="191.50"></text></g><g><title>death_checking (154,972 samples, 0.15%)</title><rect x="24.9169%" y="197" width="0.1544%" height="15" fill="rgb(232,36,49)"/><text x="25.1669%" y="207.50"></text></g><g><title>eval_to_allocation_raw (149,431 samples, 0.15%)</title><rect x="25.2374%" y="165" width="0.1488%" height="15" fill="rgb(209,103,24)"/><text x="25.4874%" y="175.50"></text></g><g><title>eval_to_allocation_raw (138,091 samples, 0.14%)</title><rect x="25.2487%" y="149" width="0.1375%" height="15" fill="rgb(229,88,8)"/><text x="25.4987%" y="159.50"></text></g><g><title>param_env (230,163 samples, 0.23%)</title><rect x="25.3862%" y="165" width="0.2292%" height="15" fill="rgb(213,181,19)"/><text x="25.6362%" y="175.50"></text></g><g><title>predicates_of (107,441 samples, 0.11%)</title><rect x="25.5084%" y="149" width="0.1070%" height="15" fill="rgb(254,191,54)"/><text x="25.7584%" y="159.50"></text></g><g><title>crate_lints (548,476 samples, 0.55%)</title><rect x="25.0736%" y="181" width="0.5463%" height="15" fill="rgb(241,83,37)"/><text x="25.3236%" y="191.50"></text></g><g><title>lint_checking (675,827 samples, 0.67%)</title><rect x="25.0713%" y="197" width="0.6731%" height="15" fill="rgb(233,36,39)"/><text x="25.3213%" y="207.50"></text></g><g><title>module_lints (125,041 samples, 0.12%)</title><rect x="25.6199%" y="181" width="0.1245%" height="15" fill="rgb(226,3,54)"/><text x="25.8699%" y="191.50"></text></g><g><title>lint_mod (121,011 samples, 0.12%)</title><rect x="25.6239%" y="165" width="0.1205%" height="15" fill="rgb(245,192,40)"/><text x="25.8739%" y="175.50"></text></g><g><title>privacy_checking_modules (104,121 samples, 0.10%)</title><rect x="25.8011%" y="197" width="0.1037%" height="15" fill="rgb(238,167,29)"/><text x="26.0511%" y="207.50"></text></g><g><title>check_mod_privacy (101,771 samples, 0.10%)</title><rect x="25.8034%" y="181" width="0.1014%" height="15" fill="rgb(232,182,51)"/><text x="26.0534%" y="191.50"></text></g><g><title>misc_checking_3 (1,073,251 samples, 1.07%)</title><rect x="24.8504%" y="213" width="1.0690%" height="15" fill="rgb(231,60,39)"/><text x="25.1004%" y="223.50"></text></g><g><title>impl_parent (162,833 samples, 0.16%)</title><rect x="30.3451%" y="53" width="0.1622%" height="15" fill="rgb(208,69,12)"/><text x="30.5951%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (115,662 samples, 0.12%)</title><rect x="30.3921%" y="37" width="0.1152%" height="15" fill="rgb(235,93,37)"/><text x="30.6421%" y="47.50"></text></g><g><title>impl_trait_ref (652,366 samples, 0.65%)</title><rect x="30.5073%" y="53" width="0.6498%" height="15" fill="rgb(213,116,39)"/><text x="30.7573%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (604,785 samples, 0.60%)</title><rect x="30.5546%" y="37" width="0.6024%" height="15" fill="rgb(222,207,29)"/><text x="30.8046%" y="47.50"></text></g><g><title>adt_destructor (1,104,993 samples, 1.10%)</title><rect x="30.1174%" y="117" width="1.1006%" height="15" fill="rgb(206,96,30)"/><text x="30.3674%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,103,003 samples, 1.10%)</title><rect x="30.1194%" y="101" width="1.0986%" height="15" fill="rgb(218,138,4)"/><text x="30.3694%" y="111.50"></text></g><g><title>coherent_trait (1,093,972 samples, 1.09%)</title><rect x="30.1284%" y="85" width="1.0896%" height="15" fill="rgb(250,191,14)"/><text x="30.3784%" y="95.50"></text></g><g><title>specialization_graph_of (1,086,852 samples, 1.08%)</title><rect x="30.1354%" y="69" width="1.0825%" height="15" fill="rgb(239,60,40)"/><text x="30.3854%" y="79.50"></text></g><g><title>dropck_outlives (1,191,484 samples, 1.19%)</title><rect x="30.0414%" y="149" width="1.1868%" height="15" fill="rgb(206,27,48)"/><text x="30.2914%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,133,774 samples, 1.13%)</title><rect x="30.0988%" y="133" width="1.1293%" height="15" fill="rgb(225,35,8)"/><text x="30.3488%" y="143.50"></text></g><g><title>evaluate_obligation (594,326 samples, 0.59%)</title><rect x="31.2281%" y="149" width="0.5920%" height="15" fill="rgb(250,213,24)"/><text x="31.4781%" y="159.50"></text></g><g><title>trait_impls_of (234,263 samples, 0.23%)</title><rect x="31.5867%" y="133" width="0.2333%" height="15" fill="rgb(247,123,22)"/><text x="31.8367%" y="143.50"></text></g><g><title>item_bodies_checking (6,236,770 samples, 6.21%)</title><rect x="26.0010%" y="197" width="6.2120%" height="15" fill="rgb(231,138,38)"/><text x="26.2510%" y="207.50">item_bod..</text></g><g><title>typeck_item_bodies (6,232,870 samples, 6.21%)</title><rect x="26.0049%" y="181" width="6.2081%" height="15" fill="rgb(231,145,46)"/><text x="26.2549%" y="191.50">typeck_i..</text></g><g><title>typeck (6,207,248 samples, 6.18%)</title><rect x="26.0304%" y="165" width="6.1826%" height="15" fill="rgb(251,118,11)"/><text x="26.2804%" y="175.50">typeck</text></g><g><title>item_types_checking (217,092 samples, 0.22%)</title><rect x="32.2130%" y="197" width="0.2162%" height="15" fill="rgb(217,147,25)"/><text x="32.4630%" y="207.50"></text></g><g><title>check_mod_item_types (212,892 samples, 0.21%)</title><rect x="32.2172%" y="181" width="0.2120%" height="15" fill="rgb(247,81,37)"/><text x="32.4672%" y="191.50"></text></g><g><title>typeck (182,992 samples, 0.18%)</title><rect x="32.2469%" y="165" width="0.1823%" height="15" fill="rgb(209,12,38)"/><text x="32.4969%" y="175.50"></text></g><g><title>late_bound_vars_map (119,742 samples, 0.12%)</title><rect x="32.6338%" y="149" width="0.1193%" height="15" fill="rgb(227,1,9)"/><text x="32.8838%" y="159.50"></text></g><g><title>resolve_lifetimes (103,121 samples, 0.10%)</title><rect x="32.6503%" y="133" width="0.1027%" height="15" fill="rgb(248,47,43)"/><text x="32.9003%" y="143.50"></text></g><g><title>fn_sig (254,743 samples, 0.25%)</title><rect x="32.5413%" y="165" width="0.2537%" height="15" fill="rgb(221,10,30)"/><text x="32.7913%" y="175.50"></text></g><g><title>type_collecting (565,586 samples, 0.56%)</title><rect x="32.4322%" y="197" width="0.5633%" height="15" fill="rgb(210,229,1)"/><text x="32.6822%" y="207.50"></text></g><g><title>collect_mod_item_types (546,416 samples, 0.54%)</title><rect x="32.4513%" y="181" width="0.5442%" height="15" fill="rgb(222,148,37)"/><text x="32.7013%" y="191.50"></text></g><g><title>evaluate_obligation (305,924 samples, 0.30%)</title><rect x="33.5759%" y="165" width="0.3047%" height="15" fill="rgb(234,67,33)"/><text x="33.8259%" y="175.50"></text></g><g><title>param_env (265,295 samples, 0.26%)</title><rect x="33.9606%" y="165" width="0.2642%" height="15" fill="rgb(247,98,35)"/><text x="34.2106%" y="175.50"></text></g><g><title>region_scope_tree (130,731 samples, 0.13%)</title><rect x="34.2783%" y="165" width="0.1302%" height="15" fill="rgb(247,138,52)"/><text x="34.5283%" y="175.50"></text></g><g><title>analysis (17,141,851 samples, 17.07%)</title><rect x="17.3354%" y="229" width="17.0738%" height="15" fill="rgb(213,79,30)"/><text x="17.5854%" y="239.50">analysis</text></g><g><title>type_check_crate (8,523,635 samples, 8.49%)</title><rect x="25.9194%" y="213" width="8.4898%" height="15" fill="rgb(246,177,23)"/><text x="26.1694%" y="223.50">type_check_c..</text></g><g><title>wf_checking (1,416,966 samples, 1.41%)</title><rect x="32.9978%" y="197" width="1.4113%" height="15" fill="rgb(230,62,27)"/><text x="33.2478%" y="207.50"></text></g><g><title>check_item_well_formed (1,353,525 samples, 1.35%)</title><rect x="33.0610%" y="181" width="1.3482%" height="15" fill="rgb(216,154,8)"/><text x="33.3110%" y="191.50"></text></g><g><title>const_caller_location (105,730 samples, 0.11%)</title><rect x="36.3121%" y="197" width="0.1053%" height="15" fill="rgb(244,35,45)"/><text x="36.5621%" y="207.50"></text></g><g><title>layout_of (233,012 samples, 0.23%)</title><rect x="36.6919%" y="181" width="0.2321%" height="15" fill="rgb(251,115,12)"/><text x="36.9419%" y="191.50"></text></g><g><title>param_env (158,611 samples, 0.16%)</title><rect x="36.9240%" y="181" width="0.1580%" height="15" fill="rgb(240,54,50)"/><text x="37.1740%" y="191.50"></text></g><g><title>fn_abi_of_instance (671,365 samples, 0.67%)</title><rect x="36.4175%" y="197" width="0.6687%" height="15" fill="rgb(233,84,52)"/><text x="36.6675%" y="207.50"></text></g><g><title>codegen_module (2,276,466 samples, 2.27%)</title><rect x="34.8566%" y="213" width="2.2674%" height="15" fill="rgb(207,117,47)"/><text x="35.1066%" y="223.50">c..</text></g><g><title>item_attrs (155,380 samples, 0.15%)</title><rect x="37.3653%" y="149" width="0.1548%" height="15" fill="rgb(249,43,39)"/><text x="37.6153%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (152,410 samples, 0.15%)</title><rect x="37.3683%" y="133" width="0.1518%" height="15" fill="rgb(209,38,44)"/><text x="37.6183%" y="143.50"></text></g><g><title>codegen_fn_attrs (208,161 samples, 0.21%)</title><rect x="37.3361%" y="165" width="0.2073%" height="15" fill="rgb(236,212,23)"/><text x="37.5861%" y="175.50"></text></g><g><title>is_reachable_non_generic (110,821 samples, 0.11%)</title><rect x="37.5660%" y="165" width="0.1104%" height="15" fill="rgb(242,79,21)"/><text x="37.8160%" y="175.50"></text></g><g><title>reachable_non_generics (107,381 samples, 0.11%)</title><rect x="37.5694%" y="149" width="0.1070%" height="15" fill="rgb(211,96,35)"/><text x="37.8194%" y="159.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (106,111 samples, 0.11%)</title><rect x="37.5707%" y="133" width="0.1057%" height="15" fill="rgb(253,215,40)"/><text x="37.8207%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (556,374 samples, 0.55%)</title><rect x="38.6767%" y="149" width="0.5542%" height="15" fill="rgb(211,81,21)"/><text x="38.9267%" y="159.50"></text></g><g><title>optimized_mir (1,577,405 samples, 1.57%)</title><rect x="37.6764%" y="165" width="1.5711%" height="15" fill="rgb(208,190,38)"/><text x="37.9264%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (2,220,165 samples, 2.21%)</title><rect x="37.1576%" y="181" width="2.2113%" height="15" fill="rgb(235,213,38)"/><text x="37.4076%" y="191.50">m..</text></g><g><title>monomorphization_collector (2,257,775 samples, 2.25%)</title><rect x="37.1549%" y="197" width="2.2488%" height="15" fill="rgb(237,122,38)"/><text x="37.4049%" y="207.50">m..</text></g><g><title>collect_and_partition_mono_items (2,430,097 samples, 2.42%)</title><rect x="37.1245%" y="213" width="2.4204%" height="15" fill="rgb(244,218,35)"/><text x="37.3745%" y="223.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (141,892 samples, 0.14%)</title><rect x="39.4037%" y="197" width="0.1413%" height="15" fill="rgb(240,68,47)"/><text x="39.6537%" y="207.50"></text></g><g><title>codegen_crate (5,226,308 samples, 5.21%)</title><rect x="34.4199%" y="229" width="5.2056%" height="15" fill="rgb(210,16,53)"/><text x="34.6699%" y="239.50">codege..</text></g><g><title>LLVM_module_codegen (1,122,603 samples, 1.12%)</title><rect x="39.6464%" y="213" width="1.1181%" height="15" fill="rgb(235,124,12)"/><text x="39.8964%" y="223.50"></text></g><g><title>LLVM_module_codegen_make_bitcode (918,880 samples, 0.92%)</title><rect x="39.8493%" y="197" width="0.9152%" height="15" fill="rgb(224,169,11)"/><text x="40.0993%" y="207.50"></text></g><g><title>LLVM_module_codegen_emit_bitcode (147,422 samples, 0.15%)</title><rect x="40.6177%" y="181" width="0.1468%" height="15" fill="rgb(250,166,2)"/><text x="40.8677%" y="191.50"></text></g><g><title>codegen_module_optimize (16,182,470 samples, 16.12%)</title><rect x="39.6255%" y="229" width="16.1182%" height="15" fill="rgb(242,216,29)"/><text x="39.8755%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (15,038,897 samples, 14.98%)</title><rect x="40.7645%" y="213" width="14.9792%" height="15" fill="rgb(230,116,27)"/><text x="41.0145%" y="223.50">LLVM_module_optimize</text></g><g><title>AST_validation (225,023 samples, 0.22%)</title><rect x="55.9516%" y="213" width="0.2241%" height="15" fill="rgb(228,99,48)"/><text x="56.2016%" y="223.50"></text></g><g><title>metadata_register_crate (2,694,210 samples, 2.68%)</title><rect x="75.1754%" y="181" width="2.6835%" height="15" fill="rgb(253,11,6)"/><text x="75.4254%" y="191.50">me..</text></g><g><title>metadata_register_crate (962,952 samples, 0.96%)</title><rect x="76.8998%" y="165" width="0.9591%" height="15" fill="rgb(247,143,39)"/><text x="77.1498%" y="175.50"></text></g><g><title>macro_expand_crate (21,732,732 samples, 21.65%)</title><rect x="56.2955%" y="213" width="21.6464%" height="15" fill="rgb(236,97,10)"/><text x="56.5455%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (21,714,322 samples, 21.63%)</title><rect x="56.3139%" y="197" width="21.6281%" height="15" fill="rgb(233,208,19)"/><text x="56.5639%" y="207.50">expand_crate</text></g><g><title>finalize_macro_resolutions (236,462 samples, 0.24%)</title><rect x="78.1149%" y="197" width="0.2355%" height="15" fill="rgb(216,164,2)"/><text x="78.3649%" y="207.50"></text></g><g><title>late_resolve_crate (671,618 samples, 0.67%)</title><rect x="78.3504%" y="197" width="0.6690%" height="15" fill="rgb(220,129,5)"/><text x="78.6004%" y="207.50"></text></g><g><title>configure_and_expand (23,442,822 samples, 23.35%)</title><rect x="55.7437%" y="229" width="23.3497%" height="15" fill="rgb(242,17,10)"/><text x="55.9937%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,053,742 samples, 1.05%)</title><rect x="78.0439%" y="213" width="1.0496%" height="15" fill="rgb(242,107,0)"/><text x="78.2939%" y="223.50"></text></g><g><title>early_lint_checks (219,052 samples, 0.22%)</title><rect x="79.1929%" y="229" width="0.2182%" height="15" fill="rgb(251,28,31)"/><text x="79.4429%" y="239.50"></text></g><g><title>free_global_ctxt (1,704,389 samples, 1.70%)</title><rect x="79.4111%" y="229" width="1.6976%" height="15" fill="rgb(233,223,10)"/><text x="79.6611%" y="239.50"></text></g><g><title>crate_hash (113,741 samples, 0.11%)</title><rect x="81.5314%" y="213" width="0.1133%" height="15" fill="rgb(215,21,27)"/><text x="81.7814%" y="223.50"></text></g><g><title>exported_symbols (113,641 samples, 0.11%)</title><rect x="81.6834%" y="213" width="0.1132%" height="15" fill="rgb(232,23,21)"/><text x="81.9334%" y="223.50"></text></g><g><title>generate_crate_metadata (769,299 samples, 0.77%)</title><rect x="81.1087%" y="229" width="0.7662%" height="15" fill="rgb(244,5,23)"/><text x="81.3587%" y="239.50"></text></g><g><title>hir_lowering (1,212,084 samples, 1.21%)</title><rect x="81.8750%" y="229" width="1.2073%" height="15" fill="rgb(226,81,46)"/><text x="82.1250%" y="239.50"></text></g><g><title>finish_ongoing_codegen (14,555,112 samples, 14.50%)</title><rect x="83.0947%" y="213" width="14.4973%" height="15" fill="rgb(247,70,30)"/><text x="83.3447%" y="223.50">finish_ongoing_codegen</text></g><g><title>link_crate (747,368 samples, 0.74%)</title><rect x="97.5921%" y="213" width="0.7444%" height="15" fill="rgb(212,68,19)"/><text x="97.8421%" y="223.50"></text></g><g><title>link_binary (738,098 samples, 0.74%)</title><rect x="97.6013%" y="197" width="0.7352%" height="15" fill="rgb(240,187,13)"/><text x="97.8513%" y="207.50"></text></g><g><title>link_rlib (518,855 samples, 0.52%)</title><rect x="97.8197%" y="181" width="0.5168%" height="15" fill="rgb(223,113,26)"/><text x="98.0697%" y="191.50"></text></g><g><title>link (15,323,241 samples, 15.26%)</title><rect x="83.0822%" y="229" width="15.2624%" height="15" fill="rgb(206,192,2)"/><text x="83.3322%" y="239.50">link</text></g><g><title>parse_crate (391,245 samples, 0.39%)</title><rect x="98.3446%" y="229" width="0.3897%" height="15" fill="rgb(241,108,4)"/><text x="98.5946%" y="239.50"></text></g><g><title>prepare_outputs (353,384 samples, 0.35%)</title><rect x="98.7445%" y="229" width="0.3520%" height="15" fill="rgb(247,173,49)"/><text x="98.9945%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (337,864 samples, 0.34%)</title><rect x="99.0964%" y="229" width="0.3365%" height="15" fill="rgb(224,114,35)"/><text x="99.3464%" y="239.50"></text></g><g><title>setup_global_ctxt (141,962 samples, 0.14%)</title><rect x="99.4391%" y="229" width="0.1414%" height="15" fill="rgb(245,159,27)"/><text x="99.6891%" y="239.50"></text></g><g><title>all (100,398,649 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (100,398,649 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (421,125 samples, 0.42%)</title><rect x="99.5805%" y="229" width="0.4195%" height="15" fill="rgb(205,117,38)"/><text x="99.8305%" y="239.50"></text></g></svg></svg>