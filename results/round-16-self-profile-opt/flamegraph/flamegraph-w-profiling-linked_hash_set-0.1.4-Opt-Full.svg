<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,618,804 samples, 4.29%)</title><rect x="0.4112%" y="181" width="4.2864%" height="15" fill="rgb(227,0,7)"/><text x="0.6612%" y="191.50">LLVM_..</text></g><g><title>codegen_generate_lto_work (579,897 samples, 0.38%)</title><rect x="4.3220%" y="165" width="0.3755%" height="15" fill="rgb(217,0,24)"/><text x="4.5720%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (570,627 samples, 0.37%)</title><rect x="4.3280%" y="149" width="0.3695%" height="15" fill="rgb(221,193,54)"/><text x="4.5780%" y="159.50"></text></g><g><title>param_env (511,339 samples, 0.33%)</title><rect x="12.9705%" y="101" width="0.3311%" height="15" fill="rgb(248,212,6)"/><text x="13.2205%" y="111.50"></text></g><g><title>item_attrs (278,133 samples, 0.18%)</title><rect x="13.6337%" y="69" width="0.1801%" height="15" fill="rgb(208,68,35)"/><text x="13.8837%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (268,173 samples, 0.17%)</title><rect x="13.6402%" y="53" width="0.1737%" height="15" fill="rgb(232,128,0)"/><text x="13.8902%" y="63.50"></text></g><g><title>codegen_fn_attrs (362,647 samples, 0.23%)</title><rect x="13.5854%" y="85" width="0.2349%" height="15" fill="rgb(207,160,47)"/><text x="13.8354%" y="95.50"></text></g><g><title>is_copy_raw (163,822 samples, 0.11%)</title><rect x="15.3384%" y="37" width="0.1061%" height="15" fill="rgb(228,23,34)"/><text x="15.5884%" y="47.50"></text></g><g><title>adt_drop_tys (385,304 samples, 0.25%)</title><rect x="15.2469%" y="53" width="0.2495%" height="15" fill="rgb(218,30,26)"/><text x="15.4969%" y="63.50"></text></g><g><title>needs_drop_raw (1,201,554 samples, 0.78%)</title><rect x="15.1476%" y="69" width="0.7781%" height="15" fill="rgb(220,122,19)"/><text x="15.3976%" y="79.50"></text></g><g><title>is_copy_raw (662,907 samples, 0.43%)</title><rect x="15.4964%" y="53" width="0.4293%" height="15" fill="rgb(250,228,42)"/><text x="15.7464%" y="63.50"></text></g><g><title>evaluate_obligation (499,726 samples, 0.32%)</title><rect x="15.6021%" y="37" width="0.3236%" height="15" fill="rgb(240,193,28)"/><text x="15.8521%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (964,209 samples, 0.62%)</title><rect x="16.1817%" y="53" width="0.6244%" height="15" fill="rgb(216,20,37)"/><text x="16.4317%" y="63.50"></text></g><g><title>resolve_instance (1,566,454 samples, 1.01%)</title><rect x="15.9257%" y="69" width="1.0144%" height="15" fill="rgb(206,188,39)"/><text x="16.1757%" y="79.50"></text></g><g><title>thir_body (651,465 samples, 0.42%)</title><rect x="16.9626%" y="69" width="0.4219%" height="15" fill="rgb(217,207,13)"/><text x="17.2126%" y="79.50"></text></g><g><title>mir_const (7,669,339 samples, 4.97%)</title><rect x="12.4447%" y="117" width="4.9667%" height="15" fill="rgb(231,73,38)"/><text x="12.6947%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (6,346,129 samples, 4.11%)</title><rect x="13.3017%" y="101" width="4.1098%" height="15" fill="rgb(225,20,46)"/><text x="13.5517%" y="111.50">unsa..</text></g><g><title>mir_built (5,545,417 samples, 3.59%)</title><rect x="13.8202%" y="85" width="3.5912%" height="15" fill="rgb(210,31,41)"/><text x="14.0702%" y="95.50">mir_..</text></g><g><title>mir_promoted (8,395,428 samples, 5.44%)</title><rect x="12.0088%" y="133" width="5.4369%" height="15" fill="rgb(221,200,47)"/><text x="12.2588%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (206,403 samples, 0.13%)</title><rect x="17.4458%" y="133" width="0.1337%" height="15" fill="rgb(226,26,5)"/><text x="17.6958%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (515,716 samples, 0.33%)</title><rect x="17.5794%" y="133" width="0.3340%" height="15" fill="rgb(249,33,26)"/><text x="17.8294%" y="143.50"></text></g><g><title>normalize_projection_ty (289,191 samples, 0.19%)</title><rect x="17.7261%" y="117" width="0.1873%" height="15" fill="rgb(235,183,28)"/><text x="17.9761%" y="127.50"></text></g><g><title>type_op_normalize_predicate (498,394 samples, 0.32%)</title><rect x="17.9134%" y="133" width="0.3228%" height="15" fill="rgb(221,5,38)"/><text x="18.1634%" y="143.50"></text></g><g><title>normalize_projection_ty (236,252 samples, 0.15%)</title><rect x="18.0832%" y="117" width="0.1530%" height="15" fill="rgb(247,18,42)"/><text x="18.3332%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,963,328 samples, 2.57%)</title><rect x="18.2490%" y="133" width="2.5667%" height="15" fill="rgb(241,131,45)"/><text x="18.4990%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (24,415,685 samples, 15.81%)</title><rect x="5.0056%" y="165" width="15.8118%" height="15" fill="rgb(249,31,29)"/><text x="5.2556%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,273,103 samples, 15.72%)</title><rect x="5.0980%" y="149" width="15.7194%" height="15" fill="rgb(225,111,53)"/><text x="5.3480%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (293,803 samples, 0.19%)</title><rect x="20.8382%" y="165" width="0.1903%" height="15" fill="rgb(238,160,17)"/><text x="21.0882%" y="175.50"></text></g><g><title>item_attrs (192,954 samples, 0.12%)</title><rect x="21.6105%" y="85" width="0.1250%" height="15" fill="rgb(214,148,48)"/><text x="21.8605%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (178,693 samples, 0.12%)</title><rect x="21.6197%" y="69" width="0.1157%" height="15" fill="rgb(232,36,49)"/><text x="21.8697%" y="79.50"></text></g><g><title>codegen_fn_attrs (314,185 samples, 0.20%)</title><rect x="21.5791%" y="101" width="0.2035%" height="15" fill="rgb(209,103,24)"/><text x="21.8291%" y="111.50"></text></g><g><title>should_inherit_track_caller (554,096 samples, 0.36%)</title><rect x="21.4347%" y="117" width="0.3588%" height="15" fill="rgb(229,88,8)"/><text x="21.6847%" y="127.50"></text></g><g><title>codegen_fn_attrs (867,600 samples, 0.56%)</title><rect x="21.2552%" y="133" width="0.5619%" height="15" fill="rgb(213,181,19)"/><text x="21.5052%" y="143.50"></text></g><g><title>check_mod_attrs (1,198,383 samples, 0.78%)</title><rect x="21.0413%" y="149" width="0.7761%" height="15" fill="rgb(254,191,54)"/><text x="21.2913%" y="159.50"></text></g><g><title>check_mod_const_bodies (221,733 samples, 0.14%)</title><rect x="21.8174%" y="149" width="0.1436%" height="15" fill="rgb(241,83,37)"/><text x="22.0674%" y="159.50"></text></g><g><title>lookup_deprecation_entry (228,214 samples, 0.15%)</title><rect x="22.2581%" y="133" width="0.1478%" height="15" fill="rgb(233,36,39)"/><text x="22.5081%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (700,707 samples, 0.45%)</title><rect x="22.0360%" y="149" width="0.4538%" height="15" fill="rgb(226,3,54)"/><text x="22.2860%" y="159.50"></text></g><g><title>misc_checking_1 (2,349,296 samples, 1.52%)</title><rect x="21.0288%" y="165" width="1.5214%" height="15" fill="rgb(245,192,40)"/><text x="21.2788%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (423,915 samples, 0.27%)</title><rect x="22.5512%" y="149" width="0.2745%" height="15" fill="rgb(238,167,29)"/><text x="22.8012%" y="159.50"></text></g><g><title>check_mod_liveness (367,164 samples, 0.24%)</title><rect x="22.5879%" y="133" width="0.2378%" height="15" fill="rgb(232,182,51)"/><text x="22.8379%" y="143.50"></text></g><g><title>misc_checking_2 (783,029 samples, 0.51%)</title><rect x="22.5502%" y="165" width="0.5071%" height="15" fill="rgb(231,60,39)"/><text x="22.8002%" y="175.50"></text></g><g><title>match_checking (357,694 samples, 0.23%)</title><rect x="22.8257%" y="149" width="0.2316%" height="15" fill="rgb(208,69,12)"/><text x="23.0757%" y="159.50"></text></g><g><title>check_match (324,964 samples, 0.21%)</title><rect x="22.8469%" y="133" width="0.2104%" height="15" fill="rgb(235,93,37)"/><text x="23.0969%" y="143.50"></text></g><g><title>check_private_in_public (187,902 samples, 0.12%)</title><rect x="23.0641%" y="149" width="0.1217%" height="15" fill="rgb(213,116,39)"/><text x="23.3141%" y="159.50"></text></g><g><title>death_checking (249,323 samples, 0.16%)</title><rect x="23.1858%" y="149" width="0.1615%" height="15" fill="rgb(222,207,29)"/><text x="23.4358%" y="159.50"></text></g><g><title>crate_lints (1,802,761 samples, 1.17%)</title><rect x="23.3482%" y="133" width="1.1675%" height="15" fill="rgb(206,96,30)"/><text x="23.5982%" y="143.50"></text></g><g><title>type_of (1,065,533 samples, 0.69%)</title><rect x="23.8256%" y="117" width="0.6900%" height="15" fill="rgb(218,138,4)"/><text x="24.0756%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (834,172 samples, 0.54%)</title><rect x="23.9755%" y="101" width="0.5402%" height="15" fill="rgb(250,191,14)"/><text x="24.2255%" y="111.50"></text></g><g><title>lint_checking (2,013,653 samples, 1.30%)</title><rect x="23.3473%" y="149" width="1.3041%" height="15" fill="rgb(239,60,40)"/><text x="23.5973%" y="159.50"></text></g><g><title>module_lints (209,432 samples, 0.14%)</title><rect x="24.5157%" y="133" width="0.1356%" height="15" fill="rgb(206,27,48)"/><text x="24.7657%" y="143.50"></text></g><g><title>lint_mod (206,622 samples, 0.13%)</title><rect x="24.5175%" y="117" width="0.1338%" height="15" fill="rgb(225,35,8)"/><text x="24.7675%" y="127.50"></text></g><g><title>privacy_access_levels (259,933 samples, 0.17%)</title><rect x="24.6513%" y="149" width="0.1683%" height="15" fill="rgb(250,213,24)"/><text x="24.9013%" y="159.50"></text></g><g><title>privacy_checking_modules (760,019 samples, 0.49%)</title><rect x="24.8197%" y="149" width="0.4922%" height="15" fill="rgb(247,123,22)"/><text x="25.0697%" y="159.50"></text></g><g><title>check_mod_privacy (758,189 samples, 0.49%)</title><rect x="24.8208%" y="133" width="0.4910%" height="15" fill="rgb(231,138,38)"/><text x="25.0708%" y="143.50"></text></g><g><title>misc_checking_3 (3,495,090 samples, 2.26%)</title><rect x="23.0573%" y="165" width="2.2634%" height="15" fill="rgb(231,145,46)"/><text x="23.3073%" y="175.50">m..</text></g><g><title>generics_of (207,251 samples, 0.13%)</title><rect x="30.1368%" y="101" width="0.1342%" height="15" fill="rgb(251,118,11)"/><text x="30.3868%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (156,831 samples, 0.10%)</title><rect x="30.1695%" y="85" width="0.1016%" height="15" fill="rgb(217,147,25)"/><text x="30.4195%" y="95.50"></text></g><g><title>impl_parent (3,279,981 samples, 2.12%)</title><rect x="30.2710%" y="101" width="2.1241%" height="15" fill="rgb(247,81,37)"/><text x="30.5210%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,921,329 samples, 1.24%)</title><rect x="31.1509%" y="85" width="1.2443%" height="15" fill="rgb(209,12,38)"/><text x="31.4009%" y="95.50"></text></g><g><title>impl_trait_ref (8,559,176 samples, 5.54%)</title><rect x="32.3952%" y="101" width="5.5430%" height="15" fill="rgb(227,1,9)"/><text x="32.6452%" y="111.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,048,865 samples, 4.56%)</title><rect x="33.3733%" y="85" width="4.5649%" height="15" fill="rgb(248,47,43)"/><text x="33.6233%" y="95.50">metad..</text></g><g><title>item_attrs (1,081,890 samples, 0.70%)</title><rect x="37.9382%" y="101" width="0.7006%" height="15" fill="rgb(221,10,30)"/><text x="38.1882%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,029,010 samples, 0.67%)</title><rect x="37.9724%" y="85" width="0.6664%" height="15" fill="rgb(210,229,1)"/><text x="38.2224%" y="95.50"></text></g><g><title>explicit_predicates_of (287,265 samples, 0.19%)</title><rect x="38.8793%" y="69" width="0.1860%" height="15" fill="rgb(222,148,37)"/><text x="39.1293%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (239,084 samples, 0.15%)</title><rect x="38.9105%" y="53" width="0.1548%" height="15" fill="rgb(234,67,33)"/><text x="39.1605%" y="63.50"></text></g><g><title>predicates_of (771,971 samples, 0.50%)</title><rect x="38.6388%" y="101" width="0.4999%" height="15" fill="rgb(247,98,35)"/><text x="38.8888%" y="111.50"></text></g><g><title>predicates_defined_on (527,718 samples, 0.34%)</title><rect x="38.7970%" y="85" width="0.3418%" height="15" fill="rgb(247,138,52)"/><text x="39.0470%" y="95.50"></text></g><g><title>trait_impls_of (1,162,153 samples, 0.75%)</title><rect x="39.1398%" y="101" width="0.7526%" height="15" fill="rgb(213,79,30)"/><text x="39.3898%" y="111.50"></text></g><g><title>implementations_of_trait (325,014 samples, 0.21%)</title><rect x="39.6819%" y="85" width="0.2105%" height="15" fill="rgb(246,177,23)"/><text x="39.9319%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (253,221 samples, 0.16%)</title><rect x="39.7284%" y="69" width="0.1640%" height="15" fill="rgb(230,62,27)"/><text x="39.9784%" y="79.50"></text></g><g><title>coherent_trait (22,553,444 samples, 14.61%)</title><rect x="25.3872%" y="133" width="14.6058%" height="15" fill="rgb(216,154,8)"/><text x="25.6372%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (22,519,474 samples, 14.58%)</title><rect x="25.4092%" y="117" width="14.5838%" height="15" fill="rgb(244,35,45)"/><text x="25.6592%" y="127.50">specialization_graph_of</text></g><g><title>type_of (155,280 samples, 0.10%)</title><rect x="39.8924%" y="101" width="0.1006%" height="15" fill="rgb(251,115,12)"/><text x="40.1424%" y="111.50"></text></g><g><title>coherence_checking (22,706,456 samples, 14.70%)</title><rect x="25.3641%" y="149" width="14.7049%" height="15" fill="rgb(240,54,50)"/><text x="25.6141%" y="159.50">coherence_checking</text></g><g><title>associated_items (179,882 samples, 0.12%)</title><rect x="49.4041%" y="101" width="0.1165%" height="15" fill="rgb(233,84,52)"/><text x="49.6541%" y="111.50"></text></g><g><title>adt_dtorck_constraint (166,522 samples, 0.11%)</title><rect x="49.8671%" y="53" width="0.1078%" height="15" fill="rgb(207,117,47)"/><text x="50.1171%" y="63.50"></text></g><g><title>adt_dtorck_constraint (208,383 samples, 0.13%)</title><rect x="49.8487%" y="69" width="0.1350%" height="15" fill="rgb(249,43,39)"/><text x="50.0987%" y="79.50"></text></g><g><title>adt_dtorck_constraint (317,303 samples, 0.21%)</title><rect x="49.7872%" y="85" width="0.2055%" height="15" fill="rgb(209,38,44)"/><text x="50.0372%" y="95.50"></text></g><g><title>dropck_outlives (691,799 samples, 0.45%)</title><rect x="49.5595%" y="101" width="0.4480%" height="15" fill="rgb(236,212,23)"/><text x="49.8095%" y="111.50"></text></g><g><title>evaluate_obligation (1,486,191 samples, 0.96%)</title><rect x="50.0076%" y="101" width="0.9625%" height="15" fill="rgb(242,79,21)"/><text x="50.2576%" y="111.50"></text></g><g><title>method_autoderef_steps (683,239 samples, 0.44%)</title><rect x="51.1676%" y="101" width="0.4425%" height="15" fill="rgb(211,96,35)"/><text x="51.4176%" y="111.50"></text></g><g><title>evaluate_obligation (335,663 samples, 0.22%)</title><rect x="51.3927%" y="85" width="0.2174%" height="15" fill="rgb(253,215,40)"/><text x="51.6427%" y="95.50"></text></g><g><title>predicates_of (200,171 samples, 0.13%)</title><rect x="51.6414%" y="101" width="0.1296%" height="15" fill="rgb(211,81,21)"/><text x="51.8914%" y="111.50"></text></g><g><title>evaluate_obligation (341,026 samples, 0.22%)</title><rect x="54.2751%" y="85" width="0.2209%" height="15" fill="rgb(208,190,38)"/><text x="54.5251%" y="95.50"></text></g><g><title>is_copy_raw (277,843 samples, 0.18%)</title><rect x="54.5758%" y="85" width="0.1799%" height="15" fill="rgb(235,213,38)"/><text x="54.8258%" y="95.50"></text></g><g><title>typeck (4,783,793 samples, 3.10%)</title><rect x="51.8226%" y="101" width="3.0980%" height="15" fill="rgb(237,122,38)"/><text x="52.0726%" y="111.50">typ..</text></g><g><title>item_bodies_checking (22,874,398 samples, 14.81%)</title><rect x="40.1323%" y="149" width="14.8136%" height="15" fill="rgb(244,218,35)"/><text x="40.3823%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,871,178 samples, 14.81%)</title><rect x="40.1344%" y="133" width="14.8115%" height="15" fill="rgb(240,68,47)"/><text x="40.3844%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,779,257 samples, 14.75%)</title><rect x="40.1939%" y="117" width="14.7520%" height="15" fill="rgb(210,16,53)"/><text x="40.4439%" y="127.50">typeck</text></g><g><title>adt_destructor (310,444 samples, 0.20%)</title><rect x="56.6685%" y="117" width="0.2010%" height="15" fill="rgb(235,124,12)"/><text x="56.9185%" y="127.50"></text></g><g><title>coherent_trait (305,934 samples, 0.20%)</title><rect x="56.6714%" y="101" width="0.1981%" height="15" fill="rgb(224,169,11)"/><text x="56.9214%" y="111.50"></text></g><g><title>specialization_graph_of (304,324 samples, 0.20%)</title><rect x="56.6724%" y="85" width="0.1971%" height="15" fill="rgb(250,166,2)"/><text x="56.9224%" y="95.50"></text></g><g><title>item_types_checking (3,297,667 samples, 2.14%)</title><rect x="54.9459%" y="149" width="2.1356%" height="15" fill="rgb(242,216,29)"/><text x="55.1959%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,295,177 samples, 2.13%)</title><rect x="54.9475%" y="133" width="2.1340%" height="15" fill="rgb(230,116,27)"/><text x="55.1975%" y="143.50">c..</text></g><g><title>fn_sig (416,233 samples, 0.27%)</title><rect x="57.4495%" y="117" width="0.2696%" height="15" fill="rgb(228,99,48)"/><text x="57.6995%" y="127.50"></text></g><g><title>is_late_bound_map (766,559 samples, 0.50%)</title><rect x="57.9158%" y="101" width="0.4964%" height="15" fill="rgb(253,11,6)"/><text x="58.1658%" y="111.50"></text></g><g><title>resolve_lifetimes (714,838 samples, 0.46%)</title><rect x="57.9493%" y="85" width="0.4629%" height="15" fill="rgb(247,143,39)"/><text x="58.1993%" y="95.50"></text></g><g><title>generics_of (1,183,445 samples, 0.77%)</title><rect x="57.7191%" y="117" width="0.7664%" height="15" fill="rgb(236,97,10)"/><text x="57.9691%" y="127.50"></text></g><g><title>impl_trait_ref (163,533 samples, 0.11%)</title><rect x="58.4855%" y="117" width="0.1059%" height="15" fill="rgb(233,208,19)"/><text x="58.7355%" y="127.50"></text></g><g><title>late_bound_vars_map (447,355 samples, 0.29%)</title><rect x="59.1921%" y="69" width="0.2897%" height="15" fill="rgb(216,164,2)"/><text x="59.4421%" y="79.50"></text></g><g><title>resolve_lifetimes (423,674 samples, 0.27%)</title><rect x="59.2074%" y="53" width="0.2744%" height="15" fill="rgb(220,129,5)"/><text x="59.4574%" y="63.50"></text></g><g><title>explicit_predicates_of (1,112,280 samples, 0.72%)</title><rect x="58.7801%" y="85" width="0.7203%" height="15" fill="rgb(242,17,10)"/><text x="59.0301%" y="95.50"></text></g><g><title>predicates_of (2,025,942 samples, 1.31%)</title><rect x="58.5914%" y="117" width="1.3120%" height="15" fill="rgb(242,107,0)"/><text x="58.8414%" y="127.50"></text></g><g><title>predicates_defined_on (1,913,658 samples, 1.24%)</title><rect x="58.6641%" y="101" width="1.2393%" height="15" fill="rgb(251,28,31)"/><text x="58.9141%" y="111.50"></text></g><g><title>inferred_outlives_of (622,167 samples, 0.40%)</title><rect x="59.5005%" y="85" width="0.4029%" height="15" fill="rgb(233,223,10)"/><text x="59.7505%" y="95.50"></text></g><g><title>inferred_outlives_crate (576,117 samples, 0.37%)</title><rect x="59.5303%" y="69" width="0.3731%" height="15" fill="rgb(215,21,27)"/><text x="59.7803%" y="79.50"></text></g><g><title>type_of (298,963 samples, 0.19%)</title><rect x="59.7098%" y="53" width="0.1936%" height="15" fill="rgb(232,23,21)"/><text x="59.9598%" y="63.50"></text></g><g><title>type_collecting (4,744,673 samples, 3.07%)</title><rect x="57.0827%" y="149" width="3.0727%" height="15" fill="rgb(244,5,23)"/><text x="57.3327%" y="159.50">typ..</text></g><g><title>collect_mod_item_types (4,734,943 samples, 3.07%)</title><rect x="57.0890%" y="133" width="3.0664%" height="15" fill="rgb(226,81,46)"/><text x="57.3390%" y="143.50">col..</text></g><g><title>type_of (389,145 samples, 0.25%)</title><rect x="59.9034%" y="117" width="0.2520%" height="15" fill="rgb(247,70,30)"/><text x="60.1534%" y="127.50"></text></g><g><title>evaluate_obligation (731,958 samples, 0.47%)</title><rect x="62.5517%" y="117" width="0.4740%" height="15" fill="rgb(212,68,19)"/><text x="62.8017%" y="127.50"></text></g><g><title>implied_outlives_bounds (441,484 samples, 0.29%)</title><rect x="63.0282%" y="117" width="0.2859%" height="15" fill="rgb(240,187,13)"/><text x="63.2782%" y="127.50"></text></g><g><title>param_env (628,604 samples, 0.41%)</title><rect x="63.3141%" y="117" width="0.4071%" height="15" fill="rgb(223,113,26)"/><text x="63.5641%" y="127.50"></text></g><g><title>region_scope_tree (277,631 samples, 0.18%)</title><rect x="63.7403%" y="117" width="0.1798%" height="15" fill="rgb(206,192,2)"/><text x="63.9903%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,605,592 samples, 3.63%)</title><rect x="60.3082%" y="133" width="3.6302%" height="15" fill="rgb(241,108,4)"/><text x="60.5582%" y="143.50">chec..</text></g><g><title>implied_outlives_bounds (203,941 samples, 0.13%)</title><rect x="65.8406%" y="117" width="0.1321%" height="15" fill="rgb(247,173,49)"/><text x="66.0906%" y="127.50"></text></g><g><title>param_env (415,944 samples, 0.27%)</title><rect x="65.9726%" y="117" width="0.2694%" height="15" fill="rgb(224,114,35)"/><text x="66.2226%" y="127.50"></text></g><g><title>analysis (95,423,404 samples, 61.80%)</title><rect x="4.6976%" y="181" width="61.7968%" height="15" fill="rgb(245,159,27)"/><text x="4.9476%" y="191.50">analysis</text></g><g><title>type_check_crate (63,578,105 samples, 41.17%)</title><rect x="25.3208%" y="165" width="41.1736%" height="15" fill="rgb(245,172,44)"/><text x="25.5708%" y="175.50">type_check_crate</text></g><g><title>wf_checking (9,783,090 samples, 6.34%)</title><rect x="60.1588%" y="149" width="6.3356%" height="15" fill="rgb(236,23,11)"/><text x="60.4088%" y="159.50">wf_check..</text></g><g><title>check_item_well_formed (3,946,736 samples, 2.56%)</title><rect x="63.9384%" y="133" width="2.5559%" height="15" fill="rgb(205,117,38)"/><text x="64.1884%" y="143.50">ch..</text></g><g><title>codegen_module (214,262 samples, 0.14%)</title><rect x="66.7456%" y="165" width="0.1388%" height="15" fill="rgb(237,72,25)"/><text x="66.9956%" y="175.50"></text></g><g><title>codegen_crate (732,488 samples, 0.47%)</title><rect x="66.5007%" y="181" width="0.4744%" height="15" fill="rgb(244,70,9)"/><text x="66.7507%" y="191.50"></text></g><g><title>codegen_module_optimize (915,090 samples, 0.59%)</title><rect x="66.9750%" y="181" width="0.5926%" height="15" fill="rgb(217,125,39)"/><text x="67.2250%" y="191.50"></text></g><g><title>LLVM_module_optimize (451,655 samples, 0.29%)</title><rect x="67.2752%" y="165" width="0.2925%" height="15" fill="rgb(235,36,10)"/><text x="67.5252%" y="175.50"></text></g><g><title>LLVM_lto_optimize (237,393 samples, 0.15%)</title><rect x="67.8146%" y="165" width="0.1537%" height="15" fill="rgb(251,123,47)"/><text x="68.0646%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,333,036 samples, 1.51%)</title><rect x="67.9683%" y="165" width="1.5109%" height="15" fill="rgb(221,13,13)"/><text x="68.2183%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,296,206 samples, 1.49%)</title><rect x="67.9922%" y="149" width="1.4870%" height="15" fill="rgb(238,131,9)"/><text x="68.2422%" y="159.50"></text></g><g><title>codegen_module_perform_lto (2,984,853 samples, 1.93%)</title><rect x="67.5677%" y="181" width="1.9330%" height="15" fill="rgb(211,50,8)"/><text x="67.8177%" y="191.50">c..</text></g><g><title>AST_validation (182,042 samples, 0.12%)</title><rect x="69.6239%" y="165" width="0.1179%" height="15" fill="rgb(245,182,24)"/><text x="69.8739%" y="175.50"></text></g><g><title>macro_expand_crate (12,083,435 samples, 7.83%)</title><rect x="69.8558%" y="165" width="7.8253%" height="15" fill="rgb(242,14,37)"/><text x="70.1058%" y="175.50">macro_expan..</text></g><g><title>expand_crate (12,062,065 samples, 7.81%)</title><rect x="69.8696%" y="149" width="7.8115%" height="15" fill="rgb(246,228,12)"/><text x="70.1196%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,246,506 samples, 1.45%)</title><rect x="76.2263%" y="133" width="1.4549%" height="15" fill="rgb(213,55,15)"/><text x="76.4763%" y="143.50"></text></g><g><title>metadata_register_crate (808,161 samples, 0.52%)</title><rect x="77.1577%" y="117" width="0.5234%" height="15" fill="rgb(209,9,3)"/><text x="77.4077%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (417,695 samples, 0.27%)</title><rect x="77.6839%" y="165" width="0.2705%" height="15" fill="rgb(230,59,30)"/><text x="77.9339%" y="175.50"></text></g><g><title>late_resolve_crate (2,169,785 samples, 1.41%)</title><rect x="78.0232%" y="149" width="1.4052%" height="15" fill="rgb(209,121,21)"/><text x="78.2732%" y="159.50"></text></g><g><title>configure_and_expand (15,487,153 samples, 10.03%)</title><rect x="69.5007%" y="181" width="10.0296%" height="15" fill="rgb(220,109,13)"/><text x="69.7507%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (2,433,377 samples, 1.58%)</title><rect x="77.9544%" y="165" width="1.5759%" height="15" fill="rgb(232,18,1)"/><text x="78.2044%" y="175.50"></text></g><g><title>drop_ast (365,524 samples, 0.24%)</title><rect x="79.5303%" y="181" width="0.2367%" height="15" fill="rgb(215,41,42)"/><text x="79.7803%" y="191.50"></text></g><g><title>early_lint_checks (499,465 samples, 0.32%)</title><rect x="79.7767%" y="181" width="0.3235%" height="15" fill="rgb(224,123,36)"/><text x="80.0267%" y="191.50"></text></g><g><title>free_global_ctxt (3,835,773 samples, 2.48%)</title><rect x="80.1002%" y="181" width="2.4841%" height="15" fill="rgb(240,125,3)"/><text x="80.3502%" y="191.50">fr..</text></g><g><title>layout_of (165,502 samples, 0.11%)</title><rect x="85.9783%" y="101" width="0.1072%" height="15" fill="rgb(205,98,50)"/><text x="86.2283%" y="111.50"></text></g><g><title>layout_of (259,716 samples, 0.17%)</title><rect x="85.9247%" y="117" width="0.1682%" height="15" fill="rgb(205,185,37)"/><text x="86.1747%" y="127.50"></text></g><g><title>layout_of (458,907 samples, 0.30%)</title><rect x="85.8014%" y="133" width="0.2972%" height="15" fill="rgb(238,207,15)"/><text x="86.0514%" y="143.50"></text></g><g><title>layout_of (938,855 samples, 0.61%)</title><rect x="85.5148%" y="149" width="0.6080%" height="15" fill="rgb(213,199,42)"/><text x="85.7648%" y="159.50"></text></g><g><title>is_copy_raw (257,572 samples, 0.17%)</title><rect x="87.7581%" y="117" width="0.1668%" height="15" fill="rgb(235,201,11)"/><text x="88.0081%" y="127.50"></text></g><g><title>evaluate_obligation (195,742 samples, 0.13%)</title><rect x="87.7981%" y="101" width="0.1268%" height="15" fill="rgb(207,46,11)"/><text x="88.0481%" y="111.50"></text></g><g><title>needs_drop_raw (293,892 samples, 0.19%)</title><rect x="87.7367%" y="133" width="0.1903%" height="15" fill="rgb(241,35,35)"/><text x="87.9867%" y="143.50"></text></g><g><title>optimized_mir (6,425,714 samples, 4.16%)</title><rect x="83.8264%" y="165" width="4.1613%" height="15" fill="rgb(243,32,47)"/><text x="84.0764%" y="175.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,879,776 samples, 1.86%)</title><rect x="86.1228%" y="149" width="1.8650%" height="15" fill="rgb(247,202,23)"/><text x="86.3728%" y="159.50">m..</text></g><g><title>generate_crate_metadata (8,414,455 samples, 5.45%)</title><rect x="82.5843%" y="181" width="5.4493%" height="15" fill="rgb(219,102,11)"/><text x="82.8343%" y="191.50">generat..</text></g><g><title>hir_lowering (4,761,383 samples, 3.08%)</title><rect x="88.0335%" y="181" width="3.0835%" height="15" fill="rgb(243,110,44)"/><text x="88.2835%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (2,301,876 samples, 1.49%)</title><rect x="91.1257%" y="165" width="1.4907%" height="15" fill="rgb(222,74,54)"/><text x="91.3757%" y="175.50"></text></g><g><title>link_crate (872,100 samples, 0.56%)</title><rect x="92.6164%" y="165" width="0.5648%" height="15" fill="rgb(216,99,12)"/><text x="92.8664%" y="175.50"></text></g><g><title>link_binary (860,510 samples, 0.56%)</title><rect x="92.6239%" y="149" width="0.5573%" height="15" fill="rgb(226,22,26)"/><text x="92.8739%" y="159.50"></text></g><g><title>link_rlib (569,526 samples, 0.37%)</title><rect x="92.8123%" y="133" width="0.3688%" height="15" fill="rgb(217,163,10)"/><text x="93.0623%" y="143.50"></text></g><g><title>link (3,195,206 samples, 2.07%)</title><rect x="91.1170%" y="181" width="2.0692%" height="15" fill="rgb(213,25,53)"/><text x="91.3670%" y="191.50">l..</text></g><g><title>parse_crate (8,823,340 samples, 5.71%)</title><rect x="93.1863%" y="181" width="5.7141%" height="15" fill="rgb(252,105,26)"/><text x="93.4363%" y="191.50">parse_c..</text></g><g><title>prepare_outputs (315,094 samples, 0.20%)</title><rect x="98.9048%" y="181" width="0.2041%" height="15" fill="rgb(220,39,43)"/><text x="99.1548%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (859,600 samples, 0.56%)</title><rect x="99.1088%" y="181" width="0.5567%" height="15" fill="rgb(229,68,48)"/><text x="99.3588%" y="191.50"></text></g><g><title>all (154,414,725 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (154,414,725 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (391,324 samples, 0.25%)</title><rect x="99.7466%" y="181" width="0.2534%" height="15" fill="rgb(229,81,49)"/><text x="99.9966%" y="191.50"></text></g></svg></svg>