<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (13,369,877 samples, 19.74%)</title><rect x="0.6699%" y="197" width="19.7380%" height="15" fill="rgb(227,0,7)"/><text x="0.9199%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (145,852 samples, 0.22%)</title><rect x="20.1927%" y="181" width="0.2153%" height="15" fill="rgb(217,0,24)"/><text x="20.4427%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (128,731 samples, 0.19%)</title><rect x="20.2179%" y="165" width="0.1900%" height="15" fill="rgb(221,193,54)"/><text x="20.4679%" y="175.50"></text></g><g><title>is_sized_raw (76,991 samples, 0.11%)</title><rect x="22.4536%" y="149" width="0.1137%" height="15" fill="rgb(248,212,6)"/><text x="22.7036%" y="159.50"></text></g><g><title>evaluate_obligation (73,011 samples, 0.11%)</title><rect x="22.4595%" y="133" width="0.1078%" height="15" fill="rgb(208,68,35)"/><text x="22.7095%" y="143.50"></text></g><g><title>is_copy_raw (247,033 samples, 0.36%)</title><rect x="23.6314%" y="85" width="0.3647%" height="15" fill="rgb(232,128,0)"/><text x="23.8814%" y="95.50"></text></g><g><title>evaluate_obligation (241,813 samples, 0.36%)</title><rect x="23.6391%" y="69" width="0.3570%" height="15" fill="rgb(207,160,47)"/><text x="23.8891%" y="79.50"></text></g><g><title>adt_drop_tys (114,672 samples, 0.17%)</title><rect x="24.0159%" y="69" width="0.1693%" height="15" fill="rgb(228,23,34)"/><text x="24.2659%" y="79.50"></text></g><g><title>needs_drop_raw (187,992 samples, 0.28%)</title><rect x="23.9961%" y="85" width="0.2775%" height="15" fill="rgb(218,30,26)"/><text x="24.2461%" y="95.50"></text></g><g><title>resolve_instance (150,052 samples, 0.22%)</title><rect x="24.2736%" y="85" width="0.2215%" height="15" fill="rgb(220,122,19)"/><text x="24.5236%" y="95.50"></text></g><g><title>thir_body (91,321 samples, 0.13%)</title><rect x="24.5002%" y="85" width="0.1348%" height="15" fill="rgb(250,228,42)"/><text x="24.7502%" y="95.50"></text></g><g><title>mir_const (1,262,665 samples, 1.86%)</title><rect x="22.7738%" y="133" width="1.8641%" height="15" fill="rgb(240,193,28)"/><text x="23.0238%" y="143.50">m..</text></g><g><title>unsafety_check_result (1,061,253 samples, 1.57%)</title><rect x="23.0712%" y="117" width="1.5667%" height="15" fill="rgb(216,20,37)"/><text x="23.3212%" y="127.50"></text></g><g><title>mir_built (942,411 samples, 1.39%)</title><rect x="23.2466%" y="101" width="1.3913%" height="15" fill="rgb(206,188,39)"/><text x="23.4966%" y="111.50"></text></g><g><title>mir_promoted (1,418,996 samples, 2.09%)</title><rect x="22.5672%" y="149" width="2.0949%" height="15" fill="rgb(217,207,13)"/><text x="22.8172%" y="159.50">m..</text></g><g><title>type_op_normalize_fn_sig (68,141 samples, 0.10%)</title><rect x="24.7274%" y="149" width="0.1006%" height="15" fill="rgb(231,73,38)"/><text x="24.9774%" y="159.50"></text></g><g><title>type_op_prove_predicate (207,892 samples, 0.31%)</title><rect x="24.8690%" y="149" width="0.3069%" height="15" fill="rgb(225,20,46)"/><text x="25.1190%" y="159.50"></text></g><g><title>MIR_borrow_checking (3,132,354 samples, 4.62%)</title><rect x="20.5616%" y="181" width="4.6243%" height="15" fill="rgb(210,31,41)"/><text x="20.8116%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (3,121,474 samples, 4.61%)</title><rect x="20.5777%" y="165" width="4.6083%" height="15" fill="rgb(221,200,47)"/><text x="20.8277%" y="175.50">mir_b..</text></g><g><title>hir_module_items (77,991 samples, 0.12%)</title><rect x="25.1918%" y="181" width="0.1151%" height="15" fill="rgb(226,26,5)"/><text x="25.4418%" y="191.50"></text></g><g><title>codegen_fn_attrs (125,462 samples, 0.19%)</title><rect x="25.5341%" y="117" width="0.1852%" height="15" fill="rgb(249,33,26)"/><text x="25.7841%" y="127.50"></text></g><g><title>codegen_fn_attrs (197,773 samples, 0.29%)</title><rect x="25.4297%" y="149" width="0.2920%" height="15" fill="rgb(235,183,28)"/><text x="25.6797%" y="159.50"></text></g><g><title>should_inherit_track_caller (177,753 samples, 0.26%)</title><rect x="25.4593%" y="133" width="0.2624%" height="15" fill="rgb(221,5,38)"/><text x="25.7093%" y="143.50"></text></g><g><title>check_mod_attrs (263,663 samples, 0.39%)</title><rect x="25.3327%" y="165" width="0.3892%" height="15" fill="rgb(247,18,42)"/><text x="25.5827%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (87,221 samples, 0.13%)</title><rect x="25.7868%" y="165" width="0.1288%" height="15" fill="rgb(241,131,45)"/><text x="26.0368%" y="175.50"></text></g><g><title>misc_checking_1 (444,435 samples, 0.66%)</title><rect x="25.3076%" y="181" width="0.6561%" height="15" fill="rgb(249,31,29)"/><text x="25.5576%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (68,001 samples, 0.10%)</title><rect x="25.9655%" y="165" width="0.1004%" height="15" fill="rgb(225,111,53)"/><text x="26.2155%" y="175.50"></text></g><g><title>misc_checking_2 (162,852 samples, 0.24%)</title><rect x="25.9637%" y="181" width="0.2404%" height="15" fill="rgb(238,160,17)"/><text x="26.2137%" y="191.50"></text></g><g><title>match_checking (93,611 samples, 0.14%)</title><rect x="26.0659%" y="165" width="0.1382%" height="15" fill="rgb(214,148,48)"/><text x="26.3159%" y="175.50"></text></g><g><title>check_match (89,391 samples, 0.13%)</title><rect x="26.0721%" y="149" width="0.1320%" height="15" fill="rgb(232,36,49)"/><text x="26.3221%" y="159.50"></text></g><g><title>death_checking (99,451 samples, 0.15%)</title><rect x="26.2752%" y="165" width="0.1468%" height="15" fill="rgb(209,103,24)"/><text x="26.5252%" y="175.50"></text></g><g><title>crate_lints (598,556 samples, 0.88%)</title><rect x="26.4241%" y="149" width="0.8837%" height="15" fill="rgb(229,88,8)"/><text x="26.6741%" y="159.50"></text></g><g><title>type_of (310,893 samples, 0.46%)</title><rect x="26.8488%" y="133" width="0.4590%" height="15" fill="rgb(213,181,19)"/><text x="27.0988%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (224,641 samples, 0.33%)</title><rect x="26.9761%" y="117" width="0.3316%" height="15" fill="rgb(254,191,54)"/><text x="27.2261%" y="127.50"></text></g><g><title>lint_checking (658,647 samples, 0.97%)</title><rect x="26.4220%" y="165" width="0.9724%" height="15" fill="rgb(241,83,37)"/><text x="26.6720%" y="175.50"></text></g><g><title>privacy_checking_modules (109,911 samples, 0.16%)</title><rect x="27.4691%" y="165" width="0.1623%" height="15" fill="rgb(233,36,39)"/><text x="27.7191%" y="175.50"></text></g><g><title>check_mod_privacy (108,911 samples, 0.16%)</title><rect x="27.4705%" y="149" width="0.1608%" height="15" fill="rgb(226,3,54)"/><text x="27.7205%" y="159.50"></text></g><g><title>misc_checking_3 (975,600 samples, 1.44%)</title><rect x="26.2041%" y="181" width="1.4403%" height="15" fill="rgb(245,192,40)"/><text x="26.4541%" y="191.50"></text></g><g><title>impl_parent (433,971 samples, 0.64%)</title><rect x="28.6106%" y="117" width="0.6407%" height="15" fill="rgb(238,167,29)"/><text x="28.8606%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (281,221 samples, 0.42%)</title><rect x="28.8361%" y="101" width="0.4152%" height="15" fill="rgb(232,182,51)"/><text x="29.0861%" y="111.50"></text></g><g><title>impl_trait_ref (1,072,915 samples, 1.58%)</title><rect x="29.2513%" y="117" width="1.5840%" height="15" fill="rgb(231,60,39)"/><text x="29.5013%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (923,311 samples, 1.36%)</title><rect x="29.4721%" y="101" width="1.3631%" height="15" fill="rgb(208,69,12)"/><text x="29.7221%" y="111.50"></text></g><g><title>coherent_trait (2,263,655 samples, 3.34%)</title><rect x="27.7034%" y="149" width="3.3419%" height="15" fill="rgb(235,93,37)"/><text x="27.9534%" y="159.50">coh..</text></g><g><title>specialization_graph_of (2,255,415 samples, 3.33%)</title><rect x="27.7156%" y="133" width="3.3297%" height="15" fill="rgb(213,116,39)"/><text x="27.9656%" y="143.50">spe..</text></g><g><title>trait_impls_of (141,042 samples, 0.21%)</title><rect x="30.8370%" y="117" width="0.2082%" height="15" fill="rgb(222,207,29)"/><text x="31.0870%" y="127.50"></text></g><g><title>coherence_checking (2,315,066 samples, 3.42%)</title><rect x="27.6777%" y="165" width="3.4177%" height="15" fill="rgb(206,96,30)"/><text x="27.9277%" y="175.50">coh..</text></g><g><title>associated_item (177,343 samples, 0.26%)</title><rect x="33.9220%" y="101" width="0.2618%" height="15" fill="rgb(218,138,4)"/><text x="34.1720%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (148,382 samples, 0.22%)</title><rect x="33.9648%" y="85" width="0.2191%" height="15" fill="rgb(250,191,14)"/><text x="34.2148%" y="95.50"></text></g><g><title>associated_items (227,814 samples, 0.34%)</title><rect x="33.8582%" y="117" width="0.3363%" height="15" fill="rgb(239,60,40)"/><text x="34.1082%" y="127.50"></text></g><g><title>adt_dtorck_constraint (84,420 samples, 0.12%)</title><rect x="34.3017%" y="101" width="0.1246%" height="15" fill="rgb(206,27,48)"/><text x="34.5517%" y="111.50"></text></g><g><title>dropck_outlives (217,944 samples, 0.32%)</title><rect x="34.2143%" y="117" width="0.3218%" height="15" fill="rgb(225,35,8)"/><text x="34.4643%" y="127.50"></text></g><g><title>normalize_projection_ty (74,271 samples, 0.11%)</title><rect x="34.4264%" y="101" width="0.1096%" height="15" fill="rgb(250,213,24)"/><text x="34.6764%" y="111.50"></text></g><g><title>adt_sized_constraint (74,022 samples, 0.11%)</title><rect x="34.8484%" y="101" width="0.1093%" height="15" fill="rgb(247,123,22)"/><text x="35.0984%" y="111.50"></text></g><g><title>evaluate_obligation (336,564 samples, 0.50%)</title><rect x="34.5360%" y="117" width="0.4969%" height="15" fill="rgb(231,138,38)"/><text x="34.7860%" y="127.50"></text></g><g><title>method_autoderef_steps (122,641 samples, 0.18%)</title><rect x="35.2208%" y="117" width="0.1811%" height="15" fill="rgb(231,145,46)"/><text x="35.4708%" y="127.50"></text></g><g><title>item_bodies_checking (3,023,433 samples, 4.46%)</title><rect x="31.1200%" y="165" width="4.4635%" height="15" fill="rgb(251,118,11)"/><text x="31.3700%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (3,021,553 samples, 4.46%)</title><rect x="31.1227%" y="149" width="4.4607%" height="15" fill="rgb(217,147,25)"/><text x="31.3727%" y="159.50">typec..</text></g><g><title>typeck (3,012,743 samples, 4.45%)</title><rect x="31.1358%" y="133" width="4.4477%" height="15" fill="rgb(247,81,37)"/><text x="31.3858%" y="143.50">typeck</text></g><g><title>evaluate_obligation (491,886 samples, 0.73%)</title><rect x="36.0925%" y="133" width="0.7262%" height="15" fill="rgb(209,12,38)"/><text x="36.3425%" y="143.50"></text></g><g><title>trait_impls_of (99,630 samples, 0.15%)</title><rect x="36.6716%" y="117" width="0.1471%" height="15" fill="rgb(227,1,9)"/><text x="36.9216%" y="127.50"></text></g><g><title>item_types_checking (909,150 samples, 1.34%)</title><rect x="35.5835%" y="165" width="1.3422%" height="15" fill="rgb(248,47,43)"/><text x="35.8335%" y="175.50"></text></g><g><title>check_mod_item_types (907,440 samples, 1.34%)</title><rect x="35.5860%" y="149" width="1.3397%" height="15" fill="rgb(221,10,30)"/><text x="35.8360%" y="159.50"></text></g><g><title>fn_sig (74,210 samples, 0.11%)</title><rect x="37.0332%" y="133" width="0.1096%" height="15" fill="rgb(210,229,1)"/><text x="37.2832%" y="143.50"></text></g><g><title>named_region_map (130,412 samples, 0.19%)</title><rect x="37.1776%" y="117" width="0.1925%" height="15" fill="rgb(222,148,37)"/><text x="37.4276%" y="127.50"></text></g><g><title>resolve_lifetimes (119,392 samples, 0.18%)</title><rect x="37.1938%" y="101" width="0.1763%" height="15" fill="rgb(234,67,33)"/><text x="37.4438%" y="111.50"></text></g><g><title>generics_of (161,143 samples, 0.24%)</title><rect x="37.1428%" y="133" width="0.2379%" height="15" fill="rgb(247,98,35)"/><text x="37.3928%" y="143.50"></text></g><g><title>predicates_of (88,601 samples, 0.13%)</title><rect x="37.4071%" y="133" width="0.1308%" height="15" fill="rgb(247,138,52)"/><text x="37.6571%" y="143.50"></text></g><g><title>predicates_defined_on (78,431 samples, 0.12%)</title><rect x="37.4221%" y="117" width="0.1158%" height="15" fill="rgb(213,79,30)"/><text x="37.6721%" y="127.50"></text></g><g><title>type_collecting (537,776 samples, 0.79%)</title><rect x="36.9273%" y="165" width="0.7939%" height="15" fill="rgb(246,177,23)"/><text x="37.1773%" y="175.50"></text></g><g><title>collect_mod_item_types (526,686 samples, 0.78%)</title><rect x="36.9437%" y="149" width="0.7776%" height="15" fill="rgb(230,62,27)"/><text x="37.1937%" y="159.50"></text></g><g><title>type_of (124,151 samples, 0.18%)</title><rect x="37.5379%" y="133" width="0.1833%" height="15" fill="rgb(216,154,8)"/><text x="37.7879%" y="143.50"></text></g><g><title>evaluate_obligation (300,403 samples, 0.44%)</title><rect x="38.2612%" y="133" width="0.4435%" height="15" fill="rgb(244,35,45)"/><text x="38.5112%" y="143.50"></text></g><g><title>check_impl_item_well_formed (828,220 samples, 1.22%)</title><rect x="37.7649%" y="149" width="1.2227%" height="15" fill="rgb(251,115,12)"/><text x="38.0149%" y="159.50"></text></g><g><title>evaluate_obligation (139,101 samples, 0.21%)</title><rect x="39.3161%" y="133" width="0.2054%" height="15" fill="rgb(240,54,50)"/><text x="39.5661%" y="143.50"></text></g><g><title>param_env (120,961 samples, 0.18%)</title><rect x="39.5646%" y="133" width="0.1786%" height="15" fill="rgb(233,84,52)"/><text x="39.8146%" y="143.50"></text></g><g><title>analysis (13,152,205 samples, 19.42%)</title><rect x="20.4080%" y="197" width="19.4167%" height="15" fill="rgb(207,117,47)"/><text x="20.6580%" y="207.50">analysis</text></g><g><title>type_check_crate (8,250,501 samples, 12.18%)</title><rect x="27.6444%" y="181" width="12.1803%" height="15" fill="rgb(249,43,39)"/><text x="27.8944%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,424,146 samples, 2.10%)</title><rect x="37.7222%" y="165" width="2.1025%" height="15" fill="rgb(209,38,44)"/><text x="37.9722%" y="175.50">w..</text></g><g><title>check_item_well_formed (567,016 samples, 0.84%)</title><rect x="38.9876%" y="149" width="0.8371%" height="15" fill="rgb(236,212,23)"/><text x="39.2376%" y="159.50"></text></g><g><title>is_freeze_raw (170,531 samples, 0.25%)</title><rect x="41.9757%" y="149" width="0.2518%" height="15" fill="rgb(242,79,21)"/><text x="42.2257%" y="159.50"></text></g><g><title>evaluate_obligation (159,911 samples, 0.24%)</title><rect x="41.9914%" y="133" width="0.2361%" height="15" fill="rgb(211,96,35)"/><text x="42.2414%" y="143.50"></text></g><g><title>is_unpin_raw (94,781 samples, 0.14%)</title><rect x="42.2274%" y="149" width="0.1399%" height="15" fill="rgb(253,215,40)"/><text x="42.4774%" y="159.50"></text></g><g><title>evaluate_obligation (92,841 samples, 0.14%)</title><rect x="42.2303%" y="133" width="0.1371%" height="15" fill="rgb(211,81,21)"/><text x="42.4803%" y="143.50"></text></g><g><title>layout_of (86,260 samples, 0.13%)</title><rect x="42.3674%" y="149" width="0.1273%" height="15" fill="rgb(208,190,38)"/><text x="42.6174%" y="159.50"></text></g><g><title>fn_abi_of_instance (457,656 samples, 0.68%)</title><rect x="41.8652%" y="165" width="0.6756%" height="15" fill="rgb(235,213,38)"/><text x="42.1152%" y="175.50"></text></g><g><title>codegen_module (1,481,196 samples, 2.19%)</title><rect x="40.5414%" y="181" width="2.1867%" height="15" fill="rgb(237,122,38)"/><text x="40.7914%" y="191.50">c..</text></g><g><title>layout_of (143,232 samples, 0.21%)</title><rect x="43.0495%" y="117" width="0.2115%" height="15" fill="rgb(244,218,35)"/><text x="43.2995%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (145,152 samples, 0.21%)</title><rect x="43.2609%" y="117" width="0.2143%" height="15" fill="rgb(240,68,47)"/><text x="43.5109%" y="127.50"></text></g><g><title>eval_to_const_value_raw (149,031 samples, 0.22%)</title><rect x="43.5681%" y="101" width="0.2200%" height="15" fill="rgb(210,16,53)"/><text x="43.8181%" y="111.50"></text></g><g><title>eval_to_const_value_raw (130,621 samples, 0.19%)</title><rect x="43.5953%" y="85" width="0.1928%" height="15" fill="rgb(235,124,12)"/><text x="43.8453%" y="95.50"></text></g><g><title>eval_to_allocation_raw (124,181 samples, 0.18%)</title><rect x="43.6048%" y="69" width="0.1833%" height="15" fill="rgb(224,169,11)"/><text x="43.8548%" y="79.50"></text></g><g><title>optimized_mir (574,937 samples, 0.85%)</title><rect x="42.9433%" y="133" width="0.8488%" height="15" fill="rgb(250,166,2)"/><text x="43.1933%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (166,611 samples, 0.25%)</title><rect x="43.5461%" y="117" width="0.2460%" height="15" fill="rgb(242,216,29)"/><text x="43.7961%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (750,619 samples, 1.11%)</title><rect x="42.7764%" y="149" width="1.1081%" height="15" fill="rgb(230,116,27)"/><text x="43.0264%" y="159.50"></text></g><g><title>monomorphization_collector (769,009 samples, 1.14%)</title><rect x="42.7736%" y="165" width="1.1353%" height="15" fill="rgb(228,99,48)"/><text x="43.0236%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (82,811 samples, 0.12%)</title><rect x="43.9176%" y="149" width="0.1223%" height="15" fill="rgb(253,11,6)"/><text x="44.1676%" y="159.50"></text></g><g><title>symbol_name (77,941 samples, 0.12%)</title><rect x="43.9248%" y="133" width="0.1151%" height="15" fill="rgb(247,143,39)"/><text x="44.1748%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (918,480 samples, 1.36%)</title><rect x="42.7289%" y="181" width="1.3560%" height="15" fill="rgb(236,97,10)"/><text x="42.9789%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (119,171 samples, 0.18%)</title><rect x="43.9089%" y="165" width="0.1759%" height="15" fill="rgb(233,208,19)"/><text x="44.1589%" y="175.50"></text></g><g><title>codegen_crate (2,914,242 samples, 4.30%)</title><rect x="39.8351%" y="197" width="4.3023%" height="15" fill="rgb(216,164,2)"/><text x="40.0851%" y="207.50">codeg..</text></g><g><title>codegen_module_optimize (5,790,324 samples, 8.55%)</title><rect x="44.1374%" y="197" width="8.5483%" height="15" fill="rgb(220,129,5)"/><text x="44.3874%" y="207.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (5,052,045 samples, 7.46%)</title><rect x="45.2273%" y="181" width="7.4584%" height="15" fill="rgb(242,17,10)"/><text x="45.4773%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_lto_optimize (1,656,658 samples, 2.45%)</title><rect x="53.5270%" y="181" width="2.4457%" height="15" fill="rgb(242,107,0)"/><text x="53.7770%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen (4,829,873 samples, 7.13%)</title><rect x="55.9728%" y="181" width="7.1304%" height="15" fill="rgb(251,28,31)"/><text x="56.2228%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (4,726,002 samples, 6.98%)</title><rect x="56.1261%" y="165" width="6.9770%" height="15" fill="rgb(233,223,10)"/><text x="56.3761%" y="175.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (7,114,158 samples, 10.50%)</title><rect x="52.6857%" y="197" width="10.5027%" height="15" fill="rgb(215,21,27)"/><text x="52.9357%" y="207.50">codegen_module_..</text></g><g><title>metadata_load_macro (78,472 samples, 0.12%)</title><rect x="72.3438%" y="149" width="0.1158%" height="15" fill="rgb(232,23,21)"/><text x="72.5938%" y="159.50"></text></g><g><title>macro_expand_crate (6,440,201 samples, 9.51%)</title><rect x="63.6090%" y="181" width="9.5077%" height="15" fill="rgb(244,5,23)"/><text x="63.8590%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (6,424,821 samples, 9.49%)</title><rect x="63.6317%" y="165" width="9.4850%" height="15" fill="rgb(226,81,46)"/><text x="63.8817%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (445,075 samples, 0.66%)</title><rect x="72.4597%" y="149" width="0.6571%" height="15" fill="rgb(247,70,30)"/><text x="72.7097%" y="159.50"></text></g><g><title>metadata_register_crate (173,651 samples, 0.26%)</title><rect x="72.8604%" y="133" width="0.2564%" height="15" fill="rgb(212,68,19)"/><text x="73.1104%" y="143.50"></text></g><g><title>metadata_register_crate (71,811 samples, 0.11%)</title><rect x="73.0107%" y="117" width="0.1060%" height="15" fill="rgb(240,187,13)"/><text x="73.2607%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (96,991 samples, 0.14%)</title><rect x="73.1207%" y="181" width="0.1432%" height="15" fill="rgb(223,113,26)"/><text x="73.3707%" y="191.50"></text></g><g><title>late_resolve_crate (436,685 samples, 0.64%)</title><rect x="73.3445%" y="165" width="0.6447%" height="15" fill="rgb(206,192,2)"/><text x="73.5945%" y="175.50"></text></g><g><title>configure_and_expand (7,347,341 samples, 10.85%)</title><rect x="63.1884%" y="197" width="10.8469%" height="15" fill="rgb(241,108,4)"/><text x="63.4384%" y="207.50">configure_and_ex..</text></g><g><title>resolve_crate (522,516 samples, 0.77%)</title><rect x="73.2639%" y="181" width="0.7714%" height="15" fill="rgb(247,173,49)"/><text x="73.5139%" y="191.50"></text></g><g><title>early_lint_checks (106,021 samples, 0.16%)</title><rect x="74.1111%" y="197" width="0.1565%" height="15" fill="rgb(224,114,35)"/><text x="74.3611%" y="207.50"></text></g><g><title>free_global_ctxt (1,661,798 samples, 2.45%)</title><rect x="74.2676%" y="197" width="2.4533%" height="15" fill="rgb(245,159,27)"/><text x="74.5176%" y="207.50">fr..</text></g><g><title>is_sized_raw (137,822 samples, 0.20%)</title><rect x="77.9062%" y="149" width="0.2035%" height="15" fill="rgb(245,172,44)"/><text x="78.1562%" y="159.50"></text></g><g><title>evaluate_obligation (127,222 samples, 0.19%)</title><rect x="77.9219%" y="133" width="0.1878%" height="15" fill="rgb(236,23,11)"/><text x="78.1719%" y="143.50"></text></g><g><title>adt_sized_constraint (120,641 samples, 0.18%)</title><rect x="78.2071%" y="101" width="0.1781%" height="15" fill="rgb(205,117,38)"/><text x="78.4571%" y="111.50"></text></g><g><title>adt_def (117,601 samples, 0.17%)</title><rect x="78.2116%" y="85" width="0.1736%" height="15" fill="rgb(237,72,25)"/><text x="78.4616%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (116,971 samples, 0.17%)</title><rect x="78.2125%" y="69" width="0.1727%" height="15" fill="rgb(244,70,9)"/><text x="78.4625%" y="79.50"></text></g><g><title>item_attrs (99,001 samples, 0.15%)</title><rect x="78.2391%" y="53" width="0.1462%" height="15" fill="rgb(217,125,39)"/><text x="78.4891%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,521 samples, 0.15%)</title><rect x="78.2398%" y="37" width="0.1454%" height="15" fill="rgb(235,36,10)"/><text x="78.4898%" y="47.50"></text></g><g><title>layout_of (76,851 samples, 0.11%)</title><rect x="78.3891%" y="101" width="0.1135%" height="15" fill="rgb(251,123,47)"/><text x="78.6391%" y="111.50"></text></g><g><title>layout_of (226,212 samples, 0.33%)</title><rect x="78.1914%" y="117" width="0.3340%" height="15" fill="rgb(221,13,13)"/><text x="78.4414%" y="127.50"></text></g><g><title>layout_of (293,943 samples, 0.43%)</title><rect x="78.1252%" y="133" width="0.4340%" height="15" fill="rgb(238,131,9)"/><text x="78.3752%" y="143.50"></text></g><g><title>layout_of (488,216 samples, 0.72%)</title><rect x="78.1097%" y="149" width="0.7208%" height="15" fill="rgb(211,50,8)"/><text x="78.3597%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (183,722 samples, 0.27%)</title><rect x="78.5592%" y="133" width="0.2712%" height="15" fill="rgb(245,182,24)"/><text x="78.8092%" y="143.50"></text></g><g><title>normalize_projection_ty (171,872 samples, 0.25%)</title><rect x="78.5767%" y="117" width="0.2537%" height="15" fill="rgb(242,14,37)"/><text x="78.8267%" y="127.50"></text></g><g><title>layout_of (682,878 samples, 1.01%)</title><rect x="77.8358%" y="165" width="1.0081%" height="15" fill="rgb(246,228,12)"/><text x="78.0858%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (270,315 samples, 0.40%)</title><rect x="78.8440%" y="165" width="0.3991%" height="15" fill="rgb(213,55,15)"/><text x="79.0940%" y="175.50"></text></g><g><title>optimized_mir (1,255,804 samples, 1.85%)</title><rect x="77.3998%" y="181" width="1.8540%" height="15" fill="rgb(209,9,3)"/><text x="77.6498%" y="191.50">o..</text></g><g><title>generate_crate_metadata (1,730,459 samples, 2.55%)</title><rect x="76.7209%" y="197" width="2.5547%" height="15" fill="rgb(230,59,30)"/><text x="76.9709%" y="207.50">ge..</text></g><g><title>hir_lowering (373,684 samples, 0.55%)</title><rect x="79.2756%" y="197" width="0.5517%" height="15" fill="rgb(209,121,21)"/><text x="79.5256%" y="207.50"></text></g><g><title>finish_ongoing_codegen (11,533,227 samples, 17.03%)</title><rect x="79.8455%" y="181" width="17.0266%" height="15" fill="rgb(220,109,13)"/><text x="80.0955%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (608,037 samples, 0.90%)</title><rect x="96.8721%" y="181" width="0.8976%" height="15" fill="rgb(232,18,1)"/><text x="97.1221%" y="191.50"></text></g><g><title>link_binary (602,997 samples, 0.89%)</title><rect x="96.8796%" y="165" width="0.8902%" height="15" fill="rgb(215,41,42)"/><text x="97.1296%" y="175.50"></text></g><g><title>link_rlib (348,013 samples, 0.51%)</title><rect x="97.2560%" y="149" width="0.5138%" height="15" fill="rgb(224,123,36)"/><text x="97.5060%" y="159.50"></text></g><g><title>link (12,161,374 samples, 17.95%)</title><rect x="79.8273%" y="197" width="17.9539%" height="15" fill="rgb(240,125,3)"/><text x="80.0773%" y="207.50">link</text></g><g><title>parse_crate (505,236 samples, 0.75%)</title><rect x="97.7812%" y="197" width="0.7459%" height="15" fill="rgb(205,98,50)"/><text x="98.0312%" y="207.50"></text></g><g><title>prepare_outputs (195,952 samples, 0.29%)</title><rect x="98.5375%" y="197" width="0.2893%" height="15" fill="rgb(205,185,37)"/><text x="98.7875%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (367,134 samples, 0.54%)</title><rect x="98.8268%" y="197" width="0.5420%" height="15" fill="rgb(238,207,15)"/><text x="99.0768%" y="207.50"></text></g><g><title>setup_global_ctxt (99,291 samples, 0.15%)</title><rect x="99.3702%" y="197" width="0.1466%" height="15" fill="rgb(213,199,42)"/><text x="99.6202%" y="207.50"></text></g><g><title>all (67,736,565 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (67,736,565 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (327,294 samples, 0.48%)</title><rect x="99.5168%" y="197" width="0.4832%" height="15" fill="rgb(241,35,35)"/><text x="99.7668%" y="207.50"></text></g></svg></svg>