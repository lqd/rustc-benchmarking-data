<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (872,199,357 samples, 18.05%)</title><rect x="0.0251%" y="197" width="18.0546%" height="15" fill="rgb(227,0,7)"/><text x="0.2751%" y="207.50">LLVM_passes</text></g><g><title>mir_const (12,606,530 samples, 0.26%)</title><rect x="20.6385%" y="133" width="0.2610%" height="15" fill="rgb(217,0,24)"/><text x="20.8885%" y="143.50"></text></g><g><title>unsafety_check_result (10,796,817 samples, 0.22%)</title><rect x="20.6760%" y="117" width="0.2235%" height="15" fill="rgb(221,193,54)"/><text x="20.9260%" y="127.50"></text></g><g><title>mir_built (9,497,090 samples, 0.20%)</title><rect x="20.7029%" y="101" width="0.1966%" height="15" fill="rgb(248,212,6)"/><text x="20.9529%" y="111.50"></text></g><g><title>thir_body (22,759,183 samples, 0.47%)</title><rect x="21.6262%" y="69" width="0.4711%" height="15" fill="rgb(208,68,35)"/><text x="21.8762%" y="79.50"></text></g><g><title>mir_const (54,396,089 samples, 1.13%)</title><rect x="20.9716%" y="117" width="1.1260%" height="15" fill="rgb(232,128,0)"/><text x="21.2216%" y="127.50"></text></g><g><title>unsafety_check_result (50,582,286 samples, 1.05%)</title><rect x="21.0505%" y="101" width="1.0471%" height="15" fill="rgb(207,160,47)"/><text x="21.3005%" y="111.50"></text></g><g><title>mir_built (47,794,815 samples, 0.99%)</title><rect x="21.1082%" y="85" width="0.9894%" height="15" fill="rgb(228,23,34)"/><text x="21.3582%" y="95.50"></text></g><g><title>mir_const_qualif (57,908,799 samples, 1.20%)</title><rect x="20.8995%" y="133" width="1.1987%" height="15" fill="rgb(218,30,26)"/><text x="21.1495%" y="143.50"></text></g><g><title>mir_promoted (75,690,049 samples, 1.57%)</title><rect x="20.5315%" y="149" width="1.5668%" height="15" fill="rgb(220,122,19)"/><text x="20.7815%" y="159.50"></text></g><g><title>MIR_borrow_checking (194,876,683 samples, 4.03%)</title><rect x="18.1658%" y="181" width="4.0340%" height="15" fill="rgb(250,228,42)"/><text x="18.4158%" y="191.50">MIR_..</text></g><g><title>mir_borrowck (194,600,559 samples, 4.03%)</title><rect x="18.1716%" y="165" width="4.0282%" height="15" fill="rgb(240,193,28)"/><text x="18.4216%" y="175.50">mir_..</text></g><g><title>MIR_effect_checking (38,314,491 samples, 0.79%)</title><rect x="22.1998%" y="181" width="0.7931%" height="15" fill="rgb(216,20,37)"/><text x="22.4498%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (38,154,229 samples, 0.79%)</title><rect x="22.2031%" y="165" width="0.7898%" height="15" fill="rgb(206,188,39)"/><text x="22.4531%" y="175.50"></text></g><g><title>misc_checking_1 (6,912,398 samples, 0.14%)</title><rect x="23.0099%" y="181" width="0.1431%" height="15" fill="rgb(217,207,13)"/><text x="23.2599%" y="191.50"></text></g><g><title>misc_checking_2 (6,131,389 samples, 0.13%)</title><rect x="23.1529%" y="181" width="0.1269%" height="15" fill="rgb(231,73,38)"/><text x="23.4029%" y="191.50"></text></g><g><title>mir_for_ctfe (17,212,323 samples, 0.36%)</title><rect x="25.9557%" y="85" width="0.3563%" height="15" fill="rgb(225,20,46)"/><text x="26.2057%" y="95.50"></text></g><g><title>eval_to_const_value_raw (135,305,152 samples, 2.80%)</title><rect x="23.5113%" y="133" width="2.8008%" height="15" fill="rgb(210,31,41)"/><text x="23.7613%" y="143.50">ev..</text></g><g><title>eval_to_const_value_raw (135,289,472 samples, 2.80%)</title><rect x="23.5116%" y="117" width="2.8005%" height="15" fill="rgb(221,200,47)"/><text x="23.7616%" y="127.50">ev..</text></g><g><title>eval_to_allocation_raw (135,255,271 samples, 2.80%)</title><rect x="23.5123%" y="101" width="2.7998%" height="15" fill="rgb(226,26,5)"/><text x="23.7623%" y="111.50">ev..</text></g><g><title>crate_lints (144,088,421 samples, 2.98%)</title><rect x="23.3589%" y="149" width="2.9826%" height="15" fill="rgb(249,33,26)"/><text x="23.6089%" y="159.50">cra..</text></g><g><title>lint_checking (155,348,529 samples, 3.22%)</title><rect x="23.3588%" y="165" width="3.2157%" height="15" fill="rgb(235,183,28)"/><text x="23.6088%" y="175.50">lin..</text></g><g><title>module_lints (11,256,457 samples, 0.23%)</title><rect x="26.3415%" y="149" width="0.2330%" height="15" fill="rgb(221,5,38)"/><text x="26.5915%" y="159.50"></text></g><g><title>lint_mod (11,248,377 samples, 0.23%)</title><rect x="26.3417%" y="133" width="0.2328%" height="15" fill="rgb(247,18,42)"/><text x="26.5917%" y="143.50"></text></g><g><title>privacy_checking_modules (12,281,837 samples, 0.25%)</title><rect x="26.6005%" y="165" width="0.2542%" height="15" fill="rgb(241,131,45)"/><text x="26.8505%" y="175.50"></text></g><g><title>check_mod_privacy (12,274,167 samples, 0.25%)</title><rect x="26.6006%" y="149" width="0.2541%" height="15" fill="rgb(249,31,29)"/><text x="26.8506%" y="159.50"></text></g><g><title>misc_checking_3 (172,720,614 samples, 3.58%)</title><rect x="23.2799%" y="181" width="3.5753%" height="15" fill="rgb(225,111,53)"/><text x="23.5299%" y="191.50">misc..</text></g><g><title>impl_trait_ref (5,738,933 samples, 0.12%)</title><rect x="27.0193%" y="117" width="0.1188%" height="15" fill="rgb(238,160,17)"/><text x="27.2693%" y="127.50"></text></g><g><title>coherent_trait (14,431,812 samples, 0.30%)</title><rect x="26.8581%" y="149" width="0.2987%" height="15" fill="rgb(214,148,48)"/><text x="27.1081%" y="159.50"></text></g><g><title>specialization_graph_of (13,703,575 samples, 0.28%)</title><rect x="26.8731%" y="133" width="0.2837%" height="15" fill="rgb(232,36,49)"/><text x="27.1231%" y="143.50"></text></g><g><title>coherence_checking (14,546,254 samples, 0.30%)</title><rect x="26.8576%" y="165" width="0.3011%" height="15" fill="rgb(209,103,24)"/><text x="27.1076%" y="175.50"></text></g><g><title>typeck (17,512,757 samples, 0.36%)</title><rect x="27.8612%" y="117" width="0.3625%" height="15" fill="rgb(229,88,8)"/><text x="28.1112%" y="127.50"></text></g><g><title>item_bodies_checking (51,448,320 samples, 1.06%)</title><rect x="27.1599%" y="165" width="1.0650%" height="15" fill="rgb(213,181,19)"/><text x="27.4099%" y="175.50"></text></g><g><title>typeck_item_bodies (51,444,550 samples, 1.06%)</title><rect x="27.1600%" y="149" width="1.0649%" height="15" fill="rgb(254,191,54)"/><text x="27.4100%" y="159.50"></text></g><g><title>typeck (51,291,669 samples, 1.06%)</title><rect x="27.1631%" y="133" width="1.0617%" height="15" fill="rgb(241,83,37)"/><text x="27.4131%" y="143.50"></text></g><g><title>mir_built (6,091,998 samples, 0.13%)</title><rect x="28.3389%" y="53" width="0.1261%" height="15" fill="rgb(233,36,39)"/><text x="28.5889%" y="63.50"></text></g><g><title>typeck (4,948,415 samples, 0.10%)</title><rect x="28.3625%" y="37" width="0.1024%" height="15" fill="rgb(226,3,54)"/><text x="28.6125%" y="47.50"></text></g><g><title>mir_const (6,740,976 samples, 0.14%)</title><rect x="28.3296%" y="85" width="0.1395%" height="15" fill="rgb(245,192,40)"/><text x="28.5796%" y="95.50"></text></g><g><title>unsafety_check_result (6,477,183 samples, 0.13%)</title><rect x="28.3350%" y="69" width="0.1341%" height="15" fill="rgb(238,167,29)"/><text x="28.5850%" y="79.50"></text></g><g><title>mir_promoted (6,901,088 samples, 0.14%)</title><rect x="28.3265%" y="101" width="0.1429%" height="15" fill="rgb(232,182,51)"/><text x="28.5765%" y="111.50"></text></g><g><title>type_of (10,466,598 samples, 0.22%)</title><rect x="28.2677%" y="133" width="0.2167%" height="15" fill="rgb(231,60,39)"/><text x="28.5177%" y="143.50"></text></g><g><title>mir_borrowck (10,442,918 samples, 0.22%)</title><rect x="28.2682%" y="117" width="0.2162%" height="15" fill="rgb(208,69,12)"/><text x="28.5182%" y="127.50"></text></g><g><title>item_types_checking (150,183,530 samples, 3.11%)</title><rect x="28.2249%" y="165" width="3.1088%" height="15" fill="rgb(235,93,37)"/><text x="28.4749%" y="175.50">ite..</text></g><g><title>check_mod_item_types (150,176,120 samples, 3.11%)</title><rect x="28.2250%" y="149" width="3.1087%" height="15" fill="rgb(213,116,39)"/><text x="28.4750%" y="159.50">che..</text></g><g><title>typeck (137,648,429 samples, 2.85%)</title><rect x="28.4843%" y="133" width="2.8493%" height="15" fill="rgb(222,207,29)"/><text x="28.7343%" y="143.50">ty..</text></g><g><title>type_collecting (5,977,377 samples, 0.12%)</title><rect x="31.3337%" y="165" width="0.1237%" height="15" fill="rgb(206,96,30)"/><text x="31.5837%" y="175.50"></text></g><g><title>collect_mod_item_types (5,961,067 samples, 0.12%)</title><rect x="31.3340%" y="149" width="0.1234%" height="15" fill="rgb(218,138,4)"/><text x="31.5840%" y="159.50"></text></g><g><title>analysis (657,449,939 samples, 13.61%)</title><rect x="18.0797%" y="197" width="13.6092%" height="15" fill="rgb(250,191,14)"/><text x="18.3297%" y="207.50">analysis</text></g><g><title>type_check_crate (233,513,359 samples, 4.83%)</title><rect x="26.8552%" y="181" width="4.8337%" height="15" fill="rgb(239,60,40)"/><text x="27.1052%" y="191.50">type_c..</text></g><g><title>wf_checking (11,168,466 samples, 0.23%)</title><rect x="31.4577%" y="165" width="0.2312%" height="15" fill="rgb(206,27,48)"/><text x="31.7077%" y="175.50"></text></g><g><title>check_item_well_formed (7,125,078 samples, 0.15%)</title><rect x="31.5414%" y="149" width="0.1475%" height="15" fill="rgb(225,35,8)"/><text x="31.7914%" y="159.50"></text></g><g><title>param_env (6,965,701 samples, 0.14%)</title><rect x="33.7631%" y="149" width="0.1442%" height="15" fill="rgb(250,213,24)"/><text x="34.0131%" y="159.50"></text></g><g><title>fn_abi_of_instance (21,716,595 samples, 0.45%)</title><rect x="33.5019%" y="165" width="0.4495%" height="15" fill="rgb(247,123,22)"/><text x="33.7519%" y="175.50"></text></g><g><title>codegen_module (110,131,679 samples, 2.28%)</title><rect x="31.7378%" y="181" width="2.2797%" height="15" fill="rgb(231,138,38)"/><text x="31.9878%" y="191.50">c..</text></g><g><title>metadata_decode_entry_optimized_mir (5,239,743 samples, 0.11%)</title><rect x="34.3221%" y="117" width="0.1085%" height="15" fill="rgb(231,145,46)"/><text x="34.5721%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,897,909 samples, 0.18%)</title><rect x="34.5174%" y="101" width="0.1842%" height="15" fill="rgb(251,118,11)"/><text x="34.7674%" y="111.50"></text></g><g><title>eval_to_const_value_raw (8,878,119 samples, 0.18%)</title><rect x="34.5178%" y="85" width="0.1838%" height="15" fill="rgb(217,147,25)"/><text x="34.7678%" y="95.50"></text></g><g><title>eval_to_allocation_raw (8,843,498 samples, 0.18%)</title><rect x="34.5186%" y="69" width="0.1831%" height="15" fill="rgb(247,81,37)"/><text x="34.7686%" y="79.50"></text></g><g><title>optimized_mir (23,112,221 samples, 0.48%)</title><rect x="34.2233%" y="133" width="0.4784%" height="15" fill="rgb(209,12,38)"/><text x="34.4733%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,964,699 samples, 0.19%)</title><rect x="34.5161%" y="117" width="0.1856%" height="15" fill="rgb(227,1,9)"/><text x="34.7661%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (7,281,459 samples, 0.15%)</title><rect x="34.7498%" y="117" width="0.1507%" height="15" fill="rgb(248,47,43)"/><text x="34.9998%" y="127.50"></text></g><g><title>resolve_instance (16,283,867 samples, 0.34%)</title><rect x="34.7017%" y="133" width="0.3371%" height="15" fill="rgb(221,10,30)"/><text x="34.9517%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (52,775,714 samples, 1.09%)</title><rect x="34.0190%" y="149" width="1.0925%" height="15" fill="rgb(210,229,1)"/><text x="34.2690%" y="159.50"></text></g><g><title>monomorphization_collector (52,900,915 samples, 1.10%)</title><rect x="34.0190%" y="165" width="1.0951%" height="15" fill="rgb(222,148,37)"/><text x="34.2690%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (58,898,313 samples, 1.22%)</title><rect x="34.0178%" y="181" width="1.2192%" height="15" fill="rgb(234,67,33)"/><text x="34.2678%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (5,942,547 samples, 0.12%)</title><rect x="35.1140%" y="165" width="0.1230%" height="15" fill="rgb(247,98,35)"/><text x="35.3640%" y="175.50"></text></g><g><title>codegen_crate (171,438,400 samples, 3.55%)</title><rect x="31.6895%" y="197" width="3.5488%" height="15" fill="rgb(247,138,52)"/><text x="31.9395%" y="207.50">code..</text></g><g><title>codegen_module_optimize (1,110,145,088 samples, 22.98%)</title><rect x="35.2383%" y="197" width="22.9800%" height="15" fill="rgb(213,79,30)"/><text x="35.4883%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,078,050,805 samples, 22.32%)</title><rect x="35.9027%" y="181" width="22.3157%" height="15" fill="rgb(246,177,23)"/><text x="36.1527%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (514,998,964 samples, 10.66%)</title><rect x="58.9013%" y="181" width="10.6605%" height="15" fill="rgb(230,62,27)"/><text x="59.1513%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (420,220,839 samples, 8.70%)</title><rect x="69.5618%" y="181" width="8.6986%" height="15" fill="rgb(216,154,8)"/><text x="69.8118%" y="191.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (416,197,314 samples, 8.62%)</title><rect x="69.6451%" y="165" width="8.6153%" height="15" fill="rgb(244,35,45)"/><text x="69.8951%" y="175.50">LLVM_module_..</text></g><g><title>LLVM_thin_lto_import (31,084,201 samples, 0.64%)</title><rect x="78.2604%" y="181" width="0.6434%" height="15" fill="rgb(251,115,12)"/><text x="78.5104%" y="191.50"></text></g><g><title>codegen_module_perform_lto (1,000,655,930 samples, 20.71%)</title><rect x="58.2184%" y="197" width="20.7136%" height="15" fill="rgb(240,54,50)"/><text x="58.4684%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (91,392,839 samples, 1.89%)</title><rect x="79.0043%" y="181" width="1.8918%" height="15" fill="rgb(233,84,52)"/><text x="79.2543%" y="191.50">m..</text></g><g><title>expand_crate (91,364,959 samples, 1.89%)</title><rect x="79.0049%" y="165" width="1.8913%" height="15" fill="rgb(207,117,47)"/><text x="79.2549%" y="175.50">e..</text></g><g><title>late_resolve_crate (16,061,581 samples, 0.33%)</title><rect x="80.9145%" y="165" width="0.3325%" height="15" fill="rgb(249,43,39)"/><text x="81.1645%" y="175.50"></text></g><g><title>configure_and_expand (115,304,117 samples, 2.39%)</title><rect x="78.9320%" y="197" width="2.3868%" height="15" fill="rgb(209,38,44)"/><text x="79.1820%" y="207.50">co..</text></g><g><title>resolve_crate (19,877,174 samples, 0.41%)</title><rect x="80.9073%" y="181" width="0.4115%" height="15" fill="rgb(236,212,23)"/><text x="81.1573%" y="191.50"></text></g><g><title>drop_ast (5,075,707 samples, 0.11%)</title><rect x="81.3188%" y="197" width="0.1051%" height="15" fill="rgb(242,79,21)"/><text x="81.5688%" y="207.50"></text></g><g><title>early_lint_checks (7,838,268 samples, 0.16%)</title><rect x="81.4246%" y="197" width="0.1623%" height="15" fill="rgb(211,96,35)"/><text x="81.6746%" y="207.50"></text></g><g><title>free_global_ctxt (28,772,154 samples, 0.60%)</title><rect x="81.5868%" y="197" width="0.5956%" height="15" fill="rgb(253,215,40)"/><text x="81.8368%" y="207.50"></text></g><g><title>optimized_mir (7,087,199 samples, 0.15%)</title><rect x="82.8965%" y="181" width="0.1467%" height="15" fill="rgb(211,81,21)"/><text x="83.1465%" y="191.50"></text></g><g><title>generate_crate_metadata (41,695,359 samples, 0.86%)</title><rect x="82.1824%" y="197" width="0.8631%" height="15" fill="rgb(208,190,38)"/><text x="82.4324%" y="207.50"></text></g><g><title>hir_lowering (29,610,194 samples, 0.61%)</title><rect x="83.0455%" y="197" width="0.6129%" height="15" fill="rgb(235,213,38)"/><text x="83.2955%" y="207.50"></text></g><g><title>finish_ongoing_codegen (764,121,741 samples, 15.82%)</title><rect x="83.6589%" y="181" width="15.8173%" height="15" fill="rgb(237,122,38)"/><text x="83.9089%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (9,993,203 samples, 0.21%)</title><rect x="99.4763%" y="181" width="0.2069%" height="15" fill="rgb(244,218,35)"/><text x="99.7263%" y="191.50"></text></g><g><title>link_binary (9,954,622 samples, 0.21%)</title><rect x="99.4771%" y="165" width="0.2061%" height="15" fill="rgb(240,68,47)"/><text x="99.7271%" y="175.50"></text></g><g><title>link_rlib (8,437,485 samples, 0.17%)</title><rect x="99.5085%" y="149" width="0.1747%" height="15" fill="rgb(210,16,53)"/><text x="99.7585%" y="159.50"></text></g><g><title>link (774,153,304 samples, 16.03%)</title><rect x="83.6584%" y="197" width="16.0250%" height="15" fill="rgb(235,124,12)"/><text x="83.9084%" y="207.50">link</text></g><g><title>parse_crate (8,822,709 samples, 0.18%)</title><rect x="99.6834%" y="197" width="0.1826%" height="15" fill="rgb(224,169,11)"/><text x="99.9334%" y="207.50"></text></g><g><title>all (4,830,909,065 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (4,830,909,065 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>