<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,100,106 samples, 9.73%)</title><rect x="1.3710%" y="245" width="9.7290%" height="15" fill="rgb(227,0,7)"/><text x="1.6210%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (72,251 samples, 0.14%)</title><rect x="10.9621%" y="229" width="0.1378%" height="15" fill="rgb(217,0,24)"/><text x="11.2121%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (65,180 samples, 0.12%)</title><rect x="10.9756%" y="213" width="0.1243%" height="15" fill="rgb(221,193,54)"/><text x="11.2256%" y="223.50"></text></g><g><title>param_env (52,971 samples, 0.10%)</title><rect x="13.7625%" y="165" width="0.1010%" height="15" fill="rgb(248,212,6)"/><text x="14.0125%" y="175.50"></text></g><g><title>is_copy_raw (135,641 samples, 0.26%)</title><rect x="14.4872%" y="133" width="0.2587%" height="15" fill="rgb(208,68,35)"/><text x="14.7372%" y="143.50"></text></g><g><title>evaluate_obligation (124,991 samples, 0.24%)</title><rect x="14.5075%" y="117" width="0.2384%" height="15" fill="rgb(232,128,0)"/><text x="14.7575%" y="127.50"></text></g><g><title>explicit_predicates_of (82,781 samples, 0.16%)</title><rect x="14.8804%" y="53" width="0.1579%" height="15" fill="rgb(207,160,47)"/><text x="15.1304%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (82,101 samples, 0.16%)</title><rect x="14.8817%" y="37" width="0.1566%" height="15" fill="rgb(228,23,34)"/><text x="15.1317%" y="47.50"></text></g><g><title>needs_drop_raw (154,251 samples, 0.29%)</title><rect x="14.7460%" y="133" width="0.2942%" height="15" fill="rgb(218,30,26)"/><text x="14.9960%" y="143.50"></text></g><g><title>is_copy_raw (149,841 samples, 0.29%)</title><rect x="14.7544%" y="117" width="0.2858%" height="15" fill="rgb(220,122,19)"/><text x="15.0044%" y="127.50"></text></g><g><title>evaluate_obligation (141,481 samples, 0.27%)</title><rect x="14.7703%" y="101" width="0.2699%" height="15" fill="rgb(250,228,42)"/><text x="15.0203%" y="111.50"></text></g><g><title>predicates_of (89,681 samples, 0.17%)</title><rect x="14.8692%" y="85" width="0.1711%" height="15" fill="rgb(240,193,28)"/><text x="15.1192%" y="95.50"></text></g><g><title>predicates_defined_on (86,051 samples, 0.16%)</title><rect x="14.8761%" y="69" width="0.1642%" height="15" fill="rgb(216,20,37)"/><text x="15.1261%" y="79.50"></text></g><g><title>resolve_instance (112,811 samples, 0.22%)</title><rect x="15.0402%" y="133" width="0.2152%" height="15" fill="rgb(206,188,39)"/><text x="15.2902%" y="143.50"></text></g><g><title>thir_body (59,980 samples, 0.11%)</title><rect x="15.2626%" y="133" width="0.1144%" height="15" fill="rgb(217,207,13)"/><text x="15.5126%" y="143.50"></text></g><g><title>mir_const (1,001,481 samples, 1.91%)</title><rect x="13.4809%" y="181" width="1.9104%" height="15" fill="rgb(231,73,38)"/><text x="13.7309%" y="191.50">m..</text></g><g><title>unsafety_check_result (800,870 samples, 1.53%)</title><rect x="13.8636%" y="165" width="1.5277%" height="15" fill="rgb(225,20,46)"/><text x="14.1136%" y="175.50"></text></g><g><title>mir_built (688,257 samples, 1.31%)</title><rect x="14.0784%" y="149" width="1.3129%" height="15" fill="rgb(210,31,41)"/><text x="14.3284%" y="159.50"></text></g><g><title>mir_promoted (1,140,653 samples, 2.18%)</title><rect x="13.2355%" y="197" width="2.1759%" height="15" fill="rgb(221,200,47)"/><text x="13.4855%" y="207.50">m..</text></g><g><title>MIR_borrow_checking (2,249,076 samples, 4.29%)</title><rect x="11.4347%" y="229" width="4.2903%" height="15" fill="rgb(226,26,5)"/><text x="11.6847%" y="239.50">MIR_b..</text></g><g><title>mir_borrowck (2,228,265 samples, 4.25%)</title><rect x="11.4744%" y="213" width="4.2506%" height="15" fill="rgb(249,33,26)"/><text x="11.7244%" y="223.50">mir_b..</text></g><g><title>type_op_prove_predicate (86,422 samples, 0.16%)</title><rect x="15.5601%" y="197" width="0.1649%" height="15" fill="rgb(235,183,28)"/><text x="15.8101%" y="207.50"></text></g><g><title>hir_module_items (140,871 samples, 0.27%)</title><rect x="15.7336%" y="229" width="0.2687%" height="15" fill="rgb(221,5,38)"/><text x="15.9836%" y="239.50"></text></g><g><title>get_lang_items (56,680 samples, 0.11%)</title><rect x="16.5128%" y="181" width="0.1081%" height="15" fill="rgb(247,18,42)"/><text x="16.7628%" y="191.50"></text></g><g><title>codegen_fn_attrs (54,510 samples, 0.10%)</title><rect x="16.7470%" y="165" width="0.1040%" height="15" fill="rgb(241,131,45)"/><text x="16.9970%" y="175.50"></text></g><g><title>should_inherit_track_caller (123,582 samples, 0.24%)</title><rect x="16.6209%" y="181" width="0.2357%" height="15" fill="rgb(249,31,29)"/><text x="16.8709%" y="191.50"></text></g><g><title>codegen_fn_attrs (304,493 samples, 0.58%)</title><rect x="16.3740%" y="197" width="0.5809%" height="15" fill="rgb(225,111,53)"/><text x="16.6240%" y="207.50"></text></g><g><title>check_mod_attrs (459,385 samples, 0.88%)</title><rect x="16.0793%" y="213" width="0.8763%" height="15" fill="rgb(238,160,17)"/><text x="16.3293%" y="223.50"></text></g><g><title>lookup_deprecation_entry (107,111 samples, 0.20%)</title><rect x="17.2889%" y="197" width="0.2043%" height="15" fill="rgb(214,148,48)"/><text x="17.5389%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (271,522 samples, 0.52%)</title><rect x="17.1118%" y="213" width="0.5180%" height="15" fill="rgb(232,36,49)"/><text x="17.3618%" y="223.50"></text></g><g><title>misc_checking_1 (907,200 samples, 1.73%)</title><rect x="16.0027%" y="229" width="1.7306%" height="15" fill="rgb(209,103,24)"/><text x="16.2527%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (86,881 samples, 0.17%)</title><rect x="17.7369%" y="213" width="0.1657%" height="15" fill="rgb(229,88,8)"/><text x="17.9869%" y="223.50"></text></g><g><title>check_mod_liveness (65,601 samples, 0.13%)</title><rect x="17.7775%" y="197" width="0.1251%" height="15" fill="rgb(213,181,19)"/><text x="18.0275%" y="207.50"></text></g><g><title>misc_checking_2 (182,982 samples, 0.35%)</title><rect x="17.7333%" y="229" width="0.3491%" height="15" fill="rgb(254,191,54)"/><text x="17.9833%" y="239.50"></text></g><g><title>match_checking (94,211 samples, 0.18%)</title><rect x="17.9027%" y="213" width="0.1797%" height="15" fill="rgb(241,83,37)"/><text x="18.1527%" y="223.50"></text></g><g><title>check_match (88,111 samples, 0.17%)</title><rect x="17.9143%" y="197" width="0.1681%" height="15" fill="rgb(233,36,39)"/><text x="18.1643%" y="207.50"></text></g><g><title>death_checking (155,352 samples, 0.30%)</title><rect x="18.1875%" y="213" width="0.2963%" height="15" fill="rgb(226,3,54)"/><text x="18.4375%" y="223.50"></text></g><g><title>lint_levels (58,581 samples, 0.11%)</title><rect x="18.3721%" y="197" width="0.1117%" height="15" fill="rgb(245,192,40)"/><text x="18.6221%" y="207.50"></text></g><g><title>param_env (105,901 samples, 0.20%)</title><rect x="19.2125%" y="181" width="0.2020%" height="15" fill="rgb(238,167,29)"/><text x="19.4625%" y="191.50"></text></g><g><title>trait_impls_of (72,280 samples, 0.14%)</title><rect x="19.4145%" y="181" width="0.1379%" height="15" fill="rgb(232,182,51)"/><text x="19.6645%" y="191.50"></text></g><g><title>crate_lints (1,458,996 samples, 2.78%)</title><rect x="18.4867%" y="197" width="2.7832%" height="15" fill="rgb(231,60,39)"/><text x="18.7367%" y="207.50">cr..</text></g><g><title>type_of (900,342 samples, 1.72%)</title><rect x="19.5524%" y="181" width="1.7175%" height="15" fill="rgb(208,69,12)"/><text x="19.8024%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (817,732 samples, 1.56%)</title><rect x="19.7100%" y="165" width="1.5599%" height="15" fill="rgb(235,93,37)"/><text x="19.9600%" y="175.50"></text></g><g><title>lint_checking (1,500,407 samples, 2.86%)</title><rect x="18.4839%" y="213" width="2.8622%" height="15" fill="rgb(213,116,39)"/><text x="18.7339%" y="223.50">li..</text></g><g><title>privacy_access_levels (59,620 samples, 0.11%)</title><rect x="21.3460%" y="213" width="0.1137%" height="15" fill="rgb(222,207,29)"/><text x="21.5960%" y="223.50"></text></g><g><title>privacy_checking_modules (82,391 samples, 0.16%)</title><rect x="21.4598%" y="213" width="0.1572%" height="15" fill="rgb(206,96,30)"/><text x="21.7098%" y="223.50"></text></g><g><title>check_mod_privacy (81,041 samples, 0.15%)</title><rect x="21.4624%" y="197" width="0.1546%" height="15" fill="rgb(218,138,4)"/><text x="21.7124%" y="207.50"></text></g><g><title>misc_checking_3 (1,862,361 samples, 3.55%)</title><rect x="18.0824%" y="229" width="3.5526%" height="15" fill="rgb(250,191,14)"/><text x="18.3324%" y="239.50">misc..</text></g><g><title>impl_trait_ref (149,882 samples, 0.29%)</title><rect x="22.1177%" y="165" width="0.2859%" height="15" fill="rgb(239,60,40)"/><text x="22.3677%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (137,182 samples, 0.26%)</title><rect x="22.1420%" y="149" width="0.2617%" height="15" fill="rgb(206,27,48)"/><text x="22.3920%" y="159.50"></text></g><g><title>coherent_trait (394,595 samples, 0.75%)</title><rect x="21.7445%" y="197" width="0.7527%" height="15" fill="rgb(225,35,8)"/><text x="21.9945%" y="207.50"></text></g><g><title>specialization_graph_of (382,215 samples, 0.73%)</title><rect x="21.7681%" y="181" width="0.7291%" height="15" fill="rgb(250,213,24)"/><text x="22.0181%" y="191.50"></text></g><g><title>coherence_checking (491,336 samples, 0.94%)</title><rect x="21.7070%" y="213" width="0.9373%" height="15" fill="rgb(247,123,22)"/><text x="21.9570%" y="223.50"></text></g><g><title>evaluate_obligation (70,320 samples, 0.13%)</title><rect x="25.1993%" y="165" width="0.1341%" height="15" fill="rgb(231,138,38)"/><text x="25.4493%" y="175.50"></text></g><g><title>item_attrs (113,311 samples, 0.22%)</title><rect x="25.4622%" y="165" width="0.2162%" height="15" fill="rgb(231,145,46)"/><text x="25.7122%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (110,251 samples, 0.21%)</title><rect x="25.4680%" y="149" width="0.2103%" height="15" fill="rgb(251,118,11)"/><text x="25.7180%" y="159.50"></text></g><g><title>predicates_of (53,991 samples, 0.10%)</title><rect x="25.7024%" y="165" width="0.1030%" height="15" fill="rgb(217,147,25)"/><text x="25.9524%" y="175.50"></text></g><g><title>item_bodies_checking (1,660,439 samples, 3.17%)</title><rect x="22.7022%" y="213" width="3.1675%" height="15" fill="rgb(247,81,37)"/><text x="22.9522%" y="223.50">ite..</text></g><g><title>typeck_item_bodies (1,658,149 samples, 3.16%)</title><rect x="22.7066%" y="197" width="3.1631%" height="15" fill="rgb(209,12,38)"/><text x="22.9566%" y="207.50">typ..</text></g><g><title>typeck (1,646,219 samples, 3.14%)</title><rect x="22.7294%" y="181" width="3.1403%" height="15" fill="rgb(227,1,9)"/><text x="22.9794%" y="191.50">typ..</text></g><g><title>item_types_checking (224,382 samples, 0.43%)</title><rect x="25.8697%" y="213" width="0.4280%" height="15" fill="rgb(248,47,43)"/><text x="26.1197%" y="223.50"></text></g><g><title>check_mod_item_types (220,932 samples, 0.42%)</title><rect x="25.8763%" y="197" width="0.4214%" height="15" fill="rgb(221,10,30)"/><text x="26.1263%" y="207.50"></text></g><g><title>fn_sig (107,281 samples, 0.20%)</title><rect x="26.6485%" y="181" width="0.2046%" height="15" fill="rgb(210,229,1)"/><text x="26.8985%" y="191.50"></text></g><g><title>is_late_bound_map (105,222 samples, 0.20%)</title><rect x="27.0170%" y="165" width="0.2007%" height="15" fill="rgb(222,148,37)"/><text x="27.2670%" y="175.50"></text></g><g><title>resolve_lifetimes (85,172 samples, 0.16%)</title><rect x="27.0552%" y="149" width="0.1625%" height="15" fill="rgb(234,67,33)"/><text x="27.3052%" y="159.50"></text></g><g><title>named_region_map (59,051 samples, 0.11%)</title><rect x="27.2177%" y="165" width="0.1126%" height="15" fill="rgb(247,98,35)"/><text x="27.4677%" y="175.50"></text></g><g><title>generics_of (263,954 samples, 0.50%)</title><rect x="26.8532%" y="181" width="0.5035%" height="15" fill="rgb(247,138,52)"/><text x="27.1032%" y="191.50"></text></g><g><title>explicit_predicates_of (159,712 samples, 0.30%)</title><rect x="27.5499%" y="149" width="0.3047%" height="15" fill="rgb(213,79,30)"/><text x="27.7999%" y="159.50"></text></g><g><title>predicates_of (508,256 samples, 0.97%)</title><rect x="27.4047%" y="181" width="0.9695%" height="15" fill="rgb(246,177,23)"/><text x="27.6547%" y="191.50"></text></g><g><title>predicates_defined_on (478,166 samples, 0.91%)</title><rect x="27.4621%" y="165" width="0.9121%" height="15" fill="rgb(230,62,27)"/><text x="27.7121%" y="175.50"></text></g><g><title>inferred_outlives_of (272,422 samples, 0.52%)</title><rect x="27.8546%" y="149" width="0.5197%" height="15" fill="rgb(216,154,8)"/><text x="28.1046%" y="159.50"></text></g><g><title>inferred_outlives_crate (255,612 samples, 0.49%)</title><rect x="27.8867%" y="133" width="0.4876%" height="15" fill="rgb(244,35,45)"/><text x="28.1367%" y="143.50"></text></g><g><title>type_of (123,031 samples, 0.23%)</title><rect x="28.1396%" y="117" width="0.2347%" height="15" fill="rgb(251,115,12)"/><text x="28.3896%" y="127.50"></text></g><g><title>super_predicates_of (59,281 samples, 0.11%)</title><rect x="28.3743%" y="181" width="0.1131%" height="15" fill="rgb(240,54,50)"/><text x="28.6243%" y="191.50"></text></g><g><title>type_collecting (1,239,744 samples, 2.36%)</title><rect x="26.3005%" y="213" width="2.3649%" height="15" fill="rgb(233,84,52)"/><text x="26.5505%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (1,215,083 samples, 2.32%)</title><rect x="26.3475%" y="197" width="2.3179%" height="15" fill="rgb(207,117,47)"/><text x="26.5975%" y="207.50">c..</text></g><g><title>type_of (89,660 samples, 0.17%)</title><rect x="28.4944%" y="181" width="0.1710%" height="15" fill="rgb(249,43,39)"/><text x="28.7444%" y="191.50"></text></g><g><title>evaluate_obligation (77,650 samples, 0.15%)</title><rect x="29.2189%" y="181" width="0.1481%" height="15" fill="rgb(209,38,44)"/><text x="29.4689%" y="191.50"></text></g><g><title>check_impl_item_well_formed (409,835 samples, 0.78%)</title><rect x="28.8063%" y="197" width="0.7818%" height="15" fill="rgb(236,212,23)"/><text x="29.0563%" y="207.50"></text></g><g><title>adt_sized_constraint (84,341 samples, 0.16%)</title><rect x="31.2446%" y="181" width="0.1609%" height="15" fill="rgb(242,79,21)"/><text x="31.4946%" y="191.50"></text></g><g><title>adt_def (80,151 samples, 0.15%)</title><rect x="31.2526%" y="165" width="0.1529%" height="15" fill="rgb(211,96,35)"/><text x="31.5026%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (70,951 samples, 0.14%)</title><rect x="31.2701%" y="149" width="0.1353%" height="15" fill="rgb(253,215,40)"/><text x="31.5201%" y="159.50"></text></g><g><title>item_attrs (62,361 samples, 0.12%)</title><rect x="31.2865%" y="133" width="0.1190%" height="15" fill="rgb(211,81,21)"/><text x="31.5365%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (61,211 samples, 0.12%)</title><rect x="31.2887%" y="117" width="0.1168%" height="15" fill="rgb(208,190,38)"/><text x="31.5387%" y="127.50"></text></g><g><title>param_env (346,826 samples, 0.66%)</title><rect x="31.4901%" y="181" width="0.6616%" height="15" fill="rgb(235,213,38)"/><text x="31.7401%" y="191.50"></text></g><g><title>check_item_well_formed (1,481,926 samples, 2.83%)</title><rect x="29.5881%" y="197" width="2.8269%" height="15" fill="rgb(237,122,38)"/><text x="29.8381%" y="207.50">ch..</text></g><g><title>variances_of (92,931 samples, 0.18%)</title><rect x="32.2378%" y="181" width="0.1773%" height="15" fill="rgb(244,218,35)"/><text x="32.4878%" y="191.50"></text></g><g><title>crate_variances (85,401 samples, 0.16%)</title><rect x="32.2521%" y="165" width="0.1629%" height="15" fill="rgb(240,68,47)"/><text x="32.5021%" y="175.50"></text></g><g><title>evaluate_obligation (393,184 samples, 0.75%)</title><rect x="33.0278%" y="181" width="0.7500%" height="15" fill="rgb(210,16,53)"/><text x="33.2778%" y="191.50"></text></g><g><title>implied_outlives_bounds (72,441 samples, 0.14%)</title><rect x="33.8580%" y="181" width="0.1382%" height="15" fill="rgb(235,124,12)"/><text x="34.1080%" y="191.50"></text></g><g><title>analysis (12,057,975 samples, 23.00%)</title><rect x="11.1000%" y="245" width="23.0018%" height="15" fill="rgb(224,169,11)"/><text x="11.3500%" y="255.50">analysis</text></g><g><title>type_check_crate (6,535,303 samples, 12.47%)</title><rect x="21.6350%" y="229" width="12.4667%" height="15" fill="rgb(250,166,2)"/><text x="21.8850%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,848,882 samples, 5.43%)</title><rect x="28.6672%" y="213" width="5.4345%" height="15" fill="rgb(242,216,29)"/><text x="28.9172%" y="223.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (884,200 samples, 1.69%)</title><rect x="32.4150%" y="197" width="1.6867%" height="15" fill="rgb(230,116,27)"/><text x="32.6650%" y="207.50"></text></g><g><title>codegen_module (221,302 samples, 0.42%)</title><rect x="35.2204%" y="229" width="0.4222%" height="15" fill="rgb(228,99,48)"/><text x="35.4704%" y="239.50"></text></g><g><title>codegen_crate (858,410 samples, 1.64%)</title><rect x="34.1244%" y="245" width="1.6375%" height="15" fill="rgb(253,11,6)"/><text x="34.3744%" y="255.50"></text></g><g><title>codegen_module_optimize (1,585,598 samples, 3.02%)</title><rect x="35.7619%" y="245" width="3.0247%" height="15" fill="rgb(247,143,39)"/><text x="36.0119%" y="255.50">cod..</text></g><g><title>LLVM_module_optimize (478,036 samples, 0.91%)</title><rect x="37.8747%" y="229" width="0.9119%" height="15" fill="rgb(236,97,10)"/><text x="38.1247%" y="239.50"></text></g><g><title>LLVM_lto_optimize (199,172 samples, 0.38%)</title><rect x="39.6272%" y="229" width="0.3799%" height="15" fill="rgb(233,208,19)"/><text x="39.8772%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,458,308 samples, 4.69%)</title><rect x="40.0072%" y="229" width="4.6895%" height="15" fill="rgb(216,164,2)"/><text x="40.2572%" y="239.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,410,387 samples, 4.60%)</title><rect x="40.0986%" y="213" width="4.5981%" height="15" fill="rgb(220,129,5)"/><text x="40.3486%" y="223.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (3,147,265 samples, 6.00%)</title><rect x="38.7866%" y="245" width="6.0037%" height="15" fill="rgb(242,17,10)"/><text x="39.0366%" y="255.50">codegen_..</text></g><g><title>AST_validation (221,583 samples, 0.42%)</title><rect x="45.2591%" y="229" width="0.4227%" height="15" fill="rgb(242,107,0)"/><text x="45.5091%" y="239.50"></text></g><g><title>complete_gated_feature_checking (53,660 samples, 0.10%)</title><rect x="45.6818%" y="229" width="0.1024%" height="15" fill="rgb(251,28,31)"/><text x="45.9318%" y="239.50"></text></g><g><title>crate_injection (94,281 samples, 0.18%)</title><rect x="45.7842%" y="229" width="0.1799%" height="15" fill="rgb(233,223,10)"/><text x="46.0342%" y="239.50"></text></g><g><title>macro_expand_crate (16,033,638 samples, 30.59%)</title><rect x="45.9640%" y="229" width="30.5858%" height="15" fill="rgb(215,21,27)"/><text x="46.2140%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (16,006,738 samples, 30.53%)</title><rect x="46.0153%" y="213" width="30.5344%" height="15" fill="rgb(232,23,21)"/><text x="46.2653%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (8,054,319 samples, 15.36%)</title><rect x="61.1854%" y="197" width="15.3644%" height="15" fill="rgb(244,5,23)"/><text x="61.4354%" y="207.50">metadata_register_crate</text></g><g><title>pre_AST_expansion_lint_checks (160,022 samples, 0.31%)</title><rect x="76.5618%" y="229" width="0.3053%" height="15" fill="rgb(226,81,46)"/><text x="76.8118%" y="239.50"></text></g><g><title>finalize_imports (217,643 samples, 0.42%)</title><rect x="76.8843%" y="213" width="0.4152%" height="15" fill="rgb(247,70,30)"/><text x="77.1343%" y="223.50"></text></g><g><title>late_resolve_crate (1,090,682 samples, 2.08%)</title><rect x="77.3405%" y="213" width="2.0806%" height="15" fill="rgb(212,68,19)"/><text x="77.5905%" y="223.50">l..</text></g><g><title>configure_and_expand (18,230,123 samples, 34.78%)</title><rect x="44.7903%" y="245" width="34.7758%" height="15" fill="rgb(240,187,13)"/><text x="45.0403%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,414,876 samples, 2.70%)</title><rect x="76.8671%" y="229" width="2.6990%" height="15" fill="rgb(223,113,26)"/><text x="77.1171%" y="239.50">re..</text></g><g><title>drop_ast (73,220 samples, 0.14%)</title><rect x="79.5661%" y="245" width="0.1397%" height="15" fill="rgb(206,192,2)"/><text x="79.8161%" y="255.50"></text></g><g><title>early_lint_checks (215,182 samples, 0.41%)</title><rect x="79.7474%" y="245" width="0.4105%" height="15" fill="rgb(241,108,4)"/><text x="79.9974%" y="255.50"></text></g><g><title>free_global_ctxt (1,141,593 samples, 2.18%)</title><rect x="80.1579%" y="245" width="2.1777%" height="15" fill="rgb(247,173,49)"/><text x="80.4079%" y="255.50">f..</text></g><g><title>crate_hash (60,871 samples, 0.12%)</title><rect x="83.0414%" y="229" width="0.1161%" height="15" fill="rgb(224,114,35)"/><text x="83.2914%" y="239.50"></text></g><g><title>layout_of (56,260 samples, 0.11%)</title><rect x="83.8290%" y="213" width="0.1073%" height="15" fill="rgb(245,159,27)"/><text x="84.0790%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (245,782 samples, 0.47%)</title><rect x="83.9363%" y="213" width="0.4689%" height="15" fill="rgb(245,172,44)"/><text x="84.1863%" y="223.50"></text></g><g><title>optimized_mir (577,475 samples, 1.10%)</title><rect x="83.3420%" y="229" width="1.1016%" height="15" fill="rgb(236,23,11)"/><text x="83.5920%" y="239.50"></text></g><g><title>generate_crate_metadata (1,121,762 samples, 2.14%)</title><rect x="82.3356%" y="245" width="2.1399%" height="15" fill="rgb(205,117,38)"/><text x="82.5856%" y="255.50">g..</text></g><g><title>hir_lowering (1,066,042 samples, 2.03%)</title><rect x="84.4755%" y="245" width="2.0336%" height="15" fill="rgb(237,72,25)"/><text x="84.7255%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (3,623,680 samples, 6.91%)</title><rect x="86.5398%" y="229" width="6.9125%" height="15" fill="rgb(244,70,9)"/><text x="86.7898%" y="239.50">finish_on..</text></g><g><title>link_crate (877,550 samples, 1.67%)</title><rect x="93.4523%" y="229" width="1.6740%" height="15" fill="rgb(217,125,39)"/><text x="93.7023%" y="239.50"></text></g><g><title>link_binary (870,729 samples, 1.66%)</title><rect x="93.4653%" y="213" width="1.6610%" height="15" fill="rgb(235,36,10)"/><text x="93.7153%" y="223.50"></text></g><g><title>link_rlib (559,336 samples, 1.07%)</title><rect x="94.0593%" y="197" width="1.0670%" height="15" fill="rgb(251,123,47)"/><text x="94.3093%" y="207.50"></text></g><g><title>link (4,528,201 samples, 8.64%)</title><rect x="86.5090%" y="245" width="8.6380%" height="15" fill="rgb(221,13,13)"/><text x="86.7590%" y="255.50">link</text></g><g><title>parse_crate (1,415,236 samples, 2.70%)</title><rect x="95.1470%" y="245" width="2.6997%" height="15" fill="rgb(238,131,9)"/><text x="95.3970%" y="255.50">pa..</text></g><g><title>prepare_outputs (352,994 samples, 0.67%)</title><rect x="97.8680%" y="245" width="0.6734%" height="15" fill="rgb(211,50,8)"/><text x="98.1180%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (331,013 samples, 0.63%)</title><rect x="98.5414%" y="245" width="0.6314%" height="15" fill="rgb(245,182,24)"/><text x="98.7914%" y="255.50"></text></g><g><title>setup_global_ctxt (149,722 samples, 0.29%)</title><rect x="99.1745%" y="245" width="0.2856%" height="15" fill="rgb(242,14,37)"/><text x="99.4245%" y="255.50"></text></g><g><title>all (52,421,914 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (52,421,914 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (283,003 samples, 0.54%)</title><rect x="99.4601%" y="245" width="0.5399%" height="15" fill="rgb(209,9,3)"/><text x="99.7101%" y="255.50"></text></g></svg></svg>