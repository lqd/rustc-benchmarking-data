<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,159,768 samples, 14.06%)</title><rect x="0.5228%" y="197" width="14.0558%" height="15" fill="rgb(227,0,7)"/><text x="0.7728%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (151,902 samples, 0.19%)</title><rect x="14.3872%" y="181" width="0.1913%" height="15" fill="rgb(217,0,24)"/><text x="14.6372%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (136,821 samples, 0.17%)</title><rect x="14.4062%" y="165" width="0.1723%" height="15" fill="rgb(221,193,54)"/><text x="14.6562%" y="175.50"></text></g><g><title>codegen_fn_attrs (85,460 samples, 0.11%)</title><rect x="19.9386%" y="101" width="0.1076%" height="15" fill="rgb(248,212,6)"/><text x="20.1886%" y="111.50"></text></g><g><title>adt_drop_tys (95,892 samples, 0.12%)</title><rect x="21.0673%" y="69" width="0.1208%" height="15" fill="rgb(208,68,35)"/><text x="21.3173%" y="79.50"></text></g><g><title>is_copy_raw (398,583 samples, 0.50%)</title><rect x="21.1881%" y="69" width="0.5020%" height="15" fill="rgb(232,128,0)"/><text x="21.4381%" y="79.50"></text></g><g><title>evaluate_obligation (367,763 samples, 0.46%)</title><rect x="21.2269%" y="53" width="0.4632%" height="15" fill="rgb(207,160,47)"/><text x="21.4769%" y="63.50"></text></g><g><title>predicates_of (87,810 samples, 0.11%)</title><rect x="21.5795%" y="37" width="0.1106%" height="15" fill="rgb(228,23,34)"/><text x="21.8295%" y="47.50"></text></g><g><title>needs_drop_raw (529,975 samples, 0.67%)</title><rect x="21.0267%" y="85" width="0.6675%" height="15" fill="rgb(218,30,26)"/><text x="21.2767%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (134,724 samples, 0.17%)</title><rect x="21.7716%" y="69" width="0.1697%" height="15" fill="rgb(220,122,19)"/><text x="22.0216%" y="79.50"></text></g><g><title>resolve_instance (271,805 samples, 0.34%)</title><rect x="21.6942%" y="85" width="0.3423%" height="15" fill="rgb(250,228,42)"/><text x="21.9442%" y="95.50"></text></g><g><title>thir_body (251,601 samples, 0.32%)</title><rect x="22.0459%" y="85" width="0.3169%" height="15" fill="rgb(240,193,28)"/><text x="22.2959%" y="95.50"></text></g><g><title>mir_const (2,450,483 samples, 3.09%)</title><rect x="19.3139%" y="133" width="3.0864%" height="15" fill="rgb(216,20,37)"/><text x="19.5639%" y="143.50">mir..</text></g><g><title>unsafety_check_result (2,111,099 samples, 2.66%)</title><rect x="19.7413%" y="117" width="2.6589%" height="15" fill="rgb(206,188,39)"/><text x="19.9913%" y="127.50">un..</text></g><g><title>mir_built (1,868,997 samples, 2.35%)</title><rect x="20.0463%" y="101" width="2.3540%" height="15" fill="rgb(217,207,13)"/><text x="20.2963%" y="111.50">m..</text></g><g><title>mir_promoted (2,703,714 samples, 3.41%)</title><rect x="19.0134%" y="149" width="3.4053%" height="15" fill="rgb(231,73,38)"/><text x="19.2634%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (212,002 samples, 0.27%)</title><rect x="22.4187%" y="149" width="0.2670%" height="15" fill="rgb(225,20,46)"/><text x="22.6687%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (196,712 samples, 0.25%)</title><rect x="22.6858%" y="149" width="0.2478%" height="15" fill="rgb(210,31,41)"/><text x="22.9358%" y="159.50"></text></g><g><title>normalize_projection_ty (92,781 samples, 0.12%)</title><rect x="22.8167%" y="133" width="0.1169%" height="15" fill="rgb(221,200,47)"/><text x="23.0667%" y="143.50"></text></g><g><title>type_op_normalize_predicate (109,611 samples, 0.14%)</title><rect x="22.9335%" y="149" width="0.1381%" height="15" fill="rgb(226,26,5)"/><text x="23.1835%" y="159.50"></text></g><g><title>normalize_projection_ty (80,001 samples, 0.10%)</title><rect x="22.9708%" y="133" width="0.1008%" height="15" fill="rgb(249,33,26)"/><text x="23.2208%" y="143.50"></text></g><g><title>type_op_normalize_ty (117,090 samples, 0.15%)</title><rect x="23.0716%" y="149" width="0.1475%" height="15" fill="rgb(235,183,28)"/><text x="23.3216%" y="159.50"></text></g><g><title>type_op_prove_predicate (828,100 samples, 1.04%)</title><rect x="23.2191%" y="149" width="1.0430%" height="15" fill="rgb(221,5,38)"/><text x="23.4691%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,555,920 samples, 9.52%)</title><rect x="14.7470%" y="181" width="9.5167%" height="15" fill="rgb(247,18,42)"/><text x="14.9970%" y="191.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (7,522,700 samples, 9.47%)</title><rect x="14.7888%" y="165" width="9.4749%" height="15" fill="rgb(241,131,45)"/><text x="15.0388%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (91,961 samples, 0.12%)</title><rect x="24.2740%" y="181" width="0.1158%" height="15" fill="rgb(249,31,29)"/><text x="24.5240%" y="191.50"></text></g><g><title>should_inherit_track_caller (150,381 samples, 0.19%)</title><rect x="24.6447%" y="133" width="0.1894%" height="15" fill="rgb(225,111,53)"/><text x="24.8947%" y="143.50"></text></g><g><title>codegen_fn_attrs (249,083 samples, 0.31%)</title><rect x="24.5405%" y="149" width="0.3137%" height="15" fill="rgb(238,160,17)"/><text x="24.7905%" y="159.50"></text></g><g><title>check_mod_attrs (355,874 samples, 0.45%)</title><rect x="24.4064%" y="165" width="0.4482%" height="15" fill="rgb(214,148,48)"/><text x="24.6564%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (178,702 samples, 0.23%)</title><rect x="24.9448%" y="165" width="0.2251%" height="15" fill="rgb(232,36,49)"/><text x="25.1948%" y="175.50"></text></g><g><title>misc_checking_1 (644,097 samples, 0.81%)</title><rect x="24.3902%" y="181" width="0.8112%" height="15" fill="rgb(209,103,24)"/><text x="24.6402%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (148,722 samples, 0.19%)</title><rect x="25.2032%" y="165" width="0.1873%" height="15" fill="rgb(229,88,8)"/><text x="25.4532%" y="175.50"></text></g><g><title>check_mod_liveness (117,252 samples, 0.15%)</title><rect x="25.2428%" y="149" width="0.1477%" height="15" fill="rgb(213,181,19)"/><text x="25.4928%" y="159.50"></text></g><g><title>misc_checking_2 (345,214 samples, 0.43%)</title><rect x="25.2015%" y="181" width="0.4348%" height="15" fill="rgb(254,191,54)"/><text x="25.4515%" y="191.50"></text></g><g><title>match_checking (195,142 samples, 0.25%)</title><rect x="25.3905%" y="165" width="0.2458%" height="15" fill="rgb(241,83,37)"/><text x="25.6405%" y="175.50"></text></g><g><title>check_match (184,922 samples, 0.23%)</title><rect x="25.4033%" y="149" width="0.2329%" height="15" fill="rgb(233,36,39)"/><text x="25.6533%" y="159.50"></text></g><g><title>check_private_in_public (80,931 samples, 0.10%)</title><rect x="25.6451%" y="165" width="0.1019%" height="15" fill="rgb(226,3,54)"/><text x="25.8951%" y="175.50"></text></g><g><title>death_checking (332,734 samples, 0.42%)</title><rect x="25.7470%" y="165" width="0.4191%" height="15" fill="rgb(245,192,40)"/><text x="25.9970%" y="175.50"></text></g><g><title>item_attrs (199,572 samples, 0.25%)</title><rect x="25.9148%" y="149" width="0.2514%" height="15" fill="rgb(238,167,29)"/><text x="26.1648%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (197,732 samples, 0.25%)</title><rect x="25.9171%" y="133" width="0.2490%" height="15" fill="rgb(232,182,51)"/><text x="26.1671%" y="143.50"></text></g><g><title>param_env (80,691 samples, 0.10%)</title><rect x="26.4942%" y="133" width="0.1016%" height="15" fill="rgb(231,60,39)"/><text x="26.7442%" y="143.50"></text></g><g><title>crate_lints (624,217 samples, 0.79%)</title><rect x="26.1678%" y="149" width="0.7862%" height="15" fill="rgb(208,69,12)"/><text x="26.4178%" y="159.50"></text></g><g><title>type_of (282,232 samples, 0.36%)</title><rect x="26.5985%" y="133" width="0.3555%" height="15" fill="rgb(235,93,37)"/><text x="26.8485%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (201,341 samples, 0.25%)</title><rect x="26.7004%" y="117" width="0.2536%" height="15" fill="rgb(213,116,39)"/><text x="26.9504%" y="127.50"></text></g><g><title>lint_checking (734,188 samples, 0.92%)</title><rect x="26.1661%" y="165" width="0.9247%" height="15" fill="rgb(222,207,29)"/><text x="26.4161%" y="175.50"></text></g><g><title>module_lints (108,631 samples, 0.14%)</title><rect x="26.9540%" y="149" width="0.1368%" height="15" fill="rgb(206,96,30)"/><text x="27.2040%" y="159.50"></text></g><g><title>lint_mod (106,771 samples, 0.13%)</title><rect x="26.9564%" y="133" width="0.1345%" height="15" fill="rgb(218,138,4)"/><text x="27.2064%" y="143.50"></text></g><g><title>privacy_access_levels (107,031 samples, 0.13%)</title><rect x="27.0908%" y="165" width="0.1348%" height="15" fill="rgb(250,191,14)"/><text x="27.3408%" y="175.50"></text></g><g><title>privacy_checking_modules (339,653 samples, 0.43%)</title><rect x="27.2256%" y="165" width="0.4278%" height="15" fill="rgb(239,60,40)"/><text x="27.4756%" y="175.50"></text></g><g><title>check_mod_privacy (338,393 samples, 0.43%)</title><rect x="27.2272%" y="149" width="0.4262%" height="15" fill="rgb(206,27,48)"/><text x="27.4772%" y="159.50"></text></g><g><title>misc_checking_3 (1,614,227 samples, 2.03%)</title><rect x="25.6363%" y="181" width="2.0331%" height="15" fill="rgb(225,35,8)"/><text x="25.8863%" y="191.50">m..</text></g><g><title>impl_parent (875,888 samples, 1.10%)</title><rect x="29.8444%" y="117" width="1.1032%" height="15" fill="rgb(250,213,24)"/><text x="30.0944%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (448,555 samples, 0.56%)</title><rect x="30.3827%" y="101" width="0.5650%" height="15" fill="rgb(247,123,22)"/><text x="30.6327%" y="111.50"></text></g><g><title>impl_trait_ref (1,622,232 samples, 2.04%)</title><rect x="30.9476%" y="117" width="2.0432%" height="15" fill="rgb(231,138,38)"/><text x="31.1976%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,186,636 samples, 1.49%)</title><rect x="31.4963%" y="101" width="1.4946%" height="15" fill="rgb(231,145,46)"/><text x="31.7463%" y="111.50"></text></g><g><title>coherent_trait (4,536,727 samples, 5.71%)</title><rect x="27.7189%" y="149" width="5.7140%" height="15" fill="rgb(251,118,11)"/><text x="27.9689%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (4,417,395 samples, 5.56%)</title><rect x="27.8692%" y="133" width="5.5637%" height="15" fill="rgb(217,147,25)"/><text x="28.1192%" y="143.50">special..</text></g><g><title>trait_impls_of (347,363 samples, 0.44%)</title><rect x="32.9954%" y="117" width="0.4375%" height="15" fill="rgb(247,81,37)"/><text x="33.2454%" y="127.50"></text></g><g><title>implementations_of_trait (86,521 samples, 0.11%)</title><rect x="33.3239%" y="101" width="0.1090%" height="15" fill="rgb(209,12,38)"/><text x="33.5739%" y="111.50"></text></g><g><title>coherence_checking (4,573,708 samples, 5.76%)</title><rect x="27.7008%" y="165" width="5.7606%" height="15" fill="rgb(227,1,9)"/><text x="27.9508%" y="175.50">coheren..</text></g><g><title>associated_item (137,081 samples, 0.17%)</title><rect x="42.0707%" y="101" width="0.1727%" height="15" fill="rgb(248,47,43)"/><text x="42.3207%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (103,881 samples, 0.13%)</title><rect x="42.1125%" y="85" width="0.1308%" height="15" fill="rgb(221,10,30)"/><text x="42.3625%" y="95.50"></text></g><g><title>associated_items (205,891 samples, 0.26%)</title><rect x="41.9944%" y="117" width="0.2593%" height="15" fill="rgb(210,229,1)"/><text x="42.2444%" y="127.50"></text></g><g><title>dropck_outlives (222,712 samples, 0.28%)</title><rect x="42.2849%" y="117" width="0.2805%" height="15" fill="rgb(222,148,37)"/><text x="42.5349%" y="127.50"></text></g><g><title>specializes (82,631 samples, 0.10%)</title><rect x="43.2758%" y="101" width="0.1041%" height="15" fill="rgb(234,67,33)"/><text x="43.5258%" y="111.50"></text></g><g><title>trait_impls_of (100,870 samples, 0.13%)</title><rect x="43.3851%" y="101" width="0.1270%" height="15" fill="rgb(247,98,35)"/><text x="43.6351%" y="111.50"></text></g><g><title>evaluate_obligation (750,359 samples, 0.95%)</title><rect x="42.5681%" y="117" width="0.9451%" height="15" fill="rgb(247,138,52)"/><text x="42.8181%" y="127.50"></text></g><g><title>evaluate_obligation (128,571 samples, 0.16%)</title><rect x="43.9120%" y="101" width="0.1619%" height="15" fill="rgb(213,79,30)"/><text x="44.1620%" y="111.50"></text></g><g><title>method_autoderef_steps (254,862 samples, 0.32%)</title><rect x="43.7667%" y="117" width="0.3210%" height="15" fill="rgb(246,177,23)"/><text x="44.0167%" y="127.50"></text></g><g><title>predicates_of (129,353 samples, 0.16%)</title><rect x="44.1352%" y="117" width="0.1629%" height="15" fill="rgb(230,62,27)"/><text x="44.3852%" y="127.50"></text></g><g><title>predicates_defined_on (81,512 samples, 0.10%)</title><rect x="44.1955%" y="101" width="0.1027%" height="15" fill="rgb(216,154,8)"/><text x="44.4455%" y="111.50"></text></g><g><title>item_bodies_checking (8,678,222 samples, 10.93%)</title><rect x="33.4796%" y="165" width="10.9302%" height="15" fill="rgb(244,35,45)"/><text x="33.7296%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (8,676,542 samples, 10.93%)</title><rect x="33.4817%" y="149" width="10.9281%" height="15" fill="rgb(251,115,12)"/><text x="33.7317%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (8,650,572 samples, 10.90%)</title><rect x="33.5144%" y="133" width="10.8954%" height="15" fill="rgb(240,54,50)"/><text x="33.7644%" y="143.50">typeck</text></g><g><title>item_types_checking (451,385 samples, 0.57%)</title><rect x="44.4098%" y="165" width="0.5685%" height="15" fill="rgb(233,84,52)"/><text x="44.6598%" y="175.50"></text></g><g><title>check_mod_item_types (449,085 samples, 0.57%)</title><rect x="44.4127%" y="149" width="0.5656%" height="15" fill="rgb(207,117,47)"/><text x="44.6627%" y="159.50"></text></g><g><title>fn_sig (208,921 samples, 0.26%)</title><rect x="45.1354%" y="133" width="0.2631%" height="15" fill="rgb(249,43,39)"/><text x="45.3854%" y="143.50"></text></g><g><title>named_region_map (205,442 samples, 0.26%)</title><rect x="45.4644%" y="117" width="0.2588%" height="15" fill="rgb(209,38,44)"/><text x="45.7144%" y="127.50"></text></g><g><title>resolve_lifetimes (192,542 samples, 0.24%)</title><rect x="45.4806%" y="101" width="0.2425%" height="15" fill="rgb(236,212,23)"/><text x="45.7306%" y="111.50"></text></g><g><title>generics_of (270,402 samples, 0.34%)</title><rect x="45.3985%" y="133" width="0.3406%" height="15" fill="rgb(242,79,21)"/><text x="45.6485%" y="143.50"></text></g><g><title>item_bounds (127,711 samples, 0.16%)</title><rect x="45.7929%" y="133" width="0.1609%" height="15" fill="rgb(211,96,35)"/><text x="46.0429%" y="143.50"></text></g><g><title>explicit_predicates_of (116,851 samples, 0.15%)</title><rect x="46.0329%" y="101" width="0.1472%" height="15" fill="rgb(253,215,40)"/><text x="46.2829%" y="111.50"></text></g><g><title>predicates_of (205,263 samples, 0.26%)</title><rect x="45.9538%" y="133" width="0.2585%" height="15" fill="rgb(211,81,21)"/><text x="46.2038%" y="143.50"></text></g><g><title>predicates_defined_on (182,003 samples, 0.23%)</title><rect x="45.9831%" y="117" width="0.2292%" height="15" fill="rgb(208,190,38)"/><text x="46.2331%" y="127.50"></text></g><g><title>type_collecting (1,149,862 samples, 1.45%)</title><rect x="44.9797%" y="165" width="1.4483%" height="15" fill="rgb(235,213,38)"/><text x="45.2297%" y="175.50"></text></g><g><title>collect_mod_item_types (1,144,332 samples, 1.44%)</title><rect x="44.9866%" y="149" width="1.4413%" height="15" fill="rgb(237,122,38)"/><text x="45.2366%" y="159.50"></text></g><g><title>type_of (107,851 samples, 0.14%)</title><rect x="46.2921%" y="133" width="0.1358%" height="15" fill="rgb(244,218,35)"/><text x="46.5421%" y="143.50"></text></g><g><title>evaluate_obligation (182,212 samples, 0.23%)</title><rect x="47.6877%" y="133" width="0.2295%" height="15" fill="rgb(240,68,47)"/><text x="47.9377%" y="143.50"></text></g><g><title>implied_outlives_bounds (138,045 samples, 0.17%)</title><rect x="47.9172%" y="133" width="0.1739%" height="15" fill="rgb(210,16,53)"/><text x="48.1672%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,386,566 samples, 1.75%)</title><rect x="46.5449%" y="149" width="1.7464%" height="15" fill="rgb(235,124,12)"/><text x="46.7949%" y="159.50"></text></g><g><title>evaluate_obligation (135,032 samples, 0.17%)</title><rect x="48.7845%" y="133" width="0.1701%" height="15" fill="rgb(224,169,11)"/><text x="49.0345%" y="143.50"></text></g><g><title>param_env (90,792 samples, 0.11%)</title><rect x="48.9959%" y="133" width="0.1144%" height="15" fill="rgb(250,166,2)"/><text x="49.2459%" y="143.50"></text></g><g><title>check_item_well_formed (776,407 samples, 0.98%)</title><rect x="48.2913%" y="149" width="0.9779%" height="15" fill="rgb(242,216,29)"/><text x="48.5413%" y="159.50"></text></g><g><title>evaluate_obligation (145,542 samples, 0.18%)</title><rect x="50.8606%" y="133" width="0.1833%" height="15" fill="rgb(230,116,27)"/><text x="51.1106%" y="143.50"></text></g><g><title>implied_outlives_bounds (196,511 samples, 0.25%)</title><rect x="51.0439%" y="133" width="0.2475%" height="15" fill="rgb(228,99,48)"/><text x="51.2939%" y="143.50"></text></g><g><title>evaluate_obligation (139,091 samples, 0.18%)</title><rect x="51.4659%" y="117" width="0.1752%" height="15" fill="rgb(253,11,6)"/><text x="51.7159%" y="127.50"></text></g><g><title>object_safety_violations (411,755 samples, 0.52%)</title><rect x="51.3027%" y="133" width="0.5186%" height="15" fill="rgb(247,143,39)"/><text x="51.5527%" y="143.50"></text></g><g><title>param_env (97,371 samples, 0.12%)</title><rect x="51.8240%" y="133" width="0.1226%" height="15" fill="rgb(236,97,10)"/><text x="52.0740%" y="143.50"></text></g><g><title>analysis (29,824,847 samples, 37.56%)</title><rect x="14.5785%" y="197" width="37.5645%" height="15" fill="rgb(233,208,19)"/><text x="14.8285%" y="207.50">analysis</text></g><g><title>type_check_crate (19,431,166 samples, 24.47%)</title><rect x="27.6694%" y="181" width="24.4736%" height="15" fill="rgb(216,164,2)"/><text x="27.9194%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,535,799 samples, 5.71%)</title><rect x="46.4301%" y="165" width="5.7128%" height="15" fill="rgb(220,129,5)"/><text x="46.6801%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (2,281,714 samples, 2.87%)</title><rect x="49.2692%" y="149" width="2.8738%" height="15" fill="rgb(242,17,10)"/><text x="49.5192%" y="159.50">ch..</text></g><g><title>is_unpin_raw (81,341 samples, 0.10%)</title><rect x="53.4221%" y="149" width="0.1024%" height="15" fill="rgb(242,107,0)"/><text x="53.6721%" y="159.50"></text></g><g><title>fn_abi_of_instance (212,462 samples, 0.27%)</title><rect x="53.3175%" y="165" width="0.2676%" height="15" fill="rgb(251,28,31)"/><text x="53.5675%" y="175.50"></text></g><g><title>codegen_module (706,077 samples, 0.89%)</title><rect x="52.7310%" y="181" width="0.8893%" height="15" fill="rgb(233,223,10)"/><text x="52.9810%" y="191.50"></text></g><g><title>optimized_mir (189,662 samples, 0.24%)</title><rect x="53.7542%" y="133" width="0.2389%" height="15" fill="rgb(215,21,27)"/><text x="54.0042%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (269,433 samples, 0.34%)</title><rect x="53.6568%" y="149" width="0.3394%" height="15" fill="rgb(232,23,21)"/><text x="53.9068%" y="159.50"></text></g><g><title>monomorphization_collector (291,743 samples, 0.37%)</title><rect x="53.6543%" y="165" width="0.3675%" height="15" fill="rgb(244,5,23)"/><text x="53.9043%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (346,064 samples, 0.44%)</title><rect x="53.6207%" y="181" width="0.4359%" height="15" fill="rgb(226,81,46)"/><text x="53.8707%" y="191.50"></text></g><g><title>codegen_crate (1,534,337 samples, 1.93%)</title><rect x="52.1498%" y="197" width="1.9325%" height="15" fill="rgb(247,70,30)"/><text x="52.3998%" y="207.50">c..</text></g><g><title>codegen_module_optimize (3,542,247 samples, 4.46%)</title><rect x="54.0823%" y="197" width="4.4615%" height="15" fill="rgb(212,68,19)"/><text x="54.3323%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (2,893,911 samples, 3.64%)</title><rect x="54.8989%" y="181" width="3.6449%" height="15" fill="rgb(240,187,13)"/><text x="55.1489%" y="191.50">LLVM..</text></g><g><title>LLVM_lto_optimize (1,582,417 samples, 1.99%)</title><rect x="59.0736%" y="181" width="1.9931%" height="15" fill="rgb(223,113,26)"/><text x="59.3236%" y="191.50">L..</text></g><g><title>LLVM_module_codegen (4,930,383 samples, 6.21%)</title><rect x="61.0666%" y="181" width="6.2098%" height="15" fill="rgb(206,192,2)"/><text x="61.3166%" y="191.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (4,837,551 samples, 6.09%)</title><rect x="61.1836%" y="165" width="6.0929%" height="15" fill="rgb(241,108,4)"/><text x="61.4336%" y="175.50">LLVM_mod..</text></g><g><title>codegen_module_perform_lto (6,982,974 samples, 8.80%)</title><rect x="58.5438%" y="197" width="8.7951%" height="15" fill="rgb(247,173,49)"/><text x="58.7938%" y="207.50">codegen_modu..</text></g><g><title>macro_expand_crate (5,947,913 samples, 7.49%)</title><rect x="67.6633%" y="181" width="7.4914%" height="15" fill="rgb(224,114,35)"/><text x="67.9133%" y="191.50">macro_expa..</text></g><g><title>expand_crate (5,935,963 samples, 7.48%)</title><rect x="67.6784%" y="165" width="7.4764%" height="15" fill="rgb(245,159,27)"/><text x="67.9284%" y="175.50">expand_cra..</text></g><g><title>metadata_register_crate (165,980 samples, 0.21%)</title><rect x="74.9457%" y="149" width="0.2091%" height="15" fill="rgb(245,172,44)"/><text x="75.1957%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (120,931 samples, 0.15%)</title><rect x="75.1576%" y="181" width="0.1523%" height="15" fill="rgb(236,23,11)"/><text x="75.4076%" y="191.50"></text></g><g><title>finalize_macro_resolutions (100,091 samples, 0.13%)</title><rect x="75.3463%" y="165" width="0.1261%" height="15" fill="rgb(205,117,38)"/><text x="75.5963%" y="175.50"></text></g><g><title>late_resolve_crate (600,756 samples, 0.76%)</title><rect x="75.4724%" y="165" width="0.7567%" height="15" fill="rgb(237,72,25)"/><text x="75.7224%" y="175.50"></text></g><g><title>configure_and_expand (7,103,715 samples, 8.95%)</title><rect x="67.3388%" y="197" width="8.9471%" height="15" fill="rgb(244,70,9)"/><text x="67.5888%" y="207.50">configure_and..</text></g><g><title>resolve_crate (774,998 samples, 0.98%)</title><rect x="75.3099%" y="181" width="0.9761%" height="15" fill="rgb(217,125,39)"/><text x="75.5599%" y="191.50"></text></g><g><title>early_lint_checks (159,552 samples, 0.20%)</title><rect x="76.4024%" y="197" width="0.2010%" height="15" fill="rgb(235,36,10)"/><text x="76.6524%" y="207.50"></text></g><g><title>free_global_ctxt (1,372,614 samples, 1.73%)</title><rect x="76.6033%" y="197" width="1.7288%" height="15" fill="rgb(251,123,47)"/><text x="76.8533%" y="207.50"></text></g><g><title>exported_symbols (92,591 samples, 0.12%)</title><rect x="79.1453%" y="181" width="0.1166%" height="15" fill="rgb(221,13,13)"/><text x="79.3953%" y="191.50"></text></g><g><title>is_sized_raw (206,561 samples, 0.26%)</title><rect x="80.6646%" y="149" width="0.2602%" height="15" fill="rgb(238,131,9)"/><text x="80.9146%" y="159.50"></text></g><g><title>evaluate_obligation (173,771 samples, 0.22%)</title><rect x="80.7059%" y="133" width="0.2189%" height="15" fill="rgb(211,50,8)"/><text x="80.9559%" y="143.50"></text></g><g><title>layout_of (546,745 samples, 0.69%)</title><rect x="80.4036%" y="165" width="0.6886%" height="15" fill="rgb(245,182,24)"/><text x="80.6536%" y="175.50"></text></g><g><title>is_copy_raw (226,442 samples, 0.29%)</title><rect x="82.3007%" y="133" width="0.2852%" height="15" fill="rgb(242,14,37)"/><text x="82.5507%" y="143.50"></text></g><g><title>evaluate_obligation (204,222 samples, 0.26%)</title><rect x="82.3286%" y="117" width="0.2572%" height="15" fill="rgb(246,228,12)"/><text x="82.5786%" y="127.50"></text></g><g><title>needs_drop_raw (264,944 samples, 0.33%)</title><rect x="82.2741%" y="149" width="0.3337%" height="15" fill="rgb(213,55,15)"/><text x="82.5241%" y="159.50"></text></g><g><title>optimized_mir (2,662,380 samples, 3.35%)</title><rect x="79.3117%" y="181" width="3.3533%" height="15" fill="rgb(209,9,3)"/><text x="79.5617%" y="191.50">opt..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,248,643 samples, 1.57%)</title><rect x="81.0923%" y="165" width="1.5727%" height="15" fill="rgb(230,59,30)"/><text x="81.3423%" y="175.50"></text></g><g><title>generate_crate_metadata (3,463,197 samples, 4.36%)</title><rect x="78.3322%" y="197" width="4.3619%" height="15" fill="rgb(209,121,21)"/><text x="78.5822%" y="207.50">gener..</text></g><g><title>hir_lowering (1,076,622 samples, 1.36%)</title><rect x="82.6941%" y="197" width="1.3560%" height="15" fill="rgb(220,109,13)"/><text x="82.9441%" y="207.50"></text></g><g><title>finish_ongoing_codegen (9,344,479 samples, 11.77%)</title><rect x="84.0660%" y="181" width="11.7694%" height="15" fill="rgb(232,18,1)"/><text x="84.3160%" y="191.50">finish_ongoing_co..</text></g><g><title>link_crate (590,487 samples, 0.74%)</title><rect x="95.8354%" y="181" width="0.7437%" height="15" fill="rgb(215,41,42)"/><text x="96.0854%" y="191.50"></text></g><g><title>link_binary (584,846 samples, 0.74%)</title><rect x="95.8425%" y="165" width="0.7366%" height="15" fill="rgb(224,123,36)"/><text x="96.0925%" y="175.50"></text></g><g><title>link_rlib (366,934 samples, 0.46%)</title><rect x="96.1169%" y="149" width="0.4622%" height="15" fill="rgb(240,125,3)"/><text x="96.3669%" y="159.50"></text></g><g><title>link (9,954,636 samples, 12.54%)</title><rect x="84.0501%" y="197" width="12.5379%" height="15" fill="rgb(205,98,50)"/><text x="84.3001%" y="207.50">link</text></g><g><title>parse_crate (1,677,358 samples, 2.11%)</title><rect x="96.5880%" y="197" width="2.1126%" height="15" fill="rgb(205,185,37)"/><text x="96.8380%" y="207.50">p..</text></g><g><title>prepare_outputs (187,772 samples, 0.24%)</title><rect x="98.7064%" y="197" width="0.2365%" height="15" fill="rgb(238,207,15)"/><text x="98.9564%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (443,515 samples, 0.56%)</title><rect x="98.9429%" y="197" width="0.5586%" height="15" fill="rgb(213,199,42)"/><text x="99.1929%" y="207.50"></text></g><g><title>all (79,396,443 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (79,396,443 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (336,243 samples, 0.42%)</title><rect x="99.5765%" y="197" width="0.4235%" height="15" fill="rgb(241,35,35)"/><text x="99.8265%" y="207.50"></text></g></svg></svg>