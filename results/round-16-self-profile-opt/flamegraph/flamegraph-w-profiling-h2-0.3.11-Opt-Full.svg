<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,624,922,643 samples, 8.37%)</title><rect x="0.0157%" y="197" width="8.3669%" height="15" fill="rgb(227,0,7)"/><text x="0.2657%" y="207.50">LLVM_passes</text></g><g><title>thir_body (39,984,869 samples, 0.21%)</title><rect x="11.9581%" y="85" width="0.2059%" height="15" fill="rgb(217,0,24)"/><text x="12.2081%" y="95.50"></text></g><g><title>mir_const (198,110,561 samples, 1.02%)</title><rect x="11.1460%" y="133" width="1.0201%" height="15" fill="rgb(221,193,54)"/><text x="11.3960%" y="143.50"></text></g><g><title>unsafety_check_result (175,769,649 samples, 0.91%)</title><rect x="11.2610%" y="117" width="0.9051%" height="15" fill="rgb(248,212,6)"/><text x="11.5110%" y="127.50"></text></g><g><title>mir_built (159,559,936 samples, 0.82%)</title><rect x="11.3445%" y="101" width="0.8216%" height="15" fill="rgb(208,68,35)"/><text x="11.5945%" y="111.50"></text></g><g><title>mir_const (41,052,239 samples, 0.21%)</title><rect x="12.2432%" y="117" width="0.2114%" height="15" fill="rgb(232,128,0)"/><text x="12.4932%" y="127.50"></text></g><g><title>unsafety_check_result (36,174,457 samples, 0.19%)</title><rect x="12.2684%" y="101" width="0.1863%" height="15" fill="rgb(207,160,47)"/><text x="12.5184%" y="111.50"></text></g><g><title>mir_built (32,911,459 samples, 0.17%)</title><rect x="12.2852%" y="85" width="0.1695%" height="15" fill="rgb(228,23,34)"/><text x="12.5352%" y="95.50"></text></g><g><title>mir_const_qualif (56,095,341 samples, 0.29%)</title><rect x="12.1661%" y="133" width="0.2888%" height="15" fill="rgb(218,30,26)"/><text x="12.4161%" y="143.50"></text></g><g><title>mir_promoted (282,946,319 samples, 1.46%)</title><rect x="10.9981%" y="149" width="1.4569%" height="15" fill="rgb(220,122,19)"/><text x="11.2481%" y="159.50"></text></g><g><title>type_op_prove_predicate (47,976,870 samples, 0.25%)</title><rect x="12.5308%" y="149" width="0.2470%" height="15" fill="rgb(250,228,42)"/><text x="12.7808%" y="159.50"></text></g><g><title>MIR_borrow_checking (845,630,195 samples, 4.35%)</title><rect x="8.4237%" y="181" width="4.3543%" height="15" fill="rgb(240,193,28)"/><text x="8.6737%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (841,283,438 samples, 4.33%)</title><rect x="8.4461%" y="165" width="4.3319%" height="15" fill="rgb(216,20,37)"/><text x="8.6961%" y="175.50">mir_b..</text></g><g><title>misc_checking_1 (35,615,060 samples, 0.18%)</title><rect x="12.9070%" y="181" width="0.1834%" height="15" fill="rgb(206,188,39)"/><text x="13.1570%" y="191.50"></text></g><g><title>misc_checking_2 (36,789,513 samples, 0.19%)</title><rect x="13.0904%" y="181" width="0.1894%" height="15" fill="rgb(217,207,13)"/><text x="13.3404%" y="191.50"></text></g><g><title>match_checking (20,916,469 samples, 0.11%)</title><rect x="13.1721%" y="165" width="0.1077%" height="15" fill="rgb(231,73,38)"/><text x="13.4221%" y="175.50"></text></g><g><title>check_match (19,680,602 samples, 0.10%)</title><rect x="13.1785%" y="149" width="0.1013%" height="15" fill="rgb(225,20,46)"/><text x="13.4285%" y="159.50"></text></g><g><title>eval_to_allocation_raw (48,255,172 samples, 0.25%)</title><rect x="13.5141%" y="133" width="0.2485%" height="15" fill="rgb(210,31,41)"/><text x="13.7641%" y="143.50"></text></g><g><title>eval_to_allocation_raw (47,804,637 samples, 0.25%)</title><rect x="13.5164%" y="117" width="0.2462%" height="15" fill="rgb(221,200,47)"/><text x="13.7664%" y="127.50"></text></g><g><title>crate_lints (104,781,278 samples, 0.54%)</title><rect x="13.4088%" y="149" width="0.5395%" height="15" fill="rgb(226,26,5)"/><text x="13.6588%" y="159.50"></text></g><g><title>lint_checking (126,998,051 samples, 0.65%)</title><rect x="13.4088%" y="165" width="0.6539%" height="15" fill="rgb(249,33,26)"/><text x="13.6588%" y="175.50"></text></g><g><title>module_lints (22,212,543 samples, 0.11%)</title><rect x="13.9484%" y="149" width="0.1144%" height="15" fill="rgb(235,183,28)"/><text x="14.1984%" y="159.50"></text></g><g><title>lint_mod (22,161,523 samples, 0.11%)</title><rect x="13.9486%" y="133" width="0.1141%" height="15" fill="rgb(221,5,38)"/><text x="14.1986%" y="143.50"></text></g><g><title>privacy_checking_modules (32,767,069 samples, 0.17%)</title><rect x="14.1232%" y="165" width="0.1687%" height="15" fill="rgb(247,18,42)"/><text x="14.3732%" y="175.50"></text></g><g><title>check_mod_privacy (32,724,749 samples, 0.17%)</title><rect x="14.1234%" y="149" width="0.1685%" height="15" fill="rgb(241,131,45)"/><text x="14.3734%" y="159.50"></text></g><g><title>misc_checking_3 (196,865,577 samples, 1.01%)</title><rect x="13.2798%" y="181" width="1.0137%" height="15" fill="rgb(249,31,29)"/><text x="13.5298%" y="191.50"></text></g><g><title>coherent_trait (31,640,996 samples, 0.16%)</title><rect x="14.3061%" y="149" width="0.1629%" height="15" fill="rgb(225,111,53)"/><text x="14.5561%" y="159.50"></text></g><g><title>specialization_graph_of (30,661,616 samples, 0.16%)</title><rect x="14.3111%" y="133" width="0.1579%" height="15" fill="rgb(238,160,17)"/><text x="14.5611%" y="143.50"></text></g><g><title>coherence_checking (32,577,377 samples, 0.17%)</title><rect x="14.3058%" y="165" width="0.1677%" height="15" fill="rgb(214,148,48)"/><text x="14.5558%" y="175.50"></text></g><g><title>evaluate_obligation (42,354,416 samples, 0.22%)</title><rect x="17.3885%" y="117" width="0.2181%" height="15" fill="rgb(232,36,49)"/><text x="17.6385%" y="127.50"></text></g><g><title>typeck (238,096,525 samples, 1.23%)</title><rect x="17.6836%" y="117" width="1.2260%" height="15" fill="rgb(209,103,24)"/><text x="17.9336%" y="127.50"></text></g><g><title>item_bodies_checking (861,198,585 samples, 4.43%)</title><rect x="14.4777%" y="165" width="4.4344%" height="15" fill="rgb(229,88,8)"/><text x="14.7277%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (861,194,625 samples, 4.43%)</title><rect x="14.4777%" y="149" width="4.4344%" height="15" fill="rgb(213,181,19)"/><text x="14.7277%" y="159.50">typec..</text></g><g><title>typeck (857,109,928 samples, 4.41%)</title><rect x="14.4988%" y="133" width="4.4134%" height="15" fill="rgb(254,191,54)"/><text x="14.7488%" y="143.50">typeck</text></g><g><title>mir_built (28,950,158 samples, 0.15%)</title><rect x="19.0797%" y="53" width="0.1491%" height="15" fill="rgb(241,83,37)"/><text x="19.3297%" y="63.50"></text></g><g><title>typeck (27,829,845 samples, 0.14%)</title><rect x="19.0855%" y="37" width="0.1433%" height="15" fill="rgb(233,36,39)"/><text x="19.3355%" y="47.50"></text></g><g><title>mir_const (33,619,518 samples, 0.17%)</title><rect x="19.0739%" y="85" width="0.1731%" height="15" fill="rgb(226,3,54)"/><text x="19.3239%" y="95.50"></text></g><g><title>unsafety_check_result (32,547,847 samples, 0.17%)</title><rect x="19.0794%" y="69" width="0.1676%" height="15" fill="rgb(245,192,40)"/><text x="19.3294%" y="79.50"></text></g><g><title>mir_promoted (33,743,339 samples, 0.17%)</title><rect x="19.0733%" y="101" width="0.1737%" height="15" fill="rgb(238,167,29)"/><text x="19.3233%" y="111.50"></text></g><g><title>type_of (49,512,221 samples, 0.25%)</title><rect x="18.9959%" y="133" width="0.2549%" height="15" fill="rgb(232,182,51)"/><text x="19.2459%" y="143.50"></text></g><g><title>mir_borrowck (49,344,561 samples, 0.25%)</title><rect x="18.9968%" y="117" width="0.2541%" height="15" fill="rgb(231,60,39)"/><text x="19.2468%" y="127.50"></text></g><g><title>item_types_checking (212,653,040 samples, 1.09%)</title><rect x="18.9121%" y="165" width="1.0950%" height="15" fill="rgb(208,69,12)"/><text x="19.1621%" y="175.50"></text></g><g><title>check_mod_item_types (212,592,958 samples, 1.09%)</title><rect x="18.9124%" y="149" width="1.0947%" height="15" fill="rgb(235,93,37)"/><text x="19.1624%" y="159.50"></text></g><g><title>typeck (146,872,267 samples, 0.76%)</title><rect x="19.2508%" y="133" width="0.7563%" height="15" fill="rgb(213,116,39)"/><text x="19.5008%" y="143.50"></text></g><g><title>type_collecting (36,681,212 samples, 0.19%)</title><rect x="20.0078%" y="165" width="0.1889%" height="15" fill="rgb(222,207,29)"/><text x="20.2578%" y="175.50"></text></g><g><title>collect_mod_item_types (36,626,041 samples, 0.19%)</title><rect x="20.0081%" y="149" width="0.1886%" height="15" fill="rgb(206,96,30)"/><text x="20.2581%" y="159.50"></text></g><g><title>check_impl_item_well_formed (58,853,326 samples, 0.30%)</title><rect x="20.2251%" y="149" width="0.3030%" height="15" fill="rgb(218,138,4)"/><text x="20.4751%" y="159.50"></text></g><g><title>check_item_well_formed (34,750,266 samples, 0.18%)</title><rect x="20.5281%" y="149" width="0.1789%" height="15" fill="rgb(250,191,14)"/><text x="20.7781%" y="159.50"></text></g><g><title>analysis (2,394,089,411 samples, 12.33%)</title><rect x="8.3827%" y="197" width="12.3275%" height="15" fill="rgb(239,60,40)"/><text x="8.6327%" y="207.50">analysis</text></g><g><title>type_check_crate (1,246,155,944 samples, 6.42%)</title><rect x="14.2935%" y="181" width="6.4166%" height="15" fill="rgb(206,27,48)"/><text x="14.5435%" y="191.50">type_che..</text></g><g><title>wf_checking (99,465,360 samples, 0.51%)</title><rect x="20.1980%" y="165" width="0.5122%" height="15" fill="rgb(225,35,8)"/><text x="20.4480%" y="175.50"></text></g><g><title>fn_abi_of_instance (75,332,357 samples, 0.39%)</title><rect x="23.1766%" y="165" width="0.3879%" height="15" fill="rgb(250,213,24)"/><text x="23.4266%" y="175.50"></text></g><g><title>codegen_module (563,924,299 samples, 2.90%)</title><rect x="20.7225%" y="181" width="2.9037%" height="15" fill="rgb(247,123,22)"/><text x="20.9725%" y="191.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (60,610,832 samples, 0.31%)</title><rect x="24.2539%" y="117" width="0.3121%" height="15" fill="rgb(231,138,38)"/><text x="24.5039%" y="127.50"></text></g><g><title>optimized_mir (151,301,644 samples, 0.78%)</title><rect x="23.8670%" y="133" width="0.7791%" height="15" fill="rgb(231,145,46)"/><text x="24.1170%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (21,416,585 samples, 0.11%)</title><rect x="24.6930%" y="117" width="0.1103%" height="15" fill="rgb(251,118,11)"/><text x="24.9430%" y="127.50"></text></g><g><title>resolve_instance (42,140,382 samples, 0.22%)</title><rect x="24.6460%" y="133" width="0.2170%" height="15" fill="rgb(217,147,25)"/><text x="24.8960%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (258,444,221 samples, 1.33%)</title><rect x="23.6272%" y="149" width="1.3308%" height="15" fill="rgb(247,81,37)"/><text x="23.8772%" y="159.50"></text></g><g><title>monomorphization_collector (260,377,612 samples, 1.34%)</title><rect x="23.6272%" y="165" width="1.3407%" height="15" fill="rgb(209,12,38)"/><text x="23.8772%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (19,471,322 samples, 0.10%)</title><rect x="24.9680%" y="149" width="0.1003%" height="15" fill="rgb(227,1,9)"/><text x="25.2180%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (289,163,908 samples, 1.49%)</title><rect x="23.6262%" y="181" width="1.4889%" height="15" fill="rgb(248,47,43)"/><text x="23.8762%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (28,598,583 samples, 0.15%)</title><rect x="24.9679%" y="165" width="0.1473%" height="15" fill="rgb(221,10,30)"/><text x="25.2179%" y="175.50"></text></g><g><title>codegen_crate (855,623,715 samples, 4.41%)</title><rect x="20.7102%" y="197" width="4.4057%" height="15" fill="rgb(210,229,1)"/><text x="20.9602%" y="207.50">codeg..</text></g><g><title>codegen_module_optimize (4,603,967,322 samples, 23.71%)</title><rect x="25.1159%" y="197" width="23.7064%" height="15" fill="rgb(222,148,37)"/><text x="25.3659%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,340,537,968 samples, 22.35%)</title><rect x="26.4723%" y="181" width="22.3500%" height="15" fill="rgb(234,67,33)"/><text x="26.7223%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (3,868,161,693 samples, 19.92%)</title><rect x="49.7019%" y="181" width="19.9176%" height="15" fill="rgb(247,98,35)"/><text x="49.9519%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (3,158,317,922 samples, 16.26%)</title><rect x="69.6195%" y="181" width="16.2626%" height="15" fill="rgb(247,138,52)"/><text x="69.8695%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,127,892,331 samples, 16.11%)</title><rect x="69.7762%" y="165" width="16.1059%" height="15" fill="rgb(213,79,30)"/><text x="70.0262%" y="175.50">LLVM_module_codegen_emit_..</text></g><g><title>LLVM_thin_lto_import (802,883,605 samples, 4.13%)</title><rect x="85.8821%" y="181" width="4.1341%" height="15" fill="rgb(246,177,23)"/><text x="86.1321%" y="191.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (8,016,200,050 samples, 41.28%)</title><rect x="48.8223%" y="197" width="41.2764%" height="15" fill="rgb(230,62,27)"/><text x="49.0723%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (360,563,271 samples, 1.86%)</title><rect x="90.1512%" y="181" width="1.8566%" height="15" fill="rgb(216,154,8)"/><text x="90.4012%" y="191.50">m..</text></g><g><title>expand_crate (360,532,911 samples, 1.86%)</title><rect x="90.1514%" y="165" width="1.8564%" height="15" fill="rgb(244,35,45)"/><text x="90.4014%" y="175.50">e..</text></g><g><title>late_resolve_crate (43,612,657 samples, 0.22%)</title><rect x="92.0514%" y="165" width="0.2246%" height="15" fill="rgb(251,115,12)"/><text x="92.3014%" y="175.50"></text></g><g><title>configure_and_expand (431,683,789 samples, 2.22%)</title><rect x="90.0987%" y="197" width="2.2228%" height="15" fill="rgb(240,54,50)"/><text x="90.3487%" y="207.50">c..</text></g><g><title>resolve_crate (60,785,686 samples, 0.31%)</title><rect x="92.0085%" y="181" width="0.3130%" height="15" fill="rgb(233,84,52)"/><text x="92.2585%" y="191.50"></text></g><g><title>free_global_ctxt (84,617,037 samples, 0.44%)</title><rect x="92.4966%" y="197" width="0.4357%" height="15" fill="rgb(207,117,47)"/><text x="92.7466%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (67,665,338 samples, 0.35%)</title><rect x="93.6121%" y="165" width="0.3484%" height="15" fill="rgb(249,43,39)"/><text x="93.8621%" y="175.50"></text></g><g><title>optimized_mir (134,933,525 samples, 0.69%)</title><rect x="93.2727%" y="181" width="0.6948%" height="15" fill="rgb(209,38,44)"/><text x="93.5227%" y="191.50"></text></g><g><title>generate_crate_metadata (208,706,177 samples, 1.07%)</title><rect x="92.9323%" y="197" width="1.0747%" height="15" fill="rgb(236,212,23)"/><text x="93.1823%" y="207.50"></text></g><g><title>hir_lowering (96,969,412 samples, 0.50%)</title><rect x="94.0070%" y="197" width="0.4993%" height="15" fill="rgb(242,79,21)"/><text x="94.2570%" y="207.50"></text></g><g><title>finish_ongoing_codegen (1,021,051,016 samples, 5.26%)</title><rect x="94.5078%" y="181" width="5.2575%" height="15" fill="rgb(211,96,35)"/><text x="94.7578%" y="191.50">finish..</text></g><g><title>link_crate (20,342,013 samples, 0.10%)</title><rect x="99.7654%" y="181" width="0.1047%" height="15" fill="rgb(253,215,40)"/><text x="100.0154%" y="191.50"></text></g><g><title>link_binary (20,106,460 samples, 0.10%)</title><rect x="99.7666%" y="165" width="0.1035%" height="15" fill="rgb(211,81,21)"/><text x="100.0166%" y="175.50"></text></g><g><title>link (1,041,701,063 samples, 5.36%)</title><rect x="94.5063%" y="197" width="5.3638%" height="15" fill="rgb(208,190,38)"/><text x="94.7563%" y="207.50">link</text></g><g><title>all (19,420,775,742 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (19,420,775,742 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>