<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,212,757 samples, 6.37%)</title><rect x="2.0520%" y="277" width="6.3750%" height="15" fill="rgb(227,0,7)"/><text x="2.3020%" y="287.50">LLVM_pas..</text></g><g><title>codegen_generate_lto_work (120,691 samples, 0.18%)</title><rect x="8.2444%" y="261" width="0.1826%" height="15" fill="rgb(217,0,24)"/><text x="8.4944%" y="271.50"></text></g><g><title>LLVM_thin_lto_global_analysis (106,991 samples, 0.16%)</title><rect x="8.2651%" y="245" width="0.1619%" height="15" fill="rgb(221,193,54)"/><text x="8.5151%" y="255.50"></text></g><g><title>implied_outlives_bounds (128,042 samples, 0.19%)</title><rect x="12.7582%" y="229" width="0.1938%" height="15" fill="rgb(248,212,6)"/><text x="13.0082%" y="239.50"></text></g><g><title>mir_promoted (207,391 samples, 0.31%)</title><rect x="13.3927%" y="213" width="0.3138%" height="15" fill="rgb(208,68,35)"/><text x="13.6427%" y="223.50"></text></g><g><title>mir_const_qualif_const_arg (176,851 samples, 0.27%)</title><rect x="13.4389%" y="197" width="0.2676%" height="15" fill="rgb(232,128,0)"/><text x="13.6889%" y="207.50"></text></g><g><title>mir_const (142,600 samples, 0.22%)</title><rect x="13.4907%" y="181" width="0.2158%" height="15" fill="rgb(207,160,47)"/><text x="13.7407%" y="191.50"></text></g><g><title>unsafety_check_result_for_const_arg (83,910 samples, 0.13%)</title><rect x="13.5795%" y="165" width="0.1270%" height="15" fill="rgb(228,23,34)"/><text x="13.8295%" y="175.50"></text></g><g><title>mir_built (71,620 samples, 0.11%)</title><rect x="13.5981%" y="149" width="0.1084%" height="15" fill="rgb(218,30,26)"/><text x="13.8481%" y="159.50"></text></g><g><title>mir_borrowck_const_arg (466,554 samples, 0.71%)</title><rect x="13.0027%" y="229" width="0.7060%" height="15" fill="rgb(220,122,19)"/><text x="13.2527%" y="239.50"></text></g><g><title>param_env (363,425 samples, 0.55%)</title><rect x="14.4933%" y="197" width="0.5500%" height="15" fill="rgb(250,228,42)"/><text x="14.7433%" y="207.50"></text></g><g><title>item_attrs (118,192 samples, 0.18%)</title><rect x="15.3841%" y="165" width="0.1789%" height="15" fill="rgb(240,193,28)"/><text x="15.6341%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (114,702 samples, 0.17%)</title><rect x="15.3894%" y="149" width="0.1736%" height="15" fill="rgb(216,20,37)"/><text x="15.6394%" y="159.50"></text></g><g><title>codegen_fn_attrs (178,732 samples, 0.27%)</title><rect x="15.3028%" y="181" width="0.2705%" height="15" fill="rgb(206,188,39)"/><text x="15.5528%" y="191.50"></text></g><g><title>is_copy_raw (520,515 samples, 0.79%)</title><rect x="16.6036%" y="165" width="0.7877%" height="15" fill="rgb(217,207,13)"/><text x="16.8536%" y="175.50"></text></g><g><title>evaluate_obligation (496,065 samples, 0.75%)</title><rect x="16.6406%" y="149" width="0.7507%" height="15" fill="rgb(231,73,38)"/><text x="16.8906%" y="159.50"></text></g><g><title>trait_impls_of (313,293 samples, 0.47%)</title><rect x="16.9172%" y="133" width="0.4741%" height="15" fill="rgb(225,20,46)"/><text x="17.1672%" y="143.50"></text></g><g><title>implementations_of_trait (66,512 samples, 0.10%)</title><rect x="17.2906%" y="117" width="0.1006%" height="15" fill="rgb(210,31,41)"/><text x="17.5406%" y="127.50"></text></g><g><title>lint_levels (72,030 samples, 0.11%)</title><rect x="17.3913%" y="165" width="0.1090%" height="15" fill="rgb(221,200,47)"/><text x="17.6413%" y="175.50"></text></g><g><title>needs_drop_raw (170,022 samples, 0.26%)</title><rect x="17.5003%" y="165" width="0.2573%" height="15" fill="rgb(226,26,5)"/><text x="17.7503%" y="175.50"></text></g><g><title>is_copy_raw (151,241 samples, 0.23%)</title><rect x="17.5287%" y="149" width="0.2289%" height="15" fill="rgb(249,33,26)"/><text x="17.7787%" y="159.50"></text></g><g><title>evaluate_obligation (92,761 samples, 0.14%)</title><rect x="17.6172%" y="133" width="0.1404%" height="15" fill="rgb(235,183,28)"/><text x="17.8672%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (96,681 samples, 0.15%)</title><rect x="17.8670%" y="149" width="0.1463%" height="15" fill="rgb(221,5,38)"/><text x="18.1170%" y="159.50"></text></g><g><title>resolve_instance (207,702 samples, 0.31%)</title><rect x="17.7576%" y="165" width="0.3143%" height="15" fill="rgb(247,18,42)"/><text x="18.0076%" y="175.50"></text></g><g><title>thir_body (159,961 samples, 0.24%)</title><rect x="18.0811%" y="165" width="0.2421%" height="15" fill="rgb(241,131,45)"/><text x="18.3311%" y="175.50"></text></g><g><title>mir_const (2,848,273 samples, 4.31%)</title><rect x="14.0671%" y="213" width="4.3102%" height="15" fill="rgb(249,31,29)"/><text x="14.3171%" y="223.50">mir_c..</text></g><g><title>unsafety_check_result (2,203,186 samples, 3.33%)</title><rect x="15.0433%" y="197" width="3.3340%" height="15" fill="rgb(225,111,53)"/><text x="15.2933%" y="207.50">uns..</text></g><g><title>mir_built (1,852,982 samples, 2.80%)</title><rect x="15.5732%" y="181" width="2.8040%" height="15" fill="rgb(238,160,17)"/><text x="15.8232%" y="191.50">mi..</text></g><g><title>mir_promoted (3,101,126 samples, 4.69%)</title><rect x="13.7087%" y="229" width="4.6928%" height="15" fill="rgb(214,148,48)"/><text x="13.9587%" y="239.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (188,100 samples, 0.28%)</title><rect x="18.4015%" y="229" width="0.2846%" height="15" fill="rgb(232,36,49)"/><text x="18.6515%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (72,022 samples, 0.11%)</title><rect x="18.6861%" y="229" width="0.1090%" height="15" fill="rgb(209,103,24)"/><text x="18.9361%" y="239.50"></text></g><g><title>MIR_borrow_checking (7,354,252 samples, 11.13%)</title><rect x="8.7113%" y="261" width="11.1288%" height="15" fill="rgb(229,88,8)"/><text x="8.9613%" y="271.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (7,324,802 samples, 11.08%)</title><rect x="8.7559%" y="245" width="11.0843%" height="15" fill="rgb(213,181,19)"/><text x="9.0059%" y="255.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (633,279 samples, 0.96%)</title><rect x="18.8819%" y="229" width="0.9583%" height="15" fill="rgb(254,191,54)"/><text x="19.1319%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (135,021 samples, 0.20%)</title><rect x="19.8815%" y="245" width="0.2043%" height="15" fill="rgb(241,83,37)"/><text x="20.1315%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (132,761 samples, 0.20%)</title><rect x="19.8849%" y="229" width="0.2009%" height="15" fill="rgb(233,36,39)"/><text x="20.1349%" y="239.50"></text></g><g><title>MIR_effect_checking (163,522 samples, 0.25%)</title><rect x="19.8402%" y="261" width="0.2475%" height="15" fill="rgb(226,3,54)"/><text x="20.0902%" y="271.50"></text></g><g><title>hir_module_items (158,132 samples, 0.24%)</title><rect x="20.0876%" y="261" width="0.2393%" height="15" fill="rgb(245,192,40)"/><text x="20.3376%" y="271.50"></text></g><g><title>get_lang_items (95,572 samples, 0.14%)</title><rect x="20.7011%" y="213" width="0.1446%" height="15" fill="rgb(238,167,29)"/><text x="20.9511%" y="223.50"></text></g><g><title>codegen_fn_attrs (233,443 samples, 0.35%)</title><rect x="20.5774%" y="229" width="0.3533%" height="15" fill="rgb(232,182,51)"/><text x="20.8274%" y="239.50"></text></g><g><title>check_mod_attrs (370,994 samples, 0.56%)</title><rect x="20.3696%" y="245" width="0.5614%" height="15" fill="rgb(231,60,39)"/><text x="20.6196%" y="255.50"></text></g><g><title>lookup_deprecation_entry (105,191 samples, 0.16%)</title><rect x="21.2131%" y="229" width="0.1592%" height="15" fill="rgb(208,69,12)"/><text x="21.4631%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (264,443 samples, 0.40%)</title><rect x="21.0534%" y="245" width="0.4002%" height="15" fill="rgb(235,93,37)"/><text x="21.3034%" y="255.50"></text></g><g><title>misc_checking_1 (811,840 samples, 1.23%)</title><rect x="20.3275%" y="261" width="1.2285%" height="15" fill="rgb(213,116,39)"/><text x="20.5775%" y="271.50"></text></g><g><title>liveness_and_intrinsic_checking (208,483 samples, 0.32%)</title><rect x="21.5600%" y="245" width="0.3155%" height="15" fill="rgb(222,207,29)"/><text x="21.8100%" y="255.50"></text></g><g><title>check_mod_liveness (172,962 samples, 0.26%)</title><rect x="21.6137%" y="229" width="0.2617%" height="15" fill="rgb(206,96,30)"/><text x="21.8637%" y="239.50"></text></g><g><title>misc_checking_2 (397,085 samples, 0.60%)</title><rect x="21.5561%" y="261" width="0.6009%" height="15" fill="rgb(218,138,4)"/><text x="21.8061%" y="271.50"></text></g><g><title>match_checking (186,012 samples, 0.28%)</title><rect x="21.8755%" y="245" width="0.2815%" height="15" fill="rgb(250,191,14)"/><text x="22.1255%" y="255.50"></text></g><g><title>check_match (157,542 samples, 0.24%)</title><rect x="21.9186%" y="229" width="0.2384%" height="15" fill="rgb(239,60,40)"/><text x="22.1686%" y="239.50"></text></g><g><title>death_checking (122,332 samples, 0.19%)</title><rect x="22.2275%" y="245" width="0.1851%" height="15" fill="rgb(206,27,48)"/><text x="22.4775%" y="255.50"></text></g><g><title>crate_lints (530,016 samples, 0.80%)</title><rect x="22.4143%" y="229" width="0.8020%" height="15" fill="rgb(225,35,8)"/><text x="22.6643%" y="239.50"></text></g><g><title>param_env (165,682 samples, 0.25%)</title><rect x="22.9656%" y="213" width="0.2507%" height="15" fill="rgb(250,213,24)"/><text x="23.2156%" y="223.50"></text></g><g><title>predicates_of (75,121 samples, 0.11%)</title><rect x="23.1026%" y="197" width="0.1137%" height="15" fill="rgb(247,123,22)"/><text x="23.3526%" y="207.50"></text></g><g><title>lint_checking (586,506 samples, 0.89%)</title><rect x="22.4126%" y="245" width="0.8875%" height="15" fill="rgb(231,138,38)"/><text x="22.6626%" y="255.50"></text></g><g><title>privacy_checking_modules (168,462 samples, 0.25%)</title><rect x="23.3702%" y="245" width="0.2549%" height="15" fill="rgb(231,145,46)"/><text x="23.6202%" y="255.50"></text></g><g><title>check_mod_privacy (167,472 samples, 0.25%)</title><rect x="23.3717%" y="229" width="0.2534%" height="15" fill="rgb(251,118,11)"/><text x="23.6217%" y="239.50"></text></g><g><title>misc_checking_3 (986,951 samples, 1.49%)</title><rect x="22.1570%" y="261" width="1.4935%" height="15" fill="rgb(217,147,25)"/><text x="22.4070%" y="271.50"></text></g><g><title>associated_item (438,544 samples, 0.66%)</title><rect x="29.7956%" y="181" width="0.6636%" height="15" fill="rgb(247,81,37)"/><text x="30.0456%" y="191.50"></text></g><g><title>metadata_decode_entry_associated_item (335,273 samples, 0.51%)</title><rect x="29.9519%" y="165" width="0.5074%" height="15" fill="rgb(209,12,38)"/><text x="30.2019%" y="175.50"></text></g><g><title>associated_items (616,806 samples, 0.93%)</title><rect x="29.5606%" y="197" width="0.9334%" height="15" fill="rgb(227,1,9)"/><text x="29.8106%" y="207.50"></text></g><g><title>impl_parent (172,261 samples, 0.26%)</title><rect x="31.2828%" y="53" width="0.2607%" height="15" fill="rgb(248,47,43)"/><text x="31.5328%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (124,630 samples, 0.19%)</title><rect x="31.3548%" y="37" width="0.1886%" height="15" fill="rgb(221,10,30)"/><text x="31.6048%" y="47.50"></text></g><g><title>impl_trait_ref (620,797 samples, 0.94%)</title><rect x="31.5434%" y="53" width="0.9394%" height="15" fill="rgb(210,229,1)"/><text x="31.7934%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (569,496 samples, 0.86%)</title><rect x="31.6211%" y="37" width="0.8618%" height="15" fill="rgb(222,148,37)"/><text x="31.8711%" y="47.50"></text></g><g><title>coherent_trait (1,074,242 samples, 1.63%)</title><rect x="30.9557%" y="85" width="1.6256%" height="15" fill="rgb(234,67,33)"/><text x="31.2057%" y="95.50"></text></g><g><title>specialization_graph_of (1,067,302 samples, 1.62%)</title><rect x="30.9662%" y="69" width="1.6151%" height="15" fill="rgb(247,98,35)"/><text x="31.2162%" y="79.50"></text></g><g><title>adt_destructor (1,087,322 samples, 1.65%)</title><rect x="30.9406%" y="117" width="1.6454%" height="15" fill="rgb(247,138,52)"/><text x="31.1906%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,085,652 samples, 1.64%)</title><rect x="30.9431%" y="101" width="1.6429%" height="15" fill="rgb(213,79,30)"/><text x="31.1931%" y="111.50"></text></g><g><title>adt_dtorck_constraint (74,040 samples, 0.11%)</title><rect x="32.5860%" y="117" width="0.1120%" height="15" fill="rgb(246,177,23)"/><text x="32.8360%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,216,294 samples, 1.84%)</title><rect x="30.8783%" y="133" width="1.8406%" height="15" fill="rgb(230,62,27)"/><text x="31.1283%" y="143.50">a..</text></g><g><title>adt_dtorck_constraint (1,297,454 samples, 1.96%)</title><rect x="30.7955%" y="149" width="1.9634%" height="15" fill="rgb(216,154,8)"/><text x="31.0455%" y="159.50">a..</text></g><g><title>adt_dtorck_constraint (1,317,394 samples, 1.99%)</title><rect x="30.7791%" y="165" width="1.9936%" height="15" fill="rgb(244,35,45)"/><text x="31.0291%" y="175.50">a..</text></g><g><title>dropck_outlives (1,476,186 samples, 2.23%)</title><rect x="30.5510%" y="197" width="2.2338%" height="15" fill="rgb(251,115,12)"/><text x="30.8010%" y="207.50">d..</text></g><g><title>adt_dtorck_constraint (1,369,175 samples, 2.07%)</title><rect x="30.7129%" y="181" width="2.0719%" height="15" fill="rgb(240,54,50)"/><text x="30.9629%" y="191.50">a..</text></g><g><title>adt_def (109,442 samples, 0.17%)</title><rect x="33.0871%" y="165" width="0.1656%" height="15" fill="rgb(233,84,52)"/><text x="33.3371%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (108,512 samples, 0.16%)</title><rect x="33.0885%" y="149" width="0.1642%" height="15" fill="rgb(207,117,47)"/><text x="33.3385%" y="159.50"></text></g><g><title>item_attrs (100,361 samples, 0.15%)</title><rect x="33.1009%" y="133" width="0.1519%" height="15" fill="rgb(249,43,39)"/><text x="33.3509%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (99,191 samples, 0.15%)</title><rect x="33.1026%" y="117" width="0.1501%" height="15" fill="rgb(209,38,44)"/><text x="33.3526%" y="127.50"></text></g><g><title>adt_def (112,721 samples, 0.17%)</title><rect x="33.2575%" y="149" width="0.1706%" height="15" fill="rgb(236,212,23)"/><text x="33.5075%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (112,021 samples, 0.17%)</title><rect x="33.2586%" y="133" width="0.1695%" height="15" fill="rgb(242,79,21)"/><text x="33.5086%" y="143.50"></text></g><g><title>item_attrs (106,401 samples, 0.16%)</title><rect x="33.2671%" y="117" width="0.1610%" height="15" fill="rgb(211,96,35)"/><text x="33.5171%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,671 samples, 0.16%)</title><rect x="33.2682%" y="101" width="0.1599%" height="15" fill="rgb(253,215,40)"/><text x="33.5182%" y="111.50"></text></g><g><title>adt_sized_constraint (116,911 samples, 0.18%)</title><rect x="33.2527%" y="165" width="0.1769%" height="15" fill="rgb(211,81,21)"/><text x="33.5027%" y="175.50"></text></g><g><title>adt_sized_constraint (249,813 samples, 0.38%)</title><rect x="33.0791%" y="181" width="0.3780%" height="15" fill="rgb(208,190,38)"/><text x="33.3291%" y="191.50"></text></g><g><title>evaluate_obligation (541,916 samples, 0.82%)</title><rect x="32.7848%" y="197" width="0.8201%" height="15" fill="rgb(235,213,38)"/><text x="33.0348%" y="207.50"></text></g><g><title>trait_impls_of (73,531 samples, 0.11%)</title><rect x="33.4936%" y="181" width="0.1113%" height="15" fill="rgb(237,122,38)"/><text x="33.7436%" y="191.50"></text></g><g><title>fn_sig (125,771 samples, 0.19%)</title><rect x="33.6239%" y="197" width="0.1903%" height="15" fill="rgb(244,218,35)"/><text x="33.8739%" y="207.50"></text></g><g><title>metadata_decode_entry_fn_sig (114,501 samples, 0.17%)</title><rect x="33.6410%" y="181" width="0.1733%" height="15" fill="rgb(240,68,47)"/><text x="33.8910%" y="191.50"></text></g><g><title>item_attrs (123,780 samples, 0.19%)</title><rect x="34.0178%" y="197" width="0.1873%" height="15" fill="rgb(210,16,53)"/><text x="34.2678%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,360 samples, 0.18%)</title><rect x="34.0260%" y="181" width="0.1791%" height="15" fill="rgb(235,124,12)"/><text x="34.2760%" y="191.50"></text></g><g><title>evaluate_obligation (333,665 samples, 0.50%)</title><rect x="34.6235%" y="181" width="0.5049%" height="15" fill="rgb(224,169,11)"/><text x="34.8735%" y="191.50"></text></g><g><title>trait_impls_of (68,111 samples, 0.10%)</title><rect x="35.0254%" y="165" width="0.1031%" height="15" fill="rgb(250,166,2)"/><text x="35.2754%" y="175.50"></text></g><g><title>method_autoderef_steps (616,968 samples, 0.93%)</title><rect x="34.2544%" y="197" width="0.9336%" height="15" fill="rgb(242,216,29)"/><text x="34.5044%" y="207.50"></text></g><g><title>dropck_outlives (74,932 samples, 0.11%)</title><rect x="40.0526%" y="165" width="0.1134%" height="15" fill="rgb(230,116,27)"/><text x="40.3026%" y="175.50"></text></g><g><title>evaluate_obligation (207,963 samples, 0.31%)</title><rect x="40.1660%" y="165" width="0.3147%" height="15" fill="rgb(228,99,48)"/><text x="40.4160%" y="175.50"></text></g><g><title>item_attrs (86,921 samples, 0.13%)</title><rect x="40.5978%" y="165" width="0.1315%" height="15" fill="rgb(253,11,6)"/><text x="40.8478%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (83,361 samples, 0.13%)</title><rect x="40.6032%" y="149" width="0.1261%" height="15" fill="rgb(247,143,39)"/><text x="40.8532%" y="159.50"></text></g><g><title>method_autoderef_steps (301,404 samples, 0.46%)</title><rect x="40.7350%" y="165" width="0.4561%" height="15" fill="rgb(236,97,10)"/><text x="40.9850%" y="175.50"></text></g><g><title>evaluate_obligation (154,191 samples, 0.23%)</title><rect x="40.9577%" y="149" width="0.2333%" height="15" fill="rgb(233,208,19)"/><text x="41.2077%" y="159.50"></text></g><g><title>predicates_of (77,562 samples, 0.12%)</title><rect x="41.1970%" y="165" width="0.1174%" height="15" fill="rgb(216,164,2)"/><text x="41.4470%" y="175.50"></text></g><g><title>trait_impls_of (116,932 samples, 0.18%)</title><rect x="41.3144%" y="165" width="0.1769%" height="15" fill="rgb(220,129,5)"/><text x="41.5644%" y="175.50"></text></g><g><title>opt_const_param_of (4,193,728 samples, 6.35%)</title><rect x="35.1881%" y="197" width="6.3462%" height="15" fill="rgb(242,17,10)"/><text x="35.4381%" y="207.50">opt_cons..</text></g><g><title>typeck (4,170,598 samples, 6.31%)</title><rect x="35.2231%" y="181" width="6.3112%" height="15" fill="rgb(242,107,0)"/><text x="35.4731%" y="191.50">typeck</text></g><g><title>explicit_predicates_of (69,891 samples, 0.11%)</title><rect x="41.7004%" y="165" width="0.1058%" height="15" fill="rgb(251,28,31)"/><text x="41.9504%" y="175.50"></text></g><g><title>predicates_of (189,973 samples, 0.29%)</title><rect x="41.5572%" y="197" width="0.2875%" height="15" fill="rgb(233,223,10)"/><text x="41.8072%" y="207.50"></text></g><g><title>predicates_defined_on (137,372 samples, 0.21%)</title><rect x="41.6368%" y="181" width="0.2079%" height="15" fill="rgb(215,21,27)"/><text x="41.8868%" y="191.50"></text></g><g><title>param_env (110,471 samples, 0.17%)</title><rect x="42.4077%" y="181" width="0.1672%" height="15" fill="rgb(232,23,21)"/><text x="42.6577%" y="191.50"></text></g><g><title>typeck_const_arg (400,784 samples, 0.61%)</title><rect x="42.0237%" y="197" width="0.6065%" height="15" fill="rgb(244,5,23)"/><text x="42.2737%" y="207.50"></text></g><g><title>item_bodies_checking (12,493,440 samples, 18.91%)</title><rect x="23.7713%" y="245" width="18.9057%" height="15" fill="rgb(226,81,46)"/><text x="24.0213%" y="255.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,490,070 samples, 18.90%)</title><rect x="23.7764%" y="229" width="18.9006%" height="15" fill="rgb(247,70,30)"/><text x="24.0264%" y="239.50">typeck_item_bodies</text></g><g><title>typeck (12,463,660 samples, 18.86%)</title><rect x="23.8164%" y="213" width="18.8607%" height="15" fill="rgb(212,68,19)"/><text x="24.0664%" y="223.50">typeck</text></g><g><title>associated_item (79,030 samples, 0.12%)</title><rect x="43.4306%" y="181" width="0.1196%" height="15" fill="rgb(240,187,13)"/><text x="43.6806%" y="191.50"></text></g><g><title>associated_items (155,670 samples, 0.24%)</title><rect x="43.3509%" y="197" width="0.2356%" height="15" fill="rgb(223,113,26)"/><text x="43.6009%" y="207.50"></text></g><g><title>super_predicates_that_define_assoc_type (121,864 samples, 0.18%)</title><rect x="43.6018%" y="197" width="0.1844%" height="15" fill="rgb(206,192,2)"/><text x="43.8518%" y="207.50"></text></g><g><title>super_predicates_of (93,443 samples, 0.14%)</title><rect x="43.6448%" y="181" width="0.1414%" height="15" fill="rgb(241,108,4)"/><text x="43.8948%" y="191.50"></text></g><g><title>metadata_decode_entry_super_predicates_of (81,272 samples, 0.12%)</title><rect x="43.6632%" y="165" width="0.1230%" height="15" fill="rgb(247,173,49)"/><text x="43.9132%" y="175.50"></text></g><g><title>type_of (76,421 samples, 0.12%)</title><rect x="43.7862%" y="197" width="0.1156%" height="15" fill="rgb(224,114,35)"/><text x="44.0362%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (72,491 samples, 0.11%)</title><rect x="43.7921%" y="181" width="0.1097%" height="15" fill="rgb(245,159,27)"/><text x="44.0421%" y="191.50"></text></g><g><title>fn_sig (840,039 samples, 1.27%)</title><rect x="42.8526%" y="213" width="1.2712%" height="15" fill="rgb(245,172,44)"/><text x="43.1026%" y="223.50"></text></g><g><title>type_param_predicates (146,661 samples, 0.22%)</title><rect x="43.9018%" y="197" width="0.2219%" height="15" fill="rgb(236,23,11)"/><text x="44.1518%" y="207.50"></text></g><g><title>named_region_map (136,690 samples, 0.21%)</title><rect x="44.2301%" y="197" width="0.2068%" height="15" fill="rgb(205,117,38)"/><text x="44.4801%" y="207.50"></text></g><g><title>resolve_lifetimes (126,850 samples, 0.19%)</title><rect x="44.2450%" y="181" width="0.1920%" height="15" fill="rgb(237,72,25)"/><text x="44.4950%" y="191.50"></text></g><g><title>generics_of (222,832 samples, 0.34%)</title><rect x="44.1237%" y="213" width="0.3372%" height="15" fill="rgb(244,70,9)"/><text x="44.3737%" y="223.50"></text></g><g><title>explicit_predicates_of (253,715 samples, 0.38%)</title><rect x="44.5117%" y="181" width="0.3839%" height="15" fill="rgb(217,125,39)"/><text x="44.7617%" y="191.50"></text></g><g><title>predicates_of (297,675 samples, 0.45%)</title><rect x="44.4609%" y="213" width="0.4505%" height="15" fill="rgb(235,36,10)"/><text x="44.7109%" y="223.50"></text></g><g><title>predicates_defined_on (286,305 samples, 0.43%)</title><rect x="44.4782%" y="197" width="0.4333%" height="15" fill="rgb(251,123,47)"/><text x="44.7282%" y="207.50"></text></g><g><title>type_collecting (1,504,967 samples, 2.28%)</title><rect x="42.6924%" y="245" width="2.2774%" height="15" fill="rgb(221,13,13)"/><text x="42.9424%" y="255.50">t..</text></g><g><title>collect_mod_item_types (1,493,297 samples, 2.26%)</title><rect x="42.7101%" y="229" width="2.2597%" height="15" fill="rgb(238,131,9)"/><text x="42.9601%" y="239.50">c..</text></g><g><title>adt_def (101,961 samples, 0.15%)</title><rect x="47.7222%" y="181" width="0.1543%" height="15" fill="rgb(211,50,8)"/><text x="47.9722%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (99,561 samples, 0.15%)</title><rect x="47.7258%" y="165" width="0.1507%" height="15" fill="rgb(245,182,24)"/><text x="47.9758%" y="175.50"></text></g><g><title>adt_sized_constraint (143,891 samples, 0.22%)</title><rect x="47.6893%" y="197" width="0.2177%" height="15" fill="rgb(242,14,37)"/><text x="47.9393%" y="207.50"></text></g><g><title>evaluate_obligation (392,636 samples, 0.59%)</title><rect x="47.4307%" y="213" width="0.5942%" height="15" fill="rgb(246,228,12)"/><text x="47.6807%" y="223.50"></text></g><g><title>implied_outlives_bounds (358,416 samples, 0.54%)</title><rect x="48.0248%" y="213" width="0.5424%" height="15" fill="rgb(213,55,15)"/><text x="48.2748%" y="223.50"></text></g><g><title>param_env (563,175 samples, 0.85%)</title><rect x="48.6598%" y="213" width="0.8522%" height="15" fill="rgb(209,9,3)"/><text x="48.9098%" y="223.50"></text></g><g><title>explicit_predicates_of (79,052 samples, 0.12%)</title><rect x="49.6198%" y="181" width="0.1196%" height="15" fill="rgb(230,59,30)"/><text x="49.8698%" y="191.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (68,672 samples, 0.10%)</title><rect x="49.6355%" y="165" width="0.1039%" height="15" fill="rgb(209,121,21)"/><text x="49.8855%" y="175.50"></text></g><g><title>predicates_of (184,813 samples, 0.28%)</title><rect x="49.5121%" y="213" width="0.2797%" height="15" fill="rgb(220,109,13)"/><text x="49.7621%" y="223.50"></text></g><g><title>predicates_defined_on (139,042 samples, 0.21%)</title><rect x="49.5813%" y="197" width="0.2104%" height="15" fill="rgb(232,18,1)"/><text x="49.8313%" y="207.50"></text></g><g><title>region_scope_tree (89,841 samples, 0.14%)</title><rect x="49.7917%" y="213" width="0.1360%" height="15" fill="rgb(215,41,42)"/><text x="50.0417%" y="223.50"></text></g><g><title>analysis (27,727,502 samples, 41.96%)</title><rect x="8.4270%" y="277" width="41.9587%" height="15" fill="rgb(224,123,36)"/><text x="8.6770%" y="287.50">analysis</text></g><g><title>type_check_crate (17,667,419 samples, 26.74%)</title><rect x="23.6505%" y="261" width="26.7353%" height="15" fill="rgb(240,125,3)"/><text x="23.9005%" y="271.50">type_check_crate</text></g><g><title>wf_checking (3,576,501 samples, 5.41%)</title><rect x="44.9736%" y="245" width="5.4122%" height="15" fill="rgb(205,98,50)"/><text x="45.2236%" y="255.50">wf_chec..</text></g><g><title>check_item_well_formed (3,480,429 samples, 5.27%)</title><rect x="45.1190%" y="229" width="5.2668%" height="15" fill="rgb(205,185,37)"/><text x="45.3690%" y="239.50">check_..</text></g><g><title>trait_impls_of (302,703 samples, 0.46%)</title><rect x="49.9277%" y="213" width="0.4581%" height="15" fill="rgb(238,207,15)"/><text x="50.1777%" y="223.50"></text></g><g><title>implementations_of_trait (159,081 samples, 0.24%)</title><rect x="50.1450%" y="197" width="0.2407%" height="15" fill="rgb(213,199,42)"/><text x="50.3950%" y="207.50"></text></g><g><title>codegen_module (213,583 samples, 0.32%)</title><rect x="51.0444%" y="261" width="0.3232%" height="15" fill="rgb(235,201,11)"/><text x="51.2944%" y="271.50"></text></g><g><title>codegen_crate (771,379 samples, 1.17%)</title><rect x="50.4049%" y="277" width="1.1673%" height="15" fill="rgb(207,46,11)"/><text x="50.6549%" y="287.50"></text></g><g><title>codegen_module_optimize (1,818,470 samples, 2.75%)</title><rect x="51.5722%" y="277" width="2.7518%" height="15" fill="rgb(241,35,35)"/><text x="51.8222%" y="287.50">co..</text></g><g><title>LLVM_module_optimize (305,224 samples, 0.46%)</title><rect x="53.8621%" y="261" width="0.4619%" height="15" fill="rgb(243,32,47)"/><text x="54.1121%" y="271.50"></text></g><g><title>LLVM_lto_optimize (120,512 samples, 0.18%)</title><rect x="54.7016%" y="261" width="0.1824%" height="15" fill="rgb(247,202,23)"/><text x="54.9516%" y="271.50"></text></g><g><title>LLVM_module_codegen (1,279,974 samples, 1.94%)</title><rect x="54.8840%" y="261" width="1.9369%" height="15" fill="rgb(219,102,11)"/><text x="55.1340%" y="271.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (1,253,844 samples, 1.90%)</title><rect x="54.9236%" y="245" width="1.8974%" height="15" fill="rgb(243,110,44)"/><text x="55.1736%" y="255.50">L..</text></g><g><title>codegen_module_perform_lto (1,675,809 samples, 2.54%)</title><rect x="54.3240%" y="277" width="2.5359%" height="15" fill="rgb(222,74,54)"/><text x="54.5740%" y="287.50">co..</text></g><g><title>AST_validation (232,632 samples, 0.35%)</title><rect x="57.4750%" y="261" width="0.3520%" height="15" fill="rgb(216,99,12)"/><text x="57.7250%" y="271.50"></text></g><g><title>crate_injection (77,351 samples, 0.12%)</title><rect x="57.8863%" y="261" width="0.1171%" height="15" fill="rgb(226,22,26)"/><text x="58.1363%" y="271.50"></text></g><g><title>macro_expand_crate (14,478,804 samples, 21.91%)</title><rect x="58.0034%" y="261" width="21.9101%" height="15" fill="rgb(217,163,10)"/><text x="58.2534%" y="271.50">macro_expand_crate</text></g><g><title>expand_crate (14,460,393 samples, 21.88%)</title><rect x="58.0312%" y="245" width="21.8822%" height="15" fill="rgb(213,25,53)"/><text x="58.2812%" y="255.50">expand_crate</text></g><g><title>metadata_register_crate (3,437,189 samples, 5.20%)</title><rect x="74.7121%" y="229" width="5.2013%" height="15" fill="rgb(252,105,26)"/><text x="74.9621%" y="239.50">metada..</text></g><g><title>metadata_register_crate (1,488,328 samples, 2.25%)</title><rect x="77.6612%" y="213" width="2.2522%" height="15" fill="rgb(220,39,43)"/><text x="77.9112%" y="223.50">m..</text></g><g><title>metadata_register_crate (245,644 samples, 0.37%)</title><rect x="79.5417%" y="197" width="0.3717%" height="15" fill="rgb(229,68,48)"/><text x="79.7917%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (131,441 samples, 0.20%)</title><rect x="79.9236%" y="261" width="0.1989%" height="15" fill="rgb(252,8,32)"/><text x="80.1736%" y="271.50"></text></g><g><title>finalize_imports (331,524 samples, 0.50%)</title><rect x="80.1381%" y="245" width="0.5017%" height="15" fill="rgb(223,20,43)"/><text x="80.3881%" y="255.50"></text></g><g><title>late_resolve_crate (1,355,645 samples, 2.05%)</title><rect x="80.7011%" y="245" width="2.0514%" height="15" fill="rgb(229,81,49)"/><text x="80.9511%" y="255.50">l..</text></g><g><title>configure_and_expand (17,200,203 samples, 26.03%)</title><rect x="56.8599%" y="277" width="26.0283%" height="15" fill="rgb(236,28,36)"/><text x="57.1099%" y="287.50">configure_and_expand</text></g><g><title>resolve_crate (1,827,611 samples, 2.77%)</title><rect x="80.1225%" y="261" width="2.7656%" height="15" fill="rgb(249,185,26)"/><text x="80.3725%" y="271.50">re..</text></g><g><title>drop_ast (96,581 samples, 0.15%)</title><rect x="82.8882%" y="277" width="0.1462%" height="15" fill="rgb(249,174,33)"/><text x="83.1382%" y="287.50"></text></g><g><title>early_lint_checks (236,582 samples, 0.36%)</title><rect x="83.0702%" y="277" width="0.3580%" height="15" fill="rgb(233,201,37)"/><text x="83.3202%" y="287.50"></text></g><g><title>free_global_ctxt (2,014,813 samples, 3.05%)</title><rect x="83.4282%" y="277" width="3.0489%" height="15" fill="rgb(221,78,26)"/><text x="83.6782%" y="287.50">fre..</text></g><g><title>crate_hash (70,270 samples, 0.11%)</title><rect x="87.1960%" y="261" width="0.1063%" height="15" fill="rgb(250,127,30)"/><text x="87.4460%" y="271.50"></text></g><g><title>is_sized_raw (82,100 samples, 0.12%)</title><rect x="88.2231%" y="229" width="0.1242%" height="15" fill="rgb(230,49,44)"/><text x="88.4731%" y="239.50"></text></g><g><title>layout_of (71,161 samples, 0.11%)</title><rect x="88.3473%" y="229" width="0.1077%" height="15" fill="rgb(229,67,23)"/><text x="88.5973%" y="239.50"></text></g><g><title>layout_of (255,042 samples, 0.39%)</title><rect x="88.1380%" y="245" width="0.3859%" height="15" fill="rgb(249,83,47)"/><text x="88.3880%" y="255.50"></text></g><g><title>optimized_mir (1,067,823 samples, 1.62%)</title><rect x="87.5068%" y="261" width="1.6159%" height="15" fill="rgb(215,43,3)"/><text x="87.7568%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (395,645 samples, 0.60%)</title><rect x="88.5239%" y="245" width="0.5987%" height="15" fill="rgb(238,154,13)"/><text x="88.7739%" y="255.50"></text></g><g><title>generate_crate_metadata (1,787,840 samples, 2.71%)</title><rect x="86.4771%" y="277" width="2.7055%" height="15" fill="rgb(219,56,2)"/><text x="86.7271%" y="287.50">ge..</text></g><g><title>hir_lowering (1,265,745 samples, 1.92%)</title><rect x="89.1826%" y="277" width="1.9154%" height="15" fill="rgb(233,0,4)"/><text x="89.4326%" y="287.50">h..</text></g><g><title>finish_ongoing_codegen (1,857,401 samples, 2.81%)</title><rect x="91.1162%" y="261" width="2.8107%" height="15" fill="rgb(235,30,7)"/><text x="91.3662%" y="271.50">fi..</text></g><g><title>link_crate (619,097 samples, 0.94%)</title><rect x="93.9269%" y="261" width="0.9369%" height="15" fill="rgb(250,79,13)"/><text x="94.1769%" y="271.50"></text></g><g><title>link_binary (608,627 samples, 0.92%)</title><rect x="93.9428%" y="245" width="0.9210%" height="15" fill="rgb(211,146,34)"/><text x="94.1928%" y="255.50"></text></g><g><title>link_rlib (401,054 samples, 0.61%)</title><rect x="94.2569%" y="229" width="0.6069%" height="15" fill="rgb(228,22,38)"/><text x="94.5069%" y="239.50"></text></g><g><title>link (2,495,398 samples, 3.78%)</title><rect x="91.0980%" y="277" width="3.7762%" height="15" fill="rgb(235,168,5)"/><text x="91.3480%" y="287.50">link</text></g><g><title>parse_crate (2,199,065 samples, 3.33%)</title><rect x="94.8741%" y="277" width="3.3277%" height="15" fill="rgb(221,155,16)"/><text x="95.1241%" y="287.50">par..</text></g><g><title>prepare_outputs (337,444 samples, 0.51%)</title><rect x="98.2178%" y="277" width="0.5106%" height="15" fill="rgb(215,215,53)"/><text x="98.4678%" y="287.50"></text></g><g><title>self_profile_alloc_query_strings (361,334 samples, 0.55%)</title><rect x="98.7285%" y="277" width="0.5468%" height="15" fill="rgb(223,4,10)"/><text x="98.9785%" y="287.50"></text></g><g><title>setup_global_ctxt (138,711 samples, 0.21%)</title><rect x="99.2767%" y="277" width="0.2099%" height="15" fill="rgb(234,103,6)"/><text x="99.5267%" y="287.50"></text></g><g><title>all (66,082,793 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(227,97,0)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (66,082,793 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="303.50">rustc</text></g><g><title>write_crate_metadata (339,294 samples, 0.51%)</title><rect x="99.4866%" y="277" width="0.5134%" height="15" fill="rgb(228,201,54)"/><text x="99.7366%" y="287.50"></text></g></svg></svg>