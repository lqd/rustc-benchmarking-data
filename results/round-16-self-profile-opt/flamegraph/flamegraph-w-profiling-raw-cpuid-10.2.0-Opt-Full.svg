<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,099,859,193 samples, 19.42%)</title><rect x="0.0159%" y="149" width="19.4202%" height="15" fill="rgb(227,0,7)"/><text x="0.2659%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (8,189,023 samples, 0.14%)</title><rect x="19.2915%" y="133" width="0.1446%" height="15" fill="rgb(217,0,24)"/><text x="19.5415%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (7,954,691 samples, 0.14%)</title><rect x="19.2957%" y="117" width="0.1405%" height="15" fill="rgb(221,193,54)"/><text x="19.5457%" y="127.50"></text></g><g><title>thir_body (20,362,734 samples, 0.36%)</title><rect x="25.2678%" y="37" width="0.3595%" height="15" fill="rgb(248,212,6)"/><text x="25.5178%" y="47.50"></text></g><g><title>mir_const (99,854,203 samples, 1.76%)</title><rect x="23.8707%" y="85" width="1.7631%" height="15" fill="rgb(208,68,35)"/><text x="24.1207%" y="95.50"></text></g><g><title>unsafety_check_result (85,038,395 samples, 1.50%)</title><rect x="24.1323%" y="69" width="1.5015%" height="15" fill="rgb(232,128,0)"/><text x="24.3823%" y="79.50"></text></g><g><title>mir_built (77,640,507 samples, 1.37%)</title><rect x="24.2629%" y="53" width="1.3709%" height="15" fill="rgb(207,160,47)"/><text x="24.5129%" y="63.50"></text></g><g><title>mir_const (23,328,913 samples, 0.41%)</title><rect x="25.7611%" y="69" width="0.4119%" height="15" fill="rgb(228,23,34)"/><text x="26.0111%" y="79.50"></text></g><g><title>unsafety_check_result (18,162,271 samples, 0.32%)</title><rect x="25.8523%" y="53" width="0.3207%" height="15" fill="rgb(218,30,26)"/><text x="26.1023%" y="63.50"></text></g><g><title>mir_built (16,241,336 samples, 0.29%)</title><rect x="25.8862%" y="37" width="0.2868%" height="15" fill="rgb(220,122,19)"/><text x="26.1362%" y="47.50"></text></g><g><title>mir_const_qualif (30,979,003 samples, 0.55%)</title><rect x="25.6338%" y="85" width="0.5470%" height="15" fill="rgb(250,228,42)"/><text x="25.8838%" y="95.50"></text></g><g><title>mir_promoted (148,419,224 samples, 2.62%)</title><rect x="23.5602%" y="101" width="2.6206%" height="15" fill="rgb(240,193,28)"/><text x="23.8102%" y="111.50">mi..</text></g><g><title>type_op_prove_predicate (6,714,867 samples, 0.12%)</title><rect x="26.2635%" y="101" width="0.1186%" height="15" fill="rgb(216,20,37)"/><text x="26.5135%" y="111.50"></text></g><g><title>MIR_borrow_checking (389,127,773 samples, 6.87%)</title><rect x="19.5115%" y="133" width="6.8708%" height="15" fill="rgb(206,188,39)"/><text x="19.7615%" y="143.50">MIR_borro..</text></g><g><title>mir_borrowck (383,995,390 samples, 6.78%)</title><rect x="19.6021%" y="117" width="6.7802%" height="15" fill="rgb(217,207,13)"/><text x="19.8521%" y="127.50">mir_borro..</text></g><g><title>MIR_effect_checking (15,267,314 samples, 0.27%)</title><rect x="26.3823%" y="133" width="0.2696%" height="15" fill="rgb(231,73,38)"/><text x="26.6323%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (12,433,944 samples, 0.22%)</title><rect x="26.4323%" y="117" width="0.2195%" height="15" fill="rgb(225,20,46)"/><text x="26.6823%" y="127.50"></text></g><g><title>check_mod_attrs (10,662,182 samples, 0.19%)</title><rect x="26.7122%" y="117" width="0.1883%" height="15" fill="rgb(210,31,41)"/><text x="26.9622%" y="127.50"></text></g><g><title>misc_checking_1 (19,371,540 samples, 0.34%)</title><rect x="26.7115%" y="133" width="0.3420%" height="15" fill="rgb(221,200,47)"/><text x="26.9615%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (7,844,849 samples, 0.14%)</title><rect x="27.0536%" y="117" width="0.1385%" height="15" fill="rgb(226,26,5)"/><text x="27.3036%" y="127.50"></text></g><g><title>check_mod_liveness (6,095,709 samples, 0.11%)</title><rect x="27.0845%" y="101" width="0.1076%" height="15" fill="rgb(249,33,26)"/><text x="27.3345%" y="111.50"></text></g><g><title>misc_checking_2 (18,527,321 samples, 0.33%)</title><rect x="27.0535%" y="133" width="0.3271%" height="15" fill="rgb(235,183,28)"/><text x="27.3035%" y="143.50"></text></g><g><title>match_checking (10,678,982 samples, 0.19%)</title><rect x="27.1921%" y="117" width="0.1886%" height="15" fill="rgb(221,5,38)"/><text x="27.4421%" y="127.50"></text></g><g><title>check_match (9,614,838 samples, 0.17%)</title><rect x="27.2109%" y="101" width="0.1698%" height="15" fill="rgb(247,18,42)"/><text x="27.4609%" y="111.50"></text></g><g><title>death_checking (8,104,993 samples, 0.14%)</title><rect x="27.4645%" y="117" width="0.1431%" height="15" fill="rgb(241,131,45)"/><text x="27.7145%" y="127.50"></text></g><g><title>crate_lints (10,717,232 samples, 0.19%)</title><rect x="27.6077%" y="101" width="0.1892%" height="15" fill="rgb(249,31,29)"/><text x="27.8577%" y="111.50"></text></g><g><title>lint_checking (20,923,477 samples, 0.37%)</title><rect x="27.6076%" y="117" width="0.3694%" height="15" fill="rgb(225,111,53)"/><text x="27.8576%" y="127.50"></text></g><g><title>module_lints (10,202,405 samples, 0.18%)</title><rect x="27.7969%" y="101" width="0.1801%" height="15" fill="rgb(238,160,17)"/><text x="28.0469%" y="111.50"></text></g><g><title>lint_mod (10,191,105 samples, 0.18%)</title><rect x="27.7971%" y="85" width="0.1799%" height="15" fill="rgb(214,148,48)"/><text x="28.0471%" y="95.50"></text></g><g><title>privacy_checking_modules (14,955,631 samples, 0.26%)</title><rect x="28.0667%" y="117" width="0.2641%" height="15" fill="rgb(232,36,49)"/><text x="28.3167%" y="127.50"></text></g><g><title>check_mod_privacy (14,945,821 samples, 0.26%)</title><rect x="28.0668%" y="101" width="0.2639%" height="15" fill="rgb(209,103,24)"/><text x="28.3168%" y="111.50"></text></g><g><title>misc_checking_3 (54,046,545 samples, 0.95%)</title><rect x="27.3807%" y="133" width="0.9543%" height="15" fill="rgb(229,88,8)"/><text x="27.6307%" y="143.50"></text></g><g><title>coherent_trait (9,094,352 samples, 0.16%)</title><rect x="28.3598%" y="101" width="0.1606%" height="15" fill="rgb(213,181,19)"/><text x="28.6098%" y="111.50"></text></g><g><title>specialization_graph_of (8,697,548 samples, 0.15%)</title><rect x="28.3668%" y="85" width="0.1536%" height="15" fill="rgb(254,191,54)"/><text x="28.6168%" y="95.50"></text></g><g><title>coherence_checking (9,837,301 samples, 0.17%)</title><rect x="28.3590%" y="117" width="0.1737%" height="15" fill="rgb(241,83,37)"/><text x="28.6090%" y="127.50"></text></g><g><title>evaluate_obligation (16,589,031 samples, 0.29%)</title><rect x="34.9135%" y="69" width="0.2929%" height="15" fill="rgb(233,36,39)"/><text x="35.1635%" y="79.50"></text></g><g><title>typeck (8,464,115 samples, 0.15%)</title><rect x="35.2795%" y="69" width="0.1495%" height="15" fill="rgb(226,3,54)"/><text x="35.5295%" y="79.50"></text></g><g><title>item_bodies_checking (390,465,599 samples, 6.89%)</title><rect x="28.5479%" y="117" width="6.8944%" height="15" fill="rgb(245,192,40)"/><text x="28.7979%" y="127.50">item_bodi..</text></g><g><title>typeck_item_bodies (390,460,339 samples, 6.89%)</title><rect x="28.5479%" y="101" width="6.8944%" height="15" fill="rgb(238,167,29)"/><text x="28.7979%" y="111.50">typeck_it..</text></g><g><title>typeck (387,608,237 samples, 6.84%)</title><rect x="28.5983%" y="85" width="6.8440%" height="15" fill="rgb(232,182,51)"/><text x="28.8483%" y="95.50">typeck</text></g><g><title>item_types_checking (17,360,946 samples, 0.31%)</title><rect x="35.4423%" y="117" width="0.3065%" height="15" fill="rgb(231,60,39)"/><text x="35.6923%" y="127.50"></text></g><g><title>check_mod_item_types (17,352,676 samples, 0.31%)</title><rect x="35.4424%" y="101" width="0.3064%" height="15" fill="rgb(208,69,12)"/><text x="35.6924%" y="111.50"></text></g><g><title>named_region_map (10,698,941 samples, 0.19%)</title><rect x="36.0110%" y="69" width="0.1889%" height="15" fill="rgb(235,93,37)"/><text x="36.2610%" y="79.50"></text></g><g><title>resolve_lifetimes (10,233,424 samples, 0.18%)</title><rect x="36.0192%" y="53" width="0.1807%" height="15" fill="rgb(213,116,39)"/><text x="36.2692%" y="63.50"></text></g><g><title>generics_of (13,080,200 samples, 0.23%)</title><rect x="35.9742%" y="85" width="0.2310%" height="15" fill="rgb(222,207,29)"/><text x="36.2242%" y="95.50"></text></g><g><title>predicates_of (5,992,358 samples, 0.11%)</title><rect x="36.2165%" y="85" width="0.1058%" height="15" fill="rgb(206,96,30)"/><text x="36.4665%" y="95.50"></text></g><g><title>type_collecting (33,569,842 samples, 0.59%)</title><rect x="35.7489%" y="117" width="0.5927%" height="15" fill="rgb(218,138,4)"/><text x="35.9989%" y="127.50"></text></g><g><title>collect_mod_item_types (33,553,771 samples, 0.59%)</title><rect x="35.7492%" y="101" width="0.5925%" height="15" fill="rgb(250,191,14)"/><text x="35.9992%" y="111.50"></text></g><g><title>param_env (6,438,569 samples, 0.11%)</title><rect x="37.0189%" y="85" width="0.1137%" height="15" fill="rgb(239,60,40)"/><text x="37.2689%" y="95.50"></text></g><g><title>region_scope_tree (8,611,987 samples, 0.15%)</title><rect x="37.1332%" y="85" width="0.1521%" height="15" fill="rgb(206,27,48)"/><text x="37.3832%" y="95.50"></text></g><g><title>check_impl_item_well_formed (49,780,755 samples, 0.88%)</title><rect x="36.4066%" y="101" width="0.8790%" height="15" fill="rgb(225,35,8)"/><text x="36.6566%" y="111.50"></text></g><g><title>check_item_well_formed (18,477,244 samples, 0.33%)</title><rect x="37.2855%" y="101" width="0.3263%" height="15" fill="rgb(250,213,24)"/><text x="37.5355%" y="111.50"></text></g><g><title>analysis (1,039,372,486 samples, 18.35%)</title><rect x="19.4361%" y="149" width="18.3522%" height="15" fill="rgb(247,123,22)"/><text x="19.6861%" y="159.50">analysis</text></g><g><title>type_check_crate (535,387,906 samples, 9.45%)</title><rect x="28.3350%" y="133" width="9.4533%" height="15" fill="rgb(231,138,38)"/><text x="28.5850%" y="143.50">type_check_cra..</text></g><g><title>wf_checking (81,712,600 samples, 1.44%)</title><rect x="36.3455%" y="117" width="1.4428%" height="15" fill="rgb(231,145,46)"/><text x="36.5955%" y="127.50"></text></g><g><title>check_trait_item_well_formed (9,996,254 samples, 0.18%)</title><rect x="37.6118%" y="101" width="0.1765%" height="15" fill="rgb(251,118,11)"/><text x="37.8618%" y="111.50"></text></g><g><title>fn_abi_of_instance (12,319,424 samples, 0.22%)</title><rect x="39.2131%" y="117" width="0.2175%" height="15" fill="rgb(217,147,25)"/><text x="39.4631%" y="127.50"></text></g><g><title>codegen_module (92,617,183 samples, 1.64%)</title><rect x="37.8283%" y="133" width="1.6353%" height="15" fill="rgb(247,81,37)"/><text x="38.0783%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (33,405,499 samples, 0.59%)</title><rect x="40.2735%" y="69" width="0.5898%" height="15" fill="rgb(209,12,38)"/><text x="40.5235%" y="79.50"></text></g><g><title>optimized_mir (72,207,674 samples, 1.27%)</title><rect x="39.6339%" y="85" width="1.2750%" height="15" fill="rgb(227,1,9)"/><text x="39.8839%" y="95.50"></text></g><g><title>resolve_instance (7,474,500 samples, 0.13%)</title><rect x="40.9088%" y="85" width="0.1320%" height="15" fill="rgb(248,47,43)"/><text x="41.1588%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (92,890,536 samples, 1.64%)</title><rect x="39.4653%" y="101" width="1.6402%" height="15" fill="rgb(221,10,30)"/><text x="39.7153%" y="111.50"></text></g><g><title>monomorphization_collector (94,489,954 samples, 1.67%)</title><rect x="39.4653%" y="117" width="1.6684%" height="15" fill="rgb(210,229,1)"/><text x="39.7153%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (101,076,989 samples, 1.78%)</title><rect x="39.4638%" y="133" width="1.7847%" height="15" fill="rgb(222,148,37)"/><text x="39.7138%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (6,503,424 samples, 0.11%)</title><rect x="41.1337%" y="117" width="0.1148%" height="15" fill="rgb(234,67,33)"/><text x="41.3837%" y="127.50"></text></g><g><title>codegen_crate (195,978,178 samples, 3.46%)</title><rect x="37.7884%" y="149" width="3.4604%" height="15" fill="rgb(247,98,35)"/><text x="38.0384%" y="159.50">cod..</text></g><g><title>codegen_module_optimize (775,222,022 samples, 13.69%)</title><rect x="41.2488%" y="149" width="13.6881%" height="15" fill="rgb(247,138,52)"/><text x="41.4988%" y="159.50">codegen_module_optimi..</text></g><g><title>LLVM_module_optimize (718,400,209 samples, 12.68%)</title><rect x="42.2521%" y="133" width="12.6848%" height="15" fill="rgb(213,79,30)"/><text x="42.5021%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (433,226,503 samples, 7.65%)</title><rect x="55.6606%" y="133" width="7.6495%" height="15" fill="rgb(246,177,23)"/><text x="55.9106%" y="143.50">LLVM_lto_o..</text></g><g><title>LLVM_module_codegen (630,128,365 samples, 11.13%)</title><rect x="63.3101%" y="133" width="11.1262%" height="15" fill="rgb(230,62,27)"/><text x="63.5601%" y="143.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (625,768,905 samples, 11.05%)</title><rect x="63.3871%" y="117" width="11.0492%" height="15" fill="rgb(216,154,8)"/><text x="63.6371%" y="127.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (39,566,978 samples, 0.70%)</title><rect x="74.4362%" y="133" width="0.6986%" height="15" fill="rgb(244,35,45)"/><text x="74.6862%" y="143.50"></text></g><g><title>codegen_module_perform_lto (1,148,927,418 samples, 20.29%)</title><rect x="54.9369%" y="149" width="20.2866%" height="15" fill="rgb(251,115,12)"/><text x="55.1869%" y="159.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (104,626,259 samples, 1.85%)</title><rect x="75.3161%" y="133" width="1.8474%" height="15" fill="rgb(240,54,50)"/><text x="75.5661%" y="143.50">m..</text></g><g><title>expand_crate (104,600,019 samples, 1.85%)</title><rect x="75.3166%" y="117" width="1.8469%" height="15" fill="rgb(233,84,52)"/><text x="75.5666%" y="127.50">e..</text></g><g><title>late_resolve_crate (22,960,461 samples, 0.41%)</title><rect x="77.2095%" y="117" width="0.4054%" height="15" fill="rgb(207,117,47)"/><text x="77.4595%" y="127.50"></text></g><g><title>configure_and_expand (138,837,728 samples, 2.45%)</title><rect x="75.2235%" y="149" width="2.4515%" height="15" fill="rgb(249,43,39)"/><text x="75.4735%" y="159.50">co..</text></g><g><title>resolve_crate (28,374,993 samples, 0.50%)</title><rect x="77.1739%" y="133" width="0.5010%" height="15" fill="rgb(209,38,44)"/><text x="77.4239%" y="143.50"></text></g><g><title>drop_ast (8,660,909 samples, 0.15%)</title><rect x="77.6749%" y="149" width="0.1529%" height="15" fill="rgb(236,212,23)"/><text x="77.9249%" y="159.50"></text></g><g><title>early_lint_checks (7,159,522 samples, 0.13%)</title><rect x="77.8286%" y="149" width="0.1264%" height="15" fill="rgb(242,79,21)"/><text x="78.0786%" y="159.50"></text></g><g><title>free_global_ctxt (22,994,231 samples, 0.41%)</title><rect x="77.9550%" y="149" width="0.4060%" height="15" fill="rgb(211,96,35)"/><text x="78.2050%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (25,258,026 samples, 0.45%)</title><rect x="79.7008%" y="117" width="0.4460%" height="15" fill="rgb(253,215,40)"/><text x="79.9508%" y="127.50"></text></g><g><title>mir_for_ctfe (7,095,244 samples, 0.13%)</title><rect x="80.2005%" y="53" width="0.1253%" height="15" fill="rgb(211,81,21)"/><text x="80.4505%" y="63.50"></text></g><g><title>eval_to_const_value_raw (9,466,907 samples, 0.17%)</title><rect x="80.1635%" y="101" width="0.1672%" height="15" fill="rgb(208,190,38)"/><text x="80.4135%" y="111.50"></text></g><g><title>eval_to_const_value_raw (9,337,497 samples, 0.16%)</title><rect x="80.1658%" y="85" width="0.1649%" height="15" fill="rgb(235,213,38)"/><text x="80.4158%" y="95.50"></text></g><g><title>eval_to_allocation_raw (9,124,974 samples, 0.16%)</title><rect x="80.1696%" y="69" width="0.1611%" height="15" fill="rgb(237,122,38)"/><text x="80.4196%" y="79.50"></text></g><g><title>optimized_mir (74,944,626 samples, 1.32%)</title><rect x="79.0258%" y="133" width="1.3233%" height="15" fill="rgb(244,218,35)"/><text x="79.2758%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (10,967,087 samples, 0.19%)</title><rect x="80.1555%" y="117" width="0.1936%" height="15" fill="rgb(240,68,47)"/><text x="80.4055%" y="127.50"></text></g><g><title>generate_crate_metadata (114,041,966 samples, 2.01%)</title><rect x="78.3610%" y="149" width="2.0136%" height="15" fill="rgb(210,16,53)"/><text x="78.6110%" y="159.50">g..</text></g><g><title>hir_lowering (54,405,298 samples, 0.96%)</title><rect x="80.3747%" y="149" width="0.9606%" height="15" fill="rgb(235,124,12)"/><text x="80.6247%" y="159.50"></text></g><g><title>finish_ongoing_codegen (1,023,587,586 samples, 18.07%)</title><rect x="81.3358%" y="133" width="18.0735%" height="15" fill="rgb(224,169,11)"/><text x="81.5858%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (10,346,858 samples, 0.18%)</title><rect x="99.4092%" y="133" width="0.1827%" height="15" fill="rgb(250,166,2)"/><text x="99.6592%" y="143.50"></text></g><g><title>link_binary (10,061,634 samples, 0.18%)</title><rect x="99.4143%" y="117" width="0.1777%" height="15" fill="rgb(242,216,29)"/><text x="99.6643%" y="127.50"></text></g><g><title>link_rlib (8,555,737 samples, 0.15%)</title><rect x="99.4408%" y="101" width="0.1511%" height="15" fill="rgb(230,116,27)"/><text x="99.6908%" y="111.50"></text></g><g><title>link (1,033,975,734 samples, 18.26%)</title><rect x="81.3353%" y="149" width="18.2569%" height="15" fill="rgb(228,99,48)"/><text x="81.5853%" y="159.50">link</text></g><g><title>parse_crate (11,699,793 samples, 0.21%)</title><rect x="99.5922%" y="149" width="0.2066%" height="15" fill="rgb(253,11,6)"/><text x="99.8422%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (9,303,476 samples, 0.16%)</title><rect x="99.8038%" y="149" width="0.1643%" height="15" fill="rgb(247,143,39)"/><text x="100.0538%" y="159.50"></text></g><g><title>all (5,663,482,107 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (5,663,482,107 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>