<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,077,308 samples, 15.76%)</title><rect x="0.4406%" y="165" width="15.7561%" height="15" fill="rgb(227,0,7)"/><text x="0.6906%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (250,942 samples, 0.18%)</title><rect x="16.0176%" y="149" width="0.1791%" height="15" fill="rgb(217,0,24)"/><text x="16.2676%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (238,512 samples, 0.17%)</title><rect x="16.0265%" y="133" width="0.1702%" height="15" fill="rgb(221,193,54)"/><text x="16.2765%" y="143.50"></text></g><g><title>mir_const (964,491 samples, 0.69%)</title><rect x="17.4212%" y="101" width="0.6883%" height="15" fill="rgb(248,212,6)"/><text x="17.6712%" y="111.50"></text></g><g><title>unsafety_check_result (766,598 samples, 0.55%)</title><rect x="17.5624%" y="85" width="0.5471%" height="15" fill="rgb(208,68,35)"/><text x="17.8124%" y="95.50"></text></g><g><title>mir_built (634,695 samples, 0.45%)</title><rect x="17.6565%" y="69" width="0.4530%" height="15" fill="rgb(232,128,0)"/><text x="17.9065%" y="79.50"></text></g><g><title>mir_promoted (1,091,502 samples, 0.78%)</title><rect x="17.3369%" y="117" width="0.7790%" height="15" fill="rgb(207,160,47)"/><text x="17.5869%" y="127.50"></text></g><g><title>MIR_borrow_checking (3,056,305 samples, 2.18%)</title><rect x="16.2921%" y="149" width="2.1812%" height="15" fill="rgb(228,23,34)"/><text x="16.5421%" y="159.50">M..</text></g><g><title>mir_borrowck (3,039,194 samples, 2.17%)</title><rect x="16.3043%" y="133" width="2.1690%" height="15" fill="rgb(218,30,26)"/><text x="16.5543%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (437,576 samples, 0.31%)</title><rect x="18.1610%" y="117" width="0.3123%" height="15" fill="rgb(220,122,19)"/><text x="18.4110%" y="127.50"></text></g><g><title>codegen_fn_attrs (242,683 samples, 0.17%)</title><rect x="18.6259%" y="117" width="0.1732%" height="15" fill="rgb(250,228,42)"/><text x="18.8759%" y="127.50"></text></g><g><title>check_mod_attrs (331,364 samples, 0.24%)</title><rect x="18.5628%" y="133" width="0.2365%" height="15" fill="rgb(240,193,28)"/><text x="18.8128%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (144,461 samples, 0.10%)</title><rect x="18.8495%" y="133" width="0.1031%" height="15" fill="rgb(216,20,37)"/><text x="19.0995%" y="143.50"></text></g><g><title>misc_checking_1 (608,957 samples, 0.43%)</title><rect x="18.5462%" y="149" width="0.4346%" height="15" fill="rgb(206,188,39)"/><text x="18.7962%" y="159.50"></text></g><g><title>misc_checking_2 (181,862 samples, 0.13%)</title><rect x="18.9808%" y="149" width="0.1298%" height="15" fill="rgb(217,207,13)"/><text x="19.2308%" y="159.50"></text></g><g><title>trait_impls_of (211,962 samples, 0.15%)</title><rect x="19.5150%" y="101" width="0.1513%" height="15" fill="rgb(231,73,38)"/><text x="19.7650%" y="111.50"></text></g><g><title>crate_lints (3,527,559 samples, 2.52%)</title><rect x="19.1816%" y="117" width="2.5175%" height="15" fill="rgb(225,20,46)"/><text x="19.4316%" y="127.50">cr..</text></g><g><title>type_of (2,846,262 samples, 2.03%)</title><rect x="19.6678%" y="101" width="2.0313%" height="15" fill="rgb(210,31,41)"/><text x="19.9178%" y="111.50">t..</text></g><g><title>metadata_decode_entry_type_of (2,582,041 samples, 1.84%)</title><rect x="19.8564%" y="85" width="1.8427%" height="15" fill="rgb(221,200,47)"/><text x="20.1064%" y="95.50">m..</text></g><g><title>lint_checking (3,583,650 samples, 2.56%)</title><rect x="19.1779%" y="133" width="2.5576%" height="15" fill="rgb(226,26,5)"/><text x="19.4279%" y="143.50">li..</text></g><g><title>misc_checking_3 (3,848,313 samples, 2.75%)</title><rect x="19.1106%" y="149" width="2.7465%" height="15" fill="rgb(249,33,26)"/><text x="19.3606%" y="159.50">mi..</text></g><g><title>impl_parent (204,833 samples, 0.15%)</title><rect x="22.1430%" y="85" width="0.1462%" height="15" fill="rgb(235,183,28)"/><text x="22.3930%" y="95.50"></text></g><g><title>impl_trait_ref (724,919 samples, 0.52%)</title><rect x="22.2892%" y="85" width="0.5174%" height="15" fill="rgb(221,5,38)"/><text x="22.5392%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (658,378 samples, 0.47%)</title><rect x="22.3367%" y="69" width="0.4699%" height="15" fill="rgb(247,18,42)"/><text x="22.5867%" y="79.50"></text></g><g><title>coherent_trait (1,401,735 samples, 1.00%)</title><rect x="21.8907%" y="117" width="1.0004%" height="15" fill="rgb(241,131,45)"/><text x="22.1407%" y="127.50"></text></g><g><title>specialization_graph_of (1,392,445 samples, 0.99%)</title><rect x="21.8973%" y="101" width="0.9938%" height="15" fill="rgb(249,31,29)"/><text x="22.1473%" y="111.50"></text></g><g><title>coherence_checking (1,467,347 samples, 1.05%)</title><rect x="21.8798%" y="133" width="1.0472%" height="15" fill="rgb(225,111,53)"/><text x="22.1298%" y="143.50"></text></g><g><title>evaluate_obligation (608,879 samples, 0.43%)</title><rect x="24.4453%" y="69" width="0.4345%" height="15" fill="rgb(238,160,17)"/><text x="24.6953%" y="79.50"></text></g><g><title>trait_impls_of (325,176 samples, 0.23%)</title><rect x="24.6478%" y="53" width="0.2321%" height="15" fill="rgb(214,148,48)"/><text x="24.8978%" y="63.50"></text></g><g><title>is_copy_raw (145,422 samples, 0.10%)</title><rect x="25.0093%" y="69" width="0.1038%" height="15" fill="rgb(232,36,49)"/><text x="25.2593%" y="79.50"></text></g><g><title>item_bodies_checking (3,358,818 samples, 2.40%)</title><rect x="22.9400%" y="133" width="2.3971%" height="15" fill="rgb(209,103,24)"/><text x="23.1900%" y="143.50">it..</text></g><g><title>typeck_item_bodies (3,357,008 samples, 2.40%)</title><rect x="22.9413%" y="117" width="2.3958%" height="15" fill="rgb(229,88,8)"/><text x="23.1913%" y="127.50">ty..</text></g><g><title>typeck (3,341,047 samples, 2.38%)</title><rect x="22.9527%" y="101" width="2.3844%" height="15" fill="rgb(213,181,19)"/><text x="23.2027%" y="111.50">ty..</text></g><g><title>typeck (3,331,637 samples, 2.38%)</title><rect x="22.9594%" y="85" width="2.3777%" height="15" fill="rgb(254,191,54)"/><text x="23.2094%" y="95.50">ty..</text></g><g><title>generics_of (154,063 samples, 0.11%)</title><rect x="25.5082%" y="101" width="0.1100%" height="15" fill="rgb(241,83,37)"/><text x="25.7582%" y="111.50"></text></g><g><title>explicit_predicates_of (180,962 samples, 0.13%)</title><rect x="25.6589%" y="69" width="0.1291%" height="15" fill="rgb(233,36,39)"/><text x="25.9089%" y="79.50"></text></g><g><title>predicates_of (445,066 samples, 0.32%)</title><rect x="25.6306%" y="101" width="0.3176%" height="15" fill="rgb(226,3,54)"/><text x="25.8806%" y="111.50"></text></g><g><title>predicates_defined_on (433,576 samples, 0.31%)</title><rect x="25.6388%" y="85" width="0.3094%" height="15" fill="rgb(245,192,40)"/><text x="25.8888%" y="95.50"></text></g><g><title>inferred_outlives_of (224,542 samples, 0.16%)</title><rect x="25.7880%" y="69" width="0.1603%" height="15" fill="rgb(238,167,29)"/><text x="26.0380%" y="79.50"></text></g><g><title>inferred_outlives_crate (211,022 samples, 0.15%)</title><rect x="25.7977%" y="53" width="0.1506%" height="15" fill="rgb(232,182,51)"/><text x="26.0477%" y="63.50"></text></g><g><title>type_collecting (807,839 samples, 0.58%)</title><rect x="25.4126%" y="133" width="0.5765%" height="15" fill="rgb(231,60,39)"/><text x="25.6626%" y="143.50"></text></g><g><title>collect_mod_item_types (793,739 samples, 0.57%)</title><rect x="25.4226%" y="117" width="0.5665%" height="15" fill="rgb(208,69,12)"/><text x="25.6726%" y="127.50"></text></g><g><title>check_impl_item_well_formed (477,724 samples, 0.34%)</title><rect x="26.0098%" y="117" width="0.3409%" height="15" fill="rgb(235,93,37)"/><text x="26.2598%" y="127.50"></text></g><g><title>evaluate_obligation (151,722 samples, 0.11%)</title><rect x="26.5532%" y="101" width="0.1083%" height="15" fill="rgb(213,116,39)"/><text x="26.8032%" y="111.50"></text></g><g><title>param_env (193,522 samples, 0.14%)</title><rect x="26.6861%" y="101" width="0.1381%" height="15" fill="rgb(222,207,29)"/><text x="26.9361%" y="111.50"></text></g><g><title>analysis (14,953,139 samples, 10.67%)</title><rect x="16.1967%" y="165" width="10.6717%" height="15" fill="rgb(206,96,30)"/><text x="16.4467%" y="175.50">analysis</text></g><g><title>type_check_crate (7,021,959 samples, 5.01%)</title><rect x="21.8570%" y="149" width="5.0114%" height="15" fill="rgb(218,138,4)"/><text x="22.1070%" y="159.50">type_c..</text></g><g><title>wf_checking (1,231,453 samples, 0.88%)</title><rect x="25.9896%" y="133" width="0.8789%" height="15" fill="rgb(250,191,14)"/><text x="26.2396%" y="143.50"></text></g><g><title>check_item_well_formed (725,498 samples, 0.52%)</title><rect x="26.3507%" y="117" width="0.5178%" height="15" fill="rgb(239,60,40)"/><text x="26.6007%" y="127.50"></text></g><g><title>is_freeze_raw (154,422 samples, 0.11%)</title><rect x="29.2416%" y="117" width="0.1102%" height="15" fill="rgb(206,27,48)"/><text x="29.4916%" y="127.50"></text></g><g><title>is_unpin_raw (184,442 samples, 0.13%)</title><rect x="29.3518%" y="117" width="0.1316%" height="15" fill="rgb(225,35,8)"/><text x="29.6018%" y="127.50"></text></g><g><title>evaluate_obligation (173,041 samples, 0.12%)</title><rect x="29.3599%" y="101" width="0.1235%" height="15" fill="rgb(250,213,24)"/><text x="29.6099%" y="111.50"></text></g><g><title>eval_to_const_value_raw (165,362 samples, 0.12%)</title><rect x="29.6879%" y="101" width="0.1180%" height="15" fill="rgb(247,123,22)"/><text x="29.9379%" y="111.50"></text></g><g><title>eval_to_const_value_raw (149,472 samples, 0.11%)</title><rect x="29.6993%" y="85" width="0.1067%" height="15" fill="rgb(231,138,38)"/><text x="29.9493%" y="95.50"></text></g><g><title>layout_of (153,402 samples, 0.11%)</title><rect x="29.8443%" y="101" width="0.1095%" height="15" fill="rgb(231,145,46)"/><text x="30.0943%" y="111.50"></text></g><g><title>param_env (178,082 samples, 0.13%)</title><rect x="29.9538%" y="101" width="0.1271%" height="15" fill="rgb(251,118,11)"/><text x="30.2038%" y="111.50"></text></g><g><title>layout_of (846,369 samples, 0.60%)</title><rect x="29.4834%" y="117" width="0.6040%" height="15" fill="rgb(217,147,25)"/><text x="29.7334%" y="127.50"></text></g><g><title>param_env (275,322 samples, 0.20%)</title><rect x="30.0874%" y="117" width="0.1965%" height="15" fill="rgb(247,81,37)"/><text x="30.3374%" y="127.50"></text></g><g><title>fn_abi_of_instance (1,764,318 samples, 1.26%)</title><rect x="29.0839%" y="133" width="1.2592%" height="15" fill="rgb(209,12,38)"/><text x="29.3339%" y="143.50"></text></g><g><title>codegen_module (4,107,557 samples, 2.93%)</title><rect x="27.5612%" y="149" width="2.9315%" height="15" fill="rgb(227,1,9)"/><text x="27.8112%" y="159.50">co..</text></g><g><title>item_attrs (200,160 samples, 0.14%)</title><rect x="30.6661%" y="85" width="0.1429%" height="15" fill="rgb(248,47,43)"/><text x="30.9161%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (195,170 samples, 0.14%)</title><rect x="30.6697%" y="69" width="0.1393%" height="15" fill="rgb(221,10,30)"/><text x="30.9197%" y="79.50"></text></g><g><title>codegen_fn_attrs (303,601 samples, 0.22%)</title><rect x="30.6364%" y="101" width="0.2167%" height="15" fill="rgb(210,229,1)"/><text x="30.8864%" y="111.50"></text></g><g><title>is_reachable_non_generic (167,163 samples, 0.12%)</title><rect x="30.8812%" y="101" width="0.1193%" height="15" fill="rgb(222,148,37)"/><text x="31.1312%" y="111.50"></text></g><g><title>reachable_non_generics (161,923 samples, 0.12%)</title><rect x="30.8850%" y="85" width="0.1156%" height="15" fill="rgb(234,67,33)"/><text x="31.1350%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (160,673 samples, 0.11%)</title><rect x="30.8859%" y="69" width="0.1147%" height="15" fill="rgb(247,98,35)"/><text x="31.1359%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (149,403 samples, 0.11%)</title><rect x="31.0641%" y="85" width="0.1066%" height="15" fill="rgb(247,138,52)"/><text x="31.3141%" y="95.50"></text></g><g><title>optimized_mir (242,144 samples, 0.17%)</title><rect x="31.0257%" y="101" width="0.1728%" height="15" fill="rgb(213,79,30)"/><text x="31.2757%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (321,092 samples, 0.23%)</title><rect x="31.2593%" y="85" width="0.2292%" height="15" fill="rgb(246,177,23)"/><text x="31.5093%" y="95.50"></text></g><g><title>impl_parent (206,022 samples, 0.15%)</title><rect x="31.8145%" y="69" width="0.1470%" height="15" fill="rgb(230,62,27)"/><text x="32.0645%" y="79.50"></text></g><g><title>specialization_graph_of (953,462 samples, 0.68%)</title><rect x="31.5659%" y="85" width="0.6805%" height="15" fill="rgb(216,154,8)"/><text x="31.8159%" y="95.50"></text></g><g><title>impl_trait_ref (399,174 samples, 0.28%)</title><rect x="31.9615%" y="69" width="0.2849%" height="15" fill="rgb(244,35,45)"/><text x="32.2115%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (312,034 samples, 0.22%)</title><rect x="32.0237%" y="53" width="0.2227%" height="15" fill="rgb(251,115,12)"/><text x="32.2737%" y="63.50"></text></g><g><title>resolve_instance (1,509,798 samples, 1.08%)</title><rect x="31.1985%" y="101" width="1.0775%" height="15" fill="rgb(240,54,50)"/><text x="31.4485%" y="111.50"></text></g><g><title>own_existential_vtable_entries (151,302 samples, 0.11%)</title><rect x="32.3154%" y="85" width="0.1080%" height="15" fill="rgb(233,84,52)"/><text x="32.5654%" y="95.50"></text></g><g><title>impl_parent (605,136 samples, 0.43%)</title><rect x="33.3287%" y="53" width="0.4319%" height="15" fill="rgb(207,117,47)"/><text x="33.5787%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (361,543 samples, 0.26%)</title><rect x="33.5025%" y="37" width="0.2580%" height="15" fill="rgb(249,43,39)"/><text x="33.7525%" y="47.50"></text></g><g><title>impl_trait_ref (929,882 samples, 0.66%)</title><rect x="33.7605%" y="53" width="0.6636%" height="15" fill="rgb(209,38,44)"/><text x="34.0105%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (681,962 samples, 0.49%)</title><rect x="33.9375%" y="37" width="0.4867%" height="15" fill="rgb(236,212,23)"/><text x="34.1875%" y="47.50"></text></g><g><title>specialization_graph_of (2,776,191 samples, 1.98%)</title><rect x="32.4437%" y="69" width="1.9813%" height="15" fill="rgb(242,79,21)"/><text x="32.6937%" y="79.50">s..</text></g><g><title>resolve_instance (2,812,531 samples, 2.01%)</title><rect x="32.4234%" y="85" width="2.0072%" height="15" fill="rgb(211,96,35)"/><text x="32.6734%" y="95.50">r..</text></g><g><title>monomorphization_collector_graph_walk (5,498,022 samples, 3.92%)</title><rect x="30.5112%" y="117" width="3.9238%" height="15" fill="rgb(253,215,40)"/><text x="30.7612%" y="127.50">mono..</text></g><g><title>vtable_entries (3,025,164 samples, 2.16%)</title><rect x="32.2761%" y="101" width="2.1590%" height="15" fill="rgb(211,81,21)"/><text x="32.5261%" y="111.50">v..</text></g><g><title>monomorphization_collector (5,525,912 samples, 3.94%)</title><rect x="30.5095%" y="133" width="3.9437%" height="15" fill="rgb(208,190,38)"/><text x="30.7595%" y="143.50">mono..</text></g><g><title>assert_symbols_are_distinct (227,552 samples, 0.16%)</title><rect x="34.4556%" y="117" width="0.1624%" height="15" fill="rgb(235,213,38)"/><text x="34.7056%" y="127.50"></text></g><g><title>symbol_name (213,852 samples, 0.15%)</title><rect x="34.4654%" y="101" width="0.1526%" height="15" fill="rgb(237,122,38)"/><text x="34.7154%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (5,847,915 samples, 4.17%)</title><rect x="30.4934%" y="149" width="4.1735%" height="15" fill="rgb(244,218,35)"/><text x="30.7434%" y="159.50">colle..</text></g><g><title>partition_and_assert_distinct_symbols (299,523 samples, 0.21%)</title><rect x="34.4532%" y="133" width="0.2138%" height="15" fill="rgb(240,68,47)"/><text x="34.7032%" y="143.50"></text></g><g><title>codegen_crate (10,982,084 samples, 7.84%)</title><rect x="26.8764%" y="165" width="7.8377%" height="15" fill="rgb(210,16,53)"/><text x="27.1264%" y="175.50">codegen_cra..</text></g><g><title>codegen_module_optimize (23,627,945 samples, 16.86%)</title><rect x="34.7141%" y="165" width="16.8628%" height="15" fill="rgb(235,124,12)"/><text x="34.9641%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (21,572,521 samples, 15.40%)</title><rect x="36.1810%" y="149" width="15.3959%" height="15" fill="rgb(224,169,11)"/><text x="36.4310%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (7,836,870 samples, 5.59%)</title><rect x="52.8008%" y="149" width="5.5930%" height="15" fill="rgb(250,166,2)"/><text x="53.0508%" y="159.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (15,839,837 samples, 11.30%)</title><rect x="58.3938%" y="149" width="11.3046%" height="15" fill="rgb(242,216,29)"/><text x="58.6438%" y="159.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (15,502,804 samples, 11.06%)</title><rect x="58.6343%" y="133" width="11.0640%" height="15" fill="rgb(230,116,27)"/><text x="58.8843%" y="143.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (1,160,765 samples, 0.83%)</title><rect x="69.6983%" y="149" width="0.8284%" height="15" fill="rgb(228,99,48)"/><text x="69.9483%" y="159.50"></text></g><g><title>codegen_module_perform_lto (26,650,892 samples, 19.02%)</title><rect x="51.5769%" y="165" width="19.0202%" height="15" fill="rgb(253,11,6)"/><text x="51.8269%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_load_macro (350,905 samples, 0.25%)</title><rect x="78.0463%" y="117" width="0.2504%" height="15" fill="rgb(247,143,39)"/><text x="78.2963%" y="127.50"></text></g><g><title>macro_expand_crate (13,005,006 samples, 9.28%)</title><rect x="70.9276%" y="149" width="9.2814%" height="15" fill="rgb(236,97,10)"/><text x="71.1776%" y="159.50">macro_expand_..</text></g><g><title>expand_crate (12,989,316 samples, 9.27%)</title><rect x="70.9388%" y="133" width="9.2702%" height="15" fill="rgb(233,208,19)"/><text x="71.1888%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (2,679,490 samples, 1.91%)</title><rect x="78.2967%" y="117" width="1.9123%" height="15" fill="rgb(216,164,2)"/><text x="78.5467%" y="127.50">m..</text></g><g><title>metadata_register_crate (938,372 samples, 0.67%)</title><rect x="79.5393%" y="101" width="0.6697%" height="15" fill="rgb(220,129,5)"/><text x="79.7893%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (196,132 samples, 0.14%)</title><rect x="80.2128%" y="149" width="0.1400%" height="15" fill="rgb(242,17,10)"/><text x="80.4628%" y="159.50"></text></g><g><title>finalize_macro_resolutions (256,693 samples, 0.18%)</title><rect x="80.3855%" y="133" width="0.1832%" height="15" fill="rgb(242,107,0)"/><text x="80.6355%" y="143.50"></text></g><g><title>late_resolve_crate (759,018 samples, 0.54%)</title><rect x="80.5687%" y="133" width="0.5417%" height="15" fill="rgb(251,28,31)"/><text x="80.8187%" y="143.50"></text></g><g><title>configure_and_expand (14,778,026 samples, 10.55%)</title><rect x="70.5971%" y="165" width="10.5468%" height="15" fill="rgb(233,223,10)"/><text x="70.8471%" y="175.50">configure_and_e..</text></g><g><title>resolve_crate (1,108,483 samples, 0.79%)</title><rect x="80.3527%" y="149" width="0.7911%" height="15" fill="rgb(215,21,27)"/><text x="80.6027%" y="159.50"></text></g><g><title>free_global_ctxt (2,908,163 samples, 2.08%)</title><rect x="81.2970%" y="165" width="2.0755%" height="15" fill="rgb(232,23,21)"/><text x="81.5470%" y="175.50">f..</text></g><g><title>layout_of (172,532 samples, 0.12%)</title><rect x="84.0478%" y="133" width="0.1231%" height="15" fill="rgb(244,5,23)"/><text x="84.2978%" y="143.50"></text></g><g><title>optimized_mir (953,691 samples, 0.68%)</title><rect x="83.7578%" y="149" width="0.6806%" height="15" fill="rgb(226,81,46)"/><text x="84.0078%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (374,835 samples, 0.27%)</title><rect x="84.1710%" y="133" width="0.2675%" height="15" fill="rgb(247,70,30)"/><text x="84.4210%" y="143.50"></text></g><g><title>generate_crate_metadata (1,506,637 samples, 1.08%)</title><rect x="83.3725%" y="165" width="1.0753%" height="15" fill="rgb(212,68,19)"/><text x="83.6225%" y="175.50"></text></g><g><title>hir_lowering (819,119 samples, 0.58%)</title><rect x="84.4477%" y="165" width="0.5846%" height="15" fill="rgb(240,187,13)"/><text x="84.6977%" y="175.50"></text></g><g><title>finish_ongoing_codegen (16,866,240 samples, 12.04%)</title><rect x="85.0437%" y="149" width="12.0371%" height="15" fill="rgb(223,113,26)"/><text x="85.2937%" y="159.50">finish_ongoing_cod..</text></g><g><title>link_crate (730,038 samples, 0.52%)</title><rect x="97.0808%" y="149" width="0.5210%" height="15" fill="rgb(206,192,2)"/><text x="97.3308%" y="159.50"></text></g><g><title>link_binary (716,568 samples, 0.51%)</title><rect x="97.0904%" y="133" width="0.5114%" height="15" fill="rgb(241,108,4)"/><text x="97.3404%" y="143.50"></text></g><g><title>link_rlib (443,585 samples, 0.32%)</title><rect x="97.2852%" y="117" width="0.3166%" height="15" fill="rgb(247,173,49)"/><text x="97.5352%" y="127.50"></text></g><g><title>link (17,621,848 samples, 12.58%)</title><rect x="85.0323%" y="165" width="12.5763%" height="15" fill="rgb(224,114,35)"/><text x="85.2823%" y="175.50">link</text></g><g><title>parse_crate (1,869,851 samples, 1.33%)</title><rect x="97.6087%" y="165" width="1.3345%" height="15" fill="rgb(245,159,27)"/><text x="97.8587%" y="175.50"></text></g><g><title>prepare_outputs (392,035 samples, 0.28%)</title><rect x="98.9497%" y="165" width="0.2798%" height="15" fill="rgb(245,172,44)"/><text x="99.1997%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (625,287 samples, 0.45%)</title><rect x="99.2295%" y="165" width="0.4463%" height="15" fill="rgb(236,23,11)"/><text x="99.4795%" y="175.50"></text></g><g><title>all (140,118,938 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (140,118,938 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (324,244 samples, 0.23%)</title><rect x="99.7686%" y="165" width="0.2314%" height="15" fill="rgb(244,70,9)"/><text x="100.0186%" y="175.50"></text></g></svg></svg>