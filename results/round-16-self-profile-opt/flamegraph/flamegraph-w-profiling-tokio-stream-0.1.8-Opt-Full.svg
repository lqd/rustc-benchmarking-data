<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (100,202,052 samples, 8.97%)</title><rect x="0.0734%" y="197" width="8.9664%" height="15" fill="rgb(227,0,7)"/><text x="0.3234%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (4,941,214 samples, 0.44%)</title><rect x="14.4155%" y="69" width="0.4422%" height="15" fill="rgb(217,0,24)"/><text x="14.6655%" y="79.50"></text></g><g><title>evaluate_obligation (4,274,768 samples, 0.38%)</title><rect x="14.4752%" y="53" width="0.3825%" height="15" fill="rgb(221,193,54)"/><text x="14.7252%" y="63.50"></text></g><g><title>needs_drop_raw (6,255,800 samples, 0.56%)</title><rect x="14.2986%" y="85" width="0.5598%" height="15" fill="rgb(248,212,6)"/><text x="14.5486%" y="95.50"></text></g><g><title>specialization_graph_of (1,797,500 samples, 0.16%)</title><rect x="14.9911%" y="69" width="0.1608%" height="15" fill="rgb(208,68,35)"/><text x="15.2411%" y="79.50"></text></g><g><title>resolve_instance (3,500,148 samples, 0.31%)</title><rect x="14.8584%" y="85" width="0.3132%" height="15" fill="rgb(232,128,0)"/><text x="15.1084%" y="95.50"></text></g><g><title>thir_body (3,004,774 samples, 0.27%)</title><rect x="15.1802%" y="85" width="0.2689%" height="15" fill="rgb(207,160,47)"/><text x="15.4302%" y="95.50"></text></g><g><title>mir_const (27,240,982 samples, 2.44%)</title><rect x="13.0247%" y="133" width="2.4376%" height="15" fill="rgb(228,23,34)"/><text x="13.2747%" y="143.50">mi..</text></g><g><title>unsafety_check_result (24,138,627 samples, 2.16%)</title><rect x="13.3023%" y="117" width="2.1600%" height="15" fill="rgb(218,30,26)"/><text x="13.5523%" y="127.50">u..</text></g><g><title>mir_built (21,851,937 samples, 1.96%)</title><rect x="13.5070%" y="101" width="1.9554%" height="15" fill="rgb(220,122,19)"/><text x="13.7570%" y="111.50">m..</text></g><g><title>mir_const_qualif (1,379,978 samples, 0.12%)</title><rect x="15.4623%" y="133" width="0.1235%" height="15" fill="rgb(250,228,42)"/><text x="15.7123%" y="143.50"></text></g><g><title>mir_promoted (31,017,961 samples, 2.78%)</title><rect x="12.8103%" y="149" width="2.7756%" height="15" fill="rgb(240,193,28)"/><text x="13.0603%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (2,946,920 samples, 0.26%)</title><rect x="15.5859%" y="149" width="0.2637%" height="15" fill="rgb(216,20,37)"/><text x="15.8359%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,709,549 samples, 0.15%)</title><rect x="15.8496%" y="149" width="0.1530%" height="15" fill="rgb(206,188,39)"/><text x="16.0996%" y="159.50"></text></g><g><title>type_op_prove_predicate (8,350,118 samples, 0.75%)</title><rect x="16.1126%" y="149" width="0.7472%" height="15" fill="rgb(217,207,13)"/><text x="16.3626%" y="159.50"></text></g><g><title>MIR_borrow_checking (86,442,400 samples, 7.74%)</title><rect x="9.1257%" y="181" width="7.7351%" height="15" fill="rgb(231,73,38)"/><text x="9.3757%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (85,952,365 samples, 7.69%)</title><rect x="9.1696%" y="165" width="7.6913%" height="15" fill="rgb(225,20,46)"/><text x="9.4196%" y="175.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,883,829 samples, 0.17%)</title><rect x="17.0081%" y="165" width="0.1686%" height="15" fill="rgb(210,31,41)"/><text x="17.2581%" y="175.50"></text></g><g><title>lint_levels (1,427,456 samples, 0.13%)</title><rect x="17.3113%" y="149" width="0.1277%" height="15" fill="rgb(221,200,47)"/><text x="17.5613%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,882,226 samples, 0.26%)</title><rect x="17.2499%" y="165" width="0.2579%" height="15" fill="rgb(226,26,5)"/><text x="17.4999%" y="175.50"></text></g><g><title>misc_checking_1 (5,899,705 samples, 0.53%)</title><rect x="17.0003%" y="181" width="0.5279%" height="15" fill="rgb(249,33,26)"/><text x="17.2503%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,721,849 samples, 0.15%)</title><rect x="17.5284%" y="165" width="0.1541%" height="15" fill="rgb(235,183,28)"/><text x="17.7784%" y="175.50"></text></g><g><title>check_mod_liveness (1,386,416 samples, 0.12%)</title><rect x="17.5584%" y="149" width="0.1241%" height="15" fill="rgb(221,5,38)"/><text x="17.8084%" y="159.50"></text></g><g><title>misc_checking_2 (3,567,140 samples, 0.32%)</title><rect x="17.5282%" y="181" width="0.3192%" height="15" fill="rgb(247,18,42)"/><text x="17.7782%" y="191.50"></text></g><g><title>match_checking (1,843,481 samples, 0.16%)</title><rect x="17.6825%" y="165" width="0.1650%" height="15" fill="rgb(241,131,45)"/><text x="17.9325%" y="175.50"></text></g><g><title>check_match (1,704,350 samples, 0.15%)</title><rect x="17.6949%" y="149" width="0.1525%" height="15" fill="rgb(249,31,29)"/><text x="17.9449%" y="159.50"></text></g><g><title>death_checking (1,813,370 samples, 0.16%)</title><rect x="17.9407%" y="165" width="0.1623%" height="15" fill="rgb(225,111,53)"/><text x="18.1907%" y="175.50"></text></g><g><title>param_env (1,562,859 samples, 0.14%)</title><rect x="18.4151%" y="133" width="0.1398%" height="15" fill="rgb(238,160,17)"/><text x="18.6651%" y="143.50"></text></g><g><title>crate_lints (6,495,042 samples, 0.58%)</title><rect x="18.1033%" y="149" width="0.5812%" height="15" fill="rgb(214,148,48)"/><text x="18.3533%" y="159.50"></text></g><g><title>type_of (1,431,118 samples, 0.13%)</title><rect x="18.5564%" y="133" width="0.1281%" height="15" fill="rgb(232,36,49)"/><text x="18.8064%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,126,286 samples, 0.10%)</title><rect x="18.5837%" y="117" width="0.1008%" height="15" fill="rgb(209,103,24)"/><text x="18.8337%" y="127.50"></text></g><g><title>lint_checking (7,915,058 samples, 0.71%)</title><rect x="18.1030%" y="165" width="0.7083%" height="15" fill="rgb(229,88,8)"/><text x="18.3530%" y="175.50"></text></g><g><title>module_lints (1,417,046 samples, 0.13%)</title><rect x="18.6845%" y="149" width="0.1268%" height="15" fill="rgb(213,181,19)"/><text x="18.9345%" y="159.50"></text></g><g><title>lint_mod (1,391,785 samples, 0.12%)</title><rect x="18.6867%" y="133" width="0.1245%" height="15" fill="rgb(254,191,54)"/><text x="18.9367%" y="143.50"></text></g><g><title>privacy_access_levels (1,516,267 samples, 0.14%)</title><rect x="18.8113%" y="165" width="0.1357%" height="15" fill="rgb(241,83,37)"/><text x="19.0613%" y="175.50"></text></g><g><title>privacy_checking_modules (3,923,673 samples, 0.35%)</title><rect x="18.9470%" y="165" width="0.3511%" height="15" fill="rgb(233,36,39)"/><text x="19.1970%" y="175.50"></text></g><g><title>check_mod_privacy (3,899,073 samples, 0.35%)</title><rect x="18.9492%" y="149" width="0.3489%" height="15" fill="rgb(226,3,54)"/><text x="19.1992%" y="159.50"></text></g><g><title>misc_checking_3 (16,250,790 samples, 1.45%)</title><rect x="17.8474%" y="181" width="1.4542%" height="15" fill="rgb(245,192,40)"/><text x="18.0974%" y="191.50"></text></g><g><title>impl_parent (2,442,202 samples, 0.22%)</title><rect x="19.6806%" y="117" width="0.2185%" height="15" fill="rgb(238,167,29)"/><text x="19.9306%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,372,222 samples, 0.12%)</title><rect x="19.7764%" y="101" width="0.1228%" height="15" fill="rgb(232,182,51)"/><text x="20.0264%" y="111.50"></text></g><g><title>impl_trait_ref (5,553,722 samples, 0.50%)</title><rect x="19.8992%" y="117" width="0.4970%" height="15" fill="rgb(231,60,39)"/><text x="20.1492%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,706,080 samples, 0.42%)</title><rect x="19.9750%" y="101" width="0.4211%" height="15" fill="rgb(208,69,12)"/><text x="20.2250%" y="111.50"></text></g><g><title>trait_impls_of (1,171,612 samples, 0.10%)</title><rect x="20.4019%" y="117" width="0.1048%" height="15" fill="rgb(235,93,37)"/><text x="20.6519%" y="127.50"></text></g><g><title>coherent_trait (13,099,245 samples, 1.17%)</title><rect x="19.3346%" y="149" width="1.1722%" height="15" fill="rgb(213,116,39)"/><text x="19.5846%" y="159.50"></text></g><g><title>specialization_graph_of (13,051,535 samples, 1.17%)</title><rect x="19.3389%" y="133" width="1.1679%" height="15" fill="rgb(222,207,29)"/><text x="19.5889%" y="143.50"></text></g><g><title>coherence_checking (13,602,711 samples, 1.22%)</title><rect x="19.3315%" y="165" width="1.2172%" height="15" fill="rgb(206,96,30)"/><text x="19.5815%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,288,805 samples, 0.12%)</title><rect x="26.8669%" y="101" width="0.1153%" height="15" fill="rgb(218,138,4)"/><text x="27.1169%" y="111.50"></text></g><g><title>dropck_outlives (2,824,283 samples, 0.25%)</title><rect x="26.7488%" y="117" width="0.2527%" height="15" fill="rgb(250,191,14)"/><text x="26.9988%" y="127.50"></text></g><g><title>evaluate_obligation (7,867,303 samples, 0.70%)</title><rect x="27.0015%" y="117" width="0.7040%" height="15" fill="rgb(239,60,40)"/><text x="27.2515%" y="127.50"></text></g><g><title>method_autoderef_steps (3,850,081 samples, 0.34%)</title><rect x="27.8405%" y="117" width="0.3445%" height="15" fill="rgb(206,27,48)"/><text x="28.0905%" y="127.50"></text></g><g><title>typeck (5,232,287 samples, 0.47%)</title><rect x="28.3034%" y="117" width="0.4682%" height="15" fill="rgb(225,35,8)"/><text x="28.5534%" y="127.50"></text></g><g><title>item_bodies_checking (91,855,849 samples, 8.22%)</title><rect x="20.5644%" y="165" width="8.2195%" height="15" fill="rgb(250,213,24)"/><text x="20.8144%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (91,851,569 samples, 8.22%)</title><rect x="20.5648%" y="149" width="8.2191%" height="15" fill="rgb(247,123,22)"/><text x="20.8148%" y="159.50">typeck_item..</text></g><g><title>typeck (91,490,536 samples, 8.19%)</title><rect x="20.5971%" y="133" width="8.1868%" height="15" fill="rgb(231,138,38)"/><text x="20.8471%" y="143.50">typeck</text></g><g><title>mir_built (4,089,226 samples, 0.37%)</title><rect x="29.6529%" y="53" width="0.3659%" height="15" fill="rgb(231,145,46)"/><text x="29.9029%" y="63.50"></text></g><g><title>typeck (3,311,417 samples, 0.30%)</title><rect x="29.7225%" y="37" width="0.2963%" height="15" fill="rgb(251,118,11)"/><text x="29.9725%" y="47.50"></text></g><g><title>mir_const (4,702,763 samples, 0.42%)</title><rect x="29.6121%" y="85" width="0.4208%" height="15" fill="rgb(217,147,25)"/><text x="29.8621%" y="95.50"></text></g><g><title>unsafety_check_result (4,369,228 samples, 0.39%)</title><rect x="29.6419%" y="69" width="0.3910%" height="15" fill="rgb(247,81,37)"/><text x="29.8919%" y="79.50"></text></g><g><title>mir_promoted (4,833,844 samples, 0.43%)</title><rect x="29.6013%" y="101" width="0.4325%" height="15" fill="rgb(209,12,38)"/><text x="29.8513%" y="111.50"></text></g><g><title>type_of (7,719,747 samples, 0.69%)</title><rect x="29.3991%" y="133" width="0.6908%" height="15" fill="rgb(227,1,9)"/><text x="29.6491%" y="143.50"></text></g><g><title>mir_borrowck (7,610,065 samples, 0.68%)</title><rect x="29.4090%" y="117" width="0.6810%" height="15" fill="rgb(248,47,43)"/><text x="29.6590%" y="127.50"></text></g><g><title>item_types_checking (15,605,523 samples, 1.40%)</title><rect x="28.7840%" y="165" width="1.3964%" height="15" fill="rgb(221,10,30)"/><text x="29.0340%" y="175.50"></text></g><g><title>check_mod_item_types (15,570,453 samples, 1.39%)</title><rect x="28.7871%" y="149" width="1.3933%" height="15" fill="rgb(210,229,1)"/><text x="29.0371%" y="159.50"></text></g><g><title>fn_sig (1,591,409 samples, 0.14%)</title><rect x="30.3070%" y="133" width="0.1424%" height="15" fill="rgb(222,148,37)"/><text x="30.5570%" y="143.50"></text></g><g><title>generics_of (2,141,257 samples, 0.19%)</title><rect x="30.4494%" y="133" width="0.1916%" height="15" fill="rgb(234,67,33)"/><text x="30.6994%" y="143.50"></text></g><g><title>explicit_predicates_of (2,528,193 samples, 0.23%)</title><rect x="30.7265%" y="101" width="0.2262%" height="15" fill="rgb(247,98,35)"/><text x="30.9765%" y="111.50"></text></g><g><title>predicates_of (5,043,534 samples, 0.45%)</title><rect x="30.6548%" y="133" width="0.4513%" height="15" fill="rgb(247,138,52)"/><text x="30.9048%" y="143.50"></text></g><g><title>predicates_defined_on (4,736,454 samples, 0.42%)</title><rect x="30.6823%" y="117" width="0.4238%" height="15" fill="rgb(213,79,30)"/><text x="30.9323%" y="127.50"></text></g><g><title>inferred_outlives_of (1,713,550 samples, 0.15%)</title><rect x="30.9528%" y="101" width="0.1533%" height="15" fill="rgb(246,177,23)"/><text x="31.2028%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,588,918 samples, 0.14%)</title><rect x="30.9639%" y="85" width="0.1422%" height="15" fill="rgb(230,62,27)"/><text x="31.2139%" y="95.50"></text></g><g><title>type_collecting (11,155,954 samples, 1.00%)</title><rect x="30.1819%" y="165" width="0.9983%" height="15" fill="rgb(216,154,8)"/><text x="30.4319%" y="175.50"></text></g><g><title>collect_mod_item_types (11,111,314 samples, 0.99%)</title><rect x="30.1859%" y="149" width="0.9943%" height="15" fill="rgb(244,35,45)"/><text x="30.4359%" y="159.50"></text></g><g><title>evaluate_obligation (4,272,972 samples, 0.38%)</title><rect x="32.1834%" y="133" width="0.3824%" height="15" fill="rgb(251,115,12)"/><text x="32.4334%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,574,878 samples, 0.14%)</title><rect x="32.5721%" y="133" width="0.1409%" height="15" fill="rgb(240,54,50)"/><text x="32.8221%" y="143.50"></text></g><g><title>param_env (1,422,374 samples, 0.13%)</title><rect x="32.7136%" y="133" width="0.1273%" height="15" fill="rgb(233,84,52)"/><text x="32.9636%" y="143.50"></text></g><g><title>region_scope_tree (1,124,586 samples, 0.10%)</title><rect x="32.8458%" y="133" width="0.1006%" height="15" fill="rgb(207,117,47)"/><text x="33.0958%" y="143.50"></text></g><g><title>check_impl_item_well_formed (18,839,741 samples, 1.69%)</title><rect x="31.2800%" y="149" width="1.6858%" height="15" fill="rgb(249,43,39)"/><text x="31.5300%" y="159.50"></text></g><g><title>param_env (2,106,626 samples, 0.19%)</title><rect x="34.1132%" y="133" width="0.1885%" height="15" fill="rgb(209,38,44)"/><text x="34.3632%" y="143.50"></text></g><g><title>check_item_well_formed (16,299,465 samples, 1.46%)</title><rect x="32.9659%" y="149" width="1.4585%" height="15" fill="rgb(236,212,23)"/><text x="33.2159%" y="159.50"></text></g><g><title>analysis (285,241,175 samples, 25.52%)</title><rect x="9.0397%" y="197" width="25.5242%" height="15" fill="rgb(242,79,21)"/><text x="9.2897%" y="207.50">analysis</text></g><g><title>type_check_crate (170,561,683 samples, 15.26%)</title><rect x="19.3016%" y="181" width="15.2624%" height="15" fill="rgb(211,96,35)"/><text x="19.5516%" y="191.50">type_check_crate</text></g><g><title>wf_checking (37,789,200 samples, 3.38%)</title><rect x="31.1825%" y="165" width="3.3815%" height="15" fill="rgb(253,215,40)"/><text x="31.4325%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (1,559,807 samples, 0.14%)</title><rect x="34.4244%" y="149" width="0.1396%" height="15" fill="rgb(211,81,21)"/><text x="34.6744%" y="159.50"></text></g><g><title>param_env (2,228,774 samples, 0.20%)</title><rect x="36.7718%" y="149" width="0.1994%" height="15" fill="rgb(208,190,38)"/><text x="37.0218%" y="159.50"></text></g><g><title>fn_abi_of_instance (7,455,535 samples, 0.67%)</title><rect x="36.3566%" y="165" width="0.6671%" height="15" fill="rgb(235,213,38)"/><text x="36.6066%" y="175.50"></text></g><g><title>codegen_module (27,013,741 samples, 2.42%)</title><rect x="34.7048%" y="181" width="2.4173%" height="15" fill="rgb(237,122,38)"/><text x="34.9548%" y="191.50">co..</text></g><g><title>metadata_decode_entry_optimized_mir (1,124,230 samples, 0.10%)</title><rect x="37.4536%" y="117" width="0.1006%" height="15" fill="rgb(244,218,35)"/><text x="37.7036%" y="127.50"></text></g><g><title>optimized_mir (3,547,329 samples, 0.32%)</title><rect x="37.3340%" y="133" width="0.3174%" height="15" fill="rgb(240,68,47)"/><text x="37.5840%" y="143.50"></text></g><g><title>resolve_instance (2,546,937 samples, 0.23%)</title><rect x="37.6514%" y="133" width="0.2279%" height="15" fill="rgb(210,16,53)"/><text x="37.9014%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (8,909,269 samples, 0.80%)</title><rect x="37.1259%" y="149" width="0.7972%" height="15" fill="rgb(235,124,12)"/><text x="37.3759%" y="159.50"></text></g><g><title>monomorphization_collector (9,036,010 samples, 0.81%)</title><rect x="37.1257%" y="165" width="0.8086%" height="15" fill="rgb(224,169,11)"/><text x="37.3757%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (10,305,494 samples, 0.92%)</title><rect x="37.1228%" y="181" width="0.9222%" height="15" fill="rgb(250,166,2)"/><text x="37.3728%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,237,383 samples, 0.11%)</title><rect x="37.9343%" y="165" width="0.1107%" height="15" fill="rgb(242,216,29)"/><text x="38.1843%" y="175.50"></text></g><g><title>codegen_crate (39,014,692 samples, 3.49%)</title><rect x="34.5645%" y="197" width="3.4911%" height="15" fill="rgb(230,116,27)"/><text x="34.8145%" y="207.50">cod..</text></g><g><title>codegen_module_optimize (168,861,685 samples, 15.11%)</title><rect x="38.0557%" y="197" width="15.1102%" height="15" fill="rgb(228,99,48)"/><text x="38.3057%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (153,517,526 samples, 13.74%)</title><rect x="39.4287%" y="181" width="13.7372%" height="15" fill="rgb(253,11,6)"/><text x="39.6787%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (123,630,130 samples, 11.06%)</title><rect x="54.3272%" y="181" width="11.0628%" height="15" fill="rgb(247,143,39)"/><text x="54.5772%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (152,916,031 samples, 13.68%)</title><rect x="65.3900%" y="181" width="13.6834%" height="15" fill="rgb(236,97,10)"/><text x="65.6400%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (150,567,246 samples, 13.47%)</title><rect x="65.6001%" y="165" width="13.4732%" height="15" fill="rgb(233,208,19)"/><text x="65.8501%" y="175.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (15,666,033 samples, 1.40%)</title><rect x="79.0733%" y="181" width="1.4018%" height="15" fill="rgb(216,164,2)"/><text x="79.3233%" y="191.50"></text></g><g><title>codegen_module_perform_lto (305,858,796 samples, 27.37%)</title><rect x="53.1659%" y="197" width="27.3691%" height="15" fill="rgb(220,129,5)"/><text x="53.4159%" y="207.50">codegen_module_perform_lto</text></g><g><title>AST_validation (1,197,303 samples, 0.11%)</title><rect x="80.5475%" y="181" width="0.1071%" height="15" fill="rgb(242,17,10)"/><text x="80.7975%" y="191.50"></text></g><g><title>metadata_register_crate (7,127,078 samples, 0.64%)</title><rect x="86.3664%" y="149" width="0.6378%" height="15" fill="rgb(242,107,0)"/><text x="86.6164%" y="159.50"></text></g><g><title>metadata_register_crate (5,460,520 samples, 0.49%)</title><rect x="86.5156%" y="133" width="0.4886%" height="15" fill="rgb(251,28,31)"/><text x="86.7656%" y="143.50"></text></g><g><title>macro_expand_crate (71,208,510 samples, 6.37%)</title><rect x="80.6826%" y="181" width="6.3719%" height="15" fill="rgb(233,223,10)"/><text x="80.9326%" y="191.50">macro_ex..</text></g><g><title>expand_crate (71,196,780 samples, 6.37%)</title><rect x="80.6837%" y="165" width="6.3709%" height="15" fill="rgb(215,21,27)"/><text x="80.9337%" y="175.50">expand_c..</text></g><g><title>late_resolve_crate (5,848,374 samples, 0.52%)</title><rect x="87.1480%" y="165" width="0.5233%" height="15" fill="rgb(232,23,21)"/><text x="87.3980%" y="175.50"></text></g><g><title>configure_and_expand (80,238,590 samples, 7.18%)</title><rect x="80.5351%" y="197" width="7.1800%" height="15" fill="rgb(244,5,23)"/><text x="80.7851%" y="207.50">configure_..</text></g><g><title>resolve_crate (7,302,651 samples, 0.65%)</title><rect x="87.0616%" y="181" width="0.6535%" height="15" fill="rgb(226,81,46)"/><text x="87.3116%" y="191.50"></text></g><g><title>drop_ast (1,416,396 samples, 0.13%)</title><rect x="87.7150%" y="197" width="0.1267%" height="15" fill="rgb(247,70,30)"/><text x="87.9650%" y="207.50"></text></g><g><title>early_lint_checks (3,233,376 samples, 0.29%)</title><rect x="87.8438%" y="197" width="0.2893%" height="15" fill="rgb(212,68,19)"/><text x="88.0938%" y="207.50"></text></g><g><title>free_global_ctxt (8,698,966 samples, 0.78%)</title><rect x="88.1331%" y="197" width="0.7784%" height="15" fill="rgb(240,187,13)"/><text x="88.3831%" y="207.50"></text></g><g><title>layout_of (1,257,418 samples, 0.11%)</title><rect x="90.9483%" y="149" width="0.1125%" height="15" fill="rgb(223,113,26)"/><text x="91.1983%" y="159.50"></text></g><g><title>layout_of (3,136,732 samples, 0.28%)</title><rect x="90.7955%" y="165" width="0.2807%" height="15" fill="rgb(206,192,2)"/><text x="91.0455%" y="175.50"></text></g><g><title>is_copy_raw (1,510,131 samples, 0.14%)</title><rect x="92.0728%" y="133" width="0.1351%" height="15" fill="rgb(241,108,4)"/><text x="92.3228%" y="143.50"></text></g><g><title>evaluate_obligation (1,245,326 samples, 0.11%)</title><rect x="92.0965%" y="117" width="0.1114%" height="15" fill="rgb(247,173,49)"/><text x="92.3465%" y="127.50"></text></g><g><title>needs_drop_raw (1,721,843 samples, 0.15%)</title><rect x="92.0556%" y="149" width="0.1541%" height="15" fill="rgb(224,114,35)"/><text x="92.3056%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (13,127,097 samples, 1.17%)</title><rect x="91.0762%" y="165" width="1.1747%" height="15" fill="rgb(245,159,27)"/><text x="91.3262%" y="175.50"></text></g><g><title>optimized_mir (26,065,646 samples, 2.33%)</title><rect x="89.9205%" y="181" width="2.3324%" height="15" fill="rgb(245,172,44)"/><text x="90.1705%" y="191.50">o..</text></g><g><title>generate_crate_metadata (37,569,437 samples, 3.36%)</title><rect x="88.9115%" y="197" width="3.3618%" height="15" fill="rgb(236,23,11)"/><text x="89.1615%" y="207.50">gen..</text></g><g><title>hir_lowering (13,905,784 samples, 1.24%)</title><rect x="92.2734%" y="197" width="1.2443%" height="15" fill="rgb(205,117,38)"/><text x="92.5234%" y="207.50"></text></g><g><title>finish_ongoing_codegen (64,258,193 samples, 5.75%)</title><rect x="93.5192%" y="181" width="5.7500%" height="15" fill="rgb(237,72,25)"/><text x="93.7692%" y="191.50">finish_..</text></g><g><title>link_crate (2,906,352 samples, 0.26%)</title><rect x="99.2692%" y="181" width="0.2601%" height="15" fill="rgb(244,70,9)"/><text x="99.5192%" y="191.50"></text></g><g><title>link_binary (2,828,481 samples, 0.25%)</title><rect x="99.2762%" y="165" width="0.2531%" height="15" fill="rgb(217,125,39)"/><text x="99.5262%" y="175.50"></text></g><g><title>link_rlib (2,041,212 samples, 0.18%)</title><rect x="99.3466%" y="149" width="0.1827%" height="15" fill="rgb(235,36,10)"/><text x="99.5966%" y="159.50"></text></g><g><title>link (67,193,606 samples, 6.01%)</title><rect x="93.5177%" y="197" width="6.0127%" height="15" fill="rgb(251,123,47)"/><text x="93.7677%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (3,853,963 samples, 0.34%)</title><rect x="99.5698%" y="197" width="0.3449%" height="15" fill="rgb(221,13,13)"/><text x="99.8198%" y="207.50"></text></g><g><title>all (1,117,531,265 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,117,531,265 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>