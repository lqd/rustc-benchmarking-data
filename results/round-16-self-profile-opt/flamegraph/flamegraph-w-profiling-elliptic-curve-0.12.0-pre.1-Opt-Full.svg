<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,317,839 samples, 5.77%)</title><rect x="0.3176%" y="181" width="5.7655%" height="15" fill="rgb(227,0,7)"/><text x="0.5676%" y="191.50">LLVM_pa..</text></g><g><title>implied_outlives_bounds (821,328 samples, 0.31%)</title><rect x="12.6595%" y="133" width="0.3091%" height="15" fill="rgb(217,0,24)"/><text x="12.9095%" y="143.50"></text></g><g><title>is_sized_raw (320,160 samples, 0.12%)</title><rect x="13.0111%" y="133" width="0.1205%" height="15" fill="rgb(221,193,54)"/><text x="13.2611%" y="143.50"></text></g><g><title>diagnostic_items (407,144 samples, 0.15%)</title><rect x="13.9303%" y="101" width="0.1532%" height="15" fill="rgb(248,212,6)"/><text x="14.1803%" y="111.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (354,994 samples, 0.13%)</title><rect x="13.9499%" y="85" width="0.1336%" height="15" fill="rgb(208,68,35)"/><text x="14.1999%" y="95.50"></text></g><g><title>param_env (789,998 samples, 0.30%)</title><rect x="14.0836%" y="101" width="0.2973%" height="15" fill="rgb(232,128,0)"/><text x="14.3336%" y="111.50"></text></g><g><title>is_copy_raw (1,743,363 samples, 0.66%)</title><rect x="16.1679%" y="53" width="0.6562%" height="15" fill="rgb(207,160,47)"/><text x="16.4179%" y="63.50"></text></g><g><title>evaluate_obligation (1,459,732 samples, 0.55%)</title><rect x="16.2746%" y="37" width="0.5494%" height="15" fill="rgb(228,23,34)"/><text x="16.5246%" y="47.50"></text></g><g><title>needs_drop_raw (2,025,005 samples, 0.76%)</title><rect x="16.1005%" y="69" width="0.7622%" height="15" fill="rgb(218,30,26)"/><text x="16.3505%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,618,932 samples, 0.99%)</title><rect x="17.0472%" y="53" width="0.9857%" height="15" fill="rgb(220,122,19)"/><text x="17.2972%" y="63.50"></text></g><g><title>specialization_graph_of (298,002 samples, 0.11%)</title><rect x="18.0594%" y="53" width="0.1122%" height="15" fill="rgb(250,228,42)"/><text x="18.3094%" y="63.50"></text></g><g><title>resolve_instance (3,671,820 samples, 1.38%)</title><rect x="16.8627%" y="69" width="1.3820%" height="15" fill="rgb(240,193,28)"/><text x="17.1127%" y="79.50"></text></g><g><title>thir_body (1,119,574 samples, 0.42%)</title><rect x="18.2595%" y="69" width="0.4214%" height="15" fill="rgb(216,20,37)"/><text x="18.5095%" y="79.50"></text></g><g><title>mir_const (13,962,664 samples, 5.26%)</title><rect x="13.5219%" y="117" width="5.2554%" height="15" fill="rgb(206,188,39)"/><text x="13.7719%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (11,680,469 samples, 4.40%)</title><rect x="14.3809%" y="101" width="4.3964%" height="15" fill="rgb(217,207,13)"/><text x="14.6309%" y="111.50">unsaf..</text></g><g><title>mir_built (10,829,917 samples, 4.08%)</title><rect x="14.7010%" y="85" width="4.0763%" height="15" fill="rgb(231,73,38)"/><text x="14.9510%" y="95.50">mir_..</text></g><g><title>mir_const_qualif (388,273 samples, 0.15%)</title><rect x="18.7773%" y="117" width="0.1461%" height="15" fill="rgb(225,20,46)"/><text x="19.0273%" y="127.50"></text></g><g><title>mir_promoted (15,388,265 samples, 5.79%)</title><rect x="13.1316%" y="133" width="5.7920%" height="15" fill="rgb(210,31,41)"/><text x="13.3816%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (2,700,307 samples, 1.02%)</title><rect x="18.9240%" y="133" width="1.0164%" height="15" fill="rgb(221,200,47)"/><text x="19.1740%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,268,745 samples, 0.48%)</title><rect x="19.9404%" y="133" width="0.4775%" height="15" fill="rgb(226,26,5)"/><text x="20.1904%" y="143.50"></text></g><g><title>normalize_projection_ty (664,728 samples, 0.25%)</title><rect x="20.1677%" y="117" width="0.2502%" height="15" fill="rgb(249,33,26)"/><text x="20.4177%" y="127.50"></text></g><g><title>type_op_normalize_predicate (990,142 samples, 0.37%)</title><rect x="20.4179%" y="133" width="0.3727%" height="15" fill="rgb(235,183,28)"/><text x="20.6679%" y="143.50"></text></g><g><title>type_op_normalize_ty (382,175 samples, 0.14%)</title><rect x="20.7906%" y="133" width="0.1438%" height="15" fill="rgb(221,5,38)"/><text x="21.0406%" y="143.50"></text></g><g><title>type_op_prove_predicate (6,428,880 samples, 2.42%)</title><rect x="20.9345%" y="133" width="2.4198%" height="15" fill="rgb(247,18,42)"/><text x="21.1845%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (45,511,761 samples, 17.13%)</title><rect x="6.2307%" y="165" width="17.1303%" height="15" fill="rgb(241,131,45)"/><text x="6.4807%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (45,315,209 samples, 17.06%)</title><rect x="6.3047%" y="149" width="17.0563%" height="15" fill="rgb(249,31,29)"/><text x="6.5547%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (325,401 samples, 0.12%)</title><rect x="23.4346%" y="165" width="0.1225%" height="15" fill="rgb(225,111,53)"/><text x="23.6846%" y="175.50"></text></g><g><title>should_inherit_track_caller (384,853 samples, 0.14%)</title><rect x="23.7610%" y="117" width="0.1449%" height="15" fill="rgb(238,160,17)"/><text x="24.0110%" y="127.50"></text></g><g><title>codegen_fn_attrs (582,336 samples, 0.22%)</title><rect x="23.6947%" y="133" width="0.2192%" height="15" fill="rgb(214,148,48)"/><text x="23.9447%" y="143.50"></text></g><g><title>check_mod_attrs (906,462 samples, 0.34%)</title><rect x="23.5728%" y="149" width="0.3412%" height="15" fill="rgb(232,36,49)"/><text x="23.8228%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (649,406 samples, 0.24%)</title><rect x="24.0218%" y="149" width="0.2444%" height="15" fill="rgb(209,103,24)"/><text x="24.2718%" y="159.50"></text></g><g><title>misc_checking_1 (1,996,922 samples, 0.75%)</title><rect x="23.5575%" y="165" width="0.7516%" height="15" fill="rgb(229,88,8)"/><text x="23.8075%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (493,425 samples, 0.19%)</title><rect x="24.3098%" y="149" width="0.1857%" height="15" fill="rgb(213,181,19)"/><text x="24.5598%" y="159.50"></text></g><g><title>check_mod_liveness (379,254 samples, 0.14%)</title><rect x="24.3528%" y="133" width="0.1427%" height="15" fill="rgb(254,191,54)"/><text x="24.6028%" y="143.50"></text></g><g><title>misc_checking_2 (1,018,981 samples, 0.38%)</title><rect x="24.3091%" y="165" width="0.3835%" height="15" fill="rgb(241,83,37)"/><text x="24.5591%" y="175.50"></text></g><g><title>match_checking (523,596 samples, 0.20%)</title><rect x="24.4956%" y="149" width="0.1971%" height="15" fill="rgb(233,36,39)"/><text x="24.7456%" y="159.50"></text></g><g><title>check_match (480,016 samples, 0.18%)</title><rect x="24.5120%" y="133" width="0.1807%" height="15" fill="rgb(226,3,54)"/><text x="24.7620%" y="143.50"></text></g><g><title>check_private_in_public (461,805 samples, 0.17%)</title><rect x="24.6980%" y="149" width="0.1738%" height="15" fill="rgb(245,192,40)"/><text x="24.9480%" y="159.50"></text></g><g><title>death_checking (945,201 samples, 0.36%)</title><rect x="24.8718%" y="149" width="0.3558%" height="15" fill="rgb(238,167,29)"/><text x="25.1218%" y="159.50"></text></g><g><title>param_env (987,200 samples, 0.37%)</title><rect x="26.0150%" y="117" width="0.3716%" height="15" fill="rgb(232,182,51)"/><text x="26.2650%" y="127.50"></text></g><g><title>predicates_of (430,204 samples, 0.16%)</title><rect x="26.2247%" y="101" width="0.1619%" height="15" fill="rgb(231,60,39)"/><text x="26.4747%" y="111.50"></text></g><g><title>predicates_defined_on (347,174 samples, 0.13%)</title><rect x="26.2559%" y="85" width="0.1307%" height="15" fill="rgb(208,69,12)"/><text x="26.5059%" y="95.50"></text></g><g><title>crate_lints (3,452,199 samples, 1.30%)</title><rect x="25.2282%" y="133" width="1.2994%" height="15" fill="rgb(235,93,37)"/><text x="25.4782%" y="143.50"></text></g><g><title>type_of (374,345 samples, 0.14%)</title><rect x="26.3867%" y="117" width="0.1409%" height="15" fill="rgb(213,116,39)"/><text x="26.6367%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (292,295 samples, 0.11%)</title><rect x="26.4176%" y="101" width="0.1100%" height="15" fill="rgb(222,207,29)"/><text x="26.6676%" y="111.50"></text></g><g><title>lint_checking (3,866,743 samples, 1.46%)</title><rect x="25.2275%" y="149" width="1.4554%" height="15" fill="rgb(206,96,30)"/><text x="25.4775%" y="159.50"></text></g><g><title>module_lints (412,684 samples, 0.16%)</title><rect x="26.5276%" y="133" width="0.1553%" height="15" fill="rgb(218,138,4)"/><text x="26.7776%" y="143.50"></text></g><g><title>lint_mod (404,904 samples, 0.15%)</title><rect x="26.5305%" y="117" width="0.1524%" height="15" fill="rgb(250,191,14)"/><text x="26.7805%" y="127.50"></text></g><g><title>privacy_access_levels (518,696 samples, 0.20%)</title><rect x="26.6830%" y="149" width="0.1952%" height="15" fill="rgb(239,60,40)"/><text x="26.9330%" y="159.50"></text></g><g><title>privacy_checking_modules (1,315,665 samples, 0.50%)</title><rect x="26.8782%" y="149" width="0.4952%" height="15" fill="rgb(206,27,48)"/><text x="27.1282%" y="159.50"></text></g><g><title>check_mod_privacy (1,308,415 samples, 0.49%)</title><rect x="26.8809%" y="133" width="0.4925%" height="15" fill="rgb(225,35,8)"/><text x="27.1309%" y="143.50"></text></g><g><title>misc_checking_3 (7,148,210 samples, 2.69%)</title><rect x="24.6926%" y="165" width="2.6905%" height="15" fill="rgb(250,213,24)"/><text x="24.9426%" y="175.50">mi..</text></g><g><title>impl_parent (2,116,073 samples, 0.80%)</title><rect x="28.9033%" y="101" width="0.7965%" height="15" fill="rgb(247,123,22)"/><text x="29.1533%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (924,141 samples, 0.35%)</title><rect x="29.3519%" y="85" width="0.3478%" height="15" fill="rgb(231,138,38)"/><text x="29.6019%" y="95.50"></text></g><g><title>impl_trait_ref (3,327,865 samples, 1.25%)</title><rect x="29.7002%" y="101" width="1.2526%" height="15" fill="rgb(231,145,46)"/><text x="29.9502%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,541,397 samples, 0.96%)</title><rect x="29.9962%" y="85" width="0.9566%" height="15" fill="rgb(251,118,11)"/><text x="30.2462%" y="95.50"></text></g><g><title>trait_impls_of (738,674 samples, 0.28%)</title><rect x="31.0894%" y="101" width="0.2780%" height="15" fill="rgb(217,147,25)"/><text x="31.3394%" y="111.50"></text></g><g><title>specialization_graph_of (10,062,459 samples, 3.79%)</title><rect x="27.5871%" y="117" width="3.7874%" height="15" fill="rgb(247,81,37)"/><text x="27.8371%" y="127.50">spec..</text></g><g><title>coherent_trait (10,427,043 samples, 3.92%)</title><rect x="27.4501%" y="133" width="3.9247%" height="15" fill="rgb(209,12,38)"/><text x="27.7001%" y="143.50">cohe..</text></g><g><title>coherence_checking (10,584,306 samples, 3.98%)</title><rect x="27.4373%" y="149" width="3.9838%" height="15" fill="rgb(227,1,9)"/><text x="27.6873%" y="159.50">cohe..</text></g><g><title>associated_item (312,585 samples, 0.12%)</title><rect x="46.0254%" y="85" width="0.1177%" height="15" fill="rgb(248,47,43)"/><text x="46.2754%" y="95.50"></text></g><g><title>associated_items (481,597 samples, 0.18%)</title><rect x="45.9759%" y="101" width="0.1813%" height="15" fill="rgb(221,10,30)"/><text x="46.2259%" y="111.50"></text></g><g><title>dropck_outlives (1,373,230 samples, 0.52%)</title><rect x="46.1992%" y="101" width="0.5169%" height="15" fill="rgb(210,229,1)"/><text x="46.4492%" y="111.50"></text></g><g><title>normalize_projection_ty (512,877 samples, 0.19%)</title><rect x="46.5230%" y="85" width="0.1930%" height="15" fill="rgb(222,148,37)"/><text x="46.7730%" y="95.50"></text></g><g><title>evaluate_obligation (3,886,455 samples, 1.46%)</title><rect x="46.7160%" y="101" width="1.4628%" height="15" fill="rgb(234,67,33)"/><text x="46.9660%" y="111.50"></text></g><g><title>method_autoderef_steps (1,151,272 samples, 0.43%)</title><rect x="48.4033%" y="101" width="0.4333%" height="15" fill="rgb(247,98,35)"/><text x="48.6533%" y="111.50"></text></g><g><title>evaluate_obligation (590,616 samples, 0.22%)</title><rect x="48.6143%" y="85" width="0.2223%" height="15" fill="rgb(247,138,52)"/><text x="48.8643%" y="95.50"></text></g><g><title>predicates_of (347,574 samples, 0.13%)</title><rect x="48.9163%" y="101" width="0.1308%" height="15" fill="rgb(213,79,30)"/><text x="49.1663%" y="111.50"></text></g><g><title>typeck (803,079 samples, 0.30%)</title><rect x="49.1119%" y="101" width="0.3023%" height="15" fill="rgb(246,177,23)"/><text x="49.3619%" y="111.50"></text></g><g><title>item_bodies_checking (47,795,147 samples, 17.99%)</title><rect x="31.4488%" y="149" width="17.9897%" height="15" fill="rgb(230,62,27)"/><text x="31.6988%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,791,117 samples, 17.99%)</title><rect x="31.4503%" y="133" width="17.9882%" height="15" fill="rgb(216,154,8)"/><text x="31.7003%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (47,640,245 samples, 17.93%)</title><rect x="31.5071%" y="117" width="17.9314%" height="15" fill="rgb(244,35,45)"/><text x="31.7571%" y="127.50">typeck</text></g><g><title>item_types_checking (3,759,331 samples, 1.41%)</title><rect x="49.4385%" y="149" width="1.4150%" height="15" fill="rgb(251,115,12)"/><text x="49.6885%" y="159.50"></text></g><g><title>check_mod_item_types (3,750,980 samples, 1.41%)</title><rect x="49.4416%" y="133" width="1.4118%" height="15" fill="rgb(240,54,50)"/><text x="49.6916%" y="143.50"></text></g><g><title>fn_sig (512,365 samples, 0.19%)</title><rect x="51.0564%" y="117" width="0.1929%" height="15" fill="rgb(233,84,52)"/><text x="51.3064%" y="127.50"></text></g><g><title>named_region_map (282,322 samples, 0.11%)</title><rect x="51.3743%" y="101" width="0.1063%" height="15" fill="rgb(207,117,47)"/><text x="51.6243%" y="111.50"></text></g><g><title>generics_of (650,650 samples, 0.24%)</title><rect x="51.2493%" y="117" width="0.2449%" height="15" fill="rgb(249,43,39)"/><text x="51.4993%" y="127.50"></text></g><g><title>explicit_item_bounds (393,774 samples, 0.15%)</title><rect x="51.6555%" y="101" width="0.1482%" height="15" fill="rgb(209,38,44)"/><text x="51.9055%" y="111.50"></text></g><g><title>item_bounds (727,958 samples, 0.27%)</title><rect x="51.5556%" y="117" width="0.2740%" height="15" fill="rgb(236,212,23)"/><text x="51.8056%" y="127.50"></text></g><g><title>late_bound_vars_map (559,935 samples, 0.21%)</title><rect x="52.0902%" y="69" width="0.2108%" height="15" fill="rgb(242,79,21)"/><text x="52.3402%" y="79.50"></text></g><g><title>resolve_lifetimes (515,945 samples, 0.19%)</title><rect x="52.1068%" y="53" width="0.1942%" height="15" fill="rgb(211,96,35)"/><text x="52.3568%" y="63.50"></text></g><g><title>explicit_predicates_of (1,061,131 samples, 0.40%)</title><rect x="51.9309%" y="85" width="0.3994%" height="15" fill="rgb(253,215,40)"/><text x="52.1809%" y="95.50"></text></g><g><title>predicates_of (1,470,487 samples, 0.55%)</title><rect x="51.8296%" y="117" width="0.5535%" height="15" fill="rgb(211,81,21)"/><text x="52.0796%" y="127.50"></text></g><g><title>predicates_defined_on (1,368,266 samples, 0.52%)</title><rect x="51.8681%" y="101" width="0.5150%" height="15" fill="rgb(208,190,38)"/><text x="52.1181%" y="111.50"></text></g><g><title>type_collecting (4,571,111 samples, 1.72%)</title><rect x="50.8579%" y="149" width="1.7205%" height="15" fill="rgb(235,213,38)"/><text x="51.1079%" y="159.50"></text></g><g><title>collect_mod_item_types (4,555,861 samples, 1.71%)</title><rect x="50.8637%" y="133" width="1.7148%" height="15" fill="rgb(237,122,38)"/><text x="51.1137%" y="143.50"></text></g><g><title>evaluate_obligation (496,776 samples, 0.19%)</title><rect x="55.0360%" y="117" width="0.1870%" height="15" fill="rgb(244,218,35)"/><text x="55.2860%" y="127.50"></text></g><g><title>implied_outlives_bounds (570,898 samples, 0.21%)</title><rect x="55.2230%" y="117" width="0.2149%" height="15" fill="rgb(240,68,47)"/><text x="55.4730%" y="127.50"></text></g><g><title>param_env (1,629,176 samples, 0.61%)</title><rect x="55.4378%" y="117" width="0.6132%" height="15" fill="rgb(210,16,53)"/><text x="55.6878%" y="127.50"></text></g><g><title>region_scope_tree (470,276 samples, 0.18%)</title><rect x="56.0686%" y="117" width="0.1770%" height="15" fill="rgb(235,124,12)"/><text x="56.3186%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,278,168 samples, 3.49%)</title><rect x="52.7589%" y="133" width="3.4922%" height="15" fill="rgb(224,169,11)"/><text x="53.0089%" y="143.50">che..</text></g><g><title>implied_outlives_bounds (268,683 samples, 0.10%)</title><rect x="59.3828%" y="117" width="0.1011%" height="15" fill="rgb(250,166,2)"/><text x="59.6328%" y="127.50"></text></g><g><title>param_env (1,517,224 samples, 0.57%)</title><rect x="59.5025%" y="117" width="0.5711%" height="15" fill="rgb(242,216,29)"/><text x="59.7525%" y="127.50"></text></g><g><title>predicates_of (285,163 samples, 0.11%)</title><rect x="60.0736%" y="117" width="0.1073%" height="15" fill="rgb(230,116,27)"/><text x="60.3236%" y="127.50"></text></g><g><title>trait_impls_of (379,385 samples, 0.14%)</title><rect x="60.2048%" y="117" width="0.1428%" height="15" fill="rgb(228,99,48)"/><text x="60.4548%" y="127.50"></text></g><g><title>check_item_well_formed (11,002,282 samples, 4.14%)</title><rect x="56.2511%" y="133" width="4.1412%" height="15" fill="rgb(253,11,6)"/><text x="56.5011%" y="143.50">check..</text></g><g><title>implied_outlives_bounds (315,914 samples, 0.12%)</title><rect x="61.8822%" y="117" width="0.1189%" height="15" fill="rgb(247,143,39)"/><text x="62.1322%" y="127.50"></text></g><g><title>param_env (317,316 samples, 0.12%)</title><rect x="62.0094%" y="117" width="0.1194%" height="15" fill="rgb(236,97,10)"/><text x="62.2594%" y="127.50"></text></g><g><title>analysis (149,078,334 samples, 56.11%)</title><rect x="6.0831%" y="181" width="56.1119%" height="15" fill="rgb(233,208,19)"/><text x="6.3331%" y="191.50">analysis</text></g><g><title>type_check_crate (92,488,140 samples, 34.81%)</title><rect x="27.3832%" y="165" width="34.8118%" height="15" fill="rgb(216,164,2)"/><text x="27.6332%" y="175.50">type_check_crate</text></g><g><title>wf_checking (25,541,142 samples, 9.61%)</title><rect x="52.5815%" y="149" width="9.6135%" height="15" fill="rgb(220,129,5)"/><text x="52.8315%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (4,789,385 samples, 1.80%)</title><rect x="60.3923%" y="133" width="1.8027%" height="15" fill="rgb(242,17,10)"/><text x="60.6423%" y="143.50">c..</text></g><g><title>fn_abi_of_instance (278,273 samples, 0.10%)</title><rect x="62.6350%" y="149" width="0.1047%" height="15" fill="rgb(242,107,0)"/><text x="62.8850%" y="159.50"></text></g><g><title>codegen_module (899,330 samples, 0.34%)</title><rect x="62.4133%" y="165" width="0.3385%" height="15" fill="rgb(251,28,31)"/><text x="62.6633%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (278,673 samples, 0.10%)</title><rect x="62.7612%" y="133" width="0.1049%" height="15" fill="rgb(233,223,10)"/><text x="63.0112%" y="143.50"></text></g><g><title>monomorphization_collector (324,083 samples, 0.12%)</title><rect x="62.7604%" y="149" width="0.1220%" height="15" fill="rgb(215,21,27)"/><text x="63.0104%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (385,124 samples, 0.14%)</title><rect x="62.7520%" y="165" width="0.1450%" height="15" fill="rgb(232,23,21)"/><text x="63.0020%" y="175.50"></text></g><g><title>codegen_crate (1,888,860 samples, 0.71%)</title><rect x="62.1997%" y="181" width="0.7110%" height="15" fill="rgb(244,5,23)"/><text x="62.4497%" y="191.50"></text></g><g><title>codegen_module_optimize (5,782,203 samples, 2.18%)</title><rect x="62.9107%" y="181" width="2.1764%" height="15" fill="rgb(226,81,46)"/><text x="63.1607%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (4,912,674 samples, 1.85%)</title><rect x="63.2380%" y="165" width="1.8491%" height="15" fill="rgb(247,70,30)"/><text x="63.4880%" y="175.50">L..</text></g><g><title>LLVM_lto_optimize (2,010,992 samples, 0.76%)</title><rect x="65.2822%" y="165" width="0.7569%" height="15" fill="rgb(212,68,19)"/><text x="65.5322%" y="175.50"></text></g><g><title>LLVM_module_codegen (6,417,112 samples, 2.42%)</title><rect x="66.0392%" y="165" width="2.4153%" height="15" fill="rgb(240,187,13)"/><text x="66.2892%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (6,300,940 samples, 2.37%)</title><rect x="66.0829%" y="149" width="2.3716%" height="15" fill="rgb(223,113,26)"/><text x="66.3329%" y="159.50">LL..</text></g><g><title>codegen_module_perform_lto (9,008,430 samples, 3.39%)</title><rect x="65.0871%" y="181" width="3.3907%" height="15" fill="rgb(206,192,2)"/><text x="65.3371%" y="191.50">cod..</text></g><g><title>AST_validation (431,555 samples, 0.16%)</title><rect x="68.5721%" y="165" width="0.1624%" height="15" fill="rgb(241,108,4)"/><text x="68.8221%" y="175.50"></text></g><g><title>metadata_load_macro (292,572 samples, 0.11%)</title><rect x="82.4261%" y="133" width="0.1101%" height="15" fill="rgb(247,173,49)"/><text x="82.6761%" y="143.50"></text></g><g><title>metadata_register_crate (999,142 samples, 0.38%)</title><rect x="82.5363%" y="133" width="0.3761%" height="15" fill="rgb(224,114,35)"/><text x="82.7863%" y="143.50"></text></g><g><title>macro_expand_crate (38,091,950 samples, 14.34%)</title><rect x="68.8259%" y="165" width="14.3375%" height="15" fill="rgb(245,159,27)"/><text x="69.0759%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (38,073,950 samples, 14.33%)</title><rect x="68.8327%" y="149" width="14.3307%" height="15" fill="rgb(245,172,44)"/><text x="69.0827%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (667,177 samples, 0.25%)</title><rect x="82.9123%" y="133" width="0.2511%" height="15" fill="rgb(236,23,11)"/><text x="83.1623%" y="143.50"></text></g><g><title>finalize_imports (500,156 samples, 0.19%)</title><rect x="83.2327%" y="149" width="0.1883%" height="15" fill="rgb(205,117,38)"/><text x="83.4827%" y="159.50"></text></g><g><title>finalize_macro_resolutions (271,053 samples, 0.10%)</title><rect x="83.4210%" y="149" width="0.1020%" height="15" fill="rgb(237,72,25)"/><text x="83.6710%" y="159.50"></text></g><g><title>late_resolve_crate (4,531,830 samples, 1.71%)</title><rect x="83.5230%" y="149" width="1.7057%" height="15" fill="rgb(244,70,9)"/><text x="83.7730%" y="159.50"></text></g><g><title>configure_and_expand (44,824,214 samples, 16.87%)</title><rect x="68.4778%" y="181" width="16.8715%" height="15" fill="rgb(217,125,39)"/><text x="68.7278%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (5,632,762 samples, 2.12%)</title><rect x="83.2291%" y="165" width="2.1201%" height="15" fill="rgb(235,36,10)"/><text x="83.4791%" y="175.50">r..</text></g><g><title>drop_ast (285,213 samples, 0.11%)</title><rect x="85.3492%" y="181" width="0.1074%" height="15" fill="rgb(251,123,47)"/><text x="85.5992%" y="191.50"></text></g><g><title>early_lint_checks (439,325 samples, 0.17%)</title><rect x="85.4642%" y="181" width="0.1654%" height="15" fill="rgb(221,13,13)"/><text x="85.7142%" y="191.50"></text></g><g><title>free_global_ctxt (2,877,031 samples, 1.08%)</title><rect x="85.6296%" y="181" width="1.0829%" height="15" fill="rgb(238,131,9)"/><text x="85.8796%" y="191.50"></text></g><g><title>exported_symbols (332,644 samples, 0.13%)</title><rect x="87.8694%" y="165" width="0.1252%" height="15" fill="rgb(211,50,8)"/><text x="88.1194%" y="175.50"></text></g><g><title>is_sized_raw (1,008,121 samples, 0.38%)</title><rect x="89.7088%" y="133" width="0.3794%" height="15" fill="rgb(245,182,24)"/><text x="89.9588%" y="143.50"></text></g><g><title>evaluate_obligation (840,831 samples, 0.32%)</title><rect x="89.7717%" y="117" width="0.3165%" height="15" fill="rgb(242,14,37)"/><text x="90.0217%" y="127.50"></text></g><g><title>layout_of (397,386 samples, 0.15%)</title><rect x="90.0882%" y="133" width="0.1496%" height="15" fill="rgb(246,228,12)"/><text x="90.3382%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (268,506 samples, 0.10%)</title><rect x="90.1367%" y="117" width="0.1011%" height="15" fill="rgb(213,55,15)"/><text x="90.3867%" y="127.50"></text></g><g><title>layout_of (2,172,220 samples, 0.82%)</title><rect x="89.5237%" y="149" width="0.8176%" height="15" fill="rgb(209,9,3)"/><text x="89.7737%" y="159.50"></text></g><g><title>is_copy_raw (345,162 samples, 0.13%)</title><rect x="91.6046%" y="117" width="0.1299%" height="15" fill="rgb(230,59,30)"/><text x="91.8546%" y="127.50"></text></g><g><title>evaluate_obligation (293,532 samples, 0.11%)</title><rect x="91.6241%" y="101" width="0.1105%" height="15" fill="rgb(209,121,21)"/><text x="91.8741%" y="111.50"></text></g><g><title>needs_drop_raw (440,664 samples, 0.17%)</title><rect x="91.5947%" y="133" width="0.1659%" height="15" fill="rgb(220,109,13)"/><text x="91.8447%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,958,767 samples, 1.49%)</title><rect x="90.3413%" y="149" width="1.4900%" height="15" fill="rgb(232,18,1)"/><text x="90.5913%" y="159.50"></text></g><g><title>optimized_mir (10,122,213 samples, 3.81%)</title><rect x="88.1013%" y="165" width="3.8099%" height="15" fill="rgb(215,41,42)"/><text x="88.3513%" y="175.50">opti..</text></g><g><title>generate_crate_metadata (14,026,595 samples, 5.28%)</title><rect x="86.7125%" y="181" width="5.2795%" height="15" fill="rgb(224,123,36)"/><text x="86.9625%" y="191.50">genera..</text></g><g><title>hir_lowering (5,289,488 samples, 1.99%)</title><rect x="91.9920%" y="181" width="1.9909%" height="15" fill="rgb(240,125,3)"/><text x="92.2420%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (11,534,748 samples, 4.34%)</title><rect x="93.9880%" y="165" width="4.3416%" height="15" fill="rgb(205,98,50)"/><text x="94.2380%" y="175.50">finis..</text></g><g><title>link_crate (1,059,312 samples, 0.40%)</title><rect x="98.3296%" y="165" width="0.3987%" height="15" fill="rgb(205,185,37)"/><text x="98.5796%" y="175.50"></text></g><g><title>link_binary (1,052,422 samples, 0.40%)</title><rect x="98.3322%" y="149" width="0.3961%" height="15" fill="rgb(238,207,15)"/><text x="98.5822%" y="159.50"></text></g><g><title>link_rlib (755,138 samples, 0.28%)</title><rect x="98.4441%" y="133" width="0.2842%" height="15" fill="rgb(213,199,42)"/><text x="98.6941%" y="143.50"></text></g><g><title>link (12,617,630 samples, 4.75%)</title><rect x="93.9829%" y="181" width="4.7492%" height="15" fill="rgb(235,201,11)"/><text x="94.2329%" y="191.50">link</text></g><g><title>parse_crate (1,440,686 samples, 0.54%)</title><rect x="98.7321%" y="181" width="0.5423%" height="15" fill="rgb(207,46,11)"/><text x="98.9821%" y="191.50"></text></g><g><title>prepare_outputs (283,993 samples, 0.11%)</title><rect x="99.2785%" y="181" width="0.1069%" height="15" fill="rgb(241,35,35)"/><text x="99.5285%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,108,812 samples, 0.42%)</title><rect x="99.3854%" y="181" width="0.4173%" height="15" fill="rgb(243,32,47)"/><text x="99.6354%" y="191.50"></text></g><g><title>all (265,680,559 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (265,680,559 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (438,685 samples, 0.17%)</title><rect x="99.8349%" y="181" width="0.1651%" height="15" fill="rgb(243,110,44)"/><text x="100.0849%" y="191.50"></text></g></svg></svg>