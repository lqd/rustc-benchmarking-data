<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,449,556 samples, 13.33%)</title><rect x="0.8140%" y="245" width="13.3289%" height="15" fill="rgb(227,0,7)"/><text x="1.0640%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (146,191 samples, 0.17%)</title><rect x="13.9727%" y="229" width="0.1702%" height="15" fill="rgb(217,0,24)"/><text x="14.2227%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (131,361 samples, 0.15%)</title><rect x="13.9900%" y="213" width="0.1529%" height="15" fill="rgb(221,193,54)"/><text x="14.2400%" y="223.50"></text></g><g><title>param_env (114,342 samples, 0.13%)</title><rect x="17.7738%" y="165" width="0.1331%" height="15" fill="rgb(248,212,6)"/><text x="18.0238%" y="175.50"></text></g><g><title>codegen_fn_attrs (104,191 samples, 0.12%)</title><rect x="18.0458%" y="149" width="0.1213%" height="15" fill="rgb(208,68,35)"/><text x="18.2958%" y="159.50"></text></g><g><title>explicit_predicates_of (90,061 samples, 0.10%)</title><rect x="19.2960%" y="53" width="0.1048%" height="15" fill="rgb(232,128,0)"/><text x="19.5460%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (88,201 samples, 0.10%)</title><rect x="19.2982%" y="37" width="0.1027%" height="15" fill="rgb(207,160,47)"/><text x="19.5482%" y="47.50"></text></g><g><title>is_copy_raw (435,746 samples, 0.51%)</title><rect x="18.8965%" y="117" width="0.5073%" height="15" fill="rgb(228,23,34)"/><text x="19.1465%" y="127.50"></text></g><g><title>evaluate_obligation (398,136 samples, 0.46%)</title><rect x="18.9403%" y="101" width="0.4635%" height="15" fill="rgb(218,30,26)"/><text x="19.1903%" y="111.50"></text></g><g><title>predicates_of (107,451 samples, 0.13%)</title><rect x="19.2787%" y="85" width="0.1251%" height="15" fill="rgb(220,122,19)"/><text x="19.5287%" y="95.50"></text></g><g><title>predicates_defined_on (98,311 samples, 0.11%)</title><rect x="19.2893%" y="69" width="0.1144%" height="15" fill="rgb(250,228,42)"/><text x="19.5393%" y="79.50"></text></g><g><title>needs_drop_raw (544,307 samples, 0.63%)</title><rect x="18.7795%" y="133" width="0.6337%" height="15" fill="rgb(240,193,28)"/><text x="19.0295%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (261,592 samples, 0.30%)</title><rect x="19.5179%" y="117" width="0.3045%" height="15" fill="rgb(216,20,37)"/><text x="19.7679%" y="127.50"></text></g><g><title>specialization_graph_of (333,944 samples, 0.39%)</title><rect x="19.8546%" y="117" width="0.3888%" height="15" fill="rgb(206,188,39)"/><text x="20.1046%" y="127.50"></text></g><g><title>impl_trait_ref (154,401 samples, 0.18%)</title><rect x="20.0636%" y="101" width="0.1797%" height="15" fill="rgb(217,207,13)"/><text x="20.3136%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (131,271 samples, 0.15%)</title><rect x="20.0906%" y="85" width="0.1528%" height="15" fill="rgb(231,73,38)"/><text x="20.3406%" y="95.50"></text></g><g><title>resolve_instance (735,297 samples, 0.86%)</title><rect x="19.4131%" y="133" width="0.8560%" height="15" fill="rgb(225,20,46)"/><text x="19.6631%" y="143.50"></text></g><g><title>thir_body (178,863 samples, 0.21%)</title><rect x="20.2776%" y="133" width="0.2082%" height="15" fill="rgb(210,31,41)"/><text x="20.5276%" y="143.50"></text></g><g><title>mir_const (2,587,698 samples, 3.01%)</title><rect x="17.4959%" y="181" width="3.0124%" height="15" fill="rgb(221,200,47)"/><text x="17.7459%" y="191.50">mir..</text></g><g><title>unsafety_check_result (2,234,615 samples, 2.60%)</title><rect x="17.9069%" y="165" width="2.6014%" height="15" fill="rgb(226,26,5)"/><text x="18.1569%" y="175.50">un..</text></g><g><title>mir_built (2,011,082 samples, 2.34%)</title><rect x="18.1671%" y="149" width="2.3412%" height="15" fill="rgb(249,33,26)"/><text x="18.4171%" y="159.50">m..</text></g><g><title>mir_promoted (2,813,732 samples, 3.28%)</title><rect x="17.2502%" y="197" width="3.2756%" height="15" fill="rgb(235,183,28)"/><text x="17.5002%" y="207.50">mir..</text></g><g><title>type_op_ascribe_user_type (139,792 samples, 0.16%)</title><rect x="20.5258%" y="197" width="0.1627%" height="15" fill="rgb(221,5,38)"/><text x="20.7758%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (226,443 samples, 0.26%)</title><rect x="20.6885%" y="197" width="0.2636%" height="15" fill="rgb(247,18,42)"/><text x="20.9385%" y="207.50"></text></g><g><title>normalize_projection_ty (136,513 samples, 0.16%)</title><rect x="20.7932%" y="181" width="0.1589%" height="15" fill="rgb(241,131,45)"/><text x="21.0432%" y="191.50"></text></g><g><title>type_op_prove_predicate (746,227 samples, 0.87%)</title><rect x="21.0617%" y="197" width="0.8687%" height="15" fill="rgb(249,31,29)"/><text x="21.3117%" y="207.50"></text></g><g><title>MIR_borrow_checking (6,496,712 samples, 7.56%)</title><rect x="14.3691%" y="229" width="7.5631%" height="15" fill="rgb(225,111,53)"/><text x="14.6191%" y="239.50">MIR_borrow..</text></g><g><title>mir_borrowck (6,462,552 samples, 7.52%)</title><rect x="14.4089%" y="213" width="7.5233%" height="15" fill="rgb(238,160,17)"/><text x="14.6589%" y="223.50">mir_borrow..</text></g><g><title>hir_module_items (160,022 samples, 0.19%)</title><rect x="21.9406%" y="229" width="0.1863%" height="15" fill="rgb(214,148,48)"/><text x="22.1906%" y="239.50"></text></g><g><title>codegen_fn_attrs (137,262 samples, 0.16%)</title><rect x="22.6514%" y="165" width="0.1598%" height="15" fill="rgb(232,36,49)"/><text x="22.9014%" y="175.50"></text></g><g><title>should_inherit_track_caller (254,234 samples, 0.30%)</title><rect x="22.5210%" y="181" width="0.2960%" height="15" fill="rgb(209,103,24)"/><text x="22.7710%" y="191.50"></text></g><g><title>codegen_fn_attrs (435,766 samples, 0.51%)</title><rect x="22.3433%" y="197" width="0.5073%" height="15" fill="rgb(229,88,8)"/><text x="22.5933%" y="207.50"></text></g><g><title>check_mod_attrs (597,837 samples, 0.70%)</title><rect x="22.1553%" y="213" width="0.6960%" height="15" fill="rgb(213,181,19)"/><text x="22.4053%" y="223.50"></text></g><g><title>lookup_deprecation_entry (103,141 samples, 0.12%)</title><rect x="23.1118%" y="197" width="0.1201%" height="15" fill="rgb(254,191,54)"/><text x="23.3618%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (271,333 samples, 0.32%)</title><rect x="22.9883%" y="213" width="0.3159%" height="15" fill="rgb(241,83,37)"/><text x="23.2383%" y="223.50"></text></g><g><title>misc_checking_1 (1,057,722 samples, 1.23%)</title><rect x="22.1274%" y="229" width="1.2313%" height="15" fill="rgb(233,36,39)"/><text x="22.3774%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (111,561 samples, 0.13%)</title><rect x="23.3602%" y="213" width="0.1299%" height="15" fill="rgb(226,3,54)"/><text x="23.6102%" y="223.50"></text></g><g><title>check_mod_liveness (87,011 samples, 0.10%)</title><rect x="23.3888%" y="197" width="0.1013%" height="15" fill="rgb(245,192,40)"/><text x="23.6388%" y="207.50"></text></g><g><title>misc_checking_2 (244,803 samples, 0.28%)</title><rect x="23.3587%" y="229" width="0.2850%" height="15" fill="rgb(238,167,29)"/><text x="23.6087%" y="239.50"></text></g><g><title>match_checking (132,012 samples, 0.15%)</title><rect x="23.4900%" y="213" width="0.1537%" height="15" fill="rgb(232,182,51)"/><text x="23.7400%" y="223.50"></text></g><g><title>check_match (123,642 samples, 0.14%)</title><rect x="23.4998%" y="197" width="0.1439%" height="15" fill="rgb(231,60,39)"/><text x="23.7498%" y="207.50"></text></g><g><title>death_checking (259,793 samples, 0.30%)</title><rect x="23.7396%" y="213" width="0.3024%" height="15" fill="rgb(208,69,12)"/><text x="23.9896%" y="223.50"></text></g><g><title>item_attrs (133,672 samples, 0.16%)</title><rect x="23.8864%" y="197" width="0.1556%" height="15" fill="rgb(235,93,37)"/><text x="24.1364%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (132,372 samples, 0.15%)</title><rect x="23.8879%" y="181" width="0.1541%" height="15" fill="rgb(213,116,39)"/><text x="24.1379%" y="191.50"></text></g><g><title>crate_lints (670,578 samples, 0.78%)</title><rect x="24.0440%" y="197" width="0.7806%" height="15" fill="rgb(222,207,29)"/><text x="24.2940%" y="207.50"></text></g><g><title>type_of (322,504 samples, 0.38%)</title><rect x="24.4492%" y="181" width="0.3754%" height="15" fill="rgb(206,96,30)"/><text x="24.6992%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (241,794 samples, 0.28%)</title><rect x="24.5432%" y="165" width="0.2815%" height="15" fill="rgb(218,138,4)"/><text x="24.7932%" y="175.50"></text></g><g><title>lint_checking (751,309 samples, 0.87%)</title><rect x="24.0420%" y="213" width="0.8746%" height="15" fill="rgb(250,191,14)"/><text x="24.2920%" y="223.50"></text></g><g><title>privacy_access_levels (96,161 samples, 0.11%)</title><rect x="24.9167%" y="213" width="0.1119%" height="15" fill="rgb(239,60,40)"/><text x="25.1667%" y="223.50"></text></g><g><title>privacy_checking_modules (222,322 samples, 0.26%)</title><rect x="25.0286%" y="213" width="0.2588%" height="15" fill="rgb(206,27,48)"/><text x="25.2786%" y="223.50"></text></g><g><title>check_mod_privacy (221,122 samples, 0.26%)</title><rect x="25.0300%" y="197" width="0.2574%" height="15" fill="rgb(225,35,8)"/><text x="25.2800%" y="207.50"></text></g><g><title>misc_checking_3 (1,421,506 samples, 1.65%)</title><rect x="23.6437%" y="229" width="1.6548%" height="15" fill="rgb(250,213,24)"/><text x="23.8937%" y="239.50"></text></g><g><title>impl_parent (1,243,333 samples, 1.45%)</title><rect x="28.2224%" y="165" width="1.4474%" height="15" fill="rgb(247,123,22)"/><text x="28.4724%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (661,117 samples, 0.77%)</title><rect x="28.9002%" y="149" width="0.7696%" height="15" fill="rgb(231,138,38)"/><text x="29.1502%" y="159.50"></text></g><g><title>impl_trait_ref (2,827,860 samples, 3.29%)</title><rect x="29.6698%" y="165" width="3.2920%" height="15" fill="rgb(231,145,46)"/><text x="29.9198%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,233,675 samples, 2.60%)</title><rect x="30.3615%" y="149" width="2.6003%" height="15" fill="rgb(251,118,11)"/><text x="30.6115%" y="159.50">me..</text></g><g><title>trait_impls_of (519,128 samples, 0.60%)</title><rect x="32.9847%" y="165" width="0.6043%" height="15" fill="rgb(217,147,25)"/><text x="33.2347%" y="175.50"></text></g><g><title>implementations_of_trait (128,321 samples, 0.15%)</title><rect x="33.4396%" y="149" width="0.1494%" height="15" fill="rgb(247,81,37)"/><text x="33.6896%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (106,891 samples, 0.12%)</title><rect x="33.4646%" y="133" width="0.1244%" height="15" fill="rgb(209,12,38)"/><text x="33.7146%" y="143.50"></text></g><g><title>coherent_trait (7,068,049 samples, 8.23%)</title><rect x="25.3616%" y="197" width="8.2282%" height="15" fill="rgb(227,1,9)"/><text x="25.6116%" y="207.50">coherent_tr..</text></g><g><title>specialization_graph_of (6,963,718 samples, 8.11%)</title><rect x="25.4831%" y="181" width="8.1067%" height="15" fill="rgb(248,47,43)"/><text x="25.7331%" y="191.50">specializat..</text></g><g><title>coherence_checking (7,143,639 samples, 8.32%)</title><rect x="25.3370%" y="213" width="8.3162%" height="15" fill="rgb(221,10,30)"/><text x="25.5870%" y="223.50">coherence_ch..</text></g><g><title>associated_item (181,221 samples, 0.21%)</title><rect x="38.9329%" y="149" width="0.2110%" height="15" fill="rgb(210,229,1)"/><text x="39.1829%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (148,121 samples, 0.17%)</title><rect x="38.9714%" y="133" width="0.1724%" height="15" fill="rgb(222,148,37)"/><text x="39.2214%" y="143.50"></text></g><g><title>associated_items (481,414 samples, 0.56%)</title><rect x="38.5988%" y="165" width="0.5604%" height="15" fill="rgb(234,67,33)"/><text x="38.8488%" y="175.50"></text></g><g><title>dropck_outlives (189,053 samples, 0.22%)</title><rect x="39.1949%" y="165" width="0.2201%" height="15" fill="rgb(247,98,35)"/><text x="39.4449%" y="175.50"></text></g><g><title>evaluate_obligation (727,289 samples, 0.85%)</title><rect x="39.4150%" y="165" width="0.8467%" height="15" fill="rgb(247,138,52)"/><text x="39.6650%" y="175.50"></text></g><g><title>fn_sig (134,274 samples, 0.16%)</title><rect x="40.2853%" y="165" width="0.1563%" height="15" fill="rgb(213,79,30)"/><text x="40.5353%" y="175.50"></text></g><g><title>metadata_decode_entry_fn_sig (127,694 samples, 0.15%)</title><rect x="40.2930%" y="149" width="0.1487%" height="15" fill="rgb(246,177,23)"/><text x="40.5430%" y="159.50"></text></g><g><title>impl_item_implementor_ids (111,760 samples, 0.13%)</title><rect x="40.5147%" y="165" width="0.1301%" height="15" fill="rgb(230,62,27)"/><text x="40.7647%" y="175.50"></text></g><g><title>associated_items (104,040 samples, 0.12%)</title><rect x="40.5237%" y="149" width="0.1211%" height="15" fill="rgb(216,154,8)"/><text x="40.7737%" y="159.50"></text></g><g><title>method_autoderef_steps (280,893 samples, 0.33%)</title><rect x="40.7879%" y="165" width="0.3270%" height="15" fill="rgb(244,35,45)"/><text x="41.0379%" y="175.50"></text></g><g><title>evaluate_obligation (128,272 samples, 0.15%)</title><rect x="40.9656%" y="149" width="0.1493%" height="15" fill="rgb(251,115,12)"/><text x="41.2156%" y="159.50"></text></g><g><title>predicates_of (170,971 samples, 0.20%)</title><rect x="41.1476%" y="165" width="0.1990%" height="15" fill="rgb(240,54,50)"/><text x="41.3976%" y="175.50"></text></g><g><title>predicates_defined_on (111,451 samples, 0.13%)</title><rect x="41.2169%" y="149" width="0.1297%" height="15" fill="rgb(233,84,52)"/><text x="41.4669%" y="159.50"></text></g><g><title>item_bodies_checking (6,663,383 samples, 7.76%)</title><rect x="33.6934%" y="213" width="7.7571%" height="15" fill="rgb(207,117,47)"/><text x="33.9434%" y="223.50">item_bodies..</text></g><g><title>typeck_item_bodies (6,661,673 samples, 7.76%)</title><rect x="33.6953%" y="197" width="7.7551%" height="15" fill="rgb(249,43,39)"/><text x="33.9453%" y="207.50">typeck_item..</text></g><g><title>typeck (6,641,143 samples, 7.73%)</title><rect x="33.7192%" y="181" width="7.7312%" height="15" fill="rgb(209,38,44)"/><text x="33.9692%" y="191.50">typeck</text></g><g><title>item_types_checking (343,824 samples, 0.40%)</title><rect x="41.4505%" y="213" width="0.4003%" height="15" fill="rgb(236,212,23)"/><text x="41.7005%" y="223.50"></text></g><g><title>check_mod_item_types (342,024 samples, 0.40%)</title><rect x="41.4526%" y="197" width="0.3982%" height="15" fill="rgb(242,79,21)"/><text x="41.7026%" y="207.50"></text></g><g><title>fn_sig (204,024 samples, 0.24%)</title><rect x="42.1348%" y="181" width="0.2375%" height="15" fill="rgb(211,96,35)"/><text x="42.3848%" y="191.50"></text></g><g><title>named_region_map (183,232 samples, 0.21%)</title><rect x="42.5218%" y="165" width="0.2133%" height="15" fill="rgb(253,215,40)"/><text x="42.7718%" y="175.50"></text></g><g><title>resolve_lifetimes (163,812 samples, 0.19%)</title><rect x="42.5444%" y="149" width="0.1907%" height="15" fill="rgb(211,81,21)"/><text x="42.7944%" y="159.50"></text></g><g><title>lint_levels (91,251 samples, 0.11%)</title><rect x="42.6289%" y="133" width="0.1062%" height="15" fill="rgb(208,190,38)"/><text x="42.8789%" y="143.50"></text></g><g><title>generics_of (329,613 samples, 0.38%)</title><rect x="42.3723%" y="181" width="0.3837%" height="15" fill="rgb(235,213,38)"/><text x="42.6223%" y="191.50"></text></g><g><title>late_bound_vars_map (89,131 samples, 0.10%)</title><rect x="43.0068%" y="149" width="0.1038%" height="15" fill="rgb(237,122,38)"/><text x="43.2568%" y="159.50"></text></g><g><title>explicit_item_bounds (113,431 samples, 0.13%)</title><rect x="42.9798%" y="165" width="0.1320%" height="15" fill="rgb(244,218,35)"/><text x="43.2298%" y="175.50"></text></g><g><title>item_bounds (243,333 samples, 0.28%)</title><rect x="42.8487%" y="181" width="0.2833%" height="15" fill="rgb(240,68,47)"/><text x="43.0987%" y="191.50"></text></g><g><title>late_bound_vars_map (131,272 samples, 0.15%)</title><rect x="43.4740%" y="133" width="0.1528%" height="15" fill="rgb(210,16,53)"/><text x="43.7240%" y="143.50"></text></g><g><title>resolve_lifetimes (119,732 samples, 0.14%)</title><rect x="43.4874%" y="117" width="0.1394%" height="15" fill="rgb(235,124,12)"/><text x="43.7374%" y="127.50"></text></g><g><title>explicit_predicates_of (331,084 samples, 0.39%)</title><rect x="43.2692%" y="149" width="0.3854%" height="15" fill="rgb(224,169,11)"/><text x="43.5192%" y="159.50"></text></g><g><title>predicates_of (633,507 samples, 0.74%)</title><rect x="43.1319%" y="181" width="0.7375%" height="15" fill="rgb(250,166,2)"/><text x="43.3819%" y="191.50"></text></g><g><title>predicates_defined_on (589,926 samples, 0.69%)</title><rect x="43.1827%" y="165" width="0.6868%" height="15" fill="rgb(242,216,29)"/><text x="43.4327%" y="175.50"></text></g><g><title>inferred_outlives_of (184,512 samples, 0.21%)</title><rect x="43.6546%" y="149" width="0.2148%" height="15" fill="rgb(230,116,27)"/><text x="43.9046%" y="159.50"></text></g><g><title>inferred_outlives_crate (160,962 samples, 0.19%)</title><rect x="43.6820%" y="133" width="0.1874%" height="15" fill="rgb(228,99,48)"/><text x="43.9320%" y="143.50"></text></g><g><title>type_of (101,551 samples, 0.12%)</title><rect x="43.7512%" y="117" width="0.1182%" height="15" fill="rgb(253,11,6)"/><text x="44.0012%" y="127.50"></text></g><g><title>super_predicates_of (101,011 samples, 0.12%)</title><rect x="43.8694%" y="181" width="0.1176%" height="15" fill="rgb(247,143,39)"/><text x="44.1194%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (86,721 samples, 0.10%)</title><rect x="43.8861%" y="165" width="0.1010%" height="15" fill="rgb(236,97,10)"/><text x="44.1361%" y="175.50"></text></g><g><title>type_collecting (2,053,332 samples, 2.39%)</title><rect x="41.8519%" y="213" width="2.3904%" height="15" fill="rgb(233,208,19)"/><text x="42.1019%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (2,043,732 samples, 2.38%)</title><rect x="41.8631%" y="197" width="2.3792%" height="15" fill="rgb(216,164,2)"/><text x="42.1131%" y="207.50">co..</text></g><g><title>type_of (219,243 samples, 0.26%)</title><rect x="43.9870%" y="181" width="0.2552%" height="15" fill="rgb(220,129,5)"/><text x="44.2370%" y="191.50"></text></g><g><title>evaluate_obligation (109,742 samples, 0.13%)</title><rect x="44.8493%" y="181" width="0.1278%" height="15" fill="rgb(242,17,10)"/><text x="45.0993%" y="191.50"></text></g><g><title>check_impl_item_well_formed (739,226 samples, 0.86%)</title><rect x="44.3234%" y="197" width="0.8606%" height="15" fill="rgb(242,107,0)"/><text x="44.5734%" y="207.50"></text></g><g><title>param_env (115,331 samples, 0.13%)</title><rect x="46.1816%" y="181" width="0.1343%" height="15" fill="rgb(251,28,31)"/><text x="46.4316%" y="191.50"></text></g><g><title>check_item_well_formed (1,094,273 samples, 1.27%)</title><rect x="45.1839%" y="197" width="1.2739%" height="15" fill="rgb(233,223,10)"/><text x="45.4339%" y="207.50"></text></g><g><title>evaluate_obligation (101,322 samples, 0.12%)</title><rect x="46.9731%" y="181" width="0.1180%" height="15" fill="rgb(215,21,27)"/><text x="47.2231%" y="191.50"></text></g><g><title>implied_outlives_bounds (96,540 samples, 0.11%)</title><rect x="47.0911%" y="181" width="0.1124%" height="15" fill="rgb(232,23,21)"/><text x="47.3411%" y="191.50"></text></g><g><title>analysis (28,520,915 samples, 33.20%)</title><rect x="14.1429%" y="245" width="33.2024%" height="15" fill="rgb(244,5,23)"/><text x="14.3929%" y="255.50">analysis</text></g><g><title>type_check_crate (18,938,188 samples, 22.05%)</title><rect x="25.2986%" y="229" width="22.0467%" height="15" fill="rgb(226,81,46)"/><text x="25.5486%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,663,939 samples, 3.10%)</title><rect x="44.2441%" y="213" width="3.1012%" height="15" fill="rgb(247,70,30)"/><text x="44.4941%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (762,319 samples, 0.89%)</title><rect x="46.4578%" y="197" width="0.8874%" height="15" fill="rgb(212,68,19)"/><text x="46.7078%" y="207.50"></text></g><g><title>is_unpin_raw (89,041 samples, 0.10%)</title><rect x="48.6340%" y="197" width="0.1037%" height="15" fill="rgb(240,187,13)"/><text x="48.8840%" y="207.50"></text></g><g><title>evaluate_obligation (86,921 samples, 0.10%)</title><rect x="48.6365%" y="181" width="0.1012%" height="15" fill="rgb(223,113,26)"/><text x="48.8865%" y="191.50"></text></g><g><title>fn_abi_of_instance (242,032 samples, 0.28%)</title><rect x="48.5157%" y="213" width="0.2818%" height="15" fill="rgb(206,192,2)"/><text x="48.7657%" y="223.50"></text></g><g><title>codegen_module (824,059 samples, 0.96%)</title><rect x="47.8738%" y="229" width="0.9593%" height="15" fill="rgb(241,108,4)"/><text x="48.1238%" y="239.50"></text></g><g><title>optimized_mir (193,632 samples, 0.23%)</title><rect x="48.9698%" y="181" width="0.2254%" height="15" fill="rgb(247,173,49)"/><text x="49.2198%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (290,523 samples, 0.34%)</title><rect x="48.8599%" y="197" width="0.3382%" height="15" fill="rgb(224,114,35)"/><text x="49.1099%" y="207.50"></text></g><g><title>monomorphization_collector (312,563 samples, 0.36%)</title><rect x="48.8575%" y="213" width="0.3639%" height="15" fill="rgb(245,159,27)"/><text x="49.1075%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (367,924 samples, 0.43%)</title><rect x="48.8345%" y="229" width="0.4283%" height="15" fill="rgb(245,172,44)"/><text x="49.0845%" y="239.50"></text></g><g><title>codegen_crate (1,670,079 samples, 1.94%)</title><rect x="47.3561%" y="245" width="1.9442%" height="15" fill="rgb(236,23,11)"/><text x="47.6061%" y="255.50">c..</text></g><g><title>codegen_module_optimize (3,888,243 samples, 4.53%)</title><rect x="49.3003%" y="245" width="4.5265%" height="15" fill="rgb(205,117,38)"/><text x="49.5503%" y="255.50">codeg..</text></g><g><title>LLVM_module_optimize (3,197,976 samples, 3.72%)</title><rect x="50.1039%" y="229" width="3.7229%" height="15" fill="rgb(237,72,25)"/><text x="50.3539%" y="239.50">LLVM..</text></g><g><title>LLVM_lto_optimize (1,583,498 samples, 1.84%)</title><rect x="54.3171%" y="229" width="1.8434%" height="15" fill="rgb(244,70,9)"/><text x="54.5671%" y="239.50">L..</text></g><g><title>LLVM_module_codegen (5,042,946 samples, 5.87%)</title><rect x="56.1606%" y="229" width="5.8707%" height="15" fill="rgb(217,125,39)"/><text x="56.4106%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (4,953,015 samples, 5.77%)</title><rect x="56.2652%" y="213" width="5.7660%" height="15" fill="rgb(235,36,10)"/><text x="56.5152%" y="223.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (7,102,269 samples, 8.27%)</title><rect x="53.8268%" y="245" width="8.2680%" height="15" fill="rgb(251,123,47)"/><text x="54.0768%" y="255.50">codegen_modu..</text></g><g><title>AST_validation (110,551 samples, 0.13%)</title><rect x="62.3035%" y="229" width="0.1287%" height="15" fill="rgb(221,13,13)"/><text x="62.5535%" y="239.50"></text></g><g><title>metadata_load_macro (111,001 samples, 0.13%)</title><rect x="75.5503%" y="197" width="0.1292%" height="15" fill="rgb(238,131,9)"/><text x="75.8003%" y="207.50"></text></g><g><title>macro_expand_crate (11,603,708 samples, 13.51%)</title><rect x="62.5642%" y="229" width="13.5084%" height="15" fill="rgb(211,50,8)"/><text x="62.8142%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (11,580,758 samples, 13.48%)</title><rect x="62.5909%" y="213" width="13.4816%" height="15" fill="rgb(245,182,24)"/><text x="62.8409%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (337,624 samples, 0.39%)</title><rect x="75.6795%" y="197" width="0.3930%" height="15" fill="rgb(242,14,37)"/><text x="75.9295%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (137,502 samples, 0.16%)</title><rect x="76.0780%" y="229" width="0.1601%" height="15" fill="rgb(246,228,12)"/><text x="76.3280%" y="239.50"></text></g><g><title>finalize_macro_resolutions (219,633 samples, 0.26%)</title><rect x="76.3056%" y="213" width="0.2557%" height="15" fill="rgb(213,55,15)"/><text x="76.5556%" y="223.50"></text></g><g><title>late_resolve_crate (933,560 samples, 1.09%)</title><rect x="76.5613%" y="213" width="1.0868%" height="15" fill="rgb(209,9,3)"/><text x="76.8113%" y="223.50"></text></g><g><title>configure_and_expand (13,439,508 samples, 15.65%)</title><rect x="62.0948%" y="245" width="15.6455%" height="15" fill="rgb(230,59,30)"/><text x="62.3448%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,290,405 samples, 1.50%)</title><rect x="76.2381%" y="229" width="1.5022%" height="15" fill="rgb(209,121,21)"/><text x="76.4881%" y="239.50"></text></g><g><title>drop_ast (99,251 samples, 0.12%)</title><rect x="77.7403%" y="245" width="0.1155%" height="15" fill="rgb(220,109,13)"/><text x="77.9903%" y="255.50"></text></g><g><title>early_lint_checks (216,122 samples, 0.25%)</title><rect x="77.8747%" y="245" width="0.2516%" height="15" fill="rgb(232,18,1)"/><text x="78.1247%" y="255.50"></text></g><g><title>free_global_ctxt (1,593,558 samples, 1.86%)</title><rect x="78.1263%" y="245" width="1.8551%" height="15" fill="rgb(215,41,42)"/><text x="78.3763%" y="255.50">f..</text></g><g><title>exported_symbols (111,672 samples, 0.13%)</title><rect x="80.6369%" y="229" width="0.1300%" height="15" fill="rgb(224,123,36)"/><text x="80.8869%" y="239.50"></text></g><g><title>is_sized_raw (148,271 samples, 0.17%)</title><rect x="81.7167%" y="197" width="0.1726%" height="15" fill="rgb(240,125,3)"/><text x="81.9667%" y="207.50"></text></g><g><title>evaluate_obligation (130,951 samples, 0.15%)</title><rect x="81.7368%" y="181" width="0.1524%" height="15" fill="rgb(205,98,50)"/><text x="81.9868%" y="191.50"></text></g><g><title>layout_of (306,613 samples, 0.36%)</title><rect x="81.5863%" y="213" width="0.3569%" height="15" fill="rgb(205,185,37)"/><text x="81.8363%" y="223.50"></text></g><g><title>is_copy_raw (222,073 samples, 0.26%)</title><rect x="82.7178%" y="181" width="0.2585%" height="15" fill="rgb(238,207,15)"/><text x="82.9678%" y="191.50"></text></g><g><title>evaluate_obligation (190,212 samples, 0.22%)</title><rect x="82.7549%" y="165" width="0.2214%" height="15" fill="rgb(213,199,42)"/><text x="83.0049%" y="175.50"></text></g><g><title>needs_drop_raw (282,674 samples, 0.33%)</title><rect x="82.6909%" y="197" width="0.3291%" height="15" fill="rgb(235,201,11)"/><text x="82.9409%" y="207.50"></text></g><g><title>optimized_mir (1,961,211 samples, 2.28%)</title><rect x="80.8166%" y="229" width="2.2831%" height="15" fill="rgb(207,46,11)"/><text x="81.0666%" y="239.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (993,500 samples, 1.16%)</title><rect x="81.9432%" y="213" width="1.1566%" height="15" fill="rgb(241,35,35)"/><text x="82.1932%" y="223.50"></text></g><g><title>generate_crate_metadata (2,699,540 samples, 3.14%)</title><rect x="79.9814%" y="245" width="3.1426%" height="15" fill="rgb(243,32,47)"/><text x="80.2314%" y="255.50">gen..</text></g><g><title>hir_lowering (1,472,417 samples, 1.71%)</title><rect x="83.1240%" y="245" width="1.7141%" height="15" fill="rgb(247,202,23)"/><text x="83.3740%" y="255.50"></text></g><g><title>finish_ongoing_codegen (9,555,656 samples, 11.12%)</title><rect x="84.8521%" y="229" width="11.1241%" height="15" fill="rgb(219,102,11)"/><text x="85.1021%" y="239.50">finish_ongoing_c..</text></g><g><title>link_crate (657,977 samples, 0.77%)</title><rect x="95.9762%" y="229" width="0.7660%" height="15" fill="rgb(243,110,44)"/><text x="96.2262%" y="239.50"></text></g><g><title>link_binary (652,867 samples, 0.76%)</title><rect x="95.9822%" y="213" width="0.7600%" height="15" fill="rgb(222,74,54)"/><text x="96.2322%" y="223.50"></text></g><g><title>link_rlib (398,264 samples, 0.46%)</title><rect x="96.2786%" y="197" width="0.4636%" height="15" fill="rgb(216,99,12)"/><text x="96.5286%" y="207.50"></text></g><g><title>link (10,232,563 samples, 11.91%)</title><rect x="84.8381%" y="245" width="11.9121%" height="15" fill="rgb(226,22,26)"/><text x="85.0881%" y="255.50">link</text></g><g><title>parse_crate (1,578,258 samples, 1.84%)</title><rect x="96.7503%" y="245" width="1.8373%" height="15" fill="rgb(217,163,10)"/><text x="97.0003%" y="255.50">p..</text></g><g><title>prepare_outputs (277,393 samples, 0.32%)</title><rect x="98.5969%" y="245" width="0.3229%" height="15" fill="rgb(213,25,53)"/><text x="98.8469%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (473,065 samples, 0.55%)</title><rect x="98.9198%" y="245" width="0.5507%" height="15" fill="rgb(252,105,26)"/><text x="99.1698%" y="255.50"></text></g><g><title>setup_global_ctxt (117,281 samples, 0.14%)</title><rect x="99.4716%" y="245" width="0.1365%" height="15" fill="rgb(220,39,43)"/><text x="99.7216%" y="255.50"></text></g><g><title>all (85,900,258 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,68,48)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (85,900,258 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (336,603 samples, 0.39%)</title><rect x="99.6081%" y="245" width="0.3919%" height="15" fill="rgb(223,20,43)"/><text x="99.8581%" y="255.50"></text></g></svg></svg>