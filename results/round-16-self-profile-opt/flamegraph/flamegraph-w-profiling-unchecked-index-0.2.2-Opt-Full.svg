<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,688,353 samples, 5.96%)</title><rect x="0.9551%" y="181" width="5.9627%" height="15" fill="rgb(227,0,7)"/><text x="1.2051%" y="191.50">LLVM_pas..</text></g><g><title>codegen_generate_lto_work (138,192 samples, 0.14%)</title><rect x="6.7729%" y="165" width="0.1449%" height="15" fill="rgb(217,0,24)"/><text x="7.0229%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (124,732 samples, 0.13%)</title><rect x="6.7870%" y="149" width="0.1307%" height="15" fill="rgb(221,193,54)"/><text x="7.0370%" y="159.50"></text></g><g><title>needs_drop_raw (230,983 samples, 0.24%)</title><rect x="15.1042%" y="69" width="0.2421%" height="15" fill="rgb(248,212,6)"/><text x="15.3542%" y="79.50"></text></g><g><title>is_copy_raw (201,443 samples, 0.21%)</title><rect x="15.1352%" y="53" width="0.2112%" height="15" fill="rgb(208,68,35)"/><text x="15.3852%" y="63.50"></text></g><g><title>evaluate_obligation (162,912 samples, 0.17%)</title><rect x="15.1756%" y="37" width="0.1708%" height="15" fill="rgb(232,128,0)"/><text x="15.4256%" y="47.50"></text></g><g><title>resolve_instance (134,600 samples, 0.14%)</title><rect x="15.3464%" y="69" width="0.1411%" height="15" fill="rgb(207,160,47)"/><text x="15.5964%" y="79.50"></text></g><g><title>thir_body (358,803 samples, 0.38%)</title><rect x="15.5029%" y="69" width="0.3761%" height="15" fill="rgb(228,23,34)"/><text x="15.7529%" y="79.50"></text></g><g><title>mir_const (2,472,971 samples, 2.59%)</title><rect x="13.2962%" y="117" width="2.5922%" height="15" fill="rgb(218,30,26)"/><text x="13.5462%" y="127.50">mi..</text></g><g><title>unsafety_check_result (2,067,049 samples, 2.17%)</title><rect x="13.7216%" y="101" width="2.1667%" height="15" fill="rgb(220,122,19)"/><text x="13.9716%" y="111.50">u..</text></g><g><title>mir_built (1,780,414 samples, 1.87%)</title><rect x="14.0221%" y="85" width="1.8663%" height="15" fill="rgb(250,228,42)"/><text x="14.2721%" y="95.50">m..</text></g><g><title>mir_promoted (2,928,948 samples, 3.07%)</title><rect x="12.8446%" y="133" width="3.0702%" height="15" fill="rgb(240,193,28)"/><text x="13.0946%" y="143.50">mir..</text></g><g><title>type_op_normalize_fn_sig (223,542 samples, 0.23%)</title><rect x="15.9812%" y="133" width="0.2343%" height="15" fill="rgb(216,20,37)"/><text x="16.2312%" y="143.50"></text></g><g><title>type_op_normalize_ty (713,020 samples, 0.75%)</title><rect x="16.2155%" y="133" width="0.7474%" height="15" fill="rgb(206,188,39)"/><text x="16.4655%" y="143.50"></text></g><g><title>normalize_projection_ty (485,828 samples, 0.51%)</title><rect x="16.4537%" y="117" width="0.5093%" height="15" fill="rgb(217,207,13)"/><text x="16.7037%" y="127.50"></text></g><g><title>type_op_prove_predicate (514,604 samples, 0.54%)</title><rect x="16.9629%" y="133" width="0.5394%" height="15" fill="rgb(231,73,38)"/><text x="17.2129%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,662,016 samples, 10.13%)</title><rect x="7.3820%" y="165" width="10.1280%" height="15" fill="rgb(225,20,46)"/><text x="7.6320%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (9,595,375 samples, 10.06%)</title><rect x="7.4519%" y="149" width="10.0581%" height="15" fill="rgb(210,31,41)"/><text x="7.7019%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (306,804 samples, 0.32%)</title><rect x="17.5463%" y="165" width="0.3216%" height="15" fill="rgb(221,200,47)"/><text x="17.7963%" y="175.50"></text></g><g><title>get_lang_items (129,742 samples, 0.14%)</title><rect x="18.3448%" y="117" width="0.1360%" height="15" fill="rgb(226,26,5)"/><text x="18.5948%" y="127.50"></text></g><g><title>codegen_fn_attrs (157,042 samples, 0.16%)</title><rect x="18.6438%" y="101" width="0.1646%" height="15" fill="rgb(249,33,26)"/><text x="18.8938%" y="111.50"></text></g><g><title>should_inherit_track_caller (323,073 samples, 0.34%)</title><rect x="18.4808%" y="117" width="0.3387%" height="15" fill="rgb(235,183,28)"/><text x="18.7308%" y="127.50"></text></g><g><title>codegen_fn_attrs (612,456 samples, 0.64%)</title><rect x="18.2146%" y="133" width="0.6420%" height="15" fill="rgb(221,5,38)"/><text x="18.4646%" y="143.50"></text></g><g><title>check_mod_attrs (892,270 samples, 0.94%)</title><rect x="17.9215%" y="149" width="0.9353%" height="15" fill="rgb(247,18,42)"/><text x="18.1715%" y="159.50"></text></g><g><title>check_mod_const_bodies (161,673 samples, 0.17%)</title><rect x="18.8568%" y="149" width="0.1695%" height="15" fill="rgb(241,131,45)"/><text x="19.1068%" y="159.50"></text></g><g><title>lookup_deprecation_entry (184,472 samples, 0.19%)</title><rect x="19.3682%" y="133" width="0.1934%" height="15" fill="rgb(249,31,29)"/><text x="19.6182%" y="143.50"></text></g><g><title>stability_index (126,282 samples, 0.13%)</title><rect x="19.4292%" y="117" width="0.1324%" height="15" fill="rgb(225,111,53)"/><text x="19.6792%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (497,475 samples, 0.52%)</title><rect x="19.1257%" y="149" width="0.5215%" height="15" fill="rgb(238,160,17)"/><text x="19.3757%" y="159.50"></text></g><g><title>misc_checking_1 (1,804,780 samples, 1.89%)</title><rect x="17.8683%" y="165" width="1.8918%" height="15" fill="rgb(214,148,48)"/><text x="18.1183%" y="175.50">m..</text></g><g><title>liveness_and_intrinsic_checking (173,932 samples, 0.18%)</title><rect x="19.7615%" y="149" width="0.1823%" height="15" fill="rgb(232,36,49)"/><text x="20.0115%" y="159.50"></text></g><g><title>check_mod_liveness (132,092 samples, 0.14%)</title><rect x="19.8053%" y="133" width="0.1385%" height="15" fill="rgb(209,103,24)"/><text x="20.0553%" y="143.50"></text></g><g><title>misc_checking_2 (345,744 samples, 0.36%)</title><rect x="19.7601%" y="165" width="0.3624%" height="15" fill="rgb(229,88,8)"/><text x="20.0101%" y="175.50"></text></g><g><title>match_checking (170,522 samples, 0.18%)</title><rect x="19.9438%" y="149" width="0.1787%" height="15" fill="rgb(213,181,19)"/><text x="20.1938%" y="159.50"></text></g><g><title>check_match (153,462 samples, 0.16%)</title><rect x="19.9617%" y="133" width="0.1609%" height="15" fill="rgb(254,191,54)"/><text x="20.2117%" y="143.50"></text></g><g><title>check_private_in_public (151,982 samples, 0.16%)</title><rect x="20.1311%" y="149" width="0.1593%" height="15" fill="rgb(241,83,37)"/><text x="20.3811%" y="159.50"></text></g><g><title>death_checking (222,782 samples, 0.23%)</title><rect x="20.2904%" y="149" width="0.2335%" height="15" fill="rgb(233,36,39)"/><text x="20.5404%" y="159.50"></text></g><g><title>param_env (281,793 samples, 0.30%)</title><rect x="20.8283%" y="117" width="0.2954%" height="15" fill="rgb(226,3,54)"/><text x="21.0783%" y="127.50"></text></g><g><title>predicates_of (123,411 samples, 0.13%)</title><rect x="20.9943%" y="101" width="0.1294%" height="15" fill="rgb(245,192,40)"/><text x="21.2443%" y="111.50"></text></g><g><title>predicates_defined_on (98,921 samples, 0.10%)</title><rect x="21.0200%" y="85" width="0.1037%" height="15" fill="rgb(238,167,29)"/><text x="21.2700%" y="95.50"></text></g><g><title>crate_lints (1,114,342 samples, 1.17%)</title><rect x="20.5255%" y="133" width="1.1681%" height="15" fill="rgb(232,182,51)"/><text x="20.7755%" y="143.50"></text></g><g><title>type_of (465,407 samples, 0.49%)</title><rect x="21.2057%" y="117" width="0.4879%" height="15" fill="rgb(231,60,39)"/><text x="21.4557%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (381,883 samples, 0.40%)</title><rect x="21.2932%" y="101" width="0.4003%" height="15" fill="rgb(208,69,12)"/><text x="21.5432%" y="111.50"></text></g><g><title>lint_checking (1,269,454 samples, 1.33%)</title><rect x="20.5239%" y="149" width="1.3307%" height="15" fill="rgb(235,93,37)"/><text x="20.7739%" y="159.50"></text></g><g><title>module_lints (153,672 samples, 0.16%)</title><rect x="21.6935%" y="133" width="0.1611%" height="15" fill="rgb(213,116,39)"/><text x="21.9435%" y="143.50"></text></g><g><title>lint_mod (147,491 samples, 0.15%)</title><rect x="21.7000%" y="117" width="0.1546%" height="15" fill="rgb(222,207,29)"/><text x="21.9500%" y="127.50"></text></g><g><title>privacy_access_levels (140,901 samples, 0.15%)</title><rect x="21.8546%" y="149" width="0.1477%" height="15" fill="rgb(206,96,30)"/><text x="22.1046%" y="159.50"></text></g><g><title>privacy_checking_modules (436,565 samples, 0.46%)</title><rect x="22.0023%" y="149" width="0.4576%" height="15" fill="rgb(218,138,4)"/><text x="22.2523%" y="159.50"></text></g><g><title>check_mod_privacy (432,585 samples, 0.45%)</title><rect x="22.0065%" y="133" width="0.4534%" height="15" fill="rgb(250,191,14)"/><text x="22.2565%" y="143.50"></text></g><g><title>misc_checking_3 (2,248,985 samples, 2.36%)</title><rect x="20.1226%" y="165" width="2.3574%" height="15" fill="rgb(239,60,40)"/><text x="20.3726%" y="175.50">m..</text></g><g><title>is_copy_raw (124,802 samples, 0.13%)</title><rect x="22.7191%" y="117" width="0.1308%" height="15" fill="rgb(206,27,48)"/><text x="22.9691%" y="127.50"></text></g><g><title>param_env (150,201 samples, 0.16%)</title><rect x="22.8500%" y="117" width="0.1574%" height="15" fill="rgb(225,35,8)"/><text x="23.1000%" y="127.50"></text></g><g><title>impl_parent (537,304 samples, 0.56%)</title><rect x="24.0956%" y="101" width="0.5632%" height="15" fill="rgb(250,213,24)"/><text x="24.3456%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (309,661 samples, 0.32%)</title><rect x="24.3342%" y="85" width="0.3246%" height="15" fill="rgb(247,123,22)"/><text x="24.5842%" y="95.50"></text></g><g><title>impl_trait_ref (1,577,002 samples, 1.65%)</title><rect x="24.6588%" y="101" width="1.6531%" height="15" fill="rgb(231,138,38)"/><text x="24.9088%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,344,999 samples, 1.41%)</title><rect x="24.9020%" y="85" width="1.4099%" height="15" fill="rgb(231,145,46)"/><text x="25.1520%" y="95.50"></text></g><g><title>coherent_trait (3,784,872 samples, 3.97%)</title><rect x="22.5764%" y="133" width="3.9674%" height="15" fill="rgb(251,118,11)"/><text x="22.8264%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (3,373,728 samples, 3.54%)</title><rect x="23.0074%" y="117" width="3.5364%" height="15" fill="rgb(217,147,25)"/><text x="23.2574%" y="127.50">spe..</text></g><g><title>trait_impls_of (221,302 samples, 0.23%)</title><rect x="26.3119%" y="101" width="0.2320%" height="15" fill="rgb(247,81,37)"/><text x="26.5619%" y="111.50"></text></g><g><title>coherence_checking (3,900,673 samples, 4.09%)</title><rect x="22.5458%" y="149" width="4.0888%" height="15" fill="rgb(209,12,38)"/><text x="22.7958%" y="159.50">cohe..</text></g><g><title>associated_item (113,941 samples, 0.12%)</title><rect x="36.2952%" y="85" width="0.1194%" height="15" fill="rgb(227,1,9)"/><text x="36.5452%" y="95.50"></text></g><g><title>associated_items (163,971 samples, 0.17%)</title><rect x="36.2501%" y="101" width="0.1719%" height="15" fill="rgb(248,47,43)"/><text x="36.5001%" y="111.50"></text></g><g><title>evaluate_obligation (263,622 samples, 0.28%)</title><rect x="36.5307%" y="101" width="0.2763%" height="15" fill="rgb(221,10,30)"/><text x="36.7807%" y="111.50"></text></g><g><title>predicates_of (153,581 samples, 0.16%)</title><rect x="37.1647%" y="101" width="0.1610%" height="15" fill="rgb(210,229,1)"/><text x="37.4147%" y="111.50"></text></g><g><title>predicates_defined_on (120,411 samples, 0.13%)</title><rect x="37.1995%" y="85" width="0.1262%" height="15" fill="rgb(222,148,37)"/><text x="37.4495%" y="95.50"></text></g><g><title>item_bodies_checking (10,229,943 samples, 10.72%)</title><rect x="26.7126%" y="149" width="10.7233%" height="15" fill="rgb(234,67,33)"/><text x="26.9626%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (10,228,243 samples, 10.72%)</title><rect x="26.7144%" y="133" width="10.7215%" height="15" fill="rgb(247,98,35)"/><text x="26.9644%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (10,178,012 samples, 10.67%)</title><rect x="26.7671%" y="117" width="10.6689%" height="15" fill="rgb(247,138,52)"/><text x="27.0171%" y="127.50">typeck</text></g><g><title>item_types_checking (1,176,443 samples, 1.23%)</title><rect x="37.4359%" y="149" width="1.2332%" height="15" fill="rgb(213,79,30)"/><text x="37.6859%" y="159.50"></text></g><g><title>check_mod_item_types (1,172,153 samples, 1.23%)</title><rect x="37.4404%" y="133" width="1.2287%" height="15" fill="rgb(246,177,23)"/><text x="37.6904%" y="143.50"></text></g><g><title>fn_sig (841,277 samples, 0.88%)</title><rect x="39.1753%" y="117" width="0.8818%" height="15" fill="rgb(230,62,27)"/><text x="39.4253%" y="127.50"></text></g><g><title>type_param_predicates (168,211 samples, 0.18%)</title><rect x="39.8809%" y="101" width="0.1763%" height="15" fill="rgb(216,154,8)"/><text x="40.1309%" y="111.50"></text></g><g><title>is_late_bound_map (531,228 samples, 0.56%)</title><rect x="40.2979%" y="101" width="0.5568%" height="15" fill="rgb(244,35,45)"/><text x="40.5479%" y="111.50"></text></g><g><title>resolve_lifetimes (516,787 samples, 0.54%)</title><rect x="40.3130%" y="85" width="0.5417%" height="15" fill="rgb(251,115,12)"/><text x="40.5630%" y="95.50"></text></g><g><title>lint_levels (360,494 samples, 0.38%)</title><rect x="40.4768%" y="69" width="0.3779%" height="15" fill="rgb(240,54,50)"/><text x="40.7268%" y="79.50"></text></g><g><title>named_region_map (532,369 samples, 0.56%)</title><rect x="40.8547%" y="101" width="0.5580%" height="15" fill="rgb(233,84,52)"/><text x="41.1047%" y="111.50"></text></g><g><title>resolve_lifetimes (471,958 samples, 0.49%)</title><rect x="40.9180%" y="85" width="0.4947%" height="15" fill="rgb(207,117,47)"/><text x="41.1680%" y="95.50"></text></g><g><title>generics_of (1,328,949 samples, 1.39%)</title><rect x="40.0572%" y="117" width="1.3930%" height="15" fill="rgb(249,43,39)"/><text x="40.3072%" y="127.50"></text></g><g><title>impl_trait_ref (163,972 samples, 0.17%)</title><rect x="41.4502%" y="117" width="0.1719%" height="15" fill="rgb(209,38,44)"/><text x="41.7002%" y="127.50"></text></g><g><title>late_bound_vars_map (126,500 samples, 0.13%)</title><rect x="42.2696%" y="69" width="0.1326%" height="15" fill="rgb(236,212,23)"/><text x="42.5196%" y="79.50"></text></g><g><title>resolve_lifetimes (111,520 samples, 0.12%)</title><rect x="42.2853%" y="53" width="0.1169%" height="15" fill="rgb(242,79,21)"/><text x="42.5353%" y="63.50"></text></g><g><title>explicit_predicates_of (509,756 samples, 0.53%)</title><rect x="41.8922%" y="85" width="0.5343%" height="15" fill="rgb(211,96,35)"/><text x="42.1422%" y="95.50"></text></g><g><title>predicates_of (837,421 samples, 0.88%)</title><rect x="41.6515%" y="117" width="0.8778%" height="15" fill="rgb(253,215,40)"/><text x="41.9015%" y="127.50"></text></g><g><title>predicates_defined_on (750,720 samples, 0.79%)</title><rect x="41.7424%" y="101" width="0.7869%" height="15" fill="rgb(211,81,21)"/><text x="41.9924%" y="111.50"></text></g><g><title>inferred_outlives_of (98,071 samples, 0.10%)</title><rect x="42.4265%" y="85" width="0.1028%" height="15" fill="rgb(208,190,38)"/><text x="42.6765%" y="95.50"></text></g><g><title>type_collecting (3,961,194 samples, 4.15%)</title><rect x="38.6726%" y="149" width="4.1522%" height="15" fill="rgb(235,213,38)"/><text x="38.9226%" y="159.50">type_..</text></g><g><title>collect_mod_item_types (3,938,754 samples, 4.13%)</title><rect x="38.6961%" y="133" width="4.1287%" height="15" fill="rgb(237,122,38)"/><text x="38.9461%" y="143.50">coll..</text></g><g><title>type_of (281,912 samples, 0.30%)</title><rect x="42.5293%" y="117" width="0.2955%" height="15" fill="rgb(244,218,35)"/><text x="42.7793%" y="127.50"></text></g><g><title>evaluate_obligation (584,479 samples, 0.61%)</title><rect x="46.5431%" y="117" width="0.6127%" height="15" fill="rgb(240,68,47)"/><text x="46.7931%" y="127.50"></text></g><g><title>implied_outlives_bounds (363,446 samples, 0.38%)</title><rect x="47.2070%" y="117" width="0.3810%" height="15" fill="rgb(210,16,53)"/><text x="47.4570%" y="127.50"></text></g><g><title>param_env (408,247 samples, 0.43%)</title><rect x="47.5880%" y="117" width="0.4279%" height="15" fill="rgb(235,124,12)"/><text x="47.8380%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,867,086 samples, 5.10%)</title><rect x="43.1645%" y="133" width="5.1018%" height="15" fill="rgb(224,169,11)"/><text x="43.4145%" y="143.50">check_..</text></g><g><title>region_scope_tree (231,233 samples, 0.24%)</title><rect x="48.0239%" y="117" width="0.2424%" height="15" fill="rgb(250,166,2)"/><text x="48.2739%" y="127.50"></text></g><g><title>adt_def (111,312 samples, 0.12%)</title><rect x="52.5570%" y="85" width="0.1167%" height="15" fill="rgb(242,216,29)"/><text x="52.8070%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (108,172 samples, 0.11%)</title><rect x="52.5602%" y="69" width="0.1134%" height="15" fill="rgb(230,116,27)"/><text x="52.8102%" y="79.50"></text></g><g><title>evaluate_obligation (211,382 samples, 0.22%)</title><rect x="52.4841%" y="117" width="0.2216%" height="15" fill="rgb(228,99,48)"/><text x="52.7341%" y="127.50"></text></g><g><title>adt_sized_constraint (156,572 samples, 0.16%)</title><rect x="52.5415%" y="101" width="0.1641%" height="15" fill="rgb(253,11,6)"/><text x="52.7915%" y="111.50"></text></g><g><title>impl_item_implementor_ids (97,140 samples, 0.10%)</title><rect x="52.7392%" y="117" width="0.1018%" height="15" fill="rgb(247,143,39)"/><text x="52.9892%" y="127.50"></text></g><g><title>implied_outlives_bounds (319,024 samples, 0.33%)</title><rect x="52.8988%" y="117" width="0.3344%" height="15" fill="rgb(236,97,10)"/><text x="53.1488%" y="127.50"></text></g><g><title>param_env (595,145 samples, 0.62%)</title><rect x="53.2342%" y="117" width="0.6238%" height="15" fill="rgb(233,208,19)"/><text x="53.4842%" y="127.50"></text></g><g><title>predicates_of (168,931 samples, 0.18%)</title><rect x="53.8580%" y="117" width="0.1771%" height="15" fill="rgb(216,164,2)"/><text x="54.1080%" y="127.50"></text></g><g><title>predicates_defined_on (119,420 samples, 0.13%)</title><rect x="53.9099%" y="101" width="0.1252%" height="15" fill="rgb(220,129,5)"/><text x="54.1599%" y="111.50"></text></g><g><title>region_scope_tree (102,171 samples, 0.11%)</title><rect x="54.0351%" y="117" width="0.1071%" height="15" fill="rgb(242,17,10)"/><text x="54.2851%" y="127.50"></text></g><g><title>check_item_well_formed (5,759,313 samples, 6.04%)</title><rect x="48.2663%" y="133" width="6.0371%" height="15" fill="rgb(242,107,0)"/><text x="48.5163%" y="143.50">check_it..</text></g><g><title>variances_of (123,992 samples, 0.13%)</title><rect x="54.1734%" y="117" width="0.1300%" height="15" fill="rgb(251,28,31)"/><text x="54.4234%" y="127.50"></text></g><g><title>crate_variances (118,602 samples, 0.12%)</title><rect x="54.1790%" y="101" width="0.1243%" height="15" fill="rgb(233,223,10)"/><text x="54.4290%" y="111.50"></text></g><g><title>evaluate_obligation (121,741 samples, 0.13%)</title><rect x="54.7203%" y="117" width="0.1276%" height="15" fill="rgb(215,21,27)"/><text x="54.9703%" y="127.50"></text></g><g><title>implied_outlives_bounds (101,531 samples, 0.11%)</title><rect x="54.8480%" y="117" width="0.1064%" height="15" fill="rgb(232,23,21)"/><text x="55.0980%" y="127.50"></text></g><g><title>analysis (45,880,337 samples, 48.09%)</title><rect x="6.9178%" y="181" width="48.0930%" height="15" fill="rgb(244,5,23)"/><text x="7.1678%" y="191.50">analysis</text></g><g><title>type_check_crate (31,034,072 samples, 32.53%)</title><rect x="22.4800%" y="165" width="32.5307%" height="15" fill="rgb(226,81,46)"/><text x="22.7300%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,622,389 samples, 12.18%)</title><rect x="42.8278%" y="149" width="12.1829%" height="15" fill="rgb(247,70,30)"/><text x="43.0778%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (674,828 samples, 0.71%)</title><rect x="54.3034%" y="133" width="0.7074%" height="15" fill="rgb(212,68,19)"/><text x="54.5534%" y="143.50"></text></g><g><title>codegen_module (211,213 samples, 0.22%)</title><rect x="55.4740%" y="165" width="0.2214%" height="15" fill="rgb(240,187,13)"/><text x="55.7240%" y="175.50"></text></g><g><title>codegen_crate (726,838 samples, 0.76%)</title><rect x="55.0237%" y="181" width="0.7619%" height="15" fill="rgb(223,113,26)"/><text x="55.2737%" y="191.50"></text></g><g><title>codegen_module_optimize (1,919,381 samples, 2.01%)</title><rect x="55.7856%" y="181" width="2.0119%" height="15" fill="rgb(206,192,2)"/><text x="56.0356%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (479,245 samples, 0.50%)</title><rect x="57.2952%" y="165" width="0.5024%" height="15" fill="rgb(241,108,4)"/><text x="57.5452%" y="175.50"></text></g><g><title>LLVM_lto_optimize (225,163 samples, 0.24%)</title><rect x="58.2197%" y="165" width="0.2360%" height="15" fill="rgb(247,173,49)"/><text x="58.4697%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,646,479 samples, 2.77%)</title><rect x="58.4557%" y="165" width="2.7741%" height="15" fill="rgb(224,114,35)"/><text x="58.7057%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,605,369 samples, 2.73%)</title><rect x="58.4988%" y="149" width="2.7310%" height="15" fill="rgb(245,159,27)"/><text x="58.7488%" y="159.50">LL..</text></g><g><title>codegen_module_perform_lto (3,307,746 samples, 3.47%)</title><rect x="57.7975%" y="181" width="3.4673%" height="15" fill="rgb(245,172,44)"/><text x="58.0475%" y="191.50">cod..</text></g><g><title>AST_validation (201,592 samples, 0.21%)</title><rect x="61.5001%" y="165" width="0.2113%" height="15" fill="rgb(236,23,11)"/><text x="61.7501%" y="175.50"></text></g><g><title>metadata_load_macro (238,392 samples, 0.25%)</title><rect x="75.2799%" y="133" width="0.2499%" height="15" fill="rgb(205,117,38)"/><text x="75.5299%" y="143.50"></text></g><g><title>metadata_register_crate (201,942 samples, 0.21%)</title><rect x="75.5298%" y="133" width="0.2117%" height="15" fill="rgb(237,72,25)"/><text x="75.7798%" y="143.50"></text></g><g><title>macro_expand_crate (13,275,536 samples, 13.92%)</title><rect x="61.8744%" y="165" width="13.9158%" height="15" fill="rgb(244,70,9)"/><text x="62.1244%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (13,249,206 samples, 13.89%)</title><rect x="61.9020%" y="149" width="13.8882%" height="15" fill="rgb(217,125,39)"/><text x="62.1520%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (154,541 samples, 0.16%)</title><rect x="75.7956%" y="165" width="0.1620%" height="15" fill="rgb(235,36,10)"/><text x="76.0456%" y="175.50"></text></g><g><title>finalize_imports (143,781 samples, 0.15%)</title><rect x="75.9687%" y="149" width="0.1507%" height="15" fill="rgb(251,123,47)"/><text x="76.2187%" y="159.50"></text></g><g><title>finalize_macro_resolutions (191,222 samples, 0.20%)</title><rect x="76.1194%" y="149" width="0.2004%" height="15" fill="rgb(221,13,13)"/><text x="76.3694%" y="159.50"></text></g><g><title>late_resolve_crate (2,078,552 samples, 2.18%)</title><rect x="76.3199%" y="149" width="2.1788%" height="15" fill="rgb(238,131,9)"/><text x="76.5699%" y="159.50">l..</text></g><g><title>resolve_check_unused (118,642 samples, 0.12%)</title><rect x="78.5171%" y="149" width="0.1244%" height="15" fill="rgb(211,50,8)"/><text x="78.7671%" y="159.50"></text></g><g><title>configure_and_expand (16,627,923 samples, 17.43%)</title><rect x="61.2648%" y="181" width="17.4298%" height="15" fill="rgb(245,182,24)"/><text x="61.5148%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,611,158 samples, 2.74%)</title><rect x="75.9576%" y="165" width="2.7371%" height="15" fill="rgb(242,14,37)"/><text x="76.2076%" y="175.50">re..</text></g><g><title>drop_ast (249,172 samples, 0.26%)</title><rect x="78.6946%" y="181" width="0.2612%" height="15" fill="rgb(246,228,12)"/><text x="78.9446%" y="191.50"></text></g><g><title>early_lint_checks (446,985 samples, 0.47%)</title><rect x="78.9776%" y="181" width="0.4685%" height="15" fill="rgb(213,55,15)"/><text x="79.2276%" y="191.50"></text></g><g><title>free_global_ctxt (1,599,217 samples, 1.68%)</title><rect x="79.4461%" y="181" width="1.6763%" height="15" fill="rgb(209,9,3)"/><text x="79.6961%" y="191.50"></text></g><g><title>is_sized_raw (97,370 samples, 0.10%)</title><rect x="84.2191%" y="133" width="0.1021%" height="15" fill="rgb(230,59,30)"/><text x="84.4691%" y="143.50"></text></g><g><title>layout_of (432,206 samples, 0.45%)</title><rect x="84.0774%" y="149" width="0.4530%" height="15" fill="rgb(209,121,21)"/><text x="84.3274%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,277,099 samples, 1.34%)</title><rect x="84.5305%" y="149" width="1.3387%" height="15" fill="rgb(220,109,13)"/><text x="84.7805%" y="159.50"></text></g><g><title>specialization_graph_of (166,332 samples, 0.17%)</title><rect x="85.9694%" y="133" width="0.1744%" height="15" fill="rgb(232,18,1)"/><text x="86.2194%" y="143.50"></text></g><g><title>optimized_mir (3,421,568 samples, 3.59%)</title><rect x="82.5605%" y="165" width="3.5866%" height="15" fill="rgb(215,41,42)"/><text x="82.8105%" y="175.50">opti..</text></g><g><title>resolve_instance (256,153 samples, 0.27%)</title><rect x="85.8786%" y="149" width="0.2685%" height="15" fill="rgb(224,123,36)"/><text x="86.1286%" y="159.50"></text></g><g><title>generate_crate_metadata (4,907,534 samples, 5.14%)</title><rect x="81.1225%" y="181" width="5.1442%" height="15" fill="rgb(240,125,3)"/><text x="81.3725%" y="191.50">genera..</text></g><g><title>hir_lowering (4,076,045 samples, 4.27%)</title><rect x="86.2667%" y="181" width="4.2726%" height="15" fill="rgb(205,98,50)"/><text x="86.5167%" y="191.50">hir_l..</text></g><g><title>finish_ongoing_codegen (3,753,762 samples, 3.93%)</title><rect x="90.5565%" y="165" width="3.9348%" height="15" fill="rgb(205,185,37)"/><text x="90.8065%" y="175.50">fini..</text></g><g><title>link_crate (1,248,924 samples, 1.31%)</title><rect x="94.4913%" y="165" width="1.3092%" height="15" fill="rgb(238,207,15)"/><text x="94.7413%" y="175.50"></text></g><g><title>link_binary (1,220,283 samples, 1.28%)</title><rect x="94.5214%" y="149" width="1.2791%" height="15" fill="rgb(213,199,42)"/><text x="94.7714%" y="159.50"></text></g><g><title>link_rlib (818,708 samples, 0.86%)</title><rect x="94.9423%" y="133" width="0.8582%" height="15" fill="rgb(235,201,11)"/><text x="95.1923%" y="143.50"></text></g><g><title>link (5,031,016 samples, 5.27%)</title><rect x="90.5393%" y="181" width="5.2736%" height="15" fill="rgb(207,46,11)"/><text x="90.7893%" y="191.50">link</text></g><g><title>parse_crate (2,660,420 samples, 2.79%)</title><rect x="95.8130%" y="181" width="2.7887%" height="15" fill="rgb(241,35,35)"/><text x="96.0630%" y="191.50">pa..</text></g><g><title>prepare_outputs (335,814 samples, 0.35%)</title><rect x="98.6117%" y="181" width="0.3520%" height="15" fill="rgb(243,32,47)"/><text x="98.8617%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (474,045 samples, 0.50%)</title><rect x="98.9638%" y="181" width="0.4969%" height="15" fill="rgb(247,202,23)"/><text x="99.2138%" y="191.50"></text></g><g><title>setup_global_ctxt (133,512 samples, 0.14%)</title><rect x="99.4615%" y="181" width="0.1400%" height="15" fill="rgb(219,102,11)"/><text x="99.7115%" y="191.50"></text></g><g><title>all (95,399,222 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (95,399,222 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (380,174 samples, 0.40%)</title><rect x="99.6015%" y="181" width="0.3985%" height="15" fill="rgb(216,99,12)"/><text x="99.8515%" y="191.50"></text></g></svg></svg>