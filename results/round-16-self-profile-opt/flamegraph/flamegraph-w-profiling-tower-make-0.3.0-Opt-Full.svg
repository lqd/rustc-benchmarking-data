<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,275,219 samples, 12.55%)</title><rect x="1.0888%" y="229" width="12.5540%" height="15" fill="rgb(227,0,7)"/><text x="1.3388%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (110,562 samples, 0.22%)</title><rect x="13.4216%" y="213" width="0.2212%" height="15" fill="rgb(217,0,24)"/><text x="13.6716%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (98,421 samples, 0.20%)</title><rect x="13.4459%" y="197" width="0.1969%" height="15" fill="rgb(221,193,54)"/><text x="13.6959%" y="207.50"></text></g><g><title>needs_drop_raw (330,373 samples, 0.66%)</title><rect x="16.8149%" y="117" width="0.6609%" height="15" fill="rgb(248,212,6)"/><text x="17.0649%" y="127.50"></text></g><g><title>is_copy_raw (324,253 samples, 0.65%)</title><rect x="16.8272%" y="101" width="0.6487%" height="15" fill="rgb(208,68,35)"/><text x="17.0772%" y="111.50"></text></g><g><title>evaluate_obligation (315,703 samples, 0.63%)</title><rect x="16.8443%" y="85" width="0.6316%" height="15" fill="rgb(232,128,0)"/><text x="17.0943%" y="95.50"></text></g><g><title>trait_impls_of (290,103 samples, 0.58%)</title><rect x="16.8955%" y="69" width="0.5804%" height="15" fill="rgb(207,160,47)"/><text x="17.1455%" y="79.50"></text></g><g><title>implementations_of_trait (59,870 samples, 0.12%)</title><rect x="17.3561%" y="53" width="0.1198%" height="15" fill="rgb(228,23,34)"/><text x="17.6061%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (50,850 samples, 0.10%)</title><rect x="17.3741%" y="37" width="0.1017%" height="15" fill="rgb(218,30,26)"/><text x="17.6241%" y="47.50"></text></g><g><title>mir_const (796,768 samples, 1.59%)</title><rect x="16.0066%" y="165" width="1.5940%" height="15" fill="rgb(220,122,19)"/><text x="16.2566%" y="175.50"></text></g><g><title>unsafety_check_result (618,787 samples, 1.24%)</title><rect x="16.3627%" y="149" width="1.2379%" height="15" fill="rgb(250,228,42)"/><text x="16.6127%" y="159.50"></text></g><g><title>mir_built (540,316 samples, 1.08%)</title><rect x="16.5196%" y="133" width="1.0809%" height="15" fill="rgb(240,193,28)"/><text x="16.7696%" y="143.50"></text></g><g><title>mir_promoted (915,910 samples, 1.83%)</title><rect x="15.7848%" y="181" width="1.8323%" height="15" fill="rgb(216,20,37)"/><text x="16.0348%" y="191.50">m..</text></g><g><title>type_op_normalize_ty (209,672 samples, 0.42%)</title><rect x="17.6919%" y="181" width="0.4195%" height="15" fill="rgb(206,188,39)"/><text x="17.9419%" y="191.50"></text></g><g><title>normalize_projection_ty (171,252 samples, 0.34%)</title><rect x="17.7687%" y="165" width="0.3426%" height="15" fill="rgb(217,207,13)"/><text x="18.0187%" y="175.50"></text></g><g><title>type_op_prove_predicate (138,482 samples, 0.28%)</title><rect x="18.1113%" y="181" width="0.2770%" height="15" fill="rgb(231,73,38)"/><text x="18.3613%" y="191.50"></text></g><g><title>MIR_borrow_checking (2,238,845 samples, 4.48%)</title><rect x="13.9265%" y="213" width="4.4790%" height="15" fill="rgb(225,20,46)"/><text x="14.1765%" y="223.50">MIR_b..</text></g><g><title>mir_borrowck (2,229,535 samples, 4.46%)</title><rect x="13.9451%" y="197" width="4.4603%" height="15" fill="rgb(210,31,41)"/><text x="14.1951%" y="207.50">mir_b..</text></g><g><title>hir_module_items (131,562 samples, 0.26%)</title><rect x="18.4168%" y="213" width="0.2632%" height="15" fill="rgb(221,200,47)"/><text x="18.6668%" y="223.50"></text></g><g><title>get_lang_items (80,201 samples, 0.16%)</title><rect x="18.9751%" y="165" width="0.1604%" height="15" fill="rgb(226,26,5)"/><text x="19.2251%" y="175.50"></text></g><g><title>codegen_fn_attrs (194,832 samples, 0.39%)</title><rect x="18.8821%" y="181" width="0.3898%" height="15" fill="rgb(249,33,26)"/><text x="19.1321%" y="191.50"></text></g><g><title>check_mod_attrs (267,644 samples, 0.54%)</title><rect x="18.7368%" y="197" width="0.5354%" height="15" fill="rgb(235,183,28)"/><text x="18.9868%" y="207.50"></text></g><g><title>lookup_deprecation_entry (85,891 samples, 0.17%)</title><rect x="19.5934%" y="181" width="0.1718%" height="15" fill="rgb(221,5,38)"/><text x="19.8434%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (233,602 samples, 0.47%)</title><rect x="19.3926%" y="197" width="0.4673%" height="15" fill="rgb(247,18,42)"/><text x="19.6426%" y="207.50"></text></g><g><title>misc_checking_1 (628,837 samples, 1.26%)</title><rect x="18.6812%" y="213" width="1.2580%" height="15" fill="rgb(241,131,45)"/><text x="18.9312%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (78,171 samples, 0.16%)</title><rect x="19.9436%" y="197" width="0.1564%" height="15" fill="rgb(249,31,29)"/><text x="20.1936%" y="207.50"></text></g><g><title>check_mod_liveness (58,161 samples, 0.12%)</title><rect x="19.9836%" y="181" width="0.1164%" height="15" fill="rgb(225,111,53)"/><text x="20.2336%" y="191.50"></text></g><g><title>misc_checking_2 (177,642 samples, 0.36%)</title><rect x="19.9392%" y="213" width="0.3554%" height="15" fill="rgb(238,160,17)"/><text x="20.1892%" y="223.50"></text></g><g><title>match_checking (97,301 samples, 0.19%)</title><rect x="20.1000%" y="197" width="0.1947%" height="15" fill="rgb(214,148,48)"/><text x="20.3500%" y="207.50"></text></g><g><title>check_match (92,491 samples, 0.19%)</title><rect x="20.1096%" y="181" width="0.1850%" height="15" fill="rgb(232,36,49)"/><text x="20.3596%" y="191.50"></text></g><g><title>check_private_in_public (84,981 samples, 0.17%)</title><rect x="20.3175%" y="197" width="0.1700%" height="15" fill="rgb(209,103,24)"/><text x="20.5675%" y="207.50"></text></g><g><title>death_checking (172,642 samples, 0.35%)</title><rect x="20.4875%" y="197" width="0.3454%" height="15" fill="rgb(229,88,8)"/><text x="20.7375%" y="207.50"></text></g><g><title>lint_levels (58,911 samples, 0.12%)</title><rect x="20.7150%" y="181" width="0.1179%" height="15" fill="rgb(213,181,19)"/><text x="20.9650%" y="191.50"></text></g><g><title>crate_lints (228,373 samples, 0.46%)</title><rect x="20.8367%" y="181" width="0.4569%" height="15" fill="rgb(254,191,54)"/><text x="21.0867%" y="191.50"></text></g><g><title>param_env (140,132 samples, 0.28%)</title><rect x="21.0132%" y="165" width="0.2803%" height="15" fill="rgb(241,83,37)"/><text x="21.2632%" y="175.50"></text></g><g><title>predicates_of (67,631 samples, 0.14%)</title><rect x="21.1583%" y="149" width="0.1353%" height="15" fill="rgb(233,36,39)"/><text x="21.4083%" y="159.50"></text></g><g><title>predicates_defined_on (59,181 samples, 0.12%)</title><rect x="21.1752%" y="133" width="0.1184%" height="15" fill="rgb(226,3,54)"/><text x="21.4252%" y="143.50"></text></g><g><title>lint_checking (275,043 samples, 0.55%)</title><rect x="20.8329%" y="197" width="0.5502%" height="15" fill="rgb(245,192,40)"/><text x="21.0829%" y="207.50"></text></g><g><title>privacy_access_levels (82,861 samples, 0.17%)</title><rect x="21.3831%" y="197" width="0.1658%" height="15" fill="rgb(238,167,29)"/><text x="21.6331%" y="207.50"></text></g><g><title>privacy_checking_modules (200,432 samples, 0.40%)</title><rect x="21.5489%" y="197" width="0.4010%" height="15" fill="rgb(232,182,51)"/><text x="21.7989%" y="207.50"></text></g><g><title>check_mod_privacy (197,292 samples, 0.39%)</title><rect x="21.5551%" y="181" width="0.3947%" height="15" fill="rgb(231,60,39)"/><text x="21.8051%" y="191.50"></text></g><g><title>misc_checking_3 (847,299 samples, 1.70%)</title><rect x="20.2946%" y="213" width="1.6951%" height="15" fill="rgb(208,69,12)"/><text x="20.5446%" y="223.50"></text></g><g><title>coherent_trait (66,511 samples, 0.13%)</title><rect x="22.0776%" y="181" width="0.1331%" height="15" fill="rgb(235,93,37)"/><text x="22.3276%" y="191.50"></text></g><g><title>specialization_graph_of (59,041 samples, 0.12%)</title><rect x="22.0926%" y="165" width="0.1181%" height="15" fill="rgb(213,116,39)"/><text x="22.3426%" y="175.50"></text></g><g><title>coherence_checking (113,881 samples, 0.23%)</title><rect x="22.0501%" y="197" width="0.2278%" height="15" fill="rgb(222,207,29)"/><text x="22.3001%" y="207.50"></text></g><g><title>impl_parent (151,080 samples, 0.30%)</title><rect x="25.1043%" y="53" width="0.3022%" height="15" fill="rgb(206,96,30)"/><text x="25.3543%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (108,400 samples, 0.22%)</title><rect x="25.1897%" y="37" width="0.2169%" height="15" fill="rgb(218,138,4)"/><text x="25.4397%" y="47.50"></text></g><g><title>impl_trait_ref (773,819 samples, 1.55%)</title><rect x="25.4066%" y="53" width="1.5481%" height="15" fill="rgb(250,191,14)"/><text x="25.6566%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (725,469 samples, 1.45%)</title><rect x="25.5033%" y="37" width="1.4514%" height="15" fill="rgb(239,60,40)"/><text x="25.7533%" y="47.50"></text></g><g><title>adt_destructor (1,198,323 samples, 2.40%)</title><rect x="24.6953%" y="117" width="2.3973%" height="15" fill="rgb(206,27,48)"/><text x="24.9453%" y="127.50">ad..</text></g><g><title>metadata_decode_entry_adt_destructor (1,196,273 samples, 2.39%)</title><rect x="24.6994%" y="101" width="2.3932%" height="15" fill="rgb(225,35,8)"/><text x="24.9494%" y="111.50">me..</text></g><g><title>coherent_trait (1,188,533 samples, 2.38%)</title><rect x="24.7149%" y="85" width="2.3777%" height="15" fill="rgb(250,213,24)"/><text x="24.9649%" y="95.50">co..</text></g><g><title>specialization_graph_of (1,185,323 samples, 2.37%)</title><rect x="24.7213%" y="69" width="2.3713%" height="15" fill="rgb(247,123,22)"/><text x="24.9713%" y="79.50">sp..</text></g><g><title>trait_impls_of (68,971 samples, 0.14%)</title><rect x="26.9546%" y="53" width="0.1380%" height="15" fill="rgb(231,138,38)"/><text x="27.2046%" y="63.50"></text></g><g><title>adt_dtorck_constraint (1,216,653 samples, 2.43%)</title><rect x="24.6677%" y="133" width="2.4340%" height="15" fill="rgb(231,145,46)"/><text x="24.9177%" y="143.50">ad..</text></g><g><title>dropck_outlives (1,283,534 samples, 2.57%)</title><rect x="24.5918%" y="149" width="2.5678%" height="15" fill="rgb(251,118,11)"/><text x="24.8418%" y="159.50">dr..</text></g><g><title>item_bodies_checking (2,656,509 samples, 5.31%)</title><rect x="22.3348%" y="197" width="5.3145%" height="15" fill="rgb(217,147,25)"/><text x="22.5848%" y="207.50">item_bo..</text></g><g><title>typeck_item_bodies (2,653,399 samples, 5.31%)</title><rect x="22.3411%" y="181" width="5.3083%" height="15" fill="rgb(247,81,37)"/><text x="22.5911%" y="191.50">typeck..</text></g><g><title>typeck (2,644,929 samples, 5.29%)</title><rect x="22.3580%" y="165" width="5.2914%" height="15" fill="rgb(209,12,38)"/><text x="22.6080%" y="175.50">typeck</text></g><g><title>item_types_checking (1,117,723 samples, 2.24%)</title><rect x="27.6494%" y="197" width="2.2361%" height="15" fill="rgb(227,1,9)"/><text x="27.8994%" y="207.50">i..</text></g><g><title>check_mod_item_types (1,112,672 samples, 2.23%)</title><rect x="27.6595%" y="181" width="2.2260%" height="15" fill="rgb(248,47,43)"/><text x="27.9095%" y="191.50">c..</text></g><g><title>fn_sig (127,322 samples, 0.25%)</title><rect x="30.1496%" y="165" width="0.2547%" height="15" fill="rgb(221,10,30)"/><text x="30.3996%" y="175.50"></text></g><g><title>generics_of (77,410 samples, 0.15%)</title><rect x="30.4043%" y="165" width="0.1549%" height="15" fill="rgb(210,229,1)"/><text x="30.6543%" y="175.50"></text></g><g><title>late_bound_vars_map (76,371 samples, 0.15%)</title><rect x="30.9998%" y="133" width="0.1528%" height="15" fill="rgb(222,148,37)"/><text x="31.2498%" y="143.50"></text></g><g><title>resolve_lifetimes (69,801 samples, 0.14%)</title><rect x="31.0129%" y="117" width="0.1396%" height="15" fill="rgb(234,67,33)"/><text x="31.2629%" y="127.50"></text></g><g><title>explicit_item_bounds (292,374 samples, 0.58%)</title><rect x="30.7255%" y="149" width="0.5849%" height="15" fill="rgb(247,98,35)"/><text x="30.9755%" y="159.50"></text></g><g><title>item_bounds (386,554 samples, 0.77%)</title><rect x="30.5740%" y="165" width="0.7733%" height="15" fill="rgb(247,138,52)"/><text x="30.8240%" y="175.50"></text></g><g><title>late_bound_vars_map (123,722 samples, 0.25%)</title><rect x="31.6900%" y="117" width="0.2475%" height="15" fill="rgb(213,79,30)"/><text x="31.9400%" y="127.50"></text></g><g><title>resolve_lifetimes (118,641 samples, 0.24%)</title><rect x="31.7001%" y="101" width="0.2373%" height="15" fill="rgb(246,177,23)"/><text x="31.9501%" y="111.50"></text></g><g><title>explicit_predicates_of (286,402 samples, 0.57%)</title><rect x="31.4507%" y="133" width="0.5730%" height="15" fill="rgb(230,62,27)"/><text x="31.7007%" y="143.50"></text></g><g><title>predicates_of (349,172 samples, 0.70%)</title><rect x="31.3473%" y="165" width="0.6985%" height="15" fill="rgb(216,154,8)"/><text x="31.5973%" y="175.50"></text></g><g><title>predicates_defined_on (328,962 samples, 0.66%)</title><rect x="31.3878%" y="149" width="0.6581%" height="15" fill="rgb(244,35,45)"/><text x="31.6378%" y="159.50"></text></g><g><title>super_predicates_of (135,102 samples, 0.27%)</title><rect x="32.0459%" y="165" width="0.2703%" height="15" fill="rgb(251,115,12)"/><text x="32.2959%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (126,532 samples, 0.25%)</title><rect x="32.0630%" y="149" width="0.2531%" height="15" fill="rgb(240,54,50)"/><text x="32.3130%" y="159.50"></text></g><g><title>type_collecting (1,312,385 samples, 2.63%)</title><rect x="29.8894%" y="197" width="2.6255%" height="15" fill="rgb(233,84,52)"/><text x="30.1394%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (1,295,205 samples, 2.59%)</title><rect x="29.9238%" y="181" width="2.5912%" height="15" fill="rgb(207,117,47)"/><text x="30.1738%" y="191.50">co..</text></g><g><title>type_of (91,282 samples, 0.18%)</title><rect x="32.3323%" y="165" width="0.1826%" height="15" fill="rgb(249,43,39)"/><text x="32.5823%" y="175.50"></text></g><g><title>evaluate_obligation (79,890 samples, 0.16%)</title><rect x="33.8038%" y="165" width="0.1598%" height="15" fill="rgb(209,38,44)"/><text x="34.0538%" y="175.50"></text></g><g><title>implied_outlives_bounds (61,020 samples, 0.12%)</title><rect x="33.9782%" y="165" width="0.1221%" height="15" fill="rgb(236,212,23)"/><text x="34.2282%" y="175.50"></text></g><g><title>param_env (103,780 samples, 0.21%)</title><rect x="34.1298%" y="165" width="0.2076%" height="15" fill="rgb(242,79,21)"/><text x="34.3798%" y="175.50"></text></g><g><title>check_impl_item_well_formed (889,540 samples, 1.78%)</title><rect x="32.6318%" y="181" width="1.7796%" height="15" fill="rgb(211,96,35)"/><text x="32.8818%" y="191.50">c..</text></g><g><title>param_env (161,141 samples, 0.32%)</title><rect x="35.9591%" y="165" width="0.3224%" height="15" fill="rgb(253,215,40)"/><text x="36.2091%" y="175.50"></text></g><g><title>check_item_well_formed (1,012,931 samples, 2.03%)</title><rect x="34.4114%" y="181" width="2.0264%" height="15" fill="rgb(211,81,21)"/><text x="34.6614%" y="191.50">c..</text></g><g><title>evaluate_obligation (215,232 samples, 0.43%)</title><rect x="38.1383%" y="165" width="0.4306%" height="15" fill="rgb(208,190,38)"/><text x="38.3883%" y="175.50"></text></g><g><title>implied_outlives_bounds (118,021 samples, 0.24%)</title><rect x="38.5689%" y="165" width="0.2361%" height="15" fill="rgb(235,213,38)"/><text x="38.8189%" y="175.50"></text></g><g><title>param_env (111,861 samples, 0.22%)</title><rect x="38.8050%" y="165" width="0.2238%" height="15" fill="rgb(237,122,38)"/><text x="39.0550%" y="175.50"></text></g><g><title>predicates_of (84,181 samples, 0.17%)</title><rect x="39.0288%" y="165" width="0.1684%" height="15" fill="rgb(244,218,35)"/><text x="39.2788%" y="175.50"></text></g><g><title>predicates_defined_on (70,661 samples, 0.14%)</title><rect x="39.0558%" y="149" width="0.1414%" height="15" fill="rgb(240,68,47)"/><text x="39.3058%" y="159.50"></text></g><g><title>analysis (12,823,151 samples, 25.65%)</title><rect x="13.6428%" y="229" width="25.6536%" height="15" fill="rgb(210,16,53)"/><text x="13.8928%" y="239.50">analysis</text></g><g><title>type_check_crate (8,650,916 samples, 17.31%)</title><rect x="21.9897%" y="213" width="17.3068%" height="15" fill="rgb(235,124,12)"/><text x="22.2397%" y="223.50">type_check_crate</text></g><g><title>wf_checking (3,389,138 samples, 6.78%)</title><rect x="32.5163%" y="197" width="6.7802%" height="15" fill="rgb(224,169,11)"/><text x="32.7663%" y="207.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (1,428,906 samples, 2.86%)</title><rect x="36.4379%" y="181" width="2.8586%" height="15" fill="rgb(250,166,2)"/><text x="36.6879%" y="191.50">ch..</text></g><g><title>codegen_module (370,005 samples, 0.74%)</title><rect x="40.4512%" y="213" width="0.7402%" height="15" fill="rgb(242,216,29)"/><text x="40.7012%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (73,901 samples, 0.15%)</title><rect x="41.1928%" y="213" width="0.1478%" height="15" fill="rgb(230,116,27)"/><text x="41.4428%" y="223.50"></text></g><g><title>native_libraries (50,491 samples, 0.10%)</title><rect x="41.4485%" y="213" width="0.1010%" height="15" fill="rgb(228,99,48)"/><text x="41.6985%" y="223.50"></text></g><g><title>codegen_crate (1,145,703 samples, 2.29%)</title><rect x="39.3137%" y="229" width="2.2921%" height="15" fill="rgb(253,11,6)"/><text x="39.5637%" y="239.50">c..</text></g><g><title>codegen_module_optimize (2,849,011 samples, 5.70%)</title><rect x="41.6058%" y="229" width="5.6997%" height="15" fill="rgb(247,143,39)"/><text x="41.8558%" y="239.50">codegen..</text></g><g><title>LLVM_module_optimize (421,214 samples, 0.84%)</title><rect x="46.4628%" y="213" width="0.8427%" height="15" fill="rgb(236,97,10)"/><text x="46.7128%" y="223.50"></text></g><g><title>LLVM_lto_optimize (221,282 samples, 0.44%)</title><rect x="48.0573%" y="213" width="0.4427%" height="15" fill="rgb(233,208,19)"/><text x="48.3073%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,367,736 samples, 4.74%)</title><rect x="48.5000%" y="213" width="4.7368%" height="15" fill="rgb(216,164,2)"/><text x="48.7500%" y="223.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (2,334,576 samples, 4.67%)</title><rect x="48.5663%" y="197" width="4.6705%" height="15" fill="rgb(220,129,5)"/><text x="48.8163%" y="207.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (2,996,862 samples, 6.00%)</title><rect x="47.3054%" y="229" width="5.9954%" height="15" fill="rgb(242,17,10)"/><text x="47.5554%" y="239.50">codegen_..</text></g><g><title>AST_validation (97,141 samples, 0.19%)</title><rect x="53.6607%" y="213" width="0.1943%" height="15" fill="rgb(242,107,0)"/><text x="53.9107%" y="223.50"></text></g><g><title>crate_injection (76,601 samples, 0.15%)</title><rect x="53.9010%" y="213" width="0.1532%" height="15" fill="rgb(251,28,31)"/><text x="54.1510%" y="223.50"></text></g><g><title>metadata_load_macro (50,671 samples, 0.10%)</title><rect x="71.6110%" y="181" width="0.1014%" height="15" fill="rgb(233,223,10)"/><text x="71.8610%" y="191.50"></text></g><g><title>metadata_register_crate (2,310,156 samples, 4.62%)</title><rect x="71.7123%" y="181" width="4.6216%" height="15" fill="rgb(215,21,27)"/><text x="71.9623%" y="191.50">metad..</text></g><g><title>metadata_register_crate (831,829 samples, 1.66%)</title><rect x="74.6698%" y="165" width="1.6641%" height="15" fill="rgb(232,23,21)"/><text x="74.9198%" y="175.50"></text></g><g><title>metadata_register_crate (62,212 samples, 0.12%)</title><rect x="76.2095%" y="149" width="0.1245%" height="15" fill="rgb(244,5,23)"/><text x="76.4595%" y="159.50"></text></g><g><title>macro_expand_crate (11,168,414 samples, 22.34%)</title><rect x="54.0542%" y="213" width="22.3432%" height="15" fill="rgb(226,81,46)"/><text x="54.3042%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (11,148,264 samples, 22.30%)</title><rect x="54.0945%" y="197" width="22.3029%" height="15" fill="rgb(247,70,30)"/><text x="54.3445%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (83,511 samples, 0.17%)</title><rect x="76.4045%" y="213" width="0.1671%" height="15" fill="rgb(212,68,19)"/><text x="76.6545%" y="223.50"></text></g><g><title>finalize_imports (265,243 samples, 0.53%)</title><rect x="76.5869%" y="197" width="0.5306%" height="15" fill="rgb(240,187,13)"/><text x="76.8369%" y="207.50"></text></g><g><title>late_resolve_crate (200,062 samples, 0.40%)</title><rect x="77.1329%" y="197" width="0.4002%" height="15" fill="rgb(223,113,26)"/><text x="77.3829%" y="207.50"></text></g><g><title>configure_and_expand (12,162,495 samples, 24.33%)</title><rect x="53.3009%" y="229" width="24.3320%" height="15" fill="rgb(206,192,2)"/><text x="53.5509%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (530,486 samples, 1.06%)</title><rect x="76.5716%" y="213" width="1.0613%" height="15" fill="rgb(241,108,4)"/><text x="76.8216%" y="223.50"></text></g><g><title>early_lint_checks (118,161 samples, 0.24%)</title><rect x="77.7504%" y="229" width="0.2364%" height="15" fill="rgb(247,173,49)"/><text x="78.0004%" y="239.50"></text></g><g><title>free_global_ctxt (2,501,247 samples, 5.00%)</title><rect x="77.9868%" y="229" width="5.0039%" height="15" fill="rgb(224,114,35)"/><text x="78.2368%" y="239.50">free_g..</text></g><g><title>crate_hash (130,482 samples, 0.26%)</title><rect x="84.1283%" y="213" width="0.2610%" height="15" fill="rgb(245,159,27)"/><text x="84.3783%" y="223.50"></text></g><g><title>exported_symbols (74,361 samples, 0.15%)</title><rect x="84.5106%" y="213" width="0.1488%" height="15" fill="rgb(245,172,44)"/><text x="84.7606%" y="223.50"></text></g><g><title>reachable_non_generics (52,811 samples, 0.11%)</title><rect x="84.5537%" y="197" width="0.1057%" height="15" fill="rgb(236,23,11)"/><text x="84.8037%" y="207.50"></text></g><g><title>adt_sized_constraint (123,391 samples, 0.25%)</title><rect x="85.3496%" y="181" width="0.2469%" height="15" fill="rgb(205,117,38)"/><text x="85.5996%" y="191.50"></text></g><g><title>adt_sized_constraint (87,651 samples, 0.18%)</title><rect x="85.4211%" y="165" width="0.1754%" height="15" fill="rgb(237,72,25)"/><text x="85.6711%" y="175.50"></text></g><g><title>adt_def (85,811 samples, 0.17%)</title><rect x="85.4248%" y="149" width="0.1717%" height="15" fill="rgb(244,70,9)"/><text x="85.6748%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (85,261 samples, 0.17%)</title><rect x="85.4259%" y="133" width="0.1706%" height="15" fill="rgb(217,125,39)"/><text x="85.6759%" y="143.50"></text></g><g><title>item_attrs (80,541 samples, 0.16%)</title><rect x="85.4353%" y="117" width="0.1611%" height="15" fill="rgb(235,36,10)"/><text x="85.6853%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,981 samples, 0.16%)</title><rect x="85.4365%" y="101" width="0.1600%" height="15" fill="rgb(251,123,47)"/><text x="85.6865%" y="111.50"></text></g><g><title>layout_of (240,262 samples, 0.48%)</title><rect x="85.2954%" y="197" width="0.4807%" height="15" fill="rgb(221,13,13)"/><text x="85.5454%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (56,960 samples, 0.11%)</title><rect x="85.6621%" y="181" width="0.1140%" height="15" fill="rgb(238,131,9)"/><text x="85.9121%" y="191.50"></text></g><g><title>optimized_mir (765,359 samples, 1.53%)</title><rect x="84.8131%" y="213" width="1.5312%" height="15" fill="rgb(211,50,8)"/><text x="85.0631%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (284,053 samples, 0.57%)</title><rect x="85.7760%" y="197" width="0.5683%" height="15" fill="rgb(245,182,24)"/><text x="86.0260%" y="207.50"></text></g><g><title>generate_crate_metadata (1,723,290 samples, 3.45%)</title><rect x="82.9907%" y="229" width="3.4476%" height="15" fill="rgb(242,14,37)"/><text x="83.2407%" y="239.50">gen..</text></g><g><title>hir_lowering (698,638 samples, 1.40%)</title><rect x="86.4383%" y="229" width="1.3977%" height="15" fill="rgb(246,228,12)"/><text x="86.6883%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,397,557 samples, 6.80%)</title><rect x="87.8859%" y="213" width="6.7971%" height="15" fill="rgb(213,55,15)"/><text x="88.1359%" y="223.50">finish_on..</text></g><g><title>link_crate (894,540 samples, 1.79%)</title><rect x="94.6830%" y="213" width="1.7896%" height="15" fill="rgb(209,9,3)"/><text x="94.9330%" y="223.50">l..</text></g><g><title>link_binary (873,699 samples, 1.75%)</title><rect x="94.7247%" y="197" width="1.7479%" height="15" fill="rgb(230,59,30)"/><text x="94.9747%" y="207.50"></text></g><g><title>link_rlib (536,596 samples, 1.07%)</title><rect x="95.3991%" y="181" width="1.0735%" height="15" fill="rgb(209,121,21)"/><text x="95.6491%" y="191.50"></text></g><g><title>link (4,328,098 samples, 8.66%)</title><rect x="87.8360%" y="229" width="8.6587%" height="15" fill="rgb(220,109,13)"/><text x="88.0860%" y="239.50">link</text></g><g><title>parse_crate (361,944 samples, 0.72%)</title><rect x="96.4946%" y="229" width="0.7241%" height="15" fill="rgb(232,18,1)"/><text x="96.7446%" y="239.50"></text></g><g><title>prepare_outputs (274,863 samples, 0.55%)</title><rect x="97.2337%" y="229" width="0.5499%" height="15" fill="rgb(215,41,42)"/><text x="97.4837%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (563,427 samples, 1.13%)</title><rect x="97.7836%" y="229" width="1.1272%" height="15" fill="rgb(224,123,36)"/><text x="98.0336%" y="239.50"></text></g><g><title>setup_global_ctxt (126,761 samples, 0.25%)</title><rect x="98.9281%" y="229" width="0.2536%" height="15" fill="rgb(240,125,3)"/><text x="99.1781%" y="239.50"></text></g><g><title>all (49,985,681 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (49,985,681 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (409,054 samples, 0.82%)</title><rect x="99.1817%" y="229" width="0.8183%" height="15" fill="rgb(238,207,15)"/><text x="99.4317%" y="239.50"></text></g></svg></svg>