<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,718,183 samples, 9.75%)</title><rect x="1.0571%" y="245" width="9.7510%" height="15" fill="rgb(227,0,7)"/><text x="1.3071%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (123,991 samples, 0.21%)</title><rect x="10.5967%" y="229" width="0.2114%" height="15" fill="rgb(217,0,24)"/><text x="10.8467%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (113,061 samples, 0.19%)</title><rect x="10.6153%" y="213" width="0.1928%" height="15" fill="rgb(221,193,54)"/><text x="10.8653%" y="223.50"></text></g><g><title>param_env (92,192 samples, 0.16%)</title><rect x="14.9200%" y="165" width="0.1572%" height="15" fill="rgb(248,212,6)"/><text x="15.1700%" y="175.50"></text></g><g><title>item_attrs (94,912 samples, 0.16%)</title><rect x="15.2605%" y="133" width="0.1618%" height="15" fill="rgb(208,68,35)"/><text x="15.5105%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (91,682 samples, 0.16%)</title><rect x="15.2660%" y="117" width="0.1563%" height="15" fill="rgb(232,128,0)"/><text x="15.5160%" y="127.50"></text></g><g><title>codegen_fn_attrs (126,263 samples, 0.22%)</title><rect x="15.2151%" y="149" width="0.2153%" height="15" fill="rgb(207,160,47)"/><text x="15.4651%" y="159.50"></text></g><g><title>is_copy_raw (127,660 samples, 0.22%)</title><rect x="16.1510%" y="101" width="0.2177%" height="15" fill="rgb(228,23,34)"/><text x="16.4010%" y="111.50"></text></g><g><title>evaluate_obligation (113,010 samples, 0.19%)</title><rect x="16.1760%" y="85" width="0.1927%" height="15" fill="rgb(218,30,26)"/><text x="16.4260%" y="95.50"></text></g><g><title>adt_drop_tys (211,882 samples, 0.36%)</title><rect x="16.0920%" y="117" width="0.3613%" height="15" fill="rgb(220,122,19)"/><text x="16.3420%" y="127.50"></text></g><g><title>needs_drop_raw (319,183 samples, 0.54%)</title><rect x="16.0539%" y="133" width="0.5443%" height="15" fill="rgb(250,228,42)"/><text x="16.3039%" y="143.50"></text></g><g><title>is_copy_raw (84,971 samples, 0.14%)</title><rect x="16.4533%" y="117" width="0.1449%" height="15" fill="rgb(240,193,28)"/><text x="16.7033%" y="127.50"></text></g><g><title>evaluate_obligation (69,481 samples, 0.12%)</title><rect x="16.4797%" y="101" width="0.1185%" height="15" fill="rgb(216,20,37)"/><text x="16.7297%" y="111.50"></text></g><g><title>impl_parent (202,302 samples, 0.34%)</title><rect x="17.2299%" y="101" width="0.3450%" height="15" fill="rgb(206,188,39)"/><text x="17.4799%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,891 samples, 0.21%)</title><rect x="17.3688%" y="85" width="0.2061%" height="15" fill="rgb(217,207,13)"/><text x="17.6188%" y="95.50"></text></g><g><title>specialization_graph_of (1,133,583 samples, 1.93%)</title><rect x="16.7150%" y="117" width="1.9330%" height="15" fill="rgb(231,73,38)"/><text x="16.9650%" y="127.50">s..</text></g><g><title>impl_trait_ref (629,306 samples, 1.07%)</title><rect x="17.5749%" y="101" width="1.0731%" height="15" fill="rgb(225,20,46)"/><text x="17.8249%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (550,226 samples, 0.94%)</title><rect x="17.7098%" y="85" width="0.9383%" height="15" fill="rgb(210,31,41)"/><text x="17.9598%" y="95.50"></text></g><g><title>resolve_instance (1,207,663 samples, 2.06%)</title><rect x="16.5982%" y="133" width="2.0594%" height="15" fill="rgb(221,200,47)"/><text x="16.8482%" y="143.50">r..</text></g><g><title>thir_body (88,471 samples, 0.15%)</title><rect x="18.6617%" y="133" width="0.1509%" height="15" fill="rgb(226,26,5)"/><text x="18.9117%" y="143.50"></text></g><g><title>mir_const (2,433,397 samples, 4.15%)</title><rect x="14.6664%" y="181" width="4.1496%" height="15" fill="rgb(249,33,26)"/><text x="14.9164%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (2,192,475 samples, 3.74%)</title><rect x="15.0772%" y="165" width="3.7387%" height="15" fill="rgb(235,183,28)"/><text x="15.3272%" y="175.50">unsa..</text></g><g><title>mir_built (1,985,362 samples, 3.39%)</title><rect x="15.4304%" y="149" width="3.3855%" height="15" fill="rgb(221,5,38)"/><text x="15.6804%" y="159.50">mir..</text></g><g><title>mir_promoted (2,584,369 samples, 4.41%)</title><rect x="14.4174%" y="197" width="4.4070%" height="15" fill="rgb(247,18,42)"/><text x="14.6674%" y="207.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (63,362 samples, 0.11%)</title><rect x="18.8244%" y="197" width="0.1080%" height="15" fill="rgb(241,131,45)"/><text x="19.0744%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (93,901 samples, 0.16%)</title><rect x="18.9325%" y="197" width="0.1601%" height="15" fill="rgb(249,31,29)"/><text x="19.1825%" y="207.50"></text></g><g><title>type_op_normalize_predicate (154,001 samples, 0.26%)</title><rect x="19.0926%" y="197" width="0.2626%" height="15" fill="rgb(225,111,53)"/><text x="19.3426%" y="207.50"></text></g><g><title>normalize_projection_ty (89,660 samples, 0.15%)</title><rect x="19.2023%" y="181" width="0.1529%" height="15" fill="rgb(238,160,17)"/><text x="19.4523%" y="191.50"></text></g><g><title>type_op_prove_predicate (497,873 samples, 0.85%)</title><rect x="19.3552%" y="197" width="0.8490%" height="15" fill="rgb(214,148,48)"/><text x="19.6052%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,357,250 samples, 9.14%)</title><rect x="11.0815%" y="229" width="9.1355%" height="15" fill="rgb(232,36,49)"/><text x="11.3315%" y="239.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (5,352,600 samples, 9.13%)</title><rect x="11.0894%" y="213" width="9.1275%" height="15" fill="rgb(209,103,24)"/><text x="11.3394%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (116,531 samples, 0.20%)</title><rect x="20.2228%" y="229" width="0.1987%" height="15" fill="rgb(229,88,8)"/><text x="20.4728%" y="239.50"></text></g><g><title>get_lang_items (82,211 samples, 0.14%)</title><rect x="20.7047%" y="181" width="0.1402%" height="15" fill="rgb(213,181,19)"/><text x="20.9547%" y="191.50"></text></g><g><title>codegen_fn_attrs (207,352 samples, 0.35%)</title><rect x="20.5871%" y="197" width="0.3536%" height="15" fill="rgb(254,191,54)"/><text x="20.8371%" y="207.50"></text></g><g><title>check_mod_attrs (276,233 samples, 0.47%)</title><rect x="20.4699%" y="213" width="0.4710%" height="15" fill="rgb(241,83,37)"/><text x="20.7199%" y="223.50"></text></g><g><title>lookup_deprecation_entry (67,911 samples, 0.12%)</title><rect x="21.1988%" y="197" width="0.1158%" height="15" fill="rgb(233,36,39)"/><text x="21.4488%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (228,222 samples, 0.39%)</title><rect x="21.0412%" y="213" width="0.3892%" height="15" fill="rgb(226,3,54)"/><text x="21.2912%" y="223.50"></text></g><g><title>misc_checking_1 (627,897 samples, 1.07%)</title><rect x="20.4222%" y="229" width="1.0707%" height="15" fill="rgb(245,192,40)"/><text x="20.6722%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (110,321 samples, 0.19%)</title><rect x="21.4951%" y="213" width="0.1881%" height="15" fill="rgb(238,167,29)"/><text x="21.7451%" y="223.50"></text></g><g><title>check_mod_liveness (93,031 samples, 0.16%)</title><rect x="21.5246%" y="197" width="0.1586%" height="15" fill="rgb(232,182,51)"/><text x="21.7746%" y="207.50"></text></g><g><title>misc_checking_2 (260,493 samples, 0.44%)</title><rect x="21.4929%" y="229" width="0.4442%" height="15" fill="rgb(231,60,39)"/><text x="21.7429%" y="239.50"></text></g><g><title>match_checking (148,882 samples, 0.25%)</title><rect x="21.6832%" y="213" width="0.2539%" height="15" fill="rgb(208,69,12)"/><text x="21.9332%" y="223.50"></text></g><g><title>check_match (146,632 samples, 0.25%)</title><rect x="21.6870%" y="197" width="0.2500%" height="15" fill="rgb(235,93,37)"/><text x="21.9370%" y="207.50"></text></g><g><title>crate_lints (89,721 samples, 0.15%)</title><rect x="22.0616%" y="197" width="0.1530%" height="15" fill="rgb(213,116,39)"/><text x="22.3116%" y="207.50"></text></g><g><title>lint_checking (148,702 samples, 0.25%)</title><rect x="22.0596%" y="213" width="0.2536%" height="15" fill="rgb(222,207,29)"/><text x="22.3096%" y="223.50"></text></g><g><title>privacy_checking_modules (102,861 samples, 0.18%)</title><rect x="22.3876%" y="213" width="0.1754%" height="15" fill="rgb(206,96,30)"/><text x="22.6376%" y="223.50"></text></g><g><title>check_mod_privacy (101,751 samples, 0.17%)</title><rect x="22.3895%" y="197" width="0.1735%" height="15" fill="rgb(218,138,4)"/><text x="22.6395%" y="207.50"></text></g><g><title>misc_checking_3 (374,504 samples, 0.64%)</title><rect x="21.9371%" y="229" width="0.6386%" height="15" fill="rgb(250,191,14)"/><text x="22.1871%" y="239.50"></text></g><g><title>adt_def (94,800 samples, 0.16%)</title><rect x="31.1816%" y="133" width="0.1617%" height="15" fill="rgb(239,60,40)"/><text x="31.4316%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (88,550 samples, 0.15%)</title><rect x="31.1922%" y="117" width="0.1510%" height="15" fill="rgb(206,27,48)"/><text x="31.4422%" y="127.50"></text></g><g><title>item_attrs (62,500 samples, 0.11%)</title><rect x="31.2367%" y="101" width="0.1066%" height="15" fill="rgb(225,35,8)"/><text x="31.4867%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (60,140 samples, 0.10%)</title><rect x="31.2407%" y="85" width="0.1026%" height="15" fill="rgb(250,213,24)"/><text x="31.4907%" y="95.50"></text></g><g><title>adt_def (65,090 samples, 0.11%)</title><rect x="31.3504%" y="117" width="0.1110%" height="15" fill="rgb(247,123,22)"/><text x="31.6004%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (63,850 samples, 0.11%)</title><rect x="31.3525%" y="101" width="0.1089%" height="15" fill="rgb(231,138,38)"/><text x="31.6025%" y="111.50"></text></g><g><title>adt_sized_constraint (62,650 samples, 0.11%)</title><rect x="31.4614%" y="117" width="0.1068%" height="15" fill="rgb(231,145,46)"/><text x="31.7114%" y="127.50"></text></g><g><title>adt_sized_constraint (138,571 samples, 0.24%)</title><rect x="31.3432%" y="133" width="0.2363%" height="15" fill="rgb(251,118,11)"/><text x="31.5932%" y="143.50"></text></g><g><title>adt_sized_constraint (261,961 samples, 0.45%)</title><rect x="31.1578%" y="149" width="0.4467%" height="15" fill="rgb(217,147,25)"/><text x="31.4078%" y="159.50"></text></g><g><title>associated_item (580,975 samples, 0.99%)</title><rect x="31.9963%" y="133" width="0.9907%" height="15" fill="rgb(247,81,37)"/><text x="32.2463%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (440,233 samples, 0.75%)</title><rect x="32.2363%" y="117" width="0.7507%" height="15" fill="rgb(209,12,38)"/><text x="32.4863%" y="127.50"></text></g><g><title>associated_items (847,830 samples, 1.45%)</title><rect x="31.6136%" y="149" width="1.4458%" height="15" fill="rgb(227,1,9)"/><text x="31.8636%" y="159.50"></text></g><g><title>impl_parent (72,551 samples, 0.12%)</title><rect x="33.4631%" y="53" width="0.1237%" height="15" fill="rgb(248,47,43)"/><text x="33.7131%" y="63.50"></text></g><g><title>impl_trait_ref (287,002 samples, 0.49%)</title><rect x="33.5868%" y="53" width="0.4894%" height="15" fill="rgb(221,10,30)"/><text x="33.8368%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (268,032 samples, 0.46%)</title><rect x="33.6192%" y="37" width="0.4571%" height="15" fill="rgb(210,229,1)"/><text x="33.8692%" y="47.50"></text></g><g><title>coherent_trait (485,115 samples, 0.83%)</title><rect x="33.2990%" y="85" width="0.8272%" height="15" fill="rgb(222,148,37)"/><text x="33.5490%" y="95.50"></text></g><g><title>specialization_graph_of (481,465 samples, 0.82%)</title><rect x="33.3052%" y="69" width="0.8210%" height="15" fill="rgb(234,67,33)"/><text x="33.5552%" y="79.50"></text></g><g><title>adt_destructor (510,445 samples, 0.87%)</title><rect x="33.2680%" y="117" width="0.8704%" height="15" fill="rgb(247,98,35)"/><text x="33.5180%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (508,305 samples, 0.87%)</title><rect x="33.2717%" y="101" width="0.8668%" height="15" fill="rgb(247,138,52)"/><text x="33.5217%" y="111.50"></text></g><g><title>adt_dtorck_constraint (61,711 samples, 0.11%)</title><rect x="34.2087%" y="69" width="0.1052%" height="15" fill="rgb(213,79,30)"/><text x="34.4587%" y="79.50"></text></g><g><title>adt_dtorck_constraint (70,131 samples, 0.12%)</title><rect x="34.1996%" y="85" width="0.1196%" height="15" fill="rgb(246,177,23)"/><text x="34.4496%" y="95.50"></text></g><g><title>adt_dtorck_constraint (73,511 samples, 0.13%)</title><rect x="34.1948%" y="101" width="0.1254%" height="15" fill="rgb(230,62,27)"/><text x="34.4448%" y="111.50"></text></g><g><title>adt_dtorck_constraint (109,882 samples, 0.19%)</title><rect x="34.1385%" y="117" width="0.1874%" height="15" fill="rgb(216,154,8)"/><text x="34.3885%" y="127.50"></text></g><g><title>dropck_outlives (717,667 samples, 1.22%)</title><rect x="33.1275%" y="149" width="1.2238%" height="15" fill="rgb(244,35,45)"/><text x="33.3775%" y="159.50"></text></g><g><title>adt_dtorck_constraint (655,127 samples, 1.12%)</title><rect x="33.2341%" y="133" width="1.1172%" height="15" fill="rgb(251,115,12)"/><text x="33.4841%" y="143.50"></text></g><g><title>adt_def (59,691 samples, 0.10%)</title><rect x="35.6374%" y="117" width="0.1018%" height="15" fill="rgb(240,54,50)"/><text x="35.8874%" y="127.50"></text></g><g><title>adt_sized_constraint (68,611 samples, 0.12%)</title><rect x="35.6250%" y="133" width="0.1170%" height="15" fill="rgb(233,84,52)"/><text x="35.8750%" y="143.50"></text></g><g><title>impl_trait_ref (123,860 samples, 0.21%)</title><rect x="35.8605%" y="133" width="0.2112%" height="15" fill="rgb(207,117,47)"/><text x="36.1105%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (108,380 samples, 0.18%)</title><rect x="35.8869%" y="117" width="0.1848%" height="15" fill="rgb(249,43,39)"/><text x="36.1369%" y="127.50"></text></g><g><title>predicates_of (155,560 samples, 0.27%)</title><rect x="36.0873%" y="133" width="0.2653%" height="15" fill="rgb(209,38,44)"/><text x="36.3373%" y="143.50"></text></g><g><title>predicates_defined_on (105,350 samples, 0.18%)</title><rect x="36.1729%" y="117" width="0.1796%" height="15" fill="rgb(236,212,23)"/><text x="36.4229%" y="127.50"></text></g><g><title>specializes (181,452 samples, 0.31%)</title><rect x="36.3525%" y="133" width="0.3094%" height="15" fill="rgb(242,79,21)"/><text x="36.6025%" y="143.50"></text></g><g><title>param_env (106,492 samples, 0.18%)</title><rect x="36.4804%" y="117" width="0.1816%" height="15" fill="rgb(211,96,35)"/><text x="36.7304%" y="127.50"></text></g><g><title>evaluate_obligation (2,193,926 samples, 3.74%)</title><rect x="34.3513%" y="149" width="3.7412%" height="15" fill="rgb(253,215,40)"/><text x="34.6013%" y="159.50">eval..</text></g><g><title>trait_impls_of (835,200 samples, 1.42%)</title><rect x="36.6683%" y="133" width="1.4242%" height="15" fill="rgb(211,81,21)"/><text x="36.9183%" y="143.50"></text></g><g><title>implementations_of_trait (253,074 samples, 0.43%)</title><rect x="37.6609%" y="117" width="0.4316%" height="15" fill="rgb(208,190,38)"/><text x="37.9109%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (186,484 samples, 0.32%)</title><rect x="37.7745%" y="101" width="0.3180%" height="15" fill="rgb(235,213,38)"/><text x="38.0245%" y="111.50"></text></g><g><title>fn_sig (163,462 samples, 0.28%)</title><rect x="38.1206%" y="149" width="0.2787%" height="15" fill="rgb(237,122,38)"/><text x="38.3706%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (142,892 samples, 0.24%)</title><rect x="38.1557%" y="133" width="0.2437%" height="15" fill="rgb(244,218,35)"/><text x="38.4057%" y="143.50"></text></g><g><title>generics_of (120,960 samples, 0.21%)</title><rect x="38.3994%" y="149" width="0.2063%" height="15" fill="rgb(240,68,47)"/><text x="38.6494%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (93,020 samples, 0.16%)</title><rect x="38.4470%" y="133" width="0.1586%" height="15" fill="rgb(210,16,53)"/><text x="38.6970%" y="143.50"></text></g><g><title>impl_item_implementor_ids (66,921 samples, 0.11%)</title><rect x="38.6056%" y="149" width="0.1141%" height="15" fill="rgb(235,124,12)"/><text x="38.8556%" y="159.50"></text></g><g><title>impl_trait_ref (153,032 samples, 0.26%)</title><rect x="38.7252%" y="149" width="0.2610%" height="15" fill="rgb(224,169,11)"/><text x="38.9752%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (143,952 samples, 0.25%)</title><rect x="38.7407%" y="133" width="0.2455%" height="15" fill="rgb(250,166,2)"/><text x="38.9907%" y="143.50"></text></g><g><title>item_attrs (61,331 samples, 0.10%)</title><rect x="39.0754%" y="149" width="0.1046%" height="15" fill="rgb(242,216,29)"/><text x="39.3254%" y="159.50"></text></g><g><title>evaluate_obligation (241,963 samples, 0.41%)</title><rect x="39.5605%" y="133" width="0.4126%" height="15" fill="rgb(230,116,27)"/><text x="39.8105%" y="143.50"></text></g><g><title>trait_impls_of (62,820 samples, 0.11%)</title><rect x="39.8659%" y="117" width="0.1071%" height="15" fill="rgb(228,99,48)"/><text x="40.1159%" y="127.50"></text></g><g><title>method_autoderef_steps (429,055 samples, 0.73%)</title><rect x="39.2799%" y="149" width="0.7316%" height="15" fill="rgb(253,11,6)"/><text x="39.5299%" y="159.50"></text></g><g><title>explicit_predicates_of (90,441 samples, 0.15%)</title><rect x="40.3269%" y="117" width="0.1542%" height="15" fill="rgb(247,143,39)"/><text x="40.5769%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (69,681 samples, 0.12%)</title><rect x="40.3623%" y="101" width="0.1188%" height="15" fill="rgb(236,97,10)"/><text x="40.6123%" y="111.50"></text></g><g><title>predicates_of (299,973 samples, 0.51%)</title><rect x="40.0549%" y="149" width="0.5115%" height="15" fill="rgb(233,208,19)"/><text x="40.3049%" y="159.50"></text></g><g><title>predicates_defined_on (215,092 samples, 0.37%)</title><rect x="40.1997%" y="133" width="0.3668%" height="15" fill="rgb(216,164,2)"/><text x="40.4497%" y="143.50"></text></g><g><title>trait_impls_of (71,011 samples, 0.12%)</title><rect x="40.6125%" y="149" width="0.1211%" height="15" fill="rgb(220,129,5)"/><text x="40.8625%" y="159.50"></text></g><g><title>type_of (92,640 samples, 0.16%)</title><rect x="40.7336%" y="149" width="0.1580%" height="15" fill="rgb(242,17,10)"/><text x="40.9836%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (80,140 samples, 0.14%)</title><rect x="40.7549%" y="133" width="0.1367%" height="15" fill="rgb(242,107,0)"/><text x="41.0049%" y="143.50"></text></g><g><title>item_bodies_checking (10,749,630 samples, 18.33%)</title><rect x="22.6635%" y="213" width="18.3309%" height="15" fill="rgb(251,28,31)"/><text x="22.9135%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,746,310 samples, 18.33%)</title><rect x="22.6691%" y="197" width="18.3252%" height="15" fill="rgb(233,223,10)"/><text x="22.9191%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (10,742,710 samples, 18.32%)</title><rect x="22.6753%" y="181" width="18.3191%" height="15" fill="rgb(215,21,27)"/><text x="22.9253%" y="191.50">typeck</text></g><g><title>typeck (10,735,300 samples, 18.31%)</title><rect x="22.6879%" y="165" width="18.3064%" height="15" fill="rgb(232,23,21)"/><text x="22.9379%" y="175.50">typeck</text></g><g><title>fn_sig (71,580 samples, 0.12%)</title><rect x="41.1079%" y="181" width="0.1221%" height="15" fill="rgb(244,5,23)"/><text x="41.3579%" y="191.50"></text></g><g><title>late_bound_vars_map (171,532 samples, 0.29%)</title><rect x="41.5644%" y="133" width="0.2925%" height="15" fill="rgb(226,81,46)"/><text x="41.8144%" y="143.50"></text></g><g><title>resolve_lifetimes (149,322 samples, 0.25%)</title><rect x="41.6022%" y="117" width="0.2546%" height="15" fill="rgb(247,70,30)"/><text x="41.8522%" y="127.50"></text></g><g><title>explicit_predicates_of (334,733 samples, 0.57%)</title><rect x="41.3383%" y="149" width="0.5708%" height="15" fill="rgb(212,68,19)"/><text x="41.5883%" y="159.50"></text></g><g><title>predicates_of (353,884 samples, 0.60%)</title><rect x="41.3182%" y="181" width="0.6035%" height="15" fill="rgb(240,187,13)"/><text x="41.5682%" y="191.50"></text></g><g><title>predicates_defined_on (350,304 samples, 0.60%)</title><rect x="41.3243%" y="165" width="0.5974%" height="15" fill="rgb(223,113,26)"/><text x="41.5743%" y="175.50"></text></g><g><title>type_collecting (558,266 samples, 0.95%)</title><rect x="41.0045%" y="213" width="0.9520%" height="15" fill="rgb(206,192,2)"/><text x="41.2545%" y="223.50"></text></g><g><title>collect_mod_item_types (546,786 samples, 0.93%)</title><rect x="41.0240%" y="197" width="0.9324%" height="15" fill="rgb(241,108,4)"/><text x="41.2740%" y="207.50"></text></g><g><title>adt_def (105,332 samples, 0.18%)</title><rect x="43.0495%" y="101" width="0.1796%" height="15" fill="rgb(247,173,49)"/><text x="43.2995%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (104,812 samples, 0.18%)</title><rect x="43.0504%" y="85" width="0.1787%" height="15" fill="rgb(224,114,35)"/><text x="43.3004%" y="95.50"></text></g><g><title>item_attrs (99,672 samples, 0.17%)</title><rect x="43.0591%" y="69" width="0.1700%" height="15" fill="rgb(245,159,27)"/><text x="43.3091%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (99,002 samples, 0.17%)</title><rect x="43.0603%" y="53" width="0.1688%" height="15" fill="rgb(245,172,44)"/><text x="43.3103%" y="63.50"></text></g><g><title>adt_sized_constraint (116,952 samples, 0.20%)</title><rect x="43.0443%" y="117" width="0.1994%" height="15" fill="rgb(236,23,11)"/><text x="43.2943%" y="127.50"></text></g><g><title>adt_sized_constraint (158,722 samples, 0.27%)</title><rect x="42.9964%" y="133" width="0.2707%" height="15" fill="rgb(205,117,38)"/><text x="43.2464%" y="143.50"></text></g><g><title>adt_sized_constraint (205,592 samples, 0.35%)</title><rect x="42.9353%" y="149" width="0.3506%" height="15" fill="rgb(237,72,25)"/><text x="43.1853%" y="159.50"></text></g><g><title>evaluate_obligation (332,664 samples, 0.57%)</title><rect x="42.7278%" y="181" width="0.5673%" height="15" fill="rgb(244,70,9)"/><text x="42.9778%" y="191.50"></text></g><g><title>adt_sized_constraint (272,753 samples, 0.47%)</title><rect x="42.8299%" y="165" width="0.4651%" height="15" fill="rgb(217,125,39)"/><text x="43.0799%" y="175.50"></text></g><g><title>implied_outlives_bounds (70,991 samples, 0.12%)</title><rect x="43.2951%" y="181" width="0.1211%" height="15" fill="rgb(235,36,10)"/><text x="43.5451%" y="191.50"></text></g><g><title>param_env (251,822 samples, 0.43%)</title><rect x="43.4161%" y="181" width="0.4294%" height="15" fill="rgb(251,123,47)"/><text x="43.6661%" y="191.50"></text></g><g><title>predicates_of (91,831 samples, 0.16%)</title><rect x="43.8455%" y="181" width="0.1566%" height="15" fill="rgb(221,13,13)"/><text x="44.0955%" y="191.50"></text></g><g><title>predicates_defined_on (72,691 samples, 0.12%)</title><rect x="43.8782%" y="165" width="0.1240%" height="15" fill="rgb(238,131,9)"/><text x="44.1282%" y="175.50"></text></g><g><title>region_scope_tree (77,571 samples, 0.13%)</title><rect x="44.0021%" y="181" width="0.1323%" height="15" fill="rgb(211,50,8)"/><text x="44.2521%" y="191.50"></text></g><g><title>analysis (19,609,699 samples, 33.44%)</title><rect x="10.8081%" y="245" width="33.4395%" height="15" fill="rgb(245,182,24)"/><text x="11.0581%" y="255.50">analysis</text></g><g><title>type_check_crate (12,708,911 samples, 21.67%)</title><rect x="22.5757%" y="229" width="21.6719%" height="15" fill="rgb(242,14,37)"/><text x="22.8257%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,343,095 samples, 2.29%)</title><rect x="41.9573%" y="213" width="2.2903%" height="15" fill="rgb(246,228,12)"/><text x="42.2073%" y="223.50">w..</text></g><g><title>check_item_well_formed (1,316,285 samples, 2.24%)</title><rect x="42.0030%" y="197" width="2.2446%" height="15" fill="rgb(213,55,15)"/><text x="42.2530%" y="207.50">c..</text></g><g><title>trait_impls_of (66,401 samples, 0.11%)</title><rect x="44.1344%" y="181" width="0.1132%" height="15" fill="rgb(209,9,3)"/><text x="44.3844%" y="191.50"></text></g><g><title>codegen_module (215,193 samples, 0.37%)</title><rect x="45.3334%" y="229" width="0.3670%" height="15" fill="rgb(230,59,30)"/><text x="45.5834%" y="239.50"></text></g><g><title>codegen_crate (959,031 samples, 1.64%)</title><rect x="44.2664%" y="245" width="1.6354%" height="15" fill="rgb(209,121,21)"/><text x="44.5164%" y="255.50"></text></g><g><title>codegen_module_optimize (2,046,533 samples, 3.49%)</title><rect x="45.9018%" y="245" width="3.4899%" height="15" fill="rgb(220,109,13)"/><text x="46.1518%" y="255.50">cod..</text></g><g><title>LLVM_module_optimize (432,285 samples, 0.74%)</title><rect x="48.6545%" y="229" width="0.7372%" height="15" fill="rgb(232,18,1)"/><text x="48.9045%" y="239.50"></text></g><g><title>LLVM_lto_optimize (229,702 samples, 0.39%)</title><rect x="50.0573%" y="229" width="0.3917%" height="15" fill="rgb(215,41,42)"/><text x="50.3073%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,408,907 samples, 4.11%)</title><rect x="50.4490%" y="229" width="4.1078%" height="15" fill="rgb(224,123,36)"/><text x="50.6990%" y="239.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,368,306 samples, 4.04%)</title><rect x="50.5182%" y="213" width="4.0386%" height="15" fill="rgb(240,125,3)"/><text x="50.7682%" y="223.50">LLVM..</text></g><g><title>codegen_module_perform_lto (3,060,854 samples, 5.22%)</title><rect x="49.3916%" y="245" width="5.2195%" height="15" fill="rgb(205,98,50)"/><text x="49.6416%" y="255.50">codege..</text></g><g><title>AST_validation (62,551 samples, 0.11%)</title><rect x="54.9679%" y="229" width="0.1067%" height="15" fill="rgb(205,185,37)"/><text x="55.2179%" y="239.50"></text></g><g><title>crate_injection (97,851 samples, 0.17%)</title><rect x="55.1097%" y="229" width="0.1669%" height="15" fill="rgb(238,207,15)"/><text x="55.3597%" y="239.50"></text></g><g><title>metadata_load_macro (133,611 samples, 0.23%)</title><rect x="71.2642%" y="197" width="0.2278%" height="15" fill="rgb(213,199,42)"/><text x="71.5142%" y="207.50"></text></g><g><title>macro_expand_crate (12,109,475 samples, 20.65%)</title><rect x="55.2766%" y="229" width="20.6497%" height="15" fill="rgb(235,201,11)"/><text x="55.5266%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,085,595 samples, 20.61%)</title><rect x="55.3173%" y="213" width="20.6090%" height="15" fill="rgb(207,46,11)"/><text x="55.5673%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,600,369 samples, 4.43%)</title><rect x="71.4920%" y="197" width="4.4343%" height="15" fill="rgb(241,35,35)"/><text x="71.7420%" y="207.50">metad..</text></g><g><title>metadata_register_crate (948,679 samples, 1.62%)</title><rect x="74.3086%" y="181" width="1.6177%" height="15" fill="rgb(243,32,47)"/><text x="74.5586%" y="191.50"></text></g><g><title>metadata_register_crate (76,180 samples, 0.13%)</title><rect x="75.7964%" y="165" width="0.1299%" height="15" fill="rgb(247,202,23)"/><text x="76.0464%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (162,442 samples, 0.28%)</title><rect x="75.9350%" y="229" width="0.2770%" height="15" fill="rgb(219,102,11)"/><text x="76.1850%" y="239.50"></text></g><g><title>finalize_imports (328,304 samples, 0.56%)</title><rect x="76.2286%" y="213" width="0.5598%" height="15" fill="rgb(243,110,44)"/><text x="76.4786%" y="223.50"></text></g><g><title>late_resolve_crate (1,097,342 samples, 1.87%)</title><rect x="76.8074%" y="213" width="1.8712%" height="15" fill="rgb(222,74,54)"/><text x="77.0574%" y="223.50">l..</text></g><g><title>configure_and_expand (14,153,638 samples, 24.14%)</title><rect x="54.6112%" y="245" width="24.1356%" height="15" fill="rgb(216,99,12)"/><text x="54.8612%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,486,447 samples, 2.53%)</title><rect x="76.2120%" y="229" width="2.5348%" height="15" fill="rgb(226,22,26)"/><text x="76.4620%" y="239.50">re..</text></g><g><title>early_lint_checks (128,031 samples, 0.22%)</title><rect x="78.8374%" y="245" width="0.2183%" height="15" fill="rgb(217,163,10)"/><text x="79.0874%" y="255.50"></text></g><g><title>free_global_ctxt (2,172,685 samples, 3.70%)</title><rect x="79.0558%" y="245" width="3.7050%" height="15" fill="rgb(213,25,53)"/><text x="79.3058%" y="255.50">free..</text></g><g><title>crate_hash (66,941 samples, 0.11%)</title><rect x="83.1932%" y="229" width="0.1142%" height="15" fill="rgb(252,105,26)"/><text x="83.4432%" y="239.50"></text></g><g><title>eval_to_const_value_raw (111,541 samples, 0.19%)</title><rect x="84.4657%" y="181" width="0.1902%" height="15" fill="rgb(220,39,43)"/><text x="84.7157%" y="191.50"></text></g><g><title>eval_to_const_value_raw (102,101 samples, 0.17%)</title><rect x="84.4818%" y="165" width="0.1741%" height="15" fill="rgb(229,68,48)"/><text x="84.7318%" y="175.50"></text></g><g><title>eval_to_allocation_raw (93,711 samples, 0.16%)</title><rect x="84.4961%" y="149" width="0.1598%" height="15" fill="rgb(252,8,32)"/><text x="84.7461%" y="159.50"></text></g><g><title>layout_of (147,201 samples, 0.25%)</title><rect x="84.6655%" y="181" width="0.2510%" height="15" fill="rgb(223,20,43)"/><text x="84.9155%" y="191.50"></text></g><g><title>layout_of (62,850 samples, 0.11%)</title><rect x="84.8093%" y="165" width="0.1072%" height="15" fill="rgb(229,81,49)"/><text x="85.0593%" y="175.50"></text></g><g><title>layout_of (354,724 samples, 0.60%)</title><rect x="84.3826%" y="197" width="0.6049%" height="15" fill="rgb(236,28,36)"/><text x="84.6326%" y="207.50"></text></g><g><title>layout_of (509,136 samples, 0.87%)</title><rect x="84.1446%" y="213" width="0.8682%" height="15" fill="rgb(249,185,26)"/><text x="84.3946%" y="223.50"></text></g><g><title>optimized_mir (1,379,515 samples, 2.35%)</title><rect x="83.4548%" y="229" width="2.3524%" height="15" fill="rgb(249,174,33)"/><text x="83.7048%" y="239.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (465,845 samples, 0.79%)</title><rect x="85.0128%" y="213" width="0.7944%" height="15" fill="rgb(233,201,37)"/><text x="85.2628%" y="223.50"></text></g><g><title>generate_crate_metadata (1,843,721 samples, 3.14%)</title><rect x="82.7607%" y="245" width="3.1440%" height="15" fill="rgb(221,78,26)"/><text x="83.0107%" y="255.50">gen..</text></g><g><title>hir_lowering (659,058 samples, 1.12%)</title><rect x="85.9048%" y="245" width="1.1239%" height="15" fill="rgb(250,127,30)"/><text x="86.1548%" y="255.50"></text></g><g><title>finish_ongoing_codegen (3,350,096 samples, 5.71%)</title><rect x="87.0591%" y="229" width="5.7128%" height="15" fill="rgb(230,49,44)"/><text x="87.3091%" y="239.50">finish_..</text></g><g><title>link_crate (544,486 samples, 0.93%)</title><rect x="92.7719%" y="229" width="0.9285%" height="15" fill="rgb(229,67,23)"/><text x="93.0219%" y="239.50"></text></g><g><title>link_binary (532,166 samples, 0.91%)</title><rect x="92.7929%" y="213" width="0.9075%" height="15" fill="rgb(249,83,47)"/><text x="93.0429%" y="223.50"></text></g><g><title>link_rlib (304,703 samples, 0.52%)</title><rect x="93.1808%" y="197" width="0.5196%" height="15" fill="rgb(215,43,3)"/><text x="93.4308%" y="207.50"></text></g><g><title>link (3,919,393 samples, 6.68%)</title><rect x="87.0286%" y="245" width="6.6836%" height="15" fill="rgb(238,154,13)"/><text x="87.2786%" y="255.50">link</text></g><g><title>parse_crate (2,528,068 samples, 4.31%)</title><rect x="93.7122%" y="245" width="4.3110%" height="15" fill="rgb(219,56,2)"/><text x="93.9622%" y="255.50">parse..</text></g><g><title>prepare_outputs (346,864 samples, 0.59%)</title><rect x="98.0373%" y="245" width="0.5915%" height="15" fill="rgb(233,0,4)"/><text x="98.2873%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (365,024 samples, 0.62%)</title><rect x="98.6288%" y="245" width="0.6225%" height="15" fill="rgb(235,30,7)"/><text x="98.8788%" y="255.50"></text></g><g><title>setup_global_ctxt (144,822 samples, 0.25%)</title><rect x="99.2609%" y="245" width="0.2470%" height="15" fill="rgb(250,79,13)"/><text x="99.5109%" y="255.50"></text></g><g><title>all (58,642,264 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,146,34)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (58,642,264 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(228,22,38)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (288,593 samples, 0.49%)</title><rect x="99.5079%" y="245" width="0.4921%" height="15" fill="rgb(235,168,5)"/><text x="99.7579%" y="255.50"></text></g></svg></svg>