<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,243,442 samples, 14.88%)</title><rect x="0.8267%" y="213" width="14.8776%" height="15" fill="rgb(227,0,7)"/><text x="1.0767%" y="223.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (178,692 samples, 0.29%)</title><rect x="15.4167%" y="197" width="0.2876%" height="15" fill="rgb(217,0,24)"/><text x="15.6667%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (157,681 samples, 0.25%)</title><rect x="15.4505%" y="181" width="0.2538%" height="15" fill="rgb(221,193,54)"/><text x="15.7005%" y="191.50"></text></g><g><title>needs_drop_raw (151,402 samples, 0.24%)</title><rect x="18.4625%" y="101" width="0.2437%" height="15" fill="rgb(248,212,6)"/><text x="18.7125%" y="111.50"></text></g><g><title>is_copy_raw (136,352 samples, 0.22%)</title><rect x="18.4868%" y="85" width="0.2195%" height="15" fill="rgb(208,68,35)"/><text x="18.7368%" y="95.50"></text></g><g><title>evaluate_obligation (125,472 samples, 0.20%)</title><rect x="18.5043%" y="69" width="0.2020%" height="15" fill="rgb(232,128,0)"/><text x="18.7543%" y="79.50"></text></g><g><title>predicates_of (65,030 samples, 0.10%)</title><rect x="18.6016%" y="53" width="0.1047%" height="15" fill="rgb(207,160,47)"/><text x="18.8516%" y="63.50"></text></g><g><title>predicates_defined_on (62,840 samples, 0.10%)</title><rect x="18.6051%" y="37" width="0.1011%" height="15" fill="rgb(228,23,34)"/><text x="18.8551%" y="47.50"></text></g><g><title>thir_body (80,941 samples, 0.13%)</title><rect x="18.7211%" y="101" width="0.1303%" height="15" fill="rgb(218,30,26)"/><text x="18.9711%" y="111.50"></text></g><g><title>mir_const (747,738 samples, 1.20%)</title><rect x="17.6522%" y="149" width="1.2035%" height="15" fill="rgb(220,122,19)"/><text x="17.9022%" y="159.50"></text></g><g><title>unsafety_check_result (617,317 samples, 0.99%)</title><rect x="17.8621%" y="133" width="0.9936%" height="15" fill="rgb(250,228,42)"/><text x="18.1121%" y="143.50"></text></g><g><title>mir_built (554,176 samples, 0.89%)</title><rect x="17.9637%" y="117" width="0.8920%" height="15" fill="rgb(240,193,28)"/><text x="18.2137%" y="127.50"></text></g><g><title>mir_promoted (876,901 samples, 1.41%)</title><rect x="17.4608%" y="165" width="1.4114%" height="15" fill="rgb(216,20,37)"/><text x="17.7108%" y="175.50"></text></g><g><title>MIR_borrow_checking (1,916,241 samples, 3.08%)</title><rect x="15.8683%" y="197" width="3.0842%" height="15" fill="rgb(206,188,39)"/><text x="16.1183%" y="207.50">MIR..</text></g><g><title>mir_borrowck (1,900,031 samples, 3.06%)</title><rect x="15.8944%" y="181" width="3.0582%" height="15" fill="rgb(217,207,13)"/><text x="16.1444%" y="191.50">mir..</text></g><g><title>hir_module_items (80,481 samples, 0.13%)</title><rect x="18.9599%" y="197" width="0.1295%" height="15" fill="rgb(231,73,38)"/><text x="19.2099%" y="207.50"></text></g><g><title>codegen_fn_attrs (82,261 samples, 0.13%)</title><rect x="19.4768%" y="133" width="0.1324%" height="15" fill="rgb(225,20,46)"/><text x="19.7268%" y="143.50"></text></g><g><title>should_inherit_track_caller (132,972 samples, 0.21%)</title><rect x="19.3991%" y="149" width="0.2140%" height="15" fill="rgb(210,31,41)"/><text x="19.6491%" y="159.50"></text></g><g><title>codegen_fn_attrs (260,843 samples, 0.42%)</title><rect x="19.2260%" y="165" width="0.4198%" height="15" fill="rgb(221,200,47)"/><text x="19.4760%" y="175.50"></text></g><g><title>check_mod_attrs (323,063 samples, 0.52%)</title><rect x="19.1260%" y="181" width="0.5200%" height="15" fill="rgb(226,26,5)"/><text x="19.3760%" y="191.50"></text></g><g><title>lookup_deprecation_entry (67,551 samples, 0.11%)</title><rect x="19.8068%" y="165" width="0.1087%" height="15" fill="rgb(249,33,26)"/><text x="20.0568%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (167,772 samples, 0.27%)</title><rect x="19.7251%" y="181" width="0.2700%" height="15" fill="rgb(235,183,28)"/><text x="19.9751%" y="191.50"></text></g><g><title>misc_checking_1 (586,356 samples, 0.94%)</title><rect x="19.0901%" y="197" width="0.9438%" height="15" fill="rgb(221,5,38)"/><text x="19.3401%" y="207.50"></text></g><g><title>misc_checking_2 (172,522 samples, 0.28%)</title><rect x="20.0338%" y="197" width="0.2777%" height="15" fill="rgb(247,18,42)"/><text x="20.2838%" y="207.50"></text></g><g><title>match_checking (112,191 samples, 0.18%)</title><rect x="20.1309%" y="181" width="0.1806%" height="15" fill="rgb(241,131,45)"/><text x="20.3809%" y="191.50"></text></g><g><title>check_match (106,701 samples, 0.17%)</title><rect x="20.1398%" y="165" width="0.1717%" height="15" fill="rgb(249,31,29)"/><text x="20.3898%" y="175.50"></text></g><g><title>death_checking (70,761 samples, 0.11%)</title><rect x="20.3953%" y="181" width="0.1139%" height="15" fill="rgb(225,111,53)"/><text x="20.6453%" y="191.50"></text></g><g><title>all_diagnostic_items (83,761 samples, 0.13%)</title><rect x="21.6456%" y="149" width="0.1348%" height="15" fill="rgb(238,160,17)"/><text x="21.8956%" y="159.50"></text></g><g><title>crate_lints (1,917,071 samples, 3.09%)</title><rect x="20.5117%" y="165" width="3.0856%" height="15" fill="rgb(214,148,48)"/><text x="20.7617%" y="175.50">cra..</text></g><g><title>type_of (1,066,782 samples, 1.72%)</title><rect x="21.8803%" y="149" width="1.7170%" height="15" fill="rgb(232,36,49)"/><text x="22.1303%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (832,171 samples, 1.34%)</title><rect x="22.2579%" y="133" width="1.3394%" height="15" fill="rgb(209,103,24)"/><text x="22.5079%" y="143.50"></text></g><g><title>lint_checking (1,979,542 samples, 3.19%)</title><rect x="20.5092%" y="181" width="3.1861%" height="15" fill="rgb(229,88,8)"/><text x="20.7592%" y="191.50">lin..</text></g><g><title>privacy_access_levels (66,541 samples, 0.11%)</title><rect x="23.6953%" y="181" width="0.1071%" height="15" fill="rgb(213,181,19)"/><text x="23.9453%" y="191.50"></text></g><g><title>privacy_checking_modules (168,402 samples, 0.27%)</title><rect x="23.8024%" y="181" width="0.2710%" height="15" fill="rgb(254,191,54)"/><text x="24.0524%" y="191.50"></text></g><g><title>check_mod_privacy (166,842 samples, 0.27%)</title><rect x="23.8049%" y="165" width="0.2685%" height="15" fill="rgb(241,83,37)"/><text x="24.0549%" y="175.50"></text></g><g><title>misc_checking_3 (2,349,006 samples, 3.78%)</title><rect x="20.3115%" y="197" width="3.7808%" height="15" fill="rgb(233,36,39)"/><text x="20.5615%" y="207.50">misc..</text></g><g><title>impl_trait_ref (156,580 samples, 0.25%)</title><rect x="24.4238%" y="101" width="0.2520%" height="15" fill="rgb(226,3,54)"/><text x="24.6738%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (138,100 samples, 0.22%)</title><rect x="24.4536%" y="85" width="0.2223%" height="15" fill="rgb(245,192,40)"/><text x="24.7036%" y="95.50"></text></g><g><title>adt_destructor (326,163 samples, 0.52%)</title><rect x="24.1999%" y="149" width="0.5250%" height="15" fill="rgb(238,167,29)"/><text x="24.4499%" y="159.50"></text></g><g><title>coherent_trait (319,353 samples, 0.51%)</title><rect x="24.2108%" y="133" width="0.5140%" height="15" fill="rgb(232,182,51)"/><text x="24.4608%" y="143.50"></text></g><g><title>specialization_graph_of (318,073 samples, 0.51%)</title><rect x="24.2129%" y="117" width="0.5119%" height="15" fill="rgb(231,60,39)"/><text x="24.4629%" y="127.50"></text></g><g><title>param_env (73,971 samples, 0.12%)</title><rect x="24.7248%" y="149" width="0.1191%" height="15" fill="rgb(208,69,12)"/><text x="24.9748%" y="159.50"></text></g><g><title>impl_parent (1,996,227 samples, 3.21%)</title><rect x="30.4657%" y="133" width="3.2130%" height="15" fill="rgb(235,93,37)"/><text x="30.7157%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_parent (1,203,407 samples, 1.94%)</title><rect x="31.7418%" y="117" width="1.9369%" height="15" fill="rgb(213,116,39)"/><text x="31.9918%" y="127.50">m..</text></g><g><title>impl_trait_ref (4,792,641 samples, 7.71%)</title><rect x="33.6787%" y="133" width="7.7139%" height="15" fill="rgb(222,207,29)"/><text x="33.9287%" y="143.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,988,993 samples, 6.42%)</title><rect x="34.9722%" y="117" width="6.4204%" height="15" fill="rgb(206,96,30)"/><text x="35.2222%" y="127.50">metadata..</text></g><g><title>coherent_trait (11,441,026 samples, 18.41%)</title><rect x="24.1582%" y="165" width="18.4147%" height="15" fill="rgb(218,138,4)"/><text x="24.4082%" y="175.50">coherent_trait</text></g><g><title>specialization_graph_of (11,015,012 samples, 17.73%)</title><rect x="24.8439%" y="149" width="17.7290%" height="15" fill="rgb(250,191,14)"/><text x="25.0939%" y="159.50">specialization_graph_of</text></g><g><title>trait_impls_of (731,429 samples, 1.18%)</title><rect x="41.3956%" y="133" width="1.1773%" height="15" fill="rgb(239,60,40)"/><text x="41.6456%" y="143.50"></text></g><g><title>implementations_of_trait (194,940 samples, 0.31%)</title><rect x="42.2591%" y="117" width="0.3138%" height="15" fill="rgb(206,27,48)"/><text x="42.5091%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (168,270 samples, 0.27%)</title><rect x="42.3020%" y="101" width="0.2708%" height="15" fill="rgb(225,35,8)"/><text x="42.5520%" y="111.50"></text></g><g><title>coherence_checking (11,484,226 samples, 18.48%)</title><rect x="24.1306%" y="181" width="18.4842%" height="15" fill="rgb(250,213,24)"/><text x="24.3806%" y="191.50">coherence_checking</text></g><g><title>item_bodies_checking (1,047,212 samples, 1.69%)</title><rect x="42.6403%" y="181" width="1.6855%" height="15" fill="rgb(247,123,22)"/><text x="42.8903%" y="191.50"></text></g><g><title>typeck_item_bodies (1,045,482 samples, 1.68%)</title><rect x="42.6431%" y="165" width="1.6827%" height="15" fill="rgb(231,138,38)"/><text x="42.8931%" y="175.50"></text></g><g><title>typeck (1,032,452 samples, 1.66%)</title><rect x="42.6641%" y="149" width="1.6618%" height="15" fill="rgb(231,145,46)"/><text x="42.9141%" y="159.50"></text></g><g><title>item_types_checking (272,053 samples, 0.44%)</title><rect x="44.3258%" y="181" width="0.4379%" height="15" fill="rgb(251,118,11)"/><text x="44.5758%" y="191.50"></text></g><g><title>check_mod_item_types (269,073 samples, 0.43%)</title><rect x="44.3306%" y="165" width="0.4331%" height="15" fill="rgb(217,147,25)"/><text x="44.5806%" y="175.50"></text></g><g><title>fn_sig (474,706 samples, 0.76%)</title><rect x="44.9051%" y="149" width="0.7641%" height="15" fill="rgb(247,81,37)"/><text x="45.1551%" y="159.50"></text></g><g><title>named_region_map (96,171 samples, 0.15%)</title><rect x="45.7376%" y="133" width="0.1548%" height="15" fill="rgb(209,12,38)"/><text x="45.9876%" y="143.50"></text></g><g><title>resolve_lifetimes (92,311 samples, 0.15%)</title><rect x="45.7438%" y="117" width="0.1486%" height="15" fill="rgb(227,1,9)"/><text x="45.9938%" y="127.50"></text></g><g><title>generics_of (146,841 samples, 0.24%)</title><rect x="45.6691%" y="149" width="0.2363%" height="15" fill="rgb(248,47,43)"/><text x="45.9191%" y="159.50"></text></g><g><title>predicates_of (116,531 samples, 0.19%)</title><rect x="45.9792%" y="149" width="0.1876%" height="15" fill="rgb(221,10,30)"/><text x="46.2292%" y="159.50"></text></g><g><title>predicates_defined_on (102,271 samples, 0.16%)</title><rect x="46.0022%" y="133" width="0.1646%" height="15" fill="rgb(210,229,1)"/><text x="46.2522%" y="143.50"></text></g><g><title>type_collecting (1,001,851 samples, 1.61%)</title><rect x="44.7649%" y="181" width="1.6125%" height="15" fill="rgb(222,148,37)"/><text x="45.0149%" y="191.50"></text></g><g><title>collect_mod_item_types (994,441 samples, 1.60%)</title><rect x="44.7769%" y="165" width="1.6006%" height="15" fill="rgb(234,67,33)"/><text x="45.0269%" y="175.50"></text></g><g><title>type_of (86,881 samples, 0.14%)</title><rect x="46.2376%" y="149" width="0.1398%" height="15" fill="rgb(247,98,35)"/><text x="46.4876%" y="159.50"></text></g><g><title>evaluate_obligation (171,531 samples, 0.28%)</title><rect x="47.0901%" y="149" width="0.2761%" height="15" fill="rgb(247,138,52)"/><text x="47.3401%" y="159.50"></text></g><g><title>implied_outlives_bounds (64,880 samples, 0.10%)</title><rect x="47.3662%" y="149" width="0.1044%" height="15" fill="rgb(213,79,30)"/><text x="47.6162%" y="159.50"></text></g><g><title>evaluate_obligation (142,942 samples, 0.23%)</title><rect x="47.6765%" y="133" width="0.2301%" height="15" fill="rgb(246,177,23)"/><text x="47.9265%" y="143.50"></text></g><g><title>layout_of (80,011 samples, 0.13%)</title><rect x="47.9684%" y="133" width="0.1288%" height="15" fill="rgb(230,62,27)"/><text x="48.2184%" y="143.50"></text></g><g><title>object_safety_violations (457,065 samples, 0.74%)</title><rect x="47.4706%" y="149" width="0.7357%" height="15" fill="rgb(216,154,8)"/><text x="47.7206%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,229,675 samples, 1.98%)</title><rect x="46.4523%" y="165" width="1.9792%" height="15" fill="rgb(244,35,45)"/><text x="46.7023%" y="175.50">c..</text></g><g><title>evaluate_obligation (128,390 samples, 0.21%)</title><rect x="49.1801%" y="149" width="0.2066%" height="15" fill="rgb(251,115,12)"/><text x="49.4301%" y="159.50"></text></g><g><title>param_env (67,371 samples, 0.11%)</title><rect x="49.4599%" y="149" width="0.1084%" height="15" fill="rgb(240,54,50)"/><text x="49.7099%" y="159.50"></text></g><g><title>predicates_of (64,291 samples, 0.10%)</title><rect x="49.5683%" y="149" width="0.1035%" height="15" fill="rgb(233,84,52)"/><text x="49.8183%" y="159.50"></text></g><g><title>check_item_well_formed (824,359 samples, 1.33%)</title><rect x="48.4315%" y="165" width="1.3268%" height="15" fill="rgb(207,117,47)"/><text x="48.6815%" y="175.50"></text></g><g><title>analysis (21,224,894 samples, 34.16%)</title><rect x="15.7043%" y="213" width="34.1621%" height="15" fill="rgb(249,43,39)"/><text x="15.9543%" y="223.50">analysis</text></g><g><title>type_check_crate (16,013,427 samples, 25.77%)</title><rect x="24.0923%" y="197" width="25.7741%" height="15" fill="rgb(209,38,44)"/><text x="24.3423%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,166,654 samples, 3.49%)</title><rect x="46.3791%" y="181" width="3.4873%" height="15" fill="rgb(236,212,23)"/><text x="46.6291%" y="191.50">wf_..</text></g><g><title>check_trait_item_well_formed (67,130 samples, 0.11%)</title><rect x="49.7583%" y="165" width="0.1080%" height="15" fill="rgb(242,79,21)"/><text x="50.0083%" y="175.50"></text></g><g><title>is_freeze_raw (92,881 samples, 0.15%)</title><rect x="51.8889%" y="165" width="0.1495%" height="15" fill="rgb(211,96,35)"/><text x="52.1389%" y="175.50"></text></g><g><title>evaluate_obligation (85,911 samples, 0.14%)</title><rect x="51.9002%" y="149" width="0.1383%" height="15" fill="rgb(253,215,40)"/><text x="52.1502%" y="159.50"></text></g><g><title>is_unpin_raw (110,331 samples, 0.18%)</title><rect x="52.0384%" y="165" width="0.1776%" height="15" fill="rgb(211,81,21)"/><text x="52.2884%" y="175.50"></text></g><g><title>evaluate_obligation (107,341 samples, 0.17%)</title><rect x="52.0433%" y="149" width="0.1728%" height="15" fill="rgb(208,190,38)"/><text x="52.2933%" y="159.50"></text></g><g><title>fn_abi_of_instance (320,593 samples, 0.52%)</title><rect x="51.7900%" y="181" width="0.5160%" height="15" fill="rgb(235,213,38)"/><text x="52.0400%" y="191.50"></text></g><g><title>codegen_module (840,730 samples, 1.35%)</title><rect x="50.9784%" y="197" width="1.3532%" height="15" fill="rgb(237,122,38)"/><text x="51.2284%" y="207.50"></text></g><g><title>layout_of (74,551 samples, 0.12%)</title><rect x="52.6354%" y="133" width="0.1200%" height="15" fill="rgb(244,218,35)"/><text x="52.8854%" y="143.50"></text></g><g><title>optimized_mir (303,643 samples, 0.49%)</title><rect x="52.4176%" y="149" width="0.4887%" height="15" fill="rgb(240,68,47)"/><text x="52.6676%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (93,781 samples, 0.15%)</title><rect x="52.7554%" y="133" width="0.1509%" height="15" fill="rgb(210,16,53)"/><text x="53.0054%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (341,123 samples, 0.55%)</title><rect x="52.3598%" y="165" width="0.5490%" height="15" fill="rgb(235,124,12)"/><text x="52.6098%" y="175.50"></text></g><g><title>monomorphization_collector (365,134 samples, 0.59%)</title><rect x="52.3568%" y="181" width="0.5877%" height="15" fill="rgb(224,169,11)"/><text x="52.6068%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (427,575 samples, 0.69%)</title><rect x="52.3324%" y="197" width="0.6882%" height="15" fill="rgb(250,166,2)"/><text x="52.5824%" y="207.50"></text></g><g><title>codegen_crate (2,023,902 samples, 3.26%)</title><rect x="49.8773%" y="213" width="3.2575%" height="15" fill="rgb(242,216,29)"/><text x="50.1273%" y="223.50">cod..</text></g><g><title>codegen_module_optimize (4,745,852 samples, 7.64%)</title><rect x="53.1348%" y="213" width="7.6386%" height="15" fill="rgb(230,116,27)"/><text x="53.3848%" y="223.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (4,318,837 samples, 6.95%)</title><rect x="53.8221%" y="197" width="6.9513%" height="15" fill="rgb(228,99,48)"/><text x="54.0721%" y="207.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (1,110,662 samples, 1.79%)</title><rect x="61.2081%" y="197" width="1.7876%" height="15" fill="rgb(253,11,6)"/><text x="61.4581%" y="207.50">L..</text></g><g><title>LLVM_module_codegen (2,557,359 samples, 4.12%)</title><rect x="62.9958%" y="197" width="4.1161%" height="15" fill="rgb(247,143,39)"/><text x="63.2458%" y="207.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,507,658 samples, 4.04%)</title><rect x="63.0758%" y="181" width="4.0361%" height="15" fill="rgb(236,97,10)"/><text x="63.3258%" y="191.50">LLVM..</text></g><g><title>codegen_module_perform_lto (3,973,794 samples, 6.40%)</title><rect x="60.7734%" y="213" width="6.3959%" height="15" fill="rgb(233,208,19)"/><text x="61.0234%" y="223.50">codegen_..</text></g><g><title>macro_expand_crate (5,727,263 samples, 9.22%)</title><rect x="67.5801%" y="197" width="9.2182%" height="15" fill="rgb(216,164,2)"/><text x="67.8301%" y="207.50">macro_expand_..</text></g><g><title>expand_crate (5,717,993 samples, 9.20%)</title><rect x="67.5950%" y="181" width="9.2033%" height="15" fill="rgb(220,129,5)"/><text x="67.8450%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (1,302,515 samples, 2.10%)</title><rect x="74.7018%" y="165" width="2.0964%" height="15" fill="rgb(242,17,10)"/><text x="74.9518%" y="175.50">m..</text></g><g><title>metadata_register_crate (460,496 samples, 0.74%)</title><rect x="76.0571%" y="149" width="0.7412%" height="15" fill="rgb(242,107,0)"/><text x="76.3071%" y="159.50"></text></g><g><title>finalize_macro_resolutions (103,261 samples, 0.17%)</title><rect x="76.9223%" y="181" width="0.1662%" height="15" fill="rgb(251,28,31)"/><text x="77.1723%" y="191.50"></text></g><g><title>late_resolve_crate (555,787 samples, 0.89%)</title><rect x="77.0885%" y="181" width="0.8946%" height="15" fill="rgb(233,223,10)"/><text x="77.3385%" y="191.50"></text></g><g><title>configure_and_expand (6,753,655 samples, 10.87%)</title><rect x="67.1693%" y="213" width="10.8702%" height="15" fill="rgb(215,21,27)"/><text x="67.4193%" y="223.50">configure_and_ex..</text></g><g><title>resolve_crate (710,668 samples, 1.14%)</title><rect x="76.8957%" y="197" width="1.1438%" height="15" fill="rgb(232,23,21)"/><text x="77.1457%" y="207.50"></text></g><g><title>early_lint_checks (82,381 samples, 0.13%)</title><rect x="78.1460%" y="213" width="0.1326%" height="15" fill="rgb(244,5,23)"/><text x="78.3960%" y="223.50"></text></g><g><title>free_global_ctxt (3,312,277 samples, 5.33%)</title><rect x="78.2786%" y="213" width="5.3312%" height="15" fill="rgb(226,81,46)"/><text x="78.5286%" y="223.50">free_gl..</text></g><g><title>crate_hash (71,661 samples, 0.12%)</title><rect x="84.1818%" y="197" width="0.1153%" height="15" fill="rgb(247,70,30)"/><text x="84.4318%" y="207.50"></text></g><g><title>exported_symbols (129,301 samples, 0.21%)</title><rect x="84.3453%" y="197" width="0.2081%" height="15" fill="rgb(212,68,19)"/><text x="84.5953%" y="207.50"></text></g><g><title>symbol_name (74,791 samples, 0.12%)</title><rect x="84.4331%" y="181" width="0.1204%" height="15" fill="rgb(240,187,13)"/><text x="84.6831%" y="191.50"></text></g><g><title>eval_to_const_value_raw (105,251 samples, 0.17%)</title><rect x="85.1589%" y="149" width="0.1694%" height="15" fill="rgb(223,113,26)"/><text x="85.4089%" y="159.50"></text></g><g><title>eval_to_const_value_raw (97,211 samples, 0.16%)</title><rect x="85.1719%" y="133" width="0.1565%" height="15" fill="rgb(206,192,2)"/><text x="85.4219%" y="143.50"></text></g><g><title>eval_to_allocation_raw (90,691 samples, 0.15%)</title><rect x="85.1824%" y="117" width="0.1460%" height="15" fill="rgb(241,108,4)"/><text x="85.4324%" y="127.50"></text></g><g><title>layout_of (213,152 samples, 0.34%)</title><rect x="85.0396%" y="181" width="0.3431%" height="15" fill="rgb(247,173,49)"/><text x="85.2896%" y="191.50"></text></g><g><title>layout_of (163,602 samples, 0.26%)</title><rect x="85.1193%" y="165" width="0.2633%" height="15" fill="rgb(224,114,35)"/><text x="85.3693%" y="175.50"></text></g><g><title>needs_drop_raw (77,151 samples, 0.12%)</title><rect x="85.8746%" y="165" width="0.1242%" height="15" fill="rgb(245,159,27)"/><text x="86.1246%" y="175.50"></text></g><g><title>is_copy_raw (69,371 samples, 0.11%)</title><rect x="85.8871%" y="149" width="0.1117%" height="15" fill="rgb(245,172,44)"/><text x="86.1371%" y="159.50"></text></g><g><title>optimized_mir (854,959 samples, 1.38%)</title><rect x="84.6296%" y="197" width="1.3761%" height="15" fill="rgb(236,23,11)"/><text x="84.8796%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (387,104 samples, 0.62%)</title><rect x="85.3827%" y="181" width="0.6231%" height="15" fill="rgb(205,117,38)"/><text x="85.6327%" y="191.50"></text></g><g><title>generate_crate_metadata (1,503,256 samples, 2.42%)</title><rect x="83.6098%" y="213" width="2.4195%" height="15" fill="rgb(237,72,25)"/><text x="83.8598%" y="223.50">ge..</text></g><g><title>hir_lowering (481,646 samples, 0.78%)</title><rect x="86.0293%" y="213" width="0.7752%" height="15" fill="rgb(244,70,9)"/><text x="86.2793%" y="223.50"></text></g><g><title>finish_ongoing_codegen (5,057,776 samples, 8.14%)</title><rect x="86.8405%" y="197" width="8.1406%" height="15" fill="rgb(217,125,39)"/><text x="87.0905%" y="207.50">finish_ongo..</text></g><g><title>link_crate (1,120,503 samples, 1.80%)</title><rect x="94.9812%" y="197" width="1.8035%" height="15" fill="rgb(235,36,10)"/><text x="95.2312%" y="207.50">l..</text></g><g><title>link_binary (1,100,143 samples, 1.77%)</title><rect x="95.0139%" y="181" width="1.7707%" height="15" fill="rgb(251,123,47)"/><text x="95.2639%" y="191.50">l..</text></g><g><title>link_rlib (656,107 samples, 1.06%)</title><rect x="95.7286%" y="165" width="1.0560%" height="15" fill="rgb(221,13,13)"/><text x="95.9786%" y="175.50"></text></g><g><title>link (6,214,659 samples, 10.00%)</title><rect x="86.8045%" y="213" width="10.0027%" height="15" fill="rgb(238,131,9)"/><text x="87.0545%" y="223.50">link</text></g><g><title>parse_crate (559,966 samples, 0.90%)</title><rect x="96.8072%" y="213" width="0.9013%" height="15" fill="rgb(211,50,8)"/><text x="97.0572%" y="223.50"></text></g><g><title>prepare_outputs (189,442 samples, 0.30%)</title><rect x="97.7165%" y="213" width="0.3049%" height="15" fill="rgb(245,182,24)"/><text x="97.9665%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (881,189 samples, 1.42%)</title><rect x="98.0214%" y="213" width="1.4183%" height="15" fill="rgb(242,14,37)"/><text x="98.2714%" y="223.50"></text></g><g><title>setup_global_ctxt (93,051 samples, 0.15%)</title><rect x="99.4415%" y="213" width="0.1498%" height="15" fill="rgb(246,228,12)"/><text x="99.6915%" y="223.50"></text></g><g><title>all (62,129,965 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (62,129,965 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (253,953 samples, 0.41%)</title><rect x="99.5913%" y="213" width="0.4087%" height="15" fill="rgb(230,59,30)"/><text x="99.8413%" y="223.50"></text></g></svg></svg>