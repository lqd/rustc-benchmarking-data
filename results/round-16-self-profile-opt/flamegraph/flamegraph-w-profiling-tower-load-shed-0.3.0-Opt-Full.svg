<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,726,923 samples, 10.64%)</title><rect x="0.3817%" y="197" width="10.6389%" height="15" fill="rgb(227,0,7)"/><text x="0.6317%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (195,342 samples, 0.14%)</title><rect x="10.8794%" y="181" width="0.1411%" height="15" fill="rgb(217,0,24)"/><text x="11.1294%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (179,482 samples, 0.13%)</title><rect x="10.8909%" y="165" width="0.1297%" height="15" fill="rgb(221,193,54)"/><text x="11.1409%" y="175.50"></text></g><g><title>needs_drop_raw (854,490 samples, 0.62%)</title><rect x="14.9077%" y="85" width="0.6173%" height="15" fill="rgb(248,212,6)"/><text x="15.1577%" y="95.50"></text></g><g><title>is_copy_raw (678,517 samples, 0.49%)</title><rect x="15.0348%" y="69" width="0.4902%" height="15" fill="rgb(208,68,35)"/><text x="15.2848%" y="79.50"></text></g><g><title>evaluate_obligation (587,337 samples, 0.42%)</title><rect x="15.1007%" y="53" width="0.4243%" height="15" fill="rgb(232,128,0)"/><text x="15.3507%" y="63.50"></text></g><g><title>trait_impls_of (143,442 samples, 0.10%)</title><rect x="15.4214%" y="37" width="0.1036%" height="15" fill="rgb(207,160,47)"/><text x="15.6714%" y="47.50"></text></g><g><title>thir_body (242,742 samples, 0.18%)</title><rect x="15.6125%" y="85" width="0.1754%" height="15" fill="rgb(228,23,34)"/><text x="15.8625%" y="95.50"></text></g><g><title>mir_const (2,601,560 samples, 1.88%)</title><rect x="13.9255%" y="133" width="1.8794%" height="15" fill="rgb(218,30,26)"/><text x="14.1755%" y="143.50">m..</text></g><g><title>unsafety_check_result (2,237,632 samples, 1.62%)</title><rect x="14.1884%" y="117" width="1.6165%" height="15" fill="rgb(220,122,19)"/><text x="14.4384%" y="127.50"></text></g><g><title>mir_built (1,993,398 samples, 1.44%)</title><rect x="14.3648%" y="101" width="1.4400%" height="15" fill="rgb(250,228,42)"/><text x="14.6148%" y="111.50"></text></g><g><title>mir_promoted (2,924,640 samples, 2.11%)</title><rect x="13.7344%" y="149" width="2.1128%" height="15" fill="rgb(240,193,28)"/><text x="13.9844%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (267,755 samples, 0.19%)</title><rect x="15.8471%" y="149" width="0.1934%" height="15" fill="rgb(216,20,37)"/><text x="16.0971%" y="159.50"></text></g><g><title>type_op_normalize_ty (161,762 samples, 0.12%)</title><rect x="16.0839%" y="149" width="0.1169%" height="15" fill="rgb(206,188,39)"/><text x="16.3339%" y="159.50"></text></g><g><title>type_op_prove_predicate (735,250 samples, 0.53%)</title><rect x="16.2008%" y="149" width="0.5312%" height="15" fill="rgb(217,207,13)"/><text x="16.4508%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,769,046 samples, 5.61%)</title><rect x="11.1219%" y="181" width="5.6124%" height="15" fill="rgb(231,73,38)"/><text x="11.3719%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (7,726,076 samples, 5.58%)</title><rect x="11.1529%" y="165" width="5.5814%" height="15" fill="rgb(225,20,46)"/><text x="11.4029%" y="175.50">mir_bor..</text></g><g><title>codegen_fn_attrs (176,342 samples, 0.13%)</title><rect x="17.0238%" y="117" width="0.1274%" height="15" fill="rgb(210,31,41)"/><text x="17.2738%" y="127.50"></text></g><g><title>codegen_fn_attrs (260,122 samples, 0.19%)</title><rect x="16.9654%" y="149" width="0.1879%" height="15" fill="rgb(221,200,47)"/><text x="17.2154%" y="159.50"></text></g><g><title>should_inherit_track_caller (234,722 samples, 0.17%)</title><rect x="16.9838%" y="133" width="0.1696%" height="15" fill="rgb(226,26,5)"/><text x="17.2338%" y="143.50"></text></g><g><title>check_mod_attrs (363,524 samples, 0.26%)</title><rect x="16.8909%" y="165" width="0.2626%" height="15" fill="rgb(249,33,26)"/><text x="17.1409%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (246,652 samples, 0.18%)</title><rect x="17.2236%" y="165" width="0.1782%" height="15" fill="rgb(235,183,28)"/><text x="17.4736%" y="175.50"></text></g><g><title>misc_checking_1 (765,428 samples, 0.55%)</title><rect x="16.8795%" y="181" width="0.5530%" height="15" fill="rgb(221,5,38)"/><text x="17.1295%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (152,572 samples, 0.11%)</title><rect x="17.4334%" y="165" width="0.1102%" height="15" fill="rgb(247,18,42)"/><text x="17.6834%" y="175.50"></text></g><g><title>misc_checking_2 (327,884 samples, 0.24%)</title><rect x="17.4325%" y="181" width="0.2369%" height="15" fill="rgb(241,131,45)"/><text x="17.6825%" y="191.50"></text></g><g><title>match_checking (174,032 samples, 0.13%)</title><rect x="17.5436%" y="165" width="0.1257%" height="15" fill="rgb(249,31,29)"/><text x="17.7936%" y="175.50"></text></g><g><title>check_match (161,172 samples, 0.12%)</title><rect x="17.5529%" y="149" width="0.1164%" height="15" fill="rgb(225,111,53)"/><text x="17.8029%" y="159.50"></text></g><g><title>death_checking (250,912 samples, 0.18%)</title><rect x="17.7638%" y="165" width="0.1813%" height="15" fill="rgb(238,160,17)"/><text x="18.0138%" y="175.50"></text></g><g><title>param_env (150,141 samples, 0.11%)</title><rect x="18.4419%" y="133" width="0.1085%" height="15" fill="rgb(214,148,48)"/><text x="18.6919%" y="143.50"></text></g><g><title>crate_lints (1,882,071 samples, 1.36%)</title><rect x="17.9462%" y="149" width="1.3596%" height="15" fill="rgb(232,36,49)"/><text x="18.1962%" y="159.50"></text></g><g><title>type_of (1,043,032 samples, 0.75%)</title><rect x="18.5523%" y="133" width="0.7535%" height="15" fill="rgb(209,103,24)"/><text x="18.8023%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (808,440 samples, 0.58%)</title><rect x="18.7218%" y="117" width="0.5840%" height="15" fill="rgb(229,88,8)"/><text x="18.9718%" y="127.50"></text></g><g><title>lint_checking (2,111,974 samples, 1.53%)</title><rect x="17.9450%" y="165" width="1.5257%" height="15" fill="rgb(213,181,19)"/><text x="18.1950%" y="175.50"></text></g><g><title>module_lints (228,293 samples, 0.16%)</title><rect x="19.3058%" y="149" width="0.1649%" height="15" fill="rgb(254,191,54)"/><text x="19.5558%" y="159.50"></text></g><g><title>lint_mod (223,643 samples, 0.16%)</title><rect x="19.3092%" y="133" width="0.1616%" height="15" fill="rgb(241,83,37)"/><text x="19.5592%" y="143.50"></text></g><g><title>privacy_checking_modules (383,744 samples, 0.28%)</title><rect x="19.5592%" y="165" width="0.2772%" height="15" fill="rgb(233,36,39)"/><text x="19.8092%" y="175.50"></text></g><g><title>check_mod_privacy (379,803 samples, 0.27%)</title><rect x="19.5620%" y="149" width="0.2744%" height="15" fill="rgb(226,3,54)"/><text x="19.8120%" y="159.50"></text></g><g><title>misc_checking_3 (3,007,813 samples, 2.17%)</title><rect x="17.6693%" y="181" width="2.1729%" height="15" fill="rgb(245,192,40)"/><text x="17.9193%" y="191.50">m..</text></g><g><title>impl_parent (1,663,095 samples, 1.20%)</title><rect x="21.5611%" y="117" width="1.2014%" height="15" fill="rgb(238,167,29)"/><text x="21.8111%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (928,512 samples, 0.67%)</title><rect x="22.0917%" y="101" width="0.6708%" height="15" fill="rgb(232,182,51)"/><text x="22.3417%" y="111.50"></text></g><g><title>impl_trait_ref (3,909,966 samples, 2.82%)</title><rect x="22.7625%" y="117" width="2.8246%" height="15" fill="rgb(231,60,39)"/><text x="23.0125%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,379,398 samples, 2.44%)</title><rect x="23.1458%" y="101" width="2.4413%" height="15" fill="rgb(208,69,12)"/><text x="23.3958%" y="111.50">me..</text></g><g><title>coherent_trait (8,491,054 samples, 6.13%)</title><rect x="19.8844%" y="149" width="6.1340%" height="15" fill="rgb(235,93,37)"/><text x="20.1344%" y="159.50">coherent..</text></g><g><title>specialization_graph_of (8,474,643 samples, 6.12%)</title><rect x="19.8963%" y="133" width="6.1222%" height="15" fill="rgb(213,116,39)"/><text x="20.1463%" y="143.50">speciali..</text></g><g><title>trait_impls_of (550,736 samples, 0.40%)</title><rect x="25.6206%" y="117" width="0.3979%" height="15" fill="rgb(222,207,29)"/><text x="25.8706%" y="127.50"></text></g><g><title>implementations_of_trait (167,111 samples, 0.12%)</title><rect x="25.8977%" y="101" width="0.1207%" height="15" fill="rgb(206,96,30)"/><text x="26.1477%" y="111.50"></text></g><g><title>coherence_checking (8,557,864 samples, 6.18%)</title><rect x="19.8695%" y="165" width="6.1823%" height="15" fill="rgb(218,138,4)"/><text x="20.1195%" y="175.50">coherenc..</text></g><g><title>associated_items (146,981 samples, 0.11%)</title><rect x="30.4423%" y="117" width="0.1062%" height="15" fill="rgb(250,191,14)"/><text x="30.6923%" y="127.50"></text></g><g><title>dropck_outlives (362,283 samples, 0.26%)</title><rect x="30.5729%" y="117" width="0.2617%" height="15" fill="rgb(239,60,40)"/><text x="30.8229%" y="127.50"></text></g><g><title>evaluate_obligation (351,785 samples, 0.25%)</title><rect x="30.8346%" y="117" width="0.2541%" height="15" fill="rgb(206,27,48)"/><text x="31.0846%" y="127.50"></text></g><g><title>method_autoderef_steps (511,017 samples, 0.37%)</title><rect x="31.2586%" y="117" width="0.3692%" height="15" fill="rgb(225,35,8)"/><text x="31.5086%" y="127.50"></text></g><g><title>evaluate_obligation (175,062 samples, 0.13%)</title><rect x="31.5013%" y="101" width="0.1265%" height="15" fill="rgb(250,213,24)"/><text x="31.7513%" y="111.50"></text></g><g><title>predicates_of (149,700 samples, 0.11%)</title><rect x="31.6517%" y="117" width="0.1081%" height="15" fill="rgb(247,123,22)"/><text x="31.9017%" y="127.50"></text></g><g><title>item_bodies_checking (7,937,858 samples, 5.73%)</title><rect x="26.0724%" y="165" width="5.7344%" height="15" fill="rgb(231,138,38)"/><text x="26.3224%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (7,935,748 samples, 5.73%)</title><rect x="26.0739%" y="149" width="5.7329%" height="15" fill="rgb(231,145,46)"/><text x="26.3239%" y="159.50">typeck_..</text></g><g><title>typeck (7,903,988 samples, 5.71%)</title><rect x="26.0968%" y="133" width="5.7099%" height="15" fill="rgb(251,118,11)"/><text x="26.3468%" y="143.50">typeck</text></g><g><title>adt_destructor (305,913 samples, 0.22%)</title><rect x="32.4409%" y="133" width="0.2210%" height="15" fill="rgb(217,147,25)"/><text x="32.6909%" y="143.50"></text></g><g><title>coherent_trait (299,983 samples, 0.22%)</title><rect x="32.4452%" y="117" width="0.2167%" height="15" fill="rgb(247,81,37)"/><text x="32.6952%" y="127.50"></text></g><g><title>specialization_graph_of (298,393 samples, 0.22%)</title><rect x="32.4463%" y="101" width="0.2156%" height="15" fill="rgb(209,12,38)"/><text x="32.6963%" y="111.50"></text></g><g><title>impl_trait_ref (150,872 samples, 0.11%)</title><rect x="32.5529%" y="85" width="0.1090%" height="15" fill="rgb(227,1,9)"/><text x="32.8029%" y="95.50"></text></g><g><title>item_types_checking (1,374,876 samples, 0.99%)</title><rect x="31.8067%" y="165" width="0.9932%" height="15" fill="rgb(248,47,43)"/><text x="32.0567%" y="175.50"></text></g><g><title>check_mod_item_types (1,369,475 samples, 0.99%)</title><rect x="31.8106%" y="149" width="0.9893%" height="15" fill="rgb(221,10,30)"/><text x="32.0606%" y="159.50"></text></g><g><title>fn_sig (171,242 samples, 0.12%)</title><rect x="32.9312%" y="133" width="0.1237%" height="15" fill="rgb(210,229,1)"/><text x="33.1812%" y="143.50"></text></g><g><title>generics_of (201,072 samples, 0.15%)</title><rect x="33.0549%" y="133" width="0.1453%" height="15" fill="rgb(222,148,37)"/><text x="33.3049%" y="143.50"></text></g><g><title>late_bound_vars_map (211,371 samples, 0.15%)</title><rect x="33.4371%" y="85" width="0.1527%" height="15" fill="rgb(234,67,33)"/><text x="33.6871%" y="95.50"></text></g><g><title>resolve_lifetimes (205,401 samples, 0.15%)</title><rect x="33.4414%" y="69" width="0.1484%" height="15" fill="rgb(247,98,35)"/><text x="33.6914%" y="79.50"></text></g><g><title>type_of (152,582 samples, 0.11%)</title><rect x="33.5988%" y="85" width="0.1102%" height="15" fill="rgb(247,138,52)"/><text x="33.8488%" y="95.50"></text></g><g><title>explicit_predicates_of (610,918 samples, 0.44%)</title><rect x="33.3033%" y="101" width="0.4413%" height="15" fill="rgb(213,79,30)"/><text x="33.5533%" y="111.50"></text></g><g><title>predicates_of (984,243 samples, 0.71%)</title><rect x="33.2331%" y="133" width="0.7110%" height="15" fill="rgb(246,177,23)"/><text x="33.4831%" y="143.50"></text></g><g><title>predicates_defined_on (944,482 samples, 0.68%)</title><rect x="33.2618%" y="117" width="0.6823%" height="15" fill="rgb(230,62,27)"/><text x="33.5118%" y="127.50"></text></g><g><title>inferred_outlives_of (276,193 samples, 0.20%)</title><rect x="33.7446%" y="101" width="0.1995%" height="15" fill="rgb(216,154,8)"/><text x="33.9946%" y="111.50"></text></g><g><title>inferred_outlives_crate (258,503 samples, 0.19%)</title><rect x="33.7574%" y="85" width="0.1867%" height="15" fill="rgb(244,35,45)"/><text x="34.0074%" y="95.50"></text></g><g><title>type_of (148,470 samples, 0.11%)</title><rect x="33.8369%" y="69" width="0.1073%" height="15" fill="rgb(251,115,12)"/><text x="34.0869%" y="79.50"></text></g><g><title>type_collecting (1,685,649 samples, 1.22%)</title><rect x="32.8012%" y="165" width="1.2177%" height="15" fill="rgb(240,54,50)"/><text x="33.0512%" y="175.50"></text></g><g><title>collect_mod_item_types (1,678,159 samples, 1.21%)</title><rect x="32.8066%" y="149" width="1.2123%" height="15" fill="rgb(233,84,52)"/><text x="33.0566%" y="159.50"></text></g><g><title>evaluate_obligation (603,869 samples, 0.44%)</title><rect x="35.0519%" y="133" width="0.4362%" height="15" fill="rgb(207,117,47)"/><text x="35.3019%" y="143.50"></text></g><g><title>implied_outlives_bounds (194,942 samples, 0.14%)</title><rect x="35.5074%" y="133" width="0.1408%" height="15" fill="rgb(249,43,39)"/><text x="35.7574%" y="143.50"></text></g><g><title>param_env (170,674 samples, 0.12%)</title><rect x="35.6537%" y="133" width="0.1233%" height="15" fill="rgb(209,38,44)"/><text x="35.9037%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,465,677 samples, 1.78%)</title><rect x="34.1023%" y="149" width="1.7812%" height="15" fill="rgb(236,212,23)"/><text x="34.3523%" y="159.50">c..</text></g><g><title>evaluate_obligation (144,323 samples, 0.10%)</title><rect x="36.9451%" y="133" width="0.1043%" height="15" fill="rgb(242,79,21)"/><text x="37.1951%" y="143.50"></text></g><g><title>object_safety_violations (440,965 samples, 0.32%)</title><rect x="37.1824%" y="133" width="0.3186%" height="15" fill="rgb(211,96,35)"/><text x="37.4324%" y="143.50"></text></g><g><title>param_env (269,912 samples, 0.19%)</title><rect x="37.5014%" y="133" width="0.1950%" height="15" fill="rgb(253,215,40)"/><text x="37.7514%" y="143.50"></text></g><g><title>analysis (37,220,582 samples, 26.89%)</title><rect x="11.0206%" y="197" width="26.8885%" height="15" fill="rgb(211,81,21)"/><text x="11.2706%" y="207.50">analysis</text></g><g><title>type_check_crate (25,009,147 samples, 18.07%)</title><rect x="19.8422%" y="181" width="18.0668%" height="15" fill="rgb(208,190,38)"/><text x="20.0922%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,383,039 samples, 3.89%)</title><rect x="34.0203%" y="165" width="3.8888%" height="15" fill="rgb(235,213,38)"/><text x="34.2703%" y="175.50">wf_c..</text></g><g><title>check_item_well_formed (2,803,929 samples, 2.03%)</title><rect x="35.8835%" y="149" width="2.0256%" height="15" fill="rgb(237,122,38)"/><text x="36.1335%" y="159.50">c..</text></g><g><title>is_unpin_raw (174,323 samples, 0.13%)</title><rect x="39.6527%" y="149" width="0.1259%" height="15" fill="rgb(244,218,35)"/><text x="39.9027%" y="159.50"></text></g><g><title>evaluate_obligation (164,302 samples, 0.12%)</title><rect x="39.6599%" y="133" width="0.1187%" height="15" fill="rgb(240,68,47)"/><text x="39.9099%" y="143.50"></text></g><g><title>fn_abi_of_instance (425,406 samples, 0.31%)</title><rect x="39.5040%" y="165" width="0.3073%" height="15" fill="rgb(210,16,53)"/><text x="39.7540%" y="175.50"></text></g><g><title>codegen_module (1,614,918 samples, 1.17%)</title><rect x="38.6979%" y="181" width="1.1666%" height="15" fill="rgb(235,124,12)"/><text x="38.9479%" y="191.50"></text></g><g><title>optimized_mir (265,464 samples, 0.19%)</title><rect x="39.9419%" y="133" width="0.1918%" height="15" fill="rgb(224,169,11)"/><text x="40.1919%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (360,104 samples, 0.26%)</title><rect x="39.8767%" y="149" width="0.2601%" height="15" fill="rgb(250,166,2)"/><text x="40.1267%" y="159.50"></text></g><g><title>monomorphization_collector (385,544 samples, 0.28%)</title><rect x="39.8752%" y="165" width="0.2785%" height="15" fill="rgb(242,216,29)"/><text x="40.1252%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (434,025 samples, 0.31%)</title><rect x="39.8655%" y="181" width="0.3135%" height="15" fill="rgb(230,116,27)"/><text x="40.1155%" y="191.50"></text></g><g><title>codegen_crate (3,212,675 samples, 2.32%)</title><rect x="37.9168%" y="197" width="2.3209%" height="15" fill="rgb(228,99,48)"/><text x="38.1668%" y="207.50">c..</text></g><g><title>codegen_module_optimize (6,481,822 samples, 4.68%)</title><rect x="40.2376%" y="197" width="4.6825%" height="15" fill="rgb(253,11,6)"/><text x="40.4876%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (5,346,199 samples, 3.86%)</title><rect x="41.0580%" y="181" width="3.8621%" height="15" fill="rgb(247,143,39)"/><text x="41.3080%" y="191.50">LLVM..</text></g><g><title>LLVM_lto_optimize (3,945,584 samples, 2.85%)</title><rect x="45.6168%" y="181" width="2.8503%" height="15" fill="rgb(236,97,10)"/><text x="45.8668%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen (11,016,112 samples, 7.96%)</title><rect x="48.4672%" y="181" width="7.9581%" height="15" fill="rgb(233,208,19)"/><text x="48.7172%" y="191.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (10,818,780 samples, 7.82%)</title><rect x="48.6097%" y="165" width="7.8156%" height="15" fill="rgb(216,164,2)"/><text x="48.8597%" y="175.50">LLVM_module..</text></g><g><title>codegen_module_perform_lto (16,019,048 samples, 11.57%)</title><rect x="44.9202%" y="197" width="11.5723%" height="15" fill="rgb(220,129,5)"/><text x="45.1702%" y="207.50">codegen_module_pe..</text></g><g><title>metadata_load_macro (491,156 samples, 0.35%)</title><rect x="74.8497%" y="149" width="0.3548%" height="15" fill="rgb(242,17,10)"/><text x="75.0997%" y="159.50"></text></g><g><title>metadata_register_crate (11,619,238 samples, 8.39%)</title><rect x="75.2045%" y="149" width="8.3938%" height="15" fill="rgb(242,107,0)"/><text x="75.4545%" y="159.50">metadata_reg..</text></g><g><title>metadata_register_crate (8,823,761 samples, 6.37%)</title><rect x="77.2240%" y="133" width="6.3744%" height="15" fill="rgb(251,28,31)"/><text x="77.4740%" y="143.50">metadata..</text></g><g><title>macro_expand_crate (37,179,310 samples, 26.86%)</title><rect x="56.7983%" y="181" width="26.8587%" height="15" fill="rgb(233,223,10)"/><text x="57.0483%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (37,163,630 samples, 26.85%)</title><rect x="56.8096%" y="165" width="26.8474%" height="15" fill="rgb(215,21,27)"/><text x="57.0596%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (144,791 samples, 0.10%)</title><rect x="83.6589%" y="181" width="0.1046%" height="15" fill="rgb(232,23,21)"/><text x="83.9089%" y="191.50"></text></g><g><title>late_resolve_crate (955,760 samples, 0.69%)</title><rect x="83.8418%" y="165" width="0.6905%" height="15" fill="rgb(244,5,23)"/><text x="84.0918%" y="175.50"></text></g><g><title>configure_and_expand (38,874,409 samples, 28.08%)</title><rect x="56.4925%" y="197" width="28.0832%" height="15" fill="rgb(226,81,46)"/><text x="56.7425%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,124,362 samples, 0.81%)</title><rect x="83.7635%" y="181" width="0.8122%" height="15" fill="rgb(247,70,30)"/><text x="84.0135%" y="191.50"></text></g><g><title>early_lint_checks (245,993 samples, 0.18%)</title><rect x="84.6456%" y="197" width="0.1777%" height="15" fill="rgb(212,68,19)"/><text x="84.8956%" y="207.50"></text></g><g><title>free_global_ctxt (3,405,357 samples, 2.46%)</title><rect x="84.8233%" y="197" width="2.4601%" height="15" fill="rgb(240,187,13)"/><text x="85.0733%" y="207.50">fr..</text></g><g><title>exported_symbols (141,972 samples, 0.10%)</title><rect x="88.2661%" y="181" width="0.1026%" height="15" fill="rgb(223,113,26)"/><text x="88.5161%" y="191.50"></text></g><g><title>layout_of (334,721 samples, 0.24%)</title><rect x="89.0161%" y="165" width="0.2418%" height="15" fill="rgb(206,192,2)"/><text x="89.2661%" y="175.50"></text></g><g><title>needs_drop_raw (242,413 samples, 0.18%)</title><rect x="89.9118%" y="149" width="0.1751%" height="15" fill="rgb(241,108,4)"/><text x="90.1618%" y="159.50"></text></g><g><title>is_copy_raw (213,783 samples, 0.15%)</title><rect x="89.9325%" y="133" width="0.1544%" height="15" fill="rgb(247,173,49)"/><text x="90.1825%" y="143.50"></text></g><g><title>evaluate_obligation (171,591 samples, 0.12%)</title><rect x="89.9630%" y="117" width="0.1240%" height="15" fill="rgb(224,114,35)"/><text x="90.2130%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,192,405 samples, 0.86%)</title><rect x="89.2579%" y="165" width="0.8614%" height="15" fill="rgb(245,159,27)"/><text x="89.5079%" y="175.50"></text></g><g><title>optimized_mir (2,384,854 samples, 1.72%)</title><rect x="88.4123%" y="181" width="1.7228%" height="15" fill="rgb(245,172,44)"/><text x="88.6623%" y="191.50"></text></g><g><title>generate_crate_metadata (3,984,924 samples, 2.88%)</title><rect x="87.2834%" y="197" width="2.8787%" height="15" fill="rgb(236,23,11)"/><text x="87.5334%" y="207.50">ge..</text></g><g><title>hir_lowering (1,277,954 samples, 0.92%)</title><rect x="90.1622%" y="197" width="0.9232%" height="15" fill="rgb(205,117,38)"/><text x="90.4122%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,994,380 samples, 6.50%)</title><rect x="91.0973%" y="181" width="6.4976%" height="15" fill="rgb(237,72,25)"/><text x="91.3473%" y="191.50">finish_on..</text></g><g><title>link_crate (781,909 samples, 0.56%)</title><rect x="97.5950%" y="181" width="0.5649%" height="15" fill="rgb(244,70,9)"/><text x="97.8450%" y="191.50"></text></g><g><title>link_binary (754,938 samples, 0.55%)</title><rect x="97.6144%" y="165" width="0.5454%" height="15" fill="rgb(217,125,39)"/><text x="97.8644%" y="175.50"></text></g><g><title>link_rlib (495,116 samples, 0.36%)</title><rect x="97.8021%" y="149" width="0.3577%" height="15" fill="rgb(235,36,10)"/><text x="98.0521%" y="159.50"></text></g><g><title>link (9,800,369 samples, 7.08%)</title><rect x="91.0854%" y="197" width="7.0799%" height="15" fill="rgb(251,123,47)"/><text x="91.3354%" y="207.50">link</text></g><g><title>parse_crate (987,601 samples, 0.71%)</title><rect x="98.1652%" y="197" width="0.7135%" height="15" fill="rgb(221,13,13)"/><text x="98.4152%" y="207.50"></text></g><g><title>prepare_outputs (232,933 samples, 0.17%)</title><rect x="98.8849%" y="197" width="0.1683%" height="15" fill="rgb(238,131,9)"/><text x="99.1349%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (935,160 samples, 0.68%)</title><rect x="99.0531%" y="197" width="0.6756%" height="15" fill="rgb(211,50,8)"/><text x="99.3031%" y="207.50"></text></g><g><title>all (138,425,612 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (138,425,612 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (319,774 samples, 0.23%)</title><rect x="99.7690%" y="197" width="0.2310%" height="15" fill="rgb(246,228,12)"/><text x="100.0190%" y="207.50"></text></g></svg></svg>