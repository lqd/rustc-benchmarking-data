<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,670,233 samples, 19.43%)</title><rect x="0.8101%" y="165" width="19.4300%" height="15" fill="rgb(227,0,7)"/><text x="1.0601%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (88,241 samples, 0.18%)</title><rect x="20.0627%" y="149" width="0.1773%" height="15" fill="rgb(217,0,24)"/><text x="20.3127%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (76,261 samples, 0.15%)</title><rect x="20.0868%" y="133" width="0.1532%" height="15" fill="rgb(221,193,54)"/><text x="20.3368%" y="143.50"></text></g><g><title>thir_body (74,871 samples, 0.15%)</title><rect x="22.5393%" y="53" width="0.1504%" height="15" fill="rgb(248,212,6)"/><text x="22.7893%" y="63.50"></text></g><g><title>mir_const (427,446 samples, 0.86%)</title><rect x="21.8332%" y="101" width="0.8588%" height="15" fill="rgb(208,68,35)"/><text x="22.0832%" y="111.50"></text></g><g><title>unsafety_check_result (327,014 samples, 0.66%)</title><rect x="22.0350%" y="85" width="0.6571%" height="15" fill="rgb(232,128,0)"/><text x="22.2850%" y="95.50"></text></g><g><title>mir_built (270,823 samples, 0.54%)</title><rect x="22.1479%" y="69" width="0.5442%" height="15" fill="rgb(207,160,47)"/><text x="22.3979%" y="79.50"></text></g><g><title>mir_promoted (520,726 samples, 1.05%)</title><rect x="21.6567%" y="117" width="1.0463%" height="15" fill="rgb(228,23,34)"/><text x="21.9067%" y="127.50"></text></g><g><title>MIR_borrow_checking (1,231,893 samples, 2.48%)</title><rect x="20.3674%" y="149" width="2.4752%" height="15" fill="rgb(218,30,26)"/><text x="20.6174%" y="159.50">MI..</text></g><g><title>mir_borrowck (1,225,053 samples, 2.46%)</title><rect x="20.3811%" y="133" width="2.4614%" height="15" fill="rgb(220,122,19)"/><text x="20.6311%" y="143.50">mi..</text></g><g><title>hir_module_items (53,200 samples, 0.11%)</title><rect x="22.8491%" y="149" width="0.1069%" height="15" fill="rgb(250,228,42)"/><text x="23.0991%" y="159.50"></text></g><g><title>should_inherit_track_caller (57,891 samples, 0.12%)</title><rect x="23.1728%" y="101" width="0.1163%" height="15" fill="rgb(240,193,28)"/><text x="23.4228%" y="111.50"></text></g><g><title>codegen_fn_attrs (126,862 samples, 0.25%)</title><rect x="23.0644%" y="117" width="0.2549%" height="15" fill="rgb(216,20,37)"/><text x="23.3144%" y="127.50"></text></g><g><title>check_mod_attrs (168,562 samples, 0.34%)</title><rect x="22.9809%" y="133" width="0.3387%" height="15" fill="rgb(206,188,39)"/><text x="23.2309%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (63,360 samples, 0.13%)</title><rect x="23.3676%" y="133" width="0.1273%" height="15" fill="rgb(217,207,13)"/><text x="23.6176%" y="143.50"></text></g><g><title>misc_checking_1 (283,293 samples, 0.57%)</title><rect x="22.9566%" y="149" width="0.5692%" height="15" fill="rgb(231,73,38)"/><text x="23.2066%" y="159.50"></text></g><g><title>misc_checking_2 (127,161 samples, 0.26%)</title><rect x="23.5258%" y="149" width="0.2555%" height="15" fill="rgb(225,20,46)"/><text x="23.7758%" y="159.50"></text></g><g><title>match_checking (87,951 samples, 0.18%)</title><rect x="23.6046%" y="133" width="0.1767%" height="15" fill="rgb(210,31,41)"/><text x="23.8546%" y="143.50"></text></g><g><title>check_match (84,541 samples, 0.17%)</title><rect x="23.6115%" y="117" width="0.1699%" height="15" fill="rgb(221,200,47)"/><text x="23.8615%" y="127.50"></text></g><g><title>death_checking (94,881 samples, 0.19%)</title><rect x="23.8356%" y="133" width="0.1906%" height="15" fill="rgb(226,26,5)"/><text x="24.0856%" y="143.50"></text></g><g><title>item_attrs (56,051 samples, 0.11%)</title><rect x="23.9136%" y="117" width="0.1126%" height="15" fill="rgb(249,33,26)"/><text x="24.1636%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (55,381 samples, 0.11%)</title><rect x="23.9149%" y="101" width="0.1113%" height="15" fill="rgb(235,183,28)"/><text x="24.1649%" y="111.50"></text></g><g><title>crate_lints (459,125 samples, 0.92%)</title><rect x="24.0285%" y="117" width="0.9225%" height="15" fill="rgb(221,5,38)"/><text x="24.2785%" y="127.50"></text></g><g><title>type_of (256,212 samples, 0.51%)</title><rect x="24.4362%" y="101" width="0.5148%" height="15" fill="rgb(247,18,42)"/><text x="24.6862%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (175,621 samples, 0.35%)</title><rect x="24.5981%" y="85" width="0.3529%" height="15" fill="rgb(241,131,45)"/><text x="24.8481%" y="95.50"></text></g><g><title>lint_checking (502,065 samples, 1.01%)</title><rect x="24.0262%" y="133" width="1.0088%" height="15" fill="rgb(249,31,29)"/><text x="24.2762%" y="143.50"></text></g><g><title>misc_checking_3 (713,408 samples, 1.43%)</title><rect x="23.7813%" y="149" width="1.4334%" height="15" fill="rgb(225,111,53)"/><text x="24.0313%" y="159.50"></text></g><g><title>param_env (77,591 samples, 0.16%)</title><rect x="25.3736%" y="101" width="0.1559%" height="15" fill="rgb(238,160,17)"/><text x="25.6236%" y="111.50"></text></g><g><title>impl_parent (527,913 samples, 1.06%)</title><rect x="27.4341%" y="85" width="1.0607%" height="15" fill="rgb(214,148,48)"/><text x="27.6841%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (276,883 samples, 0.56%)</title><rect x="27.9384%" y="69" width="0.5563%" height="15" fill="rgb(232,36,49)"/><text x="28.1884%" y="79.50"></text></g><g><title>impl_trait_ref (1,364,418 samples, 2.74%)</title><rect x="28.4948%" y="85" width="2.7415%" height="15" fill="rgb(209,103,24)"/><text x="28.7448%" y="95.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,108,674 samples, 2.23%)</title><rect x="29.0086%" y="69" width="2.2276%" height="15" fill="rgb(229,88,8)"/><text x="29.2586%" y="79.50">m..</text></g><g><title>coherent_trait (3,144,714 samples, 6.32%)</title><rect x="25.2770%" y="117" width="6.3185%" height="15" fill="rgb(213,181,19)"/><text x="25.5270%" y="127.50">coherent..</text></g><g><title>specialization_graph_of (3,019,063 samples, 6.07%)</title><rect x="25.5295%" y="101" width="6.0661%" height="15" fill="rgb(254,191,54)"/><text x="25.7795%" y="111.50">speciali..</text></g><g><title>trait_impls_of (177,762 samples, 0.36%)</title><rect x="31.2384%" y="85" width="0.3572%" height="15" fill="rgb(241,83,37)"/><text x="31.4884%" y="95.50"></text></g><g><title>coherence_checking (3,174,064 samples, 6.38%)</title><rect x="25.2580%" y="133" width="6.3775%" height="15" fill="rgb(233,36,39)"/><text x="25.5080%" y="143.50">coherenc..</text></g><g><title>evaluate_obligation (158,771 samples, 0.32%)</title><rect x="33.4917%" y="85" width="0.3190%" height="15" fill="rgb(226,3,54)"/><text x="33.7417%" y="95.50"></text></g><g><title>trait_impls_of (59,311 samples, 0.12%)</title><rect x="33.6915%" y="69" width="0.1192%" height="15" fill="rgb(245,192,40)"/><text x="33.9415%" y="79.50"></text></g><g><title>associated_item (58,020 samples, 0.12%)</title><rect x="33.9417%" y="53" width="0.1166%" height="15" fill="rgb(238,167,29)"/><text x="34.1917%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (57,480 samples, 0.12%)</title><rect x="33.9428%" y="37" width="0.1155%" height="15" fill="rgb(232,182,51)"/><text x="34.1928%" y="47.50"></text></g><g><title>impl_item_implementor_ids (65,321 samples, 0.13%)</title><rect x="33.9365%" y="85" width="0.1312%" height="15" fill="rgb(231,60,39)"/><text x="34.1865%" y="95.50"></text></g><g><title>associated_items (64,381 samples, 0.13%)</title><rect x="33.9384%" y="69" width="0.1294%" height="15" fill="rgb(208,69,12)"/><text x="34.1884%" y="79.50"></text></g><g><title>item_bodies_checking (1,315,834 samples, 2.64%)</title><rect x="31.6704%" y="133" width="2.6438%" height="15" fill="rgb(235,93,37)"/><text x="31.9204%" y="143.50">it..</text></g><g><title>typeck_item_bodies (1,314,054 samples, 2.64%)</title><rect x="31.6739%" y="117" width="2.6403%" height="15" fill="rgb(213,116,39)"/><text x="31.9239%" y="127.50">ty..</text></g><g><title>typeck (1,308,104 samples, 2.63%)</title><rect x="31.6859%" y="101" width="2.6283%" height="15" fill="rgb(222,207,29)"/><text x="31.9359%" y="111.50">ty..</text></g><g><title>item_types_checking (106,131 samples, 0.21%)</title><rect x="34.3142%" y="133" width="0.2132%" height="15" fill="rgb(206,96,30)"/><text x="34.5642%" y="143.50"></text></g><g><title>check_mod_item_types (104,501 samples, 0.21%)</title><rect x="34.3175%" y="117" width="0.2100%" height="15" fill="rgb(218,138,4)"/><text x="34.5675%" y="127.50"></text></g><g><title>fn_sig (71,162 samples, 0.14%)</title><rect x="34.6339%" y="101" width="0.1430%" height="15" fill="rgb(250,191,14)"/><text x="34.8839%" y="111.50"></text></g><g><title>generics_of (68,800 samples, 0.14%)</title><rect x="34.7769%" y="101" width="0.1382%" height="15" fill="rgb(239,60,40)"/><text x="35.0269%" y="111.50"></text></g><g><title>predicates_of (57,820 samples, 0.12%)</title><rect x="34.9541%" y="101" width="0.1162%" height="15" fill="rgb(206,27,48)"/><text x="35.2041%" y="111.50"></text></g><g><title>predicates_defined_on (52,770 samples, 0.11%)</title><rect x="34.9643%" y="85" width="0.1060%" height="15" fill="rgb(225,35,8)"/><text x="35.2143%" y="95.50"></text></g><g><title>type_collecting (310,603 samples, 0.62%)</title><rect x="34.5280%" y="133" width="0.6241%" height="15" fill="rgb(250,213,24)"/><text x="34.7780%" y="143.50"></text></g><g><title>collect_mod_item_types (305,503 samples, 0.61%)</title><rect x="34.5382%" y="117" width="0.6138%" height="15" fill="rgb(247,123,22)"/><text x="34.7882%" y="127.50"></text></g><g><title>evaluate_obligation (83,851 samples, 0.17%)</title><rect x="35.3773%" y="101" width="0.1685%" height="15" fill="rgb(231,138,38)"/><text x="35.6273%" y="111.50"></text></g><g><title>check_impl_item_well_formed (247,533 samples, 0.50%)</title><rect x="35.1833%" y="117" width="0.4974%" height="15" fill="rgb(231,145,46)"/><text x="35.4333%" y="127.50"></text></g><g><title>evaluate_obligation (52,252 samples, 0.10%)</title><rect x="36.0338%" y="101" width="0.1050%" height="15" fill="rgb(251,118,11)"/><text x="36.2838%" y="111.50"></text></g><g><title>analysis (8,037,086 samples, 16.15%)</title><rect x="20.2400%" y="165" width="16.1486%" height="15" fill="rgb(217,147,25)"/><text x="20.4900%" y="175.50">analysis</text></g><g><title>type_check_crate (5,561,179 samples, 11.17%)</title><rect x="25.2147%" y="149" width="11.1738%" height="15" fill="rgb(247,81,37)"/><text x="25.4647%" y="159.50">type_check_crate</text></g><g><title>wf_checking (614,757 samples, 1.24%)</title><rect x="35.1534%" y="133" width="1.2352%" height="15" fill="rgb(209,12,38)"/><text x="35.4034%" y="143.50"></text></g><g><title>check_item_well_formed (352,324 samples, 0.71%)</title><rect x="35.6807%" y="117" width="0.7079%" height="15" fill="rgb(227,1,9)"/><text x="35.9307%" y="127.50"></text></g><g><title>is_unpin_raw (86,481 samples, 0.17%)</title><rect x="39.1708%" y="117" width="0.1738%" height="15" fill="rgb(248,47,43)"/><text x="39.4208%" y="127.50"></text></g><g><title>evaluate_obligation (84,261 samples, 0.17%)</title><rect x="39.1753%" y="101" width="0.1693%" height="15" fill="rgb(221,10,30)"/><text x="39.4253%" y="111.50"></text></g><g><title>layout_of (56,990 samples, 0.11%)</title><rect x="39.3446%" y="117" width="0.1145%" height="15" fill="rgb(210,229,1)"/><text x="39.5946%" y="127.50"></text></g><g><title>fn_abi_of_instance (267,183 samples, 0.54%)</title><rect x="38.9611%" y="133" width="0.5368%" height="15" fill="rgb(222,148,37)"/><text x="39.2111%" y="143.50"></text></g><g><title>codegen_module (1,218,704 samples, 2.45%)</title><rect x="37.1604%" y="149" width="2.4487%" height="15" fill="rgb(234,67,33)"/><text x="37.4104%" y="159.50">co..</text></g><g><title>is_reachable_non_generic (64,441 samples, 0.13%)</title><rect x="39.7325%" y="101" width="0.1295%" height="15" fill="rgb(247,98,35)"/><text x="39.9825%" y="111.50"></text></g><g><title>reachable_non_generics (63,441 samples, 0.13%)</title><rect x="39.7345%" y="85" width="0.1275%" height="15" fill="rgb(247,138,52)"/><text x="39.9845%" y="95.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (62,381 samples, 0.13%)</title><rect x="39.7366%" y="69" width="0.1253%" height="15" fill="rgb(213,79,30)"/><text x="39.9866%" y="79.50"></text></g><g><title>layout_of (67,920 samples, 0.14%)</title><rect x="40.2363%" y="85" width="0.1365%" height="15" fill="rgb(246,177,23)"/><text x="40.4863%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (144,042 samples, 0.29%)</title><rect x="40.3727%" y="85" width="0.2894%" height="15" fill="rgb(230,62,27)"/><text x="40.6227%" y="95.50"></text></g><g><title>eval_to_const_value_raw (93,661 samples, 0.19%)</title><rect x="40.6874%" y="69" width="0.1882%" height="15" fill="rgb(216,154,8)"/><text x="40.9374%" y="79.50"></text></g><g><title>eval_to_const_value_raw (86,291 samples, 0.17%)</title><rect x="40.7022%" y="53" width="0.1734%" height="15" fill="rgb(244,35,45)"/><text x="40.9522%" y="63.50"></text></g><g><title>eval_to_allocation_raw (80,721 samples, 0.16%)</title><rect x="40.7134%" y="37" width="0.1622%" height="15" fill="rgb(251,115,12)"/><text x="40.9634%" y="47.50"></text></g><g><title>optimized_mir (512,975 samples, 1.03%)</title><rect x="39.8620%" y="101" width="1.0307%" height="15" fill="rgb(240,54,50)"/><text x="40.1120%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (114,721 samples, 0.23%)</title><rect x="40.6621%" y="85" width="0.2305%" height="15" fill="rgb(233,84,52)"/><text x="40.9121%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (615,676 samples, 1.24%)</title><rect x="39.6706%" y="117" width="1.2371%" height="15" fill="rgb(207,117,47)"/><text x="39.9206%" y="127.50"></text></g><g><title>monomorphization_collector (641,887 samples, 1.29%)</title><rect x="39.6667%" y="133" width="1.2897%" height="15" fill="rgb(249,43,39)"/><text x="39.9167%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (698,718 samples, 1.40%)</title><rect x="39.6100%" y="149" width="1.4039%" height="15" fill="rgb(209,38,44)"/><text x="39.8600%" y="159.50"></text></g><g><title>codegen_crate (2,314,185 samples, 4.65%)</title><rect x="36.3987%" y="165" width="4.6498%" height="15" fill="rgb(236,212,23)"/><text x="36.6487%" y="175.50">codeg..</text></g><g><title>codegen_module_optimize (3,784,820 samples, 7.60%)</title><rect x="41.0485%" y="165" width="7.6047%" height="15" fill="rgb(242,79,21)"/><text x="41.2985%" y="175.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (3,377,186 samples, 6.79%)</title><rect x="41.8675%" y="149" width="6.7856%" height="15" fill="rgb(211,96,35)"/><text x="42.1175%" y="159.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (1,388,954 samples, 2.79%)</title><rect x="49.1522%" y="149" width="2.7908%" height="15" fill="rgb(253,215,40)"/><text x="49.4022%" y="159.50">LL..</text></g><g><title>LLVM_module_codegen (3,911,352 samples, 7.86%)</title><rect x="51.9429%" y="149" width="7.8589%" height="15" fill="rgb(211,81,21)"/><text x="52.1929%" y="159.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (3,859,292 samples, 7.75%)</title><rect x="52.0475%" y="133" width="7.7543%" height="15" fill="rgb(208,190,38)"/><text x="52.2975%" y="143.50">LLVM_module..</text></g><g><title>codegen_module_perform_lto (5,580,079 samples, 11.21%)</title><rect x="48.6532%" y="165" width="11.2118%" height="15" fill="rgb(235,213,38)"/><text x="48.9032%" y="175.50">codegen_module_pe..</text></g><g><title>macro_expand_crate (3,434,317 samples, 6.90%)</title><rect x="60.1905%" y="149" width="6.9004%" height="15" fill="rgb(237,122,38)"/><text x="60.4405%" y="159.50">macro_exp..</text></g><g><title>expand_crate (3,424,007 samples, 6.88%)</title><rect x="60.2112%" y="133" width="6.8797%" height="15" fill="rgb(244,218,35)"/><text x="60.4612%" y="143.50">expand_cr..</text></g><g><title>metadata_register_crate (98,851 samples, 0.20%)</title><rect x="66.8923%" y="117" width="0.1986%" height="15" fill="rgb(240,68,47)"/><text x="67.1423%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (52,381 samples, 0.11%)</title><rect x="67.0949%" y="149" width="0.1052%" height="15" fill="rgb(210,16,53)"/><text x="67.3449%" y="159.50"></text></g><g><title>finalize_macro_resolutions (85,861 samples, 0.17%)</title><rect x="67.2206%" y="133" width="0.1725%" height="15" fill="rgb(235,124,12)"/><text x="67.4706%" y="143.50"></text></g><g><title>late_resolve_crate (3,384,016 samples, 6.80%)</title><rect x="67.3931%" y="133" width="6.7994%" height="15" fill="rgb(224,169,11)"/><text x="67.6431%" y="143.50">late_reso..</text></g><g><title>configure_and_expand (7,152,396 samples, 14.37%)</title><rect x="59.8650%" y="165" width="14.3710%" height="15" fill="rgb(250,166,2)"/><text x="60.1150%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (3,501,687 samples, 7.04%)</title><rect x="67.2002%" y="149" width="7.0358%" height="15" fill="rgb(242,216,29)"/><text x="67.4502%" y="159.50">resolve_c..</text></g><g><title>early_lint_checks (63,540 samples, 0.13%)</title><rect x="74.3362%" y="165" width="0.1277%" height="15" fill="rgb(230,116,27)"/><text x="74.5862%" y="175.50"></text></g><g><title>free_global_ctxt (1,902,931 samples, 3.82%)</title><rect x="74.4638%" y="165" width="3.8235%" height="15" fill="rgb(228,99,48)"/><text x="74.7138%" y="175.50">free..</text></g><g><title>crate_hash (57,111 samples, 0.11%)</title><rect x="78.6432%" y="149" width="0.1148%" height="15" fill="rgb(253,11,6)"/><text x="78.8932%" y="159.50"></text></g><g><title>exported_symbols (76,021 samples, 0.15%)</title><rect x="78.7783%" y="149" width="0.1527%" height="15" fill="rgb(247,143,39)"/><text x="79.0283%" y="159.50"></text></g><g><title>optimized_mir (136,382 samples, 0.27%)</title><rect x="78.9707%" y="149" width="0.2740%" height="15" fill="rgb(236,97,10)"/><text x="79.2207%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (57,031 samples, 0.11%)</title><rect x="79.1301%" y="133" width="0.1146%" height="15" fill="rgb(233,208,19)"/><text x="79.3801%" y="143.50"></text></g><g><title>generate_crate_metadata (484,615 samples, 0.97%)</title><rect x="78.2873%" y="165" width="0.9737%" height="15" fill="rgb(216,164,2)"/><text x="78.5373%" y="175.50"></text></g><g><title>hir_lowering (227,783 samples, 0.46%)</title><rect x="79.2610%" y="165" width="0.4577%" height="15" fill="rgb(220,129,5)"/><text x="79.5110%" y="175.50"></text></g><g><title>finish_ongoing_codegen (7,348,848 samples, 14.77%)</title><rect x="79.7522%" y="149" width="14.7657%" height="15" fill="rgb(242,17,10)"/><text x="80.0022%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (796,319 samples, 1.60%)</title><rect x="94.5179%" y="149" width="1.6000%" height="15" fill="rgb(242,107,0)"/><text x="94.7679%" y="159.50"></text></g><g><title>link_binary (788,959 samples, 1.59%)</title><rect x="94.5327%" y="133" width="1.5852%" height="15" fill="rgb(251,28,31)"/><text x="94.7827%" y="143.50"></text></g><g><title>link_rlib (434,804 samples, 0.87%)</title><rect x="95.2443%" y="117" width="0.8736%" height="15" fill="rgb(233,223,10)"/><text x="95.4943%" y="127.50"></text></g><g><title>link (8,172,287 samples, 16.42%)</title><rect x="79.7187%" y="165" width="16.4202%" height="15" fill="rgb(215,21,27)"/><text x="79.9687%" y="175.50">link</text></g><g><title>parse_crate (761,498 samples, 1.53%)</title><rect x="96.1389%" y="165" width="1.5300%" height="15" fill="rgb(232,23,21)"/><text x="96.3889%" y="175.50"></text></g><g><title>prepare_outputs (192,552 samples, 0.39%)</title><rect x="97.6760%" y="165" width="0.3869%" height="15" fill="rgb(244,5,23)"/><text x="97.9260%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (586,776 samples, 1.18%)</title><rect x="98.0628%" y="165" width="1.1790%" height="15" fill="rgb(226,81,46)"/><text x="98.3128%" y="175.50"></text></g><g><title>setup_global_ctxt (59,121 samples, 0.12%)</title><rect x="99.2437%" y="165" width="0.1188%" height="15" fill="rgb(247,70,30)"/><text x="99.4937%" y="175.50"></text></g><g><title>all (49,769,689 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (49,769,689 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (317,273 samples, 0.64%)</title><rect x="99.3625%" y="165" width="0.6375%" height="15" fill="rgb(223,113,26)"/><text x="99.6125%" y="175.50"></text></g></svg></svg>