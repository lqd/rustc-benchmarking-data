<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,146,550 samples, 11.36%)</title><rect x="0.3266%" y="293" width="11.3631%" height="15" fill="rgb(227,0,7)"/><text x="0.5766%" y="303.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (156,922 samples, 0.10%)</title><rect x="11.5857%" y="277" width="0.1040%" height="15" fill="rgb(217,0,24)"/><text x="11.8357%" y="287.50"></text></g><g><title>param_env (222,894 samples, 0.15%)</title><rect x="16.0902%" y="213" width="0.1477%" height="15" fill="rgb(221,193,54)"/><text x="16.3402%" y="223.50"></text></g><g><title>needs_drop_raw (824,450 samples, 0.55%)</title><rect x="17.3343%" y="181" width="0.5464%" height="15" fill="rgb(248,212,6)"/><text x="17.5843%" y="191.50"></text></g><g><title>is_copy_raw (603,798 samples, 0.40%)</title><rect x="17.4806%" y="165" width="0.4001%" height="15" fill="rgb(208,68,35)"/><text x="17.7306%" y="175.50"></text></g><g><title>evaluate_obligation (495,707 samples, 0.33%)</title><rect x="17.5522%" y="149" width="0.3285%" height="15" fill="rgb(232,128,0)"/><text x="17.8022%" y="159.50"></text></g><g><title>specialization_graph_of (187,102 samples, 0.12%)</title><rect x="18.0635%" y="165" width="0.1240%" height="15" fill="rgb(207,160,47)"/><text x="18.3135%" y="175.50"></text></g><g><title>resolve_instance (503,396 samples, 0.33%)</title><rect x="17.8807%" y="181" width="0.3336%" height="15" fill="rgb(228,23,34)"/><text x="18.1307%" y="191.50"></text></g><g><title>thir_body (445,795 samples, 0.30%)</title><rect x="18.2262%" y="181" width="0.2954%" height="15" fill="rgb(218,30,26)"/><text x="18.4762%" y="191.50"></text></g><g><title>mir_const (4,036,728 samples, 2.68%)</title><rect x="15.8542%" y="229" width="2.6752%" height="15" fill="rgb(220,122,19)"/><text x="16.1042%" y="239.50">mi..</text></g><g><title>unsafety_check_result (3,457,699 samples, 2.29%)</title><rect x="16.2379%" y="213" width="2.2914%" height="15" fill="rgb(250,228,42)"/><text x="16.4879%" y="223.50">u..</text></g><g><title>mir_built (3,092,847 samples, 2.05%)</title><rect x="16.4797%" y="197" width="2.0496%" height="15" fill="rgb(240,193,28)"/><text x="16.7297%" y="207.50">m..</text></g><g><title>mir_promoted (4,436,583 samples, 2.94%)</title><rect x="15.6012%" y="245" width="2.9401%" height="15" fill="rgb(216,20,37)"/><text x="15.8512%" y="255.50">mi..</text></g><g><title>type_op_ascribe_user_type (214,493 samples, 0.14%)</title><rect x="18.5413%" y="245" width="0.1421%" height="15" fill="rgb(206,188,39)"/><text x="18.7913%" y="255.50"></text></g><g><title>type_op_normalize_fn_sig (188,513 samples, 0.12%)</title><rect x="18.6835%" y="245" width="0.1249%" height="15" fill="rgb(217,207,13)"/><text x="18.9335%" y="255.50"></text></g><g><title>type_op_prove_predicate (1,603,012 samples, 1.06%)</title><rect x="18.8286%" y="245" width="1.0623%" height="15" fill="rgb(231,73,38)"/><text x="19.0786%" y="255.50"></text></g><g><title>MIR_borrow_checking (12,178,555 samples, 8.07%)</title><rect x="11.8237%" y="277" width="8.0708%" height="15" fill="rgb(225,20,46)"/><text x="12.0737%" y="287.50">MIR_borrow_..</text></g><g><title>mir_borrowck (12,112,325 samples, 8.03%)</title><rect x="11.8676%" y="261" width="8.0269%" height="15" fill="rgb(210,31,41)"/><text x="12.1176%" y="271.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (154,303 samples, 0.10%)</title><rect x="20.2168%" y="213" width="0.1023%" height="15" fill="rgb(221,200,47)"/><text x="20.4668%" y="223.50"></text></g><g><title>should_inherit_track_caller (229,723 samples, 0.15%)</title><rect x="20.1701%" y="229" width="0.1522%" height="15" fill="rgb(226,26,5)"/><text x="20.4201%" y="239.50"></text></g><g><title>codegen_fn_attrs (374,125 samples, 0.25%)</title><rect x="20.0877%" y="245" width="0.2479%" height="15" fill="rgb(249,33,26)"/><text x="20.3377%" y="255.50"></text></g><g><title>check_mod_attrs (514,505 samples, 0.34%)</title><rect x="19.9947%" y="261" width="0.3410%" height="15" fill="rgb(235,183,28)"/><text x="20.2447%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (307,613 samples, 0.20%)</title><rect x="20.4147%" y="261" width="0.2039%" height="15" fill="rgb(221,5,38)"/><text x="20.6647%" y="271.50"></text></g><g><title>misc_checking_1 (999,251 samples, 0.66%)</title><rect x="19.9830%" y="277" width="0.6622%" height="15" fill="rgb(247,18,42)"/><text x="20.2330%" y="287.50"></text></g><g><title>liveness_and_intrinsic_checking (363,094 samples, 0.24%)</title><rect x="20.6462%" y="261" width="0.2406%" height="15" fill="rgb(241,131,45)"/><text x="20.8962%" y="271.50"></text></g><g><title>check_mod_liveness (305,184 samples, 0.20%)</title><rect x="20.6846%" y="245" width="0.2022%" height="15" fill="rgb(249,31,29)"/><text x="20.9346%" y="255.50"></text></g><g><title>misc_checking_2 (674,467 samples, 0.45%)</title><rect x="20.6452%" y="277" width="0.4470%" height="15" fill="rgb(225,111,53)"/><text x="20.8952%" y="287.50"></text></g><g><title>match_checking (309,883 samples, 0.21%)</title><rect x="20.8868%" y="261" width="0.2054%" height="15" fill="rgb(238,160,17)"/><text x="21.1368%" y="271.50"></text></g><g><title>check_match (290,553 samples, 0.19%)</title><rect x="20.8997%" y="245" width="0.1926%" height="15" fill="rgb(214,148,48)"/><text x="21.1497%" y="255.50"></text></g><g><title>death_checking (258,053 samples, 0.17%)</title><rect x="21.1901%" y="261" width="0.1710%" height="15" fill="rgb(232,36,49)"/><text x="21.4401%" y="271.50"></text></g><g><title>crate_lints (2,477,757 samples, 1.64%)</title><rect x="21.3620%" y="245" width="1.6420%" height="15" fill="rgb(209,103,24)"/><text x="21.6120%" y="255.50"></text></g><g><title>type_of (1,306,292 samples, 0.87%)</title><rect x="22.1384%" y="229" width="0.8657%" height="15" fill="rgb(229,88,8)"/><text x="22.3884%" y="239.50"></text></g><g><title>metadata_decode_entry_type_of (1,012,539 samples, 0.67%)</title><rect x="22.3330%" y="213" width="0.6710%" height="15" fill="rgb(213,181,19)"/><text x="22.5830%" y="223.50"></text></g><g><title>layout_of (288,635 samples, 0.19%)</title><rect x="23.2575%" y="101" width="0.1913%" height="15" fill="rgb(254,191,54)"/><text x="23.5075%" y="111.50"></text></g><g><title>layout_of (353,725 samples, 0.23%)</title><rect x="23.2349%" y="117" width="0.2344%" height="15" fill="rgb(241,83,37)"/><text x="23.4849%" y="127.50"></text></g><g><title>layout_of (389,795 samples, 0.26%)</title><rect x="23.2170%" y="133" width="0.2583%" height="15" fill="rgb(233,36,39)"/><text x="23.4670%" y="143.50"></text></g><g><title>layout_of (421,575 samples, 0.28%)</title><rect x="23.2004%" y="197" width="0.2794%" height="15" fill="rgb(226,3,54)"/><text x="23.4504%" y="207.50"></text></g><g><title>layout_of (416,215 samples, 0.28%)</title><rect x="23.2040%" y="181" width="0.2758%" height="15" fill="rgb(245,192,40)"/><text x="23.4540%" y="191.50"></text></g><g><title>layout_of (410,845 samples, 0.27%)</title><rect x="23.2076%" y="165" width="0.2723%" height="15" fill="rgb(238,167,29)"/><text x="23.4576%" y="175.50"></text></g><g><title>layout_of (405,525 samples, 0.27%)</title><rect x="23.2111%" y="149" width="0.2687%" height="15" fill="rgb(232,182,51)"/><text x="23.4611%" y="159.50"></text></g><g><title>lint_checking (3,197,965 samples, 2.12%)</title><rect x="21.3611%" y="261" width="2.1193%" height="15" fill="rgb(231,60,39)"/><text x="21.6111%" y="271.50">l..</text></g><g><title>module_lints (718,878 samples, 0.48%)</title><rect x="23.0041%" y="245" width="0.4764%" height="15" fill="rgb(208,69,12)"/><text x="23.2541%" y="255.50"></text></g><g><title>lint_mod (716,548 samples, 0.47%)</title><rect x="23.0056%" y="229" width="0.4749%" height="15" fill="rgb(235,93,37)"/><text x="23.2556%" y="239.50"></text></g><g><title>layout_of (430,535 samples, 0.29%)</title><rect x="23.1951%" y="213" width="0.2853%" height="15" fill="rgb(213,116,39)"/><text x="23.4451%" y="223.50"></text></g><g><title>privacy_access_levels (257,142 samples, 0.17%)</title><rect x="23.4805%" y="261" width="0.1704%" height="15" fill="rgb(222,207,29)"/><text x="23.7305%" y="271.50"></text></g><g><title>privacy_checking_modules (640,808 samples, 0.42%)</title><rect x="23.6509%" y="261" width="0.4247%" height="15" fill="rgb(206,96,30)"/><text x="23.9009%" y="271.50"></text></g><g><title>check_mod_privacy (638,978 samples, 0.42%)</title><rect x="23.6521%" y="245" width="0.4235%" height="15" fill="rgb(218,138,4)"/><text x="23.9021%" y="255.50"></text></g><g><title>misc_checking_3 (4,512,820 samples, 2.99%)</title><rect x="21.0922%" y="277" width="2.9907%" height="15" fill="rgb(250,191,14)"/><text x="21.3422%" y="287.50">mis..</text></g><g><title>impl_parent (2,454,123 samples, 1.63%)</title><rect x="26.4450%" y="213" width="1.6264%" height="15" fill="rgb(239,60,40)"/><text x="26.6950%" y="223.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,392,456 samples, 0.92%)</title><rect x="27.1486%" y="197" width="0.9228%" height="15" fill="rgb(206,27,48)"/><text x="27.3986%" y="207.50"></text></g><g><title>impl_trait_ref (5,704,558 samples, 3.78%)</title><rect x="28.0714%" y="213" width="3.7804%" height="15" fill="rgb(225,35,8)"/><text x="28.3214%" y="223.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,864,556 samples, 3.22%)</title><rect x="28.6281%" y="197" width="3.2238%" height="15" fill="rgb(250,213,24)"/><text x="28.8781%" y="207.50">met..</text></g><g><title>trait_impls_of (868,599 samples, 0.58%)</title><rect x="31.8654%" y="213" width="0.5756%" height="15" fill="rgb(247,123,22)"/><text x="32.1154%" y="223.50"></text></g><g><title>implementations_of_trait (265,711 samples, 0.18%)</title><rect x="32.2649%" y="197" width="0.1761%" height="15" fill="rgb(231,138,38)"/><text x="32.5149%" y="207.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (176,820 samples, 0.12%)</title><rect x="32.3238%" y="181" width="0.1172%" height="15" fill="rgb(231,145,46)"/><text x="32.5738%" y="191.50"></text></g><g><title>coherent_trait (12,542,729 samples, 8.31%)</title><rect x="24.1293%" y="245" width="8.3121%" height="15" fill="rgb(251,118,11)"/><text x="24.3793%" y="255.50">coherent_tra..</text></g><g><title>specialization_graph_of (12,523,759 samples, 8.30%)</title><rect x="24.1419%" y="229" width="8.2996%" height="15" fill="rgb(217,147,25)"/><text x="24.3919%" y="239.50">specializati..</text></g><g><title>coherence_checking (12,610,610 samples, 8.36%)</title><rect x="24.1169%" y="261" width="8.3571%" height="15" fill="rgb(247,81,37)"/><text x="24.3669%" y="271.50">coherence_ch..</text></g><g><title>associated_item (190,333 samples, 0.13%)</title><rect x="36.5556%" y="197" width="0.1261%" height="15" fill="rgb(209,12,38)"/><text x="36.8056%" y="207.50"></text></g><g><title>associated_items (291,345 samples, 0.19%)</title><rect x="36.5014%" y="213" width="0.1931%" height="15" fill="rgb(227,1,9)"/><text x="36.7514%" y="223.50"></text></g><g><title>dropck_outlives (246,162 samples, 0.16%)</title><rect x="36.7165%" y="213" width="0.1631%" height="15" fill="rgb(248,47,43)"/><text x="36.9665%" y="223.50"></text></g><g><title>evaluate_obligation (1,135,163 samples, 0.75%)</title><rect x="36.8796%" y="213" width="0.7523%" height="15" fill="rgb(221,10,30)"/><text x="37.1296%" y="223.50"></text></g><g><title>trait_impls_of (356,675 samples, 0.24%)</title><rect x="37.3955%" y="197" width="0.2364%" height="15" fill="rgb(210,229,1)"/><text x="37.6455%" y="207.50"></text></g><g><title>method_autoderef_steps (159,333 samples, 0.11%)</title><rect x="37.8465%" y="213" width="0.1056%" height="15" fill="rgb(222,148,37)"/><text x="38.0965%" y="223.50"></text></g><g><title>predicates_of (182,012 samples, 0.12%)</title><rect x="38.0543%" y="213" width="0.1206%" height="15" fill="rgb(234,67,33)"/><text x="38.3043%" y="223.50"></text></g><g><title>evaluate_obligation (546,487 samples, 0.36%)</title><rect x="40.9840%" y="197" width="0.3622%" height="15" fill="rgb(247,98,35)"/><text x="41.2340%" y="207.50"></text></g><g><title>is_copy_raw (228,501 samples, 0.15%)</title><rect x="41.4072%" y="197" width="0.1514%" height="15" fill="rgb(247,138,52)"/><text x="41.6572%" y="207.50"></text></g><g><title>evaluate_obligation (177,031 samples, 0.12%)</title><rect x="41.4413%" y="181" width="0.1173%" height="15" fill="rgb(213,79,30)"/><text x="41.6913%" y="191.50"></text></g><g><title>method_autoderef_steps (200,672 samples, 0.13%)</title><rect x="41.5625%" y="197" width="0.1330%" height="15" fill="rgb(246,177,23)"/><text x="41.8125%" y="207.50"></text></g><g><title>typeck (5,335,849 samples, 3.54%)</title><rect x="38.2098%" y="213" width="3.5361%" height="15" fill="rgb(230,62,27)"/><text x="38.4598%" y="223.50">typ..</text></g><g><title>item_bodies_checking (13,982,395 samples, 9.27%)</title><rect x="32.4902%" y="261" width="9.2662%" height="15" fill="rgb(216,154,8)"/><text x="32.7402%" y="271.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (13,978,735 samples, 9.26%)</title><rect x="32.4926%" y="245" width="9.2638%" height="15" fill="rgb(244,35,45)"/><text x="32.7426%" y="255.50">typeck_item_b..</text></g><g><title>typeck (13,939,435 samples, 9.24%)</title><rect x="32.5187%" y="229" width="9.2377%" height="15" fill="rgb(251,115,12)"/><text x="32.7687%" y="239.50">typeck</text></g><g><title>mir_borrowck (422,225 samples, 0.28%)</title><rect x="44.7148%" y="181" width="0.2798%" height="15" fill="rgb(240,54,50)"/><text x="44.9648%" y="191.50"></text></g><g><title>mir_promoted (233,034 samples, 0.15%)</title><rect x="44.9946%" y="181" width="0.1544%" height="15" fill="rgb(233,84,52)"/><text x="45.2446%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (324,044 samples, 0.21%)</title><rect x="45.1491%" y="181" width="0.2147%" height="15" fill="rgb(207,117,47)"/><text x="45.3991%" y="191.50"></text></g><g><title>normalize_projection_ty (213,582 samples, 0.14%)</title><rect x="45.2223%" y="165" width="0.1415%" height="15" fill="rgb(249,43,39)"/><text x="45.4723%" y="175.50"></text></g><g><title>mir_borrowck (3,625,741 samples, 2.40%)</title><rect x="43.3904%" y="197" width="2.4028%" height="15" fill="rgb(209,38,44)"/><text x="43.6404%" y="207.50">mi..</text></g><g><title>type_op_prove_predicate (594,356 samples, 0.39%)</title><rect x="45.3994%" y="181" width="0.3939%" height="15" fill="rgb(236,212,23)"/><text x="45.6494%" y="191.50"></text></g><g><title>adt_def (451,284 samples, 0.30%)</title><rect x="49.5984%" y="85" width="0.2991%" height="15" fill="rgb(242,79,21)"/><text x="49.8484%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (449,364 samples, 0.30%)</title><rect x="49.5996%" y="69" width="0.2978%" height="15" fill="rgb(211,96,35)"/><text x="49.8496%" y="79.50"></text></g><g><title>item_attrs (424,214 samples, 0.28%)</title><rect x="49.6163%" y="53" width="0.2811%" height="15" fill="rgb(253,215,40)"/><text x="49.8663%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (421,914 samples, 0.28%)</title><rect x="49.6178%" y="37" width="0.2796%" height="15" fill="rgb(211,81,21)"/><text x="49.8678%" y="47.50"></text></g><g><title>adt_dtorck_constraint (663,036 samples, 0.44%)</title><rect x="49.5727%" y="101" width="0.4394%" height="15" fill="rgb(208,190,38)"/><text x="49.8227%" y="111.50"></text></g><g><title>dropck_outlives (936,269 samples, 0.62%)</title><rect x="49.4697%" y="117" width="0.6205%" height="15" fill="rgb(235,213,38)"/><text x="49.7197%" y="127.50"></text></g><g><title>evaluate_obligation (496,625 samples, 0.33%)</title><rect x="50.0923%" y="117" width="0.3291%" height="15" fill="rgb(237,122,38)"/><text x="50.3423%" y="127.50"></text></g><g><title>is_copy_raw (521,866 samples, 0.35%)</title><rect x="50.5319%" y="117" width="0.3458%" height="15" fill="rgb(244,218,35)"/><text x="50.7819%" y="127.50"></text></g><g><title>evaluate_obligation (470,655 samples, 0.31%)</title><rect x="50.5658%" y="101" width="0.3119%" height="15" fill="rgb(240,68,47)"/><text x="50.8158%" y="111.50"></text></g><g><title>trait_impls_of (189,692 samples, 0.13%)</title><rect x="50.7520%" y="85" width="0.1257%" height="15" fill="rgb(210,16,53)"/><text x="51.0020%" y="95.50"></text></g><g><title>mir_built (7,931,369 samples, 5.26%)</title><rect x="45.9336%" y="149" width="5.2562%" height="15" fill="rgb(235,124,12)"/><text x="46.1836%" y="159.50">mir_bu..</text></g><g><title>typeck (7,497,944 samples, 4.97%)</title><rect x="46.2208%" y="133" width="4.9689%" height="15" fill="rgb(224,169,11)"/><text x="46.4708%" y="143.50">typeck</text></g><g><title>needs_drop_raw (189,273 samples, 0.13%)</title><rect x="51.5284%" y="117" width="0.1254%" height="15" fill="rgb(250,166,2)"/><text x="51.7784%" y="127.50"></text></g><g><title>mir_built (762,718 samples, 0.51%)</title><rect x="51.2529%" y="133" width="0.5055%" height="15" fill="rgb(242,216,29)"/><text x="51.5029%" y="143.50"></text></g><g><title>mir_const (9,050,012 samples, 6.00%)</title><rect x="45.8473%" y="181" width="5.9975%" height="15" fill="rgb(230,116,27)"/><text x="46.0973%" y="191.50">mir_const</text></g><g><title>unsafety_check_result (8,947,970 samples, 5.93%)</title><rect x="45.9149%" y="165" width="5.9299%" height="15" fill="rgb(228,99,48)"/><text x="46.1649%" y="175.50">unsafety..</text></g><g><title>unsafety_check_result (988,371 samples, 0.65%)</title><rect x="51.1898%" y="149" width="0.6550%" height="15" fill="rgb(253,11,6)"/><text x="51.4398%" y="159.50"></text></g><g><title>mir_promoted (9,139,713 samples, 6.06%)</title><rect x="45.7932%" y="197" width="6.0569%" height="15" fill="rgb(247,143,39)"/><text x="46.0432%" y="207.50">mir_prom..</text></g><g><title>item_types_checking (15,551,473 samples, 10.31%)</title><rect x="41.7564%" y="261" width="10.3060%" height="15" fill="rgb(236,97,10)"/><text x="42.0064%" y="271.50">item_types_chec..</text></g><g><title>check_mod_item_types (15,547,783 samples, 10.30%)</title><rect x="41.7588%" y="245" width="10.3036%" height="15" fill="rgb(233,208,19)"/><text x="42.0088%" y="255.50">check_mod_item_..</text></g><g><title>type_of (14,099,147 samples, 9.34%)</title><rect x="42.7189%" y="229" width="9.3436%" height="15" fill="rgb(216,164,2)"/><text x="42.9689%" y="239.50">type_of</text></g><g><title>mir_borrowck (14,063,507 samples, 9.32%)</title><rect x="42.7425%" y="213" width="9.3200%" height="15" fill="rgb(220,129,5)"/><text x="42.9925%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (243,311 samples, 0.16%)</title><rect x="51.9012%" y="197" width="0.1612%" height="15" fill="rgb(242,17,10)"/><text x="52.1512%" y="207.50"></text></g><g><title>fn_sig (261,443 samples, 0.17%)</title><rect x="52.1956%" y="229" width="0.1733%" height="15" fill="rgb(242,107,0)"/><text x="52.4456%" y="239.50"></text></g><g><title>generics_of (215,281 samples, 0.14%)</title><rect x="52.3689%" y="229" width="0.1427%" height="15" fill="rgb(251,28,31)"/><text x="52.6189%" y="239.50"></text></g><g><title>late_bound_vars_map (269,601 samples, 0.18%)</title><rect x="52.7659%" y="181" width="0.1787%" height="15" fill="rgb(233,223,10)"/><text x="53.0159%" y="191.50"></text></g><g><title>resolve_lifetimes (258,621 samples, 0.17%)</title><rect x="52.7732%" y="165" width="0.1714%" height="15" fill="rgb(215,21,27)"/><text x="53.0232%" y="175.50"></text></g><g><title>explicit_predicates_of (555,753 samples, 0.37%)</title><rect x="52.6013%" y="197" width="0.3683%" height="15" fill="rgb(232,23,21)"/><text x="52.8513%" y="207.50"></text></g><g><title>predicates_of (908,408 samples, 0.60%)</title><rect x="52.5432%" y="229" width="0.6020%" height="15" fill="rgb(244,5,23)"/><text x="52.7932%" y="239.50"></text></g><g><title>predicates_defined_on (874,296 samples, 0.58%)</title><rect x="52.5658%" y="213" width="0.5794%" height="15" fill="rgb(226,81,46)"/><text x="52.8158%" y="223.50"></text></g><g><title>inferred_outlives_of (264,932 samples, 0.18%)</title><rect x="52.9696%" y="197" width="0.1756%" height="15" fill="rgb(247,70,30)"/><text x="53.2196%" y="207.50"></text></g><g><title>inferred_outlives_crate (251,102 samples, 0.17%)</title><rect x="52.9788%" y="181" width="0.1664%" height="15" fill="rgb(212,68,19)"/><text x="53.2288%" y="191.50"></text></g><g><title>type_collecting (1,721,169 samples, 1.14%)</title><rect x="52.0636%" y="261" width="1.1406%" height="15" fill="rgb(240,187,13)"/><text x="52.3136%" y="271.50"></text></g><g><title>collect_mod_item_types (1,714,089 samples, 1.14%)</title><rect x="52.0683%" y="245" width="1.1359%" height="15" fill="rgb(223,113,26)"/><text x="52.3183%" y="255.50"></text></g><g><title>adt_sized_constraint (186,162 samples, 0.12%)</title><rect x="54.6230%" y="213" width="0.1234%" height="15" fill="rgb(206,192,2)"/><text x="54.8730%" y="223.50"></text></g><g><title>evaluate_obligation (792,941 samples, 0.53%)</title><rect x="54.2968%" y="229" width="0.5255%" height="15" fill="rgb(241,108,4)"/><text x="54.5468%" y="239.50"></text></g><g><title>implied_outlives_bounds (231,292 samples, 0.15%)</title><rect x="54.8347%" y="229" width="0.1533%" height="15" fill="rgb(247,173,49)"/><text x="55.0847%" y="239.50"></text></g><g><title>param_env (179,312 samples, 0.12%)</title><rect x="54.9880%" y="229" width="0.1188%" height="15" fill="rgb(224,114,35)"/><text x="55.2380%" y="239.50"></text></g><g><title>region_scope_tree (198,231 samples, 0.13%)</title><rect x="55.1561%" y="229" width="0.1314%" height="15" fill="rgb(245,159,27)"/><text x="55.4061%" y="239.50"></text></g><g><title>check_impl_item_well_formed (3,016,660 samples, 2.00%)</title><rect x="53.2905%" y="245" width="1.9992%" height="15" fill="rgb(245,172,44)"/><text x="53.5405%" y="255.50">c..</text></g><g><title>adt_def (210,904 samples, 0.14%)</title><rect x="56.1365%" y="181" width="0.1398%" height="15" fill="rgb(236,23,11)"/><text x="56.3865%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (210,304 samples, 0.14%)</title><rect x="56.1369%" y="165" width="0.1394%" height="15" fill="rgb(205,117,38)"/><text x="56.3869%" y="175.50"></text></g><g><title>adt_sized_constraint (183,162 samples, 0.12%)</title><rect x="56.2762%" y="181" width="0.1214%" height="15" fill="rgb(237,72,25)"/><text x="56.5262%" y="191.50"></text></g><g><title>adt_sized_constraint (406,506 samples, 0.27%)</title><rect x="56.1336%" y="197" width="0.2694%" height="15" fill="rgb(244,70,9)"/><text x="56.3836%" y="207.50"></text></g><g><title>adt_sized_constraint (429,946 samples, 0.28%)</title><rect x="56.1202%" y="213" width="0.2849%" height="15" fill="rgb(217,125,39)"/><text x="56.3702%" y="223.50"></text></g><g><title>adt_sized_constraint (474,446 samples, 0.31%)</title><rect x="56.0927%" y="229" width="0.3144%" height="15" fill="rgb(235,36,10)"/><text x="56.3427%" y="239.50"></text></g><g><title>evaluate_obligation (159,683 samples, 0.11%)</title><rect x="56.4071%" y="229" width="0.1058%" height="15" fill="rgb(251,123,47)"/><text x="56.6571%" y="239.50"></text></g><g><title>param_env (263,753 samples, 0.17%)</title><rect x="56.6186%" y="229" width="0.1748%" height="15" fill="rgb(221,13,13)"/><text x="56.8686%" y="239.50"></text></g><g><title>analysis (68,358,199 samples, 45.30%)</title><rect x="11.6897%" y="293" width="45.3013%" height="15" fill="rgb(238,131,9)"/><text x="11.9397%" y="303.50">analysis</text></g><g><title>type_check_crate (49,657,251 samples, 32.91%)</title><rect x="24.0829%" y="277" width="32.9081%" height="15" fill="rgb(211,50,8)"/><text x="24.3329%" y="287.50">type_check_crate</text></g><g><title>wf_checking (5,711,243 samples, 3.78%)</title><rect x="53.2061%" y="261" width="3.7849%" height="15" fill="rgb(245,182,24)"/><text x="53.4561%" y="271.50">wf_c..</text></g><g><title>check_item_well_formed (2,567,352 samples, 1.70%)</title><rect x="55.2896%" y="245" width="1.7014%" height="15" fill="rgb(242,14,37)"/><text x="55.5396%" y="255.50"></text></g><g><title>is_freeze_raw (157,742 samples, 0.10%)</title><rect x="57.9954%" y="245" width="0.1045%" height="15" fill="rgb(246,228,12)"/><text x="58.2454%" y="255.50"></text></g><g><title>fn_abi_of_instance (385,373 samples, 0.26%)</title><rect x="57.9561%" y="261" width="0.2554%" height="15" fill="rgb(213,55,15)"/><text x="58.2061%" y="271.50"></text></g><g><title>codegen_module (1,175,403 samples, 0.78%)</title><rect x="57.4615%" y="277" width="0.7789%" height="15" fill="rgb(209,9,3)"/><text x="57.7115%" y="287.50"></text></g><g><title>optimized_mir (254,503 samples, 0.17%)</title><rect x="58.3162%" y="229" width="0.1687%" height="15" fill="rgb(230,59,30)"/><text x="58.5662%" y="239.50"></text></g><g><title>monomorphization_collector_graph_walk (352,754 samples, 0.23%)</title><rect x="58.2541%" y="245" width="0.2338%" height="15" fill="rgb(209,121,21)"/><text x="58.5041%" y="255.50"></text></g><g><title>monomorphization_collector (380,025 samples, 0.25%)</title><rect x="58.2527%" y="261" width="0.2518%" height="15" fill="rgb(220,109,13)"/><text x="58.5027%" y="271.50"></text></g><g><title>collect_and_partition_mono_items (436,665 samples, 0.29%)</title><rect x="58.2408%" y="277" width="0.2894%" height="15" fill="rgb(232,18,1)"/><text x="58.4908%" y="287.50"></text></g><g><title>codegen_crate (2,443,217 samples, 1.62%)</title><rect x="56.9958%" y="293" width="1.6191%" height="15" fill="rgb(215,41,42)"/><text x="57.2458%" y="303.50"></text></g><g><title>codegen_module_optimize (5,692,614 samples, 3.77%)</title><rect x="58.6149%" y="293" width="3.7725%" height="15" fill="rgb(224,123,36)"/><text x="58.8649%" y="303.50">code..</text></g><g><title>LLVM_module_optimize (4,811,404 samples, 3.19%)</title><rect x="59.1989%" y="277" width="3.1885%" height="15" fill="rgb(240,125,3)"/><text x="59.4489%" y="287.50">LLV..</text></g><g><title>LLVM_lto_optimize (2,463,107 samples, 1.63%)</title><rect x="62.8237%" y="277" width="1.6323%" height="15" fill="rgb(205,98,50)"/><text x="63.0737%" y="287.50"></text></g><g><title>LLVM_module_codegen (7,757,746 samples, 5.14%)</title><rect x="64.4560%" y="277" width="5.1411%" height="15" fill="rgb(205,185,37)"/><text x="64.7060%" y="287.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (7,651,134 samples, 5.07%)</title><rect x="64.5267%" y="261" width="5.0704%" height="15" fill="rgb(238,207,15)"/><text x="64.7767%" y="271.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (10,994,072 samples, 7.29%)</title><rect x="62.3874%" y="293" width="7.2858%" height="15" fill="rgb(213,199,42)"/><text x="62.6374%" y="303.50">codegen_mo..</text></g><g><title>macro_expand_crate (12,698,751 samples, 8.42%)</title><rect x="69.8982%" y="277" width="8.4155%" height="15" fill="rgb(235,201,11)"/><text x="70.1482%" y="287.50">macro_expand..</text></g><g><title>expand_crate (12,687,021 samples, 8.41%)</title><rect x="69.9060%" y="261" width="8.4078%" height="15" fill="rgb(207,46,11)"/><text x="70.1560%" y="271.50">expand_crate</text></g><g><title>metadata_register_crate (6,412,811 samples, 4.25%)</title><rect x="74.0640%" y="245" width="4.2498%" height="15" fill="rgb(241,35,35)"/><text x="74.3140%" y="255.50">metad..</text></g><g><title>metadata_register_crate (4,906,642 samples, 3.25%)</title><rect x="75.0621%" y="229" width="3.2517%" height="15" fill="rgb(243,32,47)"/><text x="75.3121%" y="239.50">met..</text></g><g><title>metadata_register_crate (273,581 samples, 0.18%)</title><rect x="78.1325%" y="213" width="0.1813%" height="15" fill="rgb(247,202,23)"/><text x="78.3825%" y="223.50"></text></g><g><title>pre_AST_expansion_lint_checks (288,624 samples, 0.19%)</title><rect x="78.3195%" y="277" width="0.1913%" height="15" fill="rgb(219,102,11)"/><text x="78.5695%" y="287.50"></text></g><g><title>late_resolve_crate (1,178,313 samples, 0.78%)</title><rect x="78.5603%" y="261" width="0.7809%" height="15" fill="rgb(243,110,44)"/><text x="78.8103%" y="271.50"></text></g><g><title>configure_and_expand (14,648,693 samples, 9.71%)</title><rect x="69.6732%" y="293" width="9.7078%" height="15" fill="rgb(222,74,54)"/><text x="69.9232%" y="303.50">configure_and_..</text></g><g><title>resolve_crate (1,313,164 samples, 0.87%)</title><rect x="78.5108%" y="277" width="0.8702%" height="15" fill="rgb(216,99,12)"/><text x="78.7608%" y="287.50"></text></g><g><title>early_lint_checks (185,522 samples, 0.12%)</title><rect x="79.4668%" y="293" width="0.1229%" height="15" fill="rgb(226,22,26)"/><text x="79.7168%" y="303.50"></text></g><g><title>free_global_ctxt (3,804,592 samples, 2.52%)</title><rect x="79.5898%" y="293" width="2.5213%" height="15" fill="rgb(217,163,10)"/><text x="79.8398%" y="303.50">fr..</text></g><g><title>exported_symbols (189,362 samples, 0.13%)</title><rect x="83.0246%" y="277" width="0.1255%" height="15" fill="rgb(213,25,53)"/><text x="83.2746%" y="287.50"></text></g><g><title>layout_of (233,872 samples, 0.15%)</title><rect x="85.2708%" y="245" width="0.1550%" height="15" fill="rgb(252,105,26)"/><text x="85.5208%" y="255.50"></text></g><g><title>layout_of (648,575 samples, 0.43%)</title><rect x="85.0324%" y="261" width="0.4298%" height="15" fill="rgb(220,39,43)"/><text x="85.2824%" y="271.50"></text></g><g><title>needs_drop_raw (632,127 samples, 0.42%)</title><rect x="87.4811%" y="245" width="0.4189%" height="15" fill="rgb(229,68,48)"/><text x="87.7311%" y="255.50"></text></g><g><title>is_copy_raw (528,675 samples, 0.35%)</title><rect x="87.5497%" y="229" width="0.3504%" height="15" fill="rgb(252,8,32)"/><text x="87.7997%" y="239.50"></text></g><g><title>evaluate_obligation (416,844 samples, 0.28%)</title><rect x="87.6238%" y="213" width="0.2762%" height="15" fill="rgb(223,20,43)"/><text x="87.8738%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,716,306 samples, 2.46%)</title><rect x="85.4622%" y="261" width="2.4628%" height="15" fill="rgb(229,81,49)"/><text x="85.7122%" y="271.50">mi..</text></g><g><title>optimized_mir (7,142,326 samples, 4.73%)</title><rect x="83.2205%" y="277" width="4.7333%" height="15" fill="rgb(236,28,36)"/><text x="83.4705%" y="287.50">optimi..</text></g><g><title>generate_crate_metadata (8,898,598 samples, 5.90%)</title><rect x="82.1111%" y="293" width="5.8971%" height="15" fill="rgb(249,185,26)"/><text x="82.3611%" y="303.50">generat..</text></g><g><title>hir_lowering (1,594,057 samples, 1.06%)</title><rect x="88.0083%" y="293" width="1.0564%" height="15" fill="rgb(249,174,33)"/><text x="88.2583%" y="303.50"></text></g><g><title>finish_ongoing_codegen (12,579,560 samples, 8.34%)</title><rect x="89.0753%" y="277" width="8.3365%" height="15" fill="rgb(233,201,37)"/><text x="89.3253%" y="287.50">finish_ongoi..</text></g><g><title>link_crate (794,339 samples, 0.53%)</title><rect x="97.4119%" y="277" width="0.5264%" height="15" fill="rgb(221,78,26)"/><text x="97.6619%" y="287.50"></text></g><g><title>link_binary (772,489 samples, 0.51%)</title><rect x="97.4264%" y="261" width="0.5119%" height="15" fill="rgb(250,127,30)"/><text x="97.6764%" y="271.50"></text></g><g><title>link_rlib (531,916 samples, 0.35%)</title><rect x="97.5858%" y="245" width="0.3525%" height="15" fill="rgb(230,49,44)"/><text x="97.8358%" y="255.50"></text></g><g><title>link (13,398,939 samples, 8.88%)</title><rect x="89.0646%" y="293" width="8.8795%" height="15" fill="rgb(229,67,23)"/><text x="89.3146%" y="303.50">link</text></g><g><title>parse_crate (1,702,879 samples, 1.13%)</title><rect x="97.9442%" y="293" width="1.1285%" height="15" fill="rgb(249,83,47)"/><text x="98.1942%" y="303.50"></text></g><g><title>prepare_outputs (183,302 samples, 0.12%)</title><rect x="99.0766%" y="293" width="0.1215%" height="15" fill="rgb(215,43,3)"/><text x="99.3266%" y="303.50"></text></g><g><title>self_profile_alloc_query_strings (786,819 samples, 0.52%)</title><rect x="99.1981%" y="293" width="0.5214%" height="15" fill="rgb(238,154,13)"/><text x="99.4481%" y="303.50"></text></g><g><title>all (150,896,614 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="335.50"></text></g><g><title>rustc (150,896,614 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="319.50">rustc</text></g><g><title>write_crate_metadata (337,384 samples, 0.22%)</title><rect x="99.7764%" y="293" width="0.2236%" height="15" fill="rgb(235,30,7)"/><text x="100.0264%" y="303.50"></text></g></svg></svg>