<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,677,111 samples, 4.55%)</title><rect x="0.9073%" y="261" width="4.5469%" height="15" fill="rgb(227,0,7)"/><text x="1.1573%" y="271.50">LLVM_..</text></g><g><title>codegen_generate_lto_work (201,152 samples, 0.25%)</title><rect x="5.2055%" y="245" width="0.2487%" height="15" fill="rgb(217,0,24)"/><text x="5.4555%" y="255.50"></text></g><g><title>LLVM_thin_lto_global_analysis (186,852 samples, 0.23%)</title><rect x="5.2232%" y="229" width="0.2311%" height="15" fill="rgb(221,193,54)"/><text x="5.4732%" y="239.50"></text></g><g><title>implied_outlives_bounds (114,833 samples, 0.14%)</title><rect x="9.0178%" y="213" width="0.1420%" height="15" fill="rgb(248,212,6)"/><text x="9.2678%" y="223.50"></text></g><g><title>is_sized_raw (155,722 samples, 0.19%)</title><rect x="9.1897%" y="213" width="0.1926%" height="15" fill="rgb(208,68,35)"/><text x="9.4397%" y="223.50"></text></g><g><title>evaluate_obligation (144,342 samples, 0.18%)</title><rect x="9.2038%" y="197" width="0.1785%" height="15" fill="rgb(232,128,0)"/><text x="9.4538%" y="207.50"></text></g><g><title>param_env (165,444 samples, 0.20%)</title><rect x="9.8760%" y="181" width="0.2046%" height="15" fill="rgb(207,160,47)"/><text x="10.1260%" y="191.50"></text></g><g><title>item_attrs (100,751 samples, 0.12%)</title><rect x="10.2570%" y="149" width="0.1246%" height="15" fill="rgb(228,23,34)"/><text x="10.5070%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,591 samples, 0.12%)</title><rect x="10.2633%" y="133" width="0.1182%" height="15" fill="rgb(218,30,26)"/><text x="10.5133%" y="143.50"></text></g><g><title>codegen_fn_attrs (145,152 samples, 0.18%)</title><rect x="10.2139%" y="165" width="0.1795%" height="15" fill="rgb(220,122,19)"/><text x="10.4639%" y="175.50"></text></g><g><title>is_copy_raw (174,571 samples, 0.22%)</title><rect x="11.0919%" y="149" width="0.2159%" height="15" fill="rgb(250,228,42)"/><text x="11.3419%" y="159.50"></text></g><g><title>evaluate_obligation (167,751 samples, 0.21%)</title><rect x="11.1004%" y="133" width="0.2074%" height="15" fill="rgb(240,193,28)"/><text x="11.3504%" y="143.50"></text></g><g><title>adt_drop_tys (126,651 samples, 0.16%)</title><rect x="11.3497%" y="133" width="0.1566%" height="15" fill="rgb(216,20,37)"/><text x="11.5997%" y="143.50"></text></g><g><title>predicates_of (81,672 samples, 0.10%)</title><rect x="12.2115%" y="101" width="0.1010%" height="15" fill="rgb(206,188,39)"/><text x="12.4615%" y="111.50"></text></g><g><title>is_copy_raw (655,957 samples, 0.81%)</title><rect x="11.5063%" y="133" width="0.8111%" height="15" fill="rgb(217,207,13)"/><text x="11.7563%" y="143.50"></text></g><g><title>evaluate_obligation (605,657 samples, 0.75%)</title><rect x="11.5685%" y="117" width="0.7489%" height="15" fill="rgb(231,73,38)"/><text x="11.8185%" y="127.50"></text></g><g><title>needs_drop_raw (817,988 samples, 1.01%)</title><rect x="11.3078%" y="149" width="1.0115%" height="15" fill="rgb(225,20,46)"/><text x="11.5578%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (175,252 samples, 0.22%)</title><rect x="12.4179%" y="133" width="0.2167%" height="15" fill="rgb(210,31,41)"/><text x="12.6679%" y="143.50"></text></g><g><title>impl_parent (99,591 samples, 0.12%)</title><rect x="12.8607%" y="117" width="0.1231%" height="15" fill="rgb(221,200,47)"/><text x="13.1107%" y="127.50"></text></g><g><title>specialization_graph_of (528,225 samples, 0.65%)</title><rect x="12.6612%" y="133" width="0.6532%" height="15" fill="rgb(226,26,5)"/><text x="12.9112%" y="143.50"></text></g><g><title>impl_trait_ref (267,314 samples, 0.33%)</title><rect x="12.9838%" y="117" width="0.3305%" height="15" fill="rgb(249,33,26)"/><text x="13.2338%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (227,712 samples, 0.28%)</title><rect x="13.0328%" y="101" width="0.2816%" height="15" fill="rgb(235,183,28)"/><text x="13.2828%" y="111.50"></text></g><g><title>resolve_instance (829,209 samples, 1.03%)</title><rect x="12.3193%" y="149" width="1.0254%" height="15" fill="rgb(221,5,38)"/><text x="12.5693%" y="159.50"></text></g><g><title>thir_body (217,254 samples, 0.27%)</title><rect x="13.3501%" y="149" width="0.2686%" height="15" fill="rgb(247,18,42)"/><text x="13.6001%" y="159.50"></text></g><g><title>mir_const (3,235,559 samples, 4.00%)</title><rect x="9.6229%" y="197" width="4.0009%" height="15" fill="rgb(241,131,45)"/><text x="9.8729%" y="207.50">mir_..</text></g><g><title>unsafety_check_result (2,865,494 samples, 3.54%)</title><rect x="10.0805%" y="181" width="3.5433%" height="15" fill="rgb(249,31,29)"/><text x="10.3305%" y="191.50">unsa..</text></g><g><title>mir_built (2,612,461 samples, 3.23%)</title><rect x="10.3934%" y="165" width="3.2304%" height="15" fill="rgb(225,111,53)"/><text x="10.6434%" y="175.50">mir..</text></g><g><title>mir_promoted (3,594,972 samples, 4.45%)</title><rect x="9.3823%" y="213" width="4.4454%" height="15" fill="rgb(238,160,17)"/><text x="9.6323%" y="223.50">mir_p..</text></g><g><title>mir_const_qualif (164,781 samples, 0.20%)</title><rect x="13.6239%" y="197" width="0.2038%" height="15" fill="rgb(214,148,48)"/><text x="13.8739%" y="207.50"></text></g><g><title>mir_const (137,751 samples, 0.17%)</title><rect x="13.6573%" y="181" width="0.1703%" height="15" fill="rgb(232,36,49)"/><text x="13.9073%" y="191.50"></text></g><g><title>unsafety_check_result (95,261 samples, 0.12%)</title><rect x="13.7098%" y="165" width="0.1178%" height="15" fill="rgb(209,103,24)"/><text x="13.9598%" y="175.50"></text></g><g><title>type_op_ascribe_user_type (145,521 samples, 0.18%)</title><rect x="13.8276%" y="213" width="0.1799%" height="15" fill="rgb(229,88,8)"/><text x="14.0776%" y="223.50"></text></g><g><title>type_op_normalize_fn_sig (239,633 samples, 0.30%)</title><rect x="14.0076%" y="213" width="0.2963%" height="15" fill="rgb(213,181,19)"/><text x="14.2576%" y="223.50"></text></g><g><title>normalize_projection_ty (142,852 samples, 0.18%)</title><rect x="14.1272%" y="197" width="0.1766%" height="15" fill="rgb(254,191,54)"/><text x="14.3772%" y="207.50"></text></g><g><title>MIR_borrow_checking (7,671,375 samples, 9.49%)</title><rect x="5.7378%" y="245" width="9.4860%" height="15" fill="rgb(241,83,37)"/><text x="5.9878%" y="255.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (7,648,605 samples, 9.46%)</title><rect x="5.7659%" y="229" width="9.4579%" height="15" fill="rgb(233,36,39)"/><text x="6.0159%" y="239.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (657,703 samples, 0.81%)</title><rect x="14.4105%" y="213" width="0.8133%" height="15" fill="rgb(226,3,54)"/><text x="14.6605%" y="223.50"></text></g><g><title>evaluate_obligation (110,821 samples, 0.14%)</title><rect x="15.0868%" y="197" width="0.1370%" height="15" fill="rgb(245,192,40)"/><text x="15.3368%" y="207.50"></text></g><g><title>MIR_effect_checking (112,721 samples, 0.14%)</title><rect x="15.2238%" y="245" width="0.1394%" height="15" fill="rgb(238,167,29)"/><text x="15.4738%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (85,181 samples, 0.11%)</title><rect x="15.2579%" y="229" width="0.1053%" height="15" fill="rgb(232,182,51)"/><text x="15.5079%" y="239.50"></text></g><g><title>hir_module_items (175,183 samples, 0.22%)</title><rect x="15.3632%" y="245" width="0.2166%" height="15" fill="rgb(231,60,39)"/><text x="15.6132%" y="255.50"></text></g><g><title>get_lang_items (82,781 samples, 0.10%)</title><rect x="16.0313%" y="165" width="0.1024%" height="15" fill="rgb(208,69,12)"/><text x="16.2813%" y="175.50"></text></g><g><title>codegen_fn_attrs (232,403 samples, 0.29%)</title><rect x="15.9895%" y="181" width="0.2874%" height="15" fill="rgb(235,93,37)"/><text x="16.2395%" y="191.50"></text></g><g><title>codegen_fn_attrs (379,854 samples, 0.47%)</title><rect x="15.8125%" y="213" width="0.4697%" height="15" fill="rgb(213,116,39)"/><text x="16.0625%" y="223.50"></text></g><g><title>should_inherit_track_caller (335,194 samples, 0.41%)</title><rect x="15.8678%" y="197" width="0.4145%" height="15" fill="rgb(222,207,29)"/><text x="16.1178%" y="207.50"></text></g><g><title>check_mod_attrs (539,676 samples, 0.67%)</title><rect x="15.6155%" y="229" width="0.6673%" height="15" fill="rgb(206,96,30)"/><text x="15.8655%" y="239.50"></text></g><g><title>lint_levels (108,311 samples, 0.13%)</title><rect x="16.5904%" y="213" width="0.1339%" height="15" fill="rgb(218,138,4)"/><text x="16.8404%" y="223.50"></text></g><g><title>lookup_deprecation_entry (115,801 samples, 0.14%)</title><rect x="16.7244%" y="213" width="0.1432%" height="15" fill="rgb(250,191,14)"/><text x="16.9744%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (407,134 samples, 0.50%)</title><rect x="16.4335%" y="229" width="0.5034%" height="15" fill="rgb(239,60,40)"/><text x="16.6835%" y="239.50"></text></g><g><title>misc_checking_1 (1,169,923 samples, 1.45%)</title><rect x="15.5803%" y="245" width="1.4467%" height="15" fill="rgb(206,27,48)"/><text x="15.8303%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (147,241 samples, 0.18%)</title><rect x="17.0289%" y="229" width="0.1821%" height="15" fill="rgb(225,35,8)"/><text x="17.2789%" y="239.50"></text></g><g><title>check_mod_liveness (117,550 samples, 0.15%)</title><rect x="17.0656%" y="213" width="0.1454%" height="15" fill="rgb(250,213,24)"/><text x="17.3156%" y="223.50"></text></g><g><title>misc_checking_2 (313,303 samples, 0.39%)</title><rect x="17.0270%" y="245" width="0.3874%" height="15" fill="rgb(247,123,22)"/><text x="17.2770%" y="255.50"></text></g><g><title>match_checking (164,562 samples, 0.20%)</title><rect x="17.2109%" y="229" width="0.2035%" height="15" fill="rgb(231,138,38)"/><text x="17.4609%" y="239.50"></text></g><g><title>check_match (156,522 samples, 0.19%)</title><rect x="17.2209%" y="213" width="0.1935%" height="15" fill="rgb(231,145,46)"/><text x="17.4709%" y="223.50"></text></g><g><title>check_private_in_public (95,881 samples, 0.12%)</title><rect x="17.4248%" y="229" width="0.1186%" height="15" fill="rgb(251,118,11)"/><text x="17.6748%" y="239.50"></text></g><g><title>death_checking (160,082 samples, 0.20%)</title><rect x="17.5434%" y="229" width="0.1979%" height="15" fill="rgb(217,147,25)"/><text x="17.7934%" y="239.50"></text></g><g><title>eval_to_const_value_raw (273,883 samples, 0.34%)</title><rect x="18.4510%" y="69" width="0.3387%" height="15" fill="rgb(247,81,37)"/><text x="18.7010%" y="79.50"></text></g><g><title>eval_to_const_value_raw (273,323 samples, 0.34%)</title><rect x="18.4517%" y="53" width="0.3380%" height="15" fill="rgb(209,12,38)"/><text x="18.7017%" y="63.50"></text></g><g><title>eval_to_allocation_raw (271,733 samples, 0.34%)</title><rect x="18.4536%" y="37" width="0.3360%" height="15" fill="rgb(227,1,9)"/><text x="18.7036%" y="47.50"></text></g><g><title>eval_to_const_value_raw (310,094 samples, 0.38%)</title><rect x="18.4106%" y="133" width="0.3834%" height="15" fill="rgb(248,47,43)"/><text x="18.6606%" y="143.50"></text></g><g><title>eval_to_const_value_raw (309,354 samples, 0.38%)</title><rect x="18.4116%" y="117" width="0.3825%" height="15" fill="rgb(221,10,30)"/><text x="18.6616%" y="127.50"></text></g><g><title>eval_to_allocation_raw (308,094 samples, 0.38%)</title><rect x="18.4131%" y="101" width="0.3810%" height="15" fill="rgb(210,229,1)"/><text x="18.6631%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (280,663 samples, 0.35%)</title><rect x="18.4470%" y="85" width="0.3471%" height="15" fill="rgb(222,148,37)"/><text x="18.6970%" y="95.50"></text></g><g><title>eval_to_const_value_raw (426,755 samples, 0.53%)</title><rect x="18.2694%" y="197" width="0.5277%" height="15" fill="rgb(234,67,33)"/><text x="18.5194%" y="207.50"></text></g><g><title>eval_to_const_value_raw (424,945 samples, 0.53%)</title><rect x="18.2716%" y="181" width="0.5255%" height="15" fill="rgb(247,98,35)"/><text x="18.5216%" y="191.50"></text></g><g><title>eval_to_allocation_raw (420,835 samples, 0.52%)</title><rect x="18.2767%" y="165" width="0.5204%" height="15" fill="rgb(247,138,52)"/><text x="18.5267%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (317,694 samples, 0.39%)</title><rect x="18.4043%" y="149" width="0.3928%" height="15" fill="rgb(213,79,30)"/><text x="18.6543%" y="159.50"></text></g><g><title>param_env (265,762 samples, 0.33%)</title><rect x="18.7971%" y="197" width="0.3286%" height="15" fill="rgb(246,177,23)"/><text x="19.0471%" y="207.50"></text></g><g><title>predicates_of (126,581 samples, 0.16%)</title><rect x="18.9692%" y="181" width="0.1565%" height="15" fill="rgb(230,62,27)"/><text x="19.2192%" y="191.50"></text></g><g><title>predicates_defined_on (101,271 samples, 0.13%)</title><rect x="19.0005%" y="165" width="0.1252%" height="15" fill="rgb(216,154,8)"/><text x="19.2505%" y="175.50"></text></g><g><title>trait_impls_of (110,382 samples, 0.14%)</title><rect x="19.1257%" y="197" width="0.1365%" height="15" fill="rgb(244,35,45)"/><text x="19.3757%" y="207.50"></text></g><g><title>crate_lints (1,801,260 samples, 2.23%)</title><rect x="17.7435%" y="213" width="2.2273%" height="15" fill="rgb(251,115,12)"/><text x="17.9935%" y="223.50">c..</text></g><g><title>type_of (568,886 samples, 0.70%)</title><rect x="19.2674%" y="197" width="0.7035%" height="15" fill="rgb(240,54,50)"/><text x="19.5174%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (468,776 samples, 0.58%)</title><rect x="19.3912%" y="181" width="0.5797%" height="15" fill="rgb(233,84,52)"/><text x="19.6412%" y="191.50"></text></g><g><title>lint_checking (1,927,102 samples, 2.38%)</title><rect x="17.7413%" y="229" width="2.3830%" height="15" fill="rgb(207,117,47)"/><text x="17.9913%" y="239.50">li..</text></g><g><title>module_lints (124,062 samples, 0.15%)</title><rect x="19.9709%" y="213" width="0.1534%" height="15" fill="rgb(249,43,39)"/><text x="20.2209%" y="223.50"></text></g><g><title>lint_mod (121,652 samples, 0.15%)</title><rect x="19.9739%" y="197" width="0.1504%" height="15" fill="rgb(209,38,44)"/><text x="20.2239%" y="207.50"></text></g><g><title>privacy_access_levels (99,781 samples, 0.12%)</title><rect x="20.1243%" y="229" width="0.1234%" height="15" fill="rgb(236,212,23)"/><text x="20.3743%" y="239.50"></text></g><g><title>privacy_checking_modules (329,533 samples, 0.41%)</title><rect x="20.2477%" y="229" width="0.4075%" height="15" fill="rgb(242,79,21)"/><text x="20.4977%" y="239.50"></text></g><g><title>check_mod_privacy (327,633 samples, 0.41%)</title><rect x="20.2500%" y="213" width="0.4051%" height="15" fill="rgb(211,96,35)"/><text x="20.5000%" y="223.50"></text></g><g><title>misc_checking_3 (2,637,589 samples, 3.26%)</title><rect x="17.4144%" y="245" width="3.2615%" height="15" fill="rgb(253,215,40)"/><text x="17.6644%" y="255.50">mis..</text></g><g><title>impl_parent (492,085 samples, 0.61%)</title><rect x="21.8170%" y="181" width="0.6085%" height="15" fill="rgb(211,81,21)"/><text x="22.0670%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (297,052 samples, 0.37%)</title><rect x="22.0582%" y="165" width="0.3673%" height="15" fill="rgb(208,190,38)"/><text x="22.3082%" y="175.50"></text></g><g><title>impl_trait_ref (1,788,483 samples, 2.21%)</title><rect x="22.4255%" y="181" width="2.2115%" height="15" fill="rgb(235,213,38)"/><text x="22.6755%" y="191.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,595,889 samples, 1.97%)</title><rect x="22.6637%" y="165" width="1.9734%" height="15" fill="rgb(237,122,38)"/><text x="22.9137%" y="175.50">m..</text></g><g><title>coherent_trait (3,384,888 samples, 4.19%)</title><rect x="20.7607%" y="213" width="4.1856%" height="15" fill="rgb(244,218,35)"/><text x="21.0107%" y="223.50">coher..</text></g><g><title>specialization_graph_of (3,369,698 samples, 4.17%)</title><rect x="20.7795%" y="197" width="4.1668%" height="15" fill="rgb(240,68,47)"/><text x="21.0295%" y="207.50">speci..</text></g><g><title>trait_impls_of (250,052 samples, 0.31%)</title><rect x="24.6371%" y="181" width="0.3092%" height="15" fill="rgb(210,16,53)"/><text x="24.8871%" y="191.50"></text></g><g><title>implementations_of_trait (84,760 samples, 0.10%)</title><rect x="24.8415%" y="165" width="0.1048%" height="15" fill="rgb(235,124,12)"/><text x="25.0915%" y="175.50"></text></g><g><title>coherence_checking (3,461,348 samples, 4.28%)</title><rect x="20.7362%" y="229" width="4.2801%" height="15" fill="rgb(224,169,11)"/><text x="20.9862%" y="239.50">coher..</text></g><g><title>associated_item (329,465 samples, 0.41%)</title><rect x="33.4796%" y="165" width="0.4074%" height="15" fill="rgb(250,166,2)"/><text x="33.7296%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (254,324 samples, 0.31%)</title><rect x="33.5725%" y="149" width="0.3145%" height="15" fill="rgb(242,216,29)"/><text x="33.8225%" y="159.50"></text></g><g><title>associated_items (525,165 samples, 0.65%)</title><rect x="33.2867%" y="181" width="0.6494%" height="15" fill="rgb(230,116,27)"/><text x="33.5367%" y="191.50"></text></g><g><title>adt_dtorck_constraint (210,243 samples, 0.26%)</title><rect x="34.2198%" y="165" width="0.2600%" height="15" fill="rgb(228,99,48)"/><text x="34.4698%" y="175.50"></text></g><g><title>dropck_outlives (1,197,445 samples, 1.48%)</title><rect x="34.0028%" y="181" width="1.4807%" height="15" fill="rgb(253,11,6)"/><text x="34.2528%" y="191.50"></text></g><g><title>normalize_projection_ty (811,722 samples, 1.00%)</title><rect x="34.4798%" y="165" width="1.0037%" height="15" fill="rgb(247,143,39)"/><text x="34.7298%" y="175.50"></text></g><g><title>evaluate_obligation (271,223 samples, 0.34%)</title><rect x="35.1482%" y="149" width="0.3354%" height="15" fill="rgb(236,97,10)"/><text x="35.3982%" y="159.50"></text></g><g><title>adt_def (89,032 samples, 0.11%)</title><rect x="36.8313%" y="149" width="0.1101%" height="15" fill="rgb(233,208,19)"/><text x="37.0813%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (87,342 samples, 0.11%)</title><rect x="36.8334%" y="133" width="0.1080%" height="15" fill="rgb(216,164,2)"/><text x="37.0834%" y="143.50"></text></g><g><title>adt_sized_constraint (99,512 samples, 0.12%)</title><rect x="36.8209%" y="165" width="0.1231%" height="15" fill="rgb(220,129,5)"/><text x="37.0709%" y="175.50"></text></g><g><title>predicates_of (157,462 samples, 0.19%)</title><rect x="37.1392%" y="165" width="0.1947%" height="15" fill="rgb(242,17,10)"/><text x="37.3892%" y="175.50"></text></g><g><title>predicates_defined_on (109,532 samples, 0.14%)</title><rect x="37.1985%" y="149" width="0.1354%" height="15" fill="rgb(242,107,0)"/><text x="37.4485%" y="159.50"></text></g><g><title>specializes (132,092 samples, 0.16%)</title><rect x="37.3339%" y="165" width="0.1633%" height="15" fill="rgb(251,28,31)"/><text x="37.5839%" y="175.50"></text></g><g><title>param_env (113,482 samples, 0.14%)</title><rect x="37.3570%" y="149" width="0.1403%" height="15" fill="rgb(233,223,10)"/><text x="37.6070%" y="159.50"></text></g><g><title>def_span (90,762 samples, 0.11%)</title><rect x="37.3851%" y="133" width="0.1122%" height="15" fill="rgb(215,21,27)"/><text x="37.6351%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (88,992 samples, 0.11%)</title><rect x="37.3872%" y="117" width="0.1100%" height="15" fill="rgb(232,23,21)"/><text x="37.6372%" y="127.50"></text></g><g><title>trait_impls_of (467,825 samples, 0.58%)</title><rect x="37.5146%" y="165" width="0.5785%" height="15" fill="rgb(244,5,23)"/><text x="37.7646%" y="175.50"></text></g><g><title>implementations_of_trait (189,924 samples, 0.23%)</title><rect x="37.8582%" y="149" width="0.2349%" height="15" fill="rgb(226,81,46)"/><text x="38.1082%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (114,152 samples, 0.14%)</title><rect x="37.9519%" y="133" width="0.1412%" height="15" fill="rgb(247,70,30)"/><text x="38.2019%" y="143.50"></text></g><g><title>evaluate_obligation (2,111,805 samples, 2.61%)</title><rect x="35.4835%" y="181" width="2.6113%" height="15" fill="rgb(212,68,19)"/><text x="35.7335%" y="191.50">ev..</text></g><g><title>fn_sig (124,110 samples, 0.15%)</title><rect x="38.1269%" y="181" width="0.1535%" height="15" fill="rgb(240,187,13)"/><text x="38.3769%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (110,380 samples, 0.14%)</title><rect x="38.1438%" y="165" width="0.1365%" height="15" fill="rgb(223,113,26)"/><text x="38.3938%" y="175.50"></text></g><g><title>generics_of (93,202 samples, 0.12%)</title><rect x="38.2803%" y="181" width="0.1152%" height="15" fill="rgb(206,192,2)"/><text x="38.5303%" y="191.50"></text></g><g><title>method_autoderef_steps (440,005 samples, 0.54%)</title><rect x="38.6792%" y="181" width="0.5441%" height="15" fill="rgb(241,108,4)"/><text x="38.9292%" y="191.50"></text></g><g><title>evaluate_obligation (297,713 samples, 0.37%)</title><rect x="38.8551%" y="165" width="0.3681%" height="15" fill="rgb(247,173,49)"/><text x="39.1051%" y="175.50"></text></g><g><title>explicit_predicates_of (88,802 samples, 0.11%)</title><rect x="39.5528%" y="149" width="0.1098%" height="15" fill="rgb(224,114,35)"/><text x="39.8028%" y="159.50"></text></g><g><title>predicates_of (379,146 samples, 0.47%)</title><rect x="39.2491%" y="181" width="0.4688%" height="15" fill="rgb(245,159,27)"/><text x="39.4991%" y="191.50"></text></g><g><title>predicates_defined_on (246,354 samples, 0.30%)</title><rect x="39.4133%" y="165" width="0.3046%" height="15" fill="rgb(245,172,44)"/><text x="39.6633%" y="175.50"></text></g><g><title>super_predicates_of (108,901 samples, 0.13%)</title><rect x="39.7179%" y="181" width="0.1347%" height="15" fill="rgb(236,23,11)"/><text x="39.9679%" y="191.50"></text></g><g><title>metadata_decode_entry_super_predicates_of (106,141 samples, 0.13%)</title><rect x="39.7213%" y="165" width="0.1312%" height="15" fill="rgb(205,117,38)"/><text x="39.9713%" y="175.50"></text></g><g><title>trait_impls_of (160,433 samples, 0.20%)</title><rect x="39.8598%" y="181" width="0.1984%" height="15" fill="rgb(237,72,25)"/><text x="40.1098%" y="191.50"></text></g><g><title>associated_item (188,354 samples, 0.23%)</title><rect x="43.2952%" y="149" width="0.2329%" height="15" fill="rgb(244,70,9)"/><text x="43.5452%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (151,684 samples, 0.19%)</title><rect x="43.3405%" y="133" width="0.1876%" height="15" fill="rgb(217,125,39)"/><text x="43.5905%" y="143.50"></text></g><g><title>associated_items (254,304 samples, 0.31%)</title><rect x="43.2202%" y="165" width="0.3145%" height="15" fill="rgb(235,36,10)"/><text x="43.4702%" y="175.50"></text></g><g><title>fn_abi_of_instance (87,571 samples, 0.11%)</title><rect x="43.7521%" y="117" width="0.1083%" height="15" fill="rgb(251,123,47)"/><text x="44.0021%" y="127.50"></text></g><g><title>eval_to_const_value_raw (273,293 samples, 0.34%)</title><rect x="43.5865%" y="165" width="0.3379%" height="15" fill="rgb(221,13,13)"/><text x="43.8365%" y="175.50"></text></g><g><title>eval_to_const_value_raw (254,503 samples, 0.31%)</title><rect x="43.6097%" y="149" width="0.3147%" height="15" fill="rgb(238,131,9)"/><text x="43.8597%" y="159.50"></text></g><g><title>eval_to_allocation_raw (249,373 samples, 0.31%)</title><rect x="43.6160%" y="133" width="0.3084%" height="15" fill="rgb(211,50,8)"/><text x="43.8660%" y="143.50"></text></g><g><title>evaluate_obligation (570,299 samples, 0.71%)</title><rect x="43.9244%" y="165" width="0.7052%" height="15" fill="rgb(245,182,24)"/><text x="44.1744%" y="175.50"></text></g><g><title>trait_impls_of (112,362 samples, 0.14%)</title><rect x="44.4907%" y="149" width="0.1389%" height="15" fill="rgb(242,14,37)"/><text x="44.7407%" y="159.50"></text></g><g><title>method_autoderef_steps (84,880 samples, 0.10%)</title><rect x="44.8411%" y="165" width="0.1050%" height="15" fill="rgb(246,228,12)"/><text x="45.0911%" y="175.50"></text></g><g><title>typeck (4,004,905 samples, 4.95%)</title><rect x="40.1343%" y="181" width="4.9523%" height="15" fill="rgb(213,55,15)"/><text x="40.3843%" y="191.50">typeck</text></g><g><title>item_bodies_checking (16,224,990 samples, 20.06%)</title><rect x="25.0621%" y="229" width="20.0630%" height="15" fill="rgb(209,9,3)"/><text x="25.3121%" y="239.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (16,221,409 samples, 20.06%)</title><rect x="25.0665%" y="213" width="20.0585%" height="15" fill="rgb(230,59,30)"/><text x="25.3165%" y="223.50">typeck_item_bodies</text></g><g><title>typeck (16,202,479 samples, 20.04%)</title><rect x="25.0899%" y="197" width="20.0351%" height="15" fill="rgb(209,121,21)"/><text x="25.3399%" y="207.50">typeck</text></g><g><title>predicates_of (140,963 samples, 0.17%)</title><rect x="47.9784%" y="181" width="0.1743%" height="15" fill="rgb(220,109,13)"/><text x="48.2284%" y="191.50"></text></g><g><title>predicates_defined_on (100,353 samples, 0.12%)</title><rect x="48.0286%" y="165" width="0.1241%" height="15" fill="rgb(232,18,1)"/><text x="48.2786%" y="175.50"></text></g><g><title>evaluate_obligation (1,208,183 samples, 1.49%)</title><rect x="46.9100%" y="197" width="1.4940%" height="15" fill="rgb(215,41,42)"/><text x="47.1600%" y="207.50"></text></g><g><title>trait_impls_of (203,172 samples, 0.25%)</title><rect x="48.1527%" y="181" width="0.2512%" height="15" fill="rgb(224,123,36)"/><text x="48.4027%" y="191.50"></text></g><g><title>item_types_checking (3,144,856 samples, 3.89%)</title><rect x="45.1250%" y="229" width="3.8888%" height="15" fill="rgb(240,125,3)"/><text x="45.3750%" y="239.50">item..</text></g><g><title>check_mod_item_types (3,134,665 samples, 3.88%)</title><rect x="45.1376%" y="213" width="3.8762%" height="15" fill="rgb(205,98,50)"/><text x="45.3876%" y="223.50">chec..</text></g><g><title>typeck (261,143 samples, 0.32%)</title><rect x="48.6909%" y="197" width="0.3229%" height="15" fill="rgb(205,185,37)"/><text x="48.9409%" y="207.50"></text></g><g><title>fn_sig (121,182 samples, 0.15%)</title><rect x="49.2539%" y="197" width="0.1498%" height="15" fill="rgb(238,207,15)"/><text x="49.5039%" y="207.50"></text></g><g><title>generics_of (101,891 samples, 0.13%)</title><rect x="49.4038%" y="197" width="0.1260%" height="15" fill="rgb(213,199,42)"/><text x="49.6538%" y="207.50"></text></g><g><title>late_bound_vars_map (324,012 samples, 0.40%)</title><rect x="50.0213%" y="149" width="0.4007%" height="15" fill="rgb(235,201,11)"/><text x="50.2713%" y="159.50"></text></g><g><title>resolve_lifetimes (297,482 samples, 0.37%)</title><rect x="50.0541%" y="133" width="0.3679%" height="15" fill="rgb(207,46,11)"/><text x="50.3041%" y="143.50"></text></g><g><title>explicit_predicates_of (625,065 samples, 0.77%)</title><rect x="49.6772%" y="165" width="0.7729%" height="15" fill="rgb(241,35,35)"/><text x="49.9272%" y="175.50"></text></g><g><title>predicates_of (876,229 samples, 1.08%)</title><rect x="49.5785%" y="197" width="1.0835%" height="15" fill="rgb(243,32,47)"/><text x="49.8285%" y="207.50"></text></g><g><title>predicates_defined_on (847,759 samples, 1.05%)</title><rect x="49.6137%" y="181" width="1.0483%" height="15" fill="rgb(247,202,23)"/><text x="49.8637%" y="191.50"></text></g><g><title>inferred_outlives_of (171,353 samples, 0.21%)</title><rect x="50.4502%" y="165" width="0.2119%" height="15" fill="rgb(219,102,11)"/><text x="50.7002%" y="175.50"></text></g><g><title>inferred_outlives_crate (151,302 samples, 0.19%)</title><rect x="50.4750%" y="149" width="0.1871%" height="15" fill="rgb(243,110,44)"/><text x="50.7250%" y="159.50"></text></g><g><title>type_collecting (1,597,668 samples, 1.98%)</title><rect x="49.0179%" y="229" width="1.9756%" height="15" fill="rgb(222,74,54)"/><text x="49.2679%" y="239.50">t..</text></g><g><title>collect_mod_item_types (1,585,768 samples, 1.96%)</title><rect x="49.0326%" y="213" width="1.9609%" height="15" fill="rgb(216,99,12)"/><text x="49.2826%" y="223.50">c..</text></g><g><title>type_of (268,072 samples, 0.33%)</title><rect x="50.6620%" y="197" width="0.3315%" height="15" fill="rgb(226,22,26)"/><text x="50.9120%" y="207.50"></text></g><g><title>type_of (98,141 samples, 0.12%)</title><rect x="50.8722%" y="181" width="0.1214%" height="15" fill="rgb(217,163,10)"/><text x="51.1222%" y="191.50"></text></g><g><title>adt_sized_constraint (165,651 samples, 0.20%)</title><rect x="54.5287%" y="181" width="0.2048%" height="15" fill="rgb(213,25,53)"/><text x="54.7787%" y="191.50"></text></g><g><title>evaluate_obligation (1,277,984 samples, 1.58%)</title><rect x="53.3780%" y="197" width="1.5803%" height="15" fill="rgb(252,105,26)"/><text x="53.6280%" y="207.50"></text></g><g><title>implied_outlives_bounds (315,402 samples, 0.39%)</title><rect x="54.9651%" y="197" width="0.3900%" height="15" fill="rgb(220,39,43)"/><text x="55.2151%" y="207.50"></text></g><g><title>param_env (302,315 samples, 0.37%)</title><rect x="55.3551%" y="197" width="0.3738%" height="15" fill="rgb(229,68,48)"/><text x="55.6051%" y="207.50"></text></g><g><title>check_impl_item_well_formed (3,877,904 samples, 4.80%)</title><rect x="51.1596%" y="213" width="4.7952%" height="15" fill="rgb(252,8,32)"/><text x="51.4096%" y="223.50">check_..</text></g><g><title>region_scope_tree (145,212 samples, 0.18%)</title><rect x="55.7752%" y="197" width="0.1796%" height="15" fill="rgb(223,20,43)"/><text x="56.0252%" y="207.50"></text></g><g><title>evaluate_obligation (595,636 samples, 0.74%)</title><rect x="58.0345%" y="197" width="0.7365%" height="15" fill="rgb(229,81,49)"/><text x="58.2845%" y="207.50"></text></g><g><title>implied_outlives_bounds (82,081 samples, 0.10%)</title><rect x="58.7892%" y="197" width="0.1015%" height="15" fill="rgb(236,28,36)"/><text x="59.0392%" y="207.50"></text></g><g><title>param_env (387,496 samples, 0.48%)</title><rect x="58.8942%" y="197" width="0.4792%" height="15" fill="rgb(249,185,26)"/><text x="59.1442%" y="207.50"></text></g><g><title>predicates_of (134,223 samples, 0.17%)</title><rect x="59.3733%" y="197" width="0.1660%" height="15" fill="rgb(249,174,33)"/><text x="59.6233%" y="207.50"></text></g><g><title>predicates_defined_on (85,472 samples, 0.11%)</title><rect x="59.4336%" y="181" width="0.1057%" height="15" fill="rgb(233,201,37)"/><text x="59.6836%" y="191.50"></text></g><g><title>trait_impls_of (100,730 samples, 0.12%)</title><rect x="59.5797%" y="197" width="0.1246%" height="15" fill="rgb(221,78,26)"/><text x="59.8297%" y="207.50"></text></g><g><title>analysis (43,950,528 samples, 54.35%)</title><rect x="5.4542%" y="261" width="54.3469%" height="15" fill="rgb(250,127,30)"/><text x="5.7042%" y="271.50">analysis</text></g><g><title>type_check_crate (31,640,692 samples, 39.13%)</title><rect x="20.6759%" y="245" width="39.1252%" height="15" fill="rgb(230,49,44)"/><text x="20.9259%" y="255.50">type_check_crate</text></g><g><title>wf_checking (7,121,499 samples, 8.81%)</title><rect x="50.9951%" y="229" width="8.8061%" height="15" fill="rgb(229,67,23)"/><text x="51.2451%" y="239.50">wf_checking</text></g><g><title>check_item_well_formed (3,110,545 samples, 3.85%)</title><rect x="55.9548%" y="213" width="3.8463%" height="15" fill="rgb(249,83,47)"/><text x="56.2048%" y="223.50">chec..</text></g><g><title>codegen_module (218,182 samples, 0.27%)</title><rect x="60.3052%" y="245" width="0.2698%" height="15" fill="rgb(215,43,3)"/><text x="60.5552%" y="255.50"></text></g><g><title>codegen_crate (715,328 samples, 0.88%)</title><rect x="59.8130%" y="261" width="0.8845%" height="15" fill="rgb(238,154,13)"/><text x="60.0630%" y="271.50"></text></g><g><title>codegen_module_optimize (1,553,217 samples, 1.92%)</title><rect x="60.6976%" y="261" width="1.9206%" height="15" fill="rgb(219,56,2)"/><text x="60.9476%" y="271.50">c..</text></g><g><title>LLVM_module_optimize (308,204 samples, 0.38%)</title><rect x="62.2371%" y="245" width="0.3811%" height="15" fill="rgb(233,0,4)"/><text x="62.4871%" y="255.50"></text></g><g><title>LLVM_lto_optimize (112,231 samples, 0.14%)</title><rect x="62.8953%" y="245" width="0.1388%" height="15" fill="rgb(235,30,7)"/><text x="63.1453%" y="255.50"></text></g><g><title>LLVM_module_codegen (1,177,473 samples, 1.46%)</title><rect x="63.0341%" y="245" width="1.4560%" height="15" fill="rgb(250,79,13)"/><text x="63.2841%" y="255.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,161,273 samples, 1.44%)</title><rect x="63.0541%" y="229" width="1.4360%" height="15" fill="rgb(211,146,34)"/><text x="63.3041%" y="239.50"></text></g><g><title>codegen_module_perform_lto (1,535,297 samples, 1.90%)</title><rect x="62.6182%" y="261" width="1.8985%" height="15" fill="rgb(228,22,38)"/><text x="62.8682%" y="271.50">c..</text></g><g><title>AST_validation (127,302 samples, 0.16%)</title><rect x="64.7493%" y="245" width="0.1574%" height="15" fill="rgb(235,168,5)"/><text x="64.9993%" y="255.50"></text></g><g><title>crate_injection (82,281 samples, 0.10%)</title><rect x="64.9662%" y="245" width="0.1017%" height="15" fill="rgb(221,155,16)"/><text x="65.2162%" y="255.50"></text></g><g><title>metadata_register_crate (1,232,213 samples, 1.52%)</title><rect x="81.8321%" y="213" width="1.5237%" height="15" fill="rgb(215,215,53)"/><text x="82.0821%" y="223.50"></text></g><g><title>metadata_register_crate (305,753 samples, 0.38%)</title><rect x="82.9778%" y="197" width="0.3781%" height="15" fill="rgb(223,4,10)"/><text x="83.2278%" y="207.50"></text></g><g><title>macro_expand_crate (14,843,345 samples, 18.35%)</title><rect x="65.0680%" y="245" width="18.3545%" height="15" fill="rgb(234,103,6)"/><text x="65.3180%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (14,829,065 samples, 18.34%)</title><rect x="65.0856%" y="229" width="18.3368%" height="15" fill="rgb(227,97,0)"/><text x="65.3356%" y="239.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (134,522 samples, 0.17%)</title><rect x="83.4289%" y="245" width="0.1663%" height="15" fill="rgb(234,150,53)"/><text x="83.6789%" y="255.50"></text></g><g><title>finalize_imports (131,211 samples, 0.16%)</title><rect x="83.6049%" y="229" width="0.1622%" height="15" fill="rgb(228,201,54)"/><text x="83.8549%" y="239.50"></text></g><g><title>late_resolve_crate (880,229 samples, 1.09%)</title><rect x="83.7812%" y="229" width="1.0884%" height="15" fill="rgb(222,22,37)"/><text x="84.0312%" y="239.50"></text></g><g><title>configure_and_expand (16,553,095 samples, 20.47%)</title><rect x="64.5166%" y="261" width="20.4687%" height="15" fill="rgb(237,53,32)"/><text x="64.7666%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (1,124,152 samples, 1.39%)</title><rect x="83.5953%" y="245" width="1.3901%" height="15" fill="rgb(233,25,53)"/><text x="83.8453%" y="255.50"></text></g><g><title>drop_ast (97,751 samples, 0.12%)</title><rect x="84.9853%" y="261" width="0.1209%" height="15" fill="rgb(210,40,34)"/><text x="85.2353%" y="271.50"></text></g><g><title>early_lint_checks (235,753 samples, 0.29%)</title><rect x="85.1274%" y="261" width="0.2915%" height="15" fill="rgb(241,220,44)"/><text x="85.3774%" y="271.50"></text></g><g><title>free_global_ctxt (1,916,761 samples, 2.37%)</title><rect x="85.4189%" y="261" width="2.3702%" height="15" fill="rgb(235,28,35)"/><text x="85.6689%" y="271.50">fr..</text></g><g><title>is_sized_raw (236,672 samples, 0.29%)</title><rect x="89.8330%" y="213" width="0.2927%" height="15" fill="rgb(210,56,17)"/><text x="90.0830%" y="223.50"></text></g><g><title>evaluate_obligation (220,412 samples, 0.27%)</title><rect x="89.8531%" y="197" width="0.2725%" height="15" fill="rgb(224,130,29)"/><text x="90.1031%" y="207.50"></text></g><g><title>layout_of (217,032 samples, 0.27%)</title><rect x="90.4532%" y="101" width="0.2684%" height="15" fill="rgb(235,212,8)"/><text x="90.7032%" y="111.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (142,312 samples, 0.18%)</title><rect x="90.5456%" y="85" width="0.1760%" height="15" fill="rgb(223,33,50)"/><text x="90.7956%" y="95.50"></text></g><g><title>normalize_projection_ty (140,182 samples, 0.17%)</title><rect x="90.5482%" y="69" width="0.1733%" height="15" fill="rgb(219,149,13)"/><text x="90.7982%" y="79.50"></text></g><g><title>layout_of (278,343 samples, 0.34%)</title><rect x="90.3899%" y="117" width="0.3442%" height="15" fill="rgb(250,156,29)"/><text x="90.6399%" y="127.50"></text></g><g><title>layout_of (298,204 samples, 0.37%)</title><rect x="90.3716%" y="133" width="0.3687%" height="15" fill="rgb(216,193,19)"/><text x="90.6216%" y="143.50"></text></g><g><title>layout_of (457,015 samples, 0.57%)</title><rect x="90.2453%" y="149" width="0.5651%" height="15" fill="rgb(216,135,14)"/><text x="90.4953%" y="159.50"></text></g><g><title>layout_of (503,695 samples, 0.62%)</title><rect x="90.2074%" y="165" width="0.6228%" height="15" fill="rgb(241,47,5)"/><text x="90.4574%" y="175.50"></text></g><g><title>layout_of (566,356 samples, 0.70%)</title><rect x="90.1390%" y="197" width="0.7003%" height="15" fill="rgb(233,42,35)"/><text x="90.3890%" y="207.50"></text></g><g><title>layout_of (551,926 samples, 0.68%)</title><rect x="90.1568%" y="181" width="0.6825%" height="15" fill="rgb(231,13,6)"/><text x="90.4068%" y="191.50"></text></g><g><title>layout_of (671,027 samples, 0.83%)</title><rect x="90.1257%" y="213" width="0.8298%" height="15" fill="rgb(207,181,40)"/><text x="90.3757%" y="223.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (93,901 samples, 0.12%)</title><rect x="90.8393%" y="197" width="0.1161%" height="15" fill="rgb(254,173,49)"/><text x="91.0893%" y="207.50"></text></g><g><title>normalize_projection_ty (87,441 samples, 0.11%)</title><rect x="90.8473%" y="181" width="0.1081%" height="15" fill="rgb(221,1,38)"/><text x="91.0973%" y="191.50"></text></g><g><title>layout_of (1,069,701 samples, 1.32%)</title><rect x="89.6658%" y="229" width="1.3227%" height="15" fill="rgb(206,124,46)"/><text x="89.9158%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (768,979 samples, 0.95%)</title><rect x="90.9885%" y="229" width="0.9509%" height="15" fill="rgb(249,21,11)"/><text x="91.2385%" y="239.50"></text></g><g><title>optimized_mir (2,582,301 samples, 3.19%)</title><rect x="88.7591%" y="245" width="3.1931%" height="15" fill="rgb(222,201,40)"/><text x="89.0091%" y="255.50">opt..</text></g><g><title>generate_crate_metadata (3,384,878 samples, 4.19%)</title><rect x="87.7891%" y="261" width="4.1856%" height="15" fill="rgb(235,61,29)"/><text x="88.0391%" y="271.50">gener..</text></g><g><title>hir_lowering (1,800,470 samples, 2.23%)</title><rect x="91.9746%" y="261" width="2.2264%" height="15" fill="rgb(219,207,3)"/><text x="92.2246%" y="271.50">h..</text></g><g><title>finish_ongoing_codegen (1,292,624 samples, 1.60%)</title><rect x="94.2147%" y="245" width="1.5984%" height="15" fill="rgb(222,56,46)"/><text x="94.4647%" y="255.50"></text></g><g><title>link_crate (620,187 samples, 0.77%)</title><rect x="95.8131%" y="245" width="0.7669%" height="15" fill="rgb(239,76,54)"/><text x="96.0631%" y="255.50"></text></g><g><title>link_binary (611,687 samples, 0.76%)</title><rect x="95.8236%" y="229" width="0.7564%" height="15" fill="rgb(231,124,27)"/><text x="96.0736%" y="239.50"></text></g><g><title>link_rlib (390,845 samples, 0.48%)</title><rect x="96.0967%" y="213" width="0.4833%" height="15" fill="rgb(249,195,6)"/><text x="96.3467%" y="223.50"></text></g><g><title>link (1,930,241 samples, 2.39%)</title><rect x="94.2010%" y="261" width="2.3868%" height="15" fill="rgb(237,174,47)"/><text x="94.4510%" y="271.50">li..</text></g><g><title>parse_crate (1,532,727 samples, 1.90%)</title><rect x="96.5878%" y="261" width="1.8953%" height="15" fill="rgb(206,201,31)"/><text x="96.8378%" y="271.50">p..</text></g><g><title>prepare_outputs (291,493 samples, 0.36%)</title><rect x="98.4944%" y="261" width="0.3604%" height="15" fill="rgb(231,57,52)"/><text x="98.7444%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (478,706 samples, 0.59%)</title><rect x="98.8548%" y="261" width="0.5919%" height="15" fill="rgb(248,177,22)"/><text x="99.1048%" y="271.50"></text></g><g><title>setup_global_ctxt (110,791 samples, 0.14%)</title><rect x="99.4479%" y="261" width="0.1370%" height="15" fill="rgb(215,211,37)"/><text x="99.6979%" y="271.50"></text></g><g><title>all (80,870,338 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(241,128,51)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (80,870,338 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(227,165,31)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (335,734 samples, 0.42%)</title><rect x="99.5848%" y="261" width="0.4152%" height="15" fill="rgb(228,167,24)"/><text x="99.8348%" y="271.50"></text></g></svg></svg>