<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (281,326,311 samples, 13.70%)</title><rect x="0.0487%" y="181" width="13.7013%" height="15" fill="rgb(227,0,7)"/><text x="0.2987%" y="191.50">LLVM_passes</text></g><g><title>resolve_instance (3,270,642 samples, 0.16%)</title><rect x="16.5199%" y="69" width="0.1593%" height="15" fill="rgb(217,0,24)"/><text x="16.7699%" y="79.50"></text></g><g><title>thir_body (2,684,113 samples, 0.13%)</title><rect x="16.6847%" y="69" width="0.1307%" height="15" fill="rgb(221,193,54)"/><text x="16.9347%" y="79.50"></text></g><g><title>mir_const (22,284,887 samples, 1.09%)</title><rect x="15.7347%" y="117" width="1.0853%" height="15" fill="rgb(248,212,6)"/><text x="15.9847%" y="127.50"></text></g><g><title>unsafety_check_result (18,769,529 samples, 0.91%)</title><rect x="15.9059%" y="101" width="0.9141%" height="15" fill="rgb(208,68,35)"/><text x="16.1559%" y="111.50"></text></g><g><title>mir_built (16,352,050 samples, 0.80%)</title><rect x="16.0237%" y="85" width="0.7964%" height="15" fill="rgb(232,128,0)"/><text x="16.2737%" y="95.50"></text></g><g><title>mir_promoted (26,956,941 samples, 1.31%)</title><rect x="15.6042%" y="133" width="1.3129%" height="15" fill="rgb(207,160,47)"/><text x="15.8542%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,215,766 samples, 0.25%)</title><rect x="17.0390%" y="133" width="0.2540%" height="15" fill="rgb(228,23,34)"/><text x="17.2890%" y="143.50"></text></g><g><title>MIR_borrow_checking (72,019,356 samples, 3.51%)</title><rect x="13.7865%" y="165" width="3.5075%" height="15" fill="rgb(218,30,26)"/><text x="14.0365%" y="175.50">MIR..</text></g><g><title>mir_borrowck (71,411,601 samples, 3.48%)</title><rect x="13.8161%" y="149" width="3.4779%" height="15" fill="rgb(220,122,19)"/><text x="14.0661%" y="159.50">mir..</text></g><g><title>misc_checking_1 (3,591,909 samples, 0.17%)</title><rect x="17.3734%" y="165" width="0.1749%" height="15" fill="rgb(250,228,42)"/><text x="17.6234%" y="175.50"></text></g><g><title>module_children (4,307,607 samples, 0.21%)</title><rect x="17.8160%" y="101" width="0.2098%" height="15" fill="rgb(240,193,28)"/><text x="18.0660%" y="111.50"></text></g><g><title>metadata_decode_entry_module_children (4,235,655 samples, 0.21%)</title><rect x="17.8195%" y="85" width="0.2063%" height="15" fill="rgb(216,20,37)"/><text x="18.0695%" y="95.50"></text></g><g><title>trimmed_def_paths (5,262,525 samples, 0.26%)</title><rect x="17.7696%" y="117" width="0.2563%" height="15" fill="rgb(206,188,39)"/><text x="18.0196%" y="127.50"></text></g><g><title>misc_checking_2 (9,821,094 samples, 0.48%)</title><rect x="17.5484%" y="165" width="0.4783%" height="15" fill="rgb(217,207,13)"/><text x="17.7984%" y="175.50"></text></g><g><title>match_checking (8,361,129 samples, 0.41%)</title><rect x="17.6195%" y="149" width="0.4072%" height="15" fill="rgb(231,73,38)"/><text x="17.8695%" y="159.50"></text></g><g><title>check_match (8,127,399 samples, 0.40%)</title><rect x="17.6309%" y="133" width="0.3958%" height="15" fill="rgb(225,20,46)"/><text x="17.8809%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,539,557 samples, 0.17%)</title><rect x="18.1941%" y="117" width="0.1724%" height="15" fill="rgb(210,31,41)"/><text x="18.4441%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,536,167 samples, 0.17%)</title><rect x="18.1942%" y="101" width="0.1722%" height="15" fill="rgb(221,200,47)"/><text x="18.4442%" y="111.50"></text></g><g><title>eval_to_allocation_raw (3,529,097 samples, 0.17%)</title><rect x="18.1946%" y="85" width="0.1719%" height="15" fill="rgb(226,26,5)"/><text x="18.4446%" y="95.50"></text></g><g><title>crate_lints (6,476,919 samples, 0.32%)</title><rect x="18.1280%" y="133" width="0.3154%" height="15" fill="rgb(249,33,26)"/><text x="18.3780%" y="143.50"></text></g><g><title>lint_checking (7,550,021 samples, 0.37%)</title><rect x="18.1279%" y="149" width="0.3677%" height="15" fill="rgb(235,183,28)"/><text x="18.3779%" y="159.50"></text></g><g><title>privacy_checking_modules (2,588,627 samples, 0.13%)</title><rect x="18.5533%" y="149" width="0.1261%" height="15" fill="rgb(221,5,38)"/><text x="18.8033%" y="159.50"></text></g><g><title>check_mod_privacy (2,584,287 samples, 0.13%)</title><rect x="18.5535%" y="133" width="0.1259%" height="15" fill="rgb(247,18,42)"/><text x="18.8035%" y="143.50"></text></g><g><title>misc_checking_3 (13,430,873 samples, 0.65%)</title><rect x="18.0267%" y="165" width="0.6541%" height="15" fill="rgb(241,131,45)"/><text x="18.2767%" y="175.50"></text></g><g><title>impl_parent (3,485,588 samples, 0.17%)</title><rect x="19.0548%" y="101" width="0.1698%" height="15" fill="rgb(249,31,29)"/><text x="19.3048%" y="111.50"></text></g><g><title>impl_trait_ref (7,129,572 samples, 0.35%)</title><rect x="19.2246%" y="101" width="0.3472%" height="15" fill="rgb(225,111,53)"/><text x="19.4746%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,741,829 samples, 0.28%)</title><rect x="19.2922%" y="85" width="0.2796%" height="15" fill="rgb(238,160,17)"/><text x="19.5422%" y="95.50"></text></g><g><title>coherent_trait (20,047,313 samples, 0.98%)</title><rect x="18.6968%" y="133" width="0.9764%" height="15" fill="rgb(214,148,48)"/><text x="18.9468%" y="143.50"></text></g><g><title>specialization_graph_of (19,582,197 samples, 0.95%)</title><rect x="18.7195%" y="117" width="0.9537%" height="15" fill="rgb(232,36,49)"/><text x="18.9695%" y="127.50"></text></g><g><title>coherence_checking (20,251,536 samples, 0.99%)</title><rect x="18.6951%" y="149" width="0.9863%" height="15" fill="rgb(209,103,24)"/><text x="18.9451%" y="159.50"></text></g><g><title>evaluate_obligation (5,095,714 samples, 0.25%)</title><rect x="22.1124%" y="101" width="0.2482%" height="15" fill="rgb(229,88,8)"/><text x="22.3624%" y="111.50"></text></g><g><title>typeck (15,953,667 samples, 0.78%)</title><rect x="22.4989%" y="101" width="0.7770%" height="15" fill="rgb(213,181,19)"/><text x="22.7489%" y="111.50"></text></g><g><title>item_bodies_checking (73,824,724 samples, 3.60%)</title><rect x="19.6877%" y="149" width="3.5954%" height="15" fill="rgb(254,191,54)"/><text x="19.9377%" y="159.50">item..</text></g><g><title>typeck_item_bodies (73,822,194 samples, 3.60%)</title><rect x="19.6878%" y="133" width="3.5953%" height="15" fill="rgb(241,83,37)"/><text x="19.9378%" y="143.50">type..</text></g><g><title>typeck (73,396,639 samples, 3.57%)</title><rect x="19.7085%" y="117" width="3.5746%" height="15" fill="rgb(233,36,39)"/><text x="19.9585%" y="127.50">type..</text></g><g><title>item_types_checking (7,713,983 samples, 0.38%)</title><rect x="23.2831%" y="149" width="0.3757%" height="15" fill="rgb(226,3,54)"/><text x="23.5331%" y="159.50"></text></g><g><title>check_mod_item_types (7,708,183 samples, 0.38%)</title><rect x="23.2834%" y="133" width="0.3754%" height="15" fill="rgb(245,192,40)"/><text x="23.5334%" y="143.50"></text></g><g><title>mir_const_qualif (2,844,250 samples, 0.14%)</title><rect x="23.8458%" y="69" width="0.1385%" height="15" fill="rgb(238,167,29)"/><text x="24.0958%" y="79.50"></text></g><g><title>mir_const (2,367,618 samples, 0.12%)</title><rect x="23.8690%" y="53" width="0.1153%" height="15" fill="rgb(232,182,51)"/><text x="24.1190%" y="63.50"></text></g><g><title>mir_borrowck (5,853,593 samples, 0.29%)</title><rect x="24.1446%" y="37" width="0.2851%" height="15" fill="rgb(231,60,39)"/><text x="24.3946%" y="47.50"></text></g><g><title>mir_for_ctfe (9,191,598 samples, 0.45%)</title><rect x="23.9843%" y="69" width="0.4477%" height="15" fill="rgb(208,69,12)"/><text x="24.2343%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,401,210 samples, 0.41%)</title><rect x="24.0228%" y="53" width="0.4092%" height="15" fill="rgb(235,93,37)"/><text x="24.2728%" y="63.50"></text></g><g><title>eval_to_const_value_raw (17,837,039 samples, 0.87%)</title><rect x="23.7365%" y="117" width="0.8687%" height="15" fill="rgb(213,116,39)"/><text x="23.9865%" y="127.50"></text></g><g><title>eval_to_const_value_raw (17,712,308 samples, 0.86%)</title><rect x="23.7425%" y="101" width="0.8626%" height="15" fill="rgb(222,207,29)"/><text x="23.9925%" y="111.50"></text></g><g><title>eval_to_allocation_raw (17,476,305 samples, 0.85%)</title><rect x="23.7540%" y="85" width="0.8511%" height="15" fill="rgb(206,96,30)"/><text x="24.0040%" y="95.50"></text></g><g><title>typeck (3,530,146 samples, 0.17%)</title><rect x="24.4333%" y="69" width="0.1719%" height="15" fill="rgb(218,138,4)"/><text x="24.6833%" y="79.50"></text></g><g><title>generics_of (2,558,127 samples, 0.12%)</title><rect x="24.6558%" y="117" width="0.1246%" height="15" fill="rgb(250,191,14)"/><text x="24.9058%" y="127.50"></text></g><g><title>type_collecting (27,410,421 samples, 1.33%)</title><rect x="23.6591%" y="149" width="1.3350%" height="15" fill="rgb(239,60,40)"/><text x="23.9091%" y="159.50"></text></g><g><title>collect_mod_item_types (27,398,350 samples, 1.33%)</title><rect x="23.6596%" y="133" width="1.3344%" height="15" fill="rgb(206,27,48)"/><text x="23.9096%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,140,700 samples, 0.64%)</title><rect x="25.0345%" y="133" width="0.6400%" height="15" fill="rgb(225,35,8)"/><text x="25.2845%" y="143.50"></text></g><g><title>check_item_well_formed (8,636,907 samples, 0.42%)</title><rect x="25.6745%" y="133" width="0.4206%" height="15" fill="rgb(250,213,24)"/><text x="25.9245%" y="143.50"></text></g><g><title>analysis (254,239,233 samples, 12.38%)</title><rect x="13.7500%" y="181" width="12.3821%" height="15" fill="rgb(247,123,22)"/><text x="14.0000%" y="191.50">analysis</text></g><g><title>type_check_crate (152,994,846 samples, 7.45%)</title><rect x="18.6808%" y="165" width="7.4512%" height="15" fill="rgb(231,138,38)"/><text x="18.9308%" y="175.50">type_check..</text></g><g><title>wf_checking (23,334,087 samples, 1.14%)</title><rect x="24.9956%" y="149" width="1.1364%" height="15" fill="rgb(231,145,46)"/><text x="25.2456%" y="159.50"></text></g><g><title>param_env (4,859,244 samples, 0.24%)</title><rect x="29.0580%" y="133" width="0.2367%" height="15" fill="rgb(251,118,11)"/><text x="29.3080%" y="143.50"></text></g><g><title>fn_abi_of_instance (14,240,931 samples, 0.69%)</title><rect x="28.6369%" y="149" width="0.6936%" height="15" fill="rgb(217,147,25)"/><text x="28.8869%" y="159.50"></text></g><g><title>codegen_module (65,247,437 samples, 3.18%)</title><rect x="26.2612%" y="165" width="3.1777%" height="15" fill="rgb(247,81,37)"/><text x="26.5112%" y="175.50">cod..</text></g><g><title>codegen_fn_attrs (2,187,008 samples, 0.11%)</title><rect x="29.6219%" y="117" width="0.1065%" height="15" fill="rgb(209,12,38)"/><text x="29.8719%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,001,262 samples, 0.15%)</title><rect x="29.9403%" y="101" width="0.1462%" height="15" fill="rgb(227,1,9)"/><text x="30.1903%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,827,335 samples, 0.14%)</title><rect x="30.0865%" y="101" width="0.1377%" height="15" fill="rgb(248,47,43)"/><text x="30.3365%" y="111.50"></text></g><g><title>optimized_mir (9,691,304 samples, 0.47%)</title><rect x="29.7752%" y="117" width="0.4720%" height="15" fill="rgb(221,10,30)"/><text x="30.0252%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,584,926 samples, 0.17%)</title><rect x="30.3412%" y="101" width="0.1746%" height="15" fill="rgb(210,229,1)"/><text x="30.5912%" y="111.50"></text></g><g><title>resolve_instance (7,259,326 samples, 0.35%)</title><rect x="30.2472%" y="117" width="0.3535%" height="15" fill="rgb(222,148,37)"/><text x="30.4972%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (26,393,750 samples, 1.29%)</title><rect x="29.4413%" y="133" width="1.2854%" height="15" fill="rgb(234,67,33)"/><text x="29.6913%" y="143.50"></text></g><g><title>monomorphization_collector (26,599,162 samples, 1.30%)</title><rect x="29.4412%" y="149" width="1.2954%" height="15" fill="rgb(247,98,35)"/><text x="29.6912%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (2,824,110 samples, 0.14%)</title><rect x="30.7373%" y="133" width="0.1375%" height="15" fill="rgb(247,138,52)"/><text x="30.9873%" y="143.50"></text></g><g><title>symbol_name (2,536,228 samples, 0.12%)</title><rect x="30.7514%" y="117" width="0.1235%" height="15" fill="rgb(213,79,30)"/><text x="31.0014%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (30,582,734 samples, 1.49%)</title><rect x="29.4395%" y="165" width="1.4895%" height="15" fill="rgb(246,177,23)"/><text x="29.6895%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,947,402 samples, 0.19%)</title><rect x="30.7367%" y="149" width="0.1922%" height="15" fill="rgb(230,62,27)"/><text x="30.9867%" y="159.50"></text></g><g><title>codegen_crate (98,545,738 samples, 4.80%)</title><rect x="26.1324%" y="181" width="4.7994%" height="15" fill="rgb(216,154,8)"/><text x="26.3824%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (540,259,616 samples, 26.31%)</title><rect x="30.9319%" y="181" width="26.3120%" height="15" fill="rgb(244,35,45)"/><text x="31.1819%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (515,343,609 samples, 25.10%)</title><rect x="32.1453%" y="165" width="25.0985%" height="15" fill="rgb(251,115,12)"/><text x="32.3953%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (253,394,303 samples, 12.34%)</title><rect x="58.0050%" y="165" width="12.3409%" height="15" fill="rgb(240,54,50)"/><text x="58.2550%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (238,869,938 samples, 11.63%)</title><rect x="70.3459%" y="165" width="11.6336%" height="15" fill="rgb(233,84,52)"/><text x="70.5959%" y="175.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (236,254,431 samples, 11.51%)</title><rect x="70.4733%" y="149" width="11.5062%" height="15" fill="rgb(207,117,47)"/><text x="70.7233%" y="159.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (36,903,282 samples, 1.80%)</title><rect x="81.9795%" y="165" width="1.7973%" height="15" fill="rgb(249,43,39)"/><text x="82.2295%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (545,902,323 samples, 26.59%)</title><rect x="57.2439%" y="181" width="26.5868%" height="15" fill="rgb(209,38,44)"/><text x="57.4939%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,562,817 samples, 0.12%)</title><rect x="86.1557%" y="133" width="0.1248%" height="15" fill="rgb(236,212,23)"/><text x="86.4057%" y="143.50"></text></g><g><title>macro_expand_crate (50,785,390 samples, 2.47%)</title><rect x="83.8665%" y="165" width="2.4734%" height="15" fill="rgb(242,79,21)"/><text x="84.1165%" y="175.50">ma..</text></g><g><title>expand_crate (50,774,760 samples, 2.47%)</title><rect x="83.8670%" y="149" width="2.4729%" height="15" fill="rgb(211,96,35)"/><text x="84.1170%" y="159.50">ex..</text></g><g><title>late_resolve_crate (4,151,783 samples, 0.20%)</title><rect x="86.3601%" y="149" width="0.2022%" height="15" fill="rgb(253,215,40)"/><text x="86.6101%" y="159.50"></text></g><g><title>configure_and_expand (56,381,009 samples, 2.75%)</title><rect x="83.8307%" y="181" width="2.7459%" height="15" fill="rgb(211,81,21)"/><text x="84.0807%" y="191.50">co..</text></g><g><title>resolve_crate (4,796,730 samples, 0.23%)</title><rect x="86.3430%" y="165" width="0.2336%" height="15" fill="rgb(208,190,38)"/><text x="86.5930%" y="175.50"></text></g><g><title>free_global_ctxt (13,350,122 samples, 0.65%)</title><rect x="86.6572%" y="181" width="0.6502%" height="15" fill="rgb(235,213,38)"/><text x="86.9072%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,791,344 samples, 0.38%)</title><rect x="88.1804%" y="149" width="0.3795%" height="15" fill="rgb(237,122,38)"/><text x="88.4304%" y="159.50"></text></g><g><title>optimized_mir (18,270,733 samples, 0.89%)</title><rect x="87.6771%" y="165" width="0.8898%" height="15" fill="rgb(244,218,35)"/><text x="87.9271%" y="175.50"></text></g><g><title>generate_crate_metadata (26,239,919 samples, 1.28%)</title><rect x="87.3074%" y="181" width="1.2779%" height="15" fill="rgb(240,68,47)"/><text x="87.5574%" y="191.50"></text></g><g><title>hir_lowering (8,876,834 samples, 0.43%)</title><rect x="88.5854%" y="181" width="0.4323%" height="15" fill="rgb(210,16,53)"/><text x="88.8354%" y="191.50"></text></g><g><title>finish_ongoing_codegen (216,473,901 samples, 10.54%)</title><rect x="89.0194%" y="165" width="10.5428%" height="15" fill="rgb(235,124,12)"/><text x="89.2694%" y="175.50">finish_ongoing_..</text></g><g><title>link_crate (3,907,981 samples, 0.19%)</title><rect x="99.5622%" y="165" width="0.1903%" height="15" fill="rgb(224,169,11)"/><text x="99.8122%" y="175.50"></text></g><g><title>link_binary (3,644,729 samples, 0.18%)</title><rect x="99.5750%" y="149" width="0.1775%" height="15" fill="rgb(250,166,2)"/><text x="99.8250%" y="159.50"></text></g><g><title>link_rlib (2,716,629 samples, 0.13%)</title><rect x="99.6202%" y="133" width="0.1323%" height="15" fill="rgb(242,216,29)"/><text x="99.8702%" y="143.50"></text></g><g><title>link (220,432,843 samples, 10.74%)</title><rect x="89.0177%" y="181" width="10.7356%" height="15" fill="rgb(230,116,27)"/><text x="89.2677%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (3,760,879 samples, 0.18%)</title><rect x="99.7842%" y="181" width="0.1832%" height="15" fill="rgb(228,99,48)"/><text x="100.0342%" y="191.50"></text></g><g><title>all (2,053,282,551 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,053,282,551 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>