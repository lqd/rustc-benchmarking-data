<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,932,074 samples, 1.19%)</title><rect x="0.1507%" y="181" width="1.1914%" height="15" fill="rgb(227,0,7)"/><text x="0.4007%" y="191.50"></text></g><g><title>param_env (990,683 samples, 0.24%)</title><rect x="14.7489%" y="101" width="0.2393%" height="15" fill="rgb(217,0,24)"/><text x="14.9989%" y="111.50"></text></g><g><title>item_attrs (981,439 samples, 0.24%)</title><rect x="15.4758%" y="69" width="0.2371%" height="15" fill="rgb(221,193,54)"/><text x="15.7258%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (959,409 samples, 0.23%)</title><rect x="15.4811%" y="53" width="0.2318%" height="15" fill="rgb(248,212,6)"/><text x="15.7311%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,206,734 samples, 0.29%)</title><rect x="15.4290%" y="85" width="0.2915%" height="15" fill="rgb(208,68,35)"/><text x="15.6790%" y="95.50"></text></g><g><title>is_copy_raw (551,300 samples, 0.13%)</title><rect x="17.9806%" y="69" width="0.1332%" height="15" fill="rgb(232,128,0)"/><text x="18.2306%" y="79.50"></text></g><g><title>evaluate_obligation (443,538 samples, 0.11%)</title><rect x="18.0066%" y="53" width="0.1071%" height="15" fill="rgb(207,160,47)"/><text x="18.2566%" y="63.50"></text></g><g><title>adt_drop_tys (616,695 samples, 0.15%)</title><rect x="18.2586%" y="53" width="0.1490%" height="15" fill="rgb(228,23,34)"/><text x="18.5086%" y="63.50"></text></g><g><title>needs_drop_raw (3,899,019 samples, 0.94%)</title><rect x="18.1151%" y="69" width="0.9419%" height="15" fill="rgb(218,30,26)"/><text x="18.3651%" y="79.50"></text></g><g><title>is_copy_raw (2,688,239 samples, 0.65%)</title><rect x="18.4076%" y="53" width="0.6494%" height="15" fill="rgb(220,122,19)"/><text x="18.6576%" y="63.50"></text></g><g><title>evaluate_obligation (2,074,560 samples, 0.50%)</title><rect x="18.5559%" y="37" width="0.5011%" height="15" fill="rgb(250,228,42)"/><text x="18.8059%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,627,359 samples, 0.39%)</title><rect x="19.3153%" y="53" width="0.3931%" height="15" fill="rgb(240,193,28)"/><text x="19.5653%" y="63.50"></text></g><g><title>resolve_instance (3,083,621 samples, 0.74%)</title><rect x="19.0570%" y="69" width="0.7449%" height="15" fill="rgb(216,20,37)"/><text x="19.3070%" y="79.50"></text></g><g><title>thir_body (3,400,375 samples, 0.82%)</title><rect x="19.8361%" y="69" width="0.8214%" height="15" fill="rgb(206,188,39)"/><text x="20.0861%" y="79.50"></text></g><g><title>mir_const (27,699,952 samples, 6.69%)</title><rect x="13.9969%" y="117" width="6.6913%" height="15" fill="rgb(217,207,13)"/><text x="14.2469%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (23,596,147 samples, 5.70%)</title><rect x="14.9882%" y="101" width="5.6999%" height="15" fill="rgb(231,73,38)"/><text x="15.2382%" y="111.50">unsafet..</text></g><g><title>mir_built (20,564,813 samples, 4.97%)</title><rect x="15.7205%" y="85" width="4.9677%" height="15" fill="rgb(225,20,46)"/><text x="15.9705%" y="95.50">mir_bu..</text></g><g><title>mir_promoted (30,720,258 samples, 7.42%)</title><rect x="13.3171%" y="133" width="7.4209%" height="15" fill="rgb(210,31,41)"/><text x="13.5671%" y="143.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (761,619 samples, 0.18%)</title><rect x="20.7380%" y="133" width="0.1840%" height="15" fill="rgb(221,200,47)"/><text x="20.9880%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,273,825 samples, 0.31%)</title><rect x="20.9220%" y="133" width="0.3077%" height="15" fill="rgb(226,26,5)"/><text x="21.1720%" y="143.50"></text></g><g><title>normalize_projection_ty (742,249 samples, 0.18%)</title><rect x="21.0504%" y="117" width="0.1793%" height="15" fill="rgb(249,33,26)"/><text x="21.3004%" y="127.50"></text></g><g><title>type_op_normalize_predicate (812,741 samples, 0.20%)</title><rect x="21.2297%" y="133" width="0.1963%" height="15" fill="rgb(235,183,28)"/><text x="21.4797%" y="143.50"></text></g><g><title>type_op_prove_predicate (13,351,608 samples, 3.23%)</title><rect x="21.4420%" y="133" width="3.2253%" height="15" fill="rgb(221,5,38)"/><text x="21.6920%" y="143.50">typ..</text></g><g><title>MIR_borrow_checking (95,757,089 samples, 23.13%)</title><rect x="1.5380%" y="165" width="23.1313%" height="15" fill="rgb(247,18,42)"/><text x="1.7880%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (95,167,054 samples, 22.99%)</title><rect x="1.6805%" y="149" width="22.9888%" height="15" fill="rgb(241,131,45)"/><text x="1.9305%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (615,917 samples, 0.15%)</title><rect x="24.7204%" y="165" width="0.1488%" height="15" fill="rgb(249,31,29)"/><text x="24.9704%" y="175.50"></text></g><g><title>should_inherit_track_caller (646,033 samples, 0.16%)</title><rect x="25.1065%" y="117" width="0.1561%" height="15" fill="rgb(225,111,53)"/><text x="25.3565%" y="127.50"></text></g><g><title>codegen_fn_attrs (994,767 samples, 0.24%)</title><rect x="25.0262%" y="133" width="0.2403%" height="15" fill="rgb(238,160,17)"/><text x="25.2762%" y="143.50"></text></g><g><title>check_mod_attrs (1,617,858 samples, 0.39%)</title><rect x="24.8757%" y="149" width="0.3908%" height="15" fill="rgb(214,148,48)"/><text x="25.1257%" y="159.50"></text></g><g><title>lookup_deprecation_entry (488,924 samples, 0.12%)</title><rect x="25.7305%" y="133" width="0.1181%" height="15" fill="rgb(232,36,49)"/><text x="25.9805%" y="143.50"></text></g><g><title>predicates_of (1,078,661 samples, 0.26%)</title><rect x="25.9122%" y="117" width="0.2606%" height="15" fill="rgb(209,103,24)"/><text x="26.1622%" y="127.50"></text></g><g><title>predicates_defined_on (1,076,391 samples, 0.26%)</title><rect x="25.9127%" y="101" width="0.2600%" height="15" fill="rgb(229,88,8)"/><text x="26.1627%" y="111.50"></text></g><g><title>inferred_outlives_of (1,030,331 samples, 0.25%)</title><rect x="25.9239%" y="85" width="0.2489%" height="15" fill="rgb(213,181,19)"/><text x="26.1739%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,022,081 samples, 0.25%)</title><rect x="25.9259%" y="69" width="0.2469%" height="15" fill="rgb(254,191,54)"/><text x="26.1759%" y="79.50"></text></g><g><title>type_of (513,727 samples, 0.12%)</title><rect x="26.0487%" y="53" width="0.1241%" height="15" fill="rgb(241,83,37)"/><text x="26.2987%" y="63.50"></text></g><g><title>param_env (1,236,743 samples, 0.30%)</title><rect x="25.8753%" y="133" width="0.2988%" height="15" fill="rgb(233,36,39)"/><text x="26.1253%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,211,025 samples, 0.78%)</title><rect x="25.4247%" y="149" width="0.7757%" height="15" fill="rgb(226,3,54)"/><text x="25.6747%" y="159.50"></text></g><g><title>misc_checking_1 (5,608,282 samples, 1.35%)</title><rect x="24.8693%" y="165" width="1.3548%" height="15" fill="rgb(245,192,40)"/><text x="25.1193%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,863,910 samples, 0.45%)</title><rect x="26.2245%" y="149" width="0.4503%" height="15" fill="rgb(238,167,29)"/><text x="26.4745%" y="159.50"></text></g><g><title>check_mod_liveness (1,608,068 samples, 0.39%)</title><rect x="26.2863%" y="133" width="0.3884%" height="15" fill="rgb(232,182,51)"/><text x="26.5363%" y="143.50"></text></g><g><title>type_uninhabited_from (439,315 samples, 0.11%)</title><rect x="26.5687%" y="117" width="0.1061%" height="15" fill="rgb(231,60,39)"/><text x="26.8187%" y="127.50"></text></g><g><title>misc_checking_2 (3,562,370 samples, 0.86%)</title><rect x="26.2241%" y="165" width="0.8605%" height="15" fill="rgb(208,69,12)"/><text x="26.4741%" y="175.50"></text></g><g><title>match_checking (1,696,639 samples, 0.41%)</title><rect x="26.6748%" y="149" width="0.4098%" height="15" fill="rgb(235,93,37)"/><text x="26.9248%" y="159.50"></text></g><g><title>check_match (1,562,047 samples, 0.38%)</title><rect x="26.7073%" y="133" width="0.3773%" height="15" fill="rgb(213,116,39)"/><text x="26.9573%" y="143.50"></text></g><g><title>check_private_in_public (763,718 samples, 0.18%)</title><rect x="27.0873%" y="149" width="0.1845%" height="15" fill="rgb(222,207,29)"/><text x="27.3373%" y="159.50"></text></g><g><title>death_checking (1,171,323 samples, 0.28%)</title><rect x="27.2718%" y="149" width="0.2829%" height="15" fill="rgb(206,96,30)"/><text x="27.5218%" y="159.50"></text></g><g><title>crate_lints (2,924,862 samples, 0.71%)</title><rect x="27.5551%" y="133" width="0.7065%" height="15" fill="rgb(218,138,4)"/><text x="27.8051%" y="143.50"></text></g><g><title>type_of (1,207,235 samples, 0.29%)</title><rect x="27.9700%" y="117" width="0.2916%" height="15" fill="rgb(250,191,14)"/><text x="28.2200%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (967,173 samples, 0.23%)</title><rect x="28.0280%" y="101" width="0.2336%" height="15" fill="rgb(239,60,40)"/><text x="28.2780%" y="111.50"></text></g><g><title>lint_checking (4,238,507 samples, 1.02%)</title><rect x="27.5547%" y="149" width="1.0239%" height="15" fill="rgb(206,27,48)"/><text x="27.8047%" y="159.50"></text></g><g><title>module_lints (1,312,145 samples, 0.32%)</title><rect x="28.2616%" y="133" width="0.3170%" height="15" fill="rgb(225,35,8)"/><text x="28.5116%" y="143.50"></text></g><g><title>lint_mod (1,305,575 samples, 0.32%)</title><rect x="28.2632%" y="117" width="0.3154%" height="15" fill="rgb(250,213,24)"/><text x="28.5132%" y="127.50"></text></g><g><title>privacy_access_levels (1,127,533 samples, 0.27%)</title><rect x="28.5786%" y="149" width="0.2724%" height="15" fill="rgb(247,123,22)"/><text x="28.8286%" y="159.50"></text></g><g><title>privacy_checking_modules (3,384,887 samples, 0.82%)</title><rect x="28.8510%" y="149" width="0.8177%" height="15" fill="rgb(231,138,38)"/><text x="29.1010%" y="159.50"></text></g><g><title>check_mod_privacy (3,381,087 samples, 0.82%)</title><rect x="28.8519%" y="133" width="0.8167%" height="15" fill="rgb(231,145,46)"/><text x="29.1019%" y="143.50"></text></g><g><title>misc_checking_3 (10,730,068 samples, 2.59%)</title><rect x="27.0846%" y="165" width="2.5920%" height="15" fill="rgb(251,118,11)"/><text x="27.3346%" y="175.50">mi..</text></g><g><title>impl_parent (3,436,417 samples, 0.83%)</title><rect x="31.8965%" y="101" width="0.8301%" height="15" fill="rgb(217,147,25)"/><text x="32.1465%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,069,864 samples, 0.50%)</title><rect x="32.2266%" y="85" width="0.5000%" height="15" fill="rgb(247,81,37)"/><text x="32.4766%" y="95.50"></text></g><g><title>impl_trait_ref (7,259,110 samples, 1.75%)</title><rect x="32.7268%" y="101" width="1.7535%" height="15" fill="rgb(209,12,38)"/><text x="32.9768%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,707,063 samples, 1.38%)</title><rect x="33.1017%" y="85" width="1.3786%" height="15" fill="rgb(227,1,9)"/><text x="33.3517%" y="95.50"></text></g><g><title>item_attrs (980,726 samples, 0.24%)</title><rect x="34.4803%" y="101" width="0.2369%" height="15" fill="rgb(248,47,43)"/><text x="34.7303%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (922,864 samples, 0.22%)</title><rect x="34.4943%" y="85" width="0.2229%" height="15" fill="rgb(221,10,30)"/><text x="34.7443%" y="95.50"></text></g><g><title>predicates_of (1,064,219 samples, 0.26%)</title><rect x="34.7173%" y="101" width="0.2571%" height="15" fill="rgb(210,229,1)"/><text x="34.9673%" y="111.50"></text></g><g><title>predicates_defined_on (793,508 samples, 0.19%)</title><rect x="34.7826%" y="85" width="0.1917%" height="15" fill="rgb(222,148,37)"/><text x="35.0326%" y="95.50"></text></g><g><title>trait_impls_of (1,188,293 samples, 0.29%)</title><rect x="34.9748%" y="101" width="0.2870%" height="15" fill="rgb(234,67,33)"/><text x="35.2248%" y="111.50"></text></g><g><title>coherent_trait (23,031,682 samples, 5.56%)</title><rect x="29.7415%" y="133" width="5.5636%" height="15" fill="rgb(247,98,35)"/><text x="29.9915%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (22,357,384 samples, 5.40%)</title><rect x="29.9043%" y="117" width="5.4007%" height="15" fill="rgb(247,138,52)"/><text x="30.1543%" y="127.50">special..</text></g><g><title>coherence_checking (23,235,754 samples, 5.61%)</title><rect x="29.7333%" y="149" width="5.6129%" height="15" fill="rgb(213,79,30)"/><text x="29.9833%" y="159.50">coheren..</text></g><g><title>associated_items (525,598 samples, 0.13%)</title><rect x="51.7096%" y="101" width="0.1270%" height="15" fill="rgb(246,177,23)"/><text x="51.9596%" y="111.50"></text></g><g><title>adt_dtorck_constraint (475,290 samples, 0.11%)</title><rect x="52.1516%" y="85" width="0.1148%" height="15" fill="rgb(230,62,27)"/><text x="52.4016%" y="95.50"></text></g><g><title>dropck_outlives (1,696,210 samples, 0.41%)</title><rect x="51.8742%" y="101" width="0.4097%" height="15" fill="rgb(216,154,8)"/><text x="52.1242%" y="111.50"></text></g><g><title>evaluate_obligation (3,777,791 samples, 0.91%)</title><rect x="52.2839%" y="101" width="0.9126%" height="15" fill="rgb(244,35,45)"/><text x="52.5339%" y="111.50"></text></g><g><title>method_autoderef_steps (2,236,220 samples, 0.54%)</title><rect x="53.5041%" y="101" width="0.5402%" height="15" fill="rgb(251,115,12)"/><text x="53.7541%" y="111.50"></text></g><g><title>evaluate_obligation (1,037,508 samples, 0.25%)</title><rect x="53.7937%" y="85" width="0.2506%" height="15" fill="rgb(240,54,50)"/><text x="54.0437%" y="95.50"></text></g><g><title>predicates_of (547,112 samples, 0.13%)</title><rect x="54.1323%" y="101" width="0.1322%" height="15" fill="rgb(233,84,52)"/><text x="54.3823%" y="111.50"></text></g><g><title>evaluate_obligation (1,463,535 samples, 0.35%)</title><rect x="58.5882%" y="85" width="0.3535%" height="15" fill="rgb(207,117,47)"/><text x="58.8382%" y="95.50"></text></g><g><title>method_autoderef_steps (554,834 samples, 0.13%)</title><rect x="59.1173%" y="85" width="0.1340%" height="15" fill="rgb(249,43,39)"/><text x="59.3673%" y="95.50"></text></g><g><title>typeck (20,773,456 samples, 5.02%)</title><rect x="54.3144%" y="101" width="5.0181%" height="15" fill="rgb(209,38,44)"/><text x="54.5644%" y="111.50">typeck</text></g><g><title>item_bodies_checking (99,304,758 samples, 23.99%)</title><rect x="35.3791%" y="149" width="23.9883%" height="15" fill="rgb(236,212,23)"/><text x="35.6291%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (99,300,598 samples, 23.99%)</title><rect x="35.3801%" y="133" width="23.9873%" height="15" fill="rgb(242,79,21)"/><text x="35.6301%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (98,888,933 samples, 23.89%)</title><rect x="35.4796%" y="117" width="23.8879%" height="15" fill="rgb(211,96,35)"/><text x="35.7296%" y="127.50">typeck</text></g><g><title>item_types_checking (7,336,080 samples, 1.77%)</title><rect x="59.3675%" y="149" width="1.7721%" height="15" fill="rgb(253,215,40)"/><text x="59.6175%" y="159.50">i..</text></g><g><title>check_mod_item_types (7,330,190 samples, 1.77%)</title><rect x="59.3689%" y="133" width="1.7707%" height="15" fill="rgb(211,81,21)"/><text x="59.6189%" y="143.50">c..</text></g><g><title>fn_sig (848,555 samples, 0.20%)</title><rect x="61.3736%" y="117" width="0.2050%" height="15" fill="rgb(208,190,38)"/><text x="61.6236%" y="127.50"></text></g><g><title>is_late_bound_map (1,051,013 samples, 0.25%)</title><rect x="61.6973%" y="101" width="0.2539%" height="15" fill="rgb(235,213,38)"/><text x="61.9473%" y="111.50"></text></g><g><title>resolve_lifetimes (966,273 samples, 0.23%)</title><rect x="61.7178%" y="85" width="0.2334%" height="15" fill="rgb(237,122,38)"/><text x="61.9678%" y="95.50"></text></g><g><title>generics_of (1,795,934 samples, 0.43%)</title><rect x="61.5786%" y="117" width="0.4338%" height="15" fill="rgb(244,218,35)"/><text x="61.8286%" y="127.50"></text></g><g><title>late_bound_vars_map (503,216 samples, 0.12%)</title><rect x="62.4802%" y="69" width="0.1216%" height="15" fill="rgb(240,68,47)"/><text x="62.7302%" y="79.50"></text></g><g><title>resolve_lifetimes (467,316 samples, 0.11%)</title><rect x="62.4888%" y="53" width="0.1129%" height="15" fill="rgb(210,16,53)"/><text x="62.7388%" y="63.50"></text></g><g><title>explicit_predicates_of (1,545,209 samples, 0.37%)</title><rect x="62.2380%" y="85" width="0.3733%" height="15" fill="rgb(235,124,12)"/><text x="62.4880%" y="95.50"></text></g><g><title>predicates_of (2,387,199 samples, 0.58%)</title><rect x="62.0495%" y="117" width="0.5767%" height="15" fill="rgb(224,169,11)"/><text x="62.2995%" y="127.50"></text></g><g><title>predicates_defined_on (1,948,086 samples, 0.47%)</title><rect x="62.1556%" y="101" width="0.4706%" height="15" fill="rgb(250,166,2)"/><text x="62.4056%" y="111.50"></text></g><g><title>type_collecting (6,692,723 samples, 1.62%)</title><rect x="61.1406%" y="149" width="1.6167%" height="15" fill="rgb(242,216,29)"/><text x="61.3906%" y="159.50"></text></g><g><title>collect_mod_item_types (6,687,563 samples, 1.62%)</title><rect x="61.1418%" y="133" width="1.6155%" height="15" fill="rgb(230,116,27)"/><text x="61.3918%" y="143.50"></text></g><g><title>type_of (521,051 samples, 0.13%)</title><rect x="62.6314%" y="117" width="0.1259%" height="15" fill="rgb(228,99,48)"/><text x="62.8814%" y="127.50"></text></g><g><title>evaluate_obligation (2,356,481 samples, 0.57%)</title><rect x="66.1407%" y="117" width="0.5692%" height="15" fill="rgb(253,11,6)"/><text x="66.3907%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,771,084 samples, 0.43%)</title><rect x="66.7125%" y="117" width="0.4278%" height="15" fill="rgb(247,143,39)"/><text x="66.9625%" y="127.50"></text></g><g><title>param_env (2,127,131 samples, 0.51%)</title><rect x="67.1404%" y="117" width="0.5138%" height="15" fill="rgb(236,97,10)"/><text x="67.3904%" y="127.50"></text></g><g><title>region_scope_tree (1,282,925 samples, 0.31%)</title><rect x="67.6666%" y="117" width="0.3099%" height="15" fill="rgb(233,208,19)"/><text x="67.9166%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,723,074 samples, 5.01%)</title><rect x="62.9796%" y="133" width="5.0059%" height="15" fill="rgb(216,164,2)"/><text x="63.2296%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (733,988 samples, 0.18%)</title><rect x="70.4224%" y="117" width="0.1773%" height="15" fill="rgb(220,129,5)"/><text x="70.6724%" y="127.50"></text></g><g><title>param_env (1,382,554 samples, 0.33%)</title><rect x="70.5997%" y="117" width="0.3340%" height="15" fill="rgb(242,17,10)"/><text x="70.8497%" y="127.50"></text></g><g><title>check_item_well_formed (12,919,918 samples, 3.12%)</title><rect x="67.9855%" y="133" width="3.1210%" height="15" fill="rgb(242,107,0)"/><text x="68.2355%" y="143.50">che..</text></g><g><title>variances_of (428,475 samples, 0.10%)</title><rect x="71.0030%" y="117" width="0.1035%" height="15" fill="rgb(251,28,31)"/><text x="71.2530%" y="127.50"></text></g><g><title>crate_variances (417,445 samples, 0.10%)</title><rect x="71.0057%" y="101" width="0.1008%" height="15" fill="rgb(233,223,10)"/><text x="71.2557%" y="111.50"></text></g><g><title>analysis (288,835,124 samples, 69.77%)</title><rect x="1.3421%" y="181" width="69.7718%" height="15" fill="rgb(215,21,27)"/><text x="1.5921%" y="191.50">analysis</text></g><g><title>type_check_crate (171,538,538 samples, 41.44%)</title><rect x="29.6766%" y="165" width="41.4373%" height="15" fill="rgb(232,23,21)"/><text x="29.9266%" y="175.50">type_check_crate</text></g><g><title>wf_checking (34,569,299 samples, 8.35%)</title><rect x="62.7633%" y="149" width="8.3507%" height="15" fill="rgb(244,5,23)"/><text x="63.0133%" y="159.50">wf_checking</text></g><g><title>codegen_crate (844,689 samples, 0.20%)</title><rect x="71.1164%" y="181" width="0.2040%" height="15" fill="rgb(226,81,46)"/><text x="71.3664%" y="191.50"></text></g><g><title>codegen_module_optimize (1,023,371 samples, 0.25%)</title><rect x="71.3204%" y="181" width="0.2472%" height="15" fill="rgb(247,70,30)"/><text x="71.5704%" y="191.50"></text></g><g><title>LLVM_module_optimize (519,046 samples, 0.13%)</title><rect x="71.4423%" y="165" width="0.1254%" height="15" fill="rgb(212,68,19)"/><text x="71.6923%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,745,970 samples, 0.66%)</title><rect x="71.7308%" y="165" width="0.6633%" height="15" fill="rgb(240,187,13)"/><text x="71.9808%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,705,270 samples, 0.65%)</title><rect x="71.7407%" y="149" width="0.6535%" height="15" fill="rgb(223,113,26)"/><text x="71.9907%" y="159.50"></text></g><g><title>codegen_module_perform_lto (3,464,698 samples, 0.84%)</title><rect x="71.5676%" y="181" width="0.8369%" height="15" fill="rgb(206,192,2)"/><text x="71.8176%" y="191.50"></text></g><g><title>metadata_register_crate (2,976,003 samples, 0.72%)</title><rect x="82.8835%" y="133" width="0.7189%" height="15" fill="rgb(241,108,4)"/><text x="83.1335%" y="143.50"></text></g><g><title>metadata_register_crate (1,221,113 samples, 0.29%)</title><rect x="83.3074%" y="117" width="0.2950%" height="15" fill="rgb(247,173,49)"/><text x="83.5574%" y="127.50"></text></g><g><title>macro_expand_crate (46,791,673 samples, 11.30%)</title><rect x="72.6002%" y="165" width="11.3031%" height="15" fill="rgb(224,114,35)"/><text x="72.8502%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (46,772,192 samples, 11.30%)</title><rect x="72.6049%" y="149" width="11.2984%" height="15" fill="rgb(245,159,27)"/><text x="72.8549%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,245,603 samples, 0.30%)</title><rect x="83.6024%" y="133" width="0.3009%" height="15" fill="rgb(245,172,44)"/><text x="83.8524%" y="143.50"></text></g><g><title>late_resolve_crate (4,289,307 samples, 1.04%)</title><rect x="83.9805%" y="149" width="1.0361%" height="15" fill="rgb(236,23,11)"/><text x="84.2305%" y="159.50"></text></g><g><title>configure_and_expand (52,537,105 samples, 12.69%)</title><rect x="72.4046%" y="181" width="12.6910%" height="15" fill="rgb(205,117,38)"/><text x="72.6546%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (4,873,834 samples, 1.18%)</title><rect x="83.9183%" y="165" width="1.1773%" height="15" fill="rgb(237,72,25)"/><text x="84.1683%" y="175.50"></text></g><g><title>drop_ast (859,619 samples, 0.21%)</title><rect x="85.0956%" y="181" width="0.2077%" height="15" fill="rgb(244,70,9)"/><text x="85.3456%" y="191.50"></text></g><g><title>early_lint_checks (933,550 samples, 0.23%)</title><rect x="85.3079%" y="181" width="0.2255%" height="15" fill="rgb(217,125,39)"/><text x="85.5579%" y="191.50"></text></g><g><title>free_global_ctxt (5,410,850 samples, 1.31%)</title><rect x="85.5334%" y="181" width="1.3071%" height="15" fill="rgb(235,36,10)"/><text x="85.7834%" y="191.50"></text></g><g><title>exported_symbols (521,176 samples, 0.13%)</title><rect x="88.4751%" y="165" width="0.1259%" height="15" fill="rgb(251,123,47)"/><text x="88.7251%" y="175.50"></text></g><g><title>reachable_non_generics (512,706 samples, 0.12%)</title><rect x="88.4772%" y="149" width="0.1239%" height="15" fill="rgb(221,13,13)"/><text x="88.7272%" y="159.50"></text></g><g><title>reachable_set (466,095 samples, 0.11%)</title><rect x="88.4884%" y="133" width="0.1126%" height="15" fill="rgb(238,131,9)"/><text x="88.7384%" y="143.50"></text></g><g><title>is_sized_raw (1,125,742 samples, 0.27%)</title><rect x="92.2053%" y="133" width="0.2719%" height="15" fill="rgb(211,50,8)"/><text x="92.4553%" y="143.50"></text></g><g><title>evaluate_obligation (779,136 samples, 0.19%)</title><rect x="92.2891%" y="117" width="0.1882%" height="15" fill="rgb(245,182,24)"/><text x="92.5391%" y="127.50"></text></g><g><title>layout_of (654,349 samples, 0.16%)</title><rect x="92.6971%" y="117" width="0.1581%" height="15" fill="rgb(242,14,37)"/><text x="92.9471%" y="127.50"></text></g><g><title>layout_of (1,611,040 samples, 0.39%)</title><rect x="92.4773%" y="133" width="0.3892%" height="15" fill="rgb(246,228,12)"/><text x="92.7273%" y="143.50"></text></g><g><title>layout_of (4,583,504 samples, 1.11%)</title><rect x="91.7938%" y="149" width="1.1072%" height="15" fill="rgb(213,55,15)"/><text x="92.0438%" y="159.50"></text></g><g><title>is_copy_raw (1,043,095 samples, 0.25%)</title><rect x="95.9595%" y="117" width="0.2520%" height="15" fill="rgb(209,9,3)"/><text x="96.2095%" y="127.50"></text></g><g><title>evaluate_obligation (752,132 samples, 0.18%)</title><rect x="96.0298%" y="101" width="0.1817%" height="15" fill="rgb(230,59,30)"/><text x="96.2798%" y="111.50"></text></g><g><title>needs_drop_raw (1,231,887 samples, 0.30%)</title><rect x="95.9148%" y="133" width="0.2976%" height="15" fill="rgb(209,121,21)"/><text x="96.1648%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,070,224 samples, 3.40%)</title><rect x="92.9010%" y="149" width="3.3988%" height="15" fill="rgb(220,109,13)"/><text x="93.1510%" y="159.50">mir..</text></g><g><title>resolve_instance (484,815 samples, 0.12%)</title><rect x="96.3079%" y="149" width="0.1171%" height="15" fill="rgb(232,18,1)"/><text x="96.5579%" y="159.50"></text></g><g><title>optimized_mir (32,085,674 samples, 7.75%)</title><rect x="88.7250%" y="165" width="7.7507%" height="15" fill="rgb(215,41,42)"/><text x="88.9750%" y="175.50">optimized_m..</text></g><g><title>generate_crate_metadata (40,181,270 samples, 9.71%)</title><rect x="86.8404%" y="181" width="9.7063%" height="15" fill="rgb(224,123,36)"/><text x="87.0904%" y="191.50">generate_crate..</text></g><g><title>hir_lowering (9,811,278 samples, 2.37%)</title><rect x="96.5467%" y="181" width="2.3700%" height="15" fill="rgb(240,125,3)"/><text x="96.7967%" y="191.50">hi..</text></g><g><title>link_crate (1,542,257 samples, 0.37%)</title><rect x="98.9229%" y="165" width="0.3726%" height="15" fill="rgb(205,98,50)"/><text x="99.1729%" y="175.50"></text></g><g><title>link_binary (1,480,306 samples, 0.36%)</title><rect x="98.9378%" y="149" width="0.3576%" height="15" fill="rgb(205,185,37)"/><text x="99.1878%" y="159.50"></text></g><g><title>link_rlib (1,127,922 samples, 0.27%)</title><rect x="99.0230%" y="133" width="0.2725%" height="15" fill="rgb(238,207,15)"/><text x="99.2730%" y="143.50"></text></g><g><title>link (1,577,087 samples, 0.38%)</title><rect x="98.9168%" y="181" width="0.3810%" height="15" fill="rgb(213,199,42)"/><text x="99.1668%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,646,108 samples, 0.40%)</title><rect x="99.4324%" y="181" width="0.3976%" height="15" fill="rgb(235,201,11)"/><text x="99.6824%" y="191.50"></text></g><g><title>all (413,971,234 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (413,971,234 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (618,477 samples, 0.15%)</title><rect x="99.8506%" y="181" width="0.1494%" height="15" fill="rgb(243,32,47)"/><text x="100.1006%" y="191.50"></text></g></svg></svg>