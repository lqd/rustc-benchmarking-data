<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="197.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="197.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,308,599 samples, 16.80%)</title><rect x="2.1715%" y="133" width="16.7957%" height="15" fill="rgb(227,0,7)"/><text x="2.4215%" y="143.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (198,312 samples, 0.63%)</title><rect x="18.3398%" y="117" width="0.6274%" height="15" fill="rgb(217,0,24)"/><text x="18.5898%" y="127.50"></text></g><g><title>LLVM_thin_lto_global_analysis (186,432 samples, 0.59%)</title><rect x="18.3773%" y="101" width="0.5898%" height="15" fill="rgb(221,193,54)"/><text x="18.6273%" y="111.50"></text></g><g><title>hir_module_items (121,822 samples, 0.39%)</title><rect x="19.3865%" y="117" width="0.3854%" height="15" fill="rgb(248,212,6)"/><text x="19.6365%" y="127.50"></text></g><g><title>check_mod_attrs (62,071 samples, 0.20%)</title><rect x="19.8913%" y="101" width="0.1964%" height="15" fill="rgb(208,68,35)"/><text x="20.1413%" y="111.50"></text></g><g><title>lookup_deprecation_entry (58,461 samples, 0.18%)</title><rect x="20.3386%" y="85" width="0.1850%" height="15" fill="rgb(232,128,0)"/><text x="20.5886%" y="95.50"></text></g><g><title>check_mod_unstable_api_usage (126,781 samples, 0.40%)</title><rect x="20.1805%" y="101" width="0.4011%" height="15" fill="rgb(207,160,47)"/><text x="20.4305%" y="111.50"></text></g><g><title>looking_for_derive_registrar (46,890 samples, 0.15%)</title><rect x="20.5871%" y="101" width="0.1484%" height="15" fill="rgb(228,23,34)"/><text x="20.8371%" y="111.50"></text></g><g><title>misc_checking_1 (308,384 samples, 0.98%)</title><rect x="19.7745%" y="117" width="0.9757%" height="15" fill="rgb(218,30,26)"/><text x="20.0245%" y="127.50"></text></g><g><title>check_private_in_public (64,041 samples, 0.20%)</title><rect x="20.8564%" y="101" width="0.2026%" height="15" fill="rgb(220,122,19)"/><text x="21.1064%" y="111.50"></text></g><g><title>get_lang_items (39,181 samples, 0.12%)</title><rect x="21.5452%" y="69" width="0.1240%" height="15" fill="rgb(250,228,42)"/><text x="21.7952%" y="79.50"></text></g><g><title>codegen_fn_attrs (143,761 samples, 0.45%)</title><rect x="21.3745%" y="85" width="0.4548%" height="15" fill="rgb(240,193,28)"/><text x="21.6245%" y="95.50"></text></g><g><title>supported_target_features (35,030 samples, 0.11%)</title><rect x="21.7185%" y="69" width="0.1108%" height="15" fill="rgb(216,20,37)"/><text x="21.9685%" y="79.50"></text></g><g><title>death_checking (281,533 samples, 0.89%)</title><rect x="21.0590%" y="101" width="0.8907%" height="15" fill="rgb(206,188,39)"/><text x="21.3090%" y="111.50"></text></g><g><title>crate_lints (586,067 samples, 1.85%)</title><rect x="21.9576%" y="85" width="1.8542%" height="15" fill="rgb(217,207,13)"/><text x="22.2076%" y="95.50">c..</text></g><g><title>param_env (457,366 samples, 1.45%)</title><rect x="22.3648%" y="69" width="1.4470%" height="15" fill="rgb(231,73,38)"/><text x="22.6148%" y="79.50"></text></g><g><title>predicates_of (45,951 samples, 0.15%)</title><rect x="23.6664%" y="53" width="0.1454%" height="15" fill="rgb(225,20,46)"/><text x="23.9164%" y="63.50"></text></g><g><title>predicates_defined_on (38,181 samples, 0.12%)</title><rect x="23.6910%" y="37" width="0.1208%" height="15" fill="rgb(210,31,41)"/><text x="23.9410%" y="47.50"></text></g><g><title>lint_checking (638,457 samples, 2.02%)</title><rect x="21.9497%" y="101" width="2.0200%" height="15" fill="rgb(221,200,47)"/><text x="22.1997%" y="111.50">l..</text></g><g><title>module_lints (49,900 samples, 0.16%)</title><rect x="23.8118%" y="85" width="0.1579%" height="15" fill="rgb(226,26,5)"/><text x="24.0618%" y="95.50"></text></g><g><title>lint_mod (44,240 samples, 0.14%)</title><rect x="23.8297%" y="69" width="0.1400%" height="15" fill="rgb(249,33,26)"/><text x="24.0797%" y="79.50"></text></g><g><title>privacy_access_levels (49,740 samples, 0.16%)</title><rect x="23.9697%" y="101" width="0.1574%" height="15" fill="rgb(235,183,28)"/><text x="24.2197%" y="111.50"></text></g><g><title>misc_checking_3 (1,089,591 samples, 3.45%)</title><rect x="20.8241%" y="117" width="3.4473%" height="15" fill="rgb(221,5,38)"/><text x="21.0741%" y="127.50">mis..</text></g><g><title>coherence_checking (40,580 samples, 0.13%)</title><rect x="24.4101%" y="101" width="0.1284%" height="15" fill="rgb(247,18,42)"/><text x="24.6601%" y="111.50"></text></g><g><title>generics_of (57,741 samples, 0.18%)</title><rect x="25.0900%" y="69" width="0.1827%" height="15" fill="rgb(241,131,45)"/><text x="25.3400%" y="79.50"></text></g><g><title>explicit_predicates_of (55,910 samples, 0.18%)</title><rect x="25.5108%" y="37" width="0.1769%" height="15" fill="rgb(249,31,29)"/><text x="25.7608%" y="47.50"></text></g><g><title>predicates_of (139,251 samples, 0.44%)</title><rect x="25.2727%" y="69" width="0.4406%" height="15" fill="rgb(225,111,53)"/><text x="25.5227%" y="79.50"></text></g><g><title>predicates_defined_on (111,100 samples, 0.35%)</title><rect x="25.3618%" y="53" width="0.3515%" height="15" fill="rgb(238,160,17)"/><text x="25.6118%" y="63.50"></text></g><g><title>type_collecting (413,324 samples, 1.31%)</title><rect x="24.6629%" y="101" width="1.3077%" height="15" fill="rgb(214,148,48)"/><text x="24.9129%" y="111.50"></text></g><g><title>collect_mod_item_types (393,734 samples, 1.25%)</title><rect x="24.7249%" y="85" width="1.2457%" height="15" fill="rgb(232,36,49)"/><text x="24.9749%" y="95.50"></text></g><g><title>type_of (81,321 samples, 0.26%)</title><rect x="25.7133%" y="69" width="0.2573%" height="15" fill="rgb(209,103,24)"/><text x="25.9633%" y="79.50"></text></g><g><title>analysis (2,251,994 samples, 7.13%)</title><rect x="18.9672%" y="133" width="7.1250%" height="15" fill="rgb(229,88,8)"/><text x="19.2172%" y="143.50">analysis</text></g><g><title>type_check_crate (575,476 samples, 1.82%)</title><rect x="24.2715%" y="117" width="1.8207%" height="15" fill="rgb(213,181,19)"/><text x="24.5215%" y="127.50">t..</text></g><g><title>wf_checking (38,440 samples, 0.12%)</title><rect x="25.9706%" y="101" width="0.1216%" height="15" fill="rgb(254,191,54)"/><text x="26.2206%" y="111.50"></text></g><g><title>codegen_module (384,094 samples, 1.22%)</title><rect x="28.2876%" y="117" width="1.2152%" height="15" fill="rgb(241,83,37)"/><text x="28.5376%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (91,771 samples, 0.29%)</title><rect x="29.5060%" y="117" width="0.2904%" height="15" fill="rgb(233,36,39)"/><text x="29.7560%" y="127.50"></text></g><g><title>partition_and_assert_distinct_symbols (44,050 samples, 0.14%)</title><rect x="29.6570%" y="101" width="0.1394%" height="15" fill="rgb(226,3,54)"/><text x="29.9070%" y="111.50"></text></g><g><title>cgu_partitioning (37,820 samples, 0.12%)</title><rect x="29.6767%" y="85" width="0.1197%" height="15" fill="rgb(245,192,40)"/><text x="29.9267%" y="95.50"></text></g><g><title>codegen_crate (1,185,323 samples, 3.75%)</title><rect x="26.1244%" y="133" width="3.7502%" height="15" fill="rgb(238,167,29)"/><text x="26.3744%" y="143.50">code..</text></g><g><title>codegen_module_optimize (1,626,938 samples, 5.15%)</title><rect x="29.8746%" y="133" width="5.1474%" height="15" fill="rgb(232,182,51)"/><text x="30.1246%" y="143.50">codege..</text></g><g><title>LLVM_module_optimize (467,035 samples, 1.48%)</title><rect x="33.5444%" y="117" width="1.4776%" height="15" fill="rgb(231,60,39)"/><text x="33.7944%" y="127.50"></text></g><g><title>LLVM_lto_optimize (286,923 samples, 0.91%)</title><rect x="36.2720%" y="117" width="0.9078%" height="15" fill="rgb(208,69,12)"/><text x="36.5220%" y="127.50"></text></g><g><title>LLVM_module_codegen (2,496,478 samples, 7.90%)</title><rect x="37.1798%" y="117" width="7.8985%" height="15" fill="rgb(235,93,37)"/><text x="37.4298%" y="127.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (2,458,957 samples, 7.78%)</title><rect x="37.2985%" y="101" width="7.7798%" height="15" fill="rgb(213,116,39)"/><text x="37.5485%" y="111.50">LLVM_module..</text></g><g><title>codegen_module_perform_lto (3,218,626 samples, 10.18%)</title><rect x="35.0221%" y="133" width="10.1833%" height="15" fill="rgb(222,207,29)"/><text x="35.2721%" y="143.50">codegen_module_..</text></g><g><title>AST_validation (107,871 samples, 0.34%)</title><rect x="45.9248%" y="117" width="0.3413%" height="15" fill="rgb(206,96,30)"/><text x="46.1748%" y="127.50"></text></g><g><title>crate_injection (100,721 samples, 0.32%)</title><rect x="46.3234%" y="117" width="0.3187%" height="15" fill="rgb(218,138,4)"/><text x="46.5734%" y="127.50"></text></g><g><title>metadata_load_macro (37,000 samples, 0.12%)</title><rect x="67.4316%" y="85" width="0.1171%" height="15" fill="rgb(250,191,14)"/><text x="67.6816%" y="95.50"></text></g><g><title>macro_expand_crate (6,812,186 samples, 21.55%)</title><rect x="46.6421%" y="117" width="21.5528%" height="15" fill="rgb(239,60,40)"/><text x="46.8921%" y="127.50">macro_expand_crate</text></g><g><title>expand_crate (6,789,815 samples, 21.48%)</title><rect x="46.7128%" y="101" width="21.4821%" height="15" fill="rgb(206,27,48)"/><text x="46.9628%" y="111.50">expand_crate</text></g><g><title>metadata_register_crate (204,242 samples, 0.65%)</title><rect x="67.5487%" y="85" width="0.6462%" height="15" fill="rgb(225,35,8)"/><text x="67.7987%" y="95.50"></text></g><g><title>pre_AST_expansion_lint_checks (102,641 samples, 0.32%)</title><rect x="68.2093%" y="117" width="0.3247%" height="15" fill="rgb(250,213,24)"/><text x="68.4593%" y="127.50"></text></g><g><title>finalize_macro_resolutions (298,523 samples, 0.94%)</title><rect x="68.6213%" y="101" width="0.9445%" height="15" fill="rgb(247,123,22)"/><text x="68.8713%" y="111.50"></text></g><g><title>late_resolve_crate (166,832 samples, 0.53%)</title><rect x="69.5657%" y="101" width="0.5278%" height="15" fill="rgb(231,138,38)"/><text x="69.8157%" y="111.50"></text></g><g><title>configure_and_expand (7,910,218 samples, 25.03%)</title><rect x="45.2054%" y="133" width="25.0269%" height="15" fill="rgb(231,145,46)"/><text x="45.4554%" y="143.50">configure_and_expand</text></g><g><title>resolve_crate (536,735 samples, 1.70%)</title><rect x="68.5341%" y="117" width="1.6982%" height="15" fill="rgb(251,118,11)"/><text x="68.7841%" y="127.50"></text></g><g><title>drop_ast (33,080 samples, 0.10%)</title><rect x="70.2322%" y="133" width="0.1047%" height="15" fill="rgb(217,147,25)"/><text x="70.4822%" y="143.50"></text></g><g><title>early_lint_checks (92,191 samples, 0.29%)</title><rect x="70.4109%" y="133" width="0.2917%" height="15" fill="rgb(247,81,37)"/><text x="70.6609%" y="143.50"></text></g><g><title>free_global_ctxt (1,184,143 samples, 3.75%)</title><rect x="70.7025%" y="133" width="3.7465%" height="15" fill="rgb(209,12,38)"/><text x="70.9525%" y="143.50">free..</text></g><g><title>crate_hash (129,431 samples, 0.41%)</title><rect x="75.5237%" y="117" width="0.4095%" height="15" fill="rgb(227,1,9)"/><text x="75.7737%" y="127.50"></text></g><g><title>exported_symbols (55,970 samples, 0.18%)</title><rect x="76.0086%" y="117" width="0.1771%" height="15" fill="rgb(248,47,43)"/><text x="76.2586%" y="127.50"></text></g><g><title>reachable_non_generics (38,090 samples, 0.12%)</title><rect x="76.0652%" y="101" width="0.1205%" height="15" fill="rgb(221,10,30)"/><text x="76.3152%" y="111.50"></text></g><g><title>mir_keys (47,220 samples, 0.15%)</title><rect x="76.2224%" y="117" width="0.1494%" height="15" fill="rgb(210,229,1)"/><text x="76.4724%" y="127.50"></text></g><g><title>generate_crate_metadata (615,086 samples, 1.95%)</title><rect x="74.4490%" y="133" width="1.9460%" height="15" fill="rgb(222,148,37)"/><text x="74.6990%" y="143.50">g..</text></g><g><title>hir_lowering (464,945 samples, 1.47%)</title><rect x="76.3951%" y="133" width="1.4710%" height="15" fill="rgb(234,67,33)"/><text x="76.6451%" y="143.50"></text></g><g><title>finish_ongoing_codegen (3,547,819 samples, 11.22%)</title><rect x="77.9279%" y="117" width="11.2248%" height="15" fill="rgb(247,98,35)"/><text x="78.1779%" y="127.50">finish_ongoing_co..</text></g><g><title>link_binary_remove_temps (37,720 samples, 0.12%)</title><rect x="90.2781%" y="85" width="0.1193%" height="15" fill="rgb(247,138,52)"/><text x="90.5281%" y="95.50"></text></g><g><title>link_crate (995,351 samples, 3.15%)</title><rect x="89.1528%" y="117" width="3.1492%" height="15" fill="rgb(213,79,30)"/><text x="89.4028%" y="127.50">lin..</text></g><g><title>link_binary (979,261 samples, 3.10%)</title><rect x="89.2037%" y="101" width="3.0983%" height="15" fill="rgb(246,177,23)"/><text x="89.4537%" y="111.50">lin..</text></g><g><title>link_rlib (601,947 samples, 1.90%)</title><rect x="90.3974%" y="85" width="1.9045%" height="15" fill="rgb(230,62,27)"/><text x="90.6474%" y="95.50">l..</text></g><g><title>link (4,576,240 samples, 14.48%)</title><rect x="77.8661%" y="133" width="14.4786%" height="15" fill="rgb(216,154,8)"/><text x="78.1161%" y="143.50">link</text></g><g><title>parse_crate (1,009,041 samples, 3.19%)</title><rect x="92.3447%" y="133" width="3.1925%" height="15" fill="rgb(244,35,45)"/><text x="92.5947%" y="143.50">par..</text></g><g><title>prepare_outputs (319,133 samples, 1.01%)</title><rect x="95.5682%" y="133" width="1.0097%" height="15" fill="rgb(251,115,12)"/><text x="95.8182%" y="143.50"></text></g><g><title>self_profile_alloc_query_strings (516,855 samples, 1.64%)</title><rect x="96.5779%" y="133" width="1.6353%" height="15" fill="rgb(240,54,50)"/><text x="96.8279%" y="143.50"></text></g><g><title>setup_global_ctxt (136,451 samples, 0.43%)</title><rect x="98.2433%" y="133" width="0.4317%" height="15" fill="rgb(233,84,52)"/><text x="98.4933%" y="143.50"></text></g><g><title>all (31,606,901 samples, 100%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="175.50"></text></g><g><title>rustc (31,606,901 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="159.50">rustc</text></g><g><title>write_crate_metadata (418,785 samples, 1.32%)</title><rect x="98.6750%" y="133" width="1.3250%" height="15" fill="rgb(209,38,44)"/><text x="98.9250%" y="143.50"></text></g></svg></svg>