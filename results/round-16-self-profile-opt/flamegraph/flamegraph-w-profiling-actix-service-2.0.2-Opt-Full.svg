<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,546,918 samples, 0.52%)</title><rect x="0.2557%" y="197" width="0.5205%" height="15" fill="rgb(227,0,7)"/><text x="0.5057%" y="207.50"></text></g><g><title>is_sized_raw (1,130,789 samples, 0.23%)</title><rect x="8.3669%" y="149" width="0.2311%" height="15" fill="rgb(217,0,24)"/><text x="8.6169%" y="159.50"></text></g><g><title>evaluate_obligation (702,777 samples, 0.14%)</title><rect x="8.4544%" y="133" width="0.1436%" height="15" fill="rgb(221,193,54)"/><text x="8.7044%" y="143.50"></text></g><g><title>is_copy_raw (6,002,698 samples, 1.23%)</title><rect x="11.4850%" y="69" width="1.2268%" height="15" fill="rgb(248,212,6)"/><text x="11.7350%" y="79.50"></text></g><g><title>evaluate_obligation (5,034,252 samples, 1.03%)</title><rect x="11.6829%" y="53" width="1.0288%" height="15" fill="rgb(208,68,35)"/><text x="11.9329%" y="63.50"></text></g><g><title>needs_drop_raw (7,038,562 samples, 1.44%)</title><rect x="11.2898%" y="85" width="1.4385%" height="15" fill="rgb(232,128,0)"/><text x="11.5398%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (961,179 samples, 0.20%)</title><rect x="12.8602%" y="69" width="0.1964%" height="15" fill="rgb(207,160,47)"/><text x="13.1102%" y="79.50"></text></g><g><title>resolve_instance (2,025,487 samples, 0.41%)</title><rect x="12.7282%" y="85" width="0.4139%" height="15" fill="rgb(228,23,34)"/><text x="12.9782%" y="95.50"></text></g><g><title>thir_body (2,230,538 samples, 0.46%)</title><rect x="13.1575%" y="85" width="0.4559%" height="15" fill="rgb(218,30,26)"/><text x="13.4075%" y="95.50"></text></g><g><title>mir_const (22,929,861 samples, 4.69%)</title><rect x="9.0195%" y="133" width="4.6862%" height="15" fill="rgb(220,122,19)"/><text x="9.2695%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (20,720,142 samples, 4.23%)</title><rect x="9.4711%" y="117" width="4.2346%" height="15" fill="rgb(250,228,42)"/><text x="9.7211%" y="127.50">unsaf..</text></g><g><title>mir_built (19,181,540 samples, 3.92%)</title><rect x="9.7855%" y="101" width="3.9201%" height="15" fill="rgb(240,193,28)"/><text x="10.0355%" y="111.50">mir_..</text></g><g><title>mir_promoted (25,531,473 samples, 5.22%)</title><rect x="8.5980%" y="149" width="5.2179%" height="15" fill="rgb(216,20,37)"/><text x="8.8480%" y="159.50">mir_pr..</text></g><g><title>mir_const_qualif (539,196 samples, 0.11%)</title><rect x="13.7057%" y="133" width="0.1102%" height="15" fill="rgb(206,188,39)"/><text x="13.9557%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (4,739,238 samples, 0.97%)</title><rect x="13.8159%" y="149" width="0.9686%" height="15" fill="rgb(217,207,13)"/><text x="14.0659%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,392,825 samples, 0.49%)</title><rect x="14.7844%" y="149" width="0.4890%" height="15" fill="rgb(231,73,38)"/><text x="15.0344%" y="159.50"></text></g><g><title>normalize_projection_ty (1,042,669 samples, 0.21%)</title><rect x="15.0604%" y="133" width="0.2131%" height="15" fill="rgb(225,20,46)"/><text x="15.3104%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,115,670 samples, 0.23%)</title><rect x="15.2735%" y="149" width="0.2280%" height="15" fill="rgb(210,31,41)"/><text x="15.5235%" y="159.50"></text></g><g><title>type_op_normalize_ty (4,107,919 samples, 0.84%)</title><rect x="15.5015%" y="149" width="0.8395%" height="15" fill="rgb(221,200,47)"/><text x="15.7515%" y="159.50"></text></g><g><title>normalize_projection_ty (2,537,061 samples, 0.52%)</title><rect x="15.8225%" y="133" width="0.5185%" height="15" fill="rgb(226,26,5)"/><text x="16.0725%" y="143.50"></text></g><g><title>type_op_prove_predicate (14,856,719 samples, 3.04%)</title><rect x="16.3410%" y="149" width="3.0363%" height="15" fill="rgb(249,33,26)"/><text x="16.5910%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (89,875,617 samples, 18.37%)</title><rect x="1.0106%" y="181" width="18.3679%" height="15" fill="rgb(235,183,28)"/><text x="1.2606%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (89,437,950 samples, 18.28%)</title><rect x="1.1000%" y="165" width="18.2784%" height="15" fill="rgb(221,5,38)"/><text x="1.3500%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (1,066,631 samples, 0.22%)</title><rect x="19.4645%" y="181" width="0.2180%" height="15" fill="rgb(247,18,42)"/><text x="19.7145%" y="191.50"></text></g><g><title>codegen_fn_attrs (921,897 samples, 0.19%)</title><rect x="19.8663%" y="149" width="0.1884%" height="15" fill="rgb(241,131,45)"/><text x="20.1163%" y="159.50"></text></g><g><title>check_mod_attrs (1,774,921 samples, 0.36%)</title><rect x="19.6920%" y="165" width="0.3627%" height="15" fill="rgb(249,31,29)"/><text x="19.9420%" y="175.50"></text></g><g><title>lookup_deprecation_entry (680,047 samples, 0.14%)</title><rect x="20.4365%" y="149" width="0.1390%" height="15" fill="rgb(225,111,53)"/><text x="20.6865%" y="159.50"></text></g><g><title>stability_index (552,005 samples, 0.11%)</title><rect x="20.4627%" y="133" width="0.1128%" height="15" fill="rgb(238,160,17)"/><text x="20.7127%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,728,759 samples, 0.35%)</title><rect x="20.2359%" y="165" width="0.3533%" height="15" fill="rgb(214,148,48)"/><text x="20.4859%" y="175.50"></text></g><g><title>misc_checking_1 (4,667,280 samples, 0.95%)</title><rect x="19.6826%" y="181" width="0.9539%" height="15" fill="rgb(232,36,49)"/><text x="19.9326%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,840,209 samples, 0.38%)</title><rect x="20.6367%" y="165" width="0.3761%" height="15" fill="rgb(209,103,24)"/><text x="20.8867%" y="175.50"></text></g><g><title>check_mod_liveness (1,508,075 samples, 0.31%)</title><rect x="20.7046%" y="149" width="0.3082%" height="15" fill="rgb(229,88,8)"/><text x="20.9546%" y="159.50"></text></g><g><title>misc_checking_2 (3,190,544 samples, 0.65%)</title><rect x="20.6364%" y="181" width="0.6521%" height="15" fill="rgb(213,181,19)"/><text x="20.8864%" y="191.50"></text></g><g><title>match_checking (1,349,025 samples, 0.28%)</title><rect x="21.0128%" y="165" width="0.2757%" height="15" fill="rgb(254,191,54)"/><text x="21.2628%" y="175.50"></text></g><g><title>check_match (1,230,995 samples, 0.25%)</title><rect x="21.0369%" y="149" width="0.2516%" height="15" fill="rgb(241,83,37)"/><text x="21.2869%" y="159.50"></text></g><g><title>check_private_in_public (1,373,375 samples, 0.28%)</title><rect x="21.2904%" y="165" width="0.2807%" height="15" fill="rgb(233,36,39)"/><text x="21.5404%" y="175.50"></text></g><g><title>death_checking (1,899,220 samples, 0.39%)</title><rect x="21.5711%" y="165" width="0.3881%" height="15" fill="rgb(226,3,54)"/><text x="21.8211%" y="175.50"></text></g><g><title>eval_to_const_value_raw (584,746 samples, 0.12%)</title><rect x="22.2653%" y="133" width="0.1195%" height="15" fill="rgb(245,192,40)"/><text x="22.5153%" y="143.50"></text></g><g><title>eval_to_const_value_raw (564,496 samples, 0.12%)</title><rect x="22.2694%" y="117" width="0.1154%" height="15" fill="rgb(238,167,29)"/><text x="22.5194%" y="127.50"></text></g><g><title>eval_to_allocation_raw (541,646 samples, 0.11%)</title><rect x="22.2741%" y="101" width="0.1107%" height="15" fill="rgb(232,182,51)"/><text x="22.5241%" y="111.50"></text></g><g><title>param_env (1,364,872 samples, 0.28%)</title><rect x="22.3848%" y="133" width="0.2789%" height="15" fill="rgb(231,60,39)"/><text x="22.6348%" y="143.50"></text></g><g><title>predicates_of (537,467 samples, 0.11%)</title><rect x="22.5539%" y="117" width="0.1098%" height="15" fill="rgb(208,69,12)"/><text x="22.8039%" y="127.50"></text></g><g><title>crate_lints (3,844,501 samples, 0.79%)</title><rect x="21.9597%" y="149" width="0.7857%" height="15" fill="rgb(235,93,37)"/><text x="22.2097%" y="159.50"></text></g><g><title>layout_of (545,236 samples, 0.11%)</title><rect x="23.0664%" y="101" width="0.1114%" height="15" fill="rgb(213,116,39)"/><text x="23.3164%" y="111.50"></text></g><g><title>lint_checking (5,970,474 samples, 1.22%)</title><rect x="21.9592%" y="165" width="1.2202%" height="15" fill="rgb(222,207,29)"/><text x="22.2092%" y="175.50"></text></g><g><title>module_lints (2,123,753 samples, 0.43%)</title><rect x="22.7454%" y="149" width="0.4340%" height="15" fill="rgb(206,96,30)"/><text x="22.9954%" y="159.50"></text></g><g><title>lint_mod (2,106,953 samples, 0.43%)</title><rect x="22.7488%" y="133" width="0.4306%" height="15" fill="rgb(218,138,4)"/><text x="22.9988%" y="143.50"></text></g><g><title>layout_of (610,507 samples, 0.12%)</title><rect x="23.0546%" y="117" width="0.1248%" height="15" fill="rgb(250,191,14)"/><text x="23.3046%" y="127.50"></text></g><g><title>privacy_access_levels (2,371,786 samples, 0.48%)</title><rect x="23.1794%" y="165" width="0.4847%" height="15" fill="rgb(239,60,40)"/><text x="23.4294%" y="175.50"></text></g><g><title>privacy_checking_modules (7,403,558 samples, 1.51%)</title><rect x="23.6641%" y="165" width="1.5131%" height="15" fill="rgb(206,27,48)"/><text x="23.9141%" y="175.50"></text></g><g><title>check_mod_privacy (7,383,378 samples, 1.51%)</title><rect x="23.6682%" y="149" width="1.5089%" height="15" fill="rgb(225,35,8)"/><text x="23.9182%" y="159.50"></text></g><g><title>misc_checking_3 (19,066,293 samples, 3.90%)</title><rect x="21.2885%" y="181" width="3.8966%" height="15" fill="rgb(250,213,24)"/><text x="21.5385%" y="191.50">misc..</text></g><g><title>impl_trait_ref (1,206,594 samples, 0.25%)</title><rect x="25.6531%" y="117" width="0.2466%" height="15" fill="rgb(247,123,22)"/><text x="25.9031%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,041,042 samples, 0.21%)</title><rect x="25.6869%" y="101" width="0.2128%" height="15" fill="rgb(231,138,38)"/><text x="25.9369%" y="111.50"></text></g><g><title>coherent_trait (3,423,467 samples, 0.70%)</title><rect x="25.2494%" y="149" width="0.6997%" height="15" fill="rgb(231,145,46)"/><text x="25.4994%" y="159.50"></text></g><g><title>specialization_graph_of (3,384,567 samples, 0.69%)</title><rect x="25.2574%" y="133" width="0.6917%" height="15" fill="rgb(251,118,11)"/><text x="25.5074%" y="143.50"></text></g><g><title>coherence_checking (3,865,361 samples, 0.79%)</title><rect x="25.2436%" y="165" width="0.7900%" height="15" fill="rgb(217,147,25)"/><text x="25.4936%" y="175.50"></text></g><g><title>dropck_outlives (2,655,410 samples, 0.54%)</title><rect x="41.1967%" y="117" width="0.5427%" height="15" fill="rgb(247,81,37)"/><text x="41.4467%" y="127.50"></text></g><g><title>evaluate_obligation (3,973,640 samples, 0.81%)</title><rect x="41.7404%" y="117" width="0.8121%" height="15" fill="rgb(209,12,38)"/><text x="41.9904%" y="127.50"></text></g><g><title>evaluate_obligation (1,588,267 samples, 0.32%)</title><rect x="43.2105%" y="101" width="0.3246%" height="15" fill="rgb(227,1,9)"/><text x="43.4605%" y="111.50"></text></g><g><title>method_autoderef_steps (4,201,422 samples, 0.86%)</title><rect x="42.6830%" y="117" width="0.8586%" height="15" fill="rgb(248,47,43)"/><text x="42.9330%" y="127.50"></text></g><g><title>typeck (3,535,407 samples, 0.72%)</title><rect x="43.6581%" y="117" width="0.7225%" height="15" fill="rgb(221,10,30)"/><text x="43.9081%" y="127.50"></text></g><g><title>item_bodies_checking (89,570,284 samples, 18.31%)</title><rect x="26.0962%" y="165" width="18.3055%" height="15" fill="rgb(210,229,1)"/><text x="26.3462%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (89,567,574 samples, 18.30%)</title><rect x="26.0967%" y="149" width="18.3049%" height="15" fill="rgb(222,148,37)"/><text x="26.3467%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (89,233,128 samples, 18.24%)</title><rect x="26.1651%" y="133" width="18.2366%" height="15" fill="rgb(234,67,33)"/><text x="26.4151%" y="143.50">typeck</text></g><g><title>mir_const (6,105,765 samples, 1.25%)</title><rect x="49.1429%" y="85" width="1.2478%" height="15" fill="rgb(247,98,35)"/><text x="49.3929%" y="95.50"></text></g><g><title>unsafety_check_result (5,811,202 samples, 1.19%)</title><rect x="49.2031%" y="69" width="1.1876%" height="15" fill="rgb(247,138,52)"/><text x="49.4531%" y="79.50"></text></g><g><title>mir_built (5,744,951 samples, 1.17%)</title><rect x="49.2166%" y="53" width="1.1741%" height="15" fill="rgb(213,79,30)"/><text x="49.4666%" y="63.50"></text></g><g><title>typeck (4,921,651 samples, 1.01%)</title><rect x="49.3849%" y="37" width="1.0058%" height="15" fill="rgb(246,177,23)"/><text x="49.6349%" y="47.50"></text></g><g><title>mir_promoted (6,222,476 samples, 1.27%)</title><rect x="49.1210%" y="101" width="1.2717%" height="15" fill="rgb(230,62,27)"/><text x="49.3710%" y="111.50"></text></g><g><title>type_of (9,108,406 samples, 1.86%)</title><rect x="48.6557%" y="133" width="1.8615%" height="15" fill="rgb(216,154,8)"/><text x="48.9057%" y="143.50">t..</text></g><g><title>mir_borrowck (9,082,616 samples, 1.86%)</title><rect x="48.6610%" y="117" width="1.8562%" height="15" fill="rgb(244,35,45)"/><text x="48.9110%" y="127.50">m..</text></g><g><title>item_types_checking (30,333,602 samples, 6.20%)</title><rect x="44.4016%" y="165" width="6.1993%" height="15" fill="rgb(251,115,12)"/><text x="44.6516%" y="175.50">item_typ..</text></g><g><title>check_mod_item_types (30,313,671 samples, 6.20%)</title><rect x="44.4057%" y="149" width="6.1952%" height="15" fill="rgb(240,54,50)"/><text x="44.6557%" y="159.50">check_mo..</text></g><g><title>fn_sig (1,192,603 samples, 0.24%)</title><rect x="51.0238%" y="133" width="0.2437%" height="15" fill="rgb(233,84,52)"/><text x="51.2738%" y="143.50"></text></g><g><title>is_late_bound_map (1,767,490 samples, 0.36%)</title><rect x="51.4134%" y="117" width="0.3612%" height="15" fill="rgb(207,117,47)"/><text x="51.6634%" y="127.50"></text></g><g><title>resolve_lifetimes (1,733,869 samples, 0.35%)</title><rect x="51.4202%" y="101" width="0.3544%" height="15" fill="rgb(249,43,39)"/><text x="51.6702%" y="111.50"></text></g><g><title>lint_levels (1,432,335 samples, 0.29%)</title><rect x="51.4819%" y="85" width="0.2927%" height="15" fill="rgb(209,38,44)"/><text x="51.7319%" y="95.50"></text></g><g><title>generics_of (2,762,772 samples, 0.56%)</title><rect x="51.2676%" y="133" width="0.5646%" height="15" fill="rgb(236,212,23)"/><text x="51.5176%" y="143.50"></text></g><g><title>late_bound_vars_map (2,300,502 samples, 0.47%)</title><rect x="53.0318%" y="85" width="0.4702%" height="15" fill="rgb(242,79,21)"/><text x="53.2818%" y="95.50"></text></g><g><title>resolve_lifetimes (2,155,241 samples, 0.44%)</title><rect x="53.0615%" y="69" width="0.4405%" height="15" fill="rgb(211,96,35)"/><text x="53.3115%" y="79.50"></text></g><g><title>type_param_predicates (1,021,378 samples, 0.21%)</title><rect x="53.5471%" y="85" width="0.2087%" height="15" fill="rgb(253,215,40)"/><text x="53.7971%" y="95.50"></text></g><g><title>explicit_predicates_of (7,924,730 samples, 1.62%)</title><rect x="52.1364%" y="101" width="1.6196%" height="15" fill="rgb(211,81,21)"/><text x="52.3864%" y="111.50"></text></g><g><title>predicates_of (12,367,526 samples, 2.53%)</title><rect x="51.9222%" y="133" width="2.5275%" height="15" fill="rgb(208,190,38)"/><text x="52.1722%" y="143.50">pr..</text></g><g><title>predicates_defined_on (11,967,915 samples, 2.45%)</title><rect x="52.0039%" y="117" width="2.4459%" height="15" fill="rgb(235,213,38)"/><text x="52.2539%" y="127.50">pr..</text></g><g><title>inferred_outlives_of (3,394,977 samples, 0.69%)</title><rect x="53.7560%" y="101" width="0.6938%" height="15" fill="rgb(237,122,38)"/><text x="54.0060%" y="111.50"></text></g><g><title>inferred_outlives_crate (3,244,735 samples, 0.66%)</title><rect x="53.7867%" y="85" width="0.6631%" height="15" fill="rgb(244,218,35)"/><text x="54.0367%" y="95.50"></text></g><g><title>type_of (2,250,130 samples, 0.46%)</title><rect x="53.9899%" y="69" width="0.4599%" height="15" fill="rgb(240,68,47)"/><text x="54.2399%" y="79.50"></text></g><g><title>type_param_predicates (696,965 samples, 0.14%)</title><rect x="54.3073%" y="53" width="0.1424%" height="15" fill="rgb(210,16,53)"/><text x="54.5573%" y="63.50"></text></g><g><title>type_param_predicates (591,954 samples, 0.12%)</title><rect x="54.3288%" y="37" width="0.1210%" height="15" fill="rgb(235,124,12)"/><text x="54.5788%" y="47.50"></text></g><g><title>type_collecting (20,418,807 samples, 4.17%)</title><rect x="50.6037%" y="165" width="4.1730%" height="15" fill="rgb(224,169,11)"/><text x="50.8537%" y="175.50">type_..</text></g><g><title>collect_mod_item_types (20,396,407 samples, 4.17%)</title><rect x="50.6083%" y="149" width="4.1684%" height="15" fill="rgb(250,166,2)"/><text x="50.8583%" y="159.50">colle..</text></g><g><title>type_of (1,493,480 samples, 0.31%)</title><rect x="54.4715%" y="133" width="0.3052%" height="15" fill="rgb(242,216,29)"/><text x="54.7215%" y="143.50"></text></g><g><title>type_param_predicates (505,556 samples, 0.10%)</title><rect x="54.6734%" y="117" width="0.1033%" height="15" fill="rgb(230,116,27)"/><text x="54.9234%" y="127.50"></text></g><g><title>evaluate_obligation (3,107,756 samples, 0.64%)</title><rect x="58.8875%" y="133" width="0.6351%" height="15" fill="rgb(228,99,48)"/><text x="59.1375%" y="143.50"></text></g><g><title>implied_outlives_bounds (2,477,771 samples, 0.51%)</title><rect x="59.5528%" y="133" width="0.5064%" height="15" fill="rgb(253,11,6)"/><text x="59.8028%" y="143.50"></text></g><g><title>param_env (3,724,070 samples, 0.76%)</title><rect x="60.1551%" y="133" width="0.7611%" height="15" fill="rgb(247,143,39)"/><text x="60.4051%" y="143.50"></text></g><g><title>region_scope_tree (964,270 samples, 0.20%)</title><rect x="60.9211%" y="133" width="0.1971%" height="15" fill="rgb(236,97,10)"/><text x="61.1711%" y="143.50"></text></g><g><title>check_impl_item_well_formed (29,519,435 samples, 6.03%)</title><rect x="55.0861%" y="149" width="6.0329%" height="15" fill="rgb(233,208,19)"/><text x="55.3361%" y="159.50">check_im..</text></g><g><title>implied_outlives_bounds (1,254,158 samples, 0.26%)</title><rect x="66.2498%" y="133" width="0.2563%" height="15" fill="rgb(216,164,2)"/><text x="66.4998%" y="143.50"></text></g><g><title>param_env (4,457,477 samples, 0.91%)</title><rect x="66.5535%" y="133" width="0.9110%" height="15" fill="rgb(220,129,5)"/><text x="66.8035%" y="143.50"></text></g><g><title>check_item_well_formed (32,052,089 samples, 6.55%)</title><rect x="61.1189%" y="149" width="6.5505%" height="15" fill="rgb(242,17,10)"/><text x="61.3689%" y="159.50">check_ite..</text></g><g><title>analysis (329,202,973 samples, 67.28%)</title><rect x="0.7762%" y="197" width="67.2792%" height="15" fill="rgb(242,107,0)"/><text x="1.0262%" y="207.50">analysis</text></g><g><title>type_check_crate (209,768,452 samples, 42.87%)</title><rect x="25.1851%" y="181" width="42.8703%" height="15" fill="rgb(251,28,31)"/><text x="25.4351%" y="191.50">type_check_crate</text></g><g><title>wf_checking (64,952,962 samples, 13.27%)</title><rect x="54.7810%" y="165" width="13.2744%" height="15" fill="rgb(233,223,10)"/><text x="55.0310%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,888,611 samples, 0.39%)</title><rect x="67.6694%" y="149" width="0.3860%" height="15" fill="rgb(215,21,27)"/><text x="67.9194%" y="159.50"></text></g><g><title>codegen_crate (852,989 samples, 0.17%)</title><rect x="68.0565%" y="197" width="0.1743%" height="15" fill="rgb(232,23,21)"/><text x="68.3065%" y="207.50"></text></g><g><title>LLVM_module_codegen (1,226,024 samples, 0.25%)</title><rect x="68.3898%" y="181" width="0.2506%" height="15" fill="rgb(244,5,23)"/><text x="68.6398%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,210,172 samples, 0.25%)</title><rect x="68.3930%" y="165" width="0.2473%" height="15" fill="rgb(226,81,46)"/><text x="68.6430%" y="175.50"></text></g><g><title>codegen_module_perform_lto (1,552,927 samples, 0.32%)</title><rect x="68.3266%" y="197" width="0.3174%" height="15" fill="rgb(247,70,30)"/><text x="68.5766%" y="207.50"></text></g><g><title>AST_validation (1,145,852 samples, 0.23%)</title><rect x="68.6637%" y="181" width="0.2342%" height="15" fill="rgb(212,68,19)"/><text x="68.9137%" y="191.50"></text></g><g><title>metadata_load_macro (652,946 samples, 0.13%)</title><rect x="81.5217%" y="149" width="0.1334%" height="15" fill="rgb(240,187,13)"/><text x="81.7717%" y="159.50"></text></g><g><title>metadata_register_crate (580,256 samples, 0.12%)</title><rect x="81.6552%" y="149" width="0.1186%" height="15" fill="rgb(223,113,26)"/><text x="81.9052%" y="159.50"></text></g><g><title>macro_expand_crate (63,332,425 samples, 12.94%)</title><rect x="68.9635%" y="181" width="12.9432%" height="15" fill="rgb(206,192,2)"/><text x="69.2135%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (63,316,115 samples, 12.94%)</title><rect x="68.9669%" y="165" width="12.9399%" height="15" fill="rgb(241,108,4)"/><text x="69.2169%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (650,887 samples, 0.13%)</title><rect x="81.7737%" y="149" width="0.1330%" height="15" fill="rgb(247,173,49)"/><text x="82.0237%" y="159.50"></text></g><g><title>late_resolve_crate (6,406,258 samples, 1.31%)</title><rect x="82.0526%" y="165" width="1.3092%" height="15" fill="rgb(224,114,35)"/><text x="82.3026%" y="175.50"></text></g><g><title>configure_and_expand (72,720,695 samples, 14.86%)</title><rect x="68.6439%" y="197" width="14.8619%" height="15" fill="rgb(245,159,27)"/><text x="68.8939%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (7,726,962 samples, 1.58%)</title><rect x="81.9267%" y="181" width="1.5792%" height="15" fill="rgb(245,172,44)"/><text x="82.1767%" y="191.50"></text></g><g><title>drop_ast (1,121,752 samples, 0.23%)</title><rect x="83.5058%" y="197" width="0.2293%" height="15" fill="rgb(236,23,11)"/><text x="83.7558%" y="207.50"></text></g><g><title>early_lint_checks (3,110,113 samples, 0.64%)</title><rect x="83.7387%" y="197" width="0.6356%" height="15" fill="rgb(205,117,38)"/><text x="83.9887%" y="207.50"></text></g><g><title>free_global_ctxt (4,187,765 samples, 0.86%)</title><rect x="84.3743%" y="197" width="0.8559%" height="15" fill="rgb(237,72,25)"/><text x="84.6243%" y="207.50"></text></g><g><title>exported_symbols (632,487 samples, 0.13%)</title><rect x="87.6826%" y="181" width="0.1293%" height="15" fill="rgb(244,70,9)"/><text x="87.9326%" y="191.50"></text></g><g><title>reachable_non_generics (619,717 samples, 0.13%)</title><rect x="87.6853%" y="165" width="0.1267%" height="15" fill="rgb(217,125,39)"/><text x="87.9353%" y="175.50"></text></g><g><title>reachable_set (579,707 samples, 0.12%)</title><rect x="87.6934%" y="149" width="0.1185%" height="15" fill="rgb(235,36,10)"/><text x="87.9434%" y="159.50"></text></g><g><title>is_sized_raw (933,252 samples, 0.19%)</title><rect x="90.2761%" y="149" width="0.1907%" height="15" fill="rgb(251,123,47)"/><text x="90.5261%" y="159.50"></text></g><g><title>evaluate_obligation (749,431 samples, 0.15%)</title><rect x="90.3137%" y="133" width="0.1532%" height="15" fill="rgb(221,13,13)"/><text x="90.5637%" y="143.50"></text></g><g><title>layout_of (1,002,664 samples, 0.20%)</title><rect x="90.6554%" y="133" width="0.2049%" height="15" fill="rgb(238,131,9)"/><text x="90.9054%" y="143.50"></text></g><g><title>layout_of (2,067,765 samples, 0.42%)</title><rect x="90.4669%" y="149" width="0.4226%" height="15" fill="rgb(211,50,8)"/><text x="90.7169%" y="159.50"></text></g><g><title>layout_of (5,418,386 samples, 1.11%)</title><rect x="89.8812%" y="165" width="1.1074%" height="15" fill="rgb(245,182,24)"/><text x="90.1312%" y="175.50"></text></g><g><title>is_copy_raw (4,926,915 samples, 1.01%)</title><rect x="93.4882%" y="133" width="1.0069%" height="15" fill="rgb(242,14,37)"/><text x="93.7382%" y="143.50"></text></g><g><title>evaluate_obligation (4,163,610 samples, 0.85%)</title><rect x="93.6442%" y="117" width="0.8509%" height="15" fill="rgb(246,228,12)"/><text x="93.8942%" y="127.50"></text></g><g><title>needs_drop_raw (5,554,516 samples, 1.14%)</title><rect x="93.3753%" y="149" width="1.1352%" height="15" fill="rgb(213,55,15)"/><text x="93.6253%" y="159.50"></text></g><g><title>normalize_projection_ty (524,117 samples, 0.11%)</title><rect x="94.6222%" y="133" width="0.1071%" height="15" fill="rgb(209,9,3)"/><text x="94.8722%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (18,305,056 samples, 3.74%)</title><rect x="90.9885%" y="165" width="3.7410%" height="15" fill="rgb(230,59,30)"/><text x="91.2385%" y="175.50">mir_..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (861,928 samples, 0.18%)</title><rect x="94.5534%" y="149" width="0.1762%" height="15" fill="rgb(209,121,21)"/><text x="94.8034%" y="159.50"></text></g><g><title>optimized_mir (33,078,406 samples, 6.76%)</title><rect x="87.9773%" y="181" width="6.7602%" height="15" fill="rgb(220,109,13)"/><text x="88.2273%" y="191.50">optimized..</text></g><g><title>generate_crate_metadata (46,764,078 samples, 9.56%)</title><rect x="85.2302%" y="197" width="9.5572%" height="15" fill="rgb(232,18,1)"/><text x="85.4802%" y="207.50">generate_crate..</text></g><g><title>hir_lowering (17,970,330 samples, 3.67%)</title><rect x="94.7873%" y="197" width="3.6726%" height="15" fill="rgb(215,41,42)"/><text x="95.0373%" y="207.50">hir_..</text></g><g><title>link_crate (2,277,474 samples, 0.47%)</title><rect x="98.4654%" y="181" width="0.4654%" height="15" fill="rgb(224,123,36)"/><text x="98.7154%" y="191.50"></text></g><g><title>link_binary (2,266,104 samples, 0.46%)</title><rect x="98.4678%" y="165" width="0.4631%" height="15" fill="rgb(240,125,3)"/><text x="98.7178%" y="175.50"></text></g><g><title>link_rlib (1,848,639 samples, 0.38%)</title><rect x="98.5531%" y="149" width="0.3778%" height="15" fill="rgb(205,98,50)"/><text x="98.8031%" y="159.50"></text></g><g><title>link (2,311,754 samples, 0.47%)</title><rect x="98.4599%" y="197" width="0.4725%" height="15" fill="rgb(205,185,37)"/><text x="98.7099%" y="207.50"></text></g><g><title>parse_crate (1,079,121 samples, 0.22%)</title><rect x="98.9324%" y="197" width="0.2205%" height="15" fill="rgb(238,207,15)"/><text x="99.1824%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,894,661 samples, 0.59%)</title><rect x="99.2084%" y="197" width="0.5916%" height="15" fill="rgb(213,199,42)"/><text x="99.4584%" y="207.50"></text></g><g><title>all (489,309,019 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (489,309,019 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (905,860 samples, 0.19%)</title><rect x="99.8149%" y="197" width="0.1851%" height="15" fill="rgb(241,35,35)"/><text x="100.0649%" y="207.50"></text></g></svg></svg>