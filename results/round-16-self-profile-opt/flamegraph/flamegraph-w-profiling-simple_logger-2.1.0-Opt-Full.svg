<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (357,820,076 samples, 14.01%)</title><rect x="0.0187%" y="149" width="14.0113%" height="15" fill="rgb(227,0,7)"/><text x="0.2687%" y="159.50">LLVM_passes</text></g><g><title>resolve_instance (2,615,698 samples, 0.10%)</title><rect x="14.4820%" y="37" width="0.1024%" height="15" fill="rgb(217,0,24)"/><text x="14.7320%" y="47.50"></text></g><g><title>mir_const (7,141,730 samples, 0.28%)</title><rect x="14.3253%" y="85" width="0.2797%" height="15" fill="rgb(221,193,54)"/><text x="14.5753%" y="95.50"></text></g><g><title>unsafety_check_result (6,358,163 samples, 0.25%)</title><rect x="14.3559%" y="69" width="0.2490%" height="15" fill="rgb(248,212,6)"/><text x="14.6059%" y="79.50"></text></g><g><title>mir_built (5,525,924 samples, 0.22%)</title><rect x="14.3885%" y="53" width="0.2164%" height="15" fill="rgb(208,68,35)"/><text x="14.6385%" y="63.50"></text></g><g><title>mir_promoted (9,458,486 samples, 0.37%)</title><rect x="14.3042%" y="101" width="0.3704%" height="15" fill="rgb(232,128,0)"/><text x="14.5542%" y="111.50"></text></g><g><title>MIR_borrow_checking (18,373,065 samples, 0.72%)</title><rect x="14.0375%" y="133" width="0.7194%" height="15" fill="rgb(207,160,47)"/><text x="14.2875%" y="143.50"></text></g><g><title>mir_borrowck (18,312,345 samples, 0.72%)</title><rect x="14.0399%" y="117" width="0.7171%" height="15" fill="rgb(228,23,34)"/><text x="14.2899%" y="127.50"></text></g><g><title>crate_lints (3,680,061 samples, 0.14%)</title><rect x="14.8447%" y="101" width="0.1441%" height="15" fill="rgb(218,30,26)"/><text x="15.0947%" y="111.50"></text></g><g><title>lint_checking (3,937,694 samples, 0.15%)</title><rect x="14.8446%" y="117" width="0.1542%" height="15" fill="rgb(220,122,19)"/><text x="15.0946%" y="127.50"></text></g><g><title>misc_checking_3 (4,880,305 samples, 0.19%)</title><rect x="14.8316%" y="133" width="0.1911%" height="15" fill="rgb(250,228,42)"/><text x="15.0816%" y="143.50"></text></g><g><title>coherent_trait (4,168,717 samples, 0.16%)</title><rect x="15.0247%" y="101" width="0.1632%" height="15" fill="rgb(240,193,28)"/><text x="15.2747%" y="111.50"></text></g><g><title>specialization_graph_of (4,159,207 samples, 0.16%)</title><rect x="15.0251%" y="85" width="0.1629%" height="15" fill="rgb(216,20,37)"/><text x="15.2751%" y="95.50"></text></g><g><title>coherence_checking (4,218,648 samples, 0.17%)</title><rect x="15.0242%" y="117" width="0.1652%" height="15" fill="rgb(206,188,39)"/><text x="15.2742%" y="127.50"></text></g><g><title>typeck (6,313,332 samples, 0.25%)</title><rect x="15.6405%" y="69" width="0.2472%" height="15" fill="rgb(217,207,13)"/><text x="15.8905%" y="79.50"></text></g><g><title>item_bodies_checking (17,865,460 samples, 0.70%)</title><rect x="15.1900%" y="117" width="0.6996%" height="15" fill="rgb(231,73,38)"/><text x="15.4400%" y="127.50"></text></g><g><title>typeck_item_bodies (17,861,560 samples, 0.70%)</title><rect x="15.1902%" y="101" width="0.6994%" height="15" fill="rgb(225,20,46)"/><text x="15.4402%" y="111.50"></text></g><g><title>typeck (17,827,750 samples, 0.70%)</title><rect x="15.1915%" y="85" width="0.6981%" height="15" fill="rgb(210,31,41)"/><text x="15.4415%" y="95.50"></text></g><g><title>typeck (5,501,571 samples, 0.22%)</title><rect x="15.9051%" y="85" width="0.2154%" height="15" fill="rgb(221,200,47)"/><text x="16.1551%" y="95.50"></text></g><g><title>item_types_checking (5,899,577 samples, 0.23%)</title><rect x="15.8896%" y="117" width="0.2310%" height="15" fill="rgb(226,26,5)"/><text x="16.1396%" y="127.50"></text></g><g><title>check_mod_item_types (5,896,586 samples, 0.23%)</title><rect x="15.8897%" y="101" width="0.2309%" height="15" fill="rgb(249,33,26)"/><text x="16.1397%" y="111.50"></text></g><g><title>analysis (56,458,042 samples, 2.21%)</title><rect x="14.0300%" y="149" width="2.2108%" height="15" fill="rgb(235,183,28)"/><text x="14.2800%" y="159.50">a..</text></g><g><title>type_check_crate (31,106,528 samples, 1.22%)</title><rect x="15.0227%" y="133" width="1.2181%" height="15" fill="rgb(221,5,38)"/><text x="15.2727%" y="143.50"></text></g><g><title>layout_of (2,762,322 samples, 0.11%)</title><rect x="19.6950%" y="101" width="0.1082%" height="15" fill="rgb(247,18,42)"/><text x="19.9450%" y="111.50"></text></g><g><title>predicates_of (2,560,940 samples, 0.10%)</title><rect x="20.0095%" y="85" width="0.1003%" height="15" fill="rgb(241,131,45)"/><text x="20.2595%" y="95.50"></text></g><g><title>param_env (7,855,630 samples, 0.31%)</title><rect x="19.8032%" y="101" width="0.3076%" height="15" fill="rgb(249,31,29)"/><text x="20.0532%" y="111.50"></text></g><g><title>fn_abi_of_instance (23,091,694 samples, 0.90%)</title><rect x="19.2652%" y="117" width="0.9042%" height="15" fill="rgb(225,111,53)"/><text x="19.5152%" y="127.50"></text></g><g><title>codegen_module (101,696,898 samples, 3.98%)</title><rect x="16.3370%" y="133" width="3.9822%" height="15" fill="rgb(238,160,17)"/><text x="16.5870%" y="143.50">code..</text></g><g><title>codegen_fn_attrs (3,691,696 samples, 0.14%)</title><rect x="20.5171%" y="85" width="0.1446%" height="15" fill="rgb(214,148,48)"/><text x="20.7671%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (5,050,965 samples, 0.20%)</title><rect x="20.8387%" y="69" width="0.1978%" height="15" fill="rgb(232,36,49)"/><text x="21.0887%" y="79.50"></text></g><g><title>optimized_mir (10,176,713 samples, 0.40%)</title><rect x="20.7379%" y="85" width="0.3985%" height="15" fill="rgb(209,103,24)"/><text x="20.9879%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,297,514 samples, 0.25%)</title><rect x="21.2227%" y="69" width="0.2466%" height="15" fill="rgb(229,88,8)"/><text x="21.4727%" y="79.50"></text></g><g><title>specialization_graph_of (6,620,001 samples, 0.26%)</title><rect x="21.5412%" y="69" width="0.2592%" height="15" fill="rgb(213,181,19)"/><text x="21.7912%" y="79.50"></text></g><g><title>impl_trait_ref (2,852,048 samples, 0.11%)</title><rect x="21.6888%" y="53" width="0.1117%" height="15" fill="rgb(254,191,54)"/><text x="21.9388%" y="63.50"></text></g><g><title>resolve_instance (17,727,769 samples, 0.69%)</title><rect x="21.1364%" y="85" width="0.6942%" height="15" fill="rgb(241,83,37)"/><text x="21.3864%" y="95.50"></text></g><g><title>specialization_graph_of (2,853,102 samples, 0.11%)</title><rect x="21.9777%" y="53" width="0.1117%" height="15" fill="rgb(233,36,39)"/><text x="22.2277%" y="63.50"></text></g><g><title>resolve_instance (3,412,907 samples, 0.13%)</title><rect x="21.9561%" y="69" width="0.1336%" height="15" fill="rgb(226,3,54)"/><text x="22.2061%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (45,149,375 samples, 1.77%)</title><rect x="20.3219%" y="101" width="1.7679%" height="15" fill="rgb(245,192,40)"/><text x="20.5719%" y="111.50"></text></g><g><title>vtable_entries (3,903,673 samples, 0.15%)</title><rect x="21.9370%" y="85" width="0.1529%" height="15" fill="rgb(238,167,29)"/><text x="22.1870%" y="95.50"></text></g><g><title>monomorphization_collector (45,201,656 samples, 1.77%)</title><rect x="20.3218%" y="117" width="1.7700%" height="15" fill="rgb(232,182,51)"/><text x="20.5718%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (3,794,282 samples, 0.15%)</title><rect x="22.0920%" y="101" width="0.1486%" height="15" fill="rgb(231,60,39)"/><text x="22.3420%" y="111.50"></text></g><g><title>symbol_name (3,393,758 samples, 0.13%)</title><rect x="22.1077%" y="85" width="0.1329%" height="15" fill="rgb(208,69,12)"/><text x="22.3577%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (50,458,725 samples, 1.98%)</title><rect x="20.3196%" y="133" width="1.9758%" height="15" fill="rgb(235,93,37)"/><text x="20.5696%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (5,201,638 samples, 0.20%)</title><rect x="22.0918%" y="117" width="0.2037%" height="15" fill="rgb(213,116,39)"/><text x="22.3418%" y="127.50"></text></g><g><title>codegen_crate (154,708,662 samples, 6.06%)</title><rect x="16.2410%" y="149" width="6.0580%" height="15" fill="rgb(222,207,29)"/><text x="16.4910%" y="159.50">codegen_..</text></g><g><title>codegen_module_optimize (856,969,908 samples, 33.56%)</title><rect x="22.2990%" y="149" width="33.5568%" height="15" fill="rgb(206,96,30)"/><text x="22.5490%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (830,383,951 samples, 32.52%)</title><rect x="23.3400%" y="133" width="32.5157%" height="15" fill="rgb(218,138,4)"/><text x="23.5900%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (413,052,423 samples, 16.17%)</title><rect x="56.6205%" y="133" width="16.1741%" height="15" fill="rgb(250,191,14)"/><text x="56.8705%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (364,280,050 samples, 14.26%)</title><rect x="72.7945%" y="133" width="14.2643%" height="15" fill="rgb(239,60,40)"/><text x="73.0445%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (360,668,899 samples, 14.12%)</title><rect x="72.9359%" y="117" width="14.1229%" height="15" fill="rgb(206,27,48)"/><text x="73.1859%" y="127.50">LLVM_module_codegen_e..</text></g><g><title>LLVM_thin_lto_import (38,777,225 samples, 1.52%)</title><rect x="87.0588%" y="133" width="1.5184%" height="15" fill="rgb(225,35,8)"/><text x="87.3088%" y="143.50"></text></g><g><title>codegen_module_perform_lto (836,725,189 samples, 32.76%)</title><rect x="55.8558%" y="149" width="32.7640%" height="15" fill="rgb(250,213,24)"/><text x="56.1058%" y="159.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (11,982,654 samples, 0.47%)</title><rect x="88.6331%" y="133" width="0.4692%" height="15" fill="rgb(247,123,22)"/><text x="88.8831%" y="143.50"></text></g><g><title>expand_crate (11,972,584 samples, 0.47%)</title><rect x="88.6335%" y="117" width="0.4688%" height="15" fill="rgb(231,138,38)"/><text x="88.8835%" y="127.50"></text></g><g><title>configure_and_expand (14,437,011 samples, 0.57%)</title><rect x="88.6198%" y="149" width="0.5653%" height="15" fill="rgb(231,145,46)"/><text x="88.8698%" y="159.50"></text></g><g><title>free_global_ctxt (9,153,952 samples, 0.36%)</title><rect x="89.1986%" y="149" width="0.3584%" height="15" fill="rgb(251,118,11)"/><text x="89.4486%" y="159.50"></text></g><g><title>finish_ongoing_codegen (256,773,145 samples, 10.05%)</title><rect x="89.7032%" y="133" width="10.0546%" height="15" fill="rgb(217,147,25)"/><text x="89.9532%" y="143.50">finish_ongoing_..</text></g><g><title>link (258,314,722 samples, 10.11%)</title><rect x="89.7023%" y="149" width="10.1149%" height="15" fill="rgb(247,81,37)"/><text x="89.9523%" y="159.50">link</text></g><g><title>all (2,553,792,645 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(209,12,38)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,553,792,645 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(227,1,9)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>