<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (129,006,241 samples, 17.90%)</title><rect x="0.0918%" y="245" width="17.9037%" height="15" fill="rgb(227,0,7)"/><text x="0.3418%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (935,611 samples, 0.13%)</title><rect x="17.8656%" y="229" width="0.1298%" height="15" fill="rgb(217,0,24)"/><text x="18.1156%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (918,321 samples, 0.13%)</title><rect x="17.8680%" y="213" width="0.1274%" height="15" fill="rgb(221,193,54)"/><text x="18.1180%" y="223.50"></text></g><g><title>needs_drop_raw (1,062,324 samples, 0.15%)</title><rect x="18.5768%" y="133" width="0.1474%" height="15" fill="rgb(248,212,6)"/><text x="18.8268%" y="143.50"></text></g><g><title>impl_parent (1,190,463 samples, 0.17%)</title><rect x="19.0371%" y="101" width="0.1652%" height="15" fill="rgb(208,68,35)"/><text x="19.2871%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (746,829 samples, 0.10%)</title><rect x="19.0987%" y="85" width="0.1036%" height="15" fill="rgb(232,128,0)"/><text x="19.3487%" y="95.50"></text></g><g><title>specialization_graph_of (7,460,779 samples, 1.04%)</title><rect x="18.7841%" y="117" width="1.0354%" height="15" fill="rgb(207,160,47)"/><text x="19.0341%" y="127.50"></text></g><g><title>impl_trait_ref (4,447,292 samples, 0.62%)</title><rect x="19.2023%" y="101" width="0.6172%" height="15" fill="rgb(228,23,34)"/><text x="19.4523%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,023,469 samples, 0.56%)</title><rect x="19.2612%" y="85" width="0.5584%" height="15" fill="rgb(218,30,26)"/><text x="19.5112%" y="95.50"></text></g><g><title>resolve_instance (7,931,985 samples, 1.10%)</title><rect x="18.7242%" y="133" width="1.1008%" height="15" fill="rgb(220,122,19)"/><text x="18.9742%" y="143.50"></text></g><g><title>mir_const (10,433,426 samples, 1.45%)</title><rect x="18.4060%" y="181" width="1.4480%" height="15" fill="rgb(250,228,42)"/><text x="18.6560%" y="191.50"></text></g><g><title>unsafety_check_result (10,082,042 samples, 1.40%)</title><rect x="18.4547%" y="165" width="1.3992%" height="15" fill="rgb(240,193,28)"/><text x="18.7047%" y="175.50"></text></g><g><title>mir_built (9,737,387 samples, 1.35%)</title><rect x="18.5026%" y="149" width="1.3514%" height="15" fill="rgb(216,20,37)"/><text x="18.7526%" y="159.50"></text></g><g><title>mir_promoted (10,701,389 samples, 1.49%)</title><rect x="18.3701%" y="197" width="1.4852%" height="15" fill="rgb(206,188,39)"/><text x="18.6201%" y="207.50"></text></g><g><title>type_op_prove_predicate (781,428 samples, 0.11%)</title><rect x="19.9092%" y="197" width="0.1084%" height="15" fill="rgb(217,207,13)"/><text x="20.1592%" y="207.50"></text></g><g><title>MIR_borrow_checking (14,433,943 samples, 2.00%)</title><rect x="18.0163%" y="229" width="2.0032%" height="15" fill="rgb(231,73,38)"/><text x="18.2663%" y="239.50">M..</text></g><g><title>mir_borrowck (14,429,103 samples, 2.00%)</title><rect x="18.0170%" y="213" width="2.0025%" height="15" fill="rgb(225,20,46)"/><text x="18.2670%" y="223.50">m..</text></g><g><title>associated_items (1,127,692 samples, 0.16%)</title><rect x="21.1319%" y="165" width="0.1565%" height="15" fill="rgb(210,31,41)"/><text x="21.3819%" y="175.50"></text></g><g><title>coherent_trait (1,079,033 samples, 0.15%)</title><rect x="21.3599%" y="53" width="0.1497%" height="15" fill="rgb(221,200,47)"/><text x="21.6099%" y="63.50"></text></g><g><title>specialization_graph_of (1,068,233 samples, 0.15%)</title><rect x="21.3614%" y="37" width="0.1483%" height="15" fill="rgb(226,26,5)"/><text x="21.6114%" y="47.50"></text></g><g><title>adt_destructor (1,092,523 samples, 0.15%)</title><rect x="21.3585%" y="85" width="0.1516%" height="15" fill="rgb(249,33,26)"/><text x="21.6085%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,090,573 samples, 0.15%)</title><rect x="21.3587%" y="69" width="0.1514%" height="15" fill="rgb(235,183,28)"/><text x="21.6087%" y="79.50"></text></g><g><title>adt_dtorck_constraint (1,234,164 samples, 0.17%)</title><rect x="21.3521%" y="101" width="0.1713%" height="15" fill="rgb(221,5,38)"/><text x="21.6021%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,317,756 samples, 0.18%)</title><rect x="21.3427%" y="117" width="0.1829%" height="15" fill="rgb(247,18,42)"/><text x="21.5927%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,372,006 samples, 0.19%)</title><rect x="21.3382%" y="133" width="0.1904%" height="15" fill="rgb(241,131,45)"/><text x="21.5882%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,538,448 samples, 0.21%)</title><rect x="21.3240%" y="149" width="0.2135%" height="15" fill="rgb(249,31,29)"/><text x="21.5740%" y="159.50"></text></g><g><title>dropck_outlives (1,883,402 samples, 0.26%)</title><rect x="21.2949%" y="165" width="0.2614%" height="15" fill="rgb(225,111,53)"/><text x="21.5449%" y="175.50"></text></g><g><title>evaluate_obligation (3,109,735 samples, 0.43%)</title><rect x="21.5563%" y="165" width="0.4316%" height="15" fill="rgb(238,160,17)"/><text x="21.8063%" y="175.50"></text></g><g><title>trait_impls_of (1,260,934 samples, 0.17%)</title><rect x="21.8129%" y="149" width="0.1750%" height="15" fill="rgb(214,148,48)"/><text x="22.0629%" y="159.50"></text></g><g><title>item_bodies_checking (14,844,298 samples, 2.06%)</title><rect x="20.2219%" y="213" width="2.0601%" height="15" fill="rgb(232,36,49)"/><text x="20.4719%" y="223.50">i..</text></g><g><title>typeck_item_bodies (14,840,848 samples, 2.06%)</title><rect x="20.2224%" y="197" width="2.0596%" height="15" fill="rgb(209,103,24)"/><text x="20.4724%" y="207.50">t..</text></g><g><title>typeck (14,834,548 samples, 2.06%)</title><rect x="20.2233%" y="181" width="2.0588%" height="15" fill="rgb(229,88,8)"/><text x="20.4733%" y="191.50">t..</text></g><g><title>analysis (31,953,284 samples, 4.43%)</title><rect x="17.9955%" y="245" width="4.4345%" height="15" fill="rgb(213,181,19)"/><text x="18.2455%" y="255.50">analy..</text></g><g><title>type_check_crate (15,977,911 samples, 2.22%)</title><rect x="20.2126%" y="229" width="2.2174%" height="15" fill="rgb(254,191,54)"/><text x="20.4626%" y="239.50">t..</text></g><g><title>wf_checking (777,979 samples, 0.11%)</title><rect x="22.3220%" y="213" width="0.1080%" height="15" fill="rgb(241,83,37)"/><text x="22.5720%" y="223.50"></text></g><g><title>check_item_well_formed (754,729 samples, 0.10%)</title><rect x="22.3252%" y="197" width="0.1047%" height="15" fill="rgb(233,36,39)"/><text x="22.5752%" y="207.50"></text></g><g><title>layout_of (1,401,028 samples, 0.19%)</title><rect x="25.7695%" y="197" width="0.1944%" height="15" fill="rgb(226,3,54)"/><text x="26.0195%" y="207.50"></text></g><g><title>predicates_of (824,871 samples, 0.11%)</title><rect x="26.1836%" y="181" width="0.1145%" height="15" fill="rgb(245,192,40)"/><text x="26.4336%" y="191.50"></text></g><g><title>param_env (2,421,369 samples, 0.34%)</title><rect x="25.9639%" y="197" width="0.3360%" height="15" fill="rgb(238,167,29)"/><text x="26.2139%" y="207.50"></text></g><g><title>fn_abi_of_instance (8,028,581 samples, 1.11%)</title><rect x="25.2759%" y="213" width="1.1142%" height="15" fill="rgb(232,182,51)"/><text x="25.5259%" y="223.50"></text></g><g><title>layout_of (838,869 samples, 0.12%)</title><rect x="26.4152%" y="213" width="0.1164%" height="15" fill="rgb(231,60,39)"/><text x="26.6652%" y="223.50"></text></g><g><title>codegen_module (28,165,627 samples, 3.91%)</title><rect x="22.6628%" y="229" width="3.9089%" height="15" fill="rgb(208,69,12)"/><text x="22.9128%" y="239.50">code..</text></g><g><title>item_attrs (1,083,061 samples, 0.15%)</title><rect x="26.8238%" y="165" width="0.1503%" height="15" fill="rgb(235,93,37)"/><text x="27.0738%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,041,731 samples, 0.14%)</title><rect x="26.8295%" y="149" width="0.1446%" height="15" fill="rgb(213,116,39)"/><text x="27.0795%" y="159.50"></text></g><g><title>codegen_fn_attrs (1,834,360 samples, 0.25%)</title><rect x="26.7866%" y="181" width="0.2546%" height="15" fill="rgb(222,207,29)"/><text x="27.0366%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,934,229 samples, 0.27%)</title><rect x="27.2523%" y="165" width="0.2684%" height="15" fill="rgb(206,96,30)"/><text x="27.5023%" y="175.50"></text></g><g><title>optimized_mir (3,715,601 samples, 0.52%)</title><rect x="27.1566%" y="181" width="0.5157%" height="15" fill="rgb(218,138,4)"/><text x="27.4066%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (2,957,159 samples, 0.41%)</title><rect x="27.7810%" y="165" width="0.4104%" height="15" fill="rgb(250,191,14)"/><text x="28.0310%" y="175.50"></text></g><g><title>impl_parent (961,311 samples, 0.13%)</title><rect x="28.5598%" y="149" width="0.1334%" height="15" fill="rgb(239,60,40)"/><text x="28.8098%" y="159.50"></text></g><g><title>specialization_graph_of (5,077,589 samples, 0.70%)</title><rect x="28.2971%" y="165" width="0.7047%" height="15" fill="rgb(206,27,48)"/><text x="28.5471%" y="175.50"></text></g><g><title>impl_trait_ref (2,223,338 samples, 0.31%)</title><rect x="28.6932%" y="149" width="0.3086%" height="15" fill="rgb(225,35,8)"/><text x="28.9432%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,862,527 samples, 0.26%)</title><rect x="28.7433%" y="133" width="0.2585%" height="15" fill="rgb(250,213,24)"/><text x="28.9933%" y="143.50"></text></g><g><title>resolve_instance (9,949,706 samples, 1.38%)</title><rect x="27.6722%" y="181" width="1.3808%" height="15" fill="rgb(247,123,22)"/><text x="27.9222%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (814,590 samples, 0.11%)</title><rect x="29.0674%" y="181" width="0.1130%" height="15" fill="rgb(231,138,38)"/><text x="29.3174%" y="191.50"></text></g><g><title>impl_trait_ref (2,087,186 samples, 0.29%)</title><rect x="29.4570%" y="133" width="0.2897%" height="15" fill="rgb(231,145,46)"/><text x="29.7070%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,617,081 samples, 0.22%)</title><rect x="29.5222%" y="117" width="0.2244%" height="15" fill="rgb(251,118,11)"/><text x="29.7722%" y="127.50"></text></g><g><title>specialization_graph_of (3,855,387 samples, 0.54%)</title><rect x="29.2118%" y="149" width="0.5351%" height="15" fill="rgb(217,147,25)"/><text x="29.4618%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (22,810,675 samples, 3.17%)</title><rect x="26.5817%" y="197" width="3.1657%" height="15" fill="rgb(247,81,37)"/><text x="26.8317%" y="207.50">mon..</text></g><g><title>vtable_entries (4,085,279 samples, 0.57%)</title><rect x="29.1804%" y="181" width="0.5670%" height="15" fill="rgb(209,12,38)"/><text x="29.4304%" y="191.50"></text></g><g><title>resolve_instance (3,892,287 samples, 0.54%)</title><rect x="29.2072%" y="165" width="0.5402%" height="15" fill="rgb(227,1,9)"/><text x="29.4572%" y="175.50"></text></g><g><title>monomorphization_collector (22,830,445 samples, 3.17%)</title><rect x="26.5814%" y="213" width="3.1684%" height="15" fill="rgb(248,47,43)"/><text x="26.8314%" y="223.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,523,869 samples, 0.21%)</title><rect x="29.7504%" y="197" width="0.2115%" height="15" fill="rgb(221,10,30)"/><text x="30.0004%" y="207.50"></text></g><g><title>symbol_name (1,390,267 samples, 0.19%)</title><rect x="29.7690%" y="181" width="0.1929%" height="15" fill="rgb(210,229,1)"/><text x="30.0190%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (24,881,010 samples, 3.45%)</title><rect x="26.5727%" y="229" width="3.4530%" height="15" fill="rgb(222,148,37)"/><text x="26.8227%" y="239.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,988,394 samples, 0.28%)</title><rect x="29.7498%" y="213" width="0.2760%" height="15" fill="rgb(234,67,33)"/><text x="29.9998%" y="223.50"></text></g><g><title>codegen_crate (54,782,749 samples, 7.60%)</title><rect x="22.4315%" y="245" width="7.6028%" height="15" fill="rgb(247,98,35)"/><text x="22.6815%" y="255.50">codegen_cr..</text></g><g><title>codegen_module_optimize (193,376,227 samples, 26.84%)</title><rect x="30.0343%" y="245" width="26.8370%" height="15" fill="rgb(247,138,52)"/><text x="30.2843%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (180,320,299 samples, 25.03%)</title><rect x="31.8462%" y="229" width="25.0251%" height="15" fill="rgb(213,79,30)"/><text x="32.0962%" y="239.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (78,615,883 samples, 10.91%)</title><rect x="58.1160%" y="229" width="10.9104%" height="15" fill="rgb(246,177,23)"/><text x="58.3660%" y="239.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (89,484,192 samples, 12.42%)</title><rect x="69.0264%" y="229" width="12.4187%" height="15" fill="rgb(230,62,27)"/><text x="69.2764%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (88,063,341 samples, 12.22%)</title><rect x="69.2236%" y="213" width="12.2216%" height="15" fill="rgb(216,154,8)"/><text x="69.4736%" y="223.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (6,651,409 samples, 0.92%)</title><rect x="81.4451%" y="229" width="0.9231%" height="15" fill="rgb(244,35,45)"/><text x="81.6951%" y="239.50"></text></g><g><title>codegen_module_perform_lto (184,157,716 samples, 25.56%)</title><rect x="56.8713%" y="245" width="25.5577%" height="15" fill="rgb(251,115,12)"/><text x="57.1213%" y="255.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (12,367,039 samples, 1.72%)</title><rect x="82.4813%" y="229" width="1.7163%" height="15" fill="rgb(240,54,50)"/><text x="82.7313%" y="239.50"></text></g><g><title>expand_crate (12,343,178 samples, 1.71%)</title><rect x="82.4846%" y="213" width="1.7130%" height="15" fill="rgb(233,84,52)"/><text x="82.7346%" y="223.50"></text></g><g><title>metadata_register_crate (2,725,753 samples, 0.38%)</title><rect x="83.8193%" y="197" width="0.3783%" height="15" fill="rgb(207,117,47)"/><text x="84.0693%" y="207.50"></text></g><g><title>metadata_register_crate (994,690 samples, 0.14%)</title><rect x="84.0595%" y="181" width="0.1380%" height="15" fill="rgb(249,43,39)"/><text x="84.3095%" y="191.50"></text></g><g><title>late_resolve_crate (1,536,078 samples, 0.21%)</title><rect x="84.2613%" y="213" width="0.2132%" height="15" fill="rgb(209,38,44)"/><text x="84.5113%" y="223.50"></text></g><g><title>configure_and_expand (14,773,018 samples, 2.05%)</title><rect x="82.4290%" y="245" width="2.0502%" height="15" fill="rgb(236,212,23)"/><text x="82.6790%" y="255.50">c..</text></g><g><title>resolve_crate (1,958,754 samples, 0.27%)</title><rect x="84.2074%" y="229" width="0.2718%" height="15" fill="rgb(242,79,21)"/><text x="84.4574%" y="239.50"></text></g><g><title>free_global_ctxt (6,875,602 samples, 0.95%)</title><rect x="84.4985%" y="245" width="0.9542%" height="15" fill="rgb(211,96,35)"/><text x="84.7485%" y="255.50"></text></g><g><title>finish_ongoing_codegen (99,540,647 samples, 13.81%)</title><rect x="85.5953%" y="229" width="13.8144%" height="15" fill="rgb(253,215,40)"/><text x="85.8453%" y="239.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,080,102 samples, 0.15%)</title><rect x="99.4097%" y="229" width="0.1499%" height="15" fill="rgb(211,81,21)"/><text x="99.6597%" y="239.50"></text></g><g><title>link_binary (1,061,572 samples, 0.15%)</title><rect x="99.4123%" y="213" width="0.1473%" height="15" fill="rgb(208,190,38)"/><text x="99.6623%" y="223.50"></text></g><g><title>link (100,647,420 samples, 13.97%)</title><rect x="85.5930%" y="245" width="13.9680%" height="15" fill="rgb(235,213,38)"/><text x="85.8430%" y="255.50">link</text></g><g><title>self_profile_alloc_query_strings (1,643,709 samples, 0.23%)</title><rect x="99.7000%" y="245" width="0.2281%" height="15" fill="rgb(237,122,38)"/><text x="99.9500%" y="255.50"></text></g><g><title>all (720,557,778 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (720,557,778 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>