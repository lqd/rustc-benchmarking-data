<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (21,383,387 samples, 8.35%)</title><rect x="0.3131%" y="181" width="8.3534%" height="15" fill="rgb(227,0,7)"/><text x="0.5631%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (458,175 samples, 0.18%)</title><rect x="16.9742%" y="69" width="0.1790%" height="15" fill="rgb(217,0,24)"/><text x="17.2242%" y="79.50"></text></g><g><title>is_copy_raw (402,555 samples, 0.16%)</title><rect x="16.9959%" y="53" width="0.1573%" height="15" fill="rgb(221,193,54)"/><text x="17.2459%" y="63.50"></text></g><g><title>evaluate_obligation (367,045 samples, 0.14%)</title><rect x="17.0098%" y="37" width="0.1434%" height="15" fill="rgb(248,212,6)"/><text x="17.2598%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (1,021,009 samples, 0.40%)</title><rect x="17.2859%" y="53" width="0.3989%" height="15" fill="rgb(208,68,35)"/><text x="17.5359%" y="63.50"></text></g><g><title>resolve_instance (1,572,783 samples, 0.61%)</title><rect x="17.1628%" y="69" width="0.6144%" height="15" fill="rgb(232,128,0)"/><text x="17.4128%" y="79.50"></text></g><g><title>thir_body (920,857 samples, 0.36%)</title><rect x="17.7893%" y="69" width="0.3597%" height="15" fill="rgb(207,160,47)"/><text x="18.0393%" y="79.50"></text></g><g><title>mir_const (6,738,464 samples, 2.63%)</title><rect x="15.5234%" y="117" width="2.6324%" height="15" fill="rgb(228,23,34)"/><text x="15.7734%" y="127.50">mi..</text></g><g><title>unsafety_check_result (5,901,062 samples, 2.31%)</title><rect x="15.8506%" y="101" width="2.3053%" height="15" fill="rgb(218,30,26)"/><text x="16.1006%" y="111.50">u..</text></g><g><title>mir_built (5,295,956 samples, 2.07%)</title><rect x="16.0870%" y="85" width="2.0689%" height="15" fill="rgb(220,122,19)"/><text x="16.3370%" y="95.50">m..</text></g><g><title>mir_const (2,415,084 samples, 0.94%)</title><rect x="18.4482%" y="101" width="0.9435%" height="15" fill="rgb(250,228,42)"/><text x="18.6982%" y="111.50"></text></g><g><title>unsafety_check_result (1,644,197 samples, 0.64%)</title><rect x="18.7494%" y="85" width="0.6423%" height="15" fill="rgb(240,193,28)"/><text x="18.9994%" y="95.50"></text></g><g><title>mir_built (1,368,855 samples, 0.53%)</title><rect x="18.8569%" y="69" width="0.5347%" height="15" fill="rgb(216,20,37)"/><text x="19.1069%" y="79.50"></text></g><g><title>mir_promoted (11,112,250 samples, 4.34%)</title><rect x="15.0579%" y="133" width="4.3410%" height="15" fill="rgb(206,188,39)"/><text x="15.3079%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (3,182,022 samples, 1.24%)</title><rect x="18.1558%" y="117" width="1.2431%" height="15" fill="rgb(217,207,13)"/><text x="18.4058%" y="127.50"></text></g><g><title>type_op_normalize_fn_sig (1,356,740 samples, 0.53%)</title><rect x="19.4283%" y="133" width="0.5300%" height="15" fill="rgb(231,73,38)"/><text x="19.6783%" y="143.50"></text></g><g><title>normalize_projection_ty (1,033,570 samples, 0.40%)</title><rect x="19.5546%" y="117" width="0.4038%" height="15" fill="rgb(225,20,46)"/><text x="19.8046%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,548,022 samples, 0.60%)</title><rect x="19.9786%" y="133" width="0.6047%" height="15" fill="rgb(210,31,41)"/><text x="20.2286%" y="143.50"></text></g><g><title>normalize_projection_ty (936,681 samples, 0.37%)</title><rect x="20.2174%" y="117" width="0.3659%" height="15" fill="rgb(221,200,47)"/><text x="20.4674%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,331,536 samples, 0.52%)</title><rect x="20.5833%" y="133" width="0.5202%" height="15" fill="rgb(226,26,5)"/><text x="20.8333%" y="143.50"></text></g><g><title>evaluate_obligation (498,144 samples, 0.19%)</title><rect x="20.9089%" y="117" width="0.1946%" height="15" fill="rgb(249,33,26)"/><text x="21.1589%" y="127.50"></text></g><g><title>MIR_borrow_checking (31,236,101 samples, 12.20%)</title><rect x="8.9058%" y="165" width="12.2024%" height="15" fill="rgb(235,183,28)"/><text x="9.1558%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (30,908,927 samples, 12.07%)</title><rect x="9.0336%" y="149" width="12.0746%" height="15" fill="rgb(221,5,38)"/><text x="9.2836%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,436,955 samples, 0.56%)</title><rect x="21.1082%" y="165" width="0.5613%" height="15" fill="rgb(247,18,42)"/><text x="21.3582%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,271,945 samples, 0.50%)</title><rect x="21.1726%" y="149" width="0.4969%" height="15" fill="rgb(241,131,45)"/><text x="21.4226%" y="159.50"></text></g><g><title>hir_module_items (464,125 samples, 0.18%)</title><rect x="21.6695%" y="165" width="0.1813%" height="15" fill="rgb(249,31,29)"/><text x="21.9195%" y="175.50"></text></g><g><title>codegen_fn_attrs (567,668 samples, 0.22%)</title><rect x="22.2225%" y="101" width="0.2218%" height="15" fill="rgb(225,111,53)"/><text x="22.4725%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,014,933 samples, 0.40%)</title><rect x="22.0553%" y="133" width="0.3965%" height="15" fill="rgb(238,160,17)"/><text x="22.3053%" y="143.50"></text></g><g><title>should_inherit_track_caller (887,613 samples, 0.35%)</title><rect x="22.1051%" y="117" width="0.3467%" height="15" fill="rgb(214,148,48)"/><text x="22.3551%" y="127.50"></text></g><g><title>check_mod_attrs (1,508,926 samples, 0.59%)</title><rect x="21.8626%" y="149" width="0.5895%" height="15" fill="rgb(232,36,49)"/><text x="22.1126%" y="159.50"></text></g><g><title>check_mod_const_bodies (341,654 samples, 0.13%)</title><rect x="22.4520%" y="149" width="0.1335%" height="15" fill="rgb(209,103,24)"/><text x="22.7020%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (825,438 samples, 0.32%)</title><rect x="22.6455%" y="149" width="0.3225%" height="15" fill="rgb(229,88,8)"/><text x="22.8955%" y="159.50"></text></g><g><title>misc_checking_1 (2,971,742 samples, 1.16%)</title><rect x="21.8510%" y="165" width="1.1609%" height="15" fill="rgb(213,181,19)"/><text x="22.1010%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (317,224 samples, 0.12%)</title><rect x="23.0124%" y="149" width="0.1239%" height="15" fill="rgb(254,191,54)"/><text x="23.2624%" y="159.50"></text></g><g><title>misc_checking_2 (693,908 samples, 0.27%)</title><rect x="23.0119%" y="165" width="0.2711%" height="15" fill="rgb(241,83,37)"/><text x="23.2619%" y="175.50"></text></g><g><title>match_checking (375,444 samples, 0.15%)</title><rect x="23.1363%" y="149" width="0.1467%" height="15" fill="rgb(233,36,39)"/><text x="23.3863%" y="159.50"></text></g><g><title>check_match (299,304 samples, 0.12%)</title><rect x="23.1661%" y="133" width="0.1169%" height="15" fill="rgb(226,3,54)"/><text x="23.4161%" y="143.50"></text></g><g><title>death_checking (459,785 samples, 0.18%)</title><rect x="23.3839%" y="149" width="0.1796%" height="15" fill="rgb(245,192,40)"/><text x="23.6339%" y="159.50"></text></g><g><title>crate_lints (2,081,622 samples, 0.81%)</title><rect x="23.5641%" y="133" width="0.8132%" height="15" fill="rgb(238,167,29)"/><text x="23.8141%" y="143.50"></text></g><g><title>type_of (1,326,875 samples, 0.52%)</title><rect x="23.8590%" y="117" width="0.5183%" height="15" fill="rgb(232,182,51)"/><text x="24.1090%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (863,511 samples, 0.34%)</title><rect x="24.0400%" y="101" width="0.3373%" height="15" fill="rgb(231,60,39)"/><text x="24.2900%" y="111.50"></text></g><g><title>lint_checking (2,377,755 samples, 0.93%)</title><rect x="23.5635%" y="149" width="0.9289%" height="15" fill="rgb(208,69,12)"/><text x="23.8135%" y="159.50"></text></g><g><title>module_lints (294,603 samples, 0.12%)</title><rect x="24.3773%" y="133" width="0.1151%" height="15" fill="rgb(235,93,37)"/><text x="24.6273%" y="143.50"></text></g><g><title>lint_mod (291,993 samples, 0.11%)</title><rect x="24.3783%" y="117" width="0.1141%" height="15" fill="rgb(213,116,39)"/><text x="24.6283%" y="127.50"></text></g><g><title>privacy_access_levels (399,125 samples, 0.16%)</title><rect x="24.4924%" y="149" width="0.1559%" height="15" fill="rgb(222,207,29)"/><text x="24.7424%" y="159.50"></text></g><g><title>privacy_checking_modules (1,071,241 samples, 0.42%)</title><rect x="24.6483%" y="149" width="0.4185%" height="15" fill="rgb(206,96,30)"/><text x="24.8983%" y="159.50"></text></g><g><title>check_mod_privacy (1,069,781 samples, 0.42%)</title><rect x="24.6489%" y="133" width="0.4179%" height="15" fill="rgb(218,138,4)"/><text x="24.8989%" y="143.50"></text></g><g><title>misc_checking_3 (4,580,689 samples, 1.79%)</title><rect x="23.2830%" y="165" width="1.7895%" height="15" fill="rgb(250,191,14)"/><text x="23.5330%" y="175.50">m..</text></g><g><title>impl_parent (2,693,752 samples, 1.05%)</title><rect x="28.4531%" y="101" width="1.0523%" height="15" fill="rgb(239,60,40)"/><text x="28.7031%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,591,234 samples, 0.62%)</title><rect x="28.8838%" y="85" width="0.6216%" height="15" fill="rgb(206,27,48)"/><text x="29.1338%" y="95.50"></text></g><g><title>impl_trait_ref (5,937,475 samples, 2.32%)</title><rect x="29.5058%" y="101" width="2.3195%" height="15" fill="rgb(225,35,8)"/><text x="29.7558%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,658,890 samples, 1.82%)</title><rect x="30.0053%" y="85" width="1.8200%" height="15" fill="rgb(250,213,24)"/><text x="30.2553%" y="95.50">m..</text></g><g><title>trait_impls_of (1,117,485 samples, 0.44%)</title><rect x="31.8706%" y="101" width="0.4365%" height="15" fill="rgb(247,123,22)"/><text x="32.1206%" y="111.50"></text></g><g><title>implementations_of_trait (324,127 samples, 0.13%)</title><rect x="32.1806%" y="85" width="0.1266%" height="15" fill="rgb(231,138,38)"/><text x="32.4306%" y="95.50"></text></g><g><title>coherent_trait (18,392,395 samples, 7.19%)</title><rect x="25.1231%" y="133" width="7.1850%" height="15" fill="rgb(231,145,46)"/><text x="25.3731%" y="143.50">coherent_t..</text></g><g><title>specialization_graph_of (18,358,725 samples, 7.17%)</title><rect x="25.1362%" y="117" width="7.1719%" height="15" fill="rgb(251,118,11)"/><text x="25.3862%" y="127.50">specializa..</text></g><g><title>coherence_checking (18,523,946 samples, 7.24%)</title><rect x="25.1123%" y="149" width="7.2364%" height="15" fill="rgb(217,147,25)"/><text x="25.3623%" y="159.50">coherence_..</text></g><g><title>associated_items (285,302 samples, 0.11%)</title><rect x="40.9199%" y="101" width="0.1115%" height="15" fill="rgb(247,81,37)"/><text x="41.1699%" y="111.50"></text></g><g><title>evaluate_obligation (2,580,034 samples, 1.01%)</title><rect x="41.1114%" y="101" width="1.0079%" height="15" fill="rgb(209,12,38)"/><text x="41.3614%" y="111.50"></text></g><g><title>explicit_predicates_of (322,645 samples, 0.13%)</title><rect x="42.6125%" y="53" width="0.1260%" height="15" fill="rgb(227,1,9)"/><text x="42.8625%" y="63.50"></text></g><g><title>param_env (1,200,452 samples, 0.47%)</title><rect x="42.2807%" y="101" width="0.4690%" height="15" fill="rgb(248,47,43)"/><text x="42.5307%" y="111.50"></text></g><g><title>predicates_of (589,406 samples, 0.23%)</title><rect x="42.5195%" y="85" width="0.2303%" height="15" fill="rgb(221,10,30)"/><text x="42.7695%" y="95.50"></text></g><g><title>predicates_defined_on (498,396 samples, 0.19%)</title><rect x="42.5550%" y="69" width="0.1947%" height="15" fill="rgb(210,229,1)"/><text x="42.8050%" y="79.50"></text></g><g><title>typeck (1,377,265 samples, 0.54%)</title><rect x="42.9630%" y="101" width="0.5380%" height="15" fill="rgb(222,148,37)"/><text x="43.2130%" y="111.50"></text></g><g><title>item_bodies_checking (28,500,562 samples, 11.13%)</title><rect x="32.3929%" y="149" width="11.1338%" height="15" fill="rgb(234,67,33)"/><text x="32.6429%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (28,498,592 samples, 11.13%)</title><rect x="32.3937%" y="133" width="11.1330%" height="15" fill="rgb(247,98,35)"/><text x="32.6437%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (28,273,406 samples, 11.05%)</title><rect x="32.4816%" y="117" width="11.0450%" height="15" fill="rgb(247,138,52)"/><text x="32.7316%" y="127.50">typeck</text></g><g><title>adt_destructor (308,593 samples, 0.12%)</title><rect x="46.4840%" y="117" width="0.1206%" height="15" fill="rgb(213,79,30)"/><text x="46.7340%" y="127.50"></text></g><g><title>coherent_trait (306,433 samples, 0.12%)</title><rect x="46.4848%" y="101" width="0.1197%" height="15" fill="rgb(246,177,23)"/><text x="46.7348%" y="111.50"></text></g><g><title>specialization_graph_of (304,773 samples, 0.12%)</title><rect x="46.4855%" y="85" width="0.1191%" height="15" fill="rgb(230,62,27)"/><text x="46.7355%" y="95.50"></text></g><g><title>item_types_checking (8,047,315 samples, 3.14%)</title><rect x="43.5267%" y="149" width="3.1437%" height="15" fill="rgb(216,154,8)"/><text x="43.7767%" y="159.50">ite..</text></g><g><title>check_mod_item_types (8,045,505 samples, 3.14%)</title><rect x="43.5274%" y="133" width="3.1430%" height="15" fill="rgb(244,35,45)"/><text x="43.7774%" y="143.50">che..</text></g><g><title>late_bound_vars_map (544,293 samples, 0.21%)</title><rect x="47.4546%" y="101" width="0.2126%" height="15" fill="rgb(251,115,12)"/><text x="47.7046%" y="111.50"></text></g><g><title>resolve_lifetimes (467,893 samples, 0.18%)</title><rect x="47.4845%" y="85" width="0.1828%" height="15" fill="rgb(240,54,50)"/><text x="47.7345%" y="95.50"></text></g><g><title>fn_sig (1,831,698 samples, 0.72%)</title><rect x="47.0242%" y="117" width="0.7156%" height="15" fill="rgb(233,84,52)"/><text x="47.2742%" y="127.50"></text></g><g><title>is_late_bound_map (794,507 samples, 0.31%)</title><rect x="47.9043%" y="101" width="0.3104%" height="15" fill="rgb(207,117,47)"/><text x="48.1543%" y="111.50"></text></g><g><title>resolve_lifetimes (711,247 samples, 0.28%)</title><rect x="47.9368%" y="85" width="0.2778%" height="15" fill="rgb(249,43,39)"/><text x="48.1868%" y="95.50"></text></g><g><title>generics_of (1,464,346 samples, 0.57%)</title><rect x="47.7397%" y="117" width="0.5720%" height="15" fill="rgb(209,38,44)"/><text x="47.9897%" y="127.50"></text></g><g><title>impl_trait_ref (749,331 samples, 0.29%)</title><rect x="48.3118%" y="117" width="0.2927%" height="15" fill="rgb(236,212,23)"/><text x="48.5618%" y="127.50"></text></g><g><title>explicit_predicates_of (468,866 samples, 0.18%)</title><rect x="48.8210%" y="85" width="0.1832%" height="15" fill="rgb(242,79,21)"/><text x="49.0710%" y="95.50"></text></g><g><title>predicates_of (1,189,014 samples, 0.46%)</title><rect x="48.6045%" y="117" width="0.4645%" height="15" fill="rgb(211,96,35)"/><text x="48.8545%" y="127.50"></text></g><g><title>predicates_defined_on (959,481 samples, 0.37%)</title><rect x="48.6942%" y="101" width="0.3748%" height="15" fill="rgb(253,215,40)"/><text x="48.9442%" y="111.50"></text></g><g><title>type_collecting (6,463,219 samples, 2.52%)</title><rect x="46.6708%" y="149" width="2.5249%" height="15" fill="rgb(211,81,21)"/><text x="46.9208%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (6,453,459 samples, 2.52%)</title><rect x="46.6746%" y="133" width="2.5211%" height="15" fill="rgb(208,190,38)"/><text x="46.9246%" y="143.50">co..</text></g><g><title>type_of (324,290 samples, 0.13%)</title><rect x="49.0690%" y="117" width="0.1267%" height="15" fill="rgb(235,213,38)"/><text x="49.3190%" y="127.50"></text></g><g><title>param_env (634,136 samples, 0.25%)</title><rect x="50.7586%" y="117" width="0.2477%" height="15" fill="rgb(237,122,38)"/><text x="51.0086%" y="127.50"></text></g><g><title>region_scope_tree (407,645 samples, 0.16%)</title><rect x="51.0218%" y="117" width="0.1592%" height="15" fill="rgb(244,218,35)"/><text x="51.2718%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,740,063 samples, 1.85%)</title><rect x="49.3347%" y="133" width="1.8517%" height="15" fill="rgb(240,68,47)"/><text x="49.5847%" y="143.50">c..</text></g><g><title>evaluate_obligation (2,135,361 samples, 0.83%)</title><rect x="53.1812%" y="117" width="0.8342%" height="15" fill="rgb(210,16,53)"/><text x="53.4312%" y="127.50"></text></g><g><title>implied_outlives_bounds (354,583 samples, 0.14%)</title><rect x="54.0301%" y="117" width="0.1385%" height="15" fill="rgb(235,124,12)"/><text x="54.2801%" y="127.50"></text></g><g><title>param_env (350,653 samples, 0.14%)</title><rect x="54.1686%" y="117" width="0.1370%" height="15" fill="rgb(224,169,11)"/><text x="54.4186%" y="127.50"></text></g><g><title>analysis (117,061,262 samples, 45.73%)</title><rect x="8.6665%" y="181" width="45.7301%" height="15" fill="rgb(250,166,2)"/><text x="8.9165%" y="191.50">analysis</text></g><g><title>type_check_crate (75,064,906 samples, 29.32%)</title><rect x="25.0724%" y="165" width="29.3242%" height="15" fill="rgb(242,216,29)"/><text x="25.3224%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,299,512 samples, 5.20%)</title><rect x="49.2012%" y="149" width="5.1955%" height="15" fill="rgb(230,116,27)"/><text x="49.4512%" y="159.50">wf_che..</text></g><g><title>check_item_well_formed (8,217,682 samples, 3.21%)</title><rect x="51.1864%" y="133" width="3.2102%" height="15" fill="rgb(228,99,48)"/><text x="51.4364%" y="143.50">che..</text></g><g><title>param_env (364,785 samples, 0.14%)</title><rect x="56.2053%" y="133" width="0.1425%" height="15" fill="rgb(253,11,6)"/><text x="56.4553%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,239,844 samples, 0.48%)</title><rect x="55.8994%" y="149" width="0.4843%" height="15" fill="rgb(247,143,39)"/><text x="56.1494%" y="159.50"></text></g><g><title>codegen_module (3,997,743 samples, 1.56%)</title><rect x="54.9108%" y="165" width="1.5617%" height="15" fill="rgb(236,97,10)"/><text x="55.1608%" y="175.50"></text></g><g><title>item_attrs (421,793 samples, 0.16%)</title><rect x="56.5712%" y="101" width="0.1648%" height="15" fill="rgb(233,208,19)"/><text x="56.8212%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (416,973 samples, 0.16%)</title><rect x="56.5731%" y="85" width="0.1629%" height="15" fill="rgb(216,164,2)"/><text x="56.8231%" y="95.50"></text></g><g><title>codegen_fn_attrs (485,284 samples, 0.19%)</title><rect x="56.5605%" y="117" width="0.1896%" height="15" fill="rgb(220,129,5)"/><text x="56.8105%" y="127.50"></text></g><g><title>optimized_mir (825,567 samples, 0.32%)</title><rect x="56.7878%" y="117" width="0.3225%" height="15" fill="rgb(242,17,10)"/><text x="57.0378%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (350,281 samples, 0.14%)</title><rect x="57.1454%" y="101" width="0.1368%" height="15" fill="rgb(242,107,0)"/><text x="57.3954%" y="111.50"></text></g><g><title>resolve_instance (570,625 samples, 0.22%)</title><rect x="57.1103%" y="117" width="0.2229%" height="15" fill="rgb(251,28,31)"/><text x="57.3603%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (2,378,085 samples, 0.93%)</title><rect x="56.4841%" y="133" width="0.9290%" height="15" fill="rgb(233,223,10)"/><text x="56.7341%" y="143.50"></text></g><g><title>monomorphization_collector (2,440,165 samples, 0.95%)</title><rect x="56.4833%" y="149" width="0.9533%" height="15" fill="rgb(215,21,27)"/><text x="56.7333%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,744,269 samples, 1.07%)</title><rect x="56.4736%" y="165" width="1.0721%" height="15" fill="rgb(232,23,21)"/><text x="56.7236%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (279,263 samples, 0.11%)</title><rect x="57.4365%" y="149" width="0.1091%" height="15" fill="rgb(244,5,23)"/><text x="57.6865%" y="159.50"></text></g><g><title>codegen_crate (8,186,467 samples, 3.20%)</title><rect x="54.4007%" y="181" width="3.1981%" height="15" fill="rgb(226,81,46)"/><text x="54.6507%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (18,739,729 samples, 7.32%)</title><rect x="57.5987%" y="181" width="7.3207%" height="15" fill="rgb(247,70,30)"/><text x="57.8487%" y="191.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (16,948,610 samples, 6.62%)</title><rect x="58.2984%" y="165" width="6.6210%" height="15" fill="rgb(212,68,19)"/><text x="58.5484%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (6,631,601 samples, 2.59%)</title><rect x="65.3575%" y="165" width="2.5906%" height="15" fill="rgb(240,187,13)"/><text x="65.6075%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (14,915,029 samples, 5.83%)</title><rect x="67.9482%" y="165" width="5.8266%" height="15" fill="rgb(223,113,26)"/><text x="68.1982%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (14,650,256 samples, 5.72%)</title><rect x="68.0516%" y="149" width="5.7231%" height="15" fill="rgb(206,192,2)"/><text x="68.3016%" y="159.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (22,975,694 samples, 8.98%)</title><rect x="64.9194%" y="181" width="8.9755%" height="15" fill="rgb(241,108,4)"/><text x="65.1694%" y="191.50">codegen_modul..</text></g><g><title>macro_expand_crate (19,094,232 samples, 7.46%)</title><rect x="74.1262%" y="165" width="7.4592%" height="15" fill="rgb(247,173,49)"/><text x="74.3762%" y="175.50">macro_expa..</text></g><g><title>expand_crate (19,070,612 samples, 7.45%)</title><rect x="74.1354%" y="149" width="7.4500%" height="15" fill="rgb(224,114,35)"/><text x="74.3854%" y="159.50">expand_cra..</text></g><g><title>metadata_register_crate (2,351,993 samples, 0.92%)</title><rect x="80.6665%" y="133" width="0.9188%" height="15" fill="rgb(245,159,27)"/><text x="80.9165%" y="143.50"></text></g><g><title>metadata_register_crate (1,828,449 samples, 0.71%)</title><rect x="80.8711%" y="117" width="0.7143%" height="15" fill="rgb(245,172,44)"/><text x="81.1211%" y="127.50"></text></g><g><title>metadata_register_crate (748,169 samples, 0.29%)</title><rect x="81.2931%" y="101" width="0.2923%" height="15" fill="rgb(236,23,11)"/><text x="81.5431%" y="111.50"></text></g><g><title>finalize_macro_resolutions (397,574 samples, 0.16%)</title><rect x="81.6996%" y="149" width="0.1553%" height="15" fill="rgb(205,117,38)"/><text x="81.9496%" y="159.50"></text></g><g><title>late_resolve_crate (3,968,292 samples, 1.55%)</title><rect x="81.8549%" y="149" width="1.5502%" height="15" fill="rgb(237,72,25)"/><text x="82.1049%" y="159.50"></text></g><g><title>configure_and_expand (24,518,360 samples, 9.58%)</title><rect x="73.8949%" y="181" width="9.5781%" height="15" fill="rgb(244,70,9)"/><text x="74.1449%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (4,617,429 samples, 1.80%)</title><rect x="81.6692%" y="165" width="1.8038%" height="15" fill="rgb(217,125,39)"/><text x="81.9192%" y="175.50">r..</text></g><g><title>drop_ast (419,614 samples, 0.16%)</title><rect x="83.4730%" y="181" width="0.1639%" height="15" fill="rgb(235,36,10)"/><text x="83.7230%" y="191.50"></text></g><g><title>early_lint_checks (573,766 samples, 0.22%)</title><rect x="83.6423%" y="181" width="0.2241%" height="15" fill="rgb(251,123,47)"/><text x="83.8923%" y="191.50"></text></g><g><title>free_global_ctxt (4,658,060 samples, 1.82%)</title><rect x="83.8664%" y="181" width="1.8197%" height="15" fill="rgb(221,13,13)"/><text x="84.1164%" y="191.50">f..</text></g><g><title>exported_symbols (281,863 samples, 0.11%)</title><rect x="86.5542%" y="165" width="0.1101%" height="15" fill="rgb(238,131,9)"/><text x="86.8042%" y="175.50"></text></g><g><title>mir_for_ctfe (413,962 samples, 0.16%)</title><rect x="86.6758%" y="165" width="0.1617%" height="15" fill="rgb(211,50,8)"/><text x="86.9258%" y="175.50"></text></g><g><title>layout_of (614,839 samples, 0.24%)</title><rect x="87.9055%" y="149" width="0.2402%" height="15" fill="rgb(245,182,24)"/><text x="88.1555%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,658,370 samples, 1.04%)</title><rect x="88.1457%" y="149" width="1.0385%" height="15" fill="rgb(242,14,37)"/><text x="88.3957%" y="159.50"></text></g><g><title>optimized_mir (5,945,801 samples, 2.32%)</title><rect x="86.8645%" y="165" width="2.3227%" height="15" fill="rgb(246,228,12)"/><text x="87.1145%" y="175.50">o..</text></g><g><title>generate_crate_metadata (9,082,047 samples, 3.55%)</title><rect x="85.6861%" y="181" width="3.5479%" height="15" fill="rgb(213,55,15)"/><text x="85.9361%" y="191.50">gene..</text></g><g><title>hir_lowering (7,610,051 samples, 2.97%)</title><rect x="89.2340%" y="181" width="2.9729%" height="15" fill="rgb(209,9,3)"/><text x="89.4840%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (13,090,268 samples, 5.11%)</title><rect x="92.2124%" y="165" width="5.1137%" height="15" fill="rgb(230,59,30)"/><text x="92.4624%" y="175.50">finish..</text></g><g><title>link_crate (1,044,892 samples, 0.41%)</title><rect x="97.3261%" y="165" width="0.4082%" height="15" fill="rgb(209,121,21)"/><text x="97.5761%" y="175.50"></text></g><g><title>link_binary (1,015,531 samples, 0.40%)</title><rect x="97.3376%" y="149" width="0.3967%" height="15" fill="rgb(220,109,13)"/><text x="97.5876%" y="159.50"></text></g><g><title>link_rlib (701,297 samples, 0.27%)</title><rect x="97.4604%" y="133" width="0.2740%" height="15" fill="rgb(232,18,1)"/><text x="97.7104%" y="143.50"></text></g><g><title>link (14,155,910 samples, 5.53%)</title><rect x="92.2069%" y="181" width="5.5300%" height="15" fill="rgb(215,41,42)"/><text x="92.4569%" y="191.50">link</text></g><g><title>parse_crate (2,796,460 samples, 1.09%)</title><rect x="97.7369%" y="181" width="1.0924%" height="15" fill="rgb(224,123,36)"/><text x="97.9869%" y="191.50"></text></g><g><title>prepare_outputs (349,964 samples, 0.14%)</title><rect x="98.8327%" y="181" width="0.1367%" height="15" fill="rgb(240,125,3)"/><text x="99.0827%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,119,092 samples, 0.83%)</title><rect x="98.9694%" y="181" width="0.8278%" height="15" fill="rgb(205,98,50)"/><text x="99.2194%" y="191.50"></text></g><g><title>all (255,982,818 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (255,982,818 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (395,944 samples, 0.15%)</title><rect x="99.8453%" y="181" width="0.1547%" height="15" fill="rgb(213,199,42)"/><text x="100.0953%" y="191.50"></text></g></svg></svg>