<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (159,913,389 samples, 7.05%)</title><rect x="0.1118%" y="213" width="7.0492%" height="15" fill="rgb(227,0,7)"/><text x="0.3618%" y="223.50">LLVM_pass..</text></g><g><title>codegen_generate_lto_work (2,289,967 samples, 0.10%)</title><rect x="7.0600%" y="197" width="0.1009%" height="15" fill="rgb(217,0,24)"/><text x="7.3100%" y="207.50"></text></g><g><title>is_copy_raw (5,015,062 samples, 0.22%)</title><rect x="13.1159%" y="85" width="0.2211%" height="15" fill="rgb(221,193,54)"/><text x="13.3659%" y="95.50"></text></g><g><title>evaluate_obligation (4,170,834 samples, 0.18%)</title><rect x="13.1532%" y="69" width="0.1839%" height="15" fill="rgb(248,212,6)"/><text x="13.4032%" y="79.50"></text></g><g><title>needs_drop_raw (6,282,794 samples, 0.28%)</title><rect x="13.0608%" y="101" width="0.2770%" height="15" fill="rgb(208,68,35)"/><text x="13.3108%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,603,698 samples, 0.11%)</title><rect x="13.3981%" y="85" width="0.1148%" height="15" fill="rgb(232,128,0)"/><text x="13.6481%" y="95.50"></text></g><g><title>resolve_instance (5,066,393 samples, 0.22%)</title><rect x="13.3378%" y="101" width="0.2233%" height="15" fill="rgb(207,160,47)"/><text x="13.5878%" y="111.50"></text></g><g><title>thir_body (9,144,601 samples, 0.40%)</title><rect x="13.5693%" y="101" width="0.4031%" height="15" fill="rgb(228,23,34)"/><text x="13.8193%" y="111.50"></text></g><g><title>mir_const (56,703,897 samples, 2.50%)</title><rect x="11.4809%" y="149" width="2.4996%" height="15" fill="rgb(218,30,26)"/><text x="11.7309%" y="159.50">mi..</text></g><g><title>unsafety_check_result (49,332,374 samples, 2.17%)</title><rect x="11.8059%" y="133" width="2.1746%" height="15" fill="rgb(220,122,19)"/><text x="12.0559%" y="143.50">u..</text></g><g><title>mir_built (43,782,186 samples, 1.93%)</title><rect x="12.0505%" y="117" width="1.9300%" height="15" fill="rgb(250,228,42)"/><text x="12.3005%" y="127.50">m..</text></g><g><title>mir_promoted (63,923,386 samples, 2.82%)</title><rect x="11.2312%" y="165" width="2.8178%" height="15" fill="rgb(240,193,28)"/><text x="11.4812%" y="175.50">mi..</text></g><g><title>type_op_ascribe_user_type (5,009,676 samples, 0.22%)</title><rect x="14.0491%" y="165" width="0.2208%" height="15" fill="rgb(216,20,37)"/><text x="14.2991%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (5,631,268 samples, 0.25%)</title><rect x="14.2700%" y="165" width="0.2482%" height="15" fill="rgb(206,188,39)"/><text x="14.5200%" y="175.50"></text></g><g><title>normalize_projection_ty (3,508,574 samples, 0.15%)</title><rect x="14.3636%" y="149" width="0.1547%" height="15" fill="rgb(217,207,13)"/><text x="14.6136%" y="159.50"></text></g><g><title>type_op_prove_predicate (15,567,441 samples, 0.69%)</title><rect x="14.6181%" y="165" width="0.6862%" height="15" fill="rgb(231,73,38)"/><text x="14.8681%" y="175.50"></text></g><g><title>MIR_borrow_checking (182,689,898 samples, 8.05%)</title><rect x="7.2518%" y="197" width="8.0532%" height="15" fill="rgb(225,20,46)"/><text x="7.5018%" y="207.50">MIR_borrow_..</text></g><g><title>mir_borrowck (181,693,940 samples, 8.01%)</title><rect x="7.2957%" y="181" width="8.0093%" height="15" fill="rgb(210,31,41)"/><text x="7.5457%" y="191.50">mir_borrowck</text></g><g><title>check_mod_attrs (3,368,775 samples, 0.15%)</title><rect x="15.4156%" y="181" width="0.1485%" height="15" fill="rgb(221,200,47)"/><text x="15.6656%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (3,328,690 samples, 0.15%)</title><rect x="15.6285%" y="181" width="0.1467%" height="15" fill="rgb(226,26,5)"/><text x="15.8785%" y="191.50"></text></g><g><title>misc_checking_1 (8,487,616 samples, 0.37%)</title><rect x="15.4125%" y="197" width="0.3741%" height="15" fill="rgb(249,33,26)"/><text x="15.6625%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (3,828,973 samples, 0.17%)</title><rect x="15.7868%" y="181" width="0.1688%" height="15" fill="rgb(235,183,28)"/><text x="16.0368%" y="191.50"></text></g><g><title>check_mod_liveness (3,127,747 samples, 0.14%)</title><rect x="15.8177%" y="165" width="0.1379%" height="15" fill="rgb(221,5,38)"/><text x="16.0677%" y="175.50"></text></g><g><title>misc_checking_2 (7,656,527 samples, 0.34%)</title><rect x="15.7867%" y="197" width="0.3375%" height="15" fill="rgb(247,18,42)"/><text x="16.0367%" y="207.50"></text></g><g><title>match_checking (3,825,423 samples, 0.17%)</title><rect x="15.9556%" y="181" width="0.1686%" height="15" fill="rgb(241,131,45)"/><text x="16.2056%" y="191.50"></text></g><g><title>check_match (3,532,239 samples, 0.16%)</title><rect x="15.9685%" y="165" width="0.1557%" height="15" fill="rgb(249,31,29)"/><text x="16.2185%" y="175.50"></text></g><g><title>death_checking (2,788,531 samples, 0.12%)</title><rect x="16.1928%" y="181" width="0.1229%" height="15" fill="rgb(225,111,53)"/><text x="16.4428%" y="191.50"></text></g><g><title>crate_lints (8,044,841 samples, 0.35%)</title><rect x="16.3159%" y="165" width="0.3546%" height="15" fill="rgb(238,160,17)"/><text x="16.5659%" y="175.50"></text></g><g><title>lint_checking (12,202,179 samples, 0.54%)</title><rect x="16.3157%" y="181" width="0.5379%" height="15" fill="rgb(214,148,48)"/><text x="16.5657%" y="191.50"></text></g><g><title>module_lints (4,153,947 samples, 0.18%)</title><rect x="16.6705%" y="165" width="0.1831%" height="15" fill="rgb(232,36,49)"/><text x="16.9205%" y="175.50"></text></g><g><title>lint_mod (4,132,247 samples, 0.18%)</title><rect x="16.6715%" y="149" width="0.1822%" height="15" fill="rgb(209,103,24)"/><text x="16.9215%" y="159.50"></text></g><g><title>privacy_access_levels (2,615,110 samples, 0.12%)</title><rect x="16.8536%" y="181" width="0.1153%" height="15" fill="rgb(229,88,8)"/><text x="17.1036%" y="191.50"></text></g><g><title>privacy_checking_modules (7,958,481 samples, 0.35%)</title><rect x="16.9689%" y="181" width="0.3508%" height="15" fill="rgb(213,181,19)"/><text x="17.2189%" y="191.50"></text></g><g><title>check_mod_privacy (7,941,000 samples, 0.35%)</title><rect x="16.9697%" y="165" width="0.3500%" height="15" fill="rgb(254,191,54)"/><text x="17.2197%" y="175.50"></text></g><g><title>misc_checking_3 (27,204,959 samples, 1.20%)</title><rect x="16.1242%" y="197" width="1.1992%" height="15" fill="rgb(241,83,37)"/><text x="16.3742%" y="207.50"></text></g><g><title>mir_const_qualif (5,792,999 samples, 0.26%)</title><rect x="18.1145%" y="85" width="0.2554%" height="15" fill="rgb(233,36,39)"/><text x="18.3645%" y="95.50"></text></g><g><title>mir_const (5,391,070 samples, 0.24%)</title><rect x="18.1322%" y="69" width="0.2376%" height="15" fill="rgb(226,3,54)"/><text x="18.3822%" y="79.50"></text></g><g><title>unsafety_check_result (4,565,909 samples, 0.20%)</title><rect x="18.1686%" y="53" width="0.2013%" height="15" fill="rgb(245,192,40)"/><text x="18.4186%" y="63.50"></text></g><g><title>mir_built (4,276,805 samples, 0.19%)</title><rect x="18.1813%" y="37" width="0.1885%" height="15" fill="rgb(238,167,29)"/><text x="18.4313%" y="47.50"></text></g><g><title>mir_borrowck (10,811,380 samples, 0.48%)</title><rect x="18.6524%" y="53" width="0.4766%" height="15" fill="rgb(232,182,51)"/><text x="18.9024%" y="63.50"></text></g><g><title>mir_for_ctfe (17,249,844 samples, 0.76%)</title><rect x="18.3698%" y="85" width="0.7604%" height="15" fill="rgb(231,60,39)"/><text x="18.6198%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,624,030 samples, 0.69%)</title><rect x="18.4415%" y="69" width="0.6887%" height="15" fill="rgb(208,69,12)"/><text x="18.6915%" y="79.50"></text></g><g><title>evaluate_obligation (2,839,223 samples, 0.13%)</title><rect x="20.4797%" y="69" width="0.1252%" height="15" fill="rgb(235,93,37)"/><text x="20.7297%" y="79.50"></text></g><g><title>eval_to_const_value_raw (60,463,109 samples, 2.67%)</title><rect x="17.9978%" y="133" width="2.6653%" height="15" fill="rgb(213,116,39)"/><text x="18.2478%" y="143.50">ev..</text></g><g><title>eval_to_const_value_raw (60,387,825 samples, 2.66%)</title><rect x="18.0011%" y="117" width="2.6620%" height="15" fill="rgb(222,207,29)"/><text x="18.2511%" y="127.50">ev..</text></g><g><title>eval_to_allocation_raw (60,250,524 samples, 2.66%)</title><rect x="18.0072%" y="101" width="2.6559%" height="15" fill="rgb(206,96,30)"/><text x="18.2572%" y="111.50">ev..</text></g><g><title>typeck (34,760,376 samples, 1.53%)</title><rect x="19.1308%" y="85" width="1.5323%" height="15" fill="rgb(218,138,4)"/><text x="19.3808%" y="95.50"></text></g><g><title>impl_parent (3,527,346 samples, 0.16%)</title><rect x="20.6633%" y="133" width="0.1555%" height="15" fill="rgb(250,191,14)"/><text x="20.9133%" y="143.50"></text></g><g><title>impl_trait_ref (6,690,763 samples, 0.29%)</title><rect x="20.8188%" y="133" width="0.2949%" height="15" fill="rgb(239,60,40)"/><text x="21.0688%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,323,781 samples, 0.23%)</title><rect x="20.8790%" y="117" width="0.2347%" height="15" fill="rgb(206,27,48)"/><text x="21.1290%" y="127.50"></text></g><g><title>coherent_trait (86,846,908 samples, 3.83%)</title><rect x="17.3475%" y="165" width="3.8283%" height="15" fill="rgb(225,35,8)"/><text x="17.5975%" y="175.50">cohe..</text></g><g><title>specialization_graph_of (86,045,838 samples, 3.79%)</title><rect x="17.3828%" y="149" width="3.7930%" height="15" fill="rgb(250,213,24)"/><text x="17.6328%" y="159.50">spec..</text></g><g><title>coherence_checking (87,193,732 samples, 3.84%)</title><rect x="17.3456%" y="181" width="3.8436%" height="15" fill="rgb(247,123,22)"/><text x="17.5956%" y="191.50">cohe..</text></g><g><title>associated_items (2,500,682 samples, 0.11%)</title><rect x="28.9035%" y="133" width="0.1102%" height="15" fill="rgb(231,138,38)"/><text x="29.1535%" y="143.50"></text></g><g><title>evaluate_obligation (26,427,751 samples, 1.16%)</title><rect x="29.1110%" y="133" width="1.1650%" height="15" fill="rgb(231,145,46)"/><text x="29.3610%" y="143.50"></text></g><g><title>method_autoderef_steps (3,124,635 samples, 0.14%)</title><rect x="30.3880%" y="133" width="0.1377%" height="15" fill="rgb(251,118,11)"/><text x="30.6380%" y="143.50"></text></g><g><title>evaluate_obligation (3,081,514 samples, 0.14%)</title><rect x="31.2314%" y="117" width="0.1358%" height="15" fill="rgb(217,147,25)"/><text x="31.4814%" y="127.50"></text></g><g><title>typeck (18,918,858 samples, 0.83%)</title><rect x="30.6163%" y="133" width="0.8340%" height="15" fill="rgb(247,81,37)"/><text x="30.8663%" y="143.50"></text></g><g><title>item_bodies_checking (232,756,446 samples, 10.26%)</title><rect x="21.2011%" y="181" width="10.2602%" height="15" fill="rgb(209,12,38)"/><text x="21.4511%" y="191.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (232,752,286 samples, 10.26%)</title><rect x="21.2013%" y="165" width="10.2600%" height="15" fill="rgb(227,1,9)"/><text x="21.4513%" y="175.50">typeck_item_bod..</text></g><g><title>typeck (232,031,063 samples, 10.23%)</title><rect x="21.2331%" y="149" width="10.2282%" height="15" fill="rgb(248,47,43)"/><text x="21.4831%" y="159.50">typeck</text></g><g><title>specializes (2,414,066 samples, 0.11%)</title><rect x="32.5540%" y="117" width="0.1064%" height="15" fill="rgb(221,10,30)"/><text x="32.8040%" y="127.50"></text></g><g><title>evaluate_obligation (10,167,138 samples, 0.45%)</title><rect x="32.2258%" y="133" width="0.4482%" height="15" fill="rgb(210,229,1)"/><text x="32.4758%" y="143.50"></text></g><g><title>item_types_checking (27,810,827 samples, 1.23%)</title><rect x="31.4613%" y="181" width="1.2259%" height="15" fill="rgb(222,148,37)"/><text x="31.7113%" y="191.50"></text></g><g><title>check_mod_item_types (27,785,207 samples, 1.22%)</title><rect x="31.4624%" y="165" width="1.2248%" height="15" fill="rgb(234,67,33)"/><text x="31.7124%" y="175.50"></text></g><g><title>typeck (13,531,693 samples, 0.60%)</title><rect x="32.0908%" y="149" width="0.5965%" height="15" fill="rgb(247,98,35)"/><text x="32.3408%" y="159.50"></text></g><g><title>generics_of (2,878,969 samples, 0.13%)</title><rect x="32.8644%" y="149" width="0.1269%" height="15" fill="rgb(247,138,52)"/><text x="33.1144%" y="159.50"></text></g><g><title>explicit_predicates_of (4,676,946 samples, 0.21%)</title><rect x="33.0612%" y="117" width="0.2062%" height="15" fill="rgb(213,79,30)"/><text x="33.3112%" y="127.50"></text></g><g><title>predicates_of (6,627,689 samples, 0.29%)</title><rect x="33.0144%" y="149" width="0.2922%" height="15" fill="rgb(246,177,23)"/><text x="33.2644%" y="159.50"></text></g><g><title>predicates_defined_on (6,218,754 samples, 0.27%)</title><rect x="33.0324%" y="133" width="0.2741%" height="15" fill="rgb(230,62,27)"/><text x="33.2824%" y="143.50"></text></g><g><title>type_collecting (14,911,730 samples, 0.66%)</title><rect x="32.6878%" y="181" width="0.6573%" height="15" fill="rgb(216,154,8)"/><text x="32.9378%" y="191.50"></text></g><g><title>collect_mod_item_types (14,884,830 samples, 0.66%)</title><rect x="32.6890%" y="165" width="0.6561%" height="15" fill="rgb(244,35,45)"/><text x="32.9390%" y="175.50"></text></g><g><title>mir_const_qualif (2,762,641 samples, 0.12%)</title><rect x="34.3387%" y="101" width="0.1218%" height="15" fill="rgb(251,115,12)"/><text x="34.5887%" y="111.50"></text></g><g><title>mir_const (2,575,201 samples, 0.11%)</title><rect x="34.3469%" y="85" width="0.1135%" height="15" fill="rgb(240,54,50)"/><text x="34.5969%" y="95.50"></text></g><g><title>mir_borrowck (4,995,627 samples, 0.22%)</title><rect x="34.5937%" y="69" width="0.2202%" height="15" fill="rgb(233,84,52)"/><text x="34.8437%" y="79.50"></text></g><g><title>mir_for_ctfe (8,031,223 samples, 0.35%)</title><rect x="34.4604%" y="101" width="0.3540%" height="15" fill="rgb(207,117,47)"/><text x="34.7104%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,258,500 samples, 0.32%)</title><rect x="34.4945%" y="85" width="0.3200%" height="15" fill="rgb(249,43,39)"/><text x="34.7445%" y="95.50"></text></g><g><title>eval_to_const_value_raw (26,719,847 samples, 1.18%)</title><rect x="34.2953%" y="149" width="1.1778%" height="15" fill="rgb(209,38,44)"/><text x="34.5453%" y="159.50"></text></g><g><title>eval_to_const_value_raw (26,692,637 samples, 1.18%)</title><rect x="34.2965%" y="133" width="1.1766%" height="15" fill="rgb(236,212,23)"/><text x="34.5465%" y="143.50"></text></g><g><title>eval_to_allocation_raw (26,630,847 samples, 1.17%)</title><rect x="34.2992%" y="117" width="1.1739%" height="15" fill="rgb(242,79,21)"/><text x="34.5492%" y="127.50"></text></g><g><title>typeck (14,935,943 samples, 0.66%)</title><rect x="34.8147%" y="101" width="0.6584%" height="15" fill="rgb(211,96,35)"/><text x="35.0647%" y="111.50"></text></g><g><title>evaluate_obligation (3,627,603 samples, 0.16%)</title><rect x="35.4731%" y="149" width="0.1599%" height="15" fill="rgb(253,215,40)"/><text x="35.7231%" y="159.50"></text></g><g><title>param_env (3,574,492 samples, 0.16%)</title><rect x="35.7532%" y="149" width="0.1576%" height="15" fill="rgb(211,81,21)"/><text x="36.0032%" y="159.50"></text></g><g><title>region_scope_tree (2,957,039 samples, 0.13%)</title><rect x="35.9134%" y="149" width="0.1304%" height="15" fill="rgb(208,190,38)"/><text x="36.1634%" y="159.50"></text></g><g><title>check_impl_item_well_formed (59,148,137 samples, 2.61%)</title><rect x="33.4400%" y="165" width="2.6073%" height="15" fill="rgb(235,213,38)"/><text x="33.6900%" y="175.50">ch..</text></g><g><title>evaluate_obligation (3,002,780 samples, 0.13%)</title><rect x="36.8209%" y="149" width="0.1324%" height="15" fill="rgb(237,122,38)"/><text x="37.0709%" y="159.50"></text></g><g><title>check_item_well_formed (24,993,342 samples, 1.10%)</title><rect x="36.0474%" y="165" width="1.1017%" height="15" fill="rgb(244,218,35)"/><text x="36.2974%" y="175.50"></text></g><g><title>analysis (684,426,894 samples, 30.17%)</title><rect x="7.1610%" y="213" width="30.1704%" height="15" fill="rgb(240,68,47)"/><text x="7.4110%" y="223.50">analysis</text></g><g><title>type_check_crate (453,888,152 samples, 20.01%)</title><rect x="17.3234%" y="197" width="20.0080%" height="15" fill="rgb(210,16,53)"/><text x="17.5734%" y="207.50">type_check_crate</text></g><g><title>wf_checking (90,364,187 samples, 3.98%)</title><rect x="33.3480%" y="181" width="3.9834%" height="15" fill="rgb(235,124,12)"/><text x="33.5980%" y="191.50">wf_c..</text></g><g><title>check_trait_item_well_formed (4,135,538 samples, 0.18%)</title><rect x="37.1491%" y="165" width="0.1823%" height="15" fill="rgb(224,169,11)"/><text x="37.3991%" y="175.50"></text></g><g><title>param_env (5,116,372 samples, 0.23%)</title><rect x="40.1020%" y="165" width="0.2255%" height="15" fill="rgb(250,166,2)"/><text x="40.3520%" y="175.50"></text></g><g><title>fn_abi_of_instance (17,795,012 samples, 0.78%)</title><rect x="39.6243%" y="181" width="0.7844%" height="15" fill="rgb(242,216,29)"/><text x="39.8743%" y="191.50"></text></g><g><title>codegen_module (70,103,101 samples, 3.09%)</title><rect x="37.4329%" y="197" width="3.0902%" height="15" fill="rgb(230,116,27)"/><text x="37.6829%" y="207.50">cod..</text></g><g><title>metadata_decode_entry_optimized_mir (2,414,564 samples, 0.11%)</title><rect x="40.8531%" y="133" width="0.1064%" height="15" fill="rgb(228,99,48)"/><text x="41.1031%" y="143.50"></text></g><g><title>optimized_mir (6,479,358 samples, 0.29%)</title><rect x="40.7625%" y="149" width="0.2856%" height="15" fill="rgb(253,11,6)"/><text x="41.0125%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (3,175,544 samples, 0.14%)</title><rect x="41.0974%" y="133" width="0.1400%" height="15" fill="rgb(247,143,39)"/><text x="41.3474%" y="143.50"></text></g><g><title>resolve_instance (5,970,627 samples, 0.26%)</title><rect x="41.0481%" y="149" width="0.2632%" height="15" fill="rgb(236,97,10)"/><text x="41.2981%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (20,150,599 samples, 0.89%)</title><rect x="40.5258%" y="165" width="0.8883%" height="15" fill="rgb(233,208,19)"/><text x="40.7758%" y="175.50"></text></g><g><title>monomorphization_collector (20,371,001 samples, 0.90%)</title><rect x="40.5255%" y="181" width="0.8980%" height="15" fill="rgb(216,164,2)"/><text x="40.7755%" y="191.50"></text></g><g><title>assert_symbols_are_distinct (4,018,346 samples, 0.18%)</title><rect x="41.4238%" y="165" width="0.1771%" height="15" fill="rgb(220,129,5)"/><text x="41.6738%" y="175.50"></text></g><g><title>symbol_name (3,799,833 samples, 0.17%)</title><rect x="41.4334%" y="149" width="0.1675%" height="15" fill="rgb(242,17,10)"/><text x="41.6834%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (25,311,488 samples, 1.12%)</title><rect x="40.5237%" y="197" width="1.1158%" height="15" fill="rgb(242,107,0)"/><text x="40.7737%" y="207.50"></text></g><g><title>partition_and_assert_distinct_symbols (4,898,266 samples, 0.22%)</title><rect x="41.4235%" y="181" width="0.2159%" height="15" fill="rgb(251,28,31)"/><text x="41.6735%" y="191.50"></text></g><g><title>codegen_crate (97,799,122 samples, 4.31%)</title><rect x="37.3319%" y="213" width="4.3111%" height="15" fill="rgb(233,223,10)"/><text x="37.5819%" y="223.50">codeg..</text></g><g><title>codegen_module_optimize (464,253,091 samples, 20.46%)</title><rect x="41.6431%" y="213" width="20.4649%" height="15" fill="rgb(215,21,27)"/><text x="41.8931%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (432,540,009 samples, 19.07%)</title><rect x="43.0410%" y="197" width="19.0669%" height="15" fill="rgb(232,23,21)"/><text x="43.2910%" y="207.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (212,304,120 samples, 9.36%)</title><rect x="62.9705%" y="197" width="9.3586%" height="15" fill="rgb(244,5,23)"/><text x="63.2205%" y="207.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (267,791,241 samples, 11.80%)</title><rect x="72.3292%" y="197" width="11.8046%" height="15" fill="rgb(226,81,46)"/><text x="72.5792%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (265,415,223 samples, 11.70%)</title><rect x="72.4339%" y="181" width="11.6999%" height="15" fill="rgb(247,70,30)"/><text x="72.6839%" y="191.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (29,678,090 samples, 1.31%)</title><rect x="84.1337%" y="197" width="1.3082%" height="15" fill="rgb(212,68,19)"/><text x="84.3837%" y="207.50"></text></g><g><title>codegen_module_perform_lto (530,711,029 samples, 23.39%)</title><rect x="62.1079%" y="213" width="23.3944%" height="15" fill="rgb(240,187,13)"/><text x="62.3579%" y="223.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (88,202,213 samples, 3.89%)</title><rect x="85.6008%" y="197" width="3.8881%" height="15" fill="rgb(223,113,26)"/><text x="85.8508%" y="207.50">macr..</text></g><g><title>expand_crate (88,181,803 samples, 3.89%)</title><rect x="85.6017%" y="181" width="3.8872%" height="15" fill="rgb(206,192,2)"/><text x="85.8517%" y="191.50">expa..</text></g><g><title>late_resolve_crate (15,638,758 samples, 0.69%)</title><rect x="89.5425%" y="181" width="0.6894%" height="15" fill="rgb(241,108,4)"/><text x="89.7925%" y="191.50"></text></g><g><title>configure_and_expand (109,002,410 samples, 4.80%)</title><rect x="85.5024%" y="213" width="4.8050%" height="15" fill="rgb(247,173,49)"/><text x="85.7524%" y="223.50">config..</text></g><g><title>resolve_crate (18,328,719 samples, 0.81%)</title><rect x="89.4994%" y="197" width="0.8080%" height="15" fill="rgb(224,114,35)"/><text x="89.7494%" y="207.50"></text></g><g><title>drop_ast (2,652,861 samples, 0.12%)</title><rect x="90.3074%" y="213" width="0.1169%" height="15" fill="rgb(245,159,27)"/><text x="90.5574%" y="223.50"></text></g><g><title>early_lint_checks (3,760,162 samples, 0.17%)</title><rect x="90.4258%" y="213" width="0.1658%" height="15" fill="rgb(245,172,44)"/><text x="90.6758%" y="223.50"></text></g><g><title>free_global_ctxt (17,744,262 samples, 0.78%)</title><rect x="90.5915%" y="213" width="0.7822%" height="15" fill="rgb(236,23,11)"/><text x="90.8415%" y="223.50"></text></g><g><title>layout_of (5,624,694 samples, 0.25%)</title><rect x="93.3472%" y="181" width="0.2479%" height="15" fill="rgb(205,117,38)"/><text x="93.5972%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,323,820 samples, 1.34%)</title><rect x="93.5951%" y="181" width="1.3367%" height="15" fill="rgb(237,72,25)"/><text x="93.8451%" y="191.50"></text></g><g><title>optimized_mir (61,893,229 samples, 2.73%)</title><rect x="92.2433%" y="197" width="2.7283%" height="15" fill="rgb(244,70,9)"/><text x="92.4933%" y="207.50">op..</text></g><g><title>generate_crate_metadata (82,235,385 samples, 3.63%)</title><rect x="91.3737%" y="213" width="3.6250%" height="15" fill="rgb(217,125,39)"/><text x="91.6237%" y="223.50">gene..</text></g><g><title>hir_lowering (28,646,116 samples, 1.26%)</title><rect x="94.9987%" y="213" width="1.2628%" height="15" fill="rgb(235,36,10)"/><text x="95.2487%" y="223.50"></text></g><g><title>finish_ongoing_codegen (69,276,818 samples, 3.05%)</title><rect x="96.2622%" y="197" width="3.0538%" height="15" fill="rgb(251,123,47)"/><text x="96.5122%" y="207.50">fin..</text></g><g><title>link_crate (4,945,837 samples, 0.22%)</title><rect x="99.3160%" y="197" width="0.2180%" height="15" fill="rgb(221,13,13)"/><text x="99.5660%" y="207.50"></text></g><g><title>link_binary (4,643,973 samples, 0.20%)</title><rect x="99.3293%" y="181" width="0.2047%" height="15" fill="rgb(238,131,9)"/><text x="99.5793%" y="191.50"></text></g><g><title>link_rlib (3,780,313 samples, 0.17%)</title><rect x="99.3674%" y="165" width="0.1666%" height="15" fill="rgb(211,50,8)"/><text x="99.6174%" y="175.50"></text></g><g><title>link (74,249,965 samples, 3.27%)</title><rect x="96.2615%" y="213" width="3.2730%" height="15" fill="rgb(245,182,24)"/><text x="96.5115%" y="223.50">link</text></g><g><title>self_profile_alloc_query_strings (7,652,207 samples, 0.34%)</title><rect x="99.6006%" y="213" width="0.3373%" height="15" fill="rgb(242,14,37)"/><text x="99.8506%" y="223.50"></text></g><g><title>all (2,268,534,944 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,268,534,944 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>