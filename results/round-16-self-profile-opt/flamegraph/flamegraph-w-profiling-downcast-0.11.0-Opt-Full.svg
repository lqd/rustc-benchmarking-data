<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,291,839 samples, 12.77%)</title><rect x="0.4659%" y="197" width="12.7704%" height="15" fill="rgb(227,0,7)"/><text x="0.7159%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (264,883 samples, 0.13%)</title><rect x="13.1026%" y="181" width="0.1337%" height="15" fill="rgb(217,0,24)"/><text x="13.3526%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (249,573 samples, 0.13%)</title><rect x="13.1103%" y="165" width="0.1260%" height="15" fill="rgb(221,193,54)"/><text x="13.3603%" y="175.50"></text></g><g><title>implied_outlives_bounds (611,015 samples, 0.31%)</title><rect x="16.5928%" y="149" width="0.3085%" height="15" fill="rgb(248,212,6)"/><text x="16.8428%" y="159.50"></text></g><g><title>needs_drop_raw (672,789 samples, 0.34%)</title><rect x="18.2759%" y="85" width="0.3397%" height="15" fill="rgb(208,68,35)"/><text x="18.5259%" y="95.50"></text></g><g><title>is_copy_raw (511,528 samples, 0.26%)</title><rect x="18.3573%" y="69" width="0.2583%" height="15" fill="rgb(232,128,0)"/><text x="18.6073%" y="79.50"></text></g><g><title>evaluate_obligation (373,246 samples, 0.19%)</title><rect x="18.4271%" y="53" width="0.1885%" height="15" fill="rgb(207,160,47)"/><text x="18.6771%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (338,364 samples, 0.17%)</title><rect x="18.6904%" y="69" width="0.1708%" height="15" fill="rgb(228,23,34)"/><text x="18.9404%" y="79.50"></text></g><g><title>impl_parent (335,394 samples, 0.17%)</title><rect x="19.3005%" y="53" width="0.1693%" height="15" fill="rgb(218,30,26)"/><text x="19.5505%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (220,601 samples, 0.11%)</title><rect x="19.3584%" y="37" width="0.1114%" height="15" fill="rgb(220,122,19)"/><text x="19.6084%" y="47.50"></text></g><g><title>specialization_graph_of (1,650,668 samples, 0.83%)</title><rect x="18.8804%" y="69" width="0.8335%" height="15" fill="rgb(250,228,42)"/><text x="19.1304%" y="79.50"></text></g><g><title>impl_trait_ref (483,215 samples, 0.24%)</title><rect x="19.4698%" y="53" width="0.2440%" height="15" fill="rgb(240,193,28)"/><text x="19.7198%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (361,442 samples, 0.18%)</title><rect x="19.5313%" y="37" width="0.1825%" height="15" fill="rgb(216,20,37)"/><text x="19.7813%" y="47.50"></text></g><g><title>resolve_instance (2,216,404 samples, 1.12%)</title><rect x="18.6156%" y="85" width="1.1191%" height="15" fill="rgb(206,188,39)"/><text x="18.8656%" y="95.50"></text></g><g><title>thir_body (363,264 samples, 0.18%)</title><rect x="19.7432%" y="85" width="0.1834%" height="15" fill="rgb(217,207,13)"/><text x="19.9932%" y="95.50"></text></g><g><title>mir_const (5,483,313 samples, 2.77%)</title><rect x="17.1634%" y="133" width="2.7686%" height="15" fill="rgb(231,73,38)"/><text x="17.4134%" y="143.50">mi..</text></g><g><title>unsafety_check_result (4,888,434 samples, 2.47%)</title><rect x="17.4637%" y="117" width="2.4683%" height="15" fill="rgb(225,20,46)"/><text x="17.7137%" y="127.50">un..</text></g><g><title>mir_built (4,496,948 samples, 2.27%)</title><rect x="17.6614%" y="101" width="2.2706%" height="15" fill="rgb(210,31,41)"/><text x="17.9114%" y="111.50">m..</text></g><g><title>mir_promoted (5,986,454 samples, 3.02%)</title><rect x="16.9245%" y="149" width="3.0227%" height="15" fill="rgb(221,200,47)"/><text x="17.1745%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (1,239,290 samples, 0.63%)</title><rect x="19.9472%" y="149" width="0.6257%" height="15" fill="rgb(226,26,5)"/><text x="20.1972%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,745,089 samples, 0.88%)</title><rect x="20.6034%" y="149" width="0.8811%" height="15" fill="rgb(249,33,26)"/><text x="20.8534%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,957,156 samples, 8.06%)</title><rect x="13.4353%" y="181" width="8.0571%" height="15" fill="rgb(235,183,28)"/><text x="13.6853%" y="191.50">MIR_borrow_..</text></g><g><title>mir_borrowck (15,884,415 samples, 8.02%)</title><rect x="13.4720%" y="165" width="8.0204%" height="15" fill="rgb(221,5,38)"/><text x="13.7220%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (281,803 samples, 0.14%)</title><rect x="21.5006%" y="181" width="0.1423%" height="15" fill="rgb(247,18,42)"/><text x="21.7506%" y="191.50"></text></g><g><title>should_inherit_track_caller (315,134 samples, 0.16%)</title><rect x="21.9554%" y="133" width="0.1591%" height="15" fill="rgb(241,131,45)"/><text x="22.2054%" y="143.50"></text></g><g><title>codegen_fn_attrs (619,076 samples, 0.31%)</title><rect x="21.8171%" y="149" width="0.3126%" height="15" fill="rgb(249,31,29)"/><text x="22.0671%" y="159.50"></text></g><g><title>check_mod_attrs (929,391 samples, 0.47%)</title><rect x="21.6607%" y="165" width="0.4693%" height="15" fill="rgb(225,111,53)"/><text x="21.9107%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (539,536 samples, 0.27%)</title><rect x="22.2514%" y="165" width="0.2724%" height="15" fill="rgb(238,160,17)"/><text x="22.5014%" y="175.50"></text></g><g><title>misc_checking_1 (1,819,460 samples, 0.92%)</title><rect x="21.6431%" y="181" width="0.9187%" height="15" fill="rgb(214,148,48)"/><text x="21.8931%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (254,663 samples, 0.13%)</title><rect x="22.5626%" y="165" width="0.1286%" height="15" fill="rgb(232,36,49)"/><text x="22.8126%" y="175.50"></text></g><g><title>check_mod_liveness (212,242 samples, 0.11%)</title><rect x="22.5841%" y="149" width="0.1072%" height="15" fill="rgb(209,103,24)"/><text x="22.8341%" y="159.50"></text></g><g><title>misc_checking_2 (443,655 samples, 0.22%)</title><rect x="22.5618%" y="181" width="0.2240%" height="15" fill="rgb(229,88,8)"/><text x="22.8118%" y="191.50"></text></g><g><title>death_checking (250,393 samples, 0.13%)</title><rect x="22.8612%" y="165" width="0.1264%" height="15" fill="rgb(213,181,19)"/><text x="23.1112%" y="175.50"></text></g><g><title>crate_lints (1,746,580 samples, 0.88%)</title><rect x="22.9884%" y="149" width="0.8819%" height="15" fill="rgb(254,191,54)"/><text x="23.2384%" y="159.50"></text></g><g><title>type_of (1,022,260 samples, 0.52%)</title><rect x="23.3541%" y="133" width="0.5162%" height="15" fill="rgb(241,83,37)"/><text x="23.6041%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (789,816 samples, 0.40%)</title><rect x="23.4715%" y="117" width="0.3988%" height="15" fill="rgb(233,36,39)"/><text x="23.7215%" y="127.50"></text></g><g><title>lint_checking (1,902,712 samples, 0.96%)</title><rect x="22.9876%" y="165" width="0.9607%" height="15" fill="rgb(226,3,54)"/><text x="23.2376%" y="175.50"></text></g><g><title>privacy_checking_modules (603,886 samples, 0.30%)</title><rect x="24.0357%" y="165" width="0.3049%" height="15" fill="rgb(245,192,40)"/><text x="24.2857%" y="175.50"></text></g><g><title>check_mod_privacy (601,286 samples, 0.30%)</title><rect x="24.0370%" y="149" width="0.3036%" height="15" fill="rgb(238,167,29)"/><text x="24.2870%" y="159.50"></text></g><g><title>misc_checking_3 (3,096,314 samples, 1.56%)</title><rect x="22.7858%" y="181" width="1.5634%" height="15" fill="rgb(232,182,51)"/><text x="23.0358%" y="191.50"></text></g><g><title>adt_destructor (318,393 samples, 0.16%)</title><rect x="24.4108%" y="133" width="0.1608%" height="15" fill="rgb(231,60,39)"/><text x="24.6608%" y="143.50"></text></g><g><title>coherent_trait (309,083 samples, 0.16%)</title><rect x="24.4155%" y="117" width="0.1561%" height="15" fill="rgb(208,69,12)"/><text x="24.6655%" y="127.50"></text></g><g><title>specialization_graph_of (307,433 samples, 0.16%)</title><rect x="24.4163%" y="101" width="0.1552%" height="15" fill="rgb(235,93,37)"/><text x="24.6663%" y="111.50"></text></g><g><title>evaluate_obligation (693,417 samples, 0.35%)</title><rect x="24.8228%" y="117" width="0.3501%" height="15" fill="rgb(213,116,39)"/><text x="25.0728%" y="127.50"></text></g><g><title>layout_of (295,186 samples, 0.15%)</title><rect x="25.4571%" y="85" width="0.1490%" height="15" fill="rgb(222,207,29)"/><text x="25.7071%" y="95.50"></text></g><g><title>layout_of (617,749 samples, 0.31%)</title><rect x="25.3237%" y="101" width="0.3119%" height="15" fill="rgb(206,96,30)"/><text x="25.5737%" y="111.50"></text></g><g><title>layout_of (1,022,902 samples, 0.52%)</title><rect x="25.1875%" y="117" width="0.5165%" height="15" fill="rgb(218,138,4)"/><text x="25.4375%" y="127.50"></text></g><g><title>object_safety_violations (2,430,077 samples, 1.23%)</title><rect x="24.5898%" y="133" width="1.2270%" height="15" fill="rgb(250,191,14)"/><text x="24.8398%" y="143.50"></text></g><g><title>impl_parent (1,863,158 samples, 0.94%)</title><rect x="27.4832%" y="117" width="0.9408%" height="15" fill="rgb(239,60,40)"/><text x="27.7332%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,112,044 samples, 0.56%)</title><rect x="27.8625%" y="101" width="0.5615%" height="15" fill="rgb(206,27,48)"/><text x="28.1125%" y="111.50"></text></g><g><title>impl_trait_ref (5,292,517 samples, 2.67%)</title><rect x="28.4240%" y="117" width="2.6723%" height="15" fill="rgb(225,35,8)"/><text x="28.6740%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,528,254 samples, 2.29%)</title><rect x="28.8098%" y="101" width="2.2864%" height="15" fill="rgb(250,213,24)"/><text x="29.0598%" y="111.50">m..</text></g><g><title>coherent_trait (14,029,665 samples, 7.08%)</title><rect x="24.3825%" y="149" width="7.0839%" height="15" fill="rgb(247,123,22)"/><text x="24.6325%" y="159.50">coherent_t..</text></g><g><title>specialization_graph_of (11,180,323 samples, 5.65%)</title><rect x="25.8212%" y="133" width="5.6452%" height="15" fill="rgb(231,138,38)"/><text x="26.0712%" y="143.50">special..</text></g><g><title>trait_impls_of (733,018 samples, 0.37%)</title><rect x="31.0963%" y="117" width="0.3701%" height="15" fill="rgb(231,145,46)"/><text x="31.3463%" y="127.50"></text></g><g><title>coherence_checking (14,146,906 samples, 7.14%)</title><rect x="24.3699%" y="165" width="7.1431%" height="15" fill="rgb(251,118,11)"/><text x="24.6199%" y="175.50">coherence_..</text></g><g><title>associated_item (221,572 samples, 0.11%)</title><rect x="37.1346%" y="101" width="0.1119%" height="15" fill="rgb(217,147,25)"/><text x="37.3846%" y="111.50"></text></g><g><title>associated_items (367,642 samples, 0.19%)</title><rect x="37.0750%" y="117" width="0.1856%" height="15" fill="rgb(247,81,37)"/><text x="37.3250%" y="127.50"></text></g><g><title>adt_dtorck_constraint (228,604 samples, 0.12%)</title><rect x="37.6363%" y="85" width="0.1154%" height="15" fill="rgb(209,12,38)"/><text x="37.8863%" y="95.50"></text></g><g><title>dropck_outlives (981,201 samples, 0.50%)</title><rect x="37.2726%" y="117" width="0.4954%" height="15" fill="rgb(227,1,9)"/><text x="37.5226%" y="127.50"></text></g><g><title>adt_dtorck_constraint (345,456 samples, 0.17%)</title><rect x="37.5936%" y="101" width="0.1744%" height="15" fill="rgb(248,47,43)"/><text x="37.8436%" y="111.50"></text></g><g><title>evaluate_obligation (645,773 samples, 0.33%)</title><rect x="37.7680%" y="117" width="0.3261%" height="15" fill="rgb(221,10,30)"/><text x="38.0180%" y="127.50"></text></g><g><title>method_autoderef_steps (408,895 samples, 0.21%)</title><rect x="38.2733%" y="117" width="0.2065%" height="15" fill="rgb(210,229,1)"/><text x="38.5233%" y="127.50"></text></g><g><title>predicates_of (212,403 samples, 0.11%)</title><rect x="38.5270%" y="117" width="0.1072%" height="15" fill="rgb(222,148,37)"/><text x="38.7770%" y="127.50"></text></g><g><title>item_bodies_checking (14,174,386 samples, 7.16%)</title><rect x="31.5392%" y="165" width="7.1570%" height="15" fill="rgb(234,67,33)"/><text x="31.7892%" y="175.50">item_bodie..</text></g><g><title>typeck_item_bodies (14,172,046 samples, 7.16%)</title><rect x="31.5404%" y="149" width="7.1558%" height="15" fill="rgb(247,98,35)"/><text x="31.7904%" y="159.50">typeck_ite..</text></g><g><title>typeck (14,115,406 samples, 7.13%)</title><rect x="31.5690%" y="133" width="7.1272%" height="15" fill="rgb(247,138,52)"/><text x="31.8190%" y="143.50">typeck</text></g><g><title>item_types_checking (321,474 samples, 0.16%)</title><rect x="38.6962%" y="165" width="0.1623%" height="15" fill="rgb(213,79,30)"/><text x="38.9462%" y="175.50"></text></g><g><title>check_mod_item_types (318,794 samples, 0.16%)</title><rect x="38.6975%" y="149" width="0.1610%" height="15" fill="rgb(246,177,23)"/><text x="38.9475%" y="159.50"></text></g><g><title>fn_sig (680,727 samples, 0.34%)</title><rect x="39.0865%" y="133" width="0.3437%" height="15" fill="rgb(230,62,27)"/><text x="39.3365%" y="143.50"></text></g><g><title>named_region_map (641,786 samples, 0.32%)</title><rect x="39.5357%" y="117" width="0.3241%" height="15" fill="rgb(216,154,8)"/><text x="39.7857%" y="127.50"></text></g><g><title>resolve_lifetimes (606,906 samples, 0.31%)</title><rect x="39.5533%" y="101" width="0.3064%" height="15" fill="rgb(244,35,45)"/><text x="39.8033%" y="111.50"></text></g><g><title>lint_levels (335,034 samples, 0.17%)</title><rect x="39.6906%" y="85" width="0.1692%" height="15" fill="rgb(251,115,12)"/><text x="39.9406%" y="95.50"></text></g><g><title>generics_of (886,999 samples, 0.45%)</title><rect x="39.4302%" y="133" width="0.4479%" height="15" fill="rgb(240,54,50)"/><text x="39.6802%" y="143.50"></text></g><g><title>explicit_predicates_of (536,159 samples, 0.27%)</title><rect x="40.0207%" y="101" width="0.2707%" height="15" fill="rgb(233,84,52)"/><text x="40.2707%" y="111.50"></text></g><g><title>predicates_of (879,535 samples, 0.44%)</title><rect x="39.9100%" y="133" width="0.4441%" height="15" fill="rgb(207,117,47)"/><text x="40.1600%" y="143.50"></text></g><g><title>predicates_defined_on (791,224 samples, 0.40%)</title><rect x="39.9546%" y="117" width="0.3995%" height="15" fill="rgb(249,43,39)"/><text x="40.2046%" y="127.50"></text></g><g><title>super_predicates_of (258,882 samples, 0.13%)</title><rect x="40.3541%" y="133" width="0.1307%" height="15" fill="rgb(209,38,44)"/><text x="40.6041%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (239,202 samples, 0.12%)</title><rect x="40.3641%" y="117" width="0.1208%" height="15" fill="rgb(236,212,23)"/><text x="40.6141%" y="127.50"></text></g><g><title>type_collecting (4,179,526 samples, 2.11%)</title><rect x="38.8593%" y="165" width="2.1103%" height="15" fill="rgb(242,79,21)"/><text x="39.1093%" y="175.50">t..</text></g><g><title>collect_mod_item_types (4,165,676 samples, 2.10%)</title><rect x="38.8662%" y="149" width="2.1033%" height="15" fill="rgb(211,96,35)"/><text x="39.1162%" y="159.50">c..</text></g><g><title>type_of (947,130 samples, 0.48%)</title><rect x="40.4914%" y="133" width="0.4782%" height="15" fill="rgb(253,215,40)"/><text x="40.7414%" y="143.50"></text></g><g><title>late_bound_vars_map (332,402 samples, 0.17%)</title><rect x="40.8018%" y="117" width="0.1678%" height="15" fill="rgb(211,81,21)"/><text x="41.0518%" y="127.50"></text></g><g><title>resolve_lifetimes (319,032 samples, 0.16%)</title><rect x="40.8085%" y="101" width="0.1611%" height="15" fill="rgb(208,190,38)"/><text x="41.0585%" y="111.50"></text></g><g><title>evaluate_obligation (1,071,750 samples, 0.54%)</title><rect x="42.3211%" y="133" width="0.5412%" height="15" fill="rgb(235,213,38)"/><text x="42.5711%" y="143.50"></text></g><g><title>implied_outlives_bounds (551,036 samples, 0.28%)</title><rect x="42.8623%" y="133" width="0.2782%" height="15" fill="rgb(237,122,38)"/><text x="43.1123%" y="143.50"></text></g><g><title>param_env (335,226 samples, 0.17%)</title><rect x="43.1405%" y="133" width="0.1693%" height="15" fill="rgb(244,218,35)"/><text x="43.3905%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,632,643 samples, 2.34%)</title><rect x="41.0515%" y="149" width="2.3391%" height="15" fill="rgb(240,68,47)"/><text x="41.3015%" y="159.50">c..</text></g><g><title>evaluate_obligation (413,314 samples, 0.21%)</title><rect x="43.9755%" y="133" width="0.2087%" height="15" fill="rgb(210,16,53)"/><text x="44.2255%" y="143.50"></text></g><g><title>check_item_well_formed (2,084,228 samples, 1.05%)</title><rect x="43.3906%" y="149" width="1.0524%" height="15" fill="rgb(235,124,12)"/><text x="43.6406%" y="159.50"></text></g><g><title>evaluate_obligation (354,084 samples, 0.18%)</title><rect x="44.8107%" y="133" width="0.1788%" height="15" fill="rgb(224,169,11)"/><text x="45.0607%" y="143.50"></text></g><g><title>analysis (63,221,427 samples, 31.92%)</title><rect x="13.2363%" y="197" width="31.9219%" height="15" fill="rgb(250,166,2)"/><text x="13.4863%" y="207.50">analysis</text></g><g><title>type_check_crate (41,212,334 samples, 20.81%)</title><rect x="24.3492%" y="181" width="20.8090%" height="15" fill="rgb(242,216,29)"/><text x="24.5992%" y="191.50">type_check_crate</text></g><g><title>wf_checking (8,292,281 samples, 4.19%)</title><rect x="40.9713%" y="165" width="4.1870%" height="15" fill="rgb(230,116,27)"/><text x="41.2213%" y="175.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,416,497 samples, 0.72%)</title><rect x="44.4430%" y="149" width="0.7152%" height="15" fill="rgb(228,99,48)"/><text x="44.6930%" y="159.50"></text></g><g><title>fn_abi_of_instance (736,342 samples, 0.37%)</title><rect x="46.2301%" y="165" width="0.3718%" height="15" fill="rgb(253,11,6)"/><text x="46.4801%" y="175.50"></text></g><g><title>codegen_module (2,544,557 samples, 1.28%)</title><rect x="45.4349%" y="181" width="1.2848%" height="15" fill="rgb(247,143,39)"/><text x="45.6849%" y="191.50"></text></g><g><title>optimized_mir (705,257 samples, 0.36%)</title><rect x="46.8555%" y="133" width="0.3561%" height="15" fill="rgb(236,97,10)"/><text x="47.1055%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (1,199,463 samples, 0.61%)</title><rect x="46.7331%" y="149" width="0.6056%" height="15" fill="rgb(233,208,19)"/><text x="46.9831%" y="159.50"></text></g><g><title>monomorphization_collector (1,221,523 samples, 0.62%)</title><rect x="46.7320%" y="165" width="0.6168%" height="15" fill="rgb(216,164,2)"/><text x="46.9820%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,372,576 samples, 0.69%)</title><rect x="46.7202%" y="181" width="0.6930%" height="15" fill="rgb(220,129,5)"/><text x="46.9702%" y="191.50"></text></g><g><title>codegen_crate (4,506,540 samples, 2.28%)</title><rect x="45.1699%" y="197" width="2.2755%" height="15" fill="rgb(242,17,10)"/><text x="45.4199%" y="207.50">c..</text></g><g><title>codegen_module_optimize (16,445,162 samples, 8.30%)</title><rect x="47.4454%" y="197" width="8.3035%" height="15" fill="rgb(242,107,0)"/><text x="47.6954%" y="207.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (14,467,230 samples, 7.30%)</title><rect x="48.4441%" y="181" width="7.3048%" height="15" fill="rgb(251,28,31)"/><text x="48.6941%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_lto_optimize (6,248,419 samples, 3.15%)</title><rect x="56.4336%" y="181" width="3.1550%" height="15" fill="rgb(233,223,10)"/><text x="56.6836%" y="191.50">LLV..</text></g><g><title>LLVM_module_codegen (15,919,515 samples, 8.04%)</title><rect x="59.5886%" y="181" width="8.0381%" height="15" fill="rgb(215,21,27)"/><text x="59.8386%" y="191.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (15,667,793 samples, 7.91%)</title><rect x="59.7157%" y="165" width="7.9110%" height="15" fill="rgb(232,23,21)"/><text x="59.9657%" y="175.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (386,655 samples, 0.20%)</title><rect x="67.6267%" y="181" width="0.1952%" height="15" fill="rgb(244,5,23)"/><text x="67.8767%" y="191.50"></text></g><g><title>codegen_module_perform_lto (24,009,305 samples, 12.12%)</title><rect x="55.7489%" y="197" width="12.1228%" height="15" fill="rgb(226,81,46)"/><text x="55.9989%" y="207.50">codegen_module_per..</text></g><g><title>AST_validation (377,734 samples, 0.19%)</title><rect x="67.9939%" y="181" width="0.1907%" height="15" fill="rgb(247,70,30)"/><text x="68.2439%" y="191.50"></text></g><g><title>macro_expand_crate (19,143,251 samples, 9.67%)</title><rect x="68.2729%" y="181" width="9.6659%" height="15" fill="rgb(212,68,19)"/><text x="68.5229%" y="191.50">macro_expand_c..</text></g><g><title>expand_crate (19,125,411 samples, 9.66%)</title><rect x="68.2819%" y="165" width="9.6569%" height="15" fill="rgb(240,187,13)"/><text x="68.5319%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,669,649 samples, 1.35%)</title><rect x="76.5908%" y="149" width="1.3480%" height="15" fill="rgb(223,113,26)"/><text x="76.8408%" y="159.50"></text></g><g><title>metadata_register_crate (961,969 samples, 0.49%)</title><rect x="77.4531%" y="133" width="0.4857%" height="15" fill="rgb(206,192,2)"/><text x="77.7031%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (224,832 samples, 0.11%)</title><rect x="77.9412%" y="181" width="0.1135%" height="15" fill="rgb(241,108,4)"/><text x="78.1912%" y="191.50"></text></g><g><title>finalize_macro_resolutions (221,322 samples, 0.11%)</title><rect x="78.1012%" y="165" width="0.1118%" height="15" fill="rgb(247,173,49)"/><text x="78.3512%" y="175.50"></text></g><g><title>late_resolve_crate (1,960,712 samples, 0.99%)</title><rect x="78.2129%" y="165" width="0.9900%" height="15" fill="rgb(224,114,35)"/><text x="78.4629%" y="175.50"></text></g><g><title>configure_and_expand (22,631,639 samples, 11.43%)</title><rect x="67.8718%" y="197" width="11.4272%" height="15" fill="rgb(245,159,27)"/><text x="68.1218%" y="207.50">configure_and_exp..</text></g><g><title>resolve_crate (2,464,197 samples, 1.24%)</title><rect x="78.0548%" y="181" width="1.2442%" height="15" fill="rgb(245,172,44)"/><text x="78.3048%" y="191.50"></text></g><g><title>drop_ast (253,213 samples, 0.13%)</title><rect x="79.2990%" y="197" width="0.1279%" height="15" fill="rgb(236,23,11)"/><text x="79.5490%" y="207.50"></text></g><g><title>early_lint_checks (572,317 samples, 0.29%)</title><rect x="79.4344%" y="197" width="0.2890%" height="15" fill="rgb(205,117,38)"/><text x="79.6844%" y="207.50"></text></g><g><title>free_global_ctxt (3,654,871 samples, 1.85%)</title><rect x="79.7234%" y="197" width="1.8454%" height="15" fill="rgb(237,72,25)"/><text x="79.9734%" y="207.50">f..</text></g><g><title>layout_of (483,637 samples, 0.24%)</title><rect x="83.2191%" y="149" width="0.2442%" height="15" fill="rgb(244,70,9)"/><text x="83.4691%" y="159.50"></text></g><g><title>layout_of (304,786 samples, 0.15%)</title><rect x="83.3094%" y="133" width="0.1539%" height="15" fill="rgb(217,125,39)"/><text x="83.5594%" y="143.50"></text></g><g><title>layout_of (890,049 samples, 0.45%)</title><rect x="83.0231%" y="165" width="0.4494%" height="15" fill="rgb(235,36,10)"/><text x="83.2731%" y="175.50"></text></g><g><title>needs_drop_raw (302,072 samples, 0.15%)</title><rect x="84.2188%" y="149" width="0.1525%" height="15" fill="rgb(251,123,47)"/><text x="84.4688%" y="159.50"></text></g><g><title>is_copy_raw (265,562 samples, 0.13%)</title><rect x="84.2372%" y="133" width="0.1341%" height="15" fill="rgb(221,13,13)"/><text x="84.4872%" y="143.50"></text></g><g><title>optimized_mir (4,172,457 samples, 2.11%)</title><rect x="82.2792%" y="181" width="2.1068%" height="15" fill="rgb(238,131,9)"/><text x="82.5292%" y="191.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,809,079 samples, 0.91%)</title><rect x="83.4725%" y="165" width="0.9134%" height="15" fill="rgb(211,50,8)"/><text x="83.7225%" y="175.50"></text></g><g><title>generate_crate_metadata (5,624,382 samples, 2.84%)</title><rect x="81.5688%" y="197" width="2.8399%" height="15" fill="rgb(245,182,24)"/><text x="81.8188%" y="207.50">ge..</text></g><g><title>hir_lowering (4,792,953 samples, 2.42%)</title><rect x="84.4087%" y="197" width="2.4201%" height="15" fill="rgb(242,14,37)"/><text x="84.6587%" y="207.50">hi..</text></g><g><title>finish_ongoing_codegen (20,417,465 samples, 10.31%)</title><rect x="86.8376%" y="181" width="10.3092%" height="15" fill="rgb(246,228,12)"/><text x="87.0876%" y="191.50">finish_ongoing_..</text></g><g><title>link_crate (765,669 samples, 0.39%)</title><rect x="97.1469%" y="181" width="0.3866%" height="15" fill="rgb(213,55,15)"/><text x="97.3969%" y="191.50"></text></g><g><title>link_binary (754,759 samples, 0.38%)</title><rect x="97.1524%" y="165" width="0.3811%" height="15" fill="rgb(209,9,3)"/><text x="97.4024%" y="175.50"></text></g><g><title>link_rlib (488,515 samples, 0.25%)</title><rect x="97.2868%" y="149" width="0.2467%" height="15" fill="rgb(230,59,30)"/><text x="97.5368%" y="159.50"></text></g><g><title>link (21,209,694 samples, 10.71%)</title><rect x="86.8287%" y="197" width="10.7093%" height="15" fill="rgb(209,121,21)"/><text x="87.0787%" y="207.50">link</text></g><g><title>parse_crate (3,259,556 samples, 1.65%)</title><rect x="97.5380%" y="197" width="1.6458%" height="15" fill="rgb(220,109,13)"/><text x="97.7880%" y="207.50"></text></g><g><title>prepare_outputs (360,974 samples, 0.18%)</title><rect x="99.1893%" y="197" width="0.1823%" height="15" fill="rgb(232,18,1)"/><text x="99.4393%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (745,148 samples, 0.38%)</title><rect x="99.3715%" y="197" width="0.3762%" height="15" fill="rgb(215,41,42)"/><text x="99.6215%" y="207.50"></text></g><g><title>all (198,050,135 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (198,050,135 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (356,853 samples, 0.18%)</title><rect x="99.8198%" y="197" width="0.1802%" height="15" fill="rgb(205,98,50)"/><text x="100.0698%" y="207.50"></text></g></svg></svg>