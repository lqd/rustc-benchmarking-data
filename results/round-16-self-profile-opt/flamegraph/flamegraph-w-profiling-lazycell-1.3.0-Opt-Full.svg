<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,451,151 samples, 7.29%)</title><rect x="1.0745%" y="181" width="7.2922%" height="15" fill="rgb(227,0,7)"/><text x="1.3245%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (122,261 samples, 0.16%)</title><rect x="8.2032%" y="165" width="0.1636%" height="15" fill="rgb(217,0,24)"/><text x="8.4532%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (106,531 samples, 0.14%)</title><rect x="8.2242%" y="149" width="0.1425%" height="15" fill="rgb(221,193,54)"/><text x="8.4742%" y="159.50"></text></g><g><title>param_env (139,912 samples, 0.19%)</title><rect x="15.4351%" y="101" width="0.1872%" height="15" fill="rgb(248,212,6)"/><text x="15.6851%" y="111.50"></text></g><g><title>item_attrs (161,811 samples, 0.22%)</title><rect x="15.9421%" y="69" width="0.2165%" height="15" fill="rgb(208,68,35)"/><text x="16.1921%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,371 samples, 0.21%)</title><rect x="15.9493%" y="53" width="0.2092%" height="15" fill="rgb(232,128,0)"/><text x="16.1993%" y="63.50"></text></g><g><title>codegen_fn_attrs (230,522 samples, 0.31%)</title><rect x="15.8629%" y="85" width="0.3084%" height="15" fill="rgb(207,160,47)"/><text x="16.1129%" y="95.50"></text></g><g><title>adt_drop_tys (81,850 samples, 0.11%)</title><rect x="17.6780%" y="53" width="0.1095%" height="15" fill="rgb(228,23,34)"/><text x="17.9280%" y="63.50"></text></g><g><title>needs_drop_raw (562,198 samples, 0.75%)</title><rect x="17.6112%" y="69" width="0.7521%" height="15" fill="rgb(218,30,26)"/><text x="17.8612%" y="79.50"></text></g><g><title>is_copy_raw (430,418 samples, 0.58%)</title><rect x="17.7875%" y="53" width="0.5758%" height="15" fill="rgb(220,122,19)"/><text x="18.0375%" y="63.50"></text></g><g><title>evaluate_obligation (373,637 samples, 0.50%)</title><rect x="17.8635%" y="37" width="0.4998%" height="15" fill="rgb(250,228,42)"/><text x="18.1135%" y="47.50"></text></g><g><title>resolve_instance (183,931 samples, 0.25%)</title><rect x="18.3633%" y="69" width="0.2461%" height="15" fill="rgb(240,193,28)"/><text x="18.6133%" y="79.50"></text></g><g><title>thir_body (405,861 samples, 0.54%)</title><rect x="18.6236%" y="69" width="0.5429%" height="15" fill="rgb(216,20,37)"/><text x="18.8736%" y="79.50"></text></g><g><title>mir_const (3,148,444 samples, 4.21%)</title><rect x="14.9631%" y="117" width="4.2118%" height="15" fill="rgb(206,188,39)"/><text x="15.2131%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (2,655,705 samples, 3.55%)</title><rect x="15.6223%" y="101" width="3.5526%" height="15" fill="rgb(217,207,13)"/><text x="15.8723%" y="111.50">unsa..</text></g><g><title>mir_built (2,245,282 samples, 3.00%)</title><rect x="16.1713%" y="85" width="3.0036%" height="15" fill="rgb(231,73,38)"/><text x="16.4213%" y="95.50">mir..</text></g><g><title>has_structural_eq_impls (110,621 samples, 0.15%)</title><rect x="19.3465%" y="101" width="0.1480%" height="15" fill="rgb(225,20,46)"/><text x="19.5965%" y="111.50"></text></g><g><title>mir_const (86,841 samples, 0.12%)</title><rect x="19.5600%" y="101" width="0.1162%" height="15" fill="rgb(210,31,41)"/><text x="19.8100%" y="111.50"></text></g><g><title>mir_promoted (3,864,363 samples, 5.17%)</title><rect x="14.5334%" y="133" width="5.1695%" height="15" fill="rgb(221,200,47)"/><text x="14.7834%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (394,714 samples, 0.53%)</title><rect x="19.1749%" y="117" width="0.5280%" height="15" fill="rgb(226,26,5)"/><text x="19.4249%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (214,543 samples, 0.29%)</title><rect x="19.7034%" y="133" width="0.2870%" height="15" fill="rgb(249,33,26)"/><text x="19.9534%" y="143.50"></text></g><g><title>type_op_prove_predicate (809,741 samples, 1.08%)</title><rect x="20.1051%" y="133" width="1.0832%" height="15" fill="rgb(235,183,28)"/><text x="20.3551%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,355,496 samples, 12.52%)</title><rect x="8.6759%" y="165" width="12.5152%" height="15" fill="rgb(221,5,38)"/><text x="8.9259%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,306,904 samples, 12.45%)</title><rect x="8.7409%" y="149" width="12.4502%" height="15" fill="rgb(247,18,42)"/><text x="8.9909%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (155,411 samples, 0.21%)</title><rect x="21.1910%" y="165" width="0.2079%" height="15" fill="rgb(241,131,45)"/><text x="21.4410%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (118,471 samples, 0.16%)</title><rect x="21.2405%" y="149" width="0.1585%" height="15" fill="rgb(249,31,29)"/><text x="21.4905%" y="159.50"></text></g><g><title>hir_module_items (156,141 samples, 0.21%)</title><rect x="21.3989%" y="165" width="0.2089%" height="15" fill="rgb(225,111,53)"/><text x="21.6489%" y="175.50"></text></g><g><title>codegen_fn_attrs (184,832 samples, 0.25%)</title><rect x="22.0686%" y="101" width="0.2473%" height="15" fill="rgb(238,160,17)"/><text x="22.3186%" y="111.50"></text></g><g><title>codegen_fn_attrs (340,834 samples, 0.46%)</title><rect x="21.8673%" y="133" width="0.4559%" height="15" fill="rgb(214,148,48)"/><text x="22.1173%" y="143.50"></text></g><g><title>should_inherit_track_caller (291,463 samples, 0.39%)</title><rect x="21.9334%" y="117" width="0.3899%" height="15" fill="rgb(232,36,49)"/><text x="22.1834%" y="127.50"></text></g><g><title>check_mod_attrs (512,895 samples, 0.69%)</title><rect x="21.6377%" y="149" width="0.6861%" height="15" fill="rgb(209,103,24)"/><text x="21.8877%" y="159.50"></text></g><g><title>lookup_deprecation_entry (85,221 samples, 0.11%)</title><rect x="22.5822%" y="133" width="0.1140%" height="15" fill="rgb(229,88,8)"/><text x="22.8322%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (222,752 samples, 0.30%)</title><rect x="22.4699%" y="149" width="0.2980%" height="15" fill="rgb(213,181,19)"/><text x="22.7199%" y="159.50"></text></g><g><title>misc_checking_1 (907,470 samples, 1.21%)</title><rect x="21.6084%" y="165" width="1.2140%" height="15" fill="rgb(254,191,54)"/><text x="21.8584%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (172,082 samples, 0.23%)</title><rect x="22.8249%" y="149" width="0.2302%" height="15" fill="rgb(241,83,37)"/><text x="23.0749%" y="159.50"></text></g><g><title>check_mod_liveness (133,751 samples, 0.18%)</title><rect x="22.8762%" y="133" width="0.1789%" height="15" fill="rgb(233,36,39)"/><text x="23.1262%" y="143.50"></text></g><g><title>mir_borrowck (384,515 samples, 0.51%)</title><rect x="23.7382%" y="37" width="0.5144%" height="15" fill="rgb(226,3,54)"/><text x="23.9882%" y="47.50"></text></g><g><title>eval_to_const_value_raw (669,058 samples, 0.90%)</title><rect x="23.3600%" y="117" width="0.8950%" height="15" fill="rgb(245,192,40)"/><text x="23.6100%" y="127.50"></text></g><g><title>eval_to_const_value_raw (658,548 samples, 0.88%)</title><rect x="23.3741%" y="101" width="0.8810%" height="15" fill="rgb(238,167,29)"/><text x="23.6241%" y="111.50"></text></g><g><title>eval_to_allocation_raw (650,897 samples, 0.87%)</title><rect x="23.3843%" y="85" width="0.8707%" height="15" fill="rgb(232,182,51)"/><text x="23.6343%" y="95.50"></text></g><g><title>mir_for_ctfe (535,786 samples, 0.72%)</title><rect x="23.5383%" y="69" width="0.7167%" height="15" fill="rgb(231,60,39)"/><text x="23.7883%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (493,186 samples, 0.66%)</title><rect x="23.5953%" y="53" width="0.6598%" height="15" fill="rgb(208,69,12)"/><text x="23.8453%" y="63.50"></text></g><g><title>mir_const_qualif (198,172 samples, 0.27%)</title><rect x="24.2641%" y="117" width="0.2651%" height="15" fill="rgb(235,93,37)"/><text x="24.5141%" y="127.50"></text></g><g><title>mir_const (149,282 samples, 0.20%)</title><rect x="24.3295%" y="101" width="0.1997%" height="15" fill="rgb(213,116,39)"/><text x="24.5795%" y="111.50"></text></g><g><title>unsafety_check_result (102,511 samples, 0.14%)</title><rect x="24.3920%" y="85" width="0.1371%" height="15" fill="rgb(222,207,29)"/><text x="24.6420%" y="95.50"></text></g><g><title>misc_checking_2 (1,301,735 samples, 1.74%)</title><rect x="22.8223%" y="165" width="1.7414%" height="15" fill="rgb(206,96,30)"/><text x="23.0723%" y="175.50"></text></g><g><title>match_checking (1,127,703 samples, 1.51%)</title><rect x="23.0551%" y="149" width="1.5086%" height="15" fill="rgb(218,138,4)"/><text x="23.3051%" y="159.50"></text></g><g><title>check_match (1,112,382 samples, 1.49%)</title><rect x="23.0756%" y="133" width="1.4881%" height="15" fill="rgb(250,191,14)"/><text x="23.3256%" y="143.50"></text></g><g><title>check_private_in_public (81,111 samples, 0.11%)</title><rect x="24.5758%" y="149" width="0.1085%" height="15" fill="rgb(239,60,40)"/><text x="24.8258%" y="159.50"></text></g><g><title>death_checking (158,831 samples, 0.21%)</title><rect x="24.6843%" y="149" width="0.2125%" height="15" fill="rgb(206,27,48)"/><text x="24.9343%" y="159.50"></text></g><g><title>crate_lints (693,698 samples, 0.93%)</title><rect x="24.8986%" y="133" width="0.9280%" height="15" fill="rgb(225,35,8)"/><text x="25.1486%" y="143.50"></text></g><g><title>type_of (314,013 samples, 0.42%)</title><rect x="25.4065%" y="117" width="0.4201%" height="15" fill="rgb(250,213,24)"/><text x="25.6565%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (232,333 samples, 0.31%)</title><rect x="25.5158%" y="101" width="0.3108%" height="15" fill="rgb(247,123,22)"/><text x="25.7658%" y="111.50"></text></g><g><title>lint_checking (828,210 samples, 1.11%)</title><rect x="24.8968%" y="149" width="1.1079%" height="15" fill="rgb(231,138,38)"/><text x="25.1468%" y="159.50"></text></g><g><title>module_lints (133,172 samples, 0.18%)</title><rect x="25.8266%" y="133" width="0.1781%" height="15" fill="rgb(231,145,46)"/><text x="26.0766%" y="143.50"></text></g><g><title>lint_mod (131,152 samples, 0.18%)</title><rect x="25.8293%" y="117" width="0.1754%" height="15" fill="rgb(251,118,11)"/><text x="26.0793%" y="127.50"></text></g><g><title>privacy_access_levels (103,372 samples, 0.14%)</title><rect x="26.0047%" y="149" width="0.1383%" height="15" fill="rgb(217,147,25)"/><text x="26.2547%" y="159.50"></text></g><g><title>privacy_checking_modules (272,963 samples, 0.37%)</title><rect x="26.1430%" y="149" width="0.3652%" height="15" fill="rgb(247,81,37)"/><text x="26.3930%" y="159.50"></text></g><g><title>check_mod_privacy (271,403 samples, 0.36%)</title><rect x="26.1451%" y="133" width="0.3631%" height="15" fill="rgb(209,12,38)"/><text x="26.3951%" y="143.50"></text></g><g><title>misc_checking_3 (1,463,777 samples, 1.96%)</title><rect x="24.5637%" y="165" width="1.9581%" height="15" fill="rgb(227,1,9)"/><text x="24.8137%" y="175.50">m..</text></g><g><title>impl_parent (466,624 samples, 0.62%)</title><rect x="27.5009%" y="101" width="0.6242%" height="15" fill="rgb(248,47,43)"/><text x="27.7509%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (294,514 samples, 0.39%)</title><rect x="27.7312%" y="85" width="0.3940%" height="15" fill="rgb(221,10,30)"/><text x="27.9812%" y="95.50"></text></g><g><title>impl_trait_ref (1,119,744 samples, 1.50%)</title><rect x="28.1251%" y="101" width="1.4979%" height="15" fill="rgb(210,229,1)"/><text x="28.3751%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (938,723 samples, 1.26%)</title><rect x="28.3673%" y="85" width="1.2558%" height="15" fill="rgb(222,148,37)"/><text x="28.6173%" y="95.50"></text></g><g><title>coherent_trait (2,412,178 samples, 3.23%)</title><rect x="26.5880%" y="133" width="3.2269%" height="15" fill="rgb(234,67,33)"/><text x="26.8380%" y="143.50">coh..</text></g><g><title>specialization_graph_of (2,403,118 samples, 3.21%)</title><rect x="26.6001%" y="117" width="3.2147%" height="15" fill="rgb(247,98,35)"/><text x="26.8501%" y="127.50">spe..</text></g><g><title>trait_impls_of (142,202 samples, 0.19%)</title><rect x="29.6246%" y="101" width="0.1902%" height="15" fill="rgb(247,138,52)"/><text x="29.8746%" y="111.50"></text></g><g><title>coherence_checking (2,471,888 samples, 3.31%)</title><rect x="26.5710%" y="149" width="3.3067%" height="15" fill="rgb(213,79,30)"/><text x="26.8210%" y="159.50">coh..</text></g><g><title>associated_item (203,633 samples, 0.27%)</title><rect x="40.2202%" y="85" width="0.2724%" height="15" fill="rgb(246,177,23)"/><text x="40.4702%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (160,992 samples, 0.22%)</title><rect x="40.2772%" y="69" width="0.2154%" height="15" fill="rgb(230,62,27)"/><text x="40.5272%" y="79.50"></text></g><g><title>associated_items (310,225 samples, 0.41%)</title><rect x="40.0958%" y="101" width="0.4150%" height="15" fill="rgb(216,154,8)"/><text x="40.3458%" y="111.50"></text></g><g><title>dropck_outlives (219,492 samples, 0.29%)</title><rect x="40.5537%" y="101" width="0.2936%" height="15" fill="rgb(244,35,45)"/><text x="40.8037%" y="111.50"></text></g><g><title>adt_dtorck_constraint (106,521 samples, 0.14%)</title><rect x="40.7049%" y="85" width="0.1425%" height="15" fill="rgb(251,115,12)"/><text x="40.9549%" y="95.50"></text></g><g><title>evaluate_obligation (341,133 samples, 0.46%)</title><rect x="40.8474%" y="101" width="0.4563%" height="15" fill="rgb(240,54,50)"/><text x="41.0974%" y="111.50"></text></g><g><title>trait_impls_of (77,491 samples, 0.10%)</title><rect x="41.2001%" y="85" width="0.1037%" height="15" fill="rgb(233,84,52)"/><text x="41.4501%" y="95.50"></text></g><g><title>fn_sig (82,240 samples, 0.11%)</title><rect x="41.3215%" y="101" width="0.1100%" height="15" fill="rgb(207,117,47)"/><text x="41.5715%" y="111.50"></text></g><g><title>item_attrs (95,621 samples, 0.13%)</title><rect x="41.6526%" y="101" width="0.1279%" height="15" fill="rgb(249,43,39)"/><text x="41.9026%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (90,991 samples, 0.12%)</title><rect x="41.6588%" y="85" width="0.1217%" height="15" fill="rgb(209,38,44)"/><text x="41.9088%" y="95.50"></text></g><g><title>method_autoderef_steps (237,712 samples, 0.32%)</title><rect x="41.8329%" y="101" width="0.3180%" height="15" fill="rgb(236,212,23)"/><text x="42.0829%" y="111.50"></text></g><g><title>evaluate_obligation (119,530 samples, 0.16%)</title><rect x="41.9910%" y="85" width="0.1599%" height="15" fill="rgb(242,79,21)"/><text x="42.2410%" y="95.50"></text></g><g><title>object_safety_violations (130,681 samples, 0.17%)</title><rect x="42.1509%" y="101" width="0.1748%" height="15" fill="rgb(211,96,35)"/><text x="42.4009%" y="111.50"></text></g><g><title>predicates_of (227,312 samples, 0.30%)</title><rect x="42.3632%" y="101" width="0.3041%" height="15" fill="rgb(253,215,40)"/><text x="42.6132%" y="111.50"></text></g><g><title>predicates_defined_on (157,171 samples, 0.21%)</title><rect x="42.4570%" y="85" width="0.2103%" height="15" fill="rgb(211,81,21)"/><text x="42.7070%" y="95.50"></text></g><g><title>typeck (701,088 samples, 0.94%)</title><rect x="42.7887%" y="101" width="0.9379%" height="15" fill="rgb(208,190,38)"/><text x="43.0387%" y="111.50"></text></g><g><title>item_bodies_checking (10,370,896 samples, 13.87%)</title><rect x="29.9035%" y="149" width="13.8735%" height="15" fill="rgb(235,213,38)"/><text x="30.1535%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (10,368,756 samples, 13.87%)</title><rect x="29.9063%" y="133" width="13.8706%" height="15" fill="rgb(237,122,38)"/><text x="30.1563%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (10,335,336 samples, 13.83%)</title><rect x="29.9511%" y="117" width="13.8259%" height="15" fill="rgb(244,218,35)"/><text x="30.2011%" y="127.50">typeck</text></g><g><title>adt_destructor (75,201 samples, 0.10%)</title><rect x="44.0360%" y="117" width="0.1006%" height="15" fill="rgb(240,68,47)"/><text x="44.2860%" y="127.50"></text></g><g><title>item_types_checking (386,755 samples, 0.52%)</title><rect x="43.7770%" y="149" width="0.5174%" height="15" fill="rgb(210,16,53)"/><text x="44.0270%" y="159.50"></text></g><g><title>check_mod_item_types (384,705 samples, 0.51%)</title><rect x="43.7797%" y="133" width="0.5146%" height="15" fill="rgb(235,124,12)"/><text x="44.0297%" y="143.50"></text></g><g><title>typeck (79,591 samples, 0.11%)</title><rect x="44.1879%" y="117" width="0.1065%" height="15" fill="rgb(224,169,11)"/><text x="44.4379%" y="127.50"></text></g><g><title>late_bound_vars_map (80,482 samples, 0.11%)</title><rect x="44.5576%" y="101" width="0.1077%" height="15" fill="rgb(250,166,2)"/><text x="44.8076%" y="111.50"></text></g><g><title>resolve_lifetimes (75,212 samples, 0.10%)</title><rect x="44.5647%" y="85" width="0.1006%" height="15" fill="rgb(242,216,29)"/><text x="44.8147%" y="95.50"></text></g><g><title>fn_sig (180,942 samples, 0.24%)</title><rect x="44.4542%" y="117" width="0.2421%" height="15" fill="rgb(230,116,27)"/><text x="44.7042%" y="127.50"></text></g><g><title>generics_of (87,221 samples, 0.12%)</title><rect x="44.6962%" y="117" width="0.1167%" height="15" fill="rgb(228,99,48)"/><text x="44.9462%" y="127.50"></text></g><g><title>late_bound_vars_map (170,631 samples, 0.23%)</title><rect x="45.1216%" y="69" width="0.2283%" height="15" fill="rgb(253,11,6)"/><text x="45.3716%" y="79.50"></text></g><g><title>resolve_lifetimes (159,121 samples, 0.21%)</title><rect x="45.1370%" y="53" width="0.2129%" height="15" fill="rgb(247,143,39)"/><text x="45.3870%" y="63.50"></text></g><g><title>explicit_predicates_of (332,863 samples, 0.45%)</title><rect x="44.9163%" y="85" width="0.4453%" height="15" fill="rgb(236,97,10)"/><text x="45.1663%" y="95.50"></text></g><g><title>predicates_of (500,285 samples, 0.67%)</title><rect x="44.8494%" y="117" width="0.6692%" height="15" fill="rgb(233,208,19)"/><text x="45.0994%" y="127.50"></text></g><g><title>predicates_defined_on (481,735 samples, 0.64%)</title><rect x="44.8742%" y="101" width="0.6444%" height="15" fill="rgb(216,164,2)"/><text x="45.1242%" y="111.50"></text></g><g><title>inferred_outlives_of (117,401 samples, 0.16%)</title><rect x="45.3616%" y="85" width="0.1571%" height="15" fill="rgb(220,129,5)"/><text x="45.6116%" y="95.50"></text></g><g><title>inferred_outlives_crate (109,091 samples, 0.15%)</title><rect x="45.3727%" y="69" width="0.1459%" height="15" fill="rgb(242,17,10)"/><text x="45.6227%" y="79.50"></text></g><g><title>type_collecting (979,961 samples, 1.31%)</title><rect x="44.2957%" y="149" width="1.3109%" height="15" fill="rgb(242,107,0)"/><text x="44.5457%" y="159.50"></text></g><g><title>collect_mod_item_types (973,921 samples, 1.30%)</title><rect x="44.3038%" y="133" width="1.3028%" height="15" fill="rgb(251,28,31)"/><text x="44.5538%" y="143.50"></text></g><g><title>evaluate_obligation (359,317 samples, 0.48%)</title><rect x="47.0306%" y="117" width="0.4807%" height="15" fill="rgb(233,223,10)"/><text x="47.2806%" y="127.50"></text></g><g><title>implied_outlives_bounds (164,872 samples, 0.22%)</title><rect x="47.5113%" y="117" width="0.2206%" height="15" fill="rgb(215,21,27)"/><text x="47.7613%" y="127.50"></text></g><g><title>param_env (162,011 samples, 0.22%)</title><rect x="47.7318%" y="117" width="0.2167%" height="15" fill="rgb(232,23,21)"/><text x="47.9818%" y="127.50"></text></g><g><title>region_scope_tree (145,770 samples, 0.20%)</title><rect x="47.9743%" y="117" width="0.1950%" height="15" fill="rgb(244,5,23)"/><text x="48.2243%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,841,460 samples, 2.46%)</title><rect x="45.7140%" y="133" width="2.4634%" height="15" fill="rgb(226,81,46)"/><text x="45.9640%" y="143.50">ch..</text></g><g><title>adt_sized_constraint (85,091 samples, 0.11%)</title><rect x="48.9823%" y="117" width="0.1138%" height="15" fill="rgb(247,70,30)"/><text x="49.2323%" y="127.50"></text></g><g><title>adt_sized_constraint (78,451 samples, 0.10%)</title><rect x="48.9912%" y="101" width="0.1049%" height="15" fill="rgb(212,68,19)"/><text x="49.2412%" y="111.50"></text></g><g><title>implied_outlives_bounds (89,811 samples, 0.12%)</title><rect x="49.1078%" y="117" width="0.1201%" height="15" fill="rgb(240,187,13)"/><text x="49.3578%" y="127.50"></text></g><g><title>param_env (237,913 samples, 0.32%)</title><rect x="49.2279%" y="117" width="0.3183%" height="15" fill="rgb(223,113,26)"/><text x="49.4779%" y="127.50"></text></g><g><title>analysis (30,935,199 samples, 41.38%)</title><rect x="8.3667%" y="181" width="41.3831%" height="15" fill="rgb(206,192,2)"/><text x="8.6167%" y="191.50">analysis</text></g><g><title>type_check_crate (17,363,685 samples, 23.23%)</title><rect x="26.5218%" y="165" width="23.2280%" height="15" fill="rgb(241,108,4)"/><text x="26.7718%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,094,925 samples, 4.14%)</title><rect x="45.6097%" y="149" width="4.1402%" height="15" fill="rgb(247,173,49)"/><text x="45.8597%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (1,175,495 samples, 1.57%)</title><rect x="48.1773%" y="133" width="1.5725%" height="15" fill="rgb(224,114,35)"/><text x="48.4273%" y="143.50"></text></g><g><title>codegen_module (199,892 samples, 0.27%)</title><rect x="50.3791%" y="165" width="0.2674%" height="15" fill="rgb(245,159,27)"/><text x="50.6291%" y="175.50"></text></g><g><title>codegen_crate (726,208 samples, 0.97%)</title><rect x="49.7662%" y="181" width="0.9715%" height="15" fill="rgb(245,172,44)"/><text x="50.0162%" y="191.50"></text></g><g><title>codegen_module_optimize (1,981,092 samples, 2.65%)</title><rect x="50.7377%" y="181" width="2.6502%" height="15" fill="rgb(236,23,11)"/><text x="50.9877%" y="191.50">co..</text></g><g><title>LLVM_module_optimize (404,955 samples, 0.54%)</title><rect x="52.8461%" y="165" width="0.5417%" height="15" fill="rgb(205,117,38)"/><text x="53.0961%" y="175.50"></text></g><g><title>LLVM_lto_optimize (213,223 samples, 0.29%)</title><rect x="53.8771%" y="165" width="0.2852%" height="15" fill="rgb(237,72,25)"/><text x="54.1271%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,404,607 samples, 3.22%)</title><rect x="54.1623%" y="165" width="3.2167%" height="15" fill="rgb(244,70,9)"/><text x="54.4123%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (2,367,106 samples, 3.17%)</title><rect x="54.2125%" y="149" width="3.1666%" height="15" fill="rgb(217,125,39)"/><text x="54.4625%" y="159.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,024,494 samples, 4.05%)</title><rect x="53.3878%" y="181" width="4.0460%" height="15" fill="rgb(235,36,10)"/><text x="53.6378%" y="191.50">code..</text></g><g><title>AST_validation (139,781 samples, 0.19%)</title><rect x="57.7353%" y="165" width="0.1870%" height="15" fill="rgb(251,123,47)"/><text x="57.9853%" y="175.50"></text></g><g><title>crate_injection (74,801 samples, 0.10%)</title><rect x="58.0029%" y="165" width="0.1001%" height="15" fill="rgb(221,13,13)"/><text x="58.2529%" y="175.50"></text></g><g><title>metadata_load_macro (146,310 samples, 0.20%)</title><rect x="70.0688%" y="133" width="0.1957%" height="15" fill="rgb(238,131,9)"/><text x="70.3188%" y="143.50"></text></g><g><title>macro_expand_crate (9,277,955 samples, 12.41%)</title><rect x="58.1030%" y="165" width="12.4114%" height="15" fill="rgb(211,50,8)"/><text x="58.3530%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (9,250,955 samples, 12.38%)</title><rect x="58.1391%" y="149" width="12.3753%" height="15" fill="rgb(245,182,24)"/><text x="58.3891%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (186,782 samples, 0.25%)</title><rect x="70.2646%" y="133" width="0.2499%" height="15" fill="rgb(242,14,37)"/><text x="70.5146%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (331,804 samples, 0.44%)</title><rect x="70.5296%" y="165" width="0.4439%" height="15" fill="rgb(246,228,12)"/><text x="70.7796%" y="175.50"></text></g><g><title>late_resolve_crate (1,783,800 samples, 2.39%)</title><rect x="71.1019%" y="149" width="2.3863%" height="15" fill="rgb(213,55,15)"/><text x="71.3519%" y="159.50">la..</text></g><g><title>configure_and_expand (12,108,417 samples, 16.20%)</title><rect x="57.4338%" y="181" width="16.1979%" height="15" fill="rgb(209,9,3)"/><text x="57.6838%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,987,102 samples, 2.66%)</title><rect x="70.9734%" y="165" width="2.6582%" height="15" fill="rgb(230,59,30)"/><text x="71.2234%" y="175.50">re..</text></g><g><title>drop_ast (163,742 samples, 0.22%)</title><rect x="73.6317%" y="181" width="0.2190%" height="15" fill="rgb(209,121,21)"/><text x="73.8817%" y="191.50"></text></g><g><title>early_lint_checks (282,563 samples, 0.38%)</title><rect x="73.8752%" y="181" width="0.3780%" height="15" fill="rgb(220,109,13)"/><text x="74.1252%" y="191.50"></text></g><g><title>free_global_ctxt (1,744,589 samples, 2.33%)</title><rect x="74.2532%" y="181" width="2.3338%" height="15" fill="rgb(232,18,1)"/><text x="74.5032%" y="191.50">f..</text></g><g><title>layout_of (304,985 samples, 0.41%)</title><rect x="79.7076%" y="149" width="0.4080%" height="15" fill="rgb(215,41,42)"/><text x="79.9576%" y="159.50"></text></g><g><title>needs_drop_raw (204,942 samples, 0.27%)</title><rect x="82.1249%" y="133" width="0.2742%" height="15" fill="rgb(224,123,36)"/><text x="82.3749%" y="143.50"></text></g><g><title>is_copy_raw (175,952 samples, 0.24%)</title><rect x="82.1637%" y="117" width="0.2354%" height="15" fill="rgb(240,125,3)"/><text x="82.4137%" y="127.50"></text></g><g><title>evaluate_obligation (146,621 samples, 0.20%)</title><rect x="82.2029%" y="101" width="0.1961%" height="15" fill="rgb(205,98,50)"/><text x="82.4529%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,719,927 samples, 2.30%)</title><rect x="80.1156%" y="149" width="2.3008%" height="15" fill="rgb(205,185,37)"/><text x="80.3656%" y="159.50">m..</text></g><g><title>optimized_mir (3,398,758 samples, 4.55%)</title><rect x="77.8844%" y="165" width="4.5466%" height="15" fill="rgb(238,207,15)"/><text x="78.1344%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (4,397,569 samples, 5.88%)</title><rect x="76.5870%" y="181" width="5.8828%" height="15" fill="rgb(213,199,42)"/><text x="76.8370%" y="191.50">generat..</text></g><g><title>hir_lowering (1,827,821 samples, 2.45%)</title><rect x="82.4698%" y="181" width="2.4451%" height="15" fill="rgb(235,201,11)"/><text x="82.7198%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (3,442,609 samples, 4.61%)</title><rect x="84.9379%" y="165" width="4.6053%" height="15" fill="rgb(207,46,11)"/><text x="85.1879%" y="175.50">finis..</text></g><g><title>link_crate (1,070,822 samples, 1.43%)</title><rect x="89.5432%" y="165" width="1.4325%" height="15" fill="rgb(241,35,35)"/><text x="89.7932%" y="175.50"></text></g><g><title>link_binary (1,063,382 samples, 1.42%)</title><rect x="89.5531%" y="149" width="1.4225%" height="15" fill="rgb(243,32,47)"/><text x="89.8031%" y="159.50"></text></g><g><title>link_rlib (710,908 samples, 0.95%)</title><rect x="90.0246%" y="133" width="0.9510%" height="15" fill="rgb(247,202,23)"/><text x="90.2746%" y="143.50"></text></g><g><title>link (4,541,761 samples, 6.08%)</title><rect x="84.9149%" y="181" width="6.0757%" height="15" fill="rgb(219,102,11)"/><text x="85.1649%" y="191.50">link</text></g><g><title>parse_crate (5,502,132 samples, 7.36%)</title><rect x="90.9906%" y="181" width="7.3604%" height="15" fill="rgb(243,110,44)"/><text x="91.2406%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (300,383 samples, 0.40%)</title><rect x="98.3640%" y="181" width="0.4018%" height="15" fill="rgb(222,74,54)"/><text x="98.6140%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (443,964 samples, 0.59%)</title><rect x="98.7659%" y="181" width="0.5939%" height="15" fill="rgb(216,99,12)"/><text x="99.0159%" y="191.50"></text></g><g><title>setup_global_ctxt (126,072 samples, 0.17%)</title><rect x="99.3608%" y="181" width="0.1687%" height="15" fill="rgb(226,22,26)"/><text x="99.6108%" y="191.50"></text></g><g><title>all (74,753,210 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (74,753,210 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (351,744 samples, 0.47%)</title><rect x="99.5295%" y="181" width="0.4705%" height="15" fill="rgb(252,105,26)"/><text x="99.7795%" y="191.50"></text></g></svg></svg>