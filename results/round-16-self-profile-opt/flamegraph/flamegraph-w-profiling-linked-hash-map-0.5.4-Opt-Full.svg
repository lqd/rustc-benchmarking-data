<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,137,001 samples, 3.61%)</title><rect x="0.3713%" y="181" width="3.6141%" height="15" fill="rgb(227,0,7)"/><text x="0.6213%" y="191.50">LLVM..</text></g><g><title>param_env (662,005 samples, 0.34%)</title><rect x="13.9583%" y="101" width="0.3352%" height="15" fill="rgb(217,0,24)"/><text x="14.2083%" y="111.50"></text></g><g><title>item_attrs (624,087 samples, 0.32%)</title><rect x="14.7310%" y="69" width="0.3160%" height="15" fill="rgb(221,193,54)"/><text x="14.9810%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (611,707 samples, 0.31%)</title><rect x="14.7373%" y="53" width="0.3098%" height="15" fill="rgb(248,212,6)"/><text x="14.9873%" y="63.50"></text></g><g><title>codegen_fn_attrs (769,951 samples, 0.39%)</title><rect x="14.6643%" y="85" width="0.3899%" height="15" fill="rgb(208,68,35)"/><text x="14.9143%" y="95.50"></text></g><g><title>is_copy_raw (349,394 samples, 0.18%)</title><rect x="16.9513%" y="69" width="0.1769%" height="15" fill="rgb(232,128,0)"/><text x="17.2013%" y="79.50"></text></g><g><title>evaluate_obligation (291,584 samples, 0.15%)</title><rect x="16.9806%" y="53" width="0.1477%" height="15" fill="rgb(207,160,47)"/><text x="17.2306%" y="63.50"></text></g><g><title>adt_drop_tys (418,654 samples, 0.21%)</title><rect x="17.2277%" y="53" width="0.2120%" height="15" fill="rgb(228,23,34)"/><text x="17.4777%" y="63.50"></text></g><g><title>needs_drop_raw (2,131,001 samples, 1.08%)</title><rect x="17.1296%" y="69" width="1.0791%" height="15" fill="rgb(218,30,26)"/><text x="17.3796%" y="79.50"></text></g><g><title>is_copy_raw (1,518,696 samples, 0.77%)</title><rect x="17.4397%" y="53" width="0.7691%" height="15" fill="rgb(220,122,19)"/><text x="17.6897%" y="63.50"></text></g><g><title>evaluate_obligation (947,449 samples, 0.48%)</title><rect x="17.7289%" y="37" width="0.4798%" height="15" fill="rgb(250,228,42)"/><text x="17.9789%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (342,262 samples, 0.17%)</title><rect x="18.3694%" y="53" width="0.1733%" height="15" fill="rgb(240,193,28)"/><text x="18.6194%" y="63.50"></text></g><g><title>resolve_instance (786,337 samples, 0.40%)</title><rect x="18.2087%" y="69" width="0.3982%" height="15" fill="rgb(216,20,37)"/><text x="18.4587%" y="79.50"></text></g><g><title>thir_body (1,431,936 samples, 0.73%)</title><rect x="18.6304%" y="69" width="0.7251%" height="15" fill="rgb(206,188,39)"/><text x="18.8804%" y="79.50"></text></g><g><title>mir_const (11,956,200 samples, 6.05%)</title><rect x="13.3249%" y="117" width="6.0545%" height="15" fill="rgb(217,207,13)"/><text x="13.5749%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (10,043,388 samples, 5.09%)</title><rect x="14.2936%" y="101" width="5.0859%" height="15" fill="rgb(231,73,38)"/><text x="14.5436%" y="111.50">unsafe..</text></g><g><title>mir_built (8,541,380 samples, 4.33%)</title><rect x="15.0542%" y="85" width="4.3253%" height="15" fill="rgb(225,20,46)"/><text x="15.3042%" y="95.50">mir_b..</text></g><g><title>mir_promoted (13,105,053 samples, 6.64%)</title><rect x="12.7789%" y="133" width="6.6363%" height="15" fill="rgb(210,31,41)"/><text x="13.0289%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (600,528 samples, 0.30%)</title><rect x="19.4151%" y="133" width="0.3041%" height="15" fill="rgb(221,200,47)"/><text x="19.6651%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (295,172 samples, 0.15%)</title><rect x="19.7192%" y="133" width="0.1495%" height="15" fill="rgb(226,26,5)"/><text x="19.9692%" y="143.50"></text></g><g><title>type_op_normalize_predicate (267,763 samples, 0.14%)</title><rect x="19.8687%" y="133" width="0.1356%" height="15" fill="rgb(249,33,26)"/><text x="20.1187%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,054,667 samples, 2.05%)</title><rect x="20.0187%" y="133" width="2.0532%" height="15" fill="rgb(235,183,28)"/><text x="20.2687%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (35,326,388 samples, 17.89%)</title><rect x="4.1838%" y="165" width="17.8889%" height="15" fill="rgb(221,5,38)"/><text x="4.4338%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (35,114,625 samples, 17.78%)</title><rect x="4.2911%" y="149" width="17.7817%" height="15" fill="rgb(247,18,42)"/><text x="4.5411%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (223,343 samples, 0.11%)</title><rect x="22.1054%" y="165" width="0.1131%" height="15" fill="rgb(241,131,45)"/><text x="22.3554%" y="175.50"></text></g><g><title>codegen_fn_attrs (240,691 samples, 0.12%)</title><rect x="22.5517%" y="101" width="0.1219%" height="15" fill="rgb(249,31,29)"/><text x="22.8017%" y="111.50"></text></g><g><title>should_inherit_track_caller (406,233 samples, 0.21%)</title><rect x="22.4733%" y="117" width="0.2057%" height="15" fill="rgb(225,111,53)"/><text x="22.7233%" y="127.50"></text></g><g><title>codegen_fn_attrs (629,657 samples, 0.32%)</title><rect x="22.3700%" y="133" width="0.3189%" height="15" fill="rgb(238,160,17)"/><text x="22.6200%" y="143.50"></text></g><g><title>check_mod_attrs (912,961 samples, 0.46%)</title><rect x="22.2266%" y="149" width="0.4623%" height="15" fill="rgb(214,148,48)"/><text x="22.4766%" y="159.50"></text></g><g><title>lookup_deprecation_entry (201,382 samples, 0.10%)</title><rect x="22.9579%" y="133" width="0.1020%" height="15" fill="rgb(232,36,49)"/><text x="23.2079%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (568,107 samples, 0.29%)</title><rect x="22.8262%" y="149" width="0.2877%" height="15" fill="rgb(209,103,24)"/><text x="23.0762%" y="159.50"></text></g><g><title>misc_checking_1 (1,823,071 samples, 0.92%)</title><rect x="22.2188%" y="165" width="0.9232%" height="15" fill="rgb(229,88,8)"/><text x="22.4688%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (712,358 samples, 0.36%)</title><rect x="23.1428%" y="149" width="0.3607%" height="15" fill="rgb(213,181,19)"/><text x="23.3928%" y="159.50"></text></g><g><title>check_mod_liveness (557,656 samples, 0.28%)</title><rect x="23.2211%" y="133" width="0.2824%" height="15" fill="rgb(254,191,54)"/><text x="23.4711%" y="143.50"></text></g><g><title>misc_checking_2 (1,427,816 samples, 0.72%)</title><rect x="23.1420%" y="165" width="0.7230%" height="15" fill="rgb(241,83,37)"/><text x="23.3920%" y="175.50"></text></g><g><title>match_checking (713,848 samples, 0.36%)</title><rect x="23.5035%" y="149" width="0.3615%" height="15" fill="rgb(233,36,39)"/><text x="23.7535%" y="159.50"></text></g><g><title>check_match (664,007 samples, 0.34%)</title><rect x="23.5288%" y="133" width="0.3362%" height="15" fill="rgb(226,3,54)"/><text x="23.7788%" y="143.50"></text></g><g><title>check_private_in_public (312,154 samples, 0.16%)</title><rect x="23.8703%" y="149" width="0.1581%" height="15" fill="rgb(245,192,40)"/><text x="24.1203%" y="159.50"></text></g><g><title>death_checking (559,036 samples, 0.28%)</title><rect x="24.0283%" y="149" width="0.2831%" height="15" fill="rgb(238,167,29)"/><text x="24.2783%" y="159.50"></text></g><g><title>crate_lints (2,167,334 samples, 1.10%)</title><rect x="24.3122%" y="133" width="1.0975%" height="15" fill="rgb(232,182,51)"/><text x="24.5622%" y="143.50"></text></g><g><title>type_of (1,313,484 samples, 0.67%)</title><rect x="24.7446%" y="117" width="0.6651%" height="15" fill="rgb(231,60,39)"/><text x="24.9946%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (855,109 samples, 0.43%)</title><rect x="24.9767%" y="101" width="0.4330%" height="15" fill="rgb(208,69,12)"/><text x="25.2267%" y="111.50"></text></g><g><title>lint_checking (2,779,001 samples, 1.41%)</title><rect x="24.3114%" y="149" width="1.4073%" height="15" fill="rgb(235,93,37)"/><text x="24.5614%" y="159.50"></text></g><g><title>module_lints (610,147 samples, 0.31%)</title><rect x="25.4097%" y="133" width="0.3090%" height="15" fill="rgb(213,116,39)"/><text x="25.6597%" y="143.50"></text></g><g><title>lint_mod (607,467 samples, 0.31%)</title><rect x="25.4111%" y="117" width="0.3076%" height="15" fill="rgb(222,207,29)"/><text x="25.6611%" y="127.50"></text></g><g><title>privacy_access_levels (430,804 samples, 0.22%)</title><rect x="25.7187%" y="149" width="0.2182%" height="15" fill="rgb(206,96,30)"/><text x="25.9687%" y="159.50"></text></g><g><title>privacy_checking_modules (1,260,964 samples, 0.64%)</title><rect x="25.9368%" y="149" width="0.6385%" height="15" fill="rgb(218,138,4)"/><text x="26.1868%" y="159.50"></text></g><g><title>check_mod_privacy (1,259,414 samples, 0.64%)</title><rect x="25.9376%" y="133" width="0.6378%" height="15" fill="rgb(250,191,14)"/><text x="26.1876%" y="143.50"></text></g><g><title>misc_checking_3 (5,375,400 samples, 2.72%)</title><rect x="23.8650%" y="165" width="2.7220%" height="15" fill="rgb(239,60,40)"/><text x="24.1150%" y="175.50">mi..</text></g><g><title>impl_parent (2,773,696 samples, 1.40%)</title><rect x="29.3941%" y="101" width="1.4046%" height="15" fill="rgb(206,27,48)"/><text x="29.6441%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,660,481 samples, 0.84%)</title><rect x="29.9579%" y="85" width="0.8408%" height="15" fill="rgb(225,35,8)"/><text x="30.2079%" y="95.50"></text></g><g><title>impl_trait_ref (5,882,966 samples, 2.98%)</title><rect x="30.7995%" y="101" width="2.9791%" height="15" fill="rgb(250,213,24)"/><text x="31.0495%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,755,169 samples, 2.41%)</title><rect x="31.3706%" y="85" width="2.4080%" height="15" fill="rgb(247,123,22)"/><text x="31.6206%" y="95.50">me..</text></g><g><title>predicates_of (222,784 samples, 0.11%)</title><rect x="33.8354%" y="101" width="0.1128%" height="15" fill="rgb(231,138,38)"/><text x="34.0854%" y="111.50"></text></g><g><title>trait_impls_of (1,098,091 samples, 0.56%)</title><rect x="33.9495%" y="101" width="0.5561%" height="15" fill="rgb(231,145,46)"/><text x="34.1995%" y="111.50"></text></g><g><title>implementations_of_trait (308,820 samples, 0.16%)</title><rect x="34.3491%" y="85" width="0.1564%" height="15" fill="rgb(251,118,11)"/><text x="34.5991%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (227,400 samples, 0.12%)</title><rect x="34.3904%" y="69" width="0.1152%" height="15" fill="rgb(217,147,25)"/><text x="34.6404%" y="79.50"></text></g><g><title>coherent_trait (15,537,174 samples, 7.87%)</title><rect x="26.6486%" y="133" width="7.8679%" height="15" fill="rgb(247,81,37)"/><text x="26.8986%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (15,499,973 samples, 7.85%)</title><rect x="26.6674%" y="117" width="7.8490%" height="15" fill="rgb(209,12,38)"/><text x="26.9174%" y="127.50">specializat..</text></g><g><title>coherence_checking (15,667,976 samples, 7.93%)</title><rect x="26.6346%" y="149" width="7.9341%" height="15" fill="rgb(227,1,9)"/><text x="26.8846%" y="159.50">coherence_c..</text></g><g><title>associated_items (277,522 samples, 0.14%)</title><rect x="47.3347%" y="101" width="0.1405%" height="15" fill="rgb(248,47,43)"/><text x="47.5847%" y="111.50"></text></g><g><title>adt_dtorck_constraint (302,674 samples, 0.15%)</title><rect x="47.7374%" y="85" width="0.1533%" height="15" fill="rgb(221,10,30)"/><text x="47.9874%" y="95.50"></text></g><g><title>dropck_outlives (767,004 samples, 0.39%)</title><rect x="47.5205%" y="101" width="0.3884%" height="15" fill="rgb(210,229,1)"/><text x="47.7705%" y="111.50"></text></g><g><title>evaluate_obligation (1,782,687 samples, 0.90%)</title><rect x="47.9089%" y="101" width="0.9027%" height="15" fill="rgb(222,148,37)"/><text x="48.1589%" y="111.50"></text></g><g><title>item_attrs (277,793 samples, 0.14%)</title><rect x="49.0194%" y="101" width="0.1407%" height="15" fill="rgb(234,67,33)"/><text x="49.2694%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (269,492 samples, 0.14%)</title><rect x="49.0236%" y="85" width="0.1365%" height="15" fill="rgb(247,98,35)"/><text x="49.2736%" y="95.50"></text></g><g><title>method_autoderef_steps (589,175 samples, 0.30%)</title><rect x="49.2057%" y="101" width="0.2984%" height="15" fill="rgb(247,138,52)"/><text x="49.4557%" y="111.50"></text></g><g><title>evaluate_obligation (288,392 samples, 0.15%)</title><rect x="49.3580%" y="85" width="0.1460%" height="15" fill="rgb(213,79,30)"/><text x="49.6080%" y="95.50"></text></g><g><title>predicates_of (397,663 samples, 0.20%)</title><rect x="49.5438%" y="101" width="0.2014%" height="15" fill="rgb(246,177,23)"/><text x="49.7938%" y="111.50"></text></g><g><title>predicates_defined_on (314,222 samples, 0.16%)</title><rect x="49.5860%" y="85" width="0.1591%" height="15" fill="rgb(230,62,27)"/><text x="49.8360%" y="95.50"></text></g><g><title>evaluate_obligation (399,694 samples, 0.20%)</title><rect x="53.3113%" y="85" width="0.2024%" height="15" fill="rgb(216,154,8)"/><text x="53.5613%" y="95.50"></text></g><g><title>typeck (7,870,096 samples, 3.99%)</title><rect x="49.7969%" y="101" width="3.9853%" height="15" fill="rgb(244,35,45)"/><text x="50.0469%" y="111.50">type..</text></g><g><title>item_bodies_checking (37,948,917 samples, 19.22%)</title><rect x="34.6010%" y="149" width="19.2169%" height="15" fill="rgb(251,115,12)"/><text x="34.8510%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,945,847 samples, 19.22%)</title><rect x="34.6025%" y="133" width="19.2153%" height="15" fill="rgb(240,54,50)"/><text x="34.8525%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (37,798,466 samples, 19.14%)</title><rect x="34.6771%" y="117" width="19.1407%" height="15" fill="rgb(233,84,52)"/><text x="34.9271%" y="127.50">typeck</text></g><g><title>generics_of (250,754 samples, 0.13%)</title><rect x="55.4206%" y="117" width="0.1270%" height="15" fill="rgb(207,117,47)"/><text x="55.6706%" y="127.50"></text></g><g><title>item_types_checking (3,589,950 samples, 1.82%)</title><rect x="53.8179%" y="149" width="1.8179%" height="15" fill="rgb(249,43,39)"/><text x="54.0679%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,587,070 samples, 1.82%)</title><rect x="53.8193%" y="133" width="1.8165%" height="15" fill="rgb(209,38,44)"/><text x="54.0693%" y="143.50">c..</text></g><g><title>fn_sig (277,692 samples, 0.14%)</title><rect x="55.8498%" y="117" width="0.1406%" height="15" fill="rgb(236,212,23)"/><text x="56.0998%" y="127.50"></text></g><g><title>is_late_bound_map (333,123 samples, 0.17%)</title><rect x="56.1006%" y="101" width="0.1687%" height="15" fill="rgb(242,79,21)"/><text x="56.3506%" y="111.50"></text></g><g><title>resolve_lifetimes (305,152 samples, 0.15%)</title><rect x="56.1147%" y="85" width="0.1545%" height="15" fill="rgb(211,96,35)"/><text x="56.3647%" y="95.50"></text></g><g><title>generics_of (659,135 samples, 0.33%)</title><rect x="55.9904%" y="117" width="0.3338%" height="15" fill="rgb(253,215,40)"/><text x="56.2404%" y="127.50"></text></g><g><title>late_bound_vars_map (491,766 samples, 0.25%)</title><rect x="56.7291%" y="69" width="0.2490%" height="15" fill="rgb(211,81,21)"/><text x="56.9791%" y="79.50"></text></g><g><title>resolve_lifetimes (469,166 samples, 0.24%)</title><rect x="56.7405%" y="53" width="0.2376%" height="15" fill="rgb(208,190,38)"/><text x="56.9905%" y="63.50"></text></g><g><title>explicit_predicates_of (979,121 samples, 0.50%)</title><rect x="56.4921%" y="85" width="0.4958%" height="15" fill="rgb(235,213,38)"/><text x="56.7421%" y="95.50"></text></g><g><title>predicates_of (1,658,461 samples, 0.84%)</title><rect x="56.3748%" y="117" width="0.8398%" height="15" fill="rgb(237,122,38)"/><text x="56.6248%" y="127.50"></text></g><g><title>predicates_defined_on (1,571,819 samples, 0.80%)</title><rect x="56.4187%" y="101" width="0.7960%" height="15" fill="rgb(244,218,35)"/><text x="56.6687%" y="111.50"></text></g><g><title>inferred_outlives_of (447,616 samples, 0.23%)</title><rect x="56.9880%" y="85" width="0.2267%" height="15" fill="rgb(240,68,47)"/><text x="57.2380%" y="95.50"></text></g><g><title>inferred_outlives_crate (412,145 samples, 0.21%)</title><rect x="57.0059%" y="69" width="0.2087%" height="15" fill="rgb(210,16,53)"/><text x="57.2559%" y="79.50"></text></g><g><title>type_of (220,930 samples, 0.11%)</title><rect x="57.1028%" y="53" width="0.1119%" height="15" fill="rgb(235,124,12)"/><text x="57.3528%" y="63.50"></text></g><g><title>type_collecting (3,371,428 samples, 1.71%)</title><rect x="55.6369%" y="149" width="1.7073%" height="15" fill="rgb(224,169,11)"/><text x="55.8869%" y="159.50"></text></g><g><title>collect_mod_item_types (3,364,688 samples, 1.70%)</title><rect x="55.6403%" y="133" width="1.7038%" height="15" fill="rgb(250,166,2)"/><text x="55.8903%" y="143.50"></text></g><g><title>type_of (255,844 samples, 0.13%)</title><rect x="57.2146%" y="117" width="0.1296%" height="15" fill="rgb(242,216,29)"/><text x="57.4646%" y="127.50"></text></g><g><title>evaluate_obligation (838,550 samples, 0.42%)</title><rect x="60.1600%" y="117" width="0.4246%" height="15" fill="rgb(230,116,27)"/><text x="60.4100%" y="127.50"></text></g><g><title>implied_outlives_bounds (690,149 samples, 0.35%)</title><rect x="60.5853%" y="117" width="0.3495%" height="15" fill="rgb(228,99,48)"/><text x="60.8353%" y="127.50"></text></g><g><title>param_env (847,955 samples, 0.43%)</title><rect x="60.9348%" y="117" width="0.4294%" height="15" fill="rgb(253,11,6)"/><text x="61.1848%" y="127.50"></text></g><g><title>region_scope_tree (611,412 samples, 0.31%)</title><rect x="61.4100%" y="117" width="0.3096%" height="15" fill="rgb(247,143,39)"/><text x="61.6600%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,323,992 samples, 4.22%)</title><rect x="57.5301%" y="133" width="4.2152%" height="15" fill="rgb(236,97,10)"/><text x="57.7801%" y="143.50">check..</text></g><g><title>implied_outlives_bounds (324,505 samples, 0.16%)</title><rect x="64.0183%" y="117" width="0.1643%" height="15" fill="rgb(233,208,19)"/><text x="64.2683%" y="127.50"></text></g><g><title>param_env (644,402 samples, 0.33%)</title><rect x="64.1826%" y="117" width="0.3263%" height="15" fill="rgb(216,164,2)"/><text x="64.4326%" y="127.50"></text></g><g><title>analysis (120,040,921 samples, 60.79%)</title><rect x="3.9854%" y="181" width="60.7874%" height="15" fill="rgb(220,129,5)"/><text x="4.2354%" y="191.50">analysis</text></g><g><title>type_check_crate (75,408,018 samples, 38.19%)</title><rect x="26.5870%" y="165" width="38.1858%" height="15" fill="rgb(242,17,10)"/><text x="26.8370%" y="175.50">type_check_crate</text></g><g><title>wf_checking (14,662,175 samples, 7.42%)</title><rect x="57.3481%" y="149" width="7.4248%" height="15" fill="rgb(242,107,0)"/><text x="57.5981%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (5,978,608 samples, 3.03%)</title><rect x="61.7453%" y="133" width="3.0275%" height="15" fill="rgb(251,28,31)"/><text x="61.9953%" y="143.50">che..</text></g><g><title>variances_of (200,963 samples, 0.10%)</title><rect x="64.6710%" y="117" width="0.1018%" height="15" fill="rgb(233,223,10)"/><text x="64.9210%" y="127.50"></text></g><g><title>codegen_module (211,213 samples, 0.11%)</title><rect x="64.9987%" y="165" width="0.1070%" height="15" fill="rgb(215,21,27)"/><text x="65.2487%" y="175.50"></text></g><g><title>codegen_crate (789,609 samples, 0.40%)</title><rect x="64.7791%" y="181" width="0.3998%" height="15" fill="rgb(232,23,21)"/><text x="65.0291%" y="191.50"></text></g><g><title>codegen_module_optimize (2,707,940 samples, 1.37%)</title><rect x="65.1789%" y="181" width="1.3713%" height="15" fill="rgb(244,5,23)"/><text x="65.4289%" y="191.50"></text></g><g><title>LLVM_module_optimize (525,656 samples, 0.27%)</title><rect x="66.2840%" y="165" width="0.2662%" height="15" fill="rgb(226,81,46)"/><text x="66.5340%" y="175.50"></text></g><g><title>LLVM_lto_optimize (280,304 samples, 0.14%)</title><rect x="66.7985%" y="165" width="0.1419%" height="15" fill="rgb(247,70,30)"/><text x="67.0485%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,835,612 samples, 1.44%)</title><rect x="66.9405%" y="165" width="1.4359%" height="15" fill="rgb(212,68,19)"/><text x="67.1905%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,789,222 samples, 1.41%)</title><rect x="66.9640%" y="149" width="1.4124%" height="15" fill="rgb(240,187,13)"/><text x="67.2140%" y="159.50"></text></g><g><title>codegen_module_perform_lto (3,650,931 samples, 1.85%)</title><rect x="66.5502%" y="181" width="1.8488%" height="15" fill="rgb(223,113,26)"/><text x="66.8002%" y="191.50">c..</text></g><g><title>AST_validation (288,824 samples, 0.15%)</title><rect x="68.5127%" y="165" width="0.1463%" height="15" fill="rgb(206,192,2)"/><text x="68.7627%" y="175.50"></text></g><g><title>macro_expand_crate (15,668,986 samples, 7.93%)</title><rect x="68.7441%" y="165" width="7.9346%" height="15" fill="rgb(241,108,4)"/><text x="68.9941%" y="175.50">macro_expan..</text></g><g><title>expand_crate (15,644,326 samples, 7.92%)</title><rect x="68.7566%" y="149" width="7.9221%" height="15" fill="rgb(247,173,49)"/><text x="69.0066%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,617,399 samples, 1.33%)</title><rect x="75.3533%" y="133" width="1.3254%" height="15" fill="rgb(224,114,35)"/><text x="75.6033%" y="143.50"></text></g><g><title>metadata_register_crate (960,119 samples, 0.49%)</title><rect x="76.1925%" y="117" width="0.4862%" height="15" fill="rgb(245,159,27)"/><text x="76.4425%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (636,647 samples, 0.32%)</title><rect x="76.6812%" y="165" width="0.3224%" height="15" fill="rgb(245,172,44)"/><text x="76.9312%" y="175.50"></text></g><g><title>late_resolve_crate (3,267,517 samples, 1.65%)</title><rect x="77.0554%" y="149" width="1.6546%" height="15" fill="rgb(236,23,11)"/><text x="77.3054%" y="159.50"></text></g><g><title>configure_and_expand (20,509,571 samples, 10.39%)</title><rect x="68.3990%" y="181" width="10.3858%" height="15" fill="rgb(205,117,38)"/><text x="68.6490%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (3,517,449 samples, 1.78%)</title><rect x="77.0036%" y="165" width="1.7812%" height="15" fill="rgb(237,72,25)"/><text x="77.2536%" y="175.50">r..</text></g><g><title>drop_ast (349,614 samples, 0.18%)</title><rect x="78.7848%" y="181" width="0.1770%" height="15" fill="rgb(244,70,9)"/><text x="79.0348%" y="191.50"></text></g><g><title>early_lint_checks (461,655 samples, 0.23%)</title><rect x="78.9692%" y="181" width="0.2338%" height="15" fill="rgb(217,125,39)"/><text x="79.2192%" y="191.50"></text></g><g><title>free_global_ctxt (3,965,184 samples, 2.01%)</title><rect x="79.2030%" y="181" width="2.0079%" height="15" fill="rgb(235,36,10)"/><text x="79.4530%" y="191.50">f..</text></g><g><title>exported_symbols (224,322 samples, 0.11%)</title><rect x="82.7144%" y="165" width="0.1136%" height="15" fill="rgb(251,123,47)"/><text x="82.9644%" y="175.50"></text></g><g><title>reachable_non_generics (215,392 samples, 0.11%)</title><rect x="82.7189%" y="149" width="0.1091%" height="15" fill="rgb(221,13,13)"/><text x="82.9689%" y="159.50"></text></g><g><title>is_sized_raw (386,414 samples, 0.20%)</title><rect x="85.7554%" y="133" width="0.1957%" height="15" fill="rgb(238,131,9)"/><text x="86.0054%" y="143.50"></text></g><g><title>evaluate_obligation (301,464 samples, 0.15%)</title><rect x="85.7984%" y="117" width="0.1527%" height="15" fill="rgb(211,50,8)"/><text x="86.0484%" y="127.50"></text></g><g><title>layout_of (529,552 samples, 0.27%)</title><rect x="85.9511%" y="133" width="0.2682%" height="15" fill="rgb(245,182,24)"/><text x="86.2011%" y="143.50"></text></g><g><title>layout_of (1,631,934 samples, 0.83%)</title><rect x="85.4185%" y="149" width="0.8264%" height="15" fill="rgb(242,14,37)"/><text x="85.6685%" y="159.50"></text></g><g><title>needs_drop_raw (484,685 samples, 0.25%)</title><rect x="88.6977%" y="133" width="0.2454%" height="15" fill="rgb(246,228,12)"/><text x="88.9477%" y="143.50"></text></g><g><title>is_copy_raw (401,184 samples, 0.20%)</title><rect x="88.7399%" y="117" width="0.2032%" height="15" fill="rgb(213,55,15)"/><text x="88.9899%" y="127.50"></text></g><g><title>evaluate_obligation (288,553 samples, 0.15%)</title><rect x="88.7970%" y="101" width="0.1461%" height="15" fill="rgb(209,9,3)"/><text x="89.0470%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,500,224 samples, 2.79%)</title><rect x="86.2449%" y="149" width="2.7853%" height="15" fill="rgb(230,59,30)"/><text x="86.4949%" y="159.50">mi..</text></g><g><title>optimized_mir (12,055,907 samples, 6.10%)</title><rect x="82.9400%" y="165" width="6.1050%" height="15" fill="rgb(209,121,21)"/><text x="83.1900%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (15,579,626 samples, 7.89%)</title><rect x="81.2109%" y="181" width="7.8893%" height="15" fill="rgb(220,109,13)"/><text x="81.4609%" y="191.50">generate_cr..</text></g><g><title>hir_lowering (4,015,545 samples, 2.03%)</title><rect x="89.1002%" y="181" width="2.0334%" height="15" fill="rgb(232,18,1)"/><text x="89.3502%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (2,471,298 samples, 1.25%)</title><rect x="91.1411%" y="165" width="1.2514%" height="15" fill="rgb(215,41,42)"/><text x="91.3911%" y="175.50"></text></g><g><title>link_crate (1,018,632 samples, 0.52%)</title><rect x="92.3926%" y="165" width="0.5158%" height="15" fill="rgb(224,123,36)"/><text x="92.6426%" y="175.50"></text></g><g><title>link_binary (980,231 samples, 0.50%)</title><rect x="92.4120%" y="149" width="0.4964%" height="15" fill="rgb(240,125,3)"/><text x="92.6620%" y="159.50"></text></g><g><title>link_rlib (702,877 samples, 0.36%)</title><rect x="92.5525%" y="133" width="0.3559%" height="15" fill="rgb(205,98,50)"/><text x="92.8025%" y="143.50"></text></g><g><title>link (3,514,100 samples, 1.78%)</title><rect x="91.1337%" y="181" width="1.7795%" height="15" fill="rgb(205,185,37)"/><text x="91.3837%" y="191.50">l..</text></g><g><title>parse_crate (12,357,278 samples, 6.26%)</title><rect x="92.9132%" y="181" width="6.2576%" height="15" fill="rgb(238,207,15)"/><text x="93.1632%" y="191.50">parse_cr..</text></g><g><title>prepare_outputs (210,523 samples, 0.11%)</title><rect x="99.1757%" y="181" width="0.1066%" height="15" fill="rgb(213,199,42)"/><text x="99.4257%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (915,121 samples, 0.46%)</title><rect x="99.2823%" y="181" width="0.4634%" height="15" fill="rgb(235,201,11)"/><text x="99.5323%" y="191.50"></text></g><g><title>all (197,476,742 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (197,476,742 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (418,424 samples, 0.21%)</title><rect x="99.7881%" y="181" width="0.2119%" height="15" fill="rgb(243,32,47)"/><text x="100.0381%" y="191.50"></text></g></svg></svg>