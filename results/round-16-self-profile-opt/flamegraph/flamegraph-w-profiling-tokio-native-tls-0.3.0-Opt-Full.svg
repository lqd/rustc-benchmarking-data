<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (19,751,100 samples, 11.37%)</title><rect x="0.2895%" y="245" width="11.3706%" height="15" fill="rgb(227,0,7)"/><text x="0.5395%" y="255.50">LLVM_passes</text></g><g><title>param_env (219,643 samples, 0.13%)</title><rect x="15.3747%" y="165" width="0.1264%" height="15" fill="rgb(217,0,24)"/><text x="15.6247%" y="175.50"></text></g><g><title>codegen_fn_attrs (176,522 samples, 0.10%)</title><rect x="15.6284%" y="149" width="0.1016%" height="15" fill="rgb(221,193,54)"/><text x="15.8784%" y="159.50"></text></g><g><title>needs_drop_raw (779,238 samples, 0.45%)</title><rect x="16.4484%" y="133" width="0.4486%" height="15" fill="rgb(248,212,6)"/><text x="16.6984%" y="143.50"></text></g><g><title>is_copy_raw (546,396 samples, 0.31%)</title><rect x="16.5824%" y="117" width="0.3146%" height="15" fill="rgb(208,68,35)"/><text x="16.8324%" y="127.50"></text></g><g><title>evaluate_obligation (439,966 samples, 0.25%)</title><rect x="16.6437%" y="101" width="0.2533%" height="15" fill="rgb(232,128,0)"/><text x="16.8937%" y="111.50"></text></g><g><title>specialization_graph_of (229,394 samples, 0.13%)</title><rect x="17.0543%" y="117" width="0.1321%" height="15" fill="rgb(207,160,47)"/><text x="17.3043%" y="127.50"></text></g><g><title>resolve_instance (541,737 samples, 0.31%)</title><rect x="16.8970%" y="133" width="0.3119%" height="15" fill="rgb(228,23,34)"/><text x="17.1470%" y="143.50"></text></g><g><title>thir_body (422,780 samples, 0.24%)</title><rect x="17.2194%" y="133" width="0.2434%" height="15" fill="rgb(218,30,26)"/><text x="17.4694%" y="143.50"></text></g><g><title>mir_const (3,986,840 samples, 2.30%)</title><rect x="15.1738%" y="181" width="2.2952%" height="15" fill="rgb(220,122,19)"/><text x="15.4238%" y="191.50">m..</text></g><g><title>unsafety_check_result (3,418,096 samples, 1.97%)</title><rect x="15.5012%" y="165" width="1.9678%" height="15" fill="rgb(250,228,42)"/><text x="15.7512%" y="175.50">u..</text></g><g><title>mir_built (3,020,682 samples, 1.74%)</title><rect x="15.7300%" y="149" width="1.7390%" height="15" fill="rgb(240,193,28)"/><text x="15.9800%" y="159.50"></text></g><g><title>mir_promoted (4,360,336 samples, 2.51%)</title><rect x="14.9683%" y="197" width="2.5102%" height="15" fill="rgb(216,20,37)"/><text x="15.2183%" y="207.50">mi..</text></g><g><title>type_op_ascribe_user_type (189,921 samples, 0.11%)</title><rect x="17.4786%" y="197" width="0.1093%" height="15" fill="rgb(206,188,39)"/><text x="17.7286%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (221,331 samples, 0.13%)</title><rect x="17.5879%" y="197" width="0.1274%" height="15" fill="rgb(217,207,13)"/><text x="17.8379%" y="207.50"></text></g><g><title>type_op_prove_predicate (1,689,520 samples, 0.97%)</title><rect x="17.7562%" y="197" width="0.9727%" height="15" fill="rgb(231,73,38)"/><text x="18.0062%" y="207.50"></text></g><g><title>MIR_borrow_checking (12,111,274 samples, 6.97%)</title><rect x="11.7601%" y="229" width="6.9724%" height="15" fill="rgb(225,20,46)"/><text x="12.0101%" y="239.50">MIR_borro..</text></g><g><title>mir_borrowck (12,048,724 samples, 6.94%)</title><rect x="11.7961%" y="213" width="6.9364%" height="15" fill="rgb(210,31,41)"/><text x="12.0461%" y="223.50">mir_borro..</text></g><g><title>should_inherit_track_caller (220,164 samples, 0.13%)</title><rect x="18.9398%" y="181" width="0.1267%" height="15" fill="rgb(221,200,47)"/><text x="19.1898%" y="191.50"></text></g><g><title>codegen_fn_attrs (338,435 samples, 0.19%)</title><rect x="18.8820%" y="197" width="0.1948%" height="15" fill="rgb(226,26,5)"/><text x="19.1320%" y="207.50"></text></g><g><title>check_mod_attrs (466,115 samples, 0.27%)</title><rect x="18.8085%" y="213" width="0.2683%" height="15" fill="rgb(249,33,26)"/><text x="19.0585%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (286,653 samples, 0.17%)</title><rect x="19.1394%" y="213" width="0.1650%" height="15" fill="rgb(235,183,28)"/><text x="19.3894%" y="223.50"></text></g><g><title>misc_checking_1 (914,400 samples, 0.53%)</title><rect x="18.8020%" y="229" width="0.5264%" height="15" fill="rgb(221,5,38)"/><text x="19.0520%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (359,754 samples, 0.21%)</title><rect x="19.3292%" y="213" width="0.2071%" height="15" fill="rgb(247,18,42)"/><text x="19.5792%" y="223.50"></text></g><g><title>check_mod_liveness (305,193 samples, 0.18%)</title><rect x="19.3606%" y="197" width="0.1757%" height="15" fill="rgb(241,131,45)"/><text x="19.6106%" y="207.50"></text></g><g><title>misc_checking_2 (665,818 samples, 0.38%)</title><rect x="19.3284%" y="229" width="0.3833%" height="15" fill="rgb(249,31,29)"/><text x="19.5784%" y="239.50"></text></g><g><title>match_checking (304,724 samples, 0.18%)</title><rect x="19.5363%" y="213" width="0.1754%" height="15" fill="rgb(225,111,53)"/><text x="19.7863%" y="223.50"></text></g><g><title>check_match (283,844 samples, 0.16%)</title><rect x="19.5483%" y="197" width="0.1634%" height="15" fill="rgb(238,160,17)"/><text x="19.7983%" y="207.50"></text></g><g><title>death_checking (267,563 samples, 0.15%)</title><rect x="19.7945%" y="213" width="0.1540%" height="15" fill="rgb(214,148,48)"/><text x="20.0445%" y="223.50"></text></g><g><title>crate_lints (2,547,099 samples, 1.47%)</title><rect x="19.9493%" y="197" width="1.4664%" height="15" fill="rgb(232,36,49)"/><text x="20.1993%" y="207.50"></text></g><g><title>type_of (1,326,537 samples, 0.76%)</title><rect x="20.6520%" y="181" width="0.7637%" height="15" fill="rgb(209,103,24)"/><text x="20.9020%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,022,372 samples, 0.59%)</title><rect x="20.8271%" y="165" width="0.5886%" height="15" fill="rgb(229,88,8)"/><text x="21.0771%" y="175.50"></text></g><g><title>layout_of (276,094 samples, 0.16%)</title><rect x="21.6363%" y="53" width="0.1589%" height="15" fill="rgb(213,181,19)"/><text x="21.8863%" y="63.50"></text></g><g><title>layout_of (332,684 samples, 0.19%)</title><rect x="21.6201%" y="69" width="0.1915%" height="15" fill="rgb(254,191,54)"/><text x="21.8701%" y="79.50"></text></g><g><title>layout_of (394,435 samples, 0.23%)</title><rect x="21.5963%" y="85" width="0.2271%" height="15" fill="rgb(241,83,37)"/><text x="21.8463%" y="95.50"></text></g><g><title>layout_of (428,305 samples, 0.25%)</title><rect x="21.5806%" y="149" width="0.2466%" height="15" fill="rgb(233,36,39)"/><text x="21.8306%" y="159.50"></text></g><g><title>layout_of (422,895 samples, 0.24%)</title><rect x="21.5837%" y="133" width="0.2435%" height="15" fill="rgb(226,3,54)"/><text x="21.8337%" y="143.50"></text></g><g><title>layout_of (414,605 samples, 0.24%)</title><rect x="21.5885%" y="117" width="0.2387%" height="15" fill="rgb(245,192,40)"/><text x="21.8385%" y="127.50"></text></g><g><title>layout_of (409,755 samples, 0.24%)</title><rect x="21.5913%" y="101" width="0.2359%" height="15" fill="rgb(238,167,29)"/><text x="21.8413%" y="111.50"></text></g><g><title>lint_checking (3,263,886 samples, 1.88%)</title><rect x="19.9485%" y="213" width="1.8790%" height="15" fill="rgb(232,182,51)"/><text x="20.1985%" y="223.50">l..</text></g><g><title>module_lints (715,377 samples, 0.41%)</title><rect x="21.4157%" y="197" width="0.4118%" height="15" fill="rgb(231,60,39)"/><text x="21.6657%" y="207.50"></text></g><g><title>lint_mod (712,347 samples, 0.41%)</title><rect x="21.4174%" y="181" width="0.4101%" height="15" fill="rgb(208,69,12)"/><text x="21.6674%" y="191.50"></text></g><g><title>layout_of (435,875 samples, 0.25%)</title><rect x="21.5766%" y="165" width="0.2509%" height="15" fill="rgb(235,93,37)"/><text x="21.8266%" y="175.50"></text></g><g><title>privacy_access_levels (254,642 samples, 0.15%)</title><rect x="21.8275%" y="213" width="0.1466%" height="15" fill="rgb(213,116,39)"/><text x="22.0775%" y="223.50"></text></g><g><title>privacy_checking_modules (645,678 samples, 0.37%)</title><rect x="21.9741%" y="213" width="0.3717%" height="15" fill="rgb(222,207,29)"/><text x="22.2241%" y="223.50"></text></g><g><title>check_mod_privacy (643,798 samples, 0.37%)</title><rect x="21.9752%" y="197" width="0.3706%" height="15" fill="rgb(206,96,30)"/><text x="22.2252%" y="207.50"></text></g><g><title>misc_checking_3 (4,583,421 samples, 2.64%)</title><rect x="19.7117%" y="229" width="2.6387%" height="15" fill="rgb(218,138,4)"/><text x="19.9617%" y="239.50">mi..</text></g><g><title>impl_parent (2,312,309 samples, 1.33%)</title><rect x="24.6734%" y="165" width="1.3312%" height="15" fill="rgb(250,191,14)"/><text x="24.9234%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,448,441 samples, 0.83%)</title><rect x="25.1707%" y="149" width="0.8339%" height="15" fill="rgb(239,60,40)"/><text x="25.4207%" y="159.50"></text></g><g><title>impl_trait_ref (5,994,057 samples, 3.45%)</title><rect x="26.0045%" y="165" width="3.4508%" height="15" fill="rgb(206,27,48)"/><text x="26.2545%" y="175.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,140,185 samples, 2.96%)</title><rect x="26.4961%" y="149" width="2.9592%" height="15" fill="rgb(225,35,8)"/><text x="26.7461%" y="159.50">met..</text></g><g><title>trait_impls_of (858,188 samples, 0.49%)</title><rect x="29.4650%" y="165" width="0.4941%" height="15" fill="rgb(250,213,24)"/><text x="29.7150%" y="175.50"></text></g><g><title>implementations_of_trait (264,631 samples, 0.15%)</title><rect x="29.8067%" y="149" width="0.1523%" height="15" fill="rgb(247,123,22)"/><text x="30.0567%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (186,031 samples, 0.11%)</title><rect x="29.8520%" y="133" width="0.1071%" height="15" fill="rgb(231,138,38)"/><text x="30.1020%" y="143.50"></text></g><g><title>coherent_trait (13,149,637 samples, 7.57%)</title><rect x="22.3893%" y="197" width="7.5702%" height="15" fill="rgb(231,145,46)"/><text x="22.6393%" y="207.50">coherent_t..</text></g><g><title>specialization_graph_of (13,130,687 samples, 7.56%)</title><rect x="22.4002%" y="181" width="7.5593%" height="15" fill="rgb(251,118,11)"/><text x="22.6502%" y="191.50">specializa..</text></g><g><title>coherence_checking (13,220,947 samples, 7.61%)</title><rect x="22.3770%" y="213" width="7.6113%" height="15" fill="rgb(217,147,25)"/><text x="22.6270%" y="223.50">coherence_..</text></g><g><title>associated_item (563,087 samples, 0.32%)</title><rect x="33.7023%" y="149" width="0.3242%" height="15" fill="rgb(247,81,37)"/><text x="33.9523%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (517,197 samples, 0.30%)</title><rect x="33.7288%" y="133" width="0.2977%" height="15" fill="rgb(209,12,38)"/><text x="33.9788%" y="143.50"></text></g><g><title>associated_items (667,628 samples, 0.38%)</title><rect x="33.6511%" y="165" width="0.3844%" height="15" fill="rgb(227,1,9)"/><text x="33.9011%" y="175.50"></text></g><g><title>dropck_outlives (238,532 samples, 0.14%)</title><rect x="34.0536%" y="165" width="0.1373%" height="15" fill="rgb(248,47,43)"/><text x="34.3036%" y="175.50"></text></g><g><title>evaluate_obligation (1,205,352 samples, 0.69%)</title><rect x="34.1909%" y="165" width="0.6939%" height="15" fill="rgb(221,10,30)"/><text x="34.4409%" y="175.50"></text></g><g><title>trait_impls_of (324,212 samples, 0.19%)</title><rect x="34.6982%" y="149" width="0.1866%" height="15" fill="rgb(210,229,1)"/><text x="34.9482%" y="159.50"></text></g><g><title>predicates_of (186,733 samples, 0.11%)</title><rect x="35.2272%" y="165" width="0.1075%" height="15" fill="rgb(222,148,37)"/><text x="35.4772%" y="175.50"></text></g><g><title>associated_items (177,383 samples, 0.10%)</title><rect x="37.7823%" y="149" width="0.1021%" height="15" fill="rgb(234,67,33)"/><text x="38.0323%" y="159.50"></text></g><g><title>evaluate_obligation (546,395 samples, 0.31%)</title><rect x="37.9604%" y="149" width="0.3146%" height="15" fill="rgb(247,98,35)"/><text x="38.2104%" y="159.50"></text></g><g><title>is_copy_raw (239,484 samples, 0.14%)</title><rect x="38.3511%" y="149" width="0.1379%" height="15" fill="rgb(247,138,52)"/><text x="38.6011%" y="159.50"></text></g><g><title>evaluate_obligation (188,163 samples, 0.11%)</title><rect x="38.3807%" y="133" width="0.1083%" height="15" fill="rgb(213,79,30)"/><text x="38.6307%" y="143.50"></text></g><g><title>method_autoderef_steps (234,582 samples, 0.14%)</title><rect x="38.5057%" y="149" width="0.1350%" height="15" fill="rgb(246,177,23)"/><text x="38.7557%" y="159.50"></text></g><g><title>typeck (5,826,115 samples, 3.35%)</title><rect x="35.3669%" y="165" width="3.3541%" height="15" fill="rgb(230,62,27)"/><text x="35.6169%" y="175.50">typ..</text></g><g><title>item_bodies_checking (15,175,528 samples, 8.74%)</title><rect x="30.0018%" y="213" width="8.7365%" height="15" fill="rgb(216,154,8)"/><text x="30.2518%" y="223.50">item_bodies_..</text></g><g><title>typeck_item_bodies (15,173,088 samples, 8.74%)</title><rect x="30.0032%" y="197" width="8.7351%" height="15" fill="rgb(244,35,45)"/><text x="30.2532%" y="207.50">typeck_item_..</text></g><g><title>typeck (15,132,118 samples, 8.71%)</title><rect x="30.0268%" y="181" width="8.7115%" height="15" fill="rgb(251,115,12)"/><text x="30.2768%" y="191.50">typeck</text></g><g><title>mir_borrowck (411,105 samples, 0.24%)</title><rect x="41.0282%" y="133" width="0.2367%" height="15" fill="rgb(240,54,50)"/><text x="41.2782%" y="143.50"></text></g><g><title>mir_promoted (223,412 samples, 0.13%)</title><rect x="41.2648%" y="133" width="0.1286%" height="15" fill="rgb(233,84,52)"/><text x="41.5148%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (324,663 samples, 0.19%)</title><rect x="41.3935%" y="133" width="0.1869%" height="15" fill="rgb(207,117,47)"/><text x="41.6435%" y="143.50"></text></g><g><title>normalize_projection_ty (205,812 samples, 0.12%)</title><rect x="41.4619%" y="117" width="0.1185%" height="15" fill="rgb(249,43,39)"/><text x="41.7119%" y="127.50"></text></g><g><title>mir_borrowck (3,559,740 samples, 2.05%)</title><rect x="39.9052%" y="149" width="2.0493%" height="15" fill="rgb(209,38,44)"/><text x="40.1552%" y="159.50">m..</text></g><g><title>type_op_prove_predicate (597,099 samples, 0.34%)</title><rect x="41.6108%" y="133" width="0.3437%" height="15" fill="rgb(236,212,23)"/><text x="41.8608%" y="143.50"></text></g><g><title>adt_dtorck_constraint (334,733 samples, 0.19%)</title><rect x="45.0410%" y="53" width="0.1927%" height="15" fill="rgb(242,79,21)"/><text x="45.2910%" y="63.50"></text></g><g><title>dropck_outlives (602,557 samples, 0.35%)</title><rect x="44.9542%" y="69" width="0.3469%" height="15" fill="rgb(211,96,35)"/><text x="45.2042%" y="79.50"></text></g><g><title>evaluate_obligation (460,955 samples, 0.27%)</title><rect x="45.3029%" y="69" width="0.2654%" height="15" fill="rgb(253,215,40)"/><text x="45.5529%" y="79.50"></text></g><g><title>is_copy_raw (565,287 samples, 0.33%)</title><rect x="45.6582%" y="69" width="0.3254%" height="15" fill="rgb(211,81,21)"/><text x="45.9082%" y="79.50"></text></g><g><title>evaluate_obligation (487,295 samples, 0.28%)</title><rect x="45.7031%" y="53" width="0.2805%" height="15" fill="rgb(208,190,38)"/><text x="45.9531%" y="63.50"></text></g><g><title>trait_impls_of (208,752 samples, 0.12%)</title><rect x="45.8635%" y="37" width="0.1202%" height="15" fill="rgb(235,213,38)"/><text x="46.1135%" y="47.50"></text></g><g><title>mir_built (7,301,181 samples, 4.20%)</title><rect x="42.0578%" y="101" width="4.2033%" height="15" fill="rgb(237,122,38)"/><text x="42.3078%" y="111.50">mir_b..</text></g><g><title>typeck (6,931,687 samples, 3.99%)</title><rect x="42.2705%" y="85" width="3.9906%" height="15" fill="rgb(244,218,35)"/><text x="42.5205%" y="95.50">type..</text></g><g><title>needs_drop_raw (193,864 samples, 0.11%)</title><rect x="46.5514%" y="69" width="0.1116%" height="15" fill="rgb(240,68,47)"/><text x="46.8014%" y="79.50"></text></g><g><title>mir_built (755,319 samples, 0.43%)</title><rect x="46.3081%" y="85" width="0.4348%" height="15" fill="rgb(210,16,53)"/><text x="46.5581%" y="95.50"></text></g><g><title>mir_const (8,399,854 samples, 4.84%)</title><rect x="41.9839%" y="133" width="4.8358%" height="15" fill="rgb(235,124,12)"/><text x="42.2339%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (8,293,833 samples, 4.77%)</title><rect x="42.0449%" y="117" width="4.7747%" height="15" fill="rgb(224,169,11)"/><text x="42.2949%" y="127.50">unsafe..</text></g><g><title>unsafety_check_result (970,342 samples, 0.56%)</title><rect x="46.2610%" y="101" width="0.5586%" height="15" fill="rgb(250,166,2)"/><text x="46.5110%" y="111.50"></text></g><g><title>mir_promoted (8,456,005 samples, 4.87%)</title><rect x="41.9546%" y="149" width="4.8681%" height="15" fill="rgb(242,216,29)"/><text x="42.2046%" y="159.50">mir_pr..</text></g><g><title>item_types_checking (14,351,979 samples, 8.26%)</title><rect x="38.7383%" y="213" width="8.2624%" height="15" fill="rgb(230,116,27)"/><text x="38.9883%" y="223.50">item_types_c..</text></g><g><title>check_mod_item_types (14,348,419 samples, 8.26%)</title><rect x="38.7403%" y="197" width="8.2603%" height="15" fill="rgb(228,99,48)"/><text x="38.9903%" y="207.50">check_mod_it..</text></g><g><title>type_of (13,200,926 samples, 7.60%)</title><rect x="39.4009%" y="181" width="7.5997%" height="15" fill="rgb(253,11,6)"/><text x="39.6509%" y="191.50">type_of</text></g><g><title>mir_borrowck (13,166,926 samples, 7.58%)</title><rect x="39.4205%" y="165" width="7.5802%" height="15" fill="rgb(247,143,39)"/><text x="39.6705%" y="175.50">mir_borrow..</text></g><g><title>type_op_prove_predicate (237,003 samples, 0.14%)</title><rect x="46.8642%" y="149" width="0.1364%" height="15" fill="rgb(236,97,10)"/><text x="47.1142%" y="159.50"></text></g><g><title>fn_sig (200,673 samples, 0.12%)</title><rect x="47.1077%" y="181" width="0.1155%" height="15" fill="rgb(233,208,19)"/><text x="47.3577%" y="191.50"></text></g><g><title>generics_of (206,603 samples, 0.12%)</title><rect x="47.2232%" y="181" width="0.1189%" height="15" fill="rgb(216,164,2)"/><text x="47.4732%" y="191.50"></text></g><g><title>late_bound_vars_map (259,202 samples, 0.15%)</title><rect x="47.5402%" y="133" width="0.1492%" height="15" fill="rgb(220,129,5)"/><text x="47.7902%" y="143.50"></text></g><g><title>resolve_lifetimes (249,412 samples, 0.14%)</title><rect x="47.5458%" y="117" width="0.1436%" height="15" fill="rgb(242,17,10)"/><text x="47.7958%" y="127.50"></text></g><g><title>explicit_predicates_of (545,034 samples, 0.31%)</title><rect x="47.4095%" y="149" width="0.3138%" height="15" fill="rgb(242,107,0)"/><text x="47.6595%" y="159.50"></text></g><g><title>predicates_of (847,788 samples, 0.49%)</title><rect x="47.3604%" y="181" width="0.4881%" height="15" fill="rgb(251,28,31)"/><text x="47.6104%" y="191.50"></text></g><g><title>predicates_defined_on (813,808 samples, 0.47%)</title><rect x="47.3799%" y="165" width="0.4685%" height="15" fill="rgb(233,223,10)"/><text x="47.6299%" y="175.50"></text></g><g><title>inferred_outlives_of (217,423 samples, 0.13%)</title><rect x="47.7233%" y="149" width="0.1252%" height="15" fill="rgb(215,21,27)"/><text x="47.9733%" y="159.50"></text></g><g><title>inferred_outlives_crate (202,182 samples, 0.12%)</title><rect x="47.7321%" y="133" width="0.1164%" height="15" fill="rgb(232,23,21)"/><text x="47.9821%" y="143.50"></text></g><g><title>type_collecting (1,545,497 samples, 0.89%)</title><rect x="47.0016%" y="213" width="0.8897%" height="15" fill="rgb(244,5,23)"/><text x="47.2516%" y="223.50"></text></g><g><title>collect_mod_item_types (1,539,927 samples, 0.89%)</title><rect x="47.0049%" y="197" width="0.8865%" height="15" fill="rgb(226,81,46)"/><text x="47.2549%" y="207.50"></text></g><g><title>evaluate_obligation (720,907 samples, 0.42%)</title><rect x="48.8856%" y="181" width="0.4150%" height="15" fill="rgb(247,70,30)"/><text x="49.1356%" y="191.50"></text></g><g><title>implied_outlives_bounds (253,663 samples, 0.15%)</title><rect x="49.3091%" y="181" width="0.1460%" height="15" fill="rgb(212,68,19)"/><text x="49.5591%" y="191.50"></text></g><g><title>param_env (184,123 samples, 0.11%)</title><rect x="49.4551%" y="181" width="0.1060%" height="15" fill="rgb(240,187,13)"/><text x="49.7051%" y="191.50"></text></g><g><title>region_scope_tree (189,250 samples, 0.11%)</title><rect x="49.5955%" y="181" width="0.1090%" height="15" fill="rgb(223,113,26)"/><text x="49.8455%" y="191.50"></text></g><g><title>check_impl_item_well_formed (3,021,534 samples, 1.74%)</title><rect x="47.9668%" y="197" width="1.7395%" height="15" fill="rgb(206,192,2)"/><text x="48.2168%" y="207.50"></text></g><g><title>adt_def (244,753 samples, 0.14%)</title><rect x="50.4851%" y="133" width="0.1409%" height="15" fill="rgb(241,108,4)"/><text x="50.7351%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (244,093 samples, 0.14%)</title><rect x="50.4855%" y="117" width="0.1405%" height="15" fill="rgb(247,173,49)"/><text x="50.7355%" y="127.50"></text></g><g><title>adt_sized_constraint (187,461 samples, 0.11%)</title><rect x="50.6260%" y="133" width="0.1079%" height="15" fill="rgb(224,114,35)"/><text x="50.8760%" y="143.50"></text></g><g><title>adt_sized_constraint (444,184 samples, 0.26%)</title><rect x="50.4826%" y="149" width="0.2557%" height="15" fill="rgb(245,159,27)"/><text x="50.7326%" y="159.50"></text></g><g><title>adt_sized_constraint (473,864 samples, 0.27%)</title><rect x="50.4674%" y="165" width="0.2728%" height="15" fill="rgb(245,172,44)"/><text x="50.7174%" y="175.50"></text></g><g><title>adt_sized_constraint (499,314 samples, 0.29%)</title><rect x="50.4538%" y="181" width="0.2875%" height="15" fill="rgb(236,23,11)"/><text x="50.7038%" y="191.50"></text></g><g><title>param_env (250,332 samples, 0.14%)</title><rect x="50.8893%" y="181" width="0.1441%" height="15" fill="rgb(205,117,38)"/><text x="51.1393%" y="191.50"></text></g><g><title>analysis (68,672,273 samples, 39.53%)</title><rect x="11.6601%" y="245" width="39.5344%" height="15" fill="rgb(237,72,25)"/><text x="11.9101%" y="255.50">analysis</text></g><g><title>type_check_crate (50,102,986 samples, 28.84%)</title><rect x="22.3504%" y="229" width="28.8441%" height="15" fill="rgb(244,70,9)"/><text x="22.6004%" y="239.50">type_check_crate</text></g><g><title>wf_checking (5,734,154 samples, 3.30%)</title><rect x="47.8934%" y="213" width="3.3011%" height="15" fill="rgb(217,125,39)"/><text x="48.1434%" y="223.50">wf_..</text></g><g><title>check_item_well_formed (2,585,106 samples, 1.49%)</title><rect x="49.7063%" y="197" width="1.4882%" height="15" fill="rgb(235,36,10)"/><text x="49.9563%" y="207.50"></text></g><g><title>fn_abi_of_instance (366,553 samples, 0.21%)</title><rect x="51.8651%" y="213" width="0.2110%" height="15" fill="rgb(251,123,47)"/><text x="52.1151%" y="223.50"></text></g><g><title>codegen_module (1,029,422 samples, 0.59%)</title><rect x="51.5141%" y="229" width="0.5926%" height="15" fill="rgb(221,13,13)"/><text x="51.7641%" y="239.50"></text></g><g><title>optimized_mir (250,253 samples, 0.14%)</title><rect x="52.1644%" y="181" width="0.1441%" height="15" fill="rgb(238,131,9)"/><text x="52.4144%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (333,064 samples, 0.19%)</title><rect x="52.1189%" y="197" width="0.1917%" height="15" fill="rgb(211,50,8)"/><text x="52.3689%" y="207.50"></text></g><g><title>monomorphization_collector (356,054 samples, 0.20%)</title><rect x="52.1179%" y="213" width="0.2050%" height="15" fill="rgb(245,182,24)"/><text x="52.3679%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (409,334 samples, 0.24%)</title><rect x="52.1069%" y="229" width="0.2357%" height="15" fill="rgb(242,14,37)"/><text x="52.3569%" y="239.50"></text></g><g><title>codegen_crate (2,098,853 samples, 1.21%)</title><rect x="51.2006%" y="245" width="1.2083%" height="15" fill="rgb(246,228,12)"/><text x="51.4506%" y="255.50"></text></g><g><title>codegen_module_optimize (7,063,168 samples, 4.07%)</title><rect x="52.4089%" y="245" width="4.0662%" height="15" fill="rgb(213,55,15)"/><text x="52.6589%" y="255.50">code..</text></g><g><title>LLVM_module_optimize (6,103,737 samples, 3.51%)</title><rect x="52.9612%" y="229" width="3.5139%" height="15" fill="rgb(209,9,3)"/><text x="53.2112%" y="239.50">LLV..</text></g><g><title>LLVM_lto_optimize (2,638,789 samples, 1.52%)</title><rect x="56.8432%" y="229" width="1.5191%" height="15" fill="rgb(230,59,30)"/><text x="57.0932%" y="239.50"></text></g><g><title>LLVM_module_codegen (8,666,457 samples, 4.99%)</title><rect x="58.3624%" y="229" width="4.9893%" height="15" fill="rgb(209,121,21)"/><text x="58.6124%" y="239.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (8,542,996 samples, 4.92%)</title><rect x="58.4334%" y="213" width="4.9182%" height="15" fill="rgb(220,109,13)"/><text x="58.6834%" y="223.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (12,012,943 samples, 6.92%)</title><rect x="56.4751%" y="245" width="6.9158%" height="15" fill="rgb(232,18,1)"/><text x="56.7251%" y="255.50">codegen_m..</text></g><g><title>macro_expand_crate (26,051,600 samples, 15.00%)</title><rect x="63.6214%" y="229" width="14.9978%" height="15" fill="rgb(215,41,42)"/><text x="63.8714%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (26,035,920 samples, 14.99%)</title><rect x="63.6304%" y="213" width="14.9888%" height="15" fill="rgb(224,123,36)"/><text x="63.8804%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (12,942,394 samples, 7.45%)</title><rect x="71.1683%" y="197" width="7.4509%" height="15" fill="rgb(240,125,3)"/><text x="71.4183%" y="207.50">metadata_r..</text></g><g><title>metadata_register_crate (9,765,478 samples, 5.62%)</title><rect x="72.9973%" y="181" width="5.6220%" height="15" fill="rgb(205,98,50)"/><text x="73.2473%" y="191.50">metadat..</text></g><g><title>metadata_register_crate (345,854 samples, 0.20%)</title><rect x="78.4201%" y="165" width="0.1991%" height="15" fill="rgb(205,185,37)"/><text x="78.6701%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (253,983 samples, 0.15%)</title><rect x="78.6208%" y="229" width="0.1462%" height="15" fill="rgb(238,207,15)"/><text x="78.8708%" y="239.50"></text></g><g><title>late_resolve_crate (1,128,913 samples, 0.65%)</title><rect x="78.8172%" y="213" width="0.6499%" height="15" fill="rgb(213,199,42)"/><text x="79.0672%" y="223.50"></text></g><g><title>configure_and_expand (27,984,901 samples, 16.11%)</title><rect x="63.3909%" y="245" width="16.1108%" height="15" fill="rgb(235,201,11)"/><text x="63.6409%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,276,274 samples, 0.73%)</title><rect x="78.7670%" y="229" width="0.7347%" height="15" fill="rgb(207,46,11)"/><text x="79.0170%" y="239.50"></text></g><g><title>early_lint_checks (182,842 samples, 0.11%)</title><rect x="79.5667%" y="245" width="0.1053%" height="15" fill="rgb(241,35,35)"/><text x="79.8167%" y="255.50"></text></g><g><title>free_global_ctxt (3,795,632 samples, 2.19%)</title><rect x="79.6719%" y="245" width="2.1851%" height="15" fill="rgb(243,32,47)"/><text x="79.9219%" y="255.50">f..</text></g><g><title>layout_of (253,005 samples, 0.15%)</title><rect x="84.4683%" y="197" width="0.1457%" height="15" fill="rgb(247,202,23)"/><text x="84.7183%" y="207.50"></text></g><g><title>layout_of (674,362 samples, 0.39%)</title><rect x="84.2587%" y="213" width="0.3882%" height="15" fill="rgb(219,102,11)"/><text x="84.5087%" y="223.50"></text></g><g><title>needs_drop_raw (662,458 samples, 0.38%)</title><rect x="86.3484%" y="197" width="0.3814%" height="15" fill="rgb(243,110,44)"/><text x="86.5984%" y="207.50"></text></g><g><title>is_copy_raw (551,997 samples, 0.32%)</title><rect x="86.4120%" y="181" width="0.3178%" height="15" fill="rgb(222,74,54)"/><text x="86.6620%" y="191.50"></text></g><g><title>evaluate_obligation (453,067 samples, 0.26%)</title><rect x="86.4689%" y="165" width="0.2608%" height="15" fill="rgb(216,99,12)"/><text x="86.7189%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,651,729 samples, 2.10%)</title><rect x="84.6469%" y="213" width="2.1023%" height="15" fill="rgb(226,22,26)"/><text x="84.8969%" y="223.50">m..</text></g><g><title>optimized_mir (6,956,808 samples, 4.01%)</title><rect x="82.7701%" y="229" width="4.0050%" height="15" fill="rgb(217,163,10)"/><text x="83.0201%" y="239.50">opti..</text></g><g><title>generate_crate_metadata (8,605,225 samples, 4.95%)</title><rect x="81.8571%" y="245" width="4.9540%" height="15" fill="rgb(213,25,53)"/><text x="82.1071%" y="255.50">genera..</text></g><g><title>hir_lowering (1,615,688 samples, 0.93%)</title><rect x="86.8111%" y="245" width="0.9301%" height="15" fill="rgb(252,105,26)"/><text x="87.0611%" y="255.50"></text></g><g><title>finish_ongoing_codegen (15,234,969 samples, 8.77%)</title><rect x="87.7480%" y="229" width="8.7707%" height="15" fill="rgb(220,39,43)"/><text x="87.9980%" y="239.50">finish_ongoi..</text></g><g><title>link_crate (789,228 samples, 0.45%)</title><rect x="96.5187%" y="229" width="0.4544%" height="15" fill="rgb(229,68,48)"/><text x="96.7687%" y="239.50"></text></g><g><title>link_binary (777,578 samples, 0.45%)</title><rect x="96.5254%" y="213" width="0.4476%" height="15" fill="rgb(252,8,32)"/><text x="96.7754%" y="223.50"></text></g><g><title>link_rlib (494,715 samples, 0.28%)</title><rect x="96.6883%" y="197" width="0.2848%" height="15" fill="rgb(223,20,43)"/><text x="96.9383%" y="207.50"></text></g><g><title>link (16,042,728 samples, 9.24%)</title><rect x="87.7412%" y="245" width="9.2357%" height="15" fill="rgb(229,81,49)"/><text x="87.9912%" y="255.50">link</text></g><g><title>parse_crate (3,831,722 samples, 2.21%)</title><rect x="96.9770%" y="245" width="2.2059%" height="15" fill="rgb(236,28,36)"/><text x="97.2270%" y="255.50">p..</text></g><g><title>prepare_outputs (203,942 samples, 0.12%)</title><rect x="99.1874%" y="245" width="0.1174%" height="15" fill="rgb(249,185,26)"/><text x="99.4374%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (773,139 samples, 0.45%)</title><rect x="99.3048%" y="245" width="0.4451%" height="15" fill="rgb(249,174,33)"/><text x="99.5548%" y="255.50"></text></g><g><title>all (173,702,529 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (173,702,529 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (371,625 samples, 0.21%)</title><rect x="99.7861%" y="245" width="0.2139%" height="15" fill="rgb(250,127,30)"/><text x="100.0361%" y="255.50"></text></g></svg></svg>