<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (138,761,243 samples, 18.62%)</title><rect x="0.0738%" y="277" width="18.6241%" height="15" fill="rgb(227,0,7)"/><text x="0.3238%" y="287.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,072,254 samples, 0.14%)</title><rect x="20.9745%" y="165" width="0.1439%" height="15" fill="rgb(217,0,24)"/><text x="21.2245%" y="175.50"></text></g><g><title>is_copy_raw (769,508 samples, 0.10%)</title><rect x="21.0151%" y="149" width="0.1033%" height="15" fill="rgb(221,193,54)"/><text x="21.2651%" y="159.50"></text></g><g><title>specialization_graph_of (974,630 samples, 0.13%)</title><rect x="21.1662%" y="149" width="0.1308%" height="15" fill="rgb(248,212,6)"/><text x="21.4162%" y="159.50"></text></g><g><title>resolve_instance (1,384,173 samples, 0.19%)</title><rect x="21.1184%" y="165" width="0.1858%" height="15" fill="rgb(208,68,35)"/><text x="21.3684%" y="175.50"></text></g><g><title>thir_body (875,029 samples, 0.12%)</title><rect x="21.3069%" y="165" width="0.1174%" height="15" fill="rgb(232,128,0)"/><text x="21.5569%" y="175.50"></text></g><g><title>mir_const (7,464,541 samples, 1.00%)</title><rect x="20.4254%" y="213" width="1.0019%" height="15" fill="rgb(207,160,47)"/><text x="20.6754%" y="223.50"></text></g><g><title>unsafety_check_result (6,648,202 samples, 0.89%)</title><rect x="20.5350%" y="197" width="0.8923%" height="15" fill="rgb(228,23,34)"/><text x="20.7850%" y="207.50"></text></g><g><title>mir_built (5,922,813 samples, 0.79%)</title><rect x="20.6324%" y="181" width="0.7949%" height="15" fill="rgb(218,30,26)"/><text x="20.8824%" y="191.50"></text></g><g><title>mir_const (818,949 samples, 0.11%)</title><rect x="21.4702%" y="197" width="0.1099%" height="15" fill="rgb(220,122,19)"/><text x="21.7202%" y="207.50"></text></g><g><title>mir_const_qualif (1,168,544 samples, 0.16%)</title><rect x="21.4273%" y="213" width="0.1568%" height="15" fill="rgb(250,228,42)"/><text x="21.6773%" y="223.50"></text></g><g><title>mir_promoted (9,404,501 samples, 1.26%)</title><rect x="20.3223%" y="229" width="1.2622%" height="15" fill="rgb(240,193,28)"/><text x="20.5723%" y="239.50"></text></g><g><title>type_op_normalize_fn_sig (1,141,285 samples, 0.15%)</title><rect x="21.6282%" y="229" width="0.1532%" height="15" fill="rgb(216,20,37)"/><text x="21.8782%" y="239.50"></text></g><g><title>normalize_projection_ty (805,653 samples, 0.11%)</title><rect x="21.6732%" y="213" width="0.1081%" height="15" fill="rgb(206,188,39)"/><text x="21.9232%" y="223.50"></text></g><g><title>type_op_prove_predicate (2,614,499 samples, 0.35%)</title><rect x="21.8144%" y="229" width="0.3509%" height="15" fill="rgb(217,207,13)"/><text x="22.0644%" y="239.50"></text></g><g><title>MIR_borrow_checking (25,581,782 samples, 3.43%)</title><rect x="18.7329%" y="261" width="3.4335%" height="15" fill="rgb(231,73,38)"/><text x="18.9829%" y="271.50">MIR..</text></g><g><title>mir_borrowck (25,466,761 samples, 3.42%)</title><rect x="18.7484%" y="245" width="3.4181%" height="15" fill="rgb(225,20,46)"/><text x="18.9984%" y="255.50">mir..</text></g><g><title>misc_checking_1 (1,052,141 samples, 0.14%)</title><rect x="22.2411%" y="261" width="0.1412%" height="15" fill="rgb(210,31,41)"/><text x="22.4911%" y="271.50"></text></g><g><title>misc_checking_2 (1,009,221 samples, 0.14%)</title><rect x="22.3823%" y="261" width="0.1355%" height="15" fill="rgb(221,200,47)"/><text x="22.6323%" y="271.50"></text></g><g><title>mir_for_ctfe (4,333,316 samples, 0.58%)</title><rect x="22.7577%" y="101" width="0.5816%" height="15" fill="rgb(226,26,5)"/><text x="23.0077%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,200,234 samples, 0.56%)</title><rect x="22.7756%" y="85" width="0.5637%" height="15" fill="rgb(249,33,26)"/><text x="23.0256%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,189,364 samples, 0.56%)</title><rect x="22.7771%" y="69" width="0.5623%" height="15" fill="rgb(235,183,28)"/><text x="23.0271%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,186,274 samples, 0.56%)</title><rect x="22.7775%" y="53" width="0.5619%" height="15" fill="rgb(221,5,38)"/><text x="23.0275%" y="63.50"></text></g><g><title>eval_to_allocation_raw (4,178,584 samples, 0.56%)</title><rect x="22.7785%" y="37" width="0.5608%" height="15" fill="rgb(247,18,42)"/><text x="23.0285%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,409,767 samples, 0.59%)</title><rect x="22.7485%" y="149" width="0.5919%" height="15" fill="rgb(241,131,45)"/><text x="22.9985%" y="159.50"></text></g><g><title>eval_to_const_value_raw (4,405,587 samples, 0.59%)</title><rect x="22.7491%" y="133" width="0.5913%" height="15" fill="rgb(249,31,29)"/><text x="22.9991%" y="143.50"></text></g><g><title>eval_to_allocation_raw (4,400,957 samples, 0.59%)</title><rect x="22.7497%" y="117" width="0.5907%" height="15" fill="rgb(225,111,53)"/><text x="22.9997%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,521,938 samples, 0.61%)</title><rect x="22.7345%" y="213" width="0.6069%" height="15" fill="rgb(238,160,17)"/><text x="22.9845%" y="223.50"></text></g><g><title>eval_to_const_value_raw (4,520,498 samples, 0.61%)</title><rect x="22.7347%" y="197" width="0.6067%" height="15" fill="rgb(214,148,48)"/><text x="22.9847%" y="207.50"></text></g><g><title>eval_to_allocation_raw (4,518,078 samples, 0.61%)</title><rect x="22.7350%" y="181" width="0.6064%" height="15" fill="rgb(232,36,49)"/><text x="22.9850%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,431,907 samples, 0.59%)</title><rect x="22.7466%" y="165" width="0.5948%" height="15" fill="rgb(209,103,24)"/><text x="22.9966%" y="175.50"></text></g><g><title>crate_lints (6,781,802 samples, 0.91%)</title><rect x="22.6003%" y="229" width="0.9102%" height="15" fill="rgb(229,88,8)"/><text x="22.8503%" y="239.50"></text></g><g><title>type_of (1,097,943 samples, 0.15%)</title><rect x="23.3631%" y="213" width="0.1474%" height="15" fill="rgb(213,181,19)"/><text x="23.6131%" y="223.50"></text></g><g><title>metadata_decode_entry_type_of (868,260 samples, 0.12%)</title><rect x="23.3940%" y="197" width="0.1165%" height="15" fill="rgb(254,191,54)"/><text x="23.6440%" y="207.50"></text></g><g><title>lint_checking (7,188,407 samples, 0.96%)</title><rect x="22.6000%" y="245" width="0.9648%" height="15" fill="rgb(241,83,37)"/><text x="22.8500%" y="255.50"></text></g><g><title>privacy_checking_modules (760,378 samples, 0.10%)</title><rect x="23.5977%" y="245" width="0.1021%" height="15" fill="rgb(233,36,39)"/><text x="23.8477%" y="255.50"></text></g><g><title>check_mod_privacy (756,978 samples, 0.10%)</title><rect x="23.5981%" y="229" width="0.1016%" height="15" fill="rgb(226,3,54)"/><text x="23.8481%" y="239.50"></text></g><g><title>misc_checking_3 (8,818,354 samples, 1.18%)</title><rect x="22.5178%" y="261" width="1.1836%" height="15" fill="rgb(245,192,40)"/><text x="22.7678%" y="271.50"></text></g><g><title>impl_parent (2,405,332 samples, 0.32%)</title><rect x="24.3117%" y="197" width="0.3228%" height="15" fill="rgb(238,167,29)"/><text x="24.5617%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,288,235 samples, 0.17%)</title><rect x="24.4616%" y="181" width="0.1729%" height="15" fill="rgb(232,182,51)"/><text x="24.7116%" y="191.50"></text></g><g><title>impl_trait_ref (4,812,822 samples, 0.65%)</title><rect x="24.6345%" y="197" width="0.6460%" height="15" fill="rgb(231,60,39)"/><text x="24.8845%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,870,145 samples, 0.52%)</title><rect x="24.7610%" y="181" width="0.5194%" height="15" fill="rgb(208,69,12)"/><text x="25.0110%" y="191.50"></text></g><g><title>coherent_trait (12,445,223 samples, 1.67%)</title><rect x="23.7116%" y="229" width="1.6704%" height="15" fill="rgb(235,93,37)"/><text x="23.9616%" y="239.50"></text></g><g><title>specialization_graph_of (11,712,635 samples, 1.57%)</title><rect x="23.8099%" y="213" width="1.5720%" height="15" fill="rgb(213,116,39)"/><text x="24.0599%" y="223.50"></text></g><g><title>trait_impls_of (754,569 samples, 0.10%)</title><rect x="25.2807%" y="197" width="0.1013%" height="15" fill="rgb(222,207,29)"/><text x="25.5307%" y="207.50"></text></g><g><title>coherence_checking (12,514,643 samples, 1.68%)</title><rect x="23.7090%" y="245" width="1.6797%" height="15" fill="rgb(206,96,30)"/><text x="23.9590%" y="255.50"></text></g><g><title>evaluate_obligation (2,988,672 samples, 0.40%)</title><rect x="27.7544%" y="197" width="0.4011%" height="15" fill="rgb(218,138,4)"/><text x="28.0044%" y="207.50"></text></g><g><title>specializes (799,819 samples, 0.11%)</title><rect x="29.9988%" y="165" width="0.1073%" height="15" fill="rgb(250,191,14)"/><text x="30.2488%" y="175.50"></text></g><g><title>evaluate_obligation (2,784,048 samples, 0.37%)</title><rect x="29.7821%" y="181" width="0.3737%" height="15" fill="rgb(239,60,40)"/><text x="30.0321%" y="191.50"></text></g><g><title>generics_of (932,424 samples, 0.13%)</title><rect x="30.1661%" y="181" width="0.1251%" height="15" fill="rgb(206,27,48)"/><text x="30.4161%" y="191.50"></text></g><g><title>typeck (15,163,130 samples, 2.04%)</title><rect x="28.4318%" y="197" width="2.0352%" height="15" fill="rgb(225,35,8)"/><text x="28.6818%" y="207.50">t..</text></g><g><title>item_bodies_checking (37,838,721 samples, 5.08%)</title><rect x="25.3931%" y="245" width="5.0786%" height="15" fill="rgb(250,213,24)"/><text x="25.6431%" y="255.50">item_b..</text></g><g><title>typeck_item_bodies (37,836,581 samples, 5.08%)</title><rect x="25.3934%" y="229" width="5.0783%" height="15" fill="rgb(247,123,22)"/><text x="25.6434%" y="239.50">typeck..</text></g><g><title>typeck (37,765,070 samples, 5.07%)</title><rect x="25.4030%" y="213" width="5.0687%" height="15" fill="rgb(231,138,38)"/><text x="25.6530%" y="223.50">typeck</text></g><g><title>item_types_checking (1,104,612 samples, 0.15%)</title><rect x="30.4717%" y="245" width="0.1483%" height="15" fill="rgb(231,145,46)"/><text x="30.7217%" y="255.50"></text></g><g><title>check_mod_item_types (1,100,492 samples, 0.15%)</title><rect x="30.4722%" y="229" width="0.1477%" height="15" fill="rgb(251,118,11)"/><text x="30.7222%" y="239.50"></text></g><g><title>type_collecting (1,806,839 samples, 0.24%)</title><rect x="30.6201%" y="245" width="0.2425%" height="15" fill="rgb(217,147,25)"/><text x="30.8701%" y="255.50"></text></g><g><title>collect_mod_item_types (1,799,287 samples, 0.24%)</title><rect x="30.6211%" y="229" width="0.2415%" height="15" fill="rgb(247,81,37)"/><text x="30.8711%" y="239.50"></text></g><g><title>check_impl_item_well_formed (2,479,275 samples, 0.33%)</title><rect x="30.8849%" y="229" width="0.3328%" height="15" fill="rgb(209,12,38)"/><text x="31.1349%" y="239.50"></text></g><g><title>check_item_well_formed (1,998,163 samples, 0.27%)</title><rect x="31.2177%" y="229" width="0.2682%" height="15" fill="rgb(227,1,9)"/><text x="31.4677%" y="239.50"></text></g><g><title>analysis (95,404,313 samples, 12.80%)</title><rect x="18.6979%" y="277" width="12.8049%" height="15" fill="rgb(248,47,43)"/><text x="18.9479%" y="287.50">analysis</text></g><g><title>type_check_crate (58,125,767 samples, 7.80%)</title><rect x="23.7014%" y="261" width="7.8015%" height="15" fill="rgb(221,10,30)"/><text x="23.9514%" y="271.50">type_check_..</text></g><g><title>wf_checking (4,765,590 samples, 0.64%)</title><rect x="30.8632%" y="245" width="0.6396%" height="15" fill="rgb(210,229,1)"/><text x="31.1132%" y="255.50"></text></g><g><title>layout_of (954,891 samples, 0.13%)</title><rect x="33.6431%" y="229" width="0.1282%" height="15" fill="rgb(222,148,37)"/><text x="33.8931%" y="239.50"></text></g><g><title>param_env (1,320,499 samples, 0.18%)</title><rect x="33.7713%" y="229" width="0.1772%" height="15" fill="rgb(234,67,33)"/><text x="34.0213%" y="239.50"></text></g><g><title>fn_abi_of_instance (4,911,631 samples, 0.66%)</title><rect x="33.3352%" y="245" width="0.6592%" height="15" fill="rgb(247,98,35)"/><text x="33.5852%" y="255.50"></text></g><g><title>codegen_module (17,528,605 samples, 2.35%)</title><rect x="31.7311%" y="261" width="2.3526%" height="15" fill="rgb(247,138,52)"/><text x="31.9811%" y="271.50">c..</text></g><g><title>codegen_fn_attrs (932,905 samples, 0.13%)</title><rect x="34.1991%" y="213" width="0.1252%" height="15" fill="rgb(213,79,30)"/><text x="34.4491%" y="223.50"></text></g><g><title>metadata_decode_entry_optimized_mir (865,567 samples, 0.12%)</title><rect x="34.5929%" y="197" width="0.1162%" height="15" fill="rgb(246,177,23)"/><text x="34.8429%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,077,212 samples, 0.14%)</title><rect x="34.7091%" y="197" width="0.1446%" height="15" fill="rgb(230,62,27)"/><text x="34.9591%" y="207.50"></text></g><g><title>optimized_mir (4,106,711 samples, 0.55%)</title><rect x="34.3544%" y="213" width="0.5512%" height="15" fill="rgb(216,154,8)"/><text x="34.6044%" y="223.50"></text></g><g><title>codegen_fulfill_obligation (1,170,265 samples, 0.16%)</title><rect x="34.9518%" y="197" width="0.1571%" height="15" fill="rgb(244,35,45)"/><text x="35.2018%" y="207.50"></text></g><g><title>specialization_graph_of (1,402,732 samples, 0.19%)</title><rect x="35.1374%" y="197" width="0.1883%" height="15" fill="rgb(251,115,12)"/><text x="35.3874%" y="207.50"></text></g><g><title>resolve_instance (3,291,697 samples, 0.44%)</title><rect x="34.9056%" y="213" width="0.4418%" height="15" fill="rgb(240,54,50)"/><text x="35.1556%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (9,696,133 samples, 1.30%)</title><rect x="34.0875%" y="229" width="1.3014%" height="15" fill="rgb(233,84,52)"/><text x="34.3375%" y="239.50"></text></g><g><title>monomorphization_collector (9,747,244 samples, 1.31%)</title><rect x="34.0872%" y="245" width="1.3082%" height="15" fill="rgb(207,117,47)"/><text x="34.3372%" y="255.50"></text></g><g><title>assert_symbols_are_distinct (761,208 samples, 0.10%)</title><rect x="35.3958%" y="229" width="0.1022%" height="15" fill="rgb(249,43,39)"/><text x="35.6458%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (10,788,245 samples, 1.45%)</title><rect x="34.0842%" y="261" width="1.4480%" height="15" fill="rgb(209,38,44)"/><text x="34.3342%" y="271.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,018,870 samples, 0.14%)</title><rect x="35.3954%" y="245" width="0.1367%" height="15" fill="rgb(236,212,23)"/><text x="35.6454%" y="255.50"></text></g><g><title>codegen_crate (30,073,339 samples, 4.04%)</title><rect x="31.5039%" y="277" width="4.0364%" height="15" fill="rgb(242,79,21)"/><text x="31.7539%" y="287.50">code..</text></g><g><title>codegen_module_optimize (132,722,770 samples, 17.81%)</title><rect x="35.5402%" y="277" width="17.8137%" height="15" fill="rgb(211,96,35)"/><text x="35.7902%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (123,878,426 samples, 16.63%)</title><rect x="36.7273%" y="261" width="16.6266%" height="15" fill="rgb(253,215,40)"/><text x="36.9773%" y="271.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (69,265,275 samples, 9.30%)</title><rect x="54.2734%" y="261" width="9.2966%" height="15" fill="rgb(211,81,21)"/><text x="54.5234%" y="271.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (98,518,516 samples, 13.22%)</title><rect x="63.5700%" y="261" width="13.2229%" height="15" fill="rgb(208,190,38)"/><text x="63.8200%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (97,459,726 samples, 13.08%)</title><rect x="63.7121%" y="245" width="13.0808%" height="15" fill="rgb(235,213,38)"/><text x="63.9621%" y="255.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (2,637,277 samples, 0.35%)</title><rect x="76.7929%" y="261" width="0.3540%" height="15" fill="rgb(237,122,38)"/><text x="77.0429%" y="271.50"></text></g><g><title>codegen_module_perform_lto (177,721,265 samples, 23.85%)</title><rect x="53.3539%" y="277" width="23.8532%" height="15" fill="rgb(244,218,35)"/><text x="53.6039%" y="287.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,901,861 samples, 0.26%)</title><rect x="79.9778%" y="229" width="0.2553%" height="15" fill="rgb(240,68,47)"/><text x="80.2278%" y="239.50"></text></g><g><title>macro_expand_crate (22,241,677 samples, 2.99%)</title><rect x="77.2918%" y="261" width="2.9852%" height="15" fill="rgb(210,16,53)"/><text x="77.5418%" y="271.50">mac..</text></g><g><title>expand_crate (22,229,177 samples, 2.98%)</title><rect x="77.2935%" y="245" width="2.9835%" height="15" fill="rgb(235,124,12)"/><text x="77.5435%" y="255.50">exp..</text></g><g><title>late_resolve_crate (4,143,534 samples, 0.56%)</title><rect x="80.3396%" y="245" width="0.5561%" height="15" fill="rgb(224,169,11)"/><text x="80.5896%" y="255.50"></text></g><g><title>configure_and_expand (27,677,364 samples, 3.71%)</title><rect x="77.2072%" y="277" width="3.7148%" height="15" fill="rgb(250,166,2)"/><text x="77.4572%" y="287.50">conf..</text></g><g><title>resolve_crate (4,705,860 samples, 0.63%)</title><rect x="80.2903%" y="261" width="0.6316%" height="15" fill="rgb(242,216,29)"/><text x="80.5403%" y="271.50"></text></g><g><title>free_global_ctxt (5,992,084 samples, 0.80%)</title><rect x="80.9928%" y="277" width="0.8042%" height="15" fill="rgb(230,116,27)"/><text x="81.2428%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,267,570 samples, 0.30%)</title><rect x="82.3396%" y="245" width="0.3043%" height="15" fill="rgb(228,99,48)"/><text x="82.5896%" y="255.50"></text></g><g><title>optimized_mir (4,627,664 samples, 0.62%)</title><rect x="82.0243%" y="261" width="0.6211%" height="15" fill="rgb(253,11,6)"/><text x="82.2743%" y="271.50"></text></g><g><title>generate_crate_metadata (6,368,077 samples, 0.85%)</title><rect x="81.7971%" y="277" width="0.8547%" height="15" fill="rgb(247,143,39)"/><text x="82.0471%" y="287.50"></text></g><g><title>hir_lowering (3,499,918 samples, 0.47%)</title><rect x="82.6518%" y="277" width="0.4697%" height="15" fill="rgb(236,97,10)"/><text x="82.9018%" y="287.50"></text></g><g><title>finish_ongoing_codegen (121,295,608 samples, 16.28%)</title><rect x="83.1237%" y="261" width="16.2799%" height="15" fill="rgb(233,208,19)"/><text x="83.3737%" y="271.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,134,702 samples, 0.15%)</title><rect x="99.4036%" y="261" width="0.1523%" height="15" fill="rgb(216,164,2)"/><text x="99.6536%" y="271.50"></text></g><g><title>link_binary (1,121,162 samples, 0.15%)</title><rect x="99.4054%" y="245" width="0.1505%" height="15" fill="rgb(220,129,5)"/><text x="99.6554%" y="255.50"></text></g><g><title>link (122,455,460 samples, 16.44%)</title><rect x="83.1215%" y="277" width="16.4356%" height="15" fill="rgb(242,17,10)"/><text x="83.3715%" y="287.50">link</text></g><g><title>self_profile_alloc_query_strings (1,873,819 samples, 0.25%)</title><rect x="99.6912%" y="277" width="0.2515%" height="15" fill="rgb(242,107,0)"/><text x="99.9412%" y="287.50"></text></g><g><title>all (745,061,348 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (745,061,348 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="303.50">rustc</text></g></svg></svg>