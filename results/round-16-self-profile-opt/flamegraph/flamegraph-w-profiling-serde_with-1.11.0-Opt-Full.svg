<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (147,928,979 samples, 4.94%)</title><rect x="0.0517%" y="181" width="4.9406%" height="15" fill="rgb(227,0,7)"/><text x="0.3017%" y="191.50">LLVM_p..</text></g><g><title>implied_outlives_bounds (4,909,014 samples, 0.16%)</title><rect x="13.4005%" y="133" width="0.1640%" height="15" fill="rgb(217,0,24)"/><text x="13.6505%" y="143.50"></text></g><g><title>is_sized_raw (3,970,502 samples, 0.13%)</title><rect x="13.5992%" y="133" width="0.1326%" height="15" fill="rgb(221,193,54)"/><text x="13.8492%" y="143.50"></text></g><g><title>is_copy_raw (48,597,930 samples, 1.62%)</title><rect x="16.5465%" y="53" width="1.6231%" height="15" fill="rgb(248,212,6)"/><text x="16.7965%" y="63.50"></text></g><g><title>evaluate_obligation (39,134,787 samples, 1.31%)</title><rect x="16.8626%" y="37" width="1.3070%" height="15" fill="rgb(208,68,35)"/><text x="17.1126%" y="47.50"></text></g><g><title>needs_drop_raw (55,910,930 samples, 1.87%)</title><rect x="16.3265%" y="69" width="1.8673%" height="15" fill="rgb(232,128,0)"/><text x="16.5765%" y="79.50">n..</text></g><g><title>codegen_fulfill_obligation (11,240,071 samples, 0.38%)</title><rect x="18.2876%" y="53" width="0.3754%" height="15" fill="rgb(207,160,47)"/><text x="18.5376%" y="63.50"></text></g><g><title>resolve_instance (16,095,273 samples, 0.54%)</title><rect x="18.1950%" y="69" width="0.5376%" height="15" fill="rgb(228,23,34)"/><text x="18.4450%" y="79.50"></text></g><g><title>thir_body (13,791,563 samples, 0.46%)</title><rect x="18.7449%" y="69" width="0.4606%" height="15" fill="rgb(218,30,26)"/><text x="18.9949%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,058,220 samples, 0.14%)</title><rect x="19.2123%" y="69" width="0.1355%" height="15" fill="rgb(220,122,19)"/><text x="19.4623%" y="79.50"></text></g><g><title>mir_const (156,742,634 samples, 5.23%)</title><rect x="14.1153%" y="117" width="5.2349%" height="15" fill="rgb(250,228,42)"/><text x="14.3653%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (143,438,904 samples, 4.79%)</title><rect x="14.5596%" y="101" width="4.7906%" height="15" fill="rgb(240,193,28)"/><text x="14.8096%" y="111.50">unsafe..</text></g><g><title>mir_built (135,022,590 samples, 4.51%)</title><rect x="14.8407%" y="85" width="4.5095%" height="15" fill="rgb(216,20,37)"/><text x="15.0907%" y="95.50">mir_b..</text></g><g><title>mir_promoted (169,393,819 samples, 5.66%)</title><rect x="13.7531%" y="133" width="5.6574%" height="15" fill="rgb(206,188,39)"/><text x="14.0031%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (16,415,605 samples, 0.55%)</title><rect x="19.4110%" y="133" width="0.5483%" height="15" fill="rgb(217,207,13)"/><text x="19.6610%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (33,150,659 samples, 1.11%)</title><rect x="19.9593%" y="133" width="1.1072%" height="15" fill="rgb(231,73,38)"/><text x="20.2093%" y="143.50"></text></g><g><title>normalize_projection_ty (18,190,148 samples, 0.61%)</title><rect x="20.4590%" y="117" width="0.6075%" height="15" fill="rgb(225,20,46)"/><text x="20.7090%" y="127.50"></text></g><g><title>type_op_normalize_predicate (29,769,482 samples, 0.99%)</title><rect x="21.0665%" y="133" width="0.9942%" height="15" fill="rgb(210,31,41)"/><text x="21.3165%" y="143.50"></text></g><g><title>normalize_projection_ty (15,537,644 samples, 0.52%)</title><rect x="21.5418%" y="117" width="0.5189%" height="15" fill="rgb(221,200,47)"/><text x="21.7918%" y="127.50"></text></g><g><title>type_op_normalize_ty (18,807,598 samples, 0.63%)</title><rect x="22.0607%" y="133" width="0.6281%" height="15" fill="rgb(226,26,5)"/><text x="22.3107%" y="143.50"></text></g><g><title>normalize_projection_ty (8,307,411 samples, 0.28%)</title><rect x="22.4114%" y="117" width="0.2775%" height="15" fill="rgb(249,33,26)"/><text x="22.6614%" y="127.50"></text></g><g><title>type_op_prove_predicate (147,885,029 samples, 4.94%)</title><rect x="22.6889%" y="133" width="4.9391%" height="15" fill="rgb(235,183,28)"/><text x="22.9389%" y="143.50">type_o..</text></g><g><title>MIR_borrow_checking (674,373,715 samples, 22.52%)</title><rect x="5.1061%" y="165" width="22.5229%" height="15" fill="rgb(221,5,38)"/><text x="5.3561%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (672,393,218 samples, 22.46%)</title><rect x="5.1722%" y="149" width="22.4567%" height="15" fill="rgb(247,18,42)"/><text x="5.4222%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (3,217,983 samples, 0.11%)</title><rect x="27.8713%" y="133" width="0.1075%" height="15" fill="rgb(241,131,45)"/><text x="28.1213%" y="143.50"></text></g><g><title>check_mod_attrs (6,324,435 samples, 0.21%)</title><rect x="27.7675%" y="149" width="0.2112%" height="15" fill="rgb(249,31,29)"/><text x="28.0175%" y="159.50"></text></g><g><title>lint_levels (3,510,829 samples, 0.12%)</title><rect x="28.1631%" y="133" width="0.1173%" height="15" fill="rgb(225,111,53)"/><text x="28.4131%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (8,447,782 samples, 0.28%)</title><rect x="28.0839%" y="149" width="0.2821%" height="15" fill="rgb(238,160,17)"/><text x="28.3339%" y="159.50"></text></g><g><title>misc_checking_1 (18,502,887 samples, 0.62%)</title><rect x="27.7643%" y="165" width="0.6180%" height="15" fill="rgb(214,148,48)"/><text x="28.0143%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (8,887,050 samples, 0.30%)</title><rect x="28.3824%" y="149" width="0.2968%" height="15" fill="rgb(232,36,49)"/><text x="28.6324%" y="159.50"></text></g><g><title>check_mod_liveness (7,772,246 samples, 0.26%)</title><rect x="28.4196%" y="133" width="0.2596%" height="15" fill="rgb(209,103,24)"/><text x="28.6696%" y="143.50"></text></g><g><title>misc_checking_2 (19,458,318 samples, 0.65%)</title><rect x="28.3822%" y="165" width="0.6499%" height="15" fill="rgb(229,88,8)"/><text x="28.6322%" y="175.50"></text></g><g><title>match_checking (10,567,038 samples, 0.35%)</title><rect x="28.6792%" y="149" width="0.3529%" height="15" fill="rgb(213,181,19)"/><text x="28.9292%" y="159.50"></text></g><g><title>check_match (9,934,412 samples, 0.33%)</title><rect x="28.7003%" y="133" width="0.3318%" height="15" fill="rgb(254,191,54)"/><text x="28.9503%" y="143.50"></text></g><g><title>check_private_in_public (4,094,396 samples, 0.14%)</title><rect x="29.0329%" y="149" width="0.1367%" height="15" fill="rgb(241,83,37)"/><text x="29.2829%" y="159.50"></text></g><g><title>death_checking (6,340,961 samples, 0.21%)</title><rect x="29.1696%" y="149" width="0.2118%" height="15" fill="rgb(233,36,39)"/><text x="29.4196%" y="159.50"></text></g><g><title>crate_lints (11,883,034 samples, 0.40%)</title><rect x="29.3815%" y="133" width="0.3969%" height="15" fill="rgb(226,3,54)"/><text x="29.6315%" y="143.50"></text></g><g><title>lint_checking (20,102,256 samples, 0.67%)</title><rect x="29.3814%" y="149" width="0.6714%" height="15" fill="rgb(245,192,40)"/><text x="29.6314%" y="159.50"></text></g><g><title>module_lints (8,214,852 samples, 0.27%)</title><rect x="29.7784%" y="133" width="0.2744%" height="15" fill="rgb(238,167,29)"/><text x="30.0284%" y="143.50"></text></g><g><title>lint_mod (8,187,482 samples, 0.27%)</title><rect x="29.7793%" y="117" width="0.2734%" height="15" fill="rgb(232,182,51)"/><text x="30.0293%" y="127.50"></text></g><g><title>privacy_access_levels (7,441,254 samples, 0.25%)</title><rect x="30.0528%" y="149" width="0.2485%" height="15" fill="rgb(231,60,39)"/><text x="30.3028%" y="159.50"></text></g><g><title>privacy_checking_modules (20,989,075 samples, 0.70%)</title><rect x="30.3013%" y="149" width="0.7010%" height="15" fill="rgb(208,69,12)"/><text x="30.5513%" y="159.50"></text></g><g><title>check_mod_privacy (20,959,105 samples, 0.70%)</title><rect x="30.3023%" y="133" width="0.7000%" height="15" fill="rgb(235,93,37)"/><text x="30.5523%" y="143.50"></text></g><g><title>misc_checking_3 (59,168,434 samples, 1.98%)</title><rect x="29.0321%" y="165" width="1.9761%" height="15" fill="rgb(213,116,39)"/><text x="29.2821%" y="175.50">m..</text></g><g><title>impl_parent (3,569,264 samples, 0.12%)</title><rect x="31.3224%" y="101" width="0.1192%" height="15" fill="rgb(222,207,29)"/><text x="31.5724%" y="111.50"></text></g><g><title>impl_trait_ref (7,814,516 samples, 0.26%)</title><rect x="31.4416%" y="101" width="0.2610%" height="15" fill="rgb(206,96,30)"/><text x="31.6916%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,170,388 samples, 0.21%)</title><rect x="31.4965%" y="85" width="0.2061%" height="15" fill="rgb(218,138,4)"/><text x="31.7465%" y="95.50"></text></g><g><title>coherent_trait (20,287,709 samples, 0.68%)</title><rect x="31.0699%" y="133" width="0.6776%" height="15" fill="rgb(250,191,14)"/><text x="31.3199%" y="143.50"></text></g><g><title>specialization_graph_of (19,408,250 samples, 0.65%)</title><rect x="31.0993%" y="117" width="0.6482%" height="15" fill="rgb(239,60,40)"/><text x="31.3493%" y="127.50"></text></g><g><title>coherence_checking (20,888,005 samples, 0.70%)</title><rect x="31.0685%" y="149" width="0.6976%" height="15" fill="rgb(206,27,48)"/><text x="31.3185%" y="159.50"></text></g><g><title>dropck_outlives (15,647,848 samples, 0.52%)</title><rect x="45.1932%" y="101" width="0.5226%" height="15" fill="rgb(225,35,8)"/><text x="45.4432%" y="111.50"></text></g><g><title>evaluate_obligation (19,826,455 samples, 0.66%)</title><rect x="45.7159%" y="101" width="0.6622%" height="15" fill="rgb(250,213,24)"/><text x="45.9659%" y="111.50"></text></g><g><title>evaluate_obligation (3,369,150 samples, 0.11%)</title><rect x="46.5978%" y="85" width="0.1125%" height="15" fill="rgb(247,123,22)"/><text x="46.8478%" y="95.50"></text></g><g><title>method_autoderef_steps (7,536,790 samples, 0.25%)</title><rect x="46.4590%" y="101" width="0.2517%" height="15" fill="rgb(231,138,38)"/><text x="46.7090%" y="111.50"></text></g><g><title>evaluate_obligation (7,307,971 samples, 0.24%)</title><rect x="49.4607%" y="85" width="0.2441%" height="15" fill="rgb(231,145,46)"/><text x="49.7107%" y="95.50"></text></g><g><title>typeck (91,048,199 samples, 3.04%)</title><rect x="46.8553%" y="101" width="3.0408%" height="15" fill="rgb(251,118,11)"/><text x="47.1053%" y="111.50">typ..</text></g><g><title>item_bodies_checking (542,885,491 samples, 18.13%)</title><rect x="31.7903%" y="149" width="18.1314%" height="15" fill="rgb(217,147,25)"/><text x="32.0403%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (542,881,241 samples, 18.13%)</title><rect x="31.7904%" y="133" width="18.1313%" height="15" fill="rgb(247,81,37)"/><text x="32.0404%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (541,353,480 samples, 18.08%)</title><rect x="31.8414%" y="117" width="18.0802%" height="15" fill="rgb(209,12,38)"/><text x="32.0914%" y="127.50">typeck</text></g><g><title>item_types_checking (33,613,137 samples, 1.12%)</title><rect x="49.9217%" y="149" width="1.1226%" height="15" fill="rgb(227,1,9)"/><text x="50.1717%" y="159.50"></text></g><g><title>check_mod_item_types (33,579,987 samples, 1.12%)</title><rect x="49.9228%" y="133" width="1.1215%" height="15" fill="rgb(248,47,43)"/><text x="50.1728%" y="143.50"></text></g><g><title>fn_sig (6,743,534 samples, 0.23%)</title><rect x="51.1896%" y="117" width="0.2252%" height="15" fill="rgb(221,10,30)"/><text x="51.4396%" y="127.50"></text></g><g><title>is_late_bound_map (5,355,888 samples, 0.18%)</title><rect x="51.4824%" y="101" width="0.1789%" height="15" fill="rgb(210,229,1)"/><text x="51.7324%" y="111.50"></text></g><g><title>resolve_lifetimes (5,063,643 samples, 0.17%)</title><rect x="51.4921%" y="85" width="0.1691%" height="15" fill="rgb(222,148,37)"/><text x="51.7421%" y="95.50"></text></g><g><title>generics_of (8,249,848 samples, 0.28%)</title><rect x="51.4148%" y="117" width="0.2755%" height="15" fill="rgb(234,67,33)"/><text x="51.6648%" y="127.50"></text></g><g><title>explicit_predicates_of (8,727,675 samples, 0.29%)</title><rect x="51.7884%" y="85" width="0.2915%" height="15" fill="rgb(247,98,35)"/><text x="52.0384%" y="95.50"></text></g><g><title>predicates_of (12,422,920 samples, 0.41%)</title><rect x="51.7203%" y="117" width="0.4149%" height="15" fill="rgb(247,138,52)"/><text x="51.9703%" y="127.50"></text></g><g><title>predicates_defined_on (11,627,922 samples, 0.39%)</title><rect x="51.7469%" y="101" width="0.3884%" height="15" fill="rgb(213,79,30)"/><text x="51.9969%" y="111.50"></text></g><g><title>type_collecting (34,929,792 samples, 1.17%)</title><rect x="51.0449%" y="149" width="1.1666%" height="15" fill="rgb(246,177,23)"/><text x="51.2949%" y="159.50"></text></g><g><title>collect_mod_item_types (34,889,211 samples, 1.17%)</title><rect x="51.0462%" y="133" width="1.1652%" height="15" fill="rgb(230,62,27)"/><text x="51.2962%" y="143.50"></text></g><g><title>evaluate_obligation (4,337,895 samples, 0.14%)</title><rect x="54.4884%" y="117" width="0.1449%" height="15" fill="rgb(216,154,8)"/><text x="54.7384%" y="127.50"></text></g><g><title>implied_outlives_bounds (8,717,393 samples, 0.29%)</title><rect x="54.6418%" y="117" width="0.2911%" height="15" fill="rgb(244,35,45)"/><text x="54.8918%" y="127.50"></text></g><g><title>param_env (7,194,432 samples, 0.24%)</title><rect x="54.9355%" y="117" width="0.2403%" height="15" fill="rgb(251,115,12)"/><text x="55.1855%" y="127.50"></text></g><g><title>region_scope_tree (4,948,017 samples, 0.17%)</title><rect x="55.1805%" y="117" width="0.1653%" height="15" fill="rgb(240,54,50)"/><text x="55.4305%" y="127.50"></text></g><g><title>check_impl_item_well_formed (90,089,025 samples, 3.01%)</title><rect x="52.3412%" y="133" width="3.0088%" height="15" fill="rgb(233,84,52)"/><text x="52.5912%" y="143.50">che..</text></g><g><title>implied_outlives_bounds (3,333,691 samples, 0.11%)</title><rect x="57.0795%" y="117" width="0.1113%" height="15" fill="rgb(207,117,47)"/><text x="57.3295%" y="127.50"></text></g><g><title>param_env (5,456,352 samples, 0.18%)</title><rect x="57.1994%" y="117" width="0.1822%" height="15" fill="rgb(249,43,39)"/><text x="57.4494%" y="127.50"></text></g><g><title>check_item_well_formed (63,256,832 samples, 2.11%)</title><rect x="55.3500%" y="133" width="2.1127%" height="15" fill="rgb(209,38,44)"/><text x="55.6000%" y="143.50">c..</text></g><g><title>analysis (1,571,797,032 samples, 52.50%)</title><rect x="4.9923%" y="181" width="52.4952%" height="15" fill="rgb(236,212,23)"/><text x="5.2423%" y="191.50">analysis</text></g><g><title>type_check_crate (792,835,075 samples, 26.48%)</title><rect x="31.0082%" y="165" width="26.4793%" height="15" fill="rgb(242,79,21)"/><text x="31.2582%" y="175.50">type_check_crate</text></g><g><title>wf_checking (157,815,170 samples, 5.27%)</title><rect x="52.2167%" y="149" width="5.2707%" height="15" fill="rgb(211,96,35)"/><text x="52.4667%" y="159.50">wf_che..</text></g><g><title>param_env (3,281,112 samples, 0.11%)</title><rect x="58.6841%" y="133" width="0.1096%" height="15" fill="rgb(253,215,40)"/><text x="58.9341%" y="143.50"></text></g><g><title>fn_abi_of_instance (9,523,481 samples, 0.32%)</title><rect x="58.4990%" y="149" width="0.3181%" height="15" fill="rgb(211,81,21)"/><text x="58.7490%" y="159.50"></text></g><g><title>codegen_module (39,001,495 samples, 1.30%)</title><rect x="57.5594%" y="165" width="1.3026%" height="15" fill="rgb(208,190,38)"/><text x="57.8094%" y="175.50"></text></g><g><title>optimized_mir (6,519,471 samples, 0.22%)</title><rect x="59.0170%" y="117" width="0.2177%" height="15" fill="rgb(235,213,38)"/><text x="59.2670%" y="127.50"></text></g><g><title>resolve_instance (5,531,760 samples, 0.18%)</title><rect x="59.2348%" y="117" width="0.1848%" height="15" fill="rgb(237,122,38)"/><text x="59.4848%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (18,483,917 samples, 0.62%)</title><rect x="58.8640%" y="133" width="0.6173%" height="15" fill="rgb(244,218,35)"/><text x="59.1140%" y="143.50"></text></g><g><title>monomorphization_collector (18,829,371 samples, 0.63%)</title><rect x="58.8638%" y="149" width="0.6289%" height="15" fill="rgb(240,68,47)"/><text x="59.1138%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (21,845,945 samples, 0.73%)</title><rect x="58.8624%" y="165" width="0.7296%" height="15" fill="rgb(210,16,53)"/><text x="59.1124%" y="175.50"></text></g><g><title>codegen_crate (63,076,968 samples, 2.11%)</title><rect x="57.4877%" y="181" width="2.1067%" height="15" fill="rgb(235,124,12)"/><text x="57.7377%" y="191.50">c..</text></g><g><title>codegen_module_optimize (311,745,435 samples, 10.41%)</title><rect x="59.5944%" y="181" width="10.4117%" height="15" fill="rgb(224,169,11)"/><text x="59.8444%" y="191.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (295,370,222 samples, 9.86%)</title><rect x="60.1413%" y="165" width="9.8648%" height="15" fill="rgb(250,166,2)"/><text x="60.3913%" y="175.50">LLVM_module_op..</text></g><g><title>LLVM_lto_optimize (124,055,940 samples, 4.14%)</title><rect x="70.3102%" y="165" width="4.1432%" height="15" fill="rgb(242,216,29)"/><text x="70.5602%" y="175.50">LLVM_..</text></g><g><title>LLVM_module_codegen (174,395,614 samples, 5.82%)</title><rect x="74.4535%" y="165" width="5.8245%" height="15" fill="rgb(230,116,27)"/><text x="74.7035%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (172,238,141 samples, 5.75%)</title><rect x="74.5255%" y="149" width="5.7524%" height="15" fill="rgb(228,99,48)"/><text x="74.7755%" y="159.50">LLVM_mo..</text></g><g><title>LLVM_thin_lto_import (12,694,345 samples, 0.42%)</title><rect x="80.2780%" y="165" width="0.4240%" height="15" fill="rgb(253,11,6)"/><text x="80.5280%" y="175.50"></text></g><g><title>codegen_module_perform_lto (320,798,606 samples, 10.71%)</title><rect x="70.0061%" y="181" width="10.7141%" height="15" fill="rgb(247,143,39)"/><text x="70.2561%" y="191.50">codegen_module_p..</text></g><g><title>metadata_register_crate (11,782,593 samples, 0.39%)</title><rect x="84.4653%" y="133" width="0.3935%" height="15" fill="rgb(236,97,10)"/><text x="84.7153%" y="143.50"></text></g><g><title>metadata_register_crate (4,620,721 samples, 0.15%)</title><rect x="84.7045%" y="117" width="0.1543%" height="15" fill="rgb(233,208,19)"/><text x="84.9545%" y="127.50"></text></g><g><title>macro_expand_crate (120,468,391 samples, 4.02%)</title><rect x="80.8673%" y="165" width="4.0234%" height="15" fill="rgb(216,164,2)"/><text x="81.1173%" y="175.50">macr..</text></g><g><title>expand_crate (120,452,971 samples, 4.02%)</title><rect x="80.8679%" y="149" width="4.0229%" height="15" fill="rgb(220,129,5)"/><text x="81.1179%" y="159.50">expa..</text></g><g><title>late_resolve_crate (22,697,546 samples, 0.76%)</title><rect x="84.9353%" y="149" width="0.7581%" height="15" fill="rgb(242,17,10)"/><text x="85.1853%" y="159.50"></text></g><g><title>configure_and_expand (152,288,988 samples, 5.09%)</title><rect x="80.7202%" y="181" width="5.0862%" height="15" fill="rgb(242,107,0)"/><text x="80.9702%" y="191.50">config..</text></g><g><title>resolve_crate (27,291,327 samples, 0.91%)</title><rect x="84.8949%" y="165" width="0.9115%" height="15" fill="rgb(251,28,31)"/><text x="85.1449%" y="175.50"></text></g><g><title>drop_ast (4,542,510 samples, 0.15%)</title><rect x="85.8064%" y="181" width="0.1517%" height="15" fill="rgb(233,223,10)"/><text x="86.0564%" y="191.50"></text></g><g><title>early_lint_checks (5,931,757 samples, 0.20%)</title><rect x="85.9593%" y="181" width="0.1981%" height="15" fill="rgb(215,21,27)"/><text x="86.2093%" y="191.50"></text></g><g><title>free_global_ctxt (17,545,916 samples, 0.59%)</title><rect x="86.1574%" y="181" width="0.5860%" height="15" fill="rgb(232,23,21)"/><text x="86.4074%" y="191.50"></text></g><g><title>layout_of (5,878,890 samples, 0.20%)</title><rect x="89.7235%" y="133" width="0.1963%" height="15" fill="rgb(244,5,23)"/><text x="89.9735%" y="143.50"></text></g><g><title>layout_of (16,403,011 samples, 0.55%)</title><rect x="89.4932%" y="149" width="0.5478%" height="15" fill="rgb(226,81,46)"/><text x="89.7432%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,467,192 samples, 0.12%)</title><rect x="89.9252%" y="133" width="0.1158%" height="15" fill="rgb(247,70,30)"/><text x="90.1752%" y="143.50"></text></g><g><title>is_copy_raw (41,079,308 samples, 1.37%)</title><rect x="92.6908%" y="117" width="1.3720%" height="15" fill="rgb(212,68,19)"/><text x="92.9408%" y="127.50"></text></g><g><title>evaluate_obligation (33,469,726 samples, 1.12%)</title><rect x="92.9449%" y="101" width="1.1178%" height="15" fill="rgb(240,187,13)"/><text x="93.1949%" y="111.50"></text></g><g><title>needs_drop_raw (44,858,823 samples, 1.50%)</title><rect x="92.5815%" y="133" width="1.4982%" height="15" fill="rgb(223,113,26)"/><text x="92.8315%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (5,702,303 samples, 0.19%)</title><rect x="94.1066%" y="133" width="0.1904%" height="15" fill="rgb(206,192,2)"/><text x="94.3566%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (127,438,363 samples, 4.26%)</title><rect x="90.0410%" y="149" width="4.2562%" height="15" fill="rgb(241,108,4)"/><text x="90.2910%" y="159.50">mir_d..</text></g><g><title>optimized_mir (191,552,195 samples, 6.40%)</title><rect x="87.9326%" y="165" width="6.3975%" height="15" fill="rgb(247,173,49)"/><text x="88.1826%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (228,373,911 samples, 7.63%)</title><rect x="86.7434%" y="181" width="7.6273%" height="15" fill="rgb(224,114,35)"/><text x="86.9934%" y="191.50">generate_c..</text></g><g><title>hir_lowering (52,395,157 samples, 1.75%)</title><rect x="94.3707%" y="181" width="1.7499%" height="15" fill="rgb(245,159,27)"/><text x="94.6207%" y="191.50"></text></g><g><title>finish_ongoing_codegen (93,464,708 samples, 3.12%)</title><rect x="96.1212%" y="165" width="3.1216%" height="15" fill="rgb(245,172,44)"/><text x="96.3712%" y="175.50">fin..</text></g><g><title>link_crate (11,501,810 samples, 0.38%)</title><rect x="99.2428%" y="165" width="0.3841%" height="15" fill="rgb(236,23,11)"/><text x="99.4928%" y="175.50"></text></g><g><title>link_binary (11,362,948 samples, 0.38%)</title><rect x="99.2474%" y="149" width="0.3795%" height="15" fill="rgb(205,117,38)"/><text x="99.4974%" y="159.50"></text></g><g><title>link_rlib (9,686,220 samples, 0.32%)</title><rect x="99.3034%" y="133" width="0.3235%" height="15" fill="rgb(237,72,25)"/><text x="99.5534%" y="143.50"></text></g><g><title>link (104,994,279 samples, 3.51%)</title><rect x="96.1206%" y="181" width="3.5066%" height="15" fill="rgb(244,70,9)"/><text x="96.3706%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (6,727,066 samples, 0.22%)</title><rect x="99.7041%" y="181" width="0.2247%" height="15" fill="rgb(217,125,39)"/><text x="99.9541%" y="191.50"></text></g><g><title>all (2,994,172,874 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,36,10)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,994,172,874 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,123,47)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>