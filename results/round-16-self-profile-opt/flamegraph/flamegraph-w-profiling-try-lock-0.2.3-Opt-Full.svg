<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,766,875 samples, 8.24%)</title><rect x="1.0083%" y="197" width="8.2395%" height="15" fill="rgb(227,0,7)"/><text x="1.2583%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (95,482 samples, 0.12%)</title><rect x="9.1315%" y="181" width="0.1163%" height="15" fill="rgb(217,0,24)"/><text x="9.3815%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (82,540 samples, 0.10%)</title><rect x="9.1473%" y="165" width="0.1005%" height="15" fill="rgb(221,193,54)"/><text x="9.3973%" y="175.50"></text></g><g><title>param_env (186,931 samples, 0.23%)</title><rect x="16.7646%" y="117" width="0.2276%" height="15" fill="rgb(248,212,6)"/><text x="17.0146%" y="127.50"></text></g><g><title>item_attrs (193,102 samples, 0.24%)</title><rect x="17.4292%" y="85" width="0.2351%" height="15" fill="rgb(208,68,35)"/><text x="17.6792%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (185,782 samples, 0.23%)</title><rect x="17.4381%" y="69" width="0.2262%" height="15" fill="rgb(232,128,0)"/><text x="17.6881%" y="79.50"></text></g><g><title>codegen_fn_attrs (295,136 samples, 0.36%)</title><rect x="17.3126%" y="101" width="0.3594%" height="15" fill="rgb(207,160,47)"/><text x="17.5626%" y="111.50"></text></g><g><title>is_copy_raw (160,932 samples, 0.20%)</title><rect x="19.1744%" y="53" width="0.1960%" height="15" fill="rgb(228,23,34)"/><text x="19.4244%" y="63.50"></text></g><g><title>evaluate_obligation (133,831 samples, 0.16%)</title><rect x="19.2074%" y="37" width="0.1630%" height="15" fill="rgb(218,30,26)"/><text x="19.4574%" y="47.50"></text></g><g><title>adt_drop_tys (242,013 samples, 0.29%)</title><rect x="19.1384%" y="69" width="0.2947%" height="15" fill="rgb(220,122,19)"/><text x="19.3884%" y="79.50"></text></g><g><title>needs_drop_raw (727,999 samples, 0.89%)</title><rect x="19.0495%" y="85" width="0.8864%" height="15" fill="rgb(250,228,42)"/><text x="19.2995%" y="95.50"></text></g><g><title>is_copy_raw (413,033 samples, 0.50%)</title><rect x="19.4331%" y="69" width="0.5029%" height="15" fill="rgb(240,193,28)"/><text x="19.6831%" y="79.50"></text></g><g><title>evaluate_obligation (330,113 samples, 0.40%)</title><rect x="19.5340%" y="53" width="0.4020%" height="15" fill="rgb(216,20,37)"/><text x="19.7840%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (95,001 samples, 0.12%)</title><rect x="20.0894%" y="69" width="0.1157%" height="15" fill="rgb(206,188,39)"/><text x="20.3394%" y="79.50"></text></g><g><title>resolve_instance (324,343 samples, 0.39%)</title><rect x="19.9360%" y="85" width="0.3949%" height="15" fill="rgb(217,207,13)"/><text x="20.1860%" y="95.50"></text></g><g><title>thir_body (462,125 samples, 0.56%)</title><rect x="20.3479%" y="85" width="0.5627%" height="15" fill="rgb(231,73,38)"/><text x="20.5979%" y="95.50"></text></g><g><title>mir_const (3,925,105 samples, 4.78%)</title><rect x="16.1414%" y="133" width="4.7793%" height="15" fill="rgb(225,20,46)"/><text x="16.3914%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (3,226,387 samples, 3.93%)</title><rect x="16.9922%" y="117" width="3.9285%" height="15" fill="rgb(210,31,41)"/><text x="17.2422%" y="127.50">unsa..</text></g><g><title>mir_built (2,668,078 samples, 3.25%)</title><rect x="17.6720%" y="101" width="3.2487%" height="15" fill="rgb(221,200,47)"/><text x="17.9220%" y="111.50">mir..</text></g><g><title>mir_promoted (4,430,351 samples, 5.39%)</title><rect x="15.5609%" y="149" width="5.3945%" height="15" fill="rgb(226,26,5)"/><text x="15.8109%" y="159.50">mir_pro..</text></g><g><title>type_op_normalize_fn_sig (175,862 samples, 0.21%)</title><rect x="21.0332%" y="149" width="0.2141%" height="15" fill="rgb(249,33,26)"/><text x="21.2832%" y="159.50"></text></g><g><title>normalize_projection_ty (101,621 samples, 0.12%)</title><rect x="21.1236%" y="133" width="0.1237%" height="15" fill="rgb(235,183,28)"/><text x="21.3736%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,553,766 samples, 12.85%)</title><rect x="9.5134%" y="181" width="12.8505%" height="15" fill="rgb(221,5,38)"/><text x="9.7634%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (10,497,016 samples, 12.78%)</title><rect x="9.5825%" y="165" width="12.7814%" height="15" fill="rgb(247,18,42)"/><text x="9.8325%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (917,058 samples, 1.12%)</title><rect x="21.2473%" y="149" width="1.1166%" height="15" fill="rgb(241,131,45)"/><text x="21.4973%" y="159.50"></text></g><g><title>hir_module_items (156,372 samples, 0.19%)</title><rect x="22.3920%" y="181" width="0.1904%" height="15" fill="rgb(249,31,29)"/><text x="22.6420%" y="191.50"></text></g><g><title>codegen_fn_attrs (241,773 samples, 0.29%)</title><rect x="22.9992%" y="117" width="0.2944%" height="15" fill="rgb(225,111,53)"/><text x="23.2492%" y="127.50"></text></g><g><title>codegen_fn_attrs (399,584 samples, 0.49%)</title><rect x="22.8121%" y="149" width="0.4865%" height="15" fill="rgb(238,160,17)"/><text x="23.0621%" y="159.50"></text></g><g><title>should_inherit_track_caller (338,143 samples, 0.41%)</title><rect x="22.8869%" y="133" width="0.4117%" height="15" fill="rgb(214,148,48)"/><text x="23.1369%" y="143.50"></text></g><g><title>check_mod_attrs (560,456 samples, 0.68%)</title><rect x="22.6167%" y="165" width="0.6824%" height="15" fill="rgb(232,36,49)"/><text x="22.8667%" y="175.50"></text></g><g><title>lookup_deprecation_entry (118,282 samples, 0.14%)</title><rect x="23.6139%" y="149" width="0.1440%" height="15" fill="rgb(209,103,24)"/><text x="23.8639%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (333,494 samples, 0.41%)</title><rect x="23.4538%" y="165" width="0.4061%" height="15" fill="rgb(229,88,8)"/><text x="23.7038%" y="175.50"></text></g><g><title>misc_checking_1 (1,107,183 samples, 1.35%)</title><rect x="22.5834%" y="181" width="1.3481%" height="15" fill="rgb(213,181,19)"/><text x="22.8334%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (213,733 samples, 0.26%)</title><rect x="23.9351%" y="165" width="0.2602%" height="15" fill="rgb(254,191,54)"/><text x="24.1851%" y="175.50"></text></g><g><title>check_mod_liveness (165,582 samples, 0.20%)</title><rect x="23.9937%" y="149" width="0.2016%" height="15" fill="rgb(241,83,37)"/><text x="24.2437%" y="159.50"></text></g><g><title>misc_checking_2 (705,028 samples, 0.86%)</title><rect x="23.9315%" y="181" width="0.8585%" height="15" fill="rgb(233,36,39)"/><text x="24.1815%" y="191.50"></text></g><g><title>match_checking (488,415 samples, 0.59%)</title><rect x="24.1953%" y="165" width="0.5947%" height="15" fill="rgb(226,3,54)"/><text x="24.4453%" y="175.50"></text></g><g><title>check_match (465,655 samples, 0.57%)</title><rect x="24.2230%" y="149" width="0.5670%" height="15" fill="rgb(245,192,40)"/><text x="24.4730%" y="159.50"></text></g><g><title>check_private_in_public (124,201 samples, 0.15%)</title><rect x="24.8071%" y="165" width="0.1512%" height="15" fill="rgb(238,167,29)"/><text x="25.0571%" y="175.50"></text></g><g><title>death_checking (259,163 samples, 0.32%)</title><rect x="24.9583%" y="165" width="0.3156%" height="15" fill="rgb(232,182,51)"/><text x="25.2083%" y="175.50"></text></g><g><title>param_env (148,942 samples, 0.18%)</title><rect x="25.9354%" y="133" width="0.1814%" height="15" fill="rgb(231,60,39)"/><text x="26.1854%" y="143.50"></text></g><g><title>crate_lints (1,307,444 samples, 1.59%)</title><rect x="25.2775%" y="149" width="1.5920%" height="15" fill="rgb(208,69,12)"/><text x="25.5275%" y="159.50"></text></g><g><title>type_of (616,107 samples, 0.75%)</title><rect x="26.1193%" y="133" width="0.7502%" height="15" fill="rgb(235,93,37)"/><text x="26.3693%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (412,396 samples, 0.50%)</title><rect x="26.3673%" y="117" width="0.5021%" height="15" fill="rgb(213,116,39)"/><text x="26.6173%" y="127.50"></text></g><g><title>lint_checking (1,472,526 samples, 1.79%)</title><rect x="25.2739%" y="165" width="1.7930%" height="15" fill="rgb(222,207,29)"/><text x="25.5239%" y="175.50">l..</text></g><g><title>module_lints (162,102 samples, 0.20%)</title><rect x="26.8695%" y="149" width="0.1974%" height="15" fill="rgb(206,96,30)"/><text x="27.1195%" y="159.50"></text></g><g><title>lint_mod (158,162 samples, 0.19%)</title><rect x="26.8743%" y="133" width="0.1926%" height="15" fill="rgb(218,138,4)"/><text x="27.1243%" y="143.50"></text></g><g><title>privacy_access_levels (146,822 samples, 0.18%)</title><rect x="27.0669%" y="165" width="0.1788%" height="15" fill="rgb(250,191,14)"/><text x="27.3169%" y="175.50"></text></g><g><title>privacy_checking_modules (325,114 samples, 0.40%)</title><rect x="27.2456%" y="165" width="0.3959%" height="15" fill="rgb(239,60,40)"/><text x="27.4956%" y="175.50"></text></g><g><title>check_mod_privacy (322,124 samples, 0.39%)</title><rect x="27.2493%" y="149" width="0.3922%" height="15" fill="rgb(206,27,48)"/><text x="27.4993%" y="159.50"></text></g><g><title>misc_checking_3 (2,357,896 samples, 2.87%)</title><rect x="24.7900%" y="181" width="2.8710%" height="15" fill="rgb(225,35,8)"/><text x="25.0400%" y="191.50">mi..</text></g><g><title>impl_parent (658,996 samples, 0.80%)</title><rect x="29.2385%" y="117" width="0.8024%" height="15" fill="rgb(250,213,24)"/><text x="29.4885%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (383,963 samples, 0.47%)</title><rect x="29.5734%" y="101" width="0.4675%" height="15" fill="rgb(247,123,22)"/><text x="29.8234%" y="111.50"></text></g><g><title>impl_trait_ref (2,066,980 samples, 2.52%)</title><rect x="30.0409%" y="117" width="2.5168%" height="15" fill="rgb(231,138,38)"/><text x="30.2909%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,777,066 samples, 2.16%)</title><rect x="30.3939%" y="101" width="2.1638%" height="15" fill="rgb(231,145,46)"/><text x="30.6439%" y="111.50">m..</text></g><g><title>coherent_trait (4,209,916 samples, 5.13%)</title><rect x="27.7575%" y="149" width="5.1261%" height="15" fill="rgb(251,118,11)"/><text x="28.0075%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (4,188,366 samples, 5.10%)</title><rect x="27.7838%" y="133" width="5.0999%" height="15" fill="rgb(217,147,25)"/><text x="28.0338%" y="143.50">specia..</text></g><g><title>trait_impls_of (264,665 samples, 0.32%)</title><rect x="32.5614%" y="117" width="0.3223%" height="15" fill="rgb(247,81,37)"/><text x="32.8114%" y="127.50"></text></g><g><title>coherence_checking (4,302,508 samples, 5.24%)</title><rect x="27.7274%" y="165" width="5.2388%" height="15" fill="rgb(209,12,38)"/><text x="27.9774%" y="175.50">cohere..</text></g><g><title>adt_sized_constraint (82,341 samples, 0.10%)</title><rect x="41.7451%" y="117" width="0.1003%" height="15" fill="rgb(227,1,9)"/><text x="41.9951%" y="127.50"></text></g><g><title>associated_item (103,240 samples, 0.13%)</title><rect x="41.9105%" y="101" width="0.1257%" height="15" fill="rgb(248,47,43)"/><text x="42.1605%" y="111.50"></text></g><g><title>associated_items (166,661 samples, 0.20%)</title><rect x="41.8453%" y="117" width="0.2029%" height="15" fill="rgb(221,10,30)"/><text x="42.0953%" y="127.50"></text></g><g><title>dropck_outlives (272,263 samples, 0.33%)</title><rect x="42.0974%" y="117" width="0.3315%" height="15" fill="rgb(210,229,1)"/><text x="42.3474%" y="127.50"></text></g><g><title>adt_dtorck_constraint (102,993 samples, 0.13%)</title><rect x="42.3035%" y="101" width="0.1254%" height="15" fill="rgb(222,148,37)"/><text x="42.5535%" y="111.50"></text></g><g><title>evaluate_obligation (594,906 samples, 0.72%)</title><rect x="42.4289%" y="117" width="0.7244%" height="15" fill="rgb(234,67,33)"/><text x="42.6789%" y="127.50"></text></g><g><title>method_autoderef_steps (263,062 samples, 0.32%)</title><rect x="43.6456%" y="117" width="0.3203%" height="15" fill="rgb(247,98,35)"/><text x="43.8956%" y="127.50"></text></g><g><title>evaluate_obligation (139,912 samples, 0.17%)</title><rect x="43.7955%" y="101" width="0.1704%" height="15" fill="rgb(247,138,52)"/><text x="44.0455%" y="111.50"></text></g><g><title>evaluate_obligation (102,811 samples, 0.13%)</title><rect x="44.1073%" y="101" width="0.1252%" height="15" fill="rgb(213,79,30)"/><text x="44.3573%" y="111.50"></text></g><g><title>layout_of (82,221 samples, 0.10%)</title><rect x="44.2325%" y="101" width="0.1001%" height="15" fill="rgb(246,177,23)"/><text x="44.4825%" y="111.50"></text></g><g><title>object_safety_violations (324,553 samples, 0.40%)</title><rect x="43.9659%" y="117" width="0.3952%" height="15" fill="rgb(230,62,27)"/><text x="44.2159%" y="127.50"></text></g><g><title>predicates_of (262,804 samples, 0.32%)</title><rect x="44.4095%" y="117" width="0.3200%" height="15" fill="rgb(216,154,8)"/><text x="44.6595%" y="127.50"></text></g><g><title>predicates_defined_on (184,502 samples, 0.22%)</title><rect x="44.5048%" y="101" width="0.2247%" height="15" fill="rgb(244,35,45)"/><text x="44.7548%" y="111.50"></text></g><g><title>type_of (169,273 samples, 0.21%)</title><rect x="44.7597%" y="117" width="0.2061%" height="15" fill="rgb(251,115,12)"/><text x="45.0097%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (150,342 samples, 0.18%)</title><rect x="44.7827%" y="101" width="0.1831%" height="15" fill="rgb(240,54,50)"/><text x="45.0327%" y="111.50"></text></g><g><title>item_bodies_checking (9,848,768 samples, 11.99%)</title><rect x="33.0102%" y="165" width="11.9921%" height="15" fill="rgb(233,84,52)"/><text x="33.2602%" y="175.50">item_bodies_checki..</text></g><g><title>typeck_item_bodies (9,845,238 samples, 11.99%)</title><rect x="33.0145%" y="149" width="11.9878%" height="15" fill="rgb(207,117,47)"/><text x="33.2645%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (9,805,297 samples, 11.94%)</title><rect x="33.0631%" y="133" width="11.9392%" height="15" fill="rgb(249,43,39)"/><text x="33.3131%" y="143.50">typeck</text></g><g><title>item_types_checking (828,589 samples, 1.01%)</title><rect x="45.0023%" y="165" width="1.0089%" height="15" fill="rgb(209,38,44)"/><text x="45.2523%" y="175.50"></text></g><g><title>check_mod_item_types (824,449 samples, 1.00%)</title><rect x="45.0074%" y="149" width="1.0039%" height="15" fill="rgb(236,212,23)"/><text x="45.2574%" y="159.50"></text></g><g><title>fn_sig (216,854 samples, 0.26%)</title><rect x="46.2547%" y="133" width="0.2640%" height="15" fill="rgb(242,79,21)"/><text x="46.5047%" y="143.50"></text></g><g><title>is_late_bound_map (108,420 samples, 0.13%)</title><rect x="46.6428%" y="117" width="0.1320%" height="15" fill="rgb(211,96,35)"/><text x="46.8928%" y="127.50"></text></g><g><title>resolve_lifetimes (95,660 samples, 0.12%)</title><rect x="46.6583%" y="101" width="0.1165%" height="15" fill="rgb(253,215,40)"/><text x="46.9083%" y="111.50"></text></g><g><title>generics_of (261,891 samples, 0.32%)</title><rect x="46.5187%" y="133" width="0.3189%" height="15" fill="rgb(211,81,21)"/><text x="46.7687%" y="143.50"></text></g><g><title>late_bound_vars_map (172,073 samples, 0.21%)</title><rect x="47.2573%" y="85" width="0.2095%" height="15" fill="rgb(208,190,38)"/><text x="47.5073%" y="95.50"></text></g><g><title>resolve_lifetimes (165,053 samples, 0.20%)</title><rect x="47.2659%" y="69" width="0.2010%" height="15" fill="rgb(235,213,38)"/><text x="47.5159%" y="79.50"></text></g><g><title>explicit_predicates_of (356,704 samples, 0.43%)</title><rect x="47.0383%" y="101" width="0.4343%" height="15" fill="rgb(237,122,38)"/><text x="47.2883%" y="111.50"></text></g><g><title>predicates_of (808,980 samples, 0.99%)</title><rect x="46.9100%" y="133" width="0.9850%" height="15" fill="rgb(244,218,35)"/><text x="47.1600%" y="143.50"></text></g><g><title>predicates_defined_on (776,440 samples, 0.95%)</title><rect x="46.9496%" y="117" width="0.9454%" height="15" fill="rgb(240,68,47)"/><text x="47.1996%" y="127.50"></text></g><g><title>inferred_outlives_of (346,935 samples, 0.42%)</title><rect x="47.4726%" y="101" width="0.4224%" height="15" fill="rgb(210,16,53)"/><text x="47.7226%" y="111.50"></text></g><g><title>inferred_outlives_crate (323,804 samples, 0.39%)</title><rect x="47.5008%" y="85" width="0.3943%" height="15" fill="rgb(235,124,12)"/><text x="47.7508%" y="95.50"></text></g><g><title>type_of (158,591 samples, 0.19%)</title><rect x="47.7019%" y="69" width="0.1931%" height="15" fill="rgb(224,169,11)"/><text x="47.9519%" y="79.50"></text></g><g><title>type_collecting (1,663,138 samples, 2.03%)</title><rect x="46.0142%" y="165" width="2.0251%" height="15" fill="rgb(250,166,2)"/><text x="46.2642%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,646,318 samples, 2.00%)</title><rect x="46.0347%" y="149" width="2.0046%" height="15" fill="rgb(242,216,29)"/><text x="46.2847%" y="159.50">c..</text></g><g><title>type_of (118,480 samples, 0.14%)</title><rect x="47.8950%" y="133" width="0.1443%" height="15" fill="rgb(230,116,27)"/><text x="48.1450%" y="143.50"></text></g><g><title>evaluate_obligation (514,357 samples, 0.63%)</title><rect x="49.9294%" y="133" width="0.6263%" height="15" fill="rgb(228,99,48)"/><text x="50.1794%" y="143.50"></text></g><g><title>implied_outlives_bounds (237,164 samples, 0.29%)</title><rect x="50.5557%" y="133" width="0.2888%" height="15" fill="rgb(253,11,6)"/><text x="50.8057%" y="143.50"></text></g><g><title>param_env (199,693 samples, 0.24%)</title><rect x="50.8445%" y="133" width="0.2432%" height="15" fill="rgb(247,143,39)"/><text x="51.0945%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,582,120 samples, 3.14%)</title><rect x="48.1860%" y="149" width="3.1441%" height="15" fill="rgb(236,97,10)"/><text x="48.4360%" y="159.50">che..</text></g><g><title>region_scope_tree (164,123 samples, 0.20%)</title><rect x="51.1302%" y="133" width="0.1998%" height="15" fill="rgb(233,208,19)"/><text x="51.3802%" y="143.50"></text></g><g><title>adt_def (83,541 samples, 0.10%)</title><rect x="52.9904%" y="85" width="0.1017%" height="15" fill="rgb(216,164,2)"/><text x="53.2404%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (82,981 samples, 0.10%)</title><rect x="52.9911%" y="69" width="0.1010%" height="15" fill="rgb(220,129,5)"/><text x="53.2411%" y="79.50"></text></g><g><title>adt_sized_constraint (89,171 samples, 0.11%)</title><rect x="52.9848%" y="101" width="0.1086%" height="15" fill="rgb(242,17,10)"/><text x="53.2348%" y="111.50"></text></g><g><title>evaluate_obligation (168,622 samples, 0.21%)</title><rect x="52.8954%" y="133" width="0.2053%" height="15" fill="rgb(242,107,0)"/><text x="53.1454%" y="143.50"></text></g><g><title>adt_sized_constraint (128,562 samples, 0.16%)</title><rect x="52.9442%" y="117" width="0.1565%" height="15" fill="rgb(251,28,31)"/><text x="53.1942%" y="127.50"></text></g><g><title>implied_outlives_bounds (153,601 samples, 0.19%)</title><rect x="53.1118%" y="133" width="0.1870%" height="15" fill="rgb(233,223,10)"/><text x="53.3618%" y="143.50"></text></g><g><title>param_env (413,473 samples, 0.50%)</title><rect x="53.2989%" y="133" width="0.5035%" height="15" fill="rgb(215,21,27)"/><text x="53.5489%" y="143.50"></text></g><g><title>predicates_of (82,732 samples, 0.10%)</title><rect x="53.8023%" y="133" width="0.1007%" height="15" fill="rgb(232,23,21)"/><text x="54.0523%" y="143.50"></text></g><g><title>analysis (36,789,626 samples, 44.80%)</title><rect x="9.2478%" y="197" width="44.7960%" height="15" fill="rgb(244,5,23)"/><text x="9.4978%" y="207.50">analysis</text></g><g><title>type_check_crate (21,667,369 samples, 26.38%)</title><rect x="27.6610%" y="181" width="26.3828%" height="15" fill="rgb(226,81,46)"/><text x="27.9110%" y="191.50">type_check_crate</text></g><g><title>wf_checking (4,928,885 samples, 6.00%)</title><rect x="48.0423%" y="165" width="6.0015%" height="15" fill="rgb(247,70,30)"/><text x="48.2923%" y="175.50">wf_check..</text></g><g><title>check_item_well_formed (2,228,704 samples, 2.71%)</title><rect x="51.3301%" y="149" width="2.7137%" height="15" fill="rgb(212,68,19)"/><text x="51.5801%" y="159.50">ch..</text></g><g><title>is_unpin_raw (136,492 samples, 0.17%)</title><rect x="56.0235%" y="149" width="0.1662%" height="15" fill="rgb(240,187,13)"/><text x="56.2735%" y="159.50"></text></g><g><title>evaluate_obligation (133,102 samples, 0.16%)</title><rect x="56.0277%" y="133" width="0.1621%" height="15" fill="rgb(223,113,26)"/><text x="56.2777%" y="143.50"></text></g><g><title>fn_abi_of_instance (358,584 samples, 0.44%)</title><rect x="55.8504%" y="165" width="0.4366%" height="15" fill="rgb(206,192,2)"/><text x="56.1004%" y="175.50"></text></g><g><title>codegen_module (1,196,333 samples, 1.46%)</title><rect x="54.8894%" y="181" width="1.4567%" height="15" fill="rgb(241,108,4)"/><text x="55.1394%" y="191.50"></text></g><g><title>is_reachable_non_generic (94,331 samples, 0.11%)</title><rect x="56.4159%" y="133" width="0.1149%" height="15" fill="rgb(247,173,49)"/><text x="56.6659%" y="143.50"></text></g><g><title>reachable_non_generics (92,421 samples, 0.11%)</title><rect x="56.4182%" y="117" width="0.1125%" height="15" fill="rgb(224,114,35)"/><text x="56.6682%" y="127.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (91,281 samples, 0.11%)</title><rect x="56.4196%" y="101" width="0.1111%" height="15" fill="rgb(245,159,27)"/><text x="56.6696%" y="111.50"></text></g><g><title>optimized_mir (147,731 samples, 0.18%)</title><rect x="56.5307%" y="133" width="0.1799%" height="15" fill="rgb(245,172,44)"/><text x="56.7807%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (272,593 samples, 0.33%)</title><rect x="56.3827%" y="149" width="0.3319%" height="15" fill="rgb(236,23,11)"/><text x="56.6327%" y="159.50"></text></g><g><title>monomorphization_collector (299,054 samples, 0.36%)</title><rect x="56.3789%" y="165" width="0.3641%" height="15" fill="rgb(205,117,38)"/><text x="56.6289%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (86,721 samples, 0.11%)</title><rect x="56.7483%" y="149" width="0.1056%" height="15" fill="rgb(237,72,25)"/><text x="56.9983%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (456,255 samples, 0.56%)</title><rect x="56.3467%" y="181" width="0.5555%" height="15" fill="rgb(244,70,9)"/><text x="56.5967%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (130,751 samples, 0.16%)</title><rect x="56.7431%" y="165" width="0.1592%" height="15" fill="rgb(217,125,39)"/><text x="56.9931%" y="175.50"></text></g><g><title>codegen_crate (2,373,726 samples, 2.89%)</title><rect x="54.0566%" y="197" width="2.8903%" height="15" fill="rgb(235,36,10)"/><text x="54.3066%" y="207.50">co..</text></g><g><title>codegen_module_optimize (3,089,634 samples, 3.76%)</title><rect x="56.9469%" y="197" width="3.7620%" height="15" fill="rgb(251,123,47)"/><text x="57.1969%" y="207.50">code..</text></g><g><title>LLVM_module_optimize (2,674,160 samples, 3.26%)</title><rect x="57.4528%" y="181" width="3.2561%" height="15" fill="rgb(221,13,13)"/><text x="57.7028%" y="191.50">LLV..</text></g><g><title>LLVM_lto_optimize (745,718 samples, 0.91%)</title><rect x="61.0169%" y="181" width="0.9080%" height="15" fill="rgb(238,131,9)"/><text x="61.2669%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,310,366 samples, 2.81%)</title><rect x="61.9249%" y="181" width="2.8132%" height="15" fill="rgb(211,50,8)"/><text x="62.1749%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,263,825 samples, 2.76%)</title><rect x="61.9816%" y="165" width="2.7565%" height="15" fill="rgb(245,182,24)"/><text x="62.2316%" y="175.50">LL..</text></g><g><title>codegen_module_perform_lto (3,336,567 samples, 4.06%)</title><rect x="60.7089%" y="197" width="4.0627%" height="15" fill="rgb(242,14,37)"/><text x="60.9589%" y="207.50">code..</text></g><g><title>AST_validation (143,142 samples, 0.17%)</title><rect x="65.0074%" y="181" width="0.1743%" height="15" fill="rgb(246,228,12)"/><text x="65.2574%" y="191.50"></text></g><g><title>crate_injection (87,471 samples, 0.11%)</title><rect x="65.2414%" y="181" width="0.1065%" height="15" fill="rgb(213,55,15)"/><text x="65.4914%" y="191.50"></text></g><g><title>metadata_load_macro (381,403 samples, 0.46%)</title><rect x="75.6580%" y="149" width="0.4644%" height="15" fill="rgb(209,9,3)"/><text x="75.9080%" y="159.50"></text></g><g><title>macro_expand_crate (9,029,230 samples, 10.99%)</title><rect x="65.3479%" y="181" width="10.9942%" height="15" fill="rgb(230,59,30)"/><text x="65.5979%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (9,014,430 samples, 10.98%)</title><rect x="65.3659%" y="165" width="10.9762%" height="15" fill="rgb(209,121,21)"/><text x="65.6159%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (180,482 samples, 0.22%)</title><rect x="76.1224%" y="149" width="0.2198%" height="15" fill="rgb(220,109,13)"/><text x="76.3724%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (140,252 samples, 0.17%)</title><rect x="76.3482%" y="181" width="0.1708%" height="15" fill="rgb(232,18,1)"/><text x="76.5982%" y="191.50"></text></g><g><title>late_resolve_crate (1,026,552 samples, 1.25%)</title><rect x="76.6652%" y="165" width="1.2500%" height="15" fill="rgb(215,41,42)"/><text x="76.9152%" y="175.50"></text></g><g><title>configure_and_expand (10,866,800 samples, 13.23%)</title><rect x="64.7716%" y="197" width="13.2317%" height="15" fill="rgb(224,123,36)"/><text x="65.0216%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (1,219,083 samples, 1.48%)</title><rect x="76.5190%" y="181" width="1.4844%" height="15" fill="rgb(240,125,3)"/><text x="76.7690%" y="191.50"></text></g><g><title>drop_ast (110,211 samples, 0.13%)</title><rect x="78.0033%" y="197" width="0.1342%" height="15" fill="rgb(205,98,50)"/><text x="78.2533%" y="207.50"></text></g><g><title>early_lint_checks (237,173 samples, 0.29%)</title><rect x="78.1682%" y="197" width="0.2888%" height="15" fill="rgb(205,185,37)"/><text x="78.4182%" y="207.50"></text></g><g><title>free_global_ctxt (1,917,171 samples, 2.33%)</title><rect x="78.4570%" y="197" width="2.3344%" height="15" fill="rgb(238,207,15)"/><text x="78.7070%" y="207.50">f..</text></g><g><title>crate_hash (100,031 samples, 0.12%)</title><rect x="82.0022%" y="181" width="0.1218%" height="15" fill="rgb(213,199,42)"/><text x="82.2522%" y="191.50"></text></g><g><title>exported_symbols (91,051 samples, 0.11%)</title><rect x="82.1716%" y="181" width="0.1109%" height="15" fill="rgb(235,201,11)"/><text x="82.4216%" y="191.50"></text></g><g><title>is_sized_raw (129,151 samples, 0.16%)</title><rect x="84.6579%" y="149" width="0.1573%" height="15" fill="rgb(207,46,11)"/><text x="84.9079%" y="159.50"></text></g><g><title>evaluate_obligation (94,131 samples, 0.11%)</title><rect x="84.7005%" y="133" width="0.1146%" height="15" fill="rgb(241,35,35)"/><text x="84.9505%" y="143.50"></text></g><g><title>layout_of (105,251 samples, 0.13%)</title><rect x="84.8152%" y="149" width="0.1282%" height="15" fill="rgb(243,32,47)"/><text x="85.0652%" y="159.50"></text></g><g><title>layout_of (561,005 samples, 0.68%)</title><rect x="84.2939%" y="165" width="0.6831%" height="15" fill="rgb(247,202,23)"/><text x="84.5439%" y="175.50"></text></g><g><title>needs_drop_raw (210,193 samples, 0.26%)</title><rect x="86.7823%" y="149" width="0.2559%" height="15" fill="rgb(219,102,11)"/><text x="87.0323%" y="159.50"></text></g><g><title>is_copy_raw (176,893 samples, 0.22%)</title><rect x="86.8228%" y="133" width="0.2154%" height="15" fill="rgb(243,110,44)"/><text x="87.0728%" y="143.50"></text></g><g><title>evaluate_obligation (129,943 samples, 0.16%)</title><rect x="86.8800%" y="117" width="0.1582%" height="15" fill="rgb(222,74,54)"/><text x="87.1300%" y="127.50"></text></g><g><title>optimized_mir (3,839,104 samples, 4.67%)</title><rect x="82.3855%" y="181" width="4.6746%" height="15" fill="rgb(216,99,12)"/><text x="82.6355%" y="191.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,710,788 samples, 2.08%)</title><rect x="84.9770%" y="165" width="2.0831%" height="15" fill="rgb(226,22,26)"/><text x="85.2270%" y="175.50">m..</text></g><g><title>generate_crate_metadata (5,238,108 samples, 6.38%)</title><rect x="80.7914%" y="197" width="6.3781%" height="15" fill="rgb(217,163,10)"/><text x="81.0414%" y="207.50">generate..</text></g><g><title>hir_lowering (1,429,215 samples, 1.74%)</title><rect x="87.1694%" y="197" width="1.7403%" height="15" fill="rgb(213,25,53)"/><text x="87.4194%" y="207.50"></text></g><g><title>finish_ongoing_codegen (4,396,349 samples, 5.35%)</title><rect x="88.9356%" y="181" width="5.3531%" height="15" fill="rgb(252,105,26)"/><text x="89.1856%" y="191.50">finish_..</text></g><g><title>link_crate (1,187,053 samples, 1.45%)</title><rect x="94.2887%" y="181" width="1.4454%" height="15" fill="rgb(220,39,43)"/><text x="94.5387%" y="191.50"></text></g><g><title>link_binary (1,177,823 samples, 1.43%)</title><rect x="94.2999%" y="165" width="1.4341%" height="15" fill="rgb(229,68,48)"/><text x="94.5499%" y="175.50"></text></g><g><title>link_rlib (732,518 samples, 0.89%)</title><rect x="94.8422%" y="149" width="0.8919%" height="15" fill="rgb(252,8,32)"/><text x="95.0922%" y="159.50"></text></g><g><title>link (5,619,352 samples, 6.84%)</title><rect x="88.9097%" y="197" width="6.8423%" height="15" fill="rgb(223,20,43)"/><text x="89.1597%" y="207.50">link</text></g><g><title>parse_crate (1,901,571 samples, 2.32%)</title><rect x="95.7520%" y="197" width="2.3154%" height="15" fill="rgb(229,81,49)"/><text x="96.0020%" y="207.50">p..</text></g><g><title>prepare_outputs (332,354 samples, 0.40%)</title><rect x="98.0784%" y="197" width="0.4047%" height="15" fill="rgb(236,28,36)"/><text x="98.3284%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (661,528 samples, 0.81%)</title><rect x="98.4830%" y="197" width="0.8055%" height="15" fill="rgb(249,185,26)"/><text x="98.7330%" y="207.50"></text></g><g><title>setup_global_ctxt (155,372 samples, 0.19%)</title><rect x="99.2900%" y="197" width="0.1892%" height="15" fill="rgb(249,174,33)"/><text x="99.5400%" y="207.50"></text></g><g><title>all (82,126,977 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (82,126,977 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (427,725 samples, 0.52%)</title><rect x="99.4792%" y="197" width="0.5208%" height="15" fill="rgb(250,127,30)"/><text x="99.7292%" y="207.50"></text></g></svg></svg>