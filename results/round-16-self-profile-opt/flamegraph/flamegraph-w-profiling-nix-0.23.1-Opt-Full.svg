<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,031,766,124 samples, 7.83%)</title><rect x="0.0161%" y="181" width="7.8311%" height="15" fill="rgb(227,0,7)"/><text x="0.2661%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (18,579,758 samples, 0.14%)</title><rect x="7.7061%" y="165" width="0.1410%" height="15" fill="rgb(217,0,24)"/><text x="7.9561%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (18,153,713 samples, 0.14%)</title><rect x="7.7094%" y="149" width="0.1378%" height="15" fill="rgb(221,193,54)"/><text x="7.9594%" y="159.50"></text></g><g><title>needs_drop_raw (14,186,769 samples, 0.11%)</title><rect x="14.7657%" y="69" width="0.1077%" height="15" fill="rgb(248,212,6)"/><text x="15.0157%" y="79.50"></text></g><g><title>resolve_instance (15,715,093 samples, 0.12%)</title><rect x="14.8739%" y="69" width="0.1193%" height="15" fill="rgb(208,68,35)"/><text x="15.1239%" y="79.50"></text></g><g><title>thir_body (60,005,509 samples, 0.46%)</title><rect x="15.0044%" y="69" width="0.4554%" height="15" fill="rgb(232,128,0)"/><text x="15.2544%" y="79.50"></text></g><g><title>mir_const (310,269,192 samples, 2.35%)</title><rect x="13.1133%" y="117" width="2.3549%" height="15" fill="rgb(207,160,47)"/><text x="13.3633%" y="127.50">m..</text></g><g><title>unsafety_check_result (264,709,776 samples, 2.01%)</title><rect x="13.4591%" y="101" width="2.0091%" height="15" fill="rgb(228,23,34)"/><text x="13.7091%" y="111.50">u..</text></g><g><title>mir_built (239,479,862 samples, 1.82%)</title><rect x="13.6506%" y="85" width="1.8176%" height="15" fill="rgb(218,30,26)"/><text x="13.9006%" y="95.50">m..</text></g><g><title>mir_const (55,870,455 samples, 0.42%)</title><rect x="15.6120%" y="101" width="0.4241%" height="15" fill="rgb(220,122,19)"/><text x="15.8620%" y="111.50"></text></g><g><title>unsafety_check_result (44,167,693 samples, 0.34%)</title><rect x="15.7009%" y="85" width="0.3352%" height="15" fill="rgb(250,228,42)"/><text x="15.9509%" y="95.50"></text></g><g><title>mir_built (39,476,333 samples, 0.30%)</title><rect x="15.7365%" y="69" width="0.2996%" height="15" fill="rgb(240,193,28)"/><text x="15.9865%" y="79.50"></text></g><g><title>mir_const_qualif (76,133,875 samples, 0.58%)</title><rect x="15.4682%" y="117" width="0.5779%" height="15" fill="rgb(216,20,37)"/><text x="15.7182%" y="127.50"></text></g><g><title>mir_promoted (432,696,900 samples, 3.28%)</title><rect x="12.7619%" y="133" width="3.2842%" height="15" fill="rgb(206,188,39)"/><text x="13.0119%" y="143.50">mir..</text></g><g><title>type_op_prove_predicate (41,844,283 samples, 0.32%)</title><rect x="16.2287%" y="133" width="0.3176%" height="15" fill="rgb(217,207,13)"/><text x="16.4787%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,132,933,518 samples, 8.60%)</title><rect x="7.9477%" y="165" width="8.5989%" height="15" fill="rgb(231,73,38)"/><text x="8.1977%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (1,115,224,815 samples, 8.46%)</title><rect x="8.0821%" y="149" width="8.4645%" height="15" fill="rgb(225,20,46)"/><text x="8.3321%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (31,871,507 samples, 0.24%)</title><rect x="16.5466%" y="165" width="0.2419%" height="15" fill="rgb(210,31,41)"/><text x="16.7966%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (25,872,229 samples, 0.20%)</title><rect x="16.5921%" y="149" width="0.1964%" height="15" fill="rgb(221,200,47)"/><text x="16.8421%" y="159.50"></text></g><g><title>codegen_fn_attrs (17,200,374 samples, 0.13%)</title><rect x="17.0172%" y="133" width="0.1306%" height="15" fill="rgb(226,26,5)"/><text x="17.2672%" y="143.50"></text></g><g><title>check_mod_attrs (34,327,327 samples, 0.26%)</title><rect x="16.8873%" y="149" width="0.2605%" height="15" fill="rgb(249,33,26)"/><text x="17.1373%" y="159.50"></text></g><g><title>lint_levels (18,671,970 samples, 0.14%)</title><rect x="17.3095%" y="133" width="0.1417%" height="15" fill="rgb(235,183,28)"/><text x="17.5595%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (36,330,634 samples, 0.28%)</title><rect x="17.2635%" y="149" width="0.2757%" height="15" fill="rgb(221,5,38)"/><text x="17.5135%" y="159.50"></text></g><g><title>misc_checking_1 (90,911,108 samples, 0.69%)</title><rect x="16.8856%" y="165" width="0.6900%" height="15" fill="rgb(247,18,42)"/><text x="17.1356%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (25,749,729 samples, 0.20%)</title><rect x="17.5756%" y="149" width="0.1954%" height="15" fill="rgb(241,131,45)"/><text x="17.8256%" y="159.50"></text></g><g><title>check_mod_liveness (20,411,560 samples, 0.15%)</title><rect x="17.6162%" y="133" width="0.1549%" height="15" fill="rgb(249,31,29)"/><text x="17.8662%" y="143.50"></text></g><g><title>misc_checking_2 (65,450,054 samples, 0.50%)</title><rect x="17.5756%" y="165" width="0.4968%" height="15" fill="rgb(225,111,53)"/><text x="17.8256%" y="175.50"></text></g><g><title>match_checking (39,696,455 samples, 0.30%)</title><rect x="17.7711%" y="149" width="0.3013%" height="15" fill="rgb(238,160,17)"/><text x="18.0211%" y="159.50"></text></g><g><title>check_match (35,808,458 samples, 0.27%)</title><rect x="17.8006%" y="133" width="0.2718%" height="15" fill="rgb(214,148,48)"/><text x="18.0506%" y="143.50"></text></g><g><title>check_private_in_public (20,145,146 samples, 0.15%)</title><rect x="18.0730%" y="149" width="0.1529%" height="15" fill="rgb(232,36,49)"/><text x="18.3230%" y="159.50"></text></g><g><title>death_checking (29,734,583 samples, 0.23%)</title><rect x="18.2259%" y="149" width="0.2257%" height="15" fill="rgb(209,103,24)"/><text x="18.4759%" y="159.50"></text></g><g><title>crate_lints (40,727,657 samples, 0.31%)</title><rect x="18.4516%" y="133" width="0.3091%" height="15" fill="rgb(229,88,8)"/><text x="18.7016%" y="143.50"></text></g><g><title>lint_checking (73,169,489 samples, 0.56%)</title><rect x="18.4516%" y="149" width="0.5554%" height="15" fill="rgb(213,181,19)"/><text x="18.7016%" y="159.50"></text></g><g><title>module_lints (32,437,842 samples, 0.25%)</title><rect x="18.7608%" y="133" width="0.2462%" height="15" fill="rgb(254,191,54)"/><text x="19.0108%" y="143.50"></text></g><g><title>lint_mod (32,361,082 samples, 0.25%)</title><rect x="18.7613%" y="117" width="0.2456%" height="15" fill="rgb(241,83,37)"/><text x="19.0113%" y="127.50"></text></g><g><title>privacy_access_levels (25,668,317 samples, 0.19%)</title><rect x="19.0070%" y="149" width="0.1948%" height="15" fill="rgb(233,36,39)"/><text x="19.2570%" y="159.50"></text></g><g><title>privacy_checking_modules (47,749,405 samples, 0.36%)</title><rect x="19.2018%" y="149" width="0.3624%" height="15" fill="rgb(226,3,54)"/><text x="19.4518%" y="159.50"></text></g><g><title>check_mod_privacy (47,689,545 samples, 0.36%)</title><rect x="19.2022%" y="133" width="0.3620%" height="15" fill="rgb(245,192,40)"/><text x="19.4522%" y="143.50"></text></g><g><title>misc_checking_3 (197,369,760 samples, 1.50%)</title><rect x="18.0724%" y="165" width="1.4980%" height="15" fill="rgb(238,167,29)"/><text x="18.3224%" y="175.50"></text></g><g><title>coherent_trait (30,835,776 samples, 0.23%)</title><rect x="19.6058%" y="133" width="0.2340%" height="15" fill="rgb(232,182,51)"/><text x="19.8558%" y="143.50"></text></g><g><title>specialization_graph_of (28,427,967 samples, 0.22%)</title><rect x="19.6241%" y="117" width="0.2158%" height="15" fill="rgb(231,60,39)"/><text x="19.8741%" y="127.50"></text></g><g><title>coherence_checking (33,337,374 samples, 0.25%)</title><rect x="19.6052%" y="149" width="0.2530%" height="15" fill="rgb(208,69,12)"/><text x="19.8552%" y="159.50"></text></g><g><title>evaluate_obligation (29,245,071 samples, 0.22%)</title><rect x="27.6071%" y="101" width="0.2220%" height="15" fill="rgb(235,93,37)"/><text x="27.8571%" y="111.50"></text></g><g><title>typeck (107,489,686 samples, 0.82%)</title><rect x="27.9706%" y="101" width="0.8158%" height="15" fill="rgb(213,116,39)"/><text x="28.2206%" y="111.50"></text></g><g><title>item_bodies_checking (1,174,915,378 samples, 8.92%)</title><rect x="19.8838%" y="149" width="8.9176%" height="15" fill="rgb(222,207,29)"/><text x="20.1338%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (1,174,911,068 samples, 8.92%)</title><rect x="19.8839%" y="133" width="8.9175%" height="15" fill="rgb(206,96,30)"/><text x="20.1339%" y="143.50">typeck_item_b..</text></g><g><title>typeck (1,167,788,754 samples, 8.86%)</title><rect x="19.9379%" y="117" width="8.8635%" height="15" fill="rgb(218,138,4)"/><text x="20.1879%" y="127.50">typeck</text></g><g><title>item_types_checking (73,575,894 samples, 0.56%)</title><rect x="28.8014%" y="149" width="0.5584%" height="15" fill="rgb(250,191,14)"/><text x="29.0514%" y="159.50"></text></g><g><title>check_mod_item_types (73,498,824 samples, 0.56%)</title><rect x="28.8020%" y="133" width="0.5579%" height="15" fill="rgb(239,60,40)"/><text x="29.0520%" y="143.50"></text></g><g><title>mir_borrowck (32,098,832 samples, 0.24%)</title><rect x="29.8078%" y="37" width="0.2436%" height="15" fill="rgb(206,27,48)"/><text x="30.0578%" y="47.50"></text></g><g><title>mir_for_ctfe (46,949,465 samples, 0.36%)</title><rect x="29.6967%" y="69" width="0.3563%" height="15" fill="rgb(225,35,8)"/><text x="29.9467%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,408,280 samples, 0.33%)</title><rect x="29.7236%" y="53" width="0.3295%" height="15" fill="rgb(250,213,24)"/><text x="29.9736%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (14,224,209 samples, 0.11%)</title><rect x="30.0538%" y="69" width="0.1080%" height="15" fill="rgb(247,123,22)"/><text x="30.3038%" y="79.50"></text></g><g><title>eval_to_const_value_raw (105,460,825 samples, 0.80%)</title><rect x="29.5203%" y="117" width="0.8004%" height="15" fill="rgb(231,138,38)"/><text x="29.7703%" y="127.50"></text></g><g><title>eval_to_const_value_raw (105,147,819 samples, 0.80%)</title><rect x="29.5227%" y="101" width="0.7981%" height="15" fill="rgb(231,145,46)"/><text x="29.7727%" y="111.50"></text></g><g><title>eval_to_allocation_raw (104,705,573 samples, 0.79%)</title><rect x="29.5260%" y="85" width="0.7947%" height="15" fill="rgb(251,118,11)"/><text x="29.7760%" y="95.50"></text></g><g><title>typeck (20,939,608 samples, 0.16%)</title><rect x="30.1618%" y="69" width="0.1589%" height="15" fill="rgb(217,147,25)"/><text x="30.4118%" y="79.50"></text></g><g><title>fn_sig (14,831,261 samples, 0.11%)</title><rect x="30.3207%" y="117" width="0.1126%" height="15" fill="rgb(247,81,37)"/><text x="30.5707%" y="127.50"></text></g><g><title>named_region_map (16,753,892 samples, 0.13%)</title><rect x="30.5047%" y="101" width="0.1272%" height="15" fill="rgb(209,12,38)"/><text x="30.7547%" y="111.50"></text></g><g><title>resolve_lifetimes (15,101,065 samples, 0.11%)</title><rect x="30.5173%" y="85" width="0.1146%" height="15" fill="rgb(227,1,9)"/><text x="30.7673%" y="95.50"></text></g><g><title>generics_of (27,107,566 samples, 0.21%)</title><rect x="30.4333%" y="117" width="0.2057%" height="15" fill="rgb(248,47,43)"/><text x="30.6833%" y="127.50"></text></g><g><title>predicates_of (24,020,318 samples, 0.18%)</title><rect x="30.6966%" y="117" width="0.1823%" height="15" fill="rgb(221,10,30)"/><text x="30.9466%" y="127.50"></text></g><g><title>predicates_defined_on (18,998,984 samples, 0.14%)</title><rect x="30.7347%" y="101" width="0.1442%" height="15" fill="rgb(210,229,1)"/><text x="30.9847%" y="111.50"></text></g><g><title>type_collecting (204,698,703 samples, 1.55%)</title><rect x="29.3601%" y="149" width="1.5537%" height="15" fill="rgb(222,148,37)"/><text x="29.6101%" y="159.50"></text></g><g><title>collect_mod_item_types (204,616,203 samples, 1.55%)</title><rect x="29.3608%" y="133" width="1.5530%" height="15" fill="rgb(234,67,33)"/><text x="29.6108%" y="143.50"></text></g><g><title>param_env (16,471,856 samples, 0.13%)</title><rect x="31.8059%" y="117" width="0.1250%" height="15" fill="rgb(247,98,35)"/><text x="32.0559%" y="127.50"></text></g><g><title>region_scope_tree (24,142,937 samples, 0.18%)</title><rect x="31.9318%" y="117" width="0.1832%" height="15" fill="rgb(247,138,52)"/><text x="32.1818%" y="127.50"></text></g><g><title>check_impl_item_well_formed (145,621,842 samples, 1.11%)</title><rect x="31.0103%" y="133" width="1.1053%" height="15" fill="rgb(213,79,30)"/><text x="31.2603%" y="143.50"></text></g><g><title>evaluate_obligation (21,037,682 samples, 0.16%)</title><rect x="32.5233%" y="117" width="0.1597%" height="15" fill="rgb(246,177,23)"/><text x="32.7733%" y="127.50"></text></g><g><title>check_item_well_formed (97,100,216 samples, 0.74%)</title><rect x="32.1155%" y="133" width="0.7370%" height="15" fill="rgb(230,62,27)"/><text x="32.3655%" y="143.50"></text></g><g><title>analysis (3,318,926,850 samples, 25.19%)</title><rect x="7.8472%" y="181" width="25.1905%" height="15" fill="rgb(216,154,8)"/><text x="8.0972%" y="191.50">analysis</text></g><g><title>type_check_crate (1,774,354,972 samples, 13.47%)</title><rect x="19.5704%" y="165" width="13.4673%" height="15" fill="rgb(244,35,45)"/><text x="19.8204%" y="175.50">type_check_crate</text></g><g><title>wf_checking (279,225,117 samples, 2.12%)</title><rect x="30.9184%" y="149" width="2.1193%" height="15" fill="rgb(251,115,12)"/><text x="31.1684%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (24,396,952 samples, 0.19%)</title><rect x="32.8525%" y="133" width="0.1852%" height="15" fill="rgb(240,54,50)"/><text x="33.1025%" y="143.50"></text></g><g><title>fn_abi_of_instance (83,578,663 samples, 0.63%)</title><rect x="35.9599%" y="149" width="0.6344%" height="15" fill="rgb(233,84,52)"/><text x="36.2099%" y="159.50"></text></g><g><title>codegen_module (475,421,565 samples, 3.61%)</title><rect x="33.0646%" y="165" width="3.6084%" height="15" fill="rgb(207,117,47)"/><text x="33.3146%" y="175.50">code..</text></g><g><title>mir_drops_elaborated_and_const_checked (80,964,267 samples, 0.61%)</title><rect x="37.5647%" y="101" width="0.6145%" height="15" fill="rgb(249,43,39)"/><text x="37.8147%" y="111.50"></text></g><g><title>optimized_mir (173,559,664 samples, 1.32%)</title><rect x="36.8929%" y="117" width="1.3173%" height="15" fill="rgb(209,38,44)"/><text x="37.1429%" y="127.50"></text></g><g><title>resolve_instance (23,023,459 samples, 0.17%)</title><rect x="38.2102%" y="117" width="0.1747%" height="15" fill="rgb(236,212,23)"/><text x="38.4602%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (234,407,446 samples, 1.78%)</title><rect x="36.6745%" y="133" width="1.7791%" height="15" fill="rgb(242,79,21)"/><text x="36.9245%" y="143.50">m..</text></g><g><title>monomorphization_collector (238,507,182 samples, 1.81%)</title><rect x="36.6744%" y="149" width="1.8103%" height="15" fill="rgb(211,96,35)"/><text x="36.9244%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (13,718,434 samples, 0.10%)</title><rect x="38.4849%" y="133" width="0.1041%" height="15" fill="rgb(253,215,40)"/><text x="38.7349%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (259,946,382 samples, 1.97%)</title><rect x="36.6731%" y="165" width="1.9730%" height="15" fill="rgb(211,81,21)"/><text x="36.9231%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (21,269,368 samples, 0.16%)</title><rect x="38.4847%" y="149" width="0.1614%" height="15" fill="rgb(208,190,38)"/><text x="38.7347%" y="159.50"></text></g><g><title>codegen_crate (738,997,016 samples, 5.61%)</title><rect x="33.0378%" y="181" width="5.6090%" height="15" fill="rgb(235,213,38)"/><text x="33.2878%" y="191.50">codegen..</text></g><g><title>codegen_module_optimize (2,318,712,511 samples, 17.60%)</title><rect x="38.6467%" y="181" width="17.5989%" height="15" fill="rgb(237,122,38)"/><text x="38.8967%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,185,046,290 samples, 16.58%)</title><rect x="39.6613%" y="165" width="16.5844%" height="15" fill="rgb(244,218,35)"/><text x="39.9113%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (1,535,031,723 samples, 11.65%)</title><rect x="56.8500%" y="165" width="11.6508%" height="15" fill="rgb(240,68,47)"/><text x="57.1000%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (1,783,184,149 samples, 13.53%)</title><rect x="68.5008%" y="165" width="13.5343%" height="15" fill="rgb(210,16,53)"/><text x="68.7508%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,771,572,758 samples, 13.45%)</title><rect x="68.5889%" y="149" width="13.4462%" height="15" fill="rgb(235,124,12)"/><text x="68.8389%" y="159.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (396,719,014 samples, 3.01%)</title><rect x="82.0351%" y="165" width="3.0111%" height="15" fill="rgb(224,169,11)"/><text x="82.2851%" y="175.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,804,550,319 samples, 28.88%)</title><rect x="56.2457%" y="181" width="28.8764%" height="15" fill="rgb(250,166,2)"/><text x="56.4957%" y="191.50">codegen_module_perform_lto</text></g><g><title>AST_validation (15,954,939 samples, 0.12%)</title><rect x="85.1239%" y="165" width="0.1211%" height="15" fill="rgb(242,216,29)"/><text x="85.3739%" y="175.50"></text></g><g><title>macro_expand_crate (633,011,019 samples, 4.80%)</title><rect x="85.2988%" y="165" width="4.8045%" height="15" fill="rgb(230,116,27)"/><text x="85.5488%" y="175.50">macro_..</text></g><g><title>expand_crate (632,973,429 samples, 4.80%)</title><rect x="85.2991%" y="149" width="4.8042%" height="15" fill="rgb(228,99,48)"/><text x="85.5491%" y="159.50">expand..</text></g><g><title>late_resolve_crate (68,684,928 samples, 0.52%)</title><rect x="90.1765%" y="149" width="0.5213%" height="15" fill="rgb(253,11,6)"/><text x="90.4265%" y="159.50"></text></g><g><title>configure_and_expand (746,099,996 samples, 5.66%)</title><rect x="85.1221%" y="181" width="5.6629%" height="15" fill="rgb(247,143,39)"/><text x="85.3721%" y="191.50">configu..</text></g><g><title>resolve_crate (89,614,403 samples, 0.68%)</title><rect x="90.1048%" y="165" width="0.6802%" height="15" fill="rgb(236,97,10)"/><text x="90.3548%" y="175.50"></text></g><g><title>drop_ast (24,549,035 samples, 0.19%)</title><rect x="90.7849%" y="181" width="0.1863%" height="15" fill="rgb(233,208,19)"/><text x="91.0349%" y="191.50"></text></g><g><title>early_lint_checks (22,966,468 samples, 0.17%)</title><rect x="90.9716%" y="181" width="0.1743%" height="15" fill="rgb(216,164,2)"/><text x="91.2216%" y="191.50"></text></g><g><title>free_global_ctxt (72,021,367 samples, 0.55%)</title><rect x="91.1459%" y="181" width="0.5466%" height="15" fill="rgb(220,129,5)"/><text x="91.3959%" y="191.50"></text></g><g><title>exported_symbols (16,031,339 samples, 0.12%)</title><rect x="92.3979%" y="165" width="0.1217%" height="15" fill="rgb(242,17,10)"/><text x="92.6479%" y="175.50"></text></g><g><title>mir_for_ctfe (19,139,321 samples, 0.15%)</title><rect x="92.5281%" y="165" width="0.1453%" height="15" fill="rgb(242,107,0)"/><text x="92.7781%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (89,599,932 samples, 0.68%)</title><rect x="93.6584%" y="149" width="0.6801%" height="15" fill="rgb(251,28,31)"/><text x="93.9084%" y="159.50"></text></g><g><title>mir_for_ctfe (14,029,428 samples, 0.11%)</title><rect x="94.3981%" y="85" width="0.1065%" height="15" fill="rgb(233,223,10)"/><text x="94.6481%" y="95.50"></text></g><g><title>eval_to_const_value_raw (19,369,496 samples, 0.15%)</title><rect x="94.3615%" y="133" width="0.1470%" height="15" fill="rgb(215,21,27)"/><text x="94.6115%" y="143.50"></text></g><g><title>eval_to_const_value_raw (19,067,821 samples, 0.14%)</title><rect x="94.3638%" y="117" width="0.1447%" height="15" fill="rgb(232,23,21)"/><text x="94.6138%" y="127.50"></text></g><g><title>eval_to_allocation_raw (18,581,520 samples, 0.14%)</title><rect x="94.3675%" y="101" width="0.1410%" height="15" fill="rgb(244,5,23)"/><text x="94.6175%" y="111.50"></text></g><g><title>optimized_mir (243,155,371 samples, 1.85%)</title><rect x="92.6813%" y="165" width="1.8455%" height="15" fill="rgb(226,81,46)"/><text x="92.9313%" y="175.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (22,890,585 samples, 0.17%)</title><rect x="94.3531%" y="149" width="0.1737%" height="15" fill="rgb(247,70,30)"/><text x="94.6031%" y="159.50"></text></g><g><title>generate_crate_metadata (378,458,478 samples, 2.87%)</title><rect x="91.6926%" y="181" width="2.8725%" height="15" fill="rgb(212,68,19)"/><text x="91.9426%" y="191.50">ge..</text></g><g><title>hir_lowering (185,127,773 samples, 1.41%)</title><rect x="94.5651%" y="181" width="1.4051%" height="15" fill="rgb(240,187,13)"/><text x="94.8151%" y="191.50"></text></g><g><title>finish_ongoing_codegen (478,798,072 samples, 3.63%)</title><rect x="95.9703%" y="165" width="3.6341%" height="15" fill="rgb(223,113,26)"/><text x="96.2203%" y="175.50">fini..</text></g><g><title>link_crate (23,227,500 samples, 0.18%)</title><rect x="99.6044%" y="165" width="0.1763%" height="15" fill="rgb(206,192,2)"/><text x="99.8544%" y="175.50"></text></g><g><title>link_binary (22,823,436 samples, 0.17%)</title><rect x="99.6075%" y="149" width="0.1732%" height="15" fill="rgb(241,108,4)"/><text x="99.8575%" y="159.50"></text></g><g><title>link_rlib (19,698,191 samples, 0.15%)</title><rect x="99.6312%" y="133" width="0.1495%" height="15" fill="rgb(247,173,49)"/><text x="99.8812%" y="143.50"></text></g><g><title>link (502,057,932 samples, 3.81%)</title><rect x="95.9702%" y="181" width="3.8106%" height="15" fill="rgb(224,114,35)"/><text x="96.2202%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (21,027,366 samples, 0.16%)</title><rect x="99.7990%" y="181" width="0.1596%" height="15" fill="rgb(245,159,27)"/><text x="100.0490%" y="191.50"></text></g><g><title>all (13,175,295,687 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (13,175,295,687 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>