<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="341.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="341.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,084,884,646 samples, 10.70%)</title><rect x="0.0470%" y="277" width="10.7016%" height="15" fill="rgb(227,0,7)"/><text x="0.2970%" y="287.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (19,861,946 samples, 0.10%)</title><rect x="10.6466%" y="261" width="0.1020%" height="15" fill="rgb(217,0,24)"/><text x="10.8966%" y="271.50"></text></g><g><title>LLVM_thin_lto_global_analysis (19,750,155 samples, 0.10%)</title><rect x="10.6472%" y="245" width="0.1014%" height="15" fill="rgb(221,193,54)"/><text x="10.8972%" y="255.50"></text></g><g><title>thir_body (22,843,253 samples, 0.12%)</title><rect x="13.4545%" y="165" width="0.1173%" height="15" fill="rgb(248,212,6)"/><text x="13.7045%" y="175.50"></text></g><g><title>mir_const (120,413,780 samples, 0.62%)</title><rect x="12.9551%" y="213" width="0.6181%" height="15" fill="rgb(208,68,35)"/><text x="13.2051%" y="223.50"></text></g><g><title>unsafety_check_result (105,159,473 samples, 0.54%)</title><rect x="13.0334%" y="197" width="0.5398%" height="15" fill="rgb(232,128,0)"/><text x="13.2834%" y="207.50"></text></g><g><title>mir_built (94,634,378 samples, 0.49%)</title><rect x="13.0875%" y="181" width="0.4858%" height="15" fill="rgb(207,160,47)"/><text x="13.3375%" y="191.50"></text></g><g><title>thir_body (34,395,361 samples, 0.18%)</title><rect x="13.7960%" y="149" width="0.1765%" height="15" fill="rgb(228,23,34)"/><text x="14.0460%" y="159.50"></text></g><g><title>mir_const_qualif (77,849,377 samples, 0.40%)</title><rect x="13.5732%" y="213" width="0.3996%" height="15" fill="rgb(218,30,26)"/><text x="13.8232%" y="223.50"></text></g><g><title>mir_const (74,863,792 samples, 0.38%)</title><rect x="13.5886%" y="197" width="0.3843%" height="15" fill="rgb(220,122,19)"/><text x="13.8386%" y="207.50"></text></g><g><title>unsafety_check_result (71,372,084 samples, 0.37%)</title><rect x="13.6065%" y="181" width="0.3663%" height="15" fill="rgb(250,228,42)"/><text x="13.8565%" y="191.50"></text></g><g><title>mir_built (69,585,613 samples, 0.36%)</title><rect x="13.6156%" y="165" width="0.3572%" height="15" fill="rgb(240,193,28)"/><text x="13.8656%" y="175.50"></text></g><g><title>mir_promoted (242,066,685 samples, 1.24%)</title><rect x="12.7310%" y="229" width="1.2425%" height="15" fill="rgb(216,20,37)"/><text x="12.9810%" y="239.50"></text></g><g><title>type_op_prove_predicate (27,146,183 samples, 0.14%)</title><rect x="14.0498%" y="229" width="0.1393%" height="15" fill="rgb(206,188,39)"/><text x="14.2998%" y="239.50"></text></g><g><title>MIR_borrow_checking (661,999,015 samples, 3.40%)</title><rect x="10.7913%" y="261" width="3.3980%" height="15" fill="rgb(217,207,13)"/><text x="11.0413%" y="271.50">MIR..</text></g><g><title>mir_borrowck (659,210,926 samples, 3.38%)</title><rect x="10.8057%" y="245" width="3.3837%" height="15" fill="rgb(231,73,38)"/><text x="11.0557%" y="255.50">mir..</text></g><g><title>misc_checking_1 (28,875,288 samples, 0.15%)</title><rect x="14.2509%" y="261" width="0.1482%" height="15" fill="rgb(225,20,46)"/><text x="14.5009%" y="271.50"></text></g><g><title>misc_checking_2 (26,283,068 samples, 0.13%)</title><rect x="14.3991%" y="261" width="0.1349%" height="15" fill="rgb(210,31,41)"/><text x="14.6491%" y="271.50"></text></g><g><title>eval_to_const_value_raw (174,108,762 samples, 0.89%)</title><rect x="14.8368%" y="149" width="0.8937%" height="15" fill="rgb(221,200,47)"/><text x="15.0868%" y="159.50"></text></g><g><title>eval_to_const_value_raw (173,842,231 samples, 0.89%)</title><rect x="14.8382%" y="133" width="0.8923%" height="15" fill="rgb(226,26,5)"/><text x="15.0882%" y="143.50"></text></g><g><title>eval_to_allocation_raw (173,361,224 samples, 0.89%)</title><rect x="14.8407%" y="117" width="0.8899%" height="15" fill="rgb(249,33,26)"/><text x="15.0907%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (91,750,739 samples, 0.47%)</title><rect x="15.2596%" y="101" width="0.4710%" height="15" fill="rgb(235,183,28)"/><text x="15.5096%" y="111.50"></text></g><g><title>eval_to_const_value_raw (90,770,602 samples, 0.47%)</title><rect x="15.2646%" y="85" width="0.4659%" height="15" fill="rgb(221,5,38)"/><text x="15.5146%" y="95.50"></text></g><g><title>eval_to_const_value_raw (90,311,586 samples, 0.46%)</title><rect x="15.2669%" y="69" width="0.4636%" height="15" fill="rgb(247,18,42)"/><text x="15.5169%" y="79.50"></text></g><g><title>eval_to_allocation_raw (89,652,550 samples, 0.46%)</title><rect x="15.2703%" y="53" width="0.4602%" height="15" fill="rgb(241,131,45)"/><text x="15.5203%" y="63.50"></text></g><g><title>promoted_mir (26,445,067 samples, 0.14%)</title><rect x="15.5948%" y="37" width="0.1357%" height="15" fill="rgb(249,31,29)"/><text x="15.8448%" y="47.50"></text></g><g><title>eval_to_const_value_raw (204,043,515 samples, 1.05%)</title><rect x="14.6847%" y="213" width="1.0473%" height="15" fill="rgb(225,111,53)"/><text x="14.9347%" y="223.50"></text></g><g><title>eval_to_const_value_raw (204,032,335 samples, 1.05%)</title><rect x="14.6848%" y="197" width="1.0473%" height="15" fill="rgb(238,160,17)"/><text x="14.9348%" y="207.50"></text></g><g><title>eval_to_allocation_raw (204,014,735 samples, 1.05%)</title><rect x="14.6849%" y="181" width="1.0472%" height="15" fill="rgb(214,148,48)"/><text x="14.9349%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (175,730,213 samples, 0.90%)</title><rect x="14.8301%" y="165" width="0.9020%" height="15" fill="rgb(232,36,49)"/><text x="15.0801%" y="175.50"></text></g><g><title>crate_lints (221,915,839 samples, 1.14%)</title><rect x="14.6104%" y="229" width="1.1391%" height="15" fill="rgb(209,103,24)"/><text x="14.8604%" y="239.50"></text></g><g><title>lint_checking (246,872,602 samples, 1.27%)</title><rect x="14.6103%" y="245" width="1.2672%" height="15" fill="rgb(229,88,8)"/><text x="14.8603%" y="255.50"></text></g><g><title>module_lints (24,952,693 samples, 0.13%)</title><rect x="15.7494%" y="229" width="0.1281%" height="15" fill="rgb(213,181,19)"/><text x="15.9994%" y="239.50"></text></g><g><title>lint_mod (24,921,323 samples, 0.13%)</title><rect x="15.7496%" y="213" width="0.1279%" height="15" fill="rgb(254,191,54)"/><text x="15.9996%" y="223.50"></text></g><g><title>privacy_checking_modules (26,908,606 samples, 0.14%)</title><rect x="15.9117%" y="245" width="0.1381%" height="15" fill="rgb(241,83,37)"/><text x="16.1617%" y="255.50"></text></g><g><title>check_mod_privacy (26,879,996 samples, 0.14%)</title><rect x="15.9119%" y="229" width="0.1380%" height="15" fill="rgb(233,36,39)"/><text x="16.1619%" y="239.50"></text></g><g><title>misc_checking_3 (295,509,095 samples, 1.52%)</title><rect x="14.5340%" y="261" width="1.5168%" height="15" fill="rgb(226,3,54)"/><text x="14.7840%" y="271.50"></text></g><g><title>evaluate_obligation (23,188,185 samples, 0.12%)</title><rect x="18.0970%" y="197" width="0.1190%" height="15" fill="rgb(245,192,40)"/><text x="18.3470%" y="207.50"></text></g><g><title>typeck (54,951,829 samples, 0.28%)</title><rect x="18.2647%" y="197" width="0.2821%" height="15" fill="rgb(238,167,29)"/><text x="18.5147%" y="207.50"></text></g><g><title>item_bodies_checking (467,260,494 samples, 2.40%)</title><rect x="16.1518%" y="245" width="2.3984%" height="15" fill="rgb(232,182,51)"/><text x="16.4018%" y="255.50">it..</text></g><g><title>typeck_item_bodies (467,254,514 samples, 2.40%)</title><rect x="16.1518%" y="229" width="2.3984%" height="15" fill="rgb(231,60,39)"/><text x="16.4018%" y="239.50">ty..</text></g><g><title>typeck (465,547,959 samples, 2.39%)</title><rect x="16.1606%" y="213" width="2.3896%" height="15" fill="rgb(208,69,12)"/><text x="16.4106%" y="223.50">ty..</text></g><g><title>mir_const (74,798,429 samples, 0.38%)</title><rect x="18.6823%" y="149" width="0.3839%" height="15" fill="rgb(235,93,37)"/><text x="18.9323%" y="159.50"></text></g><g><title>unsafety_check_result (73,815,867 samples, 0.38%)</title><rect x="18.6874%" y="133" width="0.3789%" height="15" fill="rgb(213,116,39)"/><text x="18.9374%" y="143.50"></text></g><g><title>mir_built (73,064,759 samples, 0.38%)</title><rect x="18.6912%" y="117" width="0.3750%" height="15" fill="rgb(222,207,29)"/><text x="18.9412%" y="127.50"></text></g><g><title>typeck (55,896,893 samples, 0.29%)</title><rect x="18.7794%" y="101" width="0.2869%" height="15" fill="rgb(206,96,30)"/><text x="19.0294%" y="111.50"></text></g><g><title>mir_const_qualif (75,381,055 samples, 0.39%)</title><rect x="18.6793%" y="165" width="0.3869%" height="15" fill="rgb(218,138,4)"/><text x="18.9293%" y="175.50"></text></g><g><title>mir_promoted (84,705,133 samples, 0.43%)</title><rect x="18.6315%" y="181" width="0.4348%" height="15" fill="rgb(250,191,14)"/><text x="18.8815%" y="191.50"></text></g><g><title>type_of (89,460,634 samples, 0.46%)</title><rect x="18.6120%" y="213" width="0.4592%" height="15" fill="rgb(239,60,40)"/><text x="18.8620%" y="223.50"></text></g><g><title>mir_borrowck (89,420,334 samples, 0.46%)</title><rect x="18.6122%" y="197" width="0.4590%" height="15" fill="rgb(206,27,48)"/><text x="18.8622%" y="207.50"></text></g><g><title>item_types_checking (236,694,587 samples, 1.21%)</title><rect x="18.5502%" y="245" width="1.2149%" height="15" fill="rgb(225,35,8)"/><text x="18.8002%" y="255.50"></text></g><g><title>check_mod_item_types (236,662,106 samples, 1.21%)</title><rect x="18.5504%" y="229" width="1.2148%" height="15" fill="rgb(250,213,24)"/><text x="18.8004%" y="239.50"></text></g><g><title>typeck (135,192,685 samples, 0.69%)</title><rect x="19.0712%" y="213" width="0.6939%" height="15" fill="rgb(247,123,22)"/><text x="19.3212%" y="223.50"></text></g><g><title>type_collecting (23,841,271 samples, 0.12%)</title><rect x="19.7652%" y="245" width="0.1224%" height="15" fill="rgb(231,138,38)"/><text x="20.0152%" y="255.50"></text></g><g><title>collect_mod_item_types (23,794,341 samples, 0.12%)</title><rect x="19.7654%" y="229" width="0.1221%" height="15" fill="rgb(231,145,46)"/><text x="20.0154%" y="239.50"></text></g><g><title>check_impl_item_well_formed (37,232,801 samples, 0.19%)</title><rect x="19.9065%" y="229" width="0.1911%" height="15" fill="rgb(251,118,11)"/><text x="20.1565%" y="239.50"></text></g><g><title>check_item_well_formed (31,931,428 samples, 0.16%)</title><rect x="20.0976%" y="229" width="0.1639%" height="15" fill="rgb(217,147,25)"/><text x="20.3476%" y="239.50"></text></g><g><title>analysis (1,855,472,533 samples, 9.52%)</title><rect x="10.7486%" y="277" width="9.5240%" height="15" fill="rgb(247,81,37)"/><text x="10.9986%" y="287.50">analysis</text></g><g><title>type_check_crate (822,484,097 samples, 4.22%)</title><rect x="16.0509%" y="261" width="4.2218%" height="15" fill="rgb(209,12,38)"/><text x="16.3009%" y="271.50">type_..</text></g><g><title>wf_checking (74,777,799 samples, 0.38%)</title><rect x="19.8888%" y="245" width="0.3838%" height="15" fill="rgb(227,1,9)"/><text x="20.1388%" y="255.50"></text></g><g><title>fn_abi_of_instance (73,938,773 samples, 0.38%)</title><rect x="23.0309%" y="245" width="0.3795%" height="15" fill="rgb(248,47,43)"/><text x="23.2809%" y="255.50"></text></g><g><title>codegen_module (623,664,187 samples, 3.20%)</title><rect x="20.2873%" y="261" width="3.2012%" height="15" fill="rgb(221,10,30)"/><text x="20.5373%" y="271.50">cod..</text></g><g><title>mir_drops_elaborated_and_const_checked (37,245,274 samples, 0.19%)</title><rect x="23.9409%" y="197" width="0.1912%" height="15" fill="rgb(210,229,1)"/><text x="24.1909%" y="207.50"></text></g><g><title>optimized_mir (85,979,065 samples, 0.44%)</title><rect x="23.7083%" y="213" width="0.4413%" height="15" fill="rgb(222,148,37)"/><text x="23.9583%" y="223.50"></text></g><g><title>codegen_fulfill_obligation (25,822,182 samples, 0.13%)</title><rect x="24.1970%" y="197" width="0.1325%" height="15" fill="rgb(234,67,33)"/><text x="24.4470%" y="207.50"></text></g><g><title>resolve_instance (42,462,737 samples, 0.22%)</title><rect x="24.1496%" y="213" width="0.2180%" height="15" fill="rgb(247,98,35)"/><text x="24.3996%" y="223.50"></text></g><g><title>monomorphization_collector_graph_walk (187,610,539 samples, 0.96%)</title><rect x="23.4893%" y="229" width="0.9630%" height="15" fill="rgb(247,138,52)"/><text x="23.7393%" y="239.50"></text></g><g><title>monomorphization_collector (189,143,567 samples, 0.97%)</title><rect x="23.4893%" y="245" width="0.9709%" height="15" fill="rgb(213,79,30)"/><text x="23.7393%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (215,784,829 samples, 1.11%)</title><rect x="23.4886%" y="261" width="1.1076%" height="15" fill="rgb(246,177,23)"/><text x="23.7386%" y="271.50"></text></g><g><title>partition_and_assert_distinct_symbols (26,503,181 samples, 0.14%)</title><rect x="24.4601%" y="245" width="0.1360%" height="15" fill="rgb(230,62,27)"/><text x="24.7101%" y="255.50"></text></g><g><title>codegen_crate (842,377,652 samples, 4.32%)</title><rect x="20.2727%" y="277" width="4.3239%" height="15" fill="rgb(216,154,8)"/><text x="20.5227%" y="287.50">codeg..</text></g><g><title>codegen_module_optimize (5,114,319,136 samples, 26.25%)</title><rect x="24.5965%" y="277" width="26.2515%" height="15" fill="rgb(244,35,45)"/><text x="24.8465%" y="287.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (4,839,798,041 samples, 24.84%)</title><rect x="26.0056%" y="261" width="24.8424%" height="15" fill="rgb(251,115,12)"/><text x="26.2556%" y="271.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (3,797,743,517 samples, 19.49%)</title><rect x="51.7025%" y="261" width="19.4936%" height="15" fill="rgb(240,54,50)"/><text x="51.9525%" y="271.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (2,878,710,787 samples, 14.78%)</title><rect x="71.1961%" y="261" width="14.7763%" height="15" fill="rgb(233,84,52)"/><text x="71.4461%" y="271.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (2,847,855,093 samples, 14.62%)</title><rect x="71.3545%" y="245" width="14.6179%" height="15" fill="rgb(207,117,47)"/><text x="71.6045%" y="255.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (626,353,673 samples, 3.22%)</title><rect x="85.9724%" y="261" width="3.2150%" height="15" fill="rgb(249,43,39)"/><text x="86.2224%" y="271.50">LLV..</text></g><g><title>codegen_module_perform_lto (7,494,861,833 samples, 38.47%)</title><rect x="50.8481%" y="277" width="38.4708%" height="15" fill="rgb(209,38,44)"/><text x="51.0981%" y="287.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (203,672,533 samples, 1.05%)</title><rect x="89.3591%" y="261" width="1.0454%" height="15" fill="rgb(236,212,23)"/><text x="89.6091%" y="271.50"></text></g><g><title>expand_crate (203,658,442 samples, 1.05%)</title><rect x="89.3591%" y="245" width="1.0454%" height="15" fill="rgb(242,79,21)"/><text x="89.6091%" y="255.50"></text></g><g><title>late_resolve_crate (25,660,832 samples, 0.13%)</title><rect x="90.4126%" y="245" width="0.1317%" height="15" fill="rgb(211,96,35)"/><text x="90.6626%" y="255.50"></text></g><g><title>configure_and_expand (245,555,758 samples, 1.26%)</title><rect x="89.3188%" y="277" width="1.2604%" height="15" fill="rgb(253,215,40)"/><text x="89.5688%" y="287.50"></text></g><g><title>resolve_crate (33,958,506 samples, 0.17%)</title><rect x="90.4050%" y="261" width="0.1743%" height="15" fill="rgb(211,81,21)"/><text x="90.6550%" y="271.50"></text></g><g><title>free_global_ctxt (67,648,658 samples, 0.35%)</title><rect x="90.7036%" y="277" width="0.3472%" height="15" fill="rgb(208,190,38)"/><text x="90.9536%" y="287.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (41,546,703 samples, 0.21%)</title><rect x="91.7240%" y="245" width="0.2133%" height="15" fill="rgb(235,213,38)"/><text x="91.9740%" y="255.50"></text></g><g><title>optimized_mir (82,994,179 samples, 0.43%)</title><rect x="91.5160%" y="261" width="0.4260%" height="15" fill="rgb(237,122,38)"/><text x="91.7660%" y="271.50"></text></g><g><title>generate_crate_metadata (175,311,849 samples, 0.90%)</title><rect x="91.0509%" y="277" width="0.8999%" height="15" fill="rgb(244,218,35)"/><text x="91.3009%" y="287.50"></text></g><g><title>hir_lowering (77,481,399 samples, 0.40%)</title><rect x="91.9507%" y="277" width="0.3977%" height="15" fill="rgb(240,68,47)"/><text x="92.2007%" y="287.50"></text></g><g><title>finish_ongoing_codegen (1,439,846,193 samples, 7.39%)</title><rect x="92.3486%" y="261" width="7.3907%" height="15" fill="rgb(210,16,53)"/><text x="92.5986%" y="271.50">finish_ong..</text></g><g><title>link_crate (35,981,249 samples, 0.18%)</title><rect x="99.7393%" y="261" width="0.1847%" height="15" fill="rgb(235,124,12)"/><text x="99.9893%" y="271.50"></text></g><g><title>link_binary (35,691,206 samples, 0.18%)</title><rect x="99.7407%" y="245" width="0.1832%" height="15" fill="rgb(224,169,11)"/><text x="99.9907%" y="255.50"></text></g><g><title>link_rlib (31,637,229 samples, 0.16%)</title><rect x="99.7616%" y="229" width="0.1624%" height="15" fill="rgb(250,166,2)"/><text x="100.0116%" y="239.50"></text></g><g><title>link (1,475,874,123 samples, 7.58%)</title><rect x="92.3484%" y="277" width="7.5756%" height="15" fill="rgb(242,216,29)"/><text x="92.5984%" y="287.50">link</text></g><g><title>all (19,481,971,525 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="319.50"></text></g><g><title>rustc (19,481,971,525 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="303.50">rustc</text></g></svg></svg>