<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (53,849,039 samples, 15.96%)</title><rect x="0.1780%" y="197" width="15.9644%" height="15" fill="rgb(227,0,7)"/><text x="0.4280%" y="207.50">LLVM_passes</text></g><g><title>resolve_instance (683,626 samples, 0.20%)</title><rect x="21.4526%" y="85" width="0.2027%" height="15" fill="rgb(217,0,24)"/><text x="21.7026%" y="95.50"></text></g><g><title>thir_body (1,026,153 samples, 0.30%)</title><rect x="21.6662%" y="85" width="0.3042%" height="15" fill="rgb(221,193,54)"/><text x="21.9162%" y="95.50"></text></g><g><title>mir_const (6,781,760 samples, 2.01%)</title><rect x="19.9670%" y="133" width="2.0106%" height="15" fill="rgb(248,212,6)"/><text x="20.2170%" y="143.50">m..</text></g><g><title>unsafety_check_result (5,799,817 samples, 1.72%)</title><rect x="20.2581%" y="117" width="1.7194%" height="15" fill="rgb(208,68,35)"/><text x="20.5081%" y="127.50"></text></g><g><title>mir_built (5,287,212 samples, 1.57%)</title><rect x="20.4101%" y="101" width="1.5675%" height="15" fill="rgb(232,128,0)"/><text x="20.6601%" y="111.50"></text></g><g><title>mir_const (530,784 samples, 0.16%)</title><rect x="22.0497%" y="117" width="0.1574%" height="15" fill="rgb(207,160,47)"/><text x="22.2997%" y="127.50"></text></g><g><title>unsafety_check_result (399,173 samples, 0.12%)</title><rect x="22.0887%" y="101" width="0.1183%" height="15" fill="rgb(228,23,34)"/><text x="22.3387%" y="111.50"></text></g><g><title>mir_built (346,583 samples, 0.10%)</title><rect x="22.1043%" y="85" width="0.1027%" height="15" fill="rgb(218,30,26)"/><text x="22.3543%" y="95.50"></text></g><g><title>mir_promoted (8,513,565 samples, 2.52%)</title><rect x="19.6836%" y="149" width="2.5240%" height="15" fill="rgb(220,122,19)"/><text x="19.9336%" y="159.50">mi..</text></g><g><title>mir_const_qualif (775,807 samples, 0.23%)</title><rect x="21.9775%" y="133" width="0.2300%" height="15" fill="rgb(250,228,42)"/><text x="22.2275%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,052,179 samples, 0.31%)</title><rect x="22.2729%" y="149" width="0.3119%" height="15" fill="rgb(240,193,28)"/><text x="22.5229%" y="159.50"></text></g><g><title>MIR_borrow_checking (21,387,285 samples, 6.34%)</title><rect x="16.2461%" y="181" width="6.3406%" height="15" fill="rgb(216,20,37)"/><text x="16.4961%" y="191.50">MIR_borr..</text></g><g><title>mir_borrowck (21,167,532 samples, 6.28%)</title><rect x="16.3112%" y="165" width="6.2754%" height="15" fill="rgb(206,188,39)"/><text x="16.5612%" y="175.50">mir_borr..</text></g><g><title>MIR_effect_checking (426,344 samples, 0.13%)</title><rect x="22.5867%" y="181" width="0.1264%" height="15" fill="rgb(217,207,13)"/><text x="22.8367%" y="191.50"></text></g><g><title>codegen_fn_attrs (509,655 samples, 0.15%)</title><rect x="22.8901%" y="149" width="0.1511%" height="15" fill="rgb(231,73,38)"/><text x="23.1401%" y="159.50"></text></g><g><title>check_mod_attrs (845,769 samples, 0.25%)</title><rect x="22.7905%" y="165" width="0.2507%" height="15" fill="rgb(225,20,46)"/><text x="23.0405%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (365,694 samples, 0.11%)</title><rect x="23.1136%" y="165" width="0.1084%" height="15" fill="rgb(210,31,41)"/><text x="23.3636%" y="175.50"></text></g><g><title>misc_checking_1 (1,547,967 samples, 0.46%)</title><rect x="22.7842%" y="181" width="0.4589%" height="15" fill="rgb(221,200,47)"/><text x="23.0342%" y="191.50"></text></g><g><title>misc_checking_2 (964,811 samples, 0.29%)</title><rect x="23.2431%" y="181" width="0.2860%" height="15" fill="rgb(226,26,5)"/><text x="23.4931%" y="191.50"></text></g><g><title>match_checking (684,728 samples, 0.20%)</title><rect x="23.3261%" y="165" width="0.2030%" height="15" fill="rgb(249,33,26)"/><text x="23.5761%" y="175.50"></text></g><g><title>check_match (636,037 samples, 0.19%)</title><rect x="23.3406%" y="149" width="0.1886%" height="15" fill="rgb(235,183,28)"/><text x="23.5906%" y="159.50"></text></g><g><title>death_checking (627,157 samples, 0.19%)</title><rect x="23.6034%" y="165" width="0.1859%" height="15" fill="rgb(221,5,38)"/><text x="23.8534%" y="175.50"></text></g><g><title>eval_to_const_value_raw (377,723 samples, 0.11%)</title><rect x="23.9603%" y="133" width="0.1120%" height="15" fill="rgb(247,18,42)"/><text x="24.2103%" y="143.50"></text></g><g><title>eval_to_const_value_raw (367,283 samples, 0.11%)</title><rect x="23.9634%" y="117" width="0.1089%" height="15" fill="rgb(241,131,45)"/><text x="24.2134%" y="127.50"></text></g><g><title>eval_to_allocation_raw (348,803 samples, 0.10%)</title><rect x="23.9689%" y="101" width="0.1034%" height="15" fill="rgb(249,31,29)"/><text x="24.2189%" y="111.50"></text></g><g><title>crate_lints (1,435,706 samples, 0.43%)</title><rect x="23.7898%" y="149" width="0.4256%" height="15" fill="rgb(225,111,53)"/><text x="24.0398%" y="159.50"></text></g><g><title>lint_checking (1,878,621 samples, 0.56%)</title><rect x="23.7893%" y="165" width="0.5569%" height="15" fill="rgb(238,160,17)"/><text x="24.0393%" y="175.50"></text></g><g><title>module_lints (441,305 samples, 0.13%)</title><rect x="24.2154%" y="149" width="0.1308%" height="15" fill="rgb(214,148,48)"/><text x="24.4654%" y="159.50"></text></g><g><title>lint_mod (437,265 samples, 0.13%)</title><rect x="24.2166%" y="133" width="0.1296%" height="15" fill="rgb(232,36,49)"/><text x="24.4666%" y="143.50"></text></g><g><title>privacy_access_levels (372,094 samples, 0.11%)</title><rect x="24.3463%" y="165" width="0.1103%" height="15" fill="rgb(209,103,24)"/><text x="24.5963%" y="175.50"></text></g><g><title>privacy_checking_modules (740,678 samples, 0.22%)</title><rect x="24.4566%" y="165" width="0.2196%" height="15" fill="rgb(229,88,8)"/><text x="24.7066%" y="175.50"></text></g><g><title>check_mod_privacy (738,118 samples, 0.22%)</title><rect x="24.4573%" y="149" width="0.2188%" height="15" fill="rgb(213,181,19)"/><text x="24.7073%" y="159.50"></text></g><g><title>misc_checking_3 (3,885,043 samples, 1.15%)</title><rect x="23.5291%" y="181" width="1.1518%" height="15" fill="rgb(254,191,54)"/><text x="23.7791%" y="191.50"></text></g><g><title>impl_parent (1,077,752 samples, 0.32%)</title><rect x="25.3813%" y="117" width="0.3195%" height="15" fill="rgb(241,83,37)"/><text x="25.6313%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (605,316 samples, 0.18%)</title><rect x="25.5214%" y="101" width="0.1795%" height="15" fill="rgb(233,36,39)"/><text x="25.7714%" y="111.50"></text></g><g><title>impl_trait_ref (2,275,390 samples, 0.67%)</title><rect x="25.7008%" y="117" width="0.6746%" height="15" fill="rgb(226,3,54)"/><text x="25.9508%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,556,565 samples, 0.46%)</title><rect x="25.9139%" y="101" width="0.4615%" height="15" fill="rgb(245,192,40)"/><text x="26.1639%" y="111.50"></text></g><g><title>coherent_trait (5,980,346 samples, 1.77%)</title><rect x="24.7138%" y="149" width="1.7730%" height="15" fill="rgb(238,167,29)"/><text x="24.9638%" y="159.50">c..</text></g><g><title>specialization_graph_of (5,499,641 samples, 1.63%)</title><rect x="24.8563%" y="133" width="1.6305%" height="15" fill="rgb(232,182,51)"/><text x="25.1063%" y="143.50"></text></g><g><title>trait_impls_of (374,255 samples, 0.11%)</title><rect x="26.3758%" y="117" width="0.1110%" height="15" fill="rgb(231,60,39)"/><text x="26.6258%" y="127.50"></text></g><g><title>coherence_checking (6,066,556 samples, 1.80%)</title><rect x="24.7086%" y="165" width="1.7985%" height="15" fill="rgb(208,69,12)"/><text x="24.9586%" y="175.50">c..</text></g><g><title>mir_for_ctfe (895,066 samples, 0.27%)</title><rect x="31.5562%" y="53" width="0.2654%" height="15" fill="rgb(235,93,37)"/><text x="31.8062%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (885,536 samples, 0.26%)</title><rect x="31.5590%" y="37" width="0.2625%" height="15" fill="rgb(213,116,39)"/><text x="31.8090%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,822,429 samples, 0.54%)</title><rect x="31.2903%" y="101" width="0.5403%" height="15" fill="rgb(222,207,29)"/><text x="31.5403%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,780,079 samples, 0.53%)</title><rect x="31.3029%" y="85" width="0.5277%" height="15" fill="rgb(206,96,30)"/><text x="31.5529%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,736,998 samples, 0.51%)</title><rect x="31.3157%" y="69" width="0.5150%" height="15" fill="rgb(218,138,4)"/><text x="31.5657%" y="79.50"></text></g><g><title>evaluate_obligation (3,215,524 samples, 0.95%)</title><rect x="30.9867%" y="117" width="0.9533%" height="15" fill="rgb(250,191,14)"/><text x="31.2367%" y="127.50"></text></g><g><title>item_bodies_checking (19,006,047 samples, 5.63%)</title><rect x="26.5196%" y="165" width="5.6346%" height="15" fill="rgb(239,60,40)"/><text x="26.7696%" y="175.50">item_bo..</text></g><g><title>typeck_item_bodies (19,003,667 samples, 5.63%)</title><rect x="26.5203%" y="149" width="5.6339%" height="15" fill="rgb(206,27,48)"/><text x="26.7703%" y="159.50">typeck_..</text></g><g><title>typeck (18,875,025 samples, 5.60%)</title><rect x="26.5584%" y="133" width="5.5958%" height="15" fill="rgb(225,35,8)"/><text x="26.8084%" y="143.50">typeck</text></g><g><title>item_types_checking (1,572,607 samples, 0.47%)</title><rect x="32.1542%" y="165" width="0.4662%" height="15" fill="rgb(250,213,24)"/><text x="32.4042%" y="175.50"></text></g><g><title>check_mod_item_types (1,569,607 samples, 0.47%)</title><rect x="32.1551%" y="149" width="0.4653%" height="15" fill="rgb(247,123,22)"/><text x="32.4051%" y="159.50"></text></g><g><title>typeck (471,265 samples, 0.14%)</title><rect x="32.4807%" y="133" width="0.1397%" height="15" fill="rgb(231,138,38)"/><text x="32.7307%" y="143.50"></text></g><g><title>fn_sig (734,498 samples, 0.22%)</title><rect x="32.7436%" y="133" width="0.2178%" height="15" fill="rgb(231,145,46)"/><text x="32.9936%" y="143.50"></text></g><g><title>named_region_map (530,405 samples, 0.16%)</title><rect x="33.0111%" y="117" width="0.1572%" height="15" fill="rgb(251,118,11)"/><text x="33.2611%" y="127.50"></text></g><g><title>resolve_lifetimes (504,285 samples, 0.15%)</title><rect x="33.0189%" y="101" width="0.1495%" height="15" fill="rgb(217,147,25)"/><text x="33.2689%" y="111.50"></text></g><g><title>generics_of (723,055 samples, 0.21%)</title><rect x="32.9613%" y="133" width="0.2144%" height="15" fill="rgb(247,81,37)"/><text x="33.2113%" y="143.50"></text></g><g><title>predicates_of (548,498 samples, 0.16%)</title><rect x="33.1966%" y="133" width="0.1626%" height="15" fill="rgb(209,12,38)"/><text x="33.4466%" y="143.50"></text></g><g><title>predicates_defined_on (452,067 samples, 0.13%)</title><rect x="33.2252%" y="117" width="0.1340%" height="15" fill="rgb(227,1,9)"/><text x="33.4752%" y="127.50"></text></g><g><title>type_collecting (2,598,538 samples, 0.77%)</title><rect x="32.6208%" y="165" width="0.7704%" height="15" fill="rgb(248,47,43)"/><text x="32.8708%" y="175.50"></text></g><g><title>collect_mod_item_types (2,590,498 samples, 0.77%)</title><rect x="32.6232%" y="149" width="0.7680%" height="15" fill="rgb(221,10,30)"/><text x="32.8732%" y="159.50"></text></g><g><title>region_scope_tree (343,645 samples, 0.10%)</title><rect x="34.0635%" y="133" width="0.1019%" height="15" fill="rgb(210,229,1)"/><text x="34.3135%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,366,919 samples, 0.70%)</title><rect x="33.4669%" y="149" width="0.7017%" height="15" fill="rgb(222,148,37)"/><text x="33.7169%" y="159.50"></text></g><g><title>evaluate_obligation (555,604 samples, 0.16%)</title><rect x="34.8342%" y="133" width="0.1647%" height="15" fill="rgb(234,67,33)"/><text x="35.0842%" y="143.50"></text></g><g><title>param_env (593,268 samples, 0.18%)</title><rect x="35.0447%" y="133" width="0.1759%" height="15" fill="rgb(247,98,35)"/><text x="35.2947%" y="143.50"></text></g><g><title>analysis (64,696,649 samples, 19.18%)</title><rect x="16.1424%" y="197" width="19.1803%" height="15" fill="rgb(247,138,52)"/><text x="16.3924%" y="207.50">analysis</text></g><g><title>type_check_crate (35,895,612 samples, 10.64%)</title><rect x="24.6809%" y="181" width="10.6418%" height="15" fill="rgb(213,79,30)"/><text x="24.9309%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,504,592 samples, 1.93%)</title><rect x="33.3943%" y="165" width="1.9284%" height="15" fill="rgb(246,177,23)"/><text x="33.6443%" y="175.50">w..</text></g><g><title>check_item_well_formed (3,892,871 samples, 1.15%)</title><rect x="34.1686%" y="149" width="1.1541%" height="15" fill="rgb(230,62,27)"/><text x="34.4186%" y="159.50"></text></g><g><title>param_env (685,316 samples, 0.20%)</title><rect x="37.3055%" y="149" width="0.2032%" height="15" fill="rgb(216,154,8)"/><text x="37.5555%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (406,075 samples, 0.12%)</title><rect x="37.5087%" y="149" width="0.1204%" height="15" fill="rgb(244,35,45)"/><text x="37.7587%" y="159.50"></text></g><g><title>fn_abi_of_instance (2,520,017 samples, 0.75%)</title><rect x="36.8861%" y="165" width="0.7471%" height="15" fill="rgb(251,115,12)"/><text x="37.1361%" y="175.50"></text></g><g><title>codegen_module (7,249,179 samples, 2.15%)</title><rect x="35.6289%" y="181" width="2.1491%" height="15" fill="rgb(240,54,50)"/><text x="35.8789%" y="191.50">c..</text></g><g><title>codegen_fn_attrs (418,464 samples, 0.12%)</title><rect x="37.8957%" y="133" width="0.1241%" height="15" fill="rgb(233,84,52)"/><text x="38.1457%" y="143.50"></text></g><g><title>optimized_mir (1,410,135 samples, 0.42%)</title><rect x="38.0645%" y="133" width="0.4181%" height="15" fill="rgb(207,117,47)"/><text x="38.3145%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (423,395 samples, 0.13%)</title><rect x="38.3570%" y="117" width="0.1255%" height="15" fill="rgb(249,43,39)"/><text x="38.6070%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (615,185 samples, 0.18%)</title><rect x="38.5389%" y="117" width="0.1824%" height="15" fill="rgb(209,38,44)"/><text x="38.7889%" y="127.50"></text></g><g><title>specialization_graph_of (624,647 samples, 0.19%)</title><rect x="38.8142%" y="117" width="0.1852%" height="15" fill="rgb(236,212,23)"/><text x="39.0642%" y="127.50"></text></g><g><title>resolve_instance (1,828,451 samples, 0.54%)</title><rect x="38.4825%" y="133" width="0.5421%" height="15" fill="rgb(242,79,21)"/><text x="38.7325%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (4,634,681 samples, 1.37%)</title><rect x="37.7846%" y="149" width="1.3740%" height="15" fill="rgb(211,96,35)"/><text x="38.0346%" y="159.50"></text></g><g><title>vtable_entries (388,065 samples, 0.12%)</title><rect x="39.0436%" y="133" width="0.1150%" height="15" fill="rgb(253,215,40)"/><text x="39.2936%" y="143.50"></text></g><g><title>monomorphization_collector (4,711,072 samples, 1.40%)</title><rect x="37.7839%" y="165" width="1.3967%" height="15" fill="rgb(211,81,21)"/><text x="38.0339%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (5,207,317 samples, 1.54%)</title><rect x="37.7784%" y="181" width="1.5438%" height="15" fill="rgb(208,190,38)"/><text x="38.0284%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (477,665 samples, 0.14%)</title><rect x="39.1806%" y="165" width="0.1416%" height="15" fill="rgb(235,213,38)"/><text x="39.4306%" y="175.50"></text></g><g><title>codegen_crate (13,501,298 samples, 4.00%)</title><rect x="35.3247%" y="197" width="4.0027%" height="15" fill="rgb(237,122,38)"/><text x="35.5747%" y="207.50">code..</text></g><g><title>codegen_module_optimize (35,573,368 samples, 10.55%)</title><rect x="39.3274%" y="197" width="10.5463%" height="15" fill="rgb(244,218,35)"/><text x="39.5774%" y="207.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (31,415,684 samples, 9.31%)</title><rect x="40.5600%" y="181" width="9.3137%" height="15" fill="rgb(240,68,47)"/><text x="40.8100%" y="191.50">LLVM_module_o..</text></g><g><title>LLVM_lto_optimize (31,433,475 samples, 9.32%)</title><rect x="50.7217%" y="181" width="9.3189%" height="15" fill="rgb(210,16,53)"/><text x="50.9717%" y="191.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (55,242,557 samples, 16.38%)</title><rect x="60.0407%" y="181" width="16.3775%" height="15" fill="rgb(235,124,12)"/><text x="60.2907%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (54,679,780 samples, 16.21%)</title><rect x="60.2075%" y="165" width="16.2107%" height="15" fill="rgb(224,169,11)"/><text x="60.4575%" y="175.50">LLVM_module_codegen_emit_..</text></g><g><title>LLVM_thin_lto_import (1,405,945 samples, 0.42%)</title><rect x="76.4182%" y="181" width="0.4168%" height="15" fill="rgb(250,166,2)"/><text x="76.6682%" y="191.50"></text></g><g><title>codegen_module_perform_lto (91,194,300 samples, 27.04%)</title><rect x="49.8736%" y="197" width="27.0360%" height="15" fill="rgb(242,216,29)"/><text x="50.1236%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (10,148,931 samples, 3.01%)</title><rect x="77.0618%" y="181" width="3.0088%" height="15" fill="rgb(230,116,27)"/><text x="77.3118%" y="191.50">mac..</text></g><g><title>expand_crate (10,138,891 samples, 3.01%)</title><rect x="77.0647%" y="165" width="3.0058%" height="15" fill="rgb(228,99,48)"/><text x="77.3147%" y="175.50">exp..</text></g><g><title>late_resolve_crate (1,992,962 samples, 0.59%)</title><rect x="80.2044%" y="165" width="0.5908%" height="15" fill="rgb(253,11,6)"/><text x="80.4544%" y="175.50"></text></g><g><title>configure_and_expand (13,233,595 samples, 3.92%)</title><rect x="76.9096%" y="197" width="3.9233%" height="15" fill="rgb(247,143,39)"/><text x="77.1596%" y="207.50">conf..</text></g><g><title>resolve_crate (2,455,617 samples, 0.73%)</title><rect x="80.1049%" y="181" width="0.7280%" height="15" fill="rgb(236,97,10)"/><text x="80.3549%" y="191.50"></text></g><g><title>early_lint_checks (446,395 samples, 0.13%)</title><rect x="80.8953%" y="197" width="0.1323%" height="15" fill="rgb(233,208,19)"/><text x="81.1453%" y="207.50"></text></g><g><title>free_global_ctxt (2,497,087 samples, 0.74%)</title><rect x="81.0276%" y="197" width="0.7403%" height="15" fill="rgb(216,164,2)"/><text x="81.2776%" y="207.50"></text></g><g><title>layout_of (399,785 samples, 0.12%)</title><rect x="83.3974%" y="165" width="0.1185%" height="15" fill="rgb(220,129,5)"/><text x="83.6474%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,624,673 samples, 0.78%)</title><rect x="83.5159%" y="165" width="0.7781%" height="15" fill="rgb(242,17,10)"/><text x="83.7659%" y="175.50"></text></g><g><title>optimized_mir (6,315,823 samples, 1.87%)</title><rect x="82.4292%" y="181" width="1.8724%" height="15" fill="rgb(242,107,0)"/><text x="82.6792%" y="191.50">o..</text></g><g><title>generate_crate_metadata (8,647,605 samples, 2.56%)</title><rect x="81.7679%" y="197" width="2.5637%" height="15" fill="rgb(251,28,31)"/><text x="82.0179%" y="207.50">ge..</text></g><g><title>hir_lowering (3,416,857 samples, 1.01%)</title><rect x="84.3316%" y="197" width="1.0130%" height="15" fill="rgb(233,223,10)"/><text x="84.5816%" y="207.50"></text></g><g><title>finish_ongoing_codegen (45,020,243 samples, 13.35%)</title><rect x="85.3502%" y="181" width="13.3469%" height="15" fill="rgb(215,21,27)"/><text x="85.6002%" y="191.50">finish_ongoing_codeg..</text></g><g><title>link_crate (1,011,961 samples, 0.30%)</title><rect x="98.6972%" y="181" width="0.3000%" height="15" fill="rgb(232,23,21)"/><text x="98.9472%" y="191.50"></text></g><g><title>link_binary (1,005,971 samples, 0.30%)</title><rect x="98.6990%" y="165" width="0.2982%" height="15" fill="rgb(244,5,23)"/><text x="98.9490%" y="175.50"></text></g><g><title>link_rlib (650,817 samples, 0.19%)</title><rect x="98.8042%" y="149" width="0.1929%" height="15" fill="rgb(226,81,46)"/><text x="99.0542%" y="159.50"></text></g><g><title>link (46,061,514 samples, 13.66%)</title><rect x="85.3446%" y="197" width="13.6556%" height="15" fill="rgb(247,70,30)"/><text x="85.5946%" y="207.50">link</text></g><g><title>parse_crate (1,631,198 samples, 0.48%)</title><rect x="99.0002%" y="197" width="0.4836%" height="15" fill="rgb(212,68,19)"/><text x="99.2502%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,022,631 samples, 0.30%)</title><rect x="99.5510%" y="197" width="0.3032%" height="15" fill="rgb(240,187,13)"/><text x="99.8010%" y="207.50"></text></g><g><title>all (337,307,464 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (337,307,464 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (401,834 samples, 0.12%)</title><rect x="99.8809%" y="197" width="0.1191%" height="15" fill="rgb(241,108,4)"/><text x="100.1309%" y="207.50"></text></g></svg></svg>