<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,111,865 samples, 8.67%)</title><rect x="1.1904%" y="229" width="8.6651%" height="15" fill="rgb(227,0,7)"/><text x="1.4404%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (70,161 samples, 0.15%)</title><rect x="9.7076%" y="213" width="0.1479%" height="15" fill="rgb(217,0,24)"/><text x="9.9576%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (60,791 samples, 0.13%)</title><rect x="9.7274%" y="197" width="0.1281%" height="15" fill="rgb(221,193,54)"/><text x="9.9774%" y="207.50"></text></g><g><title>diagnostic_items (49,930 samples, 0.11%)</title><rect x="15.6899%" y="149" width="0.1052%" height="15" fill="rgb(248,212,6)"/><text x="15.9399%" y="159.50"></text></g><g><title>metadata_decode_entry_diagnostic_items (47,630 samples, 0.10%)</title><rect x="15.6947%" y="133" width="0.1004%" height="15" fill="rgb(208,68,35)"/><text x="15.9447%" y="143.50"></text></g><g><title>param_env (145,413 samples, 0.31%)</title><rect x="15.7951%" y="149" width="0.3064%" height="15" fill="rgb(232,128,0)"/><text x="16.0451%" y="159.50"></text></g><g><title>codegen_fn_attrs (70,651 samples, 0.15%)</title><rect x="16.3902%" y="133" width="0.1489%" height="15" fill="rgb(207,160,47)"/><text x="16.6402%" y="143.50"></text></g><g><title>is_copy_raw (108,931 samples, 0.23%)</title><rect x="17.5069%" y="117" width="0.2296%" height="15" fill="rgb(228,23,34)"/><text x="17.7569%" y="127.50"></text></g><g><title>evaluate_obligation (73,161 samples, 0.15%)</title><rect x="17.5823%" y="101" width="0.1542%" height="15" fill="rgb(218,30,26)"/><text x="17.8323%" y="111.50"></text></g><g><title>needs_drop_raw (282,484 samples, 0.60%)</title><rect x="17.7365%" y="117" width="0.5953%" height="15" fill="rgb(220,122,19)"/><text x="17.9865%" y="127.50"></text></g><g><title>is_copy_raw (250,413 samples, 0.53%)</title><rect x="17.8041%" y="101" width="0.5277%" height="15" fill="rgb(250,228,42)"/><text x="18.0541%" y="111.50"></text></g><g><title>evaluate_obligation (216,681 samples, 0.46%)</title><rect x="17.8752%" y="85" width="0.4566%" height="15" fill="rgb(240,193,28)"/><text x="18.1252%" y="95.50"></text></g><g><title>trait_impls_of (73,371 samples, 0.15%)</title><rect x="18.1772%" y="69" width="0.1546%" height="15" fill="rgb(216,20,37)"/><text x="18.4272%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (113,191 samples, 0.24%)</title><rect x="18.5192%" y="101" width="0.2385%" height="15" fill="rgb(206,188,39)"/><text x="18.7692%" y="111.50"></text></g><g><title>impl_parent (399,973 samples, 0.84%)</title><rect x="20.2352%" y="85" width="0.8429%" height="15" fill="rgb(217,207,13)"/><text x="20.4852%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (236,243 samples, 0.50%)</title><rect x="20.5802%" y="69" width="0.4978%" height="15" fill="rgb(231,73,38)"/><text x="20.8302%" y="79.50"></text></g><g><title>specialization_graph_of (2,403,257 samples, 5.06%)</title><rect x="18.8146%" y="101" width="5.0645%" height="15" fill="rgb(225,20,46)"/><text x="19.0646%" y="111.50">specia..</text></g><g><title>impl_trait_ref (1,329,152 samples, 2.80%)</title><rect x="21.0781%" y="85" width="2.8010%" height="15" fill="rgb(210,31,41)"/><text x="21.3281%" y="95.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,174,202 samples, 2.47%)</title><rect x="21.4046%" y="69" width="2.4744%" height="15" fill="rgb(221,200,47)"/><text x="21.6546%" y="79.50">me..</text></g><g><title>resolve_instance (2,656,269 samples, 5.60%)</title><rect x="18.3318%" y="117" width="5.5977%" height="15" fill="rgb(226,26,5)"/><text x="18.5818%" y="127.50">resolve..</text></g><g><title>thir_body (147,502 samples, 0.31%)</title><rect x="23.9398%" y="117" width="0.3108%" height="15" fill="rgb(249,33,26)"/><text x="24.1898%" y="127.50"></text></g><g><title>mir_const (4,240,857 samples, 8.94%)</title><rect x="15.3310%" y="165" width="8.9369%" height="15" fill="rgb(235,183,28)"/><text x="15.5810%" y="175.50">mir_const</text></g><g><title>unsafety_check_result (3,875,192 samples, 8.17%)</title><rect x="16.1015%" y="149" width="8.1663%" height="15" fill="rgb(221,5,38)"/><text x="16.3515%" y="159.50">unsafety_ch..</text></g><g><title>mir_built (3,667,570 samples, 7.73%)</title><rect x="16.5391%" y="133" width="7.7288%" height="15" fill="rgb(247,18,42)"/><text x="16.7891%" y="143.50">mir_built</text></g><g><title>has_structural_eq_impls (179,742 samples, 0.38%)</title><rect x="24.5096%" y="149" width="0.3788%" height="15" fill="rgb(241,131,45)"/><text x="24.7596%" y="159.50"></text></g><g><title>evaluate_obligation (156,222 samples, 0.33%)</title><rect x="24.5592%" y="133" width="0.3292%" height="15" fill="rgb(249,31,29)"/><text x="24.8092%" y="143.50"></text></g><g><title>trait_impls_of (98,241 samples, 0.21%)</title><rect x="24.6814%" y="117" width="0.2070%" height="15" fill="rgb(225,111,53)"/><text x="24.9314%" y="127.50"></text></g><g><title>is_freeze_raw (83,301 samples, 0.18%)</title><rect x="24.8929%" y="149" width="0.1755%" height="15" fill="rgb(238,160,17)"/><text x="25.1429%" y="159.50"></text></g><g><title>evaluate_obligation (78,321 samples, 0.17%)</title><rect x="24.9034%" y="133" width="0.1650%" height="15" fill="rgb(214,148,48)"/><text x="25.1534%" y="143.50"></text></g><g><title>mir_const (90,371 samples, 0.19%)</title><rect x="25.0940%" y="149" width="0.1904%" height="15" fill="rgb(232,36,49)"/><text x="25.3440%" y="159.50"></text></g><g><title>unsafety_check_result (64,631 samples, 0.14%)</title><rect x="25.1483%" y="133" width="0.1362%" height="15" fill="rgb(209,103,24)"/><text x="25.3983%" y="143.50"></text></g><g><title>mir_built (51,620 samples, 0.11%)</title><rect x="25.1757%" y="117" width="0.1088%" height="15" fill="rgb(229,88,8)"/><text x="25.4257%" y="127.50"></text></g><g><title>mir_const_qualif (509,015 samples, 1.07%)</title><rect x="24.2679%" y="165" width="1.0727%" height="15" fill="rgb(213,181,19)"/><text x="24.5179%" y="175.50"></text></g><g><title>mir_promoted (5,015,197 samples, 10.57%)</title><rect x="14.7732%" y="181" width="10.5687%" height="15" fill="rgb(254,191,54)"/><text x="15.0232%" y="191.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (504,905 samples, 1.06%)</title><rect x="25.3439%" y="181" width="1.0640%" height="15" fill="rgb(241,83,37)"/><text x="25.5939%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (129,001 samples, 0.27%)</title><rect x="26.4079%" y="181" width="0.2718%" height="15" fill="rgb(233,36,39)"/><text x="26.6579%" y="191.50"></text></g><g><title>normalize_projection_ty (56,900 samples, 0.12%)</title><rect x="26.5598%" y="165" width="0.1199%" height="15" fill="rgb(226,3,54)"/><text x="26.8098%" y="175.50"></text></g><g><title>MIR_borrow_checking (8,078,710 samples, 17.02%)</title><rect x="10.1566%" y="213" width="17.0246%" height="15" fill="rgb(245,192,40)"/><text x="10.4066%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (8,056,930 samples, 16.98%)</title><rect x="10.2025%" y="197" width="16.9787%" height="15" fill="rgb(238,167,29)"/><text x="10.4525%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (237,952 samples, 0.50%)</title><rect x="26.6797%" y="181" width="0.5014%" height="15" fill="rgb(232,182,51)"/><text x="26.9297%" y="191.50"></text></g><g><title>lint_levels (56,680 samples, 0.12%)</title><rect x="27.2728%" y="197" width="0.1194%" height="15" fill="rgb(231,60,39)"/><text x="27.5228%" y="207.50"></text></g><g><title>MIR_effect_checking (262,173 samples, 0.55%)</title><rect x="27.1812%" y="213" width="0.5525%" height="15" fill="rgb(208,69,12)"/><text x="27.4312%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (162,002 samples, 0.34%)</title><rect x="27.3923%" y="197" width="0.3414%" height="15" fill="rgb(235,93,37)"/><text x="27.6423%" y="207.50"></text></g><g><title>hir_module_items (100,842 samples, 0.21%)</title><rect x="27.7337%" y="213" width="0.2125%" height="15" fill="rgb(213,116,39)"/><text x="27.9837%" y="223.50"></text></g><g><title>get_lang_items (50,270 samples, 0.11%)</title><rect x="28.3128%" y="165" width="0.1059%" height="15" fill="rgb(222,207,29)"/><text x="28.5628%" y="175.50"></text></g><g><title>codegen_fn_attrs (192,911 samples, 0.41%)</title><rect x="28.1630%" y="181" width="0.4065%" height="15" fill="rgb(206,96,30)"/><text x="28.4130%" y="191.50"></text></g><g><title>check_mod_attrs (266,253 samples, 0.56%)</title><rect x="28.0089%" y="197" width="0.5611%" height="15" fill="rgb(218,138,4)"/><text x="28.2589%" y="207.50"></text></g><g><title>lookup_deprecation_entry (86,541 samples, 0.18%)</title><rect x="28.8348%" y="181" width="0.1824%" height="15" fill="rgb(250,191,14)"/><text x="29.0848%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (208,033 samples, 0.44%)</title><rect x="28.7036%" y="197" width="0.4384%" height="15" fill="rgb(239,60,40)"/><text x="28.9536%" y="207.50"></text></g><g><title>misc_checking_1 (599,956 samples, 1.26%)</title><rect x="27.9479%" y="213" width="1.2643%" height="15" fill="rgb(206,27,48)"/><text x="28.1979%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (130,341 samples, 0.27%)</title><rect x="29.2165%" y="197" width="0.2747%" height="15" fill="rgb(225,35,8)"/><text x="29.4665%" y="207.50"></text></g><g><title>check_mod_liveness (105,851 samples, 0.22%)</title><rect x="29.2681%" y="181" width="0.2231%" height="15" fill="rgb(250,213,24)"/><text x="29.5181%" y="191.50"></text></g><g><title>misc_checking_2 (244,373 samples, 0.51%)</title><rect x="29.2122%" y="213" width="0.5150%" height="15" fill="rgb(247,123,22)"/><text x="29.4622%" y="223.50"></text></g><g><title>match_checking (111,972 samples, 0.24%)</title><rect x="29.4912%" y="197" width="0.2360%" height="15" fill="rgb(231,138,38)"/><text x="29.7412%" y="207.50"></text></g><g><title>check_match (103,971 samples, 0.22%)</title><rect x="29.5081%" y="181" width="0.2191%" height="15" fill="rgb(231,145,46)"/><text x="29.7581%" y="191.50"></text></g><g><title>check_private_in_public (57,611 samples, 0.12%)</title><rect x="29.7470%" y="197" width="0.1214%" height="15" fill="rgb(251,118,11)"/><text x="29.9970%" y="207.50"></text></g><g><title>death_checking (98,741 samples, 0.21%)</title><rect x="29.8684%" y="197" width="0.2081%" height="15" fill="rgb(217,147,25)"/><text x="30.1184%" y="207.50"></text></g><g><title>crate_lints (237,953 samples, 0.50%)</title><rect x="30.0814%" y="181" width="0.5014%" height="15" fill="rgb(247,81,37)"/><text x="30.3314%" y="191.50"></text></g><g><title>param_env (153,861 samples, 0.32%)</title><rect x="30.2586%" y="165" width="0.3242%" height="15" fill="rgb(209,12,38)"/><text x="30.5086%" y="175.50"></text></g><g><title>predicates_of (85,420 samples, 0.18%)</title><rect x="30.4028%" y="149" width="0.1800%" height="15" fill="rgb(227,1,9)"/><text x="30.6528%" y="159.50"></text></g><g><title>predicates_defined_on (59,780 samples, 0.13%)</title><rect x="30.4569%" y="133" width="0.1260%" height="15" fill="rgb(248,47,43)"/><text x="30.7069%" y="143.50"></text></g><g><title>lint_checking (307,763 samples, 0.65%)</title><rect x="30.0765%" y="197" width="0.6486%" height="15" fill="rgb(221,10,30)"/><text x="30.3265%" y="207.50"></text></g><g><title>module_lints (67,470 samples, 0.14%)</title><rect x="30.5828%" y="181" width="0.1422%" height="15" fill="rgb(210,229,1)"/><text x="30.8328%" y="191.50"></text></g><g><title>lint_mod (60,450 samples, 0.13%)</title><rect x="30.5976%" y="165" width="0.1274%" height="15" fill="rgb(222,148,37)"/><text x="30.8476%" y="175.50"></text></g><g><title>privacy_access_levels (53,320 samples, 0.11%)</title><rect x="30.7250%" y="197" width="0.1124%" height="15" fill="rgb(234,67,33)"/><text x="30.9750%" y="207.50"></text></g><g><title>privacy_checking_modules (125,202 samples, 0.26%)</title><rect x="30.8374%" y="197" width="0.2638%" height="15" fill="rgb(247,98,35)"/><text x="31.0874%" y="207.50"></text></g><g><title>check_mod_privacy (123,322 samples, 0.26%)</title><rect x="30.8414%" y="181" width="0.2599%" height="15" fill="rgb(247,138,52)"/><text x="31.0914%" y="191.50"></text></g><g><title>misc_checking_3 (665,077 samples, 1.40%)</title><rect x="29.7272%" y="213" width="1.4015%" height="15" fill="rgb(213,79,30)"/><text x="29.9772%" y="223.50"></text></g><g><title>adt_def (164,961 samples, 0.35%)</title><rect x="41.1576%" y="133" width="0.3476%" height="15" fill="rgb(246,177,23)"/><text x="41.4076%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (159,901 samples, 0.34%)</title><rect x="41.1683%" y="117" width="0.3370%" height="15" fill="rgb(230,62,27)"/><text x="41.4183%" y="127.50"></text></g><g><title>item_attrs (143,911 samples, 0.30%)</title><rect x="41.2020%" y="101" width="0.3033%" height="15" fill="rgb(216,154,8)"/><text x="41.4520%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (142,141 samples, 0.30%)</title><rect x="41.2057%" y="85" width="0.2995%" height="15" fill="rgb(244,35,45)"/><text x="41.4557%" y="95.50"></text></g><g><title>adt_sized_constraint (69,781 samples, 0.15%)</title><rect x="41.5053%" y="133" width="0.1471%" height="15" fill="rgb(251,115,12)"/><text x="41.7553%" y="143.50"></text></g><g><title>adt_def (68,561 samples, 0.14%)</title><rect x="41.5078%" y="117" width="0.1445%" height="15" fill="rgb(240,54,50)"/><text x="41.7578%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (68,061 samples, 0.14%)</title><rect x="41.5089%" y="101" width="0.1434%" height="15" fill="rgb(233,84,52)"/><text x="41.7589%" y="111.50"></text></g><g><title>item_attrs (63,001 samples, 0.13%)</title><rect x="41.5196%" y="85" width="0.1328%" height="15" fill="rgb(207,117,47)"/><text x="41.7696%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (62,401 samples, 0.13%)</title><rect x="41.5208%" y="69" width="0.1315%" height="15" fill="rgb(249,43,39)"/><text x="41.7708%" y="79.50"></text></g><g><title>adt_sized_constraint (244,902 samples, 0.52%)</title><rect x="41.1382%" y="149" width="0.5161%" height="15" fill="rgb(209,38,44)"/><text x="41.3882%" y="159.50"></text></g><g><title>associated_item (103,111 samples, 0.22%)</title><rect x="41.7878%" y="133" width="0.2173%" height="15" fill="rgb(236,212,23)"/><text x="42.0378%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (80,201 samples, 0.17%)</title><rect x="41.8360%" y="117" width="0.1690%" height="15" fill="rgb(242,79,21)"/><text x="42.0860%" y="127.50"></text></g><g><title>associated_items (189,401 samples, 0.40%)</title><rect x="41.6543%" y="149" width="0.3991%" height="15" fill="rgb(211,96,35)"/><text x="41.9043%" y="159.50"></text></g><g><title>adt_def (285,052 samples, 0.60%)</title><rect x="42.4687%" y="101" width="0.6007%" height="15" fill="rgb(253,215,40)"/><text x="42.7187%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (283,912 samples, 0.60%)</title><rect x="42.4711%" y="85" width="0.5983%" height="15" fill="rgb(211,81,21)"/><text x="42.7211%" y="95.50"></text></g><g><title>adt_def (56,421 samples, 0.12%)</title><rect x="43.1034%" y="85" width="0.1189%" height="15" fill="rgb(208,190,38)"/><text x="43.3534%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (55,881 samples, 0.12%)</title><rect x="43.1046%" y="69" width="0.1178%" height="15" fill="rgb(235,213,38)"/><text x="43.3546%" y="79.50"></text></g><g><title>item_attrs (50,821 samples, 0.11%)</title><rect x="43.1152%" y="53" width="0.1071%" height="15" fill="rgb(237,122,38)"/><text x="43.3652%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (50,311 samples, 0.11%)</title><rect x="43.1163%" y="37" width="0.1060%" height="15" fill="rgb(244,218,35)"/><text x="43.3663%" y="47.50"></text></g><g><title>adt_dtorck_constraint (67,481 samples, 0.14%)</title><rect x="43.0934%" y="101" width="0.1422%" height="15" fill="rgb(240,68,47)"/><text x="43.3434%" y="111.50"></text></g><g><title>adt_dtorck_constraint (406,893 samples, 0.86%)</title><rect x="42.4321%" y="117" width="0.8575%" height="15" fill="rgb(210,16,53)"/><text x="42.6821%" y="127.50"></text></g><g><title>dropck_outlives (589,767 samples, 1.24%)</title><rect x="42.0977%" y="149" width="1.2428%" height="15" fill="rgb(235,124,12)"/><text x="42.3477%" y="159.50"></text></g><g><title>adt_dtorck_constraint (500,635 samples, 1.06%)</title><rect x="42.2856%" y="133" width="1.0550%" height="15" fill="rgb(224,169,11)"/><text x="42.5356%" y="143.50"></text></g><g><title>adt_sized_constraint (61,721 samples, 0.13%)</title><rect x="44.3917%" y="133" width="0.1301%" height="15" fill="rgb(250,166,2)"/><text x="44.6417%" y="143.50"></text></g><g><title>evaluate_obligation (761,008 samples, 1.60%)</title><rect x="43.3406%" y="149" width="1.6037%" height="15" fill="rgb(242,216,29)"/><text x="43.5906%" y="159.50"></text></g><g><title>trait_impls_of (140,142 samples, 0.30%)</title><rect x="44.6489%" y="133" width="0.2953%" height="15" fill="rgb(230,116,27)"/><text x="44.8989%" y="143.50"></text></g><g><title>fn_sig (62,232 samples, 0.13%)</title><rect x="44.9875%" y="149" width="0.1311%" height="15" fill="rgb(228,99,48)"/><text x="45.2375%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (52,752 samples, 0.11%)</title><rect x="45.0075%" y="133" width="0.1112%" height="15" fill="rgb(253,11,6)"/><text x="45.2575%" y="143.50"></text></g><g><title>generics_of (56,272 samples, 0.12%)</title><rect x="45.1186%" y="149" width="0.1186%" height="15" fill="rgb(247,143,39)"/><text x="45.3686%" y="159.50"></text></g><g><title>item_attrs (220,544 samples, 0.46%)</title><rect x="45.4223%" y="149" width="0.4648%" height="15" fill="rgb(236,97,10)"/><text x="45.6723%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,714 samples, 0.45%)</title><rect x="45.4367%" y="133" width="0.4504%" height="15" fill="rgb(233,208,19)"/><text x="45.6867%" y="143.50"></text></g><g><title>evaluate_obligation (146,902 samples, 0.31%)</title><rect x="46.1691%" y="133" width="0.3096%" height="15" fill="rgb(216,164,2)"/><text x="46.4191%" y="143.50"></text></g><g><title>method_autoderef_steps (288,973 samples, 0.61%)</title><rect x="45.9448%" y="149" width="0.6090%" height="15" fill="rgb(220,129,5)"/><text x="46.1948%" y="159.50"></text></g><g><title>explicit_predicates_of (61,391 samples, 0.13%)</title><rect x="46.7990%" y="117" width="0.1294%" height="15" fill="rgb(242,17,10)"/><text x="47.0490%" y="127.50"></text></g><g><title>predicates_of (192,181 samples, 0.40%)</title><rect x="46.5900%" y="149" width="0.4050%" height="15" fill="rgb(242,107,0)"/><text x="46.8400%" y="159.50"></text></g><g><title>predicates_defined_on (135,631 samples, 0.29%)</title><rect x="46.7092%" y="133" width="0.2858%" height="15" fill="rgb(251,28,31)"/><text x="46.9592%" y="143.50"></text></g><g><title>type_of (78,631 samples, 0.17%)</title><rect x="47.0483%" y="149" width="0.1657%" height="15" fill="rgb(233,223,10)"/><text x="47.2983%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (65,960 samples, 0.14%)</title><rect x="47.0750%" y="133" width="0.1390%" height="15" fill="rgb(215,21,27)"/><text x="47.3250%" y="143.50"></text></g><g><title>item_bodies_checking (7,586,233 samples, 15.99%)</title><rect x="31.3276%" y="197" width="15.9867%" height="15" fill="rgb(232,23,21)"/><text x="31.5776%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (7,583,213 samples, 15.98%)</title><rect x="31.3339%" y="181" width="15.9804%" height="15" fill="rgb(244,5,23)"/><text x="31.5839%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (7,564,043 samples, 15.94%)</title><rect x="31.3743%" y="165" width="15.9400%" height="15" fill="rgb(226,81,46)"/><text x="31.6243%" y="175.50">typeck</text></g><g><title>impl_parent (65,070 samples, 0.14%)</title><rect x="47.6272%" y="117" width="0.1371%" height="15" fill="rgb(247,70,30)"/><text x="47.8772%" y="127.50"></text></g><g><title>impl_trait_ref (327,454 samples, 0.69%)</title><rect x="47.7644%" y="117" width="0.6901%" height="15" fill="rgb(212,68,19)"/><text x="48.0144%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (304,604 samples, 0.64%)</title><rect x="47.8125%" y="101" width="0.6419%" height="15" fill="rgb(240,187,13)"/><text x="48.0625%" y="111.50"></text></g><g><title>item_types_checking (565,346 samples, 1.19%)</title><rect x="47.3143%" y="197" width="1.1914%" height="15" fill="rgb(223,113,26)"/><text x="47.5643%" y="207.50"></text></g><g><title>check_mod_item_types (562,016 samples, 1.18%)</title><rect x="47.3213%" y="181" width="1.1844%" height="15" fill="rgb(206,192,2)"/><text x="47.5713%" y="191.50"></text></g><g><title>adt_destructor (547,846 samples, 1.15%)</title><rect x="47.3512%" y="165" width="1.1545%" height="15" fill="rgb(241,108,4)"/><text x="47.6012%" y="175.50"></text></g><g><title>coherent_trait (542,426 samples, 1.14%)</title><rect x="47.3626%" y="149" width="1.1431%" height="15" fill="rgb(247,173,49)"/><text x="47.6126%" y="159.50"></text></g><g><title>specialization_graph_of (534,166 samples, 1.13%)</title><rect x="47.3800%" y="133" width="1.1257%" height="15" fill="rgb(224,114,35)"/><text x="47.6300%" y="143.50"></text></g><g><title>fn_sig (53,342 samples, 0.11%)</title><rect x="48.6905%" y="165" width="0.1124%" height="15" fill="rgb(245,159,27)"/><text x="48.9405%" y="175.50"></text></g><g><title>generics_of (59,471 samples, 0.13%)</title><rect x="48.8029%" y="165" width="0.1253%" height="15" fill="rgb(245,172,44)"/><text x="49.0529%" y="175.50"></text></g><g><title>late_bound_vars_map (99,251 samples, 0.21%)</title><rect x="49.6744%" y="117" width="0.2092%" height="15" fill="rgb(236,23,11)"/><text x="49.9244%" y="127.50"></text></g><g><title>resolve_lifetimes (87,291 samples, 0.18%)</title><rect x="49.6996%" y="101" width="0.1840%" height="15" fill="rgb(205,117,38)"/><text x="49.9496%" y="111.50"></text></g><g><title>explicit_predicates_of (465,715 samples, 0.98%)</title><rect x="48.9890%" y="133" width="0.9814%" height="15" fill="rgb(237,72,25)"/><text x="49.2390%" y="143.50"></text></g><g><title>predicates_of (518,616 samples, 1.09%)</title><rect x="48.9295%" y="165" width="1.0929%" height="15" fill="rgb(244,70,9)"/><text x="49.1795%" y="175.50"></text></g><g><title>predicates_defined_on (508,106 samples, 1.07%)</title><rect x="48.9517%" y="149" width="1.0708%" height="15" fill="rgb(217,125,39)"/><text x="49.2017%" y="159.50"></text></g><g><title>type_collecting (787,299 samples, 1.66%)</title><rect x="48.5103%" y="197" width="1.6591%" height="15" fill="rgb(235,36,10)"/><text x="48.7603%" y="207.50"></text></g><g><title>collect_mod_item_types (777,779 samples, 1.64%)</title><rect x="48.5303%" y="181" width="1.6390%" height="15" fill="rgb(251,123,47)"/><text x="48.7803%" y="191.50"></text></g><g><title>type_of (69,720 samples, 0.15%)</title><rect x="50.0224%" y="165" width="0.1469%" height="15" fill="rgb(221,13,13)"/><text x="50.2724%" y="175.50"></text></g><g><title>param_env (98,351 samples, 0.21%)</title><rect x="50.9643%" y="165" width="0.2073%" height="15" fill="rgb(238,131,9)"/><text x="51.2143%" y="175.50"></text></g><g><title>check_impl_item_well_formed (502,605 samples, 1.06%)</title><rect x="50.2556%" y="181" width="1.0592%" height="15" fill="rgb(211,50,8)"/><text x="50.5056%" y="191.50"></text></g><g><title>evaluate_obligation (67,831 samples, 0.14%)</title><rect x="52.4003%" y="165" width="0.1429%" height="15" fill="rgb(245,182,24)"/><text x="52.6503%" y="175.50"></text></g><g><title>implied_outlives_bounds (92,880 samples, 0.20%)</title><rect x="52.5454%" y="165" width="0.1957%" height="15" fill="rgb(242,14,37)"/><text x="52.7954%" y="175.50"></text></g><g><title>param_env (201,462 samples, 0.42%)</title><rect x="52.7429%" y="165" width="0.4245%" height="15" fill="rgb(246,228,12)"/><text x="52.9929%" y="175.50"></text></g><g><title>predicates_of (69,430 samples, 0.15%)</title><rect x="53.1675%" y="165" width="0.1463%" height="15" fill="rgb(213,55,15)"/><text x="53.4175%" y="175.50"></text></g><g><title>predicates_defined_on (50,420 samples, 0.11%)</title><rect x="53.2075%" y="149" width="0.1063%" height="15" fill="rgb(209,9,3)"/><text x="53.4575%" y="159.50"></text></g><g><title>trait_impls_of (93,051 samples, 0.20%)</title><rect x="53.3598%" y="165" width="0.1961%" height="15" fill="rgb(230,59,30)"/><text x="53.6098%" y="175.50"></text></g><g><title>analysis (20,775,189 samples, 43.78%)</title><rect x="9.8555%" y="229" width="43.7803%" height="15" fill="rgb(209,121,21)"/><text x="10.1055%" y="239.50">analysis</text></g><g><title>type_check_crate (10,680,357 samples, 22.51%)</title><rect x="31.1287%" y="213" width="22.5071%" height="15" fill="rgb(220,109,13)"/><text x="31.3787%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,643,298 samples, 3.46%)</title><rect x="50.1728%" y="197" width="3.4630%" height="15" fill="rgb(232,18,1)"/><text x="50.4228%" y="207.50">wf_..</text></g><g><title>check_item_well_formed (1,101,432 samples, 2.32%)</title><rect x="51.3147%" y="181" width="2.3211%" height="15" fill="rgb(215,41,42)"/><text x="51.5647%" y="191.50">c..</text></g><g><title>codegen_module (209,343 samples, 0.44%)</title><rect x="54.7333%" y="213" width="0.4412%" height="15" fill="rgb(224,123,36)"/><text x="54.9833%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (48,100 samples, 0.10%)</title><rect x="55.1755%" y="213" width="0.1014%" height="15" fill="rgb(240,125,3)"/><text x="55.4255%" y="223.50"></text></g><g><title>codegen_crate (791,298 samples, 1.67%)</title><rect x="53.6555%" y="229" width="1.6675%" height="15" fill="rgb(205,98,50)"/><text x="53.9055%" y="239.50"></text></g><g><title>codegen_module_optimize (1,639,798 samples, 3.46%)</title><rect x="55.3230%" y="229" width="3.4556%" height="15" fill="rgb(205,185,37)"/><text x="55.5730%" y="239.50">cod..</text></g><g><title>LLVM_module_optimize (405,974 samples, 0.86%)</title><rect x="57.9231%" y="213" width="0.8555%" height="15" fill="rgb(238,207,15)"/><text x="58.1731%" y="223.50"></text></g><g><title>LLVM_lto_optimize (187,743 samples, 0.40%)</title><rect x="59.4694%" y="213" width="0.3956%" height="15" fill="rgb(213,199,42)"/><text x="59.7194%" y="223.50"></text></g><g><title>LLVM_module_codegen (1,643,728 samples, 3.46%)</title><rect x="59.8650%" y="213" width="3.4639%" height="15" fill="rgb(235,201,11)"/><text x="60.1150%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (1,624,507 samples, 3.42%)</title><rect x="59.9056%" y="197" width="3.4234%" height="15" fill="rgb(207,46,11)"/><text x="60.1556%" y="207.50">LLV..</text></g><g><title>codegen_module_perform_lto (2,196,204 samples, 4.63%)</title><rect x="58.7786%" y="229" width="4.6281%" height="15" fill="rgb(241,35,35)"/><text x="59.0286%" y="239.50">codeg..</text></g><g><title>AST_validation (80,181 samples, 0.17%)</title><rect x="63.7975%" y="213" width="0.1690%" height="15" fill="rgb(243,32,47)"/><text x="64.0475%" y="223.50"></text></g><g><title>crate_injection (81,111 samples, 0.17%)</title><rect x="64.0004%" y="213" width="0.1709%" height="15" fill="rgb(247,202,23)"/><text x="64.2504%" y="223.50"></text></g><g><title>macro_expand_crate (7,176,539 samples, 15.12%)</title><rect x="64.1713%" y="213" width="15.1234%" height="15" fill="rgb(219,102,11)"/><text x="64.4213%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (7,156,849 samples, 15.08%)</title><rect x="64.2128%" y="197" width="15.0819%" height="15" fill="rgb(243,110,44)"/><text x="64.4628%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (200,642 samples, 0.42%)</title><rect x="78.8718%" y="181" width="0.4228%" height="15" fill="rgb(222,74,54)"/><text x="79.1218%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (100,881 samples, 0.21%)</title><rect x="79.3029%" y="213" width="0.2126%" height="15" fill="rgb(216,99,12)"/><text x="79.5529%" y="223.50"></text></g><g><title>finalize_imports (203,632 samples, 0.43%)</title><rect x="79.5302%" y="197" width="0.4291%" height="15" fill="rgb(226,22,26)"/><text x="79.7802%" y="207.50"></text></g><g><title>late_resolve_crate (686,878 samples, 1.45%)</title><rect x="79.9755%" y="197" width="1.4475%" height="15" fill="rgb(217,163,10)"/><text x="80.2255%" y="207.50"></text></g><g><title>configure_and_expand (8,591,215 samples, 18.10%)</title><rect x="63.4068%" y="229" width="18.1046%" height="15" fill="rgb(213,25,53)"/><text x="63.6568%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (947,110 samples, 2.00%)</title><rect x="79.5155%" y="213" width="1.9959%" height="15" fill="rgb(252,105,26)"/><text x="79.7655%" y="223.50">r..</text></g><g><title>drop_ast (48,431 samples, 0.10%)</title><rect x="81.5113%" y="229" width="0.1021%" height="15" fill="rgb(220,39,43)"/><text x="81.7613%" y="239.50"></text></g><g><title>early_lint_checks (115,871 samples, 0.24%)</title><rect x="81.6399%" y="229" width="0.2442%" height="15" fill="rgb(229,68,48)"/><text x="81.8899%" y="239.50"></text></g><g><title>free_global_ctxt (1,494,097 samples, 3.15%)</title><rect x="81.8841%" y="229" width="3.1486%" height="15" fill="rgb(252,8,32)"/><text x="82.1341%" y="239.50">fre..</text></g><g><title>crate_hash (65,340 samples, 0.14%)</title><rect x="85.8324%" y="213" width="0.1377%" height="15" fill="rgb(223,20,43)"/><text x="86.0824%" y="223.50"></text></g><g><title>is_sized_raw (51,041 samples, 0.11%)</title><rect x="87.1668%" y="181" width="0.1076%" height="15" fill="rgb(229,81,49)"/><text x="87.4168%" y="191.50"></text></g><g><title>layout_of (80,230 samples, 0.17%)</title><rect x="87.3791%" y="165" width="0.1691%" height="15" fill="rgb(236,28,36)"/><text x="87.6291%" y="175.50"></text></g><g><title>layout_of (151,431 samples, 0.32%)</title><rect x="87.2744%" y="181" width="0.3191%" height="15" fill="rgb(249,185,26)"/><text x="87.5244%" y="191.50"></text></g><g><title>layout_of (280,153 samples, 0.59%)</title><rect x="87.0568%" y="197" width="0.5904%" height="15" fill="rgb(249,174,33)"/><text x="87.3068%" y="207.50"></text></g><g><title>needs_drop_raw (56,860 samples, 0.12%)</title><rect x="88.4436%" y="181" width="0.1198%" height="15" fill="rgb(233,201,37)"/><text x="88.6936%" y="191.50"></text></g><g><title>is_copy_raw (49,650 samples, 0.10%)</title><rect x="88.4588%" y="165" width="0.1046%" height="15" fill="rgb(221,78,26)"/><text x="88.7088%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (440,974 samples, 0.93%)</title><rect x="87.6472%" y="197" width="0.9293%" height="15" fill="rgb(250,127,30)"/><text x="87.8972%" y="207.50"></text></g><g><title>optimized_mir (1,120,811 samples, 2.36%)</title><rect x="86.2350%" y="213" width="2.3619%" height="15" fill="rgb(230,49,44)"/><text x="86.4850%" y="223.50">op..</text></g><g><title>promoted_mir (81,450 samples, 0.17%)</title><rect x="88.5969%" y="213" width="0.1716%" height="15" fill="rgb(229,67,23)"/><text x="88.8469%" y="223.50"></text></g><g><title>generate_crate_metadata (1,782,809 samples, 3.76%)</title><rect x="85.0327%" y="229" width="3.7570%" height="15" fill="rgb(249,83,47)"/><text x="85.2827%" y="239.50">gene..</text></g><g><title>hir_lowering (640,297 samples, 1.35%)</title><rect x="88.7897%" y="229" width="1.3493%" height="15" fill="rgb(215,43,3)"/><text x="89.0397%" y="239.50"></text></g><g><title>finish_ongoing_codegen (2,292,515 samples, 4.83%)</title><rect x="90.1617%" y="213" width="4.8311%" height="15" fill="rgb(238,154,13)"/><text x="90.4117%" y="223.50">finish..</text></g><g><title>link_crate (479,435 samples, 1.01%)</title><rect x="94.9928%" y="213" width="1.0103%" height="15" fill="rgb(219,56,2)"/><text x="95.2428%" y="223.50"></text></g><g><title>link_binary (474,375 samples, 1.00%)</title><rect x="95.0035%" y="197" width="0.9997%" height="15" fill="rgb(233,0,4)"/><text x="95.2535%" y="207.50"></text></g><g><title>link_rlib (290,553 samples, 0.61%)</title><rect x="95.3909%" y="181" width="0.6123%" height="15" fill="rgb(235,30,7)"/><text x="95.6409%" y="191.50"></text></g><g><title>link (2,789,260 samples, 5.88%)</title><rect x="90.1390%" y="229" width="5.8779%" height="15" fill="rgb(250,79,13)"/><text x="90.3890%" y="239.50">link</text></g><g><title>parse_crate (828,919 samples, 1.75%)</title><rect x="96.0169%" y="229" width="1.7468%" height="15" fill="rgb(211,146,34)"/><text x="96.2669%" y="239.50"></text></g><g><title>prepare_outputs (296,833 samples, 0.63%)</title><rect x="97.7781%" y="229" width="0.6255%" height="15" fill="rgb(228,22,38)"/><text x="98.0281%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (337,433 samples, 0.71%)</title><rect x="98.4036%" y="229" width="0.7111%" height="15" fill="rgb(235,168,5)"/><text x="98.6536%" y="239.50"></text></g><g><title>setup_global_ctxt (119,842 samples, 0.25%)</title><rect x="99.1166%" y="229" width="0.2525%" height="15" fill="rgb(221,155,16)"/><text x="99.3666%" y="239.50"></text></g><g><title>all (47,453,272 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (47,453,272 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (299,363 samples, 0.63%)</title><rect x="99.3691%" y="229" width="0.6309%" height="15" fill="rgb(234,103,6)"/><text x="99.6191%" y="239.50"></text></g></svg></svg>