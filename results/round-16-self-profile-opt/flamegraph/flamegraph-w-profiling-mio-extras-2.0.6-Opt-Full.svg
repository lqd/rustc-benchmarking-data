<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (158,661,381 samples, 11.69%)</title><rect x="0.0412%" y="165" width="11.6906%" height="15" fill="rgb(227,0,7)"/><text x="0.2912%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,880,211 samples, 0.14%)</title><rect x="11.5933%" y="149" width="0.1385%" height="15" fill="rgb(217,0,24)"/><text x="11.8433%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,854,871 samples, 0.14%)</title><rect x="11.5951%" y="133" width="0.1367%" height="15" fill="rgb(221,193,54)"/><text x="11.8451%" y="143.50"></text></g><g><title>needs_drop_raw (1,494,892 samples, 0.11%)</title><rect x="13.5956%" y="53" width="0.1101%" height="15" fill="rgb(248,212,6)"/><text x="13.8456%" y="63.50"></text></g><g><title>specialization_graph_of (2,694,451 samples, 0.20%)</title><rect x="13.7509%" y="37" width="0.1985%" height="15" fill="rgb(208,68,35)"/><text x="14.0009%" y="47.50"></text></g><g><title>resolve_instance (3,453,059 samples, 0.25%)</title><rect x="13.7058%" y="53" width="0.2544%" height="15" fill="rgb(232,128,0)"/><text x="13.9558%" y="63.50"></text></g><g><title>thir_body (1,608,596 samples, 0.12%)</title><rect x="13.9632%" y="53" width="0.1185%" height="15" fill="rgb(207,160,47)"/><text x="14.2132%" y="63.50"></text></g><g><title>mir_const (13,590,097 samples, 1.00%)</title><rect x="13.0821%" y="101" width="1.0014%" height="15" fill="rgb(228,23,34)"/><text x="13.3321%" y="111.50"></text></g><g><title>unsafety_check_result (11,948,377 samples, 0.88%)</title><rect x="13.2031%" y="85" width="0.8804%" height="15" fill="rgb(218,30,26)"/><text x="13.4531%" y="95.50"></text></g><g><title>mir_built (10,540,408 samples, 0.78%)</title><rect x="13.3068%" y="69" width="0.7766%" height="15" fill="rgb(220,122,19)"/><text x="13.5568%" y="79.50"></text></g><g><title>mir_promoted (15,240,295 samples, 1.12%)</title><rect x="12.9893%" y="117" width="1.1229%" height="15" fill="rgb(250,228,42)"/><text x="13.2393%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,415,451 samples, 0.18%)</title><rect x="14.1892%" y="117" width="0.1780%" height="15" fill="rgb(240,193,28)"/><text x="14.4392%" y="127.50"></text></g><g><title>MIR_borrow_checking (35,424,187 samples, 2.61%)</title><rect x="11.7576%" y="149" width="2.6102%" height="15" fill="rgb(216,20,37)"/><text x="12.0076%" y="159.50">MI..</text></g><g><title>mir_borrowck (35,284,956 samples, 2.60%)</title><rect x="11.7678%" y="133" width="2.5999%" height="15" fill="rgb(206,188,39)"/><text x="12.0178%" y="143.50">mi..</text></g><g><title>misc_checking_1 (1,606,538 samples, 0.12%)</title><rect x="14.3950%" y="149" width="0.1184%" height="15" fill="rgb(217,207,13)"/><text x="14.6450%" y="159.50"></text></g><g><title>crate_lints (2,975,073 samples, 0.22%)</title><rect x="14.6682%" y="117" width="0.2192%" height="15" fill="rgb(231,73,38)"/><text x="14.9182%" y="127.50"></text></g><g><title>type_of (1,388,402 samples, 0.10%)</title><rect x="14.7851%" y="101" width="0.1023%" height="15" fill="rgb(225,20,46)"/><text x="15.0351%" y="111.50"></text></g><g><title>lint_checking (3,620,291 samples, 0.27%)</title><rect x="14.6680%" y="133" width="0.2668%" height="15" fill="rgb(210,31,41)"/><text x="14.9180%" y="143.50"></text></g><g><title>misc_checking_3 (5,705,524 samples, 0.42%)</title><rect x="14.6115%" y="149" width="0.4204%" height="15" fill="rgb(221,200,47)"/><text x="14.8615%" y="159.50"></text></g><g><title>impl_parent (2,320,153 samples, 0.17%)</title><rect x="15.3328%" y="85" width="0.1710%" height="15" fill="rgb(226,26,5)"/><text x="15.5828%" y="95.50"></text></g><g><title>impl_trait_ref (5,137,133 samples, 0.38%)</title><rect x="15.5037%" y="85" width="0.3785%" height="15" fill="rgb(249,33,26)"/><text x="15.7537%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,063,503 samples, 0.30%)</title><rect x="15.5828%" y="69" width="0.2994%" height="15" fill="rgb(235,183,28)"/><text x="15.8328%" y="79.50"></text></g><g><title>coherent_trait (12,175,567 samples, 0.90%)</title><rect x="15.0407%" y="117" width="0.8971%" height="15" fill="rgb(221,5,38)"/><text x="15.2907%" y="127.50"></text></g><g><title>specialization_graph_of (11,617,660 samples, 0.86%)</title><rect x="15.0818%" y="101" width="0.8560%" height="15" fill="rgb(247,18,42)"/><text x="15.3318%" y="111.50"></text></g><g><title>coherence_checking (12,265,657 samples, 0.90%)</title><rect x="15.0389%" y="133" width="0.9038%" height="15" fill="rgb(241,131,45)"/><text x="15.2889%" y="143.50"></text></g><g><title>dropck_outlives (1,610,836 samples, 0.12%)</title><rect x="17.8572%" y="85" width="0.1187%" height="15" fill="rgb(249,31,29)"/><text x="18.1072%" y="95.50"></text></g><g><title>impl_trait_ref (1,473,507 samples, 0.11%)</title><rect x="18.4306%" y="69" width="0.1086%" height="15" fill="rgb(225,111,53)"/><text x="18.6806%" y="79.50"></text></g><g><title>specializes (2,237,163 samples, 0.16%)</title><rect x="18.6099%" y="69" width="0.1648%" height="15" fill="rgb(238,160,17)"/><text x="18.8599%" y="79.50"></text></g><g><title>evaluate_obligation (11,500,061 samples, 0.85%)</title><rect x="17.9759%" y="85" width="0.8474%" height="15" fill="rgb(214,148,48)"/><text x="18.2259%" y="95.50"></text></g><g><title>typeck (10,066,054 samples, 0.74%)</title><rect x="18.9900%" y="85" width="0.7417%" height="15" fill="rgb(232,36,49)"/><text x="19.2400%" y="95.50"></text></g><g><title>item_bodies_checking (51,436,178 samples, 3.79%)</title><rect x="15.9456%" y="133" width="3.7900%" height="15" fill="rgb(209,103,24)"/><text x="16.1956%" y="143.50">item..</text></g><g><title>typeck_item_bodies (51,433,488 samples, 3.79%)</title><rect x="15.9458%" y="117" width="3.7898%" height="15" fill="rgb(229,88,8)"/><text x="16.1958%" y="127.50">type..</text></g><g><title>typeck (51,345,637 samples, 3.78%)</title><rect x="15.9523%" y="101" width="3.7833%" height="15" fill="rgb(213,181,19)"/><text x="16.2023%" y="111.50">type..</text></g><g><title>type_collecting (1,958,302 samples, 0.14%)</title><rect x="19.8290%" y="133" width="0.1443%" height="15" fill="rgb(254,191,54)"/><text x="20.0790%" y="143.50"></text></g><g><title>collect_mod_item_types (1,945,642 samples, 0.14%)</title><rect x="19.8300%" y="117" width="0.1434%" height="15" fill="rgb(241,83,37)"/><text x="20.0800%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,134,498 samples, 0.23%)</title><rect x="19.9903%" y="117" width="0.2310%" height="15" fill="rgb(233,36,39)"/><text x="20.2403%" y="127.50"></text></g><g><title>analysis (118,373,798 samples, 8.72%)</title><rect x="11.7318%" y="165" width="8.7221%" height="15" fill="rgb(226,3,54)"/><text x="11.9818%" y="175.50">analysis</text></g><g><title>type_check_crate (73,585,896 samples, 5.42%)</title><rect x="15.0319%" y="149" width="5.4220%" height="15" fill="rgb(245,192,40)"/><text x="15.2819%" y="159.50">type_ch..</text></g><g><title>wf_checking (6,516,423 samples, 0.48%)</title><rect x="19.9738%" y="133" width="0.4801%" height="15" fill="rgb(238,167,29)"/><text x="20.2238%" y="143.50"></text></g><g><title>check_item_well_formed (3,157,708 samples, 0.23%)</title><rect x="20.2213%" y="117" width="0.2327%" height="15" fill="rgb(232,182,51)"/><text x="20.4713%" y="127.50"></text></g><g><title>is_freeze_raw (1,799,550 samples, 0.13%)</title><rect x="24.3331%" y="117" width="0.1326%" height="15" fill="rgb(231,60,39)"/><text x="24.5831%" y="127.50"></text></g><g><title>evaluate_obligation (1,563,719 samples, 0.12%)</title><rect x="24.3505%" y="101" width="0.1152%" height="15" fill="rgb(208,69,12)"/><text x="24.6005%" y="111.50"></text></g><g><title>layout_of (2,734,592 samples, 0.20%)</title><rect x="24.5432%" y="117" width="0.2015%" height="15" fill="rgb(235,93,37)"/><text x="24.7932%" y="127.50"></text></g><g><title>predicates_of (1,694,588 samples, 0.12%)</title><rect x="24.9307%" y="101" width="0.1249%" height="15" fill="rgb(213,116,39)"/><text x="25.1807%" y="111.50"></text></g><g><title>param_env (4,242,341 samples, 0.31%)</title><rect x="24.7447%" y="117" width="0.3126%" height="15" fill="rgb(222,207,29)"/><text x="24.9947%" y="127.50"></text></g><g><title>fn_abi_of_instance (14,728,907 samples, 1.09%)</title><rect x="23.9922%" y="133" width="1.0853%" height="15" fill="rgb(206,96,30)"/><text x="24.2422%" y="143.50"></text></g><g><title>layout_of (1,960,973 samples, 0.14%)</title><rect x="25.0983%" y="133" width="0.1445%" height="15" fill="rgb(218,138,4)"/><text x="25.3483%" y="143.50"></text></g><g><title>codegen_module (64,070,930 samples, 4.72%)</title><rect x="20.6001%" y="149" width="4.7209%" height="15" fill="rgb(250,191,14)"/><text x="20.8501%" y="159.50">codege..</text></g><g><title>codegen_fn_attrs (1,583,848 samples, 0.12%)</title><rect x="25.5051%" y="101" width="0.1167%" height="15" fill="rgb(239,60,40)"/><text x="25.7551%" y="111.50"></text></g><g><title>mir_shims (1,362,680 samples, 0.10%)</title><rect x="25.6592%" y="101" width="0.1004%" height="15" fill="rgb(206,27,48)"/><text x="25.9092%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,058,846 samples, 0.15%)</title><rect x="25.8766%" y="85" width="0.1517%" height="15" fill="rgb(225,35,8)"/><text x="26.1266%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,612,469 samples, 0.12%)</title><rect x="26.0283%" y="85" width="0.1188%" height="15" fill="rgb(250,213,24)"/><text x="26.2783%" y="95.50"></text></g><g><title>optimized_mir (5,263,783 samples, 0.39%)</title><rect x="25.7596%" y="101" width="0.3879%" height="15" fill="rgb(247,123,22)"/><text x="26.0096%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,377,691 samples, 0.18%)</title><rect x="26.2172%" y="85" width="0.1752%" height="15" fill="rgb(231,138,38)"/><text x="26.4672%" y="95.50"></text></g><g><title>resolve_instance (4,894,224 samples, 0.36%)</title><rect x="26.1475%" y="101" width="0.3606%" height="15" fill="rgb(231,145,46)"/><text x="26.3975%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,517,064 samples, 0.11%)</title><rect x="26.5081%" y="101" width="0.1118%" height="15" fill="rgb(251,118,11)"/><text x="26.7581%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (18,298,765 samples, 1.35%)</title><rect x="25.3263%" y="117" width="1.3483%" height="15" fill="rgb(217,147,25)"/><text x="25.5763%" y="127.50"></text></g><g><title>monomorphization_collector (18,358,665 samples, 1.35%)</title><rect x="25.3259%" y="133" width="1.3527%" height="15" fill="rgb(247,81,37)"/><text x="25.5759%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (1,888,621 samples, 0.14%)</title><rect x="26.6789%" y="117" width="0.1392%" height="15" fill="rgb(209,12,38)"/><text x="26.9289%" y="127.50"></text></g><g><title>symbol_name (1,701,349 samples, 0.13%)</title><rect x="26.6927%" y="101" width="0.1254%" height="15" fill="rgb(227,1,9)"/><text x="26.9427%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (21,086,567 samples, 1.55%)</title><rect x="25.3217%" y="149" width="1.5537%" height="15" fill="rgb(248,47,43)"/><text x="25.5717%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,670,479 samples, 0.20%)</title><rect x="26.6786%" y="133" width="0.1968%" height="15" fill="rgb(221,10,30)"/><text x="26.9286%" y="143.50"></text></g><g><title>codegen_crate (87,227,230 samples, 6.43%)</title><rect x="20.4544%" y="165" width="6.4272%" height="15" fill="rgb(210,229,1)"/><text x="20.7044%" y="175.50">codegen_..</text></g><g><title>codegen_module_optimize (431,216,185 samples, 31.77%)</title><rect x="26.8816%" y="165" width="31.7733%" height="15" fill="rgb(222,148,37)"/><text x="27.1316%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (409,362,598 samples, 30.16%)</title><rect x="28.4918%" y="149" width="30.1630%" height="15" fill="rgb(234,67,33)"/><text x="28.7418%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (168,859,621 samples, 12.44%)</title><rect x="59.5737%" y="149" width="12.4421%" height="15" fill="rgb(247,98,35)"/><text x="59.8237%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (212,033,740 samples, 15.62%)</title><rect x="72.0158%" y="149" width="15.6233%" height="15" fill="rgb(247,138,52)"/><text x="72.2658%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (209,573,164 samples, 15.44%)</title><rect x="72.1971%" y="133" width="15.4420%" height="15" fill="rgb(213,79,30)"/><text x="72.4471%" y="143.50">LLVM_module_codegen_emit..</text></g><g><title>LLVM_thin_lto_import (22,514,402 samples, 1.66%)</title><rect x="87.6390%" y="149" width="1.6589%" height="15" fill="rgb(246,177,23)"/><text x="87.8890%" y="159.50"></text></g><g><title>codegen_module_perform_lto (416,722,615 samples, 30.71%)</title><rect x="58.6549%" y="165" width="30.7054%" height="15" fill="rgb(230,62,27)"/><text x="58.9049%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,628,579 samples, 0.12%)</title><rect x="90.4085%" y="117" width="0.1200%" height="15" fill="rgb(216,154,8)"/><text x="90.6585%" y="127.50"></text></g><g><title>macro_expand_crate (15,666,807 samples, 1.15%)</title><rect x="89.3888%" y="149" width="1.1544%" height="15" fill="rgb(244,35,45)"/><text x="89.6388%" y="159.50"></text></g><g><title>expand_crate (15,651,907 samples, 1.15%)</title><rect x="89.3899%" y="133" width="1.1533%" height="15" fill="rgb(251,115,12)"/><text x="89.6399%" y="143.50"></text></g><g><title>late_resolve_crate (2,311,746 samples, 0.17%)</title><rect x="90.5656%" y="133" width="0.1703%" height="15" fill="rgb(240,54,50)"/><text x="90.8156%" y="143.50"></text></g><g><title>configure_and_expand (18,799,402 samples, 1.39%)</title><rect x="89.3602%" y="165" width="1.3852%" height="15" fill="rgb(233,84,52)"/><text x="89.6102%" y="175.50"></text></g><g><title>resolve_crate (2,675,610 samples, 0.20%)</title><rect x="90.5483%" y="149" width="0.1971%" height="15" fill="rgb(207,117,47)"/><text x="90.7983%" y="159.50"></text></g><g><title>free_global_ctxt (8,866,360 samples, 0.65%)</title><rect x="90.7958%" y="165" width="0.6533%" height="15" fill="rgb(249,43,39)"/><text x="91.0458%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,433,833 samples, 0.33%)</title><rect x="91.9914%" y="133" width="0.3267%" height="15" fill="rgb(209,38,44)"/><text x="92.2414%" y="143.50"></text></g><g><title>optimized_mir (9,399,487 samples, 0.69%)</title><rect x="91.6409%" y="149" width="0.6926%" height="15" fill="rgb(236,212,23)"/><text x="91.8909%" y="159.50"></text></g><g><title>generate_crate_metadata (12,627,792 samples, 0.93%)</title><rect x="91.4491%" y="165" width="0.9305%" height="15" fill="rgb(242,79,21)"/><text x="91.6991%" y="175.50"></text></g><g><title>hir_lowering (3,394,998 samples, 0.25%)</title><rect x="92.3795%" y="165" width="0.2502%" height="15" fill="rgb(211,96,35)"/><text x="92.6295%" y="175.50"></text></g><g><title>finish_ongoing_codegen (94,819,314 samples, 6.99%)</title><rect x="92.6376%" y="149" width="6.9866%" height="15" fill="rgb(253,215,40)"/><text x="92.8876%" y="159.50">finish_on..</text></g><g><title>link_crate (1,625,059 samples, 0.12%)</title><rect x="99.6242%" y="149" width="0.1197%" height="15" fill="rgb(211,81,21)"/><text x="99.8742%" y="159.50"></text></g><g><title>link_binary (1,588,288 samples, 0.12%)</title><rect x="99.6269%" y="133" width="0.1170%" height="15" fill="rgb(208,190,38)"/><text x="99.8769%" y="143.50"></text></g><g><title>link (96,562,114 samples, 7.11%)</title><rect x="92.6297%" y="165" width="7.1150%" height="15" fill="rgb(235,213,38)"/><text x="92.8797%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,413,427 samples, 0.18%)</title><rect x="99.7839%" y="165" width="0.1778%" height="15" fill="rgb(237,122,38)"/><text x="100.0339%" y="175.50"></text></g><g><title>all (1,357,166,007 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,357,166,007 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>