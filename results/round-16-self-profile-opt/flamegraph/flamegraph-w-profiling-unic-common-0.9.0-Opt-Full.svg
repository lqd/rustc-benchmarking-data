<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,791,069 samples, 14.01%)</title><rect x="0.4744%" y="213" width="14.0130%" height="15" fill="rgb(227,0,7)"/><text x="0.7244%" y="223.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (293,254 samples, 0.20%)</title><rect x="14.2897%" y="197" width="0.1977%" height="15" fill="rgb(217,0,24)"/><text x="14.5397%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (273,043 samples, 0.18%)</title><rect x="14.3034%" y="181" width="0.1840%" height="15" fill="rgb(221,193,54)"/><text x="14.5534%" y="191.50"></text></g><g><title>eval_to_const_value_raw (195,472 samples, 0.13%)</title><rect x="19.9255%" y="101" width="0.1317%" height="15" fill="rgb(248,212,6)"/><text x="20.1755%" y="111.50"></text></g><g><title>eval_to_const_value_raw (189,092 samples, 0.13%)</title><rect x="19.9298%" y="85" width="0.1274%" height="15" fill="rgb(208,68,35)"/><text x="20.1798%" y="95.50"></text></g><g><title>eval_to_allocation_raw (176,372 samples, 0.12%)</title><rect x="19.9384%" y="69" width="0.1189%" height="15" fill="rgb(232,128,0)"/><text x="20.1884%" y="79.50"></text></g><g><title>is_copy_raw (168,302 samples, 0.11%)</title><rect x="20.0998%" y="69" width="0.1134%" height="15" fill="rgb(207,160,47)"/><text x="20.3498%" y="79.50"></text></g><g><title>evaluate_obligation (158,661 samples, 0.11%)</title><rect x="20.1063%" y="53" width="0.1069%" height="15" fill="rgb(228,23,34)"/><text x="20.3563%" y="63.50"></text></g><g><title>adt_drop_tys (207,053 samples, 0.14%)</title><rect x="20.0912%" y="85" width="0.1396%" height="15" fill="rgb(218,30,26)"/><text x="20.3412%" y="95.50"></text></g><g><title>needs_drop_raw (570,817 samples, 0.38%)</title><rect x="20.0704%" y="101" width="0.3847%" height="15" fill="rgb(220,122,19)"/><text x="20.3204%" y="111.50"></text></g><g><title>is_copy_raw (332,904 samples, 0.22%)</title><rect x="20.2308%" y="85" width="0.2244%" height="15" fill="rgb(250,228,42)"/><text x="20.4808%" y="95.50"></text></g><g><title>evaluate_obligation (291,064 samples, 0.20%)</title><rect x="20.2590%" y="69" width="0.1962%" height="15" fill="rgb(240,193,28)"/><text x="20.5090%" y="79.50"></text></g><g><title>associated_item (188,092 samples, 0.13%)</title><rect x="20.6486%" y="53" width="0.1268%" height="15" fill="rgb(216,20,37)"/><text x="20.8986%" y="63.50"></text></g><g><title>metadata_decode_entry_associated_item (182,422 samples, 0.12%)</title><rect x="20.6524%" y="37" width="0.1230%" height="15" fill="rgb(206,188,39)"/><text x="20.9024%" y="47.50"></text></g><g><title>impl_item_implementor_ids (231,742 samples, 0.16%)</title><rect x="20.6238%" y="85" width="0.1562%" height="15" fill="rgb(217,207,13)"/><text x="20.8738%" y="95.50"></text></g><g><title>associated_items (218,762 samples, 0.15%)</title><rect x="20.6325%" y="69" width="0.1474%" height="15" fill="rgb(231,73,38)"/><text x="20.8825%" y="79.50"></text></g><g><title>resolve_instance (453,824 samples, 0.31%)</title><rect x="20.4994%" y="101" width="0.3059%" height="15" fill="rgb(225,20,46)"/><text x="20.7494%" y="111.50"></text></g><g><title>thir_body (434,554 samples, 0.29%)</title><rect x="20.8112%" y="101" width="0.2929%" height="15" fill="rgb(210,31,41)"/><text x="21.0612%" y="111.50"></text></g><g><title>mir_const (3,613,678 samples, 2.44%)</title><rect x="18.6721%" y="149" width="2.4356%" height="15" fill="rgb(221,200,47)"/><text x="18.9221%" y="159.50">mi..</text></g><g><title>unsafety_check_result (3,257,346 samples, 2.20%)</title><rect x="18.9123%" y="133" width="2.1954%" height="15" fill="rgb(226,26,5)"/><text x="19.1623%" y="143.50">u..</text></g><g><title>mir_built (3,037,144 samples, 2.05%)</title><rect x="19.0607%" y="117" width="2.0470%" height="15" fill="rgb(249,33,26)"/><text x="19.3107%" y="127.50">m..</text></g><g><title>mir_promoted (4,402,919 samples, 2.97%)</title><rect x="18.3899%" y="165" width="2.9675%" height="15" fill="rgb(235,183,28)"/><text x="18.6399%" y="175.50">mir..</text></g><g><title>mir_const_qualif (370,554 samples, 0.25%)</title><rect x="21.1077%" y="149" width="0.2497%" height="15" fill="rgb(221,5,38)"/><text x="21.3577%" y="159.50"></text></g><g><title>mir_const (295,413 samples, 0.20%)</title><rect x="21.1583%" y="133" width="0.1991%" height="15" fill="rgb(247,18,42)"/><text x="21.4083%" y="143.50"></text></g><g><title>unsafety_check_result (186,792 samples, 0.13%)</title><rect x="21.2316%" y="117" width="0.1259%" height="15" fill="rgb(241,131,45)"/><text x="21.4816%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (241,843 samples, 0.16%)</title><rect x="21.3575%" y="165" width="0.1630%" height="15" fill="rgb(249,31,29)"/><text x="21.6075%" y="175.50"></text></g><g><title>type_op_prove_predicate (655,029 samples, 0.44%)</title><rect x="21.5205%" y="165" width="0.4415%" height="15" fill="rgb(225,111,53)"/><text x="21.7705%" y="175.50"></text></g><g><title>MIR_borrow_checking (10,849,420 samples, 7.31%)</title><rect x="14.6548%" y="197" width="7.3124%" height="15" fill="rgb(238,160,17)"/><text x="14.9048%" y="207.50">MIR_borrow..</text></g><g><title>mir_borrowck (10,797,289 samples, 7.28%)</title><rect x="14.6900%" y="181" width="7.2773%" height="15" fill="rgb(214,148,48)"/><text x="14.9400%" y="191.50">mir_borrow..</text></g><g><title>MIR_effect_checking (207,042 samples, 0.14%)</title><rect x="21.9672%" y="197" width="0.1395%" height="15" fill="rgb(232,36,49)"/><text x="22.2172%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (169,621 samples, 0.11%)</title><rect x="21.9925%" y="181" width="0.1143%" height="15" fill="rgb(209,103,24)"/><text x="22.2425%" y="191.50"></text></g><g><title>hir_module_items (162,622 samples, 0.11%)</title><rect x="22.1068%" y="197" width="0.1096%" height="15" fill="rgb(229,88,8)"/><text x="22.3568%" y="207.50"></text></g><g><title>codegen_fn_attrs (308,525 samples, 0.21%)</title><rect x="22.4397%" y="133" width="0.2079%" height="15" fill="rgb(213,181,19)"/><text x="22.6897%" y="143.50"></text></g><g><title>codegen_fn_attrs (436,816 samples, 0.29%)</title><rect x="22.3557%" y="165" width="0.2944%" height="15" fill="rgb(254,191,54)"/><text x="22.6057%" y="175.50"></text></g><g><title>should_inherit_track_caller (399,765 samples, 0.27%)</title><rect x="22.3807%" y="149" width="0.2694%" height="15" fill="rgb(241,83,37)"/><text x="22.6307%" y="159.50"></text></g><g><title>check_mod_attrs (602,557 samples, 0.41%)</title><rect x="22.2441%" y="181" width="0.4061%" height="15" fill="rgb(233,36,39)"/><text x="22.4941%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (393,054 samples, 0.26%)</title><rect x="22.7292%" y="181" width="0.2649%" height="15" fill="rgb(226,3,54)"/><text x="22.9792%" y="191.50"></text></g><g><title>misc_checking_1 (1,213,323 samples, 0.82%)</title><rect x="22.2168%" y="197" width="0.8178%" height="15" fill="rgb(245,192,40)"/><text x="22.4668%" y="207.50"></text></g><g><title>misc_checking_2 (540,936 samples, 0.36%)</title><rect x="23.0346%" y="197" width="0.3646%" height="15" fill="rgb(238,167,29)"/><text x="23.2846%" y="207.50"></text></g><g><title>match_checking (403,864 samples, 0.27%)</title><rect x="23.1270%" y="181" width="0.2722%" height="15" fill="rgb(232,182,51)"/><text x="23.3770%" y="191.50"></text></g><g><title>check_match (386,374 samples, 0.26%)</title><rect x="23.1387%" y="165" width="0.2604%" height="15" fill="rgb(231,60,39)"/><text x="23.3887%" y="175.50"></text></g><g><title>death_checking (654,857 samples, 0.44%)</title><rect x="23.4830%" y="181" width="0.4414%" height="15" fill="rgb(208,69,12)"/><text x="23.7330%" y="191.50"></text></g><g><title>item_attrs (426,654 samples, 0.29%)</title><rect x="23.6368%" y="165" width="0.2876%" height="15" fill="rgb(235,93,37)"/><text x="23.8868%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (420,994 samples, 0.28%)</title><rect x="23.6406%" y="149" width="0.2837%" height="15" fill="rgb(213,116,39)"/><text x="23.8906%" y="159.50"></text></g><g><title>eval_to_const_value_raw (268,272 samples, 0.18%)</title><rect x="24.2656%" y="149" width="0.1808%" height="15" fill="rgb(222,207,29)"/><text x="24.5156%" y="159.50"></text></g><g><title>eval_to_const_value_raw (263,522 samples, 0.18%)</title><rect x="24.2688%" y="133" width="0.1776%" height="15" fill="rgb(206,96,30)"/><text x="24.5188%" y="143.50"></text></g><g><title>eval_to_allocation_raw (252,822 samples, 0.17%)</title><rect x="24.2760%" y="117" width="0.1704%" height="15" fill="rgb(218,138,4)"/><text x="24.5260%" y="127.50"></text></g><g><title>param_env (166,222 samples, 0.11%)</title><rect x="24.4464%" y="149" width="0.1120%" height="15" fill="rgb(250,191,14)"/><text x="24.6964%" y="159.50"></text></g><g><title>crate_lints (1,565,437 samples, 1.06%)</title><rect x="23.9267%" y="165" width="1.0551%" height="15" fill="rgb(239,60,40)"/><text x="24.1767%" y="175.50"></text></g><g><title>type_of (628,158 samples, 0.42%)</title><rect x="24.5585%" y="149" width="0.4234%" height="15" fill="rgb(206,27,48)"/><text x="24.8085%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (421,477 samples, 0.28%)</title><rect x="24.6978%" y="133" width="0.2841%" height="15" fill="rgb(225,35,8)"/><text x="24.9478%" y="143.50"></text></g><g><title>lint_checking (1,755,079 samples, 1.18%)</title><rect x="23.9244%" y="181" width="1.1829%" height="15" fill="rgb(250,213,24)"/><text x="24.1744%" y="191.50"></text></g><g><title>module_lints (186,142 samples, 0.13%)</title><rect x="24.9818%" y="165" width="0.1255%" height="15" fill="rgb(247,123,22)"/><text x="25.2318%" y="175.50"></text></g><g><title>lint_mod (180,052 samples, 0.12%)</title><rect x="24.9859%" y="149" width="0.1214%" height="15" fill="rgb(231,138,38)"/><text x="25.2359%" y="159.50"></text></g><g><title>privacy_checking_modules (344,524 samples, 0.23%)</title><rect x="25.2014%" y="181" width="0.2322%" height="15" fill="rgb(231,145,46)"/><text x="25.4514%" y="191.50"></text></g><g><title>check_mod_privacy (340,444 samples, 0.23%)</title><rect x="25.2042%" y="165" width="0.2295%" height="15" fill="rgb(251,118,11)"/><text x="25.4542%" y="175.50"></text></g><g><title>misc_checking_3 (3,041,474 samples, 2.05%)</title><rect x="23.3992%" y="197" width="2.0499%" height="15" fill="rgb(217,147,25)"/><text x="23.6492%" y="207.50">m..</text></g><g><title>is_copy_raw (193,942 samples, 0.13%)</title><rect x="25.6280%" y="149" width="0.1307%" height="15" fill="rgb(247,81,37)"/><text x="25.8780%" y="159.50"></text></g><g><title>evaluate_obligation (171,792 samples, 0.12%)</title><rect x="25.6429%" y="133" width="0.1158%" height="15" fill="rgb(209,12,38)"/><text x="25.8929%" y="143.50"></text></g><g><title>param_env (196,813 samples, 0.13%)</title><rect x="25.7587%" y="149" width="0.1326%" height="15" fill="rgb(227,1,9)"/><text x="26.0087%" y="159.50"></text></g><g><title>impl_parent (2,012,123 samples, 1.36%)</title><rect x="28.6018%" y="133" width="1.3561%" height="15" fill="rgb(248,47,43)"/><text x="28.8518%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,001,030 samples, 0.67%)</title><rect x="29.2833%" y="117" width="0.6747%" height="15" fill="rgb(221,10,30)"/><text x="29.5333%" y="127.50"></text></g><g><title>impl_trait_ref (3,738,618 samples, 2.52%)</title><rect x="29.9580%" y="133" width="2.5198%" height="15" fill="rgb(210,229,1)"/><text x="30.2080%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,678,798 samples, 1.81%)</title><rect x="30.6723%" y="117" width="1.8055%" height="15" fill="rgb(222,148,37)"/><text x="30.9223%" y="127.50">m..</text></g><g><title>coherent_trait (11,235,023 samples, 7.57%)</title><rect x="25.5114%" y="165" width="7.5723%" height="15" fill="rgb(234,67,33)"/><text x="25.7614%" y="175.50">coherent_t..</text></g><g><title>specialization_graph_of (10,671,326 samples, 7.19%)</title><rect x="25.8913%" y="149" width="7.1924%" height="15" fill="rgb(247,98,35)"/><text x="26.1413%" y="159.50">specializa..</text></g><g><title>trait_impls_of (896,407 samples, 0.60%)</title><rect x="32.4795%" y="133" width="0.6042%" height="15" fill="rgb(247,138,52)"/><text x="32.7295%" y="143.50"></text></g><g><title>implementations_of_trait (223,453 samples, 0.15%)</title><rect x="32.9331%" y="117" width="0.1506%" height="15" fill="rgb(213,79,30)"/><text x="33.1831%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (201,333 samples, 0.14%)</title><rect x="32.9480%" y="101" width="0.1357%" height="15" fill="rgb(246,177,23)"/><text x="33.1980%" y="111.50"></text></g><g><title>coherence_checking (11,337,666 samples, 7.64%)</title><rect x="25.4845%" y="181" width="7.6415%" height="15" fill="rgb(230,62,27)"/><text x="25.7345%" y="191.50">coherence_..</text></g><g><title>dropck_outlives (231,130 samples, 0.16%)</title><rect x="39.2664%" y="133" width="0.1558%" height="15" fill="rgb(216,154,8)"/><text x="39.5164%" y="143.50"></text></g><g><title>evaluate_obligation (674,358 samples, 0.45%)</title><rect x="39.4222%" y="133" width="0.4545%" height="15" fill="rgb(244,35,45)"/><text x="39.6722%" y="143.50"></text></g><g><title>object_safety_violations (261,982 samples, 0.18%)</title><rect x="40.1513%" y="133" width="0.1766%" height="15" fill="rgb(251,115,12)"/><text x="40.4013%" y="143.50"></text></g><g><title>explicit_predicates_of (151,091 samples, 0.10%)</title><rect x="40.7315%" y="101" width="0.1018%" height="15" fill="rgb(240,54,50)"/><text x="40.9815%" y="111.50"></text></g><g><title>predicates_of (769,759 samples, 0.52%)</title><rect x="40.3378%" y="133" width="0.5188%" height="15" fill="rgb(233,84,52)"/><text x="40.5878%" y="143.50"></text></g><g><title>predicates_defined_on (728,779 samples, 0.49%)</title><rect x="40.3654%" y="117" width="0.4912%" height="15" fill="rgb(207,117,47)"/><text x="40.6154%" y="127.50"></text></g><g><title>item_bodies_checking (11,618,159 samples, 7.83%)</title><rect x="33.1480%" y="181" width="7.8305%" height="15" fill="rgb(249,43,39)"/><text x="33.3980%" y="191.50">item_bodies..</text></g><g><title>typeck_item_bodies (11,614,359 samples, 7.83%)</title><rect x="33.1505%" y="165" width="7.8280%" height="15" fill="rgb(209,38,44)"/><text x="33.4005%" y="175.50">typeck_item..</text></g><g><title>typeck (11,581,318 samples, 7.81%)</title><rect x="33.1728%" y="149" width="7.8057%" height="15" fill="rgb(236,212,23)"/><text x="33.4228%" y="159.50">typeck</text></g><g><title>item_types_checking (1,244,454 samples, 0.84%)</title><rect x="40.9785%" y="181" width="0.8387%" height="15" fill="rgb(242,79,21)"/><text x="41.2285%" y="191.50"></text></g><g><title>check_mod_item_types (1,237,724 samples, 0.83%)</title><rect x="40.9830%" y="165" width="0.8342%" height="15" fill="rgb(211,96,35)"/><text x="41.2330%" y="175.50"></text></g><g><title>typeck (377,404 samples, 0.25%)</title><rect x="41.5629%" y="149" width="0.2544%" height="15" fill="rgb(253,215,40)"/><text x="41.8129%" y="159.50"></text></g><g><title>fn_sig (208,363 samples, 0.14%)</title><rect x="41.9504%" y="149" width="0.1404%" height="15" fill="rgb(211,81,21)"/><text x="42.2004%" y="159.50"></text></g><g><title>named_region_map (333,743 samples, 0.22%)</title><rect x="42.1343%" y="133" width="0.2249%" height="15" fill="rgb(208,190,38)"/><text x="42.3843%" y="143.50"></text></g><g><title>resolve_lifetimes (319,353 samples, 0.22%)</title><rect x="42.1440%" y="117" width="0.2152%" height="15" fill="rgb(235,213,38)"/><text x="42.3940%" y="127.50"></text></g><g><title>generics_of (412,125 samples, 0.28%)</title><rect x="42.0908%" y="149" width="0.2778%" height="15" fill="rgb(237,122,38)"/><text x="42.3408%" y="159.50"></text></g><g><title>predicates_of (261,364 samples, 0.18%)</title><rect x="42.4365%" y="149" width="0.1762%" height="15" fill="rgb(244,218,35)"/><text x="42.6865%" y="159.50"></text></g><g><title>predicates_defined_on (231,483 samples, 0.16%)</title><rect x="42.4567%" y="133" width="0.1560%" height="15" fill="rgb(240,68,47)"/><text x="42.7067%" y="143.50"></text></g><g><title>type_collecting (1,357,755 samples, 0.92%)</title><rect x="41.8185%" y="181" width="0.9151%" height="15" fill="rgb(210,16,53)"/><text x="42.0685%" y="191.50"></text></g><g><title>collect_mod_item_types (1,337,885 samples, 0.90%)</title><rect x="41.8319%" y="165" width="0.9017%" height="15" fill="rgb(235,124,12)"/><text x="42.0819%" y="175.50"></text></g><g><title>type_of (179,412 samples, 0.12%)</title><rect x="42.6127%" y="149" width="0.1209%" height="15" fill="rgb(224,169,11)"/><text x="42.8627%" y="159.50"></text></g><g><title>evaluate_obligation (319,662 samples, 0.22%)</title><rect x="43.3481%" y="149" width="0.2154%" height="15" fill="rgb(250,166,2)"/><text x="43.5981%" y="159.50"></text></g><g><title>region_scope_tree (203,142 samples, 0.14%)</title><rect x="43.7739%" y="149" width="0.1369%" height="15" fill="rgb(242,216,29)"/><text x="44.0239%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,652,507 samples, 1.11%)</title><rect x="42.8050%" y="165" width="1.1138%" height="15" fill="rgb(230,116,27)"/><text x="43.0550%" y="175.50"></text></g><g><title>evaluate_obligation (275,724 samples, 0.19%)</title><rect x="44.4369%" y="149" width="0.1858%" height="15" fill="rgb(228,99,48)"/><text x="44.6869%" y="159.50"></text></g><g><title>analysis (45,183,879 samples, 30.45%)</title><rect x="14.4874%" y="213" width="30.4535%" height="15" fill="rgb(253,11,6)"/><text x="14.7374%" y="223.50">analysis</text></g><g><title>type_check_crate (28,919,989 samples, 19.49%)</title><rect x="25.4491%" y="197" width="19.4918%" height="15" fill="rgb(247,143,39)"/><text x="25.6991%" y="207.50">type_check_crate</text></g><g><title>wf_checking (3,272,375 samples, 2.21%)</title><rect x="42.7353%" y="181" width="2.2055%" height="15" fill="rgb(236,97,10)"/><text x="42.9853%" y="191.50">w..</text></g><g><title>check_item_well_formed (1,516,427 samples, 1.02%)</title><rect x="43.9188%" y="165" width="1.0221%" height="15" fill="rgb(233,208,19)"/><text x="44.1688%" y="175.50"></text></g><g><title>item_attrs (154,461 samples, 0.10%)</title><rect x="48.0423%" y="149" width="0.1041%" height="15" fill="rgb(216,164,2)"/><text x="48.2923%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (150,081 samples, 0.10%)</title><rect x="48.0452%" y="133" width="0.1012%" height="15" fill="rgb(220,129,5)"/><text x="48.2952%" y="143.50"></text></g><g><title>codegen_fn_attrs (227,753 samples, 0.15%)</title><rect x="48.0181%" y="165" width="0.1535%" height="15" fill="rgb(242,17,10)"/><text x="48.2681%" y="175.50"></text></g><g><title>is_freeze_raw (367,324 samples, 0.25%)</title><rect x="48.1854%" y="165" width="0.2476%" height="15" fill="rgb(242,107,0)"/><text x="48.4354%" y="175.50"></text></g><g><title>evaluate_obligation (336,204 samples, 0.23%)</title><rect x="48.2064%" y="149" width="0.2266%" height="15" fill="rgb(251,28,31)"/><text x="48.4564%" y="159.50"></text></g><g><title>is_unpin_raw (248,763 samples, 0.17%)</title><rect x="48.4330%" y="165" width="0.1677%" height="15" fill="rgb(233,223,10)"/><text x="48.6830%" y="175.50"></text></g><g><title>evaluate_obligation (237,553 samples, 0.16%)</title><rect x="48.4405%" y="149" width="0.1601%" height="15" fill="rgb(215,21,27)"/><text x="48.6905%" y="159.50"></text></g><g><title>layout_of (185,902 samples, 0.13%)</title><rect x="48.6006%" y="165" width="0.1253%" height="15" fill="rgb(232,23,21)"/><text x="48.8506%" y="175.50"></text></g><g><title>param_env (317,773 samples, 0.21%)</title><rect x="48.7259%" y="165" width="0.2142%" height="15" fill="rgb(244,5,23)"/><text x="48.9759%" y="175.50"></text></g><g><title>fn_abi_of_instance (1,711,640 samples, 1.15%)</title><rect x="47.7936%" y="181" width="1.1536%" height="15" fill="rgb(226,81,46)"/><text x="48.0436%" y="191.50"></text></g><g><title>layout_of (180,361 samples, 0.12%)</title><rect x="49.0092%" y="181" width="0.1216%" height="15" fill="rgb(247,70,30)"/><text x="49.2592%" y="191.50"></text></g><g><title>symbol_name (202,994 samples, 0.14%)</title><rect x="49.1308%" y="181" width="0.1368%" height="15" fill="rgb(212,68,19)"/><text x="49.3808%" y="191.50"></text></g><g><title>codegen_module (5,197,037 samples, 3.50%)</title><rect x="45.7696%" y="197" width="3.5027%" height="15" fill="rgb(240,187,13)"/><text x="46.0196%" y="207.50">cod..</text></g><g><title>layout_of (156,692 samples, 0.11%)</title><rect x="50.0667%" y="117" width="0.1056%" height="15" fill="rgb(223,113,26)"/><text x="50.3167%" y="127.50"></text></g><g><title>layout_of (332,812 samples, 0.22%)</title><rect x="49.9822%" y="133" width="0.2243%" height="15" fill="rgb(206,192,2)"/><text x="50.2322%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (251,142 samples, 0.17%)</title><rect x="50.2065%" y="133" width="0.1693%" height="15" fill="rgb(241,108,4)"/><text x="50.4565%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (321,173 samples, 0.22%)</title><rect x="50.3758%" y="133" width="0.2165%" height="15" fill="rgb(247,173,49)"/><text x="50.6258%" y="143.50"></text></g><g><title>optimized_mir (1,610,097 samples, 1.09%)</title><rect x="49.6818%" y="149" width="1.0852%" height="15" fill="rgb(224,114,35)"/><text x="49.9318%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (158,301 samples, 0.11%)</title><rect x="50.6603%" y="133" width="0.1067%" height="15" fill="rgb(245,159,27)"/><text x="50.9103%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (171,453 samples, 0.12%)</title><rect x="50.8348%" y="133" width="0.1156%" height="15" fill="rgb(245,172,44)"/><text x="51.0848%" y="143.50"></text></g><g><title>specialization_graph_of (303,744 samples, 0.20%)</title><rect x="51.0028%" y="133" width="0.2047%" height="15" fill="rgb(236,23,11)"/><text x="51.2528%" y="143.50"></text></g><g><title>resolve_instance (699,017 samples, 0.47%)</title><rect x="50.7670%" y="149" width="0.4711%" height="15" fill="rgb(205,117,38)"/><text x="51.0170%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (168,882 samples, 0.11%)</title><rect x="51.2381%" y="149" width="0.1138%" height="15" fill="rgb(237,72,25)"/><text x="51.4881%" y="159.50"></text></g><g><title>eval_to_const_value_raw (153,402 samples, 0.10%)</title><rect x="51.2485%" y="133" width="0.1034%" height="15" fill="rgb(244,70,9)"/><text x="51.4985%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (3,233,986 samples, 2.18%)</title><rect x="49.3052%" y="165" width="2.1797%" height="15" fill="rgb(217,125,39)"/><text x="49.5552%" y="175.50">m..</text></g><g><title>vtable_entries (197,312 samples, 0.13%)</title><rect x="51.3519%" y="149" width="0.1330%" height="15" fill="rgb(235,36,10)"/><text x="51.6019%" y="159.50"></text></g><g><title>monomorphization_collector (3,278,627 samples, 2.21%)</title><rect x="49.3027%" y="181" width="2.2098%" height="15" fill="rgb(251,123,47)"/><text x="49.5527%" y="191.50">m..</text></g><g><title>assert_symbols_are_distinct (156,862 samples, 0.11%)</title><rect x="51.5323%" y="165" width="0.1057%" height="15" fill="rgb(221,13,13)"/><text x="51.7823%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (3,598,830 samples, 2.43%)</title><rect x="49.2735%" y="197" width="2.4256%" height="15" fill="rgb(238,131,9)"/><text x="49.5235%" y="207.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (276,813 samples, 0.19%)</title><rect x="51.5125%" y="181" width="0.1866%" height="15" fill="rgb(211,50,8)"/><text x="51.7625%" y="191.50"></text></g><g><title>codegen_crate (10,045,151 samples, 6.77%)</title><rect x="44.9469%" y="213" width="6.7703%" height="15" fill="rgb(245,182,24)"/><text x="45.1969%" y="223.50">codegen_c..</text></g><g><title>codegen_module_optimize (9,582,604 samples, 6.46%)</title><rect x="51.7172%" y="213" width="6.4586%" height="15" fill="rgb(242,14,37)"/><text x="51.9672%" y="223.50">codegen_..</text></g><g><title>LLVM_module_optimize (6,737,814 samples, 4.54%)</title><rect x="53.6346%" y="197" width="4.5412%" height="15" fill="rgb(246,228,12)"/><text x="53.8846%" y="207.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (6,329,289 samples, 4.27%)</title><rect x="59.0665%" y="197" width="4.2659%" height="15" fill="rgb(213,55,15)"/><text x="59.3165%" y="207.50">LLVM_..</text></g><g><title>LLVM_module_codegen (15,572,523 samples, 10.50%)</title><rect x="63.3324%" y="197" width="10.4957%" height="15" fill="rgb(209,9,3)"/><text x="63.5824%" y="207.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (15,329,681 samples, 10.33%)</title><rect x="63.4961%" y="181" width="10.3320%" height="15" fill="rgb(230,59,30)"/><text x="63.7461%" y="191.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (366,674 samples, 0.25%)</title><rect x="73.8281%" y="197" width="0.2471%" height="15" fill="rgb(209,121,21)"/><text x="74.0781%" y="207.50"></text></g><g><title>codegen_module_perform_lto (23,701,941 samples, 15.97%)</title><rect x="58.1758%" y="213" width="15.9749%" height="15" fill="rgb(220,109,13)"/><text x="58.4258%" y="223.50">codegen_module_perform_lto</text></g><g><title>metadata_load_macro (265,722 samples, 0.18%)</title><rect x="80.8104%" y="165" width="0.1791%" height="15" fill="rgb(232,18,1)"/><text x="81.0604%" y="175.50"></text></g><g><title>metadata_register_crate (211,362 samples, 0.14%)</title><rect x="80.9895%" y="165" width="0.1425%" height="15" fill="rgb(215,41,42)"/><text x="81.2395%" y="175.50"></text></g><g><title>macro_expand_crate (9,984,430 samples, 6.73%)</title><rect x="74.4388%" y="197" width="6.7294%" height="15" fill="rgb(224,123,36)"/><text x="74.6888%" y="207.50">macro_exp..</text></g><g><title>expand_crate (9,970,160 samples, 6.72%)</title><rect x="74.4485%" y="181" width="6.7198%" height="15" fill="rgb(240,125,3)"/><text x="74.6985%" y="191.50">expand_cr..</text></g><g><title>finalize_macro_resolutions (354,534 samples, 0.24%)</title><rect x="81.2607%" y="181" width="0.2390%" height="15" fill="rgb(205,98,50)"/><text x="81.5107%" y="191.50"></text></g><g><title>late_resolve_crate (1,459,036 samples, 0.98%)</title><rect x="81.4996%" y="181" width="0.9834%" height="15" fill="rgb(205,185,37)"/><text x="81.7496%" y="191.50"></text></g><g><title>configure_and_expand (12,444,248 samples, 8.39%)</title><rect x="74.1506%" y="213" width="8.3873%" height="15" fill="rgb(238,207,15)"/><text x="74.4006%" y="223.50">configure_an..</text></g><g><title>resolve_crate (1,940,761 samples, 1.31%)</title><rect x="81.2299%" y="197" width="1.3081%" height="15" fill="rgb(213,199,42)"/><text x="81.4799%" y="207.50"></text></g><g><title>early_lint_checks (249,453 samples, 0.17%)</title><rect x="82.6073%" y="213" width="0.1681%" height="15" fill="rgb(235,201,11)"/><text x="82.8573%" y="223.50"></text></g><g><title>free_global_ctxt (2,785,761 samples, 1.88%)</title><rect x="82.7755%" y="213" width="1.8776%" height="15" fill="rgb(207,46,11)"/><text x="83.0255%" y="223.50">f..</text></g><g><title>exported_symbols (200,032 samples, 0.13%)</title><rect x="85.3370%" y="197" width="0.1348%" height="15" fill="rgb(241,35,35)"/><text x="85.5870%" y="207.50"></text></g><g><title>layout_of (152,010 samples, 0.10%)</title><rect x="86.2414%" y="181" width="0.1025%" height="15" fill="rgb(243,32,47)"/><text x="86.4914%" y="191.50"></text></g><g><title>optimized_mir (2,177,974 samples, 1.47%)</title><rect x="85.4893%" y="197" width="1.4679%" height="15" fill="rgb(247,202,23)"/><text x="85.7393%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (910,140 samples, 0.61%)</title><rect x="86.3439%" y="181" width="0.6134%" height="15" fill="rgb(219,102,11)"/><text x="86.5939%" y="191.50"></text></g><g><title>generate_crate_metadata (3,449,607 samples, 2.32%)</title><rect x="84.6530%" y="213" width="2.3250%" height="15" fill="rgb(243,110,44)"/><text x="84.9030%" y="223.50">g..</text></g><g><title>hir_lowering (1,636,668 samples, 1.10%)</title><rect x="86.9780%" y="213" width="1.1031%" height="15" fill="rgb(222,74,54)"/><text x="87.2280%" y="223.50"></text></g><g><title>finish_ongoing_codegen (14,910,984 samples, 10.05%)</title><rect x="88.0908%" y="197" width="10.0498%" height="15" fill="rgb(216,99,12)"/><text x="88.3408%" y="207.50">finish_ongoing_..</text></g><g><title>link_crate (609,966 samples, 0.41%)</title><rect x="98.1406%" y="197" width="0.4111%" height="15" fill="rgb(226,22,26)"/><text x="98.3906%" y="207.50"></text></g><g><title>link_binary (604,776 samples, 0.41%)</title><rect x="98.1441%" y="181" width="0.4076%" height="15" fill="rgb(217,163,10)"/><text x="98.3941%" y="191.50"></text></g><g><title>link_rlib (375,324 samples, 0.25%)</title><rect x="98.2988%" y="165" width="0.2530%" height="15" fill="rgb(213,25,53)"/><text x="98.5488%" y="175.50"></text></g><g><title>link (15,542,051 samples, 10.48%)</title><rect x="88.0811%" y="213" width="10.4752%" height="15" fill="rgb(252,105,26)"/><text x="88.3311%" y="223.50">link</text></g><g><title>parse_crate (200,102 samples, 0.13%)</title><rect x="98.5563%" y="213" width="0.1349%" height="15" fill="rgb(220,39,43)"/><text x="98.8063%" y="223.50"></text></g><g><title>prepare_outputs (316,093 samples, 0.21%)</title><rect x="98.7022%" y="213" width="0.2130%" height="15" fill="rgb(229,68,48)"/><text x="98.9522%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (957,200 samples, 0.65%)</title><rect x="98.9152%" y="213" width="0.6451%" height="15" fill="rgb(252,8,32)"/><text x="99.1652%" y="223.50"></text></g><g><title>all (148,370,264 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (148,370,264 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (512,685 samples, 0.35%)</title><rect x="99.6545%" y="213" width="0.3455%" height="15" fill="rgb(236,28,36)"/><text x="99.9045%" y="223.50"></text></g></svg></svg>