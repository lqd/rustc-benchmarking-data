<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (137,049,206 samples, 9.33%)</title><rect x="0.0716%" y="181" width="9.3317%" height="15" fill="rgb(227,0,7)"/><text x="0.3216%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,585,397 samples, 0.11%)</title><rect x="9.2953%" y="165" width="0.1079%" height="15" fill="rgb(217,0,24)"/><text x="9.5453%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,559,737 samples, 0.11%)</title><rect x="9.2971%" y="149" width="0.1062%" height="15" fill="rgb(221,193,54)"/><text x="9.5471%" y="159.50"></text></g><g><title>param_env (1,497,974 samples, 0.10%)</title><rect x="15.6053%" y="101" width="0.1020%" height="15" fill="rgb(248,212,6)"/><text x="15.8553%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,991,402 samples, 0.14%)</title><rect x="15.9140%" y="85" width="0.1356%" height="15" fill="rgb(208,68,35)"/><text x="16.1640%" y="95.50"></text></g><g><title>needs_drop_raw (10,350,177 samples, 0.70%)</title><rect x="17.4747%" y="69" width="0.7047%" height="15" fill="rgb(232,128,0)"/><text x="17.7247%" y="79.50"></text></g><g><title>is_copy_raw (8,178,086 samples, 0.56%)</title><rect x="17.6226%" y="53" width="0.5568%" height="15" fill="rgb(207,160,47)"/><text x="17.8726%" y="63.50"></text></g><g><title>evaluate_obligation (6,968,825 samples, 0.47%)</title><rect x="17.7049%" y="37" width="0.4745%" height="15" fill="rgb(228,23,34)"/><text x="17.9549%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,072,763 samples, 0.14%)</title><rect x="18.2660%" y="53" width="0.1411%" height="15" fill="rgb(218,30,26)"/><text x="18.5160%" y="63.50"></text></g><g><title>resolve_instance (4,082,027 samples, 0.28%)</title><rect x="18.1795%" y="69" width="0.2779%" height="15" fill="rgb(220,122,19)"/><text x="18.4295%" y="79.50"></text></g><g><title>thir_body (7,503,563 samples, 0.51%)</title><rect x="18.4658%" y="69" width="0.5109%" height="15" fill="rgb(250,228,42)"/><text x="18.7158%" y="79.50"></text></g><g><title>mir_const (55,037,740 samples, 3.75%)</title><rect x="15.2355%" y="117" width="3.7475%" height="15" fill="rgb(240,193,28)"/><text x="15.4855%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (48,108,924 samples, 3.28%)</title><rect x="15.7073%" y="101" width="3.2757%" height="15" fill="rgb(216,20,37)"/><text x="15.9573%" y="111.50">uns..</text></g><g><title>mir_built (43,081,898 samples, 2.93%)</title><rect x="16.0496%" y="85" width="2.9334%" height="15" fill="rgb(206,188,39)"/><text x="16.2996%" y="95.50">mi..</text></g><g><title>mir_const (1,800,518 samples, 0.12%)</title><rect x="19.0596%" y="101" width="0.1226%" height="15" fill="rgb(217,207,13)"/><text x="19.3096%" y="111.50"></text></g><g><title>mir_const_qualif (3,328,162 samples, 0.23%)</title><rect x="18.9830%" y="117" width="0.2266%" height="15" fill="rgb(231,73,38)"/><text x="19.2330%" y="127.50"></text></g><g><title>mir_promoted (64,030,794 samples, 4.36%)</title><rect x="14.8499%" y="133" width="4.3599%" height="15" fill="rgb(225,20,46)"/><text x="15.0999%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (4,216,224 samples, 0.29%)</title><rect x="19.2106%" y="133" width="0.2871%" height="15" fill="rgb(210,31,41)"/><text x="19.4606%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,354,903 samples, 0.30%)</title><rect x="19.4976%" y="133" width="0.2965%" height="15" fill="rgb(221,200,47)"/><text x="19.7476%" y="143.50"></text></g><g><title>normalize_projection_ty (2,722,492 samples, 0.19%)</title><rect x="19.6088%" y="117" width="0.1854%" height="15" fill="rgb(226,26,5)"/><text x="19.8588%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,560,793 samples, 0.17%)</title><rect x="19.7942%" y="133" width="0.1744%" height="15" fill="rgb(249,33,26)"/><text x="20.0442%" y="143.50"></text></g><g><title>normalize_projection_ty (1,887,931 samples, 0.13%)</title><rect x="19.8400%" y="117" width="0.1285%" height="15" fill="rgb(235,183,28)"/><text x="20.0900%" y="127.50"></text></g><g><title>type_op_prove_predicate (13,336,691 samples, 0.91%)</title><rect x="20.0034%" y="133" width="0.9081%" height="15" fill="rgb(221,5,38)"/><text x="20.2534%" y="143.50"></text></g><g><title>MIR_borrow_checking (167,609,970 samples, 11.41%)</title><rect x="9.5001%" y="165" width="11.4126%" height="15" fill="rgb(247,18,42)"/><text x="9.7501%" y="175.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (166,824,811 samples, 11.36%)</title><rect x="9.5535%" y="149" width="11.3591%" height="15" fill="rgb(241,131,45)"/><text x="9.8035%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,314,127 samples, 0.16%)</title><rect x="21.0804%" y="149" width="0.1576%" height="15" fill="rgb(249,31,29)"/><text x="21.3304%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (2,904,663 samples, 0.20%)</title><rect x="21.3062%" y="149" width="0.1978%" height="15" fill="rgb(225,111,53)"/><text x="21.5562%" y="159.50"></text></g><g><title>misc_checking_1 (6,514,569 samples, 0.44%)</title><rect x="21.0762%" y="165" width="0.4436%" height="15" fill="rgb(238,160,17)"/><text x="21.3262%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,145,374 samples, 0.21%)</title><rect x="21.5199%" y="149" width="0.2142%" height="15" fill="rgb(214,148,48)"/><text x="21.7699%" y="159.50"></text></g><g><title>check_mod_liveness (2,619,229 samples, 0.18%)</title><rect x="21.5557%" y="133" width="0.1783%" height="15" fill="rgb(232,36,49)"/><text x="21.8057%" y="143.50"></text></g><g><title>misc_checking_2 (8,504,871 samples, 0.58%)</title><rect x="21.5197%" y="165" width="0.5791%" height="15" fill="rgb(209,103,24)"/><text x="21.7697%" y="175.50"></text></g><g><title>match_checking (5,357,437 samples, 0.36%)</title><rect x="21.7341%" y="149" width="0.3648%" height="15" fill="rgb(229,88,8)"/><text x="21.9841%" y="159.50"></text></g><g><title>check_match (5,165,936 samples, 0.35%)</title><rect x="21.7471%" y="133" width="0.3517%" height="15" fill="rgb(213,181,19)"/><text x="21.9971%" y="143.50"></text></g><g><title>death_checking (2,327,364 samples, 0.16%)</title><rect x="22.1798%" y="149" width="0.1585%" height="15" fill="rgb(254,191,54)"/><text x="22.4298%" y="159.50"></text></g><g><title>param_env (1,713,095 samples, 0.12%)</title><rect x="22.5372%" y="117" width="0.1166%" height="15" fill="rgb(241,83,37)"/><text x="22.7872%" y="127.50"></text></g><g><title>crate_lints (5,859,832 samples, 0.40%)</title><rect x="22.3384%" y="133" width="0.3990%" height="15" fill="rgb(233,36,39)"/><text x="22.5884%" y="143.50"></text></g><g><title>lint_checking (9,347,059 samples, 0.64%)</title><rect x="22.3383%" y="149" width="0.6364%" height="15" fill="rgb(226,3,54)"/><text x="22.5883%" y="159.50"></text></g><g><title>module_lints (3,484,857 samples, 0.24%)</title><rect x="22.7374%" y="133" width="0.2373%" height="15" fill="rgb(245,192,40)"/><text x="22.9874%" y="143.50"></text></g><g><title>lint_mod (3,462,657 samples, 0.24%)</title><rect x="22.7389%" y="117" width="0.2358%" height="15" fill="rgb(238,167,29)"/><text x="22.9889%" y="127.50"></text></g><g><title>privacy_access_levels (2,229,284 samples, 0.15%)</title><rect x="22.9747%" y="149" width="0.1518%" height="15" fill="rgb(232,182,51)"/><text x="23.2247%" y="159.50"></text></g><g><title>privacy_checking_modules (5,733,121 samples, 0.39%)</title><rect x="23.1265%" y="149" width="0.3904%" height="15" fill="rgb(231,60,39)"/><text x="23.3765%" y="159.50"></text></g><g><title>check_mod_privacy (5,711,931 samples, 0.39%)</title><rect x="23.1279%" y="133" width="0.3889%" height="15" fill="rgb(208,69,12)"/><text x="23.3779%" y="143.50"></text></g><g><title>misc_checking_3 (20,873,841 samples, 1.42%)</title><rect x="22.0988%" y="165" width="1.4213%" height="15" fill="rgb(235,93,37)"/><text x="22.3488%" y="175.50"></text></g><g><title>impl_parent (2,291,504 samples, 0.16%)</title><rect x="23.8853%" y="101" width="0.1560%" height="15" fill="rgb(213,116,39)"/><text x="24.1353%" y="111.50"></text></g><g><title>impl_trait_ref (4,893,182 samples, 0.33%)</title><rect x="24.0413%" y="101" width="0.3332%" height="15" fill="rgb(222,207,29)"/><text x="24.2913%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,723,712 samples, 0.25%)</title><rect x="24.1210%" y="85" width="0.2535%" height="15" fill="rgb(206,96,30)"/><text x="24.3710%" y="95.50"></text></g><g><title>coherent_trait (12,925,178 samples, 0.88%)</title><rect x="23.5493%" y="133" width="0.8801%" height="15" fill="rgb(218,138,4)"/><text x="23.7993%" y="143.50"></text></g><g><title>specialization_graph_of (12,399,901 samples, 0.84%)</title><rect x="23.5850%" y="117" width="0.8443%" height="15" fill="rgb(250,191,14)"/><text x="23.8350%" y="127.50"></text></g><g><title>coherence_checking (13,164,680 samples, 0.90%)</title><rect x="23.5477%" y="149" width="0.8964%" height="15" fill="rgb(239,60,40)"/><text x="23.7977%" y="159.50"></text></g><g><title>associated_item (2,347,676 samples, 0.16%)</title><rect x="35.3640%" y="85" width="0.1599%" height="15" fill="rgb(206,27,48)"/><text x="35.6140%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,823,376 samples, 0.12%)</title><rect x="35.3997%" y="69" width="0.1242%" height="15" fill="rgb(225,35,8)"/><text x="35.6497%" y="79.50"></text></g><g><title>associated_items (3,363,754 samples, 0.23%)</title><rect x="35.3036%" y="101" width="0.2290%" height="15" fill="rgb(250,213,24)"/><text x="35.5536%" y="111.50"></text></g><g><title>dropck_outlives (2,939,553 samples, 0.20%)</title><rect x="35.5539%" y="101" width="0.2002%" height="15" fill="rgb(247,123,22)"/><text x="35.8039%" y="111.50"></text></g><g><title>evaluate_obligation (13,494,200 samples, 0.92%)</title><rect x="35.8345%" y="101" width="0.9188%" height="15" fill="rgb(231,138,38)"/><text x="36.0845%" y="111.50"></text></g><g><title>method_autoderef_steps (2,559,086 samples, 0.17%)</title><rect x="36.9575%" y="101" width="0.1742%" height="15" fill="rgb(231,145,46)"/><text x="37.2075%" y="111.50"></text></g><g><title>evaluate_obligation (1,496,665 samples, 0.10%)</title><rect x="38.2286%" y="85" width="0.1019%" height="15" fill="rgb(251,118,11)"/><text x="38.4786%" y="95.50"></text></g><g><title>typeck (14,650,666 samples, 1.00%)</title><rect x="37.4306%" y="101" width="0.9976%" height="15" fill="rgb(217,147,25)"/><text x="37.6806%" y="111.50"></text></g><g><title>item_bodies_checking (205,728,755 samples, 14.01%)</title><rect x="24.4560%" y="149" width="14.0081%" height="15" fill="rgb(247,81,37)"/><text x="24.7060%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (205,725,765 samples, 14.01%)</title><rect x="24.4562%" y="133" width="14.0079%" height="15" fill="rgb(209,12,38)"/><text x="24.7062%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (205,177,273 samples, 13.97%)</title><rect x="24.4935%" y="117" width="13.9705%" height="15" fill="rgb(227,1,9)"/><text x="24.7435%" y="127.50">typeck</text></g><g><title>item_types_checking (7,542,330 samples, 0.51%)</title><rect x="38.4640%" y="149" width="0.5136%" height="15" fill="rgb(248,47,43)"/><text x="38.7140%" y="159.50"></text></g><g><title>check_mod_item_types (7,521,230 samples, 0.51%)</title><rect x="38.4655%" y="133" width="0.5121%" height="15" fill="rgb(221,10,30)"/><text x="38.7155%" y="143.50"></text></g><g><title>generics_of (2,787,989 samples, 0.19%)</title><rect x="39.1546%" y="117" width="0.1898%" height="15" fill="rgb(210,229,1)"/><text x="39.4046%" y="127.50"></text></g><g><title>explicit_predicates_of (2,045,790 samples, 0.14%)</title><rect x="39.4182%" y="85" width="0.1393%" height="15" fill="rgb(222,148,37)"/><text x="39.6682%" y="95.50"></text></g><g><title>predicates_of (3,338,542 samples, 0.23%)</title><rect x="39.3667%" y="117" width="0.2273%" height="15" fill="rgb(234,67,33)"/><text x="39.6167%" y="127.50"></text></g><g><title>predicates_defined_on (3,053,422 samples, 0.21%)</title><rect x="39.3861%" y="101" width="0.2079%" height="15" fill="rgb(247,98,35)"/><text x="39.6361%" y="111.50"></text></g><g><title>type_collecting (9,882,955 samples, 0.67%)</title><rect x="38.9787%" y="149" width="0.6729%" height="15" fill="rgb(247,138,52)"/><text x="39.2287%" y="159.50"></text></g><g><title>collect_mod_item_types (9,853,004 samples, 0.67%)</title><rect x="38.9808%" y="133" width="0.6709%" height="15" fill="rgb(213,79,30)"/><text x="39.2308%" y="143.50"></text></g><g><title>evaluate_obligation (3,380,120 samples, 0.23%)</title><rect x="40.6374%" y="117" width="0.2302%" height="15" fill="rgb(246,177,23)"/><text x="40.8874%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,991,790 samples, 0.14%)</title><rect x="40.8690%" y="117" width="0.1356%" height="15" fill="rgb(230,62,27)"/><text x="41.1190%" y="127.50"></text></g><g><title>param_env (2,023,512 samples, 0.14%)</title><rect x="41.0046%" y="117" width="0.1378%" height="15" fill="rgb(216,154,8)"/><text x="41.2546%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,619,077 samples, 1.54%)</title><rect x="39.7449%" y="133" width="1.5401%" height="15" fill="rgb(244,35,45)"/><text x="39.9949%" y="143.50"></text></g><g><title>region_scope_tree (2,076,173 samples, 0.14%)</title><rect x="41.1436%" y="117" width="0.1414%" height="15" fill="rgb(251,115,12)"/><text x="41.3936%" y="127.50"></text></g><g><title>evaluate_obligation (3,172,100 samples, 0.22%)</title><rect x="42.2287%" y="117" width="0.2160%" height="15" fill="rgb(240,54,50)"/><text x="42.4787%" y="127.50"></text></g><g><title>param_env (2,092,644 samples, 0.14%)</title><rect x="42.5077%" y="117" width="0.1425%" height="15" fill="rgb(233,84,52)"/><text x="42.7577%" y="127.50"></text></g><g><title>check_item_well_formed (21,578,396 samples, 1.47%)</title><rect x="41.2850%" y="133" width="1.4693%" height="15" fill="rgb(207,117,47)"/><text x="41.5350%" y="143.50"></text></g><g><title>analysis (491,652,961 samples, 33.48%)</title><rect x="9.4033%" y="181" width="33.4766%" height="15" fill="rgb(249,43,39)"/><text x="9.6533%" y="191.50">analysis</text></g><g><title>type_check_crate (284,326,249 samples, 19.36%)</title><rect x="23.5201%" y="165" width="19.3598%" height="15" fill="rgb(209,38,44)"/><text x="23.7701%" y="175.50">type_check_crate</text></g><g><title>wf_checking (47,378,803 samples, 3.23%)</title><rect x="39.6539%" y="149" width="3.2260%" height="15" fill="rgb(236,212,23)"/><text x="39.9039%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (1,844,780 samples, 0.13%)</title><rect x="42.7543%" y="133" width="0.1256%" height="15" fill="rgb(242,79,21)"/><text x="43.0043%" y="143.50"></text></g><g><title>param_env (2,231,863 samples, 0.15%)</title><rect x="44.7943%" y="133" width="0.1520%" height="15" fill="rgb(211,96,35)"/><text x="45.0443%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,959,251 samples, 0.54%)</title><rect x="44.4344%" y="149" width="0.5419%" height="15" fill="rgb(253,215,40)"/><text x="44.6844%" y="159.50"></text></g><g><title>codegen_module (30,027,479 samples, 2.04%)</title><rect x="43.0264%" y="165" width="2.0446%" height="15" fill="rgb(211,81,21)"/><text x="43.2764%" y="175.50">c..</text></g><g><title>optimized_mir (4,371,372 samples, 0.30%)</title><rect x="45.2697%" y="117" width="0.2976%" height="15" fill="rgb(208,190,38)"/><text x="45.5197%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,639,117 samples, 0.11%)</title><rect x="45.6105%" y="101" width="0.1116%" height="15" fill="rgb(235,213,38)"/><text x="45.8605%" y="111.50"></text></g><g><title>specialization_graph_of (2,493,926 samples, 0.17%)</title><rect x="45.7608%" y="101" width="0.1698%" height="15" fill="rgb(237,122,38)"/><text x="46.0108%" y="111.50"></text></g><g><title>resolve_instance (5,551,294 samples, 0.38%)</title><rect x="45.5673%" y="117" width="0.3780%" height="15" fill="rgb(244,218,35)"/><text x="45.8173%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (13,666,005 samples, 0.93%)</title><rect x="45.0737%" y="133" width="0.9305%" height="15" fill="rgb(240,68,47)"/><text x="45.3237%" y="143.50"></text></g><g><title>monomorphization_collector (13,786,497 samples, 0.94%)</title><rect x="45.0735%" y="149" width="0.9387%" height="15" fill="rgb(210,16,53)"/><text x="45.3235%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (15,366,563 samples, 1.05%)</title><rect x="45.0717%" y="165" width="1.0463%" height="15" fill="rgb(235,124,12)"/><text x="45.3217%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,553,776 samples, 0.11%)</title><rect x="46.0123%" y="149" width="0.1058%" height="15" fill="rgb(224,169,11)"/><text x="46.2623%" y="159.50"></text></g><g><title>codegen_crate (47,614,526 samples, 3.24%)</title><rect x="42.8804%" y="181" width="3.2421%" height="15" fill="rgb(250,166,2)"/><text x="43.1304%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (221,846,937 samples, 15.11%)</title><rect x="46.1225%" y="181" width="15.1055%" height="15" fill="rgb(242,216,29)"/><text x="46.3725%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (200,172,957 samples, 13.63%)</title><rect x="47.5983%" y="165" width="13.6298%" height="15" fill="rgb(230,116,27)"/><text x="47.8483%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (118,256,520 samples, 8.05%)</title><rect x="62.1354%" y="165" width="8.0521%" height="15" fill="rgb(228,99,48)"/><text x="62.3854%" y="175.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (155,591,577 samples, 10.59%)</title><rect x="70.1875%" y="165" width="10.5942%" height="15" fill="rgb(253,11,6)"/><text x="70.4375%" y="175.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (153,538,959 samples, 10.45%)</title><rect x="70.3273%" y="149" width="10.4545%" height="15" fill="rgb(247,143,39)"/><text x="70.5773%" y="159.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (8,066,174 samples, 0.55%)</title><rect x="80.7817%" y="165" width="0.5492%" height="15" fill="rgb(236,97,10)"/><text x="81.0317%" y="175.50"></text></g><g><title>codegen_module_perform_lto (296,210,157 samples, 20.17%)</title><rect x="61.2280%" y="181" width="20.1689%" height="15" fill="rgb(233,208,19)"/><text x="61.4780%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,843,980 samples, 0.13%)</title><rect x="84.3237%" y="133" width="0.1256%" height="15" fill="rgb(216,164,2)"/><text x="84.5737%" y="143.50"></text></g><g><title>macro_expand_crate (45,251,870 samples, 3.08%)</title><rect x="81.4654%" y="165" width="3.0812%" height="15" fill="rgb(220,129,5)"/><text x="81.7154%" y="175.50">mac..</text></g><g><title>expand_crate (45,241,240 samples, 3.08%)</title><rect x="81.4661%" y="149" width="3.0805%" height="15" fill="rgb(242,17,10)"/><text x="81.7161%" y="159.50">exp..</text></g><g><title>late_resolve_crate (7,437,619 samples, 0.51%)</title><rect x="84.5854%" y="149" width="0.5064%" height="15" fill="rgb(242,107,0)"/><text x="84.8354%" y="159.50"></text></g><g><title>configure_and_expand (54,829,333 samples, 3.73%)</title><rect x="81.3970%" y="181" width="3.7333%" height="15" fill="rgb(251,28,31)"/><text x="81.6470%" y="191.50">conf..</text></g><g><title>resolve_crate (8,466,230 samples, 0.58%)</title><rect x="84.5538%" y="165" width="0.5765%" height="15" fill="rgb(233,223,10)"/><text x="84.8038%" y="175.50"></text></g><g><title>early_lint_checks (1,807,689 samples, 0.12%)</title><rect x="85.1891%" y="181" width="0.1231%" height="15" fill="rgb(215,21,27)"/><text x="85.4391%" y="191.50"></text></g><g><title>free_global_ctxt (10,210,908 samples, 0.70%)</title><rect x="85.3122%" y="181" width="0.6953%" height="15" fill="rgb(232,23,21)"/><text x="85.5622%" y="191.50"></text></g><g><title>layout_of (6,001,069 samples, 0.41%)</title><rect x="88.4182%" y="149" width="0.4086%" height="15" fill="rgb(244,5,23)"/><text x="88.6682%" y="159.50"></text></g><g><title>needs_drop_raw (4,459,316 samples, 0.30%)</title><rect x="91.0656%" y="133" width="0.3036%" height="15" fill="rgb(226,81,46)"/><text x="91.3156%" y="143.50"></text></g><g><title>is_copy_raw (3,923,761 samples, 0.27%)</title><rect x="91.1021%" y="117" width="0.2672%" height="15" fill="rgb(247,70,30)"/><text x="91.3521%" y="127.50"></text></g><g><title>evaluate_obligation (3,364,821 samples, 0.23%)</title><rect x="91.1402%" y="101" width="0.2291%" height="15" fill="rgb(212,68,19)"/><text x="91.3902%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (37,529,960 samples, 2.56%)</title><rect x="88.8268%" y="149" width="2.5554%" height="15" fill="rgb(240,187,13)"/><text x="89.0768%" y="159.50">mi..</text></g><g><title>optimized_mir (66,105,930 samples, 4.50%)</title><rect x="86.8978%" y="165" width="4.5011%" height="15" fill="rgb(223,113,26)"/><text x="87.1478%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (79,849,998 samples, 5.44%)</title><rect x="86.0075%" y="181" width="5.4370%" height="15" fill="rgb(206,192,2)"/><text x="86.2575%" y="191.50">generat..</text></g><g><title>hir_lowering (17,173,333 samples, 1.17%)</title><rect x="91.4445%" y="181" width="1.1693%" height="15" fill="rgb(241,108,4)"/><text x="91.6945%" y="191.50"></text></g><g><title>finish_ongoing_codegen (98,696,678 samples, 6.72%)</title><rect x="92.6149%" y="165" width="6.7203%" height="15" fill="rgb(247,173,49)"/><text x="92.8649%" y="175.50">finish_on..</text></g><g><title>link_crate (3,446,236 samples, 0.23%)</title><rect x="99.3351%" y="165" width="0.2347%" height="15" fill="rgb(224,114,35)"/><text x="99.5851%" y="175.50"></text></g><g><title>link_binary (3,234,184 samples, 0.22%)</title><rect x="99.3495%" y="149" width="0.2202%" height="15" fill="rgb(245,159,27)"/><text x="99.5995%" y="159.50"></text></g><g><title>link_rlib (2,537,476 samples, 0.17%)</title><rect x="99.3970%" y="133" width="0.1728%" height="15" fill="rgb(245,172,44)"/><text x="99.6470%" y="143.50"></text></g><g><title>link (102,168,985 samples, 6.96%)</title><rect x="92.6138%" y="181" width="6.9567%" height="15" fill="rgb(236,23,11)"/><text x="92.8638%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (3,937,761 samples, 0.27%)</title><rect x="99.6623%" y="181" width="0.2681%" height="15" fill="rgb(205,117,38)"/><text x="99.9123%" y="191.50"></text></g><g><title>all (1,468,645,669 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,468,645,669 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>