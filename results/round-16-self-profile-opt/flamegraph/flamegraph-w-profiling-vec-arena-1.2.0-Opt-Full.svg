<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,755,853 samples, 5.92%)</title><rect x="0.8282%" y="213" width="5.9248%" height="15" fill="rgb(227,0,7)"/><text x="1.0782%" y="223.50">LLVM_pas..</text></g><g><title>codegen_generate_lto_work (120,511 samples, 0.12%)</title><rect x="6.6289%" y="197" width="0.1240%" height="15" fill="rgb(217,0,24)"/><text x="6.8789%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (107,181 samples, 0.11%)</title><rect x="6.6426%" y="181" width="0.1103%" height="15" fill="rgb(221,193,54)"/><text x="6.8926%" y="191.50"></text></g><g><title>param_env (264,992 samples, 0.27%)</title><rect x="14.2287%" y="133" width="0.2728%" height="15" fill="rgb(248,212,6)"/><text x="14.4787%" y="143.50"></text></g><g><title>item_attrs (211,512 samples, 0.22%)</title><rect x="14.8575%" y="101" width="0.2177%" height="15" fill="rgb(208,68,35)"/><text x="15.1075%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (204,512 samples, 0.21%)</title><rect x="14.8647%" y="85" width="0.2105%" height="15" fill="rgb(232,128,0)"/><text x="15.1147%" y="95.50"></text></g><g><title>codegen_fn_attrs (291,764 samples, 0.30%)</title><rect x="14.7851%" y="117" width="0.3003%" height="15" fill="rgb(207,160,47)"/><text x="15.0351%" y="127.50"></text></g><g><title>adt_drop_tys (135,331 samples, 0.14%)</title><rect x="16.7090%" y="85" width="0.1393%" height="15" fill="rgb(228,23,34)"/><text x="16.9590%" y="95.50"></text></g><g><title>needs_drop_raw (707,389 samples, 0.73%)</title><rect x="16.6415%" y="101" width="0.7282%" height="15" fill="rgb(218,30,26)"/><text x="16.8915%" y="111.50"></text></g><g><title>is_copy_raw (506,507 samples, 0.52%)</title><rect x="16.8483%" y="85" width="0.5214%" height="15" fill="rgb(220,122,19)"/><text x="17.0983%" y="95.50"></text></g><g><title>evaluate_obligation (431,785 samples, 0.44%)</title><rect x="16.9252%" y="69" width="0.4445%" height="15" fill="rgb(250,228,42)"/><text x="17.1752%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (248,283 samples, 0.26%)</title><rect x="17.5470%" y="85" width="0.2556%" height="15" fill="rgb(240,193,28)"/><text x="17.7970%" y="95.50"></text></g><g><title>resolve_instance (601,499 samples, 0.62%)</title><rect x="17.3696%" y="101" width="0.6192%" height="15" fill="rgb(216,20,37)"/><text x="17.6196%" y="111.50"></text></g><g><title>thir_body (546,492 samples, 0.56%)</title><rect x="18.0034%" y="101" width="0.5625%" height="15" fill="rgb(206,188,39)"/><text x="18.2534%" y="111.50"></text></g><g><title>mir_const (4,749,571 samples, 4.89%)</title><rect x="13.6890%" y="149" width="4.8890%" height="15" fill="rgb(217,207,13)"/><text x="13.9390%" y="159.50">mir_co..</text></g><g><title>unsafety_check_result (3,960,296 samples, 4.08%)</title><rect x="14.5015%" y="133" width="4.0766%" height="15" fill="rgb(231,73,38)"/><text x="14.7515%" y="143.50">unsa..</text></g><g><title>mir_built (3,392,977 samples, 3.49%)</title><rect x="15.0854%" y="117" width="3.4926%" height="15" fill="rgb(225,20,46)"/><text x="15.3354%" y="127.50">mir..</text></g><g><title>mir_promoted (5,287,118 samples, 5.44%)</title><rect x="13.1648%" y="165" width="5.4423%" height="15" fill="rgb(210,31,41)"/><text x="13.4148%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (154,653 samples, 0.16%)</title><rect x="18.6071%" y="165" width="0.1592%" height="15" fill="rgb(221,200,47)"/><text x="18.8571%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (437,465 samples, 0.45%)</title><rect x="18.7663%" y="165" width="0.4503%" height="15" fill="rgb(226,26,5)"/><text x="19.0163%" y="175.50"></text></g><g><title>normalize_projection_ty (295,644 samples, 0.30%)</title><rect x="18.9123%" y="149" width="0.3043%" height="15" fill="rgb(249,33,26)"/><text x="19.1623%" y="159.50"></text></g><g><title>type_op_normalize_ty (211,351 samples, 0.22%)</title><rect x="19.2253%" y="165" width="0.2176%" height="15" fill="rgb(235,183,28)"/><text x="19.4753%" y="175.50"></text></g><g><title>normalize_projection_ty (138,950 samples, 0.14%)</title><rect x="19.2998%" y="149" width="0.1430%" height="15" fill="rgb(221,5,38)"/><text x="19.5498%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,129,661 samples, 1.16%)</title><rect x="19.4429%" y="165" width="1.1628%" height="15" fill="rgb(247,18,42)"/><text x="19.6929%" y="175.50"></text></g><g><title>MIR_borrow_checking (13,094,994 samples, 13.48%)</title><rect x="7.1277%" y="197" width="13.4794%" height="15" fill="rgb(241,131,45)"/><text x="7.3777%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,029,143 samples, 13.41%)</title><rect x="7.1955%" y="181" width="13.4116%" height="15" fill="rgb(249,31,29)"/><text x="7.4455%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (230,342 samples, 0.24%)</title><rect x="20.6257%" y="197" width="0.2371%" height="15" fill="rgb(225,111,53)"/><text x="20.8757%" y="207.50"></text></g><g><title>associated_item (100,921 samples, 0.10%)</title><rect x="21.3513%" y="133" width="0.1039%" height="15" fill="rgb(238,160,17)"/><text x="21.6013%" y="143.50"></text></g><g><title>get_lang_items (107,231 samples, 0.11%)</title><rect x="21.5672%" y="117" width="0.1104%" height="15" fill="rgb(214,148,48)"/><text x="21.8172%" y="127.50"></text></g><g><title>item_attrs (116,971 samples, 0.12%)</title><rect x="21.6775%" y="117" width="0.1204%" height="15" fill="rgb(232,36,49)"/><text x="21.9275%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (104,571 samples, 0.11%)</title><rect x="21.6903%" y="101" width="0.1076%" height="15" fill="rgb(209,103,24)"/><text x="21.9403%" y="111.50"></text></g><g><title>codegen_fn_attrs (414,115 samples, 0.43%)</title><rect x="21.4552%" y="133" width="0.4263%" height="15" fill="rgb(229,88,8)"/><text x="21.7052%" y="143.50"></text></g><g><title>codegen_fn_attrs (668,676 samples, 0.69%)</title><rect x="21.2017%" y="165" width="0.6883%" height="15" fill="rgb(213,181,19)"/><text x="21.4517%" y="175.50"></text></g><g><title>should_inherit_track_caller (582,956 samples, 0.60%)</title><rect x="21.2900%" y="149" width="0.6001%" height="15" fill="rgb(254,191,54)"/><text x="21.5400%" y="159.50"></text></g><g><title>check_mod_attrs (961,151 samples, 0.99%)</title><rect x="20.9011%" y="181" width="0.9894%" height="15" fill="rgb(241,83,37)"/><text x="21.1511%" y="191.50"></text></g><g><title>check_mod_const_bodies (156,931 samples, 0.16%)</title><rect x="21.8905%" y="181" width="0.1615%" height="15" fill="rgb(233,36,39)"/><text x="22.1405%" y="191.50"></text></g><g><title>lookup_deprecation_entry (221,692 samples, 0.23%)</title><rect x="22.4041%" y="165" width="0.2282%" height="15" fill="rgb(226,3,54)"/><text x="22.6541%" y="175.50"></text></g><g><title>stability_index (137,552 samples, 0.14%)</title><rect x="22.4907%" y="149" width="0.1416%" height="15" fill="rgb(245,192,40)"/><text x="22.7407%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (600,347 samples, 0.62%)</title><rect x="22.1461%" y="181" width="0.6180%" height="15" fill="rgb(238,167,29)"/><text x="22.3961%" y="191.50"></text></g><g><title>misc_checking_1 (1,909,391 samples, 1.97%)</title><rect x="20.8634%" y="197" width="1.9654%" height="15" fill="rgb(232,182,51)"/><text x="21.1134%" y="207.50">m..</text></g><g><title>liveness_and_intrinsic_checking (278,543 samples, 0.29%)</title><rect x="22.8307%" y="181" width="0.2867%" height="15" fill="rgb(231,60,39)"/><text x="23.0807%" y="191.50"></text></g><g><title>check_mod_liveness (230,563 samples, 0.24%)</title><rect x="22.8801%" y="165" width="0.2373%" height="15" fill="rgb(208,69,12)"/><text x="23.1301%" y="175.50"></text></g><g><title>misc_checking_2 (621,987 samples, 0.64%)</title><rect x="22.8289%" y="197" width="0.6402%" height="15" fill="rgb(235,93,37)"/><text x="23.0789%" y="207.50"></text></g><g><title>match_checking (341,703 samples, 0.35%)</title><rect x="23.1174%" y="181" width="0.3517%" height="15" fill="rgb(213,116,39)"/><text x="23.3674%" y="191.50"></text></g><g><title>check_match (324,153 samples, 0.33%)</title><rect x="23.1355%" y="165" width="0.3337%" height="15" fill="rgb(222,207,29)"/><text x="23.3855%" y="175.50"></text></g><g><title>check_private_in_public (110,051 samples, 0.11%)</title><rect x="23.4787%" y="181" width="0.1133%" height="15" fill="rgb(206,96,30)"/><text x="23.7287%" y="191.50"></text></g><g><title>death_checking (209,332 samples, 0.22%)</title><rect x="23.5920%" y="181" width="0.2155%" height="15" fill="rgb(218,138,4)"/><text x="23.8420%" y="191.50"></text></g><g><title>crate_lints (855,640 samples, 0.88%)</title><rect x="23.8091%" y="165" width="0.8808%" height="15" fill="rgb(250,191,14)"/><text x="24.0591%" y="175.50"></text></g><g><title>type_of (429,196 samples, 0.44%)</title><rect x="24.2480%" y="149" width="0.4418%" height="15" fill="rgb(239,60,40)"/><text x="24.4980%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (338,634 samples, 0.35%)</title><rect x="24.3413%" y="133" width="0.3486%" height="15" fill="rgb(206,27,48)"/><text x="24.5913%" y="143.50"></text></g><g><title>lint_checking (1,039,962 samples, 1.07%)</title><rect x="23.8075%" y="181" width="1.0705%" height="15" fill="rgb(225,35,8)"/><text x="24.0575%" y="191.50"></text></g><g><title>module_lints (182,762 samples, 0.19%)</title><rect x="24.6898%" y="165" width="0.1881%" height="15" fill="rgb(250,213,24)"/><text x="24.9398%" y="175.50"></text></g><g><title>lint_mod (180,922 samples, 0.19%)</title><rect x="24.6917%" y="149" width="0.1862%" height="15" fill="rgb(247,123,22)"/><text x="24.9417%" y="159.50"></text></g><g><title>privacy_access_levels (157,231 samples, 0.16%)</title><rect x="24.8780%" y="181" width="0.1618%" height="15" fill="rgb(231,138,38)"/><text x="25.1280%" y="191.50"></text></g><g><title>privacy_checking_modules (407,964 samples, 0.42%)</title><rect x="25.0398%" y="181" width="0.4199%" height="15" fill="rgb(231,145,46)"/><text x="25.2898%" y="191.50"></text></g><g><title>check_mod_privacy (406,604 samples, 0.42%)</title><rect x="25.0412%" y="165" width="0.4185%" height="15" fill="rgb(251,118,11)"/><text x="25.2912%" y="175.50"></text></g><g><title>misc_checking_3 (1,945,831 samples, 2.00%)</title><rect x="23.4691%" y="197" width="2.0030%" height="15" fill="rgb(217,147,25)"/><text x="23.7191%" y="207.50">m..</text></g><g><title>impl_parent (794,805 samples, 0.82%)</title><rect x="27.3067%" y="133" width="0.8181%" height="15" fill="rgb(247,81,37)"/><text x="27.5567%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (465,238 samples, 0.48%)</title><rect x="27.6460%" y="117" width="0.4789%" height="15" fill="rgb(209,12,38)"/><text x="27.8960%" y="127.50"></text></g><g><title>impl_trait_ref (2,285,839 samples, 2.35%)</title><rect x="28.1261%" y="133" width="2.3529%" height="15" fill="rgb(227,1,9)"/><text x="28.3761%" y="143.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,963,845 samples, 2.02%)</title><rect x="28.4576%" y="117" width="2.0215%" height="15" fill="rgb(248,47,43)"/><text x="28.7076%" y="127.50">m..</text></g><g><title>trait_impls_of (290,024 samples, 0.30%)</title><rect x="30.6472%" y="133" width="0.2985%" height="15" fill="rgb(221,10,30)"/><text x="30.8972%" y="143.50"></text></g><g><title>coherent_trait (5,265,259 samples, 5.42%)</title><rect x="25.5409%" y="165" width="5.4198%" height="15" fill="rgb(210,229,1)"/><text x="25.7909%" y="175.50">coheren..</text></g><g><title>specialization_graph_of (5,247,099 samples, 5.40%)</title><rect x="25.5596%" y="149" width="5.4011%" height="15" fill="rgb(222,148,37)"/><text x="25.8096%" y="159.50">special..</text></g><g><title>coherence_checking (5,351,579 samples, 5.51%)</title><rect x="25.5210%" y="181" width="5.5087%" height="15" fill="rgb(234,67,33)"/><text x="25.7710%" y="191.50">coheren..</text></g><g><title>associated_item (437,243 samples, 0.45%)</title><rect x="42.2497%" y="117" width="0.4501%" height="15" fill="rgb(247,98,35)"/><text x="42.4997%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (358,933 samples, 0.37%)</title><rect x="42.3303%" y="101" width="0.3695%" height="15" fill="rgb(247,138,52)"/><text x="42.5803%" y="111.50"></text></g><g><title>associated_items (609,917 samples, 0.63%)</title><rect x="42.0985%" y="133" width="0.6278%" height="15" fill="rgb(213,79,30)"/><text x="42.3485%" y="143.50"></text></g><g><title>adt_def (211,263 samples, 0.22%)</title><rect x="43.0369%" y="85" width="0.2175%" height="15" fill="rgb(246,177,23)"/><text x="43.2869%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (210,943 samples, 0.22%)</title><rect x="43.0372%" y="69" width="0.2171%" height="15" fill="rgb(230,62,27)"/><text x="43.2872%" y="79.50"></text></g><g><title>item_attrs (206,293 samples, 0.21%)</title><rect x="43.0420%" y="53" width="0.2123%" height="15" fill="rgb(216,154,8)"/><text x="43.2920%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (205,883 samples, 0.21%)</title><rect x="43.0424%" y="37" width="0.2119%" height="15" fill="rgb(244,35,45)"/><text x="43.2924%" y="47.50"></text></g><g><title>adt_dtorck_constraint (296,254 samples, 0.30%)</title><rect x="43.0287%" y="101" width="0.3050%" height="15" fill="rgb(251,115,12)"/><text x="43.2787%" y="111.50"></text></g><g><title>adt_dtorck_constraint (363,665 samples, 0.37%)</title><rect x="42.9789%" y="117" width="0.3743%" height="15" fill="rgb(240,54,50)"/><text x="43.2289%" y="127.50"></text></g><g><title>dropck_outlives (558,956 samples, 0.58%)</title><rect x="42.7844%" y="133" width="0.5754%" height="15" fill="rgb(233,84,52)"/><text x="43.0344%" y="143.50"></text></g><g><title>predicates_of (122,881 samples, 0.13%)</title><rect x="44.3627%" y="117" width="0.1265%" height="15" fill="rgb(207,117,47)"/><text x="44.6127%" y="127.50"></text></g><g><title>specializes (99,212 samples, 0.10%)</title><rect x="44.4892%" y="117" width="0.1021%" height="15" fill="rgb(249,43,39)"/><text x="44.7392%" y="127.50"></text></g><g><title>evaluate_obligation (1,471,973 samples, 1.52%)</title><rect x="43.3598%" y="133" width="1.5152%" height="15" fill="rgb(209,38,44)"/><text x="43.6098%" y="143.50"></text></g><g><title>trait_impls_of (269,163 samples, 0.28%)</title><rect x="44.5979%" y="117" width="0.2771%" height="15" fill="rgb(236,212,23)"/><text x="44.8479%" y="127.50"></text></g><g><title>fn_sig (107,431 samples, 0.11%)</title><rect x="44.8958%" y="133" width="0.1106%" height="15" fill="rgb(242,79,21)"/><text x="45.1458%" y="143.50"></text></g><g><title>associated_item (147,762 samples, 0.15%)</title><rect x="45.1494%" y="101" width="0.1521%" height="15" fill="rgb(211,96,35)"/><text x="45.3994%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (132,092 samples, 0.14%)</title><rect x="45.1656%" y="85" width="0.1360%" height="15" fill="rgb(253,215,40)"/><text x="45.4156%" y="95.50"></text></g><g><title>impl_item_implementor_ids (217,952 samples, 0.22%)</title><rect x="45.0883%" y="133" width="0.2244%" height="15" fill="rgb(211,81,21)"/><text x="45.3383%" y="143.50"></text></g><g><title>associated_items (201,092 samples, 0.21%)</title><rect x="45.1057%" y="117" width="0.2070%" height="15" fill="rgb(208,190,38)"/><text x="45.3557%" y="127.50"></text></g><g><title>evaluate_obligation (241,372 samples, 0.25%)</title><rect x="45.7149%" y="117" width="0.2485%" height="15" fill="rgb(235,213,38)"/><text x="45.9649%" y="127.50"></text></g><g><title>method_autoderef_steps (435,673 samples, 0.45%)</title><rect x="45.5266%" y="133" width="0.4485%" height="15" fill="rgb(237,122,38)"/><text x="45.7766%" y="143.50"></text></g><g><title>predicates_of (467,874 samples, 0.48%)</title><rect x="46.0125%" y="133" width="0.4816%" height="15" fill="rgb(244,218,35)"/><text x="46.2625%" y="143.50"></text></g><g><title>predicates_defined_on (149,882 samples, 0.15%)</title><rect x="46.3398%" y="117" width="0.1543%" height="15" fill="rgb(240,68,47)"/><text x="46.5898%" y="127.50"></text></g><g><title>item_bodies_checking (15,078,426 samples, 15.52%)</title><rect x="31.0844%" y="181" width="15.5211%" height="15" fill="rgb(210,16,53)"/><text x="31.3344%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (15,076,176 samples, 15.52%)</title><rect x="31.0867%" y="165" width="15.5187%" height="15" fill="rgb(235,124,12)"/><text x="31.3367%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (15,025,586 samples, 15.47%)</title><rect x="31.1388%" y="149" width="15.4667%" height="15" fill="rgb(224,169,11)"/><text x="31.3888%" y="159.50">typeck</text></g><g><title>adt_destructor (175,512 samples, 0.18%)</title><rect x="47.8393%" y="149" width="0.1807%" height="15" fill="rgb(250,166,2)"/><text x="48.0893%" y="159.50"></text></g><g><title>coherent_trait (169,932 samples, 0.17%)</title><rect x="47.8450%" y="133" width="0.1749%" height="15" fill="rgb(242,216,29)"/><text x="48.0950%" y="143.50"></text></g><g><title>specialization_graph_of (168,632 samples, 0.17%)</title><rect x="47.8464%" y="117" width="0.1736%" height="15" fill="rgb(230,116,27)"/><text x="48.0964%" y="127.50"></text></g><g><title>item_types_checking (1,505,337 samples, 1.55%)</title><rect x="46.6054%" y="181" width="1.5495%" height="15" fill="rgb(228,99,48)"/><text x="46.8554%" y="191.50"></text></g><g><title>check_mod_item_types (1,502,577 samples, 1.55%)</title><rect x="46.6083%" y="165" width="1.5467%" height="15" fill="rgb(253,11,6)"/><text x="46.8583%" y="175.50"></text></g><g><title>associated_items (112,331 samples, 0.12%)</title><rect x="48.7460%" y="133" width="0.1156%" height="15" fill="rgb(247,143,39)"/><text x="48.9960%" y="143.50"></text></g><g><title>late_bound_vars_map (165,412 samples, 0.17%)</title><rect x="48.8695%" y="133" width="0.1703%" height="15" fill="rgb(236,97,10)"/><text x="49.1195%" y="143.50"></text></g><g><title>resolve_lifetimes (149,772 samples, 0.15%)</title><rect x="48.8855%" y="117" width="0.1542%" height="15" fill="rgb(233,208,19)"/><text x="49.1355%" y="127.50"></text></g><g><title>fn_sig (555,436 samples, 0.57%)</title><rect x="48.5202%" y="149" width="0.5717%" height="15" fill="rgb(216,164,2)"/><text x="48.7702%" y="159.50"></text></g><g><title>is_late_bound_map (356,164 samples, 0.37%)</title><rect x="49.2671%" y="133" width="0.3666%" height="15" fill="rgb(220,129,5)"/><text x="49.5171%" y="143.50"></text></g><g><title>resolve_lifetimes (340,844 samples, 0.35%)</title><rect x="49.2829%" y="117" width="0.3508%" height="15" fill="rgb(242,17,10)"/><text x="49.5329%" y="127.50"></text></g><g><title>lint_levels (163,832 samples, 0.17%)</title><rect x="49.4651%" y="101" width="0.1686%" height="15" fill="rgb(242,107,0)"/><text x="49.7151%" y="111.50"></text></g><g><title>named_region_map (100,320 samples, 0.10%)</title><rect x="49.6338%" y="133" width="0.1033%" height="15" fill="rgb(251,28,31)"/><text x="49.8838%" y="143.50"></text></g><g><title>generics_of (649,905 samples, 0.67%)</title><rect x="49.0920%" y="149" width="0.6690%" height="15" fill="rgb(233,223,10)"/><text x="49.3420%" y="159.50"></text></g><g><title>explicit_predicates_of (561,339 samples, 0.58%)</title><rect x="50.0336%" y="117" width="0.5778%" height="15" fill="rgb(215,21,27)"/><text x="50.2836%" y="127.50"></text></g><g><title>predicates_of (1,289,377 samples, 1.33%)</title><rect x="49.8597%" y="149" width="1.3272%" height="15" fill="rgb(232,23,21)"/><text x="50.1097%" y="159.50"></text></g><g><title>predicates_defined_on (1,226,647 samples, 1.26%)</title><rect x="49.9243%" y="133" width="1.2627%" height="15" fill="rgb(244,5,23)"/><text x="50.1743%" y="143.50"></text></g><g><title>inferred_outlives_of (559,116 samples, 0.58%)</title><rect x="50.6114%" y="117" width="0.5755%" height="15" fill="rgb(226,81,46)"/><text x="50.8614%" y="127.50"></text></g><g><title>inferred_outlives_crate (531,616 samples, 0.55%)</title><rect x="50.6397%" y="101" width="0.5472%" height="15" fill="rgb(247,70,30)"/><text x="50.8897%" y="111.50"></text></g><g><title>type_of (281,692 samples, 0.29%)</title><rect x="50.8970%" y="85" width="0.2900%" height="15" fill="rgb(212,68,19)"/><text x="51.1470%" y="95.50"></text></g><g><title>type_collecting (3,157,504 samples, 3.25%)</title><rect x="48.1565%" y="181" width="3.2502%" height="15" fill="rgb(240,187,13)"/><text x="48.4065%" y="191.50">typ..</text></g><g><title>collect_mod_item_types (3,146,984 samples, 3.24%)</title><rect x="48.1674%" y="165" width="3.2394%" height="15" fill="rgb(223,113,26)"/><text x="48.4174%" y="175.50">col..</text></g><g><title>type_of (213,524 samples, 0.22%)</title><rect x="51.1869%" y="149" width="0.2198%" height="15" fill="rgb(206,192,2)"/><text x="51.4369%" y="159.50"></text></g><g><title>evaluate_obligation (323,276 samples, 0.33%)</title><rect x="53.0907%" y="149" width="0.3328%" height="15" fill="rgb(241,108,4)"/><text x="53.3407%" y="159.50"></text></g><g><title>implied_outlives_bounds (199,341 samples, 0.21%)</title><rect x="53.4416%" y="149" width="0.2052%" height="15" fill="rgb(247,173,49)"/><text x="53.6916%" y="159.50"></text></g><g><title>param_env (243,901 samples, 0.25%)</title><rect x="53.6468%" y="149" width="0.2511%" height="15" fill="rgb(224,114,35)"/><text x="53.8968%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,543,867 samples, 2.62%)</title><rect x="51.5300%" y="165" width="2.6185%" height="15" fill="rgb(245,159,27)"/><text x="51.7800%" y="175.50">ch..</text></g><g><title>region_scope_tree (200,493 samples, 0.21%)</title><rect x="53.9422%" y="149" width="0.2064%" height="15" fill="rgb(245,172,44)"/><text x="54.1922%" y="159.50"></text></g><g><title>adt_def (110,891 samples, 0.11%)</title><rect x="55.1606%" y="133" width="0.1141%" height="15" fill="rgb(236,23,11)"/><text x="55.4106%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (108,521 samples, 0.11%)</title><rect x="55.1631%" y="117" width="0.1117%" height="15" fill="rgb(205,117,38)"/><text x="55.4131%" y="127.50"></text></g><g><title>adt_sized_constraint (172,001 samples, 0.18%)</title><rect x="55.1461%" y="149" width="0.1771%" height="15" fill="rgb(237,72,25)"/><text x="55.3961%" y="159.50"></text></g><g><title>implied_outlives_bounds (100,231 samples, 0.10%)</title><rect x="55.3751%" y="149" width="0.1032%" height="15" fill="rgb(244,70,9)"/><text x="55.6251%" y="159.50"></text></g><g><title>param_env (164,972 samples, 0.17%)</title><rect x="55.4783%" y="149" width="0.1698%" height="15" fill="rgb(217,125,39)"/><text x="55.7283%" y="159.50"></text></g><g><title>analysis (47,650,425 samples, 49.05%)</title><rect x="6.7530%" y="213" width="49.0492%" height="15" fill="rgb(235,36,10)"/><text x="7.0030%" y="223.50">analysis</text></g><g><title>type_check_crate (29,465,145 samples, 30.33%)</title><rect x="25.4721%" y="197" width="30.3301%" height="15" fill="rgb(251,123,47)"/><text x="25.7221%" y="207.50">type_check_crate</text></g><g><title>wf_checking (4,267,027 samples, 4.39%)</title><rect x="51.4099%" y="181" width="4.3923%" height="15" fill="rgb(221,13,13)"/><text x="51.6599%" y="191.50">wf_ch..</text></g><g><title>check_item_well_formed (1,606,439 samples, 1.65%)</title><rect x="54.1486%" y="165" width="1.6536%" height="15" fill="rgb(238,131,9)"/><text x="54.3986%" y="175.50"></text></g><g><title>codegen_module (207,022 samples, 0.21%)</title><rect x="56.2439%" y="197" width="0.2131%" height="15" fill="rgb(211,50,8)"/><text x="56.4939%" y="207.50"></text></g><g><title>codegen_crate (701,468 samples, 0.72%)</title><rect x="55.8149%" y="213" width="0.7221%" height="15" fill="rgb(245,182,24)"/><text x="56.0649%" y="223.50"></text></g><g><title>codegen_module_optimize (2,261,465 samples, 2.33%)</title><rect x="56.5369%" y="213" width="2.3279%" height="15" fill="rgb(242,14,37)"/><text x="56.7869%" y="223.50">c..</text></g><g><title>LLVM_module_optimize (406,364 samples, 0.42%)</title><rect x="58.4465%" y="197" width="0.4183%" height="15" fill="rgb(246,228,12)"/><text x="58.6965%" y="207.50"></text></g><g><title>LLVM_lto_optimize (221,743 samples, 0.23%)</title><rect x="59.2711%" y="197" width="0.2283%" height="15" fill="rgb(213,55,15)"/><text x="59.5211%" y="207.50"></text></g><g><title>LLVM_module_codegen (2,388,786 samples, 2.46%)</title><rect x="59.4993%" y="197" width="2.4589%" height="15" fill="rgb(209,9,3)"/><text x="59.7493%" y="207.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,353,676 samples, 2.42%)</title><rect x="59.5355%" y="181" width="2.4228%" height="15" fill="rgb(230,59,30)"/><text x="59.7855%" y="191.50">LL..</text></g><g><title>codegen_module_perform_lto (3,049,503 samples, 3.14%)</title><rect x="58.8648%" y="213" width="3.1390%" height="15" fill="rgb(209,121,21)"/><text x="59.1148%" y="223.50">cod..</text></g><g><title>AST_validation (177,522 samples, 0.18%)</title><rect x="62.2363%" y="197" width="0.1827%" height="15" fill="rgb(220,109,13)"/><text x="62.4863%" y="207.50"></text></g><g><title>crate_injection (97,632 samples, 0.10%)</title><rect x="62.4958%" y="197" width="0.1005%" height="15" fill="rgb(232,18,1)"/><text x="62.7458%" y="207.50"></text></g><g><title>metadata_load_macro (375,596 samples, 0.39%)</title><rect x="73.5185%" y="165" width="0.3866%" height="15" fill="rgb(215,41,42)"/><text x="73.7685%" y="175.50"></text></g><g><title>macro_expand_crate (11,222,104 samples, 11.55%)</title><rect x="62.5963%" y="197" width="11.5515%" height="15" fill="rgb(224,123,36)"/><text x="62.8463%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (11,195,833 samples, 11.52%)</title><rect x="62.6233%" y="181" width="11.5245%" height="15" fill="rgb(240,125,3)"/><text x="62.8733%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (235,772 samples, 0.24%)</title><rect x="73.9051%" y="165" width="0.2427%" height="15" fill="rgb(205,98,50)"/><text x="74.1551%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (258,133 samples, 0.27%)</title><rect x="74.1538%" y="197" width="0.2657%" height="15" fill="rgb(205,185,37)"/><text x="74.4038%" y="207.50"></text></g><g><title>late_resolve_crate (2,534,958 samples, 2.61%)</title><rect x="74.5821%" y="181" width="2.6094%" height="15" fill="rgb(238,207,15)"/><text x="74.8321%" y="191.50">la..</text></g><g><title>configure_and_expand (14,888,525 samples, 15.33%)</title><rect x="62.0038%" y="213" width="15.3256%" height="15" fill="rgb(213,199,42)"/><text x="62.2538%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,826,921 samples, 2.91%)</title><rect x="74.4195%" y="197" width="2.9099%" height="15" fill="rgb(235,201,11)"/><text x="74.6695%" y="207.50">re..</text></g><g><title>drop_ast (225,783 samples, 0.23%)</title><rect x="77.3294%" y="213" width="0.2324%" height="15" fill="rgb(207,46,11)"/><text x="77.5794%" y="223.50"></text></g><g><title>early_lint_checks (435,234 samples, 0.45%)</title><rect x="77.5761%" y="213" width="0.4480%" height="15" fill="rgb(241,35,35)"/><text x="77.8261%" y="223.50"></text></g><g><title>free_global_ctxt (2,390,126 samples, 2.46%)</title><rect x="78.0241%" y="213" width="2.4603%" height="15" fill="rgb(243,32,47)"/><text x="78.2741%" y="223.50">fr..</text></g><g><title>exported_symbols (114,021 samples, 0.12%)</title><rect x="81.6649%" y="197" width="0.1174%" height="15" fill="rgb(247,202,23)"/><text x="81.9149%" y="207.50"></text></g><g><title>reachable_non_generics (99,241 samples, 0.10%)</title><rect x="81.6801%" y="181" width="0.1022%" height="15" fill="rgb(219,102,11)"/><text x="81.9301%" y="191.50"></text></g><g><title>is_sized_raw (129,251 samples, 0.13%)</title><rect x="84.0524%" y="165" width="0.1330%" height="15" fill="rgb(243,110,44)"/><text x="84.3024%" y="175.50"></text></g><g><title>evaluate_obligation (113,921 samples, 0.12%)</title><rect x="84.0682%" y="149" width="0.1173%" height="15" fill="rgb(222,74,54)"/><text x="84.3182%" y="159.50"></text></g><g><title>layout_of (126,612 samples, 0.13%)</title><rect x="84.3035%" y="149" width="0.1303%" height="15" fill="rgb(216,99,12)"/><text x="84.5535%" y="159.50"></text></g><g><title>layout_of (257,743 samples, 0.27%)</title><rect x="84.1855%" y="165" width="0.2653%" height="15" fill="rgb(226,22,26)"/><text x="84.4355%" y="175.50"></text></g><g><title>layout_of (709,870 samples, 0.73%)</title><rect x="83.7533%" y="181" width="0.7307%" height="15" fill="rgb(217,163,10)"/><text x="84.0033%" y="191.50"></text></g><g><title>needs_drop_raw (199,233 samples, 0.21%)</title><rect x="86.4741%" y="165" width="0.2051%" height="15" fill="rgb(213,25,53)"/><text x="86.7241%" y="175.50"></text></g><g><title>is_copy_raw (174,553 samples, 0.18%)</title><rect x="86.4995%" y="149" width="0.1797%" height="15" fill="rgb(252,105,26)"/><text x="86.7495%" y="159.50"></text></g><g><title>evaluate_obligation (137,312 samples, 0.14%)</title><rect x="86.5378%" y="133" width="0.1413%" height="15" fill="rgb(220,39,43)"/><text x="86.7878%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,171,981 samples, 2.24%)</title><rect x="84.4840%" y="181" width="2.2357%" height="15" fill="rgb(229,68,48)"/><text x="84.7340%" y="191.50">m..</text></g><g><title>optimized_mir (4,742,230 samples, 4.88%)</title><rect x="81.8540%" y="197" width="4.8814%" height="15" fill="rgb(252,8,32)"/><text x="82.1040%" y="207.50">optimi..</text></g><g><title>promoted_mir (112,472 samples, 0.12%)</title><rect x="86.7354%" y="197" width="0.1158%" height="15" fill="rgb(223,20,43)"/><text x="86.9854%" y="207.50"></text></g><g><title>generate_crate_metadata (6,208,868 samples, 6.39%)</title><rect x="80.4844%" y="213" width="6.3911%" height="15" fill="rgb(229,81,49)"/><text x="80.7344%" y="223.50">generate..</text></g><g><title>hir_lowering (3,239,726 samples, 3.33%)</title><rect x="86.8755%" y="213" width="3.3348%" height="15" fill="rgb(236,28,36)"/><text x="87.1255%" y="223.50">hir..</text></g><g><title>finish_ongoing_codegen (2,999,323 samples, 3.09%)</title><rect x="90.2263%" y="197" width="3.0874%" height="15" fill="rgb(249,185,26)"/><text x="90.4763%" y="207.50">fin..</text></g><g><title>link_crate (762,608 samples, 0.78%)</title><rect x="93.3137%" y="197" width="0.7850%" height="15" fill="rgb(249,174,33)"/><text x="93.5637%" y="207.50"></text></g><g><title>link_binary (744,358 samples, 0.77%)</title><rect x="93.3325%" y="181" width="0.7662%" height="15" fill="rgb(233,201,37)"/><text x="93.5825%" y="191.50"></text></g><g><title>link_rlib (507,426 samples, 0.52%)</title><rect x="93.5764%" y="165" width="0.5223%" height="15" fill="rgb(221,78,26)"/><text x="93.8264%" y="175.50"></text></g><g><title>link (3,785,241 samples, 3.90%)</title><rect x="90.2103%" y="213" width="3.8964%" height="15" fill="rgb(250,127,30)"/><text x="90.4603%" y="223.50">link</text></g><g><title>parse_crate (4,291,297 samples, 4.42%)</title><rect x="94.1067%" y="213" width="4.4173%" height="15" fill="rgb(230,49,44)"/><text x="94.3567%" y="223.50">parse..</text></g><g><title>prepare_outputs (371,364 samples, 0.38%)</title><rect x="98.5354%" y="213" width="0.3823%" height="15" fill="rgb(229,67,23)"/><text x="98.7854%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (560,337 samples, 0.58%)</title><rect x="98.9177%" y="213" width="0.5768%" height="15" fill="rgb(249,83,47)"/><text x="99.1677%" y="223.50"></text></g><g><title>setup_global_ctxt (146,711 samples, 0.15%)</title><rect x="99.4955%" y="213" width="0.1510%" height="15" fill="rgb(215,43,3)"/><text x="99.7455%" y="223.50"></text></g><g><title>all (97,148,199 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (97,148,199 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (343,373 samples, 0.35%)</title><rect x="99.6465%" y="213" width="0.3535%" height="15" fill="rgb(233,0,4)"/><text x="99.8965%" y="223.50"></text></g></svg></svg>