<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,085,616 samples, 15.26%)</title><rect x="0.7941%" y="245" width="15.2612%" height="15" fill="rgb(227,0,7)"/><text x="1.0441%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (173,692 samples, 0.19%)</title><rect x="15.8671%" y="229" width="0.1882%" height="15" fill="rgb(217,0,24)"/><text x="16.1171%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (158,182 samples, 0.17%)</title><rect x="15.8839%" y="213" width="0.1714%" height="15" fill="rgb(221,193,54)"/><text x="16.1339%" y="223.50"></text></g><g><title>explicit_predicates_of (237,422 samples, 0.26%)</title><rect x="20.2017%" y="37" width="0.2572%" height="15" fill="rgb(248,212,6)"/><text x="20.4517%" y="47.50"></text></g><g><title>is_copy_raw (303,903 samples, 0.33%)</title><rect x="20.1304%" y="101" width="0.3293%" height="15" fill="rgb(208,68,35)"/><text x="20.3804%" y="111.50"></text></g><g><title>evaluate_obligation (298,373 samples, 0.32%)</title><rect x="20.1364%" y="85" width="0.3233%" height="15" fill="rgb(232,128,0)"/><text x="20.3864%" y="95.50"></text></g><g><title>predicates_of (243,453 samples, 0.26%)</title><rect x="20.1959%" y="69" width="0.2638%" height="15" fill="rgb(207,160,47)"/><text x="20.4459%" y="79.50"></text></g><g><title>predicates_defined_on (240,463 samples, 0.26%)</title><rect x="20.1992%" y="53" width="0.2605%" height="15" fill="rgb(228,23,34)"/><text x="20.4492%" y="63.50"></text></g><g><title>adt_drop_tys (334,194 samples, 0.36%)</title><rect x="20.1237%" y="117" width="0.3621%" height="15" fill="rgb(218,30,26)"/><text x="20.3737%" y="127.50"></text></g><g><title>is_copy_raw (220,702 samples, 0.24%)</title><rect x="20.4857%" y="117" width="0.2391%" height="15" fill="rgb(220,122,19)"/><text x="20.7357%" y="127.50"></text></g><g><title>evaluate_obligation (190,321 samples, 0.21%)</title><rect x="20.5187%" y="101" width="0.2062%" height="15" fill="rgb(250,228,42)"/><text x="20.7687%" y="111.50"></text></g><g><title>needs_drop_raw (588,686 samples, 0.64%)</title><rect x="20.0937%" y="133" width="0.6378%" height="15" fill="rgb(240,193,28)"/><text x="20.3437%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (116,171 samples, 0.13%)</title><rect x="20.7978%" y="117" width="0.1259%" height="15" fill="rgb(216,20,37)"/><text x="21.0478%" y="127.50"></text></g><g><title>resolve_instance (253,591 samples, 0.27%)</title><rect x="20.7316%" y="133" width="0.2748%" height="15" fill="rgb(206,188,39)"/><text x="20.9816%" y="143.50"></text></g><g><title>thir_body (208,722 samples, 0.23%)</title><rect x="21.0153%" y="133" width="0.2261%" height="15" fill="rgb(217,207,13)"/><text x="21.2653%" y="143.50"></text></g><g><title>mir_const (2,081,629 samples, 2.26%)</title><rect x="19.0108%" y="181" width="2.2554%" height="15" fill="rgb(231,73,38)"/><text x="19.2608%" y="191.50">m..</text></g><g><title>unsafety_check_result (1,753,418 samples, 1.90%)</title><rect x="19.3664%" y="165" width="1.8998%" height="15" fill="rgb(225,20,46)"/><text x="19.6164%" y="175.50">u..</text></g><g><title>mir_built (1,603,294 samples, 1.74%)</title><rect x="19.5290%" y="149" width="1.7371%" height="15" fill="rgb(210,31,41)"/><text x="19.7790%" y="159.50"></text></g><g><title>mir_promoted (2,308,521 samples, 2.50%)</title><rect x="18.7818%" y="197" width="2.5012%" height="15" fill="rgb(221,200,47)"/><text x="19.0318%" y="207.50">mi..</text></g><g><title>type_op_ascribe_user_type (95,891 samples, 0.10%)</title><rect x="21.2830%" y="197" width="0.1039%" height="15" fill="rgb(226,26,5)"/><text x="21.5330%" y="207.50"></text></g><g><title>type_op_prove_predicate (392,796 samples, 0.43%)</title><rect x="21.5422%" y="197" width="0.4256%" height="15" fill="rgb(249,33,26)"/><text x="21.7922%" y="207.50"></text></g><g><title>MIR_borrow_checking (5,255,718 samples, 5.69%)</title><rect x="16.2748%" y="229" width="5.6943%" height="15" fill="rgb(235,183,28)"/><text x="16.5248%" y="239.50">MIR_bor..</text></g><g><title>mir_borrowck (5,221,757 samples, 5.66%)</title><rect x="16.3116%" y="213" width="5.6576%" height="15" fill="rgb(221,5,38)"/><text x="16.5616%" y="223.50">mir_bor..</text></g><g><title>hir_module_items (173,482 samples, 0.19%)</title><rect x="21.9790%" y="229" width="0.1880%" height="15" fill="rgb(247,18,42)"/><text x="22.2290%" y="239.50"></text></g><g><title>codegen_fn_attrs (142,431 samples, 0.15%)</title><rect x="22.6817%" y="165" width="0.1543%" height="15" fill="rgb(241,131,45)"/><text x="22.9317%" y="175.50"></text></g><g><title>should_inherit_track_caller (267,202 samples, 0.29%)</title><rect x="22.5533%" y="181" width="0.2895%" height="15" fill="rgb(249,31,29)"/><text x="22.8033%" y="191.50"></text></g><g><title>codegen_fn_attrs (461,324 samples, 0.50%)</title><rect x="22.3809%" y="197" width="0.4998%" height="15" fill="rgb(225,111,53)"/><text x="22.6309%" y="207.50"></text></g><g><title>check_mod_attrs (636,927 samples, 0.69%)</title><rect x="22.1912%" y="213" width="0.6901%" height="15" fill="rgb(238,160,17)"/><text x="22.4412%" y="223.50"></text></g><g><title>lookup_deprecation_entry (105,971 samples, 0.11%)</title><rect x="23.1539%" y="197" width="0.1148%" height="15" fill="rgb(214,148,48)"/><text x="23.4039%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (283,003 samples, 0.31%)</title><rect x="23.0284%" y="213" width="0.3066%" height="15" fill="rgb(232,36,49)"/><text x="23.2784%" y="223.50"></text></g><g><title>misc_checking_1 (1,145,103 samples, 1.24%)</title><rect x="22.1674%" y="229" width="1.2407%" height="15" fill="rgb(209,103,24)"/><text x="22.4174%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (99,331 samples, 0.11%)</title><rect x="23.4094%" y="213" width="0.1076%" height="15" fill="rgb(229,88,8)"/><text x="23.6594%" y="223.50"></text></g><g><title>misc_checking_2 (238,753 samples, 0.26%)</title><rect x="23.4081%" y="229" width="0.2587%" height="15" fill="rgb(213,181,19)"/><text x="23.6581%" y="239.50"></text></g><g><title>match_checking (138,192 samples, 0.15%)</title><rect x="23.5171%" y="213" width="0.1497%" height="15" fill="rgb(254,191,54)"/><text x="23.7671%" y="223.50"></text></g><g><title>check_match (125,902 samples, 0.14%)</title><rect x="23.5304%" y="197" width="0.1364%" height="15" fill="rgb(241,83,37)"/><text x="23.7804%" y="207.50"></text></g><g><title>death_checking (278,594 samples, 0.30%)</title><rect x="23.7665%" y="213" width="0.3018%" height="15" fill="rgb(233,36,39)"/><text x="24.0165%" y="223.50"></text></g><g><title>item_attrs (132,542 samples, 0.14%)</title><rect x="23.9248%" y="197" width="0.1436%" height="15" fill="rgb(226,3,54)"/><text x="24.1748%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (130,992 samples, 0.14%)</title><rect x="23.9265%" y="181" width="0.1419%" height="15" fill="rgb(245,192,40)"/><text x="24.1765%" y="191.50"></text></g><g><title>param_env (108,021 samples, 0.12%)</title><rect x="24.3460%" y="181" width="0.1170%" height="15" fill="rgb(238,167,29)"/><text x="24.5960%" y="191.50"></text></g><g><title>crate_lints (691,878 samples, 0.75%)</title><rect x="24.0699%" y="197" width="0.7496%" height="15" fill="rgb(232,182,51)"/><text x="24.3199%" y="207.50"></text></g><g><title>type_of (329,064 samples, 0.36%)</title><rect x="24.4630%" y="181" width="0.3565%" height="15" fill="rgb(231,60,39)"/><text x="24.7130%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (248,583 samples, 0.27%)</title><rect x="24.5502%" y="165" width="0.2693%" height="15" fill="rgb(208,69,12)"/><text x="24.8002%" y="175.50"></text></g><g><title>lint_checking (773,178 samples, 0.84%)</title><rect x="24.0684%" y="213" width="0.8377%" height="15" fill="rgb(235,93,37)"/><text x="24.3184%" y="223.50"></text></g><g><title>privacy_access_levels (117,611 samples, 0.13%)</title><rect x="24.9061%" y="213" width="0.1274%" height="15" fill="rgb(213,116,39)"/><text x="25.1561%" y="223.50"></text></g><g><title>privacy_checking_modules (221,993 samples, 0.24%)</title><rect x="25.0335%" y="213" width="0.2405%" height="15" fill="rgb(222,207,29)"/><text x="25.2835%" y="223.50"></text></g><g><title>check_mod_privacy (219,903 samples, 0.24%)</title><rect x="25.0358%" y="197" width="0.2383%" height="15" fill="rgb(206,96,30)"/><text x="25.2858%" y="207.50"></text></g><g><title>misc_checking_3 (1,498,667 samples, 1.62%)</title><rect x="23.6668%" y="229" width="1.6237%" height="15" fill="rgb(218,138,4)"/><text x="23.9168%" y="239.50"></text></g><g><title>impl_parent (1,024,949 samples, 1.11%)</title><rect x="27.5277%" y="165" width="1.1105%" height="15" fill="rgb(250,191,14)"/><text x="27.7777%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (568,784 samples, 0.62%)</title><rect x="28.0219%" y="149" width="0.6163%" height="15" fill="rgb(239,60,40)"/><text x="28.2719%" y="159.50"></text></g><g><title>impl_trait_ref (2,187,698 samples, 2.37%)</title><rect x="28.6382%" y="165" width="2.3703%" height="15" fill="rgb(206,27,48)"/><text x="28.8882%" y="175.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,705,171 samples, 1.85%)</title><rect x="29.1610%" y="149" width="1.8475%" height="15" fill="rgb(225,35,8)"/><text x="29.4110%" y="159.50">m..</text></g><g><title>coherent_trait (5,651,453 samples, 6.12%)</title><rect x="25.3496%" y="197" width="6.1231%" height="15" fill="rgb(250,213,24)"/><text x="25.5996%" y="207.50">coherent..</text></g><g><title>specialization_graph_of (5,458,411 samples, 5.91%)</title><rect x="25.5587%" y="181" width="5.9140%" height="15" fill="rgb(247,123,22)"/><text x="25.8087%" y="191.50">speciali..</text></g><g><title>trait_impls_of (427,195 samples, 0.46%)</title><rect x="31.0098%" y="165" width="0.4628%" height="15" fill="rgb(231,138,38)"/><text x="31.2598%" y="175.50"></text></g><g><title>implementations_of_trait (108,900 samples, 0.12%)</title><rect x="31.3547%" y="149" width="0.1180%" height="15" fill="rgb(231,145,46)"/><text x="31.6047%" y="159.50"></text></g><g><title>coherence_checking (5,725,603 samples, 6.20%)</title><rect x="25.3298%" y="213" width="6.2034%" height="15" fill="rgb(251,118,11)"/><text x="25.5798%" y="223.50">coherenc..</text></g><g><title>associated_item (172,993 samples, 0.19%)</title><rect x="35.0569%" y="149" width="0.1874%" height="15" fill="rgb(217,147,25)"/><text x="35.3069%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (140,432 samples, 0.15%)</title><rect x="35.0922%" y="133" width="0.1522%" height="15" fill="rgb(247,81,37)"/><text x="35.3422%" y="143.50"></text></g><g><title>associated_items (237,454 samples, 0.26%)</title><rect x="34.9998%" y="165" width="0.2573%" height="15" fill="rgb(209,12,38)"/><text x="35.2498%" y="175.50"></text></g><g><title>dropck_outlives (140,001 samples, 0.15%)</title><rect x="35.2751%" y="165" width="0.1517%" height="15" fill="rgb(227,1,9)"/><text x="35.5251%" y="175.50"></text></g><g><title>evaluate_obligation (261,034 samples, 0.28%)</title><rect x="35.4268%" y="165" width="0.2828%" height="15" fill="rgb(248,47,43)"/><text x="35.6768%" y="175.50"></text></g><g><title>evaluate_obligation (118,273 samples, 0.13%)</title><rect x="35.9512%" y="149" width="0.1281%" height="15" fill="rgb(221,10,30)"/><text x="36.2012%" y="159.50"></text></g><g><title>method_autoderef_steps (230,484 samples, 0.25%)</title><rect x="35.8418%" y="165" width="0.2497%" height="15" fill="rgb(210,229,1)"/><text x="36.0918%" y="175.50"></text></g><g><title>item_bodies_checking (4,334,898 samples, 4.70%)</title><rect x="31.5628%" y="213" width="4.6967%" height="15" fill="rgb(222,148,37)"/><text x="31.8128%" y="223.50">item_..</text></g><g><title>typeck_item_bodies (4,333,168 samples, 4.69%)</title><rect x="31.5647%" y="197" width="4.6948%" height="15" fill="rgb(234,67,33)"/><text x="31.8147%" y="207.50">typec..</text></g><g><title>typeck (4,310,778 samples, 4.67%)</title><rect x="31.5890%" y="181" width="4.6705%" height="15" fill="rgb(247,98,35)"/><text x="31.8390%" y="191.50">typeck</text></g><g><title>item_types_checking (428,125 samples, 0.46%)</title><rect x="36.2595%" y="213" width="0.4639%" height="15" fill="rgb(247,138,52)"/><text x="36.5095%" y="223.50"></text></g><g><title>check_mod_item_types (425,585 samples, 0.46%)</title><rect x="36.2623%" y="197" width="0.4611%" height="15" fill="rgb(213,79,30)"/><text x="36.5123%" y="207.50"></text></g><g><title>fn_sig (288,343 samples, 0.31%)</title><rect x="37.0030%" y="181" width="0.3124%" height="15" fill="rgb(246,177,23)"/><text x="37.2530%" y="191.50"></text></g><g><title>named_region_map (222,321 samples, 0.24%)</title><rect x="37.4373%" y="165" width="0.2409%" height="15" fill="rgb(230,62,27)"/><text x="37.6873%" y="175.50"></text></g><g><title>resolve_lifetimes (204,271 samples, 0.22%)</title><rect x="37.4568%" y="149" width="0.2213%" height="15" fill="rgb(216,154,8)"/><text x="37.7068%" y="159.50"></text></g><g><title>lint_levels (95,851 samples, 0.10%)</title><rect x="37.5743%" y="133" width="0.1039%" height="15" fill="rgb(244,35,45)"/><text x="37.8243%" y="143.50"></text></g><g><title>generics_of (364,443 samples, 0.39%)</title><rect x="37.3154%" y="181" width="0.3949%" height="15" fill="rgb(251,115,12)"/><text x="37.5654%" y="191.50"></text></g><g><title>late_bound_vars_map (94,391 samples, 0.10%)</title><rect x="37.9562%" y="149" width="0.1023%" height="15" fill="rgb(240,54,50)"/><text x="38.2062%" y="159.50"></text></g><g><title>explicit_item_bounds (121,891 samples, 0.13%)</title><rect x="37.9277%" y="165" width="0.1321%" height="15" fill="rgb(233,84,52)"/><text x="38.1777%" y="175.50"></text></g><g><title>item_bounds (283,084 samples, 0.31%)</title><rect x="37.7851%" y="181" width="0.3067%" height="15" fill="rgb(207,117,47)"/><text x="38.0351%" y="191.50"></text></g><g><title>late_bound_vars_map (116,341 samples, 0.13%)</title><rect x="38.4155%" y="133" width="0.1261%" height="15" fill="rgb(249,43,39)"/><text x="38.6655%" y="143.50"></text></g><g><title>resolve_lifetimes (105,871 samples, 0.11%)</title><rect x="38.4268%" y="117" width="0.1147%" height="15" fill="rgb(209,38,44)"/><text x="38.6768%" y="127.50"></text></g><g><title>explicit_predicates_of (312,783 samples, 0.34%)</title><rect x="38.2369%" y="149" width="0.3389%" height="15" fill="rgb(236,212,23)"/><text x="38.4869%" y="159.50"></text></g><g><title>predicates_of (660,029 samples, 0.72%)</title><rect x="38.0918%" y="181" width="0.7151%" height="15" fill="rgb(242,79,21)"/><text x="38.3418%" y="191.50"></text></g><g><title>predicates_defined_on (611,428 samples, 0.66%)</title><rect x="38.1444%" y="165" width="0.6625%" height="15" fill="rgb(211,96,35)"/><text x="38.3944%" y="175.50"></text></g><g><title>inferred_outlives_of (213,342 samples, 0.23%)</title><rect x="38.5757%" y="149" width="0.2311%" height="15" fill="rgb(253,215,40)"/><text x="38.8257%" y="159.50"></text></g><g><title>inferred_outlives_crate (185,092 samples, 0.20%)</title><rect x="38.6063%" y="133" width="0.2005%" height="15" fill="rgb(211,81,21)"/><text x="38.8563%" y="143.50"></text></g><g><title>type_of (126,051 samples, 0.14%)</title><rect x="38.6703%" y="117" width="0.1366%" height="15" fill="rgb(208,190,38)"/><text x="38.9203%" y="127.50"></text></g><g><title>super_predicates_of (107,031 samples, 0.12%)</title><rect x="38.8069%" y="181" width="0.1160%" height="15" fill="rgb(235,213,38)"/><text x="39.0569%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (100,111 samples, 0.11%)</title><rect x="38.8144%" y="165" width="0.1085%" height="15" fill="rgb(237,122,38)"/><text x="39.0644%" y="175.50"></text></g><g><title>type_collecting (2,216,344 samples, 2.40%)</title><rect x="36.7255%" y="213" width="2.4013%" height="15" fill="rgb(244,218,35)"/><text x="36.9755%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (2,204,544 samples, 2.39%)</title><rect x="36.7382%" y="197" width="2.3885%" height="15" fill="rgb(240,68,47)"/><text x="36.9882%" y="207.50">co..</text></g><g><title>type_of (187,332 samples, 0.20%)</title><rect x="38.9238%" y="181" width="0.2030%" height="15" fill="rgb(210,16,53)"/><text x="39.1738%" y="191.50"></text></g><g><title>evaluate_obligation (169,933 samples, 0.18%)</title><rect x="39.8425%" y="181" width="0.1841%" height="15" fill="rgb(235,124,12)"/><text x="40.0925%" y="191.50"></text></g><g><title>check_impl_item_well_formed (989,450 samples, 1.07%)</title><rect x="39.2153%" y="197" width="1.0720%" height="15" fill="rgb(224,169,11)"/><text x="39.4653%" y="207.50"></text></g><g><title>evaluate_obligation (184,733 samples, 0.20%)</title><rect x="41.0373%" y="181" width="0.2002%" height="15" fill="rgb(250,166,2)"/><text x="41.2873%" y="191.50"></text></g><g><title>param_env (127,133 samples, 0.14%)</title><rect x="41.2946%" y="181" width="0.1377%" height="15" fill="rgb(242,216,29)"/><text x="41.5446%" y="191.50"></text></g><g><title>check_item_well_formed (1,177,815 samples, 1.28%)</title><rect x="40.2873%" y="197" width="1.2761%" height="15" fill="rgb(230,116,27)"/><text x="40.5373%" y="207.50"></text></g><g><title>analysis (24,123,277 samples, 26.14%)</title><rect x="16.0553%" y="245" width="26.1366%" height="15" fill="rgb(228,99,48)"/><text x="16.3053%" y="255.50">analysis</text></g><g><title>type_check_crate (15,599,442 samples, 16.90%)</title><rect x="25.2905%" y="229" width="16.9013%" height="15" fill="rgb(253,11,6)"/><text x="25.5405%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,827,501 samples, 3.06%)</title><rect x="39.1284%" y="213" width="3.0635%" height="15" fill="rgb(247,143,39)"/><text x="39.3784%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (579,996 samples, 0.63%)</title><rect x="41.5635%" y="197" width="0.6284%" height="15" fill="rgb(236,97,10)"/><text x="41.8135%" y="207.50"></text></g><g><title>fn_abi_of_instance (284,464 samples, 0.31%)</title><rect x="43.2618%" y="213" width="0.3082%" height="15" fill="rgb(233,208,19)"/><text x="43.5118%" y="223.50"></text></g><g><title>codegen_module (936,631 samples, 1.01%)</title><rect x="42.6095%" y="229" width="1.0148%" height="15" fill="rgb(216,164,2)"/><text x="42.8595%" y="239.50"></text></g><g><title>optimized_mir (306,003 samples, 0.33%)</title><rect x="43.7686%" y="181" width="0.3315%" height="15" fill="rgb(220,129,5)"/><text x="44.0186%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (112,211 samples, 0.12%)</title><rect x="43.9786%" y="165" width="0.1216%" height="15" fill="rgb(242,17,10)"/><text x="44.2286%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (416,654 samples, 0.45%)</title><rect x="43.6518%" y="197" width="0.4514%" height="15" fill="rgb(242,107,0)"/><text x="43.9018%" y="207.50"></text></g><g><title>monomorphization_collector (446,745 samples, 0.48%)</title><rect x="43.6497%" y="213" width="0.4840%" height="15" fill="rgb(251,28,31)"/><text x="43.8997%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (514,486 samples, 0.56%)</title><rect x="43.6248%" y="229" width="0.5574%" height="15" fill="rgb(233,223,10)"/><text x="43.8748%" y="239.50"></text></g><g><title>codegen_crate (1,860,561 samples, 2.02%)</title><rect x="42.2032%" y="245" width="2.0158%" height="15" fill="rgb(215,21,27)"/><text x="42.4532%" y="255.50">c..</text></g><g><title>codegen_module_optimize (4,153,476 samples, 4.50%)</title><rect x="44.2190%" y="245" width="4.5001%" height="15" fill="rgb(232,23,21)"/><text x="44.4690%" y="255.50">codeg..</text></g><g><title>LLVM_module_optimize (3,358,038 samples, 3.64%)</title><rect x="45.0809%" y="229" width="3.6383%" height="15" fill="rgb(244,5,23)"/><text x="45.3309%" y="239.50">LLVM..</text></g><g><title>LLVM_lto_optimize (2,090,283 samples, 2.26%)</title><rect x="49.2232%" y="229" width="2.2647%" height="15" fill="rgb(226,81,46)"/><text x="49.4732%" y="239.50">L..</text></g><g><title>LLVM_module_codegen (6,867,065 samples, 7.44%)</title><rect x="51.4879%" y="229" width="7.4402%" height="15" fill="rgb(247,70,30)"/><text x="51.7379%" y="239.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (6,768,884 samples, 7.33%)</title><rect x="51.5943%" y="213" width="7.3338%" height="15" fill="rgb(212,68,19)"/><text x="51.8443%" y="223.50">LLVM_modul..</text></g><g><title>codegen_module_perform_lto (9,483,184 samples, 10.27%)</title><rect x="48.7191%" y="245" width="10.2746%" height="15" fill="rgb(240,187,13)"/><text x="48.9691%" y="255.50">codegen_module_..</text></g><g><title>AST_validation (119,272 samples, 0.13%)</title><rect x="59.2049%" y="229" width="0.1292%" height="15" fill="rgb(223,113,26)"/><text x="59.4549%" y="239.50"></text></g><g><title>metadata_load_macro (101,331 samples, 0.11%)</title><rect x="72.4267%" y="197" width="0.1098%" height="15" fill="rgb(206,192,2)"/><text x="72.6767%" y="207.50"></text></g><g><title>metadata_register_crate (342,604 samples, 0.37%)</title><rect x="72.5365%" y="197" width="0.3712%" height="15" fill="rgb(241,108,4)"/><text x="72.7865%" y="207.50"></text></g><g><title>macro_expand_crate (12,428,397 samples, 13.47%)</title><rect x="59.4621%" y="229" width="13.4656%" height="15" fill="rgb(247,173,49)"/><text x="59.7121%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,405,227 samples, 13.44%)</title><rect x="59.4872%" y="213" width="13.4405%" height="15" fill="rgb(224,114,35)"/><text x="59.7372%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (149,242 samples, 0.16%)</title><rect x="72.9323%" y="229" width="0.1617%" height="15" fill="rgb(245,159,27)"/><text x="73.1823%" y="239.50"></text></g><g><title>finalize_macro_resolutions (249,112 samples, 0.27%)</title><rect x="73.1694%" y="213" width="0.2699%" height="15" fill="rgb(245,172,44)"/><text x="73.4194%" y="223.50"></text></g><g><title>late_resolve_crate (991,261 samples, 1.07%)</title><rect x="73.4393%" y="213" width="1.0740%" height="15" fill="rgb(236,23,11)"/><text x="73.6893%" y="223.50"></text></g><g><title>configure_and_expand (14,407,570 samples, 15.61%)</title><rect x="58.9938%" y="245" width="15.6100%" height="15" fill="rgb(205,117,38)"/><text x="59.2438%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (1,393,455 samples, 1.51%)</title><rect x="73.0940%" y="229" width="1.5097%" height="15" fill="rgb(237,72,25)"/><text x="73.3440%" y="239.50"></text></g><g><title>drop_ast (102,081 samples, 0.11%)</title><rect x="74.6038%" y="245" width="0.1106%" height="15" fill="rgb(244,70,9)"/><text x="74.8538%" y="255.50"></text></g><g><title>early_lint_checks (246,153 samples, 0.27%)</title><rect x="74.7412%" y="245" width="0.2667%" height="15" fill="rgb(217,125,39)"/><text x="74.9912%" y="255.50"></text></g><g><title>free_global_ctxt (1,631,438 samples, 1.77%)</title><rect x="75.0079%" y="245" width="1.7676%" height="15" fill="rgb(235,36,10)"/><text x="75.2579%" y="255.50"></text></g><g><title>exported_symbols (120,611 samples, 0.13%)</title><rect x="77.4349%" y="229" width="0.1307%" height="15" fill="rgb(251,123,47)"/><text x="77.6849%" y="239.50"></text></g><g><title>is_sized_raw (141,263 samples, 0.15%)</title><rect x="78.3255%" y="197" width="0.1531%" height="15" fill="rgb(221,13,13)"/><text x="78.5755%" y="207.50"></text></g><g><title>evaluate_obligation (125,843 samples, 0.14%)</title><rect x="78.3423%" y="181" width="0.1363%" height="15" fill="rgb(238,131,9)"/><text x="78.5923%" y="191.50"></text></g><g><title>layout_of (251,155 samples, 0.27%)</title><rect x="78.2424%" y="213" width="0.2721%" height="15" fill="rgb(211,50,8)"/><text x="78.4924%" y="223.50"></text></g><g><title>is_copy_raw (137,021 samples, 0.15%)</title><rect x="79.1332%" y="181" width="0.1485%" height="15" fill="rgb(245,182,24)"/><text x="79.3832%" y="191.50"></text></g><g><title>evaluate_obligation (116,531 samples, 0.13%)</title><rect x="79.1554%" y="165" width="0.1263%" height="15" fill="rgb(242,14,37)"/><text x="79.4054%" y="175.50"></text></g><g><title>needs_drop_raw (204,832 samples, 0.22%)</title><rect x="79.1139%" y="197" width="0.2219%" height="15" fill="rgb(246,228,12)"/><text x="79.3639%" y="207.50"></text></g><g><title>optimized_mir (1,627,158 samples, 1.76%)</title><rect x="77.6106%" y="229" width="1.7630%" height="15" fill="rgb(213,55,15)"/><text x="77.8606%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (792,866 samples, 0.86%)</title><rect x="78.5145%" y="213" width="0.8590%" height="15" fill="rgb(209,9,3)"/><text x="78.7645%" y="223.50"></text></g><g><title>generate_crate_metadata (2,420,697 samples, 2.62%)</title><rect x="76.7755%" y="245" width="2.6227%" height="15" fill="rgb(230,59,30)"/><text x="77.0255%" y="255.50">ge..</text></g><g><title>hir_lowering (1,769,830 samples, 1.92%)</title><rect x="79.3982%" y="245" width="1.9175%" height="15" fill="rgb(209,121,21)"/><text x="79.6482%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (12,096,613 samples, 13.11%)</title><rect x="81.3389%" y="229" width="13.1062%" height="15" fill="rgb(220,109,13)"/><text x="81.5889%" y="239.50">finish_ongoing_codeg..</text></g><g><title>link_crate (2,478,968 samples, 2.69%)</title><rect x="94.4451%" y="229" width="2.6859%" height="15" fill="rgb(232,18,1)"/><text x="94.6951%" y="239.50">li..</text></g><g><title>link_binary (2,469,367 samples, 2.68%)</title><rect x="94.4555%" y="213" width="2.6755%" height="15" fill="rgb(215,41,42)"/><text x="94.7055%" y="223.50">li..</text></g><g><title>link_rlib (704,098 samples, 0.76%)</title><rect x="96.3681%" y="197" width="0.7629%" height="15" fill="rgb(224,123,36)"/><text x="96.6181%" y="207.50"></text></g><g><title>link (14,611,952 samples, 15.83%)</title><rect x="81.3157%" y="245" width="15.8314%" height="15" fill="rgb(240,125,3)"/><text x="81.5657%" y="255.50">link</text></g><g><title>parse_crate (1,499,267 samples, 1.62%)</title><rect x="97.1472%" y="245" width="1.6244%" height="15" fill="rgb(205,98,50)"/><text x="97.3972%" y="255.50"></text></g><g><title>prepare_outputs (283,133 samples, 0.31%)</title><rect x="98.7808%" y="245" width="0.3068%" height="15" fill="rgb(205,185,37)"/><text x="99.0308%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (429,145 samples, 0.46%)</title><rect x="99.0876%" y="245" width="0.4650%" height="15" fill="rgb(238,207,15)"/><text x="99.3376%" y="255.50"></text></g><g><title>setup_global_ctxt (116,781 samples, 0.13%)</title><rect x="99.5534%" y="245" width="0.1265%" height="15" fill="rgb(213,199,42)"/><text x="99.8034%" y="255.50"></text></g><g><title>all (92,297,091 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (92,297,091 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (295,403 samples, 0.32%)</title><rect x="99.6799%" y="245" width="0.3201%" height="15" fill="rgb(241,35,35)"/><text x="99.9299%" y="255.50"></text></g></svg></svg>