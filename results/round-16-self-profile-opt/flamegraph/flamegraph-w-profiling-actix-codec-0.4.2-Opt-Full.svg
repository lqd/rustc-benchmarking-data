<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (136,848,698 samples, 15.75%)</title><rect x="0.0792%" y="181" width="15.7546%" height="15" fill="rgb(227,0,7)"/><text x="0.3292%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,128,942 samples, 0.13%)</title><rect x="15.7038%" y="165" width="0.1300%" height="15" fill="rgb(217,0,24)"/><text x="15.9538%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,104,682 samples, 0.13%)</title><rect x="15.7066%" y="149" width="0.1272%" height="15" fill="rgb(221,193,54)"/><text x="15.9566%" y="159.50"></text></g><g><title>is_copy_raw (1,164,372 samples, 0.13%)</title><rect x="18.3130%" y="53" width="0.1340%" height="15" fill="rgb(248,212,6)"/><text x="18.5630%" y="63.50"></text></g><g><title>evaluate_obligation (998,060 samples, 0.11%)</title><rect x="18.3321%" y="37" width="0.1149%" height="15" fill="rgb(208,68,35)"/><text x="18.5821%" y="47.50"></text></g><g><title>needs_drop_raw (1,597,220 samples, 0.18%)</title><rect x="18.2635%" y="69" width="0.1839%" height="15" fill="rgb(232,128,0)"/><text x="18.5135%" y="79.50"></text></g><g><title>thir_body (1,117,581 samples, 0.13%)</title><rect x="18.5532%" y="69" width="0.1287%" height="15" fill="rgb(207,160,47)"/><text x="18.8032%" y="79.50"></text></g><g><title>mir_const (9,170,575 samples, 1.06%)</title><rect x="17.6301%" y="117" width="1.0558%" height="15" fill="rgb(228,23,34)"/><text x="17.8801%" y="127.50"></text></g><g><title>unsafety_check_result (7,949,475 samples, 0.92%)</title><rect x="17.7707%" y="101" width="0.9152%" height="15" fill="rgb(218,30,26)"/><text x="18.0207%" y="111.50"></text></g><g><title>mir_built (7,077,166 samples, 0.81%)</title><rect x="17.8711%" y="85" width="0.8148%" height="15" fill="rgb(220,122,19)"/><text x="18.1211%" y="95.50"></text></g><g><title>mir_const_qualif (1,035,144 samples, 0.12%)</title><rect x="18.6859%" y="117" width="0.1192%" height="15" fill="rgb(250,228,42)"/><text x="18.9359%" y="127.50"></text></g><g><title>mir_promoted (11,267,933 samples, 1.30%)</title><rect x="17.5080%" y="133" width="1.2972%" height="15" fill="rgb(240,193,28)"/><text x="17.7580%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,019,782 samples, 0.23%)</title><rect x="18.9376%" y="133" width="0.2325%" height="15" fill="rgb(216,20,37)"/><text x="19.1876%" y="143.50"></text></g><g><title>MIR_borrow_checking (28,648,085 samples, 3.30%)</title><rect x="15.8730%" y="165" width="3.2981%" height="15" fill="rgb(206,188,39)"/><text x="16.1230%" y="175.50">MIR..</text></g><g><title>mir_borrowck (28,482,873 samples, 3.28%)</title><rect x="15.8920%" y="149" width="3.2791%" height="15" fill="rgb(217,207,13)"/><text x="16.1420%" y="159.50">mir..</text></g><g><title>misc_checking_1 (1,708,128 samples, 0.20%)</title><rect x="19.2504%" y="165" width="0.1966%" height="15" fill="rgb(231,73,38)"/><text x="19.5004%" y="175.50"></text></g><g><title>misc_checking_2 (1,189,792 samples, 0.14%)</title><rect x="19.4471%" y="165" width="0.1370%" height="15" fill="rgb(225,20,46)"/><text x="19.6971%" y="175.50"></text></g><g><title>death_checking (908,490 samples, 0.10%)</title><rect x="19.6181%" y="149" width="0.1046%" height="15" fill="rgb(210,31,41)"/><text x="19.8681%" y="159.50"></text></g><g><title>crate_lints (2,550,327 samples, 0.29%)</title><rect x="19.7228%" y="133" width="0.2936%" height="15" fill="rgb(221,200,47)"/><text x="19.9728%" y="143.50"></text></g><g><title>type_of (1,192,851 samples, 0.14%)</title><rect x="19.8791%" y="117" width="0.1373%" height="15" fill="rgb(226,26,5)"/><text x="20.1291%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (926,540 samples, 0.11%)</title><rect x="19.9098%" y="101" width="0.1067%" height="15" fill="rgb(249,33,26)"/><text x="20.1598%" y="111.50"></text></g><g><title>lint_checking (3,032,412 samples, 0.35%)</title><rect x="19.7227%" y="149" width="0.3491%" height="15" fill="rgb(235,183,28)"/><text x="19.9727%" y="159.50"></text></g><g><title>privacy_checking_modules (1,101,202 samples, 0.13%)</title><rect x="20.1053%" y="149" width="0.1268%" height="15" fill="rgb(221,5,38)"/><text x="20.3553%" y="159.50"></text></g><g><title>check_mod_privacy (1,098,042 samples, 0.13%)</title><rect x="20.1057%" y="133" width="0.1264%" height="15" fill="rgb(247,18,42)"/><text x="20.3557%" y="143.50"></text></g><g><title>misc_checking_3 (5,648,080 samples, 0.65%)</title><rect x="19.5841%" y="165" width="0.6502%" height="15" fill="rgb(241,131,45)"/><text x="19.8341%" y="175.50"></text></g><g><title>impl_parent (3,729,997 samples, 0.43%)</title><rect x="21.0065%" y="101" width="0.4294%" height="15" fill="rgb(249,31,29)"/><text x="21.2565%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,863,061 samples, 0.21%)</title><rect x="21.2215%" y="85" width="0.2145%" height="15" fill="rgb(225,111,53)"/><text x="21.4715%" y="95.50"></text></g><g><title>impl_trait_ref (6,876,219 samples, 0.79%)</title><rect x="21.4359%" y="101" width="0.7916%" height="15" fill="rgb(238,160,17)"/><text x="21.6859%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,395,774 samples, 0.62%)</title><rect x="21.6064%" y="85" width="0.6212%" height="15" fill="rgb(214,148,48)"/><text x="21.8564%" y="95.50"></text></g><g><title>coherent_trait (18,770,190 samples, 2.16%)</title><rect x="20.2483%" y="133" width="2.1609%" height="15" fill="rgb(232,36,49)"/><text x="20.4983%" y="143.50">c..</text></g><g><title>specialization_graph_of (18,194,904 samples, 2.09%)</title><rect x="20.3145%" y="117" width="2.0947%" height="15" fill="rgb(209,103,24)"/><text x="20.5645%" y="127.50">s..</text></g><g><title>trait_impls_of (1,535,286 samples, 0.18%)</title><rect x="22.2324%" y="101" width="0.1767%" height="15" fill="rgb(229,88,8)"/><text x="22.4824%" y="111.50"></text></g><g><title>coherence_checking (19,184,664 samples, 2.21%)</title><rect x="20.2443%" y="149" width="2.2086%" height="15" fill="rgb(213,181,19)"/><text x="20.4943%" y="159.50">c..</text></g><g><title>evaluate_obligation (2,454,368 samples, 0.28%)</title><rect x="25.4935%" y="101" width="0.2826%" height="15" fill="rgb(254,191,54)"/><text x="25.7435%" y="111.50"></text></g><g><title>typeck (1,189,233 samples, 0.14%)</title><rect x="26.0237%" y="101" width="0.1369%" height="15" fill="rgb(241,83,37)"/><text x="26.2737%" y="111.50"></text></g><g><title>item_bodies_checking (32,229,404 samples, 3.71%)</title><rect x="22.4583%" y="149" width="3.7104%" height="15" fill="rgb(233,36,39)"/><text x="22.7083%" y="159.50">item..</text></g><g><title>typeck_item_bodies (32,226,714 samples, 3.71%)</title><rect x="22.4586%" y="133" width="3.7101%" height="15" fill="rgb(226,3,54)"/><text x="22.7086%" y="143.50">type..</text></g><g><title>typeck (32,108,174 samples, 3.70%)</title><rect x="22.4722%" y="117" width="3.6964%" height="15" fill="rgb(245,192,40)"/><text x="22.7222%" y="127.50">type..</text></g><g><title>evaluate_obligation (1,107,101 samples, 0.13%)</title><rect x="26.4608%" y="101" width="0.1275%" height="15" fill="rgb(238,167,29)"/><text x="26.7108%" y="111.50"></text></g><g><title>item_types_checking (3,730,289 samples, 0.43%)</title><rect x="26.1687%" y="149" width="0.4294%" height="15" fill="rgb(232,182,51)"/><text x="26.4187%" y="159.50"></text></g><g><title>check_mod_item_types (3,725,889 samples, 0.43%)</title><rect x="26.1692%" y="133" width="0.4289%" height="15" fill="rgb(231,60,39)"/><text x="26.4192%" y="143.50"></text></g><g><title>typeck (1,553,427 samples, 0.18%)</title><rect x="26.4193%" y="117" width="0.1788%" height="15" fill="rgb(208,69,12)"/><text x="26.6693%" y="127.50"></text></g><g><title>predicates_of (953,928 samples, 0.11%)</title><rect x="26.8051%" y="117" width="0.1098%" height="15" fill="rgb(235,93,37)"/><text x="27.0551%" y="127.50"></text></g><g><title>predicates_defined_on (884,027 samples, 0.10%)</title><rect x="26.8131%" y="101" width="0.1018%" height="15" fill="rgb(213,116,39)"/><text x="27.0631%" y="111.50"></text></g><g><title>type_collecting (2,920,611 samples, 0.34%)</title><rect x="26.5985%" y="149" width="0.3362%" height="15" fill="rgb(222,207,29)"/><text x="26.8485%" y="159.50"></text></g><g><title>collect_mod_item_types (2,909,441 samples, 0.33%)</title><rect x="26.5998%" y="133" width="0.3349%" height="15" fill="rgb(206,96,30)"/><text x="26.8498%" y="143.50"></text></g><g><title>evaluate_obligation (1,268,243 samples, 0.15%)</title><rect x="27.3591%" y="117" width="0.1460%" height="15" fill="rgb(218,138,4)"/><text x="27.6091%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,357,653 samples, 0.73%)</title><rect x="26.9678%" y="133" width="0.7319%" height="15" fill="rgb(250,191,14)"/><text x="27.2178%" y="143.50"></text></g><g><title>check_item_well_formed (2,860,857 samples, 0.33%)</title><rect x="27.6997%" y="133" width="0.3294%" height="15" fill="rgb(239,60,40)"/><text x="27.9497%" y="143.50"></text></g><g><title>analysis (106,060,850 samples, 12.21%)</title><rect x="15.8338%" y="181" width="12.2102%" height="15" fill="rgb(206,27,48)"/><text x="16.0838%" y="191.50">analysis</text></g><g><title>type_check_crate (67,836,963 samples, 7.81%)</title><rect x="20.2343%" y="165" width="7.8097%" height="15" fill="rgb(225,35,8)"/><text x="20.4843%" y="175.50">type_check_..</text></g><g><title>wf_checking (9,627,113 samples, 1.11%)</title><rect x="26.9356%" y="149" width="1.1083%" height="15" fill="rgb(250,213,24)"/><text x="27.1856%" y="159.50"></text></g><g><title>layout_of (1,358,202 samples, 0.16%)</title><rect x="30.5766%" y="133" width="0.1564%" height="15" fill="rgb(247,123,22)"/><text x="30.8266%" y="143.50"></text></g><g><title>param_env (1,786,498 samples, 0.21%)</title><rect x="30.7330%" y="133" width="0.2057%" height="15" fill="rgb(231,138,38)"/><text x="30.9830%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,832,532 samples, 0.67%)</title><rect x="30.2851%" y="149" width="0.6715%" height="15" fill="rgb(231,145,46)"/><text x="30.5351%" y="159.50"></text></g><g><title>codegen_module (24,346,836 samples, 2.80%)</title><rect x="28.2781%" y="165" width="2.8029%" height="15" fill="rgb(251,118,11)"/><text x="28.5281%" y="175.50">co..</text></g><g><title>codegen_fn_attrs (1,014,114 samples, 0.12%)</title><rect x="31.1922%" y="117" width="0.1167%" height="15" fill="rgb(217,147,25)"/><text x="31.4422%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,096,867 samples, 0.13%)</title><rect x="31.5157%" y="101" width="0.1263%" height="15" fill="rgb(247,81,37)"/><text x="31.7657%" y="111.50"></text></g><g><title>optimized_mir (3,486,501 samples, 0.40%)</title><rect x="31.3852%" y="117" width="0.4014%" height="15" fill="rgb(209,12,38)"/><text x="31.6352%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,256,253 samples, 0.14%)</title><rect x="31.6420%" y="101" width="0.1446%" height="15" fill="rgb(227,1,9)"/><text x="31.8920%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,186,644 samples, 0.14%)</title><rect x="31.8343%" y="101" width="0.1366%" height="15" fill="rgb(248,47,43)"/><text x="32.0843%" y="111.50"></text></g><g><title>specialization_graph_of (1,009,712 samples, 0.12%)</title><rect x="32.0315%" y="101" width="0.1162%" height="15" fill="rgb(221,10,30)"/><text x="32.2815%" y="111.50"></text></g><g><title>resolve_instance (3,434,079 samples, 0.40%)</title><rect x="31.7866%" y="117" width="0.3953%" height="15" fill="rgb(210,229,1)"/><text x="32.0366%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (10,876,576 samples, 1.25%)</title><rect x="31.0865%" y="133" width="1.2522%" height="15" fill="rgb(222,148,37)"/><text x="31.3365%" y="143.50"></text></g><g><title>monomorphization_collector (10,931,687 samples, 1.26%)</title><rect x="31.0863%" y="149" width="1.2585%" height="15" fill="rgb(234,67,33)"/><text x="31.3363%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (12,123,469 samples, 1.40%)</title><rect x="31.0820%" y="165" width="1.3957%" height="15" fill="rgb(247,98,35)"/><text x="31.3320%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,154,432 samples, 0.13%)</title><rect x="32.3448%" y="149" width="0.1329%" height="15" fill="rgb(247,138,52)"/><text x="32.5948%" y="159.50"></text></g><g><title>codegen_crate (38,593,752 samples, 4.44%)</title><rect x="28.0445%" y="181" width="4.4431%" height="15" fill="rgb(213,79,30)"/><text x="28.2945%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (192,000,004 samples, 22.10%)</title><rect x="32.4876%" y="181" width="22.1038%" height="15" fill="rgb(246,177,23)"/><text x="32.7376%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (172,528,845 samples, 19.86%)</title><rect x="34.7292%" y="165" width="19.8622%" height="15" fill="rgb(230,62,27)"/><text x="34.9792%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (85,507,830 samples, 9.84%)</title><rect x="55.9096%" y="165" width="9.8440%" height="15" fill="rgb(216,154,8)"/><text x="56.1596%" y="175.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (120,470,076 samples, 13.87%)</title><rect x="65.7536%" y="165" width="13.8690%" height="15" fill="rgb(244,35,45)"/><text x="66.0036%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (118,492,234 samples, 13.64%)</title><rect x="65.9813%" y="149" width="13.6413%" height="15" fill="rgb(251,115,12)"/><text x="66.2313%" y="159.50">LLVM_module_codegen_e..</text></g><g><title>LLVM_thin_lto_import (13,059,806 samples, 1.50%)</title><rect x="79.6226%" y="165" width="1.5035%" height="15" fill="rgb(240,54,50)"/><text x="79.8726%" y="175.50"></text></g><g><title>codegen_module_perform_lto (231,100,771 samples, 26.61%)</title><rect x="54.5914%" y="181" width="26.6053%" height="15" fill="rgb(233,84,52)"/><text x="54.8414%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_load_macro (1,069,932 samples, 0.12%)</title><rect x="83.2471%" y="133" width="0.1232%" height="15" fill="rgb(207,117,47)"/><text x="83.4971%" y="143.50"></text></g><g><title>metadata_register_crate (1,492,517 samples, 0.17%)</title><rect x="83.3703%" y="133" width="0.1718%" height="15" fill="rgb(249,43,39)"/><text x="83.6203%" y="143.50"></text></g><g><title>macro_expand_crate (20,073,734 samples, 2.31%)</title><rect x="81.2449%" y="165" width="2.3110%" height="15" fill="rgb(209,38,44)"/><text x="81.4949%" y="175.50">m..</text></g><g><title>expand_crate (20,060,134 samples, 2.31%)</title><rect x="81.2464%" y="149" width="2.3094%" height="15" fill="rgb(236,212,23)"/><text x="81.4964%" y="159.50">e..</text></g><g><title>late_resolve_crate (2,319,354 samples, 0.27%)</title><rect x="83.6004%" y="149" width="0.2670%" height="15" fill="rgb(242,79,21)"/><text x="83.8504%" y="159.50"></text></g><g><title>configure_and_expand (23,321,868 samples, 2.68%)</title><rect x="81.1967%" y="181" width="2.6849%" height="15" fill="rgb(211,96,35)"/><text x="81.4467%" y="191.50">co..</text></g><g><title>resolve_crate (2,761,629 samples, 0.32%)</title><rect x="83.5637%" y="165" width="0.3179%" height="15" fill="rgb(253,215,40)"/><text x="83.8137%" y="175.50"></text></g><g><title>free_global_ctxt (7,352,649 samples, 0.85%)</title><rect x="83.9746%" y="181" width="0.8465%" height="15" fill="rgb(211,81,21)"/><text x="84.2246%" y="191.50"></text></g><g><title>layout_of (994,398 samples, 0.11%)</title><rect x="85.5384%" y="149" width="0.1145%" height="15" fill="rgb(208,190,38)"/><text x="85.7884%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,573,892 samples, 0.53%)</title><rect x="85.6529%" y="149" width="0.5266%" height="15" fill="rgb(235,213,38)"/><text x="85.9029%" y="159.50"></text></g><g><title>optimized_mir (9,684,354 samples, 1.11%)</title><rect x="85.1346%" y="165" width="1.1149%" height="15" fill="rgb(237,122,38)"/><text x="85.3846%" y="175.50"></text></g><g><title>generate_crate_metadata (12,681,995 samples, 1.46%)</title><rect x="84.8210%" y="181" width="1.4600%" height="15" fill="rgb(244,218,35)"/><text x="85.0710%" y="191.50"></text></g><g><title>hir_lowering (3,677,210 samples, 0.42%)</title><rect x="86.2810%" y="181" width="0.4233%" height="15" fill="rgb(240,68,47)"/><text x="86.5310%" y="191.50"></text></g><g><title>finish_ongoing_codegen (108,924,740 samples, 12.54%)</title><rect x="86.7078%" y="165" width="12.5399%" height="15" fill="rgb(210,16,53)"/><text x="86.9578%" y="175.50">finish_ongoing_code..</text></g><g><title>link_crate (2,746,729 samples, 0.32%)</title><rect x="99.2477%" y="165" width="0.3162%" height="15" fill="rgb(235,124,12)"/><text x="99.4977%" y="175.50"></text></g><g><title>link_binary (2,708,149 samples, 0.31%)</title><rect x="99.2521%" y="149" width="0.3118%" height="15" fill="rgb(224,169,11)"/><text x="99.5021%" y="159.50"></text></g><g><title>link_rlib (1,591,767 samples, 0.18%)</title><rect x="99.3806%" y="133" width="0.1833%" height="15" fill="rgb(250,166,2)"/><text x="99.6306%" y="143.50"></text></g><g><title>link (111,712,830 samples, 12.86%)</title><rect x="86.7044%" y="181" width="12.8608%" height="15" fill="rgb(242,216,29)"/><text x="86.9544%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,869,790 samples, 0.33%)</title><rect x="99.6120%" y="181" width="0.3304%" height="15" fill="rgb(230,116,27)"/><text x="99.8620%" y="191.50"></text></g><g><title>all (868,627,862 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (868,627,862 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>