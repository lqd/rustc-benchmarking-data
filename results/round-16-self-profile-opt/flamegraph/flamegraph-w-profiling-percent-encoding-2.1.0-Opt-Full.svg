<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (148,868,212 samples, 15.49%)</title><rect x="0.0572%" y="229" width="15.4853%" height="15" fill="rgb(227,0,7)"/><text x="0.3072%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,171,513 samples, 0.12%)</title><rect x="15.4207%" y="213" width="0.1219%" height="15" fill="rgb(217,0,24)"/><text x="15.6707%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,144,472 samples, 0.12%)</title><rect x="15.4235%" y="197" width="0.1190%" height="15" fill="rgb(221,193,54)"/><text x="15.6735%" y="207.50"></text></g><g><title>resolve_instance (1,243,893 samples, 0.13%)</title><rect x="16.5648%" y="117" width="0.1294%" height="15" fill="rgb(248,212,6)"/><text x="16.8148%" y="127.50"></text></g><g><title>mir_const (5,180,876 samples, 0.54%)</title><rect x="16.2020%" y="165" width="0.5389%" height="15" fill="rgb(208,68,35)"/><text x="16.4520%" y="175.50"></text></g><g><title>unsafety_check_result (4,580,980 samples, 0.48%)</title><rect x="16.2644%" y="149" width="0.4765%" height="15" fill="rgb(232,128,0)"/><text x="16.5144%" y="159.50"></text></g><g><title>mir_built (3,692,812 samples, 0.38%)</title><rect x="16.3568%" y="133" width="0.3841%" height="15" fill="rgb(207,160,47)"/><text x="16.6068%" y="143.50"></text></g><g><title>mir_promoted (6,217,558 samples, 0.65%)</title><rect x="16.1523%" y="181" width="0.6468%" height="15" fill="rgb(228,23,34)"/><text x="16.4023%" y="191.50"></text></g><g><title>type_op_prove_predicate (1,144,832 samples, 0.12%)</title><rect x="16.8616%" y="181" width="0.1191%" height="15" fill="rgb(218,30,26)"/><text x="17.1116%" y="191.50"></text></g><g><title>MIR_borrow_checking (13,653,842 samples, 1.42%)</title><rect x="15.5607%" y="213" width="1.4203%" height="15" fill="rgb(220,122,19)"/><text x="15.8107%" y="223.50"></text></g><g><title>mir_borrowck (13,601,531 samples, 1.41%)</title><rect x="15.5662%" y="197" width="1.4148%" height="15" fill="rgb(250,228,42)"/><text x="15.8162%" y="207.50"></text></g><g><title>crate_lints (2,434,807 samples, 0.25%)</title><rect x="17.1808%" y="181" width="0.2533%" height="15" fill="rgb(240,193,28)"/><text x="17.4308%" y="191.50"></text></g><g><title>type_of (1,074,041 samples, 0.11%)</title><rect x="17.3224%" y="165" width="0.1117%" height="15" fill="rgb(216,20,37)"/><text x="17.5724%" y="175.50"></text></g><g><title>lint_checking (2,643,779 samples, 0.28%)</title><rect x="17.1806%" y="197" width="0.2750%" height="15" fill="rgb(206,188,39)"/><text x="17.4306%" y="207.50"></text></g><g><title>misc_checking_3 (3,477,929 samples, 0.36%)</title><rect x="17.1493%" y="213" width="0.3618%" height="15" fill="rgb(217,207,13)"/><text x="17.3993%" y="223.50"></text></g><g><title>impl_parent (1,694,789 samples, 0.18%)</title><rect x="17.8052%" y="149" width="0.1763%" height="15" fill="rgb(231,73,38)"/><text x="18.0552%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,089,833 samples, 0.11%)</title><rect x="17.8681%" y="133" width="0.1134%" height="15" fill="rgb(225,20,46)"/><text x="18.1181%" y="143.50"></text></g><g><title>impl_trait_ref (4,465,085 samples, 0.46%)</title><rect x="17.9815%" y="149" width="0.4645%" height="15" fill="rgb(210,31,41)"/><text x="18.2315%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,832,557 samples, 0.40%)</title><rect x="18.0473%" y="133" width="0.3987%" height="15" fill="rgb(221,200,47)"/><text x="18.2973%" y="143.50"></text></g><g><title>coherent_trait (9,465,846 samples, 0.98%)</title><rect x="17.5169%" y="181" width="0.9846%" height="15" fill="rgb(226,26,5)"/><text x="17.7669%" y="191.50"></text></g><g><title>specialization_graph_of (9,453,206 samples, 0.98%)</title><rect x="17.5182%" y="165" width="0.9833%" height="15" fill="rgb(249,33,26)"/><text x="17.7682%" y="175.50"></text></g><g><title>coherence_checking (9,532,617 samples, 0.99%)</title><rect x="17.5153%" y="197" width="0.9916%" height="15" fill="rgb(235,183,28)"/><text x="17.7653%" y="207.50"></text></g><g><title>mir_borrowck (1,125,243 samples, 0.12%)</title><rect x="19.8582%" y="69" width="0.1170%" height="15" fill="rgb(221,5,38)"/><text x="20.1082%" y="79.50"></text></g><g><title>mir_for_ctfe (1,408,826 samples, 0.15%)</title><rect x="19.8290%" y="101" width="0.1465%" height="15" fill="rgb(247,18,42)"/><text x="20.0790%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,342,506 samples, 0.14%)</title><rect x="19.8359%" y="85" width="0.1396%" height="15" fill="rgb(241,131,45)"/><text x="20.0859%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,314,745 samples, 0.24%)</title><rect x="19.7732%" y="149" width="0.2408%" height="15" fill="rgb(249,31,29)"/><text x="20.0232%" y="159.50"></text></g><g><title>eval_to_const_value_raw (2,303,825 samples, 0.24%)</title><rect x="19.7743%" y="133" width="0.2396%" height="15" fill="rgb(225,111,53)"/><text x="20.0243%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,293,275 samples, 0.24%)</title><rect x="19.7754%" y="117" width="0.2385%" height="15" fill="rgb(238,160,17)"/><text x="20.0254%" y="127.50"></text></g><g><title>evaluate_obligation (3,400,259 samples, 0.35%)</title><rect x="20.0140%" y="149" width="0.3537%" height="15" fill="rgb(214,148,48)"/><text x="20.2640%" y="159.50"></text></g><g><title>typeck (2,504,469 samples, 0.26%)</title><rect x="20.5332%" y="149" width="0.2605%" height="15" fill="rgb(232,36,49)"/><text x="20.7832%" y="159.50"></text></g><g><title>item_bodies_checking (22,017,536 samples, 2.29%)</title><rect x="18.5087%" y="197" width="2.2903%" height="15" fill="rgb(209,103,24)"/><text x="18.7587%" y="207.50">i..</text></g><g><title>typeck_item_bodies (22,013,996 samples, 2.29%)</title><rect x="18.5091%" y="181" width="2.2899%" height="15" fill="rgb(229,88,8)"/><text x="18.7591%" y="191.50">t..</text></g><g><title>typeck (21,971,176 samples, 2.29%)</title><rect x="18.5135%" y="165" width="2.2854%" height="15" fill="rgb(213,181,19)"/><text x="18.7635%" y="175.50">t..</text></g><g><title>specializes (1,948,033 samples, 0.20%)</title><rect x="21.4443%" y="133" width="0.2026%" height="15" fill="rgb(254,191,54)"/><text x="21.6943%" y="143.50"></text></g><g><title>param_env (1,137,705 samples, 0.12%)</title><rect x="21.5286%" y="117" width="0.1183%" height="15" fill="rgb(241,83,37)"/><text x="21.7786%" y="127.50"></text></g><g><title>evaluate_obligation (6,255,719 samples, 0.65%)</title><rect x="21.0088%" y="149" width="0.6507%" height="15" fill="rgb(233,36,39)"/><text x="21.2588%" y="159.50"></text></g><g><title>item_types_checking (8,481,105 samples, 0.88%)</title><rect x="20.7990%" y="197" width="0.8822%" height="15" fill="rgb(226,3,54)"/><text x="21.0490%" y="207.50"></text></g><g><title>check_mod_item_types (8,477,935 samples, 0.88%)</title><rect x="20.7993%" y="181" width="0.8819%" height="15" fill="rgb(245,192,40)"/><text x="21.0493%" y="191.50"></text></g><g><title>typeck (7,639,566 samples, 0.79%)</title><rect x="20.8865%" y="165" width="0.7947%" height="15" fill="rgb(238,167,29)"/><text x="21.1365%" y="175.50"></text></g><g><title>type_collecting (1,109,962 samples, 0.12%)</title><rect x="21.6813%" y="197" width="0.1155%" height="15" fill="rgb(232,182,51)"/><text x="21.9313%" y="207.50"></text></g><g><title>collect_mod_item_types (1,102,922 samples, 0.11%)</title><rect x="21.6820%" y="181" width="0.1147%" height="15" fill="rgb(231,60,39)"/><text x="21.9320%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,143,849 samples, 0.12%)</title><rect x="21.8063%" y="181" width="0.1190%" height="15" fill="rgb(208,69,12)"/><text x="22.0563%" y="191.50"></text></g><g><title>evaluate_obligation (1,292,204 samples, 0.13%)</title><rect x="22.1909%" y="37" width="0.1344%" height="15" fill="rgb(235,93,37)"/><text x="22.4409%" y="47.50"></text></g><g><title>eval_to_const_value_raw (2,238,524 samples, 0.23%)</title><rect x="22.1042%" y="101" width="0.2329%" height="15" fill="rgb(213,116,39)"/><text x="22.3542%" y="111.50"></text></g><g><title>eval_to_const_value_raw (2,236,054 samples, 0.23%)</title><rect x="22.1045%" y="85" width="0.2326%" height="15" fill="rgb(222,207,29)"/><text x="22.3545%" y="95.50"></text></g><g><title>eval_to_allocation_raw (2,229,303 samples, 0.23%)</title><rect x="22.1052%" y="69" width="0.2319%" height="15" fill="rgb(206,96,30)"/><text x="22.3552%" y="79.50"></text></g><g><title>typeck (1,558,737 samples, 0.16%)</title><rect x="22.1749%" y="53" width="0.1621%" height="15" fill="rgb(218,138,4)"/><text x="22.4249%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,257,455 samples, 0.23%)</title><rect x="22.1028%" y="117" width="0.2348%" height="15" fill="rgb(250,191,14)"/><text x="22.3528%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,810,322 samples, 0.40%)</title><rect x="22.0090%" y="165" width="0.3964%" height="15" fill="rgb(239,60,40)"/><text x="22.2590%" y="175.50"></text></g><g><title>eval_to_const_value_raw (3,795,702 samples, 0.39%)</title><rect x="22.0105%" y="149" width="0.3948%" height="15" fill="rgb(206,27,48)"/><text x="22.2605%" y="159.50"></text></g><g><title>eval_to_allocation_raw (3,794,282 samples, 0.39%)</title><rect x="22.0106%" y="133" width="0.3947%" height="15" fill="rgb(225,35,8)"/><text x="22.2606%" y="143.50"></text></g><g><title>analysis (66,543,513 samples, 6.92%)</title><rect x="15.5426%" y="229" width="6.9219%" height="15" fill="rgb(250,213,24)"/><text x="15.7926%" y="239.50">analysis</text></g><g><title>type_check_crate (47,619,101 samples, 4.95%)</title><rect x="17.5111%" y="213" width="4.9534%" height="15" fill="rgb(247,123,22)"/><text x="17.7611%" y="223.50">type_c..</text></g><g><title>wf_checking (6,414,971 samples, 0.67%)</title><rect x="21.7972%" y="197" width="0.6673%" height="15" fill="rgb(231,138,38)"/><text x="22.0472%" y="207.50"></text></g><g><title>check_item_well_formed (5,183,340 samples, 0.54%)</title><rect x="21.9253%" y="181" width="0.5392%" height="15" fill="rgb(231,145,46)"/><text x="22.1753%" y="191.50"></text></g><g><title>layout_of (1,269,158 samples, 0.13%)</title><rect x="25.9083%" y="181" width="0.1320%" height="15" fill="rgb(251,118,11)"/><text x="26.1583%" y="191.50"></text></g><g><title>predicates_of (1,122,841 samples, 0.12%)</title><rect x="26.2498%" y="165" width="0.1168%" height="15" fill="rgb(217,147,25)"/><text x="26.4998%" y="175.50"></text></g><g><title>param_env (3,141,684 samples, 0.33%)</title><rect x="26.0403%" y="181" width="0.3268%" height="15" fill="rgb(247,81,37)"/><text x="26.2903%" y="191.50"></text></g><g><title>fn_abi_of_instance (8,904,353 samples, 0.93%)</title><rect x="25.4886%" y="197" width="0.9262%" height="15" fill="rgb(209,12,38)"/><text x="25.7386%" y="207.50"></text></g><g><title>codegen_module (37,433,036 samples, 3.89%)</title><rect x="22.6684%" y="213" width="3.8938%" height="15" fill="rgb(227,1,9)"/><text x="22.9184%" y="223.50">code..</text></g><g><title>item_attrs (1,010,312 samples, 0.11%)</title><rect x="26.7631%" y="149" width="0.1051%" height="15" fill="rgb(248,47,43)"/><text x="27.0131%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (966,731 samples, 0.10%)</title><rect x="26.7676%" y="133" width="0.1006%" height="15" fill="rgb(221,10,30)"/><text x="27.0176%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,608,758 samples, 0.17%)</title><rect x="26.7333%" y="165" width="0.1673%" height="15" fill="rgb(210,229,1)"/><text x="26.9833%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,874,130 samples, 0.19%)</title><rect x="27.1866%" y="149" width="0.1949%" height="15" fill="rgb(222,148,37)"/><text x="27.4366%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,591,419 samples, 0.17%)</title><rect x="27.3816%" y="149" width="0.1655%" height="15" fill="rgb(234,67,33)"/><text x="27.6316%" y="159.50"></text></g><g><title>optimized_mir (5,662,021 samples, 0.59%)</title><rect x="26.9661%" y="165" width="0.5890%" height="15" fill="rgb(247,98,35)"/><text x="27.2161%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (2,341,879 samples, 0.24%)</title><rect x="27.6379%" y="149" width="0.2436%" height="15" fill="rgb(247,138,52)"/><text x="27.8879%" y="159.50"></text></g><g><title>specialization_graph_of (1,671,850 samples, 0.17%)</title><rect x="27.9516%" y="149" width="0.1739%" height="15" fill="rgb(213,79,30)"/><text x="28.2016%" y="159.50"></text></g><g><title>resolve_instance (5,787,127 samples, 0.60%)</title><rect x="27.5550%" y="165" width="0.6020%" height="15" fill="rgb(246,177,23)"/><text x="27.8050%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (16,044,489 samples, 1.67%)</title><rect x="26.5679%" y="181" width="1.6690%" height="15" fill="rgb(230,62,27)"/><text x="26.8179%" y="191.50"></text></g><g><title>monomorphization_collector (16,087,020 samples, 1.67%)</title><rect x="26.5677%" y="197" width="1.6734%" height="15" fill="rgb(216,154,8)"/><text x="26.8177%" y="207.50"></text></g><g><title>assert_symbols_are_distinct (1,495,947 samples, 0.16%)</title><rect x="28.2415%" y="181" width="0.1556%" height="15" fill="rgb(244,35,45)"/><text x="28.4915%" y="191.50"></text></g><g><title>symbol_name (1,373,676 samples, 0.14%)</title><rect x="28.2543%" y="165" width="0.1429%" height="15" fill="rgb(251,115,12)"/><text x="28.5043%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (18,127,932 samples, 1.89%)</title><rect x="26.5632%" y="213" width="1.8857%" height="15" fill="rgb(240,54,50)"/><text x="26.8132%" y="223.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,997,902 samples, 0.21%)</title><rect x="28.2411%" y="197" width="0.2078%" height="15" fill="rgb(233,84,52)"/><text x="28.4911%" y="207.50"></text></g><g><title>codegen_crate (57,578,792 samples, 5.99%)</title><rect x="22.4656%" y="229" width="5.9894%" height="15" fill="rgb(207,117,47)"/><text x="22.7156%" y="239.50">codegen_..</text></g><g><title>codegen_module_optimize (237,864,502 samples, 24.74%)</title><rect x="28.4550%" y="229" width="24.7428%" height="15" fill="rgb(249,43,39)"/><text x="28.7050%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (224,080,198 samples, 23.31%)</title><rect x="29.8889%" y="213" width="23.3089%" height="15" fill="rgb(209,38,44)"/><text x="30.1389%" y="223.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (129,230,364 samples, 13.44%)</title><rect x="54.3866%" y="213" width="13.4426%" height="15" fill="rgb(236,212,23)"/><text x="54.6366%" y="223.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (147,129,755 samples, 15.30%)</title><rect x="67.8292%" y="213" width="15.3045%" height="15" fill="rgb(242,79,21)"/><text x="68.0792%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (144,929,703 samples, 15.08%)</title><rect x="68.0581%" y="197" width="15.0756%" height="15" fill="rgb(211,96,35)"/><text x="68.3081%" y="207.50">LLVM_module_codegen_emi..</text></g><g><title>LLVM_thin_lto_import (16,798,869 samples, 1.75%)</title><rect x="83.1337%" y="213" width="1.7474%" height="15" fill="rgb(253,215,40)"/><text x="83.3837%" y="223.50"></text></g><g><title>codegen_module_perform_lto (305,191,551 samples, 31.75%)</title><rect x="53.1978%" y="229" width="31.7461%" height="15" fill="rgb(211,81,21)"/><text x="53.4478%" y="239.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (12,691,841 samples, 1.32%)</title><rect x="84.9845%" y="213" width="1.3202%" height="15" fill="rgb(208,190,38)"/><text x="85.2345%" y="223.50"></text></g><g><title>expand_crate (12,673,321 samples, 1.32%)</title><rect x="84.9864%" y="197" width="1.3183%" height="15" fill="rgb(235,213,38)"/><text x="85.2364%" y="207.50"></text></g><g><title>metadata_register_crate (2,570,669 samples, 0.27%)</title><rect x="86.0373%" y="181" width="0.2674%" height="15" fill="rgb(237,122,38)"/><text x="86.2873%" y="191.50"></text></g><g><title>late_resolve_crate (1,277,165 samples, 0.13%)</title><rect x="86.3329%" y="197" width="0.1329%" height="15" fill="rgb(244,218,35)"/><text x="86.5829%" y="207.50"></text></g><g><title>configure_and_expand (14,686,784 samples, 1.53%)</title><rect x="84.9439%" y="229" width="1.5277%" height="15" fill="rgb(240,68,47)"/><text x="85.1939%" y="239.50"></text></g><g><title>resolve_crate (1,385,775 samples, 0.14%)</title><rect x="86.3275%" y="213" width="0.1441%" height="15" fill="rgb(210,16,53)"/><text x="86.5775%" y="223.50"></text></g><g><title>free_global_ctxt (6,441,112 samples, 0.67%)</title><rect x="86.5015%" y="229" width="0.6700%" height="15" fill="rgb(235,124,12)"/><text x="86.7515%" y="239.50"></text></g><g><title>generate_crate_metadata (1,722,779 samples, 0.18%)</title><rect x="87.1715%" y="229" width="0.1792%" height="15" fill="rgb(224,169,11)"/><text x="87.4215%" y="239.50"></text></g><g><title>hir_lowering (1,245,784 samples, 0.13%)</title><rect x="87.3507%" y="229" width="0.1296%" height="15" fill="rgb(250,166,2)"/><text x="87.6007%" y="239.50"></text></g><g><title>finish_ongoing_codegen (112,868,850 samples, 11.74%)</title><rect x="87.4821%" y="213" width="11.7407%" height="15" fill="rgb(242,216,29)"/><text x="87.7321%" y="223.50">finish_ongoing_co..</text></g><g><title>link_crate (1,336,005 samples, 0.14%)</title><rect x="99.2228%" y="213" width="0.1390%" height="15" fill="rgb(230,116,27)"/><text x="99.4728%" y="223.50"></text></g><g><title>link_binary (1,304,654 samples, 0.14%)</title><rect x="99.2260%" y="197" width="0.1357%" height="15" fill="rgb(228,99,48)"/><text x="99.4760%" y="207.50"></text></g><g><title>link (114,233,965 samples, 11.88%)</title><rect x="87.4803%" y="229" width="11.8827%" height="15" fill="rgb(253,11,6)"/><text x="87.7303%" y="239.50">link</text></g><g><title>parse_crate (3,566,250 samples, 0.37%)</title><rect x="99.3629%" y="229" width="0.3710%" height="15" fill="rgb(247,143,39)"/><text x="99.6129%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,921,911 samples, 0.20%)</title><rect x="99.7548%" y="229" width="0.1999%" height="15" fill="rgb(236,97,10)"/><text x="100.0048%" y="239.50"></text></g><g><title>all (961,350,242 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (961,350,242 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>