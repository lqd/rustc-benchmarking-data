<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,732,105 samples, 10.80%)</title><rect x="0.5439%" y="181" width="10.8007%" height="15" fill="rgb(227,0,7)"/><text x="0.7939%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (250,193 samples, 0.21%)</title><rect x="11.1323%" y="165" width="0.2122%" height="15" fill="rgb(217,0,24)"/><text x="11.3823%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (235,443 samples, 0.20%)</title><rect x="11.1448%" y="149" width="0.1997%" height="15" fill="rgb(221,193,54)"/><text x="11.3948%" y="159.50"></text></g><g><title>param_env (185,902 samples, 0.16%)</title><rect x="16.6258%" y="101" width="0.1577%" height="15" fill="rgb(248,212,6)"/><text x="16.8758%" y="111.50"></text></g><g><title>item_attrs (233,241 samples, 0.20%)</title><rect x="17.0314%" y="69" width="0.1979%" height="15" fill="rgb(208,68,35)"/><text x="17.2814%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (226,321 samples, 0.19%)</title><rect x="17.0373%" y="53" width="0.1920%" height="15" fill="rgb(232,128,0)"/><text x="17.2873%" y="63.50"></text></g><g><title>codegen_fn_attrs (296,871 samples, 0.25%)</title><rect x="16.9830%" y="85" width="0.2518%" height="15" fill="rgb(207,160,47)"/><text x="17.2330%" y="95.50"></text></g><g><title>adt_drop_tys (183,642 samples, 0.16%)</title><rect x="18.1619%" y="53" width="0.1558%" height="15" fill="rgb(228,23,34)"/><text x="18.4119%" y="63.50"></text></g><g><title>needs_drop_raw (781,117 samples, 0.66%)</title><rect x="18.0897%" y="69" width="0.6626%" height="15" fill="rgb(218,30,26)"/><text x="18.3397%" y="79.50"></text></g><g><title>is_copy_raw (512,373 samples, 0.43%)</title><rect x="18.3177%" y="53" width="0.4346%" height="15" fill="rgb(220,122,19)"/><text x="18.5677%" y="63.50"></text></g><g><title>evaluate_obligation (402,802 samples, 0.34%)</title><rect x="18.4107%" y="37" width="0.3417%" height="15" fill="rgb(250,228,42)"/><text x="18.6607%" y="47.50"></text></g><g><title>resolve_instance (336,063 samples, 0.29%)</title><rect x="18.7524%" y="69" width="0.2851%" height="15" fill="rgb(240,193,28)"/><text x="19.0024%" y="79.50"></text></g><g><title>thir_body (300,364 samples, 0.25%)</title><rect x="19.0494%" y="69" width="0.2548%" height="15" fill="rgb(216,20,37)"/><text x="19.2994%" y="79.50"></text></g><g><title>mir_const (3,576,446 samples, 3.03%)</title><rect x="16.2811%" y="117" width="3.0339%" height="15" fill="rgb(206,188,39)"/><text x="16.5311%" y="127.50">mir..</text></g><g><title>unsafety_check_result (2,984,209 samples, 2.53%)</title><rect x="16.7835%" y="101" width="2.5315%" height="15" fill="rgb(217,207,13)"/><text x="17.0335%" y="111.50">un..</text></g><g><title>mir_built (2,452,184 samples, 2.08%)</title><rect x="17.2348%" y="85" width="2.0802%" height="15" fill="rgb(231,73,38)"/><text x="17.4848%" y="95.50">m..</text></g><g><title>mir_promoted (3,963,143 samples, 3.36%)</title><rect x="15.9734%" y="133" width="3.3620%" height="15" fill="rgb(225,20,46)"/><text x="16.2234%" y="143.50">mir..</text></g><g><title>type_op_prove_predicate (1,168,273 samples, 0.99%)</title><rect x="19.5113%" y="133" width="0.9911%" height="15" fill="rgb(210,31,41)"/><text x="19.7613%" y="143.50"></text></g><g><title>MIR_borrow_checking (10,536,132 samples, 8.94%)</title><rect x="11.5664%" y="165" width="8.9379%" height="15" fill="rgb(221,200,47)"/><text x="11.8164%" y="175.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (10,472,531 samples, 8.88%)</title><rect x="11.6203%" y="149" width="8.8839%" height="15" fill="rgb(226,26,5)"/><text x="11.8703%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (192,082 samples, 0.16%)</title><rect x="20.5152%" y="165" width="0.1629%" height="15" fill="rgb(249,33,26)"/><text x="20.7652%" y="175.50"></text></g><g><title>get_lang_items (118,091 samples, 0.10%)</title><rect x="21.1005%" y="85" width="0.1002%" height="15" fill="rgb(235,183,28)"/><text x="21.3505%" y="95.50"></text></g><g><title>codegen_fn_attrs (292,043 samples, 0.25%)</title><rect x="21.0651%" y="101" width="0.2477%" height="15" fill="rgb(221,5,38)"/><text x="21.3151%" y="111.50"></text></g><g><title>codegen_fn_attrs (526,366 samples, 0.45%)</title><rect x="20.8745%" y="133" width="0.4465%" height="15" fill="rgb(247,18,42)"/><text x="21.1245%" y="143.50"></text></g><g><title>should_inherit_track_caller (457,956 samples, 0.39%)</title><rect x="20.9325%" y="117" width="0.3885%" height="15" fill="rgb(241,131,45)"/><text x="21.1825%" y="127.50"></text></g><g><title>check_mod_attrs (731,008 samples, 0.62%)</title><rect x="20.7014%" y="149" width="0.6201%" height="15" fill="rgb(249,31,29)"/><text x="20.9514%" y="159.50"></text></g><g><title>lookup_deprecation_entry (160,281 samples, 0.14%)</title><rect x="21.6214%" y="133" width="0.1360%" height="15" fill="rgb(225,111,53)"/><text x="21.8714%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (455,275 samples, 0.39%)</title><rect x="21.4627%" y="149" width="0.3862%" height="15" fill="rgb(238,160,17)"/><text x="21.7127%" y="159.50"></text></g><g><title>misc_checking_1 (1,440,285 samples, 1.22%)</title><rect x="20.6784%" y="165" width="1.2218%" height="15" fill="rgb(214,148,48)"/><text x="20.9284%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (166,232 samples, 0.14%)</title><rect x="21.9013%" y="149" width="0.1410%" height="15" fill="rgb(232,36,49)"/><text x="22.1513%" y="159.50"></text></g><g><title>check_mod_liveness (137,432 samples, 0.12%)</title><rect x="21.9257%" y="133" width="0.1166%" height="15" fill="rgb(209,103,24)"/><text x="22.1757%" y="143.50"></text></g><g><title>misc_checking_2 (390,854 samples, 0.33%)</title><rect x="21.9002%" y="165" width="0.3316%" height="15" fill="rgb(229,88,8)"/><text x="22.1502%" y="175.50"></text></g><g><title>match_checking (223,342 samples, 0.19%)</title><rect x="22.0423%" y="149" width="0.1895%" height="15" fill="rgb(213,181,19)"/><text x="22.2923%" y="159.50"></text></g><g><title>check_match (207,162 samples, 0.18%)</title><rect x="22.0560%" y="133" width="0.1757%" height="15" fill="rgb(254,191,54)"/><text x="22.3060%" y="143.50"></text></g><g><title>death_checking (159,852 samples, 0.14%)</title><rect x="22.3091%" y="149" width="0.1356%" height="15" fill="rgb(241,83,37)"/><text x="22.5591%" y="159.50"></text></g><g><title>crate_lints (1,501,866 samples, 1.27%)</title><rect x="22.4460%" y="133" width="1.2740%" height="15" fill="rgb(233,36,39)"/><text x="22.6960%" y="143.50"></text></g><g><title>type_of (994,602 samples, 0.84%)</title><rect x="22.8763%" y="117" width="0.8437%" height="15" fill="rgb(226,3,54)"/><text x="23.1263%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (752,340 samples, 0.64%)</title><rect x="23.0818%" y="101" width="0.6382%" height="15" fill="rgb(245,192,40)"/><text x="23.3318%" y="111.50"></text></g><g><title>lint_checking (1,646,938 samples, 1.40%)</title><rect x="22.4447%" y="149" width="1.3971%" height="15" fill="rgb(238,167,29)"/><text x="22.6947%" y="159.50"></text></g><g><title>module_lints (143,602 samples, 0.12%)</title><rect x="23.7200%" y="133" width="0.1218%" height="15" fill="rgb(232,182,51)"/><text x="23.9700%" y="143.50"></text></g><g><title>lint_mod (141,402 samples, 0.12%)</title><rect x="23.7219%" y="117" width="0.1200%" height="15" fill="rgb(231,60,39)"/><text x="23.9719%" y="127.50"></text></g><g><title>privacy_checking_modules (286,243 samples, 0.24%)</title><rect x="23.9287%" y="149" width="0.2428%" height="15" fill="rgb(208,69,12)"/><text x="24.1787%" y="159.50"></text></g><g><title>check_mod_privacy (284,673 samples, 0.24%)</title><rect x="23.9300%" y="133" width="0.2415%" height="15" fill="rgb(235,93,37)"/><text x="24.1800%" y="143.50"></text></g><g><title>misc_checking_3 (2,294,515 samples, 1.95%)</title><rect x="22.2318%" y="165" width="1.9465%" height="15" fill="rgb(213,116,39)"/><text x="22.4818%" y="175.50">m..</text></g><g><title>impl_parent (1,253,364 samples, 1.06%)</title><rect x="25.8304%" y="101" width="1.0632%" height="15" fill="rgb(222,207,29)"/><text x="26.0804%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (800,048 samples, 0.68%)</title><rect x="26.2150%" y="85" width="0.6787%" height="15" fill="rgb(206,96,30)"/><text x="26.4650%" y="95.50"></text></g><g><title>impl_trait_ref (4,406,297 samples, 3.74%)</title><rect x="26.8937%" y="101" width="3.7379%" height="15" fill="rgb(218,138,4)"/><text x="27.1437%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,960,436 samples, 3.36%)</title><rect x="27.2719%" y="85" width="3.3597%" height="15" fill="rgb(250,191,14)"/><text x="27.5219%" y="95.50">met..</text></g><g><title>coherent_trait (8,175,737 samples, 6.94%)</title><rect x="24.2223%" y="133" width="6.9355%" height="15" fill="rgb(239,60,40)"/><text x="24.4723%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (8,159,887 samples, 6.92%)</title><rect x="24.2358%" y="117" width="6.9221%" height="15" fill="rgb(206,27,48)"/><text x="24.4858%" y="127.50">specializ..</text></g><g><title>trait_impls_of (618,266 samples, 0.52%)</title><rect x="30.6334%" y="101" width="0.5245%" height="15" fill="rgb(225,35,8)"/><text x="30.8834%" y="111.50"></text></g><g><title>implementations_of_trait (153,453 samples, 0.13%)</title><rect x="31.0277%" y="85" width="0.1302%" height="15" fill="rgb(250,213,24)"/><text x="31.2777%" y="95.50"></text></g><g><title>coherence_checking (8,255,598 samples, 7.00%)</title><rect x="24.2074%" y="149" width="7.0033%" height="15" fill="rgb(247,123,22)"/><text x="24.4574%" y="159.50">coherence..</text></g><g><title>adt_sized_constraint (145,113 samples, 0.12%)</title><rect x="35.0082%" y="101" width="0.1231%" height="15" fill="rgb(231,138,38)"/><text x="35.2582%" y="111.50"></text></g><g><title>adt_dtorck_constraint (162,732 samples, 0.14%)</title><rect x="35.4540%" y="53" width="0.1380%" height="15" fill="rgb(231,145,46)"/><text x="35.7040%" y="63.50"></text></g><g><title>adt_dtorck_constraint (181,872 samples, 0.15%)</title><rect x="35.4433%" y="69" width="0.1543%" height="15" fill="rgb(251,118,11)"/><text x="35.6933%" y="79.50"></text></g><g><title>adt_dtorck_constraint (361,874 samples, 0.31%)</title><rect x="35.3186%" y="85" width="0.3070%" height="15" fill="rgb(217,147,25)"/><text x="35.5686%" y="95.50"></text></g><g><title>dropck_outlives (479,084 samples, 0.41%)</title><rect x="35.2257%" y="101" width="0.4064%" height="15" fill="rgb(247,81,37)"/><text x="35.4757%" y="111.50"></text></g><g><title>adt_def (139,701 samples, 0.12%)</title><rect x="35.7534%" y="53" width="0.1185%" height="15" fill="rgb(209,12,38)"/><text x="36.0034%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (139,081 samples, 0.12%)</title><rect x="35.7539%" y="37" width="0.1180%" height="15" fill="rgb(227,1,9)"/><text x="36.0039%" y="47.50"></text></g><g><title>adt_sized_constraint (148,671 samples, 0.13%)</title><rect x="35.7511%" y="69" width="0.1261%" height="15" fill="rgb(248,47,43)"/><text x="36.0011%" y="79.50"></text></g><g><title>adt_sized_constraint (177,431 samples, 0.15%)</title><rect x="35.7288%" y="85" width="0.1505%" height="15" fill="rgb(221,10,30)"/><text x="35.9788%" y="95.50"></text></g><g><title>evaluate_obligation (341,605 samples, 0.29%)</title><rect x="35.6321%" y="101" width="0.2898%" height="15" fill="rgb(210,229,1)"/><text x="35.8821%" y="111.50"></text></g><g><title>method_autoderef_steps (218,401 samples, 0.19%)</title><rect x="36.1061%" y="101" width="0.1853%" height="15" fill="rgb(222,148,37)"/><text x="36.3561%" y="111.50"></text></g><g><title>object_safety_violations (137,522 samples, 0.12%)</title><rect x="36.2914%" y="101" width="0.1167%" height="15" fill="rgb(234,67,33)"/><text x="36.5414%" y="111.50"></text></g><g><title>predicates_of (127,120 samples, 0.11%)</title><rect x="36.4267%" y="101" width="0.1078%" height="15" fill="rgb(247,98,35)"/><text x="36.6767%" y="111.50"></text></g><g><title>dropck_outlives (136,842 samples, 0.12%)</title><rect x="39.5640%" y="85" width="0.1161%" height="15" fill="rgb(247,138,52)"/><text x="39.8140%" y="95.50"></text></g><g><title>evaluate_obligation (218,712 samples, 0.19%)</title><rect x="39.6801%" y="85" width="0.1855%" height="15" fill="rgb(213,79,30)"/><text x="39.9301%" y="95.50"></text></g><g><title>is_copy_raw (170,582 samples, 0.14%)</title><rect x="39.9997%" y="85" width="0.1447%" height="15" fill="rgb(246,177,23)"/><text x="40.2497%" y="95.50"></text></g><g><title>evaluate_obligation (165,221 samples, 0.14%)</title><rect x="40.0043%" y="69" width="0.1402%" height="15" fill="rgb(230,62,27)"/><text x="40.2543%" y="79.50"></text></g><g><title>trait_impls_of (153,761 samples, 0.13%)</title><rect x="40.0140%" y="53" width="0.1304%" height="15" fill="rgb(216,154,8)"/><text x="40.2640%" y="63.50"></text></g><g><title>method_autoderef_steps (224,863 samples, 0.19%)</title><rect x="40.1610%" y="85" width="0.1908%" height="15" fill="rgb(244,35,45)"/><text x="40.4110%" y="95.50"></text></g><g><title>predicates_of (314,015 samples, 0.27%)</title><rect x="40.3603%" y="85" width="0.2664%" height="15" fill="rgb(251,115,12)"/><text x="40.6103%" y="95.50"></text></g><g><title>typeck (4,803,670 samples, 4.07%)</title><rect x="36.5776%" y="101" width="4.0750%" height="15" fill="rgb(240,54,50)"/><text x="36.8276%" y="111.50">type..</text></g><g><title>item_bodies_checking (11,099,707 samples, 9.42%)</title><rect x="31.2512%" y="149" width="9.4159%" height="15" fill="rgb(233,84,52)"/><text x="31.5012%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (11,097,807 samples, 9.41%)</title><rect x="31.2529%" y="133" width="9.4143%" height="15" fill="rgb(207,117,47)"/><text x="31.5029%" y="143.50">typeck_item_b..</text></g><g><title>typeck (11,060,606 samples, 9.38%)</title><rect x="31.2844%" y="117" width="9.3828%" height="15" fill="rgb(249,43,39)"/><text x="31.5344%" y="127.50">typeck</text></g><g><title>impl_trait_ref (200,703 samples, 0.17%)</title><rect x="41.1520%" y="69" width="0.1703%" height="15" fill="rgb(209,38,44)"/><text x="41.4020%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (180,732 samples, 0.15%)</title><rect x="41.1689%" y="53" width="0.1533%" height="15" fill="rgb(236,212,23)"/><text x="41.4189%" y="63.50"></text></g><g><title>adt_destructor (382,644 samples, 0.32%)</title><rect x="41.0262%" y="117" width="0.3246%" height="15" fill="rgb(242,79,21)"/><text x="41.2762%" y="127.50"></text></g><g><title>coherent_trait (376,804 samples, 0.32%)</title><rect x="41.0312%" y="101" width="0.3196%" height="15" fill="rgb(211,96,35)"/><text x="41.2812%" y="111.50"></text></g><g><title>specialization_graph_of (375,294 samples, 0.32%)</title><rect x="41.0325%" y="85" width="0.3184%" height="15" fill="rgb(253,215,40)"/><text x="41.2825%" y="95.50"></text></g><g><title>item_types_checking (911,260 samples, 0.77%)</title><rect x="40.6672%" y="149" width="0.7730%" height="15" fill="rgb(211,81,21)"/><text x="40.9172%" y="159.50"></text></g><g><title>check_mod_item_types (909,240 samples, 0.77%)</title><rect x="40.6689%" y="133" width="0.7713%" height="15" fill="rgb(208,190,38)"/><text x="40.9189%" y="143.50"></text></g><g><title>fn_sig (383,793 samples, 0.33%)</title><rect x="41.7109%" y="117" width="0.3256%" height="15" fill="rgb(235,213,38)"/><text x="41.9609%" y="127.50"></text></g><g><title>is_late_bound_map (255,273 samples, 0.22%)</title><rect x="42.1819%" y="101" width="0.2165%" height="15" fill="rgb(237,122,38)"/><text x="42.4319%" y="111.50"></text></g><g><title>resolve_lifetimes (234,873 samples, 0.20%)</title><rect x="42.1992%" y="85" width="0.1992%" height="15" fill="rgb(244,218,35)"/><text x="42.4492%" y="95.50"></text></g><g><title>generics_of (515,375 samples, 0.44%)</title><rect x="42.0364%" y="117" width="0.4372%" height="15" fill="rgb(240,68,47)"/><text x="42.2864%" y="127.50"></text></g><g><title>late_bound_vars_map (196,432 samples, 0.17%)</title><rect x="42.8917%" y="69" width="0.1666%" height="15" fill="rgb(210,16,53)"/><text x="43.1417%" y="79.50"></text></g><g><title>resolve_lifetimes (191,292 samples, 0.16%)</title><rect x="42.8961%" y="53" width="0.1623%" height="15" fill="rgb(235,124,12)"/><text x="43.1461%" y="63.50"></text></g><g><title>explicit_predicates_of (446,186 samples, 0.38%)</title><rect x="42.6922%" y="85" width="0.3785%" height="15" fill="rgb(224,169,11)"/><text x="42.9422%" y="95.50"></text></g><g><title>predicates_of (1,149,474 samples, 0.98%)</title><rect x="42.5284%" y="117" width="0.9751%" height="15" fill="rgb(250,166,2)"/><text x="42.7784%" y="127.50"></text></g><g><title>predicates_defined_on (1,088,243 samples, 0.92%)</title><rect x="42.5804%" y="101" width="0.9232%" height="15" fill="rgb(242,216,29)"/><text x="42.8304%" y="111.50"></text></g><g><title>inferred_outlives_of (510,236 samples, 0.43%)</title><rect x="43.0707%" y="85" width="0.4328%" height="15" fill="rgb(230,116,27)"/><text x="43.3207%" y="95.50"></text></g><g><title>inferred_outlives_crate (479,176 samples, 0.41%)</title><rect x="43.0970%" y="69" width="0.4065%" height="15" fill="rgb(228,99,48)"/><text x="43.3470%" y="79.50"></text></g><g><title>type_of (259,921 samples, 0.22%)</title><rect x="43.2830%" y="53" width="0.2205%" height="15" fill="rgb(253,11,6)"/><text x="43.5330%" y="63.50"></text></g><g><title>type_collecting (2,627,508 samples, 2.23%)</title><rect x="41.4410%" y="149" width="2.2289%" height="15" fill="rgb(247,143,39)"/><text x="41.6910%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,616,958 samples, 2.22%)</title><rect x="41.4500%" y="133" width="2.2200%" height="15" fill="rgb(236,97,10)"/><text x="41.7000%" y="143.50">c..</text></g><g><title>type_of (196,181 samples, 0.17%)</title><rect x="43.5035%" y="117" width="0.1664%" height="15" fill="rgb(233,208,19)"/><text x="43.7535%" y="127.50"></text></g><g><title>evaluate_obligation (402,155 samples, 0.34%)</title><rect x="44.6430%" y="117" width="0.3412%" height="15" fill="rgb(216,164,2)"/><text x="44.8930%" y="127.50"></text></g><g><title>implied_outlives_bounds (192,313 samples, 0.16%)</title><rect x="44.9842%" y="117" width="0.1631%" height="15" fill="rgb(220,129,5)"/><text x="45.2342%" y="127.50"></text></g><g><title>param_env (136,791 samples, 0.12%)</title><rect x="45.1473%" y="117" width="0.1160%" height="15" fill="rgb(242,17,10)"/><text x="45.3973%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,933,842 samples, 1.64%)</title><rect x="43.7484%" y="133" width="1.6405%" height="15" fill="rgb(242,107,0)"/><text x="43.9984%" y="143.50"></text></g><g><title>region_scope_tree (126,561 samples, 0.11%)</title><rect x="45.2816%" y="117" width="0.1074%" height="15" fill="rgb(251,28,31)"/><text x="45.5316%" y="127.50"></text></g><g><title>param_env (191,841 samples, 0.16%)</title><rect x="45.9708%" y="117" width="0.1627%" height="15" fill="rgb(233,223,10)"/><text x="46.2208%" y="127.50"></text></g><g><title>analysis (41,127,348 samples, 34.89%)</title><rect x="11.3446%" y="181" width="34.8886%" height="15" fill="rgb(215,21,27)"/><text x="11.5946%" y="191.50">analysis</text></g><g><title>type_check_crate (25,998,807 samples, 22.05%)</title><rect x="24.1782%" y="165" width="22.0549%" height="15" fill="rgb(232,23,21)"/><text x="24.4282%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,018,772 samples, 2.56%)</title><rect x="43.6723%" y="149" width="2.5608%" height="15" fill="rgb(244,5,23)"/><text x="43.9223%" y="159.50">wf..</text></g><g><title>check_item_well_formed (995,209 samples, 0.84%)</title><rect x="45.3889%" y="133" width="0.8442%" height="15" fill="rgb(226,81,46)"/><text x="45.6389%" y="143.50"></text></g><g><title>is_unpin_raw (152,512 samples, 0.13%)</title><rect x="48.2841%" y="133" width="0.1294%" height="15" fill="rgb(247,70,30)"/><text x="48.5341%" y="143.50"></text></g><g><title>evaluate_obligation (139,962 samples, 0.12%)</title><rect x="48.2947%" y="117" width="0.1187%" height="15" fill="rgb(212,68,19)"/><text x="48.5447%" y="127.50"></text></g><g><title>fn_abi_of_instance (578,576 samples, 0.49%)</title><rect x="48.0727%" y="149" width="0.4908%" height="15" fill="rgb(240,187,13)"/><text x="48.3227%" y="159.50"></text></g><g><title>param_env (128,050 samples, 0.11%)</title><rect x="48.4549%" y="133" width="0.1086%" height="15" fill="rgb(223,113,26)"/><text x="48.7049%" y="143.50"></text></g><g><title>codegen_module (2,038,951 samples, 1.73%)</title><rect x="46.9245%" y="165" width="1.7297%" height="15" fill="rgb(206,192,2)"/><text x="47.1745%" y="175.50"></text></g><g><title>optimized_mir (307,813 samples, 0.26%)</title><rect x="48.8605%" y="117" width="0.2611%" height="15" fill="rgb(241,108,4)"/><text x="49.1105%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (664,087 samples, 0.56%)</title><rect x="48.6849%" y="133" width="0.5633%" height="15" fill="rgb(247,173,49)"/><text x="48.9349%" y="143.50"></text></g><g><title>monomorphization_collector (686,847 samples, 0.58%)</title><rect x="48.6831%" y="149" width="0.5827%" height="15" fill="rgb(224,114,35)"/><text x="48.9331%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (801,719 samples, 0.68%)</title><rect x="48.6557%" y="165" width="0.6801%" height="15" fill="rgb(245,159,27)"/><text x="48.9057%" y="175.50"></text></g><g><title>codegen_crate (3,714,819 samples, 3.15%)</title><rect x="46.2444%" y="181" width="3.1513%" height="15" fill="rgb(245,172,44)"/><text x="46.4944%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (9,714,884 samples, 8.24%)</title><rect x="49.3957%" y="181" width="8.2412%" height="15" fill="rgb(236,23,11)"/><text x="49.6457%" y="191.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (6,473,529 samples, 5.49%)</title><rect x="52.1454%" y="165" width="5.4915%" height="15" fill="rgb(205,117,38)"/><text x="52.3954%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_lto_optimize (2,565,318 samples, 2.18%)</title><rect x="58.2348%" y="165" width="2.1762%" height="15" fill="rgb(237,72,25)"/><text x="58.4848%" y="175.50">L..</text></g><g><title>LLVM_module_codegen (7,608,850 samples, 6.45%)</title><rect x="60.4110%" y="165" width="6.4546%" height="15" fill="rgb(244,70,9)"/><text x="60.6610%" y="175.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (7,459,408 samples, 6.33%)</title><rect x="60.5378%" y="149" width="6.3279%" height="15" fill="rgb(217,125,39)"/><text x="60.7878%" y="159.50">LLVM_mod..</text></g><g><title>codegen_module_perform_lto (10,948,366 samples, 9.29%)</title><rect x="57.6369%" y="181" width="9.2876%" height="15" fill="rgb(235,36,10)"/><text x="57.8869%" y="191.50">codegen_modul..</text></g><g><title>AST_validation (149,741 samples, 0.13%)</title><rect x="67.0798%" y="165" width="0.1270%" height="15" fill="rgb(251,123,47)"/><text x="67.3298%" y="175.50"></text></g><g><title>macro_expand_crate (13,041,079 samples, 11.06%)</title><rect x="67.3225%" y="165" width="11.0628%" height="15" fill="rgb(221,13,13)"/><text x="67.5725%" y="175.50">macro_expand_cra..</text></g><g><title>expand_crate (13,018,419 samples, 11.04%)</title><rect x="67.3417%" y="149" width="11.0436%" height="15" fill="rgb(238,131,9)"/><text x="67.5917%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,704,449 samples, 2.29%)</title><rect x="76.0911%" y="133" width="2.2942%" height="15" fill="rgb(211,50,8)"/><text x="76.3411%" y="143.50">m..</text></g><g><title>metadata_register_crate (988,600 samples, 0.84%)</title><rect x="77.5467%" y="117" width="0.8386%" height="15" fill="rgb(245,182,24)"/><text x="77.7967%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (178,932 samples, 0.15%)</title><rect x="78.3888%" y="165" width="0.1518%" height="15" fill="rgb(242,14,37)"/><text x="78.6388%" y="175.50"></text></g><g><title>late_resolve_crate (1,821,569 samples, 1.55%)</title><rect x="78.6309%" y="149" width="1.5452%" height="15" fill="rgb(246,228,12)"/><text x="78.8809%" y="159.50"></text></g><g><title>configure_and_expand (15,718,858 samples, 13.33%)</title><rect x="66.9245%" y="181" width="13.3344%" height="15" fill="rgb(213,55,15)"/><text x="67.1745%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,025,611 samples, 1.72%)</title><rect x="78.5405%" y="165" width="1.7183%" height="15" fill="rgb(209,9,3)"/><text x="78.7905%" y="175.50"></text></g><g><title>drop_ast (145,992 samples, 0.12%)</title><rect x="80.2589%" y="181" width="0.1238%" height="15" fill="rgb(230,59,30)"/><text x="80.5089%" y="191.50"></text></g><g><title>early_lint_checks (266,012 samples, 0.23%)</title><rect x="80.3930%" y="181" width="0.2257%" height="15" fill="rgb(209,121,21)"/><text x="80.6430%" y="191.50"></text></g><g><title>free_global_ctxt (3,617,119 samples, 3.07%)</title><rect x="80.6186%" y="181" width="3.0684%" height="15" fill="rgb(220,109,13)"/><text x="80.8686%" y="191.50">fre..</text></g><g><title>layout_of (243,304 samples, 0.21%)</title><rect x="85.9370%" y="117" width="0.2064%" height="15" fill="rgb(232,18,1)"/><text x="86.1870%" y="127.50"></text></g><g><title>layout_of (329,755 samples, 0.28%)</title><rect x="85.8680%" y="133" width="0.2797%" height="15" fill="rgb(215,41,42)"/><text x="86.1180%" y="143.50"></text></g><g><title>layout_of (580,915 samples, 0.49%)</title><rect x="85.6659%" y="149" width="0.4928%" height="15" fill="rgb(224,123,36)"/><text x="85.9159%" y="159.50"></text></g><g><title>needs_drop_raw (404,172 samples, 0.34%)</title><rect x="87.4994%" y="133" width="0.3429%" height="15" fill="rgb(240,125,3)"/><text x="87.7494%" y="143.50"></text></g><g><title>is_copy_raw (351,372 samples, 0.30%)</title><rect x="87.5441%" y="117" width="0.2981%" height="15" fill="rgb(205,98,50)"/><text x="87.7941%" y="127.50"></text></g><g><title>evaluate_obligation (283,642 samples, 0.24%)</title><rect x="87.6016%" y="101" width="0.2406%" height="15" fill="rgb(205,185,37)"/><text x="87.8516%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,996,305 samples, 1.69%)</title><rect x="86.1587%" y="149" width="1.6935%" height="15" fill="rgb(238,207,15)"/><text x="86.4087%" y="159.50"></text></g><g><title>optimized_mir (3,909,962 samples, 3.32%)</title><rect x="84.5606%" y="165" width="3.3168%" height="15" fill="rgb(213,199,42)"/><text x="84.8106%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (4,976,853 samples, 4.22%)</title><rect x="83.6870%" y="181" width="4.2219%" height="15" fill="rgb(235,201,11)"/><text x="83.9370%" y="191.50">gener..</text></g><g><title>hir_lowering (2,120,523 samples, 1.80%)</title><rect x="87.9089%" y="181" width="1.7989%" height="15" fill="rgb(207,46,11)"/><text x="88.1589%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (7,096,225 samples, 6.02%)</title><rect x="89.7220%" y="165" width="6.0198%" height="15" fill="rgb(241,35,35)"/><text x="89.9720%" y="175.50">finish_o..</text></g><g><title>link_crate (738,437 samples, 0.63%)</title><rect x="95.7418%" y="165" width="0.6264%" height="15" fill="rgb(243,32,47)"/><text x="95.9918%" y="175.50"></text></g><g><title>link_binary (728,047 samples, 0.62%)</title><rect x="95.7506%" y="149" width="0.6176%" height="15" fill="rgb(247,202,23)"/><text x="96.0006%" y="159.50"></text></g><g><title>link_rlib (436,215 samples, 0.37%)</title><rect x="95.9982%" y="133" width="0.3700%" height="15" fill="rgb(219,102,11)"/><text x="96.2482%" y="143.50"></text></g><g><title>link (7,858,613 samples, 6.67%)</title><rect x="89.7078%" y="181" width="6.6665%" height="15" fill="rgb(243,110,44)"/><text x="89.9578%" y="191.50">link</text></g><g><title>parse_crate (2,626,087 samples, 2.23%)</title><rect x="96.3743%" y="181" width="2.2277%" height="15" fill="rgb(222,74,54)"/><text x="96.6243%" y="191.50">p..</text></g><g><title>prepare_outputs (371,544 samples, 0.32%)</title><rect x="98.6086%" y="181" width="0.3152%" height="15" fill="rgb(216,99,12)"/><text x="98.8586%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (787,198 samples, 0.67%)</title><rect x="98.9237%" y="181" width="0.6678%" height="15" fill="rgb(226,22,26)"/><text x="99.1737%" y="191.50"></text></g><g><title>setup_global_ctxt (127,261 samples, 0.11%)</title><rect x="99.5985%" y="181" width="0.1080%" height="15" fill="rgb(217,163,10)"/><text x="99.8485%" y="191.50"></text></g><g><title>all (117,881,983 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (117,881,983 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (346,053 samples, 0.29%)</title><rect x="99.7064%" y="181" width="0.2936%" height="15" fill="rgb(220,39,43)"/><text x="99.9564%" y="191.50"></text></g></svg></svg>