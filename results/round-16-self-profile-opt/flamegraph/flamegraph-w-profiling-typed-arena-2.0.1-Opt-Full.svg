<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,963,677 samples, 7.76%)</title><rect x="0.5130%" y="197" width="7.7563%" height="15" fill="rgb(227,0,7)"/><text x="0.7630%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (109,071 samples, 0.12%)</title><rect x="8.1479%" y="181" width="0.1215%" height="15" fill="rgb(217,0,24)"/><text x="8.3979%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (98,701 samples, 0.11%)</title><rect x="8.1594%" y="165" width="0.1099%" height="15" fill="rgb(221,193,54)"/><text x="8.4094%" y="175.50"></text></g><g><title>param_env (278,893 samples, 0.31%)</title><rect x="16.9943%" y="117" width="0.3106%" height="15" fill="rgb(248,212,6)"/><text x="17.2443%" y="127.50"></text></g><g><title>item_attrs (308,327 samples, 0.34%)</title><rect x="17.6837%" y="85" width="0.3434%" height="15" fill="rgb(208,68,35)"/><text x="17.9337%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (299,056 samples, 0.33%)</title><rect x="17.6940%" y="69" width="0.3331%" height="15" fill="rgb(232,128,0)"/><text x="17.9440%" y="79.50"></text></g><g><title>codegen_fn_attrs (406,698 samples, 0.45%)</title><rect x="17.5868%" y="101" width="0.4530%" height="15" fill="rgb(207,160,47)"/><text x="17.8368%" y="111.50"></text></g><g><title>is_copy_raw (99,200 samples, 0.11%)</title><rect x="19.7212%" y="53" width="0.1105%" height="15" fill="rgb(228,23,34)"/><text x="19.9712%" y="63.50"></text></g><g><title>adt_drop_tys (246,830 samples, 0.27%)</title><rect x="19.6442%" y="69" width="0.2749%" height="15" fill="rgb(218,30,26)"/><text x="19.8942%" y="79.50"></text></g><g><title>needs_drop_raw (692,876 samples, 0.77%)</title><rect x="19.5654%" y="85" width="0.7717%" height="15" fill="rgb(220,122,19)"/><text x="19.8154%" y="95.50"></text></g><g><title>is_copy_raw (375,274 samples, 0.42%)</title><rect x="19.9191%" y="69" width="0.4180%" height="15" fill="rgb(250,228,42)"/><text x="20.1691%" y="79.50"></text></g><g><title>evaluate_obligation (299,471 samples, 0.33%)</title><rect x="20.0036%" y="53" width="0.3336%" height="15" fill="rgb(240,193,28)"/><text x="20.2536%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (162,840 samples, 0.18%)</title><rect x="20.5047%" y="69" width="0.1814%" height="15" fill="rgb(216,20,37)"/><text x="20.7547%" y="79.50"></text></g><g><title>specialization_graph_of (296,954 samples, 0.33%)</title><rect x="20.7167%" y="69" width="0.3308%" height="15" fill="rgb(206,188,39)"/><text x="20.9667%" y="79.50"></text></g><g><title>impl_trait_ref (134,242 samples, 0.15%)</title><rect x="20.8979%" y="53" width="0.1495%" height="15" fill="rgb(217,207,13)"/><text x="21.1479%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (114,072 samples, 0.13%)</title><rect x="20.9204%" y="37" width="0.1271%" height="15" fill="rgb(231,73,38)"/><text x="21.1704%" y="47.50"></text></g><g><title>resolve_instance (732,298 samples, 0.82%)</title><rect x="20.3371%" y="85" width="0.8157%" height="15" fill="rgb(225,20,46)"/><text x="20.5871%" y="95.50"></text></g><g><title>thir_body (548,446 samples, 0.61%)</title><rect x="21.1652%" y="85" width="0.6109%" height="15" fill="rgb(210,31,41)"/><text x="21.4152%" y="95.50"></text></g><g><title>mir_const (4,733,242 samples, 5.27%)</title><rect x="16.5181%" y="133" width="5.2720%" height="15" fill="rgb(221,200,47)"/><text x="16.7681%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (4,026,814 samples, 4.49%)</title><rect x="17.3050%" y="117" width="4.4852%" height="15" fill="rgb(226,26,5)"/><text x="17.5550%" y="127.50">unsaf..</text></g><g><title>mir_built (3,367,113 samples, 3.75%)</title><rect x="18.0398%" y="101" width="3.7504%" height="15" fill="rgb(249,33,26)"/><text x="18.2898%" y="111.50">mir_..</text></g><g><title>mir_promoted (5,295,210 samples, 5.90%)</title><rect x="16.1133%" y="149" width="5.8980%" height="15" fill="rgb(235,183,28)"/><text x="16.3633%" y="159.50">mir_pro..</text></g><g><title>mir_const_qualif (198,483 samples, 0.22%)</title><rect x="21.7901%" y="133" width="0.2211%" height="15" fill="rgb(221,5,38)"/><text x="22.0401%" y="143.50"></text></g><g><title>mir_const (143,471 samples, 0.16%)</title><rect x="21.8514%" y="117" width="0.1598%" height="15" fill="rgb(247,18,42)"/><text x="22.1014%" y="127.50"></text></g><g><title>unsafety_check_result (97,281 samples, 0.11%)</title><rect x="21.9029%" y="101" width="0.1084%" height="15" fill="rgb(241,131,45)"/><text x="22.1529%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (155,933 samples, 0.17%)</title><rect x="22.0112%" y="149" width="0.1737%" height="15" fill="rgb(249,31,29)"/><text x="22.2612%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (543,654 samples, 0.61%)</title><rect x="22.1849%" y="149" width="0.6055%" height="15" fill="rgb(225,111,53)"/><text x="22.4349%" y="159.50"></text></g><g><title>normalize_projection_ty (342,283 samples, 0.38%)</title><rect x="22.4092%" y="133" width="0.3812%" height="15" fill="rgb(238,160,17)"/><text x="22.6592%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,533,948 samples, 1.71%)</title><rect x="22.8630%" y="149" width="1.7086%" height="15" fill="rgb(214,148,48)"/><text x="23.1130%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,475,929 samples, 16.12%)</title><rect x="8.4495%" y="181" width="16.1237%" height="15" fill="rgb(232,36,49)"/><text x="8.6995%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,432,839 samples, 16.08%)</title><rect x="8.4974%" y="165" width="16.0757%" height="15" fill="rgb(209,103,24)"/><text x="8.7474%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (135,702 samples, 0.15%)</title><rect x="24.5732%" y="181" width="0.1511%" height="15" fill="rgb(229,88,8)"/><text x="24.8232%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (102,911 samples, 0.11%)</title><rect x="24.6097%" y="165" width="0.1146%" height="15" fill="rgb(213,181,19)"/><text x="24.8597%" y="175.50"></text></g><g><title>should_inherit_track_caller (113,270 samples, 0.13%)</title><rect x="25.0747%" y="133" width="0.1262%" height="15" fill="rgb(254,191,54)"/><text x="25.3247%" y="143.50"></text></g><g><title>codegen_fn_attrs (237,302 samples, 0.26%)</title><rect x="24.9582%" y="149" width="0.2643%" height="15" fill="rgb(241,83,37)"/><text x="25.2082%" y="159.50"></text></g><g><title>check_mod_attrs (341,364 samples, 0.38%)</title><rect x="24.8425%" y="165" width="0.3802%" height="15" fill="rgb(233,36,39)"/><text x="25.0925%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (220,523 samples, 0.25%)</title><rect x="25.3216%" y="165" width="0.2456%" height="15" fill="rgb(226,3,54)"/><text x="25.5716%" y="175.50"></text></g><g><title>misc_checking_1 (698,147 samples, 0.78%)</title><rect x="24.8248%" y="181" width="0.7776%" height="15" fill="rgb(245,192,40)"/><text x="25.0748%" y="191.50"></text></g><g><title>check_mod_intrinsics (164,932 samples, 0.18%)</title><rect x="25.6087%" y="149" width="0.1837%" height="15" fill="rgb(238,167,29)"/><text x="25.8587%" y="159.50"></text></g><g><title>layout_of (109,391 samples, 0.12%)</title><rect x="25.6706%" y="133" width="0.1218%" height="15" fill="rgb(232,182,51)"/><text x="25.9206%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (387,645 samples, 0.43%)</title><rect x="25.6042%" y="165" width="0.4318%" height="15" fill="rgb(231,60,39)"/><text x="25.8542%" y="175.50"></text></g><g><title>check_mod_liveness (218,713 samples, 0.24%)</title><rect x="25.7924%" y="149" width="0.2436%" height="15" fill="rgb(208,69,12)"/><text x="26.0424%" y="159.50"></text></g><g><title>misc_checking_2 (637,927 samples, 0.71%)</title><rect x="25.6024%" y="181" width="0.7105%" height="15" fill="rgb(235,93,37)"/><text x="25.8524%" y="191.50"></text></g><g><title>match_checking (248,642 samples, 0.28%)</title><rect x="26.0360%" y="165" width="0.2769%" height="15" fill="rgb(213,116,39)"/><text x="26.2860%" y="175.50"></text></g><g><title>check_match (236,622 samples, 0.26%)</title><rect x="26.0494%" y="149" width="0.2636%" height="15" fill="rgb(222,207,29)"/><text x="26.2994%" y="159.50"></text></g><g><title>death_checking (126,751 samples, 0.14%)</title><rect x="26.4140%" y="165" width="0.1412%" height="15" fill="rgb(206,96,30)"/><text x="26.6640%" y="175.50"></text></g><g><title>eval_to_const_value_raw (147,161 samples, 0.16%)</title><rect x="27.1243%" y="133" width="0.1639%" height="15" fill="rgb(218,138,4)"/><text x="27.3743%" y="143.50"></text></g><g><title>eval_to_const_value_raw (137,711 samples, 0.15%)</title><rect x="27.1348%" y="117" width="0.1534%" height="15" fill="rgb(250,191,14)"/><text x="27.3848%" y="127.50"></text></g><g><title>eval_to_allocation_raw (131,551 samples, 0.15%)</title><rect x="27.1417%" y="101" width="0.1465%" height="15" fill="rgb(239,60,40)"/><text x="27.3917%" y="111.50"></text></g><g><title>trait_impls_of (221,892 samples, 0.25%)</title><rect x="27.3554%" y="133" width="0.2471%" height="15" fill="rgb(206,27,48)"/><text x="27.6054%" y="143.50"></text></g><g><title>crate_lints (3,050,554 samples, 3.40%)</title><rect x="26.5570%" y="149" width="3.3978%" height="15" fill="rgb(225,35,8)"/><text x="26.8070%" y="159.50">cra..</text></g><g><title>type_of (2,104,413 samples, 2.34%)</title><rect x="27.6109%" y="133" width="2.3440%" height="15" fill="rgb(250,213,24)"/><text x="27.8609%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (1,857,319 samples, 2.07%)</title><rect x="27.8861%" y="117" width="2.0687%" height="15" fill="rgb(247,123,22)"/><text x="28.1361%" y="127.50">m..</text></g><g><title>lint_checking (3,329,987 samples, 3.71%)</title><rect x="26.5552%" y="165" width="3.7090%" height="15" fill="rgb(231,138,38)"/><text x="26.8052%" y="175.50">lint..</text></g><g><title>module_lints (277,793 samples, 0.31%)</title><rect x="29.9548%" y="149" width="0.3094%" height="15" fill="rgb(231,145,46)"/><text x="30.2048%" y="159.50"></text></g><g><title>lint_mod (275,533 samples, 0.31%)</title><rect x="29.9573%" y="133" width="0.3069%" height="15" fill="rgb(251,118,11)"/><text x="30.2073%" y="143.50"></text></g><g><title>privacy_access_levels (94,641 samples, 0.11%)</title><rect x="30.2642%" y="165" width="0.1054%" height="15" fill="rgb(217,147,25)"/><text x="30.5142%" y="175.50"></text></g><g><title>privacy_checking_modules (370,714 samples, 0.41%)</title><rect x="30.3696%" y="165" width="0.4129%" height="15" fill="rgb(247,81,37)"/><text x="30.6196%" y="175.50"></text></g><g><title>check_mod_privacy (368,474 samples, 0.41%)</title><rect x="30.3721%" y="149" width="0.4104%" height="15" fill="rgb(209,12,38)"/><text x="30.6221%" y="159.50"></text></g><g><title>misc_checking_3 (4,024,165 samples, 4.48%)</title><rect x="26.3129%" y="181" width="4.4822%" height="15" fill="rgb(227,1,9)"/><text x="26.5629%" y="191.50">misc_..</text></g><g><title>impl_parent (397,679 samples, 0.44%)</title><rect x="31.3236%" y="117" width="0.4429%" height="15" fill="rgb(248,47,43)"/><text x="31.5736%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (304,648 samples, 0.34%)</title><rect x="31.4272%" y="101" width="0.3393%" height="15" fill="rgb(221,10,30)"/><text x="31.6772%" y="111.50"></text></g><g><title>impl_trait_ref (1,040,924 samples, 1.16%)</title><rect x="31.7665%" y="117" width="1.1594%" height="15" fill="rgb(210,229,1)"/><text x="32.0165%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (946,704 samples, 1.05%)</title><rect x="31.8714%" y="101" width="1.0545%" height="15" fill="rgb(222,148,37)"/><text x="32.1214%" y="111.50"></text></g><g><title>coherent_trait (1,976,932 samples, 2.20%)</title><rect x="30.8499%" y="149" width="2.2020%" height="15" fill="rgb(234,67,33)"/><text x="31.0999%" y="159.50">c..</text></g><g><title>specialization_graph_of (1,971,462 samples, 2.20%)</title><rect x="30.8560%" y="133" width="2.1959%" height="15" fill="rgb(247,98,35)"/><text x="31.1060%" y="143.50">s..</text></g><g><title>trait_impls_of (113,072 samples, 0.13%)</title><rect x="32.9259%" y="117" width="0.1259%" height="15" fill="rgb(247,138,52)"/><text x="33.1759%" y="127.50"></text></g><g><title>coherence_checking (2,026,512 samples, 2.26%)</title><rect x="30.8330%" y="165" width="2.2572%" height="15" fill="rgb(213,79,30)"/><text x="31.0830%" y="175.50">c..</text></g><g><title>adt_sized_constraint (129,800 samples, 0.14%)</title><rect x="46.1152%" y="117" width="0.1446%" height="15" fill="rgb(246,177,23)"/><text x="46.3652%" y="127.50"></text></g><g><title>associated_item (428,428 samples, 0.48%)</title><rect x="46.4499%" y="101" width="0.4772%" height="15" fill="rgb(230,62,27)"/><text x="46.6999%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (334,067 samples, 0.37%)</title><rect x="46.5550%" y="85" width="0.3721%" height="15" fill="rgb(216,154,8)"/><text x="46.8050%" y="95.50"></text></g><g><title>associated_items (634,469 samples, 0.71%)</title><rect x="46.2635%" y="117" width="0.7067%" height="15" fill="rgb(244,35,45)"/><text x="46.5135%" y="127.50"></text></g><g><title>adt_dtorck_constraint (165,862 samples, 0.18%)</title><rect x="47.2472%" y="85" width="0.1847%" height="15" fill="rgb(251,115,12)"/><text x="47.4972%" y="95.50"></text></g><g><title>adt_dtorck_constraint (249,883 samples, 0.28%)</title><rect x="47.1784%" y="101" width="0.2783%" height="15" fill="rgb(240,54,50)"/><text x="47.4284%" y="111.50"></text></g><g><title>dropck_outlives (377,836 samples, 0.42%)</title><rect x="47.0431%" y="117" width="0.4208%" height="15" fill="rgb(233,84,52)"/><text x="47.2931%" y="127.50"></text></g><g><title>generics_of (341,564 samples, 0.38%)</title><rect x="49.4653%" y="101" width="0.3804%" height="15" fill="rgb(207,117,47)"/><text x="49.7153%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (264,352 samples, 0.29%)</title><rect x="49.5513%" y="85" width="0.2944%" height="15" fill="rgb(249,43,39)"/><text x="49.8013%" y="95.50"></text></g><g><title>impl_trait_ref (511,157 samples, 0.57%)</title><rect x="49.9285%" y="101" width="0.5693%" height="15" fill="rgb(209,38,44)"/><text x="50.1785%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (426,965 samples, 0.48%)</title><rect x="50.0222%" y="85" width="0.4756%" height="15" fill="rgb(236,212,23)"/><text x="50.2722%" y="95.50"></text></g><g><title>predicates_of (499,464 samples, 0.56%)</title><rect x="50.5265%" y="101" width="0.5563%" height="15" fill="rgb(242,79,21)"/><text x="50.7765%" y="111.50"></text></g><g><title>predicates_defined_on (388,483 samples, 0.43%)</title><rect x="50.6501%" y="85" width="0.4327%" height="15" fill="rgb(211,96,35)"/><text x="50.9001%" y="95.50"></text></g><g><title>inferred_outlives_of (268,763 samples, 0.30%)</title><rect x="50.7835%" y="69" width="0.2994%" height="15" fill="rgb(253,215,40)"/><text x="51.0335%" y="79.50"></text></g><g><title>specializes (418,582 samples, 0.47%)</title><rect x="51.0828%" y="101" width="0.4662%" height="15" fill="rgb(211,81,21)"/><text x="51.3328%" y="111.50"></text></g><g><title>param_env (256,722 samples, 0.29%)</title><rect x="51.2631%" y="85" width="0.2859%" height="15" fill="rgb(208,190,38)"/><text x="51.5131%" y="95.50"></text></g><g><title>def_span (121,041 samples, 0.13%)</title><rect x="51.4142%" y="69" width="0.1348%" height="15" fill="rgb(235,213,38)"/><text x="51.6642%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (109,461 samples, 0.12%)</title><rect x="51.4271%" y="53" width="0.1219%" height="15" fill="rgb(237,122,38)"/><text x="51.6771%" y="63.50"></text></g><g><title>trait_impls_of (452,284 samples, 0.50%)</title><rect x="51.5637%" y="101" width="0.5038%" height="15" fill="rgb(244,218,35)"/><text x="51.8137%" y="111.50"></text></g><g><title>implementations_of_trait (171,221 samples, 0.19%)</title><rect x="51.8767%" y="85" width="0.1907%" height="15" fill="rgb(240,68,47)"/><text x="52.1267%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (106,541 samples, 0.12%)</title><rect x="51.9488%" y="69" width="0.1187%" height="15" fill="rgb(210,16,53)"/><text x="52.1988%" y="79.50"></text></g><g><title>evaluate_obligation (4,144,642 samples, 4.62%)</title><rect x="47.4639%" y="117" width="4.6164%" height="15" fill="rgb(235,124,12)"/><text x="47.7139%" y="127.50">evalu..</text></g><g><title>fn_sig (123,502 samples, 0.14%)</title><rect x="52.1071%" y="117" width="0.1376%" height="15" fill="rgb(224,169,11)"/><text x="52.3571%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (106,021 samples, 0.12%)</title><rect x="52.1266%" y="101" width="0.1181%" height="15" fill="rgb(250,166,2)"/><text x="52.3766%" y="111.50"></text></g><g><title>generics_of (519,994 samples, 0.58%)</title><rect x="52.2446%" y="117" width="0.5792%" height="15" fill="rgb(242,216,29)"/><text x="52.4946%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (431,974 samples, 0.48%)</title><rect x="52.3427%" y="101" width="0.4811%" height="15" fill="rgb(230,116,27)"/><text x="52.5927%" y="111.50"></text></g><g><title>impl_item_implementor_ids (127,852 samples, 0.14%)</title><rect x="52.8238%" y="117" width="0.1424%" height="15" fill="rgb(228,99,48)"/><text x="53.0738%" y="127.50"></text></g><g><title>associated_items (110,952 samples, 0.12%)</title><rect x="52.8427%" y="101" width="0.1236%" height="15" fill="rgb(253,11,6)"/><text x="53.0927%" y="111.50"></text></g><g><title>impl_trait_ref (438,526 samples, 0.49%)</title><rect x="52.9813%" y="117" width="0.4884%" height="15" fill="rgb(247,143,39)"/><text x="53.2313%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (380,466 samples, 0.42%)</title><rect x="53.0460%" y="101" width="0.4238%" height="15" fill="rgb(236,97,10)"/><text x="53.2960%" y="111.50"></text></g><g><title>item_attrs (222,323 samples, 0.25%)</title><rect x="53.4953%" y="117" width="0.2476%" height="15" fill="rgb(233,208,19)"/><text x="53.7453%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (215,853 samples, 0.24%)</title><rect x="53.5025%" y="101" width="0.2404%" height="15" fill="rgb(216,164,2)"/><text x="53.7525%" y="111.50"></text></g><g><title>evaluate_obligation (232,604 samples, 0.26%)</title><rect x="54.0854%" y="101" width="0.2591%" height="15" fill="rgb(220,129,5)"/><text x="54.3354%" y="111.50"></text></g><g><title>method_autoderef_steps (489,564 samples, 0.55%)</title><rect x="53.8058%" y="117" width="0.5453%" height="15" fill="rgb(242,17,10)"/><text x="54.0558%" y="127.50"></text></g><g><title>explicit_predicates_of (114,090 samples, 0.13%)</title><rect x="54.6078%" y="85" width="0.1271%" height="15" fill="rgb(242,107,0)"/><text x="54.8578%" y="95.50"></text></g><g><title>predicates_of (379,483 samples, 0.42%)</title><rect x="54.3830%" y="117" width="0.4227%" height="15" fill="rgb(251,28,31)"/><text x="54.6330%" y="127.50"></text></g><g><title>predicates_defined_on (253,531 samples, 0.28%)</title><rect x="54.5233%" y="101" width="0.2824%" height="15" fill="rgb(233,223,10)"/><text x="54.7733%" y="111.50"></text></g><g><title>trait_impls_of (94,511 samples, 0.11%)</title><rect x="54.9087%" y="117" width="0.1053%" height="15" fill="rgb(215,21,27)"/><text x="55.1587%" y="127.50"></text></g><g><title>evaluate_obligation (381,145 samples, 0.42%)</title><rect x="58.1719%" y="101" width="0.4245%" height="15" fill="rgb(232,23,21)"/><text x="58.4219%" y="111.50"></text></g><g><title>is_copy_raw (175,861 samples, 0.20%)</title><rect x="58.7106%" y="101" width="0.1959%" height="15" fill="rgb(244,5,23)"/><text x="58.9606%" y="111.50"></text></g><g><title>evaluate_obligation (163,651 samples, 0.18%)</title><rect x="58.7242%" y="85" width="0.1823%" height="15" fill="rgb(226,81,46)"/><text x="58.9742%" y="95.50"></text></g><g><title>trait_impls_of (130,771 samples, 0.15%)</title><rect x="58.7608%" y="69" width="0.1457%" height="15" fill="rgb(247,70,30)"/><text x="59.0108%" y="79.50"></text></g><g><title>method_autoderef_steps (131,850 samples, 0.15%)</title><rect x="58.9202%" y="101" width="0.1469%" height="15" fill="rgb(212,68,19)"/><text x="59.1702%" y="111.50"></text></g><g><title>typeck (3,657,550 samples, 4.07%)</title><rect x="55.0958%" y="117" width="4.0739%" height="15" fill="rgb(240,187,13)"/><text x="55.3458%" y="127.50">type..</text></g><g><title>item_bodies_checking (23,427,838 samples, 26.09%)</title><rect x="33.1089%" y="165" width="26.0946%" height="15" fill="rgb(223,113,26)"/><text x="33.3589%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (23,425,078 samples, 26.09%)</title><rect x="33.1119%" y="149" width="26.0915%" height="15" fill="rgb(206,192,2)"/><text x="33.3619%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (23,399,527 samples, 26.06%)</title><rect x="33.1404%" y="133" width="26.0631%" height="15" fill="rgb(241,108,4)"/><text x="33.3904%" y="143.50">typeck</text></g><g><title>impl_trait_ref (396,103 samples, 0.44%)</title><rect x="59.6496%" y="85" width="0.4412%" height="15" fill="rgb(247,173,49)"/><text x="59.8996%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (371,243 samples, 0.41%)</title><rect x="59.6773%" y="69" width="0.4135%" height="15" fill="rgb(224,114,35)"/><text x="59.9273%" y="79.50"></text></g><g><title>adt_destructor (565,466 samples, 0.63%)</title><rect x="59.4882%" y="133" width="0.6298%" height="15" fill="rgb(245,159,27)"/><text x="59.7382%" y="143.50"></text></g><g><title>coherent_trait (561,626 samples, 0.63%)</title><rect x="59.4925%" y="117" width="0.6256%" height="15" fill="rgb(245,172,44)"/><text x="59.7425%" y="127.50"></text></g><g><title>specialization_graph_of (560,046 samples, 0.62%)</title><rect x="59.4943%" y="101" width="0.6238%" height="15" fill="rgb(236,23,11)"/><text x="59.7443%" y="111.50"></text></g><g><title>item_types_checking (1,022,631 samples, 1.14%)</title><rect x="59.2035%" y="165" width="1.1390%" height="15" fill="rgb(205,117,38)"/><text x="59.4535%" y="175.50"></text></g><g><title>check_mod_item_types (1,020,731 samples, 1.14%)</title><rect x="59.2056%" y="149" width="1.1369%" height="15" fill="rgb(237,72,25)"/><text x="59.4556%" y="159.50"></text></g><g><title>late_bound_vars_map (151,532 samples, 0.17%)</title><rect x="60.5437%" y="117" width="0.1688%" height="15" fill="rgb(244,70,9)"/><text x="60.7937%" y="127.50"></text></g><g><title>resolve_lifetimes (147,082 samples, 0.16%)</title><rect x="60.5486%" y="101" width="0.1638%" height="15" fill="rgb(217,125,39)"/><text x="60.7986%" y="111.50"></text></g><g><title>fn_sig (236,443 samples, 0.26%)</title><rect x="60.4748%" y="133" width="0.2634%" height="15" fill="rgb(235,36,10)"/><text x="60.7248%" y="143.50"></text></g><g><title>generics_of (123,822 samples, 0.14%)</title><rect x="60.7382%" y="133" width="0.1379%" height="15" fill="rgb(251,123,47)"/><text x="60.9882%" y="143.50"></text></g><g><title>explicit_predicates_of (93,770 samples, 0.10%)</title><rect x="60.9405%" y="101" width="0.1044%" height="15" fill="rgb(221,13,13)"/><text x="61.1905%" y="111.50"></text></g><g><title>predicates_of (384,324 samples, 0.43%)</title><rect x="60.8929%" y="133" width="0.4281%" height="15" fill="rgb(238,131,9)"/><text x="61.1429%" y="143.50"></text></g><g><title>predicates_defined_on (367,204 samples, 0.41%)</title><rect x="60.9119%" y="117" width="0.4090%" height="15" fill="rgb(211,50,8)"/><text x="61.1619%" y="127.50"></text></g><g><title>inferred_outlives_of (247,773 samples, 0.28%)</title><rect x="61.0450%" y="101" width="0.2760%" height="15" fill="rgb(245,182,24)"/><text x="61.2950%" y="111.50"></text></g><g><title>inferred_outlives_crate (239,753 samples, 0.27%)</title><rect x="61.0539%" y="85" width="0.2670%" height="15" fill="rgb(242,14,37)"/><text x="61.3039%" y="95.50"></text></g><g><title>type_of (126,881 samples, 0.14%)</title><rect x="61.1796%" y="69" width="0.1413%" height="15" fill="rgb(246,228,12)"/><text x="61.4296%" y="79.50"></text></g><g><title>type_collecting (936,121 samples, 1.04%)</title><rect x="60.3437%" y="165" width="1.0427%" height="15" fill="rgb(213,55,15)"/><text x="60.5937%" y="175.50"></text></g><g><title>collect_mod_item_types (926,201 samples, 1.03%)</title><rect x="60.3548%" y="149" width="1.0316%" height="15" fill="rgb(209,9,3)"/><text x="60.6048%" y="159.50"></text></g><g><title>evaluate_obligation (198,104 samples, 0.22%)</title><rect x="62.2801%" y="133" width="0.2207%" height="15" fill="rgb(230,59,30)"/><text x="62.5301%" y="143.50"></text></g><g><title>implied_outlives_bounds (128,920 samples, 0.14%)</title><rect x="62.5046%" y="133" width="0.1436%" height="15" fill="rgb(209,121,21)"/><text x="62.7546%" y="143.50"></text></g><g><title>param_env (103,781 samples, 0.12%)</title><rect x="62.6482%" y="133" width="0.1156%" height="15" fill="rgb(220,109,13)"/><text x="62.8982%" y="143.50"></text></g><g><title>region_scope_tree (157,282 samples, 0.18%)</title><rect x="62.8138%" y="133" width="0.1752%" height="15" fill="rgb(232,18,1)"/><text x="63.0638%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,394,313 samples, 1.55%)</title><rect x="61.4585%" y="149" width="1.5530%" height="15" fill="rgb(215,41,42)"/><text x="61.7085%" y="159.50"></text></g><g><title>adt_sized_constraint (169,702 samples, 0.19%)</title><rect x="63.4883%" y="133" width="0.1890%" height="15" fill="rgb(224,123,36)"/><text x="63.7383%" y="143.50"></text></g><g><title>evaluate_obligation (126,202 samples, 0.14%)</title><rect x="63.6773%" y="133" width="0.1406%" height="15" fill="rgb(240,125,3)"/><text x="63.9273%" y="143.50"></text></g><g><title>param_env (168,521 samples, 0.19%)</title><rect x="63.8723%" y="133" width="0.1877%" height="15" fill="rgb(205,98,50)"/><text x="64.1223%" y="143.50"></text></g><g><title>analysis (50,179,924 samples, 55.89%)</title><rect x="8.2694%" y="197" width="55.8918%" height="15" fill="rgb(205,185,37)"/><text x="8.5194%" y="207.50">analysis</text></g><g><title>type_check_crate (29,956,151 samples, 33.37%)</title><rect x="30.7952%" y="181" width="33.3660%" height="15" fill="rgb(238,207,15)"/><text x="31.0452%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,489,448 samples, 2.77%)</title><rect x="61.3884%" y="165" width="2.7728%" height="15" fill="rgb(213,199,42)"/><text x="61.6384%" y="175.50">wf..</text></g><g><title>check_item_well_formed (1,032,173 samples, 1.15%)</title><rect x="63.0115%" y="149" width="1.1497%" height="15" fill="rgb(235,201,11)"/><text x="63.2615%" y="159.50"></text></g><g><title>codegen_module (205,592 samples, 0.23%)</title><rect x="64.6961%" y="181" width="0.2290%" height="15" fill="rgb(207,46,11)"/><text x="64.9461%" y="191.50"></text></g><g><title>codegen_crate (803,589 samples, 0.90%)</title><rect x="64.1689%" y="197" width="0.8951%" height="15" fill="rgb(241,35,35)"/><text x="64.4189%" y="207.50"></text></g><g><title>codegen_module_optimize (2,612,448 samples, 2.91%)</title><rect x="65.0639%" y="197" width="2.9098%" height="15" fill="rgb(243,32,47)"/><text x="65.3139%" y="207.50">co..</text></g><g><title>LLVM_module_optimize (407,554 samples, 0.45%)</title><rect x="67.5198%" y="181" width="0.4539%" height="15" fill="rgb(247,202,23)"/><text x="67.7698%" y="191.50"></text></g><g><title>LLVM_lto_optimize (219,702 samples, 0.24%)</title><rect x="68.4282%" y="181" width="0.2447%" height="15" fill="rgb(219,102,11)"/><text x="68.6782%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,565,459 samples, 2.86%)</title><rect x="68.6729%" y="181" width="2.8575%" height="15" fill="rgb(243,110,44)"/><text x="68.9229%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,522,398 samples, 2.81%)</title><rect x="68.7209%" y="165" width="2.8095%" height="15" fill="rgb(222,74,54)"/><text x="68.9709%" y="175.50">LL..</text></g><g><title>codegen_module_perform_lto (3,232,006 samples, 3.60%)</title><rect x="67.9737%" y="197" width="3.5999%" height="15" fill="rgb(216,99,12)"/><text x="68.2237%" y="207.50">code..</text></g><g><title>macro_expand_crate (6,477,192 samples, 7.21%)</title><rect x="71.8976%" y="181" width="7.2145%" height="15" fill="rgb(226,22,26)"/><text x="72.1476%" y="191.50">macro_expa..</text></g><g><title>expand_crate (6,468,742 samples, 7.21%)</title><rect x="71.9070%" y="165" width="7.2051%" height="15" fill="rgb(217,163,10)"/><text x="72.1570%" y="175.50">expand_cra..</text></g><g><title>metadata_register_crate (1,327,245 samples, 1.48%)</title><rect x="77.6338%" y="149" width="1.4783%" height="15" fill="rgb(213,25,53)"/><text x="77.8838%" y="159.50"></text></g><g><title>metadata_register_crate (459,867 samples, 0.51%)</title><rect x="78.5999%" y="133" width="0.5122%" height="15" fill="rgb(252,105,26)"/><text x="78.8499%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (110,191 samples, 0.12%)</title><rect x="79.1210%" y="181" width="0.1227%" height="15" fill="rgb(220,39,43)"/><text x="79.3710%" y="191.50"></text></g><g><title>finalize_macro_resolutions (152,392 samples, 0.17%)</title><rect x="79.2737%" y="165" width="0.1697%" height="15" fill="rgb(229,68,48)"/><text x="79.5237%" y="175.50"></text></g><g><title>late_resolve_crate (1,356,985 samples, 1.51%)</title><rect x="79.4435%" y="165" width="1.5114%" height="15" fill="rgb(252,8,32)"/><text x="79.6935%" y="175.50"></text></g><g><title>configure_and_expand (8,480,124 samples, 9.45%)</title><rect x="71.5736%" y="197" width="9.4454%" height="15" fill="rgb(223,20,43)"/><text x="71.8236%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (1,593,858 samples, 1.78%)</title><rect x="79.2438%" y="181" width="1.7753%" height="15" fill="rgb(229,81,49)"/><text x="79.4938%" y="191.50">r..</text></g><g><title>early_lint_checks (203,182 samples, 0.23%)</title><rect x="81.1295%" y="197" width="0.2263%" height="15" fill="rgb(236,28,36)"/><text x="81.3795%" y="207.50"></text></g><g><title>free_global_ctxt (3,379,527 samples, 3.76%)</title><rect x="81.3558%" y="197" width="3.7642%" height="15" fill="rgb(249,185,26)"/><text x="81.6058%" y="207.50">free..</text></g><g><title>is_sized_raw (162,721 samples, 0.18%)</title><rect x="88.2424%" y="149" width="0.1812%" height="15" fill="rgb(249,174,33)"/><text x="88.4924%" y="159.50"></text></g><g><title>evaluate_obligation (135,461 samples, 0.15%)</title><rect x="88.2728%" y="133" width="0.1509%" height="15" fill="rgb(233,201,37)"/><text x="88.5228%" y="143.50"></text></g><g><title>layout_of (207,802 samples, 0.23%)</title><rect x="88.4236%" y="149" width="0.2315%" height="15" fill="rgb(221,78,26)"/><text x="88.6736%" y="159.50"></text></g><g><title>layout_of (153,802 samples, 0.17%)</title><rect x="88.4838%" y="133" width="0.1713%" height="15" fill="rgb(250,127,30)"/><text x="88.7338%" y="143.50"></text></g><g><title>layout_of (105,791 samples, 0.12%)</title><rect x="88.5373%" y="117" width="0.1178%" height="15" fill="rgb(230,49,44)"/><text x="88.7873%" y="127.50"></text></g><g><title>layout_of (652,135 samples, 0.73%)</title><rect x="87.9964%" y="165" width="0.7264%" height="15" fill="rgb(229,67,23)"/><text x="88.2464%" y="175.50"></text></g><g><title>needs_drop_raw (196,161 samples, 0.22%)</title><rect x="90.8373%" y="149" width="0.2185%" height="15" fill="rgb(249,83,47)"/><text x="91.0873%" y="159.50"></text></g><g><title>is_copy_raw (165,681 samples, 0.18%)</title><rect x="90.8712%" y="133" width="0.1845%" height="15" fill="rgb(215,43,3)"/><text x="91.1212%" y="143.50"></text></g><g><title>evaluate_obligation (128,141 samples, 0.14%)</title><rect x="90.9130%" y="117" width="0.1427%" height="15" fill="rgb(238,154,13)"/><text x="91.1630%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,130,525 samples, 2.37%)</title><rect x="88.7227%" y="165" width="2.3730%" height="15" fill="rgb(219,56,2)"/><text x="88.9727%" y="175.50">mi..</text></g><g><title>optimized_mir (4,403,597 samples, 4.90%)</title><rect x="86.2013%" y="181" width="4.9049%" height="15" fill="rgb(233,0,4)"/><text x="86.4513%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (5,402,879 samples, 6.02%)</title><rect x="85.1200%" y="197" width="6.0179%" height="15" fill="rgb(235,30,7)"/><text x="85.3700%" y="207.50">generate..</text></g><g><title>hir_lowering (1,275,254 samples, 1.42%)</title><rect x="91.1379%" y="197" width="1.4204%" height="15" fill="rgb(250,79,13)"/><text x="91.3879%" y="207.50"></text></g><g><title>finish_ongoing_codegen (3,111,084 samples, 3.47%)</title><rect x="92.5728%" y="181" width="3.4652%" height="15" fill="rgb(211,146,34)"/><text x="92.8228%" y="191.50">fin..</text></g><g><title>link_crate (729,338 samples, 0.81%)</title><rect x="96.0380%" y="181" width="0.8124%" height="15" fill="rgb(228,22,38)"/><text x="96.2880%" y="191.50"></text></g><g><title>link_binary (717,268 samples, 0.80%)</title><rect x="96.0515%" y="165" width="0.7989%" height="15" fill="rgb(235,168,5)"/><text x="96.3015%" y="175.50"></text></g><g><title>link_rlib (450,495 samples, 0.50%)</title><rect x="96.3486%" y="149" width="0.5018%" height="15" fill="rgb(221,155,16)"/><text x="96.5986%" y="159.50"></text></g><g><title>link (3,860,403 samples, 4.30%)</title><rect x="92.5583%" y="197" width="4.2998%" height="15" fill="rgb(215,215,53)"/><text x="92.8083%" y="207.50">link</text></g><g><title>parse_crate (1,577,368 samples, 1.76%)</title><rect x="96.8582%" y="197" width="1.7569%" height="15" fill="rgb(223,4,10)"/><text x="97.1082%" y="207.50"></text></g><g><title>prepare_outputs (221,373 samples, 0.25%)</title><rect x="98.6211%" y="197" width="0.2466%" height="15" fill="rgb(234,103,6)"/><text x="98.8711%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (577,487 samples, 0.64%)</title><rect x="98.8676%" y="197" width="0.6432%" height="15" fill="rgb(227,97,0)"/><text x="99.1176%" y="207.50"></text></g><g><title>all (89,780,431 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(234,150,53)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (89,780,431 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(228,201,54)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (351,364 samples, 0.39%)</title><rect x="99.6086%" y="197" width="0.3914%" height="15" fill="rgb(222,22,37)"/><text x="99.8586%" y="207.50"></text></g></svg></svg>