<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,122,673 samples, 4.82%)</title><rect x="0.2472%" y="213" width="4.8228%" height="15" fill="rgb(227,0,7)"/><text x="0.4972%" y="223.50">LLVM_p..</text></g><g><title>param_env (339,581 samples, 0.15%)</title><rect x="14.7665%" y="133" width="0.1472%" height="15" fill="rgb(217,0,24)"/><text x="15.0165%" y="143.50"></text></g><g><title>codegen_fn_attrs (315,042 samples, 0.14%)</title><rect x="15.2204%" y="117" width="0.1366%" height="15" fill="rgb(221,193,54)"/><text x="15.4704%" y="127.50"></text></g><g><title>adt_drop_tys (339,493 samples, 0.15%)</title><rect x="17.3231%" y="85" width="0.1472%" height="15" fill="rgb(248,212,6)"/><text x="17.5731%" y="95.50"></text></g><g><title>is_copy_raw (1,470,061 samples, 0.64%)</title><rect x="17.4703%" y="85" width="0.6374%" height="15" fill="rgb(208,68,35)"/><text x="17.7203%" y="95.50"></text></g><g><title>evaluate_obligation (1,213,160 samples, 0.53%)</title><rect x="17.5817%" y="69" width="0.5260%" height="15" fill="rgb(232,128,0)"/><text x="17.8317%" y="79.50"></text></g><g><title>needs_drop_raw (2,047,825 samples, 0.89%)</title><rect x="17.2204%" y="101" width="0.8879%" height="15" fill="rgb(207,160,47)"/><text x="17.4704%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,040,830 samples, 0.45%)</title><rect x="18.2509%" y="85" width="0.4513%" height="15" fill="rgb(228,23,34)"/><text x="18.5009%" y="95.50"></text></g><g><title>specialization_graph_of (584,967 samples, 0.25%)</title><rect x="18.7317%" y="85" width="0.2536%" height="15" fill="rgb(218,30,26)"/><text x="18.9817%" y="95.50"></text></g><g><title>impl_trait_ref (313,906 samples, 0.14%)</title><rect x="18.8492%" y="69" width="0.1361%" height="15" fill="rgb(220,122,19)"/><text x="19.0992%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (279,375 samples, 0.12%)</title><rect x="18.8642%" y="53" width="0.1211%" height="15" fill="rgb(250,228,42)"/><text x="19.1142%" y="63.50"></text></g><g><title>resolve_instance (2,112,340 samples, 0.92%)</title><rect x="18.1084%" y="101" width="0.9159%" height="15" fill="rgb(240,193,28)"/><text x="18.3584%" y="111.50"></text></g><g><title>thir_body (1,485,485 samples, 0.64%)</title><rect x="19.0426%" y="101" width="0.6441%" height="15" fill="rgb(216,20,37)"/><text x="19.2926%" y="111.50"></text></g><g><title>mir_const (12,621,683 samples, 5.47%)</title><rect x="14.2308%" y="149" width="5.4727%" height="15" fill="rgb(206,188,39)"/><text x="14.4808%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (11,046,635 samples, 4.79%)</title><rect x="14.9137%" y="133" width="4.7898%" height="15" fill="rgb(217,207,13)"/><text x="15.1637%" y="143.50">unsafe..</text></g><g><title>mir_built (10,024,376 samples, 4.35%)</title><rect x="15.3570%" y="117" width="4.3466%" height="15" fill="rgb(231,73,38)"/><text x="15.6070%" y="127.50">mir_b..</text></g><g><title>mir_promoted (13,924,855 samples, 6.04%)</title><rect x="13.7014%" y="165" width="6.0378%" height="15" fill="rgb(225,20,46)"/><text x="13.9514%" y="175.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (1,420,697 samples, 0.62%)</title><rect x="19.7392%" y="165" width="0.6160%" height="15" fill="rgb(210,31,41)"/><text x="19.9892%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (1,157,775 samples, 0.50%)</title><rect x="20.3552%" y="165" width="0.5020%" height="15" fill="rgb(221,200,47)"/><text x="20.6052%" y="175.50"></text></g><g><title>normalize_projection_ty (648,058 samples, 0.28%)</title><rect x="20.5762%" y="149" width="0.2810%" height="15" fill="rgb(226,26,5)"/><text x="20.8262%" y="159.50"></text></g><g><title>type_op_normalize_ty (332,772 samples, 0.14%)</title><rect x="20.8915%" y="165" width="0.1443%" height="15" fill="rgb(249,33,26)"/><text x="21.1415%" y="175.50"></text></g><g><title>type_op_prove_predicate (4,518,115 samples, 1.96%)</title><rect x="21.0358%" y="165" width="1.9590%" height="15" fill="rgb(235,183,28)"/><text x="21.2858%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (40,968,105 samples, 17.76%)</title><rect x="5.2385%" y="197" width="17.7637%" height="15" fill="rgb(221,5,38)"/><text x="5.4885%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (40,797,801 samples, 17.69%)</title><rect x="5.3124%" y="181" width="17.6899%" height="15" fill="rgb(247,18,42)"/><text x="5.5624%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (257,011 samples, 0.11%)</title><rect x="23.0649%" y="197" width="0.1114%" height="15" fill="rgb(241,131,45)"/><text x="23.3149%" y="207.50"></text></g><g><title>codegen_fn_attrs (333,143 samples, 0.14%)</title><rect x="23.4007%" y="133" width="0.1445%" height="15" fill="rgb(249,31,29)"/><text x="23.6507%" y="143.50"></text></g><g><title>codegen_fn_attrs (552,655 samples, 0.24%)</title><rect x="23.3091%" y="165" width="0.2396%" height="15" fill="rgb(225,111,53)"/><text x="23.5591%" y="175.50"></text></g><g><title>should_inherit_track_caller (492,015 samples, 0.21%)</title><rect x="23.3354%" y="149" width="0.2133%" height="15" fill="rgb(238,160,17)"/><text x="23.5854%" y="159.50"></text></g><g><title>check_mod_attrs (832,888 samples, 0.36%)</title><rect x="23.1877%" y="181" width="0.3611%" height="15" fill="rgb(214,148,48)"/><text x="23.4377%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (498,276 samples, 0.22%)</title><rect x="23.6649%" y="181" width="0.2161%" height="15" fill="rgb(232,36,49)"/><text x="23.9149%" y="191.50"></text></g><g><title>misc_checking_1 (1,690,999 samples, 0.73%)</title><rect x="23.1766%" y="197" width="0.7332%" height="15" fill="rgb(209,103,24)"/><text x="23.4266%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (998,271 samples, 0.43%)</title><rect x="23.9106%" y="181" width="0.4328%" height="15" fill="rgb(229,88,8)"/><text x="24.1606%" y="191.50"></text></g><g><title>check_mod_liveness (866,440 samples, 0.38%)</title><rect x="23.9678%" y="165" width="0.3757%" height="15" fill="rgb(213,181,19)"/><text x="24.2178%" y="175.50"></text></g><g><title>type_uninhabited_from (401,517 samples, 0.17%)</title><rect x="24.1694%" y="149" width="0.1741%" height="15" fill="rgb(254,191,54)"/><text x="24.4194%" y="159.50"></text></g><g><title>type_uninhabited_from (357,074 samples, 0.15%)</title><rect x="24.1887%" y="133" width="0.1548%" height="15" fill="rgb(241,83,37)"/><text x="24.4387%" y="143.50"></text></g><g><title>type_uninhabited_from (333,363 samples, 0.14%)</title><rect x="24.1989%" y="117" width="0.1445%" height="15" fill="rgb(233,36,39)"/><text x="24.4489%" y="127.50"></text></g><g><title>type_uninhabited_from (316,752 samples, 0.14%)</title><rect x="24.2061%" y="101" width="0.1373%" height="15" fill="rgb(226,3,54)"/><text x="24.4561%" y="111.50"></text></g><g><title>type_uninhabited_from (303,982 samples, 0.13%)</title><rect x="24.2117%" y="85" width="0.1318%" height="15" fill="rgb(245,192,40)"/><text x="24.4617%" y="95.50"></text></g><g><title>type_uninhabited_from (276,772 samples, 0.12%)</title><rect x="24.2235%" y="69" width="0.1200%" height="15" fill="rgb(238,167,29)"/><text x="24.4735%" y="79.50"></text></g><g><title>misc_checking_2 (1,957,932 samples, 0.85%)</title><rect x="23.9099%" y="197" width="0.8490%" height="15" fill="rgb(232,182,51)"/><text x="24.1599%" y="207.50"></text></g><g><title>match_checking (957,891 samples, 0.42%)</title><rect x="24.3435%" y="181" width="0.4153%" height="15" fill="rgb(231,60,39)"/><text x="24.5935%" y="191.50"></text></g><g><title>check_match (913,601 samples, 0.40%)</title><rect x="24.3627%" y="165" width="0.3961%" height="15" fill="rgb(208,69,12)"/><text x="24.6127%" y="175.50"></text></g><g><title>check_private_in_public (336,064 samples, 0.15%)</title><rect x="24.7635%" y="181" width="0.1457%" height="15" fill="rgb(235,93,37)"/><text x="25.0135%" y="191.50"></text></g><g><title>death_checking (817,979 samples, 0.35%)</title><rect x="24.9093%" y="181" width="0.3547%" height="15" fill="rgb(213,116,39)"/><text x="25.1593%" y="191.50"></text></g><g><title>param_env (451,347 samples, 0.20%)</title><rect x="25.7210%" y="149" width="0.1957%" height="15" fill="rgb(222,207,29)"/><text x="25.9710%" y="159.50"></text></g><g><title>crate_lints (3,041,884 samples, 1.32%)</title><rect x="25.2647%" y="165" width="1.3190%" height="15" fill="rgb(206,96,30)"/><text x="25.5147%" y="175.50"></text></g><g><title>type_of (1,463,046 samples, 0.63%)</title><rect x="25.9493%" y="149" width="0.6344%" height="15" fill="rgb(218,138,4)"/><text x="26.1993%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (1,126,924 samples, 0.49%)</title><rect x="26.0950%" y="133" width="0.4886%" height="15" fill="rgb(250,191,14)"/><text x="26.3450%" y="143.50"></text></g><g><title>lint_checking (3,649,931 samples, 1.58%)</title><rect x="25.2639%" y="181" width="1.5826%" height="15" fill="rgb(239,60,40)"/><text x="25.5139%" y="191.50"></text></g><g><title>module_lints (606,317 samples, 0.26%)</title><rect x="26.5836%" y="165" width="0.2629%" height="15" fill="rgb(206,27,48)"/><text x="26.8336%" y="175.50"></text></g><g><title>lint_mod (600,387 samples, 0.26%)</title><rect x="26.5862%" y="149" width="0.2603%" height="15" fill="rgb(225,35,8)"/><text x="26.8362%" y="159.50"></text></g><g><title>privacy_access_levels (354,704 samples, 0.15%)</title><rect x="26.8465%" y="181" width="0.1538%" height="15" fill="rgb(250,213,24)"/><text x="27.0965%" y="191.50"></text></g><g><title>privacy_checking_modules (1,382,156 samples, 0.60%)</title><rect x="27.0003%" y="181" width="0.5993%" height="15" fill="rgb(247,123,22)"/><text x="27.2503%" y="191.50"></text></g><g><title>check_mod_privacy (1,377,126 samples, 0.60%)</title><rect x="27.0025%" y="165" width="0.5971%" height="15" fill="rgb(231,138,38)"/><text x="27.2525%" y="175.50"></text></g><g><title>misc_checking_3 (6,574,404 samples, 2.85%)</title><rect x="24.7588%" y="197" width="2.8507%" height="15" fill="rgb(231,145,46)"/><text x="25.0088%" y="207.50">mi..</text></g><g><title>impl_parent (2,173,002 samples, 0.94%)</title><rect x="29.1863%" y="133" width="0.9422%" height="15" fill="rgb(251,118,11)"/><text x="29.4363%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,372,842 samples, 0.60%)</title><rect x="29.5333%" y="117" width="0.5953%" height="15" fill="rgb(217,147,25)"/><text x="29.7833%" y="127.50"></text></g><g><title>impl_trait_ref (5,991,598 samples, 2.60%)</title><rect x="30.1285%" y="133" width="2.5980%" height="15" fill="rgb(247,81,37)"/><text x="30.3785%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,182,208 samples, 2.25%)</title><rect x="30.4795%" y="117" width="2.2470%" height="15" fill="rgb(209,12,38)"/><text x="30.7295%" y="127.50">m..</text></g><g><title>trait_impls_of (721,998 samples, 0.31%)</title><rect x="32.7385%" y="133" width="0.3131%" height="15" fill="rgb(227,1,9)"/><text x="32.9885%" y="143.50"></text></g><g><title>implementations_of_trait (236,604 samples, 0.10%)</title><rect x="32.9490%" y="117" width="0.1026%" height="15" fill="rgb(248,47,43)"/><text x="33.1990%" y="127.50"></text></g><g><title>coherent_trait (12,432,968 samples, 5.39%)</title><rect x="27.6611%" y="165" width="5.3909%" height="15" fill="rgb(221,10,30)"/><text x="27.9111%" y="175.50">coheren..</text></g><g><title>specialization_graph_of (12,413,898 samples, 5.38%)</title><rect x="27.6694%" y="149" width="5.3827%" height="15" fill="rgb(210,229,1)"/><text x="27.9194%" y="159.50">special..</text></g><g><title>coherence_checking (12,525,729 samples, 5.43%)</title><rect x="27.6529%" y="181" width="5.4311%" height="15" fill="rgb(222,148,37)"/><text x="27.9029%" y="191.50">coheren..</text></g><g><title>associated_item (416,796 samples, 0.18%)</title><rect x="47.4024%" y="117" width="0.1807%" height="15" fill="rgb(234,67,33)"/><text x="47.6524%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (329,185 samples, 0.14%)</title><rect x="47.4404%" y="101" width="0.1427%" height="15" fill="rgb(247,98,35)"/><text x="47.6904%" y="111.50"></text></g><g><title>associated_items (635,036 samples, 0.28%)</title><rect x="47.3230%" y="133" width="0.2754%" height="15" fill="rgb(247,138,52)"/><text x="47.5730%" y="143.50"></text></g><g><title>adt_dtorck_constraint (274,255 samples, 0.12%)</title><rect x="48.4020%" y="37" width="0.1189%" height="15" fill="rgb(213,79,30)"/><text x="48.6520%" y="47.50"></text></g><g><title>adt_dtorck_constraint (407,585 samples, 0.18%)</title><rect x="48.3497%" y="53" width="0.1767%" height="15" fill="rgb(246,177,23)"/><text x="48.5997%" y="63.50"></text></g><g><title>adt_dtorck_constraint (574,527 samples, 0.25%)</title><rect x="48.2832%" y="69" width="0.2491%" height="15" fill="rgb(230,62,27)"/><text x="48.5332%" y="79.50"></text></g><g><title>adt_dtorck_constraint (760,418 samples, 0.33%)</title><rect x="48.2065%" y="85" width="0.3297%" height="15" fill="rgb(216,154,8)"/><text x="48.4565%" y="95.50"></text></g><g><title>adt_dtorck_constraint (951,369 samples, 0.41%)</title><rect x="48.1355%" y="101" width="0.4125%" height="15" fill="rgb(244,35,45)"/><text x="48.3855%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,365,122 samples, 0.59%)</title><rect x="47.9845%" y="117" width="0.5919%" height="15" fill="rgb(251,115,12)"/><text x="48.2345%" y="127.50"></text></g><g><title>eval_to_const_value_raw (259,323 samples, 0.11%)</title><rect x="48.5774%" y="117" width="0.1124%" height="15" fill="rgb(240,54,50)"/><text x="48.8274%" y="127.50"></text></g><g><title>eval_to_const_value_raw (237,943 samples, 0.10%)</title><rect x="48.5867%" y="101" width="0.1032%" height="15" fill="rgb(233,84,52)"/><text x="48.8367%" y="111.50"></text></g><g><title>eval_to_allocation_raw (235,783 samples, 0.10%)</title><rect x="48.5876%" y="85" width="0.1022%" height="15" fill="rgb(207,117,47)"/><text x="48.8376%" y="95.50"></text></g><g><title>dropck_outlives (2,509,144 samples, 1.09%)</title><rect x="47.6383%" y="133" width="1.0880%" height="15" fill="rgb(249,43,39)"/><text x="47.8883%" y="143.50"></text></g><g><title>generics_of (998,920 samples, 0.43%)</title><rect x="51.3833%" y="117" width="0.4331%" height="15" fill="rgb(209,38,44)"/><text x="51.6333%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (821,258 samples, 0.36%)</title><rect x="51.4604%" y="101" width="0.3561%" height="15" fill="rgb(236,212,23)"/><text x="51.7104%" y="111.50"></text></g><g><title>impl_trait_ref (1,311,438 samples, 0.57%)</title><rect x="51.8306%" y="117" width="0.5686%" height="15" fill="rgb(242,79,21)"/><text x="52.0806%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (914,313 samples, 0.40%)</title><rect x="52.0028%" y="101" width="0.3964%" height="15" fill="rgb(211,96,35)"/><text x="52.2528%" y="111.50"></text></g><g><title>specializes (267,394 samples, 0.12%)</title><rect x="52.4966%" y="117" width="0.1159%" height="15" fill="rgb(253,215,40)"/><text x="52.7466%" y="127.50"></text></g><g><title>trait_impls_of (565,816 samples, 0.25%)</title><rect x="52.6177%" y="117" width="0.2453%" height="15" fill="rgb(211,81,21)"/><text x="52.8677%" y="127.50"></text></g><g><title>evaluate_obligation (9,548,955 samples, 4.14%)</title><rect x="48.7263%" y="133" width="4.1404%" height="15" fill="rgb(208,190,38)"/><text x="48.9763%" y="143.50">evalu..</text></g><g><title>evaluate_obligation (489,339 samples, 0.21%)</title><rect x="53.4790%" y="117" width="0.2122%" height="15" fill="rgb(235,213,38)"/><text x="53.7290%" y="127.50"></text></g><g><title>method_autoderef_steps (1,197,064 samples, 0.52%)</title><rect x="53.1789%" y="133" width="0.5190%" height="15" fill="rgb(237,122,38)"/><text x="53.4289%" y="143.50"></text></g><g><title>object_safety_violations (306,744 samples, 0.13%)</title><rect x="53.6980%" y="133" width="0.1330%" height="15" fill="rgb(244,218,35)"/><text x="53.9480%" y="143.50"></text></g><g><title>predicates_of (426,876 samples, 0.19%)</title><rect x="53.8541%" y="133" width="0.1851%" height="15" fill="rgb(240,68,47)"/><text x="54.1041%" y="143.50"></text></g><g><title>predicates_defined_on (294,594 samples, 0.13%)</title><rect x="53.9115%" y="117" width="0.1277%" height="15" fill="rgb(210,16,53)"/><text x="54.1615%" y="127.50"></text></g><g><title>dropck_outlives (254,962 samples, 0.11%)</title><rect x="56.4654%" y="117" width="0.1106%" height="15" fill="rgb(235,124,12)"/><text x="56.7154%" y="127.50"></text></g><g><title>evaluate_obligation (1,005,891 samples, 0.44%)</title><rect x="56.5760%" y="117" width="0.4362%" height="15" fill="rgb(224,169,11)"/><text x="56.8260%" y="127.50"></text></g><g><title>is_copy_raw (487,955 samples, 0.21%)</title><rect x="57.0820%" y="117" width="0.2116%" height="15" fill="rgb(250,166,2)"/><text x="57.3320%" y="127.50"></text></g><g><title>evaluate_obligation (442,004 samples, 0.19%)</title><rect x="57.1019%" y="101" width="0.1917%" height="15" fill="rgb(242,216,29)"/><text x="57.3519%" y="111.50"></text></g><g><title>method_autoderef_steps (344,175 samples, 0.15%)</title><rect x="57.3158%" y="117" width="0.1492%" height="15" fill="rgb(230,116,27)"/><text x="57.5658%" y="127.50"></text></g><g><title>object_safety_violations (334,484 samples, 0.15%)</title><rect x="57.4650%" y="117" width="0.1450%" height="15" fill="rgb(228,99,48)"/><text x="57.7150%" y="127.50"></text></g><g><title>typeck (8,266,905 samples, 3.58%)</title><rect x="54.1064%" y="133" width="3.5845%" height="15" fill="rgb(253,11,6)"/><text x="54.3564%" y="143.50">type..</text></g><g><title>item_bodies_checking (56,753,480 samples, 24.61%)</title><rect x="33.1066%" y="181" width="24.6082%" height="15" fill="rgb(247,143,39)"/><text x="33.3566%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (56,749,540 samples, 24.61%)</title><rect x="33.1083%" y="165" width="24.6065%" height="15" fill="rgb(236,97,10)"/><text x="33.3583%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (56,632,820 samples, 24.56%)</title><rect x="33.1589%" y="149" width="24.5559%" height="15" fill="rgb(233,208,19)"/><text x="33.4089%" y="159.50">typeck</text></g><g><title>impl_trait_ref (245,233 samples, 0.11%)</title><rect x="58.7896%" y="101" width="0.1063%" height="15" fill="rgb(216,164,2)"/><text x="59.0396%" y="111.50"></text></g><g><title>adt_destructor (587,137 samples, 0.25%)</title><rect x="58.6674%" y="149" width="0.2546%" height="15" fill="rgb(220,129,5)"/><text x="58.9174%" y="159.50"></text></g><g><title>coherent_trait (577,347 samples, 0.25%)</title><rect x="58.6717%" y="133" width="0.2503%" height="15" fill="rgb(242,17,10)"/><text x="58.9217%" y="143.50"></text></g><g><title>specialization_graph_of (574,667 samples, 0.25%)</title><rect x="58.6728%" y="117" width="0.2492%" height="15" fill="rgb(242,107,0)"/><text x="58.9228%" y="127.50"></text></g><g><title>item_types_checking (3,090,905 samples, 1.34%)</title><rect x="57.7149%" y="181" width="1.3402%" height="15" fill="rgb(251,28,31)"/><text x="57.9649%" y="191.50"></text></g><g><title>check_mod_item_types (3,084,185 samples, 1.34%)</title><rect x="57.7178%" y="165" width="1.3373%" height="15" fill="rgb(233,223,10)"/><text x="57.9678%" y="175.50"></text></g><g><title>fn_sig (466,913 samples, 0.20%)</title><rect x="59.2317%" y="149" width="0.2025%" height="15" fill="rgb(215,21,27)"/><text x="59.4817%" y="159.50"></text></g><g><title>generics_of (500,247 samples, 0.22%)</title><rect x="59.4342%" y="149" width="0.2169%" height="15" fill="rgb(232,23,21)"/><text x="59.6842%" y="159.50"></text></g><g><title>late_bound_vars_map (490,446 samples, 0.21%)</title><rect x="59.9083%" y="101" width="0.2127%" height="15" fill="rgb(244,5,23)"/><text x="60.1583%" y="111.50"></text></g><g><title>resolve_lifetimes (470,566 samples, 0.20%)</title><rect x="59.9169%" y="85" width="0.2040%" height="15" fill="rgb(226,81,46)"/><text x="60.1669%" y="95.50"></text></g><g><title>explicit_predicates_of (907,789 samples, 0.39%)</title><rect x="59.7593%" y="117" width="0.3936%" height="15" fill="rgb(247,70,30)"/><text x="60.0093%" y="127.50"></text></g><g><title>predicates_of (1,685,797 samples, 0.73%)</title><rect x="59.6769%" y="149" width="0.7310%" height="15" fill="rgb(212,68,19)"/><text x="59.9269%" y="159.50"></text></g><g><title>predicates_defined_on (1,612,126 samples, 0.70%)</title><rect x="59.7088%" y="133" width="0.6990%" height="15" fill="rgb(240,187,13)"/><text x="59.9588%" y="143.50"></text></g><g><title>inferred_outlives_of (587,826 samples, 0.25%)</title><rect x="60.1530%" y="117" width="0.2549%" height="15" fill="rgb(223,113,26)"/><text x="60.4030%" y="127.50"></text></g><g><title>inferred_outlives_crate (555,106 samples, 0.24%)</title><rect x="60.1671%" y="101" width="0.2407%" height="15" fill="rgb(206,192,2)"/><text x="60.4171%" y="111.50"></text></g><g><title>type_of (334,985 samples, 0.15%)</title><rect x="60.2626%" y="85" width="0.1452%" height="15" fill="rgb(241,108,4)"/><text x="60.5126%" y="95.50"></text></g><g><title>type_collecting (3,297,177 samples, 1.43%)</title><rect x="59.0574%" y="181" width="1.4297%" height="15" fill="rgb(247,173,49)"/><text x="59.3074%" y="191.50"></text></g><g><title>collect_mod_item_types (3,284,617 samples, 1.42%)</title><rect x="59.0628%" y="165" width="1.4242%" height="15" fill="rgb(224,114,35)"/><text x="59.3128%" y="175.50"></text></g><g><title>evaluate_obligation (1,501,045 samples, 0.65%)</title><rect x="62.6408%" y="149" width="0.6509%" height="15" fill="rgb(245,159,27)"/><text x="62.8908%" y="159.50"></text></g><g><title>trait_impls_of (245,313 samples, 0.11%)</title><rect x="63.1853%" y="133" width="0.1064%" height="15" fill="rgb(245,172,44)"/><text x="63.4353%" y="143.50"></text></g><g><title>implied_outlives_bounds (560,560 samples, 0.24%)</title><rect x="63.3108%" y="149" width="0.2431%" height="15" fill="rgb(236,23,11)"/><text x="63.5608%" y="159.50"></text></g><g><title>param_env (549,345 samples, 0.24%)</title><rect x="63.5539%" y="149" width="0.2382%" height="15" fill="rgb(205,117,38)"/><text x="63.8039%" y="159.50"></text></g><g><title>region_scope_tree (566,826 samples, 0.25%)</title><rect x="63.8286%" y="149" width="0.2458%" height="15" fill="rgb(237,72,25)"/><text x="64.0786%" y="159.50"></text></g><g><title>check_impl_item_well_formed (7,950,861 samples, 3.45%)</title><rect x="60.6277%" y="165" width="3.4475%" height="15" fill="rgb(244,70,9)"/><text x="60.8777%" y="175.50">che..</text></g><g><title>evaluate_obligation (294,985 samples, 0.13%)</title><rect x="64.9639%" y="149" width="0.1279%" height="15" fill="rgb(217,125,39)"/><text x="65.2139%" y="159.50"></text></g><g><title>param_env (427,657 samples, 0.19%)</title><rect x="65.1774%" y="149" width="0.1854%" height="15" fill="rgb(235,36,10)"/><text x="65.4274%" y="159.50"></text></g><g><title>check_item_well_formed (3,346,418 samples, 1.45%)</title><rect x="64.0752%" y="165" width="1.4510%" height="15" fill="rgb(251,123,47)"/><text x="64.3252%" y="175.50"></text></g><g><title>analysis (139,695,642 samples, 60.57%)</title><rect x="5.0700%" y="213" width="60.5719%" height="15" fill="rgb(221,13,13)"/><text x="5.3200%" y="223.50">analysis</text></g><g><title>type_check_crate (87,713,364 samples, 38.03%)</title><rect x="27.6095%" y="197" width="38.0324%" height="15" fill="rgb(238,131,9)"/><text x="27.8595%" y="207.50">type_check_crate</text></g><g><title>wf_checking (11,881,802 samples, 5.15%)</title><rect x="60.4900%" y="181" width="5.1519%" height="15" fill="rgb(211,50,8)"/><text x="60.7400%" y="191.50">wf_che..</text></g><g><title>check_trait_item_well_formed (266,773 samples, 0.12%)</title><rect x="65.5262%" y="165" width="0.1157%" height="15" fill="rgb(245,182,24)"/><text x="65.7762%" y="175.50"></text></g><g><title>layout_of (396,994 samples, 0.17%)</title><rect x="66.6716%" y="117" width="0.1721%" height="15" fill="rgb(242,14,37)"/><text x="66.9216%" y="127.50"></text></g><g><title>layout_of (305,102 samples, 0.13%)</title><rect x="66.7115%" y="101" width="0.1323%" height="15" fill="rgb(246,228,12)"/><text x="66.9615%" y="111.50"></text></g><g><title>layout_of (543,415 samples, 0.24%)</title><rect x="66.6292%" y="133" width="0.2356%" height="15" fill="rgb(213,55,15)"/><text x="66.8792%" y="143.50"></text></g><g><title>layout_of (702,907 samples, 0.30%)</title><rect x="66.5722%" y="149" width="0.3048%" height="15" fill="rgb(209,9,3)"/><text x="66.8222%" y="159.50"></text></g><g><title>layout_of (754,807 samples, 0.33%)</title><rect x="66.5616%" y="165" width="0.3273%" height="15" fill="rgb(230,59,30)"/><text x="66.8116%" y="175.50"></text></g><g><title>fn_abi_of_instance (991,240 samples, 0.43%)</title><rect x="66.4627%" y="181" width="0.4298%" height="15" fill="rgb(209,121,21)"/><text x="66.7127%" y="191.50"></text></g><g><title>codegen_module (2,020,852 samples, 0.88%)</title><rect x="66.0485%" y="197" width="0.8762%" height="15" fill="rgb(220,109,13)"/><text x="66.2985%" y="207.50"></text></g><g><title>optimized_mir (286,653 samples, 0.12%)</title><rect x="66.9772%" y="149" width="0.1243%" height="15" fill="rgb(232,18,1)"/><text x="67.2272%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (382,944 samples, 0.17%)</title><rect x="66.9383%" y="165" width="0.1660%" height="15" fill="rgb(215,41,42)"/><text x="67.1883%" y="175.50"></text></g><g><title>monomorphization_collector (430,874 samples, 0.19%)</title><rect x="66.9374%" y="181" width="0.1868%" height="15" fill="rgb(224,123,36)"/><text x="67.1874%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (499,836 samples, 0.22%)</title><rect x="66.9253%" y="197" width="0.2167%" height="15" fill="rgb(240,125,3)"/><text x="67.1753%" y="207.50"></text></g><g><title>codegen_crate (3,590,940 samples, 1.56%)</title><rect x="65.6451%" y="213" width="1.5570%" height="15" fill="rgb(205,98,50)"/><text x="65.8951%" y="223.50"></text></g><g><title>codegen_module_optimize (3,358,717 samples, 1.46%)</title><rect x="67.2021%" y="213" width="1.4563%" height="15" fill="rgb(205,185,37)"/><text x="67.4521%" y="223.50"></text></g><g><title>LLVM_module_optimize (2,585,699 samples, 1.12%)</title><rect x="67.5373%" y="197" width="1.1212%" height="15" fill="rgb(238,207,15)"/><text x="67.7873%" y="207.50"></text></g><g><title>LLVM_lto_optimize (2,941,243 samples, 1.28%)</title><rect x="68.9673%" y="197" width="1.2753%" height="15" fill="rgb(213,199,42)"/><text x="69.2173%" y="207.50"></text></g><g><title>LLVM_module_codegen (10,078,141 samples, 4.37%)</title><rect x="70.2426%" y="197" width="4.3699%" height="15" fill="rgb(235,201,11)"/><text x="70.4926%" y="207.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (9,877,639 samples, 4.28%)</title><rect x="70.3295%" y="181" width="4.2829%" height="15" fill="rgb(207,46,11)"/><text x="70.5795%" y="191.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (13,808,823 samples, 5.99%)</title><rect x="68.6585%" y="213" width="5.9875%" height="15" fill="rgb(241,35,35)"/><text x="68.9085%" y="223.50">codegen_..</text></g><g><title>metadata_register_crate (6,133,088 samples, 2.66%)</title><rect x="80.0772%" y="165" width="2.6593%" height="15" fill="rgb(243,32,47)"/><text x="80.3272%" y="175.50">me..</text></g><g><title>metadata_register_crate (4,448,352 samples, 1.93%)</title><rect x="80.8077%" y="149" width="1.9288%" height="15" fill="rgb(247,202,23)"/><text x="81.0577%" y="159.50">m..</text></g><g><title>macro_expand_crate (18,420,824 samples, 7.99%)</title><rect x="74.8367%" y="197" width="7.9872%" height="15" fill="rgb(219,102,11)"/><text x="75.0867%" y="207.50">macro_expan..</text></g><g><title>expand_crate (18,409,974 samples, 7.98%)</title><rect x="74.8414%" y="181" width="7.9825%" height="15" fill="rgb(243,110,44)"/><text x="75.0914%" y="191.50">expand_crate</text></g><g><title>late_resolve_crate (2,260,696 samples, 0.98%)</title><rect x="82.9548%" y="181" width="0.9802%" height="15" fill="rgb(222,74,54)"/><text x="83.2048%" y="191.50"></text></g><g><title>configure_and_expand (21,572,689 samples, 9.35%)</title><rect x="74.6460%" y="213" width="9.3539%" height="15" fill="rgb(216,99,12)"/><text x="74.8960%" y="223.50">configure_and..</text></g><g><title>resolve_crate (2,597,189 samples, 1.13%)</title><rect x="82.8737%" y="197" width="1.1261%" height="15" fill="rgb(226,22,26)"/><text x="83.1237%" y="207.50"></text></g><g><title>drop_ast (277,473 samples, 0.12%)</title><rect x="83.9999%" y="213" width="0.1203%" height="15" fill="rgb(217,163,10)"/><text x="84.2499%" y="223.50"></text></g><g><title>early_lint_checks (449,765 samples, 0.20%)</title><rect x="84.1310%" y="213" width="0.1950%" height="15" fill="rgb(213,25,53)"/><text x="84.3810%" y="223.50"></text></g><g><title>free_global_ctxt (5,008,475 samples, 2.17%)</title><rect x="84.3260%" y="213" width="2.1717%" height="15" fill="rgb(252,105,26)"/><text x="84.5760%" y="223.50">f..</text></g><g><title>exported_symbols (283,553 samples, 0.12%)</title><rect x="87.6565%" y="197" width="0.1229%" height="15" fill="rgb(220,39,43)"/><text x="87.9065%" y="207.50"></text></g><g><title>adt_sized_constraint (256,054 samples, 0.11%)</title><rect x="90.8139%" y="69" width="0.1110%" height="15" fill="rgb(229,68,48)"/><text x="91.0639%" y="79.50"></text></g><g><title>layout_of (386,135 samples, 0.17%)</title><rect x="90.9663%" y="53" width="0.1674%" height="15" fill="rgb(252,8,32)"/><text x="91.2163%" y="63.50"></text></g><g><title>layout_of (507,057 samples, 0.22%)</title><rect x="90.9344%" y="69" width="0.2199%" height="15" fill="rgb(223,20,43)"/><text x="91.1844%" y="79.50"></text></g><g><title>layout_of (878,601 samples, 0.38%)</title><rect x="90.7797%" y="85" width="0.3810%" height="15" fill="rgb(229,81,49)"/><text x="91.0297%" y="95.50"></text></g><g><title>layout_of (1,024,313 samples, 0.44%)</title><rect x="90.7298%" y="101" width="0.4441%" height="15" fill="rgb(236,28,36)"/><text x="90.9798%" y="111.50"></text></g><g><title>layout_of (1,154,415 samples, 0.50%)</title><rect x="90.6781%" y="117" width="0.5006%" height="15" fill="rgb(249,185,26)"/><text x="90.9281%" y="127.50"></text></g><g><title>layout_of (1,265,885 samples, 0.55%)</title><rect x="90.6459%" y="133" width="0.5489%" height="15" fill="rgb(249,174,33)"/><text x="90.8959%" y="143.50"></text></g><g><title>layout_of (1,388,865 samples, 0.60%)</title><rect x="90.5997%" y="149" width="0.6022%" height="15" fill="rgb(233,201,37)"/><text x="90.8497%" y="159.50"></text></g><g><title>layout_of (1,656,238 samples, 0.72%)</title><rect x="90.4878%" y="165" width="0.7181%" height="15" fill="rgb(221,78,26)"/><text x="90.7378%" y="175.50"></text></g><g><title>layout_of (2,644,973 samples, 1.15%)</title><rect x="90.0952%" y="181" width="1.1469%" height="15" fill="rgb(250,127,30)"/><text x="90.3452%" y="191.50"></text></g><g><title>needs_drop_raw (789,127 samples, 0.34%)</title><rect x="94.1600%" y="165" width="0.3422%" height="15" fill="rgb(230,49,44)"/><text x="94.4100%" y="175.50"></text></g><g><title>is_copy_raw (690,766 samples, 0.30%)</title><rect x="94.2027%" y="149" width="0.2995%" height="15" fill="rgb(229,67,23)"/><text x="94.4527%" y="159.50"></text></g><g><title>evaluate_obligation (568,925 samples, 0.25%)</title><rect x="94.2555%" y="133" width="0.2467%" height="15" fill="rgb(249,83,47)"/><text x="94.5055%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,574,157 samples, 3.28%)</title><rect x="91.2420%" y="181" width="3.2841%" height="15" fill="rgb(215,43,3)"/><text x="91.4920%" y="191.50">mir..</text></g><g><title>optimized_mir (15,407,454 samples, 6.68%)</title><rect x="87.8578%" y="197" width="6.6807%" height="15" fill="rgb(238,154,13)"/><text x="88.1078%" y="207.50">optimized..</text></g><g><title>generate_crate_metadata (18,750,458 samples, 8.13%)</title><rect x="86.4977%" y="213" width="8.1302%" height="15" fill="rgb(219,56,2)"/><text x="86.7477%" y="223.50">generate_cr..</text></g><g><title>hir_lowering (3,815,273 samples, 1.65%)</title><rect x="94.6279%" y="213" width="1.6543%" height="15" fill="rgb(233,0,4)"/><text x="94.8779%" y="223.50"></text></g><g><title>finish_ongoing_codegen (3,582,490 samples, 1.55%)</title><rect x="96.2893%" y="197" width="1.5534%" height="15" fill="rgb(235,30,7)"/><text x="96.5393%" y="207.50"></text></g><g><title>link_crate (1,047,352 samples, 0.45%)</title><rect x="97.8427%" y="197" width="0.4541%" height="15" fill="rgb(250,79,13)"/><text x="98.0927%" y="207.50"></text></g><g><title>link_binary (1,031,002 samples, 0.45%)</title><rect x="97.8498%" y="181" width="0.4470%" height="15" fill="rgb(211,146,34)"/><text x="98.0998%" y="191.50"></text></g><g><title>link_rlib (723,158 samples, 0.31%)</title><rect x="97.9833%" y="165" width="0.3136%" height="15" fill="rgb(228,22,38)"/><text x="98.2333%" y="175.50"></text></g><g><title>link (4,656,882 samples, 2.02%)</title><rect x="96.2822%" y="213" width="2.0192%" height="15" fill="rgb(235,168,5)"/><text x="96.5322%" y="223.50">l..</text></g><g><title>parse_crate (1,894,181 samples, 0.82%)</title><rect x="98.3014%" y="213" width="0.8213%" height="15" fill="rgb(221,155,16)"/><text x="98.5514%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,227,464 samples, 0.53%)</title><rect x="99.2252%" y="213" width="0.5322%" height="15" fill="rgb(215,215,53)"/><text x="99.4752%" y="223.50"></text></g><g><title>all (230,627,889 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (230,627,889 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (470,995 samples, 0.20%)</title><rect x="99.7958%" y="213" width="0.2042%" height="15" fill="rgb(227,97,0)"/><text x="100.0458%" y="223.50"></text></g></svg></svg>