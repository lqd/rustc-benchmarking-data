<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,091,786 samples, 7.47%)</title><rect x="0.5038%" y="229" width="7.4682%" height="15" fill="rgb(227,0,7)"/><text x="0.7538%" y="239.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (485,999 samples, 0.24%)</title><rect x="13.6989%" y="181" width="0.2405%" height="15" fill="rgb(217,0,24)"/><text x="13.9489%" y="191.50"></text></g><g><title>param_env (230,823 samples, 0.11%)</title><rect x="14.6898%" y="149" width="0.1142%" height="15" fill="rgb(221,193,54)"/><text x="14.9398%" y="159.50"></text></g><g><title>is_copy_raw (257,973 samples, 0.13%)</title><rect x="16.0168%" y="117" width="0.1277%" height="15" fill="rgb(248,212,6)"/><text x="16.2668%" y="127.50"></text></g><g><title>evaluate_obligation (214,583 samples, 0.11%)</title><rect x="16.0383%" y="101" width="0.1062%" height="15" fill="rgb(208,68,35)"/><text x="16.2883%" y="111.50"></text></g><g><title>is_copy_raw (742,239 samples, 0.37%)</title><rect x="16.2249%" y="101" width="0.3673%" height="15" fill="rgb(232,128,0)"/><text x="16.4749%" y="111.50"></text></g><g><title>evaluate_obligation (610,877 samples, 0.30%)</title><rect x="16.2899%" y="85" width="0.3023%" height="15" fill="rgb(207,160,47)"/><text x="16.5399%" y="95.50"></text></g><g><title>needs_drop_raw (906,261 samples, 0.45%)</title><rect x="16.1445%" y="117" width="0.4485%" height="15" fill="rgb(228,23,34)"/><text x="16.3945%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (769,006 samples, 0.38%)</title><rect x="16.6923%" y="101" width="0.3805%" height="15" fill="rgb(218,30,26)"/><text x="16.9423%" y="111.50"></text></g><g><title>resolve_instance (1,072,118 samples, 0.53%)</title><rect x="16.5929%" y="117" width="0.5305%" height="15" fill="rgb(220,122,19)"/><text x="16.8429%" y="127.50"></text></g><g><title>thir_body (642,826 samples, 0.32%)</title><rect x="17.1356%" y="117" width="0.3181%" height="15" fill="rgb(250,228,42)"/><text x="17.3856%" y="127.50"></text></g><g><title>mir_const (6,269,099 samples, 3.10%)</title><rect x="14.4205%" y="165" width="3.1023%" height="15" fill="rgb(240,193,28)"/><text x="14.6705%" y="175.50">mir..</text></g><g><title>unsafety_check_result (5,494,003 samples, 2.72%)</title><rect x="14.8040%" y="149" width="2.7187%" height="15" fill="rgb(216,20,37)"/><text x="15.0540%" y="159.50">un..</text></g><g><title>mir_built (4,988,496 samples, 2.47%)</title><rect x="15.0542%" y="133" width="2.4686%" height="15" fill="rgb(206,188,39)"/><text x="15.3042%" y="143.50">mi..</text></g><g><title>thir_body (218,763 samples, 0.11%)</title><rect x="18.5100%" y="101" width="0.1083%" height="15" fill="rgb(217,207,13)"/><text x="18.7600%" y="111.50"></text></g><g><title>mir_const (1,410,407 samples, 0.70%)</title><rect x="17.9241%" y="149" width="0.6979%" height="15" fill="rgb(231,73,38)"/><text x="18.1741%" y="159.50"></text></g><g><title>unsafety_check_result (1,194,695 samples, 0.59%)</title><rect x="18.0309%" y="133" width="0.5912%" height="15" fill="rgb(225,20,46)"/><text x="18.2809%" y="143.50"></text></g><g><title>mir_built (1,046,152 samples, 0.52%)</title><rect x="18.1044%" y="117" width="0.5177%" height="15" fill="rgb(210,31,41)"/><text x="18.3544%" y="127.50"></text></g><g><title>mir_const_qualif (2,355,466 samples, 1.17%)</title><rect x="17.5227%" y="165" width="1.1656%" height="15" fill="rgb(221,200,47)"/><text x="17.7727%" y="175.50"></text></g><g><title>mir_promoted (9,403,635 samples, 4.65%)</title><rect x="14.0351%" y="181" width="4.6534%" height="15" fill="rgb(226,26,5)"/><text x="14.2851%" y="191.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (853,603 samples, 0.42%)</title><rect x="18.6892%" y="181" width="0.4224%" height="15" fill="rgb(249,33,26)"/><text x="18.9392%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (479,714 samples, 0.24%)</title><rect x="19.1116%" y="181" width="0.2374%" height="15" fill="rgb(235,183,28)"/><text x="19.3616%" y="191.50"></text></g><g><title>normalize_projection_ty (242,442 samples, 0.12%)</title><rect x="19.2291%" y="165" width="0.1200%" height="15" fill="rgb(221,5,38)"/><text x="19.4791%" y="175.50"></text></g><g><title>type_op_normalize_predicate (306,112 samples, 0.15%)</title><rect x="19.3525%" y="181" width="0.1515%" height="15" fill="rgb(247,18,42)"/><text x="19.6025%" y="191.50"></text></g><g><title>type_op_normalize_ty (570,934 samples, 0.28%)</title><rect x="19.5039%" y="181" width="0.2825%" height="15" fill="rgb(241,131,45)"/><text x="19.7539%" y="191.50"></text></g><g><title>type_op_prove_predicate (2,764,210 samples, 1.37%)</title><rect x="19.7865%" y="181" width="1.3679%" height="15" fill="rgb(249,31,29)"/><text x="20.0365%" y="191.50"></text></g><g><title>MIR_borrow_checking (26,293,659 samples, 13.01%)</title><rect x="8.1455%" y="213" width="13.0114%" height="15" fill="rgb(225,111,53)"/><text x="8.3955%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (26,133,318 samples, 12.93%)</title><rect x="8.2249%" y="197" width="12.9321%" height="15" fill="rgb(238,160,17)"/><text x="8.4749%" y="207.50">mir_borrowck</text></g><g><title>MIR_effect_checking (676,318 samples, 0.33%)</title><rect x="21.1570%" y="213" width="0.3347%" height="15" fill="rgb(214,148,48)"/><text x="21.4070%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (595,316 samples, 0.29%)</title><rect x="21.1971%" y="197" width="0.2946%" height="15" fill="rgb(232,36,49)"/><text x="21.4471%" y="207.50"></text></g><g><title>hir_module_items (288,152 samples, 0.14%)</title><rect x="21.4916%" y="213" width="0.1426%" height="15" fill="rgb(209,103,24)"/><text x="21.7416%" y="223.50"></text></g><g><title>should_inherit_track_caller (318,373 samples, 0.16%)</title><rect x="21.8735%" y="165" width="0.1575%" height="15" fill="rgb(229,88,8)"/><text x="22.1235%" y="175.50"></text></g><g><title>codegen_fn_attrs (537,494 samples, 0.27%)</title><rect x="21.7733%" y="181" width="0.2660%" height="15" fill="rgb(213,181,19)"/><text x="22.0233%" y="191.50"></text></g><g><title>check_mod_attrs (792,718 samples, 0.39%)</title><rect x="21.6471%" y="197" width="0.3923%" height="15" fill="rgb(254,191,54)"/><text x="21.8971%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (437,364 samples, 0.22%)</title><rect x="22.1467%" y="197" width="0.2164%" height="15" fill="rgb(241,83,37)"/><text x="22.3967%" y="207.50"></text></g><g><title>misc_checking_1 (1,528,747 samples, 0.76%)</title><rect x="21.6345%" y="213" width="0.7565%" height="15" fill="rgb(233,36,39)"/><text x="21.8845%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (433,175 samples, 0.21%)</title><rect x="22.3918%" y="197" width="0.2144%" height="15" fill="rgb(226,3,54)"/><text x="22.6418%" y="207.50"></text></g><g><title>check_mod_liveness (345,824 samples, 0.17%)</title><rect x="22.4350%" y="181" width="0.1711%" height="15" fill="rgb(245,192,40)"/><text x="22.6850%" y="191.50"></text></g><g><title>misc_checking_2 (907,490 samples, 0.45%)</title><rect x="22.3910%" y="213" width="0.4491%" height="15" fill="rgb(238,167,29)"/><text x="22.6410%" y="223.50"></text></g><g><title>match_checking (472,705 samples, 0.23%)</title><rect x="22.6061%" y="197" width="0.2339%" height="15" fill="rgb(232,182,51)"/><text x="22.8561%" y="207.50"></text></g><g><title>check_match (434,675 samples, 0.22%)</title><rect x="22.6250%" y="181" width="0.2151%" height="15" fill="rgb(231,60,39)"/><text x="22.8750%" y="191.50"></text></g><g><title>check_private_in_public (269,413 samples, 0.13%)</title><rect x="22.8446%" y="197" width="0.1333%" height="15" fill="rgb(208,69,12)"/><text x="23.0946%" y="207.50"></text></g><g><title>death_checking (490,875 samples, 0.24%)</title><rect x="22.9779%" y="197" width="0.2429%" height="15" fill="rgb(235,93,37)"/><text x="23.2279%" y="207.50"></text></g><g><title>param_env (247,213 samples, 0.12%)</title><rect x="23.4939%" y="165" width="0.1223%" height="15" fill="rgb(213,116,39)"/><text x="23.7439%" y="175.50"></text></g><g><title>crate_lints (1,145,142 samples, 0.57%)</title><rect x="23.2217%" y="181" width="0.5667%" height="15" fill="rgb(222,207,29)"/><text x="23.4717%" y="191.50"></text></g><g><title>type_of (346,203 samples, 0.17%)</title><rect x="23.6171%" y="165" width="0.1713%" height="15" fill="rgb(206,96,30)"/><text x="23.8671%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (267,163 samples, 0.13%)</title><rect x="23.6562%" y="149" width="0.1322%" height="15" fill="rgb(218,138,4)"/><text x="23.9062%" y="159.50"></text></g><g><title>lint_checking (1,512,697 samples, 0.75%)</title><rect x="23.2208%" y="197" width="0.7486%" height="15" fill="rgb(250,191,14)"/><text x="23.4708%" y="207.50"></text></g><g><title>module_lints (365,815 samples, 0.18%)</title><rect x="23.7884%" y="181" width="0.1810%" height="15" fill="rgb(239,60,40)"/><text x="24.0384%" y="191.50"></text></g><g><title>lint_mod (360,725 samples, 0.18%)</title><rect x="23.7909%" y="165" width="0.1785%" height="15" fill="rgb(206,27,48)"/><text x="24.0409%" y="175.50"></text></g><g><title>privacy_access_levels (381,804 samples, 0.19%)</title><rect x="23.9694%" y="197" width="0.1889%" height="15" fill="rgb(225,35,8)"/><text x="24.2194%" y="207.50"></text></g><g><title>privacy_checking_modules (931,700 samples, 0.46%)</title><rect x="24.1583%" y="197" width="0.4611%" height="15" fill="rgb(250,213,24)"/><text x="24.4083%" y="207.50"></text></g><g><title>check_mod_privacy (925,960 samples, 0.46%)</title><rect x="24.1612%" y="181" width="0.4582%" height="15" fill="rgb(247,123,22)"/><text x="24.4112%" y="191.50"></text></g><g><title>misc_checking_3 (3,613,250 samples, 1.79%)</title><rect x="22.8401%" y="213" width="1.7880%" height="15" fill="rgb(231,138,38)"/><text x="23.0901%" y="223.50">m..</text></g><g><title>impl_parent (1,640,358 samples, 0.81%)</title><rect x="26.2530%" y="149" width="0.8117%" height="15" fill="rgb(231,145,46)"/><text x="26.5030%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (783,707 samples, 0.39%)</title><rect x="26.6769%" y="133" width="0.3878%" height="15" fill="rgb(251,118,11)"/><text x="26.9269%" y="143.50"></text></g><g><title>impl_trait_ref (2,586,645 samples, 1.28%)</title><rect x="27.0656%" y="149" width="1.2800%" height="15" fill="rgb(217,147,25)"/><text x="27.3156%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,932,420 samples, 0.96%)</title><rect x="27.3893%" y="133" width="0.9563%" height="15" fill="rgb(247,81,37)"/><text x="27.6393%" y="143.50"></text></g><g><title>trait_impls_of (480,195 samples, 0.24%)</title><rect x="28.4003%" y="149" width="0.2376%" height="15" fill="rgb(209,12,38)"/><text x="28.6503%" y="159.50"></text></g><g><title>coherent_trait (8,002,578 samples, 3.96%)</title><rect x="24.6788%" y="181" width="3.9601%" height="15" fill="rgb(227,1,9)"/><text x="24.9288%" y="191.50">cohe..</text></g><g><title>specialization_graph_of (7,695,395 samples, 3.81%)</title><rect x="24.8308%" y="165" width="3.8081%" height="15" fill="rgb(248,47,43)"/><text x="25.0808%" y="175.50">spec..</text></g><g><title>coherence_checking (8,164,640 samples, 4.04%)</title><rect x="24.6649%" y="197" width="4.0403%" height="15" fill="rgb(221,10,30)"/><text x="24.9149%" y="207.50">cohe..</text></g><g><title>associated_items (229,452 samples, 0.11%)</title><rect x="37.6654%" y="149" width="0.1135%" height="15" fill="rgb(210,229,1)"/><text x="37.9154%" y="159.50"></text></g><g><title>dropck_outlives (513,155 samples, 0.25%)</title><rect x="37.8049%" y="149" width="0.2539%" height="15" fill="rgb(222,148,37)"/><text x="38.0549%" y="159.50"></text></g><g><title>generics_of (526,674 samples, 0.26%)</title><rect x="39.9284%" y="133" width="0.2606%" height="15" fill="rgb(234,67,33)"/><text x="40.1784%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (376,341 samples, 0.19%)</title><rect x="40.0028%" y="117" width="0.1862%" height="15" fill="rgb(247,98,35)"/><text x="40.2528%" y="127.50"></text></g><g><title>impl_trait_ref (667,900 samples, 0.33%)</title><rect x="40.2634%" y="133" width="0.3305%" height="15" fill="rgb(247,138,52)"/><text x="40.5134%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (527,607 samples, 0.26%)</title><rect x="40.3328%" y="117" width="0.2611%" height="15" fill="rgb(213,79,30)"/><text x="40.5828%" y="127.50"></text></g><g><title>predicates_of (765,459 samples, 0.38%)</title><rect x="40.6148%" y="133" width="0.3788%" height="15" fill="rgb(246,177,23)"/><text x="40.8648%" y="143.50"></text></g><g><title>predicates_defined_on (422,385 samples, 0.21%)</title><rect x="40.7846%" y="117" width="0.2090%" height="15" fill="rgb(230,62,27)"/><text x="41.0346%" y="127.50"></text></g><g><title>specializes (2,344,435 samples, 1.16%)</title><rect x="40.9936%" y="133" width="1.1601%" height="15" fill="rgb(216,154,8)"/><text x="41.2436%" y="143.50"></text></g><g><title>param_env (1,390,815 samples, 0.69%)</title><rect x="41.4655%" y="117" width="0.6882%" height="15" fill="rgb(244,35,45)"/><text x="41.7155%" y="127.50"></text></g><g><title>def_span (655,586 samples, 0.32%)</title><rect x="41.8293%" y="101" width="0.3244%" height="15" fill="rgb(251,115,12)"/><text x="42.0793%" y="111.50"></text></g><g><title>metadata_decode_entry_def_span (584,816 samples, 0.29%)</title><rect x="41.8643%" y="85" width="0.2894%" height="15" fill="rgb(240,54,50)"/><text x="42.1143%" y="95.50"></text></g><g><title>evaluate_obligation (8,408,927 samples, 4.16%)</title><rect x="38.0588%" y="149" width="4.1612%" height="15" fill="rgb(233,84,52)"/><text x="38.3088%" y="159.50">evalu..</text></g><g><title>item_attrs (303,553 samples, 0.15%)</title><rect x="42.3165%" y="149" width="0.1502%" height="15" fill="rgb(207,117,47)"/><text x="42.5665%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (297,413 samples, 0.15%)</title><rect x="42.3195%" y="133" width="0.1472%" height="15" fill="rgb(249,43,39)"/><text x="42.5695%" y="143.50"></text></g><g><title>method_autoderef_steps (202,171 samples, 0.10%)</title><rect x="42.4907%" y="149" width="0.1000%" height="15" fill="rgb(209,38,44)"/><text x="42.7407%" y="159.50"></text></g><g><title>evaluate_obligation (257,063 samples, 0.13%)</title><rect x="44.7483%" y="133" width="0.1272%" height="15" fill="rgb(236,212,23)"/><text x="44.9983%" y="143.50"></text></g><g><title>typeck (4,846,124 samples, 2.40%)</title><rect x="42.7773%" y="149" width="2.3981%" height="15" fill="rgb(242,79,21)"/><text x="43.0273%" y="159.50">ty..</text></g><g><title>item_bodies_checking (33,279,957 samples, 16.47%)</title><rect x="28.7313%" y="197" width="16.4686%" height="15" fill="rgb(211,96,35)"/><text x="28.9813%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (33,275,817 samples, 16.47%)</title><rect x="28.7333%" y="181" width="16.4666%" height="15" fill="rgb(253,215,40)"/><text x="28.9833%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (33,159,555 samples, 16.41%)</title><rect x="28.7909%" y="165" width="16.4090%" height="15" fill="rgb(211,81,21)"/><text x="29.0409%" y="175.50">typeck</text></g><g><title>mir_borrowck (335,314 samples, 0.17%)</title><rect x="46.8558%" y="133" width="0.1659%" height="15" fill="rgb(208,190,38)"/><text x="47.1058%" y="143.50"></text></g><g><title>specialization_graph_of (497,756 samples, 0.25%)</title><rect x="47.3463%" y="53" width="0.2463%" height="15" fill="rgb(235,213,38)"/><text x="47.5963%" y="63.50"></text></g><g><title>impl_trait_ref (343,542 samples, 0.17%)</title><rect x="47.4226%" y="37" width="0.1700%" height="15" fill="rgb(237,122,38)"/><text x="47.6726%" y="47.50"></text></g><g><title>resolve_instance (660,757 samples, 0.33%)</title><rect x="47.2688%" y="69" width="0.3270%" height="15" fill="rgb(244,218,35)"/><text x="47.5188%" y="79.50"></text></g><g><title>mir_built (2,992,393 samples, 1.48%)</title><rect x="47.1507%" y="85" width="1.4808%" height="15" fill="rgb(240,68,47)"/><text x="47.4007%" y="95.50"></text></g><g><title>typeck (2,037,123 samples, 1.01%)</title><rect x="47.6235%" y="69" width="1.0081%" height="15" fill="rgb(210,16,53)"/><text x="47.8735%" y="79.50"></text></g><g><title>mir_const (3,291,586 samples, 1.63%)</title><rect x="47.0537%" y="117" width="1.6288%" height="15" fill="rgb(235,124,12)"/><text x="47.3037%" y="127.50"></text></g><g><title>unsafety_check_result (3,170,695 samples, 1.57%)</title><rect x="47.1135%" y="101" width="1.5690%" height="15" fill="rgb(224,169,11)"/><text x="47.3635%" y="111.50"></text></g><g><title>mir_promoted (3,362,267 samples, 1.66%)</title><rect x="47.0218%" y="133" width="1.6638%" height="15" fill="rgb(250,166,2)"/><text x="47.2718%" y="143.50"></text></g><g><title>item_types_checking (7,397,931 samples, 3.66%)</title><rect x="45.1999%" y="197" width="3.6609%" height="15" fill="rgb(242,216,29)"/><text x="45.4499%" y="207.50">item..</text></g><g><title>check_mod_item_types (7,390,841 samples, 3.66%)</title><rect x="45.2034%" y="181" width="3.6574%" height="15" fill="rgb(230,116,27)"/><text x="45.4534%" y="191.50">chec..</text></g><g><title>type_of (4,814,873 samples, 2.38%)</title><rect x="46.4781%" y="165" width="2.3826%" height="15" fill="rgb(228,99,48)"/><text x="46.7281%" y="175.50">ty..</text></g><g><title>mir_borrowck (4,811,393 samples, 2.38%)</title><rect x="46.4798%" y="149" width="2.3809%" height="15" fill="rgb(253,11,6)"/><text x="46.7298%" y="159.50">mi..</text></g><g><title>type_op_prove_predicate (219,293 samples, 0.11%)</title><rect x="48.7523%" y="133" width="0.1085%" height="15" fill="rgb(247,143,39)"/><text x="49.0023%" y="143.50"></text></g><g><title>fn_sig (424,168 samples, 0.21%)</title><rect x="49.0456%" y="165" width="0.2099%" height="15" fill="rgb(236,97,10)"/><text x="49.2956%" y="175.50"></text></g><g><title>late_bound_vars_map (605,370 samples, 0.30%)</title><rect x="49.7261%" y="117" width="0.2996%" height="15" fill="rgb(233,208,19)"/><text x="49.9761%" y="127.50"></text></g><g><title>resolve_lifetimes (580,858 samples, 0.29%)</title><rect x="49.7382%" y="101" width="0.2874%" height="15" fill="rgb(216,164,2)"/><text x="49.9882%" y="111.50"></text></g><g><title>explicit_predicates_of (1,070,673 samples, 0.53%)</title><rect x="49.5349%" y="133" width="0.5298%" height="15" fill="rgb(220,129,5)"/><text x="49.7849%" y="143.50"></text></g><g><title>predicates_of (1,512,898 samples, 0.75%)</title><rect x="49.4454%" y="165" width="0.7487%" height="15" fill="rgb(242,17,10)"/><text x="49.6954%" y="175.50"></text></g><g><title>predicates_defined_on (1,444,707 samples, 0.71%)</title><rect x="49.4791%" y="149" width="0.7149%" height="15" fill="rgb(242,107,0)"/><text x="49.7291%" y="159.50"></text></g><g><title>inferred_outlives_of (261,324 samples, 0.13%)</title><rect x="50.0647%" y="133" width="0.1293%" height="15" fill="rgb(251,28,31)"/><text x="50.3147%" y="143.50"></text></g><g><title>inferred_outlives_crate (229,463 samples, 0.11%)</title><rect x="50.0805%" y="117" width="0.1135%" height="15" fill="rgb(233,223,10)"/><text x="50.3305%" y="127.50"></text></g><g><title>super_predicates_of (222,612 samples, 0.11%)</title><rect x="50.1940%" y="165" width="0.1102%" height="15" fill="rgb(215,21,27)"/><text x="50.4440%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (213,972 samples, 0.11%)</title><rect x="50.1983%" y="149" width="0.1059%" height="15" fill="rgb(232,23,21)"/><text x="50.4483%" y="159.50"></text></g><g><title>type_collecting (3,108,275 samples, 1.54%)</title><rect x="48.8619%" y="197" width="1.5381%" height="15" fill="rgb(244,5,23)"/><text x="49.1119%" y="207.50"></text></g><g><title>collect_mod_item_types (3,094,765 samples, 1.53%)</title><rect x="48.8686%" y="181" width="1.5314%" height="15" fill="rgb(226,81,46)"/><text x="49.1186%" y="191.50"></text></g><g><title>evaluate_obligation (442,716 samples, 0.22%)</title><rect x="52.3506%" y="165" width="0.2191%" height="15" fill="rgb(247,70,30)"/><text x="52.6006%" y="175.50"></text></g><g><title>implied_outlives_bounds (494,182 samples, 0.24%)</title><rect x="52.5776%" y="165" width="0.2445%" height="15" fill="rgb(212,68,19)"/><text x="52.8276%" y="175.50"></text></g><g><title>param_env (846,839 samples, 0.42%)</title><rect x="52.8221%" y="165" width="0.4191%" height="15" fill="rgb(240,187,13)"/><text x="53.0721%" y="175.50"></text></g><g><title>region_scope_tree (368,663 samples, 0.18%)</title><rect x="53.2610%" y="165" width="0.1824%" height="15" fill="rgb(223,113,26)"/><text x="53.5110%" y="175.50"></text></g><g><title>check_impl_item_well_formed (5,880,433 samples, 2.91%)</title><rect x="50.5392%" y="181" width="2.9099%" height="15" fill="rgb(206,192,2)"/><text x="50.7892%" y="191.50">ch..</text></g><g><title>evaluate_obligation (959,660 samples, 0.47%)</title><rect x="55.2299%" y="165" width="0.4749%" height="15" fill="rgb(241,108,4)"/><text x="55.4799%" y="175.50"></text></g><g><title>implied_outlives_bounds (233,302 samples, 0.12%)</title><rect x="55.7144%" y="165" width="0.1154%" height="15" fill="rgb(247,173,49)"/><text x="55.9644%" y="175.50"></text></g><g><title>param_env (583,630 samples, 0.29%)</title><rect x="55.8298%" y="165" width="0.2888%" height="15" fill="rgb(224,114,35)"/><text x="56.0798%" y="175.50"></text></g><g><title>check_item_well_formed (5,693,407 samples, 2.82%)</title><rect x="53.4491%" y="181" width="2.8174%" height="15" fill="rgb(245,159,27)"/><text x="53.6991%" y="191.50">ch..</text></g><g><title>analysis (98,214,793 samples, 48.60%)</title><rect x="7.9720%" y="229" width="48.6017%" height="15" fill="rgb(245,172,44)"/><text x="8.2220%" y="239.50">analysis</text></g><g><title>type_check_crate (64,555,972 samples, 31.95%)</title><rect x="24.6281%" y="213" width="31.9456%" height="15" fill="rgb(236,23,11)"/><text x="24.8781%" y="223.50">type_check_crate</text></g><g><title>wf_checking (12,469,108 samples, 6.17%)</title><rect x="50.4033%" y="197" width="6.1703%" height="15" fill="rgb(205,117,38)"/><text x="50.6533%" y="207.50">wf_check..</text></g><g><title>check_trait_item_well_formed (620,654 samples, 0.31%)</title><rect x="56.2665%" y="181" width="0.3071%" height="15" fill="rgb(237,72,25)"/><text x="56.5165%" y="191.50"></text></g><g><title>codegen_module (608,277 samples, 0.30%)</title><rect x="56.8580%" y="213" width="0.3010%" height="15" fill="rgb(244,70,9)"/><text x="57.1080%" y="223.50"></text></g><g><title>monomorphization_collector (211,133 samples, 0.10%)</title><rect x="57.1707%" y="197" width="0.1045%" height="15" fill="rgb(217,125,39)"/><text x="57.4207%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (326,304 samples, 0.16%)</title><rect x="57.1592%" y="213" width="0.1615%" height="15" fill="rgb(235,36,10)"/><text x="57.4092%" y="223.50"></text></g><g><title>codegen_crate (1,512,927 samples, 0.75%)</title><rect x="56.5798%" y="229" width="0.7487%" height="15" fill="rgb(251,123,47)"/><text x="56.8298%" y="239.50"></text></g><g><title>codegen_module_optimize (5,447,720 samples, 2.70%)</title><rect x="57.3284%" y="229" width="2.6958%" height="15" fill="rgb(221,13,13)"/><text x="57.5784%" y="239.50">co..</text></g><g><title>LLVM_module_optimize (4,803,853 samples, 2.38%)</title><rect x="57.6471%" y="213" width="2.3772%" height="15" fill="rgb(238,131,9)"/><text x="57.8971%" y="223.50">LL..</text></g><g><title>LLVM_lto_optimize (2,381,267 samples, 1.18%)</title><rect x="60.3028%" y="213" width="1.1784%" height="15" fill="rgb(211,50,8)"/><text x="60.5528%" y="223.50"></text></g><g><title>LLVM_module_codegen (6,065,977 samples, 3.00%)</title><rect x="61.4812%" y="213" width="3.0018%" height="15" fill="rgb(245,182,24)"/><text x="61.7312%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (5,951,696 samples, 2.95%)</title><rect x="61.5377%" y="197" width="2.9452%" height="15" fill="rgb(242,14,37)"/><text x="61.7877%" y="207.50">LL..</text></g><g><title>codegen_module_perform_lto (9,046,110 samples, 4.48%)</title><rect x="60.0242%" y="229" width="4.4765%" height="15" fill="rgb(246,228,12)"/><text x="60.2742%" y="239.50">codeg..</text></g><g><title>AST_validation (394,764 samples, 0.20%)</title><rect x="64.6128%" y="213" width="0.1953%" height="15" fill="rgb(213,55,15)"/><text x="64.8628%" y="223.50"></text></g><g><title>metadata_load_macro (213,982 samples, 0.11%)</title><rect x="74.1212%" y="181" width="0.1059%" height="15" fill="rgb(209,9,3)"/><text x="74.3712%" y="191.50"></text></g><g><title>metadata_register_crate (8,018,939 samples, 3.97%)</title><rect x="74.2271%" y="181" width="3.9682%" height="15" fill="rgb(230,59,30)"/><text x="74.4771%" y="191.50">meta..</text></g><g><title>macro_expand_crate (26,903,827 samples, 13.31%)</title><rect x="64.9475%" y="213" width="13.3134%" height="15" fill="rgb(209,121,21)"/><text x="65.1975%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (26,886,106 samples, 13.30%)</title><rect x="64.9563%" y="197" width="13.3046%" height="15" fill="rgb(220,109,13)"/><text x="65.2063%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (279,973 samples, 0.14%)</title><rect x="78.2638%" y="213" width="0.1385%" height="15" fill="rgb(232,18,1)"/><text x="78.5138%" y="223.50"></text></g><g><title>finalize_macro_resolutions (227,652 samples, 0.11%)</title><rect x="78.4666%" y="197" width="0.1127%" height="15" fill="rgb(215,41,42)"/><text x="78.7166%" y="207.50"></text></g><g><title>late_resolve_crate (3,107,285 samples, 1.54%)</title><rect x="78.5793%" y="197" width="1.5376%" height="15" fill="rgb(224,123,36)"/><text x="78.8293%" y="207.50"></text></g><g><title>configure_and_expand (31,828,461 samples, 15.75%)</title><rect x="64.5007%" y="229" width="15.7503%" height="15" fill="rgb(240,125,3)"/><text x="64.7507%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (3,735,881 samples, 1.85%)</title><rect x="78.4024%" y="213" width="1.8487%" height="15" fill="rgb(205,98,50)"/><text x="78.6524%" y="223.50">r..</text></g><g><title>drop_ast (373,714 samples, 0.18%)</title><rect x="80.2511%" y="229" width="0.1849%" height="15" fill="rgb(205,185,37)"/><text x="80.5011%" y="239.50"></text></g><g><title>early_lint_checks (652,297 samples, 0.32%)</title><rect x="80.4446%" y="229" width="0.3228%" height="15" fill="rgb(238,207,15)"/><text x="80.6946%" y="239.50"></text></g><g><title>free_global_ctxt (2,503,927 samples, 1.24%)</title><rect x="80.7673%" y="229" width="1.2391%" height="15" fill="rgb(213,199,42)"/><text x="81.0173%" y="239.50"></text></g><g><title>is_sized_raw (281,442 samples, 0.14%)</title><rect x="84.9004%" y="181" width="0.1393%" height="15" fill="rgb(235,201,11)"/><text x="85.1504%" y="191.50"></text></g><g><title>evaluate_obligation (224,171 samples, 0.11%)</title><rect x="84.9288%" y="165" width="0.1109%" height="15" fill="rgb(207,46,11)"/><text x="85.1788%" y="175.50"></text></g><g><title>layout_of (237,821 samples, 0.12%)</title><rect x="85.0937%" y="165" width="0.1177%" height="15" fill="rgb(241,35,35)"/><text x="85.3437%" y="175.50"></text></g><g><title>layout_of (379,485 samples, 0.19%)</title><rect x="85.0397%" y="181" width="0.1878%" height="15" fill="rgb(243,32,47)"/><text x="85.2897%" y="191.50"></text></g><g><title>layout_of (1,312,800 samples, 0.65%)</title><rect x="84.7267%" y="197" width="0.6496%" height="15" fill="rgb(247,202,23)"/><text x="84.9767%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (266,400 samples, 0.13%)</title><rect x="85.2446%" y="181" width="0.1318%" height="15" fill="rgb(219,102,11)"/><text x="85.4946%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,439,697 samples, 1.21%)</title><rect x="85.3764%" y="197" width="1.2073%" height="15" fill="rgb(243,110,44)"/><text x="85.6264%" y="207.50"></text></g><g><title>optimized_mir (6,741,881 samples, 3.34%)</title><rect x="83.2770%" y="213" width="3.3362%" height="15" fill="rgb(222,74,54)"/><text x="83.5270%" y="223.50">opt..</text></g><g><title>generate_crate_metadata (9,507,725 samples, 4.70%)</title><rect x="82.0064%" y="229" width="4.7049%" height="15" fill="rgb(216,99,12)"/><text x="82.2564%" y="239.50">gener..</text></g><g><title>hir_lowering (7,203,549 samples, 3.56%)</title><rect x="86.7113%" y="229" width="3.5647%" height="15" fill="rgb(226,22,26)"/><text x="86.9613%" y="239.50">hir_..</text></g><g><title>finish_ongoing_codegen (11,909,882 samples, 5.89%)</title><rect x="90.2836%" y="213" width="5.8936%" height="15" fill="rgb(217,163,10)"/><text x="90.5336%" y="223.50">finish_..</text></g><g><title>link_crate (947,680 samples, 0.47%)</title><rect x="96.1772%" y="213" width="0.4690%" height="15" fill="rgb(213,25,53)"/><text x="96.4272%" y="223.50"></text></g><g><title>link_binary (924,850 samples, 0.46%)</title><rect x="96.1885%" y="197" width="0.4577%" height="15" fill="rgb(252,105,26)"/><text x="96.4385%" y="207.50"></text></g><g><title>link_rlib (617,956 samples, 0.31%)</title><rect x="96.3403%" y="181" width="0.3058%" height="15" fill="rgb(220,39,43)"/><text x="96.5903%" y="191.50"></text></g><g><title>link (12,881,022 samples, 6.37%)</title><rect x="90.2760%" y="229" width="6.3742%" height="15" fill="rgb(229,68,48)"/><text x="90.5260%" y="239.50">link</text></g><g><title>parse_crate (4,928,764 samples, 2.44%)</title><rect x="96.6502%" y="229" width="2.4390%" height="15" fill="rgb(252,8,32)"/><text x="96.9002%" y="239.50">pa..</text></g><g><title>prepare_outputs (395,875 samples, 0.20%)</title><rect x="99.0940%" y="229" width="0.1959%" height="15" fill="rgb(223,20,43)"/><text x="99.3440%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (876,140 samples, 0.43%)</title><rect x="99.2899%" y="229" width="0.4336%" height="15" fill="rgb(229,81,49)"/><text x="99.5399%" y="239.50"></text></g><g><title>all (202,081,157 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (202,081,157 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (414,724 samples, 0.21%)</title><rect x="99.7948%" y="229" width="0.2052%" height="15" fill="rgb(249,174,33)"/><text x="100.0448%" y="239.50"></text></g></svg></svg>