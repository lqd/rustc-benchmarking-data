<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (19,589,416 samples, 1.70%)</title><rect x="0.1003%" y="181" width="1.7043%" height="15" fill="rgb(227,0,7)"/><text x="0.3503%" y="191.50"></text></g><g><title>is_late_bound_map (1,166,047 samples, 0.10%)</title><rect x="13.0042%" y="133" width="0.1014%" height="15" fill="rgb(217,0,24)"/><text x="13.2542%" y="143.50"></text></g><g><title>is_copy_raw (11,789,108 samples, 1.03%)</title><rect x="18.5500%" y="53" width="1.0256%" height="15" fill="rgb(221,193,54)"/><text x="18.8000%" y="63.50"></text></g><g><title>evaluate_obligation (10,115,245 samples, 0.88%)</title><rect x="18.6956%" y="37" width="0.8800%" height="15" fill="rgb(248,212,6)"/><text x="18.9456%" y="47.50"></text></g><g><title>needs_drop_raw (13,069,613 samples, 1.14%)</title><rect x="18.4390%" y="69" width="1.1370%" height="15" fill="rgb(208,68,35)"/><text x="18.6890%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,915,171 samples, 0.25%)</title><rect x="19.7925%" y="53" width="0.2536%" height="15" fill="rgb(232,128,0)"/><text x="20.0425%" y="63.50"></text></g><g><title>resolve_instance (6,074,254 samples, 0.53%)</title><rect x="19.5793%" y="69" width="0.5285%" height="15" fill="rgb(207,160,47)"/><text x="19.8293%" y="79.50"></text></g><g><title>thir_body (13,461,498 samples, 1.17%)</title><rect x="20.1423%" y="69" width="1.1711%" height="15" fill="rgb(228,23,34)"/><text x="20.3923%" y="79.50"></text></g><g><title>mir_const (83,915,578 samples, 7.30%)</title><rect x="14.0450%" y="117" width="7.3006%" height="15" fill="rgb(218,30,26)"/><text x="14.2950%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (72,593,732 samples, 6.32%)</title><rect x="15.0300%" y="101" width="6.3156%" height="15" fill="rgb(220,122,19)"/><text x="15.2800%" y="111.50">unsafety..</text></g><g><title>mir_built (66,591,023 samples, 5.79%)</title><rect x="15.5522%" y="85" width="5.7933%" height="15" fill="rgb(250,228,42)"/><text x="15.8022%" y="95.50">mir_bui..</text></g><g><title>mir_const (2,059,633 samples, 0.18%)</title><rect x="21.5839%" y="101" width="0.1792%" height="15" fill="rgb(240,193,28)"/><text x="21.8339%" y="111.50"></text></g><g><title>unsafety_check_result (1,606,250 samples, 0.14%)</title><rect x="21.6233%" y="85" width="0.1397%" height="15" fill="rgb(216,20,37)"/><text x="21.8733%" y="95.50"></text></g><g><title>mir_built (1,429,167 samples, 0.12%)</title><rect x="21.6387%" y="69" width="0.1243%" height="15" fill="rgb(206,188,39)"/><text x="21.8887%" y="79.50"></text></g><g><title>mir_promoted (98,991,344 samples, 8.61%)</title><rect x="13.1805%" y="133" width="8.6121%" height="15" fill="rgb(217,207,13)"/><text x="13.4305%" y="143.50">mir_promoted</text></g><g><title>mir_const_qualif (5,138,617 samples, 0.45%)</title><rect x="21.3456%" y="117" width="0.4471%" height="15" fill="rgb(231,73,38)"/><text x="21.5956%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (9,088,954 samples, 0.79%)</title><rect x="21.7936%" y="133" width="0.7907%" height="15" fill="rgb(225,20,46)"/><text x="22.0436%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,407,066 samples, 0.30%)</title><rect x="22.5844%" y="133" width="0.2964%" height="15" fill="rgb(210,31,41)"/><text x="22.8344%" y="143.50"></text></g><g><title>normalize_projection_ty (2,155,025 samples, 0.19%)</title><rect x="22.6933%" y="117" width="0.1875%" height="15" fill="rgb(221,200,47)"/><text x="22.9433%" y="127.50"></text></g><g><title>type_op_normalize_ty (2,778,363 samples, 0.24%)</title><rect x="22.9178%" y="133" width="0.2417%" height="15" fill="rgb(226,26,5)"/><text x="23.1678%" y="143.50"></text></g><g><title>normalize_projection_ty (2,022,308 samples, 0.18%)</title><rect x="22.9836%" y="117" width="0.1759%" height="15" fill="rgb(249,33,26)"/><text x="23.2336%" y="127.50"></text></g><g><title>type_op_prove_predicate (18,237,956 samples, 1.59%)</title><rect x="23.1595%" y="133" width="1.5867%" height="15" fill="rgb(235,183,28)"/><text x="23.4095%" y="143.50"></text></g><g><title>MIR_borrow_checking (260,912,150 samples, 22.70%)</title><rect x="2.0483%" y="165" width="22.6991%" height="15" fill="rgb(221,5,38)"/><text x="2.2983%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (258,747,797 samples, 22.51%)</title><rect x="2.2366%" y="149" width="22.5108%" height="15" fill="rgb(247,18,42)"/><text x="2.4866%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,796,231 samples, 0.24%)</title><rect x="24.7474%" y="165" width="0.2433%" height="15" fill="rgb(241,131,45)"/><text x="24.9974%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,909,071 samples, 0.17%)</title><rect x="24.8246%" y="149" width="0.1661%" height="15" fill="rgb(249,31,29)"/><text x="25.0746%" y="159.50"></text></g><g><title>hir_module_items (2,502,108 samples, 0.22%)</title><rect x="24.9906%" y="165" width="0.2177%" height="15" fill="rgb(225,111,53)"/><text x="25.2406%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,287,574 samples, 0.11%)</title><rect x="25.6026%" y="101" width="0.1120%" height="15" fill="rgb(238,160,17)"/><text x="25.8526%" y="111.50"></text></g><g><title>codegen_fn_attrs (3,257,570 samples, 0.28%)</title><rect x="25.4388%" y="133" width="0.2834%" height="15" fill="rgb(214,148,48)"/><text x="25.6888%" y="143.50"></text></g><g><title>should_inherit_track_caller (2,730,210 samples, 0.24%)</title><rect x="25.4847%" y="117" width="0.2375%" height="15" fill="rgb(232,36,49)"/><text x="25.7347%" y="127.50"></text></g><g><title>check_mod_attrs (5,836,264 samples, 0.51%)</title><rect x="25.2145%" y="149" width="0.5077%" height="15" fill="rgb(209,103,24)"/><text x="25.4645%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,567,915 samples, 0.14%)</title><rect x="25.7222%" y="149" width="0.1364%" height="15" fill="rgb(229,88,8)"/><text x="25.9722%" y="159.50"></text></g><g><title>lookup_deprecation_entry (1,490,147 samples, 0.13%)</title><rect x="26.0932%" y="133" width="0.1296%" height="15" fill="rgb(213,181,19)"/><text x="26.3432%" y="143.50"></text></g><g><title>stability_index (1,343,444 samples, 0.12%)</title><rect x="26.1060%" y="117" width="0.1169%" height="15" fill="rgb(254,191,54)"/><text x="26.3560%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (3,032,962 samples, 0.26%)</title><rect x="25.9694%" y="149" width="0.2639%" height="15" fill="rgb(241,83,37)"/><text x="26.2194%" y="159.50"></text></g><g><title>misc_checking_1 (12,228,065 samples, 1.06%)</title><rect x="25.2084%" y="165" width="1.0638%" height="15" fill="rgb(233,36,39)"/><text x="25.4584%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (5,541,411 samples, 0.48%)</title><rect x="26.2724%" y="149" width="0.4821%" height="15" fill="rgb(226,3,54)"/><text x="26.5224%" y="159.50"></text></g><g><title>check_mod_liveness (4,609,779 samples, 0.40%)</title><rect x="26.3535%" y="133" width="0.4010%" height="15" fill="rgb(245,192,40)"/><text x="26.6035%" y="143.50"></text></g><g><title>misc_checking_2 (9,930,039 samples, 0.86%)</title><rect x="26.2722%" y="165" width="0.8639%" height="15" fill="rgb(238,167,29)"/><text x="26.5222%" y="175.50"></text></g><g><title>match_checking (4,386,358 samples, 0.38%)</title><rect x="26.7545%" y="149" width="0.3816%" height="15" fill="rgb(232,182,51)"/><text x="27.0045%" y="159.50"></text></g><g><title>check_match (3,859,553 samples, 0.34%)</title><rect x="26.8003%" y="133" width="0.3358%" height="15" fill="rgb(231,60,39)"/><text x="27.0503%" y="143.50"></text></g><g><title>check_private_in_public (3,441,167 samples, 0.30%)</title><rect x="27.1377%" y="149" width="0.2994%" height="15" fill="rgb(208,69,12)"/><text x="27.3877%" y="159.50"></text></g><g><title>death_checking (5,934,036 samples, 0.52%)</title><rect x="27.4371%" y="149" width="0.5163%" height="15" fill="rgb(235,93,37)"/><text x="27.6871%" y="159.50"></text></g><g><title>param_env (3,108,492 samples, 0.27%)</title><rect x="28.4107%" y="117" width="0.2704%" height="15" fill="rgb(213,116,39)"/><text x="28.6607%" y="127.50"></text></g><g><title>predicates_of (1,252,225 samples, 0.11%)</title><rect x="28.5722%" y="101" width="0.1089%" height="15" fill="rgb(222,207,29)"/><text x="28.8222%" y="111.50"></text></g><g><title>crate_lints (9,623,686 samples, 0.84%)</title><rect x="27.9537%" y="133" width="0.8373%" height="15" fill="rgb(206,96,30)"/><text x="28.2037%" y="143.50"></text></g><g><title>type_of (1,256,584 samples, 0.11%)</title><rect x="28.6816%" y="117" width="0.1093%" height="15" fill="rgb(218,138,4)"/><text x="28.9316%" y="127.50"></text></g><g><title>lint_checking (14,693,692 samples, 1.28%)</title><rect x="27.9534%" y="149" width="1.2783%" height="15" fill="rgb(250,191,14)"/><text x="28.2034%" y="159.50"></text></g><g><title>module_lints (5,066,076 samples, 0.44%)</title><rect x="28.7910%" y="133" width="0.4407%" height="15" fill="rgb(239,60,40)"/><text x="29.0410%" y="143.50"></text></g><g><title>lint_mod (5,044,306 samples, 0.44%)</title><rect x="28.7929%" y="117" width="0.4388%" height="15" fill="rgb(206,27,48)"/><text x="29.0429%" y="127.50"></text></g><g><title>privacy_access_levels (4,953,575 samples, 0.43%)</title><rect x="29.2317%" y="149" width="0.4310%" height="15" fill="rgb(225,35,8)"/><text x="29.4817%" y="159.50"></text></g><g><title>privacy_checking_modules (10,949,370 samples, 0.95%)</title><rect x="29.6627%" y="149" width="0.9526%" height="15" fill="rgb(250,213,24)"/><text x="29.9127%" y="159.50"></text></g><g><title>check_mod_privacy (10,927,520 samples, 0.95%)</title><rect x="29.6646%" y="133" width="0.9507%" height="15" fill="rgb(247,123,22)"/><text x="29.9146%" y="143.50"></text></g><g><title>misc_checking_3 (40,126,771 samples, 3.49%)</title><rect x="27.1361%" y="165" width="3.4910%" height="15" fill="rgb(231,138,38)"/><text x="27.3861%" y="175.50">mis..</text></g><g><title>impl_parent (3,940,850 samples, 0.34%)</title><rect x="31.3859%" y="101" width="0.3428%" height="15" fill="rgb(231,145,46)"/><text x="31.6359%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,048,834 samples, 0.18%)</title><rect x="31.5505%" y="85" width="0.1782%" height="15" fill="rgb(251,118,11)"/><text x="31.8005%" y="95.50"></text></g><g><title>impl_trait_ref (6,802,960 samples, 0.59%)</title><rect x="31.7287%" y="101" width="0.5919%" height="15" fill="rgb(217,147,25)"/><text x="31.9787%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,317,959 samples, 0.46%)</title><rect x="31.8579%" y="85" width="0.4627%" height="15" fill="rgb(247,81,37)"/><text x="32.1079%" y="95.50"></text></g><g><title>trait_impls_of (1,261,744 samples, 0.11%)</title><rect x="32.3505%" y="101" width="0.1098%" height="15" fill="rgb(209,12,38)"/><text x="32.6005%" y="111.50"></text></g><g><title>coherent_trait (20,073,242 samples, 1.75%)</title><rect x="30.7140%" y="133" width="1.7464%" height="15" fill="rgb(227,1,9)"/><text x="30.9640%" y="143.50"></text></g><g><title>specialization_graph_of (19,154,523 samples, 1.67%)</title><rect x="30.7939%" y="117" width="1.6664%" height="15" fill="rgb(248,47,43)"/><text x="31.0439%" y="127.50"></text></g><g><title>coherence_checking (20,872,260 samples, 1.82%)</title><rect x="30.7105%" y="149" width="1.8159%" height="15" fill="rgb(221,10,30)"/><text x="30.9605%" y="159.50">c..</text></g><g><title>dropck_outlives (3,120,288 samples, 0.27%)</title><rect x="52.2094%" y="101" width="0.2715%" height="15" fill="rgb(210,229,1)"/><text x="52.4594%" y="111.50"></text></g><g><title>evaluate_obligation (11,704,252 samples, 1.02%)</title><rect x="52.4809%" y="101" width="1.0183%" height="15" fill="rgb(222,148,37)"/><text x="52.7309%" y="111.50"></text></g><g><title>method_autoderef_steps (2,743,541 samples, 0.24%)</title><rect x="53.6305%" y="101" width="0.2387%" height="15" fill="rgb(234,67,33)"/><text x="53.8805%" y="111.50"></text></g><g><title>evaluate_obligation (1,482,284 samples, 0.13%)</title><rect x="53.7403%" y="85" width="0.1290%" height="15" fill="rgb(247,98,35)"/><text x="53.9903%" y="95.50"></text></g><g><title>typeck (4,592,921 samples, 0.40%)</title><rect x="54.0543%" y="101" width="0.3996%" height="15" fill="rgb(247,138,52)"/><text x="54.3043%" y="111.50"></text></g><g><title>item_bodies_checking (251,708,700 samples, 21.90%)</title><rect x="32.5924%" y="149" width="21.8984%" height="15" fill="rgb(213,79,30)"/><text x="32.8424%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (251,704,690 samples, 21.90%)</title><rect x="32.5927%" y="133" width="21.8980%" height="15" fill="rgb(246,177,23)"/><text x="32.8427%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (250,273,216 samples, 21.77%)</title><rect x="32.7172%" y="117" width="21.7735%" height="15" fill="rgb(230,62,27)"/><text x="32.9672%" y="127.50">typeck</text></g><g><title>item_types_checking (14,156,275 samples, 1.23%)</title><rect x="54.4907%" y="149" width="1.2316%" height="15" fill="rgb(216,154,8)"/><text x="54.7407%" y="159.50"></text></g><g><title>check_mod_item_types (14,134,145 samples, 1.23%)</title><rect x="54.4927%" y="133" width="1.2297%" height="15" fill="rgb(244,35,45)"/><text x="54.7427%" y="143.50"></text></g><g><title>fn_sig (3,297,876 samples, 0.29%)</title><rect x="56.0232%" y="117" width="0.2869%" height="15" fill="rgb(251,115,12)"/><text x="56.2732%" y="127.50"></text></g><g><title>named_region_map (2,159,114 samples, 0.19%)</title><rect x="56.4603%" y="101" width="0.1878%" height="15" fill="rgb(240,54,50)"/><text x="56.7103%" y="111.50"></text></g><g><title>resolve_lifetimes (2,036,621 samples, 0.18%)</title><rect x="56.4709%" y="85" width="0.1772%" height="15" fill="rgb(233,84,52)"/><text x="56.7209%" y="95.50"></text></g><g><title>lint_levels (1,853,891 samples, 0.16%)</title><rect x="56.4868%" y="69" width="0.1613%" height="15" fill="rgb(207,117,47)"/><text x="56.7368%" y="79.50"></text></g><g><title>generics_of (4,047,935 samples, 0.35%)</title><rect x="56.3101%" y="117" width="0.3522%" height="15" fill="rgb(249,43,39)"/><text x="56.5601%" y="127.50"></text></g><g><title>late_bound_vars_map (5,022,222 samples, 0.44%)</title><rect x="57.2294%" y="69" width="0.4369%" height="15" fill="rgb(209,38,44)"/><text x="57.4794%" y="79.50"></text></g><g><title>resolve_lifetimes (4,721,450 samples, 0.41%)</title><rect x="57.2556%" y="53" width="0.4108%" height="15" fill="rgb(236,212,23)"/><text x="57.5056%" y="63.50"></text></g><g><title>explicit_predicates_of (9,014,910 samples, 0.78%)</title><rect x="56.9011%" y="85" width="0.7843%" height="15" fill="rgb(242,79,21)"/><text x="57.1511%" y="95.50"></text></g><g><title>predicates_of (11,825,684 samples, 1.03%)</title><rect x="56.7171%" y="117" width="1.0288%" height="15" fill="rgb(211,96,35)"/><text x="56.9671%" y="127.50"></text></g><g><title>predicates_defined_on (11,103,482 samples, 0.97%)</title><rect x="56.7799%" y="101" width="0.9660%" height="15" fill="rgb(253,215,40)"/><text x="57.0299%" y="111.50"></text></g><g><title>type_collecting (25,195,237 samples, 2.19%)</title><rect x="55.7250%" y="149" width="2.1920%" height="15" fill="rgb(211,81,21)"/><text x="55.9750%" y="159.50">t..</text></g><g><title>collect_mod_item_types (25,159,617 samples, 2.19%)</title><rect x="55.7281%" y="133" width="2.1889%" height="15" fill="rgb(208,190,38)"/><text x="55.9781%" y="143.50">c..</text></g><g><title>type_of (1,919,860 samples, 0.17%)</title><rect x="57.7500%" y="117" width="0.1670%" height="15" fill="rgb(235,213,38)"/><text x="58.0000%" y="127.50"></text></g><g><title>evaluate_obligation (5,266,028 samples, 0.46%)</title><rect x="61.8245%" y="117" width="0.4581%" height="15" fill="rgb(237,122,38)"/><text x="62.0745%" y="127.50"></text></g><g><title>implied_outlives_bounds (4,539,928 samples, 0.39%)</title><rect x="62.3015%" y="117" width="0.3950%" height="15" fill="rgb(244,218,35)"/><text x="62.5515%" y="127.50"></text></g><g><title>param_env (8,760,776 samples, 0.76%)</title><rect x="62.7007%" y="117" width="0.7622%" height="15" fill="rgb(240,68,47)"/><text x="62.9507%" y="127.50"></text></g><g><title>region_scope_tree (4,814,141 samples, 0.42%)</title><rect x="63.4687%" y="117" width="0.4188%" height="15" fill="rgb(210,16,53)"/><text x="63.7187%" y="127.50"></text></g><g><title>check_impl_item_well_formed (65,390,834 samples, 5.69%)</title><rect x="58.2058%" y="133" width="5.6889%" height="15" fill="rgb(235,124,12)"/><text x="58.4558%" y="143.50">check_i..</text></g><g><title>implied_outlives_bounds (1,853,387 samples, 0.16%)</title><rect x="66.3331%" y="117" width="0.1612%" height="15" fill="rgb(224,169,11)"/><text x="66.5831%" y="127.50"></text></g><g><title>param_env (4,617,286 samples, 0.40%)</title><rect x="66.4945%" y="117" width="0.4017%" height="15" fill="rgb(250,166,2)"/><text x="66.7445%" y="127.50"></text></g><g><title>check_item_well_formed (36,373,792 samples, 3.16%)</title><rect x="63.8948%" y="133" width="3.1645%" height="15" fill="rgb(242,216,29)"/><text x="64.1448%" y="143.50">che..</text></g><g><title>variances_of (1,217,754 samples, 0.11%)</title><rect x="66.9533%" y="117" width="0.1059%" height="15" fill="rgb(230,116,27)"/><text x="67.2033%" y="127.50"></text></g><g><title>crate_variances (1,198,744 samples, 0.10%)</title><rect x="66.9549%" y="101" width="0.1043%" height="15" fill="rgb(228,99,48)"/><text x="67.2049%" y="111.50"></text></g><g><title>analysis (750,437,866 samples, 65.29%)</title><rect x="1.8046%" y="181" width="65.2873%" height="15" fill="rgb(253,11,6)"/><text x="2.0546%" y="191.50">analysis</text></g><g><title>type_check_crate (419,140,532 samples, 36.46%)</title><rect x="30.6271%" y="165" width="36.4648%" height="15" fill="rgb(247,143,39)"/><text x="30.8771%" y="175.50">type_check_crate</text></g><g><title>wf_checking (105,357,539 samples, 9.17%)</title><rect x="57.9259%" y="149" width="9.1660%" height="15" fill="rgb(236,97,10)"/><text x="58.1759%" y="159.50">wf_checking</text></g><g><title>codegen_module (1,923,651 samples, 0.17%)</title><rect x="67.1510%" y="165" width="0.1674%" height="15" fill="rgb(233,208,19)"/><text x="67.4010%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (1,711,328 samples, 0.15%)</title><rect x="67.3202%" y="133" width="0.1489%" height="15" fill="rgb(216,164,2)"/><text x="67.5702%" y="143.50"></text></g><g><title>monomorphization_collector (2,157,623 samples, 0.19%)</title><rect x="67.3199%" y="149" width="0.1877%" height="15" fill="rgb(220,129,5)"/><text x="67.5699%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,305,365 samples, 0.20%)</title><rect x="67.3184%" y="165" width="0.2006%" height="15" fill="rgb(242,17,10)"/><text x="67.5684%" y="175.50"></text></g><g><title>codegen_crate (5,056,015 samples, 0.44%)</title><rect x="67.0927%" y="181" width="0.4399%" height="15" fill="rgb(242,107,0)"/><text x="67.3427%" y="191.50"></text></g><g><title>codegen_module_optimize (11,458,235 samples, 1.00%)</title><rect x="67.5325%" y="181" width="0.9969%" height="15" fill="rgb(251,28,31)"/><text x="67.7825%" y="191.50"></text></g><g><title>LLVM_module_optimize (9,097,269 samples, 0.79%)</title><rect x="67.7379%" y="165" width="0.7915%" height="15" fill="rgb(233,223,10)"/><text x="67.9879%" y="175.50"></text></g><g><title>LLVM_lto_optimize (5,531,132 samples, 0.48%)</title><rect x="68.6479%" y="165" width="0.4812%" height="15" fill="rgb(215,21,27)"/><text x="68.8979%" y="175.50"></text></g><g><title>LLVM_module_codegen (19,765,487 samples, 1.72%)</title><rect x="69.1291%" y="165" width="1.7196%" height="15" fill="rgb(232,23,21)"/><text x="69.3791%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (19,469,203 samples, 1.69%)</title><rect x="69.1549%" y="149" width="1.6938%" height="15" fill="rgb(244,5,23)"/><text x="69.4049%" y="159.50"></text></g><g><title>codegen_module_perform_lto (26,794,814 samples, 2.33%)</title><rect x="68.5294%" y="181" width="2.3311%" height="15" fill="rgb(226,81,46)"/><text x="68.7794%" y="191.50">c..</text></g><g><title>AST_validation (1,835,570 samples, 0.16%)</title><rect x="70.8766%" y="165" width="0.1597%" height="15" fill="rgb(247,70,30)"/><text x="71.1266%" y="175.50"></text></g><g><title>complete_gated_feature_checking (1,197,603 samples, 0.10%)</title><rect x="71.0363%" y="165" width="0.1042%" height="15" fill="rgb(212,68,19)"/><text x="71.2863%" y="175.50"></text></g><g><title>metadata_register_crate (1,186,194 samples, 0.10%)</title><rect x="79.5328%" y="133" width="0.1032%" height="15" fill="rgb(240,187,13)"/><text x="79.7828%" y="143.50"></text></g><g><title>macro_expand_crate (101,268,075 samples, 8.81%)</title><rect x="71.1466%" y="165" width="8.8102%" height="15" fill="rgb(223,113,26)"/><text x="71.3966%" y="175.50">macro_expand..</text></g><g><title>expand_crate (101,254,434 samples, 8.81%)</title><rect x="71.1478%" y="149" width="8.8090%" height="15" fill="rgb(206,192,2)"/><text x="71.3978%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (3,688,323 samples, 0.32%)</title><rect x="79.6360%" y="133" width="0.3209%" height="15" fill="rgb(241,108,4)"/><text x="79.8860%" y="143.50"></text></g><g><title>late_resolve_crate (17,344,931 samples, 1.51%)</title><rect x="80.0528%" y="149" width="1.5090%" height="15" fill="rgb(247,173,49)"/><text x="80.3028%" y="159.50"></text></g><g><title>resolve_check_unused (1,444,426 samples, 0.13%)</title><rect x="81.5699%" y="149" width="0.1257%" height="15" fill="rgb(224,114,35)"/><text x="81.8199%" y="159.50"></text></g><g><title>configure_and_expand (125,549,461 samples, 10.92%)</title><rect x="70.8605%" y="181" width="10.9227%" height="15" fill="rgb(245,159,27)"/><text x="71.1105%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (20,907,970 samples, 1.82%)</title><rect x="79.9642%" y="165" width="1.8190%" height="15" fill="rgb(245,172,44)"/><text x="80.2142%" y="175.50">r..</text></g><g><title>drop_ast (4,405,249 samples, 0.38%)</title><rect x="81.7832%" y="181" width="0.3833%" height="15" fill="rgb(236,23,11)"/><text x="82.0332%" y="191.50"></text></g><g><title>early_lint_checks (4,401,288 samples, 0.38%)</title><rect x="82.1682%" y="181" width="0.3829%" height="15" fill="rgb(205,117,38)"/><text x="82.4182%" y="191.50"></text></g><g><title>free_global_ctxt (11,392,795 samples, 0.99%)</title><rect x="82.5512%" y="181" width="0.9912%" height="15" fill="rgb(237,72,25)"/><text x="82.8012%" y="191.50"></text></g><g><title>reachable_non_generics (2,511,127 samples, 0.22%)</title><rect x="85.8053%" y="149" width="0.2185%" height="15" fill="rgb(244,70,9)"/><text x="86.0553%" y="159.50"></text></g><g><title>reachable_set (2,335,186 samples, 0.20%)</title><rect x="85.8206%" y="133" width="0.2032%" height="15" fill="rgb(217,125,39)"/><text x="86.0706%" y="143.50"></text></g><g><title>exported_symbols (2,627,509 samples, 0.23%)</title><rect x="85.8028%" y="165" width="0.2286%" height="15" fill="rgb(235,36,10)"/><text x="86.0528%" y="175.50"></text></g><g><title>layout_of (3,225,128 samples, 0.28%)</title><rect x="90.1362%" y="149" width="0.2806%" height="15" fill="rgb(251,123,47)"/><text x="90.3862%" y="159.50"></text></g><g><title>is_copy_raw (5,973,174 samples, 0.52%)</title><rect x="94.7135%" y="117" width="0.5197%" height="15" fill="rgb(221,13,13)"/><text x="94.9635%" y="127.50"></text></g><g><title>evaluate_obligation (5,000,769 samples, 0.44%)</title><rect x="94.7981%" y="101" width="0.4351%" height="15" fill="rgb(238,131,9)"/><text x="95.0481%" y="111.50"></text></g><g><title>needs_drop_raw (6,656,471 samples, 0.58%)</title><rect x="94.6546%" y="133" width="0.5791%" height="15" fill="rgb(211,50,8)"/><text x="94.9046%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (56,363,640 samples, 4.90%)</title><rect x="90.4168%" y="149" width="4.9036%" height="15" fill="rgb(245,182,24)"/><text x="90.6668%" y="159.50">mir_dr..</text></g><g><title>optimized_mir (104,540,975 samples, 9.09%)</title><rect x="86.2489%" y="165" width="9.0950%" height="15" fill="rgb(242,14,37)"/><text x="86.4989%" y="175.50">optimized_mir</text></g><g><title>generate_crate_metadata (137,157,189 samples, 11.93%)</title><rect x="83.5423%" y="181" width="11.9325%" height="15" fill="rgb(246,228,12)"/><text x="83.7923%" y="191.50">generate_crate_met..</text></g><g><title>hir_lowering (37,160,839 samples, 3.23%)</title><rect x="95.4748%" y="181" width="3.2330%" height="15" fill="rgb(213,55,15)"/><text x="95.7248%" y="191.50">hir..</text></g><g><title>link_crate (4,468,339 samples, 0.39%)</title><rect x="98.7316%" y="165" width="0.3887%" height="15" fill="rgb(209,9,3)"/><text x="98.9816%" y="175.50"></text></g><g><title>link_binary (4,423,348 samples, 0.38%)</title><rect x="98.7355%" y="149" width="0.3848%" height="15" fill="rgb(230,59,30)"/><text x="98.9855%" y="159.50"></text></g><g><title>link_rlib (3,697,620 samples, 0.32%)</title><rect x="98.7987%" y="133" width="0.3217%" height="15" fill="rgb(209,121,21)"/><text x="99.0487%" y="143.50"></text></g><g><title>link (4,753,142 samples, 0.41%)</title><rect x="98.7078%" y="181" width="0.4135%" height="15" fill="rgb(220,109,13)"/><text x="98.9578%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (7,241,331 samples, 0.63%)</title><rect x="99.2219%" y="181" width="0.6300%" height="15" fill="rgb(232,18,1)"/><text x="99.4719%" y="191.50"></text></g><g><title>all (1,149,439,515 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,149,439,515 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,558,918 samples, 0.14%)</title><rect x="99.8644%" y="181" width="0.1356%" height="15" fill="rgb(240,125,3)"/><text x="100.1144%" y="191.50"></text></g></svg></svg>