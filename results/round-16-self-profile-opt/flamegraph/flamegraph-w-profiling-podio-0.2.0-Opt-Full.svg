<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,366,818 samples, 10.08%)</title><rect x="0.6559%" y="181" width="10.0782%" height="15" fill="rgb(227,0,7)"/><text x="0.9059%" y="191.50">LLVM_passes</text></g><g><title>param_env (163,861 samples, 0.13%)</title><rect x="15.1497%" y="101" width="0.1335%" height="15" fill="rgb(217,0,24)"/><text x="15.3997%" y="111.50"></text></g><g><title>codegen_fn_attrs (183,672 samples, 0.15%)</title><rect x="15.4503%" y="85" width="0.1497%" height="15" fill="rgb(221,193,54)"/><text x="15.7003%" y="95.50"></text></g><g><title>is_copy_raw (290,674 samples, 0.24%)</title><rect x="16.4525%" y="69" width="0.2369%" height="15" fill="rgb(248,212,6)"/><text x="16.7025%" y="79.50"></text></g><g><title>evaluate_obligation (212,931 samples, 0.17%)</title><rect x="16.5158%" y="53" width="0.1735%" height="15" fill="rgb(208,68,35)"/><text x="16.7658%" y="63.50"></text></g><g><title>needs_drop_raw (507,688 samples, 0.41%)</title><rect x="16.6939%" y="69" width="0.4137%" height="15" fill="rgb(232,128,0)"/><text x="16.9439%" y="79.50"></text></g><g><title>is_copy_raw (351,025 samples, 0.29%)</title><rect x="16.8216%" y="53" width="0.2861%" height="15" fill="rgb(207,160,47)"/><text x="17.0716%" y="63.50"></text></g><g><title>evaluate_obligation (295,564 samples, 0.24%)</title><rect x="16.8668%" y="37" width="0.2409%" height="15" fill="rgb(228,23,34)"/><text x="17.1168%" y="47.50"></text></g><g><title>specialization_graph_of (127,661 samples, 0.10%)</title><rect x="17.3191%" y="53" width="0.1040%" height="15" fill="rgb(218,30,26)"/><text x="17.5691%" y="63.50"></text></g><g><title>resolve_instance (419,494 samples, 0.34%)</title><rect x="17.1080%" y="69" width="0.3419%" height="15" fill="rgb(220,122,19)"/><text x="17.3580%" y="79.50"></text></g><g><title>thir_body (355,033 samples, 0.29%)</title><rect x="17.4592%" y="69" width="0.2893%" height="15" fill="rgb(250,228,42)"/><text x="17.7092%" y="79.50"></text></g><g><title>mir_const (3,620,669 samples, 2.95%)</title><rect x="14.8060%" y="117" width="2.9506%" height="15" fill="rgb(240,193,28)"/><text x="15.0560%" y="127.50">mir..</text></g><g><title>unsafety_check_result (3,035,036 samples, 2.47%)</title><rect x="15.2832%" y="101" width="2.4734%" height="15" fill="rgb(216,20,37)"/><text x="15.5332%" y="111.50">un..</text></g><g><title>mir_built (2,646,341 samples, 2.16%)</title><rect x="15.6000%" y="85" width="2.1566%" height="15" fill="rgb(206,188,39)"/><text x="15.8500%" y="95.50">m..</text></g><g><title>mir_promoted (4,093,035 samples, 3.34%)</title><rect x="14.5174%" y="133" width="3.3356%" height="15" fill="rgb(217,207,13)"/><text x="14.7674%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (238,011 samples, 0.19%)</title><rect x="17.8538%" y="133" width="0.1940%" height="15" fill="rgb(231,73,38)"/><text x="18.1038%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (161,171 samples, 0.13%)</title><rect x="18.0477%" y="133" width="0.1313%" height="15" fill="rgb(225,20,46)"/><text x="18.2977%" y="143.50"></text></g><g><title>type_op_prove_predicate (822,697 samples, 0.67%)</title><rect x="18.2170%" y="133" width="0.6705%" height="15" fill="rgb(210,31,41)"/><text x="18.4670%" y="143.50"></text></g><g><title>MIR_borrow_checking (9,688,137 samples, 7.90%)</title><rect x="10.9932%" y="165" width="7.8953%" height="15" fill="rgb(221,200,47)"/><text x="11.2432%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (9,632,006 samples, 7.85%)</title><rect x="11.0390%" y="149" width="7.8495%" height="15" fill="rgb(226,26,5)"/><text x="11.2890%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (133,342 samples, 0.11%)</title><rect x="18.8885%" y="165" width="0.1087%" height="15" fill="rgb(249,33,26)"/><text x="19.1385%" y="175.50"></text></g><g><title>hir_module_items (184,242 samples, 0.15%)</title><rect x="18.9972%" y="165" width="0.1501%" height="15" fill="rgb(235,183,28)"/><text x="19.2472%" y="175.50"></text></g><g><title>get_lang_items (139,682 samples, 0.11%)</title><rect x="19.4485%" y="117" width="0.1138%" height="15" fill="rgb(221,5,38)"/><text x="19.6985%" y="127.50"></text></g><g><title>should_inherit_track_caller (164,893 samples, 0.13%)</title><rect x="19.5623%" y="117" width="0.1344%" height="15" fill="rgb(247,18,42)"/><text x="19.8123%" y="127.50"></text></g><g><title>codegen_fn_attrs (457,125 samples, 0.37%)</title><rect x="19.3528%" y="133" width="0.3725%" height="15" fill="rgb(241,131,45)"/><text x="19.6028%" y="143.50"></text></g><g><title>check_mod_attrs (680,887 samples, 0.55%)</title><rect x="19.1707%" y="149" width="0.5549%" height="15" fill="rgb(249,31,29)"/><text x="19.4207%" y="159.50"></text></g><g><title>lookup_stability (135,821 samples, 0.11%)</title><rect x="20.0265%" y="133" width="0.1107%" height="15" fill="rgb(225,111,53)"/><text x="20.2765%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (347,604 samples, 0.28%)</title><rect x="19.8729%" y="149" width="0.2833%" height="15" fill="rgb(238,160,17)"/><text x="20.1229%" y="159.50"></text></g><g><title>misc_checking_1 (1,290,475 samples, 1.05%)</title><rect x="19.1476%" y="165" width="1.0517%" height="15" fill="rgb(214,148,48)"/><text x="19.3976%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (198,783 samples, 0.16%)</title><rect x="20.2005%" y="149" width="0.1620%" height="15" fill="rgb(232,36,49)"/><text x="20.4505%" y="159.50"></text></g><g><title>check_mod_liveness (161,381 samples, 0.13%)</title><rect x="20.2310%" y="133" width="0.1315%" height="15" fill="rgb(209,103,24)"/><text x="20.4810%" y="143.50"></text></g><g><title>misc_checking_2 (512,006 samples, 0.42%)</title><rect x="20.1992%" y="165" width="0.4173%" height="15" fill="rgb(229,88,8)"/><text x="20.4492%" y="175.50"></text></g><g><title>match_checking (311,653 samples, 0.25%)</title><rect x="20.3625%" y="149" width="0.2540%" height="15" fill="rgb(213,181,19)"/><text x="20.6125%" y="159.50"></text></g><g><title>check_match (294,993 samples, 0.24%)</title><rect x="20.3761%" y="133" width="0.2404%" height="15" fill="rgb(254,191,54)"/><text x="20.6261%" y="143.50"></text></g><g><title>trait_impls_of (219,273 samples, 0.18%)</title><rect x="21.1907%" y="117" width="0.1787%" height="15" fill="rgb(241,83,37)"/><text x="21.4407%" y="127.50"></text></g><g><title>crate_lints (2,200,425 samples, 1.79%)</title><rect x="20.7691%" y="133" width="1.7932%" height="15" fill="rgb(233,36,39)"/><text x="21.0191%" y="143.50">c..</text></g><g><title>type_of (1,462,339 samples, 1.19%)</title><rect x="21.3706%" y="117" width="1.1917%" height="15" fill="rgb(226,3,54)"/><text x="21.6206%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,222,846 samples, 1.00%)</title><rect x="21.5657%" y="101" width="0.9965%" height="15" fill="rgb(245,192,40)"/><text x="21.8157%" y="111.50"></text></g><g><title>lint_checking (2,365,287 samples, 1.93%)</title><rect x="20.7679%" y="149" width="1.9276%" height="15" fill="rgb(238,167,29)"/><text x="21.0179%" y="159.50">l..</text></g><g><title>module_lints (163,432 samples, 0.13%)</title><rect x="22.5623%" y="133" width="0.1332%" height="15" fill="rgb(232,182,51)"/><text x="22.8123%" y="143.50"></text></g><g><title>lint_mod (160,812 samples, 0.13%)</title><rect x="22.5644%" y="117" width="0.1311%" height="15" fill="rgb(231,60,39)"/><text x="22.8144%" y="127.50"></text></g><g><title>privacy_checking_modules (271,873 samples, 0.22%)</title><rect x="22.7860%" y="149" width="0.2216%" height="15" fill="rgb(208,69,12)"/><text x="23.0360%" y="159.50"></text></g><g><title>check_mod_privacy (270,213 samples, 0.22%)</title><rect x="22.7874%" y="133" width="0.2202%" height="15" fill="rgb(235,93,37)"/><text x="23.0374%" y="143.50"></text></g><g><title>misc_checking_3 (2,950,573 samples, 2.40%)</title><rect x="20.6165%" y="165" width="2.4045%" height="15" fill="rgb(213,116,39)"/><text x="20.8665%" y="175.50">mi..</text></g><g><title>coherence_checking (174,262 samples, 0.14%)</title><rect x="23.0638%" y="149" width="0.1420%" height="15" fill="rgb(222,207,29)"/><text x="23.3138%" y="159.50"></text></g><g><title>associated_item (1,052,521 samples, 0.86%)</title><rect x="31.4315%" y="85" width="0.8577%" height="15" fill="rgb(206,96,30)"/><text x="31.6815%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (816,157 samples, 0.67%)</title><rect x="31.6241%" y="69" width="0.6651%" height="15" fill="rgb(218,138,4)"/><text x="31.8741%" y="79.50"></text></g><g><title>associated_items (1,424,917 samples, 1.16%)</title><rect x="31.1672%" y="101" width="1.1612%" height="15" fill="rgb(250,191,14)"/><text x="31.4172%" y="111.50"></text></g><g><title>adt_dtorck_constraint (127,502 samples, 0.10%)</title><rect x="32.6087%" y="37" width="0.1039%" height="15" fill="rgb(239,60,40)"/><text x="32.8587%" y="47.50"></text></g><g><title>adt_dtorck_constraint (168,972 samples, 0.14%)</title><rect x="32.5859%" y="53" width="0.1377%" height="15" fill="rgb(206,27,48)"/><text x="32.8359%" y="63.50"></text></g><g><title>adt_dtorck_constraint (218,553 samples, 0.18%)</title><rect x="32.5511%" y="69" width="0.1781%" height="15" fill="rgb(225,35,8)"/><text x="32.8011%" y="79.50"></text></g><g><title>dropck_outlives (472,996 samples, 0.39%)</title><rect x="32.3651%" y="101" width="0.3855%" height="15" fill="rgb(250,213,24)"/><text x="32.6151%" y="111.50"></text></g><g><title>adt_dtorck_constraint (351,905 samples, 0.29%)</title><rect x="32.4637%" y="85" width="0.2868%" height="15" fill="rgb(247,123,22)"/><text x="32.7137%" y="95.50"></text></g><g><title>fn_abi_of_instance (168,513 samples, 0.14%)</title><rect x="33.2071%" y="53" width="0.1373%" height="15" fill="rgb(231,138,38)"/><text x="33.4571%" y="63.50"></text></g><g><title>mir_for_ctfe (130,362 samples, 0.11%)</title><rect x="33.4072%" y="53" width="0.1062%" height="15" fill="rgb(231,145,46)"/><text x="33.6572%" y="63.50"></text></g><g><title>eval_to_const_value_raw (978,220 samples, 0.80%)</title><rect x="32.7505%" y="101" width="0.7972%" height="15" fill="rgb(251,118,11)"/><text x="33.0005%" y="111.50"></text></g><g><title>eval_to_const_value_raw (946,578 samples, 0.77%)</title><rect x="32.7763%" y="85" width="0.7714%" height="15" fill="rgb(217,147,25)"/><text x="33.0263%" y="95.50"></text></g><g><title>eval_to_allocation_raw (909,048 samples, 0.74%)</title><rect x="32.8069%" y="69" width="0.7408%" height="15" fill="rgb(247,81,37)"/><text x="33.0569%" y="79.50"></text></g><g><title>generics_of (848,510 samples, 0.69%)</title><rect x="35.3710%" y="85" width="0.6915%" height="15" fill="rgb(209,12,38)"/><text x="35.6210%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (691,028 samples, 0.56%)</title><rect x="35.4993%" y="69" width="0.5631%" height="15" fill="rgb(227,1,9)"/><text x="35.7493%" y="79.50"></text></g><g><title>impl_trait_ref (1,939,459 samples, 1.58%)</title><rect x="36.0755%" y="85" width="1.5805%" height="15" fill="rgb(248,47,43)"/><text x="36.3255%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,780,767 samples, 1.45%)</title><rect x="36.2048%" y="69" width="1.4512%" height="15" fill="rgb(221,10,30)"/><text x="36.4548%" y="79.50"></text></g><g><title>trait_impls_of (599,155 samples, 0.49%)</title><rect x="37.8465%" y="85" width="0.4883%" height="15" fill="rgb(210,229,1)"/><text x="38.0965%" y="95.50"></text></g><g><title>implementations_of_trait (175,781 samples, 0.14%)</title><rect x="38.1916%" y="69" width="0.1433%" height="15" fill="rgb(222,148,37)"/><text x="38.4416%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (123,511 samples, 0.10%)</title><rect x="38.2342%" y="53" width="0.1007%" height="15" fill="rgb(234,67,33)"/><text x="38.4842%" y="63.50"></text></g><g><title>evaluate_obligation (5,887,288 samples, 4.80%)</title><rect x="33.5477%" y="101" width="4.7978%" height="15" fill="rgb(247,98,35)"/><text x="33.7977%" y="111.50">evalua..</text></g><g><title>fn_sig (149,262 samples, 0.12%)</title><rect x="38.3745%" y="101" width="0.1216%" height="15" fill="rgb(247,138,52)"/><text x="38.6245%" y="111.50"></text></g><g><title>metadata_decode_entry_fn_sig (134,642 samples, 0.11%)</title><rect x="38.3864%" y="85" width="0.1097%" height="15" fill="rgb(213,79,30)"/><text x="38.6364%" y="95.50"></text></g><g><title>generics_of (957,775 samples, 0.78%)</title><rect x="38.4962%" y="101" width="0.7805%" height="15" fill="rgb(246,177,23)"/><text x="38.7462%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (714,510 samples, 0.58%)</title><rect x="38.6944%" y="85" width="0.5823%" height="15" fill="rgb(230,62,27)"/><text x="38.9444%" y="95.50"></text></g><g><title>impl_trait_ref (1,802,945 samples, 1.47%)</title><rect x="39.3342%" y="101" width="1.4693%" height="15" fill="rgb(216,154,8)"/><text x="39.5842%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,580,382 samples, 1.29%)</title><rect x="39.5156%" y="85" width="1.2879%" height="15" fill="rgb(244,35,45)"/><text x="39.7656%" y="95.50"></text></g><g><title>item_attrs (338,663 samples, 0.28%)</title><rect x="40.8133%" y="101" width="0.2760%" height="15" fill="rgb(251,115,12)"/><text x="41.0633%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (328,473 samples, 0.27%)</title><rect x="40.8216%" y="85" width="0.2677%" height="15" fill="rgb(240,54,50)"/><text x="41.0716%" y="95.50"></text></g><g><title>method_autoderef_steps (193,413 samples, 0.16%)</title><rect x="41.1626%" y="101" width="0.1576%" height="15" fill="rgb(233,84,52)"/><text x="41.4126%" y="111.50"></text></g><g><title>predicates_of (324,995 samples, 0.26%)</title><rect x="41.4130%" y="101" width="0.2649%" height="15" fill="rgb(207,117,47)"/><text x="41.6630%" y="111.50"></text></g><g><title>predicates_defined_on (217,183 samples, 0.18%)</title><rect x="41.5008%" y="85" width="0.1770%" height="15" fill="rgb(249,43,39)"/><text x="41.7508%" y="95.50"></text></g><g><title>is_copy_raw (303,042 samples, 0.25%)</title><rect x="43.4386%" y="85" width="0.2470%" height="15" fill="rgb(209,38,44)"/><text x="43.6886%" y="95.50"></text></g><g><title>evaluate_obligation (278,272 samples, 0.23%)</title><rect x="43.4587%" y="69" width="0.2268%" height="15" fill="rgb(236,212,23)"/><text x="43.7087%" y="79.50"></text></g><g><title>trait_impls_of (127,331 samples, 0.10%)</title><rect x="43.5818%" y="53" width="0.1038%" height="15" fill="rgb(242,79,21)"/><text x="43.8318%" y="63.50"></text></g><g><title>typeck (2,489,847 samples, 2.03%)</title><rect x="41.8286%" y="101" width="2.0291%" height="15" fill="rgb(211,96,35)"/><text x="42.0786%" y="111.50">t..</text></g><g><title>item_bodies_checking (25,361,173 samples, 20.67%)</title><rect x="23.2342%" y="149" width="20.6679%" height="15" fill="rgb(253,215,40)"/><text x="23.4842%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,357,513 samples, 20.66%)</title><rect x="23.2372%" y="133" width="20.6649%" height="15" fill="rgb(211,81,21)"/><text x="23.4872%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (25,306,061 samples, 20.62%)</title><rect x="23.2791%" y="117" width="20.6230%" height="15" fill="rgb(208,190,38)"/><text x="23.5291%" y="127.50">typeck</text></g><g><title>impl_parent (179,641 samples, 0.15%)</title><rect x="44.8455%" y="69" width="0.1464%" height="15" fill="rgb(235,213,38)"/><text x="45.0955%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (132,200 samples, 0.11%)</title><rect x="44.8842%" y="53" width="0.1077%" height="15" fill="rgb(237,122,38)"/><text x="45.1342%" y="63.50"></text></g><g><title>impl_trait_ref (633,447 samples, 0.52%)</title><rect x="44.9919%" y="69" width="0.5162%" height="15" fill="rgb(244,218,35)"/><text x="45.2419%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (583,047 samples, 0.48%)</title><rect x="45.0330%" y="53" width="0.4751%" height="15" fill="rgb(240,68,47)"/><text x="45.2830%" y="63.50"></text></g><g><title>adt_destructor (1,094,742 samples, 0.89%)</title><rect x="44.6722%" y="117" width="0.8922%" height="15" fill="rgb(210,16,53)"/><text x="44.9222%" y="127.50"></text></g><g><title>coherent_trait (1,087,902 samples, 0.89%)</title><rect x="44.6778%" y="101" width="0.8866%" height="15" fill="rgb(235,124,12)"/><text x="44.9278%" y="111.50"></text></g><g><title>specialization_graph_of (1,084,052 samples, 0.88%)</title><rect x="44.6810%" y="85" width="0.8834%" height="15" fill="rgb(224,169,11)"/><text x="44.9310%" y="95.50"></text></g><g><title>item_types_checking (2,076,683 samples, 1.69%)</title><rect x="43.9021%" y="149" width="1.6924%" height="15" fill="rgb(250,166,2)"/><text x="44.1521%" y="159.50"></text></g><g><title>check_mod_item_types (2,072,383 samples, 1.69%)</title><rect x="43.9056%" y="133" width="1.6889%" height="15" fill="rgb(242,216,29)"/><text x="44.1556%" y="143.50"></text></g><g><title>fn_sig (367,407 samples, 0.30%)</title><rect x="45.8559%" y="117" width="0.2994%" height="15" fill="rgb(230,116,27)"/><text x="46.1059%" y="127.50"></text></g><g><title>named_region_map (180,740 samples, 0.15%)</title><rect x="46.2870%" y="101" width="0.1473%" height="15" fill="rgb(228,99,48)"/><text x="46.5370%" y="111.50"></text></g><g><title>resolve_lifetimes (141,890 samples, 0.12%)</title><rect x="46.3186%" y="85" width="0.1156%" height="15" fill="rgb(253,11,6)"/><text x="46.5686%" y="95.50"></text></g><g><title>generics_of (362,955 samples, 0.30%)</title><rect x="46.1553%" y="117" width="0.2958%" height="15" fill="rgb(247,143,39)"/><text x="46.4053%" y="127.50"></text></g><g><title>late_bound_vars_map (254,082 samples, 0.21%)</title><rect x="46.8148%" y="69" width="0.2071%" height="15" fill="rgb(236,97,10)"/><text x="47.0648%" y="79.50"></text></g><g><title>resolve_lifetimes (238,552 samples, 0.19%)</title><rect x="46.8274%" y="53" width="0.1944%" height="15" fill="rgb(233,208,19)"/><text x="47.0774%" y="63.50"></text></g><g><title>explicit_predicates_of (559,445 samples, 0.46%)</title><rect x="46.5860%" y="85" width="0.4559%" height="15" fill="rgb(216,164,2)"/><text x="46.8360%" y="95.50"></text></g><g><title>predicates_of (769,867 samples, 0.63%)</title><rect x="46.4602%" y="117" width="0.6274%" height="15" fill="rgb(220,129,5)"/><text x="46.7102%" y="127.50"></text></g><g><title>predicates_defined_on (714,196 samples, 0.58%)</title><rect x="46.5055%" y="101" width="0.5820%" height="15" fill="rgb(242,17,10)"/><text x="46.7555%" y="111.50"></text></g><g><title>type_collecting (2,007,252 samples, 1.64%)</title><rect x="45.5957%" y="149" width="1.6358%" height="15" fill="rgb(242,107,0)"/><text x="45.8457%" y="159.50"></text></g><g><title>collect_mod_item_types (1,996,112 samples, 1.63%)</title><rect x="45.6048%" y="133" width="1.6267%" height="15" fill="rgb(251,28,31)"/><text x="45.8548%" y="143.50"></text></g><g><title>type_of (123,800 samples, 0.10%)</title><rect x="47.1306%" y="117" width="0.1009%" height="15" fill="rgb(233,223,10)"/><text x="47.3806%" y="127.50"></text></g><g><title>evaluate_obligation (338,750 samples, 0.28%)</title><rect x="49.1012%" y="117" width="0.2761%" height="15" fill="rgb(215,21,27)"/><text x="49.3512%" y="127.50"></text></g><g><title>implied_outlives_bounds (221,854 samples, 0.18%)</title><rect x="49.3772%" y="117" width="0.1808%" height="15" fill="rgb(232,23,21)"/><text x="49.6272%" y="127.50"></text></g><g><title>param_env (357,403 samples, 0.29%)</title><rect x="49.5580%" y="117" width="0.2913%" height="15" fill="rgb(244,5,23)"/><text x="49.8080%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,263,977 samples, 2.66%)</title><rect x="47.4070%" y="133" width="2.6600%" height="15" fill="rgb(226,81,46)"/><text x="47.6570%" y="143.50">ch..</text></g><g><title>region_scope_tree (267,150 samples, 0.22%)</title><rect x="49.8493%" y="117" width="0.2177%" height="15" fill="rgb(247,70,30)"/><text x="50.0993%" y="127.50"></text></g><g><title>param_env (337,665 samples, 0.28%)</title><rect x="50.7658%" y="117" width="0.2752%" height="15" fill="rgb(212,68,19)"/><text x="51.0158%" y="127.50"></text></g><g><title>check_item_well_formed (1,447,555 samples, 1.18%)</title><rect x="50.0670%" y="133" width="1.1797%" height="15" fill="rgb(240,187,13)"/><text x="50.3170%" y="143.50"></text></g><g><title>adt_def (182,432 samples, 0.15%)</title><rect x="53.3439%" y="85" width="0.1487%" height="15" fill="rgb(223,113,26)"/><text x="53.5939%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (179,242 samples, 0.15%)</title><rect x="53.3465%" y="69" width="0.1461%" height="15" fill="rgb(206,192,2)"/><text x="53.5965%" y="79.50"></text></g><g><title>item_attrs (152,132 samples, 0.12%)</title><rect x="53.3686%" y="53" width="0.1240%" height="15" fill="rgb(241,108,4)"/><text x="53.6186%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (148,522 samples, 0.12%)</title><rect x="53.3715%" y="37" width="0.1210%" height="15" fill="rgb(247,173,49)"/><text x="53.6215%" y="47.50"></text></g><g><title>adt_sized_constraint (127,581 samples, 0.10%)</title><rect x="53.4925%" y="85" width="0.1040%" height="15" fill="rgb(224,114,35)"/><text x="53.7425%" y="95.50"></text></g><g><title>adt_sized_constraint (340,464 samples, 0.28%)</title><rect x="53.3335%" y="101" width="0.2775%" height="15" fill="rgb(245,159,27)"/><text x="53.5835%" y="111.50"></text></g><g><title>evaluate_obligation (909,811 samples, 0.74%)</title><rect x="52.9972%" y="117" width="0.7414%" height="15" fill="rgb(245,172,44)"/><text x="53.2472%" y="127.50"></text></g><g><title>implied_outlives_bounds (333,403 samples, 0.27%)</title><rect x="53.7387%" y="117" width="0.2717%" height="15" fill="rgb(236,23,11)"/><text x="53.9887%" y="127.50"></text></g><g><title>param_env (365,645 samples, 0.30%)</title><rect x="54.0104%" y="117" width="0.2980%" height="15" fill="rgb(205,117,38)"/><text x="54.2604%" y="127.50"></text></g><g><title>predicates_of (133,122 samples, 0.11%)</title><rect x="54.3084%" y="117" width="0.1085%" height="15" fill="rgb(237,72,25)"/><text x="54.5584%" y="127.50"></text></g><g><title>analysis (53,626,067 samples, 43.70%)</title><rect x="10.7341%" y="181" width="43.7021%" height="15" fill="rgb(244,70,9)"/><text x="10.9841%" y="191.50">analysis</text></g><g><title>type_check_crate (38,548,999 samples, 31.42%)</title><rect x="23.0210%" y="165" width="31.4152%" height="15" fill="rgb(217,125,39)"/><text x="23.2710%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,837,768 samples, 7.20%)</title><rect x="47.2340%" y="149" width="7.2023%" height="15" fill="rgb(235,36,10)"/><text x="47.4840%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,913,843 samples, 3.19%)</title><rect x="51.2467%" y="133" width="3.1896%" height="15" fill="rgb(251,123,47)"/><text x="51.4967%" y="143.50">che..</text></g><g><title>codegen_module (353,384 samples, 0.29%)</title><rect x="55.0225%" y="165" width="0.2880%" height="15" fill="rgb(221,13,13)"/><text x="55.2725%" y="175.50"></text></g><g><title>monomorphization_collector (124,331 samples, 0.10%)</title><rect x="55.3253%" y="149" width="0.1013%" height="15" fill="rgb(238,131,9)"/><text x="55.5753%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (175,922 samples, 0.14%)</title><rect x="55.3109%" y="165" width="0.1434%" height="15" fill="rgb(211,50,8)"/><text x="55.5609%" y="175.50"></text></g><g><title>codegen_crate (1,306,065 samples, 1.06%)</title><rect x="54.4461%" y="181" width="1.0644%" height="15" fill="rgb(245,182,24)"/><text x="54.6961%" y="191.50"></text></g><g><title>codegen_module_optimize (5,124,697 samples, 4.18%)</title><rect x="55.5105%" y="181" width="4.1763%" height="15" fill="rgb(242,14,37)"/><text x="55.7605%" y="191.50">codeg..</text></g><g><title>LLVM_module_optimize (4,477,280 samples, 3.65%)</title><rect x="56.0381%" y="165" width="3.6487%" height="15" fill="rgb(246,228,12)"/><text x="56.2881%" y="175.50">LLVM..</text></g><g><title>LLVM_lto_optimize (1,612,208 samples, 1.31%)</title><rect x="59.9972%" y="165" width="1.3139%" height="15" fill="rgb(213,55,15)"/><text x="60.2472%" y="175.50"></text></g><g><title>LLVM_module_codegen (4,825,754 samples, 3.93%)</title><rect x="61.3111%" y="165" width="3.9327%" height="15" fill="rgb(209,9,3)"/><text x="61.5611%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (4,706,033 samples, 3.84%)</title><rect x="61.4087%" y="149" width="3.8351%" height="15" fill="rgb(230,59,30)"/><text x="61.6587%" y="159.50">LLVM..</text></g><g><title>codegen_module_perform_lto (6,857,656 samples, 5.59%)</title><rect x="59.6868%" y="181" width="5.5886%" height="15" fill="rgb(209,121,21)"/><text x="59.9368%" y="191.50">codegen..</text></g><g><title>AST_validation (135,371 samples, 0.11%)</title><rect x="65.4532%" y="165" width="0.1103%" height="15" fill="rgb(220,109,13)"/><text x="65.7032%" y="175.50"></text></g><g><title>macro_expand_crate (12,558,911 samples, 10.23%)</title><rect x="65.6873%" y="165" width="10.2348%" height="15" fill="rgb(232,18,1)"/><text x="65.9373%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (12,533,830 samples, 10.21%)</title><rect x="65.7077%" y="149" width="10.2143%" height="15" fill="rgb(215,41,42)"/><text x="65.9577%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,673,600 samples, 2.18%)</title><rect x="73.7432%" y="133" width="2.1788%" height="15" fill="rgb(224,123,36)"/><text x="73.9932%" y="143.50">m..</text></g><g><title>metadata_register_crate (960,629 samples, 0.78%)</title><rect x="75.1392%" y="117" width="0.7829%" height="15" fill="rgb(240,125,3)"/><text x="75.3892%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (232,592 samples, 0.19%)</title><rect x="75.9261%" y="165" width="0.1895%" height="15" fill="rgb(205,98,50)"/><text x="76.1761%" y="175.50"></text></g><g><title>finalize_macro_resolutions (309,423 samples, 0.25%)</title><rect x="76.1439%" y="149" width="0.2522%" height="15" fill="rgb(205,185,37)"/><text x="76.3939%" y="159.50"></text></g><g><title>late_resolve_crate (2,102,703 samples, 1.71%)</title><rect x="76.3960%" y="149" width="1.7136%" height="15" fill="rgb(238,207,15)"/><text x="76.6460%" y="159.50"></text></g><g><title>configure_and_expand (15,834,707 samples, 12.90%)</title><rect x="65.2754%" y="181" width="12.9044%" height="15" fill="rgb(213,199,42)"/><text x="65.5254%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,532,878 samples, 2.06%)</title><rect x="76.1156%" y="165" width="2.0641%" height="15" fill="rgb(235,201,11)"/><text x="76.3656%" y="175.50">r..</text></g><g><title>drop_ast (156,921 samples, 0.13%)</title><rect x="78.1798%" y="181" width="0.1279%" height="15" fill="rgb(207,46,11)"/><text x="78.4298%" y="191.50"></text></g><g><title>early_lint_checks (1,890,421 samples, 1.54%)</title><rect x="78.3245%" y="181" width="1.5406%" height="15" fill="rgb(241,35,35)"/><text x="78.5745%" y="191.50"></text></g><g><title>free_global_ctxt (3,201,956 samples, 2.61%)</title><rect x="79.8650%" y="181" width="2.6094%" height="15" fill="rgb(243,32,47)"/><text x="80.1150%" y="191.50">fr..</text></g><g><title>layout_of (159,041 samples, 0.13%)</title><rect x="84.6421%" y="133" width="0.1296%" height="15" fill="rgb(247,202,23)"/><text x="84.8921%" y="143.50"></text></g><g><title>layout_of (423,373 samples, 0.35%)</title><rect x="84.4395%" y="149" width="0.3450%" height="15" fill="rgb(219,102,11)"/><text x="84.6895%" y="159.50"></text></g><g><title>needs_drop_raw (232,104 samples, 0.19%)</title><rect x="85.9414%" y="133" width="0.1892%" height="15" fill="rgb(243,110,44)"/><text x="86.1914%" y="143.50"></text></g><g><title>is_copy_raw (212,643 samples, 0.17%)</title><rect x="85.9572%" y="117" width="0.1733%" height="15" fill="rgb(222,74,54)"/><text x="86.2072%" y="127.50"></text></g><g><title>evaluate_obligation (185,633 samples, 0.15%)</title><rect x="85.9793%" y="101" width="0.1513%" height="15" fill="rgb(216,99,12)"/><text x="86.2293%" y="111.50"></text></g><g><title>optimized_mir (3,427,829 samples, 2.79%)</title><rect x="83.3435%" y="165" width="2.7935%" height="15" fill="rgb(226,22,26)"/><text x="83.5935%" y="175.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,659,663 samples, 1.35%)</title><rect x="84.7845%" y="149" width="1.3525%" height="15" fill="rgb(217,163,10)"/><text x="85.0345%" y="159.50"></text></g><g><title>generate_crate_metadata (4,550,431 samples, 3.71%)</title><rect x="82.4744%" y="181" width="3.7083%" height="15" fill="rgb(213,25,53)"/><text x="82.7244%" y="191.50">gene..</text></g><g><title>hir_lowering (2,359,096 samples, 1.92%)</title><rect x="86.1828%" y="181" width="1.9225%" height="15" fill="rgb(252,105,26)"/><text x="86.4328%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (8,762,968 samples, 7.14%)</title><rect x="88.1201%" y="165" width="7.1413%" height="15" fill="rgb(220,39,43)"/><text x="88.3701%" y="175.50">finish_ong..</text></g><g><title>link_crate (1,284,854 samples, 1.05%)</title><rect x="95.2614%" y="165" width="1.0471%" height="15" fill="rgb(229,68,48)"/><text x="95.5114%" y="175.50"></text></g><g><title>link_binary (1,263,154 samples, 1.03%)</title><rect x="95.2791%" y="149" width="1.0294%" height="15" fill="rgb(252,8,32)"/><text x="95.5291%" y="159.50"></text></g><g><title>link_rlib (840,079 samples, 0.68%)</title><rect x="95.6239%" y="133" width="0.6846%" height="15" fill="rgb(223,20,43)"/><text x="95.8739%" y="143.50"></text></g><g><title>link (10,078,832 samples, 8.21%)</title><rect x="88.1053%" y="181" width="8.2137%" height="15" fill="rgb(229,81,49)"/><text x="88.3553%" y="191.50">link</text></g><g><title>parse_crate (3,081,643 samples, 2.51%)</title><rect x="96.3190%" y="181" width="2.5114%" height="15" fill="rgb(236,28,36)"/><text x="96.5690%" y="191.50">pa..</text></g><g><title>prepare_outputs (358,604 samples, 0.29%)</title><rect x="98.8369%" y="181" width="0.2922%" height="15" fill="rgb(249,185,26)"/><text x="99.0869%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (616,857 samples, 0.50%)</title><rect x="99.1291%" y="181" width="0.5027%" height="15" fill="rgb(249,174,33)"/><text x="99.3791%" y="191.50"></text></g><g><title>setup_global_ctxt (147,741 samples, 0.12%)</title><rect x="99.6326%" y="181" width="0.1204%" height="15" fill="rgb(233,201,37)"/><text x="99.8826%" y="191.50"></text></g><g><title>all (122,708,166 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (122,708,166 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (303,033 samples, 0.25%)</title><rect x="99.7530%" y="181" width="0.2470%" height="15" fill="rgb(230,49,44)"/><text x="100.0030%" y="191.50"></text></g></svg></svg>