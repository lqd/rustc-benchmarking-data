<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (80,358,516 samples, 20.33%)</title><rect x="0.1999%" y="149" width="20.3347%" height="15" fill="rgb(227,0,7)"/><text x="0.4499%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (513,665 samples, 0.13%)</title><rect x="20.4046%" y="133" width="0.1300%" height="15" fill="rgb(217,0,24)"/><text x="20.6546%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (496,295 samples, 0.13%)</title><rect x="20.4090%" y="117" width="0.1256%" height="15" fill="rgb(221,193,54)"/><text x="20.6590%" y="127.50"></text></g><g><title>mir_const (880,781 samples, 0.22%)</title><rect x="20.9792%" y="85" width="0.2229%" height="15" fill="rgb(248,212,6)"/><text x="21.2292%" y="95.50"></text></g><g><title>unsafety_check_result (778,500 samples, 0.20%)</title><rect x="21.0051%" y="69" width="0.1970%" height="15" fill="rgb(208,68,35)"/><text x="21.2551%" y="79.50"></text></g><g><title>mir_built (686,738 samples, 0.17%)</title><rect x="21.0283%" y="53" width="0.1738%" height="15" fill="rgb(232,128,0)"/><text x="21.2783%" y="63.50"></text></g><g><title>mir_promoted (1,020,073 samples, 0.26%)</title><rect x="20.9457%" y="101" width="0.2581%" height="15" fill="rgb(207,160,47)"/><text x="21.1957%" y="111.50"></text></g><g><title>MIR_borrow_checking (2,895,632 samples, 0.73%)</title><rect x="20.5843%" y="133" width="0.7327%" height="15" fill="rgb(228,23,34)"/><text x="20.8343%" y="143.50"></text></g><g><title>mir_borrowck (2,888,932 samples, 0.73%)</title><rect x="20.5860%" y="117" width="0.7310%" height="15" fill="rgb(218,30,26)"/><text x="20.8360%" y="127.50"></text></g><g><title>check_mod_attrs (477,185 samples, 0.12%)</title><rect x="21.3554%" y="117" width="0.1208%" height="15" fill="rgb(220,122,19)"/><text x="21.6054%" y="127.50"></text></g><g><title>misc_checking_1 (873,589 samples, 0.22%)</title><rect x="21.3485%" y="133" width="0.2211%" height="15" fill="rgb(250,228,42)"/><text x="21.5985%" y="143.50"></text></g><g><title>crate_lints (1,805,960 samples, 0.46%)</title><rect x="21.6748%" y="101" width="0.4570%" height="15" fill="rgb(240,193,28)"/><text x="21.9248%" y="111.50"></text></g><g><title>type_of (1,246,852 samples, 0.32%)</title><rect x="21.8163%" y="85" width="0.3155%" height="15" fill="rgb(216,20,37)"/><text x="22.0663%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (760,158 samples, 0.19%)</title><rect x="21.9394%" y="69" width="0.1924%" height="15" fill="rgb(206,188,39)"/><text x="22.1894%" y="79.50"></text></g><g><title>lint_checking (2,274,705 samples, 0.58%)</title><rect x="21.6744%" y="117" width="0.5756%" height="15" fill="rgb(217,207,13)"/><text x="21.9244%" y="127.50"></text></g><g><title>module_lints (467,235 samples, 0.12%)</title><rect x="22.1318%" y="101" width="0.1182%" height="15" fill="rgb(231,73,38)"/><text x="22.3818%" y="111.50"></text></g><g><title>lint_mod (464,535 samples, 0.12%)</title><rect x="22.1325%" y="85" width="0.1176%" height="15" fill="rgb(225,20,46)"/><text x="22.3825%" y="95.50"></text></g><g><title>misc_checking_3 (2,594,559 samples, 0.66%)</title><rect x="21.6357%" y="133" width="0.6566%" height="15" fill="rgb(210,31,41)"/><text x="21.8857%" y="143.50"></text></g><g><title>impl_parent (1,789,063 samples, 0.45%)</title><rect x="23.0246%" y="69" width="0.4527%" height="15" fill="rgb(221,200,47)"/><text x="23.2746%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,057,793 samples, 0.27%)</title><rect x="23.2097%" y="53" width="0.2677%" height="15" fill="rgb(226,26,5)"/><text x="23.4597%" y="63.50"></text></g><g><title>impl_trait_ref (6,450,284 samples, 1.63%)</title><rect x="23.4773%" y="69" width="1.6322%" height="15" fill="rgb(249,33,26)"/><text x="23.7273%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,732,916 samples, 1.45%)</title><rect x="23.6589%" y="53" width="1.4507%" height="15" fill="rgb(235,183,28)"/><text x="23.9089%" y="63.50"></text></g><g><title>coherent_trait (11,707,470 samples, 2.96%)</title><rect x="22.3086%" y="101" width="2.9626%" height="15" fill="rgb(221,5,38)"/><text x="22.5586%" y="111.50">coh..</text></g><g><title>specialization_graph_of (11,691,930 samples, 2.96%)</title><rect x="22.3125%" y="85" width="2.9586%" height="15" fill="rgb(247,18,42)"/><text x="22.5625%" y="95.50">spe..</text></g><g><title>trait_impls_of (635,067 samples, 0.16%)</title><rect x="25.1104%" y="69" width="0.1607%" height="15" fill="rgb(241,131,45)"/><text x="25.3604%" y="79.50"></text></g><g><title>coherence_checking (11,771,020 samples, 2.98%)</title><rect x="22.3014%" y="117" width="2.9787%" height="15" fill="rgb(249,31,29)"/><text x="22.5514%" y="127.50">coh..</text></g><g><title>item_bodies_checking (6,033,736 samples, 1.53%)</title><rect x="25.2870%" y="117" width="1.5268%" height="15" fill="rgb(225,111,53)"/><text x="25.5370%" y="127.50"></text></g><g><title>typeck_item_bodies (6,029,676 samples, 1.53%)</title><rect x="25.2881%" y="101" width="1.5258%" height="15" fill="rgb(238,160,17)"/><text x="25.5381%" y="111.50"></text></g><g><title>typeck (6,015,596 samples, 1.52%)</title><rect x="25.2916%" y="85" width="1.5222%" height="15" fill="rgb(214,148,48)"/><text x="25.5416%" y="95.50"></text></g><g><title>impl_trait_ref (435,934 samples, 0.11%)</title><rect x="26.9696%" y="37" width="0.1103%" height="15" fill="rgb(232,36,49)"/><text x="27.2196%" y="47.50"></text></g><g><title>adt_destructor (815,619 samples, 0.21%)</title><rect x="26.8942%" y="85" width="0.2064%" height="15" fill="rgb(209,103,24)"/><text x="27.1442%" y="95.50"></text></g><g><title>coherent_trait (809,499 samples, 0.20%)</title><rect x="26.8957%" y="69" width="0.2048%" height="15" fill="rgb(229,88,8)"/><text x="27.1457%" y="79.50"></text></g><g><title>specialization_graph_of (805,249 samples, 0.20%)</title><rect x="26.8968%" y="53" width="0.2038%" height="15" fill="rgb(213,181,19)"/><text x="27.1468%" y="63.50"></text></g><g><title>item_types_checking (1,182,733 samples, 0.30%)</title><rect x="26.8139%" y="117" width="0.2993%" height="15" fill="rgb(254,191,54)"/><text x="27.0639%" y="127.50"></text></g><g><title>check_mod_item_types (1,178,003 samples, 0.30%)</title><rect x="26.8151%" y="101" width="0.2981%" height="15" fill="rgb(241,83,37)"/><text x="27.0651%" y="111.50"></text></g><g><title>fn_sig (421,174 samples, 0.11%)</title><rect x="27.1457%" y="85" width="0.1066%" height="15" fill="rgb(233,36,39)"/><text x="27.3957%" y="95.50"></text></g><g><title>type_collecting (1,177,332 samples, 0.30%)</title><rect x="27.1134%" y="117" width="0.2979%" height="15" fill="rgb(226,3,54)"/><text x="27.3634%" y="127.50"></text></g><g><title>collect_mod_item_types (1,159,552 samples, 0.29%)</title><rect x="27.1179%" y="101" width="0.2934%" height="15" fill="rgb(245,192,40)"/><text x="27.3679%" y="111.50"></text></g><g><title>object_safety_violations (1,088,532 samples, 0.28%)</title><rect x="27.6200%" y="85" width="0.2755%" height="15" fill="rgb(238,167,29)"/><text x="27.8700%" y="95.50"></text></g><g><title>check_impl_item_well_formed (2,035,973 samples, 0.52%)</title><rect x="27.4234%" y="101" width="0.5152%" height="15" fill="rgb(232,182,51)"/><text x="27.6734%" y="111.50"></text></g><g><title>adt_sized_constraint (407,984 samples, 0.10%)</title><rect x="28.0980%" y="37" width="0.1032%" height="15" fill="rgb(231,60,39)"/><text x="28.3480%" y="47.50"></text></g><g><title>adt_sized_constraint (479,355 samples, 0.12%)</title><rect x="28.0830%" y="53" width="0.1213%" height="15" fill="rgb(208,69,12)"/><text x="28.3330%" y="63.50"></text></g><g><title>adt_sized_constraint (543,556 samples, 0.14%)</title><rect x="28.0696%" y="69" width="0.1375%" height="15" fill="rgb(235,93,37)"/><text x="28.3196%" y="79.50"></text></g><g><title>evaluate_obligation (703,457 samples, 0.18%)</title><rect x="28.0295%" y="85" width="0.1780%" height="15" fill="rgb(213,116,39)"/><text x="28.2795%" y="95.50"></text></g><g><title>analysis (30,563,028 samples, 7.73%)</title><rect x="20.5346%" y="149" width="7.7340%" height="15" fill="rgb(222,207,29)"/><text x="20.7846%" y="159.50">analysis</text></g><g><title>type_check_crate (23,616,901 samples, 5.98%)</title><rect x="22.2923%" y="133" width="5.9762%" height="15" fill="rgb(206,96,30)"/><text x="22.5423%" y="143.50">type_che..</text></g><g><title>wf_checking (3,386,707 samples, 0.86%)</title><rect x="27.4115%" y="117" width="0.8570%" height="15" fill="rgb(218,138,4)"/><text x="27.6615%" y="127.50"></text></g><g><title>check_item_well_formed (1,303,864 samples, 0.33%)</title><rect x="27.9386%" y="101" width="0.3299%" height="15" fill="rgb(250,191,14)"/><text x="28.1886%" y="111.50"></text></g><g><title>is_freeze_raw (485,556 samples, 0.12%)</title><rect x="30.3339%" y="101" width="0.1229%" height="15" fill="rgb(239,60,40)"/><text x="30.5839%" y="111.50"></text></g><g><title>evaluate_obligation (444,916 samples, 0.11%)</title><rect x="30.3442%" y="85" width="0.1126%" height="15" fill="rgb(206,27,48)"/><text x="30.5942%" y="95.50"></text></g><g><title>layout_of (413,284 samples, 0.10%)</title><rect x="30.6227%" y="85" width="0.1046%" height="15" fill="rgb(225,35,8)"/><text x="30.8727%" y="95.50"></text></g><g><title>layout_of (1,002,979 samples, 0.25%)</title><rect x="30.5196%" y="101" width="0.2538%" height="15" fill="rgb(250,213,24)"/><text x="30.7696%" y="111.50"></text></g><g><title>param_env (718,919 samples, 0.18%)</title><rect x="30.7734%" y="101" width="0.1819%" height="15" fill="rgb(247,123,22)"/><text x="31.0234%" y="111.50"></text></g><g><title>fn_abi_of_instance (3,449,169 samples, 0.87%)</title><rect x="30.1165%" y="117" width="0.8728%" height="15" fill="rgb(231,138,38)"/><text x="30.3665%" y="127.50"></text></g><g><title>codegen_module (10,240,912 samples, 2.59%)</title><rect x="28.5643%" y="133" width="2.5915%" height="15" fill="rgb(231,145,46)"/><text x="28.8143%" y="143.50">co..</text></g><g><title>codegen_fn_attrs (435,844 samples, 0.11%)</title><rect x="31.2689%" y="85" width="0.1103%" height="15" fill="rgb(251,118,11)"/><text x="31.5189%" y="95.50"></text></g><g><title>mir_shims (528,827 samples, 0.13%)</title><rect x="31.4450%" y="85" width="0.1338%" height="15" fill="rgb(217,147,25)"/><text x="31.6950%" y="95.50"></text></g><g><title>optimized_mir (1,473,465 samples, 0.37%)</title><rect x="31.5788%" y="85" width="0.3729%" height="15" fill="rgb(247,81,37)"/><text x="31.8288%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (437,943 samples, 0.11%)</title><rect x="32.0006%" y="69" width="0.1108%" height="15" fill="rgb(209,12,38)"/><text x="32.2506%" y="79.50"></text></g><g><title>specialization_graph_of (1,034,392 samples, 0.26%)</title><rect x="32.1575%" y="69" width="0.2618%" height="15" fill="rgb(227,1,9)"/><text x="32.4075%" y="79.50"></text></g><g><title>impl_trait_ref (430,317 samples, 0.11%)</title><rect x="32.3103%" y="53" width="0.1089%" height="15" fill="rgb(248,47,43)"/><text x="32.5603%" y="63.50"></text></g><g><title>resolve_instance (1,942,843 samples, 0.49%)</title><rect x="31.9517%" y="85" width="0.4916%" height="15" fill="rgb(221,10,30)"/><text x="32.2017%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (5,448,860 samples, 1.38%)</title><rect x="31.1652%" y="101" width="1.3788%" height="15" fill="rgb(210,229,1)"/><text x="31.4152%" y="111.50"></text></g><g><title>monomorphization_collector (5,469,390 samples, 1.38%)</title><rect x="31.1647%" y="117" width="1.3840%" height="15" fill="rgb(222,148,37)"/><text x="31.4147%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (447,125 samples, 0.11%)</title><rect x="32.5497%" y="101" width="0.1131%" height="15" fill="rgb(234,67,33)"/><text x="32.7997%" y="111.50"></text></g><g><title>symbol_name (408,745 samples, 0.10%)</title><rect x="32.5594%" y="85" width="0.1034%" height="15" fill="rgb(247,98,35)"/><text x="32.8094%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (6,109,117 samples, 1.55%)</title><rect x="31.1565%" y="133" width="1.5459%" height="15" fill="rgb(247,138,52)"/><text x="31.4065%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (607,077 samples, 0.15%)</title><rect x="32.5488%" y="117" width="0.1536%" height="15" fill="rgb(213,79,30)"/><text x="32.7988%" y="127.50"></text></g><g><title>codegen_crate (17,574,453 samples, 4.45%)</title><rect x="28.2714%" y="149" width="4.4472%" height="15" fill="rgb(246,177,23)"/><text x="28.5214%" y="159.50">codeg..</text></g><g><title>codegen_module_optimize (80,671,756 samples, 20.41%)</title><rect x="32.7186%" y="149" width="20.4139%" height="15" fill="rgb(230,62,27)"/><text x="32.9686%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (74,527,068 samples, 18.86%)</title><rect x="34.2735%" y="133" width="18.8590%" height="15" fill="rgb(216,154,8)"/><text x="34.5235%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (26,083,229 samples, 6.60%)</title><rect x="54.1521%" y="133" width="6.6003%" height="15" fill="rgb(244,35,45)"/><text x="54.4021%" y="143.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (54,524,622 samples, 13.80%)</title><rect x="60.7525%" y="133" width="13.7974%" height="15" fill="rgb(251,115,12)"/><text x="61.0025%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (53,668,712 samples, 13.58%)</title><rect x="60.9691%" y="117" width="13.5808%" height="15" fill="rgb(240,54,50)"/><text x="61.2191%" y="127.50">LLVM_module_codegen_e..</text></g><g><title>LLVM_thin_lto_import (1,335,364 samples, 0.34%)</title><rect x="74.5499%" y="133" width="0.3379%" height="15" fill="rgb(233,84,52)"/><text x="74.7999%" y="143.50"></text></g><g><title>codegen_module_perform_lto (86,204,443 samples, 21.81%)</title><rect x="53.1325%" y="149" width="21.8140%" height="15" fill="rgb(207,117,47)"/><text x="53.3825%" y="159.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (14,851,994 samples, 3.76%)</title><rect x="75.0603%" y="133" width="3.7583%" height="15" fill="rgb(249,43,39)"/><text x="75.3103%" y="143.50">macr..</text></g><g><title>expand_crate (14,824,343 samples, 3.75%)</title><rect x="75.0673%" y="117" width="3.7513%" height="15" fill="rgb(209,38,44)"/><text x="75.3173%" y="127.50">expa..</text></g><g><title>metadata_register_crate (2,808,070 samples, 0.71%)</title><rect x="78.1080%" y="101" width="0.7106%" height="15" fill="rgb(236,212,23)"/><text x="78.3580%" y="111.50"></text></g><g><title>metadata_register_crate (964,790 samples, 0.24%)</title><rect x="78.5745%" y="85" width="0.2441%" height="15" fill="rgb(242,79,21)"/><text x="78.8245%" y="95.50"></text></g><g><title>late_resolve_crate (1,070,372 samples, 0.27%)</title><rect x="78.9016%" y="117" width="0.2709%" height="15" fill="rgb(211,96,35)"/><text x="79.1516%" y="127.50"></text></g><g><title>configure_and_expand (16,757,724 samples, 4.24%)</title><rect x="74.9465%" y="149" width="4.2405%" height="15" fill="rgb(253,215,40)"/><text x="75.1965%" y="159.50">confi..</text></g><g><title>resolve_crate (1,208,414 samples, 0.31%)</title><rect x="78.8812%" y="133" width="0.3058%" height="15" fill="rgb(211,81,21)"/><text x="79.1312%" y="143.50"></text></g><g><title>free_global_ctxt (3,419,618 samples, 0.87%)</title><rect x="79.2541%" y="149" width="0.8653%" height="15" fill="rgb(208,190,38)"/><text x="79.5041%" y="159.50"></text></g><g><title>generate_crate_metadata (704,177 samples, 0.18%)</title><rect x="80.1194%" y="149" width="0.1782%" height="15" fill="rgb(235,213,38)"/><text x="80.3694%" y="159.50"></text></g><g><title>hir_lowering (1,868,451 samples, 0.47%)</title><rect x="80.2976%" y="149" width="0.4728%" height="15" fill="rgb(237,122,38)"/><text x="80.5476%" y="159.50"></text></g><g><title>finish_ongoing_codegen (71,377,608 samples, 18.06%)</title><rect x="80.7750%" y="133" width="18.0621%" height="15" fill="rgb(244,218,35)"/><text x="81.0250%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (924,510 samples, 0.23%)</title><rect x="98.8370%" y="133" width="0.2339%" height="15" fill="rgb(240,68,47)"/><text x="99.0870%" y="143.50"></text></g><g><title>link_binary (897,340 samples, 0.23%)</title><rect x="98.8439%" y="117" width="0.2271%" height="15" fill="rgb(210,16,53)"/><text x="99.0939%" y="127.50"></text></g><g><title>link_rlib (543,646 samples, 0.14%)</title><rect x="98.9334%" y="101" width="0.1376%" height="15" fill="rgb(235,124,12)"/><text x="99.1834%" y="111.50"></text></g><g><title>link (72,329,888 samples, 18.30%)</title><rect x="80.7704%" y="149" width="18.3030%" height="15" fill="rgb(224,169,11)"/><text x="81.0204%" y="159.50">link</text></g><g><title>parse_crate (2,217,154 samples, 0.56%)</title><rect x="99.0735%" y="149" width="0.5610%" height="15" fill="rgb(250,166,2)"/><text x="99.3235%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (617,126 samples, 0.16%)</title><rect x="99.7294%" y="149" width="0.1562%" height="15" fill="rgb(242,216,29)"/><text x="99.9794%" y="159.50"></text></g><g><title>all (395,179,626 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (395,179,626 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>