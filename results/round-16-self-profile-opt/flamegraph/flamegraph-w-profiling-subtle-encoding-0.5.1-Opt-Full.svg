<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (187,710,887 samples, 17.69%)</title><rect x="0.0677%" y="149" width="17.6864%" height="15" fill="rgb(227,0,7)"/><text x="0.3177%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,191,803 samples, 0.11%)</title><rect x="17.6418%" y="133" width="0.1123%" height="15" fill="rgb(217,0,24)"/><text x="17.8918%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,160,063 samples, 0.11%)</title><rect x="17.6448%" y="117" width="0.1093%" height="15" fill="rgb(221,193,54)"/><text x="17.8948%" y="127.50"></text></g><g><title>needs_drop_raw (1,350,415 samples, 0.13%)</title><rect x="19.5362%" y="37" width="0.1272%" height="15" fill="rgb(248,212,6)"/><text x="19.7862%" y="47.50"></text></g><g><title>thir_body (1,355,896 samples, 0.13%)</title><rect x="19.7478%" y="37" width="0.1278%" height="15" fill="rgb(208,68,35)"/><text x="19.9978%" y="47.50"></text></g><g><title>mir_const (9,243,707 samples, 0.87%)</title><rect x="19.0062%" y="85" width="0.8710%" height="15" fill="rgb(232,128,0)"/><text x="19.2562%" y="95.50"></text></g><g><title>unsafety_check_result (8,017,883 samples, 0.76%)</title><rect x="19.1217%" y="69" width="0.7555%" height="15" fill="rgb(207,160,47)"/><text x="19.3717%" y="79.50"></text></g><g><title>mir_built (7,155,851 samples, 0.67%)</title><rect x="19.2029%" y="53" width="0.6742%" height="15" fill="rgb(228,23,34)"/><text x="19.4529%" y="63.50"></text></g><g><title>mir_promoted (10,406,707 samples, 0.98%)</title><rect x="18.9177%" y="101" width="0.9805%" height="15" fill="rgb(218,30,26)"/><text x="19.1677%" y="111.50"></text></g><g><title>type_op_prove_predicate (1,571,008 samples, 0.15%)</title><rect x="20.0019%" y="101" width="0.1480%" height="15" fill="rgb(220,122,19)"/><text x="20.2519%" y="111.50"></text></g><g><title>MIR_borrow_checking (25,096,740 samples, 2.36%)</title><rect x="17.7860%" y="133" width="2.3647%" height="15" fill="rgb(250,228,42)"/><text x="18.0360%" y="143.50">MI..</text></g><g><title>mir_borrowck (24,954,370 samples, 2.35%)</title><rect x="17.7994%" y="117" width="2.3512%" height="15" fill="rgb(240,193,28)"/><text x="18.0494%" y="127.50">m..</text></g><g><title>misc_checking_1 (1,464,297 samples, 0.14%)</title><rect x="20.1852%" y="133" width="0.1380%" height="15" fill="rgb(216,20,37)"/><text x="20.4352%" y="143.50"></text></g><g><title>misc_checking_2 (1,133,623 samples, 0.11%)</title><rect x="20.3232%" y="133" width="0.1068%" height="15" fill="rgb(206,188,39)"/><text x="20.5732%" y="143.50"></text></g><g><title>crate_lints (2,453,658 samples, 0.23%)</title><rect x="20.5145%" y="101" width="0.2312%" height="15" fill="rgb(217,207,13)"/><text x="20.7645%" y="111.50"></text></g><g><title>type_of (1,103,223 samples, 0.10%)</title><rect x="20.6418%" y="85" width="0.1039%" height="15" fill="rgb(231,73,38)"/><text x="20.8918%" y="95.50"></text></g><g><title>lint_checking (2,951,393 samples, 0.28%)</title><rect x="20.5143%" y="117" width="0.2781%" height="15" fill="rgb(225,20,46)"/><text x="20.7643%" y="127.50"></text></g><g><title>misc_checking_3 (5,010,356 samples, 0.47%)</title><rect x="20.4300%" y="133" width="0.4721%" height="15" fill="rgb(210,31,41)"/><text x="20.6800%" y="143.50"></text></g><g><title>impl_parent (2,822,965 samples, 0.27%)</title><rect x="21.4252%" y="69" width="0.2660%" height="15" fill="rgb(221,200,47)"/><text x="21.6752%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,631,651 samples, 0.15%)</title><rect x="21.5375%" y="53" width="0.1537%" height="15" fill="rgb(226,26,5)"/><text x="21.7875%" y="63.50"></text></g><g><title>impl_trait_ref (5,947,510 samples, 0.56%)</title><rect x="21.6912%" y="69" width="0.5604%" height="15" fill="rgb(249,33,26)"/><text x="21.9412%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,499,162 samples, 0.42%)</title><rect x="21.8277%" y="53" width="0.4239%" height="15" fill="rgb(235,183,28)"/><text x="22.0777%" y="63.50"></text></g><g><title>coherent_trait (15,213,189 samples, 1.43%)</title><rect x="20.9127%" y="101" width="1.4334%" height="15" fill="rgb(221,5,38)"/><text x="21.1627%" y="111.50"></text></g><g><title>specialization_graph_of (14,632,403 samples, 1.38%)</title><rect x="20.9674%" y="85" width="1.3787%" height="15" fill="rgb(247,18,42)"/><text x="21.2174%" y="95.50"></text></g><g><title>coherence_checking (15,311,591 samples, 1.44%)</title><rect x="20.9103%" y="117" width="1.4427%" height="15" fill="rgb(241,131,45)"/><text x="21.1603%" y="127.50"></text></g><g><title>associated_items (1,125,614 samples, 0.11%)</title><rect x="25.1647%" y="69" width="0.1061%" height="15" fill="rgb(249,31,29)"/><text x="25.4147%" y="79.50"></text></g><g><title>generics_of (1,063,753 samples, 0.10%)</title><rect x="25.8440%" y="53" width="0.1002%" height="15" fill="rgb(225,111,53)"/><text x="26.0940%" y="63.50"></text></g><g><title>impl_trait_ref (1,110,690 samples, 0.10%)</title><rect x="25.9612%" y="53" width="0.1047%" height="15" fill="rgb(238,160,17)"/><text x="26.2112%" y="63.50"></text></g><g><title>specializes (1,446,966 samples, 0.14%)</title><rect x="26.1328%" y="53" width="0.1363%" height="15" fill="rgb(214,148,48)"/><text x="26.3828%" y="63.50"></text></g><g><title>evaluate_obligation (10,681,998 samples, 1.01%)</title><rect x="25.3347%" y="69" width="1.0065%" height="15" fill="rgb(232,36,49)"/><text x="25.5847%" y="79.50"></text></g><g><title>item_bodies_checking (45,728,101 samples, 4.31%)</title><rect x="22.3563%" y="117" width="4.3086%" height="15" fill="rgb(209,103,24)"/><text x="22.6063%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (45,724,771 samples, 4.31%)</title><rect x="22.3566%" y="101" width="4.3083%" height="15" fill="rgb(229,88,8)"/><text x="22.6066%" y="111.50">typec..</text></g><g><title>typeck (45,623,601 samples, 4.30%)</title><rect x="22.3661%" y="85" width="4.2987%" height="15" fill="rgb(213,181,19)"/><text x="22.6161%" y="95.50">typeck</text></g><g><title>item_types_checking (1,314,314 samples, 0.12%)</title><rect x="26.6648%" y="117" width="0.1238%" height="15" fill="rgb(254,191,54)"/><text x="26.9148%" y="127.50"></text></g><g><title>check_mod_item_types (1,308,463 samples, 0.12%)</title><rect x="26.6654%" y="101" width="0.1233%" height="15" fill="rgb(241,83,37)"/><text x="26.9154%" y="111.50"></text></g><g><title>type_collecting (2,121,684 samples, 0.20%)</title><rect x="26.7890%" y="117" width="0.1999%" height="15" fill="rgb(233,36,39)"/><text x="27.0390%" y="127.50"></text></g><g><title>collect_mod_item_types (2,102,954 samples, 0.20%)</title><rect x="26.7907%" y="101" width="0.1981%" height="15" fill="rgb(226,3,54)"/><text x="27.0407%" y="111.50"></text></g><g><title>check_impl_item_well_formed (2,555,934 samples, 0.24%)</title><rect x="27.0115%" y="101" width="0.2408%" height="15" fill="rgb(245,192,40)"/><text x="27.2615%" y="111.50"></text></g><g><title>check_item_well_formed (2,794,116 samples, 0.26%)</title><rect x="27.2523%" y="101" width="0.2633%" height="15" fill="rgb(238,167,29)"/><text x="27.5023%" y="111.50"></text></g><g><title>analysis (104,964,272 samples, 9.89%)</title><rect x="17.7541%" y="149" width="9.8899%" height="15" fill="rgb(232,182,51)"/><text x="18.0041%" y="159.50">analysis</text></g><g><title>type_check_crate (71,553,609 samples, 6.74%)</title><rect x="20.9021%" y="133" width="6.7419%" height="15" fill="rgb(231,60,39)"/><text x="21.1521%" y="143.50">type_chec..</text></g><g><title>wf_checking (6,946,618 samples, 0.65%)</title><rect x="26.9895%" y="117" width="0.6545%" height="15" fill="rgb(208,69,12)"/><text x="27.2395%" y="127.50"></text></g><g><title>check_trait_item_well_formed (1,363,226 samples, 0.13%)</title><rect x="27.5155%" y="101" width="0.1284%" height="15" fill="rgb(235,93,37)"/><text x="27.7655%" y="111.50"></text></g><g><title>param_env (1,837,212 samples, 0.17%)</title><rect x="29.8773%" y="101" width="0.1731%" height="15" fill="rgb(213,116,39)"/><text x="30.1273%" y="111.50"></text></g><g><title>fn_abi_of_instance (6,684,908 samples, 0.63%)</title><rect x="29.4824%" y="117" width="0.6299%" height="15" fill="rgb(222,207,29)"/><text x="29.7324%" y="127.50"></text></g><g><title>codegen_module (25,117,789 samples, 2.37%)</title><rect x="27.8171%" y="133" width="2.3666%" height="15" fill="rgb(206,96,30)"/><text x="28.0671%" y="143.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,841,348 samples, 0.17%)</title><rect x="30.7239%" y="69" width="0.1735%" height="15" fill="rgb(218,138,4)"/><text x="30.9739%" y="79.50"></text></g><g><title>optimized_mir (5,226,389 samples, 0.49%)</title><rect x="30.4234%" y="85" width="0.4924%" height="15" fill="rgb(250,191,14)"/><text x="30.6734%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,309,464 samples, 0.12%)</title><rect x="30.9614%" y="69" width="0.1234%" height="15" fill="rgb(239,60,40)"/><text x="31.2114%" y="79.50"></text></g><g><title>specialization_graph_of (2,383,418 samples, 0.22%)</title><rect x="31.1058%" y="69" width="0.2246%" height="15" fill="rgb(206,27,48)"/><text x="31.3558%" y="79.50"></text></g><g><title>resolve_instance (4,584,519 samples, 0.43%)</title><rect x="30.9158%" y="85" width="0.4320%" height="15" fill="rgb(225,35,8)"/><text x="31.1658%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (12,637,091 samples, 1.19%)</title><rect x="30.1875%" y="101" width="1.1907%" height="15" fill="rgb(250,213,24)"/><text x="30.4375%" y="111.50"></text></g><g><title>monomorphization_collector (12,709,683 samples, 1.20%)</title><rect x="30.1872%" y="117" width="1.1975%" height="15" fill="rgb(247,123,22)"/><text x="30.4372%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (14,017,367 samples, 1.32%)</title><rect x="30.1845%" y="133" width="1.3207%" height="15" fill="rgb(231,138,38)"/><text x="30.4345%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,278,584 samples, 0.12%)</title><rect x="31.3848%" y="117" width="0.1205%" height="15" fill="rgb(231,145,46)"/><text x="31.6348%" y="127.50"></text></g><g><title>codegen_crate (41,036,488 samples, 3.87%)</title><rect x="27.6450%" y="149" width="3.8665%" height="15" fill="rgb(251,118,11)"/><text x="27.8950%" y="159.50">code..</text></g><g><title>codegen_module_optimize (212,467,158 samples, 20.02%)</title><rect x="31.5115%" y="149" width="20.0190%" height="15" fill="rgb(217,147,25)"/><text x="31.7615%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (195,904,713 samples, 18.46%)</title><rect x="33.0721%" y="133" width="18.4585%" height="15" fill="rgb(247,81,37)"/><text x="33.3221%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (148,221,897 samples, 13.97%)</title><rect x="52.4436%" y="133" width="13.9657%" height="15" fill="rgb(209,12,38)"/><text x="52.6936%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (130,745,712 samples, 12.32%)</title><rect x="66.4093%" y="133" width="12.3191%" height="15" fill="rgb(227,1,9)"/><text x="66.6593%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (128,910,291 samples, 12.15%)</title><rect x="66.5823%" y="117" width="12.1461%" height="15" fill="rgb(248,47,43)"/><text x="66.8323%" y="127.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (7,322,012 samples, 0.69%)</title><rect x="78.7284%" y="133" width="0.6899%" height="15" fill="rgb(221,10,30)"/><text x="78.9784%" y="143.50"></text></g><g><title>codegen_module_perform_lto (296,572,236 samples, 27.94%)</title><rect x="51.5305%" y="149" width="27.9435%" height="15" fill="rgb(210,229,1)"/><text x="51.7805%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,022,853 samples, 0.19%)</title><rect x="82.2040%" y="101" width="0.1906%" height="15" fill="rgb(222,148,37)"/><text x="82.4540%" y="111.50"></text></g><g><title>macro_expand_crate (30,749,382 samples, 2.90%)</title><rect x="79.5400%" y="133" width="2.8973%" height="15" fill="rgb(234,67,33)"/><text x="79.7900%" y="143.50">ma..</text></g><g><title>expand_crate (30,733,462 samples, 2.90%)</title><rect x="79.5415%" y="117" width="2.8958%" height="15" fill="rgb(247,98,35)"/><text x="79.7915%" y="127.50">ex..</text></g><g><title>late_resolve_crate (3,070,944 samples, 0.29%)</title><rect x="82.4960%" y="117" width="0.2893%" height="15" fill="rgb(247,138,52)"/><text x="82.7460%" y="127.50"></text></g><g><title>configure_and_expand (35,286,963 samples, 3.32%)</title><rect x="79.4740%" y="149" width="3.3248%" height="15" fill="rgb(213,79,30)"/><text x="79.7240%" y="159.50">con..</text></g><g><title>resolve_crate (3,715,072 samples, 0.35%)</title><rect x="82.4488%" y="133" width="0.3500%" height="15" fill="rgb(246,177,23)"/><text x="82.6988%" y="143.50"></text></g><g><title>free_global_ctxt (6,925,497 samples, 0.65%)</title><rect x="82.8629%" y="149" width="0.6525%" height="15" fill="rgb(230,62,27)"/><text x="83.1129%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,848,085 samples, 0.27%)</title><rect x="84.0306%" y="117" width="0.2684%" height="15" fill="rgb(216,154,8)"/><text x="84.2806%" y="127.50"></text></g><g><title>optimized_mir (6,016,837 samples, 0.57%)</title><rect x="83.7322%" y="133" width="0.5669%" height="15" fill="rgb(244,35,45)"/><text x="83.9822%" y="143.50"></text></g><g><title>generate_crate_metadata (8,376,183 samples, 0.79%)</title><rect x="83.5154%" y="149" width="0.7892%" height="15" fill="rgb(251,115,12)"/><text x="83.7654%" y="159.50"></text></g><g><title>hir_lowering (3,281,167 samples, 0.31%)</title><rect x="84.3046%" y="149" width="0.3092%" height="15" fill="rgb(240,54,50)"/><text x="84.5546%" y="159.50"></text></g><g><title>finish_ongoing_codegen (157,548,350 samples, 14.84%)</title><rect x="84.6160%" y="133" width="14.8445%" height="15" fill="rgb(233,84,52)"/><text x="84.8660%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,270,315 samples, 0.21%)</title><rect x="99.4604%" y="133" width="0.2139%" height="15" fill="rgb(207,117,47)"/><text x="99.7104%" y="143.50"></text></g><g><title>link_binary (2,237,065 samples, 0.21%)</title><rect x="99.4636%" y="117" width="0.2108%" height="15" fill="rgb(249,43,39)"/><text x="99.7136%" y="127.50"></text></g><g><title>link_rlib (1,514,476 samples, 0.14%)</title><rect x="99.5317%" y="101" width="0.1427%" height="15" fill="rgb(209,38,44)"/><text x="99.7817%" y="111.50"></text></g><g><title>link (159,858,105 samples, 15.06%)</title><rect x="84.6138%" y="149" width="15.0621%" height="15" fill="rgb(236,212,23)"/><text x="84.8638%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (2,353,956 samples, 0.22%)</title><rect x="99.7355%" y="149" width="0.2218%" height="15" fill="rgb(242,79,21)"/><text x="99.9855%" y="159.50"></text></g><g><title>all (1,061,327,342 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,061,327,342 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(253,215,40)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>