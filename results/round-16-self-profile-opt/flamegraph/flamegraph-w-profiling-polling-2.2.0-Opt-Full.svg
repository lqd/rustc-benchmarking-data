<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (180,879,625 samples, 13.50%)</title><rect x="0.0735%" y="197" width="13.5046%" height="15" fill="rgb(227,0,7)"/><text x="0.3235%" y="207.50">LLVM_passes</text></g><g><title>mir_const (6,978,782 samples, 0.52%)</title><rect x="14.4622%" y="133" width="0.5210%" height="15" fill="rgb(217,0,24)"/><text x="14.7122%" y="143.50"></text></g><g><title>unsafety_check_result (6,086,014 samples, 0.45%)</title><rect x="14.5289%" y="117" width="0.4544%" height="15" fill="rgb(221,193,54)"/><text x="14.7789%" y="127.50"></text></g><g><title>mir_built (5,330,536 samples, 0.40%)</title><rect x="14.5853%" y="101" width="0.3980%" height="15" fill="rgb(248,212,6)"/><text x="14.8353%" y="111.50"></text></g><g><title>mir_promoted (8,027,065 samples, 0.60%)</title><rect x="14.4055%" y="149" width="0.5993%" height="15" fill="rgb(208,68,35)"/><text x="14.6555%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,449,133 samples, 0.11%)</title><rect x="15.0543%" y="149" width="0.1082%" height="15" fill="rgb(232,128,0)"/><text x="15.3043%" y="159.50"></text></g><g><title>MIR_borrow_checking (20,749,882 samples, 1.55%)</title><rect x="13.6137%" y="181" width="1.5492%" height="15" fill="rgb(207,160,47)"/><text x="13.8637%" y="191.50"></text></g><g><title>mir_borrowck (20,675,502 samples, 1.54%)</title><rect x="13.6193%" y="165" width="1.5436%" height="15" fill="rgb(228,23,34)"/><text x="13.8693%" y="175.50"></text></g><g><title>misc_checking_1 (1,387,406 samples, 0.10%)</title><rect x="15.1904%" y="181" width="0.1036%" height="15" fill="rgb(218,30,26)"/><text x="15.4404%" y="191.50"></text></g><g><title>crate_lints (2,157,024 samples, 0.16%)</title><rect x="15.4054%" y="149" width="0.1610%" height="15" fill="rgb(220,122,19)"/><text x="15.6554%" y="159.50"></text></g><g><title>lint_checking (2,568,308 samples, 0.19%)</title><rect x="15.4053%" y="165" width="0.1918%" height="15" fill="rgb(250,228,42)"/><text x="15.6553%" y="175.50"></text></g><g><title>misc_checking_3 (3,947,424 samples, 0.29%)</title><rect x="15.3671%" y="181" width="0.2947%" height="15" fill="rgb(240,193,28)"/><text x="15.6171%" y="191.50"></text></g><g><title>impl_parent (2,322,007 samples, 0.17%)</title><rect x="16.0015%" y="117" width="0.1734%" height="15" fill="rgb(216,20,37)"/><text x="16.2515%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,362,615 samples, 0.10%)</title><rect x="16.0732%" y="101" width="0.1017%" height="15" fill="rgb(206,188,39)"/><text x="16.3232%" y="111.50"></text></g><g><title>impl_trait_ref (5,132,321 samples, 0.38%)</title><rect x="16.1749%" y="117" width="0.3832%" height="15" fill="rgb(217,207,13)"/><text x="16.4249%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,930,940 samples, 0.29%)</title><rect x="16.2646%" y="101" width="0.2935%" height="15" fill="rgb(231,73,38)"/><text x="16.5146%" y="111.50"></text></g><g><title>coherent_trait (12,727,661 samples, 0.95%)</title><rect x="15.6670%" y="149" width="0.9503%" height="15" fill="rgb(225,20,46)"/><text x="15.9170%" y="159.50"></text></g><g><title>specialization_graph_of (12,094,784 samples, 0.90%)</title><rect x="15.7142%" y="133" width="0.9030%" height="15" fill="rgb(210,31,41)"/><text x="15.9642%" y="143.50"></text></g><g><title>coherence_checking (12,795,823 samples, 0.96%)</title><rect x="15.6657%" y="165" width="0.9553%" height="15" fill="rgb(221,200,47)"/><text x="15.9157%" y="175.50"></text></g><g><title>evaluate_obligation (1,717,806 samples, 0.13%)</title><rect x="17.7350%" y="117" width="0.1283%" height="15" fill="rgb(226,26,5)"/><text x="17.9850%" y="127.50"></text></g><g><title>evaluate_obligation (1,499,797 samples, 0.11%)</title><rect x="18.5257%" y="101" width="0.1120%" height="15" fill="rgb(249,33,26)"/><text x="18.7757%" y="111.50"></text></g><g><title>typeck (10,299,215 samples, 0.77%)</title><rect x="17.9508%" y="117" width="0.7689%" height="15" fill="rgb(235,183,28)"/><text x="18.2008%" y="127.50"></text></g><g><title>item_bodies_checking (28,146,254 samples, 2.10%)</title><rect x="16.6226%" y="165" width="2.1014%" height="15" fill="rgb(221,5,38)"/><text x="16.8726%" y="175.50">i..</text></g><g><title>typeck_item_bodies (28,142,444 samples, 2.10%)</title><rect x="16.6229%" y="149" width="2.1011%" height="15" fill="rgb(247,18,42)"/><text x="16.8729%" y="159.50">t..</text></g><g><title>typeck (28,093,564 samples, 2.10%)</title><rect x="16.6265%" y="133" width="2.0975%" height="15" fill="rgb(241,131,45)"/><text x="16.8765%" y="143.50">t..</text></g><g><title>mir_built (3,314,156 samples, 0.25%)</title><rect x="18.8467%" y="53" width="0.2474%" height="15" fill="rgb(249,31,29)"/><text x="19.0967%" y="63.50"></text></g><g><title>typeck (2,187,484 samples, 0.16%)</title><rect x="18.9308%" y="37" width="0.1633%" height="15" fill="rgb(225,111,53)"/><text x="19.1808%" y="47.50"></text></g><g><title>mir_const (3,616,840 samples, 0.27%)</title><rect x="18.8329%" y="85" width="0.2700%" height="15" fill="rgb(238,160,17)"/><text x="19.0829%" y="95.50"></text></g><g><title>unsafety_check_result (3,497,348 samples, 0.26%)</title><rect x="18.8418%" y="69" width="0.2611%" height="15" fill="rgb(214,148,48)"/><text x="19.0918%" y="79.50"></text></g><g><title>mir_promoted (3,688,951 samples, 0.28%)</title><rect x="18.8279%" y="101" width="0.2754%" height="15" fill="rgb(232,36,49)"/><text x="19.0779%" y="111.50"></text></g><g><title>type_of (4,803,603 samples, 0.36%)</title><rect x="18.7622%" y="133" width="0.3586%" height="15" fill="rgb(209,103,24)"/><text x="19.0122%" y="143.50"></text></g><g><title>mir_borrowck (4,789,593 samples, 0.36%)</title><rect x="18.7632%" y="117" width="0.3576%" height="15" fill="rgb(229,88,8)"/><text x="19.0132%" y="127.50"></text></g><g><title>item_types_checking (5,539,721 samples, 0.41%)</title><rect x="18.7240%" y="165" width="0.4136%" height="15" fill="rgb(213,181,19)"/><text x="18.9740%" y="175.50"></text></g><g><title>check_mod_item_types (5,536,001 samples, 0.41%)</title><rect x="18.7243%" y="149" width="0.4133%" height="15" fill="rgb(254,191,54)"/><text x="18.9743%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,949,563 samples, 0.15%)</title><rect x="19.2407%" y="149" width="0.1456%" height="15" fill="rgb(241,83,37)"/><text x="19.4907%" y="159.50"></text></g><g><title>analysis (78,954,149 samples, 5.89%)</title><rect x="13.5781%" y="197" width="5.8948%" height="15" fill="rgb(233,36,39)"/><text x="13.8281%" y="207.50">analysis</text></g><g><title>type_check_crate (51,046,138 samples, 3.81%)</title><rect x="15.6618%" y="181" width="3.8111%" height="15" fill="rgb(226,3,54)"/><text x="15.9118%" y="191.50">type..</text></g><g><title>wf_checking (3,226,016 samples, 0.24%)</title><rect x="19.2321%" y="165" width="0.2409%" height="15" fill="rgb(245,192,40)"/><text x="19.4821%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,394,465 samples, 0.10%)</title><rect x="22.8361%" y="149" width="0.1041%" height="15" fill="rgb(238,167,29)"/><text x="23.0861%" y="159.50"></text></g><g><title>layout_of (1,878,596 samples, 0.14%)</title><rect x="23.1289%" y="149" width="0.1403%" height="15" fill="rgb(232,182,51)"/><text x="23.3789%" y="159.50"></text></g><g><title>predicates_of (1,390,960 samples, 0.10%)</title><rect x="23.4941%" y="133" width="0.1039%" height="15" fill="rgb(231,60,39)"/><text x="23.7441%" y="143.50"></text></g><g><title>param_env (4,413,763 samples, 0.33%)</title><rect x="23.2692%" y="149" width="0.3295%" height="15" fill="rgb(208,69,12)"/><text x="23.5192%" y="159.50"></text></g><g><title>fn_abi_of_instance (14,569,547 samples, 1.09%)</title><rect x="22.5614%" y="165" width="1.0878%" height="15" fill="rgb(235,93,37)"/><text x="22.8114%" y="175.50"></text></g><g><title>codegen_module (56,166,955 samples, 4.19%)</title><rect x="19.6079%" y="181" width="4.1935%" height="15" fill="rgb(213,116,39)"/><text x="19.8579%" y="191.50">codeg..</text></g><g><title>codegen_fn_attrs (1,913,133 samples, 0.14%)</title><rect x="24.0035%" y="133" width="0.1428%" height="15" fill="rgb(222,207,29)"/><text x="24.2535%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,585,553 samples, 0.19%)</title><rect x="24.5235%" y="117" width="0.1930%" height="15" fill="rgb(206,96,30)"/><text x="24.7735%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,227,111 samples, 0.24%)</title><rect x="24.7165%" y="117" width="0.2409%" height="15" fill="rgb(218,138,4)"/><text x="24.9665%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,360,295 samples, 0.10%)</title><rect x="25.0201%" y="101" width="0.1016%" height="15" fill="rgb(250,191,14)"/><text x="25.2701%" y="111.50"></text></g><g><title>optimized_mir (11,811,057 samples, 0.88%)</title><rect x="24.2420%" y="133" width="0.8818%" height="15" fill="rgb(239,60,40)"/><text x="24.4920%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,508,035 samples, 0.11%)</title><rect x="25.0112%" y="117" width="0.1126%" height="15" fill="rgb(206,27,48)"/><text x="25.2612%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (3,380,526 samples, 0.25%)</title><rect x="25.2127%" y="117" width="0.2524%" height="15" fill="rgb(225,35,8)"/><text x="25.4627%" y="127.50"></text></g><g><title>specialization_graph_of (2,925,112 samples, 0.22%)</title><rect x="25.5463%" y="117" width="0.2184%" height="15" fill="rgb(250,213,24)"/><text x="25.7963%" y="127.50"></text></g><g><title>resolve_instance (9,036,041 samples, 0.67%)</title><rect x="25.1238%" y="133" width="0.6746%" height="15" fill="rgb(247,123,22)"/><text x="25.3738%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (28,064,133 samples, 2.10%)</title><rect x="23.8050%" y="149" width="2.0953%" height="15" fill="rgb(231,138,38)"/><text x="24.0550%" y="159.50">m..</text></g><g><title>monomorphization_collector (28,117,044 samples, 2.10%)</title><rect x="23.8049%" y="165" width="2.0992%" height="15" fill="rgb(231,145,46)"/><text x="24.0549%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (2,250,965 samples, 0.17%)</title><rect x="25.9044%" y="149" width="0.1681%" height="15" fill="rgb(251,118,11)"/><text x="26.1544%" y="159.50"></text></g><g><title>symbol_name (2,042,163 samples, 0.15%)</title><rect x="25.9200%" y="133" width="0.1525%" height="15" fill="rgb(217,147,25)"/><text x="26.1700%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (31,161,688 samples, 2.33%)</title><rect x="23.8020%" y="181" width="2.3266%" height="15" fill="rgb(247,81,37)"/><text x="24.0520%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (3,006,513 samples, 0.22%)</title><rect x="25.9041%" y="165" width="0.2245%" height="15" fill="rgb(209,12,38)"/><text x="26.1541%" y="175.50"></text></g><g><title>codegen_crate (89,204,914 samples, 6.66%)</title><rect x="19.4736%" y="197" width="6.6601%" height="15" fill="rgb(227,1,9)"/><text x="19.7236%" y="207.50">codegen_c..</text></g><g><title>codegen_module_optimize (398,909,724 samples, 29.78%)</title><rect x="26.1337%" y="197" width="29.7829%" height="15" fill="rgb(248,47,43)"/><text x="26.3837%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (382,752,384 samples, 28.58%)</title><rect x="27.3401%" y="181" width="28.5766%" height="15" fill="rgb(221,10,30)"/><text x="27.5901%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (182,032,698 samples, 13.59%)</title><rect x="56.9270%" y="181" width="13.5907%" height="15" fill="rgb(210,229,1)"/><text x="57.1770%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (181,106,715 samples, 13.52%)</title><rect x="70.5177%" y="181" width="13.5216%" height="15" fill="rgb(222,148,37)"/><text x="70.7677%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (178,810,057 samples, 13.35%)</title><rect x="70.6891%" y="165" width="13.3501%" height="15" fill="rgb(234,67,33)"/><text x="70.9391%" y="175.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (23,739,754 samples, 1.77%)</title><rect x="84.0392%" y="181" width="1.7724%" height="15" fill="rgb(247,98,35)"/><text x="84.2892%" y="191.50">L..</text></g><g><title>codegen_module_perform_lto (401,124,899 samples, 29.95%)</title><rect x="55.9166%" y="197" width="29.9483%" height="15" fill="rgb(247,138,52)"/><text x="56.1666%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,334,246 samples, 0.17%)</title><rect x="87.7685%" y="149" width="0.1743%" height="15" fill="rgb(213,79,30)"/><text x="88.0185%" y="159.50"></text></g><g><title>macro_expand_crate (27,373,964 samples, 2.04%)</title><rect x="85.9086%" y="181" width="2.0438%" height="15" fill="rgb(246,177,23)"/><text x="86.1586%" y="191.50">m..</text></g><g><title>expand_crate (27,359,814 samples, 2.04%)</title><rect x="85.9096%" y="165" width="2.0427%" height="15" fill="rgb(230,62,27)"/><text x="86.1596%" y="175.50">e..</text></g><g><title>late_resolve_crate (10,390,097 samples, 0.78%)</title><rect x="87.9997%" y="165" width="0.7757%" height="15" fill="rgb(216,154,8)"/><text x="88.2497%" y="175.50"></text></g><g><title>configure_and_expand (39,171,697 samples, 2.92%)</title><rect x="85.8649%" y="197" width="2.9246%" height="15" fill="rgb(244,35,45)"/><text x="86.1149%" y="207.50">co..</text></g><g><title>resolve_crate (11,071,424 samples, 0.83%)</title><rect x="87.9629%" y="181" width="0.8266%" height="15" fill="rgb(251,115,12)"/><text x="88.2129%" y="191.50"></text></g><g><title>free_global_ctxt (7,176,120 samples, 0.54%)</title><rect x="88.8556%" y="197" width="0.5358%" height="15" fill="rgb(240,54,50)"/><text x="89.1056%" y="207.50"></text></g><g><title>optimized_mir (2,020,334 samples, 0.15%)</title><rect x="89.4743%" y="181" width="0.1508%" height="15" fill="rgb(233,84,52)"/><text x="89.7243%" y="191.50"></text></g><g><title>generate_crate_metadata (3,156,495 samples, 0.24%)</title><rect x="89.3913%" y="197" width="0.2357%" height="15" fill="rgb(207,117,47)"/><text x="89.6413%" y="207.50"></text></g><g><title>hir_lowering (4,544,710 samples, 0.34%)</title><rect x="89.6270%" y="197" width="0.3393%" height="15" fill="rgb(249,43,39)"/><text x="89.8770%" y="207.50"></text></g><g><title>finish_ongoing_codegen (126,538,059 samples, 9.45%)</title><rect x="89.9681%" y="181" width="9.4474%" height="15" fill="rgb(209,38,44)"/><text x="90.2181%" y="191.50">finish_ongoing..</text></g><g><title>link_crate (2,520,308 samples, 0.19%)</title><rect x="99.4155%" y="181" width="0.1882%" height="15" fill="rgb(236,212,23)"/><text x="99.6655%" y="191.50"></text></g><g><title>link_binary (2,362,086 samples, 0.18%)</title><rect x="99.4273%" y="165" width="0.1764%" height="15" fill="rgb(242,79,21)"/><text x="99.6773%" y="175.50"></text></g><g><title>link_rlib (1,426,766 samples, 0.11%)</title><rect x="99.4972%" y="149" width="0.1065%" height="15" fill="rgb(211,96,35)"/><text x="99.7472%" y="159.50"></text></g><g><title>link (129,099,608 samples, 9.64%)</title><rect x="89.9663%" y="197" width="9.6387%" height="15" fill="rgb(253,215,40)"/><text x="90.2163%" y="207.50">link</text></g><g><title>parse_crate (1,987,672 samples, 0.15%)</title><rect x="99.6050%" y="197" width="0.1484%" height="15" fill="rgb(211,81,21)"/><text x="99.8550%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,463,548 samples, 0.18%)</title><rect x="99.7786%" y="197" width="0.1839%" height="15" fill="rgb(208,190,38)"/><text x="100.0286%" y="207.50"></text></g><g><title>all (1,339,392,541 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,339,392,541 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>