<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (142,851,650 samples, 16.85%)</title><rect x="0.0787%" y="181" width="16.8465%" height="15" fill="rgb(227,0,7)"/><text x="0.3287%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,374,275 samples, 0.16%)</title><rect x="16.7631%" y="165" width="0.1621%" height="15" fill="rgb(217,0,24)"/><text x="17.0131%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,341,275 samples, 0.16%)</title><rect x="16.7670%" y="149" width="0.1582%" height="15" fill="rgb(221,193,54)"/><text x="17.0170%" y="159.50"></text></g><g><title>thir_body (1,299,346 samples, 0.15%)</title><rect x="20.2418%" y="69" width="0.1532%" height="15" fill="rgb(248,212,6)"/><text x="20.4918%" y="79.50"></text></g><g><title>mir_const (6,669,507 samples, 0.79%)</title><rect x="19.6102%" y="117" width="0.7865%" height="15" fill="rgb(208,68,35)"/><text x="19.8602%" y="127.50"></text></g><g><title>unsafety_check_result (5,808,589 samples, 0.69%)</title><rect x="19.7118%" y="101" width="0.6850%" height="15" fill="rgb(232,128,0)"/><text x="19.9618%" y="111.50"></text></g><g><title>mir_built (5,312,795 samples, 0.63%)</title><rect x="19.7702%" y="85" width="0.6265%" height="15" fill="rgb(207,160,47)"/><text x="20.0202%" y="95.50"></text></g><g><title>mir_promoted (11,453,058 samples, 1.35%)</title><rect x="19.4433%" y="133" width="1.3507%" height="15" fill="rgb(228,23,34)"/><text x="19.6933%" y="143.50"></text></g><g><title>mir_const_qualif (3,367,725 samples, 0.40%)</title><rect x="20.3968%" y="117" width="0.3972%" height="15" fill="rgb(218,30,26)"/><text x="20.6468%" y="127.50"></text></g><g><title>mir_const (2,820,497 samples, 0.33%)</title><rect x="20.4613%" y="101" width="0.3326%" height="15" fill="rgb(220,122,19)"/><text x="20.7113%" y="111.50"></text></g><g><title>unsafety_check_result (2,056,950 samples, 0.24%)</title><rect x="20.5514%" y="85" width="0.2426%" height="15" fill="rgb(250,228,42)"/><text x="20.8014%" y="95.50"></text></g><g><title>mir_built (1,802,508 samples, 0.21%)</title><rect x="20.5814%" y="69" width="0.2126%" height="15" fill="rgb(240,193,28)"/><text x="20.8314%" y="79.50"></text></g><g><title>type_op_prove_predicate (1,318,013 samples, 0.16%)</title><rect x="20.8395%" y="133" width="0.1554%" height="15" fill="rgb(216,20,37)"/><text x="21.0895%" y="143.50"></text></g><g><title>MIR_borrow_checking (33,991,513 samples, 4.01%)</title><rect x="16.9870%" y="165" width="4.0086%" height="15" fill="rgb(206,188,39)"/><text x="17.2370%" y="175.50">MIR_..</text></g><g><title>mir_borrowck (33,640,930 samples, 3.97%)</title><rect x="17.0284%" y="149" width="3.9673%" height="15" fill="rgb(217,207,13)"/><text x="17.2784%" y="159.50">mir_..</text></g><g><title>MIR_effect_checking (1,714,289 samples, 0.20%)</title><rect x="20.9956%" y="165" width="0.2022%" height="15" fill="rgb(231,73,38)"/><text x="21.2456%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,508,304 samples, 0.18%)</title><rect x="21.0199%" y="149" width="0.1779%" height="15" fill="rgb(225,20,46)"/><text x="21.2699%" y="159.50"></text></g><g><title>check_mod_attrs (982,000 samples, 0.12%)</title><rect x="21.2423%" y="149" width="0.1158%" height="15" fill="rgb(210,31,41)"/><text x="21.4923%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,520,276 samples, 0.18%)</title><rect x="21.3936%" y="149" width="0.1793%" height="15" fill="rgb(221,200,47)"/><text x="21.6436%" y="159.50"></text></g><g><title>misc_checking_1 (2,925,582 samples, 0.35%)</title><rect x="21.2404%" y="165" width="0.3450%" height="15" fill="rgb(226,26,5)"/><text x="21.4904%" y="175.50"></text></g><g><title>misc_checking_2 (1,374,125 samples, 0.16%)</title><rect x="21.5854%" y="165" width="0.1621%" height="15" fill="rgb(249,33,26)"/><text x="21.8354%" y="175.50"></text></g><g><title>match_checking (1,036,821 samples, 0.12%)</title><rect x="21.6252%" y="149" width="0.1223%" height="15" fill="rgb(235,183,28)"/><text x="21.8752%" y="159.50"></text></g><g><title>check_match (952,740 samples, 0.11%)</title><rect x="21.6351%" y="133" width="0.1124%" height="15" fill="rgb(221,5,38)"/><text x="21.8851%" y="143.50"></text></g><g><title>death_checking (906,980 samples, 0.11%)</title><rect x="21.8030%" y="149" width="0.1070%" height="15" fill="rgb(247,18,42)"/><text x="22.0530%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,720,250 samples, 0.20%)</title><rect x="22.0815%" y="117" width="0.2029%" height="15" fill="rgb(241,131,45)"/><text x="22.3315%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,623,369 samples, 0.19%)</title><rect x="22.0929%" y="101" width="0.1914%" height="15" fill="rgb(249,31,29)"/><text x="22.3429%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,490,419 samples, 0.18%)</title><rect x="22.1086%" y="85" width="0.1758%" height="15" fill="rgb(225,111,53)"/><text x="22.3586%" y="95.50"></text></g><g><title>crate_lints (4,455,119 samples, 0.53%)</title><rect x="21.9101%" y="133" width="0.5254%" height="15" fill="rgb(238,160,17)"/><text x="22.1601%" y="143.50"></text></g><g><title>type_of (1,125,042 samples, 0.13%)</title><rect x="22.3028%" y="117" width="0.1327%" height="15" fill="rgb(214,148,48)"/><text x="22.5528%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (893,228 samples, 0.11%)</title><rect x="22.3302%" y="101" width="0.1053%" height="15" fill="rgb(232,36,49)"/><text x="22.5802%" y="111.50"></text></g><g><title>lint_checking (5,219,697 samples, 0.62%)</title><rect x="21.9099%" y="149" width="0.6156%" height="15" fill="rgb(209,103,24)"/><text x="22.1599%" y="159.50"></text></g><g><title>privacy_checking_modules (1,172,683 samples, 0.14%)</title><rect x="22.6060%" y="149" width="0.1383%" height="15" fill="rgb(229,88,8)"/><text x="22.8560%" y="159.50"></text></g><g><title>check_mod_privacy (1,170,913 samples, 0.14%)</title><rect x="22.6062%" y="133" width="0.1381%" height="15" fill="rgb(213,181,19)"/><text x="22.8562%" y="143.50"></text></g><g><title>misc_checking_3 (8,468,853 samples, 1.00%)</title><rect x="21.7474%" y="165" width="0.9987%" height="15" fill="rgb(254,191,54)"/><text x="21.9974%" y="175.50"></text></g><g><title>impl_parent (2,327,378 samples, 0.27%)</title><rect x="23.4069%" y="101" width="0.2745%" height="15" fill="rgb(241,83,37)"/><text x="23.6569%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,399,566 samples, 0.17%)</title><rect x="23.5163%" y="85" width="0.1651%" height="15" fill="rgb(233,36,39)"/><text x="23.7663%" y="95.50"></text></g><g><title>impl_trait_ref (5,211,199 samples, 0.61%)</title><rect x="23.6814%" y="101" width="0.6146%" height="15" fill="rgb(226,3,54)"/><text x="23.9314%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,050,316 samples, 0.48%)</title><rect x="23.8183%" y="85" width="0.4777%" height="15" fill="rgb(245,192,40)"/><text x="24.0683%" y="95.50"></text></g><g><title>coherent_trait (13,604,120 samples, 1.60%)</title><rect x="22.7652%" y="133" width="1.6043%" height="15" fill="rgb(238,167,29)"/><text x="23.0152%" y="143.50"></text></g><g><title>specialization_graph_of (12,042,973 samples, 1.42%)</title><rect x="22.9493%" y="117" width="1.4202%" height="15" fill="rgb(232,182,51)"/><text x="23.1993%" y="127.50"></text></g><g><title>coherence_checking (13,713,281 samples, 1.62%)</title><rect x="22.7628%" y="149" width="1.6172%" height="15" fill="rgb(231,60,39)"/><text x="23.0128%" y="159.50"></text></g><g><title>mir_for_ctfe (855,691 samples, 0.10%)</title><rect x="27.5008%" y="37" width="0.1009%" height="15" fill="rgb(208,69,12)"/><text x="27.7508%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,906,462 samples, 0.22%)</title><rect x="27.3805%" y="85" width="0.2248%" height="15" fill="rgb(235,93,37)"/><text x="27.6305%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,881,252 samples, 0.22%)</title><rect x="27.3834%" y="69" width="0.2219%" height="15" fill="rgb(213,116,39)"/><text x="27.6334%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,841,611 samples, 0.22%)</title><rect x="27.3881%" y="53" width="0.2172%" height="15" fill="rgb(222,207,29)"/><text x="27.6381%" y="63.50"></text></g><g><title>evaluate_obligation (4,165,434 samples, 0.49%)</title><rect x="27.1759%" y="101" width="0.4912%" height="15" fill="rgb(206,96,30)"/><text x="27.4259%" y="111.50"></text></g><g><title>item_bodies_checking (28,776,527 samples, 3.39%)</title><rect x="24.3868%" y="149" width="3.3936%" height="15" fill="rgb(218,138,4)"/><text x="24.6368%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (28,772,787 samples, 3.39%)</title><rect x="24.3872%" y="133" width="3.3932%" height="15" fill="rgb(250,191,14)"/><text x="24.6372%" y="143.50">typ..</text></g><g><title>typeck (28,629,355 samples, 3.38%)</title><rect x="24.4042%" y="117" width="3.3763%" height="15" fill="rgb(239,60,40)"/><text x="24.6542%" y="127.50">typ..</text></g><g><title>specializes (1,872,645 samples, 0.22%)</title><rect x="29.0606%" y="85" width="0.2208%" height="15" fill="rgb(206,27,48)"/><text x="29.3106%" y="95.50"></text></g><g><title>param_env (1,100,538 samples, 0.13%)</title><rect x="29.1517%" y="69" width="0.1298%" height="15" fill="rgb(225,35,8)"/><text x="29.4017%" y="79.50"></text></g><g><title>evaluate_obligation (6,260,940 samples, 0.74%)</title><rect x="28.5560%" y="101" width="0.7384%" height="15" fill="rgb(250,213,24)"/><text x="28.8060%" y="111.50"></text></g><g><title>item_types_checking (13,346,436 samples, 1.57%)</title><rect x="27.7804%" y="149" width="1.5739%" height="15" fill="rgb(247,123,22)"/><text x="28.0304%" y="159.50"></text></g><g><title>check_mod_item_types (13,342,226 samples, 1.57%)</title><rect x="27.7809%" y="133" width="1.5734%" height="15" fill="rgb(231,138,38)"/><text x="28.0309%" y="143.50"></text></g><g><title>typeck (11,762,431 samples, 1.39%)</title><rect x="27.9672%" y="117" width="1.3871%" height="15" fill="rgb(231,145,46)"/><text x="28.2172%" y="127.50"></text></g><g><title>mir_for_ctfe (1,145,563 samples, 0.14%)</title><rect x="29.5238%" y="69" width="0.1351%" height="15" fill="rgb(251,118,11)"/><text x="29.7738%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,046,182 samples, 0.12%)</title><rect x="29.5356%" y="53" width="0.1234%" height="15" fill="rgb(217,147,25)"/><text x="29.7856%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,279,054 samples, 0.27%)</title><rect x="29.4403%" y="117" width="0.2688%" height="15" fill="rgb(247,81,37)"/><text x="29.6903%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,256,533 samples, 0.27%)</title><rect x="29.4430%" y="101" width="0.2661%" height="15" fill="rgb(209,12,38)"/><text x="29.6930%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,235,213 samples, 0.26%)</title><rect x="29.4455%" y="85" width="0.2636%" height="15" fill="rgb(227,1,9)"/><text x="29.6955%" y="95.50"></text></g><g><title>type_collecting (5,593,002 samples, 0.66%)</title><rect x="29.3544%" y="149" width="0.6596%" height="15" fill="rgb(248,47,43)"/><text x="29.6044%" y="159.50"></text></g><g><title>collect_mod_item_types (5,590,492 samples, 0.66%)</title><rect x="29.3547%" y="133" width="0.6593%" height="15" fill="rgb(221,10,30)"/><text x="29.6047%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,530,205 samples, 0.42%)</title><rect x="30.0582%" y="133" width="0.4163%" height="15" fill="rgb(210,229,1)"/><text x="30.3082%" y="143.50"></text></g><g><title>param_env (1,064,728 samples, 0.13%)</title><rect x="30.9946%" y="117" width="0.1256%" height="15" fill="rgb(222,148,37)"/><text x="31.2446%" y="127.50"></text></g><g><title>analysis (120,783,847 samples, 14.24%)</title><rect x="16.9252%" y="181" width="14.2440%" height="15" fill="rgb(234,67,33)"/><text x="17.1752%" y="191.50">analysis</text></g><g><title>type_check_crate (71,424,306 samples, 8.42%)</title><rect x="22.7462%" y="165" width="8.4231%" height="15" fill="rgb(247,98,35)"/><text x="22.9962%" y="175.50">type_check_c..</text></g><g><title>wf_checking (9,774,488 samples, 1.15%)</title><rect x="30.0165%" y="149" width="1.1527%" height="15" fill="rgb(247,138,52)"/><text x="30.2665%" y="159.50"></text></g><g><title>check_item_well_formed (5,890,580 samples, 0.69%)</title><rect x="30.4746%" y="133" width="0.6947%" height="15" fill="rgb(213,79,30)"/><text x="30.7246%" y="143.50"></text></g><g><title>layout_of (1,218,863 samples, 0.14%)</title><rect x="33.2085%" y="133" width="0.1437%" height="15" fill="rgb(246,177,23)"/><text x="33.4585%" y="143.50"></text></g><g><title>param_env (1,185,754 samples, 0.14%)</title><rect x="33.3522%" y="133" width="0.1398%" height="15" fill="rgb(230,62,27)"/><text x="33.6022%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,714,184 samples, 0.67%)</title><rect x="32.8787%" y="149" width="0.6739%" height="15" fill="rgb(216,154,8)"/><text x="33.1287%" y="159.50"></text></g><g><title>codegen_module (19,594,075 samples, 2.31%)</title><rect x="31.3574%" y="165" width="2.3107%" height="15" fill="rgb(244,35,45)"/><text x="31.6074%" y="175.50">c..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,360,025 samples, 0.16%)</title><rect x="34.1703%" y="101" width="0.1604%" height="15" fill="rgb(251,115,12)"/><text x="34.4203%" y="111.50"></text></g><g><title>optimized_mir (3,897,933 samples, 0.46%)</title><rect x="33.9010%" y="117" width="0.4597%" height="15" fill="rgb(240,54,50)"/><text x="34.1510%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,962,162 samples, 0.23%)</title><rect x="34.4236%" y="101" width="0.2314%" height="15" fill="rgb(233,84,52)"/><text x="34.6736%" y="111.50"></text></g><g><title>specialization_graph_of (2,434,066 samples, 0.29%)</title><rect x="34.7121%" y="101" width="0.2870%" height="15" fill="rgb(207,117,47)"/><text x="34.9621%" y="111.50"></text></g><g><title>impl_trait_ref (1,069,352 samples, 0.13%)</title><rect x="34.8730%" y="85" width="0.1261%" height="15" fill="rgb(249,43,39)"/><text x="35.1230%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (849,526 samples, 0.10%)</title><rect x="34.8990%" y="69" width="0.1002%" height="15" fill="rgb(209,38,44)"/><text x="35.1490%" y="79.50"></text></g><g><title>resolve_instance (5,523,120 samples, 0.65%)</title><rect x="34.3607%" y="117" width="0.6513%" height="15" fill="rgb(236,212,23)"/><text x="34.6107%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (12,395,786 samples, 1.46%)</title><rect x="33.6736%" y="133" width="1.4618%" height="15" fill="rgb(242,79,21)"/><text x="33.9236%" y="143.50"></text></g><g><title>monomorphization_collector (12,510,278 samples, 1.48%)</title><rect x="33.6733%" y="149" width="1.4753%" height="15" fill="rgb(211,96,35)"/><text x="33.9233%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (1,023,541 samples, 0.12%)</title><rect x="35.1500%" y="133" width="0.1207%" height="15" fill="rgb(253,215,40)"/><text x="35.4000%" y="143.50"></text></g><g><title>symbol_name (908,197 samples, 0.11%)</title><rect x="35.1636%" y="117" width="0.1071%" height="15" fill="rgb(211,81,21)"/><text x="35.4136%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (13,928,313 samples, 1.64%)</title><rect x="33.6683%" y="165" width="1.6426%" height="15" fill="rgb(208,190,38)"/><text x="33.9183%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,375,215 samples, 0.16%)</title><rect x="35.1487%" y="149" width="0.1622%" height="15" fill="rgb(235,213,38)"/><text x="35.3987%" y="159.50"></text></g><g><title>codegen_crate (35,170,967 samples, 4.15%)</title><rect x="31.1703%" y="181" width="4.1477%" height="15" fill="rgb(237,122,38)"/><text x="31.4203%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (142,244,172 samples, 16.77%)</title><rect x="35.3181%" y="181" width="16.7748%" height="15" fill="rgb(244,218,35)"/><text x="35.5681%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (129,677,476 samples, 15.29%)</title><rect x="36.8000%" y="165" width="15.2929%" height="15" fill="rgb(240,68,47)"/><text x="37.0500%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (116,535,731 samples, 13.74%)</title><rect x="52.7882%" y="165" width="13.7430%" height="15" fill="rgb(210,16,53)"/><text x="53.0382%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (104,516,519 samples, 12.33%)</title><rect x="66.5312%" y="165" width="12.3256%" height="15" fill="rgb(235,124,12)"/><text x="66.7812%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (103,664,090 samples, 12.23%)</title><rect x="66.6318%" y="149" width="12.2251%" height="15" fill="rgb(224,169,11)"/><text x="66.8818%" y="159.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (4,663,611 samples, 0.55%)</title><rect x="78.8569%" y="165" width="0.5500%" height="15" fill="rgb(250,166,2)"/><text x="79.1069%" y="175.50"></text></g><g><title>codegen_module_perform_lto (232,355,734 samples, 27.40%)</title><rect x="52.0929%" y="181" width="27.4017%" height="15" fill="rgb(242,216,29)"/><text x="52.3429%" y="191.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (19,126,431 samples, 2.26%)</title><rect x="79.5657%" y="165" width="2.2556%" height="15" fill="rgb(230,116,27)"/><text x="79.8157%" y="175.50">m..</text></g><g><title>expand_crate (19,108,901 samples, 2.25%)</title><rect x="79.5678%" y="149" width="2.2535%" height="15" fill="rgb(228,99,48)"/><text x="79.8178%" y="159.50">e..</text></g><g><title>metadata_register_crate (2,031,483 samples, 0.24%)</title><rect x="81.5817%" y="133" width="0.2396%" height="15" fill="rgb(253,11,6)"/><text x="81.8317%" y="143.50"></text></g><g><title>late_resolve_crate (2,717,680 samples, 0.32%)</title><rect x="81.8885%" y="149" width="0.3205%" height="15" fill="rgb(247,143,39)"/><text x="82.1385%" y="159.50"></text></g><g><title>configure_and_expand (23,196,916 samples, 2.74%)</title><rect x="79.4946%" y="181" width="2.7356%" height="15" fill="rgb(236,97,10)"/><text x="79.7446%" y="191.50">co..</text></g><g><title>resolve_crate (3,299,186 samples, 0.39%)</title><rect x="81.8411%" y="165" width="0.3891%" height="15" fill="rgb(233,208,19)"/><text x="82.0911%" y="175.50"></text></g><g><title>free_global_ctxt (6,414,040 samples, 0.76%)</title><rect x="82.3468%" y="181" width="0.7564%" height="15" fill="rgb(216,164,2)"/><text x="82.5968%" y="191.50"></text></g><g><title>optimized_mir (4,724,003 samples, 0.56%)</title><rect x="83.5564%" y="165" width="0.5571%" height="15" fill="rgb(220,129,5)"/><text x="83.8064%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,076,904 samples, 0.24%)</title><rect x="83.8686%" y="149" width="0.2449%" height="15" fill="rgb(242,17,10)"/><text x="84.1186%" y="159.50"></text></g><g><title>generate_crate_metadata (8,697,986 samples, 1.03%)</title><rect x="83.1032%" y="181" width="1.0258%" height="15" fill="rgb(242,107,0)"/><text x="83.3532%" y="191.50"></text></g><g><title>hir_lowering (5,929,205 samples, 0.70%)</title><rect x="84.1289%" y="181" width="0.6992%" height="15" fill="rgb(251,28,31)"/><text x="84.3789%" y="191.50"></text></g><g><title>finish_ongoing_codegen (121,621,897 samples, 14.34%)</title><rect x="84.8309%" y="165" width="14.3429%" height="15" fill="rgb(233,223,10)"/><text x="85.0809%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,334,215 samples, 0.16%)</title><rect x="99.1738%" y="165" width="0.1573%" height="15" fill="rgb(215,21,27)"/><text x="99.4238%" y="175.50"></text></g><g><title>link_binary (1,315,864 samples, 0.16%)</title><rect x="99.1759%" y="149" width="0.1552%" height="15" fill="rgb(232,23,21)"/><text x="99.4259%" y="159.50"></text></g><g><title>link_rlib (970,351 samples, 0.11%)</title><rect x="99.2167%" y="133" width="0.1144%" height="15" fill="rgb(244,5,23)"/><text x="99.4667%" y="143.50"></text></g><g><title>link (122,989,172 samples, 14.50%)</title><rect x="84.8282%" y="181" width="14.5041%" height="15" fill="rgb(226,81,46)"/><text x="85.0782%" y="191.50">link</text></g><g><title>parse_crate (2,010,342 samples, 0.24%)</title><rect x="99.3323%" y="181" width="0.2371%" height="15" fill="rgb(247,70,30)"/><text x="99.5823%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,953,982 samples, 0.35%)</title><rect x="99.5926%" y="181" width="0.3484%" height="15" fill="rgb(212,68,19)"/><text x="99.8426%" y="191.50"></text></g><g><title>all (847,961,308 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (847,961,308 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>