<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (60,765,936 samples, 15.94%)</title><rect x="0.1880%" y="197" width="15.9442%" height="15" fill="rgb(227,0,7)"/><text x="0.4380%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (440,395 samples, 0.12%)</title><rect x="21.9139%" y="85" width="0.1156%" height="15" fill="rgb(217,0,24)"/><text x="22.1639%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,406,811 samples, 0.37%)</title><rect x="22.2093%" y="69" width="0.3691%" height="15" fill="rgb(221,193,54)"/><text x="22.4593%" y="79.50"></text></g><g><title>resolve_instance (2,300,120 samples, 0.60%)</title><rect x="22.0976%" y="85" width="0.6035%" height="15" fill="rgb(248,212,6)"/><text x="22.3476%" y="95.50"></text></g><g><title>thir_body (1,287,014 samples, 0.34%)</title><rect x="22.7095%" y="85" width="0.3377%" height="15" fill="rgb(208,68,35)"/><text x="22.9595%" y="95.50"></text></g><g><title>mir_const (9,150,828 samples, 2.40%)</title><rect x="20.6515%" y="133" width="2.4011%" height="15" fill="rgb(232,128,0)"/><text x="20.9015%" y="143.50">mi..</text></g><g><title>unsafety_check_result (8,132,876 samples, 2.13%)</title><rect x="20.9186%" y="117" width="2.1340%" height="15" fill="rgb(207,160,47)"/><text x="21.1686%" y="127.50">u..</text></g><g><title>mir_built (7,333,109 samples, 1.92%)</title><rect x="21.1284%" y="101" width="1.9241%" height="15" fill="rgb(228,23,34)"/><text x="21.3784%" y="111.50">m..</text></g><g><title>mir_const (819,497 samples, 0.22%)</title><rect x="23.1277%" y="117" width="0.2150%" height="15" fill="rgb(218,30,26)"/><text x="23.3777%" y="127.50"></text></g><g><title>unsafety_check_result (574,164 samples, 0.15%)</title><rect x="23.1921%" y="101" width="0.1507%" height="15" fill="rgb(220,122,19)"/><text x="23.4421%" y="111.50"></text></g><g><title>mir_built (488,624 samples, 0.13%)</title><rect x="23.2145%" y="85" width="0.1282%" height="15" fill="rgb(250,228,42)"/><text x="23.4645%" y="95.50"></text></g><g><title>mir_promoted (11,323,588 samples, 2.97%)</title><rect x="20.3738%" y="149" width="2.9712%" height="15" fill="rgb(240,193,28)"/><text x="20.6238%" y="159.50">mir..</text></g><g><title>mir_const_qualif (1,114,330 samples, 0.29%)</title><rect x="23.0525%" y="133" width="0.2924%" height="15" fill="rgb(216,20,37)"/><text x="23.3025%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,756,198 samples, 0.46%)</title><rect x="23.3802%" y="149" width="0.4608%" height="15" fill="rgb(206,188,39)"/><text x="23.6302%" y="159.50"></text></g><g><title>normalize_projection_ty (1,366,376 samples, 0.36%)</title><rect x="23.4825%" y="133" width="0.3585%" height="15" fill="rgb(217,207,13)"/><text x="23.7325%" y="143.50"></text></g><g><title>MIR_borrow_checking (31,873,949 samples, 8.36%)</title><rect x="16.2320%" y="181" width="8.3633%" height="15" fill="rgb(231,73,38)"/><text x="16.4820%" y="191.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (31,638,396 samples, 8.30%)</title><rect x="16.2938%" y="165" width="8.3015%" height="15" fill="rgb(225,20,46)"/><text x="16.5438%" y="175.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (2,845,224 samples, 0.75%)</title><rect x="23.8488%" y="149" width="0.7465%" height="15" fill="rgb(210,31,41)"/><text x="24.0988%" y="159.50"></text></g><g><title>MIR_effect_checking (509,855 samples, 0.13%)</title><rect x="24.5953%" y="181" width="0.1338%" height="15" fill="rgb(221,200,47)"/><text x="24.8453%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (407,634 samples, 0.11%)</title><rect x="24.6221%" y="165" width="0.1070%" height="15" fill="rgb(226,26,5)"/><text x="24.8721%" y="175.50"></text></g><g><title>codegen_fn_attrs (413,113 samples, 0.11%)</title><rect x="24.8605%" y="149" width="0.1084%" height="15" fill="rgb(249,33,26)"/><text x="25.1105%" y="159.50"></text></g><g><title>check_mod_attrs (667,786 samples, 0.18%)</title><rect x="24.7938%" y="165" width="0.1752%" height="15" fill="rgb(235,183,28)"/><text x="25.0438%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (503,556 samples, 0.13%)</title><rect x="25.0292%" y="165" width="0.1321%" height="15" fill="rgb(221,5,38)"/><text x="25.2792%" y="175.50"></text></g><g><title>misc_checking_1 (1,478,826 samples, 0.39%)</title><rect x="24.7881%" y="181" width="0.3880%" height="15" fill="rgb(247,18,42)"/><text x="25.0381%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (557,296 samples, 0.15%)</title><rect x="25.1766%" y="165" width="0.1462%" height="15" fill="rgb(241,131,45)"/><text x="25.4266%" y="175.50"></text></g><g><title>check_mod_liveness (427,545 samples, 0.11%)</title><rect x="25.2106%" y="149" width="0.1122%" height="15" fill="rgb(249,31,29)"/><text x="25.4606%" y="159.50"></text></g><g><title>misc_checking_2 (1,125,432 samples, 0.30%)</title><rect x="25.1761%" y="181" width="0.2953%" height="15" fill="rgb(225,111,53)"/><text x="25.4261%" y="191.50"></text></g><g><title>match_checking (566,456 samples, 0.15%)</title><rect x="25.3228%" y="165" width="0.1486%" height="15" fill="rgb(238,160,17)"/><text x="25.5728%" y="175.50"></text></g><g><title>check_match (513,886 samples, 0.13%)</title><rect x="25.3366%" y="149" width="0.1348%" height="15" fill="rgb(214,148,48)"/><text x="25.5866%" y="159.50"></text></g><g><title>death_checking (675,867 samples, 0.18%)</title><rect x="25.5394%" y="165" width="0.1773%" height="15" fill="rgb(232,36,49)"/><text x="25.7894%" y="175.50"></text></g><g><title>crate_lints (1,080,492 samples, 0.28%)</title><rect x="25.7171%" y="149" width="0.2835%" height="15" fill="rgb(209,103,24)"/><text x="25.9671%" y="159.50"></text></g><g><title>lint_checking (1,586,537 samples, 0.42%)</title><rect x="25.7167%" y="165" width="0.4163%" height="15" fill="rgb(229,88,8)"/><text x="25.9667%" y="175.50"></text></g><g><title>module_lints (504,575 samples, 0.13%)</title><rect x="26.0006%" y="149" width="0.1324%" height="15" fill="rgb(213,181,19)"/><text x="26.2506%" y="159.50"></text></g><g><title>lint_mod (500,725 samples, 0.13%)</title><rect x="26.0016%" y="133" width="0.1314%" height="15" fill="rgb(254,191,54)"/><text x="26.2516%" y="143.50"></text></g><g><title>privacy_checking_modules (909,890 samples, 0.24%)</title><rect x="26.2305%" y="165" width="0.2387%" height="15" fill="rgb(241,83,37)"/><text x="26.4805%" y="175.50"></text></g><g><title>check_mod_privacy (906,950 samples, 0.24%)</title><rect x="26.2312%" y="149" width="0.2380%" height="15" fill="rgb(233,36,39)"/><text x="26.4812%" y="159.50"></text></g><g><title>misc_checking_3 (3,824,702 samples, 1.00%)</title><rect x="25.4714%" y="181" width="1.0035%" height="15" fill="rgb(226,3,54)"/><text x="25.7214%" y="191.50"></text></g><g><title>impl_parent (1,042,581 samples, 0.27%)</title><rect x="27.4224%" y="117" width="0.2736%" height="15" fill="rgb(245,192,40)"/><text x="27.6724%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (464,871 samples, 0.12%)</title><rect x="27.5740%" y="101" width="0.1220%" height="15" fill="rgb(238,167,29)"/><text x="27.8240%" y="111.50"></text></g><g><title>impl_trait_ref (1,585,569 samples, 0.42%)</title><rect x="27.6960%" y="117" width="0.4160%" height="15" fill="rgb(232,182,51)"/><text x="27.9460%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,232,934 samples, 0.32%)</title><rect x="27.7885%" y="101" width="0.3235%" height="15" fill="rgb(231,60,39)"/><text x="28.0385%" y="111.50"></text></g><g><title>coherent_trait (6,406,120 samples, 1.68%)</title><rect x="26.5041%" y="149" width="1.6809%" height="15" fill="rgb(208,69,12)"/><text x="26.7541%" y="159.50"></text></g><g><title>specialization_graph_of (6,157,117 samples, 1.62%)</title><rect x="26.5694%" y="133" width="1.6155%" height="15" fill="rgb(235,93,37)"/><text x="26.8194%" y="143.50"></text></g><g><title>coherence_checking (6,488,891 samples, 1.70%)</title><rect x="26.4999%" y="165" width="1.7026%" height="15" fill="rgb(213,116,39)"/><text x="26.7499%" y="175.50"></text></g><g><title>associated_item (578,825 samples, 0.15%)</title><rect x="36.2738%" y="101" width="0.1519%" height="15" fill="rgb(222,207,29)"/><text x="36.5238%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (458,634 samples, 0.12%)</title><rect x="36.3054%" y="85" width="0.1203%" height="15" fill="rgb(206,96,30)"/><text x="36.5554%" y="95.50"></text></g><g><title>associated_items (792,948 samples, 0.21%)</title><rect x="36.2258%" y="117" width="0.2081%" height="15" fill="rgb(218,138,4)"/><text x="36.4758%" y="127.50"></text></g><g><title>mir_const (415,034 samples, 0.11%)</title><rect x="36.6532%" y="53" width="0.1089%" height="15" fill="rgb(250,191,14)"/><text x="36.9032%" y="63.50"></text></g><g><title>mir_const_qualif (489,505 samples, 0.13%)</title><rect x="36.6341%" y="69" width="0.1284%" height="15" fill="rgb(239,60,40)"/><text x="36.8841%" y="79.50"></text></g><g><title>mir_borrowck (874,490 samples, 0.23%)</title><rect x="36.8757%" y="37" width="0.2295%" height="15" fill="rgb(206,27,48)"/><text x="37.1257%" y="47.50"></text></g><g><title>mir_for_ctfe (1,309,554 samples, 0.34%)</title><rect x="36.7625%" y="69" width="0.3436%" height="15" fill="rgb(225,35,8)"/><text x="37.0125%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,194,111 samples, 0.31%)</title><rect x="36.7928%" y="53" width="0.3133%" height="15" fill="rgb(250,213,24)"/><text x="37.0428%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,354,025 samples, 0.62%)</title><rect x="36.4923%" y="117" width="0.6177%" height="15" fill="rgb(247,123,22)"/><text x="36.7423%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,323,085 samples, 0.61%)</title><rect x="36.5004%" y="101" width="0.6095%" height="15" fill="rgb(231,138,38)"/><text x="36.7504%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,301,453 samples, 0.60%)</title><rect x="36.5061%" y="85" width="0.6039%" height="15" fill="rgb(231,145,46)"/><text x="36.7561%" y="95.50"></text></g><g><title>generics_of (393,271 samples, 0.10%)</title><rect x="37.8512%" y="101" width="0.1032%" height="15" fill="rgb(251,118,11)"/><text x="38.1012%" y="111.50"></text></g><g><title>impl_trait_ref (469,054 samples, 0.12%)</title><rect x="37.9825%" y="101" width="0.1231%" height="15" fill="rgb(217,147,25)"/><text x="38.2325%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (392,063 samples, 0.10%)</title><rect x="38.0027%" y="85" width="0.1029%" height="15" fill="rgb(247,81,37)"/><text x="38.2527%" y="95.50"></text></g><g><title>specializes (898,510 samples, 0.24%)</title><rect x="38.2036%" y="101" width="0.2358%" height="15" fill="rgb(209,12,38)"/><text x="38.4536%" y="111.50"></text></g><g><title>param_env (528,046 samples, 0.14%)</title><rect x="38.3008%" y="85" width="0.1386%" height="15" fill="rgb(227,1,9)"/><text x="38.5508%" y="95.50"></text></g><g><title>trait_impls_of (405,963 samples, 0.11%)</title><rect x="38.4445%" y="101" width="0.1065%" height="15" fill="rgb(248,47,43)"/><text x="38.6945%" y="111.50"></text></g><g><title>evaluate_obligation (5,509,183 samples, 1.45%)</title><rect x="37.1099%" y="117" width="1.4455%" height="15" fill="rgb(221,10,30)"/><text x="37.3599%" y="127.50"></text></g><g><title>method_autoderef_steps (1,147,850 samples, 0.30%)</title><rect x="38.7283%" y="117" width="0.3012%" height="15" fill="rgb(210,229,1)"/><text x="38.9783%" y="127.50"></text></g><g><title>evaluate_obligation (558,685 samples, 0.15%)</title><rect x="38.8829%" y="101" width="0.1466%" height="15" fill="rgb(222,148,37)"/><text x="39.1329%" y="111.50"></text></g><g><title>param_env (582,977 samples, 0.15%)</title><rect x="39.0437%" y="117" width="0.1530%" height="15" fill="rgb(234,67,33)"/><text x="39.2937%" y="127.50"></text></g><g><title>item_bodies_checking (42,517,875 samples, 11.16%)</title><rect x="28.2168%" y="165" width="11.1561%" height="15" fill="rgb(247,98,35)"/><text x="28.4668%" y="175.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (42,514,405 samples, 11.16%)</title><rect x="28.2177%" y="149" width="11.1552%" height="15" fill="rgb(247,138,52)"/><text x="28.4677%" y="159.50">typeck_item_bodi..</text></g><g><title>typeck (42,334,351 samples, 11.11%)</title><rect x="28.2649%" y="133" width="11.1080%" height="15" fill="rgb(213,79,30)"/><text x="28.5149%" y="143.50">typeck</text></g><g><title>item_types_checking (2,632,279 samples, 0.69%)</title><rect x="39.3729%" y="165" width="0.6907%" height="15" fill="rgb(246,177,23)"/><text x="39.6229%" y="175.50"></text></g><g><title>check_mod_item_types (2,628,329 samples, 0.69%)</title><rect x="39.3739%" y="149" width="0.6896%" height="15" fill="rgb(230,62,27)"/><text x="39.6239%" y="159.50"></text></g><g><title>generics_of (457,107 samples, 0.12%)</title><rect x="40.2418%" y="133" width="0.1199%" height="15" fill="rgb(216,154,8)"/><text x="40.4918%" y="143.50"></text></g><g><title>late_bound_vars_map (385,733 samples, 0.10%)</title><rect x="40.5935%" y="85" width="0.1012%" height="15" fill="rgb(244,35,45)"/><text x="40.8435%" y="95.50"></text></g><g><title>explicit_predicates_of (922,059 samples, 0.24%)</title><rect x="40.4571%" y="101" width="0.2419%" height="15" fill="rgb(251,115,12)"/><text x="40.7071%" y="111.50"></text></g><g><title>predicates_of (1,331,974 samples, 0.35%)</title><rect x="40.4023%" y="133" width="0.3495%" height="15" fill="rgb(240,54,50)"/><text x="40.6523%" y="143.50"></text></g><g><title>predicates_defined_on (1,251,203 samples, 0.33%)</title><rect x="40.4235%" y="117" width="0.3283%" height="15" fill="rgb(233,84,52)"/><text x="40.6735%" y="127.50"></text></g><g><title>type_collecting (2,872,241 samples, 0.75%)</title><rect x="40.0640%" y="165" width="0.7536%" height="15" fill="rgb(207,117,47)"/><text x="40.3140%" y="175.50"></text></g><g><title>collect_mod_item_types (2,862,281 samples, 0.75%)</title><rect x="40.0666%" y="149" width="0.7510%" height="15" fill="rgb(249,43,39)"/><text x="40.3166%" y="159.50"></text></g><g><title>evaluate_obligation (1,393,735 samples, 0.37%)</title><rect x="42.1341%" y="133" width="0.3657%" height="15" fill="rgb(209,38,44)"/><text x="42.3841%" y="143.50"></text></g><g><title>implied_outlives_bounds (731,848 samples, 0.19%)</title><rect x="42.5012%" y="133" width="0.1920%" height="15" fill="rgb(236,212,23)"/><text x="42.7512%" y="143.50"></text></g><g><title>param_env (590,736 samples, 0.16%)</title><rect x="42.6933%" y="133" width="0.1550%" height="15" fill="rgb(242,79,21)"/><text x="42.9433%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,902,469 samples, 2.07%)</title><rect x="40.9089%" y="149" width="2.0735%" height="15" fill="rgb(211,96,35)"/><text x="41.1589%" y="159.50">c..</text></g><g><title>region_scope_tree (481,245 samples, 0.13%)</title><rect x="42.8562%" y="133" width="0.1263%" height="15" fill="rgb(253,215,40)"/><text x="43.1062%" y="143.50"></text></g><g><title>param_env (562,436 samples, 0.15%)</title><rect x="44.3166%" y="133" width="0.1476%" height="15" fill="rgb(211,81,21)"/><text x="44.5666%" y="143.50"></text></g><g><title>check_item_well_formed (5,870,085 samples, 1.54%)</title><rect x="42.9824%" y="149" width="1.5402%" height="15" fill="rgb(208,190,38)"/><text x="43.2324%" y="159.50"></text></g><g><title>analysis (108,580,080 samples, 28.49%)</title><rect x="16.1321%" y="197" width="28.4899%" height="15" fill="rgb(235,213,38)"/><text x="16.3821%" y="207.50">analysis</text></g><g><title>type_check_crate (69,161,718 samples, 18.15%)</title><rect x="26.4750%" y="181" width="18.1471%" height="15" fill="rgb(237,122,38)"/><text x="26.7250%" y="191.50">type_check_crate</text></g><g><title>wf_checking (14,489,409 samples, 3.80%)</title><rect x="40.8202%" y="165" width="3.8018%" height="15" fill="rgb(244,218,35)"/><text x="41.0702%" y="175.50">wf_c..</text></g><g><title>param_env (540,865 samples, 0.14%)</title><rect x="46.0200%" y="149" width="0.1419%" height="15" fill="rgb(240,68,47)"/><text x="46.2700%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,872,339 samples, 0.49%)</title><rect x="45.7550%" y="165" width="0.4913%" height="15" fill="rgb(210,16,53)"/><text x="46.0050%" y="175.50"></text></g><g><title>codegen_module (5,739,843 samples, 1.51%)</title><rect x="44.8193%" y="181" width="1.5061%" height="15" fill="rgb(235,124,12)"/><text x="45.0693%" y="191.50"></text></g><g><title>codegen_fn_attrs (513,238 samples, 0.13%)</title><rect x="46.4339%" y="133" width="0.1347%" height="15" fill="rgb(224,169,11)"/><text x="46.6839%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (440,614 samples, 0.12%)</title><rect x="46.8753%" y="117" width="0.1156%" height="15" fill="rgb(250,166,2)"/><text x="47.1253%" y="127.50"></text></g><g><title>optimized_mir (1,455,923 samples, 0.38%)</title><rect x="46.6123%" y="133" width="0.3820%" height="15" fill="rgb(242,216,29)"/><text x="46.8623%" y="143.50"></text></g><g><title>evaluate_obligation (414,676 samples, 0.11%)</title><rect x="47.1414%" y="101" width="0.1088%" height="15" fill="rgb(230,116,27)"/><text x="47.3914%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (936,482 samples, 0.25%)</title><rect x="47.0433%" y="117" width="0.2457%" height="15" fill="rgb(228,99,48)"/><text x="47.2933%" y="127.50"></text></g><g><title>specialization_graph_of (717,448 samples, 0.19%)</title><rect x="47.3440%" y="117" width="0.1882%" height="15" fill="rgb(253,11,6)"/><text x="47.5940%" y="127.50"></text></g><g><title>resolve_instance (2,133,724 samples, 0.56%)</title><rect x="46.9943%" y="133" width="0.5599%" height="15" fill="rgb(247,143,39)"/><text x="47.2443%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (4,850,803 samples, 1.27%)</title><rect x="46.3347%" y="149" width="1.2728%" height="15" fill="rgb(236,97,10)"/><text x="46.5847%" y="159.50"></text></g><g><title>monomorphization_collector (4,897,774 samples, 1.29%)</title><rect x="46.3341%" y="165" width="1.2851%" height="15" fill="rgb(233,208,19)"/><text x="46.5841%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (414,215 samples, 0.11%)</title><rect x="47.6203%" y="149" width="0.1087%" height="15" fill="rgb(216,164,2)"/><text x="47.8703%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (5,465,440 samples, 1.43%)</title><rect x="46.3257%" y="181" width="1.4341%" height="15" fill="rgb(220,129,5)"/><text x="46.5757%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (535,766 samples, 0.14%)</title><rect x="47.6192%" y="165" width="0.1406%" height="15" fill="rgb(242,17,10)"/><text x="47.8692%" y="175.50"></text></g><g><title>codegen_crate (11,961,181 samples, 3.14%)</title><rect x="44.6253%" y="197" width="3.1385%" height="15" fill="rgb(242,107,0)"/><text x="44.8753%" y="207.50">cod..</text></g><g><title>codegen_module_optimize (47,689,550 samples, 12.51%)</title><rect x="47.7638%" y="197" width="12.5131%" height="15" fill="rgb(251,28,31)"/><text x="48.0138%" y="207.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (44,252,374 samples, 11.61%)</title><rect x="48.6656%" y="181" width="11.6112%" height="15" fill="rgb(233,223,10)"/><text x="48.9156%" y="191.50">LLVM_module_optim..</text></g><g><title>LLVM_lto_optimize (17,002,746 samples, 4.46%)</title><rect x="60.7955%" y="181" width="4.4613%" height="15" fill="rgb(215,21,27)"/><text x="61.0455%" y="191.50">LLVM_..</text></g><g><title>LLVM_module_codegen (24,851,873 samples, 6.52%)</title><rect x="65.2567%" y="181" width="6.5208%" height="15" fill="rgb(232,23,21)"/><text x="65.5067%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (24,417,959 samples, 6.41%)</title><rect x="65.3706%" y="165" width="6.4069%" height="15" fill="rgb(244,5,23)"/><text x="65.6206%" y="175.50">LLVM_mod..</text></g><g><title>LLVM_thin_lto_import (714,748 samples, 0.19%)</title><rect x="71.7775%" y="181" width="0.1875%" height="15" fill="rgb(226,81,46)"/><text x="72.0275%" y="191.50"></text></g><g><title>codegen_module_perform_lto (44,648,229 samples, 11.72%)</title><rect x="60.2769%" y="197" width="11.7151%" height="15" fill="rgb(247,70,30)"/><text x="60.5269%" y="207.50">codegen_module_pe..</text></g><g><title>macro_expand_crate (23,004,261 samples, 6.04%)</title><rect x="72.1679%" y="181" width="6.0360%" height="15" fill="rgb(212,68,19)"/><text x="72.4179%" y="191.50">macro_ex..</text></g><g><title>expand_crate (22,979,681 samples, 6.03%)</title><rect x="72.1744%" y="165" width="6.0296%" height="15" fill="rgb(240,187,13)"/><text x="72.4244%" y="175.50">expand_c..</text></g><g><title>late_resolve_crate (3,244,236 samples, 0.85%)</title><rect x="78.3319%" y="165" width="0.8512%" height="15" fill="rgb(223,113,26)"/><text x="78.5819%" y="175.50"></text></g><g><title>configure_and_expand (27,522,511 samples, 7.22%)</title><rect x="71.9919%" y="197" width="7.2215%" height="15" fill="rgb(206,192,2)"/><text x="72.2419%" y="207.50">configure_..</text></g><g><title>resolve_crate (3,629,050 samples, 0.95%)</title><rect x="78.2613%" y="181" width="0.9522%" height="15" fill="rgb(241,108,4)"/><text x="78.5113%" y="191.50"></text></g><g><title>early_lint_checks (417,195 samples, 0.11%)</title><rect x="79.2709%" y="197" width="0.1095%" height="15" fill="rgb(247,173,49)"/><text x="79.5209%" y="207.50"></text></g><g><title>free_global_ctxt (3,286,986 samples, 0.86%)</title><rect x="79.3803%" y="197" width="0.8625%" height="15" fill="rgb(224,114,35)"/><text x="79.6303%" y="207.50"></text></g><g><title>is_sized_raw (781,639 samples, 0.21%)</title><rect x="82.0488%" y="149" width="0.2051%" height="15" fill="rgb(245,159,27)"/><text x="82.2988%" y="159.50"></text></g><g><title>evaluate_obligation (611,806 samples, 0.16%)</title><rect x="82.0934%" y="133" width="0.1605%" height="15" fill="rgb(245,172,44)"/><text x="82.3434%" y="143.50"></text></g><g><title>layout_of (1,311,555 samples, 0.34%)</title><rect x="81.9276%" y="165" width="0.3441%" height="15" fill="rgb(236,23,11)"/><text x="82.1776%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,942,775 samples, 0.77%)</title><rect x="82.2717%" y="165" width="0.7721%" height="15" fill="rgb(205,117,38)"/><text x="82.5217%" y="175.50"></text></g><g><title>optimized_mir (7,651,400 samples, 2.01%)</title><rect x="81.0609%" y="181" width="2.0076%" height="15" fill="rgb(237,72,25)"/><text x="81.3109%" y="191.50">o..</text></g><g><title>generate_crate_metadata (10,888,670 samples, 2.86%)</title><rect x="80.2428%" y="197" width="2.8570%" height="15" fill="rgb(244,70,9)"/><text x="80.4928%" y="207.50">ge..</text></g><g><title>hir_lowering (3,701,380 samples, 0.97%)</title><rect x="83.0998%" y="197" width="0.9712%" height="15" fill="rgb(217,125,39)"/><text x="83.3498%" y="207.50"></text></g><g><title>finish_ongoing_codegen (54,365,285 samples, 14.26%)</title><rect x="84.0766%" y="181" width="14.2647%" height="15" fill="rgb(235,36,10)"/><text x="84.3266%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,148,092 samples, 0.30%)</title><rect x="98.3413%" y="181" width="0.3012%" height="15" fill="rgb(251,123,47)"/><text x="98.5913%" y="191.50"></text></g><g><title>link_binary (1,123,822 samples, 0.29%)</title><rect x="98.3477%" y="165" width="0.2949%" height="15" fill="rgb(221,13,13)"/><text x="98.5977%" y="175.50"></text></g><g><title>link_rlib (756,038 samples, 0.20%)</title><rect x="98.4442%" y="149" width="0.1984%" height="15" fill="rgb(238,131,9)"/><text x="98.6942%" y="159.50"></text></g><g><title>link (55,544,988 samples, 14.57%)</title><rect x="84.0710%" y="197" width="14.5742%" height="15" fill="rgb(211,50,8)"/><text x="84.3210%" y="207.50">link</text></g><g><title>parse_crate (2,479,247 samples, 0.65%)</title><rect x="98.6453%" y="197" width="0.6505%" height="15" fill="rgb(245,182,24)"/><text x="98.8953%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,035,713 samples, 0.53%)</title><rect x="99.3445%" y="197" width="0.5341%" height="15" fill="rgb(242,14,37)"/><text x="99.5945%" y="207.50"></text></g><g><title>all (381,117,392 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (381,117,392 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>