<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (86,947,405 samples, 12.24%)</title><rect x="0.1055%" y="165" width="12.2377%" height="15" fill="rgb(227,0,7)"/><text x="0.3555%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,280,624 samples, 0.18%)</title><rect x="12.1629%" y="149" width="0.1802%" height="15" fill="rgb(217,0,24)"/><text x="12.4129%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,253,834 samples, 0.18%)</title><rect x="12.1667%" y="133" width="0.1765%" height="15" fill="rgb(221,193,54)"/><text x="12.4167%" y="143.50"></text></g><g><title>needs_drop_raw (791,807 samples, 0.11%)</title><rect x="15.2575%" y="53" width="0.1114%" height="15" fill="rgb(248,212,6)"/><text x="15.5075%" y="63.50"></text></g><g><title>specialization_graph_of (903,610 samples, 0.13%)</title><rect x="15.4785%" y="37" width="0.1272%" height="15" fill="rgb(208,68,35)"/><text x="15.7285%" y="47.50"></text></g><g><title>resolve_instance (1,719,086 samples, 0.24%)</title><rect x="15.3725%" y="53" width="0.2420%" height="15" fill="rgb(232,128,0)"/><text x="15.6225%" y="63.50"></text></g><g><title>thir_body (1,345,108 samples, 0.19%)</title><rect x="15.6201%" y="53" width="0.1893%" height="15" fill="rgb(207,160,47)"/><text x="15.8701%" y="63.50"></text></g><g><title>mir_const (9,486,918 samples, 1.34%)</title><rect x="14.4798%" y="101" width="1.3353%" height="15" fill="rgb(228,23,34)"/><text x="14.7298%" y="111.50"></text></g><g><title>unsafety_check_result (8,400,215 samples, 1.18%)</title><rect x="14.6328%" y="85" width="1.1823%" height="15" fill="rgb(218,30,26)"/><text x="14.8828%" y="95.50"></text></g><g><title>mir_built (7,750,856 samples, 1.09%)</title><rect x="14.7242%" y="69" width="1.0909%" height="15" fill="rgb(220,122,19)"/><text x="14.9742%" y="79.50"></text></g><g><title>mir_promoted (10,474,698 samples, 1.47%)</title><rect x="14.3497%" y="117" width="1.4743%" height="15" fill="rgb(250,228,42)"/><text x="14.5997%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,120,612 samples, 0.30%)</title><rect x="15.8932%" y="117" width="0.2985%" height="15" fill="rgb(240,193,28)"/><text x="16.1432%" y="127.50"></text></g><g><title>MIR_borrow_checking (26,945,436 samples, 3.79%)</title><rect x="12.4015%" y="149" width="3.7925%" height="15" fill="rgb(216,20,37)"/><text x="12.6515%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (26,764,925 samples, 3.77%)</title><rect x="12.4269%" y="133" width="3.7671%" height="15" fill="rgb(206,188,39)"/><text x="12.6769%" y="143.50">mir_..</text></g><g><title>check_mod_attrs (731,228 samples, 0.10%)</title><rect x="16.2329%" y="133" width="0.1029%" height="15" fill="rgb(217,207,13)"/><text x="16.4829%" y="143.50"></text></g><g><title>misc_checking_1 (1,505,297 samples, 0.21%)</title><rect x="16.2307%" y="149" width="0.2119%" height="15" fill="rgb(231,73,38)"/><text x="16.4807%" y="159.50"></text></g><g><title>misc_checking_2 (1,081,062 samples, 0.15%)</title><rect x="16.4426%" y="149" width="0.1522%" height="15" fill="rgb(225,20,46)"/><text x="16.6926%" y="159.50"></text></g><g><title>match_checking (797,579 samples, 0.11%)</title><rect x="16.4825%" y="133" width="0.1123%" height="15" fill="rgb(210,31,41)"/><text x="16.7325%" y="143.50"></text></g><g><title>check_match (755,088 samples, 0.11%)</title><rect x="16.4884%" y="117" width="0.1063%" height="15" fill="rgb(221,200,47)"/><text x="16.7384%" y="127.50"></text></g><g><title>crate_lints (2,095,414 samples, 0.29%)</title><rect x="16.7339%" y="117" width="0.2949%" height="15" fill="rgb(226,26,5)"/><text x="16.9839%" y="127.50"></text></g><g><title>type_of (1,117,636 samples, 0.16%)</title><rect x="16.8716%" y="101" width="0.1573%" height="15" fill="rgb(249,33,26)"/><text x="17.1216%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (880,882 samples, 0.12%)</title><rect x="16.9049%" y="85" width="0.1240%" height="15" fill="rgb(235,183,28)"/><text x="17.1549%" y="95.50"></text></g><g><title>lint_checking (2,629,290 samples, 0.37%)</title><rect x="16.7337%" y="133" width="0.3701%" height="15" fill="rgb(221,5,38)"/><text x="16.9837%" y="143.50"></text></g><g><title>privacy_checking_modules (1,099,932 samples, 0.15%)</title><rect x="17.1646%" y="133" width="0.1548%" height="15" fill="rgb(247,18,42)"/><text x="17.4146%" y="143.50"></text></g><g><title>check_mod_privacy (1,097,492 samples, 0.15%)</title><rect x="17.1649%" y="117" width="0.1545%" height="15" fill="rgb(241,131,45)"/><text x="17.4149%" y="127.50"></text></g><g><title>misc_checking_3 (5,162,178 samples, 0.73%)</title><rect x="16.5947%" y="149" width="0.7266%" height="15" fill="rgb(249,31,29)"/><text x="16.8447%" y="159.50"></text></g><g><title>impl_parent (2,687,363 samples, 0.38%)</title><rect x="18.1110%" y="85" width="0.3782%" height="15" fill="rgb(225,111,53)"/><text x="18.3610%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,564,904 samples, 0.22%)</title><rect x="18.2690%" y="69" width="0.2203%" height="15" fill="rgb(238,160,17)"/><text x="18.5190%" y="79.50"></text></g><g><title>impl_trait_ref (5,674,050 samples, 0.80%)</title><rect x="18.4892%" y="85" width="0.7986%" height="15" fill="rgb(214,148,48)"/><text x="18.7392%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,561,149 samples, 0.64%)</title><rect x="18.6459%" y="69" width="0.6420%" height="15" fill="rgb(232,36,49)"/><text x="18.8959%" y="79.50"></text></g><g><title>coherent_trait (14,813,469 samples, 2.08%)</title><rect x="17.3360%" y="117" width="2.0850%" height="15" fill="rgb(209,103,24)"/><text x="17.5860%" y="127.50">c..</text></g><g><title>specialization_graph_of (14,031,140 samples, 1.97%)</title><rect x="17.4461%" y="101" width="1.9749%" height="15" fill="rgb(229,88,8)"/><text x="17.6961%" y="111.50">s..</text></g><g><title>trait_impls_of (943,749 samples, 0.13%)</title><rect x="19.2881%" y="85" width="0.1328%" height="15" fill="rgb(213,181,19)"/><text x="19.5381%" y="95.50"></text></g><g><title>coherence_checking (14,950,351 samples, 2.10%)</title><rect x="17.3322%" y="133" width="2.1042%" height="15" fill="rgb(254,191,54)"/><text x="17.5822%" y="143.50">c..</text></g><g><title>evaluate_obligation (1,639,361 samples, 0.23%)</title><rect x="23.0379%" y="85" width="0.2307%" height="15" fill="rgb(241,83,37)"/><text x="23.2879%" y="95.50"></text></g><g><title>item_bodies_checking (28,297,721 samples, 3.98%)</title><rect x="19.4449%" y="133" width="3.9829%" height="15" fill="rgb(233,36,39)"/><text x="19.6949%" y="143.50">item..</text></g><g><title>typeck_item_bodies (28,294,571 samples, 3.98%)</title><rect x="19.4454%" y="117" width="3.9824%" height="15" fill="rgb(226,3,54)"/><text x="19.6954%" y="127.50">type..</text></g><g><title>typeck (28,166,271 samples, 3.96%)</title><rect x="19.4634%" y="101" width="3.9644%" height="15" fill="rgb(245,192,40)"/><text x="19.7134%" y="111.50">type..</text></g><g><title>item_types_checking (1,793,600 samples, 0.25%)</title><rect x="23.4278%" y="133" width="0.2524%" height="15" fill="rgb(238,167,29)"/><text x="23.6778%" y="143.50"></text></g><g><title>check_mod_item_types (1,790,210 samples, 0.25%)</title><rect x="23.4283%" y="117" width="0.2520%" height="15" fill="rgb(232,182,51)"/><text x="23.6783%" y="127.50"></text></g><g><title>explicit_predicates_of (1,107,732 samples, 0.16%)</title><rect x="23.9097%" y="69" width="0.1559%" height="15" fill="rgb(231,60,39)"/><text x="24.1597%" y="79.50"></text></g><g><title>predicates_of (1,646,337 samples, 0.23%)</title><rect x="23.8752%" y="101" width="0.2317%" height="15" fill="rgb(208,69,12)"/><text x="24.1252%" y="111.50"></text></g><g><title>predicates_defined_on (1,553,827 samples, 0.22%)</title><rect x="23.8883%" y="85" width="0.2187%" height="15" fill="rgb(235,93,37)"/><text x="24.1383%" y="95.50"></text></g><g><title>type_collecting (3,218,286 samples, 0.45%)</title><rect x="23.6805%" y="133" width="0.4530%" height="15" fill="rgb(213,116,39)"/><text x="23.9305%" y="143.50"></text></g><g><title>collect_mod_item_types (3,211,236 samples, 0.45%)</title><rect x="23.6815%" y="117" width="0.4520%" height="15" fill="rgb(222,207,29)"/><text x="23.9315%" y="127.50"></text></g><g><title>evaluate_obligation (1,263,336 samples, 0.18%)</title><rect x="24.6858%" y="101" width="0.1778%" height="15" fill="rgb(206,96,30)"/><text x="24.9358%" y="111.50"></text></g><g><title>check_impl_item_well_formed (6,768,302 samples, 0.95%)</title><rect x="24.1830%" y="117" width="0.9526%" height="15" fill="rgb(218,138,4)"/><text x="24.4330%" y="127.50"></text></g><g><title>analysis (95,818,566 samples, 13.49%)</title><rect x="12.3432%" y="165" width="13.4863%" height="15" fill="rgb(250,191,14)"/><text x="12.5932%" y="175.50">analysis</text></g><g><title>type_check_crate (60,449,465 samples, 8.51%)</title><rect x="17.3213%" y="149" width="8.5082%" height="15" fill="rgb(239,60,40)"/><text x="17.5713%" y="159.50">type_check_c..</text></g><g><title>wf_checking (12,043,166 samples, 1.70%)</title><rect x="24.1344%" y="133" width="1.6951%" height="15" fill="rgb(206,27,48)"/><text x="24.3844%" y="143.50"></text></g><g><title>check_item_well_formed (4,929,221 samples, 0.69%)</title><rect x="25.1357%" y="117" width="0.6938%" height="15" fill="rgb(225,35,8)"/><text x="25.3857%" y="127.50"></text></g><g><title>is_freeze_raw (853,075 samples, 0.12%)</title><rect x="28.6249%" y="117" width="0.1201%" height="15" fill="rgb(250,213,24)"/><text x="28.8749%" y="127.50"></text></g><g><title>evaluate_obligation (745,674 samples, 0.10%)</title><rect x="28.6401%" y="101" width="0.1050%" height="15" fill="rgb(247,123,22)"/><text x="28.8901%" y="111.50"></text></g><g><title>layout_of (1,040,561 samples, 0.15%)</title><rect x="28.8119%" y="117" width="0.1465%" height="15" fill="rgb(231,138,38)"/><text x="29.0619%" y="127.50"></text></g><g><title>predicates_of (873,012 samples, 0.12%)</title><rect x="29.1337%" y="101" width="0.1229%" height="15" fill="rgb(231,145,46)"/><text x="29.3837%" y="111.50"></text></g><g><title>param_env (2,124,704 samples, 0.30%)</title><rect x="28.9583%" y="117" width="0.2990%" height="15" fill="rgb(251,118,11)"/><text x="29.2083%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,770,507 samples, 0.95%)</title><rect x="28.3283%" y="133" width="0.9529%" height="15" fill="rgb(217,147,25)"/><text x="28.5783%" y="143.50"></text></g><g><title>codegen_module (24,036,351 samples, 3.38%)</title><rect x="26.0632%" y="149" width="3.3831%" height="15" fill="rgb(247,81,37)"/><text x="26.3132%" y="159.50">cod..</text></g><g><title>item_attrs (1,041,569 samples, 0.15%)</title><rect x="29.6124%" y="85" width="0.1466%" height="15" fill="rgb(209,12,38)"/><text x="29.8624%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,014,609 samples, 0.14%)</title><rect x="29.6162%" y="69" width="0.1428%" height="15" fill="rgb(227,1,9)"/><text x="29.8662%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,453,918 samples, 0.20%)</title><rect x="29.5869%" y="101" width="0.2046%" height="15" fill="rgb(248,47,43)"/><text x="29.8369%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (919,080 samples, 0.13%)</title><rect x="30.0068%" y="85" width="0.1294%" height="15" fill="rgb(221,10,30)"/><text x="30.2568%" y="95.50"></text></g><g><title>optimized_mir (2,843,514 samples, 0.40%)</title><rect x="29.8544%" y="101" width="0.4002%" height="15" fill="rgb(210,229,1)"/><text x="30.1044%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (841,660 samples, 0.12%)</title><rect x="30.1361%" y="85" width="0.1185%" height="15" fill="rgb(222,148,37)"/><text x="30.3861%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,423,284 samples, 0.20%)</title><rect x="30.3273%" y="85" width="0.2003%" height="15" fill="rgb(234,67,33)"/><text x="30.5773%" y="95.50"></text></g><g><title>impl_trait_ref (1,322,486 samples, 0.19%)</title><rect x="30.7588%" y="69" width="0.1861%" height="15" fill="rgb(247,98,35)"/><text x="31.0088%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,203,455 samples, 0.17%)</title><rect x="30.7756%" y="53" width="0.1694%" height="15" fill="rgb(247,138,52)"/><text x="31.0256%" y="63.50"></text></g><g><title>specialization_graph_of (2,461,630 samples, 0.35%)</title><rect x="30.5986%" y="85" width="0.3465%" height="15" fill="rgb(213,79,30)"/><text x="30.8486%" y="95.50"></text></g><g><title>resolve_instance (5,162,150 samples, 0.73%)</title><rect x="30.2546%" y="101" width="0.7266%" height="15" fill="rgb(246,177,23)"/><text x="30.5046%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (11,565,432 samples, 1.63%)</title><rect x="29.4517%" y="117" width="1.6278%" height="15" fill="rgb(230,62,27)"/><text x="29.7017%" y="127.50"></text></g><g><title>monomorphization_collector (11,627,982 samples, 1.64%)</title><rect x="29.4514%" y="133" width="1.6366%" height="15" fill="rgb(216,154,8)"/><text x="29.7014%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (921,581 samples, 0.13%)</title><rect x="31.0886%" y="117" width="0.1297%" height="15" fill="rgb(244,35,45)"/><text x="31.3386%" y="127.50"></text></g><g><title>symbol_name (833,540 samples, 0.12%)</title><rect x="31.1010%" y="101" width="0.1173%" height="15" fill="rgb(251,115,12)"/><text x="31.3510%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (12,997,828 samples, 1.83%)</title><rect x="29.4472%" y="149" width="1.8294%" height="15" fill="rgb(240,54,50)"/><text x="29.6972%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,339,755 samples, 0.19%)</title><rect x="31.0880%" y="133" width="0.1886%" height="15" fill="rgb(233,84,52)"/><text x="31.3380%" y="143.50"></text></g><g><title>codegen_crate (38,752,459 samples, 5.45%)</title><rect x="25.8312%" y="165" width="5.4543%" height="15" fill="rgb(207,117,47)"/><text x="26.0812%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (145,909,103 samples, 20.54%)</title><rect x="31.2855%" y="165" width="20.5364%" height="15" fill="rgb(249,43,39)"/><text x="31.5355%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (124,567,560 samples, 17.53%)</title><rect x="34.2893%" y="149" width="17.5327%" height="15" fill="rgb(209,38,44)"/><text x="34.5393%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (81,433,565 samples, 11.46%)</title><rect x="53.1836%" y="149" width="11.4616%" height="15" fill="rgb(236,212,23)"/><text x="53.4336%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (125,786,689 samples, 17.70%)</title><rect x="64.6452%" y="149" width="17.7042%" height="15" fill="rgb(242,79,21)"/><text x="64.8952%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (123,893,455 samples, 17.44%)</title><rect x="64.9117%" y="133" width="17.4378%" height="15" fill="rgb(211,96,35)"/><text x="65.1617%" y="143.50">LLVM_module_codegen_emit_obj</text></g><g><title>LLVM_thin_lto_import (8,656,107 samples, 1.22%)</title><rect x="82.3495%" y="149" width="1.2183%" height="15" fill="rgb(253,215,40)"/><text x="82.5995%" y="159.50"></text></g><g><title>codegen_module_perform_lto (226,241,277 samples, 31.84%)</title><rect x="51.8219%" y="165" width="31.8430%" height="15" fill="rgb(211,81,21)"/><text x="52.0719%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,808,372 samples, 0.40%)</title><rect x="86.5272%" y="117" width="0.3953%" height="15" fill="rgb(208,190,38)"/><text x="86.7772%" y="127.50"></text></g><g><title>metadata_register_crate (1,016,341 samples, 0.14%)</title><rect x="86.7794%" y="101" width="0.1430%" height="15" fill="rgb(235,213,38)"/><text x="87.0294%" y="111.50"></text></g><g><title>macro_expand_crate (22,424,144 samples, 3.16%)</title><rect x="83.7705%" y="149" width="3.1562%" height="15" fill="rgb(237,122,38)"/><text x="84.0205%" y="159.50">mac..</text></g><g><title>expand_crate (22,407,684 samples, 3.15%)</title><rect x="83.7728%" y="133" width="3.1538%" height="15" fill="rgb(244,218,35)"/><text x="84.0228%" y="143.50">exp..</text></g><g><title>late_resolve_crate (4,142,427 samples, 0.58%)</title><rect x="87.0337%" y="133" width="0.5830%" height="15" fill="rgb(240,68,47)"/><text x="87.2837%" y="143.50"></text></g><g><title>configure_and_expand (28,304,110 samples, 3.98%)</title><rect x="83.6650%" y="165" width="3.9838%" height="15" fill="rgb(210,16,53)"/><text x="83.9150%" y="175.50">conf..</text></g><g><title>resolve_crate (4,923,776 samples, 0.69%)</title><rect x="86.9557%" y="149" width="0.6930%" height="15" fill="rgb(235,124,12)"/><text x="87.2057%" y="159.50"></text></g><g><title>free_global_ctxt (7,076,350 samples, 1.00%)</title><rect x="87.7511%" y="165" width="0.9960%" height="15" fill="rgb(224,169,11)"/><text x="88.0011%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,534,859 samples, 0.50%)</title><rect x="89.6793%" y="133" width="0.4975%" height="15" fill="rgb(250,166,2)"/><text x="89.9293%" y="143.50"></text></g><g><title>optimized_mir (7,522,077 samples, 1.06%)</title><rect x="89.1203%" y="149" width="1.0587%" height="15" fill="rgb(242,216,29)"/><text x="89.3703%" y="159.50"></text></g><g><title>generate_crate_metadata (10,255,747 samples, 1.44%)</title><rect x="88.7471%" y="165" width="1.4435%" height="15" fill="rgb(230,116,27)"/><text x="88.9971%" y="175.50"></text></g><g><title>hir_lowering (4,195,997 samples, 0.59%)</title><rect x="90.1906%" y="165" width="0.5906%" height="15" fill="rgb(228,99,48)"/><text x="90.4406%" y="175.50"></text></g><g><title>finish_ongoing_codegen (57,490,012 samples, 8.09%)</title><rect x="90.7835%" y="149" width="8.0916%" height="15" fill="rgb(253,11,6)"/><text x="91.0335%" y="159.50">finish_ongo..</text></g><g><title>link_crate (1,373,116 samples, 0.19%)</title><rect x="98.8751%" y="149" width="0.1933%" height="15" fill="rgb(247,143,39)"/><text x="99.1251%" y="159.50"></text></g><g><title>link_binary (1,342,915 samples, 0.19%)</title><rect x="98.8794%" y="133" width="0.1890%" height="15" fill="rgb(236,97,10)"/><text x="99.1294%" y="143.50"></text></g><g><title>link_rlib (806,959 samples, 0.11%)</title><rect x="98.9548%" y="117" width="0.1136%" height="15" fill="rgb(233,208,19)"/><text x="99.2048%" y="127.50"></text></g><g><title>link (58,892,878 samples, 8.29%)</title><rect x="90.7812%" y="165" width="8.2891%" height="15" fill="rgb(216,164,2)"/><text x="91.0312%" y="175.50">link</text></g><g><title>parse_crate (4,146,497 samples, 0.58%)</title><rect x="99.0703%" y="165" width="0.5836%" height="15" fill="rgb(220,129,5)"/><text x="99.3203%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,865,311 samples, 0.26%)</title><rect x="99.6812%" y="165" width="0.2625%" height="15" fill="rgb(242,17,10)"/><text x="99.9312%" y="175.50"></text></g><g><title>all (710,488,734 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (710,488,734 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>