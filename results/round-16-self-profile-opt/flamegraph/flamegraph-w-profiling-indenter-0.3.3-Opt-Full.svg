<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (21,719,986 samples, 16.73%)</title><rect x="0.5701%" y="197" width="16.7322%" height="15" fill="rgb(227,0,7)"/><text x="0.8201%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (298,224 samples, 0.23%)</title><rect x="17.0725%" y="181" width="0.2297%" height="15" fill="rgb(217,0,24)"/><text x="17.3225%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (284,083 samples, 0.22%)</title><rect x="17.0834%" y="165" width="0.2188%" height="15" fill="rgb(221,193,54)"/><text x="17.3334%" y="175.50"></text></g><g><title>adt_drop_tys (176,722 samples, 0.14%)</title><rect x="20.3606%" y="69" width="0.1361%" height="15" fill="rgb(248,212,6)"/><text x="20.6106%" y="79.50"></text></g><g><title>is_copy_raw (385,883 samples, 0.30%)</title><rect x="20.4968%" y="69" width="0.2973%" height="15" fill="rgb(208,68,35)"/><text x="20.7468%" y="79.50"></text></g><g><title>evaluate_obligation (345,683 samples, 0.27%)</title><rect x="20.5277%" y="53" width="0.2663%" height="15" fill="rgb(232,128,0)"/><text x="20.7777%" y="63.50"></text></g><g><title>needs_drop_raw (621,285 samples, 0.48%)</title><rect x="20.3288%" y="85" width="0.4786%" height="15" fill="rgb(207,160,47)"/><text x="20.5788%" y="95.50"></text></g><g><title>specialization_graph_of (400,775 samples, 0.31%)</title><rect x="20.8952%" y="69" width="0.3087%" height="15" fill="rgb(228,23,34)"/><text x="21.1452%" y="79.50"></text></g><g><title>impl_trait_ref (232,470 samples, 0.18%)</title><rect x="21.0248%" y="53" width="0.1791%" height="15" fill="rgb(218,30,26)"/><text x="21.2748%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (209,680 samples, 0.16%)</title><rect x="21.0424%" y="37" width="0.1615%" height="15" fill="rgb(220,122,19)"/><text x="21.2924%" y="47.50"></text></g><g><title>resolve_instance (524,016 samples, 0.40%)</title><rect x="20.8074%" y="85" width="0.4037%" height="15" fill="rgb(250,228,42)"/><text x="21.0574%" y="95.50"></text></g><g><title>thir_body (174,034 samples, 0.13%)</title><rect x="21.2142%" y="85" width="0.1341%" height="15" fill="rgb(240,193,28)"/><text x="21.4642%" y="95.50"></text></g><g><title>mir_const (2,318,326 samples, 1.79%)</title><rect x="19.5670%" y="133" width="1.7859%" height="15" fill="rgb(216,20,37)"/><text x="19.8170%" y="143.50">m..</text></g><g><title>unsafety_check_result (2,126,884 samples, 1.64%)</title><rect x="19.7145%" y="117" width="1.6385%" height="15" fill="rgb(206,188,39)"/><text x="19.9645%" y="127.50"></text></g><g><title>mir_built (1,919,862 samples, 1.48%)</title><rect x="19.8740%" y="101" width="1.4790%" height="15" fill="rgb(217,207,13)"/><text x="20.1240%" y="111.50"></text></g><g><title>mir_promoted (2,524,107 samples, 1.94%)</title><rect x="19.4149%" y="149" width="1.9445%" height="15" fill="rgb(231,73,38)"/><text x="19.6649%" y="159.50">m..</text></g><g><title>type_op_normalize_fn_sig (226,134 samples, 0.17%)</title><rect x="21.4580%" y="149" width="0.1742%" height="15" fill="rgb(225,20,46)"/><text x="21.7080%" y="159.50"></text></g><g><title>normalize_projection_ty (156,942 samples, 0.12%)</title><rect x="21.5113%" y="133" width="0.1209%" height="15" fill="rgb(210,31,41)"/><text x="21.7613%" y="143.50"></text></g><g><title>type_op_prove_predicate (847,347 samples, 0.65%)</title><rect x="21.6518%" y="149" width="0.6528%" height="15" fill="rgb(221,200,47)"/><text x="21.9018%" y="159.50"></text></g><g><title>MIR_borrow_checking (6,305,941 samples, 4.86%)</title><rect x="17.4497%" y="181" width="4.8578%" height="15" fill="rgb(226,26,5)"/><text x="17.6997%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (6,293,871 samples, 4.85%)</title><rect x="17.4590%" y="165" width="4.8485%" height="15" fill="rgb(249,33,26)"/><text x="17.7090%" y="175.50">mir_bo..</text></g><g><title>codegen_fn_attrs (242,783 samples, 0.19%)</title><rect x="22.5214%" y="149" width="0.1870%" height="15" fill="rgb(235,183,28)"/><text x="22.7714%" y="159.50"></text></g><g><title>check_mod_attrs (376,975 samples, 0.29%)</title><rect x="22.4182%" y="165" width="0.2904%" height="15" fill="rgb(221,5,38)"/><text x="22.6682%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (222,342 samples, 0.17%)</title><rect x="22.7757%" y="165" width="0.1713%" height="15" fill="rgb(247,18,42)"/><text x="23.0257%" y="175.50"></text></g><g><title>misc_checking_1 (758,108 samples, 0.58%)</title><rect x="22.3994%" y="181" width="0.5840%" height="15" fill="rgb(241,131,45)"/><text x="22.6494%" y="191.50"></text></g><g><title>misc_checking_2 (248,372 samples, 0.19%)</title><rect x="22.9834%" y="181" width="0.1913%" height="15" fill="rgb(249,31,29)"/><text x="23.2334%" y="191.50"></text></g><g><title>death_checking (153,441 samples, 0.12%)</title><rect x="23.2174%" y="165" width="0.1182%" height="15" fill="rgb(225,111,53)"/><text x="23.4674%" y="175.50"></text></g><g><title>crate_lints (1,114,883 samples, 0.86%)</title><rect x="23.3367%" y="149" width="0.8589%" height="15" fill="rgb(238,160,17)"/><text x="23.5867%" y="159.50"></text></g><g><title>type_of (753,737 samples, 0.58%)</title><rect x="23.6149%" y="133" width="0.5806%" height="15" fill="rgb(214,148,48)"/><text x="23.8649%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (669,667 samples, 0.52%)</title><rect x="23.6797%" y="117" width="0.5159%" height="15" fill="rgb(232,36,49)"/><text x="23.9297%" y="127.50"></text></g><g><title>lint_checking (1,260,325 samples, 0.97%)</title><rect x="23.3356%" y="165" width="0.9709%" height="15" fill="rgb(209,103,24)"/><text x="23.5856%" y="175.50"></text></g><g><title>module_lints (144,072 samples, 0.11%)</title><rect x="24.1956%" y="149" width="0.1110%" height="15" fill="rgb(229,88,8)"/><text x="24.4456%" y="159.50"></text></g><g><title>lint_mod (142,001 samples, 0.11%)</title><rect x="24.1972%" y="133" width="0.1094%" height="15" fill="rgb(213,181,19)"/><text x="24.4472%" y="143.50"></text></g><g><title>privacy_checking_modules (212,282 samples, 0.16%)</title><rect x="24.3583%" y="165" width="0.1635%" height="15" fill="rgb(254,191,54)"/><text x="24.6083%" y="175.50"></text></g><g><title>check_mod_privacy (210,792 samples, 0.16%)</title><rect x="24.3594%" y="149" width="0.1624%" height="15" fill="rgb(241,83,37)"/><text x="24.6094%" y="159.50"></text></g><g><title>misc_checking_3 (1,756,820 samples, 1.35%)</title><rect x="23.1747%" y="181" width="1.3534%" height="15" fill="rgb(233,36,39)"/><text x="23.4247%" y="191.50"></text></g><g><title>coherence_checking (183,682 samples, 0.14%)</title><rect x="24.5498%" y="165" width="0.1415%" height="15" fill="rgb(226,3,54)"/><text x="24.7998%" y="175.50"></text></g><g><title>associated_item (168,241 samples, 0.13%)</title><rect x="29.9538%" y="101" width="0.1296%" height="15" fill="rgb(245,192,40)"/><text x="30.2038%" y="111.50"></text></g><g><title>associated_items (262,433 samples, 0.20%)</title><rect x="29.8909%" y="117" width="0.2022%" height="15" fill="rgb(238,167,29)"/><text x="30.1409%" y="127.50"></text></g><g><title>adt_dtorck_constraint (236,663 samples, 0.18%)</title><rect x="30.2439%" y="101" width="0.1823%" height="15" fill="rgb(232,182,51)"/><text x="30.4939%" y="111.50"></text></g><g><title>dropck_outlives (414,874 samples, 0.32%)</title><rect x="30.1401%" y="117" width="0.3196%" height="15" fill="rgb(231,60,39)"/><text x="30.3901%" y="127.50"></text></g><g><title>adt_sized_constraint (133,601 samples, 0.10%)</title><rect x="30.9861%" y="101" width="0.1029%" height="15" fill="rgb(208,69,12)"/><text x="31.2361%" y="111.50"></text></g><g><title>evaluate_obligation (1,312,774 samples, 1.01%)</title><rect x="30.4612%" y="117" width="1.0113%" height="15" fill="rgb(235,93,37)"/><text x="30.7112%" y="127.50"></text></g><g><title>trait_impls_of (262,472 samples, 0.20%)</title><rect x="31.2703%" y="101" width="0.2022%" height="15" fill="rgb(213,116,39)"/><text x="31.5203%" y="111.50"></text></g><g><title>method_autoderef_steps (158,222 samples, 0.12%)</title><rect x="31.8749%" y="117" width="0.1219%" height="15" fill="rgb(222,207,29)"/><text x="32.1249%" y="127.50"></text></g><g><title>explicit_predicates_of (299,703 samples, 0.23%)</title><rect x="32.1546%" y="85" width="0.2309%" height="15" fill="rgb(206,96,30)"/><text x="32.4046%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (276,122 samples, 0.21%)</title><rect x="32.1728%" y="69" width="0.2127%" height="15" fill="rgb(218,138,4)"/><text x="32.4228%" y="79.50"></text></g><g><title>predicates_of (523,294 samples, 0.40%)</title><rect x="32.0169%" y="117" width="0.4031%" height="15" fill="rgb(250,191,14)"/><text x="32.2669%" y="127.50"></text></g><g><title>predicates_defined_on (422,934 samples, 0.33%)</title><rect x="32.0942%" y="101" width="0.3258%" height="15" fill="rgb(239,60,40)"/><text x="32.3442%" y="111.50"></text></g><g><title>item_bodies_checking (10,194,736 samples, 7.85%)</title><rect x="24.7074%" y="165" width="7.8536%" height="15" fill="rgb(206,27,48)"/><text x="24.9574%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (10,191,545 samples, 7.85%)</title><rect x="24.7098%" y="149" width="7.8511%" height="15" fill="rgb(225,35,8)"/><text x="24.9598%" y="159.50">typeck_item..</text></g><g><title>typeck (10,175,985 samples, 7.84%)</title><rect x="24.7218%" y="133" width="7.8392%" height="15" fill="rgb(250,213,24)"/><text x="24.9718%" y="143.50">typeck</text></g><g><title>item_types_checking (265,123 samples, 0.20%)</title><rect x="32.5610%" y="165" width="0.2042%" height="15" fill="rgb(247,123,22)"/><text x="32.8110%" y="175.50"></text></g><g><title>check_mod_item_types (261,743 samples, 0.20%)</title><rect x="32.5636%" y="149" width="0.2016%" height="15" fill="rgb(231,138,38)"/><text x="32.8136%" y="159.50"></text></g><g><title>is_late_bound_map (173,932 samples, 0.13%)</title><rect x="32.9585%" y="117" width="0.1340%" height="15" fill="rgb(231,145,46)"/><text x="33.2085%" y="127.50"></text></g><g><title>resolve_lifetimes (155,332 samples, 0.12%)</title><rect x="32.9728%" y="101" width="0.1197%" height="15" fill="rgb(251,118,11)"/><text x="33.2228%" y="111.50"></text></g><g><title>generics_of (261,734 samples, 0.20%)</title><rect x="32.9084%" y="133" width="0.2016%" height="15" fill="rgb(217,147,25)"/><text x="33.1584%" y="143.50"></text></g><g><title>predicates_of (819,389 samples, 0.63%)</title><rect x="33.1128%" y="133" width="0.6312%" height="15" fill="rgb(247,81,37)"/><text x="33.3628%" y="143.50"></text></g><g><title>predicates_defined_on (798,488 samples, 0.62%)</title><rect x="33.1289%" y="117" width="0.6151%" height="15" fill="rgb(209,12,38)"/><text x="33.3789%" y="127.50"></text></g><g><title>inferred_outlives_of (698,217 samples, 0.54%)</title><rect x="33.2061%" y="101" width="0.5379%" height="15" fill="rgb(227,1,9)"/><text x="33.4561%" y="111.50"></text></g><g><title>inferred_outlives_crate (682,327 samples, 0.53%)</title><rect x="33.2184%" y="85" width="0.5256%" height="15" fill="rgb(248,47,43)"/><text x="33.4684%" y="95.50"></text></g><g><title>type_of (504,845 samples, 0.39%)</title><rect x="33.3551%" y="69" width="0.3889%" height="15" fill="rgb(221,10,30)"/><text x="33.6051%" y="79.50"></text></g><g><title>type_of (428,035 samples, 0.33%)</title><rect x="33.4143%" y="53" width="0.3297%" height="15" fill="rgb(210,229,1)"/><text x="33.6643%" y="63.50"></text></g><g><title>type_collecting (1,353,286 samples, 1.04%)</title><rect x="32.7660%" y="165" width="1.0425%" height="15" fill="rgb(222,148,37)"/><text x="33.0160%" y="175.50"></text></g><g><title>collect_mod_item_types (1,344,336 samples, 1.04%)</title><rect x="32.7729%" y="149" width="1.0356%" height="15" fill="rgb(234,67,33)"/><text x="33.0229%" y="159.50"></text></g><g><title>evaluate_obligation (165,563 samples, 0.13%)</title><rect x="34.1739%" y="133" width="0.1275%" height="15" fill="rgb(247,98,35)"/><text x="34.4239%" y="143.50"></text></g><g><title>check_impl_item_well_formed (830,690 samples, 0.64%)</title><rect x="33.8592%" y="149" width="0.6399%" height="15" fill="rgb(247,138,52)"/><text x="34.1092%" y="159.50"></text></g><g><title>evaluate_obligation (151,021 samples, 0.12%)</title><rect x="34.9228%" y="133" width="0.1163%" height="15" fill="rgb(213,79,30)"/><text x="35.1728%" y="143.50"></text></g><g><title>evaluate_obligation (211,623 samples, 0.16%)</title><rect x="35.2337%" y="117" width="0.1630%" height="15" fill="rgb(246,177,23)"/><text x="35.4837%" y="127.50"></text></g><g><title>layout_of (205,621 samples, 0.16%)</title><rect x="35.4382%" y="117" width="0.1584%" height="15" fill="rgb(230,62,27)"/><text x="35.6882%" y="127.50"></text></g><g><title>object_safety_violations (766,169 samples, 0.59%)</title><rect x="35.0944%" y="133" width="0.5902%" height="15" fill="rgb(216,154,8)"/><text x="35.3444%" y="143.50"></text></g><g><title>param_env (144,411 samples, 0.11%)</title><rect x="35.6846%" y="133" width="0.1112%" height="15" fill="rgb(244,35,45)"/><text x="35.9346%" y="143.50"></text></g><g><title>analysis (24,086,393 samples, 18.56%)</title><rect x="17.3023%" y="197" width="18.5552%" height="15" fill="rgb(251,115,12)"/><text x="17.5523%" y="207.50">analysis</text></g><g><title>type_check_crate (14,706,527 samples, 11.33%)</title><rect x="24.5281%" y="181" width="11.3293%" height="15" fill="rgb(240,54,50)"/><text x="24.7781%" y="191.50">type_check_crate</text></g><g><title>wf_checking (2,659,000 samples, 2.05%)</title><rect x="33.8090%" y="165" width="2.0484%" height="15" fill="rgb(233,84,52)"/><text x="34.0590%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,763,170 samples, 1.36%)</title><rect x="34.4992%" y="149" width="1.3583%" height="15" fill="rgb(207,117,47)"/><text x="34.7492%" y="159.50"></text></g><g><title>codegen_fn_attrs (136,521 samples, 0.11%)</title><rect x="37.9804%" y="149" width="0.1052%" height="15" fill="rgb(249,43,39)"/><text x="38.2304%" y="159.50"></text></g><g><title>is_unpin_raw (191,662 samples, 0.15%)</title><rect x="38.1717%" y="149" width="0.1476%" height="15" fill="rgb(209,38,44)"/><text x="38.4217%" y="159.50"></text></g><g><title>evaluate_obligation (171,722 samples, 0.13%)</title><rect x="38.1871%" y="133" width="0.1323%" height="15" fill="rgb(236,212,23)"/><text x="38.4371%" y="143.50"></text></g><g><title>param_env (140,512 samples, 0.11%)</title><rect x="38.4117%" y="149" width="0.1082%" height="15" fill="rgb(242,79,21)"/><text x="38.6617%" y="159.50"></text></g><g><title>fn_abi_of_instance (955,720 samples, 0.74%)</title><rect x="37.8397%" y="165" width="0.7362%" height="15" fill="rgb(211,96,35)"/><text x="38.0897%" y="175.50"></text></g><g><title>codegen_module (2,963,995 samples, 2.28%)</title><rect x="36.3690%" y="181" width="2.2833%" height="15" fill="rgb(253,215,40)"/><text x="36.6190%" y="191.50">c..</text></g><g><title>eval_to_const_value_raw (262,643 samples, 0.20%)</title><rect x="39.2812%" y="101" width="0.2023%" height="15" fill="rgb(211,81,21)"/><text x="39.5312%" y="111.50"></text></g><g><title>eval_to_const_value_raw (257,443 samples, 0.20%)</title><rect x="39.2852%" y="85" width="0.1983%" height="15" fill="rgb(208,190,38)"/><text x="39.5352%" y="95.50"></text></g><g><title>eval_to_allocation_raw (248,183 samples, 0.19%)</title><rect x="39.2924%" y="69" width="0.1912%" height="15" fill="rgb(235,213,38)"/><text x="39.5424%" y="79.50"></text></g><g><title>optimized_mir (874,371 samples, 0.67%)</title><rect x="38.8117%" y="133" width="0.6736%" height="15" fill="rgb(237,122,38)"/><text x="39.0617%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (286,263 samples, 0.22%)</title><rect x="39.2647%" y="117" width="0.2205%" height="15" fill="rgb(244,218,35)"/><text x="39.5147%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (210,412 samples, 0.16%)</title><rect x="39.5233%" y="117" width="0.1621%" height="15" fill="rgb(240,68,47)"/><text x="39.7733%" y="127.50"></text></g><g><title>resolve_instance (382,193 samples, 0.29%)</title><rect x="39.4852%" y="133" width="0.2944%" height="15" fill="rgb(210,16,53)"/><text x="39.7352%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (1,489,177 samples, 1.15%)</title><rect x="38.6683%" y="149" width="1.1472%" height="15" fill="rgb(235,124,12)"/><text x="38.9183%" y="159.50"></text></g><g><title>monomorphization_collector (1,506,447 samples, 1.16%)</title><rect x="38.6669%" y="165" width="1.1605%" height="15" fill="rgb(224,169,11)"/><text x="38.9169%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (148,962 samples, 0.11%)</title><rect x="39.8299%" y="149" width="0.1148%" height="15" fill="rgb(250,166,2)"/><text x="40.0799%" y="159.50"></text></g><g><title>symbol_name (140,942 samples, 0.11%)</title><rect x="39.8361%" y="133" width="0.1086%" height="15" fill="rgb(242,216,29)"/><text x="40.0861%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,731,300 samples, 1.33%)</title><rect x="38.6531%" y="181" width="1.3337%" height="15" fill="rgb(230,116,27)"/><text x="38.9031%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (207,043 samples, 0.16%)</title><rect x="39.8274%" y="165" width="0.1595%" height="15" fill="rgb(228,99,48)"/><text x="40.0774%" y="175.50"></text></g><g><title>codegen_crate (5,363,000 samples, 4.13%)</title><rect x="35.8654%" y="197" width="4.1314%" height="15" fill="rgb(253,11,6)"/><text x="36.1154%" y="207.50">codeg..</text></g><g><title>codegen_module_optimize (13,091,249 samples, 10.08%)</title><rect x="39.9968%" y="197" width="10.0850%" height="15" fill="rgb(247,143,39)"/><text x="40.2468%" y="207.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (11,290,929 samples, 8.70%)</title><rect x="41.3837%" y="181" width="8.6981%" height="15" fill="rgb(236,97,10)"/><text x="41.6337%" y="191.50">LLVM_module_..</text></g><g><title>LLVM_lto_optimize (8,658,428 samples, 6.67%)</title><rect x="51.1692%" y="181" width="6.6701%" height="15" fill="rgb(233,208,19)"/><text x="51.4192%" y="191.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (16,988,632 samples, 13.09%)</title><rect x="57.8393%" y="181" width="13.0873%" height="15" fill="rgb(216,164,2)"/><text x="58.0893%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (16,680,019 samples, 12.85%)</title><rect x="58.0770%" y="165" width="12.8496%" height="15" fill="rgb(220,129,5)"/><text x="58.3270%" y="175.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (595,577 samples, 0.46%)</title><rect x="70.9266%" y="181" width="0.4588%" height="15" fill="rgb(242,17,10)"/><text x="71.1766%" y="191.50"></text></g><g><title>codegen_module_perform_lto (27,739,484 samples, 21.37%)</title><rect x="50.0818%" y="197" width="21.3694%" height="15" fill="rgb(242,107,0)"/><text x="50.3318%" y="207.50">codegen_module_perform_lto</text></g><g><title>AST_validation (147,672 samples, 0.11%)</title><rect x="71.5888%" y="181" width="0.1138%" height="15" fill="rgb(251,28,31)"/><text x="71.8388%" y="191.50"></text></g><g><title>metadata_load_macro (280,122 samples, 0.22%)</title><rect x="76.5557%" y="149" width="0.2158%" height="15" fill="rgb(233,223,10)"/><text x="76.8057%" y="159.50"></text></g><g><title>macro_expand_crate (6,640,285 samples, 5.12%)</title><rect x="71.7914%" y="181" width="5.1154%" height="15" fill="rgb(215,21,27)"/><text x="72.0414%" y="191.50">macro_..</text></g><g><title>expand_crate (6,626,795 samples, 5.11%)</title><rect x="71.8018%" y="165" width="5.1050%" height="15" fill="rgb(232,23,21)"/><text x="72.0518%" y="175.50">expand..</text></g><g><title>metadata_register_crate (175,693 samples, 0.14%)</title><rect x="76.7715%" y="149" width="0.1353%" height="15" fill="rgb(244,5,23)"/><text x="77.0215%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (245,162 samples, 0.19%)</title><rect x="76.9102%" y="181" width="0.1889%" height="15" fill="rgb(226,81,46)"/><text x="77.1602%" y="191.50"></text></g><g><title>finalize_imports (247,862 samples, 0.19%)</title><rect x="77.1045%" y="165" width="0.1909%" height="15" fill="rgb(247,70,30)"/><text x="77.3545%" y="175.50"></text></g><g><title>late_resolve_crate (837,869 samples, 0.65%)</title><rect x="77.3119%" y="165" width="0.6455%" height="15" fill="rgb(212,68,19)"/><text x="77.5619%" y="175.50"></text></g><g><title>configure_and_expand (8,506,346 samples, 6.55%)</title><rect x="71.4511%" y="197" width="6.5529%" height="15" fill="rgb(240,187,13)"/><text x="71.7011%" y="207.50">configure..</text></g><g><title>resolve_crate (1,174,823 samples, 0.91%)</title><rect x="77.0990%" y="181" width="0.9050%" height="15" fill="rgb(223,113,26)"/><text x="77.3490%" y="191.50"></text></g><g><title>early_lint_checks (228,823 samples, 0.18%)</title><rect x="78.0961%" y="197" width="0.1763%" height="15" fill="rgb(206,192,2)"/><text x="78.3461%" y="207.50"></text></g><g><title>free_global_ctxt (1,548,918 samples, 1.19%)</title><rect x="78.2724%" y="197" width="1.1932%" height="15" fill="rgb(241,108,4)"/><text x="78.5224%" y="207.50"></text></g><g><title>layout_of (187,292 samples, 0.14%)</title><rect x="80.2876%" y="149" width="0.1443%" height="15" fill="rgb(247,173,49)"/><text x="80.5376%" y="159.50"></text></g><g><title>layout_of (291,172 samples, 0.22%)</title><rect x="80.2189%" y="165" width="0.2243%" height="15" fill="rgb(224,114,35)"/><text x="80.4689%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (430,274 samples, 0.33%)</title><rect x="80.4432%" y="165" width="0.3315%" height="15" fill="rgb(245,159,27)"/><text x="80.6932%" y="175.50"></text></g><g><title>specialization_graph_of (147,941 samples, 0.11%)</title><rect x="80.8423%" y="149" width="0.1140%" height="15" fill="rgb(245,172,44)"/><text x="81.0923%" y="159.50"></text></g><g><title>optimized_mir (1,424,826 samples, 1.10%)</title><rect x="79.8605%" y="181" width="1.0976%" height="15" fill="rgb(236,23,11)"/><text x="80.1105%" y="191.50"></text></g><g><title>resolve_instance (238,133 samples, 0.18%)</title><rect x="80.7746%" y="165" width="0.1834%" height="15" fill="rgb(205,117,38)"/><text x="81.0246%" y="175.50"></text></g><g><title>generate_crate_metadata (1,973,543 samples, 1.52%)</title><rect x="79.4656%" y="197" width="1.5203%" height="15" fill="rgb(237,72,25)"/><text x="79.7156%" y="207.50"></text></g><g><title>hir_lowering (1,088,182 samples, 0.84%)</title><rect x="80.9859%" y="197" width="0.8383%" height="15" fill="rgb(244,70,9)"/><text x="81.2359%" y="207.50"></text></g><g><title>finish_ongoing_codegen (18,682,472 samples, 14.39%)</title><rect x="81.8349%" y="181" width="14.3922%" height="15" fill="rgb(217,125,39)"/><text x="82.0849%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (710,988 samples, 0.55%)</title><rect x="96.2271%" y="181" width="0.5477%" height="15" fill="rgb(235,36,10)"/><text x="96.4771%" y="191.50"></text></g><g><title>link_binary (706,108 samples, 0.54%)</title><rect x="96.2308%" y="165" width="0.5440%" height="15" fill="rgb(251,123,47)"/><text x="96.4808%" y="175.50"></text></g><g><title>link_rlib (444,295 samples, 0.34%)</title><rect x="96.4325%" y="149" width="0.3423%" height="15" fill="rgb(221,13,13)"/><text x="96.6825%" y="159.50"></text></g><g><title>link (19,417,060 samples, 14.96%)</title><rect x="81.8242%" y="197" width="14.9581%" height="15" fill="rgb(238,131,9)"/><text x="82.0742%" y="207.50">link</text></g><g><title>parse_crate (2,976,164 samples, 2.29%)</title><rect x="96.7823%" y="197" width="2.2927%" height="15" fill="rgb(211,50,8)"/><text x="97.0323%" y="207.50">p..</text></g><g><title>prepare_outputs (307,074 samples, 0.24%)</title><rect x="99.0814%" y="197" width="0.2366%" height="15" fill="rgb(245,182,24)"/><text x="99.3314%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (476,345 samples, 0.37%)</title><rect x="99.3179%" y="197" width="0.3670%" height="15" fill="rgb(242,14,37)"/><text x="99.5679%" y="207.50"></text></g><g><title>all (129,809,601 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (129,809,601 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (289,183 samples, 0.22%)</title><rect x="99.7772%" y="197" width="0.2228%" height="15" fill="rgb(209,9,3)"/><text x="100.0272%" y="207.50"></text></g></svg></svg>