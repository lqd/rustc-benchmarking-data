<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,417,003 samples, 8.23%)</title><rect x="0.4894%" y="229" width="8.2276%" height="15" fill="rgb(227,0,7)"/><text x="0.7394%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,355,765 samples, 1.74%)</title><rect x="6.9786%" y="213" width="1.7383%" height="15" fill="rgb(217,0,24)"/><text x="7.2286%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,342,535 samples, 1.72%)</title><rect x="6.9956%" y="197" width="1.7213%" height="15" fill="rgb(221,193,54)"/><text x="7.2456%" y="207.50"></text></g><g><title>param_env (241,923 samples, 0.31%)</title><rect x="15.6827%" y="149" width="0.3102%" height="15" fill="rgb(248,212,6)"/><text x="15.9327%" y="159.50"></text></g><g><title>item_attrs (92,571 samples, 0.12%)</title><rect x="16.2994%" y="117" width="0.1187%" height="15" fill="rgb(208,68,35)"/><text x="16.5494%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (88,171 samples, 0.11%)</title><rect x="16.3050%" y="101" width="0.1130%" height="15" fill="rgb(232,128,0)"/><text x="16.5550%" y="111.50"></text></g><g><title>codegen_fn_attrs (133,881 samples, 0.17%)</title><rect x="16.2524%" y="133" width="0.1717%" height="15" fill="rgb(207,160,47)"/><text x="16.5024%" y="143.50"></text></g><g><title>is_copy_raw (99,752 samples, 0.13%)</title><rect x="17.7243%" y="85" width="0.1279%" height="15" fill="rgb(228,23,34)"/><text x="17.9743%" y="95.50"></text></g><g><title>evaluate_obligation (85,511 samples, 0.11%)</title><rect x="17.7425%" y="69" width="0.1096%" height="15" fill="rgb(218,30,26)"/><text x="17.9925%" y="79.50"></text></g><g><title>adt_drop_tys (165,942 samples, 0.21%)</title><rect x="17.7034%" y="101" width="0.2128%" height="15" fill="rgb(220,122,19)"/><text x="17.9534%" y="111.50"></text></g><g><title>needs_drop_raw (665,309 samples, 0.85%)</title><rect x="17.6275%" y="117" width="0.8530%" height="15" fill="rgb(250,228,42)"/><text x="17.8775%" y="127.50"></text></g><g><title>is_copy_raw (440,117 samples, 0.56%)</title><rect x="17.9162%" y="101" width="0.5643%" height="15" fill="rgb(240,193,28)"/><text x="18.1662%" y="111.50"></text></g><g><title>evaluate_obligation (379,716 samples, 0.49%)</title><rect x="17.9936%" y="85" width="0.4869%" height="15" fill="rgb(216,20,37)"/><text x="18.2436%" y="95.50"></text></g><g><title>trait_impls_of (130,942 samples, 0.17%)</title><rect x="18.3126%" y="69" width="0.1679%" height="15" fill="rgb(206,188,39)"/><text x="18.5626%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (298,962 samples, 0.38%)</title><rect x="18.7308%" y="101" width="0.3833%" height="15" fill="rgb(217,207,13)"/><text x="18.9808%" y="111.50"></text></g><g><title>impl_item_implementor_ids (86,090 samples, 0.11%)</title><rect x="19.1298%" y="101" width="0.1104%" height="15" fill="rgb(231,73,38)"/><text x="19.3798%" y="111.50"></text></g><g><title>resolve_instance (680,418 samples, 0.87%)</title><rect x="18.4805%" y="117" width="0.8724%" height="15" fill="rgb(225,20,46)"/><text x="18.7305%" y="127.50"></text></g><g><title>thir_body (274,661 samples, 0.35%)</title><rect x="19.3700%" y="117" width="0.3522%" height="15" fill="rgb(210,31,41)"/><text x="19.6200%" y="127.50"></text></g><g><title>mir_const (3,564,214 samples, 4.57%)</title><rect x="15.1673%" y="165" width="4.5699%" height="15" fill="rgb(221,200,47)"/><text x="15.4173%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (2,920,363 samples, 3.74%)</title><rect x="15.9928%" y="149" width="3.7444%" height="15" fill="rgb(226,26,5)"/><text x="16.2428%" y="159.50">unsa..</text></g><g><title>mir_built (2,584,069 samples, 3.31%)</title><rect x="16.4240%" y="133" width="3.3132%" height="15" fill="rgb(249,33,26)"/><text x="16.6740%" y="143.50">mir..</text></g><g><title>mir_promoted (3,923,787 samples, 5.03%)</title><rect x="14.7361%" y="181" width="5.0309%" height="15" fill="rgb(235,183,28)"/><text x="14.9861%" y="191.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (92,450 samples, 0.12%)</title><rect x="19.7670%" y="181" width="0.1185%" height="15" fill="rgb(221,5,38)"/><text x="20.0170%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (202,343 samples, 0.26%)</title><rect x="19.8856%" y="181" width="0.2594%" height="15" fill="rgb(247,18,42)"/><text x="20.1356%" y="191.50"></text></g><g><title>normalize_projection_ty (127,602 samples, 0.16%)</title><rect x="19.9814%" y="165" width="0.1636%" height="15" fill="rgb(241,131,45)"/><text x="20.2314%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,182,667 samples, 1.52%)</title><rect x="20.1757%" y="181" width="1.5164%" height="15" fill="rgb(249,31,29)"/><text x="20.4257%" y="191.50"></text></g><g><title>MIR_borrow_checking (9,970,432 samples, 12.78%)</title><rect x="8.9103%" y="213" width="12.7836%" height="15" fill="rgb(225,111,53)"/><text x="9.1603%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (9,911,452 samples, 12.71%)</title><rect x="8.9859%" y="197" width="12.7080%" height="15" fill="rgb(238,160,17)"/><text x="9.2359%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (109,372 samples, 0.14%)</title><rect x="21.7105%" y="213" width="0.1402%" height="15" fill="rgb(214,148,48)"/><text x="21.9605%" y="223.50"></text></g><g><title>codegen_fn_attrs (200,212 samples, 0.26%)</title><rect x="22.1614%" y="149" width="0.2567%" height="15" fill="rgb(232,36,49)"/><text x="22.4114%" y="159.50"></text></g><g><title>codegen_fn_attrs (325,524 samples, 0.42%)</title><rect x="22.0053%" y="181" width="0.4174%" height="15" fill="rgb(209,103,24)"/><text x="22.2553%" y="191.50"></text></g><g><title>should_inherit_track_caller (285,053 samples, 0.37%)</title><rect x="22.0572%" y="165" width="0.3655%" height="15" fill="rgb(229,88,8)"/><text x="22.3072%" y="175.50"></text></g><g><title>check_mod_attrs (426,274 samples, 0.55%)</title><rect x="21.8764%" y="197" width="0.5465%" height="15" fill="rgb(213,181,19)"/><text x="22.1264%" y="207.50"></text></g><g><title>lookup_deprecation_entry (86,741 samples, 0.11%)</title><rect x="22.6557%" y="181" width="0.1112%" height="15" fill="rgb(254,191,54)"/><text x="22.9057%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (235,043 samples, 0.30%)</title><rect x="22.5384%" y="197" width="0.3014%" height="15" fill="rgb(241,83,37)"/><text x="22.7884%" y="207.50"></text></g><g><title>misc_checking_1 (800,549 samples, 1.03%)</title><rect x="21.8512%" y="213" width="1.0264%" height="15" fill="rgb(233,36,39)"/><text x="22.1012%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (207,882 samples, 0.27%)</title><rect x="22.8792%" y="197" width="0.2665%" height="15" fill="rgb(226,3,54)"/><text x="23.1292%" y="207.50"></text></g><g><title>check_mod_liveness (175,122 samples, 0.22%)</title><rect x="22.9212%" y="181" width="0.2245%" height="15" fill="rgb(245,192,40)"/><text x="23.1712%" y="191.50"></text></g><g><title>misc_checking_2 (374,394 samples, 0.48%)</title><rect x="22.8776%" y="213" width="0.4800%" height="15" fill="rgb(238,167,29)"/><text x="23.1276%" y="223.50"></text></g><g><title>match_checking (165,272 samples, 0.21%)</title><rect x="23.1457%" y="197" width="0.2119%" height="15" fill="rgb(232,182,51)"/><text x="23.3957%" y="207.50"></text></g><g><title>check_match (149,742 samples, 0.19%)</title><rect x="23.1656%" y="181" width="0.1920%" height="15" fill="rgb(231,60,39)"/><text x="23.4156%" y="191.50"></text></g><g><title>check_private_in_public (104,631 samples, 0.13%)</title><rect x="23.3682%" y="197" width="0.1342%" height="15" fill="rgb(208,69,12)"/><text x="23.6182%" y="207.50"></text></g><g><title>death_checking (167,962 samples, 0.22%)</title><rect x="23.5024%" y="197" width="0.2154%" height="15" fill="rgb(235,93,37)"/><text x="23.7524%" y="207.50"></text></g><g><title>crate_lints (1,799,620 samples, 2.31%)</title><rect x="23.7198%" y="181" width="2.3074%" height="15" fill="rgb(213,116,39)"/><text x="23.9698%" y="191.50">c..</text></g><g><title>type_of (1,265,335 samples, 1.62%)</title><rect x="24.4048%" y="165" width="1.6224%" height="15" fill="rgb(222,207,29)"/><text x="24.6548%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (809,698 samples, 1.04%)</title><rect x="24.9890%" y="149" width="1.0382%" height="15" fill="rgb(206,96,30)"/><text x="25.2390%" y="159.50"></text></g><g><title>lint_checking (1,922,731 samples, 2.47%)</title><rect x="23.7178%" y="197" width="2.4652%" height="15" fill="rgb(218,138,4)"/><text x="23.9678%" y="207.50">li..</text></g><g><title>module_lints (121,541 samples, 0.16%)</title><rect x="26.0272%" y="181" width="0.1558%" height="15" fill="rgb(250,191,14)"/><text x="26.2772%" y="191.50"></text></g><g><title>lint_mod (119,401 samples, 0.15%)</title><rect x="26.0299%" y="165" width="0.1531%" height="15" fill="rgb(239,60,40)"/><text x="26.2799%" y="175.50"></text></g><g><title>privacy_access_levels (144,251 samples, 0.18%)</title><rect x="26.1830%" y="197" width="0.1850%" height="15" fill="rgb(206,27,48)"/><text x="26.4330%" y="207.50"></text></g><g><title>privacy_checking_modules (341,744 samples, 0.44%)</title><rect x="26.3679%" y="197" width="0.4382%" height="15" fill="rgb(225,35,8)"/><text x="26.6179%" y="207.50"></text></g><g><title>check_mod_privacy (340,404 samples, 0.44%)</title><rect x="26.3697%" y="181" width="0.4365%" height="15" fill="rgb(250,213,24)"/><text x="26.6197%" y="191.50"></text></g><g><title>misc_checking_3 (2,699,630 samples, 3.46%)</title><rect x="23.3576%" y="213" width="3.4613%" height="15" fill="rgb(247,123,22)"/><text x="23.6076%" y="223.50">mis..</text></g><g><title>impl_parent (1,819,801 samples, 2.33%)</title><rect x="30.5879%" y="149" width="2.3333%" height="15" fill="rgb(231,138,38)"/><text x="30.8379%" y="159.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,033,205 samples, 1.32%)</title><rect x="31.5965%" y="133" width="1.3247%" height="15" fill="rgb(231,145,46)"/><text x="31.8465%" y="143.50"></text></g><g><title>impl_trait_ref (4,325,812 samples, 5.55%)</title><rect x="32.9302%" y="149" width="5.5464%" height="15" fill="rgb(251,118,11)"/><text x="33.1802%" y="159.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,764,356 samples, 4.83%)</title><rect x="33.6501%" y="133" width="4.8265%" height="15" fill="rgb(217,147,25)"/><text x="33.9001%" y="143.50">metada..</text></g><g><title>item_attrs (107,443 samples, 0.14%)</title><rect x="38.4766%" y="149" width="0.1378%" height="15" fill="rgb(247,81,37)"/><text x="38.7266%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (98,513 samples, 0.13%)</title><rect x="38.4880%" y="133" width="0.1263%" height="15" fill="rgb(209,12,38)"/><text x="38.7380%" y="143.50"></text></g><g><title>explicit_predicates_of (149,781 samples, 0.19%)</title><rect x="38.6893%" y="117" width="0.1920%" height="15" fill="rgb(227,1,9)"/><text x="38.9393%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (142,611 samples, 0.18%)</title><rect x="38.6985%" y="101" width="0.1828%" height="15" fill="rgb(248,47,43)"/><text x="38.9485%" y="111.50"></text></g><g><title>predicates_of (235,322 samples, 0.30%)</title><rect x="38.6143%" y="149" width="0.3017%" height="15" fill="rgb(221,10,30)"/><text x="38.8643%" y="159.50"></text></g><g><title>predicates_defined_on (195,612 samples, 0.25%)</title><rect x="38.6652%" y="133" width="0.2508%" height="15" fill="rgb(210,229,1)"/><text x="38.9152%" y="143.50"></text></g><g><title>trait_impls_of (554,685 samples, 0.71%)</title><rect x="38.9183%" y="149" width="0.7112%" height="15" fill="rgb(222,148,37)"/><text x="39.1683%" y="159.50"></text></g><g><title>implementations_of_trait (142,981 samples, 0.18%)</title><rect x="39.4461%" y="133" width="0.1833%" height="15" fill="rgb(234,67,33)"/><text x="39.6961%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (113,540 samples, 0.15%)</title><rect x="39.4839%" y="117" width="0.1456%" height="15" fill="rgb(247,98,35)"/><text x="39.7339%" y="127.50"></text></g><g><title>coherent_trait (9,965,263 samples, 12.78%)</title><rect x="26.8832%" y="181" width="12.7770%" height="15" fill="rgb(247,138,52)"/><text x="27.1332%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (9,950,753 samples, 12.76%)</title><rect x="26.9018%" y="165" width="12.7584%" height="15" fill="rgb(213,79,30)"/><text x="27.1518%" y="175.50">specialization_grap..</text></g><g><title>coherence_checking (10,034,033 samples, 12.87%)</title><rect x="26.8639%" y="197" width="12.8652%" height="15" fill="rgb(246,177,23)"/><text x="27.1139%" y="207.50">coherence_checking</text></g><g><title>associated_item (93,620 samples, 0.12%)</title><rect x="49.3141%" y="133" width="0.1200%" height="15" fill="rgb(230,62,27)"/><text x="49.5641%" y="143.50"></text></g><g><title>associated_items (154,342 samples, 0.20%)</title><rect x="49.2465%" y="149" width="0.1979%" height="15" fill="rgb(216,154,8)"/><text x="49.4965%" y="159.50"></text></g><g><title>adt_def (84,991 samples, 0.11%)</title><rect x="49.8763%" y="85" width="0.1090%" height="15" fill="rgb(244,35,45)"/><text x="50.1263%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (84,671 samples, 0.11%)</title><rect x="49.8767%" y="69" width="0.1086%" height="15" fill="rgb(251,115,12)"/><text x="50.1267%" y="79.50"></text></g><g><title>item_attrs (79,501 samples, 0.10%)</title><rect x="49.8833%" y="53" width="0.1019%" height="15" fill="rgb(240,54,50)"/><text x="50.1333%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (79,091 samples, 0.10%)</title><rect x="49.8838%" y="37" width="0.1014%" height="15" fill="rgb(233,84,52)"/><text x="50.1338%" y="47.50"></text></g><g><title>adt_dtorck_constraint (88,071 samples, 0.11%)</title><rect x="49.9857%" y="85" width="0.1129%" height="15" fill="rgb(207,117,47)"/><text x="50.2357%" y="95.50"></text></g><g><title>adt_dtorck_constraint (177,192 samples, 0.23%)</title><rect x="49.8724%" y="101" width="0.2272%" height="15" fill="rgb(249,43,39)"/><text x="50.1224%" y="111.50"></text></g><g><title>adt_dtorck_constraint (213,832 samples, 0.27%)</title><rect x="49.8393%" y="117" width="0.2742%" height="15" fill="rgb(209,38,44)"/><text x="50.0893%" y="127.50"></text></g><g><title>adt_dtorck_constraint (321,165 samples, 0.41%)</title><rect x="49.7216%" y="133" width="0.4118%" height="15" fill="rgb(236,212,23)"/><text x="49.9716%" y="143.50"></text></g><g><title>dropck_outlives (505,356 samples, 0.65%)</title><rect x="49.4953%" y="149" width="0.6479%" height="15" fill="rgb(242,79,21)"/><text x="49.7453%" y="159.50"></text></g><g><title>predicates_of (97,613 samples, 0.13%)</title><rect x="51.0782%" y="133" width="0.1252%" height="15" fill="rgb(211,96,35)"/><text x="51.3282%" y="143.50"></text></g><g><title>evaluate_obligation (887,833 samples, 1.14%)</title><rect x="50.1432%" y="149" width="1.1383%" height="15" fill="rgb(253,215,40)"/><text x="50.3932%" y="159.50"></text></g><g><title>method_autoderef_steps (214,771 samples, 0.28%)</title><rect x="51.6408%" y="149" width="0.2754%" height="15" fill="rgb(211,81,21)"/><text x="51.8908%" y="159.50"></text></g><g><title>evaluate_obligation (108,450 samples, 0.14%)</title><rect x="51.7772%" y="133" width="0.1390%" height="15" fill="rgb(208,190,38)"/><text x="52.0272%" y="143.50"></text></g><g><title>explicit_predicates_of (118,821 samples, 0.15%)</title><rect x="52.0607%" y="117" width="0.1523%" height="15" fill="rgb(235,213,38)"/><text x="52.3107%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (108,451 samples, 0.14%)</title><rect x="52.0740%" y="101" width="0.1391%" height="15" fill="rgb(237,122,38)"/><text x="52.3240%" y="111.50"></text></g><g><title>predicates_of (222,432 samples, 0.29%)</title><rect x="51.9508%" y="149" width="0.2852%" height="15" fill="rgb(244,218,35)"/><text x="52.2008%" y="159.50"></text></g><g><title>predicates_defined_on (169,082 samples, 0.22%)</title><rect x="52.0192%" y="133" width="0.2168%" height="15" fill="rgb(240,68,47)"/><text x="52.2692%" y="143.50"></text></g><g><title>item_bodies_checking (9,797,800 samples, 12.56%)</title><rect x="39.7668%" y="197" width="12.5623%" height="15" fill="rgb(210,16,53)"/><text x="40.0168%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (9,795,250 samples, 12.56%)</title><rect x="39.7700%" y="181" width="12.5590%" height="15" fill="rgb(235,124,12)"/><text x="40.0200%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (9,747,709 samples, 12.50%)</title><rect x="39.8310%" y="165" width="12.4981%" height="15" fill="rgb(224,169,11)"/><text x="40.0810%" y="175.50">typeck</text></g><g><title>impl_trait_ref (148,693 samples, 0.19%)</title><rect x="54.6024%" y="117" width="0.1906%" height="15" fill="rgb(250,166,2)"/><text x="54.8524%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (129,793 samples, 0.17%)</title><rect x="54.6266%" y="101" width="0.1664%" height="15" fill="rgb(242,216,29)"/><text x="54.8766%" y="111.50"></text></g><g><title>adt_destructor (320,494 samples, 0.41%)</title><rect x="54.4227%" y="165" width="0.4109%" height="15" fill="rgb(230,116,27)"/><text x="54.6727%" y="175.50"></text></g><g><title>coherent_trait (315,444 samples, 0.40%)</title><rect x="54.4292%" y="149" width="0.4044%" height="15" fill="rgb(228,99,48)"/><text x="54.6792%" y="159.50"></text></g><g><title>specialization_graph_of (313,394 samples, 0.40%)</title><rect x="54.4318%" y="133" width="0.4018%" height="15" fill="rgb(253,11,6)"/><text x="54.6818%" y="143.50"></text></g><g><title>item_types_checking (2,172,205 samples, 2.79%)</title><rect x="52.3291%" y="197" width="2.7851%" height="15" fill="rgb(247,143,39)"/><text x="52.5791%" y="207.50">it..</text></g><g><title>check_mod_item_types (2,169,565 samples, 2.78%)</title><rect x="52.3325%" y="181" width="2.7817%" height="15" fill="rgb(236,97,10)"/><text x="52.5825%" y="191.50">ch..</text></g><g><title>fn_sig (123,522 samples, 0.16%)</title><rect x="55.3139%" y="165" width="0.1584%" height="15" fill="rgb(233,208,19)"/><text x="55.5639%" y="175.50"></text></g><g><title>is_late_bound_map (89,982 samples, 0.12%)</title><rect x="55.5881%" y="149" width="0.1154%" height="15" fill="rgb(216,164,2)"/><text x="55.8381%" y="159.50"></text></g><g><title>resolve_lifetimes (81,392 samples, 0.10%)</title><rect x="55.5991%" y="133" width="0.1044%" height="15" fill="rgb(220,129,5)"/><text x="55.8491%" y="143.50"></text></g><g><title>generics_of (220,193 samples, 0.28%)</title><rect x="55.4723%" y="165" width="0.2823%" height="15" fill="rgb(242,17,10)"/><text x="55.7223%" y="175.50"></text></g><g><title>late_bound_vars_map (234,254 samples, 0.30%)</title><rect x="56.1504%" y="117" width="0.3003%" height="15" fill="rgb(242,107,0)"/><text x="56.4004%" y="127.50"></text></g><g><title>resolve_lifetimes (220,914 samples, 0.28%)</title><rect x="56.1675%" y="101" width="0.2832%" height="15" fill="rgb(251,28,31)"/><text x="56.4175%" y="111.50"></text></g><g><title>explicit_predicates_of (447,165 samples, 0.57%)</title><rect x="55.8905%" y="133" width="0.5733%" height="15" fill="rgb(233,223,10)"/><text x="56.1405%" y="143.50"></text></g><g><title>predicates_of (717,927 samples, 0.92%)</title><rect x="55.7905%" y="165" width="0.9205%" height="15" fill="rgb(215,21,27)"/><text x="56.0405%" y="175.50"></text></g><g><title>predicates_defined_on (686,517 samples, 0.88%)</title><rect x="55.8307%" y="149" width="0.8802%" height="15" fill="rgb(232,23,21)"/><text x="56.0807%" y="159.50"></text></g><g><title>inferred_outlives_of (192,702 samples, 0.25%)</title><rect x="56.4639%" y="133" width="0.2471%" height="15" fill="rgb(244,5,23)"/><text x="56.7139%" y="143.50"></text></g><g><title>inferred_outlives_crate (176,532 samples, 0.23%)</title><rect x="56.4846%" y="117" width="0.2263%" height="15" fill="rgb(226,81,46)"/><text x="56.7346%" y="127.50"></text></g><g><title>type_collecting (1,383,875 samples, 1.77%)</title><rect x="55.1158%" y="197" width="1.7743%" height="15" fill="rgb(247,70,30)"/><text x="55.3658%" y="207.50">t..</text></g><g><title>collect_mod_item_types (1,377,495 samples, 1.77%)</title><rect x="55.1239%" y="181" width="1.7662%" height="15" fill="rgb(212,68,19)"/><text x="55.3739%" y="191.50"></text></g><g><title>type_of (139,722 samples, 0.18%)</title><rect x="56.7109%" y="165" width="0.1791%" height="15" fill="rgb(240,187,13)"/><text x="56.9609%" y="175.50"></text></g><g><title>evaluate_obligation (344,654 samples, 0.44%)</title><rect x="59.4711%" y="165" width="0.4419%" height="15" fill="rgb(223,113,26)"/><text x="59.7211%" y="175.50"></text></g><g><title>implied_outlives_bounds (251,872 samples, 0.32%)</title><rect x="59.9176%" y="165" width="0.3229%" height="15" fill="rgb(206,192,2)"/><text x="60.1676%" y="175.50"></text></g><g><title>param_env (325,993 samples, 0.42%)</title><rect x="60.2405%" y="165" width="0.4180%" height="15" fill="rgb(241,108,4)"/><text x="60.4905%" y="175.50"></text></g><g><title>region_scope_tree (141,242 samples, 0.18%)</title><rect x="60.7049%" y="165" width="0.1811%" height="15" fill="rgb(247,173,49)"/><text x="60.9549%" y="175.50"></text></g><g><title>check_impl_item_well_formed (3,003,585 samples, 3.85%)</title><rect x="57.0511%" y="181" width="3.8511%" height="15" fill="rgb(224,114,35)"/><text x="57.3011%" y="191.50">chec..</text></g><g><title>adt_sized_constraint (80,730 samples, 0.10%)</title><rect x="62.7632%" y="165" width="0.1035%" height="15" fill="rgb(245,159,27)"/><text x="63.0132%" y="175.50"></text></g><g><title>evaluate_obligation (86,311 samples, 0.11%)</title><rect x="62.8671%" y="165" width="0.1107%" height="15" fill="rgb(245,172,44)"/><text x="63.1171%" y="175.50"></text></g><g><title>implied_outlives_bounds (107,261 samples, 0.14%)</title><rect x="62.9888%" y="165" width="0.1375%" height="15" fill="rgb(236,23,11)"/><text x="63.2388%" y="175.50"></text></g><g><title>param_env (216,751 samples, 0.28%)</title><rect x="63.1275%" y="165" width="0.2779%" height="15" fill="rgb(205,117,38)"/><text x="63.3775%" y="175.50"></text></g><g><title>trait_impls_of (219,153 samples, 0.28%)</title><rect x="63.5003%" y="165" width="0.2810%" height="15" fill="rgb(237,72,25)"/><text x="63.7503%" y="175.50"></text></g><g><title>analysis (43,030,644 samples, 55.17%)</title><rect x="8.7169%" y="229" width="55.1719%" height="15" fill="rgb(244,70,9)"/><text x="8.9669%" y="239.50">analysis</text></g><g><title>type_check_crate (28,912,196 samples, 37.07%)</title><rect x="26.8190%" y="213" width="37.0699%" height="15" fill="rgb(217,125,39)"/><text x="27.0690%" y="223.50">type_check_crate</text></g><g><title>wf_checking (5,455,891 samples, 7.00%)</title><rect x="56.8936%" y="197" width="6.9953%" height="15" fill="rgb(235,36,10)"/><text x="57.1436%" y="207.50">wf_checki..</text></g><g><title>check_item_well_formed (2,329,473 samples, 2.99%)</title><rect x="60.9021%" y="181" width="2.9867%" height="15" fill="rgb(251,123,47)"/><text x="61.1521%" y="191.50">che..</text></g><g><title>variances_of (83,891 samples, 0.11%)</title><rect x="63.7813%" y="165" width="0.1076%" height="15" fill="rgb(221,13,13)"/><text x="64.0313%" y="175.50"></text></g><g><title>crate_variances (80,141 samples, 0.10%)</title><rect x="63.7861%" y="149" width="0.1028%" height="15" fill="rgb(238,131,9)"/><text x="64.0361%" y="159.50"></text></g><g><title>codegen_module (220,523 samples, 0.28%)</title><rect x="64.4580%" y="213" width="0.2827%" height="15" fill="rgb(211,50,8)"/><text x="64.7080%" y="223.50"></text></g><g><title>codegen_crate (789,649 samples, 1.01%)</title><rect x="63.8968%" y="229" width="1.0125%" height="15" fill="rgb(245,182,24)"/><text x="64.1468%" y="239.50"></text></g><g><title>codegen_module_optimize (561,667 samples, 0.72%)</title><rect x="64.9092%" y="229" width="0.7201%" height="15" fill="rgb(242,14,37)"/><text x="65.1592%" y="239.50"></text></g><g><title>LLVM_module_optimize (290,704 samples, 0.37%)</title><rect x="65.2566%" y="213" width="0.3727%" height="15" fill="rgb(246,228,12)"/><text x="65.5066%" y="223.50"></text></g><g><title>LLVM_lto_optimize (249,923 samples, 0.32%)</title><rect x="66.1702%" y="213" width="0.3204%" height="15" fill="rgb(213,55,15)"/><text x="66.4202%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,660,640 samples, 3.41%)</title><rect x="66.4906%" y="213" width="3.4114%" height="15" fill="rgb(209,9,3)"/><text x="66.7406%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (2,621,610 samples, 3.36%)</title><rect x="66.5407%" y="197" width="3.3613%" height="15" fill="rgb(230,59,30)"/><text x="66.7907%" y="207.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,370,009 samples, 4.32%)</title><rect x="65.6294%" y="229" width="4.3209%" height="15" fill="rgb(209,121,21)"/><text x="65.8794%" y="239.50">codeg..</text></g><g><title>macro_expand_crate (6,368,142 samples, 8.16%)</title><rect x="70.2837%" y="213" width="8.1649%" height="15" fill="rgb(220,109,13)"/><text x="70.5337%" y="223.50">macro_expan..</text></g><g><title>expand_crate (6,353,582 samples, 8.15%)</title><rect x="70.3023%" y="197" width="8.1463%" height="15" fill="rgb(232,18,1)"/><text x="70.5523%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (1,287,614 samples, 1.65%)</title><rect x="76.7977%" y="181" width="1.6509%" height="15" fill="rgb(215,41,42)"/><text x="77.0477%" y="191.50"></text></g><g><title>metadata_register_crate (453,844 samples, 0.58%)</title><rect x="77.8667%" y="165" width="0.5819%" height="15" fill="rgb(224,123,36)"/><text x="78.1167%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (111,752 samples, 0.14%)</title><rect x="78.4526%" y="213" width="0.1433%" height="15" fill="rgb(240,125,3)"/><text x="78.7026%" y="223.50"></text></g><g><title>late_resolve_crate (754,829 samples, 0.97%)</title><rect x="78.6577%" y="197" width="0.9678%" height="15" fill="rgb(205,98,50)"/><text x="78.9077%" y="207.50"></text></g><g><title>configure_and_expand (7,596,785 samples, 9.74%)</title><rect x="69.9502%" y="229" width="9.7403%" height="15" fill="rgb(205,185,37)"/><text x="70.2002%" y="239.50">configure_and_..</text></g><g><title>resolve_crate (853,709 samples, 1.09%)</title><rect x="78.5959%" y="213" width="1.0946%" height="15" fill="rgb(238,207,15)"/><text x="78.8459%" y="223.50"></text></g><g><title>drop_ast (83,431 samples, 0.11%)</title><rect x="79.6905%" y="229" width="0.1070%" height="15" fill="rgb(213,199,42)"/><text x="79.9405%" y="239.50"></text></g><g><title>early_lint_checks (146,141 samples, 0.19%)</title><rect x="79.8168%" y="229" width="0.1874%" height="15" fill="rgb(235,201,11)"/><text x="80.0668%" y="239.50"></text></g><g><title>free_global_ctxt (3,119,346 samples, 4.00%)</title><rect x="80.0042%" y="229" width="3.9995%" height="15" fill="rgb(207,46,11)"/><text x="80.2542%" y="239.50">free..</text></g><g><title>exported_symbols (85,951 samples, 0.11%)</title><rect x="85.2852%" y="213" width="0.1102%" height="15" fill="rgb(241,35,35)"/><text x="85.5352%" y="223.50"></text></g><g><title>layout_of (115,201 samples, 0.15%)</title><rect x="87.5295%" y="149" width="0.1477%" height="15" fill="rgb(243,32,47)"/><text x="87.7795%" y="159.50"></text></g><g><title>layout_of (167,333 samples, 0.21%)</title><rect x="87.4756%" y="165" width="0.2145%" height="15" fill="rgb(247,202,23)"/><text x="87.7256%" y="175.50"></text></g><g><title>layout_of (259,673 samples, 0.33%)</title><rect x="87.3721%" y="181" width="0.3329%" height="15" fill="rgb(219,102,11)"/><text x="87.6221%" y="191.50"></text></g><g><title>layout_of (580,016 samples, 0.74%)</title><rect x="87.0215%" y="197" width="0.7437%" height="15" fill="rgb(243,110,44)"/><text x="87.2715%" y="207.50"></text></g><g><title>needs_drop_raw (251,814 samples, 0.32%)</title><rect x="89.3093%" y="181" width="0.3229%" height="15" fill="rgb(222,74,54)"/><text x="89.5593%" y="191.50"></text></g><g><title>is_copy_raw (227,984 samples, 0.29%)</title><rect x="89.3399%" y="165" width="0.2923%" height="15" fill="rgb(216,99,12)"/><text x="89.5899%" y="175.50"></text></g><g><title>evaluate_obligation (191,762 samples, 0.25%)</title><rect x="89.3863%" y="149" width="0.2459%" height="15" fill="rgb(226,22,26)"/><text x="89.6363%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,502,807 samples, 1.93%)</title><rect x="87.7652%" y="197" width="1.9268%" height="15" fill="rgb(217,163,10)"/><text x="88.0152%" y="207.50">m..</text></g><g><title>optimized_mir (3,294,108 samples, 4.22%)</title><rect x="85.4983%" y="213" width="4.2236%" height="15" fill="rgb(213,25,53)"/><text x="85.7483%" y="223.50">optim..</text></g><g><title>generate_crate_metadata (4,497,971 samples, 5.77%)</title><rect x="84.0036%" y="229" width="5.7671%" height="15" fill="rgb(252,105,26)"/><text x="84.2536%" y="239.50">generat..</text></g><g><title>hir_lowering (1,146,263 samples, 1.47%)</title><rect x="89.7707%" y="229" width="1.4697%" height="15" fill="rgb(220,39,43)"/><text x="90.0207%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,147,095 samples, 4.04%)</title><rect x="91.2570%" y="213" width="4.0351%" height="15" fill="rgb(229,68,48)"/><text x="91.5070%" y="223.50">fini..</text></g><g><title>link_crate (713,378 samples, 0.91%)</title><rect x="95.2921%" y="213" width="0.9147%" height="15" fill="rgb(252,8,32)"/><text x="95.5421%" y="223.50"></text></g><g><title>link_binary (697,637 samples, 0.89%)</title><rect x="95.3123%" y="197" width="0.8945%" height="15" fill="rgb(223,20,43)"/><text x="95.5623%" y="207.50"></text></g><g><title>link_rlib (448,105 samples, 0.57%)</title><rect x="95.6322%" y="181" width="0.5745%" height="15" fill="rgb(229,81,49)"/><text x="95.8822%" y="191.50"></text></g><g><title>link (3,881,444 samples, 4.98%)</title><rect x="91.2404%" y="229" width="4.9766%" height="15" fill="rgb(236,28,36)"/><text x="91.4904%" y="239.50">link</text></g><g><title>parse_crate (1,831,370 samples, 2.35%)</title><rect x="96.2170%" y="229" width="2.3481%" height="15" fill="rgb(249,185,26)"/><text x="96.4670%" y="239.50">p..</text></g><g><title>prepare_outputs (193,523 samples, 0.25%)</title><rect x="98.5722%" y="229" width="0.2481%" height="15" fill="rgb(249,174,33)"/><text x="98.8222%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (505,225 samples, 0.65%)</title><rect x="98.8204%" y="229" width="0.6478%" height="15" fill="rgb(233,201,37)"/><text x="99.0704%" y="239.50"></text></g><g><title>all (77,993,720 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (77,993,720 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (336,023 samples, 0.43%)</title><rect x="99.5692%" y="229" width="0.4308%" height="15" fill="rgb(230,49,44)"/><text x="99.8192%" y="239.50"></text></g></svg></svg>