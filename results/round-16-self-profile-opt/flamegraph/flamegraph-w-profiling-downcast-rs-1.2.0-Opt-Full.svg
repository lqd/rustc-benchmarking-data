<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,595,252 samples, 11.06%)</title><rect x="1.6244%" y="245" width="11.0603%" height="15" fill="rgb(227,0,7)"/><text x="1.8744%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (224,003 samples, 0.44%)</title><rect x="12.2419%" y="229" width="0.4428%" height="15" fill="rgb(217,0,24)"/><text x="12.4919%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (213,553 samples, 0.42%)</title><rect x="12.2626%" y="213" width="0.4221%" height="15" fill="rgb(221,193,54)"/><text x="12.5126%" y="223.50"></text></g><g><title>implied_outlives_bounds (87,740 samples, 0.17%)</title><rect x="14.5012%" y="197" width="0.1734%" height="15" fill="rgb(248,212,6)"/><text x="14.7512%" y="207.50"></text></g><g><title>needs_drop_raw (173,573 samples, 0.34%)</title><rect x="15.3636%" y="133" width="0.3431%" height="15" fill="rgb(208,68,35)"/><text x="15.6136%" y="143.50"></text></g><g><title>is_copy_raw (164,133 samples, 0.32%)</title><rect x="15.3823%" y="117" width="0.3244%" height="15" fill="rgb(232,128,0)"/><text x="15.6323%" y="127.50"></text></g><g><title>evaluate_obligation (144,363 samples, 0.29%)</title><rect x="15.4214%" y="101" width="0.2854%" height="15" fill="rgb(207,160,47)"/><text x="15.6714%" y="111.50"></text></g><g><title>trait_impls_of (109,101 samples, 0.22%)</title><rect x="15.4911%" y="85" width="0.2157%" height="15" fill="rgb(228,23,34)"/><text x="15.7411%" y="95.50"></text></g><g><title>mir_const (453,405 samples, 0.90%)</title><rect x="14.8661%" y="181" width="0.8963%" height="15" fill="rgb(218,30,26)"/><text x="15.1161%" y="191.50"></text></g><g><title>unsafety_check_result (375,434 samples, 0.74%)</title><rect x="15.0202%" y="165" width="0.7421%" height="15" fill="rgb(220,122,19)"/><text x="15.2702%" y="175.50"></text></g><g><title>mir_built (330,374 samples, 0.65%)</title><rect x="15.1093%" y="149" width="0.6531%" height="15" fill="rgb(250,228,42)"/><text x="15.3593%" y="159.50"></text></g><g><title>mir_promoted (552,776 samples, 1.09%)</title><rect x="14.6863%" y="197" width="1.0927%" height="15" fill="rgb(240,193,28)"/><text x="14.9363%" y="207.50"></text></g><g><title>MIR_borrow_checking (1,683,039 samples, 3.33%)</title><rect x="12.9314%" y="229" width="3.3269%" height="15" fill="rgb(216,20,37)"/><text x="13.1814%" y="239.50">MIR..</text></g><g><title>mir_borrowck (1,673,639 samples, 3.31%)</title><rect x="12.9500%" y="213" width="3.3083%" height="15" fill="rgb(206,188,39)"/><text x="13.2000%" y="223.50">mir..</text></g><g><title>type_op_prove_predicate (242,493 samples, 0.48%)</title><rect x="15.7790%" y="197" width="0.4793%" height="15" fill="rgb(217,207,13)"/><text x="16.0290%" y="207.50"></text></g><g><title>hir_module_items (91,491 samples, 0.18%)</title><rect x="16.2644%" y="229" width="0.1809%" height="15" fill="rgb(231,73,38)"/><text x="16.5144%" y="239.50"></text></g><g><title>get_lang_items (60,200 samples, 0.12%)</title><rect x="16.7478%" y="181" width="0.1190%" height="15" fill="rgb(225,20,46)"/><text x="16.9978%" y="191.50"></text></g><g><title>should_inherit_track_caller (70,821 samples, 0.14%)</title><rect x="16.8668%" y="181" width="0.1400%" height="15" fill="rgb(210,31,41)"/><text x="17.1168%" y="191.50"></text></g><g><title>codegen_fn_attrs (205,852 samples, 0.41%)</title><rect x="16.6545%" y="197" width="0.4069%" height="15" fill="rgb(221,200,47)"/><text x="16.9045%" y="207.50"></text></g><g><title>check_mod_attrs (287,693 samples, 0.57%)</title><rect x="16.4933%" y="213" width="0.5687%" height="15" fill="rgb(226,26,5)"/><text x="16.7433%" y="223.50"></text></g><g><title>lookup_stability (56,731 samples, 0.11%)</title><rect x="17.3308%" y="197" width="0.1121%" height="15" fill="rgb(249,33,26)"/><text x="17.5808%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (148,362 samples, 0.29%)</title><rect x="17.1721%" y="213" width="0.2933%" height="15" fill="rgb(235,183,28)"/><text x="17.4221%" y="223.50"></text></g><g><title>misc_checking_1 (551,006 samples, 1.09%)</title><rect x="16.4460%" y="229" width="1.0892%" height="15" fill="rgb(221,5,38)"/><text x="16.6960%" y="239.50"></text></g><g><title>misc_checking_2 (105,431 samples, 0.21%)</title><rect x="17.5352%" y="229" width="0.2084%" height="15" fill="rgb(247,18,42)"/><text x="17.7852%" y="239.50"></text></g><g><title>match_checking (70,741 samples, 0.14%)</title><rect x="17.6037%" y="213" width="0.1398%" height="15" fill="rgb(241,131,45)"/><text x="17.8537%" y="223.50"></text></g><g><title>check_match (67,411 samples, 0.13%)</title><rect x="17.6103%" y="197" width="0.1333%" height="15" fill="rgb(249,31,29)"/><text x="17.8603%" y="207.50"></text></g><g><title>death_checking (91,781 samples, 0.18%)</title><rect x="17.8305%" y="213" width="0.1814%" height="15" fill="rgb(225,111,53)"/><text x="18.0805%" y="223.50"></text></g><g><title>crate_lints (117,311 samples, 0.23%)</title><rect x="18.0143%" y="197" width="0.2319%" height="15" fill="rgb(238,160,17)"/><text x="18.2643%" y="207.50"></text></g><g><title>param_env (57,280 samples, 0.11%)</title><rect x="18.1330%" y="181" width="0.1132%" height="15" fill="rgb(214,148,48)"/><text x="18.3830%" y="191.50"></text></g><g><title>lint_checking (148,711 samples, 0.29%)</title><rect x="18.0120%" y="213" width="0.2940%" height="15" fill="rgb(232,36,49)"/><text x="18.2620%" y="223.50"></text></g><g><title>privacy_checking_modules (140,422 samples, 0.28%)</title><rect x="18.3867%" y="213" width="0.2776%" height="15" fill="rgb(209,103,24)"/><text x="18.6367%" y="223.50"></text></g><g><title>check_mod_privacy (139,262 samples, 0.28%)</title><rect x="18.3889%" y="197" width="0.2753%" height="15" fill="rgb(229,88,8)"/><text x="18.6389%" y="207.50"></text></g><g><title>misc_checking_3 (473,535 samples, 0.94%)</title><rect x="17.7436%" y="229" width="0.9361%" height="15" fill="rgb(213,181,19)"/><text x="17.9936%" y="239.50"></text></g><g><title>coherence_checking (91,621 samples, 0.18%)</title><rect x="18.7347%" y="213" width="0.1811%" height="15" fill="rgb(254,191,54)"/><text x="18.9847%" y="223.50"></text></g><g><title>adt_def (77,972 samples, 0.15%)</title><rect x="20.3863%" y="149" width="0.1541%" height="15" fill="rgb(241,83,37)"/><text x="20.6363%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (76,832 samples, 0.15%)</title><rect x="20.3885%" y="133" width="0.1519%" height="15" fill="rgb(233,36,39)"/><text x="20.6385%" y="143.50"></text></g><g><title>item_attrs (65,941 samples, 0.13%)</title><rect x="20.4101%" y="117" width="0.1303%" height="15" fill="rgb(226,3,54)"/><text x="20.6601%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (64,571 samples, 0.13%)</title><rect x="20.4128%" y="101" width="0.1276%" height="15" fill="rgb(245,192,40)"/><text x="20.6628%" y="111.50"></text></g><g><title>adt_sized_constraint (92,492 samples, 0.18%)</title><rect x="20.3707%" y="165" width="0.1828%" height="15" fill="rgb(238,167,29)"/><text x="20.6207%" y="175.50"></text></g><g><title>adt_def (166,781 samples, 0.33%)</title><rect x="20.7964%" y="117" width="0.3297%" height="15" fill="rgb(232,182,51)"/><text x="21.0464%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (165,801 samples, 0.33%)</title><rect x="20.7983%" y="101" width="0.3277%" height="15" fill="rgb(231,60,39)"/><text x="21.0483%" y="111.50"></text></g><g><title>impl_parent (95,753 samples, 0.19%)</title><rect x="21.3001%" y="53" width="0.1893%" height="15" fill="rgb(208,69,12)"/><text x="21.5501%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (75,552 samples, 0.15%)</title><rect x="21.3400%" y="37" width="0.1493%" height="15" fill="rgb(235,93,37)"/><text x="21.5900%" y="47.50"></text></g><g><title>impl_trait_ref (300,513 samples, 0.59%)</title><rect x="21.4893%" y="53" width="0.5940%" height="15" fill="rgb(213,116,39)"/><text x="21.7393%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (280,343 samples, 0.55%)</title><rect x="21.5292%" y="37" width="0.5542%" height="15" fill="rgb(222,207,29)"/><text x="21.7792%" y="47.50"></text></g><g><title>coherent_trait (500,656 samples, 0.99%)</title><rect x="21.1401%" y="85" width="0.9897%" height="15" fill="rgb(206,96,30)"/><text x="21.3901%" y="95.50"></text></g><g><title>specialization_graph_of (499,086 samples, 0.99%)</title><rect x="21.1432%" y="69" width="0.9866%" height="15" fill="rgb(218,138,4)"/><text x="21.3932%" y="79.50"></text></g><g><title>adt_destructor (512,366 samples, 1.01%)</title><rect x="21.1260%" y="117" width="1.0128%" height="15" fill="rgb(250,191,14)"/><text x="21.3760%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (511,126 samples, 1.01%)</title><rect x="21.1285%" y="101" width="1.0104%" height="15" fill="rgb(239,60,40)"/><text x="21.3785%" y="111.50"></text></g><g><title>adt_def (59,760 samples, 0.12%)</title><rect x="22.1462%" y="101" width="0.1181%" height="15" fill="rgb(206,27,48)"/><text x="22.3962%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (59,300 samples, 0.12%)</title><rect x="22.1471%" y="85" width="0.1172%" height="15" fill="rgb(225,35,8)"/><text x="22.3971%" y="95.50"></text></g><g><title>item_attrs (54,560 samples, 0.11%)</title><rect x="22.1565%" y="69" width="0.1079%" height="15" fill="rgb(250,213,24)"/><text x="22.4065%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (54,060 samples, 0.11%)</title><rect x="22.1575%" y="53" width="0.1069%" height="15" fill="rgb(247,123,22)"/><text x="22.4075%" y="63.50"></text></g><g><title>adt_dtorck_constraint (67,080 samples, 0.13%)</title><rect x="22.1388%" y="117" width="0.1326%" height="15" fill="rgb(231,138,38)"/><text x="22.3888%" y="127.50"></text></g><g><title>adt_dtorck_constraint (797,199 samples, 1.58%)</title><rect x="20.7662%" y="133" width="1.5758%" height="15" fill="rgb(231,145,46)"/><text x="21.0162%" y="143.50"></text></g><g><title>dropck_outlives (930,880 samples, 1.84%)</title><rect x="20.5535%" y="165" width="1.8401%" height="15" fill="rgb(251,118,11)"/><text x="20.8035%" y="175.50">d..</text></g><g><title>adt_dtorck_constraint (873,079 samples, 1.73%)</title><rect x="20.6677%" y="149" width="1.7258%" height="15" fill="rgb(217,147,25)"/><text x="20.9177%" y="159.50"></text></g><g><title>item_bodies_checking (1,851,020 samples, 3.66%)</title><rect x="18.9547%" y="213" width="3.6590%" height="15" fill="rgb(247,81,37)"/><text x="19.2047%" y="223.50">item..</text></g><g><title>typeck_item_bodies (1,849,590 samples, 3.66%)</title><rect x="18.9576%" y="197" width="3.6561%" height="15" fill="rgb(209,12,38)"/><text x="19.2076%" y="207.50">type..</text></g><g><title>typeck (1,842,180 samples, 3.64%)</title><rect x="18.9722%" y="181" width="3.6415%" height="15" fill="rgb(227,1,9)"/><text x="19.2222%" y="191.50">type..</text></g><g><title>item_types_checking (111,672 samples, 0.22%)</title><rect x="22.6137%" y="213" width="0.2207%" height="15" fill="rgb(248,47,43)"/><text x="22.8637%" y="223.50"></text></g><g><title>check_mod_item_types (110,182 samples, 0.22%)</title><rect x="22.6166%" y="197" width="0.2178%" height="15" fill="rgb(221,10,30)"/><text x="22.8666%" y="207.50"></text></g><g><title>fn_sig (435,855 samples, 0.86%)</title><rect x="23.0552%" y="181" width="0.8616%" height="15" fill="rgb(210,229,1)"/><text x="23.3052%" y="191.50"></text></g><g><title>named_region_map (58,160 samples, 0.11%)</title><rect x="24.0447%" y="165" width="0.1150%" height="15" fill="rgb(222,148,37)"/><text x="24.2947%" y="175.50"></text></g><g><title>generics_of (132,490 samples, 0.26%)</title><rect x="23.9168%" y="181" width="0.2619%" height="15" fill="rgb(234,67,33)"/><text x="24.1668%" y="191.50"></text></g><g><title>late_bound_vars_map (82,991 samples, 0.16%)</title><rect x="24.3681%" y="133" width="0.1641%" height="15" fill="rgb(247,98,35)"/><text x="24.6181%" y="143.50"></text></g><g><title>resolve_lifetimes (79,461 samples, 0.16%)</title><rect x="24.3751%" y="117" width="0.1571%" height="15" fill="rgb(247,138,52)"/><text x="24.6251%" y="127.50"></text></g><g><title>explicit_predicates_of (161,901 samples, 0.32%)</title><rect x="24.2565%" y="149" width="0.3200%" height="15" fill="rgb(213,79,30)"/><text x="24.5065%" y="159.50"></text></g><g><title>predicates_of (200,822 samples, 0.40%)</title><rect x="24.1866%" y="181" width="0.3970%" height="15" fill="rgb(246,177,23)"/><text x="24.4366%" y="191.50"></text></g><g><title>predicates_defined_on (186,911 samples, 0.37%)</title><rect x="24.2141%" y="165" width="0.3695%" height="15" fill="rgb(230,62,27)"/><text x="24.4641%" y="175.50"></text></g><g><title>super_predicates_of (191,692 samples, 0.38%)</title><rect x="24.5836%" y="181" width="0.3789%" height="15" fill="rgb(216,154,8)"/><text x="24.8336%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (179,102 samples, 0.35%)</title><rect x="24.6085%" y="165" width="0.3540%" height="15" fill="rgb(244,35,45)"/><text x="24.8585%" y="175.50"></text></g><g><title>type_collecting (1,098,283 samples, 2.17%)</title><rect x="22.8366%" y="213" width="2.1710%" height="15" fill="rgb(251,115,12)"/><text x="23.0866%" y="223.50">t..</text></g><g><title>collect_mod_item_types (1,088,922 samples, 2.15%)</title><rect x="22.8551%" y="197" width="2.1525%" height="15" fill="rgb(240,54,50)"/><text x="23.1051%" y="207.50">c..</text></g><g><title>evaluate_obligation (96,471 samples, 0.19%)</title><rect x="25.5709%" y="181" width="0.1907%" height="15" fill="rgb(233,84,52)"/><text x="25.8209%" y="191.50"></text></g><g><title>implied_outlives_bounds (61,300 samples, 0.12%)</title><rect x="25.7616%" y="181" width="0.1212%" height="15" fill="rgb(207,117,47)"/><text x="26.0116%" y="191.50"></text></g><g><title>check_impl_item_well_formed (461,815 samples, 0.91%)</title><rect x="25.0844%" y="197" width="0.9129%" height="15" fill="rgb(249,43,39)"/><text x="25.3344%" y="207.50"></text></g><g><title>param_env (127,992 samples, 0.25%)</title><rect x="26.8988%" y="181" width="0.2530%" height="15" fill="rgb(209,38,44)"/><text x="27.1488%" y="191.50"></text></g><g><title>predicates_of (55,230 samples, 0.11%)</title><rect x="27.1519%" y="181" width="0.1092%" height="15" fill="rgb(236,212,23)"/><text x="27.4019%" y="191.50"></text></g><g><title>check_item_well_formed (724,988 samples, 1.43%)</title><rect x="25.9973%" y="197" width="1.4331%" height="15" fill="rgb(242,79,21)"/><text x="26.2473%" y="207.50"></text></g><g><title>trait_impls_of (79,331 samples, 0.16%)</title><rect x="27.2735%" y="181" width="0.1568%" height="15" fill="rgb(211,96,35)"/><text x="27.5235%" y="191.50"></text></g><g><title>evaluate_obligation (467,886 samples, 0.92%)</title><rect x="28.4186%" y="181" width="0.9249%" height="15" fill="rgb(253,215,40)"/><text x="28.6686%" y="191.50"></text></g><g><title>trait_impls_of (88,951 samples, 0.18%)</title><rect x="29.1677%" y="165" width="0.1758%" height="15" fill="rgb(211,81,21)"/><text x="29.4177%" y="175.50"></text></g><g><title>implied_outlives_bounds (140,001 samples, 0.28%)</title><rect x="29.3839%" y="181" width="0.2767%" height="15" fill="rgb(208,190,38)"/><text x="29.6339%" y="191.50"></text></g><g><title>evaluate_obligation (138,961 samples, 0.27%)</title><rect x="29.8000%" y="165" width="0.2747%" height="15" fill="rgb(235,213,38)"/><text x="30.0500%" y="175.50"></text></g><g><title>layout_of (70,651 samples, 0.14%)</title><rect x="30.1311%" y="165" width="0.1397%" height="15" fill="rgb(237,122,38)"/><text x="30.3811%" y="175.50"></text></g><g><title>object_safety_violations (332,873 samples, 0.66%)</title><rect x="29.6606%" y="181" width="0.6580%" height="15" fill="rgb(244,218,35)"/><text x="29.9106%" y="191.50"></text></g><g><title>param_env (66,921 samples, 0.13%)</title><rect x="30.3186%" y="181" width="0.1323%" height="15" fill="rgb(240,68,47)"/><text x="30.5686%" y="191.50"></text></g><g><title>analysis (9,015,089 samples, 17.82%)</title><rect x="12.6847%" y="245" width="17.8204%" height="15" fill="rgb(210,16,53)"/><text x="12.9347%" y="255.50">analysis</text></g><g><title>type_check_crate (5,982,356 samples, 11.83%)</title><rect x="18.6796%" y="229" width="11.8255%" height="15" fill="rgb(235,124,12)"/><text x="18.9296%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,780,450 samples, 5.50%)</title><rect x="25.0089%" y="213" width="5.4962%" height="15" fill="rgb(224,169,11)"/><text x="25.2589%" y="223.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (1,555,487 samples, 3.07%)</title><rect x="27.4304%" y="197" width="3.0748%" height="15" fill="rgb(250,166,2)"/><text x="27.6804%" y="207.50">che..</text></g><g><title>codegen_module (211,843 samples, 0.42%)</title><rect x="31.4315%" y="229" width="0.4188%" height="15" fill="rgb(242,216,29)"/><text x="31.6815%" y="239.50"></text></g><g><title>codegen_crate (778,489 samples, 1.54%)</title><rect x="30.5255%" y="245" width="1.5389%" height="15" fill="rgb(230,116,27)"/><text x="30.7755%" y="255.50"></text></g><g><title>codegen_module_optimize (1,920,572 samples, 3.80%)</title><rect x="32.0644%" y="245" width="3.7965%" height="15" fill="rgb(228,99,48)"/><text x="32.3144%" y="255.50">code..</text></g><g><title>LLVM_module_optimize (398,604 samples, 0.79%)</title><rect x="35.0729%" y="229" width="0.7879%" height="15" fill="rgb(253,11,6)"/><text x="35.3229%" y="239.50"></text></g><g><title>LLVM_lto_optimize (223,642 samples, 0.44%)</title><rect x="36.6713%" y="229" width="0.4421%" height="15" fill="rgb(247,143,39)"/><text x="36.9213%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,309,495 samples, 4.57%)</title><rect x="37.1133%" y="229" width="4.5653%" height="15" fill="rgb(236,97,10)"/><text x="37.3633%" y="239.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,267,255 samples, 4.48%)</title><rect x="37.1968%" y="213" width="4.4818%" height="15" fill="rgb(233,208,19)"/><text x="37.4468%" y="223.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (2,985,733 samples, 5.90%)</title><rect x="35.8608%" y="245" width="5.9020%" height="15" fill="rgb(216,164,2)"/><text x="36.1108%" y="255.50">codegen_..</text></g><g><title>AST_validation (99,081 samples, 0.20%)</title><rect x="42.2185%" y="229" width="0.1959%" height="15" fill="rgb(220,129,5)"/><text x="42.4685%" y="239.50"></text></g><g><title>crate_injection (82,211 samples, 0.16%)</title><rect x="42.4754%" y="229" width="0.1625%" height="15" fill="rgb(242,17,10)"/><text x="42.7254%" y="239.50"></text></g><g><title>metadata_load_macro (50,780 samples, 0.10%)</title><rect x="63.8772%" y="197" width="0.1004%" height="15" fill="rgb(242,107,0)"/><text x="64.1272%" y="207.50"></text></g><g><title>macro_expand_crate (13,454,808 samples, 26.60%)</title><rect x="42.6379%" y="229" width="26.5965%" height="15" fill="rgb(251,28,31)"/><text x="42.8879%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (13,439,037 samples, 26.57%)</title><rect x="42.6691%" y="213" width="26.5654%" height="15" fill="rgb(233,223,10)"/><text x="42.9191%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,659,359 samples, 5.26%)</title><rect x="63.9776%" y="197" width="5.2568%" height="15" fill="rgb(215,21,27)"/><text x="64.2276%" y="207.50">metada..</text></g><g><title>metadata_register_crate (972,350 samples, 1.92%)</title><rect x="67.3123%" y="181" width="1.9221%" height="15" fill="rgb(232,23,21)"/><text x="67.5623%" y="191.50">m..</text></g><g><title>metadata_register_crate (77,300 samples, 0.15%)</title><rect x="69.0816%" y="165" width="0.1528%" height="15" fill="rgb(244,5,23)"/><text x="69.3316%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (329,433 samples, 0.65%)</title><rect x="69.2620%" y="229" width="0.6512%" height="15" fill="rgb(226,81,46)"/><text x="69.5120%" y="239.50"></text></g><g><title>finalize_macro_resolutions (211,323 samples, 0.42%)</title><rect x="70.0127%" y="213" width="0.4177%" height="15" fill="rgb(247,70,30)"/><text x="70.2627%" y="223.50"></text></g><g><title>late_resolve_crate (160,272 samples, 0.32%)</title><rect x="70.4304%" y="213" width="0.3168%" height="15" fill="rgb(212,68,19)"/><text x="70.6804%" y="223.50"></text></g><g><title>configure_and_expand (14,718,232 samples, 29.09%)</title><rect x="41.7628%" y="245" width="29.0940%" height="15" fill="rgb(240,187,13)"/><text x="42.0128%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (477,345 samples, 0.94%)</title><rect x="69.9132%" y="229" width="0.9436%" height="15" fill="rgb(223,113,26)"/><text x="70.1632%" y="239.50"></text></g><g><title>drop_ast (97,801 samples, 0.19%)</title><rect x="70.8568%" y="245" width="0.1933%" height="15" fill="rgb(206,192,2)"/><text x="71.1068%" y="255.50"></text></g><g><title>early_lint_checks (174,382 samples, 0.34%)</title><rect x="71.0772%" y="245" width="0.3447%" height="15" fill="rgb(241,108,4)"/><text x="71.3272%" y="255.50"></text></g><g><title>free_global_ctxt (2,034,323 samples, 4.02%)</title><rect x="71.4219%" y="245" width="4.0213%" height="15" fill="rgb(247,173,49)"/><text x="71.6719%" y="255.50">free..</text></g><g><title>crate_hash (67,030 samples, 0.13%)</title><rect x="76.3534%" y="229" width="0.1325%" height="15" fill="rgb(224,114,35)"/><text x="76.6034%" y="239.50"></text></g><g><title>layout_of (80,822 samples, 0.16%)</title><rect x="77.3288%" y="181" width="0.1598%" height="15" fill="rgb(245,159,27)"/><text x="77.5788%" y="191.50"></text></g><g><title>layout_of (148,902 samples, 0.29%)</title><rect x="77.2369%" y="197" width="0.2943%" height="15" fill="rgb(245,172,44)"/><text x="77.4869%" y="207.50"></text></g><g><title>layout_of (222,842 samples, 0.44%)</title><rect x="77.1317%" y="213" width="0.4405%" height="15" fill="rgb(236,23,11)"/><text x="77.3817%" y="223.50"></text></g><g><title>optimized_mir (747,627 samples, 1.48%)</title><rect x="76.6882%" y="229" width="1.4779%" height="15" fill="rgb(205,117,38)"/><text x="76.9382%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (300,402 samples, 0.59%)</title><rect x="77.5722%" y="213" width="0.5938%" height="15" fill="rgb(237,72,25)"/><text x="77.8222%" y="223.50"></text></g><g><title>generate_crate_metadata (1,412,086 samples, 2.79%)</title><rect x="75.4432%" y="245" width="2.7913%" height="15" fill="rgb(244,70,9)"/><text x="75.6932%" y="255.50">ge..</text></g><g><title>hir_lowering (2,002,352 samples, 3.96%)</title><rect x="78.2345%" y="245" width="3.9581%" height="15" fill="rgb(217,125,39)"/><text x="78.4845%" y="255.50">hir_..</text></g><g><title>finish_ongoing_codegen (3,524,249 samples, 6.97%)</title><rect x="82.2145%" y="229" width="6.9665%" height="15" fill="rgb(235,36,10)"/><text x="82.4645%" y="239.50">finish_on..</text></g><g><title>link_crate (594,536 samples, 1.18%)</title><rect x="89.1810%" y="229" width="1.1752%" height="15" fill="rgb(251,123,47)"/><text x="89.4310%" y="239.50"></text></g><g><title>link_binary (584,536 samples, 1.16%)</title><rect x="89.2007%" y="213" width="1.1555%" height="15" fill="rgb(221,13,13)"/><text x="89.4507%" y="223.50"></text></g><g><title>link_rlib (380,334 samples, 0.75%)</title><rect x="89.6044%" y="197" width="0.7518%" height="15" fill="rgb(238,131,9)"/><text x="89.8544%" y="207.50"></text></g><g><title>link (4,136,705 samples, 8.18%)</title><rect x="82.1927%" y="245" width="8.1772%" height="15" fill="rgb(211,50,8)"/><text x="82.4427%" y="255.50">link</text></g><g><title>parse_crate (3,710,961 samples, 7.34%)</title><rect x="90.3698%" y="245" width="7.3356%" height="15" fill="rgb(245,182,24)"/><text x="90.6198%" y="255.50">parse_crate</text></g><g><title>prepare_outputs (346,004 samples, 0.68%)</title><rect x="97.7256%" y="245" width="0.6840%" height="15" fill="rgb(242,14,37)"/><text x="97.9756%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (350,004 samples, 0.69%)</title><rect x="98.4095%" y="245" width="0.6919%" height="15" fill="rgb(246,228,12)"/><text x="98.6595%" y="255.50"></text></g><g><title>setup_global_ctxt (125,591 samples, 0.25%)</title><rect x="99.1032%" y="245" width="0.2483%" height="15" fill="rgb(213,55,15)"/><text x="99.3532%" y="255.50"></text></g><g><title>all (50,588,559 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (50,588,559 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (328,063 samples, 0.65%)</title><rect x="99.3515%" y="245" width="0.6485%" height="15" fill="rgb(209,121,21)"/><text x="99.6015%" y="255.50"></text></g></svg></svg>