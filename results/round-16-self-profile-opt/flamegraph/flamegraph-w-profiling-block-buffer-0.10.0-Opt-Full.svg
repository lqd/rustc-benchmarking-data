<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (13,531,055 samples, 12.22%)</title><rect x="0.3648%" y="197" width="12.2187%" height="15" fill="rgb(227,0,7)"/><text x="0.6148%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (138,361 samples, 0.12%)</title><rect x="12.4586%" y="181" width="0.1249%" height="15" fill="rgb(217,0,24)"/><text x="12.7086%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (125,411 samples, 0.11%)</title><rect x="12.4703%" y="165" width="0.1132%" height="15" fill="rgb(221,193,54)"/><text x="12.7203%" y="175.50"></text></g><g><title>implied_outlives_bounds (339,724 samples, 0.31%)</title><rect x="18.8954%" y="149" width="0.3068%" height="15" fill="rgb(248,212,6)"/><text x="19.1454%" y="159.50"></text></g><g><title>param_env (194,063 samples, 0.18%)</title><rect x="20.0484%" y="117" width="0.1752%" height="15" fill="rgb(208,68,35)"/><text x="20.2984%" y="127.50"></text></g><g><title>item_attrs (178,892 samples, 0.16%)</title><rect x="20.5185%" y="85" width="0.1615%" height="15" fill="rgb(232,128,0)"/><text x="20.7685%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (173,192 samples, 0.16%)</title><rect x="20.5236%" y="69" width="0.1564%" height="15" fill="rgb(207,160,47)"/><text x="20.7736%" y="79.50"></text></g><g><title>codegen_fn_attrs (249,946 samples, 0.23%)</title><rect x="20.4643%" y="101" width="0.2257%" height="15" fill="rgb(228,23,34)"/><text x="20.7143%" y="111.50"></text></g><g><title>is_copy_raw (276,573 samples, 0.25%)</title><rect x="22.0863%" y="85" width="0.2497%" height="15" fill="rgb(218,30,26)"/><text x="22.3363%" y="95.50"></text></g><g><title>evaluate_obligation (216,083 samples, 0.20%)</title><rect x="22.1409%" y="69" width="0.1951%" height="15" fill="rgb(220,122,19)"/><text x="22.3909%" y="79.50"></text></g><g><title>is_copy_raw (358,664 samples, 0.32%)</title><rect x="22.4814%" y="69" width="0.3239%" height="15" fill="rgb(250,228,42)"/><text x="22.7314%" y="79.50"></text></g><g><title>evaluate_obligation (288,923 samples, 0.26%)</title><rect x="22.5444%" y="53" width="0.2609%" height="15" fill="rgb(240,193,28)"/><text x="22.7944%" y="63.50"></text></g><g><title>needs_drop_raw (548,175 samples, 0.50%)</title><rect x="22.3378%" y="85" width="0.4950%" height="15" fill="rgb(216,20,37)"/><text x="22.5878%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (370,054 samples, 0.33%)</title><rect x="22.9588%" y="69" width="0.3342%" height="15" fill="rgb(206,188,39)"/><text x="23.2088%" y="79.50"></text></g><g><title>specialization_graph_of (346,533 samples, 0.31%)</title><rect x="23.3209%" y="69" width="0.3129%" height="15" fill="rgb(217,207,13)"/><text x="23.5709%" y="79.50"></text></g><g><title>impl_trait_ref (167,993 samples, 0.15%)</title><rect x="23.4821%" y="53" width="0.1517%" height="15" fill="rgb(231,73,38)"/><text x="23.7321%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (143,842 samples, 0.13%)</title><rect x="23.5040%" y="37" width="0.1299%" height="15" fill="rgb(225,20,46)"/><text x="23.7540%" y="47.50"></text></g><g><title>resolve_instance (941,228 samples, 0.85%)</title><rect x="22.8328%" y="85" width="0.8499%" height="15" fill="rgb(210,31,41)"/><text x="23.0828%" y="95.50"></text></g><g><title>thir_body (567,036 samples, 0.51%)</title><rect x="23.6933%" y="85" width="0.5120%" height="15" fill="rgb(221,200,47)"/><text x="23.9433%" y="95.50"></text></g><g><title>mir_const (5,063,284 samples, 4.57%)</title><rect x="19.6405%" y="133" width="4.5722%" height="15" fill="rgb(226,26,5)"/><text x="19.8905%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (4,417,466 samples, 3.99%)</title><rect x="20.2236%" y="117" width="3.9890%" height="15" fill="rgb(249,33,26)"/><text x="20.4736%" y="127.50">unsa..</text></g><g><title>mir_built (3,901,006 samples, 3.52%)</title><rect x="20.6900%" y="101" width="3.5226%" height="15" fill="rgb(235,183,28)"/><text x="20.9400%" y="111.50">mir..</text></g><g><title>mir_promoted (5,498,295 samples, 4.97%)</title><rect x="19.2669%" y="149" width="4.9650%" height="15" fill="rgb(221,5,38)"/><text x="19.5169%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (151,142 samples, 0.14%)</title><rect x="24.2319%" y="149" width="0.1365%" height="15" fill="rgb(247,18,42)"/><text x="24.4819%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (539,946 samples, 0.49%)</title><rect x="24.3684%" y="149" width="0.4876%" height="15" fill="rgb(241,131,45)"/><text x="24.6184%" y="159.50"></text></g><g><title>normalize_projection_ty (329,684 samples, 0.30%)</title><rect x="24.5583%" y="133" width="0.2977%" height="15" fill="rgb(249,31,29)"/><text x="24.8083%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,654,246 samples, 1.49%)</title><rect x="24.9356%" y="149" width="1.4938%" height="15" fill="rgb(225,111,53)"/><text x="25.1856%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,157,041 samples, 13.69%)</title><rect x="12.7448%" y="181" width="13.6870%" height="15" fill="rgb(238,160,17)"/><text x="12.9948%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,100,741 samples, 13.64%)</title><rect x="12.7957%" y="165" width="13.6361%" height="15" fill="rgb(214,148,48)"/><text x="13.0457%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (224,822 samples, 0.20%)</title><rect x="26.6717%" y="149" width="0.2030%" height="15" fill="rgb(232,36,49)"/><text x="26.9217%" y="159.50"></text></g><g><title>check_mod_attrs (355,155 samples, 0.32%)</title><rect x="26.5542%" y="165" width="0.3207%" height="15" fill="rgb(209,103,24)"/><text x="26.8042%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (173,812 samples, 0.16%)</title><rect x="26.9772%" y="165" width="0.1570%" height="15" fill="rgb(229,88,8)"/><text x="27.2272%" y="175.50"></text></g><g><title>misc_checking_1 (692,997 samples, 0.63%)</title><rect x="26.5412%" y="181" width="0.6258%" height="15" fill="rgb(213,181,19)"/><text x="26.7912%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (226,232 samples, 0.20%)</title><rect x="27.1681%" y="165" width="0.2043%" height="15" fill="rgb(254,191,54)"/><text x="27.4181%" y="175.50"></text></g><g><title>check_mod_liveness (175,642 samples, 0.16%)</title><rect x="27.2138%" y="149" width="0.1586%" height="15" fill="rgb(241,83,37)"/><text x="27.4638%" y="159.50"></text></g><g><title>misc_checking_2 (475,325 samples, 0.43%)</title><rect x="27.1669%" y="181" width="0.4292%" height="15" fill="rgb(233,36,39)"/><text x="27.4169%" y="191.50"></text></g><g><title>match_checking (247,783 samples, 0.22%)</title><rect x="27.3724%" y="165" width="0.2238%" height="15" fill="rgb(226,3,54)"/><text x="27.6224%" y="175.50"></text></g><g><title>check_match (233,673 samples, 0.21%)</title><rect x="27.3852%" y="149" width="0.2110%" height="15" fill="rgb(245,192,40)"/><text x="27.6352%" y="159.50"></text></g><g><title>check_private_in_public (116,872 samples, 0.11%)</title><rect x="27.6024%" y="165" width="0.1055%" height="15" fill="rgb(238,167,29)"/><text x="27.8524%" y="175.50"></text></g><g><title>death_checking (243,472 samples, 0.22%)</title><rect x="27.7080%" y="165" width="0.2199%" height="15" fill="rgb(232,182,51)"/><text x="27.9580%" y="175.50"></text></g><g><title>param_env (143,322 samples, 0.13%)</title><rect x="28.1906%" y="133" width="0.1294%" height="15" fill="rgb(231,60,39)"/><text x="28.4406%" y="143.50"></text></g><g><title>crate_lints (725,318 samples, 0.65%)</title><rect x="27.9290%" y="149" width="0.6550%" height="15" fill="rgb(208,69,12)"/><text x="28.1790%" y="159.50"></text></g><g><title>type_of (291,103 samples, 0.26%)</title><rect x="28.3211%" y="133" width="0.2629%" height="15" fill="rgb(235,93,37)"/><text x="28.5711%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (209,961 samples, 0.19%)</title><rect x="28.3944%" y="117" width="0.1896%" height="15" fill="rgb(213,116,39)"/><text x="28.6444%" y="127.50"></text></g><g><title>lint_checking (918,420 samples, 0.83%)</title><rect x="27.9278%" y="165" width="0.8293%" height="15" fill="rgb(222,207,29)"/><text x="28.1778%" y="175.50"></text></g><g><title>module_lints (191,812 samples, 0.17%)</title><rect x="28.5840%" y="149" width="0.1732%" height="15" fill="rgb(206,96,30)"/><text x="28.8340%" y="159.50"></text></g><g><title>lint_mod (189,202 samples, 0.17%)</title><rect x="28.5863%" y="133" width="0.1709%" height="15" fill="rgb(218,138,4)"/><text x="28.8363%" y="143.50"></text></g><g><title>privacy_access_levels (197,292 samples, 0.18%)</title><rect x="28.7572%" y="165" width="0.1782%" height="15" fill="rgb(250,191,14)"/><text x="29.0072%" y="175.50"></text></g><g><title>privacy_checking_modules (476,465 samples, 0.43%)</title><rect x="28.9353%" y="165" width="0.4303%" height="15" fill="rgb(239,60,40)"/><text x="29.1853%" y="175.50"></text></g><g><title>check_mod_privacy (474,505 samples, 0.43%)</title><rect x="28.9371%" y="149" width="0.4285%" height="15" fill="rgb(206,27,48)"/><text x="29.1871%" y="159.50"></text></g><g><title>misc_checking_3 (1,967,411 samples, 1.78%)</title><rect x="27.5962%" y="181" width="1.7766%" height="15" fill="rgb(225,35,8)"/><text x="27.8462%" y="191.50">m..</text></g><g><title>impl_parent (465,836 samples, 0.42%)</title><rect x="30.2833%" y="117" width="0.4207%" height="15" fill="rgb(250,213,24)"/><text x="30.5333%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (246,574 samples, 0.22%)</title><rect x="30.4813%" y="101" width="0.2227%" height="15" fill="rgb(247,123,22)"/><text x="30.7313%" y="111.50"></text></g><g><title>impl_trait_ref (1,211,513 samples, 1.09%)</title><rect x="30.7040%" y="117" width="1.0940%" height="15" fill="rgb(231,138,38)"/><text x="30.9540%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (993,561 samples, 0.90%)</title><rect x="30.9008%" y="101" width="0.8972%" height="15" fill="rgb(231,145,46)"/><text x="31.1508%" y="111.50"></text></g><g><title>coherent_trait (2,807,760 samples, 2.54%)</title><rect x="29.4197%" y="149" width="2.5354%" height="15" fill="rgb(251,118,11)"/><text x="29.6697%" y="159.50">co..</text></g><g><title>specialization_graph_of (2,677,429 samples, 2.42%)</title><rect x="29.5374%" y="133" width="2.4177%" height="15" fill="rgb(217,147,25)"/><text x="29.7874%" y="143.50">sp..</text></g><g><title>trait_impls_of (172,823 samples, 0.16%)</title><rect x="31.7991%" y="117" width="0.1561%" height="15" fill="rgb(247,81,37)"/><text x="32.0491%" y="127.50"></text></g><g><title>coherence_checking (2,861,181 samples, 2.58%)</title><rect x="29.4072%" y="165" width="2.5837%" height="15" fill="rgb(209,12,38)"/><text x="29.6572%" y="175.50">co..</text></g><g><title>associated_item (458,194 samples, 0.41%)</title><rect x="45.2690%" y="101" width="0.4138%" height="15" fill="rgb(227,1,9)"/><text x="45.5190%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (355,794 samples, 0.32%)</title><rect x="45.3614%" y="85" width="0.3213%" height="15" fill="rgb(248,47,43)"/><text x="45.6114%" y="95.50"></text></g><g><title>associated_items (638,667 samples, 0.58%)</title><rect x="45.1276%" y="117" width="0.5767%" height="15" fill="rgb(221,10,30)"/><text x="45.3776%" y="127.50"></text></g><g><title>dropck_outlives (210,744 samples, 0.19%)</title><rect x="45.7463%" y="117" width="0.1903%" height="15" fill="rgb(210,229,1)"/><text x="45.9963%" y="127.50"></text></g><g><title>eval_to_const_value_raw (273,153 samples, 0.25%)</title><rect x="45.9426%" y="117" width="0.2467%" height="15" fill="rgb(222,148,37)"/><text x="46.1926%" y="127.50"></text></g><g><title>eval_to_const_value_raw (259,473 samples, 0.23%)</title><rect x="45.9549%" y="101" width="0.2343%" height="15" fill="rgb(234,67,33)"/><text x="46.2049%" y="111.50"></text></g><g><title>eval_to_allocation_raw (252,573 samples, 0.23%)</title><rect x="45.9611%" y="85" width="0.2281%" height="15" fill="rgb(247,98,35)"/><text x="46.2111%" y="95.50"></text></g><g><title>predicates_of (125,032 samples, 0.11%)</title><rect x="47.7521%" y="101" width="0.1129%" height="15" fill="rgb(247,138,52)"/><text x="48.0021%" y="111.50"></text></g><g><title>specializes (196,822 samples, 0.18%)</title><rect x="47.8650%" y="101" width="0.1777%" height="15" fill="rgb(213,79,30)"/><text x="48.1150%" y="111.50"></text></g><g><title>param_env (159,422 samples, 0.14%)</title><rect x="47.8988%" y="85" width="0.1440%" height="15" fill="rgb(246,177,23)"/><text x="48.1488%" y="95.50"></text></g><g><title>trait_impls_of (243,281 samples, 0.22%)</title><rect x="48.0526%" y="101" width="0.2197%" height="15" fill="rgb(230,62,27)"/><text x="48.3026%" y="111.50"></text></g><g><title>evaluate_obligation (2,314,451 samples, 2.09%)</title><rect x="46.1892%" y="117" width="2.0900%" height="15" fill="rgb(216,154,8)"/><text x="46.4392%" y="127.50">e..</text></g><g><title>item_attrs (128,442 samples, 0.12%)</title><rect x="48.5734%" y="117" width="0.1160%" height="15" fill="rgb(244,35,45)"/><text x="48.8234%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,531 samples, 0.11%)</title><rect x="48.5778%" y="101" width="0.1115%" height="15" fill="rgb(251,115,12)"/><text x="48.8278%" y="111.50"></text></g><g><title>evaluate_obligation (169,125 samples, 0.15%)</title><rect x="48.9090%" y="101" width="0.1527%" height="15" fill="rgb(240,54,50)"/><text x="49.1590%" y="111.50"></text></g><g><title>method_autoderef_steps (378,398 samples, 0.34%)</title><rect x="48.7303%" y="117" width="0.3417%" height="15" fill="rgb(233,84,52)"/><text x="48.9803%" y="127.50"></text></g><g><title>object_safety_violations (338,904 samples, 0.31%)</title><rect x="49.0732%" y="117" width="0.3060%" height="15" fill="rgb(207,117,47)"/><text x="49.3232%" y="127.50"></text></g><g><title>predicates_of (267,070 samples, 0.24%)</title><rect x="49.4053%" y="117" width="0.2412%" height="15" fill="rgb(249,43,39)"/><text x="49.6553%" y="127.50"></text></g><g><title>predicates_defined_on (171,510 samples, 0.15%)</title><rect x="49.4916%" y="101" width="0.1549%" height="15" fill="rgb(209,38,44)"/><text x="49.7416%" y="111.50"></text></g><g><title>evaluate_obligation (125,952 samples, 0.11%)</title><rect x="50.6829%" y="101" width="0.1137%" height="15" fill="rgb(236,212,23)"/><text x="50.9329%" y="111.50"></text></g><g><title>typeck (1,255,773 samples, 1.13%)</title><rect x="49.7665%" y="117" width="1.1340%" height="15" fill="rgb(242,79,21)"/><text x="50.0165%" y="127.50"></text></g><g><title>item_bodies_checking (20,943,512 samples, 18.91%)</title><rect x="32.0081%" y="165" width="18.9122%" height="15" fill="rgb(211,96,35)"/><text x="32.2581%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (20,941,492 samples, 18.91%)</title><rect x="32.0100%" y="149" width="18.9104%" height="15" fill="rgb(253,215,40)"/><text x="32.2600%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (20,903,022 samples, 18.88%)</title><rect x="32.0447%" y="133" width="18.8756%" height="15" fill="rgb(211,81,21)"/><text x="32.2947%" y="143.50">typeck</text></g><g><title>item_types_checking (398,674 samples, 0.36%)</title><rect x="50.9203%" y="165" width="0.3600%" height="15" fill="rgb(208,190,38)"/><text x="51.1703%" y="175.50"></text></g><g><title>check_mod_item_types (395,714 samples, 0.36%)</title><rect x="50.9230%" y="149" width="0.3573%" height="15" fill="rgb(235,213,38)"/><text x="51.1730%" y="159.50"></text></g><g><title>fn_sig (148,831 samples, 0.13%)</title><rect x="51.4242%" y="133" width="0.1344%" height="15" fill="rgb(237,122,38)"/><text x="51.6742%" y="143.50"></text></g><g><title>generics_of (126,231 samples, 0.11%)</title><rect x="51.5586%" y="133" width="0.1140%" height="15" fill="rgb(244,218,35)"/><text x="51.8086%" y="143.50"></text></g><g><title>late_bound_vars_map (222,393 samples, 0.20%)</title><rect x="51.9665%" y="85" width="0.2008%" height="15" fill="rgb(240,68,47)"/><text x="52.2165%" y="95.50"></text></g><g><title>resolve_lifetimes (215,313 samples, 0.19%)</title><rect x="51.9729%" y="69" width="0.1944%" height="15" fill="rgb(210,16,53)"/><text x="52.2229%" y="79.50"></text></g><g><title>explicit_predicates_of (505,255 samples, 0.46%)</title><rect x="51.7499%" y="101" width="0.4563%" height="15" fill="rgb(235,124,12)"/><text x="51.9999%" y="111.50"></text></g><g><title>predicates_of (645,597 samples, 0.58%)</title><rect x="51.6889%" y="133" width="0.5830%" height="15" fill="rgb(224,169,11)"/><text x="51.9389%" y="143.50"></text></g><g><title>predicates_defined_on (621,117 samples, 0.56%)</title><rect x="51.7110%" y="117" width="0.5609%" height="15" fill="rgb(250,166,2)"/><text x="51.9610%" y="127.50"></text></g><g><title>type_collecting (1,227,603 samples, 1.11%)</title><rect x="51.2816%" y="165" width="1.1085%" height="15" fill="rgb(242,216,29)"/><text x="51.5316%" y="175.50"></text></g><g><title>collect_mod_item_types (1,219,223 samples, 1.10%)</title><rect x="51.2891%" y="149" width="1.1010%" height="15" fill="rgb(230,116,27)"/><text x="51.5391%" y="159.50"></text></g><g><title>evaluate_obligation (315,916 samples, 0.29%)</title><rect x="54.4876%" y="133" width="0.2853%" height="15" fill="rgb(228,99,48)"/><text x="54.7376%" y="143.50"></text></g><g><title>implied_outlives_bounds (534,736 samples, 0.48%)</title><rect x="54.7729%" y="133" width="0.4829%" height="15" fill="rgb(253,11,6)"/><text x="55.0229%" y="143.50"></text></g><g><title>param_env (488,344 samples, 0.44%)</title><rect x="55.2558%" y="133" width="0.4410%" height="15" fill="rgb(247,143,39)"/><text x="55.5058%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,787,161 samples, 3.42%)</title><rect x="52.4883%" y="149" width="3.4198%" height="15" fill="rgb(236,97,10)"/><text x="52.7383%" y="159.50">che..</text></g><g><title>region_scope_tree (203,612 samples, 0.18%)</title><rect x="55.7243%" y="133" width="0.1839%" height="15" fill="rgb(233,208,19)"/><text x="55.9743%" y="143.50"></text></g><g><title>evaluate_obligation (207,804 samples, 0.19%)</title><rect x="56.8991%" y="133" width="0.1876%" height="15" fill="rgb(216,164,2)"/><text x="57.1491%" y="143.50"></text></g><g><title>implied_outlives_bounds (148,542 samples, 0.13%)</title><rect x="57.0921%" y="133" width="0.1341%" height="15" fill="rgb(220,129,5)"/><text x="57.3421%" y="143.50"></text></g><g><title>param_env (354,384 samples, 0.32%)</title><rect x="57.2369%" y="133" width="0.3200%" height="15" fill="rgb(242,17,10)"/><text x="57.4869%" y="143.50"></text></g><g><title>check_item_well_formed (1,944,232 samples, 1.76%)</title><rect x="55.9081%" y="149" width="1.7557%" height="15" fill="rgb(242,107,0)"/><text x="56.1581%" y="159.50"></text></g><g><title>analysis (50,260,003 samples, 45.39%)</title><rect x="12.5835%" y="197" width="45.3853%" height="15" fill="rgb(251,28,31)"/><text x="12.8335%" y="207.50">analysis</text></g><g><title>type_check_crate (31,667,486 samples, 28.60%)</title><rect x="29.3728%" y="181" width="28.5961%" height="15" fill="rgb(233,223,10)"/><text x="29.6228%" y="191.50">type_check_crate</text></g><g><title>wf_checking (6,174,906 samples, 5.58%)</title><rect x="52.3928%" y="165" width="5.5760%" height="15" fill="rgb(215,21,27)"/><text x="52.6428%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (337,792 samples, 0.31%)</title><rect x="57.6638%" y="149" width="0.3050%" height="15" fill="rgb(232,23,21)"/><text x="57.9138%" y="159.50"></text></g><g><title>is_unpin_raw (135,671 samples, 0.12%)</title><rect x="59.2927%" y="149" width="0.1225%" height="15" fill="rgb(244,5,23)"/><text x="59.5427%" y="159.50"></text></g><g><title>evaluate_obligation (129,661 samples, 0.12%)</title><rect x="59.2981%" y="133" width="0.1171%" height="15" fill="rgb(226,81,46)"/><text x="59.5481%" y="143.50"></text></g><g><title>fn_abi_of_instance (340,914 samples, 0.31%)</title><rect x="59.1808%" y="165" width="0.3078%" height="15" fill="rgb(247,70,30)"/><text x="59.4308%" y="175.50"></text></g><g><title>codegen_module (987,671 samples, 0.89%)</title><rect x="58.6472%" y="181" width="0.8919%" height="15" fill="rgb(212,68,19)"/><text x="58.8972%" y="191.50"></text></g><g><title>optimized_mir (163,242 samples, 0.15%)</title><rect x="59.6290%" y="133" width="0.1474%" height="15" fill="rgb(240,187,13)"/><text x="59.8790%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (248,563 samples, 0.22%)</title><rect x="59.5549%" y="149" width="0.2245%" height="15" fill="rgb(223,113,26)"/><text x="59.8049%" y="159.50"></text></g><g><title>monomorphization_collector (269,823 samples, 0.24%)</title><rect x="59.5529%" y="165" width="0.2437%" height="15" fill="rgb(206,192,2)"/><text x="59.8029%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (321,143 samples, 0.29%)</title><rect x="59.5394%" y="181" width="0.2900%" height="15" fill="rgb(241,108,4)"/><text x="59.7894%" y="191.50"></text></g><g><title>codegen_crate (2,071,912 samples, 1.87%)</title><rect x="57.9738%" y="197" width="1.8710%" height="15" fill="rgb(247,173,49)"/><text x="58.2238%" y="207.50">c..</text></g><g><title>codegen_module_optimize (4,280,566 samples, 3.87%)</title><rect x="59.8448%" y="197" width="3.8654%" height="15" fill="rgb(224,114,35)"/><text x="60.0948%" y="207.50">code..</text></g><g><title>LLVM_module_optimize (3,527,018 samples, 3.18%)</title><rect x="60.5253%" y="181" width="3.1849%" height="15" fill="rgb(245,159,27)"/><text x="60.7753%" y="191.50">LLV..</text></g><g><title>LLVM_lto_optimize (1,976,431 samples, 1.78%)</title><rect x="64.2170%" y="181" width="1.7847%" height="15" fill="rgb(245,172,44)"/><text x="64.4670%" y="191.50">L..</text></g><g><title>LLVM_module_codegen (6,042,514 samples, 5.46%)</title><rect x="66.0017%" y="181" width="5.4565%" height="15" fill="rgb(236,23,11)"/><text x="66.2517%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (5,940,453 samples, 5.36%)</title><rect x="66.0939%" y="165" width="5.3643%" height="15" fill="rgb(205,117,38)"/><text x="66.3439%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (8,644,012 samples, 7.81%)</title><rect x="63.7102%" y="197" width="7.8056%" height="15" fill="rgb(237,72,25)"/><text x="63.9602%" y="207.50">codegen_mod..</text></g><g><title>metadata_register_crate (166,852 samples, 0.15%)</title><rect x="77.4902%" y="149" width="0.1507%" height="15" fill="rgb(244,70,9)"/><text x="77.7402%" y="159.50"></text></g><g><title>macro_expand_crate (6,521,919 samples, 5.89%)</title><rect x="71.7681%" y="181" width="5.8894%" height="15" fill="rgb(217,125,39)"/><text x="72.0181%" y="191.50">macro_e..</text></g><g><title>expand_crate (6,509,719 samples, 5.88%)</title><rect x="71.7791%" y="165" width="5.8783%" height="15" fill="rgb(235,36,10)"/><text x="72.0291%" y="175.50">expand_..</text></g><g><title>late_resolve_crate (1,064,522 samples, 0.96%)</title><rect x="77.8399%" y="165" width="0.9613%" height="15" fill="rgb(251,123,47)"/><text x="78.0899%" y="175.50"></text></g><g><title>configure_and_expand (8,128,266 samples, 7.34%)</title><rect x="71.5158%" y="197" width="7.3399%" height="15" fill="rgb(221,13,13)"/><text x="71.7658%" y="207.50">configure_..</text></g><g><title>resolve_crate (1,222,663 samples, 1.10%)</title><rect x="77.7516%" y="181" width="1.1041%" height="15" fill="rgb(238,131,9)"/><text x="78.0016%" y="191.50"></text></g><g><title>early_lint_checks (203,272 samples, 0.18%)</title><rect x="78.9623%" y="197" width="0.1836%" height="15" fill="rgb(211,50,8)"/><text x="79.2123%" y="207.50"></text></g><g><title>free_global_ctxt (1,619,858 samples, 1.46%)</title><rect x="79.1458%" y="197" width="1.4627%" height="15" fill="rgb(245,182,24)"/><text x="79.3958%" y="207.50"></text></g><g><title>exported_symbols (123,962 samples, 0.11%)</title><rect x="81.4116%" y="181" width="0.1119%" height="15" fill="rgb(242,14,37)"/><text x="81.6616%" y="191.50"></text></g><g><title>is_sized_raw (190,842 samples, 0.17%)</title><rect x="83.2697%" y="149" width="0.1723%" height="15" fill="rgb(246,228,12)"/><text x="83.5197%" y="159.50"></text></g><g><title>evaluate_obligation (155,631 samples, 0.14%)</title><rect x="83.3015%" y="133" width="0.1405%" height="15" fill="rgb(213,55,15)"/><text x="83.5515%" y="143.50"></text></g><g><title>layout_of (479,708 samples, 0.43%)</title><rect x="83.0893%" y="165" width="0.4332%" height="15" fill="rgb(209,9,3)"/><text x="83.3393%" y="175.50"></text></g><g><title>is_copy_raw (164,702 samples, 0.15%)</title><rect x="84.9978%" y="133" width="0.1487%" height="15" fill="rgb(230,59,30)"/><text x="85.2478%" y="143.50"></text></g><g><title>evaluate_obligation (133,501 samples, 0.12%)</title><rect x="85.0260%" y="117" width="0.1206%" height="15" fill="rgb(209,121,21)"/><text x="85.2760%" y="127.50"></text></g><g><title>needs_drop_raw (218,242 samples, 0.20%)</title><rect x="84.9802%" y="149" width="0.1971%" height="15" fill="rgb(220,109,13)"/><text x="85.2302%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,851,938 samples, 1.67%)</title><rect x="83.5225%" y="165" width="1.6723%" height="15" fill="rgb(232,18,1)"/><text x="83.7725%" y="175.50"></text></g><g><title>optimized_mir (4,054,193 samples, 3.66%)</title><rect x="81.5707%" y="181" width="3.6610%" height="15" fill="rgb(215,41,42)"/><text x="81.8207%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (5,150,425 samples, 4.65%)</title><rect x="80.6086%" y="197" width="4.6509%" height="15" fill="rgb(224,123,36)"/><text x="80.8586%" y="207.50">gener..</text></g><g><title>hir_lowering (1,514,446 samples, 1.37%)</title><rect x="85.2595%" y="197" width="1.3676%" height="15" fill="rgb(240,125,3)"/><text x="85.5095%" y="207.50"></text></g><g><title>finish_ongoing_codegen (11,570,873 samples, 10.45%)</title><rect x="86.6363%" y="181" width="10.4486%" height="15" fill="rgb(205,98,50)"/><text x="86.8863%" y="191.50">finish_ongoing_..</text></g><g><title>join_worker_thread (124,491 samples, 0.11%)</title><rect x="96.9725%" y="165" width="0.1124%" height="15" fill="rgb(205,185,37)"/><text x="97.2225%" y="175.50"></text></g><g><title>link_crate (718,468 samples, 0.65%)</title><rect x="97.0849%" y="181" width="0.6488%" height="15" fill="rgb(238,207,15)"/><text x="97.3349%" y="191.50"></text></g><g><title>link_binary (713,998 samples, 0.64%)</title><rect x="97.0889%" y="165" width="0.6447%" height="15" fill="rgb(213,199,42)"/><text x="97.3389%" y="175.50"></text></g><g><title>link_rlib (444,335 samples, 0.40%)</title><rect x="97.3324%" y="149" width="0.4012%" height="15" fill="rgb(235,201,11)"/><text x="97.5824%" y="159.50"></text></g><g><title>link (12,305,971 samples, 11.11%)</title><rect x="86.6270%" y="197" width="11.1124%" height="15" fill="rgb(207,46,11)"/><text x="86.8770%" y="207.50">link</text></g><g><title>parse_crate (1,383,485 samples, 1.25%)</title><rect x="97.7394%" y="197" width="1.2493%" height="15" fill="rgb(241,35,35)"/><text x="97.9894%" y="207.50"></text></g><g><title>prepare_outputs (195,092 samples, 0.18%)</title><rect x="98.9926%" y="197" width="0.1762%" height="15" fill="rgb(243,32,47)"/><text x="99.2426%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (498,335 samples, 0.45%)</title><rect x="99.1688%" y="197" width="0.4500%" height="15" fill="rgb(247,202,23)"/><text x="99.4188%" y="207.50"></text></g><g><title>all (110,740,719 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (110,740,719 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (350,734 samples, 0.32%)</title><rect x="99.6833%" y="197" width="0.3167%" height="15" fill="rgb(222,74,54)"/><text x="99.9333%" y="207.50"></text></g></svg></svg>