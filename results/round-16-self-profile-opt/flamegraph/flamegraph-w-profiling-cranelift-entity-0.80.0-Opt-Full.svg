<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,678,105 samples, 2.34%)</title><rect x="0.3051%" y="197" width="2.3378%" height="15" fill="rgb(227,0,7)"/><text x="0.5551%" y="207.50">L..</text></g><g><title>is_sized_raw (308,202 samples, 0.11%)</title><rect x="13.0414%" y="149" width="0.1079%" height="15" fill="rgb(217,0,24)"/><text x="13.2914%" y="159.50"></text></g><g><title>param_env (637,878 samples, 0.22%)</title><rect x="14.5995%" y="117" width="0.2233%" height="15" fill="rgb(221,193,54)"/><text x="14.8495%" y="127.50"></text></g><g><title>item_attrs (461,531 samples, 0.16%)</title><rect x="15.3313%" y="85" width="0.1616%" height="15" fill="rgb(248,212,6)"/><text x="15.5813%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (444,791 samples, 0.16%)</title><rect x="15.3372%" y="69" width="0.1557%" height="15" fill="rgb(208,68,35)"/><text x="15.5872%" y="79.50"></text></g><g><title>codegen_fn_attrs (668,713 samples, 0.23%)</title><rect x="15.2677%" y="101" width="0.2341%" height="15" fill="rgb(232,128,0)"/><text x="15.5177%" y="111.50"></text></g><g><title>is_copy_raw (325,843 samples, 0.11%)</title><rect x="18.0141%" y="53" width="0.1141%" height="15" fill="rgb(207,160,47)"/><text x="18.2641%" y="63.50"></text></g><g><title>evaluate_obligation (302,133 samples, 0.11%)</title><rect x="18.0224%" y="37" width="0.1058%" height="15" fill="rgb(228,23,34)"/><text x="18.2724%" y="47.50"></text></g><g><title>adt_drop_tys (434,124 samples, 0.15%)</title><rect x="18.0046%" y="69" width="0.1520%" height="15" fill="rgb(218,30,26)"/><text x="18.2546%" y="79.50"></text></g><g><title>needs_drop_raw (2,376,644 samples, 0.83%)</title><rect x="17.9226%" y="85" width="0.8320%" height="15" fill="rgb(220,122,19)"/><text x="18.1726%" y="95.50"></text></g><g><title>is_copy_raw (1,708,216 samples, 0.60%)</title><rect x="18.1566%" y="69" width="0.5980%" height="15" fill="rgb(250,228,42)"/><text x="18.4066%" y="79.50"></text></g><g><title>evaluate_obligation (1,390,855 samples, 0.49%)</title><rect x="18.2677%" y="53" width="0.4869%" height="15" fill="rgb(240,193,28)"/><text x="18.5177%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,102,641 samples, 0.39%)</title><rect x="19.0075%" y="69" width="0.3860%" height="15" fill="rgb(216,20,37)"/><text x="19.2575%" y="79.50"></text></g><g><title>resolve_instance (2,265,003 samples, 0.79%)</title><rect x="18.7639%" y="85" width="0.7929%" height="15" fill="rgb(206,188,39)"/><text x="19.0139%" y="95.50"></text></g><g><title>thir_body (2,718,435 samples, 0.95%)</title><rect x="19.5837%" y="85" width="0.9516%" height="15" fill="rgb(217,207,13)"/><text x="19.8337%" y="95.50"></text></g><g><title>mir_const (19,163,606 samples, 6.71%)</title><rect x="13.8487%" y="133" width="6.7086%" height="15" fill="rgb(231,73,38)"/><text x="14.0987%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (16,381,054 samples, 5.73%)</title><rect x="14.8228%" y="117" width="5.7345%" height="15" fill="rgb(225,20,46)"/><text x="15.0728%" y="127.50">unsafet..</text></g><g><title>mir_built (14,441,610 samples, 5.06%)</title><rect x="15.5018%" y="101" width="5.0556%" height="15" fill="rgb(210,31,41)"/><text x="15.7518%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (21,297,373 samples, 7.46%)</title><rect x="13.1493%" y="149" width="7.4556%" height="15" fill="rgb(221,200,47)"/><text x="13.3993%" y="159.50">mir_promot..</text></g><g><title>type_op_ascribe_user_type (1,145,739 samples, 0.40%)</title><rect x="20.6049%" y="149" width="0.4011%" height="15" fill="rgb(226,26,5)"/><text x="20.8549%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,466,435 samples, 0.51%)</title><rect x="21.0060%" y="149" width="0.5134%" height="15" fill="rgb(249,33,26)"/><text x="21.2560%" y="159.50"></text></g><g><title>normalize_projection_ty (980,391 samples, 0.34%)</title><rect x="21.1761%" y="133" width="0.3432%" height="15" fill="rgb(235,183,28)"/><text x="21.4261%" y="143.50"></text></g><g><title>type_op_normalize_ty (401,893 samples, 0.14%)</title><rect x="21.6034%" y="149" width="0.1407%" height="15" fill="rgb(221,5,38)"/><text x="21.8534%" y="159.50"></text></g><g><title>type_op_prove_predicate (5,727,011 samples, 2.00%)</title><rect x="21.7441%" y="149" width="2.0049%" height="15" fill="rgb(247,18,42)"/><text x="21.9941%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (59,721,642 samples, 20.91%)</title><rect x="2.8447%" y="181" width="20.9068%" height="15" fill="rgb(241,131,45)"/><text x="3.0947%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (59,367,679 samples, 20.78%)</title><rect x="2.9686%" y="165" width="20.7829%" height="15" fill="rgb(249,31,29)"/><text x="3.2186%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (370,386 samples, 0.13%)</title><rect x="23.7883%" y="181" width="0.1297%" height="15" fill="rgb(225,111,53)"/><text x="24.0383%" y="191.50"></text></g><g><title>should_inherit_track_caller (468,994 samples, 0.16%)</title><rect x="24.1809%" y="133" width="0.1642%" height="15" fill="rgb(238,160,17)"/><text x="24.4309%" y="143.50"></text></g><g><title>codegen_fn_attrs (761,277 samples, 0.27%)</title><rect x="24.0877%" y="149" width="0.2665%" height="15" fill="rgb(214,148,48)"/><text x="24.3377%" y="159.50"></text></g><g><title>check_mod_attrs (1,214,592 samples, 0.43%)</title><rect x="23.9290%" y="165" width="0.4252%" height="15" fill="rgb(232,36,49)"/><text x="24.1790%" y="175.50"></text></g><g><title>check_mod_const_bodies (288,425 samples, 0.10%)</title><rect x="24.3542%" y="165" width="0.1010%" height="15" fill="rgb(209,103,24)"/><text x="24.6042%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (957,459 samples, 0.34%)</title><rect x="24.5135%" y="165" width="0.3352%" height="15" fill="rgb(229,88,8)"/><text x="24.7635%" y="175.50"></text></g><g><title>misc_checking_1 (2,754,551 samples, 0.96%)</title><rect x="23.9182%" y="181" width="0.9643%" height="15" fill="rgb(213,181,19)"/><text x="24.1682%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (994,121 samples, 0.35%)</title><rect x="24.8831%" y="165" width="0.3480%" height="15" fill="rgb(254,191,54)"/><text x="25.1331%" y="175.50"></text></g><g><title>check_mod_liveness (790,920 samples, 0.28%)</title><rect x="24.9542%" y="149" width="0.2769%" height="15" fill="rgb(241,83,37)"/><text x="25.2042%" y="159.50"></text></g><g><title>misc_checking_2 (2,156,944 samples, 0.76%)</title><rect x="24.8825%" y="181" width="0.7551%" height="15" fill="rgb(233,36,39)"/><text x="25.1325%" y="191.50"></text></g><g><title>match_checking (1,161,043 samples, 0.41%)</title><rect x="25.2311%" y="165" width="0.4064%" height="15" fill="rgb(226,3,54)"/><text x="25.4811%" y="175.50"></text></g><g><title>check_match (1,082,192 samples, 0.38%)</title><rect x="25.2587%" y="149" width="0.3788%" height="15" fill="rgb(245,192,40)"/><text x="25.5087%" y="159.50"></text></g><g><title>check_private_in_public (494,106 samples, 0.17%)</title><rect x="25.6411%" y="165" width="0.1730%" height="15" fill="rgb(238,167,29)"/><text x="25.8911%" y="175.50"></text></g><g><title>death_checking (970,801 samples, 0.34%)</title><rect x="25.8141%" y="165" width="0.3398%" height="15" fill="rgb(232,182,51)"/><text x="26.0641%" y="175.50"></text></g><g><title>param_env (546,306 samples, 0.19%)</title><rect x="26.4469%" y="133" width="0.1912%" height="15" fill="rgb(231,60,39)"/><text x="26.6969%" y="143.50"></text></g><g><title>crate_lints (1,830,810 samples, 0.64%)</title><rect x="26.1546%" y="149" width="0.6409%" height="15" fill="rgb(208,69,12)"/><text x="26.4046%" y="159.50"></text></g><g><title>type_of (442,645 samples, 0.15%)</title><rect x="26.6405%" y="133" width="0.1550%" height="15" fill="rgb(235,93,37)"/><text x="26.8905%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (353,764 samples, 0.12%)</title><rect x="26.6716%" y="117" width="0.1238%" height="15" fill="rgb(213,116,39)"/><text x="26.9216%" y="127.50"></text></g><g><title>lint_checking (2,641,209 samples, 0.92%)</title><rect x="26.1539%" y="165" width="0.9246%" height="15" fill="rgb(222,207,29)"/><text x="26.4039%" y="175.50"></text></g><g><title>module_lints (808,529 samples, 0.28%)</title><rect x="26.7955%" y="149" width="0.2830%" height="15" fill="rgb(206,96,30)"/><text x="27.0455%" y="159.50"></text></g><g><title>lint_mod (798,199 samples, 0.28%)</title><rect x="26.7991%" y="133" width="0.2794%" height="15" fill="rgb(218,138,4)"/><text x="27.0491%" y="143.50"></text></g><g><title>privacy_access_levels (909,410 samples, 0.32%)</title><rect x="27.0785%" y="165" width="0.3184%" height="15" fill="rgb(250,191,14)"/><text x="27.3285%" y="175.50"></text></g><g><title>privacy_checking_modules (1,708,379 samples, 0.60%)</title><rect x="27.3969%" y="165" width="0.5981%" height="15" fill="rgb(239,60,40)"/><text x="27.6469%" y="175.50"></text></g><g><title>check_mod_privacy (1,699,429 samples, 0.59%)</title><rect x="27.4000%" y="149" width="0.5949%" height="15" fill="rgb(206,27,48)"/><text x="27.6500%" y="159.50"></text></g><g><title>misc_checking_3 (6,753,915 samples, 2.36%)</title><rect x="25.6375%" y="181" width="2.3644%" height="15" fill="rgb(225,35,8)"/><text x="25.8875%" y="191.50">mi..</text></g><g><title>impl_parent (1,577,926 samples, 0.55%)</title><rect x="29.2110%" y="117" width="0.5524%" height="15" fill="rgb(250,213,24)"/><text x="29.4610%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (766,075 samples, 0.27%)</title><rect x="29.4952%" y="101" width="0.2682%" height="15" fill="rgb(247,123,22)"/><text x="29.7452%" y="111.50"></text></g><g><title>impl_trait_ref (2,712,052 samples, 0.95%)</title><rect x="29.7637%" y="117" width="0.9494%" height="15" fill="rgb(231,138,38)"/><text x="30.0137%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,152,480 samples, 0.75%)</title><rect x="29.9595%" y="101" width="0.7535%" height="15" fill="rgb(231,145,46)"/><text x="30.2095%" y="111.50"></text></g><g><title>trait_impls_of (469,395 samples, 0.16%)</title><rect x="30.7863%" y="117" width="0.1643%" height="15" fill="rgb(251,118,11)"/><text x="31.0363%" y="127.50"></text></g><g><title>coherent_trait (8,253,871 samples, 2.89%)</title><rect x="28.0666%" y="149" width="2.8894%" height="15" fill="rgb(217,147,25)"/><text x="28.3166%" y="159.50">co..</text></g><g><title>specialization_graph_of (7,866,246 samples, 2.75%)</title><rect x="28.2023%" y="133" width="2.7537%" height="15" fill="rgb(247,81,37)"/><text x="28.4523%" y="143.50">sp..</text></g><g><title>coherence_checking (8,384,193 samples, 2.94%)</title><rect x="28.0561%" y="165" width="2.9351%" height="15" fill="rgb(209,12,38)"/><text x="28.3061%" y="175.50">co..</text></g><g><title>associated_item (668,848 samples, 0.23%)</title><rect x="48.7056%" y="101" width="0.2341%" height="15" fill="rgb(227,1,9)"/><text x="48.9556%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (545,296 samples, 0.19%)</title><rect x="48.7488%" y="85" width="0.1909%" height="15" fill="rgb(248,47,43)"/><text x="48.9988%" y="95.50"></text></g><g><title>associated_items (960,923 samples, 0.34%)</title><rect x="48.6256%" y="117" width="0.3364%" height="15" fill="rgb(221,10,30)"/><text x="48.8756%" y="127.50"></text></g><g><title>dropck_outlives (756,272 samples, 0.26%)</title><rect x="49.0067%" y="117" width="0.2647%" height="15" fill="rgb(210,229,1)"/><text x="49.2567%" y="127.50"></text></g><g><title>generics_of (795,779 samples, 0.28%)</title><rect x="51.7493%" y="101" width="0.2786%" height="15" fill="rgb(222,148,37)"/><text x="51.9993%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (585,657 samples, 0.21%)</title><rect x="51.8229%" y="85" width="0.2050%" height="15" fill="rgb(234,67,33)"/><text x="52.0729%" y="95.50"></text></g><g><title>impl_trait_ref (1,153,721 samples, 0.40%)</title><rect x="52.0974%" y="101" width="0.4039%" height="15" fill="rgb(247,98,35)"/><text x="52.3474%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (969,088 samples, 0.34%)</title><rect x="52.1620%" y="85" width="0.3392%" height="15" fill="rgb(247,138,52)"/><text x="52.4120%" y="95.50"></text></g><g><title>predicates_of (953,051 samples, 0.33%)</title><rect x="52.5235%" y="101" width="0.3336%" height="15" fill="rgb(213,79,30)"/><text x="52.7735%" y="111.50"></text></g><g><title>predicates_defined_on (559,297 samples, 0.20%)</title><rect x="52.6613%" y="85" width="0.1958%" height="15" fill="rgb(246,177,23)"/><text x="52.9113%" y="95.50"></text></g><g><title>specializes (2,366,584 samples, 0.83%)</title><rect x="52.8571%" y="101" width="0.8285%" height="15" fill="rgb(230,62,27)"/><text x="53.1071%" y="111.50"></text></g><g><title>param_env (1,406,284 samples, 0.49%)</title><rect x="53.1933%" y="85" width="0.4923%" height="15" fill="rgb(216,154,8)"/><text x="53.4433%" y="95.50"></text></g><g><title>def_span (653,217 samples, 0.23%)</title><rect x="53.4569%" y="69" width="0.2287%" height="15" fill="rgb(244,35,45)"/><text x="53.7069%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (579,757 samples, 0.20%)</title><rect x="53.4826%" y="53" width="0.2030%" height="15" fill="rgb(251,115,12)"/><text x="53.7326%" y="63.50"></text></g><g><title>trait_impls_of (321,952 samples, 0.11%)</title><rect x="53.6930%" y="101" width="0.1127%" height="15" fill="rgb(240,54,50)"/><text x="53.9430%" y="111.50"></text></g><g><title>evaluate_obligation (12,972,410 samples, 4.54%)</title><rect x="49.2715%" y="117" width="4.5413%" height="15" fill="rgb(233,84,52)"/><text x="49.5215%" y="127.50">evalu..</text></g><g><title>evaluate_obligation (382,313 samples, 0.13%)</title><rect x="54.2984%" y="101" width="0.1338%" height="15" fill="rgb(207,117,47)"/><text x="54.5484%" y="111.50"></text></g><g><title>method_autoderef_steps (764,729 samples, 0.27%)</title><rect x="54.1680%" y="117" width="0.2677%" height="15" fill="rgb(249,43,39)"/><text x="54.4180%" y="127.50"></text></g><g><title>predicates_of (640,165 samples, 0.22%)</title><rect x="54.5305%" y="117" width="0.2241%" height="15" fill="rgb(209,38,44)"/><text x="54.7805%" y="127.50"></text></g><g><title>predicates_defined_on (430,223 samples, 0.15%)</title><rect x="54.6040%" y="101" width="0.1506%" height="15" fill="rgb(236,212,23)"/><text x="54.8540%" y="111.50"></text></g><g><title>evaluate_obligation (1,275,117 samples, 0.45%)</title><rect x="57.5759%" y="101" width="0.4464%" height="15" fill="rgb(242,79,21)"/><text x="57.8259%" y="111.50"></text></g><g><title>method_autoderef_steps (405,453 samples, 0.14%)</title><rect x="58.1609%" y="101" width="0.1419%" height="15" fill="rgb(211,96,35)"/><text x="58.4109%" y="111.50"></text></g><g><title>typeck (10,105,383 samples, 3.54%)</title><rect x="54.8183%" y="117" width="3.5376%" height="15" fill="rgb(253,215,40)"/><text x="55.0683%" y="127.50">typ..</text></g><g><title>item_bodies_checking (78,184,787 samples, 27.37%)</title><rect x="31.0206%" y="165" width="27.3703%" height="15" fill="rgb(211,81,21)"/><text x="31.2706%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (78,180,837 samples, 27.37%)</title><rect x="31.0220%" y="149" width="27.3689%" height="15" fill="rgb(208,190,38)"/><text x="31.2720%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,936,786 samples, 27.28%)</title><rect x="31.1074%" y="133" width="27.2834%" height="15" fill="rgb(235,213,38)"/><text x="31.3574%" y="143.50">typeck</text></g><g><title>item_types_checking (3,719,421 samples, 1.30%)</title><rect x="58.3909%" y="165" width="1.3021%" height="15" fill="rgb(237,122,38)"/><text x="58.6409%" y="175.50"></text></g><g><title>check_mod_item_types (3,708,251 samples, 1.30%)</title><rect x="58.3948%" y="149" width="1.2982%" height="15" fill="rgb(244,218,35)"/><text x="58.6448%" y="159.50"></text></g><g><title>fn_sig (690,148 samples, 0.24%)</title><rect x="59.9147%" y="133" width="0.2416%" height="15" fill="rgb(240,68,47)"/><text x="60.1647%" y="143.50"></text></g><g><title>generics_of (501,665 samples, 0.18%)</title><rect x="60.1563%" y="133" width="0.1756%" height="15" fill="rgb(210,16,53)"/><text x="60.4063%" y="143.50"></text></g><g><title>late_bound_vars_map (851,132 samples, 0.30%)</title><rect x="60.6585%" y="85" width="0.2980%" height="15" fill="rgb(235,124,12)"/><text x="60.9085%" y="95.50"></text></g><g><title>resolve_lifetimes (805,662 samples, 0.28%)</title><rect x="60.6744%" y="69" width="0.2820%" height="15" fill="rgb(224,169,11)"/><text x="60.9244%" y="79.50"></text></g><g><title>explicit_predicates_of (1,404,059 samples, 0.49%)</title><rect x="60.4792%" y="101" width="0.4915%" height="15" fill="rgb(250,166,2)"/><text x="60.7292%" y="111.50"></text></g><g><title>predicates_of (2,159,976 samples, 0.76%)</title><rect x="60.3657%" y="133" width="0.7561%" height="15" fill="rgb(242,216,29)"/><text x="60.6157%" y="143.50"></text></g><g><title>predicates_defined_on (2,043,476 samples, 0.72%)</title><rect x="60.4065%" y="117" width="0.7154%" height="15" fill="rgb(230,116,27)"/><text x="60.6565%" y="127.50"></text></g><g><title>inferred_outlives_of (431,744 samples, 0.15%)</title><rect x="60.9707%" y="101" width="0.1511%" height="15" fill="rgb(228,99,48)"/><text x="61.2207%" y="111.50"></text></g><g><title>inferred_outlives_crate (385,464 samples, 0.13%)</title><rect x="60.9869%" y="85" width="0.1349%" height="15" fill="rgb(253,11,6)"/><text x="61.2369%" y="95.50"></text></g><g><title>type_collecting (4,442,889 samples, 1.56%)</title><rect x="59.6946%" y="165" width="1.5553%" height="15" fill="rgb(247,143,39)"/><text x="59.9446%" y="175.50"></text></g><g><title>collect_mod_item_types (4,426,459 samples, 1.55%)</title><rect x="59.7004%" y="149" width="1.5496%" height="15" fill="rgb(236,97,10)"/><text x="59.9504%" y="159.50"></text></g><g><title>evaluate_obligation (955,803 samples, 0.33%)</title><rect x="64.1485%" y="133" width="0.3346%" height="15" fill="rgb(233,208,19)"/><text x="64.3985%" y="143.50"></text></g><g><title>implied_outlives_bounds (752,715 samples, 0.26%)</title><rect x="64.4941%" y="133" width="0.2635%" height="15" fill="rgb(216,164,2)"/><text x="64.7441%" y="143.50"></text></g><g><title>param_env (1,599,221 samples, 0.56%)</title><rect x="64.7576%" y="133" width="0.5598%" height="15" fill="rgb(220,129,5)"/><text x="65.0076%" y="143.50"></text></g><g><title>region_scope_tree (962,356 samples, 0.34%)</title><rect x="65.3326%" y="133" width="0.3369%" height="15" fill="rgb(242,17,10)"/><text x="65.5826%" y="143.50"></text></g><g><title>check_impl_item_well_formed (11,893,087 samples, 4.16%)</title><rect x="61.5157%" y="149" width="4.1634%" height="15" fill="rgb(242,107,0)"/><text x="61.7657%" y="159.50">check..</text></g><g><title>param_env (797,544 samples, 0.28%)</title><rect x="67.3546%" y="133" width="0.2792%" height="15" fill="rgb(251,28,31)"/><text x="67.6046%" y="143.50"></text></g><g><title>check_item_well_formed (5,938,541 samples, 2.08%)</title><rect x="65.6791%" y="149" width="2.0789%" height="15" fill="rgb(233,223,10)"/><text x="65.9291%" y="159.50">c..</text></g><g><title>analysis (186,347,186 samples, 65.23%)</title><rect x="2.6429%" y="197" width="65.2348%" height="15" fill="rgb(215,21,27)"/><text x="2.8929%" y="207.50">analysis</text></g><g><title>type_check_crate (113,907,833 samples, 39.88%)</title><rect x="28.0019%" y="181" width="39.8759%" height="15" fill="rgb(232,23,21)"/><text x="28.2519%" y="191.50">type_check_crate</text></g><g><title>wf_checking (18,918,780 samples, 6.62%)</title><rect x="61.2548%" y="165" width="6.6229%" height="15" fill="rgb(244,5,23)"/><text x="61.5048%" y="175.50">wf_checki..</text></g><g><title>check_trait_item_well_formed (342,105 samples, 0.12%)</title><rect x="67.7580%" y="149" width="0.1198%" height="15" fill="rgb(226,81,46)"/><text x="68.0080%" y="159.50"></text></g><g><title>codegen_crate (756,748 samples, 0.26%)</title><rect x="67.8815%" y="197" width="0.2649%" height="15" fill="rgb(247,70,30)"/><text x="68.1315%" y="207.50"></text></g><g><title>codegen_module_optimize (1,057,282 samples, 0.37%)</title><rect x="68.1464%" y="197" width="0.3701%" height="15" fill="rgb(212,68,19)"/><text x="68.3964%" y="207.50"></text></g><g><title>LLVM_module_optimize (532,236 samples, 0.19%)</title><rect x="68.3302%" y="181" width="0.1863%" height="15" fill="rgb(240,187,13)"/><text x="68.5802%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,709,180 samples, 0.95%)</title><rect x="68.7605%" y="181" width="0.9484%" height="15" fill="rgb(223,113,26)"/><text x="69.0105%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,667,120 samples, 0.93%)</title><rect x="68.7752%" y="165" width="0.9337%" height="15" fill="rgb(206,192,2)"/><text x="69.0252%" y="175.50"></text></g><g><title>codegen_module_perform_lto (3,443,419 samples, 1.21%)</title><rect x="68.5165%" y="197" width="1.2054%" height="15" fill="rgb(241,108,4)"/><text x="68.7665%" y="207.50"></text></g><g><title>metadata_load_macro (415,532 samples, 0.15%)</title><rect x="83.3791%" y="149" width="0.1455%" height="15" fill="rgb(247,173,49)"/><text x="83.6291%" y="159.50"></text></g><g><title>macro_expand_crate (40,192,446 samples, 14.07%)</title><rect x="69.9514%" y="181" width="14.0702%" height="15" fill="rgb(224,114,35)"/><text x="70.2014%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (40,172,816 samples, 14.06%)</title><rect x="69.9582%" y="165" width="14.0634%" height="15" fill="rgb(245,159,27)"/><text x="70.2082%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,208,945 samples, 0.42%)</title><rect x="83.5984%" y="149" width="0.4232%" height="15" fill="rgb(245,172,44)"/><text x="83.8484%" y="159.50"></text></g><g><title>late_resolve_crate (3,000,133 samples, 1.05%)</title><rect x="84.1641%" y="165" width="1.0503%" height="15" fill="rgb(236,23,11)"/><text x="84.4141%" y="175.50"></text></g><g><title>configure_and_expand (44,476,434 samples, 15.57%)</title><rect x="69.7220%" y="197" width="15.5699%" height="15" fill="rgb(205,117,38)"/><text x="69.9720%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,438,988 samples, 1.20%)</title><rect x="84.0880%" y="181" width="1.2039%" height="15" fill="rgb(237,72,25)"/><text x="84.3380%" y="191.50"></text></g><g><title>drop_ast (471,886 samples, 0.17%)</title><rect x="85.2919%" y="197" width="0.1652%" height="15" fill="rgb(244,70,9)"/><text x="85.5419%" y="207.50"></text></g><g><title>early_lint_checks (704,158 samples, 0.25%)</title><rect x="85.4623%" y="197" width="0.2465%" height="15" fill="rgb(217,125,39)"/><text x="85.7123%" y="207.50"></text></g><g><title>free_global_ctxt (3,457,349 samples, 1.21%)</title><rect x="85.7088%" y="197" width="1.2103%" height="15" fill="rgb(235,36,10)"/><text x="85.9588%" y="207.50"></text></g><g><title>exported_symbols (337,184 samples, 0.12%)</title><rect x="88.3771%" y="181" width="0.1180%" height="15" fill="rgb(251,123,47)"/><text x="88.6271%" y="191.50"></text></g><g><title>reachable_non_generics (320,444 samples, 0.11%)</title><rect x="88.3830%" y="165" width="0.1122%" height="15" fill="rgb(221,13,13)"/><text x="88.6330%" y="175.50"></text></g><g><title>reachable_set (292,633 samples, 0.10%)</title><rect x="88.3927%" y="149" width="0.1024%" height="15" fill="rgb(238,131,9)"/><text x="88.6427%" y="159.50"></text></g><g><title>is_sized_raw (285,712 samples, 0.10%)</title><rect x="91.7544%" y="149" width="0.1000%" height="15" fill="rgb(211,50,8)"/><text x="92.0044%" y="159.50"></text></g><g><title>layout_of (285,834 samples, 0.10%)</title><rect x="91.9421%" y="133" width="0.1001%" height="15" fill="rgb(245,182,24)"/><text x="92.1921%" y="143.50"></text></g><g><title>layout_of (576,928 samples, 0.20%)</title><rect x="91.8545%" y="149" width="0.2020%" height="15" fill="rgb(242,14,37)"/><text x="92.1045%" y="159.50"></text></g><g><title>layout_of (1,761,469 samples, 0.62%)</title><rect x="91.4629%" y="165" width="0.6166%" height="15" fill="rgb(246,228,12)"/><text x="91.7129%" y="175.50"></text></g><g><title>is_copy_raw (448,314 samples, 0.16%)</title><rect x="94.8197%" y="133" width="0.1569%" height="15" fill="rgb(213,55,15)"/><text x="95.0697%" y="143.50"></text></g><g><title>evaluate_obligation (336,613 samples, 0.12%)</title><rect x="94.8588%" y="117" width="0.1178%" height="15" fill="rgb(209,9,3)"/><text x="95.1088%" y="127.50"></text></g><g><title>needs_drop_raw (506,614 samples, 0.18%)</title><rect x="94.7996%" y="149" width="0.1774%" height="15" fill="rgb(230,59,30)"/><text x="95.0496%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,402,596 samples, 2.94%)</title><rect x="92.0795%" y="165" width="2.9415%" height="15" fill="rgb(209,121,21)"/><text x="92.3295%" y="175.50">mi..</text></g><g><title>optimized_mir (18,518,348 samples, 6.48%)</title><rect x="88.5820%" y="181" width="6.4827%" height="15" fill="rgb(220,109,13)"/><text x="88.8320%" y="191.50">optimize..</text></g><g><title>generate_crate_metadata (23,614,012 samples, 8.27%)</title><rect x="86.9191%" y="197" width="8.2666%" height="15" fill="rgb(232,18,1)"/><text x="87.1691%" y="207.50">generate_cra..</text></g><g><title>hir_lowering (6,390,390 samples, 2.24%)</title><rect x="95.1857%" y="197" width="2.2371%" height="15" fill="rgb(215,41,42)"/><text x="95.4357%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (2,127,834 samples, 0.74%)</title><rect x="97.4284%" y="181" width="0.7449%" height="15" fill="rgb(224,123,36)"/><text x="97.6784%" y="191.50"></text></g><g><title>link_crate (1,301,584 samples, 0.46%)</title><rect x="98.1733%" y="181" width="0.4556%" height="15" fill="rgb(240,125,3)"/><text x="98.4233%" y="191.50"></text></g><g><title>link_binary (1,270,724 samples, 0.44%)</title><rect x="98.1841%" y="165" width="0.4448%" height="15" fill="rgb(205,98,50)"/><text x="98.4341%" y="175.50"></text></g><g><title>link_rlib (917,460 samples, 0.32%)</title><rect x="98.3078%" y="149" width="0.3212%" height="15" fill="rgb(205,185,37)"/><text x="98.5578%" y="159.50"></text></g><g><title>link (3,454,008 samples, 1.21%)</title><rect x="97.4228%" y="197" width="1.2091%" height="15" fill="rgb(238,207,15)"/><text x="97.6728%" y="207.50"></text></g><g><title>parse_crate (1,731,669 samples, 0.61%)</title><rect x="98.6319%" y="197" width="0.6062%" height="15" fill="rgb(213,199,42)"/><text x="98.8819%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,298,904 samples, 0.45%)</title><rect x="99.3248%" y="197" width="0.4547%" height="15" fill="rgb(235,201,11)"/><text x="99.5748%" y="207.50"></text></g><g><title>all (285,656,021 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (285,656,021 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (539,176 samples, 0.19%)</title><rect x="99.8112%" y="197" width="0.1888%" height="15" fill="rgb(243,32,47)"/><text x="100.0612%" y="207.50"></text></g></svg></svg>