<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (49,961,527 samples, 19.90%)</title><rect x="0.2780%" y="229" width="19.9033%" height="15" fill="rgb(227,0,7)"/><text x="0.5280%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (423,995 samples, 0.17%)</title><rect x="20.0124%" y="213" width="0.1689%" height="15" fill="rgb(217,0,24)"/><text x="20.2624%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (408,385 samples, 0.16%)</title><rect x="20.0186%" y="197" width="0.1627%" height="15" fill="rgb(221,193,54)"/><text x="20.2686%" y="207.50"></text></g><g><title>codegen_fn_attrs (259,532 samples, 0.10%)</title><rect x="21.4580%" y="133" width="0.1034%" height="15" fill="rgb(248,212,6)"/><text x="21.7080%" y="143.50"></text></g><g><title>thir_body (259,803 samples, 0.10%)</title><rect x="21.8521%" y="117" width="0.1035%" height="15" fill="rgb(208,68,35)"/><text x="22.1021%" y="127.50"></text></g><g><title>mir_const (1,845,971 samples, 0.74%)</title><rect x="21.2236%" y="165" width="0.7354%" height="15" fill="rgb(232,128,0)"/><text x="21.4736%" y="175.50"></text></g><g><title>unsafety_check_result (1,394,177 samples, 0.56%)</title><rect x="21.4036%" y="149" width="0.5554%" height="15" fill="rgb(207,160,47)"/><text x="21.6536%" y="159.50"></text></g><g><title>mir_built (998,041 samples, 0.40%)</title><rect x="21.5614%" y="133" width="0.3976%" height="15" fill="rgb(228,23,34)"/><text x="21.8114%" y="143.50"></text></g><g><title>mir_promoted (2,066,413 samples, 0.82%)</title><rect x="21.1406%" y="181" width="0.8232%" height="15" fill="rgb(218,30,26)"/><text x="21.3906%" y="191.50"></text></g><g><title>MIR_borrow_checking (4,901,515 samples, 1.95%)</title><rect x="20.2467%" y="213" width="1.9526%" height="15" fill="rgb(220,122,19)"/><text x="20.4967%" y="223.50">M..</text></g><g><title>mir_borrowck (4,888,875 samples, 1.95%)</title><rect x="20.2518%" y="197" width="1.9476%" height="15" fill="rgb(250,228,42)"/><text x="20.5018%" y="207.50">m..</text></g><g><title>type_op_prove_predicate (433,666 samples, 0.17%)</title><rect x="22.0266%" y="181" width="0.1728%" height="15" fill="rgb(240,193,28)"/><text x="22.2766%" y="191.50"></text></g><g><title>check_mod_attrs (284,514 samples, 0.11%)</title><rect x="22.2544%" y="197" width="0.1133%" height="15" fill="rgb(216,20,37)"/><text x="22.5044%" y="207.50"></text></g><g><title>misc_checking_1 (636,187 samples, 0.25%)</title><rect x="22.2432%" y="213" width="0.2534%" height="15" fill="rgb(206,188,39)"/><text x="22.4932%" y="223.50"></text></g><g><title>misc_checking_2 (258,573 samples, 0.10%)</title><rect x="22.4967%" y="213" width="0.1030%" height="15" fill="rgb(217,207,13)"/><text x="22.7467%" y="223.50"></text></g><g><title>lint_checking (293,093 samples, 0.12%)</title><rect x="22.6728%" y="197" width="0.1168%" height="15" fill="rgb(231,73,38)"/><text x="22.9228%" y="207.50"></text></g><g><title>misc_checking_3 (754,209 samples, 0.30%)</title><rect x="22.5997%" y="213" width="0.3005%" height="15" fill="rgb(225,20,46)"/><text x="22.8497%" y="223.50"></text></g><g><title>associated_item (850,919 samples, 0.34%)</title><rect x="25.1848%" y="133" width="0.3390%" height="15" fill="rgb(210,31,41)"/><text x="25.4348%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (686,089 samples, 0.27%)</title><rect x="25.2504%" y="117" width="0.2733%" height="15" fill="rgb(221,200,47)"/><text x="25.5004%" y="127.50"></text></g><g><title>associated_items (1,174,303 samples, 0.47%)</title><rect x="25.0732%" y="149" width="0.4678%" height="15" fill="rgb(226,26,5)"/><text x="25.3232%" y="159.50"></text></g><g><title>impl_trait_ref (632,339 samples, 0.25%)</title><rect x="25.7691%" y="53" width="0.2519%" height="15" fill="rgb(249,33,26)"/><text x="26.0191%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (577,679 samples, 0.23%)</title><rect x="25.7908%" y="37" width="0.2301%" height="15" fill="rgb(235,183,28)"/><text x="26.0408%" y="47.50"></text></g><g><title>coherent_trait (1,148,163 samples, 0.46%)</title><rect x="25.6023%" y="85" width="0.4574%" height="15" fill="rgb(221,5,38)"/><text x="25.8523%" y="95.50"></text></g><g><title>specialization_graph_of (1,137,473 samples, 0.45%)</title><rect x="25.6066%" y="69" width="0.4531%" height="15" fill="rgb(247,18,42)"/><text x="25.8566%" y="79.50"></text></g><g><title>adt_destructor (1,162,423 samples, 0.46%)</title><rect x="25.5972%" y="117" width="0.4631%" height="15" fill="rgb(241,131,45)"/><text x="25.8472%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,160,023 samples, 0.46%)</title><rect x="25.5981%" y="101" width="0.4621%" height="15" fill="rgb(249,31,29)"/><text x="25.8481%" y="111.50"></text></g><g><title>dropck_outlives (1,262,794 samples, 0.50%)</title><rect x="25.5595%" y="149" width="0.5031%" height="15" fill="rgb(225,111,53)"/><text x="25.8095%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,212,404 samples, 0.48%)</title><rect x="25.5796%" y="133" width="0.4830%" height="15" fill="rgb(238,160,17)"/><text x="25.8296%" y="143.50"></text></g><g><title>specializes (270,433 samples, 0.11%)</title><rect x="26.6001%" y="133" width="0.1077%" height="15" fill="rgb(214,148,48)"/><text x="26.8501%" y="143.50"></text></g><g><title>trait_impls_of (988,762 samples, 0.39%)</title><rect x="26.7165%" y="133" width="0.3939%" height="15" fill="rgb(232,36,49)"/><text x="26.9665%" y="143.50"></text></g><g><title>implementations_of_trait (370,785 samples, 0.15%)</title><rect x="26.9627%" y="117" width="0.1477%" height="15" fill="rgb(209,103,24)"/><text x="27.2127%" y="127.50"></text></g><g><title>evaluate_obligation (2,644,929 samples, 1.05%)</title><rect x="26.0626%" y="149" width="1.0537%" height="15" fill="rgb(229,88,8)"/><text x="26.3126%" y="159.50"></text></g><g><title>method_autoderef_steps (388,214 samples, 0.15%)</title><rect x="27.3491%" y="149" width="0.1547%" height="15" fill="rgb(213,181,19)"/><text x="27.5991%" y="159.50"></text></g><g><title>predicates_of (384,436 samples, 0.15%)</title><rect x="27.5108%" y="149" width="0.1531%" height="15" fill="rgb(254,191,54)"/><text x="27.7608%" y="159.50"></text></g><g><title>predicates_defined_on (269,313 samples, 0.11%)</title><rect x="27.5567%" y="133" width="0.1073%" height="15" fill="rgb(241,83,37)"/><text x="27.8067%" y="143.50"></text></g><g><title>item_bodies_checking (12,045,267 samples, 4.80%)</title><rect x="22.9307%" y="197" width="4.7985%" height="15" fill="rgb(233,36,39)"/><text x="23.1807%" y="207.50">item_b..</text></g><g><title>typeck_item_bodies (12,041,347 samples, 4.80%)</title><rect x="22.9323%" y="181" width="4.7969%" height="15" fill="rgb(226,3,54)"/><text x="23.1823%" y="191.50">typeck..</text></g><g><title>typeck (12,030,356 samples, 4.79%)</title><rect x="22.9367%" y="165" width="4.7926%" height="15" fill="rgb(245,192,40)"/><text x="23.1867%" y="175.50">typeck</text></g><g><title>type_collecting (576,216 samples, 0.23%)</title><rect x="27.7323%" y="197" width="0.2295%" height="15" fill="rgb(238,167,29)"/><text x="27.9823%" y="207.50"></text></g><g><title>collect_mod_item_types (565,056 samples, 0.23%)</title><rect x="27.7367%" y="181" width="0.2251%" height="15" fill="rgb(232,182,51)"/><text x="27.9867%" y="191.50"></text></g><g><title>param_env (345,275 samples, 0.14%)</title><rect x="28.3437%" y="165" width="0.1375%" height="15" fill="rgb(231,60,39)"/><text x="28.5937%" y="175.50"></text></g><g><title>analysis (21,693,856 samples, 8.64%)</title><rect x="20.1813%" y="229" width="8.6422%" height="15" fill="rgb(208,69,12)"/><text x="20.4313%" y="239.50">analysis</text></g><g><title>type_check_crate (14,869,039 samples, 5.92%)</title><rect x="22.9001%" y="213" width="5.9234%" height="15" fill="rgb(235,93,37)"/><text x="23.1501%" y="223.50">type_che..</text></g><g><title>wf_checking (2,162,174 samples, 0.86%)</title><rect x="27.9622%" y="197" width="0.8614%" height="15" fill="rgb(213,116,39)"/><text x="28.2122%" y="207.50"></text></g><g><title>check_item_well_formed (2,128,264 samples, 0.85%)</title><rect x="27.9757%" y="181" width="0.8478%" height="15" fill="rgb(222,207,29)"/><text x="28.2257%" y="191.50"></text></g><g><title>trait_impls_of (696,608 samples, 0.28%)</title><rect x="28.5461%" y="165" width="0.2775%" height="15" fill="rgb(206,96,30)"/><text x="28.7961%" y="175.50"></text></g><g><title>layout_of (404,004 samples, 0.16%)</title><rect x="32.0875%" y="165" width="0.1609%" height="15" fill="rgb(218,138,4)"/><text x="32.3375%" y="175.50"></text></g><g><title>layout_of (1,176,909 samples, 0.47%)</title><rect x="31.8480%" y="181" width="0.4688%" height="15" fill="rgb(250,191,14)"/><text x="32.0980%" y="191.50"></text></g><g><title>predicates_of (347,467 samples, 0.14%)</title><rect x="32.6168%" y="165" width="0.1384%" height="15" fill="rgb(239,60,40)"/><text x="32.8668%" y="175.50"></text></g><g><title>predicates_defined_on (261,655 samples, 0.10%)</title><rect x="32.6510%" y="149" width="0.1042%" height="15" fill="rgb(206,27,48)"/><text x="32.9010%" y="159.50"></text></g><g><title>param_env (1,104,965 samples, 0.44%)</title><rect x="32.3168%" y="181" width="0.4402%" height="15" fill="rgb(225,35,8)"/><text x="32.5668%" y="191.50"></text></g><g><title>fn_abi_of_instance (3,388,395 samples, 1.35%)</title><rect x="31.4526%" y="197" width="1.3498%" height="15" fill="rgb(250,213,24)"/><text x="31.7026%" y="207.50"></text></g><g><title>layout_of (413,264 samples, 0.16%)</title><rect x="32.8799%" y="197" width="0.1646%" height="15" fill="rgb(247,123,22)"/><text x="33.1299%" y="207.50"></text></g><g><title>codegen_module (9,501,038 samples, 3.78%)</title><rect x="29.3155%" y="213" width="3.7850%" height="15" fill="rgb(231,138,38)"/><text x="29.5655%" y="223.50">code..</text></g><g><title>item_attrs (729,516 samples, 0.29%)</title><rect x="33.4586%" y="149" width="0.2906%" height="15" fill="rgb(231,145,46)"/><text x="33.7086%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (704,275 samples, 0.28%)</title><rect x="33.4687%" y="133" width="0.2806%" height="15" fill="rgb(251,118,11)"/><text x="33.7187%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,094,653 samples, 0.44%)</title><rect x="33.3977%" y="165" width="0.4361%" height="15" fill="rgb(217,147,25)"/><text x="33.6477%" y="175.50"></text></g><g><title>is_reachable_non_generic (414,034 samples, 0.16%)</title><rect x="33.8882%" y="165" width="0.1649%" height="15" fill="rgb(247,81,37)"/><text x="34.1382%" y="175.50"></text></g><g><title>reachable_non_generics (390,444 samples, 0.16%)</title><rect x="33.8976%" y="149" width="0.1555%" height="15" fill="rgb(209,12,38)"/><text x="34.1476%" y="159.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (387,094 samples, 0.15%)</title><rect x="33.8989%" y="133" width="0.1542%" height="15" fill="rgb(227,1,9)"/><text x="34.1489%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (816,116 samples, 0.33%)</title><rect x="34.1274%" y="149" width="0.3251%" height="15" fill="rgb(248,47,43)"/><text x="34.3774%" y="159.50"></text></g><g><title>optimized_mir (970,957 samples, 0.39%)</title><rect x="34.0919%" y="165" width="0.3868%" height="15" fill="rgb(221,10,30)"/><text x="34.3419%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (693,939 samples, 0.28%)</title><rect x="34.6027%" y="149" width="0.2764%" height="15" fill="rgb(210,229,1)"/><text x="34.8527%" y="159.50"></text></g><g><title>needs_drop_raw (302,924 samples, 0.12%)</title><rect x="34.9653%" y="149" width="0.1207%" height="15" fill="rgb(222,148,37)"/><text x="35.2153%" y="159.50"></text></g><g><title>impl_parent (294,953 samples, 0.12%)</title><rect x="35.2545%" y="133" width="0.1175%" height="15" fill="rgb(234,67,33)"/><text x="35.5045%" y="143.50"></text></g><g><title>specialization_graph_of (1,536,176 samples, 0.61%)</title><rect x="35.0859%" y="149" width="0.6120%" height="15" fill="rgb(247,98,35)"/><text x="35.3359%" y="159.50"></text></g><g><title>impl_trait_ref (818,216 samples, 0.33%)</title><rect x="35.3720%" y="133" width="0.3260%" height="15" fill="rgb(247,138,52)"/><text x="35.6220%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (714,676 samples, 0.28%)</title><rect x="35.4132%" y="117" width="0.2847%" height="15" fill="rgb(213,79,30)"/><text x="35.6632%" y="127.50"></text></g><g><title>resolve_instance (3,308,939 samples, 1.32%)</title><rect x="34.4787%" y="165" width="1.3182%" height="15" fill="rgb(246,177,23)"/><text x="34.7287%" y="175.50"></text></g><g><title>own_existential_vtable_entries (648,747 samples, 0.26%)</title><rect x="35.8883%" y="149" width="0.2584%" height="15" fill="rgb(230,62,27)"/><text x="36.1383%" y="159.50"></text></g><g><title>resolve_instance (360,805 samples, 0.14%)</title><rect x="36.1467%" y="149" width="0.1437%" height="15" fill="rgb(216,154,8)"/><text x="36.3967%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (7,962,971 samples, 3.17%)</title><rect x="33.1206%" y="181" width="3.1722%" height="15" fill="rgb(244,35,45)"/><text x="33.3706%" y="191.50">mon..</text></g><g><title>vtable_entries (1,141,952 samples, 0.45%)</title><rect x="35.8379%" y="165" width="0.4549%" height="15" fill="rgb(251,115,12)"/><text x="36.0879%" y="175.50"></text></g><g><title>monomorphization_collector (7,992,891 samples, 3.18%)</title><rect x="33.1192%" y="197" width="3.1842%" height="15" fill="rgb(240,54,50)"/><text x="33.3692%" y="207.50">mon..</text></g><g><title>assert_symbols_are_distinct (486,715 samples, 0.19%)</title><rect x="36.3049%" y="181" width="0.1939%" height="15" fill="rgb(233,84,52)"/><text x="36.5549%" y="191.50"></text></g><g><title>symbol_name (447,295 samples, 0.18%)</title><rect x="36.3206%" y="165" width="0.1782%" height="15" fill="rgb(207,117,47)"/><text x="36.5706%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (8,680,228 samples, 3.46%)</title><rect x="33.1018%" y="213" width="3.4580%" height="15" fill="rgb(249,43,39)"/><text x="33.3518%" y="223.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (643,857 samples, 0.26%)</title><rect x="36.3033%" y="197" width="0.2565%" height="15" fill="rgb(209,38,44)"/><text x="36.5533%" y="207.50"></text></g><g><title>codegen_crate (19,465,821 samples, 7.75%)</title><rect x="28.8279%" y="229" width="7.7547%" height="15" fill="rgb(236,212,23)"/><text x="29.0779%" y="239.50">codegen_cra..</text></g><g><title>codegen_module_optimize (50,541,004 samples, 20.13%)</title><rect x="36.5826%" y="229" width="20.1342%" height="15" fill="rgb(242,79,21)"/><text x="36.8326%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (44,697,028 samples, 17.81%)</title><rect x="38.9107%" y="213" width="17.8061%" height="15" fill="rgb(211,96,35)"/><text x="39.1607%" y="223.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (10,412,819 samples, 4.15%)</title><rect x="57.6294%" y="213" width="4.1482%" height="15" fill="rgb(253,215,40)"/><text x="57.8794%" y="223.50">LLVM_..</text></g><g><title>LLVM_module_codegen (27,239,461 samples, 10.85%)</title><rect x="61.7776%" y="213" width="10.8515%" height="15" fill="rgb(211,81,21)"/><text x="62.0276%" y="223.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (26,712,915 samples, 10.64%)</title><rect x="61.9873%" y="197" width="10.6417%" height="15" fill="rgb(208,190,38)"/><text x="62.2373%" y="207.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (802,699 samples, 0.32%)</title><rect x="72.6290%" y="213" width="0.3198%" height="15" fill="rgb(235,213,38)"/><text x="72.8790%" y="223.50"></text></g><g><title>codegen_module_perform_lto (40,893,176 samples, 16.29%)</title><rect x="56.7167%" y="229" width="16.2907%" height="15" fill="rgb(237,122,38)"/><text x="56.9667%" y="239.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (12,361,320 samples, 4.92%)</title><rect x="73.1760%" y="213" width="4.9244%" height="15" fill="rgb(244,218,35)"/><text x="73.4260%" y="223.50">macro_..</text></g><g><title>expand_crate (12,335,760 samples, 4.91%)</title><rect x="73.1862%" y="197" width="4.9142%" height="15" fill="rgb(240,68,47)"/><text x="73.4362%" y="207.50">expand..</text></g><g><title>metadata_register_crate (2,685,530 samples, 1.07%)</title><rect x="77.0306%" y="181" width="1.0698%" height="15" fill="rgb(210,16,53)"/><text x="77.2806%" y="191.50"></text></g><g><title>metadata_register_crate (958,689 samples, 0.38%)</title><rect x="77.7185%" y="165" width="0.3819%" height="15" fill="rgb(235,124,12)"/><text x="77.9685%" y="175.50"></text></g><g><title>finalize_macro_resolutions (328,674 samples, 0.13%)</title><rect x="78.1628%" y="197" width="0.1309%" height="15" fill="rgb(224,169,11)"/><text x="78.4128%" y="207.50"></text></g><g><title>late_resolve_crate (1,424,036 samples, 0.57%)</title><rect x="78.2937%" y="197" width="0.5673%" height="15" fill="rgb(250,166,2)"/><text x="78.5437%" y="207.50"></text></g><g><title>configure_and_expand (14,734,217 samples, 5.87%)</title><rect x="73.0075%" y="229" width="5.8697%" height="15" fill="rgb(242,216,29)"/><text x="73.2575%" y="239.50">configu..</text></g><g><title>resolve_crate (1,824,931 samples, 0.73%)</title><rect x="78.1502%" y="213" width="0.7270%" height="15" fill="rgb(230,116,27)"/><text x="78.4002%" y="223.50"></text></g><g><title>free_global_ctxt (2,715,090 samples, 1.08%)</title><rect x="78.9642%" y="229" width="1.0816%" height="15" fill="rgb(228,99,48)"/><text x="79.2142%" y="239.50"></text></g><g><title>layout_of (378,365 samples, 0.15%)</title><rect x="80.6306%" y="197" width="0.1507%" height="15" fill="rgb(253,11,6)"/><text x="80.8806%" y="207.50"></text></g><g><title>optimized_mir (1,624,278 samples, 0.65%)</title><rect x="80.3711%" y="213" width="0.6471%" height="15" fill="rgb(247,143,39)"/><text x="80.6211%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (594,507 samples, 0.24%)</title><rect x="80.7813%" y="197" width="0.2368%" height="15" fill="rgb(236,97,10)"/><text x="81.0313%" y="207.50"></text></g><g><title>generate_crate_metadata (2,482,908 samples, 0.99%)</title><rect x="80.0459%" y="229" width="0.9891%" height="15" fill="rgb(233,208,19)"/><text x="80.2959%" y="239.50"></text></g><g><title>hir_lowering (756,168 samples, 0.30%)</title><rect x="81.0350%" y="229" width="0.3012%" height="15" fill="rgb(216,164,2)"/><text x="81.2850%" y="239.50"></text></g><g><title>finish_ongoing_codegen (42,909,897 samples, 17.09%)</title><rect x="81.3428%" y="213" width="17.0941%" height="15" fill="rgb(220,129,5)"/><text x="81.5928%" y="223.50">finish_ongoing_codegen</text></g><g><title>link_crate (783,679 samples, 0.31%)</title><rect x="98.4369%" y="213" width="0.3122%" height="15" fill="rgb(242,17,10)"/><text x="98.6869%" y="223.50"></text></g><g><title>link_binary (770,289 samples, 0.31%)</title><rect x="98.4423%" y="197" width="0.3069%" height="15" fill="rgb(242,107,0)"/><text x="98.6923%" y="207.50"></text></g><g><title>link_rlib (449,826 samples, 0.18%)</title><rect x="98.5699%" y="181" width="0.1792%" height="15" fill="rgb(251,28,31)"/><text x="98.8199%" y="191.50"></text></g><g><title>link (43,719,246 samples, 17.42%)</title><rect x="81.3362%" y="229" width="17.4166%" height="15" fill="rgb(233,223,10)"/><text x="81.5862%" y="239.50">link</text></g><g><title>parse_crate (1,352,786 samples, 0.54%)</title><rect x="98.7528%" y="229" width="0.5389%" height="15" fill="rgb(215,21,27)"/><text x="99.0028%" y="239.50"></text></g><g><title>prepare_outputs (390,145 samples, 0.16%)</title><rect x="99.2953%" y="229" width="0.1554%" height="15" fill="rgb(232,23,21)"/><text x="99.5453%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (648,458 samples, 0.26%)</title><rect x="99.4508%" y="229" width="0.2583%" height="15" fill="rgb(244,5,23)"/><text x="99.7008%" y="239.50"></text></g><g><title>all (251,021,170 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(226,81,46)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (251,021,170 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (584,097 samples, 0.23%)</title><rect x="99.7673%" y="229" width="0.2327%" height="15" fill="rgb(212,68,19)"/><text x="100.0173%" y="239.50"></text></g></svg></svg>