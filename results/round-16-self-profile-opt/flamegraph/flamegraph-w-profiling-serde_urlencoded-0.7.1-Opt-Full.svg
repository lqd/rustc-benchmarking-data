<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (80,304,282 samples, 10.33%)</title><rect x="0.0807%" y="181" width="10.3291%" height="15" fill="rgb(227,0,7)"/><text x="0.3307%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,088,332 samples, 0.14%)</title><rect x="10.2698%" y="165" width="0.1400%" height="15" fill="rgb(217,0,24)"/><text x="10.5198%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,058,492 samples, 0.14%)</title><rect x="10.2737%" y="149" width="0.1361%" height="15" fill="rgb(221,193,54)"/><text x="10.5237%" y="159.50"></text></g><g><title>is_copy_raw (2,856,856 samples, 0.37%)</title><rect x="16.1677%" y="53" width="0.3675%" height="15" fill="rgb(248,212,6)"/><text x="16.4177%" y="63.50"></text></g><g><title>evaluate_obligation (2,284,894 samples, 0.29%)</title><rect x="16.2413%" y="37" width="0.2939%" height="15" fill="rgb(208,68,35)"/><text x="16.4913%" y="47.50"></text></g><g><title>needs_drop_raw (4,045,783 samples, 0.52%)</title><rect x="16.0416%" y="69" width="0.5204%" height="15" fill="rgb(232,128,0)"/><text x="16.2916%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,089,022 samples, 0.14%)</title><rect x="16.6125%" y="53" width="0.1401%" height="15" fill="rgb(207,160,47)"/><text x="16.8625%" y="63.50"></text></g><g><title>resolve_instance (1,738,231 samples, 0.22%)</title><rect x="16.5619%" y="69" width="0.2236%" height="15" fill="rgb(228,23,34)"/><text x="16.8119%" y="79.50"></text></g><g><title>thir_body (1,898,106 samples, 0.24%)</title><rect x="16.7963%" y="69" width="0.2441%" height="15" fill="rgb(218,30,26)"/><text x="17.0463%" y="79.50"></text></g><g><title>mir_const (18,764,608 samples, 2.41%)</title><rect x="14.6364%" y="117" width="2.4136%" height="15" fill="rgb(220,122,19)"/><text x="14.8864%" y="127.50">mi..</text></g><g><title>unsafety_check_result (16,291,461 samples, 2.10%)</title><rect x="14.9545%" y="101" width="2.0955%" height="15" fill="rgb(250,228,42)"/><text x="15.2045%" y="111.50">u..</text></g><g><title>mir_built (14,810,366 samples, 1.90%)</title><rect x="15.1450%" y="85" width="1.9050%" height="15" fill="rgb(240,193,28)"/><text x="15.3950%" y="95.50">m..</text></g><g><title>mir_promoted (20,815,328 samples, 2.68%)</title><rect x="14.3900%" y="133" width="2.6773%" height="15" fill="rgb(216,20,37)"/><text x="14.6400%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (1,727,819 samples, 0.22%)</title><rect x="17.0674%" y="133" width="0.2222%" height="15" fill="rgb(206,188,39)"/><text x="17.3174%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (4,201,692 samples, 0.54%)</title><rect x="17.2896%" y="133" width="0.5404%" height="15" fill="rgb(217,207,13)"/><text x="17.5396%" y="143.50"></text></g><g><title>normalize_projection_ty (2,830,073 samples, 0.36%)</title><rect x="17.4660%" y="117" width="0.3640%" height="15" fill="rgb(231,73,38)"/><text x="17.7160%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,853,631 samples, 0.24%)</title><rect x="17.8783%" y="133" width="0.2384%" height="15" fill="rgb(225,20,46)"/><text x="18.1283%" y="143.50"></text></g><g><title>normalize_projection_ty (1,240,127 samples, 0.16%)</title><rect x="17.9572%" y="117" width="0.1595%" height="15" fill="rgb(210,31,41)"/><text x="18.2072%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,498,410 samples, 0.84%)</title><rect x="18.1167%" y="133" width="0.8359%" height="15" fill="rgb(221,200,47)"/><text x="18.3667%" y="143.50"></text></g><g><title>MIR_borrow_checking (65,886,609 samples, 8.47%)</title><rect x="10.4817%" y="165" width="8.4746%" height="15" fill="rgb(226,26,5)"/><text x="10.7317%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (65,486,740 samples, 8.42%)</title><rect x="10.5331%" y="149" width="8.4232%" height="15" fill="rgb(249,33,26)"/><text x="10.7831%" y="159.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (841,179 samples, 0.11%)</title><rect x="19.1042%" y="117" width="0.1082%" height="15" fill="rgb(235,183,28)"/><text x="19.3542%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,102,931 samples, 0.14%)</title><rect x="19.0730%" y="133" width="0.1419%" height="15" fill="rgb(221,5,38)"/><text x="19.3230%" y="143.50"></text></g><g><title>check_mod_attrs (1,531,097 samples, 0.20%)</title><rect x="19.0179%" y="149" width="0.1969%" height="15" fill="rgb(247,18,42)"/><text x="19.2679%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,004,441 samples, 0.13%)</title><rect x="19.2712%" y="149" width="0.1292%" height="15" fill="rgb(241,131,45)"/><text x="19.5212%" y="159.50"></text></g><g><title>misc_checking_1 (3,075,374 samples, 0.40%)</title><rect x="19.0143%" y="165" width="0.3956%" height="15" fill="rgb(249,31,29)"/><text x="19.2643%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,296,705 samples, 0.17%)</title><rect x="19.4100%" y="149" width="0.1668%" height="15" fill="rgb(225,111,53)"/><text x="19.6600%" y="159.50"></text></g><g><title>check_mod_liveness (1,134,273 samples, 0.15%)</title><rect x="19.4309%" y="133" width="0.1459%" height="15" fill="rgb(238,160,17)"/><text x="19.6809%" y="143.50"></text></g><g><title>misc_checking_2 (2,502,088 samples, 0.32%)</title><rect x="19.4098%" y="165" width="0.3218%" height="15" fill="rgb(214,148,48)"/><text x="19.6598%" y="175.50"></text></g><g><title>match_checking (1,203,793 samples, 0.15%)</title><rect x="19.5768%" y="149" width="0.1548%" height="15" fill="rgb(232,36,49)"/><text x="19.8268%" y="159.50"></text></g><g><title>check_match (1,115,502 samples, 0.14%)</title><rect x="19.5882%" y="133" width="0.1435%" height="15" fill="rgb(209,103,24)"/><text x="19.8382%" y="143.50"></text></g><g><title>death_checking (991,571 samples, 0.13%)</title><rect x="19.7951%" y="149" width="0.1275%" height="15" fill="rgb(229,88,8)"/><text x="20.0451%" y="159.50"></text></g><g><title>crate_lints (2,424,937 samples, 0.31%)</title><rect x="19.9228%" y="133" width="0.3119%" height="15" fill="rgb(213,181,19)"/><text x="20.1728%" y="143.50"></text></g><g><title>type_of (1,133,701 samples, 0.15%)</title><rect x="20.0889%" y="117" width="0.1458%" height="15" fill="rgb(254,191,54)"/><text x="20.3389%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (898,019 samples, 0.12%)</title><rect x="20.1192%" y="101" width="0.1155%" height="15" fill="rgb(241,83,37)"/><text x="20.3692%" y="111.50"></text></g><g><title>lint_checking (3,353,568 samples, 0.43%)</title><rect x="19.9226%" y="149" width="0.4313%" height="15" fill="rgb(233,36,39)"/><text x="20.1726%" y="159.50"></text></g><g><title>module_lints (927,141 samples, 0.12%)</title><rect x="20.2347%" y="133" width="0.1193%" height="15" fill="rgb(226,3,54)"/><text x="20.4847%" y="143.50"></text></g><g><title>lint_mod (919,031 samples, 0.12%)</title><rect x="20.2358%" y="117" width="0.1182%" height="15" fill="rgb(245,192,40)"/><text x="20.4858%" y="127.50"></text></g><g><title>privacy_checking_modules (2,487,458 samples, 0.32%)</title><rect x="20.4406%" y="149" width="0.3199%" height="15" fill="rgb(238,167,29)"/><text x="20.6906%" y="159.50"></text></g><g><title>check_mod_privacy (2,481,618 samples, 0.32%)</title><rect x="20.4413%" y="133" width="0.3192%" height="15" fill="rgb(232,182,51)"/><text x="20.6913%" y="143.50"></text></g><g><title>misc_checking_3 (8,016,541 samples, 1.03%)</title><rect x="19.7317%" y="165" width="1.0311%" height="15" fill="rgb(231,60,39)"/><text x="19.9817%" y="175.50"></text></g><g><title>impl_parent (2,414,017 samples, 0.31%)</title><rect x="21.2728%" y="101" width="0.3105%" height="15" fill="rgb(208,69,12)"/><text x="21.5228%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,470,327 samples, 0.19%)</title><rect x="21.3942%" y="85" width="0.1891%" height="15" fill="rgb(235,93,37)"/><text x="21.6442%" y="95.50"></text></g><g><title>impl_trait_ref (5,951,388 samples, 0.77%)</title><rect x="21.5833%" y="101" width="0.7655%" height="15" fill="rgb(213,116,39)"/><text x="21.8333%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,584,998 samples, 0.59%)</title><rect x="21.7590%" y="85" width="0.5897%" height="15" fill="rgb(222,207,29)"/><text x="22.0090%" y="95.50"></text></g><g><title>trait_impls_of (966,710 samples, 0.12%)</title><rect x="22.3520%" y="101" width="0.1243%" height="15" fill="rgb(206,96,30)"/><text x="22.6020%" y="111.50"></text></g><g><title>coherent_trait (13,126,408 samples, 1.69%)</title><rect x="20.7881%" y="133" width="1.6884%" height="15" fill="rgb(218,138,4)"/><text x="21.0381%" y="143.50"></text></g><g><title>specialization_graph_of (13,095,408 samples, 1.68%)</title><rect x="20.7921%" y="117" width="1.6844%" height="15" fill="rgb(250,191,14)"/><text x="21.0421%" y="127.50"></text></g><g><title>coherence_checking (13,254,358 samples, 1.70%)</title><rect x="20.7838%" y="149" width="1.7048%" height="15" fill="rgb(239,60,40)"/><text x="21.0338%" y="159.50"></text></g><g><title>associated_item (1,302,231 samples, 0.17%)</title><rect x="28.7035%" y="85" width="0.1675%" height="15" fill="rgb(206,27,48)"/><text x="28.9535%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (848,677 samples, 0.11%)</title><rect x="28.7618%" y="69" width="0.1092%" height="15" fill="rgb(225,35,8)"/><text x="29.0118%" y="79.50"></text></g><g><title>associated_items (1,751,320 samples, 0.23%)</title><rect x="28.6528%" y="101" width="0.2253%" height="15" fill="rgb(250,213,24)"/><text x="28.9028%" y="111.50"></text></g><g><title>dropck_outlives (1,718,362 samples, 0.22%)</title><rect x="28.8916%" y="101" width="0.2210%" height="15" fill="rgb(247,123,22)"/><text x="29.1416%" y="111.50"></text></g><g><title>evaluate_obligation (3,762,904 samples, 0.48%)</title><rect x="29.1126%" y="101" width="0.4840%" height="15" fill="rgb(231,138,38)"/><text x="29.3626%" y="111.50"></text></g><g><title>impl_item_implementor_ids (862,187 samples, 0.11%)</title><rect x="29.6369%" y="101" width="0.1109%" height="15" fill="rgb(231,145,46)"/><text x="29.8869%" y="111.50"></text></g><g><title>associated_items (796,747 samples, 0.10%)</title><rect x="29.6453%" y="85" width="0.1025%" height="15" fill="rgb(251,118,11)"/><text x="29.8953%" y="95.50"></text></g><g><title>method_autoderef_steps (1,086,935 samples, 0.14%)</title><rect x="29.7863%" y="101" width="0.1398%" height="15" fill="rgb(217,147,25)"/><text x="30.0363%" y="111.50"></text></g><g><title>evaluate_obligation (1,201,717 samples, 0.15%)</title><rect x="31.0257%" y="85" width="0.1546%" height="15" fill="rgb(247,81,37)"/><text x="31.2757%" y="95.50"></text></g><g><title>typeck (10,015,123 samples, 1.29%)</title><rect x="30.0193%" y="101" width="1.2882%" height="15" fill="rgb(209,12,38)"/><text x="30.2693%" y="111.50"></text></g><g><title>item_bodies_checking (68,606,170 samples, 8.82%)</title><rect x="22.4984%" y="149" width="8.8244%" height="15" fill="rgb(227,1,9)"/><text x="22.7484%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (68,601,900 samples, 8.82%)</title><rect x="22.4989%" y="133" width="8.8238%" height="15" fill="rgb(248,47,43)"/><text x="22.7489%" y="143.50">typeck_item_..</text></g><g><title>typeck (68,309,256 samples, 8.79%)</title><rect x="22.5366%" y="117" width="8.7862%" height="15" fill="rgb(221,10,30)"/><text x="22.7866%" y="127.50">typeck</text></g><g><title>evaluate_obligation (780,419 samples, 0.10%)</title><rect x="32.8208%" y="117" width="0.1004%" height="15" fill="rgb(210,229,1)"/><text x="33.0708%" y="127.50"></text></g><g><title>item_types_checking (13,199,118 samples, 1.70%)</title><rect x="31.3228%" y="149" width="1.6977%" height="15" fill="rgb(222,148,37)"/><text x="31.5728%" y="159.50"></text></g><g><title>check_mod_item_types (13,190,798 samples, 1.70%)</title><rect x="31.3239%" y="133" width="1.6967%" height="15" fill="rgb(234,67,33)"/><text x="31.5739%" y="143.50"></text></g><g><title>fn_sig (1,836,412 samples, 0.24%)</title><rect x="33.1064%" y="117" width="0.2362%" height="15" fill="rgb(247,98,35)"/><text x="33.3564%" y="127.50"></text></g><g><title>is_late_bound_map (815,557 samples, 0.10%)</title><rect x="33.3844%" y="101" width="0.1049%" height="15" fill="rgb(247,138,52)"/><text x="33.6344%" y="111.50"></text></g><g><title>resolve_lifetimes (778,426 samples, 0.10%)</title><rect x="33.3892%" y="85" width="0.1001%" height="15" fill="rgb(213,79,30)"/><text x="33.6392%" y="95.50"></text></g><g><title>generics_of (1,265,534 samples, 0.16%)</title><rect x="33.3426%" y="117" width="0.1628%" height="15" fill="rgb(246,177,23)"/><text x="33.5926%" y="127.50"></text></g><g><title>explicit_predicates_of (830,478 samples, 0.11%)</title><rect x="33.5639%" y="85" width="0.1068%" height="15" fill="rgb(230,62,27)"/><text x="33.8139%" y="95.50"></text></g><g><title>predicates_of (1,665,861 samples, 0.21%)</title><rect x="33.5180%" y="117" width="0.2143%" height="15" fill="rgb(216,154,8)"/><text x="33.7680%" y="127.50"></text></g><g><title>predicates_defined_on (1,529,899 samples, 0.20%)</title><rect x="33.5354%" y="101" width="0.1968%" height="15" fill="rgb(244,35,45)"/><text x="33.7854%" y="111.50"></text></g><g><title>type_collecting (5,870,716 samples, 0.76%)</title><rect x="33.0209%" y="149" width="0.7551%" height="15" fill="rgb(251,115,12)"/><text x="33.2709%" y="159.50"></text></g><g><title>collect_mod_item_types (5,855,236 samples, 0.75%)</title><rect x="33.0229%" y="133" width="0.7531%" height="15" fill="rgb(240,54,50)"/><text x="33.2729%" y="143.50"></text></g><g><title>param_env (1,709,359 samples, 0.22%)</title><rect x="35.5419%" y="117" width="0.2199%" height="15" fill="rgb(233,84,52)"/><text x="35.7919%" y="127.50"></text></g><g><title>region_scope_tree (858,634 samples, 0.11%)</title><rect x="35.7837%" y="117" width="0.1104%" height="15" fill="rgb(207,117,47)"/><text x="36.0337%" y="127.50"></text></g><g><title>check_impl_item_well_formed (16,025,327 samples, 2.06%)</title><rect x="33.8507%" y="133" width="2.0612%" height="15" fill="rgb(249,43,39)"/><text x="34.1007%" y="143.50">c..</text></g><g><title>check_item_well_formed (4,898,231 samples, 0.63%)</title><rect x="35.9120%" y="133" width="0.6300%" height="15" fill="rgb(209,38,44)"/><text x="36.1620%" y="143.50"></text></g><g><title>analysis (203,527,945 samples, 26.18%)</title><rect x="10.4098%" y="181" width="26.1786%" height="15" fill="rgb(236,212,23)"/><text x="10.6598%" y="191.50">analysis</text></g><g><title>type_check_crate (123,037,711 samples, 15.83%)</title><rect x="20.7628%" y="165" width="15.8256%" height="15" fill="rgb(242,79,21)"/><text x="21.0128%" y="175.50">type_check_crate</text></g><g><title>wf_checking (21,848,146 samples, 2.81%)</title><rect x="33.7782%" y="149" width="2.8102%" height="15" fill="rgb(211,96,35)"/><text x="34.0282%" y="159.50">wf..</text></g><g><title>layout_of (1,021,242 samples, 0.13%)</title><rect x="38.7736%" y="133" width="0.1314%" height="15" fill="rgb(253,215,40)"/><text x="39.0236%" y="143.50"></text></g><g><title>param_env (1,605,505 samples, 0.21%)</title><rect x="38.9050%" y="133" width="0.2065%" height="15" fill="rgb(211,81,21)"/><text x="39.1550%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,328,981 samples, 0.69%)</title><rect x="38.4853%" y="149" width="0.6854%" height="15" fill="rgb(208,190,38)"/><text x="38.7353%" y="159.50"></text></g><g><title>codegen_module (19,005,464 samples, 2.44%)</title><rect x="36.8292%" y="165" width="2.4446%" height="15" fill="rgb(235,213,38)"/><text x="37.0792%" y="175.50">co..</text></g><g><title>codegen_fn_attrs (867,480 samples, 0.11%)</title><rect x="39.3718%" y="117" width="0.1116%" height="15" fill="rgb(237,122,38)"/><text x="39.6218%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (831,267 samples, 0.11%)</title><rect x="39.6634%" y="101" width="0.1069%" height="15" fill="rgb(244,218,35)"/><text x="39.9134%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (795,789 samples, 0.10%)</title><rect x="39.7703%" y="101" width="0.1024%" height="15" fill="rgb(240,68,47)"/><text x="40.0203%" y="111.50"></text></g><g><title>optimized_mir (2,702,939 samples, 0.35%)</title><rect x="39.5421%" y="117" width="0.3477%" height="15" fill="rgb(210,16,53)"/><text x="39.7921%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,079,906 samples, 0.14%)</title><rect x="39.9620%" y="101" width="0.1389%" height="15" fill="rgb(235,124,12)"/><text x="40.2120%" y="111.50"></text></g><g><title>resolve_instance (2,308,499 samples, 0.30%)</title><rect x="39.8898%" y="117" width="0.2969%" height="15" fill="rgb(224,169,11)"/><text x="40.1398%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (7,561,415 samples, 0.97%)</title><rect x="39.2792%" y="133" width="0.9726%" height="15" fill="rgb(250,166,2)"/><text x="39.5292%" y="143.50"></text></g><g><title>monomorphization_collector (7,644,396 samples, 0.98%)</title><rect x="39.2788%" y="149" width="0.9833%" height="15" fill="rgb(242,216,29)"/><text x="39.5288%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (8,751,668 samples, 1.13%)</title><rect x="39.2749%" y="165" width="1.1257%" height="15" fill="rgb(230,116,27)"/><text x="39.5249%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,077,392 samples, 0.14%)</title><rect x="40.2620%" y="149" width="0.1386%" height="15" fill="rgb(228,99,48)"/><text x="40.5120%" y="159.50"></text></g><g><title>codegen_crate (29,707,084 samples, 3.82%)</title><rect x="36.5892%" y="181" width="3.8210%" height="15" fill="rgb(253,11,6)"/><text x="36.8392%" y="191.50">code..</text></g><g><title>codegen_module_optimize (108,605,139 samples, 13.97%)</title><rect x="40.4102%" y="181" width="13.9692%" height="15" fill="rgb(247,143,39)"/><text x="40.6602%" y="191.50">codegen_module_optimi..</text></g><g><title>LLVM_module_optimize (97,681,389 samples, 12.56%)</title><rect x="41.8153%" y="165" width="12.5642%" height="15" fill="rgb(236,97,10)"/><text x="42.0653%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (85,199,397 samples, 10.96%)</title><rect x="55.8274%" y="165" width="10.9587%" height="15" fill="rgb(233,208,19)"/><text x="56.0774%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (125,774,587 samples, 16.18%)</title><rect x="66.7861%" y="165" width="16.1776%" height="15" fill="rgb(216,164,2)"/><text x="67.0361%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (123,659,761 samples, 15.91%)</title><rect x="67.0581%" y="149" width="15.9056%" height="15" fill="rgb(220,129,5)"/><text x="67.3081%" y="159.50">LLVM_module_codegen_emit..</text></g><g><title>LLVM_thin_lto_import (8,823,288 samples, 1.13%)</title><rect x="82.9637%" y="165" width="1.1349%" height="15" fill="rgb(242,17,10)"/><text x="83.2137%" y="175.50"></text></g><g><title>codegen_module_perform_lto (231,622,637 samples, 29.79%)</title><rect x="54.3794%" y="181" width="29.7922%" height="15" fill="rgb(242,107,0)"/><text x="54.6294%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,423,866 samples, 0.18%)</title><rect x="86.5160%" y="133" width="0.1831%" height="15" fill="rgb(251,28,31)"/><text x="86.7660%" y="143.50"></text></g><g><title>macro_expand_crate (19,395,987 samples, 2.49%)</title><rect x="84.2383%" y="165" width="2.4948%" height="15" fill="rgb(233,223,10)"/><text x="84.4883%" y="175.50">ma..</text></g><g><title>expand_crate (19,380,307 samples, 2.49%)</title><rect x="84.2403%" y="149" width="2.4928%" height="15" fill="rgb(215,21,27)"/><text x="84.4903%" y="159.50">ex..</text></g><g><title>late_resolve_crate (3,879,284 samples, 0.50%)</title><rect x="86.7692%" y="149" width="0.4990%" height="15" fill="rgb(232,23,21)"/><text x="87.0192%" y="159.50"></text></g><g><title>configure_and_expand (24,250,012 samples, 3.12%)</title><rect x="84.1717%" y="181" width="3.1191%" height="15" fill="rgb(244,5,23)"/><text x="84.4217%" y="191.50">con..</text></g><g><title>resolve_crate (4,260,748 samples, 0.55%)</title><rect x="86.7428%" y="165" width="0.5480%" height="15" fill="rgb(226,81,46)"/><text x="86.9928%" y="175.50"></text></g><g><title>free_global_ctxt (6,015,647 samples, 0.77%)</title><rect x="87.4041%" y="181" width="0.7738%" height="15" fill="rgb(247,70,30)"/><text x="87.6541%" y="191.50"></text></g><g><title>layout_of (1,930,624 samples, 0.25%)</title><rect x="89.7268%" y="149" width="0.2483%" height="15" fill="rgb(212,68,19)"/><text x="89.9768%" y="159.50"></text></g><g><title>needs_drop_raw (948,040 samples, 0.12%)</title><rect x="91.0603%" y="133" width="0.1219%" height="15" fill="rgb(240,187,13)"/><text x="91.3103%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,526,203 samples, 1.23%)</title><rect x="89.9751%" y="149" width="1.2253%" height="15" fill="rgb(223,113,26)"/><text x="90.2251%" y="159.50"></text></g><g><title>optimized_mir (18,825,069 samples, 2.42%)</title><rect x="88.7879%" y="165" width="2.4214%" height="15" fill="rgb(206,192,2)"/><text x="89.0379%" y="175.50">op..</text></g><g><title>generate_crate_metadata (23,781,326 samples, 3.06%)</title><rect x="88.1779%" y="181" width="3.0588%" height="15" fill="rgb(241,108,4)"/><text x="88.4279%" y="191.50">gen..</text></g><g><title>hir_lowering (6,632,234 samples, 0.85%)</title><rect x="91.2367%" y="181" width="0.8531%" height="15" fill="rgb(247,173,49)"/><text x="91.4867%" y="191.50"></text></g><g><title>finish_ongoing_codegen (56,571,445 samples, 7.28%)</title><rect x="92.0918%" y="165" width="7.2764%" height="15" fill="rgb(224,114,35)"/><text x="92.3418%" y="175.50">finish_ong..</text></g><g><title>link_crate (1,718,889 samples, 0.22%)</title><rect x="99.3682%" y="165" width="0.2211%" height="15" fill="rgb(245,159,27)"/><text x="99.6182%" y="175.50"></text></g><g><title>link_binary (1,671,488 samples, 0.21%)</title><rect x="99.3743%" y="149" width="0.2150%" height="15" fill="rgb(245,172,44)"/><text x="99.6243%" y="159.50"></text></g><g><title>link_rlib (1,054,152 samples, 0.14%)</title><rect x="99.4537%" y="133" width="0.1356%" height="15" fill="rgb(236,23,11)"/><text x="99.7037%" y="143.50"></text></g><g><title>link (58,317,465 samples, 7.50%)</title><rect x="92.0898%" y="181" width="7.5010%" height="15" fill="rgb(205,117,38)"/><text x="92.3398%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,202,875 samples, 0.28%)</title><rect x="99.6418%" y="181" width="0.2833%" height="15" fill="rgb(237,72,25)"/><text x="99.8918%" y="191.50"></text></g><g><title>all (777,460,134 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (777,460,134 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>