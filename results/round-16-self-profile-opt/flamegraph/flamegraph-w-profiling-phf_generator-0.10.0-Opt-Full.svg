<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,890,617 samples, 8.29%)</title><rect x="0.8179%" y="213" width="8.2890%" height="15" fill="rgb(227,0,7)"/><text x="1.0679%" y="223.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (118,582 samples, 0.14%)</title><rect x="8.9642%" y="197" width="0.1426%" height="15" fill="rgb(217,0,24)"/><text x="9.2142%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (105,781 samples, 0.13%)</title><rect x="8.9796%" y="181" width="0.1272%" height="15" fill="rgb(221,193,54)"/><text x="9.2296%" y="191.50"></text></g><g><title>param_env (184,501 samples, 0.22%)</title><rect x="13.4759%" y="133" width="0.2219%" height="15" fill="rgb(248,212,6)"/><text x="13.7259%" y="143.50"></text></g><g><title>item_attrs (162,282 samples, 0.20%)</title><rect x="13.8741%" y="101" width="0.1952%" height="15" fill="rgb(208,68,35)"/><text x="14.1241%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,702 samples, 0.19%)</title><rect x="13.8808%" y="85" width="0.1885%" height="15" fill="rgb(232,128,0)"/><text x="14.1308%" y="95.50"></text></g><g><title>codegen_fn_attrs (211,182 samples, 0.25%)</title><rect x="13.8234%" y="117" width="0.2540%" height="15" fill="rgb(207,160,47)"/><text x="14.0734%" y="127.50"></text></g><g><title>adt_drop_tys (171,101 samples, 0.21%)</title><rect x="15.1002%" y="85" width="0.2058%" height="15" fill="rgb(228,23,34)"/><text x="15.3502%" y="95.50"></text></g><g><title>needs_drop_raw (484,435 samples, 0.58%)</title><rect x="15.0312%" y="101" width="0.5827%" height="15" fill="rgb(218,30,26)"/><text x="15.2812%" y="111.50"></text></g><g><title>is_copy_raw (256,031 samples, 0.31%)</title><rect x="15.3060%" y="85" width="0.3080%" height="15" fill="rgb(220,122,19)"/><text x="15.5560%" y="95.50"></text></g><g><title>evaluate_obligation (210,181 samples, 0.25%)</title><rect x="15.3611%" y="69" width="0.2528%" height="15" fill="rgb(250,228,42)"/><text x="15.6111%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (248,153 samples, 0.30%)</title><rect x="15.7071%" y="85" width="0.2985%" height="15" fill="rgb(240,193,28)"/><text x="15.9571%" y="95.50"></text></g><g><title>impl_parent (262,203 samples, 0.32%)</title><rect x="16.3830%" y="69" width="0.3154%" height="15" fill="rgb(216,20,37)"/><text x="16.6330%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (193,982 samples, 0.23%)</title><rect x="16.4651%" y="53" width="0.2333%" height="15" fill="rgb(206,188,39)"/><text x="16.7151%" y="63.50"></text></g><g><title>specialization_graph_of (1,190,674 samples, 1.43%)</title><rect x="16.0240%" y="85" width="1.4323%" height="15" fill="rgb(217,207,13)"/><text x="16.2740%" y="95.50"></text></g><g><title>impl_trait_ref (629,987 samples, 0.76%)</title><rect x="16.6984%" y="69" width="0.7578%" height="15" fill="rgb(231,73,38)"/><text x="16.9484%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (564,967 samples, 0.68%)</title><rect x="16.7767%" y="53" width="0.6796%" height="15" fill="rgb(225,20,46)"/><text x="17.0267%" y="63.50"></text></g><g><title>resolve_instance (1,558,537 samples, 1.87%)</title><rect x="15.6140%" y="101" width="1.8748%" height="15" fill="rgb(210,31,41)"/><text x="15.8640%" y="111.50">r..</text></g><g><title>thir_body (217,024 samples, 0.26%)</title><rect x="17.4974%" y="101" width="0.2611%" height="15" fill="rgb(221,200,47)"/><text x="17.7474%" y="111.50"></text></g><g><title>mir_const (3,753,792 samples, 4.52%)</title><rect x="13.2495%" y="149" width="4.5156%" height="15" fill="rgb(226,26,5)"/><text x="13.4995%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (3,381,128 samples, 4.07%)</title><rect x="13.6978%" y="133" width="4.0673%" height="15" fill="rgb(249,33,26)"/><text x="13.9478%" y="143.50">unsa..</text></g><g><title>mir_built (3,065,545 samples, 3.69%)</title><rect x="14.0774%" y="117" width="3.6877%" height="15" fill="rgb(235,183,28)"/><text x="14.3274%" y="127.50">mir_..</text></g><g><title>mir_promoted (4,097,935 samples, 4.93%)</title><rect x="13.0476%" y="165" width="4.9296%" height="15" fill="rgb(221,5,38)"/><text x="13.2976%" y="175.50">mir_pr..</text></g><g><title>mir_const_qualif (176,291 samples, 0.21%)</title><rect x="17.7651%" y="149" width="0.2121%" height="15" fill="rgb(247,18,42)"/><text x="18.0151%" y="159.50"></text></g><g><title>mir_const (145,701 samples, 0.18%)</title><rect x="17.8019%" y="133" width="0.1753%" height="15" fill="rgb(241,131,45)"/><text x="18.0519%" y="143.50"></text></g><g><title>unsafety_check_result (98,731 samples, 0.12%)</title><rect x="17.8584%" y="117" width="0.1188%" height="15" fill="rgb(249,31,29)"/><text x="18.1084%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (174,991 samples, 0.21%)</title><rect x="17.9771%" y="165" width="0.2105%" height="15" fill="rgb(225,111,53)"/><text x="18.2271%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (536,945 samples, 0.65%)</title><rect x="18.1877%" y="165" width="0.6459%" height="15" fill="rgb(238,160,17)"/><text x="18.4377%" y="175.50"></text></g><g><title>normalize_projection_ty (357,474 samples, 0.43%)</title><rect x="18.4035%" y="149" width="0.4300%" height="15" fill="rgb(214,148,48)"/><text x="18.6535%" y="159.50"></text></g><g><title>type_op_normalize_predicate (250,873 samples, 0.30%)</title><rect x="18.8336%" y="165" width="0.3018%" height="15" fill="rgb(232,36,49)"/><text x="19.0836%" y="175.50"></text></g><g><title>normalize_projection_ty (163,211 samples, 0.20%)</title><rect x="18.9390%" y="149" width="0.1963%" height="15" fill="rgb(209,103,24)"/><text x="19.1890%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,194,083 samples, 11.06%)</title><rect x="9.3661%" y="197" width="11.0599%" height="15" fill="rgb(229,88,8)"/><text x="9.6161%" y="207.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (9,177,543 samples, 11.04%)</title><rect x="9.3860%" y="181" width="11.0400%" height="15" fill="rgb(213,181,19)"/><text x="9.6360%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,072,898 samples, 1.29%)</title><rect x="19.1353%" y="165" width="1.2906%" height="15" fill="rgb(254,191,54)"/><text x="19.3853%" y="175.50"></text></g><g><title>evaluate_obligation (91,320 samples, 0.11%)</title><rect x="20.3161%" y="149" width="0.1099%" height="15" fill="rgb(241,83,37)"/><text x="20.5661%" y="159.50"></text></g><g><title>MIR_effect_checking (116,512 samples, 0.14%)</title><rect x="20.4260%" y="197" width="0.1402%" height="15" fill="rgb(233,36,39)"/><text x="20.6760%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (91,831 samples, 0.11%)</title><rect x="20.4557%" y="181" width="0.1105%" height="15" fill="rgb(226,3,54)"/><text x="20.7057%" y="191.50"></text></g><g><title>hir_module_items (173,002 samples, 0.21%)</title><rect x="20.5661%" y="197" width="0.2081%" height="15" fill="rgb(245,192,40)"/><text x="20.8161%" y="207.50"></text></g><g><title>get_lang_items (97,011 samples, 0.12%)</title><rect x="21.0584%" y="149" width="0.1167%" height="15" fill="rgb(238,167,29)"/><text x="21.3084%" y="159.50"></text></g><g><title>codegen_fn_attrs (241,083 samples, 0.29%)</title><rect x="20.9603%" y="165" width="0.2900%" height="15" fill="rgb(232,182,51)"/><text x="21.2103%" y="175.50"></text></g><g><title>check_mod_attrs (366,804 samples, 0.44%)</title><rect x="20.8093%" y="181" width="0.4412%" height="15" fill="rgb(231,60,39)"/><text x="21.0593%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (235,733 samples, 0.28%)</title><rect x="21.3571%" y="181" width="0.2836%" height="15" fill="rgb(208,69,12)"/><text x="21.6071%" y="191.50"></text></g><g><title>misc_checking_1 (768,509 samples, 0.92%)</title><rect x="20.7749%" y="197" width="0.9245%" height="15" fill="rgb(235,93,37)"/><text x="21.0249%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (196,382 samples, 0.24%)</title><rect x="21.7010%" y="181" width="0.2362%" height="15" fill="rgb(213,116,39)"/><text x="21.9510%" y="191.50"></text></g><g><title>check_mod_liveness (168,042 samples, 0.20%)</title><rect x="21.7351%" y="165" width="0.2021%" height="15" fill="rgb(222,207,29)"/><text x="21.9851%" y="175.50"></text></g><g><title>misc_checking_2 (403,194 samples, 0.49%)</title><rect x="21.6993%" y="197" width="0.4850%" height="15" fill="rgb(206,96,30)"/><text x="21.9493%" y="207.50"></text></g><g><title>match_checking (205,432 samples, 0.25%)</title><rect x="21.9372%" y="181" width="0.2471%" height="15" fill="rgb(218,138,4)"/><text x="22.1872%" y="191.50"></text></g><g><title>check_match (196,632 samples, 0.24%)</title><rect x="21.9478%" y="165" width="0.2365%" height="15" fill="rgb(250,191,14)"/><text x="22.1978%" y="175.50"></text></g><g><title>eval_to_const_value_raw (114,871 samples, 0.14%)</title><rect x="23.2045%" y="149" width="0.1382%" height="15" fill="rgb(239,60,40)"/><text x="23.4545%" y="159.50"></text></g><g><title>eval_to_const_value_raw (112,481 samples, 0.14%)</title><rect x="23.2074%" y="133" width="0.1353%" height="15" fill="rgb(206,27,48)"/><text x="23.4574%" y="143.50"></text></g><g><title>eval_to_allocation_raw (106,851 samples, 0.13%)</title><rect x="23.2141%" y="117" width="0.1285%" height="15" fill="rgb(225,35,8)"/><text x="23.4641%" y="127.50"></text></g><g><title>trait_impls_of (218,122 samples, 0.26%)</title><rect x="23.4249%" y="149" width="0.2624%" height="15" fill="rgb(250,213,24)"/><text x="23.6749%" y="159.50"></text></g><g><title>crate_lints (3,858,753 samples, 4.64%)</title><rect x="22.3346%" y="165" width="4.6418%" height="15" fill="rgb(247,123,22)"/><text x="22.5846%" y="175.50">crate..</text></g><g><title>type_of (2,728,653 samples, 3.28%)</title><rect x="23.6940%" y="149" width="3.2824%" height="15" fill="rgb(231,138,38)"/><text x="23.9440%" y="159.50">typ..</text></g><g><title>metadata_decode_entry_type_of (2,474,600 samples, 2.98%)</title><rect x="23.9996%" y="133" width="2.9768%" height="15" fill="rgb(231,145,46)"/><text x="24.2496%" y="143.50">met..</text></g><g><title>lint_checking (4,008,284 samples, 4.82%)</title><rect x="22.3323%" y="181" width="4.8217%" height="15" fill="rgb(251,118,11)"/><text x="22.5823%" y="191.50">lint_c..</text></g><g><title>module_lints (147,591 samples, 0.18%)</title><rect x="26.9764%" y="165" width="0.1775%" height="15" fill="rgb(217,147,25)"/><text x="27.2264%" y="175.50"></text></g><g><title>lint_mod (144,171 samples, 0.17%)</title><rect x="26.9805%" y="149" width="0.1734%" height="15" fill="rgb(247,81,37)"/><text x="27.2305%" y="159.50"></text></g><g><title>privacy_checking_modules (179,892 samples, 0.22%)</title><rect x="27.2218%" y="181" width="0.2164%" height="15" fill="rgb(209,12,38)"/><text x="27.4718%" y="191.50"></text></g><g><title>check_mod_privacy (178,242 samples, 0.21%)</title><rect x="27.2238%" y="165" width="0.2144%" height="15" fill="rgb(227,1,9)"/><text x="27.4738%" y="175.50"></text></g><g><title>misc_checking_3 (4,375,968 samples, 5.26%)</title><rect x="22.1843%" y="197" width="5.2640%" height="15" fill="rgb(248,47,43)"/><text x="22.4343%" y="207.50">misc_c..</text></g><g><title>adt_sized_constraint (136,411 samples, 0.16%)</title><rect x="37.4913%" y="117" width="0.1641%" height="15" fill="rgb(221,10,30)"/><text x="37.7413%" y="127.50"></text></g><g><title>associated_item (491,628 samples, 0.59%)</title><rect x="37.8847%" y="101" width="0.5914%" height="15" fill="rgb(210,229,1)"/><text x="38.1347%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (401,137 samples, 0.48%)</title><rect x="37.9936%" y="85" width="0.4825%" height="15" fill="rgb(222,148,37)"/><text x="38.2436%" y="95.50"></text></g><g><title>associated_items (709,519 samples, 0.85%)</title><rect x="37.6793%" y="117" width="0.8535%" height="15" fill="rgb(234,67,33)"/><text x="37.9293%" y="127.50"></text></g><g><title>adt_dtorck_constraint (97,661 samples, 0.12%)</title><rect x="38.7775%" y="85" width="0.1175%" height="15" fill="rgb(247,98,35)"/><text x="39.0275%" y="95.50"></text></g><g><title>dropck_outlives (274,545 samples, 0.33%)</title><rect x="38.5913%" y="117" width="0.3303%" height="15" fill="rgb(247,138,52)"/><text x="38.8413%" y="127.50"></text></g><g><title>adt_dtorck_constraint (172,413 samples, 0.21%)</title><rect x="38.7142%" y="101" width="0.2074%" height="15" fill="rgb(213,79,30)"/><text x="38.9642%" y="111.50"></text></g><g><title>mir_for_ctfe (1,464,037 samples, 1.76%)</title><rect x="40.5980%" y="69" width="1.7611%" height="15" fill="rgb(246,177,23)"/><text x="40.8480%" y="79.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (1,446,417 samples, 1.74%)</title><rect x="40.6192%" y="53" width="1.7399%" height="15" fill="rgb(230,62,27)"/><text x="40.8692%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,903,472 samples, 3.49%)</title><rect x="38.9216%" y="117" width="3.4927%" height="15" fill="rgb(216,154,8)"/><text x="39.1716%" y="127.50">eva..</text></g><g><title>eval_to_const_value_raw (2,838,922 samples, 3.42%)</title><rect x="38.9992%" y="101" width="3.4150%" height="15" fill="rgb(244,35,45)"/><text x="39.2492%" y="111.50">eva..</text></g><g><title>eval_to_allocation_raw (2,767,492 samples, 3.33%)</title><rect x="39.0852%" y="85" width="3.3291%" height="15" fill="rgb(251,115,12)"/><text x="39.3352%" y="95.50">eva..</text></g><g><title>adt_def (134,841 samples, 0.16%)</title><rect x="44.0027%" y="85" width="0.1622%" height="15" fill="rgb(240,54,50)"/><text x="44.2527%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (131,901 samples, 0.16%)</title><rect x="44.0063%" y="69" width="0.1587%" height="15" fill="rgb(233,84,52)"/><text x="44.2563%" y="79.50"></text></g><g><title>item_attrs (99,701 samples, 0.12%)</title><rect x="44.0450%" y="53" width="0.1199%" height="15" fill="rgb(207,117,47)"/><text x="44.2950%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,511 samples, 0.12%)</title><rect x="44.0489%" y="37" width="0.1161%" height="15" fill="rgb(249,43,39)"/><text x="44.2989%" y="47.50"></text></g><g><title>adt_sized_constraint (169,262 samples, 0.20%)</title><rect x="43.9872%" y="101" width="0.2036%" height="15" fill="rgb(209,38,44)"/><text x="44.2372%" y="111.50"></text></g><g><title>impl_trait_ref (97,470 samples, 0.12%)</title><rect x="44.3301%" y="101" width="0.1173%" height="15" fill="rgb(236,212,23)"/><text x="44.5801%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (85,470 samples, 0.10%)</title><rect x="44.3445%" y="85" width="0.1028%" height="15" fill="rgb(242,79,21)"/><text x="44.5945%" y="95.50"></text></g><g><title>predicates_of (184,492 samples, 0.22%)</title><rect x="44.4783%" y="101" width="0.2219%" height="15" fill="rgb(211,96,35)"/><text x="44.7283%" y="111.50"></text></g><g><title>predicates_defined_on (120,772 samples, 0.15%)</title><rect x="44.5549%" y="85" width="0.1453%" height="15" fill="rgb(253,215,40)"/><text x="44.8049%" y="95.50"></text></g><g><title>specializes (154,641 samples, 0.19%)</title><rect x="44.7002%" y="101" width="0.1860%" height="15" fill="rgb(211,81,21)"/><text x="44.9502%" y="111.50"></text></g><g><title>param_env (121,621 samples, 0.15%)</title><rect x="44.7399%" y="85" width="0.1463%" height="15" fill="rgb(208,190,38)"/><text x="44.9899%" y="95.50"></text></g><g><title>trait_impls_of (1,109,692 samples, 1.33%)</title><rect x="44.9006%" y="101" width="1.3349%" height="15" fill="rgb(235,213,38)"/><text x="45.1506%" y="111.50"></text></g><g><title>implementations_of_trait (386,305 samples, 0.46%)</title><rect x="45.7708%" y="85" width="0.4647%" height="15" fill="rgb(237,122,38)"/><text x="46.0208%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (228,842 samples, 0.28%)</title><rect x="45.9602%" y="69" width="0.2753%" height="15" fill="rgb(244,218,35)"/><text x="46.2102%" y="79.50"></text></g><g><title>evaluate_obligation (3,182,733 samples, 3.83%)</title><rect x="42.4143%" y="117" width="3.8286%" height="15" fill="rgb(240,68,47)"/><text x="42.6643%" y="127.50">eval..</text></g><g><title>fn_sig (142,672 samples, 0.17%)</title><rect x="46.2739%" y="117" width="0.1716%" height="15" fill="rgb(210,16,53)"/><text x="46.5239%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (129,472 samples, 0.16%)</title><rect x="46.2898%" y="101" width="0.1557%" height="15" fill="rgb(235,124,12)"/><text x="46.5398%" y="111.50"></text></g><g><title>generics_of (257,614 samples, 0.31%)</title><rect x="46.4456%" y="117" width="0.3099%" height="15" fill="rgb(224,169,11)"/><text x="46.6956%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (196,033 samples, 0.24%)</title><rect x="46.5196%" y="101" width="0.2358%" height="15" fill="rgb(250,166,2)"/><text x="46.7696%" y="111.50"></text></g><g><title>impl_item_implementor_ids (118,792 samples, 0.14%)</title><rect x="46.7554%" y="117" width="0.1429%" height="15" fill="rgb(242,216,29)"/><text x="47.0054%" y="127.50"></text></g><g><title>associated_items (102,612 samples, 0.12%)</title><rect x="46.7749%" y="101" width="0.1234%" height="15" fill="rgb(230,116,27)"/><text x="47.0249%" y="111.50"></text></g><g><title>impl_trait_ref (238,112 samples, 0.29%)</title><rect x="46.9626%" y="117" width="0.2864%" height="15" fill="rgb(228,99,48)"/><text x="47.2126%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (205,762 samples, 0.25%)</title><rect x="47.0015%" y="101" width="0.2475%" height="15" fill="rgb(253,11,6)"/><text x="47.2515%" y="111.50"></text></g><g><title>predicates_of (87,400 samples, 0.11%)</title><rect x="47.4827%" y="85" width="0.1051%" height="15" fill="rgb(247,143,39)"/><text x="47.7327%" y="95.50"></text></g><g><title>is_copy_raw (419,925 samples, 0.51%)</title><rect x="47.3213%" y="117" width="0.5051%" height="15" fill="rgb(236,97,10)"/><text x="47.5713%" y="127.50"></text></g><g><title>evaluate_obligation (394,204 samples, 0.47%)</title><rect x="47.3522%" y="101" width="0.4742%" height="15" fill="rgb(233,208,19)"/><text x="47.6022%" y="111.50"></text></g><g><title>trait_impls_of (197,232 samples, 0.24%)</title><rect x="47.5891%" y="85" width="0.2373%" height="15" fill="rgb(216,164,2)"/><text x="47.8391%" y="95.50"></text></g><g><title>evaluate_obligation (231,083 samples, 0.28%)</title><rect x="48.2648%" y="101" width="0.2780%" height="15" fill="rgb(220,129,5)"/><text x="48.5148%" y="111.50"></text></g><g><title>method_autoderef_steps (444,644 samples, 0.53%)</title><rect x="48.0238%" y="117" width="0.5349%" height="15" fill="rgb(242,17,10)"/><text x="48.2738%" y="127.50"></text></g><g><title>explicit_predicates_of (222,033 samples, 0.27%)</title><rect x="48.9243%" y="85" width="0.2671%" height="15" fill="rgb(242,107,0)"/><text x="49.1743%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (184,643 samples, 0.22%)</title><rect x="48.9693%" y="69" width="0.2221%" height="15" fill="rgb(251,28,31)"/><text x="49.2193%" y="79.50"></text></g><g><title>predicates_of (570,684 samples, 0.69%)</title><rect x="48.5850%" y="117" width="0.6865%" height="15" fill="rgb(233,223,10)"/><text x="48.8350%" y="127.50"></text></g><g><title>predicates_defined_on (404,123 samples, 0.49%)</title><rect x="48.7854%" y="101" width="0.4861%" height="15" fill="rgb(215,21,27)"/><text x="49.0354%" y="111.50"></text></g><g><title>resolve_instance (107,151 samples, 0.13%)</title><rect x="49.2715%" y="117" width="0.1289%" height="15" fill="rgb(232,23,21)"/><text x="49.5215%" y="127.50"></text></g><g><title>specializes (251,213 samples, 0.30%)</title><rect x="49.4004%" y="117" width="0.3022%" height="15" fill="rgb(244,5,23)"/><text x="49.6504%" y="127.50"></text></g><g><title>param_env (84,570 samples, 0.10%)</title><rect x="49.6009%" y="101" width="0.1017%" height="15" fill="rgb(226,81,46)"/><text x="49.8509%" y="111.50"></text></g><g><title>item_bodies_checking (18,579,068 samples, 22.35%)</title><rect x="27.5416%" y="181" width="22.3494%" height="15" fill="rgb(247,70,30)"/><text x="27.7916%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,576,188 samples, 22.35%)</title><rect x="27.5450%" y="165" width="22.3460%" height="15" fill="rgb(212,68,19)"/><text x="27.7950%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (18,563,638 samples, 22.33%)</title><rect x="27.5601%" y="149" width="22.3309%" height="15" fill="rgb(240,187,13)"/><text x="27.8101%" y="159.50">typeck</text></g><g><title>typeck (18,554,817 samples, 22.32%)</title><rect x="27.5707%" y="133" width="22.3203%" height="15" fill="rgb(223,113,26)"/><text x="27.8207%" y="143.50">typeck</text></g><g><title>impl_parent (185,833 samples, 0.22%)</title><rect x="50.2377%" y="101" width="0.2235%" height="15" fill="rgb(206,192,2)"/><text x="50.4877%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (132,433 samples, 0.16%)</title><rect x="50.3020%" y="85" width="0.1593%" height="15" fill="rgb(241,108,4)"/><text x="50.5520%" y="95.50"></text></g><g><title>impl_trait_ref (652,616 samples, 0.79%)</title><rect x="50.4613%" y="101" width="0.7851%" height="15" fill="rgb(247,173,49)"/><text x="50.7113%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (604,956 samples, 0.73%)</title><rect x="50.5186%" y="85" width="0.7277%" height="15" fill="rgb(224,114,35)"/><text x="50.7686%" y="95.50"></text></g><g><title>adt_destructor (1,131,673 samples, 1.36%)</title><rect x="49.9705%" y="149" width="1.3613%" height="15" fill="rgb(245,159,27)"/><text x="50.2205%" y="159.50"></text></g><g><title>coherent_trait (1,121,522 samples, 1.35%)</title><rect x="49.9827%" y="133" width="1.3491%" height="15" fill="rgb(245,172,44)"/><text x="50.2327%" y="143.50"></text></g><g><title>specialization_graph_of (1,114,302 samples, 1.34%)</title><rect x="49.9914%" y="117" width="1.3404%" height="15" fill="rgb(236,23,11)"/><text x="50.2414%" y="127.50"></text></g><g><title>item_types_checking (1,458,706 samples, 1.75%)</title><rect x="49.8910%" y="181" width="1.7547%" height="15" fill="rgb(205,117,38)"/><text x="50.1410%" y="191.50"></text></g><g><title>check_mod_item_types (1,455,056 samples, 1.75%)</title><rect x="49.8954%" y="165" width="1.7503%" height="15" fill="rgb(237,72,25)"/><text x="50.1454%" y="175.50"></text></g><g><title>typeck (246,733 samples, 0.30%)</title><rect x="51.3489%" y="149" width="0.2968%" height="15" fill="rgb(244,70,9)"/><text x="51.5989%" y="159.50"></text></g><g><title>named_region_map (132,441 samples, 0.16%)</title><rect x="51.9208%" y="133" width="0.1593%" height="15" fill="rgb(217,125,39)"/><text x="52.1708%" y="143.50"></text></g><g><title>resolve_lifetimes (125,591 samples, 0.15%)</title><rect x="51.9291%" y="117" width="0.1511%" height="15" fill="rgb(235,36,10)"/><text x="52.1791%" y="127.50"></text></g><g><title>generics_of (193,821 samples, 0.23%)</title><rect x="51.8602%" y="149" width="0.2332%" height="15" fill="rgb(251,123,47)"/><text x="52.1102%" y="159.50"></text></g><g><title>explicit_predicates_of (87,731 samples, 0.11%)</title><rect x="52.1348%" y="117" width="0.1055%" height="15" fill="rgb(221,13,13)"/><text x="52.3848%" y="127.50"></text></g><g><title>predicates_of (345,024 samples, 0.42%)</title><rect x="52.0934%" y="149" width="0.4150%" height="15" fill="rgb(238,131,9)"/><text x="52.3434%" y="159.50"></text></g><g><title>predicates_defined_on (332,933 samples, 0.40%)</title><rect x="52.1079%" y="133" width="0.4005%" height="15" fill="rgb(211,50,8)"/><text x="52.3579%" y="143.50"></text></g><g><title>inferred_outlives_of (222,882 samples, 0.27%)</title><rect x="52.2403%" y="117" width="0.2681%" height="15" fill="rgb(245,182,24)"/><text x="52.4903%" y="127.50"></text></g><g><title>inferred_outlives_crate (206,252 samples, 0.25%)</title><rect x="52.2603%" y="101" width="0.2481%" height="15" fill="rgb(242,14,37)"/><text x="52.5103%" y="111.50"></text></g><g><title>type_of (95,781 samples, 0.12%)</title><rect x="52.3932%" y="85" width="0.1152%" height="15" fill="rgb(246,228,12)"/><text x="52.6432%" y="95.50"></text></g><g><title>type_collecting (814,178 samples, 0.98%)</title><rect x="51.6471%" y="181" width="0.9794%" height="15" fill="rgb(213,55,15)"/><text x="51.8971%" y="191.50"></text></g><g><title>collect_mod_item_types (802,168 samples, 0.96%)</title><rect x="51.6615%" y="165" width="0.9650%" height="15" fill="rgb(209,9,3)"/><text x="51.9115%" y="175.50"></text></g><g><title>type_of (98,141 samples, 0.12%)</title><rect x="52.5084%" y="149" width="0.1181%" height="15" fill="rgb(230,59,30)"/><text x="52.7584%" y="159.50"></text></g><g><title>adt_def (140,561 samples, 0.17%)</title><rect x="53.7291%" y="117" width="0.1691%" height="15" fill="rgb(209,121,21)"/><text x="53.9791%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (137,721 samples, 0.17%)</title><rect x="53.7325%" y="101" width="0.1657%" height="15" fill="rgb(220,109,13)"/><text x="53.9825%" y="111.50"></text></g><g><title>item_attrs (121,051 samples, 0.15%)</title><rect x="53.7526%" y="85" width="0.1456%" height="15" fill="rgb(232,18,1)"/><text x="54.0026%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,611 samples, 0.14%)</title><rect x="53.7555%" y="69" width="0.1427%" height="15" fill="rgb(215,41,42)"/><text x="54.0055%" y="79.50"></text></g><g><title>adt_sized_constraint (153,421 samples, 0.18%)</title><rect x="53.7161%" y="133" width="0.1846%" height="15" fill="rgb(224,123,36)"/><text x="53.9661%" y="143.50"></text></g><g><title>evaluate_obligation (444,054 samples, 0.53%)</title><rect x="53.4839%" y="149" width="0.5342%" height="15" fill="rgb(240,125,3)"/><text x="53.7339%" y="159.50"></text></g><g><title>implied_outlives_bounds (118,361 samples, 0.14%)</title><rect x="54.0181%" y="149" width="0.1424%" height="15" fill="rgb(205,98,50)"/><text x="54.2681%" y="159.50"></text></g><g><title>param_env (300,335 samples, 0.36%)</title><rect x="54.1605%" y="149" width="0.3613%" height="15" fill="rgb(205,185,37)"/><text x="54.4105%" y="159.50"></text></g><g><title>region_scope_tree (136,882 samples, 0.16%)</title><rect x="54.6158%" y="149" width="0.1647%" height="15" fill="rgb(238,207,15)"/><text x="54.8658%" y="159.50"></text></g><g><title>analysis (38,083,894 samples, 45.81%)</title><rect x="9.1068%" y="213" width="45.8125%" height="15" fill="rgb(213,199,42)"/><text x="9.3568%" y="223.50">analysis</text></g><g><title>type_check_crate (22,836,584 samples, 27.47%)</title><rect x="27.4484%" y="197" width="27.4709%" height="15" fill="rgb(235,201,11)"/><text x="27.6984%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,904,951 samples, 2.29%)</title><rect x="52.6278%" y="181" width="2.2915%" height="15" fill="rgb(207,46,11)"/><text x="52.8778%" y="191.50">w..</text></g><g><title>check_item_well_formed (1,841,181 samples, 2.21%)</title><rect x="52.7045%" y="165" width="2.2148%" height="15" fill="rgb(241,35,35)"/><text x="52.9545%" y="175.50">c..</text></g><g><title>codegen_module (210,023 samples, 0.25%)</title><rect x="55.4551%" y="197" width="0.2526%" height="15" fill="rgb(243,32,47)"/><text x="55.7051%" y="207.50"></text></g><g><title>codegen_crate (788,429 samples, 0.95%)</title><rect x="54.9336%" y="213" width="0.9484%" height="15" fill="rgb(247,202,23)"/><text x="55.1836%" y="223.50"></text></g><g><title>codegen_module_optimize (2,469,708 samples, 2.97%)</title><rect x="55.8821%" y="213" width="2.9709%" height="15" fill="rgb(219,102,11)"/><text x="56.1321%" y="223.50">cod..</text></g><g><title>LLVM_module_optimize (295,814 samples, 0.36%)</title><rect x="58.4971%" y="197" width="0.3558%" height="15" fill="rgb(243,110,44)"/><text x="58.7471%" y="207.50"></text></g><g><title>LLVM_lto_optimize (260,323 samples, 0.31%)</title><rect x="59.3749%" y="197" width="0.3132%" height="15" fill="rgb(222,74,54)"/><text x="59.6249%" y="207.50"></text></g><g><title>LLVM_module_codegen (2,710,740 samples, 3.26%)</title><rect x="59.6881%" y="197" width="3.2608%" height="15" fill="rgb(216,99,12)"/><text x="59.9381%" y="207.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (2,671,820 samples, 3.21%)</title><rect x="59.7349%" y="181" width="3.2140%" height="15" fill="rgb(226,22,26)"/><text x="59.9849%" y="191.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,441,759 samples, 4.14%)</title><rect x="58.8530%" y="213" width="4.1402%" height="15" fill="rgb(217,163,10)"/><text x="59.1030%" y="223.50">codeg..</text></g><g><title>AST_validation (129,602 samples, 0.16%)</title><rect x="63.2597%" y="197" width="0.1559%" height="15" fill="rgb(213,25,53)"/><text x="63.5097%" y="207.50"></text></g><g><title>crate_injection (97,471 samples, 0.12%)</title><rect x="63.4545%" y="197" width="0.1173%" height="15" fill="rgb(252,105,26)"/><text x="63.7045%" y="207.50"></text></g><g><title>metadata_load_macro (131,492 samples, 0.16%)</title><rect x="76.1579%" y="165" width="0.1582%" height="15" fill="rgb(220,39,43)"/><text x="76.4079%" y="175.50"></text></g><g><title>macro_expand_crate (14,253,779 samples, 17.15%)</title><rect x="63.5717%" y="197" width="17.1464%" height="15" fill="rgb(229,68,48)"/><text x="63.8217%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (14,227,098 samples, 17.11%)</title><rect x="63.6038%" y="181" width="17.1143%" height="15" fill="rgb(252,8,32)"/><text x="63.8538%" y="191.50">expand_crate</text></g><g><title>metadata_register_crate (3,659,461 samples, 4.40%)</title><rect x="76.3160%" y="165" width="4.4021%" height="15" fill="rgb(223,20,43)"/><text x="76.5660%" y="175.50">metad..</text></g><g><title>metadata_register_crate (1,527,856 samples, 1.84%)</title><rect x="78.8802%" y="149" width="1.8379%" height="15" fill="rgb(229,81,49)"/><text x="79.1302%" y="159.50">m..</text></g><g><title>metadata_register_crate (346,272 samples, 0.42%)</title><rect x="80.3016%" y="133" width="0.4165%" height="15" fill="rgb(236,28,36)"/><text x="80.5516%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (114,151 samples, 0.14%)</title><rect x="80.7243%" y="197" width="0.1373%" height="15" fill="rgb(249,185,26)"/><text x="80.9743%" y="207.50"></text></g><g><title>finalize_imports (424,565 samples, 0.51%)</title><rect x="80.8731%" y="181" width="0.5107%" height="15" fill="rgb(249,174,33)"/><text x="81.1231%" y="191.50"></text></g><g><title>late_resolve_crate (1,293,065 samples, 1.56%)</title><rect x="81.4133%" y="181" width="1.5555%" height="15" fill="rgb(233,201,37)"/><text x="81.6633%" y="191.50"></text></g><g><title>configure_and_expand (16,661,776 samples, 20.04%)</title><rect x="62.9932%" y="213" width="20.0430%" height="15" fill="rgb(221,78,26)"/><text x="63.2432%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,807,730 samples, 2.17%)</title><rect x="80.8617%" y="197" width="2.1746%" height="15" fill="rgb(250,127,30)"/><text x="81.1117%" y="207.50">r..</text></g><g><title>early_lint_checks (164,612 samples, 0.20%)</title><rect x="83.1545%" y="213" width="0.1980%" height="15" fill="rgb(230,49,44)"/><text x="83.4045%" y="223.50"></text></g><g><title>free_global_ctxt (3,425,829 samples, 4.12%)</title><rect x="83.3526%" y="213" width="4.1211%" height="15" fill="rgb(229,67,23)"/><text x="83.6026%" y="223.50">free..</text></g><g><title>layout_of (191,671 samples, 0.23%)</title><rect x="89.5110%" y="165" width="0.2306%" height="15" fill="rgb(249,83,47)"/><text x="89.7610%" y="175.50"></text></g><g><title>layout_of (134,841 samples, 0.16%)</title><rect x="89.5794%" y="149" width="0.1622%" height="15" fill="rgb(215,43,3)"/><text x="89.8294%" y="159.50"></text></g><g><title>layout_of (94,091 samples, 0.11%)</title><rect x="89.6284%" y="133" width="0.1132%" height="15" fill="rgb(238,154,13)"/><text x="89.8784%" y="143.50"></text></g><g><title>layout_of (576,054 samples, 0.69%)</title><rect x="89.1139%" y="181" width="0.6930%" height="15" fill="rgb(219,56,2)"/><text x="89.3639%" y="191.50"></text></g><g><title>needs_drop_raw (88,870 samples, 0.11%)</title><rect x="90.7694%" y="165" width="0.1069%" height="15" fill="rgb(233,0,4)"/><text x="91.0194%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (891,379 samples, 1.07%)</title><rect x="89.8069%" y="181" width="1.0723%" height="15" fill="rgb(235,30,7)"/><text x="90.0569%" y="191.50"></text></g><g><title>optimized_mir (2,232,306 samples, 2.69%)</title><rect x="88.2064%" y="197" width="2.6853%" height="15" fill="rgb(250,79,13)"/><text x="88.4564%" y="207.50">op..</text></g><g><title>generate_crate_metadata (2,856,572 samples, 3.44%)</title><rect x="87.4736%" y="213" width="3.4363%" height="15" fill="rgb(211,146,34)"/><text x="87.7236%" y="223.50">gen..</text></g><g><title>hir_lowering (1,085,922 samples, 1.31%)</title><rect x="90.9099%" y="213" width="1.3063%" height="15" fill="rgb(228,22,38)"/><text x="91.1599%" y="223.50"></text></g><g><title>finish_ongoing_codegen (3,067,684 samples, 3.69%)</title><rect x="92.2454%" y="197" width="3.6902%" height="15" fill="rgb(235,168,5)"/><text x="92.4954%" y="207.50">fini..</text></g><g><title>link_crate (638,198 samples, 0.77%)</title><rect x="95.9356%" y="197" width="0.7677%" height="15" fill="rgb(221,155,16)"/><text x="96.1856%" y="207.50"></text></g><g><title>link_binary (615,316 samples, 0.74%)</title><rect x="95.9631%" y="181" width="0.7402%" height="15" fill="rgb(215,215,53)"/><text x="96.2131%" y="191.50"></text></g><g><title>link_rlib (382,544 samples, 0.46%)</title><rect x="96.2431%" y="165" width="0.4602%" height="15" fill="rgb(223,4,10)"/><text x="96.4931%" y="175.50"></text></g><g><title>link (3,736,652 samples, 4.49%)</title><rect x="92.2162%" y="213" width="4.4950%" height="15" fill="rgb(234,103,6)"/><text x="92.4662%" y="223.50">link</text></g><g><title>parse_crate (1,462,996 samples, 1.76%)</title><rect x="96.7111%" y="213" width="1.7599%" height="15" fill="rgb(227,97,0)"/><text x="96.9611%" y="223.50"></text></g><g><title>prepare_outputs (348,843 samples, 0.42%)</title><rect x="98.4834%" y="213" width="0.4196%" height="15" fill="rgb(234,150,53)"/><text x="98.7334%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (453,435 samples, 0.55%)</title><rect x="98.9030%" y="213" width="0.5455%" height="15" fill="rgb(228,201,54)"/><text x="99.1530%" y="223.50"></text></g><g><title>setup_global_ctxt (148,201 samples, 0.18%)</title><rect x="99.4564%" y="213" width="0.1783%" height="15" fill="rgb(222,22,37)"/><text x="99.7064%" y="223.50"></text></g><g><title>all (83,129,948 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,53,32)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (83,129,948 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,25,53)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (303,723 samples, 0.37%)</title><rect x="99.6346%" y="213" width="0.3654%" height="15" fill="rgb(210,40,34)"/><text x="99.8846%" y="223.50"></text></g></svg></svg>