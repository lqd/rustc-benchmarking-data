<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (59,567,523 samples, 18.49%)</title><rect x="0.2290%" y="149" width="18.4908%" height="15" fill="rgb(227,0,7)"/><text x="0.4790%" y="159.50">LLVM_passes</text></g><g><title>mir_const (1,235,985 samples, 0.38%)</title><rect x="19.2289%" y="85" width="0.3837%" height="15" fill="rgb(217,0,24)"/><text x="19.4789%" y="95.50"></text></g><g><title>unsafety_check_result (1,050,303 samples, 0.33%)</title><rect x="19.2866%" y="69" width="0.3260%" height="15" fill="rgb(221,193,54)"/><text x="19.5366%" y="79.50"></text></g><g><title>mir_built (941,211 samples, 0.29%)</title><rect x="19.3204%" y="53" width="0.2922%" height="15" fill="rgb(248,212,6)"/><text x="19.5704%" y="63.50"></text></g><g><title>mir_promoted (1,387,675 samples, 0.43%)</title><rect x="19.1847%" y="101" width="0.4308%" height="15" fill="rgb(208,68,35)"/><text x="19.4347%" y="111.50"></text></g><g><title>MIR_borrow_checking (2,992,224 samples, 0.93%)</title><rect x="18.7767%" y="133" width="0.9288%" height="15" fill="rgb(232,128,0)"/><text x="19.0267%" y="143.50"></text></g><g><title>mir_borrowck (2,977,413 samples, 0.92%)</title><rect x="18.7813%" y="117" width="0.9242%" height="15" fill="rgb(207,160,47)"/><text x="19.0313%" y="127.50"></text></g><g><title>codegen_fn_attrs (414,265 samples, 0.13%)</title><rect x="19.8100%" y="101" width="0.1286%" height="15" fill="rgb(228,23,34)"/><text x="20.0600%" y="111.50"></text></g><g><title>check_mod_attrs (565,197 samples, 0.18%)</title><rect x="19.7634%" y="117" width="0.1754%" height="15" fill="rgb(218,30,26)"/><text x="20.0134%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (396,035 samples, 0.12%)</title><rect x="19.9685%" y="117" width="0.1229%" height="15" fill="rgb(220,122,19)"/><text x="20.2185%" y="127.50"></text></g><g><title>misc_checking_1 (1,137,732 samples, 0.35%)</title><rect x="19.7531%" y="133" width="0.3532%" height="15" fill="rgb(250,228,42)"/><text x="20.0031%" y="143.50"></text></g><g><title>crate_lints (1,573,357 samples, 0.49%)</title><rect x="20.2277%" y="101" width="0.4884%" height="15" fill="rgb(240,193,28)"/><text x="20.4777%" y="111.50"></text></g><g><title>type_of (1,033,911 samples, 0.32%)</title><rect x="20.3952%" y="85" width="0.3209%" height="15" fill="rgb(216,20,37)"/><text x="20.6452%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (800,569 samples, 0.25%)</title><rect x="20.4676%" y="69" width="0.2485%" height="15" fill="rgb(206,188,39)"/><text x="20.7176%" y="79.50"></text></g><g><title>lint_checking (1,650,028 samples, 0.51%)</title><rect x="20.2273%" y="117" width="0.5122%" height="15" fill="rgb(217,207,13)"/><text x="20.4773%" y="127.50"></text></g><g><title>misc_checking_3 (2,036,132 samples, 0.63%)</title><rect x="20.1600%" y="133" width="0.6321%" height="15" fill="rgb(231,73,38)"/><text x="20.4100%" y="143.50"></text></g><g><title>impl_parent (2,226,526 samples, 0.69%)</title><rect x="21.9478%" y="69" width="0.6912%" height="15" fill="rgb(225,20,46)"/><text x="22.1978%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,357,330 samples, 0.42%)</title><rect x="22.2176%" y="53" width="0.4213%" height="15" fill="rgb(210,31,41)"/><text x="22.4676%" y="63.50"></text></g><g><title>impl_trait_ref (6,944,430 samples, 2.16%)</title><rect x="22.6389%" y="69" width="2.1557%" height="15" fill="rgb(221,200,47)"/><text x="22.8889%" y="79.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,081,223 samples, 1.89%)</title><rect x="22.9069%" y="53" width="1.8877%" height="15" fill="rgb(226,26,5)"/><text x="23.1569%" y="63.50">m..</text></g><g><title>coherent_trait (13,594,522 samples, 4.22%)</title><rect x="20.8067%" y="101" width="4.2200%" height="15" fill="rgb(249,33,26)"/><text x="21.0567%" y="111.50">coher..</text></g><g><title>specialization_graph_of (13,582,081 samples, 4.22%)</title><rect x="20.8106%" y="85" width="4.2161%" height="15" fill="rgb(235,183,28)"/><text x="21.0606%" y="95.50">speci..</text></g><g><title>trait_impls_of (744,967 samples, 0.23%)</title><rect x="24.7955%" y="69" width="0.2313%" height="15" fill="rgb(221,5,38)"/><text x="25.0455%" y="79.50"></text></g><g><title>coherence_checking (13,661,582 samples, 4.24%)</title><rect x="20.7990%" y="117" width="4.2408%" height="15" fill="rgb(247,18,42)"/><text x="21.0490%" y="127.50">coher..</text></g><g><title>evaluate_obligation (481,809 samples, 0.15%)</title><rect x="25.7198%" y="69" width="0.1496%" height="15" fill="rgb(241,131,45)"/><text x="25.9698%" y="79.50"></text></g><g><title>item_bodies_checking (3,432,338 samples, 1.07%)</title><rect x="25.0476%" y="117" width="1.0655%" height="15" fill="rgb(249,31,29)"/><text x="25.2976%" y="127.50"></text></g><g><title>typeck_item_bodies (3,430,648 samples, 1.06%)</title><rect x="25.0482%" y="101" width="1.0649%" height="15" fill="rgb(225,111,53)"/><text x="25.2982%" y="111.50"></text></g><g><title>typeck (3,418,417 samples, 1.06%)</title><rect x="25.0519%" y="85" width="1.0611%" height="15" fill="rgb(238,160,17)"/><text x="25.3019%" y="95.50"></text></g><g><title>item_types_checking (443,205 samples, 0.14%)</title><rect x="26.1131%" y="117" width="0.1376%" height="15" fill="rgb(214,148,48)"/><text x="26.3631%" y="127.50"></text></g><g><title>check_mod_item_types (441,145 samples, 0.14%)</title><rect x="26.1137%" y="101" width="0.1369%" height="15" fill="rgb(232,36,49)"/><text x="26.3637%" y="111.50"></text></g><g><title>fn_sig (374,596 samples, 0.12%)</title><rect x="26.2988%" y="85" width="0.1163%" height="15" fill="rgb(209,103,24)"/><text x="26.5488%" y="95.50"></text></g><g><title>type_collecting (1,269,855 samples, 0.39%)</title><rect x="26.2510%" y="117" width="0.3942%" height="15" fill="rgb(229,88,8)"/><text x="26.5010%" y="127.50"></text></g><g><title>collect_mod_item_types (1,254,894 samples, 0.39%)</title><rect x="26.2556%" y="101" width="0.3895%" height="15" fill="rgb(213,181,19)"/><text x="26.5056%" y="111.50"></text></g><g><title>check_impl_item_well_formed (556,966 samples, 0.17%)</title><rect x="26.6563%" y="101" width="0.1729%" height="15" fill="rgb(254,191,54)"/><text x="26.9063%" y="111.50"></text></g><g><title>check_item_well_formed (493,885 samples, 0.15%)</title><rect x="26.8292%" y="101" width="0.1533%" height="15" fill="rgb(241,83,37)"/><text x="27.0792%" y="111.50"></text></g><g><title>analysis (26,976,890 samples, 8.37%)</title><rect x="18.7198%" y="149" width="8.3741%" height="15" fill="rgb(233,36,39)"/><text x="18.9698%" y="159.50">analysis</text></g><g><title>type_check_crate (20,301,386 samples, 6.30%)</title><rect x="20.7920%" y="133" width="6.3019%" height="15" fill="rgb(226,3,54)"/><text x="21.0420%" y="143.50">type_che..</text></g><g><title>wf_checking (1,444,586 samples, 0.45%)</title><rect x="26.6455%" y="117" width="0.4484%" height="15" fill="rgb(245,192,40)"/><text x="26.8955%" y="127.50"></text></g><g><title>check_trait_item_well_formed (358,884 samples, 0.11%)</title><rect x="26.9825%" y="101" width="0.1114%" height="15" fill="rgb(238,167,29)"/><text x="27.2325%" y="111.50"></text></g><g><title>codegen_fn_attrs (343,824 samples, 0.11%)</title><rect x="29.7537%" y="101" width="0.1067%" height="15" fill="rgb(232,182,51)"/><text x="30.0037%" y="111.50"></text></g><g><title>is_unpin_raw (339,566 samples, 0.11%)</title><rect x="29.9696%" y="101" width="0.1054%" height="15" fill="rgb(231,60,39)"/><text x="30.2196%" y="111.50"></text></g><g><title>layout_of (1,201,635 samples, 0.37%)</title><rect x="30.0750%" y="101" width="0.3730%" height="15" fill="rgb(208,69,12)"/><text x="30.3250%" y="111.50"></text></g><g><title>predicates_of (360,953 samples, 0.11%)</title><rect x="30.6664%" y="85" width="0.1120%" height="15" fill="rgb(235,93,37)"/><text x="30.9164%" y="95.50"></text></g><g><title>param_env (1,067,868 samples, 0.33%)</title><rect x="30.4480%" y="101" width="0.3315%" height="15" fill="rgb(213,116,39)"/><text x="30.6980%" y="111.50"></text></g><g><title>fn_abi_of_instance (4,205,563 samples, 1.31%)</title><rect x="29.5116%" y="117" width="1.3055%" height="15" fill="rgb(222,207,29)"/><text x="29.7616%" y="127.50"></text></g><g><title>layout_of (478,085 samples, 0.15%)</title><rect x="30.8785%" y="117" width="0.1484%" height="15" fill="rgb(206,96,30)"/><text x="31.1285%" y="127.50"></text></g><g><title>codegen_module (11,691,002 samples, 3.63%)</title><rect x="27.4959%" y="133" width="3.6291%" height="15" fill="rgb(218,138,4)"/><text x="27.7459%" y="143.50">code..</text></g><g><title>item_attrs (452,189 samples, 0.14%)</title><rect x="31.3386%" y="69" width="0.1404%" height="15" fill="rgb(250,191,14)"/><text x="31.5886%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (437,579 samples, 0.14%)</title><rect x="31.3431%" y="53" width="0.1358%" height="15" fill="rgb(239,60,40)"/><text x="31.5931%" y="63.50"></text></g><g><title>codegen_fn_attrs (699,441 samples, 0.22%)</title><rect x="31.3060%" y="85" width="0.2171%" height="15" fill="rgb(206,27,48)"/><text x="31.5560%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (557,125 samples, 0.17%)</title><rect x="31.8241%" y="69" width="0.1729%" height="15" fill="rgb(225,35,8)"/><text x="32.0741%" y="79.50"></text></g><g><title>optimized_mir (1,339,883 samples, 0.42%)</title><rect x="31.6534%" y="85" width="0.4159%" height="15" fill="rgb(250,213,24)"/><text x="31.9034%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (866,689 samples, 0.27%)</title><rect x="32.1526%" y="69" width="0.2690%" height="15" fill="rgb(247,123,22)"/><text x="32.4026%" y="79.50"></text></g><g><title>impl_parent (329,565 samples, 0.10%)</title><rect x="32.7713%" y="53" width="0.1023%" height="15" fill="rgb(231,138,38)"/><text x="33.0213%" y="63.50"></text></g><g><title>specialization_graph_of (1,821,881 samples, 0.57%)</title><rect x="32.5319%" y="69" width="0.5655%" height="15" fill="rgb(231,145,46)"/><text x="32.7819%" y="79.50"></text></g><g><title>impl_trait_ref (721,276 samples, 0.22%)</title><rect x="32.8736%" y="53" width="0.2239%" height="15" fill="rgb(251,118,11)"/><text x="33.1236%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (584,282 samples, 0.18%)</title><rect x="32.9161%" y="37" width="0.1814%" height="15" fill="rgb(217,147,25)"/><text x="33.1661%" y="47.50"></text></g><g><title>resolve_instance (3,460,656 samples, 1.07%)</title><rect x="32.0693%" y="85" width="1.0742%" height="15" fill="rgb(247,81,37)"/><text x="32.3193%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (7,118,778 samples, 2.21%)</title><rect x="31.1382%" y="101" width="2.2098%" height="15" fill="rgb(209,12,38)"/><text x="31.3882%" y="111.50">m..</text></g><g><title>vtable_entries (597,988 samples, 0.19%)</title><rect x="33.1624%" y="85" width="0.1856%" height="15" fill="rgb(227,1,9)"/><text x="33.4124%" y="95.50"></text></g><g><title>monomorphization_collector (7,143,879 samples, 2.22%)</title><rect x="31.1376%" y="117" width="2.2176%" height="15" fill="rgb(248,47,43)"/><text x="31.3876%" y="127.50">m..</text></g><g><title>assert_symbols_are_distinct (516,925 samples, 0.16%)</title><rect x="33.3571%" y="101" width="0.1605%" height="15" fill="rgb(221,10,30)"/><text x="33.6071%" y="111.50"></text></g><g><title>symbol_name (472,075 samples, 0.15%)</title><rect x="33.3710%" y="85" width="0.1465%" height="15" fill="rgb(210,229,1)"/><text x="33.6210%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (7,891,818 samples, 2.45%)</title><rect x="31.1258%" y="133" width="2.4498%" height="15" fill="rgb(222,148,37)"/><text x="31.3758%" y="143.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (710,008 samples, 0.22%)</title><rect x="33.3552%" y="117" width="0.2204%" height="15" fill="rgb(234,67,33)"/><text x="33.6052%" y="127.50"></text></g><g><title>codegen_crate (20,937,383 samples, 6.50%)</title><rect x="27.0971%" y="149" width="6.4993%" height="15" fill="rgb(247,98,35)"/><text x="27.3471%" y="159.50">codegen_c..</text></g><g><title>codegen_module_optimize (66,743,855 samples, 20.72%)</title><rect x="33.5964%" y="149" width="20.7185%" height="15" fill="rgb(247,138,52)"/><text x="33.8464%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (59,803,766 samples, 18.56%)</title><rect x="35.7507%" y="133" width="18.5641%" height="15" fill="rgb(213,79,30)"/><text x="36.0007%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (18,983,732 samples, 5.89%)</title><rect x="55.5698%" y="133" width="5.8929%" height="15" fill="rgb(246,177,23)"/><text x="55.8198%" y="143.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (47,553,647 samples, 14.76%)</title><rect x="61.4626%" y="133" width="14.7615%" height="15" fill="rgb(230,62,27)"/><text x="61.7126%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (46,771,748 samples, 14.52%)</title><rect x="61.7054%" y="117" width="14.5188%" height="15" fill="rgb(216,154,8)"/><text x="61.9554%" y="127.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (532,437 samples, 0.17%)</title><rect x="76.2241%" y="133" width="0.1653%" height="15" fill="rgb(244,35,45)"/><text x="76.4741%" y="143.50"></text></g><g><title>codegen_module_perform_lto (71,367,417 samples, 22.15%)</title><rect x="54.3149%" y="149" width="22.1537%" height="15" fill="rgb(251,115,12)"/><text x="54.5649%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (3,069,943 samples, 0.95%)</title><rect x="80.3228%" y="101" width="0.9530%" height="15" fill="rgb(240,54,50)"/><text x="80.5728%" y="111.50"></text></g><g><title>metadata_register_crate (1,144,412 samples, 0.36%)</title><rect x="80.9205%" y="85" width="0.3552%" height="15" fill="rgb(233,84,52)"/><text x="81.1705%" y="95.50"></text></g><g><title>macro_expand_crate (15,049,877 samples, 4.67%)</title><rect x="76.6129%" y="133" width="4.6717%" height="15" fill="rgb(207,117,47)"/><text x="76.8629%" y="143.50">macro..</text></g><g><title>expand_crate (15,022,797 samples, 4.66%)</title><rect x="76.6213%" y="117" width="4.6633%" height="15" fill="rgb(249,43,39)"/><text x="76.8713%" y="127.50">expan..</text></g><g><title>late_resolve_crate (1,384,436 samples, 0.43%)</title><rect x="81.3735%" y="117" width="0.4298%" height="15" fill="rgb(209,38,44)"/><text x="81.6235%" y="127.50"></text></g><g><title>configure_and_expand (17,242,341 samples, 5.35%)</title><rect x="76.4686%" y="149" width="5.3523%" height="15" fill="rgb(236,212,23)"/><text x="76.7186%" y="159.50">configu..</text></g><g><title>resolve_crate (1,607,577 samples, 0.50%)</title><rect x="81.3219%" y="133" width="0.4990%" height="15" fill="rgb(242,79,21)"/><text x="81.5719%" y="143.50"></text></g><g><title>free_global_ctxt (4,491,479 samples, 1.39%)</title><rect x="81.9027%" y="149" width="1.3942%" height="15" fill="rgb(211,96,35)"/><text x="82.1527%" y="159.50"></text></g><g><title>optimized_mir (435,496 samples, 0.14%)</title><rect x="83.4713%" y="133" width="0.1352%" height="15" fill="rgb(253,215,40)"/><text x="83.7213%" y="143.50"></text></g><g><title>generate_crate_metadata (1,010,142 samples, 0.31%)</title><rect x="83.2969%" y="149" width="0.3136%" height="15" fill="rgb(211,81,21)"/><text x="83.5469%" y="159.50"></text></g><g><title>hir_lowering (1,074,822 samples, 0.33%)</title><rect x="83.6105%" y="149" width="0.3336%" height="15" fill="rgb(208,190,38)"/><text x="83.8605%" y="159.50"></text></g><g><title>finish_ongoing_codegen (47,901,523 samples, 14.87%)</title><rect x="83.9516%" y="133" width="14.8695%" height="15" fill="rgb(235,213,38)"/><text x="84.2016%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (939,400 samples, 0.29%)</title><rect x="98.8210%" y="133" width="0.2916%" height="15" fill="rgb(237,122,38)"/><text x="99.0710%" y="143.50"></text></g><g><title>link_binary (906,549 samples, 0.28%)</title><rect x="98.8312%" y="117" width="0.2814%" height="15" fill="rgb(244,218,35)"/><text x="99.0812%" y="127.50"></text></g><g><title>link_rlib (543,646 samples, 0.17%)</title><rect x="98.9439%" y="101" width="0.1688%" height="15" fill="rgb(240,68,47)"/><text x="99.1939%" y="111.50"></text></g><g><title>link (48,873,924 samples, 15.17%)</title><rect x="83.9441%" y="149" width="15.1713%" height="15" fill="rgb(210,16,53)"/><text x="84.1941%" y="159.50">link</text></g><g><title>parse_crate (678,577 samples, 0.21%)</title><rect x="99.1154%" y="149" width="0.2106%" height="15" fill="rgb(235,124,12)"/><text x="99.3654%" y="159.50"></text></g><g><title>prepare_outputs (351,444 samples, 0.11%)</title><rect x="99.3290%" y="149" width="0.1091%" height="15" fill="rgb(224,169,11)"/><text x="99.5790%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (1,364,985 samples, 0.42%)</title><rect x="99.4381%" y="149" width="0.4237%" height="15" fill="rgb(250,166,2)"/><text x="99.6881%" y="159.50"></text></g><g><title>all (322,146,909 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (322,146,909 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>