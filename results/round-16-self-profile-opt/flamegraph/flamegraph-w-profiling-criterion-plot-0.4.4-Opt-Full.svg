<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="197.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="197.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (711,671,633 samples, 17.49%)</title><rect x="0.0254%" y="133" width="17.4938%" height="15" fill="rgb(227,0,7)"/><text x="0.2754%" y="143.50">LLVM_passes</text></g><g><title>mir_const (24,887,968 samples, 0.61%)</title><rect x="18.5565%" y="69" width="0.6118%" height="15" fill="rgb(217,0,24)"/><text x="18.8065%" y="79.50"></text></g><g><title>unsafety_check_result (22,087,432 samples, 0.54%)</title><rect x="18.6254%" y="53" width="0.5429%" height="15" fill="rgb(221,193,54)"/><text x="18.8754%" y="63.50"></text></g><g><title>mir_built (19,967,438 samples, 0.49%)</title><rect x="18.6775%" y="37" width="0.4908%" height="15" fill="rgb(248,212,6)"/><text x="18.9275%" y="47.50"></text></g><g><title>mir_promoted (27,420,176 samples, 0.67%)</title><rect x="18.4976%" y="85" width="0.6740%" height="15" fill="rgb(208,68,35)"/><text x="18.7476%" y="95.50"></text></g><g><title>type_op_prove_predicate (5,548,103 samples, 0.14%)</title><rect x="19.2993%" y="85" width="0.1364%" height="15" fill="rgb(232,128,0)"/><text x="19.5493%" y="95.50"></text></g><g><title>MIR_borrow_checking (77,175,565 samples, 1.90%)</title><rect x="17.5390%" y="117" width="1.8971%" height="15" fill="rgb(207,160,47)"/><text x="17.7890%" y="127.50">M..</text></g><g><title>mir_borrowck (76,779,373 samples, 1.89%)</title><rect x="17.5488%" y="101" width="1.8873%" height="15" fill="rgb(228,23,34)"/><text x="17.7988%" y="111.50">m..</text></g><g><title>lint_checking (5,751,594 samples, 0.14%)</title><rect x="19.6642%" y="101" width="0.1414%" height="15" fill="rgb(218,30,26)"/><text x="19.9142%" y="111.50"></text></g><g><title>misc_checking_3 (11,561,908 samples, 0.28%)</title><rect x="19.6098%" y="117" width="0.2842%" height="15" fill="rgb(220,122,19)"/><text x="19.8598%" y="127.50"></text></g><g><title>impl_trait_ref (5,040,175 samples, 0.12%)</title><rect x="20.0503%" y="53" width="0.1239%" height="15" fill="rgb(250,228,42)"/><text x="20.3003%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,247,568 samples, 0.10%)</title><rect x="20.0698%" y="37" width="0.1044%" height="15" fill="rgb(240,193,28)"/><text x="20.3198%" y="47.50"></text></g><g><title>coherent_trait (11,801,240 samples, 0.29%)</title><rect x="19.9005%" y="85" width="0.2901%" height="15" fill="rgb(216,20,37)"/><text x="20.1505%" y="95.50"></text></g><g><title>specialization_graph_of (11,144,542 samples, 0.27%)</title><rect x="19.9167%" y="69" width="0.2739%" height="15" fill="rgb(206,188,39)"/><text x="20.1667%" y="79.50"></text></g><g><title>coherence_checking (11,991,093 samples, 0.29%)</title><rect x="19.9000%" y="101" width="0.2948%" height="15" fill="rgb(217,207,13)"/><text x="20.1500%" y="111.50"></text></g><g><title>evaluate_obligation (5,476,664 samples, 0.13%)</title><rect x="21.8267%" y="53" width="0.1346%" height="15" fill="rgb(231,73,38)"/><text x="22.0767%" y="63.50"></text></g><g><title>typeck (12,602,511 samples, 0.31%)</title><rect x="22.0593%" y="53" width="0.3098%" height="15" fill="rgb(225,20,46)"/><text x="22.3093%" y="63.50"></text></g><g><title>item_bodies_checking (88,483,289 samples, 2.18%)</title><rect x="20.1976%" y="101" width="2.1750%" height="15" fill="rgb(210,31,41)"/><text x="20.4476%" y="111.50">i..</text></g><g><title>typeck_item_bodies (88,478,739 samples, 2.17%)</title><rect x="20.1978%" y="85" width="2.1749%" height="15" fill="rgb(221,200,47)"/><text x="20.4478%" y="95.50">t..</text></g><g><title>typeck (88,207,478 samples, 2.17%)</title><rect x="20.2044%" y="69" width="2.1683%" height="15" fill="rgb(226,26,5)"/><text x="20.4544%" y="79.50">t..</text></g><g><title>item_types_checking (4,648,801 samples, 0.11%)</title><rect x="22.3727%" y="101" width="0.1143%" height="15" fill="rgb(249,33,26)"/><text x="22.6227%" y="111.50"></text></g><g><title>check_mod_item_types (4,633,691 samples, 0.11%)</title><rect x="22.3731%" y="85" width="0.1139%" height="15" fill="rgb(235,183,28)"/><text x="22.6231%" y="95.50"></text></g><g><title>type_collecting (6,916,976 samples, 0.17%)</title><rect x="22.4873%" y="101" width="0.1700%" height="15" fill="rgb(221,5,38)"/><text x="22.7373%" y="111.50"></text></g><g><title>collect_mod_item_types (6,896,686 samples, 0.17%)</title><rect x="22.4878%" y="85" width="0.1695%" height="15" fill="rgb(247,18,42)"/><text x="22.7378%" y="95.50"></text></g><g><title>check_impl_item_well_formed (10,111,486 samples, 0.25%)</title><rect x="22.6761%" y="85" width="0.2486%" height="15" fill="rgb(241,131,45)"/><text x="22.9261%" y="95.50"></text></g><g><title>check_item_well_formed (11,598,423 samples, 0.29%)</title><rect x="22.9247%" y="85" width="0.2851%" height="15" fill="rgb(249,31,29)"/><text x="23.1747%" y="95.50"></text></g><g><title>analysis (232,355,794 samples, 5.71%)</title><rect x="17.5193%" y="133" width="5.7116%" height="15" fill="rgb(225,111,53)"/><text x="17.7693%" y="143.50">analysis</text></g><g><title>type_check_crate (135,746,403 samples, 3.34%)</title><rect x="19.8940%" y="117" width="3.3368%" height="15" fill="rgb(238,160,17)"/><text x="20.1440%" y="127.50">typ..</text></g><g><title>wf_checking (23,315,858 samples, 0.57%)</title><rect x="22.6577%" y="101" width="0.5731%" height="15" fill="rgb(214,148,48)"/><text x="22.9077%" y="111.50"></text></g><g><title>param_env (6,762,028 samples, 0.17%)</title><rect x="26.4006%" y="85" width="0.1662%" height="15" fill="rgb(232,36,49)"/><text x="26.6506%" y="95.50"></text></g><g><title>fn_abi_of_instance (25,431,375 samples, 0.63%)</title><rect x="25.9713%" y="101" width="0.6251%" height="15" fill="rgb(209,103,24)"/><text x="26.2213%" y="111.50"></text></g><g><title>codegen_module (138,281,740 samples, 3.40%)</title><rect x="23.2806%" y="117" width="3.3991%" height="15" fill="rgb(229,88,8)"/><text x="23.5306%" y="127.50">cod..</text></g><g><title>mir_drops_elaborated_and_const_checked (7,853,930 samples, 0.19%)</title><rect x="27.2684%" y="53" width="0.1931%" height="15" fill="rgb(213,181,19)"/><text x="27.5184%" y="63.50"></text></g><g><title>optimized_mir (22,638,740 samples, 0.56%)</title><rect x="26.9519%" y="69" width="0.5565%" height="15" fill="rgb(254,191,54)"/><text x="27.2019%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (5,820,800 samples, 0.14%)</title><rect x="27.5643%" y="53" width="0.1431%" height="15" fill="rgb(241,83,37)"/><text x="27.8143%" y="63.50"></text></g><g><title>specialization_graph_of (4,099,254 samples, 0.10%)</title><rect x="27.7523%" y="53" width="0.1008%" height="15" fill="rgb(233,36,39)"/><text x="28.0023%" y="63.50"></text></g><g><title>resolve_instance (14,733,416 samples, 0.36%)</title><rect x="27.5084%" y="69" width="0.3622%" height="15" fill="rgb(226,3,54)"/><text x="27.7584%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (50,575,220 samples, 1.24%)</title><rect x="26.6819%" y="85" width="1.2432%" height="15" fill="rgb(245,192,40)"/><text x="26.9319%" y="95.50"></text></g><g><title>monomorphization_collector (50,798,172 samples, 1.25%)</title><rect x="26.6819%" y="101" width="1.2487%" height="15" fill="rgb(238,167,29)"/><text x="26.9319%" y="111.50"></text></g><g><title>assert_symbols_are_distinct (4,663,572 samples, 0.11%)</title><rect x="27.9307%" y="85" width="0.1146%" height="15" fill="rgb(232,182,51)"/><text x="28.1807%" y="95.50"></text></g><g><title>symbol_name (4,229,297 samples, 0.10%)</title><rect x="27.9413%" y="69" width="0.1040%" height="15" fill="rgb(231,60,39)"/><text x="28.1913%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (57,298,644 samples, 1.41%)</title><rect x="26.6802%" y="117" width="1.4085%" height="15" fill="rgb(208,69,12)"/><text x="26.9302%" y="127.50"></text></g><g><title>partition_and_assert_distinct_symbols (6,431,541 samples, 0.16%)</title><rect x="27.9305%" y="101" width="0.1581%" height="15" fill="rgb(235,93,37)"/><text x="28.1805%" y="111.50"></text></g><g><title>codegen_crate (197,678,879 samples, 4.86%)</title><rect x="23.2312%" y="133" width="4.8592%" height="15" fill="rgb(213,116,39)"/><text x="23.4812%" y="143.50">codege..</text></g><g><title>codegen_module_optimize (997,474,891 samples, 24.52%)</title><rect x="28.0904%" y="133" width="24.5192%" height="15" fill="rgb(222,207,29)"/><text x="28.3404%" y="143.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (956,447,599 samples, 23.51%)</title><rect x="29.0989%" y="117" width="23.5107%" height="15" fill="rgb(206,96,30)"/><text x="29.3489%" y="127.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (627,772,255 samples, 15.43%)</title><rect x="53.2891%" y="117" width="15.4314%" height="15" fill="rgb(218,138,4)"/><text x="53.5391%" y="127.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (490,836,548 samples, 12.07%)</title><rect x="68.7206%" y="117" width="12.0654%" height="15" fill="rgb(250,191,14)"/><text x="68.9706%" y="127.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (486,136,004 samples, 11.95%)</title><rect x="68.8361%" y="101" width="11.9498%" height="15" fill="rgb(239,60,40)"/><text x="69.0861%" y="111.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (84,568,219 samples, 2.08%)</title><rect x="80.7860%" y="117" width="2.0788%" height="15" fill="rgb(206,27,48)"/><text x="81.0360%" y="127.50">L..</text></g><g><title>codegen_module_perform_lto (1,232,768,259 samples, 30.30%)</title><rect x="52.6096%" y="133" width="30.3030%" height="15" fill="rgb(225,35,8)"/><text x="52.8596%" y="143.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (42,001,945 samples, 1.03%)</title><rect x="82.9311%" y="117" width="1.0325%" height="15" fill="rgb(250,213,24)"/><text x="83.1811%" y="127.50"></text></g><g><title>expand_crate (41,981,125 samples, 1.03%)</title><rect x="82.9316%" y="101" width="1.0319%" height="15" fill="rgb(247,123,22)"/><text x="83.1816%" y="111.50"></text></g><g><title>configure_and_expand (47,899,691 samples, 1.18%)</title><rect x="82.9126%" y="133" width="1.1774%" height="15" fill="rgb(231,138,38)"/><text x="83.1626%" y="143.50"></text></g><g><title>resolve_crate (4,790,814 samples, 0.12%)</title><rect x="83.9723%" y="117" width="0.1178%" height="15" fill="rgb(231,145,46)"/><text x="84.2223%" y="127.50"></text></g><g><title>free_global_ctxt (10,942,201 samples, 0.27%)</title><rect x="84.1280%" y="133" width="0.2690%" height="15" fill="rgb(251,118,11)"/><text x="84.3780%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,627,244 samples, 0.16%)</title><rect x="84.6901%" y="101" width="0.1629%" height="15" fill="rgb(217,147,25)"/><text x="84.9401%" y="111.50"></text></g><g><title>optimized_mir (12,598,643 samples, 0.31%)</title><rect x="84.5476%" y="117" width="0.3097%" height="15" fill="rgb(247,81,37)"/><text x="84.7976%" y="127.50"></text></g><g><title>generate_crate_metadata (18,923,080 samples, 0.47%)</title><rect x="84.3969%" y="133" width="0.4652%" height="15" fill="rgb(209,12,38)"/><text x="84.6469%" y="143.50"></text></g><g><title>hir_lowering (9,099,550 samples, 0.22%)</title><rect x="84.8621%" y="133" width="0.2237%" height="15" fill="rgb(227,1,9)"/><text x="85.1121%" y="143.50"></text></g><g><title>finish_ongoing_codegen (593,188,091 samples, 14.58%)</title><rect x="85.0891%" y="117" width="14.5813%" height="15" fill="rgb(248,47,43)"/><text x="85.3391%" y="127.50">finish_ongoing_codegen</text></g><g><title>link (595,683,189 samples, 14.64%)</title><rect x="85.0858%" y="133" width="14.6427%" height="15" fill="rgb(221,10,30)"/><text x="85.3358%" y="143.50">link</text></g><g><title>parse_crate (6,045,757 samples, 0.15%)</title><rect x="99.7284%" y="133" width="0.1486%" height="15" fill="rgb(210,229,1)"/><text x="99.9784%" y="143.50"></text></g><g><title>self_profile_alloc_query_strings (4,083,646 samples, 0.10%)</title><rect x="99.8826%" y="133" width="0.1004%" height="15" fill="rgb(222,148,37)"/><text x="100.1326%" y="143.50"></text></g><g><title>all (4,068,135,898 samples, 100%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(234,67,33)"/><text x="0.2500%" y="175.50"></text></g><g><title>rustc (4,068,135,898 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(247,98,35)"/><text x="0.2500%" y="159.50">rustc</text></g></svg></svg>