<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (23,801,232 samples, 10.05%)</title><rect x="0.3718%" y="181" width="10.0460%" height="15" fill="rgb(227,0,7)"/><text x="0.6218%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (305,003 samples, 0.13%)</title><rect x="10.2891%" y="165" width="0.1287%" height="15" fill="rgb(217,0,24)"/><text x="10.5391%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (285,953 samples, 0.12%)</title><rect x="10.2972%" y="149" width="0.1207%" height="15" fill="rgb(221,193,54)"/><text x="10.5472%" y="159.50"></text></g><g><title>item_attrs (296,094 samples, 0.12%)</title><rect x="16.0909%" y="69" width="0.1250%" height="15" fill="rgb(248,212,6)"/><text x="16.3409%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (286,954 samples, 0.12%)</title><rect x="16.0948%" y="53" width="0.1211%" height="15" fill="rgb(208,68,35)"/><text x="16.3448%" y="63.50"></text></g><g><title>codegen_fn_attrs (421,897 samples, 0.18%)</title><rect x="16.0484%" y="85" width="0.1781%" height="15" fill="rgb(232,128,0)"/><text x="16.2984%" y="95.50"></text></g><g><title>is_copy_raw (245,175 samples, 0.10%)</title><rect x="17.2076%" y="69" width="0.1035%" height="15" fill="rgb(207,160,47)"/><text x="17.4576%" y="79.50"></text></g><g><title>adt_drop_tys (252,312 samples, 0.11%)</title><rect x="17.3537%" y="53" width="0.1065%" height="15" fill="rgb(228,23,34)"/><text x="17.6037%" y="63.50"></text></g><g><title>is_copy_raw (701,247 samples, 0.30%)</title><rect x="17.4602%" y="53" width="0.2960%" height="15" fill="rgb(218,30,26)"/><text x="17.7102%" y="63.50"></text></g><g><title>evaluate_obligation (594,976 samples, 0.25%)</title><rect x="17.5051%" y="37" width="0.2511%" height="15" fill="rgb(220,122,19)"/><text x="17.7551%" y="47.50"></text></g><g><title>needs_drop_raw (1,056,752 samples, 0.45%)</title><rect x="17.3111%" y="69" width="0.4460%" height="15" fill="rgb(250,228,42)"/><text x="17.5611%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (331,604 samples, 0.14%)</title><rect x="17.8442%" y="53" width="0.1400%" height="15" fill="rgb(240,193,28)"/><text x="18.0942%" y="63.50"></text></g><g><title>specialization_graph_of (341,313 samples, 0.14%)</title><rect x="18.0059%" y="53" width="0.1441%" height="15" fill="rgb(216,20,37)"/><text x="18.2559%" y="63.50"></text></g><g><title>resolve_instance (1,020,419 samples, 0.43%)</title><rect x="17.7572%" y="69" width="0.4307%" height="15" fill="rgb(206,188,39)"/><text x="18.0072%" y="79.50"></text></g><g><title>thir_body (983,860 samples, 0.42%)</title><rect x="18.1948%" y="69" width="0.4153%" height="15" fill="rgb(217,207,13)"/><text x="18.4448%" y="79.50"></text></g><g><title>mir_const (7,531,183 samples, 3.18%)</title><rect x="15.4702%" y="117" width="3.1788%" height="15" fill="rgb(231,73,38)"/><text x="15.7202%" y="127.50">mir..</text></g><g><title>unsafety_check_result (6,604,902 samples, 2.79%)</title><rect x="15.8611%" y="101" width="2.7878%" height="15" fill="rgb(225,20,46)"/><text x="16.1111%" y="111.50">un..</text></g><g><title>mir_built (5,739,222 samples, 2.42%)</title><rect x="16.2265%" y="85" width="2.4224%" height="15" fill="rgb(210,31,41)"/><text x="16.4765%" y="95.50">mi..</text></g><g><title>mir_promoted (8,565,127 samples, 3.62%)</title><rect x="15.1735%" y="133" width="3.6152%" height="15" fill="rgb(221,200,47)"/><text x="15.4235%" y="143.50">mir_..</text></g><g><title>mir_const_qualif (331,155 samples, 0.14%)</title><rect x="18.6489%" y="117" width="0.1398%" height="15" fill="rgb(226,26,5)"/><text x="18.8989%" y="127.50"></text></g><g><title>mir_const (238,044 samples, 0.10%)</title><rect x="18.6882%" y="101" width="0.1005%" height="15" fill="rgb(249,33,26)"/><text x="18.9382%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (297,842 samples, 0.13%)</title><rect x="18.7895%" y="133" width="0.1257%" height="15" fill="rgb(235,183,28)"/><text x="19.0395%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,220,847 samples, 0.52%)</title><rect x="18.9152%" y="133" width="0.5153%" height="15" fill="rgb(221,5,38)"/><text x="19.1652%" y="143.50"></text></g><g><title>normalize_projection_ty (804,417 samples, 0.34%)</title><rect x="19.0910%" y="117" width="0.3395%" height="15" fill="rgb(247,18,42)"/><text x="19.3410%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,306,417 samples, 0.97%)</title><rect x="19.5196%" y="133" width="0.9735%" height="15" fill="rgb(241,131,45)"/><text x="19.7696%" y="143.50"></text></g><g><title>MIR_borrow_checking (23,335,306 samples, 9.85%)</title><rect x="10.6452%" y="165" width="9.8494%" height="15" fill="rgb(249,31,29)"/><text x="10.8952%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (23,233,213 samples, 9.81%)</title><rect x="10.6883%" y="149" width="9.8063%" height="15" fill="rgb(225,111,53)"/><text x="10.9383%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (251,533 samples, 0.11%)</title><rect x="20.4946%" y="165" width="0.1062%" height="15" fill="rgb(238,160,17)"/><text x="20.7446%" y="175.50"></text></g><g><title>hir_module_items (325,363 samples, 0.14%)</title><rect x="20.6008%" y="165" width="0.1373%" height="15" fill="rgb(214,148,48)"/><text x="20.8508%" y="175.50"></text></g><g><title>should_inherit_track_caller (305,935 samples, 0.13%)</title><rect x="21.1078%" y="117" width="0.1291%" height="15" fill="rgb(232,36,49)"/><text x="21.3578%" y="127.50"></text></g><g><title>codegen_fn_attrs (657,388 samples, 0.28%)</title><rect x="20.9776%" y="133" width="0.2775%" height="15" fill="rgb(209,103,24)"/><text x="21.2276%" y="143.50"></text></g><g><title>check_mod_attrs (1,179,313 samples, 0.50%)</title><rect x="20.7574%" y="149" width="0.4978%" height="15" fill="rgb(229,88,8)"/><text x="21.0074%" y="159.50"></text></g><g><title>check_mod_const_bodies (238,105 samples, 0.10%)</title><rect x="21.2552%" y="149" width="0.1005%" height="15" fill="rgb(213,181,19)"/><text x="21.5052%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (636,986 samples, 0.27%)</title><rect x="21.4313%" y="149" width="0.2689%" height="15" fill="rgb(254,191,54)"/><text x="21.6813%" y="159.50"></text></g><g><title>misc_checking_1 (2,371,027 samples, 1.00%)</title><rect x="20.7383%" y="165" width="1.0008%" height="15" fill="rgb(241,83,37)"/><text x="20.9883%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (449,305 samples, 0.19%)</title><rect x="21.7397%" y="149" width="0.1896%" height="15" fill="rgb(233,36,39)"/><text x="21.9897%" y="159.50"></text></g><g><title>check_mod_liveness (364,304 samples, 0.15%)</title><rect x="21.7756%" y="133" width="0.1538%" height="15" fill="rgb(226,3,54)"/><text x="22.0256%" y="143.50"></text></g><g><title>misc_checking_2 (827,320 samples, 0.35%)</title><rect x="21.7391%" y="165" width="0.3492%" height="15" fill="rgb(245,192,40)"/><text x="21.9891%" y="175.50"></text></g><g><title>match_checking (376,555 samples, 0.16%)</title><rect x="21.9293%" y="149" width="0.1589%" height="15" fill="rgb(238,167,29)"/><text x="22.1793%" y="159.50"></text></g><g><title>check_match (349,185 samples, 0.15%)</title><rect x="21.9409%" y="133" width="0.1474%" height="15" fill="rgb(232,182,51)"/><text x="22.1909%" y="143.50"></text></g><g><title>death_checking (298,083 samples, 0.13%)</title><rect x="22.1577%" y="149" width="0.1258%" height="15" fill="rgb(231,60,39)"/><text x="22.4077%" y="159.50"></text></g><g><title>crate_lints (1,159,983 samples, 0.49%)</title><rect x="22.2843%" y="133" width="0.4896%" height="15" fill="rgb(208,69,12)"/><text x="22.5343%" y="143.50"></text></g><g><title>type_of (337,133 samples, 0.14%)</title><rect x="22.6317%" y="117" width="0.1423%" height="15" fill="rgb(235,93,37)"/><text x="22.8817%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (259,933 samples, 0.11%)</title><rect x="22.6642%" y="101" width="0.1097%" height="15" fill="rgb(213,116,39)"/><text x="22.9142%" y="111.50"></text></g><g><title>lint_checking (1,489,746 samples, 0.63%)</title><rect x="22.2835%" y="149" width="0.6288%" height="15" fill="rgb(222,207,29)"/><text x="22.5335%" y="159.50"></text></g><g><title>module_lints (327,853 samples, 0.14%)</title><rect x="22.7739%" y="133" width="0.1384%" height="15" fill="rgb(206,96,30)"/><text x="23.0239%" y="143.50"></text></g><g><title>lint_mod (323,253 samples, 0.14%)</title><rect x="22.7759%" y="117" width="0.1364%" height="15" fill="rgb(218,138,4)"/><text x="23.0259%" y="127.50"></text></g><g><title>privacy_checking_modules (624,467 samples, 0.26%)</title><rect x="23.0075%" y="149" width="0.2636%" height="15" fill="rgb(250,191,14)"/><text x="23.2575%" y="159.50"></text></g><g><title>check_mod_privacy (620,317 samples, 0.26%)</title><rect x="23.0093%" y="133" width="0.2618%" height="15" fill="rgb(239,60,40)"/><text x="23.2593%" y="143.50"></text></g><g><title>misc_checking_3 (2,822,631 samples, 1.19%)</title><rect x="22.0883%" y="165" width="1.1914%" height="15" fill="rgb(206,27,48)"/><text x="22.3383%" y="175.50"></text></g><g><title>impl_parent (923,065 samples, 0.39%)</title><rect x="24.0960%" y="101" width="0.3896%" height="15" fill="rgb(225,35,8)"/><text x="24.3460%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (493,843 samples, 0.21%)</title><rect x="24.2771%" y="85" width="0.2084%" height="15" fill="rgb(250,213,24)"/><text x="24.5271%" y="95.50"></text></g><g><title>impl_trait_ref (2,403,891 samples, 1.01%)</title><rect x="24.4856%" y="101" width="1.0146%" height="15" fill="rgb(247,123,22)"/><text x="24.7356%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,971,612 samples, 0.83%)</title><rect x="24.6680%" y="85" width="0.8322%" height="15" fill="rgb(231,138,38)"/><text x="24.9180%" y="95.50"></text></g><g><title>trait_impls_of (345,353 samples, 0.15%)</title><rect x="25.5140%" y="101" width="0.1458%" height="15" fill="rgb(231,145,46)"/><text x="25.7640%" y="111.50"></text></g><g><title>coherent_trait (5,547,033 samples, 2.34%)</title><rect x="23.3191%" y="133" width="2.3413%" height="15" fill="rgb(251,118,11)"/><text x="23.5691%" y="143.50">c..</text></g><g><title>specialization_graph_of (5,524,533 samples, 2.33%)</title><rect x="23.3286%" y="117" width="2.3318%" height="15" fill="rgb(217,147,25)"/><text x="23.5786%" y="127.50">s..</text></g><g><title>coherence_checking (5,654,164 samples, 2.39%)</title><rect x="23.3089%" y="149" width="2.3865%" height="15" fill="rgb(247,81,37)"/><text x="23.5589%" y="159.50">co..</text></g><g><title>adt_sized_constraint (344,114 samples, 0.15%)</title><rect x="34.8093%" y="101" width="0.1452%" height="15" fill="rgb(209,12,38)"/><text x="35.0593%" y="111.50"></text></g><g><title>associated_item (374,345 samples, 0.16%)</title><rect x="35.0152%" y="85" width="0.1580%" height="15" fill="rgb(227,1,9)"/><text x="35.2652%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (298,753 samples, 0.13%)</title><rect x="35.0471%" y="69" width="0.1261%" height="15" fill="rgb(248,47,43)"/><text x="35.2971%" y="79.50"></text></g><g><title>associated_items (537,237 samples, 0.23%)</title><rect x="34.9576%" y="101" width="0.2268%" height="15" fill="rgb(221,10,30)"/><text x="35.2076%" y="111.50"></text></g><g><title>dropck_outlives (481,784 samples, 0.20%)</title><rect x="35.2167%" y="101" width="0.2034%" height="15" fill="rgb(210,229,1)"/><text x="35.4667%" y="111.50"></text></g><g><title>eval_to_const_value_raw (303,403 samples, 0.13%)</title><rect x="35.4200%" y="101" width="0.1281%" height="15" fill="rgb(222,148,37)"/><text x="35.6700%" y="111.50"></text></g><g><title>eval_to_const_value_raw (285,433 samples, 0.12%)</title><rect x="35.4276%" y="85" width="0.1205%" height="15" fill="rgb(234,67,33)"/><text x="35.6776%" y="95.50"></text></g><g><title>eval_to_allocation_raw (274,453 samples, 0.12%)</title><rect x="35.4322%" y="69" width="0.1158%" height="15" fill="rgb(247,98,35)"/><text x="35.6822%" y="79.50"></text></g><g><title>generics_of (1,047,947 samples, 0.44%)</title><rect x="38.0413%" y="85" width="0.4423%" height="15" fill="rgb(247,138,52)"/><text x="38.2913%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (786,281 samples, 0.33%)</title><rect x="38.1517%" y="69" width="0.3319%" height="15" fill="rgb(213,79,30)"/><text x="38.4017%" y="79.50"></text></g><g><title>impl_trait_ref (1,347,670 samples, 0.57%)</title><rect x="38.5663%" y="85" width="0.5688%" height="15" fill="rgb(246,177,23)"/><text x="38.8163%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,092,458 samples, 0.46%)</title><rect x="38.6740%" y="69" width="0.4611%" height="15" fill="rgb(230,62,27)"/><text x="38.9240%" y="79.50"></text></g><g><title>predicates_of (921,899 samples, 0.39%)</title><rect x="39.1581%" y="85" width="0.3891%" height="15" fill="rgb(216,154,8)"/><text x="39.4081%" y="95.50"></text></g><g><title>predicates_defined_on (534,104 samples, 0.23%)</title><rect x="39.3218%" y="69" width="0.2254%" height="15" fill="rgb(244,35,45)"/><text x="39.5718%" y="79.50"></text></g><g><title>specializes (2,402,977 samples, 1.01%)</title><rect x="39.5472%" y="85" width="1.0143%" height="15" fill="rgb(251,115,12)"/><text x="39.7972%" y="95.50"></text></g><g><title>param_env (1,399,369 samples, 0.59%)</title><rect x="39.9708%" y="69" width="0.5906%" height="15" fill="rgb(240,54,50)"/><text x="40.2208%" y="79.50"></text></g><g><title>def_span (634,807 samples, 0.27%)</title><rect x="40.2935%" y="53" width="0.2679%" height="15" fill="rgb(233,84,52)"/><text x="40.5435%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (562,244 samples, 0.24%)</title><rect x="40.3241%" y="37" width="0.2373%" height="15" fill="rgb(207,117,47)"/><text x="40.5741%" y="47.50"></text></g><g><title>trait_impls_of (317,993 samples, 0.13%)</title><rect x="40.5682%" y="85" width="0.1342%" height="15" fill="rgb(249,43,39)"/><text x="40.8182%" y="95.50"></text></g><g><title>evaluate_obligation (12,239,889 samples, 5.17%)</title><rect x="35.5481%" y="101" width="5.1662%" height="15" fill="rgb(209,38,44)"/><text x="35.7981%" y="111.50">evalua..</text></g><g><title>generics_of (384,634 samples, 0.16%)</title><rect x="40.7931%" y="101" width="0.1623%" height="15" fill="rgb(236,212,23)"/><text x="41.0431%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (295,412 samples, 0.12%)</title><rect x="40.8308%" y="85" width="0.1247%" height="15" fill="rgb(242,79,21)"/><text x="41.0808%" y="95.50"></text></g><g><title>impl_trait_ref (462,927 samples, 0.20%)</title><rect x="41.0609%" y="101" width="0.1954%" height="15" fill="rgb(211,96,35)"/><text x="41.3109%" y="111.50"></text></g><g><title>method_autoderef_steps (480,333 samples, 0.20%)</title><rect x="41.3748%" y="101" width="0.2027%" height="15" fill="rgb(253,215,40)"/><text x="41.6248%" y="111.50"></text></g><g><title>param_env (287,643 samples, 0.12%)</title><rect x="41.6491%" y="101" width="0.1214%" height="15" fill="rgb(211,81,21)"/><text x="41.8991%" y="111.50"></text></g><g><title>predicates_of (249,683 samples, 0.11%)</title><rect x="41.6651%" y="85" width="0.1054%" height="15" fill="rgb(208,190,38)"/><text x="41.9151%" y="95.50"></text></g><g><title>predicates_defined_on (245,723 samples, 0.10%)</title><rect x="41.6668%" y="69" width="0.1037%" height="15" fill="rgb(235,213,38)"/><text x="41.9168%" y="79.50"></text></g><g><title>predicates_of (455,895 samples, 0.19%)</title><rect x="41.7780%" y="101" width="0.1924%" height="15" fill="rgb(237,122,38)"/><text x="42.0280%" y="111.50"></text></g><g><title>predicates_defined_on (315,904 samples, 0.13%)</title><rect x="41.8370%" y="85" width="0.1333%" height="15" fill="rgb(244,218,35)"/><text x="42.0870%" y="95.50"></text></g><g><title>specializes (311,094 samples, 0.13%)</title><rect x="43.2564%" y="69" width="0.1313%" height="15" fill="rgb(240,68,47)"/><text x="43.5064%" y="79.50"></text></g><g><title>evaluate_obligation (989,182 samples, 0.42%)</title><rect x="43.0315%" y="85" width="0.4175%" height="15" fill="rgb(210,16,53)"/><text x="43.2815%" y="95.50"></text></g><g><title>typeck (3,472,139 samples, 1.47%)</title><rect x="42.1400%" y="101" width="1.4655%" height="15" fill="rgb(235,124,12)"/><text x="42.3900%" y="111.50"></text></g><g><title>item_bodies_checking (42,436,422 samples, 17.91%)</title><rect x="25.7197%" y="149" width="17.9116%" height="15" fill="rgb(224,169,11)"/><text x="25.9697%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (42,433,782 samples, 17.91%)</title><rect x="25.7208%" y="133" width="17.9105%" height="15" fill="rgb(250,166,2)"/><text x="25.9708%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (42,362,151 samples, 17.88%)</title><rect x="25.7510%" y="117" width="17.8802%" height="15" fill="rgb(242,216,29)"/><text x="26.0010%" y="127.50">typeck</text></g><g><title>item_types_checking (978,891 samples, 0.41%)</title><rect x="43.6313%" y="149" width="0.4132%" height="15" fill="rgb(230,116,27)"/><text x="43.8813%" y="159.50"></text></g><g><title>check_mod_item_types (974,121 samples, 0.41%)</title><rect x="43.6333%" y="133" width="0.4112%" height="15" fill="rgb(228,99,48)"/><text x="43.8833%" y="143.50"></text></g><g><title>fn_sig (694,539 samples, 0.29%)</title><rect x="44.2680%" y="117" width="0.2932%" height="15" fill="rgb(253,11,6)"/><text x="44.5180%" y="127.50"></text></g><g><title>is_late_bound_map (360,334 samples, 0.15%)</title><rect x="44.6507%" y="101" width="0.1521%" height="15" fill="rgb(247,143,39)"/><text x="44.9007%" y="111.50"></text></g><g><title>resolve_lifetimes (354,564 samples, 0.15%)</title><rect x="44.6531%" y="85" width="0.1497%" height="15" fill="rgb(236,97,10)"/><text x="44.9031%" y="95.50"></text></g><g><title>lint_levels (263,843 samples, 0.11%)</title><rect x="44.6914%" y="69" width="0.1114%" height="15" fill="rgb(233,208,19)"/><text x="44.9414%" y="79.50"></text></g><g><title>named_region_map (299,623 samples, 0.13%)</title><rect x="44.8027%" y="101" width="0.1265%" height="15" fill="rgb(216,164,2)"/><text x="45.0527%" y="111.50"></text></g><g><title>resolve_lifetimes (261,673 samples, 0.11%)</title><rect x="44.8188%" y="85" width="0.1104%" height="15" fill="rgb(220,129,5)"/><text x="45.0688%" y="95.50"></text></g><g><title>generics_of (908,812 samples, 0.38%)</title><rect x="44.5612%" y="117" width="0.3836%" height="15" fill="rgb(242,17,10)"/><text x="44.8112%" y="127.50"></text></g><g><title>item_bounds (314,513 samples, 0.13%)</title><rect x="44.9692%" y="117" width="0.1327%" height="15" fill="rgb(242,107,0)"/><text x="45.2192%" y="127.50"></text></g><g><title>late_bound_vars_map (384,622 samples, 0.16%)</title><rect x="45.3636%" y="69" width="0.1623%" height="15" fill="rgb(251,28,31)"/><text x="45.6136%" y="79.50"></text></g><g><title>resolve_lifetimes (362,662 samples, 0.15%)</title><rect x="45.3728%" y="53" width="0.1531%" height="15" fill="rgb(233,223,10)"/><text x="45.6228%" y="63.50"></text></g><g><title>explicit_predicates_of (845,656 samples, 0.36%)</title><rect x="45.2082%" y="85" width="0.3569%" height="15" fill="rgb(215,21,27)"/><text x="45.4582%" y="95.50"></text></g><g><title>predicates_of (1,331,303 samples, 0.56%)</title><rect x="45.1020%" y="117" width="0.5619%" height="15" fill="rgb(232,23,21)"/><text x="45.3520%" y="127.50"></text></g><g><title>predicates_defined_on (1,240,351 samples, 0.52%)</title><rect x="45.1404%" y="101" width="0.5235%" height="15" fill="rgb(244,5,23)"/><text x="45.3904%" y="111.50"></text></g><g><title>type_collecting (4,164,807 samples, 1.76%)</title><rect x="44.0452%" y="149" width="1.7579%" height="15" fill="rgb(226,81,46)"/><text x="44.2952%" y="159.50"></text></g><g><title>collect_mod_item_types (4,145,037 samples, 1.75%)</title><rect x="44.0535%" y="133" width="1.7495%" height="15" fill="rgb(247,70,30)"/><text x="44.3035%" y="143.50"></text></g><g><title>evaluate_obligation (458,406 samples, 0.19%)</title><rect x="46.5352%" y="117" width="0.1935%" height="15" fill="rgb(212,68,19)"/><text x="46.7852%" y="127.50"></text></g><g><title>param_env (300,972 samples, 0.13%)</title><rect x="46.8146%" y="117" width="0.1270%" height="15" fill="rgb(240,187,13)"/><text x="47.0646%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,764,783 samples, 1.17%)</title><rect x="45.8845%" y="133" width="1.1670%" height="15" fill="rgb(223,113,26)"/><text x="46.1345%" y="143.50"></text></g><g><title>param_env (288,022 samples, 0.12%)</title><rect x="47.6584%" y="117" width="0.1216%" height="15" fill="rgb(206,192,2)"/><text x="47.9084%" y="127.50"></text></g><g><title>check_item_well_formed (1,912,489 samples, 0.81%)</title><rect x="47.0515%" y="133" width="0.8072%" height="15" fill="rgb(241,108,4)"/><text x="47.3015%" y="143.50"></text></g><g><title>analysis (89,755,530 samples, 37.88%)</title><rect x="10.4178%" y="181" width="37.8841%" height="15" fill="rgb(247,173,49)"/><text x="10.6678%" y="191.50">analysis</text></g><g><title>type_check_crate (59,283,143 samples, 25.02%)</title><rect x="23.2797%" y="165" width="25.0223%" height="15" fill="rgb(224,114,35)"/><text x="23.5297%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,915,608 samples, 2.50%)</title><rect x="45.8051%" y="149" width="2.4969%" height="15" fill="rgb(245,159,27)"/><text x="46.0551%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (1,050,033 samples, 0.44%)</title><rect x="47.8587%" y="133" width="0.4432%" height="15" fill="rgb(245,172,44)"/><text x="48.1087%" y="143.50"></text></g><g><title>param_env (272,555 samples, 0.12%)</title><rect x="50.0659%" y="133" width="0.1150%" height="15" fill="rgb(236,23,11)"/><text x="50.3159%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,174,804 samples, 0.50%)</title><rect x="49.7672%" y="149" width="0.4959%" height="15" fill="rgb(205,117,38)"/><text x="50.0172%" y="159.50"></text></g><g><title>codegen_module (4,050,396 samples, 1.71%)</title><rect x="48.6417%" y="165" width="1.7096%" height="15" fill="rgb(237,72,25)"/><text x="48.8917%" y="175.50"></text></g><g><title>layout_of (323,502 samples, 0.14%)</title><rect x="50.7250%" y="101" width="0.1365%" height="15" fill="rgb(244,70,9)"/><text x="50.9750%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (472,306 samples, 0.20%)</title><rect x="50.9364%" y="101" width="0.1994%" height="15" fill="rgb(217,125,39)"/><text x="51.1864%" y="111.50"></text></g><g><title>optimized_mir (1,673,209 samples, 0.71%)</title><rect x="50.5255%" y="117" width="0.7062%" height="15" fill="rgb(235,36,10)"/><text x="50.7755%" y="127.50"></text></g><g><title>specialization_graph_of (486,395 samples, 0.21%)</title><rect x="51.2986%" y="101" width="0.2053%" height="15" fill="rgb(251,123,47)"/><text x="51.5486%" y="111.50"></text></g><g><title>resolve_instance (668,107 samples, 0.28%)</title><rect x="51.2317%" y="117" width="0.2820%" height="15" fill="rgb(221,13,13)"/><text x="51.4817%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (2,790,511 samples, 1.18%)</title><rect x="50.3634%" y="133" width="1.1778%" height="15" fill="rgb(238,131,9)"/><text x="50.6134%" y="143.50"></text></g><g><title>monomorphization_collector (2,826,852 samples, 1.19%)</title><rect x="50.3626%" y="149" width="1.1932%" height="15" fill="rgb(211,50,8)"/><text x="50.6126%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (3,073,295 samples, 1.30%)</title><rect x="50.3520%" y="165" width="1.2972%" height="15" fill="rgb(245,182,24)"/><text x="50.6020%" y="175.50"></text></g><g><title>codegen_crate (7,931,960 samples, 3.35%)</title><rect x="48.3070%" y="181" width="3.3479%" height="15" fill="rgb(242,14,37)"/><text x="48.5570%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (24,421,170 samples, 10.31%)</title><rect x="51.6550%" y="181" width="10.3077%" height="15" fill="rgb(246,228,12)"/><text x="51.9050%" y="191.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (21,738,709 samples, 9.18%)</title><rect x="52.7872%" y="165" width="9.1755%" height="15" fill="rgb(213,55,15)"/><text x="53.0372%" y="175.50">LLVM_module_o..</text></g><g><title>LLVM_lto_optimize (7,633,846 samples, 3.22%)</title><rect x="62.5970%" y="165" width="3.2221%" height="15" fill="rgb(209,9,3)"/><text x="62.8470%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen (17,764,842 samples, 7.50%)</title><rect x="65.8191%" y="165" width="7.4982%" height="15" fill="rgb(230,59,30)"/><text x="66.0691%" y="175.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (17,425,746 samples, 7.36%)</title><rect x="65.9622%" y="149" width="7.3551%" height="15" fill="rgb(209,121,21)"/><text x="66.2122%" y="159.50">LLVM_modul..</text></g><g><title>LLVM_thin_lto_import (298,523 samples, 0.13%)</title><rect x="73.3173%" y="165" width="0.1260%" height="15" fill="rgb(220,109,13)"/><text x="73.5673%" y="175.50"></text></g><g><title>codegen_module_perform_lto (27,292,099 samples, 11.52%)</title><rect x="61.9627%" y="181" width="11.5195%" height="15" fill="rgb(232,18,1)"/><text x="62.2127%" y="191.50">codegen_module_pe..</text></g><g><title>AST_validation (350,614 samples, 0.15%)</title><rect x="73.5771%" y="165" width="0.1480%" height="15" fill="rgb(215,41,42)"/><text x="73.8271%" y="175.50"></text></g><g><title>macro_expand_crate (18,642,202 samples, 7.87%)</title><rect x="73.8180%" y="165" width="7.8685%" height="15" fill="rgb(224,123,36)"/><text x="74.0680%" y="175.50">macro_expan..</text></g><g><title>expand_crate (18,616,042 samples, 7.86%)</title><rect x="73.8290%" y="149" width="7.8575%" height="15" fill="rgb(240,125,3)"/><text x="74.0790%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (362,874 samples, 0.15%)</title><rect x="81.5333%" y="133" width="0.1532%" height="15" fill="rgb(205,98,50)"/><text x="81.7833%" y="143.50"></text></g><g><title>late_resolve_crate (3,070,965 samples, 1.30%)</title><rect x="81.8553%" y="149" width="1.2962%" height="15" fill="rgb(205,185,37)"/><text x="82.1053%" y="159.50"></text></g><g><title>configure_and_expand (23,142,904 samples, 9.77%)</title><rect x="73.4821%" y="181" width="9.7682%" height="15" fill="rgb(238,207,15)"/><text x="73.7321%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (3,496,720 samples, 1.48%)</title><rect x="81.7744%" y="165" width="1.4759%" height="15" fill="rgb(213,199,42)"/><text x="82.0244%" y="175.50"></text></g><g><title>drop_ast (378,784 samples, 0.16%)</title><rect x="83.2503%" y="181" width="0.1599%" height="15" fill="rgb(235,201,11)"/><text x="83.5003%" y="191.50"></text></g><g><title>early_lint_checks (725,859 samples, 0.31%)</title><rect x="83.4168%" y="181" width="0.3064%" height="15" fill="rgb(207,46,11)"/><text x="83.6668%" y="191.50"></text></g><g><title>free_global_ctxt (2,823,903 samples, 1.19%)</title><rect x="83.7232%" y="181" width="1.1919%" height="15" fill="rgb(241,35,35)"/><text x="83.9732%" y="191.50"></text></g><g><title>is_sized_raw (303,041 samples, 0.13%)</title><rect x="86.8147%" y="133" width="0.1279%" height="15" fill="rgb(243,32,47)"/><text x="87.0647%" y="143.50"></text></g><g><title>evaluate_obligation (243,831 samples, 0.10%)</title><rect x="86.8397%" y="117" width="0.1029%" height="15" fill="rgb(247,202,23)"/><text x="87.0897%" y="127.50"></text></g><g><title>layout_of (840,316 samples, 0.35%)</title><rect x="86.6698%" y="149" width="0.3547%" height="15" fill="rgb(219,102,11)"/><text x="86.9198%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,777,709 samples, 1.17%)</title><rect x="87.0245%" y="149" width="1.1724%" height="15" fill="rgb(243,110,44)"/><text x="87.2745%" y="159.50"></text></g><g><title>optimized_mir (6,105,927 samples, 2.58%)</title><rect x="85.6414%" y="165" width="2.5772%" height="15" fill="rgb(222,74,54)"/><text x="85.8914%" y="175.50">op..</text></g><g><title>generate_crate_metadata (7,878,550 samples, 3.33%)</title><rect x="84.9151%" y="181" width="3.3254%" height="15" fill="rgb(216,99,12)"/><text x="85.1651%" y="191.50">gen..</text></g><g><title>hir_lowering (5,321,570 samples, 2.25%)</title><rect x="88.2405%" y="181" width="2.2461%" height="15" fill="rgb(226,22,26)"/><text x="88.4905%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (16,753,040 samples, 7.07%)</title><rect x="90.4958%" y="165" width="7.0711%" height="15" fill="rgb(217,163,10)"/><text x="90.7458%" y="175.50">finish_on..</text></g><g><title>link_crate (936,800 samples, 0.40%)</title><rect x="97.5669%" y="165" width="0.3954%" height="15" fill="rgb(213,25,53)"/><text x="97.8169%" y="175.50"></text></g><g><title>link_binary (916,220 samples, 0.39%)</title><rect x="97.5756%" y="149" width="0.3867%" height="15" fill="rgb(252,105,26)"/><text x="97.8256%" y="159.50"></text></g><g><title>link_rlib (572,107 samples, 0.24%)</title><rect x="97.7208%" y="133" width="0.2415%" height="15" fill="rgb(220,39,43)"/><text x="97.9708%" y="143.50"></text></g><g><title>link (17,720,781 samples, 7.48%)</title><rect x="90.4866%" y="181" width="7.4796%" height="15" fill="rgb(229,68,48)"/><text x="90.7366%" y="191.50">link</text></g><g><title>parse_crate (2,786,921 samples, 1.18%)</title><rect x="97.9662%" y="181" width="1.1763%" height="15" fill="rgb(252,8,32)"/><text x="98.2162%" y="191.50"></text></g><g><title>prepare_outputs (359,924 samples, 0.15%)</title><rect x="99.1466%" y="181" width="0.1519%" height="15" fill="rgb(223,20,43)"/><text x="99.3966%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,136,353 samples, 0.48%)</title><rect x="99.2985%" y="181" width="0.4796%" height="15" fill="rgb(229,81,49)"/><text x="99.5485%" y="191.50"></text></g><g><title>all (236,921,566 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (236,921,566 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (386,624 samples, 0.16%)</title><rect x="99.8368%" y="181" width="0.1632%" height="15" fill="rgb(249,174,33)"/><text x="100.0868%" y="191.50"></text></g></svg></svg>