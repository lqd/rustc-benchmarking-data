<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (39,226,746 samples, 9.18%)</title><rect x="0.2080%" y="181" width="9.1805%" height="15" fill="rgb(227,0,7)"/><text x="0.4580%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (779,339 samples, 0.18%)</title><rect x="20.5940%" y="69" width="0.1824%" height="15" fill="rgb(217,0,24)"/><text x="20.8440%" y="79.50"></text></g><g><title>evaluate_obligation (606,068 samples, 0.14%)</title><rect x="20.6346%" y="53" width="0.1418%" height="15" fill="rgb(221,193,54)"/><text x="20.8846%" y="63.50"></text></g><g><title>needs_drop_raw (700,068 samples, 0.16%)</title><rect x="20.7772%" y="69" width="0.1638%" height="15" fill="rgb(248,212,6)"/><text x="21.0272%" y="79.50"></text></g><g><title>is_copy_raw (597,857 samples, 0.14%)</title><rect x="20.8011%" y="53" width="0.1399%" height="15" fill="rgb(208,68,35)"/><text x="21.0511%" y="63.50"></text></g><g><title>evaluate_obligation (543,177 samples, 0.13%)</title><rect x="20.8139%" y="37" width="0.1271%" height="15" fill="rgb(232,128,0)"/><text x="21.0639%" y="47.50"></text></g><g><title>resolve_instance (879,991 samples, 0.21%)</title><rect x="20.9411%" y="69" width="0.2060%" height="15" fill="rgb(207,160,47)"/><text x="21.1911%" y="79.50"></text></g><g><title>thir_body (2,912,097 samples, 0.68%)</title><rect x="21.1565%" y="69" width="0.6815%" height="15" fill="rgb(228,23,34)"/><text x="21.4065%" y="79.50"></text></g><g><title>mir_const (14,749,234 samples, 3.45%)</title><rect x="18.3928%" y="117" width="3.4519%" height="15" fill="rgb(218,30,26)"/><text x="18.6428%" y="127.50">mir..</text></g><g><title>unsafety_check_result (12,925,171 samples, 3.02%)</title><rect x="18.8197%" y="101" width="3.0250%" height="15" fill="rgb(220,122,19)"/><text x="19.0697%" y="111.50">uns..</text></g><g><title>mir_built (11,638,235 samples, 2.72%)</title><rect x="19.1209%" y="85" width="2.7238%" height="15" fill="rgb(250,228,42)"/><text x="19.3709%" y="95.50">mi..</text></g><g><title>thir_body (502,867 samples, 0.12%)</title><rect x="22.7213%" y="53" width="0.1177%" height="15" fill="rgb(240,193,28)"/><text x="22.9713%" y="63.50"></text></g><g><title>mir_promoted (21,812,592 samples, 5.10%)</title><rect x="17.7429%" y="133" width="5.1050%" height="15" fill="rgb(216,20,37)"/><text x="17.9929%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (4,286,396 samples, 1.00%)</title><rect x="21.8447%" y="117" width="1.0032%" height="15" fill="rgb(206,188,39)"/><text x="22.0947%" y="127.50"></text></g><g><title>mir_const (3,509,871 samples, 0.82%)</title><rect x="22.0264%" y="101" width="0.8214%" height="15" fill="rgb(217,207,13)"/><text x="22.2764%" y="111.50"></text></g><g><title>unsafety_check_result (2,444,334 samples, 0.57%)</title><rect x="22.2758%" y="85" width="0.5721%" height="15" fill="rgb(231,73,38)"/><text x="22.5258%" y="95.50"></text></g><g><title>mir_built (2,116,671 samples, 0.50%)</title><rect x="22.3525%" y="69" width="0.4954%" height="15" fill="rgb(225,20,46)"/><text x="22.6025%" y="79.50"></text></g><g><title>type_op_prove_predicate (7,553,273 samples, 1.77%)</title><rect x="22.9599%" y="133" width="1.7677%" height="15" fill="rgb(210,31,41)"/><text x="23.2099%" y="143.50"></text></g><g><title>MIR_borrow_checking (64,901,718 samples, 15.19%)</title><rect x="9.5418%" y="165" width="15.1894%" height="15" fill="rgb(221,200,47)"/><text x="9.7918%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (64,367,614 samples, 15.06%)</title><rect x="9.6668%" y="149" width="15.0644%" height="15" fill="rgb(226,26,5)"/><text x="9.9168%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (2,187,224 samples, 0.51%)</title><rect x="24.7312%" y="165" width="0.5119%" height="15" fill="rgb(249,33,26)"/><text x="24.9812%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,902,401 samples, 0.45%)</title><rect x="24.7978%" y="149" width="0.4452%" height="15" fill="rgb(235,183,28)"/><text x="25.0478%" y="159.50"></text></g><g><title>codegen_fn_attrs (520,425 samples, 0.12%)</title><rect x="25.4480%" y="133" width="0.1218%" height="15" fill="rgb(221,5,38)"/><text x="25.6980%" y="143.50"></text></g><g><title>check_mod_attrs (1,025,271 samples, 0.24%)</title><rect x="25.3299%" y="149" width="0.2400%" height="15" fill="rgb(247,18,42)"/><text x="25.5799%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (563,366 samples, 0.13%)</title><rect x="25.6634%" y="149" width="0.1318%" height="15" fill="rgb(241,131,45)"/><text x="25.9134%" y="159.50"></text></g><g><title>misc_checking_1 (2,079,042 samples, 0.49%)</title><rect x="25.3268%" y="165" width="0.4866%" height="15" fill="rgb(249,31,29)"/><text x="25.5768%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,068,372 samples, 0.25%)</title><rect x="25.8139%" y="149" width="0.2500%" height="15" fill="rgb(225,111,53)"/><text x="26.0639%" y="159.50"></text></g><g><title>check_mod_liveness (871,960 samples, 0.20%)</title><rect x="25.8598%" y="133" width="0.2041%" height="15" fill="rgb(238,160,17)"/><text x="26.1098%" y="143.50"></text></g><g><title>misc_checking_2 (2,282,504 samples, 0.53%)</title><rect x="25.8134%" y="165" width="0.5342%" height="15" fill="rgb(214,148,48)"/><text x="26.0634%" y="175.50"></text></g><g><title>match_checking (1,212,022 samples, 0.28%)</title><rect x="26.0639%" y="149" width="0.2837%" height="15" fill="rgb(232,36,49)"/><text x="26.3139%" y="159.50"></text></g><g><title>check_match (1,086,840 samples, 0.25%)</title><rect x="26.0932%" y="133" width="0.2544%" height="15" fill="rgb(209,103,24)"/><text x="26.3432%" y="143.50"></text></g><g><title>death_checking (731,438 samples, 0.17%)</title><rect x="26.4345%" y="149" width="0.1712%" height="15" fill="rgb(229,88,8)"/><text x="26.6845%" y="159.50"></text></g><g><title>crate_lints (2,577,697 samples, 0.60%)</title><rect x="26.6062%" y="133" width="0.6033%" height="15" fill="rgb(213,181,19)"/><text x="26.8562%" y="143.50"></text></g><g><title>type_of (1,136,143 samples, 0.27%)</title><rect x="26.9436%" y="117" width="0.2659%" height="15" fill="rgb(254,191,54)"/><text x="27.1936%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (902,400 samples, 0.21%)</title><rect x="26.9983%" y="101" width="0.2112%" height="15" fill="rgb(241,83,37)"/><text x="27.2483%" y="111.50"></text></g><g><title>lint_checking (3,803,461 samples, 0.89%)</title><rect x="26.6057%" y="149" width="0.8902%" height="15" fill="rgb(233,36,39)"/><text x="26.8557%" y="159.50"></text></g><g><title>module_lints (1,223,574 samples, 0.29%)</title><rect x="27.2095%" y="133" width="0.2864%" height="15" fill="rgb(226,3,54)"/><text x="27.4595%" y="143.50"></text></g><g><title>lint_mod (1,220,393 samples, 0.29%)</title><rect x="27.2102%" y="117" width="0.2856%" height="15" fill="rgb(245,192,40)"/><text x="27.4602%" y="127.50"></text></g><g><title>privacy_access_levels (621,286 samples, 0.15%)</title><rect x="27.4958%" y="149" width="0.1454%" height="15" fill="rgb(238,167,29)"/><text x="27.7458%" y="159.50"></text></g><g><title>privacy_checking_modules (2,021,631 samples, 0.47%)</title><rect x="27.6412%" y="149" width="0.4731%" height="15" fill="rgb(232,182,51)"/><text x="27.8912%" y="159.50"></text></g><g><title>check_mod_privacy (2,019,491 samples, 0.47%)</title><rect x="27.6417%" y="133" width="0.4726%" height="15" fill="rgb(231,60,39)"/><text x="27.8917%" y="143.50"></text></g><g><title>misc_checking_3 (7,568,390 samples, 1.77%)</title><rect x="26.3476%" y="165" width="1.7713%" height="15" fill="rgb(208,69,12)"/><text x="26.5976%" y="175.50">m..</text></g><g><title>impl_parent (2,001,838 samples, 0.47%)</title><rect x="29.1766%" y="101" width="0.4685%" height="15" fill="rgb(235,93,37)"/><text x="29.4266%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,222,609 samples, 0.29%)</title><rect x="29.3589%" y="85" width="0.2861%" height="15" fill="rgb(213,116,39)"/><text x="29.6089%" y="95.50"></text></g><g><title>impl_trait_ref (4,563,175 samples, 1.07%)</title><rect x="29.6451%" y="101" width="1.0680%" height="15" fill="rgb(222,207,29)"/><text x="29.8951%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,778,147 samples, 0.88%)</title><rect x="29.8288%" y="85" width="0.8842%" height="15" fill="rgb(206,96,30)"/><text x="30.0788%" y="95.50"></text></g><g><title>coherent_trait (11,535,252 samples, 2.70%)</title><rect x="28.1669%" y="133" width="2.6997%" height="15" fill="rgb(218,138,4)"/><text x="28.4169%" y="143.50">co..</text></g><g><title>specialization_graph_of (11,505,601 samples, 2.69%)</title><rect x="28.1739%" y="117" width="2.6927%" height="15" fill="rgb(250,191,14)"/><text x="28.4239%" y="127.50">sp..</text></g><g><title>trait_impls_of (654,209 samples, 0.15%)</title><rect x="30.7135%" y="101" width="0.1531%" height="15" fill="rgb(239,60,40)"/><text x="30.9635%" y="111.50"></text></g><g><title>coherence_checking (11,661,114 samples, 2.73%)</title><rect x="28.1606%" y="149" width="2.7291%" height="15" fill="rgb(206,27,48)"/><text x="28.4106%" y="159.50">co..</text></g><g><title>dropck_outlives (569,405 samples, 0.13%)</title><rect x="46.5915%" y="101" width="0.1333%" height="15" fill="rgb(225,35,8)"/><text x="46.8415%" y="111.50"></text></g><g><title>evaluate_obligation (4,505,288 samples, 1.05%)</title><rect x="46.7248%" y="101" width="1.0544%" height="15" fill="rgb(250,213,24)"/><text x="46.9748%" y="111.50"></text></g><g><title>method_autoderef_steps (1,314,247 samples, 0.31%)</title><rect x="47.8876%" y="101" width="0.3076%" height="15" fill="rgb(247,123,22)"/><text x="48.1376%" y="111.50"></text></g><g><title>evaluate_obligation (646,665 samples, 0.15%)</title><rect x="48.0438%" y="85" width="0.1513%" height="15" fill="rgb(231,138,38)"/><text x="48.2938%" y="95.50"></text></g><g><title>explicit_predicates_of (451,698 samples, 0.11%)</title><rect x="48.5235%" y="53" width="0.1057%" height="15" fill="rgb(231,145,46)"/><text x="48.7735%" y="63.50"></text></g><g><title>param_env (1,663,031 samples, 0.39%)</title><rect x="48.2487%" y="101" width="0.3892%" height="15" fill="rgb(251,118,11)"/><text x="48.4987%" y="111.50"></text></g><g><title>predicates_of (763,500 samples, 0.18%)</title><rect x="48.4592%" y="85" width="0.1787%" height="15" fill="rgb(217,147,25)"/><text x="48.7092%" y="95.50"></text></g><g><title>predicates_defined_on (657,068 samples, 0.15%)</title><rect x="48.4841%" y="69" width="0.1538%" height="15" fill="rgb(247,81,37)"/><text x="48.7341%" y="79.50"></text></g><g><title>item_bodies_checking (76,753,824 samples, 17.96%)</title><rect x="30.9059%" y="149" width="17.9632%" height="15" fill="rgb(209,12,38)"/><text x="31.1559%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (76,750,714 samples, 17.96%)</title><rect x="30.9066%" y="133" width="17.9625%" height="15" fill="rgb(227,1,9)"/><text x="31.1566%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (76,381,052 samples, 17.88%)</title><rect x="30.9931%" y="117" width="17.8760%" height="15" fill="rgb(248,47,43)"/><text x="31.2431%" y="127.50">typeck</text></g><g><title>adt_destructor (438,155 samples, 0.10%)</title><rect x="49.5201%" y="117" width="0.1025%" height="15" fill="rgb(221,10,30)"/><text x="49.7701%" y="127.50"></text></g><g><title>coherent_trait (435,125 samples, 0.10%)</title><rect x="49.5208%" y="101" width="0.1018%" height="15" fill="rgb(210,229,1)"/><text x="49.7708%" y="111.50"></text></g><g><title>specialization_graph_of (432,275 samples, 0.10%)</title><rect x="49.5215%" y="85" width="0.1012%" height="15" fill="rgb(222,148,37)"/><text x="49.7715%" y="95.50"></text></g><g><title>item_types_checking (3,460,957 samples, 0.81%)</title><rect x="48.8691%" y="149" width="0.8100%" height="15" fill="rgb(234,67,33)"/><text x="49.1191%" y="159.50"></text></g><g><title>check_mod_item_types (3,458,387 samples, 0.81%)</title><rect x="48.8697%" y="133" width="0.8094%" height="15" fill="rgb(247,98,35)"/><text x="49.1197%" y="143.50"></text></g><g><title>fn_sig (475,354 samples, 0.11%)</title><rect x="49.8246%" y="117" width="0.1113%" height="15" fill="rgb(247,138,52)"/><text x="50.0746%" y="127.50"></text></g><g><title>named_region_map (1,557,538 samples, 0.36%)</title><rect x="50.0007%" y="101" width="0.3645%" height="15" fill="rgb(213,79,30)"/><text x="50.2507%" y="111.50"></text></g><g><title>resolve_lifetimes (1,484,677 samples, 0.35%)</title><rect x="50.0178%" y="85" width="0.3475%" height="15" fill="rgb(246,177,23)"/><text x="50.2678%" y="95.50"></text></g><g><title>lint_levels (582,826 samples, 0.14%)</title><rect x="50.2288%" y="69" width="0.1364%" height="15" fill="rgb(230,62,27)"/><text x="50.4788%" y="79.50"></text></g><g><title>generics_of (1,866,682 samples, 0.44%)</title><rect x="49.9358%" y="117" width="0.4369%" height="15" fill="rgb(216,154,8)"/><text x="50.1858%" y="127.50"></text></g><g><title>explicit_predicates_of (616,775 samples, 0.14%)</title><rect x="50.4685%" y="85" width="0.1443%" height="15" fill="rgb(244,35,45)"/><text x="50.7185%" y="95.50"></text></g><g><title>predicates_of (1,044,190 samples, 0.24%)</title><rect x="50.3955%" y="117" width="0.2444%" height="15" fill="rgb(251,115,12)"/><text x="50.6455%" y="127.50"></text></g><g><title>predicates_defined_on (922,877 samples, 0.22%)</title><rect x="50.4238%" y="101" width="0.2160%" height="15" fill="rgb(240,54,50)"/><text x="50.6738%" y="111.50"></text></g><g><title>type_collecting (4,530,968 samples, 1.06%)</title><rect x="49.6794%" y="149" width="1.0604%" height="15" fill="rgb(233,84,52)"/><text x="49.9294%" y="159.50"></text></g><g><title>collect_mod_item_types (4,524,468 samples, 1.06%)</title><rect x="49.6809%" y="133" width="1.0589%" height="15" fill="rgb(207,117,47)"/><text x="49.9309%" y="143.50"></text></g><g><title>evaluate_obligation (621,230 samples, 0.15%)</title><rect x="52.1076%" y="117" width="0.1454%" height="15" fill="rgb(249,43,39)"/><text x="52.3576%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,232,075 samples, 0.29%)</title><rect x="52.2530%" y="117" width="0.2884%" height="15" fill="rgb(209,38,44)"/><text x="52.5030%" y="127.50"></text></g><g><title>param_env (767,581 samples, 0.18%)</title><rect x="52.5414%" y="117" width="0.1796%" height="15" fill="rgb(236,212,23)"/><text x="52.7914%" y="127.50"></text></g><g><title>check_impl_item_well_formed (8,877,534 samples, 2.08%)</title><rect x="50.8872%" y="133" width="2.0777%" height="15" fill="rgb(242,79,21)"/><text x="51.1372%" y="143.50">c..</text></g><g><title>region_scope_tree (1,021,802 samples, 0.24%)</title><rect x="52.7257%" y="117" width="0.2391%" height="15" fill="rgb(211,96,35)"/><text x="52.9757%" y="127.50"></text></g><g><title>evaluate_obligation (625,614 samples, 0.15%)</title><rect x="53.8056%" y="117" width="0.1464%" height="15" fill="rgb(253,215,40)"/><text x="54.0556%" y="127.50"></text></g><g><title>param_env (651,906 samples, 0.15%)</title><rect x="53.9926%" y="117" width="0.1526%" height="15" fill="rgb(211,81,21)"/><text x="54.2426%" y="127.50"></text></g><g><title>check_item_well_formed (5,344,589 samples, 1.25%)</title><rect x="52.9649%" y="133" width="1.2508%" height="15" fill="rgb(208,190,38)"/><text x="53.2149%" y="143.50"></text></g><g><title>analysis (192,199,760 samples, 44.98%)</title><rect x="9.3885%" y="181" width="44.9818%" height="15" fill="rgb(235,213,38)"/><text x="9.6385%" y="191.50">analysis</text></g><g><title>type_check_crate (112,168,400 samples, 26.25%)</title><rect x="28.1188%" y="165" width="26.2515%" height="15" fill="rgb(237,122,38)"/><text x="28.3688%" y="175.50">type_check_crate</text></g><g><title>wf_checking (15,489,924 samples, 3.63%)</title><rect x="50.7452%" y="149" width="3.6252%" height="15" fill="rgb(244,218,35)"/><text x="50.9952%" y="159.50">wf_c..</text></g><g><title>check_trait_item_well_formed (660,848 samples, 0.15%)</title><rect x="54.2157%" y="133" width="0.1547%" height="15" fill="rgb(240,68,47)"/><text x="54.4657%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,095,153 samples, 0.26%)</title><rect x="55.0870%" y="149" width="0.2563%" height="15" fill="rgb(210,16,53)"/><text x="55.3370%" y="159.50"></text></g><g><title>codegen_module (3,653,008 samples, 0.85%)</title><rect x="54.5495%" y="165" width="0.8549%" height="15" fill="rgb(235,124,12)"/><text x="54.7995%" y="175.50"></text></g><g><title>optimized_mir (1,419,205 samples, 0.33%)</title><rect x="55.4931%" y="117" width="0.3321%" height="15" fill="rgb(224,169,11)"/><text x="55.7431%" y="127.50"></text></g><g><title>specialization_graph_of (1,056,439 samples, 0.25%)</title><rect x="55.9269%" y="101" width="0.2472%" height="15" fill="rgb(250,166,2)"/><text x="56.1769%" y="111.50"></text></g><g><title>impl_trait_ref (473,524 samples, 0.11%)</title><rect x="56.0633%" y="85" width="0.1108%" height="15" fill="rgb(242,216,29)"/><text x="56.3133%" y="95.50"></text></g><g><title>resolve_instance (1,520,316 samples, 0.36%)</title><rect x="55.8252%" y="117" width="0.3558%" height="15" fill="rgb(230,116,27)"/><text x="56.0752%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (3,493,356 samples, 0.82%)</title><rect x="55.4104%" y="133" width="0.8176%" height="15" fill="rgb(228,99,48)"/><text x="55.6604%" y="143.50"></text></g><g><title>monomorphization_collector (3,532,687 samples, 0.83%)</title><rect x="55.4099%" y="149" width="0.8268%" height="15" fill="rgb(253,11,6)"/><text x="55.6599%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (3,781,500 samples, 0.89%)</title><rect x="55.4046%" y="165" width="0.8850%" height="15" fill="rgb(247,143,39)"/><text x="55.6546%" y="175.50"></text></g><g><title>codegen_crate (8,250,968 samples, 1.93%)</title><rect x="54.3733%" y="181" width="1.9310%" height="15" fill="rgb(236,97,10)"/><text x="54.6233%" y="191.50">c..</text></g><g><title>codegen_module_optimize (24,429,009 samples, 5.72%)</title><rect x="56.3044%" y="181" width="5.7173%" height="15" fill="rgb(233,208,19)"/><text x="56.5544%" y="191.50">codegen..</text></g><g><title>LLVM_module_optimize (21,498,058 samples, 5.03%)</title><rect x="56.9903%" y="165" width="5.0313%" height="15" fill="rgb(216,164,2)"/><text x="57.2403%" y="175.50">LLVM_m..</text></g><g><title>LLVM_lto_optimize (11,458,521 samples, 2.68%)</title><rect x="62.4496%" y="165" width="2.6817%" height="15" fill="rgb(220,129,5)"/><text x="62.6996%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (23,893,864 samples, 5.59%)</title><rect x="65.1313%" y="165" width="5.5920%" height="15" fill="rgb(242,17,10)"/><text x="65.3813%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (23,597,552 samples, 5.52%)</title><rect x="65.2007%" y="149" width="5.5227%" height="15" fill="rgb(242,107,0)"/><text x="65.4507%" y="159.50">LLVM_mo..</text></g><g><title>LLVM_thin_lto_import (467,066 samples, 0.11%)</title><rect x="70.7234%" y="165" width="0.1093%" height="15" fill="rgb(251,28,31)"/><text x="70.9734%" y="175.50"></text></g><g><title>codegen_module_perform_lto (37,801,182 samples, 8.85%)</title><rect x="62.0216%" y="181" width="8.8469%" height="15" fill="rgb(233,223,10)"/><text x="62.2716%" y="191.50">codegen_modu..</text></g><g><title>AST_validation (599,496 samples, 0.14%)</title><rect x="70.9188%" y="165" width="0.1403%" height="15" fill="rgb(215,21,27)"/><text x="71.1688%" y="175.50"></text></g><g><title>macro_expand_crate (36,518,388 samples, 8.55%)</title><rect x="71.1089%" y="165" width="8.5467%" height="15" fill="rgb(232,23,21)"/><text x="71.3589%" y="175.50">macro_expand..</text></g><g><title>expand_crate (36,502,718 samples, 8.54%)</title><rect x="71.1126%" y="149" width="8.5430%" height="15" fill="rgb(244,5,23)"/><text x="71.3626%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,644,298 samples, 0.62%)</title><rect x="79.0367%" y="133" width="0.6189%" height="15" fill="rgb(226,81,46)"/><text x="79.2867%" y="143.50"></text></g><g><title>metadata_register_crate (954,169 samples, 0.22%)</title><rect x="79.4322%" y="117" width="0.2233%" height="15" fill="rgb(247,70,30)"/><text x="79.6822%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (477,845 samples, 0.11%)</title><rect x="79.6566%" y="165" width="0.1118%" height="15" fill="rgb(212,68,19)"/><text x="79.9066%" y="175.50"></text></g><g><title>late_resolve_crate (4,603,049 samples, 1.08%)</title><rect x="79.8363%" y="149" width="1.0773%" height="15" fill="rgb(240,187,13)"/><text x="80.0863%" y="159.50"></text></g><g><title>configure_and_expand (43,102,958 samples, 10.09%)</title><rect x="70.8685%" y="181" width="10.0877%" height="15" fill="rgb(223,113,26)"/><text x="71.1185%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (5,075,285 samples, 1.19%)</title><rect x="79.7684%" y="165" width="1.1878%" height="15" fill="rgb(206,192,2)"/><text x="80.0184%" y="175.50"></text></g><g><title>drop_ast (495,035 samples, 0.12%)</title><rect x="80.9562%" y="181" width="0.1159%" height="15" fill="rgb(241,108,4)"/><text x="81.2062%" y="191.50"></text></g><g><title>early_lint_checks (1,123,842 samples, 0.26%)</title><rect x="81.0764%" y="181" width="0.2630%" height="15" fill="rgb(247,173,49)"/><text x="81.3264%" y="191.50"></text></g><g><title>free_global_ctxt (5,198,476 samples, 1.22%)</title><rect x="81.3394%" y="181" width="1.2166%" height="15" fill="rgb(224,114,35)"/><text x="81.5894%" y="191.50"></text></g><g><title>mir_for_ctfe (943,261 samples, 0.22%)</title><rect x="83.7988%" y="165" width="0.2208%" height="15" fill="rgb(245,159,27)"/><text x="84.0488%" y="175.50"></text></g><g><title>is_sized_raw (580,624 samples, 0.14%)</title><rect x="86.1525%" y="133" width="0.1359%" height="15" fill="rgb(245,172,44)"/><text x="86.4025%" y="143.50"></text></g><g><title>layout_of (1,945,970 samples, 0.46%)</title><rect x="85.9593%" y="149" width="0.4554%" height="15" fill="rgb(236,23,11)"/><text x="86.2093%" y="159.50"></text></g><g><title>layout_of (539,562 samples, 0.13%)</title><rect x="86.2884%" y="133" width="0.1263%" height="15" fill="rgb(205,117,38)"/><text x="86.5384%" y="143.50"></text></g><g><title>optimized_mir (17,238,074 samples, 4.03%)</title><rect x="84.0471%" y="165" width="4.0343%" height="15" fill="rgb(237,72,25)"/><text x="84.2971%" y="175.50">opti..</text></g><g><title>mir_drops_elaborated_and_const_checked (7,121,873 samples, 1.67%)</title><rect x="86.4147%" y="149" width="1.6668%" height="15" fill="rgb(244,70,9)"/><text x="86.6647%" y="159.50"></text></g><g><title>promoted_mir (1,082,017 samples, 0.25%)</title><rect x="88.0815%" y="165" width="0.2532%" height="15" fill="rgb(217,125,39)"/><text x="88.3315%" y="175.50"></text></g><g><title>generate_crate_metadata (24,756,613 samples, 5.79%)</title><rect x="82.5560%" y="181" width="5.7940%" height="15" fill="rgb(235,36,10)"/><text x="82.8060%" y="191.50">generat..</text></g><g><title>hir_lowering (8,233,768 samples, 1.93%)</title><rect x="88.3500%" y="181" width="1.9270%" height="15" fill="rgb(251,123,47)"/><text x="88.6000%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (31,570,755 samples, 7.39%)</title><rect x="90.2807%" y="165" width="7.3887%" height="15" fill="rgb(221,13,13)"/><text x="90.5307%" y="175.50">finish_ong..</text></g><g><title>link_crate (1,363,185 samples, 0.32%)</title><rect x="97.6694%" y="165" width="0.3190%" height="15" fill="rgb(238,131,9)"/><text x="97.9194%" y="175.50"></text></g><g><title>link_binary (1,319,874 samples, 0.31%)</title><rect x="97.6796%" y="149" width="0.3089%" height="15" fill="rgb(211,50,8)"/><text x="97.9296%" y="159.50"></text></g><g><title>link_rlib (1,023,071 samples, 0.24%)</title><rect x="97.7490%" y="133" width="0.2394%" height="15" fill="rgb(245,182,24)"/><text x="97.9990%" y="143.50"></text></g><g><title>link (32,959,310 samples, 7.71%)</title><rect x="90.2770%" y="181" width="7.7137%" height="15" fill="rgb(242,14,37)"/><text x="90.5270%" y="191.50">link</text></g><g><title>parse_crate (6,477,779 samples, 1.52%)</title><rect x="97.9907%" y="181" width="1.5160%" height="15" fill="rgb(246,228,12)"/><text x="98.2407%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,287,303 samples, 0.30%)</title><rect x="99.5636%" y="181" width="0.3013%" height="15" fill="rgb(213,55,15)"/><text x="99.8136%" y="191.50"></text></g><g><title>all (427,283,025 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (427,283,025 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (486,875 samples, 0.11%)</title><rect x="99.8861%" y="181" width="0.1139%" height="15" fill="rgb(209,121,21)"/><text x="100.1361%" y="191.50"></text></g></svg></svg>