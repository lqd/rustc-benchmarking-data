<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (54,344,547 samples, 1.49%)</title><rect x="0.0357%" y="197" width="1.4880%" height="15" fill="rgb(227,0,7)"/><text x="0.2857%" y="207.50"></text></g><g><title>implied_outlives_bounds (15,353,950 samples, 0.42%)</title><rect x="12.2483%" y="149" width="0.4204%" height="15" fill="rgb(217,0,24)"/><text x="12.4983%" y="159.50"></text></g><g><title>is_copy_raw (4,613,428 samples, 0.13%)</title><rect x="16.3514%" y="85" width="0.1263%" height="15" fill="rgb(221,193,54)"/><text x="16.6014%" y="95.50"></text></g><g><title>is_copy_raw (23,340,495 samples, 0.64%)</title><rect x="16.5772%" y="69" width="0.6391%" height="15" fill="rgb(248,212,6)"/><text x="16.8272%" y="79.50"></text></g><g><title>evaluate_obligation (17,508,360 samples, 0.48%)</title><rect x="16.7369%" y="53" width="0.4794%" height="15" fill="rgb(208,68,35)"/><text x="16.9869%" y="63.50"></text></g><g><title>needs_drop_raw (28,098,989 samples, 0.77%)</title><rect x="16.4777%" y="85" width="0.7694%" height="15" fill="rgb(232,128,0)"/><text x="16.7277%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (20,252,666 samples, 0.55%)</title><rect x="17.4024%" y="69" width="0.5545%" height="15" fill="rgb(207,160,47)"/><text x="17.6524%" y="79.50"></text></g><g><title>resolve_instance (28,031,783 samples, 0.77%)</title><rect x="17.2481%" y="85" width="0.7675%" height="15" fill="rgb(228,23,34)"/><text x="17.4981%" y="95.50"></text></g><g><title>thir_body (21,979,988 samples, 0.60%)</title><rect x="18.0364%" y="85" width="0.6018%" height="15" fill="rgb(218,30,26)"/><text x="18.2864%" y="95.50"></text></g><g><title>mir_const (201,167,344 samples, 5.51%)</title><rect x="13.2292%" y="133" width="5.5082%" height="15" fill="rgb(220,122,19)"/><text x="13.4792%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (179,613,735 samples, 4.92%)</title><rect x="13.8194%" y="117" width="4.9180%" height="15" fill="rgb(250,228,42)"/><text x="14.0694%" y="127.50">unsafe..</text></g><g><title>mir_built (165,310,312 samples, 4.53%)</title><rect x="14.2110%" y="101" width="4.5264%" height="15" fill="rgb(240,193,28)"/><text x="14.4610%" y="111.50">mir_b..</text></g><g><title>mir_const (4,064,274 samples, 0.11%)</title><rect x="18.8477%" y="117" width="0.1113%" height="15" fill="rgb(216,20,37)"/><text x="19.0977%" y="127.50"></text></g><g><title>mir_const_qualif (8,687,467 samples, 0.24%)</title><rect x="18.7374%" y="133" width="0.2379%" height="15" fill="rgb(206,188,39)"/><text x="18.9874%" y="143.50"></text></g><g><title>mir_promoted (226,548,479 samples, 6.20%)</title><rect x="12.7723%" y="149" width="6.2032%" height="15" fill="rgb(217,207,13)"/><text x="13.0223%" y="159.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (41,465,182 samples, 1.14%)</title><rect x="18.9765%" y="149" width="1.1354%" height="15" fill="rgb(231,73,38)"/><text x="19.2265%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (25,974,399 samples, 0.71%)</title><rect x="20.1119%" y="149" width="0.7112%" height="15" fill="rgb(225,20,46)"/><text x="20.3619%" y="159.50"></text></g><g><title>normalize_projection_ty (14,080,402 samples, 0.39%)</title><rect x="20.4376%" y="133" width="0.3855%" height="15" fill="rgb(210,31,41)"/><text x="20.6876%" y="143.50"></text></g><g><title>type_op_normalize_predicate (12,189,284 samples, 0.33%)</title><rect x="20.8259%" y="149" width="0.3338%" height="15" fill="rgb(221,200,47)"/><text x="21.0759%" y="159.50"></text></g><g><title>type_op_normalize_ty (13,917,989 samples, 0.38%)</title><rect x="21.1596%" y="149" width="0.3811%" height="15" fill="rgb(226,26,5)"/><text x="21.4096%" y="159.50"></text></g><g><title>normalize_projection_ty (6,609,875 samples, 0.18%)</title><rect x="21.3597%" y="133" width="0.1810%" height="15" fill="rgb(249,33,26)"/><text x="21.6097%" y="143.50"></text></g><g><title>type_op_prove_predicate (120,438,129 samples, 3.30%)</title><rect x="21.5407%" y="149" width="3.2977%" height="15" fill="rgb(235,183,28)"/><text x="21.7907%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (846,736,281 samples, 23.18%)</title><rect x="1.6557%" y="181" width="23.1846%" height="15" fill="rgb(221,5,38)"/><text x="1.9057%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (843,085,823 samples, 23.08%)</title><rect x="1.7557%" y="165" width="23.0846%" height="15" fill="rgb(247,18,42)"/><text x="2.0057%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (4,191,103 samples, 0.11%)</title><rect x="24.9382%" y="181" width="0.1148%" height="15" fill="rgb(241,131,45)"/><text x="25.1882%" y="191.50"></text></g><g><title>codegen_fn_attrs (6,343,874 samples, 0.17%)</title><rect x="25.3000%" y="149" width="0.1737%" height="15" fill="rgb(249,31,29)"/><text x="25.5500%" y="159.50"></text></g><g><title>check_mod_attrs (15,262,136 samples, 0.42%)</title><rect x="25.0559%" y="165" width="0.4179%" height="15" fill="rgb(225,111,53)"/><text x="25.3059%" y="175.50"></text></g><g><title>lookup_deprecation_entry (3,722,172 samples, 0.10%)</title><rect x="25.6889%" y="149" width="0.1019%" height="15" fill="rgb(238,160,17)"/><text x="25.9389%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (6,706,207 samples, 0.18%)</title><rect x="25.6147%" y="165" width="0.1836%" height="15" fill="rgb(214,148,48)"/><text x="25.8647%" y="175.50"></text></g><g><title>misc_checking_1 (28,071,188 samples, 0.77%)</title><rect x="25.0530%" y="181" width="0.7686%" height="15" fill="rgb(232,36,49)"/><text x="25.3030%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (10,987,707 samples, 0.30%)</title><rect x="25.8217%" y="165" width="0.3009%" height="15" fill="rgb(209,103,24)"/><text x="26.0717%" y="175.50"></text></g><g><title>check_mod_liveness (9,190,336 samples, 0.25%)</title><rect x="25.8709%" y="149" width="0.2516%" height="15" fill="rgb(229,88,8)"/><text x="26.1209%" y="159.50"></text></g><g><title>misc_checking_2 (25,455,341 samples, 0.70%)</title><rect x="25.8216%" y="181" width="0.6970%" height="15" fill="rgb(213,181,19)"/><text x="26.0716%" y="191.50"></text></g><g><title>match_checking (14,464,664 samples, 0.40%)</title><rect x="26.1226%" y="165" width="0.3961%" height="15" fill="rgb(254,191,54)"/><text x="26.3726%" y="175.50"></text></g><g><title>check_match (13,249,549 samples, 0.36%)</title><rect x="26.1558%" y="149" width="0.3628%" height="15" fill="rgb(241,83,37)"/><text x="26.4058%" y="159.50"></text></g><g><title>check_private_in_public (7,811,373 samples, 0.21%)</title><rect x="26.5191%" y="165" width="0.2139%" height="15" fill="rgb(233,36,39)"/><text x="26.7691%" y="175.50"></text></g><g><title>death_checking (11,171,008 samples, 0.31%)</title><rect x="26.7329%" y="165" width="0.3059%" height="15" fill="rgb(226,3,54)"/><text x="26.9829%" y="175.50"></text></g><g><title>param_env (6,479,117 samples, 0.18%)</title><rect x="28.8523%" y="133" width="0.1774%" height="15" fill="rgb(245,192,40)"/><text x="29.1023%" y="143.50"></text></g><g><title>crate_lints (74,237,208 samples, 2.03%)</title><rect x="27.0389%" y="149" width="2.0327%" height="15" fill="rgb(238,167,29)"/><text x="27.2889%" y="159.50">c..</text></g><g><title>lint_checking (87,670,811 samples, 2.40%)</title><rect x="27.0388%" y="165" width="2.4005%" height="15" fill="rgb(232,182,51)"/><text x="27.2888%" y="175.50">li..</text></g><g><title>module_lints (13,430,293 samples, 0.37%)</title><rect x="29.0716%" y="149" width="0.3677%" height="15" fill="rgb(231,60,39)"/><text x="29.3216%" y="159.50"></text></g><g><title>lint_mod (13,374,393 samples, 0.37%)</title><rect x="29.0731%" y="133" width="0.3662%" height="15" fill="rgb(208,69,12)"/><text x="29.3231%" y="143.50"></text></g><g><title>privacy_access_levels (9,562,592 samples, 0.26%)</title><rect x="29.4393%" y="165" width="0.2618%" height="15" fill="rgb(235,93,37)"/><text x="29.6893%" y="175.50"></text></g><g><title>privacy_checking_modules (27,707,014 samples, 0.76%)</title><rect x="29.7012%" y="165" width="0.7586%" height="15" fill="rgb(213,116,39)"/><text x="29.9512%" y="175.50"></text></g><g><title>check_mod_privacy (27,656,584 samples, 0.76%)</title><rect x="29.7026%" y="149" width="0.7573%" height="15" fill="rgb(222,207,29)"/><text x="29.9526%" y="159.50"></text></g><g><title>misc_checking_3 (144,218,661 samples, 3.95%)</title><rect x="26.5186%" y="181" width="3.9489%" height="15" fill="rgb(206,96,30)"/><text x="26.7686%" y="191.50">misc..</text></g><g><title>impl_parent (4,560,417 samples, 0.12%)</title><rect x="30.8515%" y="117" width="0.1249%" height="15" fill="rgb(218,138,4)"/><text x="31.1015%" y="127.50"></text></g><g><title>impl_trait_ref (8,916,538 samples, 0.24%)</title><rect x="30.9765%" y="117" width="0.2441%" height="15" fill="rgb(250,191,14)"/><text x="31.2265%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,956,661 samples, 0.19%)</title><rect x="31.0301%" y="101" width="0.1905%" height="15" fill="rgb(239,60,40)"/><text x="31.2801%" y="111.50"></text></g><g><title>specialization_graph_of (25,515,260 samples, 0.70%)</title><rect x="30.5963%" y="133" width="0.6986%" height="15" fill="rgb(206,27,48)"/><text x="30.8463%" y="143.50"></text></g><g><title>coherent_trait (28,452,961 samples, 0.78%)</title><rect x="30.5162%" y="149" width="0.7791%" height="15" fill="rgb(225,35,8)"/><text x="30.7662%" y="159.50"></text></g><g><title>coherence_checking (29,644,774 samples, 0.81%)</title><rect x="30.5147%" y="165" width="0.8117%" height="15" fill="rgb(250,213,24)"/><text x="30.7647%" y="175.50"></text></g><g><title>dropck_outlives (11,307,537 samples, 0.31%)</title><rect x="51.1212%" y="117" width="0.3096%" height="15" fill="rgb(247,123,22)"/><text x="51.3712%" y="127.50"></text></g><g><title>mir_for_ctfe (3,881,942 samples, 0.11%)</title><rect x="51.4993%" y="69" width="0.1063%" height="15" fill="rgb(231,138,38)"/><text x="51.7493%" y="79.50"></text></g><g><title>eval_to_const_value_raw (9,451,410 samples, 0.26%)</title><rect x="51.4310%" y="117" width="0.2588%" height="15" fill="rgb(231,145,46)"/><text x="51.6810%" y="127.50"></text></g><g><title>eval_to_const_value_raw (9,421,169 samples, 0.26%)</title><rect x="51.4319%" y="101" width="0.2580%" height="15" fill="rgb(251,118,11)"/><text x="51.6819%" y="111.50"></text></g><g><title>eval_to_allocation_raw (9,366,958 samples, 0.26%)</title><rect x="51.4334%" y="85" width="0.2565%" height="15" fill="rgb(217,147,25)"/><text x="51.6834%" y="95.50"></text></g><g><title>specializes (4,460,833 samples, 0.12%)</title><rect x="52.8727%" y="101" width="0.1221%" height="15" fill="rgb(247,81,37)"/><text x="53.1227%" y="111.50"></text></g><g><title>evaluate_obligation (47,925,281 samples, 1.31%)</title><rect x="51.6898%" y="117" width="1.3122%" height="15" fill="rgb(209,12,38)"/><text x="51.9398%" y="127.50"></text></g><g><title>evaluate_obligation (6,775,341 samples, 0.19%)</title><rect x="53.3653%" y="101" width="0.1855%" height="15" fill="rgb(227,1,9)"/><text x="53.6153%" y="111.50"></text></g><g><title>method_autoderef_steps (17,254,711 samples, 0.47%)</title><rect x="53.0786%" y="117" width="0.4725%" height="15" fill="rgb(248,47,43)"/><text x="53.3286%" y="127.50"></text></g><g><title>evaluate_obligation (13,109,595 samples, 0.36%)</title><rect x="59.7933%" y="101" width="0.3590%" height="15" fill="rgb(221,10,30)"/><text x="60.0433%" y="111.50"></text></g><g><title>method_autoderef_steps (5,158,524 samples, 0.14%)</title><rect x="60.3080%" y="101" width="0.1412%" height="15" fill="rgb(210,229,1)"/><text x="60.5580%" y="111.50"></text></g><g><title>typeck (249,212,877 samples, 6.82%)</title><rect x="53.6637%" y="117" width="6.8237%" height="15" fill="rgb(222,148,37)"/><text x="53.9137%" y="127.50">typeck</text></g><g><title>item_bodies_checking (1,064,363,422 samples, 29.14%)</title><rect x="31.3624%" y="165" width="29.1435%" height="15" fill="rgb(234,67,33)"/><text x="31.6124%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,064,360,372 samples, 29.14%)</title><rect x="31.3624%" y="149" width="29.1434%" height="15" fill="rgb(247,98,35)"/><text x="31.6124%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (1,059,349,176 samples, 29.01%)</title><rect x="31.4997%" y="133" width="29.0062%" height="15" fill="rgb(247,138,52)"/><text x="31.7497%" y="143.50">typeck</text></g><g><title>mir_built (12,675,324 samples, 0.35%)</title><rect x="63.2484%" y="53" width="0.3471%" height="15" fill="rgb(213,79,30)"/><text x="63.4984%" y="63.50"></text></g><g><title>typeck (11,069,008 samples, 0.30%)</title><rect x="63.2924%" y="37" width="0.3031%" height="15" fill="rgb(246,177,23)"/><text x="63.5424%" y="47.50"></text></g><g><title>mir_const (14,496,225 samples, 0.40%)</title><rect x="63.2197%" y="85" width="0.3969%" height="15" fill="rgb(230,62,27)"/><text x="63.4697%" y="95.50"></text></g><g><title>unsafety_check_result (13,545,115 samples, 0.37%)</title><rect x="63.2458%" y="69" width="0.3709%" height="15" fill="rgb(216,154,8)"/><text x="63.4958%" y="79.50"></text></g><g><title>mir_promoted (14,618,927 samples, 0.40%)</title><rect x="63.2167%" y="101" width="0.4003%" height="15" fill="rgb(244,35,45)"/><text x="63.4667%" y="111.50"></text></g><g><title>type_of (21,512,610 samples, 0.59%)</title><rect x="63.0707%" y="133" width="0.5890%" height="15" fill="rgb(251,115,12)"/><text x="63.3207%" y="143.50"></text></g><g><title>mir_borrowck (21,490,639 samples, 0.59%)</title><rect x="63.0713%" y="117" width="0.5884%" height="15" fill="rgb(240,54,50)"/><text x="63.3213%" y="127.50"></text></g><g><title>item_types_checking (116,397,796 samples, 3.19%)</title><rect x="60.5058%" y="165" width="3.1871%" height="15" fill="rgb(233,84,52)"/><text x="60.7558%" y="175.50">ite..</text></g><g><title>check_mod_item_types (116,357,696 samples, 3.19%)</title><rect x="60.5069%" y="149" width="3.1860%" height="15" fill="rgb(207,117,47)"/><text x="60.7569%" y="159.50">che..</text></g><g><title>fn_sig (5,938,352 samples, 0.16%)</title><rect x="63.9454%" y="133" width="0.1626%" height="15" fill="rgb(249,43,39)"/><text x="64.1954%" y="143.50"></text></g><g><title>is_late_bound_map (5,531,219 samples, 0.15%)</title><rect x="64.1861%" y="117" width="0.1515%" height="15" fill="rgb(209,38,44)"/><text x="64.4361%" y="127.50"></text></g><g><title>resolve_lifetimes (5,133,256 samples, 0.14%)</title><rect x="64.1970%" y="101" width="0.1406%" height="15" fill="rgb(236,212,23)"/><text x="64.4470%" y="111.50"></text></g><g><title>named_region_map (5,204,594 samples, 0.14%)</title><rect x="64.3375%" y="117" width="0.1425%" height="15" fill="rgb(242,79,21)"/><text x="64.5875%" y="127.50"></text></g><g><title>resolve_lifetimes (4,909,500 samples, 0.13%)</title><rect x="64.3456%" y="101" width="0.1344%" height="15" fill="rgb(211,96,35)"/><text x="64.5956%" y="111.50"></text></g><g><title>lint_levels (4,351,866 samples, 0.12%)</title><rect x="64.3609%" y="85" width="0.1192%" height="15" fill="rgb(253,215,40)"/><text x="64.6109%" y="95.50"></text></g><g><title>generics_of (13,822,476 samples, 0.38%)</title><rect x="64.1080%" y="133" width="0.3785%" height="15" fill="rgb(211,81,21)"/><text x="64.3580%" y="143.50"></text></g><g><title>late_bound_vars_map (5,193,931 samples, 0.14%)</title><rect x="64.8137%" y="85" width="0.1422%" height="15" fill="rgb(208,190,38)"/><text x="65.0637%" y="95.50"></text></g><g><title>resolve_lifetimes (4,857,279 samples, 0.13%)</title><rect x="64.8229%" y="69" width="0.1330%" height="15" fill="rgb(235,213,38)"/><text x="65.0729%" y="79.50"></text></g><g><title>explicit_predicates_of (13,294,056 samples, 0.36%)</title><rect x="64.6137%" y="101" width="0.3640%" height="15" fill="rgb(237,122,38)"/><text x="64.8637%" y="111.50"></text></g><g><title>predicates_of (19,098,536 samples, 0.52%)</title><rect x="64.5328%" y="133" width="0.5229%" height="15" fill="rgb(244,218,35)"/><text x="64.7828%" y="143.50"></text></g><g><title>predicates_defined_on (17,972,024 samples, 0.49%)</title><rect x="64.5636%" y="117" width="0.4921%" height="15" fill="rgb(240,68,47)"/><text x="64.8136%" y="127.50"></text></g><g><title>type_collecting (52,891,172 samples, 1.45%)</title><rect x="63.6944%" y="165" width="1.4482%" height="15" fill="rgb(210,16,53)"/><text x="63.9444%" y="175.50"></text></g><g><title>collect_mod_item_types (52,842,871 samples, 1.45%)</title><rect x="63.6958%" y="149" width="1.4469%" height="15" fill="rgb(235,124,12)"/><text x="63.9458%" y="159.50"></text></g><g><title>evaluate_obligation (9,727,264 samples, 0.27%)</title><rect x="69.3809%" y="133" width="0.2663%" height="15" fill="rgb(224,169,11)"/><text x="69.6309%" y="143.50"></text></g><g><title>implied_outlives_bounds (10,529,031 samples, 0.29%)</title><rect x="69.6576%" y="133" width="0.2883%" height="15" fill="rgb(250,166,2)"/><text x="69.9076%" y="143.50"></text></g><g><title>param_env (38,066,350 samples, 1.04%)</title><rect x="69.9504%" y="133" width="1.0423%" height="15" fill="rgb(242,216,29)"/><text x="70.2004%" y="143.50"></text></g><g><title>region_scope_tree (8,547,350 samples, 0.23%)</title><rect x="70.9961%" y="133" width="0.2340%" height="15" fill="rgb(230,116,27)"/><text x="71.2461%" y="143.50"></text></g><g><title>check_impl_item_well_formed (216,374,854 samples, 5.92%)</title><rect x="65.3073%" y="149" width="5.9246%" height="15" fill="rgb(228,99,48)"/><text x="65.5573%" y="159.50">check_im..</text></g><g><title>evaluate_obligation (26,803,424 samples, 0.73%)</title><rect x="75.1510%" y="133" width="0.7339%" height="15" fill="rgb(253,11,6)"/><text x="75.4010%" y="143.50"></text></g><g><title>implied_outlives_bounds (4,911,702 samples, 0.13%)</title><rect x="75.9013%" y="133" width="0.1345%" height="15" fill="rgb(247,143,39)"/><text x="76.1513%" y="143.50"></text></g><g><title>param_env (27,363,366 samples, 0.75%)</title><rect x="76.0366%" y="133" width="0.7492%" height="15" fill="rgb(236,97,10)"/><text x="76.2866%" y="143.50"></text></g><g><title>check_item_well_formed (206,855,831 samples, 5.66%)</title><rect x="71.2319%" y="149" width="5.6639%" height="15" fill="rgb(233,208,19)"/><text x="71.4819%" y="159.50">check_i..</text></g><g><title>analysis (2,776,559,184 samples, 76.03%)</title><rect x="1.5237%" y="197" width="76.0253%" height="15" fill="rgb(216,164,2)"/><text x="1.7737%" y="207.50">analysis</text></g><g><title>type_check_crate (1,719,487,489 samples, 47.08%)</title><rect x="30.4675%" y="181" width="47.0815%" height="15" fill="rgb(220,129,5)"/><text x="30.7175%" y="191.50">type_check_crate</text></g><g><title>wf_checking (452,917,760 samples, 12.40%)</title><rect x="65.1476%" y="165" width="12.4014%" height="15" fill="rgb(242,17,10)"/><text x="65.3976%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (23,854,825 samples, 0.65%)</title><rect x="76.8958%" y="149" width="0.6532%" height="15" fill="rgb(242,107,0)"/><text x="77.1458%" y="159.50"></text></g><g><title>codegen_module (13,687,506 samples, 0.37%)</title><rect x="77.5967%" y="181" width="0.3748%" height="15" fill="rgb(251,28,31)"/><text x="77.8467%" y="191.50"></text></g><g><title>optimized_mir (5,542,009 samples, 0.15%)</title><rect x="77.9989%" y="133" width="0.1517%" height="15" fill="rgb(233,223,10)"/><text x="78.2489%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (7,549,530 samples, 0.21%)</title><rect x="77.9726%" y="149" width="0.2067%" height="15" fill="rgb(215,21,27)"/><text x="78.2226%" y="159.50"></text></g><g><title>monomorphization_collector (8,361,059 samples, 0.23%)</title><rect x="77.9724%" y="165" width="0.2289%" height="15" fill="rgb(232,23,21)"/><text x="78.2224%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (9,000,726 samples, 0.25%)</title><rect x="77.9716%" y="181" width="0.2465%" height="15" fill="rgb(244,5,23)"/><text x="78.2216%" y="191.50"></text></g><g><title>codegen_crate (24,504,090 samples, 0.67%)</title><rect x="77.5494%" y="197" width="0.6709%" height="15" fill="rgb(226,81,46)"/><text x="77.7994%" y="207.50"></text></g><g><title>codegen_module_optimize (73,646,861 samples, 2.02%)</title><rect x="78.2203%" y="197" width="2.0165%" height="15" fill="rgb(247,70,30)"/><text x="78.4703%" y="207.50">c..</text></g><g><title>LLVM_module_optimize (64,175,139 samples, 1.76%)</title><rect x="78.4797%" y="181" width="1.7572%" height="15" fill="rgb(212,68,19)"/><text x="78.7297%" y="191.50"></text></g><g><title>LLVM_lto_optimize (46,247,806 samples, 1.27%)</title><rect x="80.3703%" y="181" width="1.2663%" height="15" fill="rgb(240,187,13)"/><text x="80.6203%" y="191.50"></text></g><g><title>LLVM_module_codegen (84,051,001 samples, 2.30%)</title><rect x="81.6366%" y="181" width="2.3014%" height="15" fill="rgb(223,113,26)"/><text x="81.8866%" y="191.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (82,975,910 samples, 2.27%)</title><rect x="81.6661%" y="165" width="2.2720%" height="15" fill="rgb(206,192,2)"/><text x="81.9161%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (136,130,861 samples, 3.73%)</title><rect x="80.2369%" y="197" width="3.7274%" height="15" fill="rgb(241,108,4)"/><text x="80.4869%" y="207.50">code..</text></g><g><title>AST_validation (4,334,506 samples, 0.12%)</title><rect x="83.9686%" y="181" width="0.1187%" height="15" fill="rgb(247,173,49)"/><text x="84.2186%" y="191.50"></text></g><g><title>macro_expand_crate (158,534,103 samples, 4.34%)</title><rect x="84.1674%" y="181" width="4.3408%" height="15" fill="rgb(224,114,35)"/><text x="84.4174%" y="191.50">macro..</text></g><g><title>expand_crate (158,519,843 samples, 4.34%)</title><rect x="84.1678%" y="165" width="4.3405%" height="15" fill="rgb(245,159,27)"/><text x="84.4178%" y="175.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (4,433,524 samples, 0.12%)</title><rect x="88.3869%" y="149" width="0.1214%" height="15" fill="rgb(245,172,44)"/><text x="88.6369%" y="159.50"></text></g><g><title>late_resolve_crate (28,127,269 samples, 0.77%)</title><rect x="88.5700%" y="165" width="0.7702%" height="15" fill="rgb(236,23,11)"/><text x="88.8200%" y="175.50"></text></g><g><title>configure_and_expand (201,356,048 samples, 5.51%)</title><rect x="83.9643%" y="197" width="5.5134%" height="15" fill="rgb(205,117,38)"/><text x="84.2143%" y="207.50">configu..</text></g><g><title>resolve_crate (35,317,936 samples, 0.97%)</title><rect x="88.5106%" y="181" width="0.9670%" height="15" fill="rgb(237,72,25)"/><text x="88.7606%" y="191.50"></text></g><g><title>drop_ast (8,220,597 samples, 0.23%)</title><rect x="89.4776%" y="197" width="0.2251%" height="15" fill="rgb(244,70,9)"/><text x="89.7276%" y="207.50"></text></g><g><title>early_lint_checks (8,372,619 samples, 0.23%)</title><rect x="89.7035%" y="197" width="0.2293%" height="15" fill="rgb(217,125,39)"/><text x="89.9535%" y="207.50"></text></g><g><title>free_global_ctxt (27,934,146 samples, 0.76%)</title><rect x="89.9327%" y="197" width="0.7649%" height="15" fill="rgb(235,36,10)"/><text x="90.1827%" y="207.50"></text></g><g><title>reachable_non_generics (4,410,478 samples, 0.12%)</title><rect x="91.9361%" y="165" width="0.1208%" height="15" fill="rgb(251,123,47)"/><text x="92.1861%" y="175.50"></text></g><g><title>reachable_set (4,104,164 samples, 0.11%)</title><rect x="91.9445%" y="149" width="0.1124%" height="15" fill="rgb(221,13,13)"/><text x="92.1945%" y="159.50"></text></g><g><title>exported_symbols (4,928,643 samples, 0.13%)</title><rect x="91.9341%" y="181" width="0.1350%" height="15" fill="rgb(238,131,9)"/><text x="92.1841%" y="191.50"></text></g><g><title>layout_of (4,834,398 samples, 0.13%)</title><rect x="94.5054%" y="133" width="0.1324%" height="15" fill="rgb(211,50,8)"/><text x="94.7554%" y="143.50"></text></g><g><title>layout_of (9,569,118 samples, 0.26%)</title><rect x="94.4365%" y="149" width="0.2620%" height="15" fill="rgb(245,182,24)"/><text x="94.6865%" y="159.50"></text></g><g><title>layout_of (24,810,186 samples, 0.68%)</title><rect x="94.1207%" y="165" width="0.6793%" height="15" fill="rgb(242,14,37)"/><text x="94.3707%" y="175.50"></text></g><g><title>needs_drop_raw (4,432,043 samples, 0.12%)</title><rect x="96.6998%" y="149" width="0.1214%" height="15" fill="rgb(246,228,12)"/><text x="96.9498%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (76,002,352 samples, 2.08%)</title><rect x="94.8000%" y="165" width="2.0810%" height="15" fill="rgb(213,55,15)"/><text x="95.0500%" y="175.50">m..</text></g><g><title>optimized_mir (172,564,020 samples, 4.72%)</title><rect x="92.1980%" y="181" width="4.7250%" height="15" fill="rgb(209,9,3)"/><text x="92.4480%" y="191.50">optimi..</text></g><g><title>generate_crate_metadata (231,230,006 samples, 6.33%)</title><rect x="90.6976%" y="197" width="6.3313%" height="15" fill="rgb(230,59,30)"/><text x="90.9476%" y="207.50">generate..</text></g><g><title>hir_lowering (79,460,864 samples, 2.18%)</title><rect x="97.0289%" y="197" width="2.1757%" height="15" fill="rgb(209,121,21)"/><text x="97.2789%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (6,874,773 samples, 0.19%)</title><rect x="99.2051%" y="181" width="0.1882%" height="15" fill="rgb(220,109,13)"/><text x="99.4551%" y="191.50"></text></g><g><title>link_crate (8,932,855 samples, 0.24%)</title><rect x="99.3933%" y="181" width="0.2446%" height="15" fill="rgb(232,18,1)"/><text x="99.6433%" y="191.50"></text></g><g><title>link_binary (8,729,253 samples, 0.24%)</title><rect x="99.3989%" y="165" width="0.2390%" height="15" fill="rgb(215,41,42)"/><text x="99.6489%" y="175.50"></text></g><g><title>link_rlib (7,726,732 samples, 0.21%)</title><rect x="99.4264%" y="149" width="0.2116%" height="15" fill="rgb(224,123,36)"/><text x="99.6764%" y="159.50"></text></g><g><title>link (15,832,258 samples, 0.43%)</title><rect x="99.2047%" y="197" width="0.4335%" height="15" fill="rgb(240,125,3)"/><text x="99.4547%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (9,119,806 samples, 0.25%)</title><rect x="99.6614%" y="197" width="0.2497%" height="15" fill="rgb(205,98,50)"/><text x="99.9114%" y="207.50"></text></g><g><title>all (3,652,150,606 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (3,652,150,606 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>