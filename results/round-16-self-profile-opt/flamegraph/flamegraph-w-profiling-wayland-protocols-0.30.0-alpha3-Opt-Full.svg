<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,448,683 samples, 17.73%)</title><rect x="1.6051%" y="149" width="17.7309%" height="15" fill="rgb(227,0,7)"/><text x="1.8551%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (68,701 samples, 0.27%)</title><rect x="19.0622%" y="133" width="0.2738%" height="15" fill="rgb(217,0,24)"/><text x="19.3122%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (61,961 samples, 0.25%)</title><rect x="19.0890%" y="117" width="0.2470%" height="15" fill="rgb(221,193,54)"/><text x="19.3390%" y="127.50"></text></g><g><title>hir_module_items (71,631 samples, 0.29%)</title><rect x="19.6587%" y="133" width="0.2855%" height="15" fill="rgb(248,212,6)"/><text x="19.9087%" y="143.50"></text></g><g><title>check_mod_attrs (39,801 samples, 0.16%)</title><rect x="20.0978%" y="117" width="0.1586%" height="15" fill="rgb(208,68,35)"/><text x="20.3478%" y="127.50"></text></g><g><title>lookup_deprecation_entry (31,640 samples, 0.13%)</title><rect x="20.4755%" y="101" width="0.1261%" height="15" fill="rgb(232,128,0)"/><text x="20.7255%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (77,681 samples, 0.31%)</title><rect x="20.3286%" y="117" width="0.3096%" height="15" fill="rgb(207,160,47)"/><text x="20.5786%" y="127.50"></text></g><g><title>looking_for_derive_registrar (28,731 samples, 0.11%)</title><rect x="20.6411%" y="117" width="0.1145%" height="15" fill="rgb(228,23,34)"/><text x="20.8911%" y="127.50"></text></g><g><title>misc_checking_1 (206,173 samples, 0.82%)</title><rect x="19.9455%" y="133" width="0.8217%" height="15" fill="rgb(218,30,26)"/><text x="20.1955%" y="143.50"></text></g><g><title>get_lang_items (34,600 samples, 0.14%)</title><rect x="21.0974%" y="85" width="0.1379%" height="15" fill="rgb(220,122,19)"/><text x="21.3474%" y="95.50"></text></g><g><title>codegen_fn_attrs (83,471 samples, 0.33%)</title><rect x="21.0037%" y="101" width="0.3327%" height="15" fill="rgb(250,228,42)"/><text x="21.2537%" y="111.50"></text></g><g><title>death_checking (169,812 samples, 0.68%)</title><rect x="20.8904%" y="117" width="0.6768%" height="15" fill="rgb(240,193,28)"/><text x="21.1404%" y="127.50"></text></g><g><title>lint_levels (56,051 samples, 0.22%)</title><rect x="21.3439%" y="101" width="0.2234%" height="15" fill="rgb(216,20,37)"/><text x="21.5939%" y="111.50"></text></g><g><title>explicit_predicates_of (41,280 samples, 0.16%)</title><rect x="22.5768%" y="37" width="0.1645%" height="15" fill="rgb(206,188,39)"/><text x="22.8268%" y="47.50"></text></g><g><title>crate_lints (297,803 samples, 1.19%)</title><rect x="21.5806%" y="101" width="1.1869%" height="15" fill="rgb(217,207,13)"/><text x="21.8306%" y="111.50"></text></g><g><title>param_env (266,923 samples, 1.06%)</title><rect x="21.7037%" y="85" width="1.0639%" height="15" fill="rgb(231,73,38)"/><text x="21.9537%" y="95.50"></text></g><g><title>predicates_of (74,340 samples, 0.30%)</title><rect x="22.4713%" y="69" width="0.2963%" height="15" fill="rgb(225,20,46)"/><text x="22.7213%" y="79.50"></text></g><g><title>predicates_defined_on (66,430 samples, 0.26%)</title><rect x="22.5028%" y="53" width="0.2648%" height="15" fill="rgb(210,31,41)"/><text x="22.7528%" y="63.50"></text></g><g><title>lint_checking (318,544 samples, 1.27%)</title><rect x="21.5673%" y="117" width="1.2696%" height="15" fill="rgb(221,200,47)"/><text x="21.8173%" y="127.50"></text></g><g><title>misc_checking_3 (547,316 samples, 2.18%)</title><rect x="20.8250%" y="133" width="2.1814%" height="15" fill="rgb(226,26,5)"/><text x="21.0750%" y="143.50">m..</text></g><g><title>coherence_checking (32,160 samples, 0.13%)</title><rect x="23.1129%" y="117" width="0.1282%" height="15" fill="rgb(249,33,26)"/><text x="23.3629%" y="127.50"></text></g><g><title>type_collecting (40,390 samples, 0.16%)</title><rect x="23.3373%" y="117" width="0.1610%" height="15" fill="rgb(235,183,28)"/><text x="23.5873%" y="127.50"></text></g><g><title>analysis (1,061,362 samples, 4.23%)</title><rect x="19.3360%" y="149" width="4.2302%" height="15" fill="rgb(221,5,38)"/><text x="19.5860%" y="159.50">analy..</text></g><g><title>type_check_crate (140,462 samples, 0.56%)</title><rect x="23.0064%" y="133" width="0.5598%" height="15" fill="rgb(247,18,42)"/><text x="23.2564%" y="143.50"></text></g><g><title>codegen_module (218,733 samples, 0.87%)</title><rect x="25.3722%" y="133" width="0.8718%" height="15" fill="rgb(241,131,45)"/><text x="25.6222%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (49,110 samples, 0.20%)</title><rect x="26.2460%" y="133" width="0.1957%" height="15" fill="rgb(249,31,29)"/><text x="26.4960%" y="143.50"></text></g><g><title>codegen_crate (778,560 samples, 3.10%)</title><rect x="23.5932%" y="149" width="3.1031%" height="15" fill="rgb(225,111,53)"/><text x="23.8432%" y="159.50">cod..</text></g><g><title>codegen_module_optimize (1,412,637 samples, 5.63%)</title><rect x="26.6962%" y="149" width="5.6303%" height="15" fill="rgb(238,160,17)"/><text x="26.9462%" y="159.50">codegen..</text></g><g><title>LLVM_module_optimize (431,765 samples, 1.72%)</title><rect x="30.6056%" y="133" width="1.7209%" height="15" fill="rgb(214,148,48)"/><text x="30.8556%" y="143.50"></text></g><g><title>LLVM_lto_optimize (194,533 samples, 0.78%)</title><rect x="33.7078%" y="133" width="0.7753%" height="15" fill="rgb(232,36,49)"/><text x="33.9578%" y="143.50"></text></g><g><title>LLVM_module_codegen (2,141,746 samples, 8.54%)</title><rect x="34.4831%" y="133" width="8.5362%" height="15" fill="rgb(209,103,24)"/><text x="34.7331%" y="143.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,103,915 samples, 8.39%)</title><rect x="34.6339%" y="117" width="8.3855%" height="15" fill="rgb(229,88,8)"/><text x="34.8839%" y="127.50">LLVM_module_..</text></g><g><title>codegen_module_perform_lto (2,711,653 samples, 10.81%)</title><rect x="32.3265%" y="149" width="10.8077%" height="15" fill="rgb(213,181,19)"/><text x="32.5765%" y="159.50">codegen_module_p..</text></g><g><title>AST_validation (75,471 samples, 0.30%)</title><rect x="43.6785%" y="133" width="0.3008%" height="15" fill="rgb(254,191,54)"/><text x="43.9285%" y="143.50"></text></g><g><title>crate_injection (68,371 samples, 0.27%)</title><rect x="44.0336%" y="133" width="0.2725%" height="15" fill="rgb(241,83,37)"/><text x="44.2836%" y="143.50"></text></g><g><title>metadata_load_macro (112,322 samples, 0.45%)</title><rect x="64.3479%" y="101" width="0.4477%" height="15" fill="rgb(233,36,39)"/><text x="64.5979%" y="111.50"></text></g><g><title>metadata_register_crate (1,280,656 samples, 5.10%)</title><rect x="64.7956%" y="101" width="5.1042%" height="15" fill="rgb(226,3,54)"/><text x="65.0456%" y="111.50">metada..</text></g><g><title>metadata_register_crate (455,774 samples, 1.82%)</title><rect x="68.0833%" y="85" width="1.8166%" height="15" fill="rgb(245,192,40)"/><text x="68.3333%" y="95.50">m..</text></g><g><title>metadata_register_crate (39,030 samples, 0.16%)</title><rect x="69.7443%" y="69" width="0.1556%" height="15" fill="rgb(238,167,29)"/><text x="69.9943%" y="79.50"></text></g><g><title>macro_expand_crate (6,464,617 samples, 25.77%)</title><rect x="44.3061%" y="133" width="25.7657%" height="15" fill="rgb(232,182,51)"/><text x="44.5561%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (6,448,717 samples, 25.70%)</title><rect x="44.3695%" y="117" width="25.7023%" height="15" fill="rgb(231,60,39)"/><text x="44.6195%" y="127.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (43,141 samples, 0.17%)</title><rect x="69.8999%" y="101" width="0.1719%" height="15" fill="rgb(208,69,12)"/><text x="70.1499%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (71,471 samples, 0.28%)</title><rect x="70.0825%" y="133" width="0.2849%" height="15" fill="rgb(235,93,37)"/><text x="70.3325%" y="143.50"></text></g><g><title>finalize_imports (196,843 samples, 0.78%)</title><rect x="70.3812%" y="117" width="0.7845%" height="15" fill="rgb(213,116,39)"/><text x="70.6312%" y="127.50"></text></g><g><title>configure_and_expand (7,098,686 samples, 28.29%)</title><rect x="43.1342%" y="149" width="28.2928%" height="15" fill="rgb(222,207,29)"/><text x="43.3842%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (265,864 samples, 1.06%)</title><rect x="70.3674%" y="133" width="1.0596%" height="15" fill="rgb(206,96,30)"/><text x="70.6174%" y="143.50"></text></g><g><title>drop_compiler (28,151 samples, 0.11%)</title><rect x="71.5148%" y="149" width="0.1122%" height="15" fill="rgb(218,138,4)"/><text x="71.7648%" y="159.50"></text></g><g><title>early_lint_checks (110,001 samples, 0.44%)</title><rect x="71.6270%" y="149" width="0.4384%" height="15" fill="rgb(250,191,14)"/><text x="71.8770%" y="159.50"></text></g><g><title>free_global_ctxt (1,124,454 samples, 4.48%)</title><rect x="72.0655%" y="149" width="4.4817%" height="15" fill="rgb(239,60,40)"/><text x="72.3155%" y="159.50">free_..</text></g><g><title>crate_hash (71,471 samples, 0.28%)</title><rect x="77.3478%" y="133" width="0.2849%" height="15" fill="rgb(206,27,48)"/><text x="77.5978%" y="143.50"></text></g><g><title>mir_keys (33,830 samples, 0.13%)</title><rect x="77.8614%" y="133" width="0.1348%" height="15" fill="rgb(225,35,8)"/><text x="78.1114%" y="143.50"></text></g><g><title>generate_crate_metadata (367,225 samples, 1.46%)</title><rect x="76.5471%" y="149" width="1.4636%" height="15" fill="rgb(250,213,24)"/><text x="76.7971%" y="159.50"></text></g><g><title>hir_lowering (253,723 samples, 1.01%)</title><rect x="78.0108%" y="149" width="1.0112%" height="15" fill="rgb(247,123,22)"/><text x="78.2608%" y="159.50"></text></g><g><title>finish_ongoing_codegen (3,198,778 samples, 12.75%)</title><rect x="79.0793%" y="133" width="12.7492%" height="15" fill="rgb(231,138,38)"/><text x="79.3293%" y="143.50">finish_ongoing_code..</text></g><g><title>link_binary_remove_temps (37,440 samples, 0.15%)</title><rect x="93.1221%" y="101" width="0.1492%" height="15" fill="rgb(231,145,46)"/><text x="93.3721%" y="111.50"></text></g><g><title>link_crate (1,021,582 samples, 4.07%)</title><rect x="91.8285%" y="133" width="4.0717%" height="15" fill="rgb(251,118,11)"/><text x="92.0785%" y="143.50">link..</text></g><g><title>link_binary (1,008,302 samples, 4.02%)</title><rect x="91.8814%" y="117" width="4.0187%" height="15" fill="rgb(217,147,25)"/><text x="92.1314%" y="127.50">link..</text></g><g><title>link_rlib (659,588 samples, 2.63%)</title><rect x="93.2713%" y="101" width="2.6289%" height="15" fill="rgb(247,81,37)"/><text x="93.5213%" y="111.50">li..</text></g><g><title>link (4,246,531 samples, 16.93%)</title><rect x="79.0220%" y="149" width="16.9252%" height="15" fill="rgb(209,12,38)"/><text x="79.2720%" y="159.50">link</text></g><g><title>parse_crate (204,122 samples, 0.81%)</title><rect x="95.9472%" y="149" width="0.8136%" height="15" fill="rgb(227,1,9)"/><text x="96.1972%" y="159.50"></text></g><g><title>prepare_outputs (209,402 samples, 0.83%)</title><rect x="96.7846%" y="149" width="0.8346%" height="15" fill="rgb(248,47,43)"/><text x="97.0346%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (287,113 samples, 1.14%)</title><rect x="97.6192%" y="149" width="1.1443%" height="15" fill="rgb(221,10,30)"/><text x="97.8692%" y="159.50"></text></g><g><title>setup_global_ctxt (97,781 samples, 0.39%)</title><rect x="98.7682%" y="149" width="0.3897%" height="15" fill="rgb(210,229,1)"/><text x="99.0182%" y="159.50"></text></g><g><title>all (25,090,052 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(222,148,37)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (25,090,052 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(234,67,33)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (211,282 samples, 0.84%)</title><rect x="99.1579%" y="149" width="0.8421%" height="15" fill="rgb(247,98,35)"/><text x="99.4079%" y="159.50"></text></g></svg></svg>