<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (138,222,454 samples, 10.59%)</title><rect x="0.0718%" y="325" width="10.5906%" height="15" fill="rgb(227,0,7)"/><text x="0.3218%" y="335.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,953,952 samples, 0.15%)</title><rect x="10.5127%" y="309" width="0.1497%" height="15" fill="rgb(217,0,24)"/><text x="10.7627%" y="319.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,923,932 samples, 0.15%)</title><rect x="10.5150%" y="293" width="0.1474%" height="15" fill="rgb(221,193,54)"/><text x="10.7650%" y="303.50"></text></g><g><title>needs_drop_raw (1,546,579 samples, 0.12%)</title><rect x="12.3723%" y="213" width="0.1185%" height="15" fill="rgb(248,212,6)"/><text x="12.6223%" y="223.50"></text></g><g><title>resolve_instance (2,116,020 samples, 0.16%)</title><rect x="12.4908%" y="213" width="0.1621%" height="15" fill="rgb(208,68,35)"/><text x="12.7408%" y="223.50"></text></g><g><title>thir_body (1,383,068 samples, 0.11%)</title><rect x="12.6546%" y="213" width="0.1060%" height="15" fill="rgb(232,128,0)"/><text x="12.9046%" y="223.50"></text></g><g><title>mir_const (10,386,035 samples, 0.80%)</title><rect x="11.9658%" y="261" width="0.7958%" height="15" fill="rgb(207,160,47)"/><text x="12.2158%" y="271.50"></text></g><g><title>unsafety_check_result (9,214,507 samples, 0.71%)</title><rect x="12.0556%" y="245" width="0.7060%" height="15" fill="rgb(228,23,34)"/><text x="12.3056%" y="255.50"></text></g><g><title>mir_built (8,398,468 samples, 0.64%)</title><rect x="12.1181%" y="229" width="0.6435%" height="15" fill="rgb(218,30,26)"/><text x="12.3681%" y="239.50"></text></g><g><title>mir_promoted (12,145,783 samples, 0.93%)</title><rect x="11.8849%" y="277" width="0.9306%" height="15" fill="rgb(220,122,19)"/><text x="12.1349%" y="287.50"></text></g><g><title>type_op_prove_predicate (2,198,672 samples, 0.17%)</title><rect x="12.9225%" y="277" width="0.1685%" height="15" fill="rgb(250,228,42)"/><text x="13.1725%" y="287.50"></text></g><g><title>MIR_borrow_checking (31,364,025 samples, 2.40%)</title><rect x="10.6892%" y="309" width="2.4031%" height="15" fill="rgb(240,193,28)"/><text x="10.9392%" y="319.50">MI..</text></g><g><title>mir_borrowck (31,195,944 samples, 2.39%)</title><rect x="10.7020%" y="293" width="2.3902%" height="15" fill="rgb(216,20,37)"/><text x="10.9520%" y="303.50">mi..</text></g><g><title>misc_checking_1 (1,502,736 samples, 0.12%)</title><rect x="13.1409%" y="309" width="0.1151%" height="15" fill="rgb(206,188,39)"/><text x="13.3909%" y="319.50"></text></g><g><title>crate_lints (3,076,054 samples, 0.24%)</title><rect x="13.4600%" y="277" width="0.2357%" height="15" fill="rgb(217,207,13)"/><text x="13.7100%" y="287.50"></text></g><g><title>lint_checking (3,679,400 samples, 0.28%)</title><rect x="13.4599%" y="293" width="0.2819%" height="15" fill="rgb(231,73,38)"/><text x="13.7099%" y="303.50"></text></g><g><title>misc_checking_3 (6,459,992 samples, 0.49%)</title><rect x="13.3492%" y="309" width="0.4950%" height="15" fill="rgb(225,20,46)"/><text x="13.5992%" y="319.50"></text></g><g><title>impl_parent (3,499,249 samples, 0.27%)</title><rect x="14.4094%" y="245" width="0.2681%" height="15" fill="rgb(210,31,41)"/><text x="14.6594%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,026,191 samples, 0.16%)</title><rect x="14.5223%" y="229" width="0.1552%" height="15" fill="rgb(221,200,47)"/><text x="14.7723%" y="239.50"></text></g><g><title>impl_trait_ref (7,115,781 samples, 0.55%)</title><rect x="14.6776%" y="245" width="0.5452%" height="15" fill="rgb(226,26,5)"/><text x="14.9276%" y="255.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,626,660 samples, 0.43%)</title><rect x="14.7917%" y="229" width="0.4311%" height="15" fill="rgb(249,33,26)"/><text x="15.0417%" y="239.50"></text></g><g><title>trait_impls_of (1,375,983 samples, 0.11%)</title><rect x="15.2307%" y="245" width="0.1054%" height="15" fill="rgb(235,183,28)"/><text x="15.4807%" y="255.50"></text></g><g><title>coherent_trait (19,318,023 samples, 1.48%)</title><rect x="13.8562%" y="277" width="1.4801%" height="15" fill="rgb(221,5,38)"/><text x="14.1062%" y="287.50"></text></g><g><title>specialization_graph_of (18,759,755 samples, 1.44%)</title><rect x="13.8990%" y="261" width="1.4374%" height="15" fill="rgb(247,18,42)"/><text x="14.1490%" y="271.50"></text></g><g><title>coherence_checking (19,427,894 samples, 1.49%)</title><rect x="13.8542%" y="293" width="1.4886%" height="15" fill="rgb(241,131,45)"/><text x="14.1042%" y="303.50"></text></g><g><title>evaluate_obligation (6,330,040 samples, 0.49%)</title><rect x="17.9950%" y="245" width="0.4850%" height="15" fill="rgb(249,31,29)"/><text x="18.2450%" y="255.50"></text></g><g><title>item_bodies_checking (43,593,741 samples, 3.34%)</title><rect x="15.3462%" y="293" width="3.3401%" height="15" fill="rgb(225,111,53)"/><text x="15.5962%" y="303.50">ite..</text></g><g><title>typeck_item_bodies (43,589,611 samples, 3.34%)</title><rect x="15.3465%" y="277" width="3.3398%" height="15" fill="rgb(238,160,17)"/><text x="15.5965%" y="287.50">typ..</text></g><g><title>typeck (43,471,978 samples, 3.33%)</title><rect x="15.3555%" y="261" width="3.3308%" height="15" fill="rgb(214,148,48)"/><text x="15.6055%" y="271.50">typ..</text></g><g><title>item_types_checking (1,363,435 samples, 0.10%)</title><rect x="18.6863%" y="293" width="0.1045%" height="15" fill="rgb(232,36,49)"/><text x="18.9363%" y="303.50"></text></g><g><title>check_mod_item_types (1,356,505 samples, 0.10%)</title><rect x="18.6869%" y="277" width="0.1039%" height="15" fill="rgb(209,103,24)"/><text x="18.9369%" y="287.50"></text></g><g><title>type_collecting (2,162,804 samples, 0.17%)</title><rect x="18.7911%" y="293" width="0.1657%" height="15" fill="rgb(229,88,8)"/><text x="19.0411%" y="303.50"></text></g><g><title>collect_mod_item_types (2,147,704 samples, 0.16%)</title><rect x="18.7923%" y="277" width="0.1646%" height="15" fill="rgb(213,181,19)"/><text x="19.0423%" y="287.50"></text></g><g><title>eval_to_const_value_raw (1,605,327 samples, 0.12%)</title><rect x="19.2494%" y="197" width="0.1230%" height="15" fill="rgb(254,191,54)"/><text x="19.4994%" y="207.50"></text></g><g><title>eval_to_const_value_raw (1,602,927 samples, 0.12%)</title><rect x="19.2496%" y="181" width="0.1228%" height="15" fill="rgb(241,83,37)"/><text x="19.4996%" y="191.50"></text></g><g><title>eval_to_allocation_raw (1,598,917 samples, 0.12%)</title><rect x="19.2499%" y="165" width="0.1225%" height="15" fill="rgb(233,36,39)"/><text x="19.4999%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,630,387 samples, 0.12%)</title><rect x="19.2482%" y="213" width="0.1249%" height="15" fill="rgb(226,3,54)"/><text x="19.4982%" y="223.50"></text></g><g><title>eval_to_const_value_raw (3,505,728 samples, 0.27%)</title><rect x="19.1292%" y="261" width="0.2686%" height="15" fill="rgb(245,192,40)"/><text x="19.3792%" y="271.50"></text></g><g><title>eval_to_const_value_raw (3,480,908 samples, 0.27%)</title><rect x="19.1311%" y="245" width="0.2667%" height="15" fill="rgb(238,167,29)"/><text x="19.3811%" y="255.50"></text></g><g><title>eval_to_allocation_raw (3,468,108 samples, 0.27%)</title><rect x="19.1321%" y="229" width="0.2657%" height="15" fill="rgb(232,182,51)"/><text x="19.3821%" y="239.50"></text></g><g><title>check_impl_item_well_formed (7,221,963 samples, 0.55%)</title><rect x="18.9754%" y="277" width="0.5533%" height="15" fill="rgb(231,60,39)"/><text x="19.2254%" y="287.50"></text></g><g><title>analysis (118,027,942 samples, 9.04%)</title><rect x="10.6624%" y="325" width="9.0433%" height="15" fill="rgb(208,69,12)"/><text x="10.9124%" y="335.50">analysis</text></g><g><title>type_check_crate (76,500,834 samples, 5.86%)</title><rect x="13.8442%" y="309" width="5.8615%" height="15" fill="rgb(235,93,37)"/><text x="14.0942%" y="319.50">type_ch..</text></g><g><title>wf_checking (9,763,918 samples, 0.75%)</title><rect x="18.9576%" y="293" width="0.7481%" height="15" fill="rgb(213,116,39)"/><text x="19.2076%" y="303.50"></text></g><g><title>check_item_well_formed (2,309,094 samples, 0.18%)</title><rect x="19.5288%" y="277" width="0.1769%" height="15" fill="rgb(222,207,29)"/><text x="19.7788%" y="287.50"></text></g><g><title>is_freeze_raw (1,425,956 samples, 0.11%)</title><rect x="23.0984%" y="277" width="0.1093%" height="15" fill="rgb(206,96,30)"/><text x="23.3484%" y="287.50"></text></g><g><title>evaluate_obligation (1,305,334 samples, 0.10%)</title><rect x="23.1077%" y="261" width="0.1000%" height="15" fill="rgb(218,138,4)"/><text x="23.3577%" y="271.50"></text></g><g><title>layout_of (1,515,029 samples, 0.12%)</title><rect x="23.3560%" y="261" width="0.1161%" height="15" fill="rgb(250,191,14)"/><text x="23.6060%" y="271.50"></text></g><g><title>layout_of (2,659,482 samples, 0.20%)</title><rect x="23.2876%" y="277" width="0.2038%" height="15" fill="rgb(239,60,40)"/><text x="23.5376%" y="287.50"></text></g><g><title>param_env (3,577,789 samples, 0.27%)</title><rect x="23.4914%" y="277" width="0.2741%" height="15" fill="rgb(206,27,48)"/><text x="23.7414%" y="287.50"></text></g><g><title>fn_abi_of_instance (13,804,255 samples, 1.06%)</title><rect x="22.7913%" y="293" width="1.0577%" height="15" fill="rgb(225,35,8)"/><text x="23.0413%" y="303.50"></text></g><g><title>codegen_module (53,555,570 samples, 4.10%)</title><rect x="19.8979%" y="309" width="4.1034%" height="15" fill="rgb(250,213,24)"/><text x="20.1479%" y="319.50">code..</text></g><g><title>codegen_fn_attrs (1,607,922 samples, 0.12%)</title><rect x="24.1378%" y="261" width="0.1232%" height="15" fill="rgb(247,123,22)"/><text x="24.3878%" y="271.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,373,589 samples, 0.11%)</title><rect x="24.5070%" y="245" width="0.1052%" height="15" fill="rgb(231,138,38)"/><text x="24.7570%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,191,730 samples, 0.17%)</title><rect x="24.6122%" y="245" width="0.1679%" height="15" fill="rgb(231,145,46)"/><text x="24.8622%" y="255.50"></text></g><g><title>mir_for_ctfe (2,164,844 samples, 0.17%)</title><rect x="25.3051%" y="53" width="0.1659%" height="15" fill="rgb(251,118,11)"/><text x="25.5551%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (2,164,314 samples, 0.17%)</title><rect x="25.3051%" y="37" width="0.1658%" height="15" fill="rgb(217,147,25)"/><text x="25.5551%" y="47.50"></text></g><g><title>eval_to_const_value_raw (5,954,286 samples, 0.46%)</title><rect x="25.0149%" y="101" width="0.4562%" height="15" fill="rgb(247,81,37)"/><text x="25.2649%" y="111.50"></text></g><g><title>eval_to_const_value_raw (5,953,586 samples, 0.46%)</title><rect x="25.0149%" y="85" width="0.4562%" height="15" fill="rgb(209,12,38)"/><text x="25.2649%" y="95.50"></text></g><g><title>eval_to_allocation_raw (5,950,806 samples, 0.46%)</title><rect x="25.0151%" y="69" width="0.4559%" height="15" fill="rgb(227,1,9)"/><text x="25.2651%" y="79.50"></text></g><g><title>eval_to_const_value_raw (6,773,225 samples, 0.52%)</title><rect x="24.9528%" y="165" width="0.5190%" height="15" fill="rgb(248,47,43)"/><text x="25.2028%" y="175.50"></text></g><g><title>eval_to_const_value_raw (6,772,695 samples, 0.52%)</title><rect x="24.9528%" y="149" width="0.5189%" height="15" fill="rgb(221,10,30)"/><text x="25.2028%" y="159.50"></text></g><g><title>eval_to_allocation_raw (6,771,545 samples, 0.52%)</title><rect x="24.9529%" y="133" width="0.5188%" height="15" fill="rgb(210,229,1)"/><text x="25.2029%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (5,974,046 samples, 0.46%)</title><rect x="25.0140%" y="117" width="0.4577%" height="15" fill="rgb(222,148,37)"/><text x="25.2640%" y="127.50"></text></g><g><title>eval_to_const_value_raw (8,797,017 samples, 0.67%)</title><rect x="24.7978%" y="229" width="0.6740%" height="15" fill="rgb(234,67,33)"/><text x="25.0478%" y="239.50"></text></g><g><title>eval_to_const_value_raw (8,782,207 samples, 0.67%)</title><rect x="24.7989%" y="213" width="0.6729%" height="15" fill="rgb(247,98,35)"/><text x="25.0489%" y="223.50"></text></g><g><title>eval_to_allocation_raw (8,763,937 samples, 0.67%)</title><rect x="24.8003%" y="197" width="0.6715%" height="15" fill="rgb(247,138,52)"/><text x="25.0503%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,784,145 samples, 0.52%)</title><rect x="24.9520%" y="181" width="0.5198%" height="15" fill="rgb(213,79,30)"/><text x="25.2020%" y="191.50"></text></g><g><title>optimized_mir (15,071,459 samples, 1.15%)</title><rect x="24.3178%" y="261" width="1.1548%" height="15" fill="rgb(246,177,23)"/><text x="24.5678%" y="271.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,852,347 samples, 0.68%)</title><rect x="24.7944%" y="245" width="0.6783%" height="15" fill="rgb(230,62,27)"/><text x="25.0444%" y="255.50"></text></g><g><title>codegen_fulfill_obligation (3,533,106 samples, 0.27%)</title><rect x="25.5438%" y="245" width="0.2707%" height="15" fill="rgb(216,154,8)"/><text x="25.7938%" y="255.50"></text></g><g><title>specialization_graph_of (1,446,245 samples, 0.11%)</title><rect x="25.8878%" y="245" width="0.1108%" height="15" fill="rgb(244,35,45)"/><text x="26.1378%" y="255.50"></text></g><g><title>resolve_instance (7,165,543 samples, 0.55%)</title><rect x="25.4726%" y="261" width="0.5490%" height="15" fill="rgb(251,115,12)"/><text x="25.7226%" y="271.50"></text></g><g><title>monomorphization_collector_graph_walk (28,043,759 samples, 2.15%)</title><rect x="24.0049%" y="277" width="2.1487%" height="15" fill="rgb(240,54,50)"/><text x="24.2549%" y="287.50">m..</text></g><g><title>monomorphization_collector (28,129,080 samples, 2.16%)</title><rect x="24.0047%" y="293" width="2.1552%" height="15" fill="rgb(233,84,52)"/><text x="24.2547%" y="303.50">m..</text></g><g><title>assert_symbols_are_distinct (1,509,057 samples, 0.12%)</title><rect x="26.1603%" y="277" width="0.1156%" height="15" fill="rgb(207,117,47)"/><text x="26.4103%" y="287.50"></text></g><g><title>symbol_name (1,368,026 samples, 0.10%)</title><rect x="26.1711%" y="261" width="0.1048%" height="15" fill="rgb(249,43,39)"/><text x="26.4211%" y="271.50"></text></g><g><title>collect_and_partition_mono_items (30,235,563 samples, 2.32%)</title><rect x="24.0021%" y="309" width="2.3166%" height="15" fill="rgb(209,38,44)"/><text x="24.2521%" y="319.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (2,072,313 samples, 0.16%)</title><rect x="26.1599%" y="293" width="0.1588%" height="15" fill="rgb(236,212,23)"/><text x="26.4099%" y="303.50"></text></g><g><title>codegen_crate (86,412,212 samples, 6.62%)</title><rect x="19.7065%" y="325" width="6.6209%" height="15" fill="rgb(242,79,21)"/><text x="19.9565%" y="335.50">codegen_c..</text></g><g><title>codegen_module_optimize (344,928,109 samples, 26.43%)</title><rect x="26.3274%" y="325" width="26.4283%" height="15" fill="rgb(211,96,35)"/><text x="26.5774%" y="335.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (311,083,737 samples, 23.84%)</title><rect x="28.9205%" y="309" width="23.8352%" height="15" fill="rgb(253,215,40)"/><text x="29.1705%" y="319.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (202,061,662 samples, 15.48%)</title><rect x="54.3208%" y="309" width="15.4819%" height="15" fill="rgb(211,81,21)"/><text x="54.5708%" y="319.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (198,077,255 samples, 15.18%)</title><rect x="69.8028%" y="309" width="15.1766%" height="15" fill="rgb(208,190,38)"/><text x="70.0528%" y="319.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (195,399,447 samples, 14.97%)</title><rect x="70.0080%" y="293" width="14.9715%" height="15" fill="rgb(235,213,38)"/><text x="70.2580%" y="303.50">LLVM_module_codegen_emi..</text></g><g><title>LLVM_thin_lto_import (34,487,440 samples, 2.64%)</title><rect x="84.9794%" y="309" width="2.6424%" height="15" fill="rgb(237,122,38)"/><text x="85.2294%" y="319.50">LL..</text></g><g><title>codegen_module_perform_lto (456,219,408 samples, 34.96%)</title><rect x="52.7557%" y="325" width="34.9555%" height="15" fill="rgb(244,218,35)"/><text x="53.0057%" y="335.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (15,300,090 samples, 1.17%)</title><rect x="90.5381%" y="277" width="1.1723%" height="15" fill="rgb(240,68,47)"/><text x="90.7881%" y="287.50"></text></g><g><title>metadata_register_crate (12,678,349 samples, 0.97%)</title><rect x="90.7390%" y="261" width="0.9714%" height="15" fill="rgb(210,16,53)"/><text x="90.9890%" y="271.50"></text></g><g><title>metadata_register_crate (10,999,209 samples, 0.84%)</title><rect x="90.8677%" y="245" width="0.8428%" height="15" fill="rgb(235,124,12)"/><text x="91.1177%" y="255.50"></text></g><g><title>macro_expand_crate (52,172,105 samples, 4.00%)</title><rect x="87.7555%" y="309" width="3.9974%" height="15" fill="rgb(224,169,11)"/><text x="88.0055%" y="319.50">macr..</text></g><g><title>expand_crate (52,157,105 samples, 4.00%)</title><rect x="87.7566%" y="293" width="3.9963%" height="15" fill="rgb(250,166,2)"/><text x="88.0066%" y="303.50">expa..</text></g><g><title>late_resolve_crate (1,880,801 samples, 0.14%)</title><rect x="91.7832%" y="293" width="0.1441%" height="15" fill="rgb(242,216,29)"/><text x="92.0332%" y="303.50"></text></g><g><title>configure_and_expand (55,189,029 samples, 4.23%)</title><rect x="87.7112%" y="325" width="4.2286%" height="15" fill="rgb(230,116,27)"/><text x="87.9612%" y="335.50">confi..</text></g><g><title>resolve_crate (2,317,476 samples, 0.18%)</title><rect x="91.7622%" y="309" width="0.1776%" height="15" fill="rgb(228,99,48)"/><text x="92.0122%" y="319.50"></text></g><g><title>free_global_ctxt (8,625,656 samples, 0.66%)</title><rect x="92.0000%" y="325" width="0.6609%" height="15" fill="rgb(253,11,6)"/><text x="92.2500%" y="335.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,277,802 samples, 0.17%)</title><rect x="93.1053%" y="293" width="0.1745%" height="15" fill="rgb(247,143,39)"/><text x="93.3553%" y="303.50"></text></g><g><title>optimized_mir (5,635,590 samples, 0.43%)</title><rect x="92.8503%" y="309" width="0.4318%" height="15" fill="rgb(236,97,10)"/><text x="93.1003%" y="319.50"></text></g><g><title>generate_crate_metadata (8,227,750 samples, 0.63%)</title><rect x="92.6609%" y="325" width="0.6304%" height="15" fill="rgb(233,208,19)"/><text x="92.9109%" y="335.50"></text></g><g><title>hir_lowering (3,396,788 samples, 0.26%)</title><rect x="93.2913%" y="325" width="0.2603%" height="15" fill="rgb(216,164,2)"/><text x="93.5413%" y="335.50"></text></g><g><title>finish_ongoing_codegen (78,222,652 samples, 5.99%)</title><rect x="93.5629%" y="309" width="5.9934%" height="15" fill="rgb(220,129,5)"/><text x="93.8129%" y="319.50">finish_o..</text></g><g><title>link_crate (1,831,710 samples, 0.14%)</title><rect x="99.5563%" y="309" width="0.1403%" height="15" fill="rgb(242,17,10)"/><text x="99.8063%" y="319.50"></text></g><g><title>link_binary (1,791,960 samples, 0.14%)</title><rect x="99.5594%" y="293" width="0.1373%" height="15" fill="rgb(242,107,0)"/><text x="99.8094%" y="303.50"></text></g><g><title>link (80,212,274 samples, 6.15%)</title><rect x="93.5516%" y="325" width="6.1459%" height="15" fill="rgb(251,28,31)"/><text x="93.8016%" y="335.50">link</text></g><g><title>self_profile_alloc_query_strings (2,429,007 samples, 0.19%)</title><rect x="99.7757%" y="325" width="0.1861%" height="15" fill="rgb(233,223,10)"/><text x="100.0257%" y="335.50"></text></g><g><title>all (1,305,144,853 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="367.50"></text></g><g><title>rustc (1,305,144,853 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="351.50">rustc</text></g></svg></svg>