<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,780,467 samples, 16.52%)</title><rect x="0.4618%" y="181" width="16.5242%" height="15" fill="rgb(227,0,7)"/><text x="0.7118%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (344,614 samples, 0.22%)</title><rect x="16.7651%" y="165" width="0.2209%" height="15" fill="rgb(217,0,24)"/><text x="17.0151%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (329,194 samples, 0.21%)</title><rect x="16.7749%" y="149" width="0.2110%" height="15" fill="rgb(221,193,54)"/><text x="17.0249%" y="159.50"></text></g><g><title>is_copy_raw (238,793 samples, 0.15%)</title><rect x="18.1859%" y="69" width="0.1531%" height="15" fill="rgb(248,212,6)"/><text x="18.4359%" y="79.50"></text></g><g><title>evaluate_obligation (230,673 samples, 0.15%)</title><rect x="18.1911%" y="53" width="0.1479%" height="15" fill="rgb(208,68,35)"/><text x="18.4411%" y="63.50"></text></g><g><title>trait_impls_of (174,482 samples, 0.11%)</title><rect x="18.2272%" y="37" width="0.1118%" height="15" fill="rgb(232,128,0)"/><text x="18.4772%" y="47.50"></text></g><g><title>mir_const (974,530 samples, 0.62%)</title><rect x="17.8718%" y="117" width="0.6246%" height="15" fill="rgb(207,160,47)"/><text x="18.1218%" y="127.50"></text></g><g><title>unsafety_check_result (825,229 samples, 0.53%)</title><rect x="17.9675%" y="101" width="0.5289%" height="15" fill="rgb(228,23,34)"/><text x="18.2175%" y="111.50"></text></g><g><title>mir_built (735,698 samples, 0.47%)</title><rect x="18.0249%" y="85" width="0.4716%" height="15" fill="rgb(218,30,26)"/><text x="18.2749%" y="95.50"></text></g><g><title>mir_promoted (1,089,243 samples, 0.70%)</title><rect x="17.8025%" y="133" width="0.6982%" height="15" fill="rgb(220,122,19)"/><text x="18.0525%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,416,067 samples, 1.55%)</title><rect x="17.0850%" y="165" width="1.5486%" height="15" fill="rgb(250,228,42)"/><text x="17.3350%" y="175.50"></text></g><g><title>mir_borrowck (2,408,477 samples, 1.54%)</title><rect x="17.0898%" y="149" width="1.5437%" height="15" fill="rgb(240,193,28)"/><text x="17.3398%" y="159.50"></text></g><g><title>codegen_fn_attrs (162,291 samples, 0.10%)</title><rect x="18.8283%" y="101" width="0.1040%" height="15" fill="rgb(216,20,37)"/><text x="19.0783%" y="111.50"></text></g><g><title>codegen_fn_attrs (244,102 samples, 0.16%)</title><rect x="18.7774%" y="133" width="0.1565%" height="15" fill="rgb(206,188,39)"/><text x="19.0274%" y="143.50"></text></g><g><title>should_inherit_track_caller (218,922 samples, 0.14%)</title><rect x="18.7936%" y="117" width="0.1403%" height="15" fill="rgb(217,207,13)"/><text x="19.0436%" y="127.50"></text></g><g><title>check_mod_attrs (330,334 samples, 0.21%)</title><rect x="18.7224%" y="149" width="0.2117%" height="15" fill="rgb(231,73,38)"/><text x="18.9724%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (179,182 samples, 0.11%)</title><rect x="18.9832%" y="149" width="0.1148%" height="15" fill="rgb(225,20,46)"/><text x="19.2332%" y="159.50"></text></g><g><title>misc_checking_1 (660,208 samples, 0.42%)</title><rect x="18.7054%" y="165" width="0.4232%" height="15" fill="rgb(210,31,41)"/><text x="18.9554%" y="175.50"></text></g><g><title>crate_lints (1,513,097 samples, 0.97%)</title><rect x="19.3299%" y="133" width="0.9698%" height="15" fill="rgb(221,200,47)"/><text x="19.5799%" y="143.50"></text></g><g><title>type_of (1,008,840 samples, 0.65%)</title><rect x="19.6531%" y="117" width="0.6466%" height="15" fill="rgb(226,26,5)"/><text x="19.9031%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (764,620 samples, 0.49%)</title><rect x="19.8096%" y="101" width="0.4901%" height="15" fill="rgb(249,33,26)"/><text x="20.0596%" y="111.50"></text></g><g><title>lint_checking (1,574,037 samples, 1.01%)</title><rect x="19.3290%" y="149" width="1.0089%" height="15" fill="rgb(235,183,28)"/><text x="19.5790%" y="159.50"></text></g><g><title>misc_checking_3 (1,859,941 samples, 1.19%)</title><rect x="19.2273%" y="165" width="1.1921%" height="15" fill="rgb(221,5,38)"/><text x="19.4773%" y="175.50"></text></g><g><title>impl_parent (1,323,709 samples, 0.85%)</title><rect x="21.7835%" y="101" width="0.8484%" height="15" fill="rgb(247,18,42)"/><text x="22.0335%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (778,119 samples, 0.50%)</title><rect x="22.1332%" y="85" width="0.4987%" height="15" fill="rgb(241,131,45)"/><text x="22.3832%" y="95.50"></text></g><g><title>impl_trait_ref (4,767,773 samples, 3.06%)</title><rect x="22.6320%" y="101" width="3.0559%" height="15" fill="rgb(249,31,29)"/><text x="22.8820%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,245,030 samples, 2.72%)</title><rect x="22.9670%" y="85" width="2.7209%" height="15" fill="rgb(225,111,53)"/><text x="23.2170%" y="95.50">me..</text></g><g><title>coherent_trait (8,566,975 samples, 5.49%)</title><rect x="20.4514%" y="133" width="5.4911%" height="15" fill="rgb(238,160,17)"/><text x="20.7014%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (8,559,455 samples, 5.49%)</title><rect x="20.4562%" y="117" width="5.4862%" height="15" fill="rgb(214,148,48)"/><text x="20.7062%" y="127.50">special..</text></g><g><title>trait_impls_of (394,655 samples, 0.25%)</title><rect x="25.6895%" y="101" width="0.2530%" height="15" fill="rgb(232,36,49)"/><text x="25.9395%" y="111.50"></text></g><g><title>coherence_checking (8,635,086 samples, 5.53%)</title><rect x="20.4378%" y="149" width="5.5347%" height="15" fill="rgb(209,103,24)"/><text x="20.6878%" y="159.50">coheren..</text></g><g><title>associated_item (163,592 samples, 0.10%)</title><rect x="27.1585%" y="85" width="0.1049%" height="15" fill="rgb(229,88,8)"/><text x="27.4085%" y="95.50"></text></g><g><title>associated_items (213,162 samples, 0.14%)</title><rect x="27.1317%" y="101" width="0.1366%" height="15" fill="rgb(213,181,19)"/><text x="27.3817%" y="111.50"></text></g><g><title>evaluate_obligation (572,527 samples, 0.37%)</title><rect x="27.3184%" y="101" width="0.3670%" height="15" fill="rgb(254,191,54)"/><text x="27.5684%" y="111.50"></text></g><g><title>trait_impls_of (275,305 samples, 0.18%)</title><rect x="27.5089%" y="85" width="0.1765%" height="15" fill="rgb(241,83,37)"/><text x="27.7589%" y="95.50"></text></g><g><title>item_bodies_checking (3,310,847 samples, 2.12%)</title><rect x="25.9879%" y="149" width="2.1221%" height="15" fill="rgb(233,36,39)"/><text x="26.2379%" y="159.50">i..</text></g><g><title>typeck_item_bodies (3,309,297 samples, 2.12%)</title><rect x="25.9889%" y="133" width="2.1211%" height="15" fill="rgb(226,3,54)"/><text x="26.2389%" y="143.50">t..</text></g><g><title>typeck (3,302,307 samples, 2.12%)</title><rect x="25.9933%" y="117" width="2.1166%" height="15" fill="rgb(245,192,40)"/><text x="26.2433%" y="127.50">t..</text></g><g><title>impl_trait_ref (197,892 samples, 0.13%)</title><rect x="28.2564%" y="69" width="0.1268%" height="15" fill="rgb(238,167,29)"/><text x="28.5064%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (179,391 samples, 0.11%)</title><rect x="28.2682%" y="53" width="0.1150%" height="15" fill="rgb(232,182,51)"/><text x="28.5182%" y="63.50"></text></g><g><title>adt_destructor (374,514 samples, 0.24%)</title><rect x="28.1681%" y="117" width="0.2400%" height="15" fill="rgb(231,60,39)"/><text x="28.4181%" y="127.50"></text></g><g><title>coherent_trait (370,904 samples, 0.24%)</title><rect x="28.1704%" y="101" width="0.2377%" height="15" fill="rgb(208,69,12)"/><text x="28.4204%" y="111.50"></text></g><g><title>specialization_graph_of (369,424 samples, 0.24%)</title><rect x="28.1713%" y="85" width="0.2368%" height="15" fill="rgb(235,93,37)"/><text x="28.4213%" y="95.50"></text></g><g><title>item_types_checking (488,425 samples, 0.31%)</title><rect x="28.1100%" y="149" width="0.3131%" height="15" fill="rgb(213,116,39)"/><text x="28.3600%" y="159.50"></text></g><g><title>check_mod_item_types (486,005 samples, 0.31%)</title><rect x="28.1115%" y="133" width="0.3115%" height="15" fill="rgb(222,207,29)"/><text x="28.3615%" y="143.50"></text></g><g><title>fn_sig (177,921 samples, 0.11%)</title><rect x="28.4975%" y="117" width="0.1140%" height="15" fill="rgb(206,96,30)"/><text x="28.7475%" y="127.50"></text></g><g><title>named_region_map (171,881 samples, 0.11%)</title><rect x="28.6328%" y="101" width="0.1102%" height="15" fill="rgb(218,138,4)"/><text x="28.8828%" y="111.50"></text></g><g><title>resolve_lifetimes (158,401 samples, 0.10%)</title><rect x="28.6414%" y="85" width="0.1015%" height="15" fill="rgb(250,191,14)"/><text x="28.8914%" y="95.50"></text></g><g><title>generics_of (214,181 samples, 0.14%)</title><rect x="28.6115%" y="117" width="0.1373%" height="15" fill="rgb(239,60,40)"/><text x="28.8615%" y="127.50"></text></g><g><title>type_collecting (764,498 samples, 0.49%)</title><rect x="28.4240%" y="149" width="0.4900%" height="15" fill="rgb(206,27,48)"/><text x="28.6740%" y="159.50"></text></g><g><title>collect_mod_item_types (747,878 samples, 0.48%)</title><rect x="28.4346%" y="133" width="0.4794%" height="15" fill="rgb(225,35,8)"/><text x="28.6846%" y="143.50"></text></g><g><title>check_impl_item_well_formed (333,264 samples, 0.21%)</title><rect x="28.9309%" y="133" width="0.2136%" height="15" fill="rgb(250,213,24)"/><text x="29.1809%" y="143.50"></text></g><g><title>analysis (19,599,218 samples, 12.56%)</title><rect x="16.9859%" y="181" width="12.5622%" height="15" fill="rgb(247,123,22)"/><text x="17.2359%" y="191.50">analysis</text></g><g><title>type_check_crate (14,242,318 samples, 9.13%)</title><rect x="20.4195%" y="165" width="9.1287%" height="15" fill="rgb(231,138,38)"/><text x="20.6695%" y="175.50">type_check_cr..</text></g><g><title>wf_checking (988,921 samples, 0.63%)</title><rect x="28.9143%" y="149" width="0.6339%" height="15" fill="rgb(231,145,46)"/><text x="29.1643%" y="159.50"></text></g><g><title>check_item_well_formed (629,847 samples, 0.40%)</title><rect x="29.1445%" y="133" width="0.4037%" height="15" fill="rgb(251,118,11)"/><text x="29.3945%" y="143.50"></text></g><g><title>is_unpin_raw (186,083 samples, 0.12%)</title><rect x="32.0027%" y="133" width="0.1193%" height="15" fill="rgb(217,147,25)"/><text x="32.2527%" y="143.50"></text></g><g><title>evaluate_obligation (175,253 samples, 0.11%)</title><rect x="32.0097%" y="117" width="0.1123%" height="15" fill="rgb(247,81,37)"/><text x="32.2597%" y="127.50"></text></g><g><title>param_env (160,292 samples, 0.10%)</title><rect x="32.1528%" y="133" width="0.1027%" height="15" fill="rgb(209,12,38)"/><text x="32.4028%" y="143.50"></text></g><g><title>fn_abi_of_instance (807,558 samples, 0.52%)</title><rect x="31.7416%" y="149" width="0.5176%" height="15" fill="rgb(227,1,9)"/><text x="31.9916%" y="159.50"></text></g><g><title>codegen_module (2,784,361 samples, 1.78%)</title><rect x="30.5704%" y="165" width="1.7847%" height="15" fill="rgb(248,47,43)"/><text x="30.8204%" y="175.50">c..</text></g><g><title>mir_drops_elaborated_and_const_checked (294,594 samples, 0.19%)</title><rect x="32.9851%" y="101" width="0.1888%" height="15" fill="rgb(221,10,30)"/><text x="33.2351%" y="111.50"></text></g><g><title>optimized_mir (972,211 samples, 0.62%)</title><rect x="32.5577%" y="117" width="0.6231%" height="15" fill="rgb(210,229,1)"/><text x="32.8077%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (211,482 samples, 0.14%)</title><rect x="33.2250%" y="101" width="0.1356%" height="15" fill="rgb(222,148,37)"/><text x="33.4750%" y="111.50"></text></g><g><title>impl_parent (286,021 samples, 0.18%)</title><rect x="33.7674%" y="85" width="0.1833%" height="15" fill="rgb(234,67,33)"/><text x="34.0174%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (165,971 samples, 0.11%)</title><rect x="33.8443%" y="69" width="0.1064%" height="15" fill="rgb(247,98,35)"/><text x="34.0943%" y="79.50"></text></g><g><title>specialization_graph_of (1,376,374 samples, 0.88%)</title><rect x="33.4097%" y="101" width="0.8822%" height="15" fill="rgb(247,138,52)"/><text x="33.6597%" y="111.50"></text></g><g><title>impl_trait_ref (532,390 samples, 0.34%)</title><rect x="33.9507%" y="85" width="0.3412%" height="15" fill="rgb(213,79,30)"/><text x="34.2007%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (408,908 samples, 0.26%)</title><rect x="34.0299%" y="69" width="0.2621%" height="15" fill="rgb(246,177,23)"/><text x="34.2799%" y="79.50"></text></g><g><title>resolve_instance (1,755,220 samples, 1.13%)</title><rect x="33.1808%" y="117" width="1.1250%" height="15" fill="rgb(230,62,27)"/><text x="33.4308%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (3,123,154 samples, 2.00%)</title><rect x="32.3773%" y="133" width="2.0018%" height="15" fill="rgb(216,154,8)"/><text x="32.6273%" y="143.50">m..</text></g><g><title>monomorphization_collector (3,145,525 samples, 2.02%)</title><rect x="32.3760%" y="149" width="2.0161%" height="15" fill="rgb(244,35,45)"/><text x="32.6260%" y="159.50">m..</text></g><g><title>collect_and_partition_mono_items (3,312,327 samples, 2.12%)</title><rect x="32.3560%" y="165" width="2.1231%" height="15" fill="rgb(251,115,12)"/><text x="32.6060%" y="175.50">c..</text></g><g><title>codegen_crate (7,746,316 samples, 4.97%)</title><rect x="29.5538%" y="181" width="4.9651%" height="15" fill="rgb(240,54,50)"/><text x="29.8038%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (19,979,084 samples, 12.81%)</title><rect x="34.5188%" y="181" width="12.8057%" height="15" fill="rgb(233,84,52)"/><text x="34.7688%" y="191.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (17,776,089 samples, 11.39%)</title><rect x="35.9309%" y="165" width="11.3937%" height="15" fill="rgb(207,117,47)"/><text x="36.1809%" y="175.50">LLVM_module_optim..</text></g><g><title>LLVM_lto_optimize (9,281,153 samples, 5.95%)</title><rect x="48.3694%" y="165" width="5.9488%" height="15" fill="rgb(249,43,39)"/><text x="48.6194%" y="175.50">LLVM_lto..</text></g><g><title>LLVM_module_codegen (22,510,283 samples, 14.43%)</title><rect x="54.3182%" y="165" width="14.4281%" height="15" fill="rgb(209,38,44)"/><text x="54.5682%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (22,144,998 samples, 14.19%)</title><rect x="54.5524%" y="149" width="14.1940%" height="15" fill="rgb(236,212,23)"/><text x="54.8024%" y="159.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (246,583 samples, 0.16%)</title><rect x="68.7463%" y="165" width="0.1580%" height="15" fill="rgb(242,79,21)"/><text x="68.9963%" y="175.50"></text></g><g><title>codegen_module_perform_lto (33,756,877 samples, 21.64%)</title><rect x="47.3246%" y="181" width="21.6367%" height="15" fill="rgb(211,96,35)"/><text x="47.5746%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,385,796 samples, 1.53%)</title><rect x="80.2002%" y="133" width="1.5292%" height="15" fill="rgb(253,215,40)"/><text x="80.4502%" y="143.50"></text></g><g><title>metadata_register_crate (841,130 samples, 0.54%)</title><rect x="81.1903%" y="117" width="0.5391%" height="15" fill="rgb(211,81,21)"/><text x="81.4403%" y="127.50"></text></g><g><title>macro_expand_crate (19,617,999 samples, 12.57%)</title><rect x="69.1961%" y="165" width="12.5743%" height="15" fill="rgb(208,190,38)"/><text x="69.4461%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (19,595,639 samples, 12.56%)</title><rect x="69.2105%" y="149" width="12.5599%" height="15" fill="rgb(235,213,38)"/><text x="69.4605%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (1,020,191 samples, 0.65%)</title><rect x="81.8775%" y="149" width="0.6539%" height="15" fill="rgb(237,122,38)"/><text x="82.1275%" y="159.50"></text></g><g><title>configure_and_expand (21,227,937 samples, 13.61%)</title><rect x="68.9612%" y="181" width="13.6062%" height="15" fill="rgb(244,218,35)"/><text x="69.2112%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,184,513 samples, 0.76%)</title><rect x="81.8082%" y="165" width="0.7592%" height="15" fill="rgb(240,68,47)"/><text x="82.0582%" y="175.50"></text></g><g><title>free_global_ctxt (4,108,366 samples, 2.63%)</title><rect x="82.7124%" y="181" width="2.6333%" height="15" fill="rgb(210,16,53)"/><text x="82.9624%" y="191.50">fr..</text></g><g><title>generate_crate_metadata (781,829 samples, 0.50%)</title><rect x="85.3457%" y="181" width="0.5011%" height="15" fill="rgb(235,124,12)"/><text x="85.5957%" y="191.50"></text></g><g><title>hir_lowering (761,809 samples, 0.49%)</title><rect x="85.8468%" y="181" width="0.4883%" height="15" fill="rgb(224,169,11)"/><text x="86.0968%" y="191.50"></text></g><g><title>finish_ongoing_codegen (18,000,060 samples, 11.54%)</title><rect x="86.3489%" y="165" width="11.5373%" height="15" fill="rgb(250,166,2)"/><text x="86.5989%" y="175.50">finish_ongoing_co..</text></g><g><title>join_worker_thread (351,944 samples, 0.23%)</title><rect x="97.6606%" y="149" width="0.2256%" height="15" fill="rgb(242,216,29)"/><text x="97.9106%" y="159.50"></text></g><g><title>link_crate (1,163,202 samples, 0.75%)</title><rect x="97.8862%" y="165" width="0.7456%" height="15" fill="rgb(230,116,27)"/><text x="98.1362%" y="175.50"></text></g><g><title>link_binary (1,147,042 samples, 0.74%)</title><rect x="97.8965%" y="149" width="0.7352%" height="15" fill="rgb(228,99,48)"/><text x="98.1465%" y="159.50"></text></g><g><title>link_rlib (657,887 samples, 0.42%)</title><rect x="98.2100%" y="133" width="0.4217%" height="15" fill="rgb(253,11,6)"/><text x="98.4600%" y="143.50"></text></g><g><title>link (19,197,623 samples, 12.30%)</title><rect x="86.3351%" y="181" width="12.3048%" height="15" fill="rgb(247,143,39)"/><text x="86.5851%" y="191.50">link</text></g><g><title>parse_crate (457,595 samples, 0.29%)</title><rect x="98.6399%" y="181" width="0.2933%" height="15" fill="rgb(236,97,10)"/><text x="98.8899%" y="191.50"></text></g><g><title>prepare_outputs (342,574 samples, 0.22%)</title><rect x="98.9385%" y="181" width="0.2196%" height="15" fill="rgb(233,208,19)"/><text x="99.1885%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (913,190 samples, 0.59%)</title><rect x="99.1581%" y="181" width="0.5853%" height="15" fill="rgb(216,164,2)"/><text x="99.4081%" y="191.50"></text></g><g><title>all (156,016,861 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (156,016,861 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (273,353 samples, 0.18%)</title><rect x="99.8248%" y="181" width="0.1752%" height="15" fill="rgb(242,107,0)"/><text x="100.0748%" y="191.50"></text></g></svg></svg>