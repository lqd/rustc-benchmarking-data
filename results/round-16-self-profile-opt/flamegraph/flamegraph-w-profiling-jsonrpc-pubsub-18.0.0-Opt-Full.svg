<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (492,801,484 samples, 10.57%)</title><rect x="0.0151%" y="197" width="10.5671%" height="15" fill="rgb(227,0,7)"/><text x="0.2651%" y="207.50">LLVM_passes</text></g><g><title>mir_const (17,923,006 samples, 0.38%)</title><rect x="11.2328%" y="133" width="0.3843%" height="15" fill="rgb(217,0,24)"/><text x="11.4828%" y="143.50"></text></g><g><title>unsafety_check_result (15,741,065 samples, 0.34%)</title><rect x="11.2796%" y="117" width="0.3375%" height="15" fill="rgb(221,193,54)"/><text x="11.5296%" y="127.50"></text></g><g><title>mir_built (14,234,005 samples, 0.31%)</title><rect x="11.3119%" y="101" width="0.3052%" height="15" fill="rgb(248,212,6)"/><text x="11.5619%" y="111.50"></text></g><g><title>mir_promoted (19,930,881 samples, 0.43%)</title><rect x="11.1995%" y="149" width="0.4274%" height="15" fill="rgb(208,68,35)"/><text x="11.4495%" y="159.50"></text></g><g><title>type_op_prove_predicate (14,281,260 samples, 0.31%)</title><rect x="11.7375%" y="149" width="0.3062%" height="15" fill="rgb(232,128,0)"/><text x="11.9875%" y="159.50"></text></g><g><title>MIR_borrow_checking (67,667,342 samples, 1.45%)</title><rect x="10.5931%" y="181" width="1.4510%" height="15" fill="rgb(207,160,47)"/><text x="10.8431%" y="191.50"></text></g><g><title>mir_borrowck (67,179,838 samples, 1.44%)</title><rect x="10.6035%" y="165" width="1.4405%" height="15" fill="rgb(228,23,34)"/><text x="10.8535%" y="175.50"></text></g><g><title>crate_lints (4,723,504 samples, 0.10%)</title><rect x="12.1865%" y="149" width="0.1013%" height="15" fill="rgb(218,30,26)"/><text x="12.4365%" y="159.50"></text></g><g><title>lint_checking (5,731,105 samples, 0.12%)</title><rect x="12.1865%" y="165" width="0.1229%" height="15" fill="rgb(220,122,19)"/><text x="12.4365%" y="175.50"></text></g><g><title>misc_checking_3 (10,196,686 samples, 0.22%)</title><rect x="12.1553%" y="181" width="0.2186%" height="15" fill="rgb(250,228,42)"/><text x="12.4053%" y="191.50"></text></g><g><title>impl_trait_ref (7,760,716 samples, 0.17%)</title><rect x="12.6107%" y="117" width="0.1664%" height="15" fill="rgb(240,193,28)"/><text x="12.8607%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,074,285 samples, 0.13%)</title><rect x="12.6468%" y="101" width="0.1302%" height="15" fill="rgb(216,20,37)"/><text x="12.8968%" y="111.50"></text></g><g><title>coherent_trait (20,387,310 samples, 0.44%)</title><rect x="12.3781%" y="149" width="0.4372%" height="15" fill="rgb(206,188,39)"/><text x="12.6281%" y="159.50"></text></g><g><title>specialization_graph_of (19,793,193 samples, 0.42%)</title><rect x="12.3908%" y="133" width="0.4244%" height="15" fill="rgb(217,207,13)"/><text x="12.6408%" y="143.50"></text></g><g><title>coherence_checking (20,596,422 samples, 0.44%)</title><rect x="12.3774%" y="165" width="0.4416%" height="15" fill="rgb(231,73,38)"/><text x="12.6274%" y="175.50"></text></g><g><title>evaluate_obligation (5,709,403 samples, 0.12%)</title><rect x="14.2661%" y="101" width="0.1224%" height="15" fill="rgb(225,20,46)"/><text x="14.5161%" y="111.50"></text></g><g><title>typeck (34,313,988 samples, 0.74%)</title><rect x="13.7178%" y="117" width="0.7358%" height="15" fill="rgb(210,31,41)"/><text x="13.9678%" y="127.50"></text></g><g><title>item_bodies_checking (76,241,880 samples, 1.63%)</title><rect x="12.8205%" y="165" width="1.6348%" height="15" fill="rgb(221,200,47)"/><text x="13.0705%" y="175.50"></text></g><g><title>typeck_item_bodies (76,237,440 samples, 1.63%)</title><rect x="12.8206%" y="149" width="1.6347%" height="15" fill="rgb(226,26,5)"/><text x="13.0706%" y="159.50"></text></g><g><title>typeck (76,070,837 samples, 1.63%)</title><rect x="12.8242%" y="133" width="1.6312%" height="15" fill="rgb(249,33,26)"/><text x="13.0742%" y="143.50"></text></g><g><title>mir_built (10,076,023 samples, 0.22%)</title><rect x="14.6418%" y="53" width="0.2161%" height="15" fill="rgb(235,183,28)"/><text x="14.8918%" y="63.50"></text></g><g><title>typeck (8,645,587 samples, 0.19%)</title><rect x="14.6725%" y="37" width="0.1854%" height="15" fill="rgb(221,5,38)"/><text x="14.9225%" y="47.50"></text></g><g><title>mir_const (11,209,356 samples, 0.24%)</title><rect x="14.6325%" y="85" width="0.2404%" height="15" fill="rgb(247,18,42)"/><text x="14.8825%" y="95.50"></text></g><g><title>unsafety_check_result (10,890,313 samples, 0.23%)</title><rect x="14.6394%" y="69" width="0.2335%" height="15" fill="rgb(241,131,45)"/><text x="14.8894%" y="79.50"></text></g><g><title>mir_promoted (11,349,677 samples, 0.24%)</title><rect x="14.6298%" y="101" width="0.2434%" height="15" fill="rgb(249,31,29)"/><text x="14.8798%" y="111.50"></text></g><g><title>type_of (16,125,720 samples, 0.35%)</title><rect x="14.5410%" y="133" width="0.3458%" height="15" fill="rgb(225,111,53)"/><text x="14.7910%" y="143.50"></text></g><g><title>mir_borrowck (16,091,620 samples, 0.35%)</title><rect x="14.5418%" y="117" width="0.3451%" height="15" fill="rgb(238,160,17)"/><text x="14.7918%" y="127.50"></text></g><g><title>item_types_checking (21,353,990 samples, 0.46%)</title><rect x="14.4553%" y="165" width="0.4579%" height="15" fill="rgb(214,148,48)"/><text x="14.7053%" y="175.50"></text></g><g><title>check_mod_item_types (21,341,580 samples, 0.46%)</title><rect x="14.4556%" y="149" width="0.4576%" height="15" fill="rgb(232,36,49)"/><text x="14.7056%" y="159.50"></text></g><g><title>type_collecting (4,778,303 samples, 0.10%)</title><rect x="14.9134%" y="165" width="0.1025%" height="15" fill="rgb(209,103,24)"/><text x="15.1634%" y="175.50"></text></g><g><title>collect_mod_item_types (4,755,473 samples, 0.10%)</title><rect x="14.9139%" y="149" width="0.1020%" height="15" fill="rgb(229,88,8)"/><text x="15.1639%" y="159.50"></text></g><g><title>check_impl_item_well_formed (9,610,651 samples, 0.21%)</title><rect x="15.0257%" y="149" width="0.2061%" height="15" fill="rgb(213,181,19)"/><text x="15.2757%" y="159.50"></text></g><g><title>check_item_well_formed (7,842,506 samples, 0.17%)</title><rect x="15.2318%" y="149" width="0.1682%" height="15" fill="rgb(254,191,54)"/><text x="15.4818%" y="159.50"></text></g><g><title>analysis (225,198,638 samples, 4.83%)</title><rect x="10.5821%" y="197" width="4.8289%" height="15" fill="rgb(241,83,37)"/><text x="10.8321%" y="207.50">analys..</text></g><g><title>type_check_crate (141,634,665 samples, 3.04%)</title><rect x="12.3740%" y="181" width="3.0371%" height="15" fill="rgb(233,36,39)"/><text x="12.6240%" y="191.50">typ..</text></g><g><title>wf_checking (18,418,738 samples, 0.39%)</title><rect x="15.0161%" y="165" width="0.3950%" height="15" fill="rgb(226,3,54)"/><text x="15.2661%" y="175.50"></text></g><g><title>is_freeze_raw (5,536,062 samples, 0.12%)</title><rect x="19.2595%" y="149" width="0.1187%" height="15" fill="rgb(245,192,40)"/><text x="19.5095%" y="159.50"></text></g><g><title>evaluate_obligation (4,810,954 samples, 0.10%)</title><rect x="19.2750%" y="133" width="0.1032%" height="15" fill="rgb(238,167,29)"/><text x="19.5250%" y="143.50"></text></g><g><title>is_unpin_raw (4,978,154 samples, 0.11%)</title><rect x="19.3782%" y="149" width="0.1067%" height="15" fill="rgb(232,182,51)"/><text x="19.6282%" y="159.50"></text></g><g><title>layout_of (5,983,248 samples, 0.13%)</title><rect x="19.4849%" y="149" width="0.1283%" height="15" fill="rgb(231,60,39)"/><text x="19.7349%" y="159.50"></text></g><g><title>predicates_of (4,909,120 samples, 0.11%)</title><rect x="19.8029%" y="133" width="0.1053%" height="15" fill="rgb(208,69,12)"/><text x="20.0529%" y="143.50"></text></g><g><title>param_env (13,791,513 samples, 0.30%)</title><rect x="19.6132%" y="149" width="0.2957%" height="15" fill="rgb(235,93,37)"/><text x="19.8632%" y="159.50"></text></g><g><title>fn_abi_of_instance (50,467,132 samples, 1.08%)</title><rect x="18.9112%" y="165" width="1.0822%" height="15" fill="rgb(213,116,39)"/><text x="19.1612%" y="175.50"></text></g><g><title>layout_of (5,596,010 samples, 0.12%)</title><rect x="20.0256%" y="165" width="0.1200%" height="15" fill="rgb(222,207,29)"/><text x="20.2756%" y="175.50"></text></g><g><title>codegen_module (220,563,485 samples, 4.73%)</title><rect x="15.4602%" y="181" width="4.7295%" height="15" fill="rgb(206,96,30)"/><text x="15.7102%" y="191.50">codege..</text></g><g><title>codegen_fn_attrs (7,058,178 samples, 0.15%)</title><rect x="20.4436%" y="133" width="0.1513%" height="15" fill="rgb(218,138,4)"/><text x="20.6936%" y="143.50"></text></g><g><title>mir_shims (5,163,097 samples, 0.11%)</title><rect x="20.6241%" y="133" width="0.1107%" height="15" fill="rgb(250,191,14)"/><text x="20.8741%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (9,640,667 samples, 0.21%)</title><rect x="20.8088%" y="117" width="0.2067%" height="15" fill="rgb(239,60,40)"/><text x="21.0588%" y="127.50"></text></g><g><title>optimized_mir (15,876,196 samples, 0.34%)</title><rect x="20.7348%" y="133" width="0.3404%" height="15" fill="rgb(206,27,48)"/><text x="20.9848%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (14,337,658 samples, 0.31%)</title><rect x="21.1830%" y="117" width="0.3074%" height="15" fill="rgb(225,35,8)"/><text x="21.4330%" y="127.50"></text></g><g><title>resolve_instance (28,470,126 samples, 0.61%)</title><rect x="21.0752%" y="133" width="0.6105%" height="15" fill="rgb(250,213,24)"/><text x="21.3252%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (77,247,541 samples, 1.66%)</title><rect x="20.1919%" y="149" width="1.6564%" height="15" fill="rgb(247,123,22)"/><text x="20.4419%" y="159.50"></text></g><g><title>monomorphization_collector (77,342,362 samples, 1.66%)</title><rect x="20.1918%" y="165" width="1.6584%" height="15" fill="rgb(231,138,38)"/><text x="20.4418%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (10,522,029 samples, 0.23%)</title><rect x="21.8506%" y="149" width="0.2256%" height="15" fill="rgb(231,145,46)"/><text x="22.1006%" y="159.50"></text></g><g><title>symbol_name (9,407,346 samples, 0.20%)</title><rect x="21.8745%" y="133" width="0.2017%" height="15" fill="rgb(251,118,11)"/><text x="22.1245%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (91,660,433 samples, 1.97%)</title><rect x="20.1899%" y="181" width="1.9655%" height="15" fill="rgb(217,147,25)"/><text x="20.4399%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (14,229,181 samples, 0.31%)</title><rect x="21.8503%" y="165" width="0.3051%" height="15" fill="rgb(247,81,37)"/><text x="22.1003%" y="175.50"></text></g><g><title>codegen_crate (314,665,666 samples, 6.75%)</title><rect x="15.4112%" y="197" width="6.7473%" height="15" fill="rgb(209,12,38)"/><text x="15.6612%" y="207.50">codegen_c..</text></g><g><title>codegen_module_optimize (1,522,972,121 samples, 32.66%)</title><rect x="22.1585%" y="197" width="32.6569%" height="15" fill="rgb(227,1,9)"/><text x="22.4085%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,475,809,951 samples, 31.65%)</title><rect x="23.1698%" y="181" width="31.6456%" height="15" fill="rgb(248,47,43)"/><text x="23.4198%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (877,891,609 samples, 18.82%)</title><rect x="55.4674%" y="181" width="18.8245%" height="15" fill="rgb(221,10,30)"/><text x="55.7174%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (628,709,849 samples, 13.48%)</title><rect x="74.2919%" y="181" width="13.4813%" height="15" fill="rgb(210,229,1)"/><text x="74.5419%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (622,960,779 samples, 13.36%)</title><rect x="74.4152%" y="165" width="13.3581%" height="15" fill="rgb(222,148,37)"/><text x="74.6652%" y="175.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (200,335,109 samples, 4.30%)</title><rect x="87.7733%" y="181" width="4.2958%" height="15" fill="rgb(234,67,33)"/><text x="88.0233%" y="191.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (1,739,968,147 samples, 37.31%)</title><rect x="54.8154%" y="197" width="37.3099%" height="15" fill="rgb(247,98,35)"/><text x="55.0654%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (9,883,221 samples, 0.21%)</title><rect x="92.5805%" y="149" width="0.2119%" height="15" fill="rgb(247,138,52)"/><text x="92.8305%" y="159.50"></text></g><g><title>metadata_register_crate (8,128,637 samples, 0.17%)</title><rect x="92.6182%" y="133" width="0.1743%" height="15" fill="rgb(213,79,30)"/><text x="92.8682%" y="143.50"></text></g><g><title>macro_expand_crate (30,917,069 samples, 0.66%)</title><rect x="92.1364%" y="181" width="0.6629%" height="15" fill="rgb(246,177,23)"/><text x="92.3864%" y="191.50"></text></g><g><title>expand_crate (30,897,399 samples, 0.66%)</title><rect x="92.1368%" y="165" width="0.6625%" height="15" fill="rgb(230,62,27)"/><text x="92.3868%" y="175.50"></text></g><g><title>configure_and_expand (36,155,858 samples, 0.78%)</title><rect x="92.1252%" y="197" width="0.7753%" height="15" fill="rgb(216,154,8)"/><text x="92.3752%" y="207.50"></text></g><g><title>free_global_ctxt (20,517,732 samples, 0.44%)</title><rect x="92.9211%" y="197" width="0.4400%" height="15" fill="rgb(244,35,45)"/><text x="93.1711%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,415,902 samples, 0.20%)</title><rect x="93.6515%" y="165" width="0.2019%" height="15" fill="rgb(251,115,12)"/><text x="93.9015%" y="175.50"></text></g><g><title>optimized_mir (18,749,825 samples, 0.40%)</title><rect x="93.4529%" y="181" width="0.4020%" height="15" fill="rgb(240,54,50)"/><text x="93.7029%" y="191.50"></text></g><g><title>generate_crate_metadata (23,282,042 samples, 0.50%)</title><rect x="93.3610%" y="197" width="0.4992%" height="15" fill="rgb(233,84,52)"/><text x="93.6110%" y="207.50"></text></g><g><title>hir_lowering (5,414,301 samples, 0.12%)</title><rect x="93.8602%" y="197" width="0.1161%" height="15" fill="rgb(207,117,47)"/><text x="94.1102%" y="207.50"></text></g><g><title>finish_ongoing_codegen (273,746,925 samples, 5.87%)</title><rect x="93.9767%" y="181" width="5.8699%" height="15" fill="rgb(249,43,39)"/><text x="94.2267%" y="191.50">finish_..</text></g><g><title>link (276,150,262 samples, 5.92%)</title><rect x="93.9763%" y="197" width="5.9214%" height="15" fill="rgb(209,38,44)"/><text x="94.2263%" y="207.50">link</text></g><g><title>all (4,663,560,094 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (4,663,560,094 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>