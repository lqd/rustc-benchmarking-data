<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (294,285,859 samples, 16.93%)</title><rect x="0.1468%" y="181" width="16.9294%" height="15" fill="rgb(227,0,7)"/><text x="0.3968%" y="191.50">LLVM_passes</text></g><g><title>resolve_instance (2,177,183 samples, 0.13%)</title><rect x="25.8242%" y="69" width="0.1252%" height="15" fill="rgb(217,0,24)"/><text x="26.0742%" y="79.50"></text></g><g><title>thir_body (8,620,041 samples, 0.50%)</title><rect x="25.9644%" y="69" width="0.4959%" height="15" fill="rgb(221,193,54)"/><text x="26.2144%" y="79.50"></text></g><g><title>mir_const (46,955,320 samples, 2.70%)</title><rect x="23.7710%" y="117" width="2.7012%" height="15" fill="rgb(248,212,6)"/><text x="24.0210%" y="127.50">mi..</text></g><g><title>unsafety_check_result (39,782,408 samples, 2.29%)</title><rect x="24.1837%" y="101" width="2.2886%" height="15" fill="rgb(208,68,35)"/><text x="24.4337%" y="111.50">u..</text></g><g><title>mir_built (36,367,332 samples, 2.09%)</title><rect x="24.3801%" y="85" width="2.0921%" height="15" fill="rgb(232,128,0)"/><text x="24.6301%" y="95.50">m..</text></g><g><title>thir_body (2,185,982 samples, 0.13%)</title><rect x="27.3455%" y="53" width="0.1258%" height="15" fill="rgb(207,160,47)"/><text x="27.5955%" y="63.50"></text></g><g><title>mir_const (13,107,427 samples, 0.75%)</title><rect x="26.7227%" y="101" width="0.7540%" height="15" fill="rgb(228,23,34)"/><text x="26.9727%" y="111.50"></text></g><g><title>unsafety_check_result (10,357,847 samples, 0.60%)</title><rect x="26.8809%" y="85" width="0.5959%" height="15" fill="rgb(218,30,26)"/><text x="27.1309%" y="95.50"></text></g><g><title>mir_built (9,252,606 samples, 0.53%)</title><rect x="26.9445%" y="69" width="0.5323%" height="15" fill="rgb(220,122,19)"/><text x="27.1945%" y="79.50"></text></g><g><title>mir_promoted (73,458,279 samples, 4.23%)</title><rect x="23.2759%" y="133" width="4.2258%" height="15" fill="rgb(250,228,42)"/><text x="23.5259%" y="143.50">mir_p..</text></g><g><title>mir_const_qualif (17,895,100 samples, 1.03%)</title><rect x="26.4722%" y="117" width="1.0294%" height="15" fill="rgb(240,193,28)"/><text x="26.7222%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,283,579 samples, 0.19%)</title><rect x="27.6299%" y="133" width="0.1889%" height="15" fill="rgb(216,20,37)"/><text x="27.8799%" y="143.50"></text></g><g><title>MIR_borrow_checking (184,263,577 samples, 10.60%)</title><rect x="17.2189%" y="165" width="10.6001%" height="15" fill="rgb(206,188,39)"/><text x="17.4689%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (182,211,252 samples, 10.48%)</title><rect x="17.3369%" y="149" width="10.4820%" height="15" fill="rgb(217,207,13)"/><text x="17.5869%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (7,480,714 samples, 0.43%)</title><rect x="27.8190%" y="165" width="0.4303%" height="15" fill="rgb(231,73,38)"/><text x="28.0690%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,366,200 samples, 0.37%)</title><rect x="27.8831%" y="149" width="0.3662%" height="15" fill="rgb(225,20,46)"/><text x="28.1331%" y="159.50"></text></g><g><title>hir_module_items (2,066,903 samples, 0.12%)</title><rect x="28.2493%" y="165" width="0.1189%" height="15" fill="rgb(210,31,41)"/><text x="28.4993%" y="175.50"></text></g><g><title>codegen_fn_attrs (2,771,647 samples, 0.16%)</title><rect x="28.5450%" y="133" width="0.1594%" height="15" fill="rgb(221,200,47)"/><text x="28.7950%" y="143.50"></text></g><g><title>check_mod_attrs (5,822,294 samples, 0.33%)</title><rect x="28.3695%" y="149" width="0.3349%" height="15" fill="rgb(226,26,5)"/><text x="28.6195%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (4,048,015 samples, 0.23%)</title><rect x="28.8337%" y="149" width="0.2329%" height="15" fill="rgb(249,33,26)"/><text x="29.0837%" y="159.50"></text></g><g><title>misc_checking_1 (12,467,879 samples, 0.72%)</title><rect x="28.3683%" y="165" width="0.7172%" height="15" fill="rgb(235,183,28)"/><text x="28.6183%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,742,392 samples, 0.22%)</title><rect x="29.0857%" y="149" width="0.2153%" height="15" fill="rgb(221,5,38)"/><text x="29.3357%" y="159.50"></text></g><g><title>check_mod_liveness (2,799,412 samples, 0.16%)</title><rect x="29.1399%" y="133" width="0.1610%" height="15" fill="rgb(247,18,42)"/><text x="29.3899%" y="143.50"></text></g><g><title>misc_checking_2 (10,052,381 samples, 0.58%)</title><rect x="29.0855%" y="165" width="0.5783%" height="15" fill="rgb(241,131,45)"/><text x="29.3355%" y="175.50"></text></g><g><title>match_checking (6,307,909 samples, 0.36%)</title><rect x="29.3009%" y="149" width="0.3629%" height="15" fill="rgb(249,31,29)"/><text x="29.5509%" y="159.50"></text></g><g><title>check_match (5,776,606 samples, 0.33%)</title><rect x="29.3315%" y="133" width="0.3323%" height="15" fill="rgb(225,111,53)"/><text x="29.5815%" y="143.50"></text></g><g><title>check_private_in_public (2,236,054 samples, 0.13%)</title><rect x="29.6648%" y="149" width="0.1286%" height="15" fill="rgb(238,160,17)"/><text x="29.9148%" y="159.50"></text></g><g><title>death_checking (4,248,628 samples, 0.24%)</title><rect x="29.7935%" y="149" width="0.2444%" height="15" fill="rgb(214,148,48)"/><text x="30.0435%" y="159.50"></text></g><g><title>crate_lints (4,988,655 samples, 0.29%)</title><rect x="30.0381%" y="133" width="0.2870%" height="15" fill="rgb(232,36,49)"/><text x="30.2881%" y="143.50"></text></g><g><title>lint_checking (9,703,888 samples, 0.56%)</title><rect x="30.0379%" y="149" width="0.5582%" height="15" fill="rgb(209,103,24)"/><text x="30.2879%" y="159.50"></text></g><g><title>module_lints (4,711,903 samples, 0.27%)</title><rect x="30.3251%" y="133" width="0.2711%" height="15" fill="rgb(229,88,8)"/><text x="30.5751%" y="143.50"></text></g><g><title>lint_mod (4,706,853 samples, 0.27%)</title><rect x="30.3254%" y="117" width="0.2708%" height="15" fill="rgb(213,181,19)"/><text x="30.5754%" y="127.50"></text></g><g><title>privacy_access_levels (3,701,691 samples, 0.21%)</title><rect x="30.5961%" y="149" width="0.2129%" height="15" fill="rgb(254,191,54)"/><text x="30.8461%" y="159.50"></text></g><g><title>privacy_checking_modules (7,912,367 samples, 0.46%)</title><rect x="30.8091%" y="149" width="0.4552%" height="15" fill="rgb(241,83,37)"/><text x="31.0591%" y="159.50"></text></g><g><title>check_mod_privacy (7,908,067 samples, 0.45%)</title><rect x="30.8093%" y="133" width="0.4549%" height="15" fill="rgb(233,36,39)"/><text x="31.0593%" y="143.50"></text></g><g><title>misc_checking_3 (27,970,220 samples, 1.61%)</title><rect x="29.6638%" y="165" width="1.6090%" height="15" fill="rgb(226,3,54)"/><text x="29.9138%" y="175.50"></text></g><g><title>impl_trait_ref (2,838,383 samples, 0.16%)</title><rect x="31.6125%" y="101" width="0.1633%" height="15" fill="rgb(245,192,40)"/><text x="31.8625%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,952,403 samples, 0.11%)</title><rect x="31.6635%" y="85" width="0.1123%" height="15" fill="rgb(238,167,29)"/><text x="31.9135%" y="95.50"></text></g><g><title>coherent_trait (8,477,134 samples, 0.49%)</title><rect x="31.3212%" y="133" width="0.4877%" height="15" fill="rgb(232,182,51)"/><text x="31.5712%" y="143.50"></text></g><g><title>specialization_graph_of (7,650,005 samples, 0.44%)</title><rect x="31.3688%" y="117" width="0.4401%" height="15" fill="rgb(231,60,39)"/><text x="31.6188%" y="127.50"></text></g><g><title>coherence_checking (9,150,181 samples, 0.53%)</title><rect x="31.3189%" y="149" width="0.5264%" height="15" fill="rgb(208,69,12)"/><text x="31.5689%" y="159.50"></text></g><g><title>evaluate_obligation (4,490,263 samples, 0.26%)</title><rect x="41.6429%" y="101" width="0.2583%" height="15" fill="rgb(235,93,37)"/><text x="41.8929%" y="111.50"></text></g><g><title>item_bodies_checking (176,895,615 samples, 10.18%)</title><rect x="31.8750%" y="149" width="10.1763%" height="15" fill="rgb(213,116,39)"/><text x="32.1250%" y="159.50">item_bodies_che..</text></g><g><title>typeck_item_bodies (176,891,815 samples, 10.18%)</title><rect x="31.8752%" y="133" width="10.1760%" height="15" fill="rgb(222,207,29)"/><text x="32.1252%" y="143.50">typeck_item_bod..</text></g><g><title>typeck (175,499,674 samples, 10.10%)</title><rect x="31.9553%" y="117" width="10.0960%" height="15" fill="rgb(206,96,30)"/><text x="32.2053%" y="127.50">typeck</text></g><g><title>item_types_checking (13,287,157 samples, 0.76%)</title><rect x="42.0512%" y="149" width="0.7644%" height="15" fill="rgb(218,138,4)"/><text x="42.3012%" y="159.50"></text></g><g><title>check_mod_item_types (13,282,947 samples, 0.76%)</title><rect x="42.0515%" y="133" width="0.7641%" height="15" fill="rgb(250,191,14)"/><text x="42.3015%" y="143.50"></text></g><g><title>mir_const_qualif (3,330,213 samples, 0.19%)</title><rect x="43.2409%" y="69" width="0.1916%" height="15" fill="rgb(239,60,40)"/><text x="43.4909%" y="79.50"></text></g><g><title>mir_const (2,788,220 samples, 0.16%)</title><rect x="43.2720%" y="53" width="0.1604%" height="15" fill="rgb(206,27,48)"/><text x="43.5220%" y="63.50"></text></g><g><title>unsafety_check_result (1,913,240 samples, 0.11%)</title><rect x="43.3224%" y="37" width="0.1101%" height="15" fill="rgb(225,35,8)"/><text x="43.5724%" y="47.50"></text></g><g><title>mir_borrowck (6,937,999 samples, 0.40%)</title><rect x="43.6509%" y="37" width="0.3991%" height="15" fill="rgb(250,213,24)"/><text x="43.9009%" y="47.50"></text></g><g><title>mir_for_ctfe (10,788,633 samples, 0.62%)</title><rect x="43.4324%" y="69" width="0.6206%" height="15" fill="rgb(247,123,22)"/><text x="43.6824%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,864,035 samples, 0.57%)</title><rect x="43.4856%" y="53" width="0.5674%" height="15" fill="rgb(231,138,38)"/><text x="43.7356%" y="63.50"></text></g><g><title>eval_to_const_value_raw (21,227,153 samples, 1.22%)</title><rect x="43.0697%" y="117" width="1.2211%" height="15" fill="rgb(231,145,46)"/><text x="43.3197%" y="127.50"></text></g><g><title>eval_to_const_value_raw (21,082,949 samples, 1.21%)</title><rect x="43.0780%" y="101" width="1.2128%" height="15" fill="rgb(251,118,11)"/><text x="43.3280%" y="111.50"></text></g><g><title>eval_to_allocation_raw (20,806,777 samples, 1.20%)</title><rect x="43.0939%" y="85" width="1.1969%" height="15" fill="rgb(217,147,25)"/><text x="43.3439%" y="95.50"></text></g><g><title>typeck (4,103,453 samples, 0.24%)</title><rect x="44.0547%" y="69" width="0.2361%" height="15" fill="rgb(247,81,37)"/><text x="44.3047%" y="79.50"></text></g><g><title>fn_sig (3,307,716 samples, 0.19%)</title><rect x="44.2908%" y="117" width="0.1903%" height="15" fill="rgb(209,12,38)"/><text x="44.5408%" y="127.50"></text></g><g><title>named_region_map (6,254,476 samples, 0.36%)</title><rect x="44.5712%" y="101" width="0.3598%" height="15" fill="rgb(227,1,9)"/><text x="44.8212%" y="111.50"></text></g><g><title>resolve_lifetimes (5,958,423 samples, 0.34%)</title><rect x="44.5883%" y="85" width="0.3428%" height="15" fill="rgb(248,47,43)"/><text x="44.8383%" y="95.50"></text></g><g><title>lint_levels (3,103,284 samples, 0.18%)</title><rect x="44.7525%" y="69" width="0.1785%" height="15" fill="rgb(221,10,30)"/><text x="45.0025%" y="79.50"></text></g><g><title>generics_of (8,001,502 samples, 0.46%)</title><rect x="44.4811%" y="117" width="0.4603%" height="15" fill="rgb(210,229,1)"/><text x="44.7311%" y="127.50"></text></g><g><title>predicates_of (3,977,647 samples, 0.23%)</title><rect x="45.0546%" y="117" width="0.2288%" height="15" fill="rgb(222,148,37)"/><text x="45.3046%" y="127.50"></text></g><g><title>predicates_defined_on (3,142,817 samples, 0.18%)</title><rect x="45.1027%" y="101" width="0.1808%" height="15" fill="rgb(234,67,33)"/><text x="45.3527%" y="111.50"></text></g><g><title>type_collecting (43,726,985 samples, 2.52%)</title><rect x="42.8156%" y="149" width="2.5155%" height="15" fill="rgb(247,98,35)"/><text x="43.0656%" y="159.50">ty..</text></g><g><title>collect_mod_item_types (43,722,345 samples, 2.52%)</title><rect x="42.8159%" y="133" width="2.5152%" height="15" fill="rgb(247,138,52)"/><text x="43.0659%" y="143.50">co..</text></g><g><title>evaluate_obligation (2,463,546 samples, 0.14%)</title><rect x="46.5826%" y="117" width="0.1417%" height="15" fill="rgb(213,79,30)"/><text x="46.8326%" y="127.50"></text></g><g><title>param_env (3,606,731 samples, 0.21%)</title><rect x="46.7732%" y="117" width="0.2075%" height="15" fill="rgb(246,177,23)"/><text x="47.0232%" y="127.50"></text></g><g><title>region_scope_tree (4,588,544 samples, 0.26%)</title><rect x="46.9834%" y="117" width="0.2640%" height="15" fill="rgb(230,62,27)"/><text x="47.2334%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,943,251 samples, 1.78%)</title><rect x="45.4695%" y="133" width="1.7801%" height="15" fill="rgb(216,154,8)"/><text x="45.7195%" y="143.50">c..</text></g><g><title>evaluate_obligation (4,684,771 samples, 0.27%)</title><rect x="47.9024%" y="117" width="0.2695%" height="15" fill="rgb(244,35,45)"/><text x="48.1524%" y="127.50"></text></g><g><title>param_env (2,687,046 samples, 0.15%)</title><rect x="48.1988%" y="117" width="0.1546%" height="15" fill="rgb(251,115,12)"/><text x="48.4488%" y="127.50"></text></g><g><title>check_item_well_formed (20,191,535 samples, 1.16%)</title><rect x="47.2496%" y="133" width="1.1616%" height="15" fill="rgb(240,54,50)"/><text x="47.4996%" y="143.50"></text></g><g><title>analysis (548,268,290 samples, 31.54%)</title><rect x="17.0761%" y="181" width="31.5402%" height="15" fill="rgb(233,84,52)"/><text x="17.3261%" y="191.50">analysis</text></g><g><title>type_check_crate (301,484,068 samples, 17.34%)</title><rect x="31.2729%" y="165" width="17.3434%" height="15" fill="rgb(207,117,47)"/><text x="31.5229%" y="175.50">type_check_crate</text></g><g><title>wf_checking (56,997,224 samples, 3.28%)</title><rect x="45.3374%" y="149" width="3.2789%" height="15" fill="rgb(249,43,39)"/><text x="45.5874%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (3,566,228 samples, 0.21%)</title><rect x="48.4111%" y="133" width="0.2052%" height="15" fill="rgb(209,38,44)"/><text x="48.6611%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,479,773 samples, 0.14%)</title><rect x="49.5894%" y="149" width="0.1427%" height="15" fill="rgb(236,212,23)"/><text x="49.8394%" y="159.50"></text></g><g><title>codegen_module (18,464,255 samples, 1.06%)</title><rect x="48.6892%" y="165" width="1.0622%" height="15" fill="rgb(242,79,21)"/><text x="48.9392%" y="175.50"></text></g><g><title>optimized_mir (30,227,902 samples, 1.74%)</title><rect x="49.9162%" y="117" width="1.7389%" height="15" fill="rgb(211,96,35)"/><text x="50.1662%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (15,751,579 samples, 0.91%)</title><rect x="50.7489%" y="101" width="0.9061%" height="15" fill="rgb(253,215,40)"/><text x="50.9989%" y="111.50"></text></g><g><title>specialization_graph_of (2,422,278 samples, 0.14%)</title><rect x="51.7296%" y="101" width="0.1393%" height="15" fill="rgb(211,81,21)"/><text x="51.9796%" y="111.50"></text></g><g><title>resolve_instance (3,773,808 samples, 0.22%)</title><rect x="51.6551%" y="117" width="0.2171%" height="15" fill="rgb(208,190,38)"/><text x="51.9051%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (37,108,463 samples, 2.13%)</title><rect x="49.7534%" y="133" width="2.1347%" height="15" fill="rgb(235,213,38)"/><text x="50.0034%" y="143.50">m..</text></g><g><title>monomorphization_collector (39,146,525 samples, 2.25%)</title><rect x="49.7532%" y="149" width="2.2520%" height="15" fill="rgb(237,122,38)"/><text x="50.0032%" y="159.50">m..</text></g><g><title>monomorphization_collector_root_collections (2,034,072 samples, 0.12%)</title><rect x="51.8882%" y="133" width="0.1170%" height="15" fill="rgb(244,218,35)"/><text x="52.1382%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (40,270,427 samples, 2.32%)</title><rect x="49.7515%" y="165" width="2.3166%" height="15" fill="rgb(240,68,47)"/><text x="50.0015%" y="175.50">c..</text></g><g><title>codegen_crate (60,010,296 samples, 3.45%)</title><rect x="48.6170%" y="181" width="3.4522%" height="15" fill="rgb(210,16,53)"/><text x="48.8670%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (137,943,791 samples, 7.94%)</title><rect x="52.0692%" y="181" width="7.9355%" height="15" fill="rgb(235,124,12)"/><text x="52.3192%" y="191.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (130,120,275 samples, 7.49%)</title><rect x="52.5192%" y="165" width="7.4854%" height="15" fill="rgb(224,169,11)"/><text x="52.7692%" y="175.50">LLVM_modul..</text></g><g><title>LLVM_lto_optimize (65,403,487 samples, 3.76%)</title><rect x="60.2687%" y="165" width="3.7625%" height="15" fill="rgb(250,166,2)"/><text x="60.5187%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen (91,722,338 samples, 5.28%)</title><rect x="64.0312%" y="165" width="5.2765%" height="15" fill="rgb(242,216,29)"/><text x="64.2812%" y="175.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (91,274,803 samples, 5.25%)</title><rect x="64.0569%" y="149" width="5.2508%" height="15" fill="rgb(230,116,27)"/><text x="64.3069%" y="159.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (163,136,291 samples, 9.38%)</title><rect x="60.0046%" y="181" width="9.3847%" height="15" fill="rgb(228,99,48)"/><text x="60.2546%" y="191.50">codegen_modul..</text></g><g><title>macro_expand_crate (84,605,190 samples, 4.87%)</title><rect x="69.5273%" y="165" width="4.8671%" height="15" fill="rgb(253,11,6)"/><text x="69.7773%" y="175.50">macro_..</text></g><g><title>expand_crate (84,589,500 samples, 4.87%)</title><rect x="69.5282%" y="149" width="4.8662%" height="15" fill="rgb(247,143,39)"/><text x="69.7782%" y="159.50">expand..</text></g><g><title>late_resolve_crate (11,970,573 samples, 0.69%)</title><rect x="74.5271%" y="149" width="0.6886%" height="15" fill="rgb(236,97,10)"/><text x="74.7771%" y="159.50"></text></g><g><title>configure_and_expand (102,753,881 samples, 5.91%)</title><rect x="69.3894%" y="181" width="5.9111%" height="15" fill="rgb(233,208,19)"/><text x="69.6394%" y="191.50">configur..</text></g><g><title>resolve_crate (14,968,867 samples, 0.86%)</title><rect x="74.4394%" y="165" width="0.8611%" height="15" fill="rgb(216,164,2)"/><text x="74.6894%" y="175.50"></text></g><g><title>drop_ast (2,563,459 samples, 0.15%)</title><rect x="75.3005%" y="181" width="0.1475%" height="15" fill="rgb(220,129,5)"/><text x="75.5505%" y="191.50"></text></g><g><title>early_lint_checks (4,169,457 samples, 0.24%)</title><rect x="75.4495%" y="181" width="0.2399%" height="15" fill="rgb(242,17,10)"/><text x="75.6995%" y="191.50"></text></g><g><title>free_global_ctxt (10,009,131 samples, 0.58%)</title><rect x="75.6893%" y="181" width="0.5758%" height="15" fill="rgb(242,107,0)"/><text x="75.9393%" y="191.50"></text></g><g><title>reachable_non_generics (1,841,581 samples, 0.11%)</title><rect x="77.3314%" y="149" width="0.1059%" height="15" fill="rgb(251,28,31)"/><text x="77.5814%" y="159.50"></text></g><g><title>exported_symbols (2,320,446 samples, 0.13%)</title><rect x="77.3267%" y="165" width="0.1335%" height="15" fill="rgb(233,223,10)"/><text x="77.5767%" y="175.50"></text></g><g><title>layout_of (1,852,370 samples, 0.11%)</title><rect x="79.0810%" y="149" width="0.1066%" height="15" fill="rgb(215,21,27)"/><text x="79.3310%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,452,335 samples, 1.00%)</title><rect x="79.1876%" y="149" width="1.0040%" height="15" fill="rgb(232,23,21)"/><text x="79.4376%" y="159.50"></text></g><g><title>mir_for_ctfe (2,360,950 samples, 0.14%)</title><rect x="80.2825%" y="85" width="0.1358%" height="15" fill="rgb(244,5,23)"/><text x="80.5325%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,351,450 samples, 0.19%)</title><rect x="80.2312%" y="133" width="0.1928%" height="15" fill="rgb(226,81,46)"/><text x="80.4812%" y="143.50"></text></g><g><title>eval_to_const_value_raw (3,265,349 samples, 0.19%)</title><rect x="80.2361%" y="117" width="0.1878%" height="15" fill="rgb(247,70,30)"/><text x="80.4861%" y="127.50"></text></g><g><title>eval_to_allocation_raw (3,192,968 samples, 0.18%)</title><rect x="80.2403%" y="101" width="0.1837%" height="15" fill="rgb(212,68,19)"/><text x="80.4903%" y="111.50"></text></g><g><title>optimized_mir (50,485,874 samples, 2.90%)</title><rect x="77.5471%" y="165" width="2.9043%" height="15" fill="rgb(240,187,13)"/><text x="77.7971%" y="175.50">op..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,005,327 samples, 0.23%)</title><rect x="80.2210%" y="149" width="0.2304%" height="15" fill="rgb(223,113,26)"/><text x="80.4710%" y="159.50"></text></g><g><title>generate_crate_metadata (73,765,040 samples, 4.24%)</title><rect x="76.2651%" y="181" width="4.2435%" height="15" fill="rgb(206,192,2)"/><text x="76.5151%" y="191.50">gener..</text></g><g><title>hir_lowering (32,858,835 samples, 1.89%)</title><rect x="80.5086%" y="181" width="1.8903%" height="15" fill="rgb(241,108,4)"/><text x="80.7586%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (276,212,428 samples, 15.89%)</title><rect x="82.4001%" y="165" width="15.8896%" height="15" fill="rgb(247,173,49)"/><text x="82.6501%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (6,824,145 samples, 0.39%)</title><rect x="98.2897%" y="165" width="0.3926%" height="15" fill="rgb(224,114,35)"/><text x="98.5397%" y="175.50"></text></g><g><title>link_binary (6,609,093 samples, 0.38%)</title><rect x="98.3021%" y="149" width="0.3802%" height="15" fill="rgb(245,159,27)"/><text x="98.5521%" y="159.50"></text></g><g><title>link_rlib (5,773,474 samples, 0.33%)</title><rect x="98.3502%" y="133" width="0.3321%" height="15" fill="rgb(245,172,44)"/><text x="98.6002%" y="143.50"></text></g><g><title>link (283,073,424 samples, 16.28%)</title><rect x="82.3989%" y="181" width="16.2843%" height="15" fill="rgb(236,23,11)"/><text x="82.6489%" y="191.50">link</text></g><g><title>parse_crate (15,062,307 samples, 0.87%)</title><rect x="98.6832%" y="181" width="0.8665%" height="15" fill="rgb(205,117,38)"/><text x="98.9332%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (6,093,267 samples, 0.35%)</title><rect x="99.5657%" y="181" width="0.3505%" height="15" fill="rgb(237,72,25)"/><text x="99.8157%" y="191.50"></text></g><g><title>all (1,738,317,058 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,738,317,058 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>