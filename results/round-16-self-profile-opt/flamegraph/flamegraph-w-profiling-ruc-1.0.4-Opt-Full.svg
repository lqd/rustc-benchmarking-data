<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (69,115,503 samples, 14.25%)</title><rect x="0.1239%" y="181" width="14.2506%" height="15" fill="rgb(227,0,7)"/><text x="0.3739%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (611,927 samples, 0.13%)</title><rect x="14.2483%" y="165" width="0.1262%" height="15" fill="rgb(217,0,24)"/><text x="14.4983%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (595,657 samples, 0.12%)</title><rect x="14.2516%" y="149" width="0.1228%" height="15" fill="rgb(221,193,54)"/><text x="14.5016%" y="159.50"></text></g><g><title>item_attrs (741,157 samples, 0.15%)</title><rect x="17.2654%" y="69" width="0.1528%" height="15" fill="rgb(248,212,6)"/><text x="17.5154%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (729,097 samples, 0.15%)</title><rect x="17.2679%" y="53" width="0.1503%" height="15" fill="rgb(208,68,35)"/><text x="17.5179%" y="63.50"></text></g><g><title>codegen_fn_attrs (877,809 samples, 0.18%)</title><rect x="17.2414%" y="85" width="0.1810%" height="15" fill="rgb(232,128,0)"/><text x="17.4914%" y="95.50"></text></g><g><title>is_copy_raw (1,018,581 samples, 0.21%)</title><rect x="17.9203%" y="53" width="0.2100%" height="15" fill="rgb(207,160,47)"/><text x="18.1703%" y="63.50"></text></g><g><title>evaluate_obligation (864,280 samples, 0.18%)</title><rect x="17.9521%" y="37" width="0.1782%" height="15" fill="rgb(228,23,34)"/><text x="18.2021%" y="47.50"></text></g><g><title>needs_drop_raw (1,351,555 samples, 0.28%)</title><rect x="17.8524%" y="69" width="0.2787%" height="15" fill="rgb(218,30,26)"/><text x="18.1024%" y="79.50"></text></g><g><title>specialization_graph_of (1,403,016 samples, 0.29%)</title><rect x="18.2862%" y="53" width="0.2893%" height="15" fill="rgb(220,122,19)"/><text x="18.5362%" y="63.50"></text></g><g><title>impl_trait_ref (502,226 samples, 0.10%)</title><rect x="18.4719%" y="37" width="0.1036%" height="15" fill="rgb(250,228,42)"/><text x="18.7219%" y="47.50"></text></g><g><title>resolve_instance (2,252,967 samples, 0.46%)</title><rect x="18.1311%" y="69" width="0.4645%" height="15" fill="rgb(240,193,28)"/><text x="18.3811%" y="79.50"></text></g><g><title>thir_body (902,775 samples, 0.19%)</title><rect x="18.6010%" y="69" width="0.1861%" height="15" fill="rgb(216,20,37)"/><text x="18.8510%" y="79.50"></text></g><g><title>mir_const (8,875,320 samples, 1.83%)</title><rect x="16.9614%" y="117" width="1.8300%" height="15" fill="rgb(206,188,39)"/><text x="17.2114%" y="127.50">m..</text></g><g><title>unsafety_check_result (7,886,703 samples, 1.63%)</title><rect x="17.1652%" y="101" width="1.6261%" height="15" fill="rgb(217,207,13)"/><text x="17.4152%" y="111.50"></text></g><g><title>mir_built (6,639,530 samples, 1.37%)</title><rect x="17.4223%" y="85" width="1.3690%" height="15" fill="rgb(231,73,38)"/><text x="17.6723%" y="95.50"></text></g><g><title>mir_promoted (10,493,150 samples, 2.16%)</title><rect x="16.8078%" y="133" width="2.1635%" height="15" fill="rgb(225,20,46)"/><text x="17.0578%" y="143.50">m..</text></g><g><title>mir_const_qualif (873,109 samples, 0.18%)</title><rect x="18.7913%" y="117" width="0.1800%" height="15" fill="rgb(210,31,41)"/><text x="19.0413%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (670,520 samples, 0.14%)</title><rect x="18.9722%" y="133" width="0.1383%" height="15" fill="rgb(221,200,47)"/><text x="19.2222%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,983,036 samples, 0.62%)</title><rect x="19.1694%" y="133" width="0.6151%" height="15" fill="rgb(226,26,5)"/><text x="19.4194%" y="143.50"></text></g><g><title>MIR_borrow_checking (26,021,864 samples, 5.37%)</title><rect x="14.4208%" y="165" width="5.3653%" height="15" fill="rgb(249,33,26)"/><text x="14.6708%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (25,930,783 samples, 5.35%)</title><rect x="14.4396%" y="149" width="5.3465%" height="15" fill="rgb(235,183,28)"/><text x="14.6896%" y="159.50">mir_bor..</text></g><g><title>misc_checking_1 (946,081 samples, 0.20%)</title><rect x="19.8541%" y="165" width="0.1951%" height="15" fill="rgb(221,5,38)"/><text x="20.1041%" y="175.50"></text></g><g><title>misc_checking_2 (790,329 samples, 0.16%)</title><rect x="20.0492%" y="165" width="0.1630%" height="15" fill="rgb(247,18,42)"/><text x="20.2992%" y="175.50"></text></g><g><title>eval_to_allocation_raw (750,419 samples, 0.15%)</title><rect x="20.4218%" y="117" width="0.1547%" height="15" fill="rgb(241,131,45)"/><text x="20.6718%" y="127.50"></text></g><g><title>eval_to_allocation_raw (747,379 samples, 0.15%)</title><rect x="20.4225%" y="101" width="0.1541%" height="15" fill="rgb(249,31,29)"/><text x="20.6725%" y="111.50"></text></g><g><title>crate_lints (2,673,441 samples, 0.55%)</title><rect x="20.2955%" y="133" width="0.5512%" height="15" fill="rgb(225,111,53)"/><text x="20.5455%" y="143.50"></text></g><g><title>type_of (1,112,412 samples, 0.23%)</title><rect x="20.6173%" y="117" width="0.2294%" height="15" fill="rgb(238,160,17)"/><text x="20.8673%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (869,642 samples, 0.18%)</title><rect x="20.6674%" y="101" width="0.1793%" height="15" fill="rgb(214,148,48)"/><text x="20.9174%" y="111.50"></text></g><g><title>lint_checking (2,967,904 samples, 0.61%)</title><rect x="20.2951%" y="149" width="0.6119%" height="15" fill="rgb(232,36,49)"/><text x="20.5451%" y="159.50"></text></g><g><title>privacy_checking_modules (847,300 samples, 0.17%)</title><rect x="20.9442%" y="149" width="0.1747%" height="15" fill="rgb(209,103,24)"/><text x="21.1942%" y="159.50"></text></g><g><title>check_mod_privacy (845,040 samples, 0.17%)</title><rect x="20.9446%" y="133" width="0.1742%" height="15" fill="rgb(229,88,8)"/><text x="21.1946%" y="143.50"></text></g><g><title>misc_checking_3 (4,415,081 samples, 0.91%)</title><rect x="20.2121%" y="165" width="0.9103%" height="15" fill="rgb(213,181,19)"/><text x="20.4621%" y="175.50"></text></g><g><title>impl_parent (1,098,896 samples, 0.23%)</title><rect x="21.4935%" y="101" width="0.2266%" height="15" fill="rgb(254,191,54)"/><text x="21.7435%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (702,071 samples, 0.14%)</title><rect x="21.5753%" y="85" width="0.1448%" height="15" fill="rgb(241,83,37)"/><text x="21.8253%" y="95.50"></text></g><g><title>impl_trait_ref (3,330,439 samples, 0.69%)</title><rect x="21.7204%" y="101" width="0.6867%" height="15" fill="rgb(233,36,39)"/><text x="21.9704%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,947,463 samples, 0.61%)</title><rect x="21.7993%" y="85" width="0.6077%" height="15" fill="rgb(226,3,54)"/><text x="22.0493%" y="95.50"></text></g><g><title>coherent_trait (6,558,074 samples, 1.35%)</title><rect x="21.1360%" y="133" width="1.3522%" height="15" fill="rgb(245,192,40)"/><text x="21.3860%" y="143.50"></text></g><g><title>specialization_graph_of (6,545,944 samples, 1.35%)</title><rect x="21.1385%" y="117" width="1.3497%" height="15" fill="rgb(238,167,29)"/><text x="21.3885%" y="127.50"></text></g><g><title>coherence_checking (6,606,745 samples, 1.36%)</title><rect x="21.1331%" y="149" width="1.3622%" height="15" fill="rgb(232,182,51)"/><text x="21.3831%" y="159.50"></text></g><g><title>associated_items (686,027 samples, 0.14%)</title><rect x="25.5256%" y="101" width="0.1414%" height="15" fill="rgb(231,60,39)"/><text x="25.7756%" y="111.50"></text></g><g><title>dropck_outlives (527,966 samples, 0.11%)</title><rect x="25.6773%" y="101" width="0.1089%" height="15" fill="rgb(208,69,12)"/><text x="25.9273%" y="111.50"></text></g><g><title>evaluate_obligation (1,581,992 samples, 0.33%)</title><rect x="25.7865%" y="101" width="0.3262%" height="15" fill="rgb(235,93,37)"/><text x="26.0365%" y="111.50"></text></g><g><title>evaluate_obligation (1,998,543 samples, 0.41%)</title><rect x="27.8386%" y="85" width="0.4121%" height="15" fill="rgb(213,116,39)"/><text x="28.0886%" y="95.50"></text></g><g><title>typeck (9,936,381 samples, 2.05%)</title><rect x="26.4275%" y="101" width="2.0487%" height="15" fill="rgb(222,207,29)"/><text x="26.6775%" y="111.50">t..</text></g><g><title>item_bodies_checking (29,036,129 samples, 5.99%)</title><rect x="22.4984%" y="149" width="5.9868%" height="15" fill="rgb(206,96,30)"/><text x="22.7484%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (29,032,699 samples, 5.99%)</title><rect x="22.4991%" y="133" width="5.9861%" height="15" fill="rgb(218,138,4)"/><text x="22.7491%" y="143.50">typeck_i..</text></g><g><title>typeck (28,975,088 samples, 5.97%)</title><rect x="22.5110%" y="117" width="5.9742%" height="15" fill="rgb(250,191,14)"/><text x="22.7610%" y="127.50">typeck</text></g><g><title>adt_dtorck_constraint (547,166 samples, 0.11%)</title><rect x="28.8934%" y="37" width="0.1128%" height="15" fill="rgb(239,60,40)"/><text x="29.1434%" y="47.50"></text></g><g><title>adt_dtorck_constraint (624,927 samples, 0.13%)</title><rect x="28.8813%" y="53" width="0.1289%" height="15" fill="rgb(206,27,48)"/><text x="29.1313%" y="63.50"></text></g><g><title>adt_dtorck_constraint (681,998 samples, 0.14%)</title><rect x="28.8722%" y="69" width="0.1406%" height="15" fill="rgb(225,35,8)"/><text x="29.1222%" y="79.50"></text></g><g><title>dropck_outlives (821,890 samples, 0.17%)</title><rect x="28.8480%" y="101" width="0.1695%" height="15" fill="rgb(250,213,24)"/><text x="29.0980%" y="111.50"></text></g><g><title>adt_dtorck_constraint (783,640 samples, 0.16%)</title><rect x="28.8559%" y="85" width="0.1616%" height="15" fill="rgb(247,123,22)"/><text x="29.1059%" y="95.50"></text></g><g><title>evaluate_obligation (649,638 samples, 0.13%)</title><rect x="29.0175%" y="101" width="0.1339%" height="15" fill="rgb(231,138,38)"/><text x="29.2675%" y="111.50"></text></g><g><title>item_types_checking (3,747,412 samples, 0.77%)</title><rect x="28.4852%" y="149" width="0.7727%" height="15" fill="rgb(231,145,46)"/><text x="28.7352%" y="159.50"></text></g><g><title>check_mod_item_types (3,743,662 samples, 0.77%)</title><rect x="28.4860%" y="133" width="0.7719%" height="15" fill="rgb(251,118,11)"/><text x="28.7360%" y="143.50"></text></g><g><title>typeck (3,016,754 samples, 0.62%)</title><rect x="28.6359%" y="117" width="0.6220%" height="15" fill="rgb(217,147,25)"/><text x="28.8859%" y="127.50"></text></g><g><title>predicates_of (544,156 samples, 0.11%)</title><rect x="29.4238%" y="117" width="0.1122%" height="15" fill="rgb(247,81,37)"/><text x="29.6738%" y="127.50"></text></g><g><title>predicates_defined_on (515,345 samples, 0.11%)</title><rect x="29.4298%" y="101" width="0.1063%" height="15" fill="rgb(209,12,38)"/><text x="29.6798%" y="111.50"></text></g><g><title>type_collecting (1,743,729 samples, 0.36%)</title><rect x="29.2582%" y="149" width="0.3595%" height="15" fill="rgb(227,1,9)"/><text x="29.5082%" y="159.50"></text></g><g><title>collect_mod_item_types (1,736,169 samples, 0.36%)</title><rect x="29.2598%" y="133" width="0.3580%" height="15" fill="rgb(248,47,43)"/><text x="29.5098%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,489,509 samples, 0.31%)</title><rect x="29.6456%" y="133" width="0.3071%" height="15" fill="rgb(221,10,30)"/><text x="29.8956%" y="143.50"></text></g><g><title>evaluate_obligation (677,499 samples, 0.14%)</title><rect x="30.1831%" y="117" width="0.1397%" height="15" fill="rgb(210,229,1)"/><text x="30.4331%" y="127.50"></text></g><g><title>check_item_well_formed (2,234,294 samples, 0.46%)</title><rect x="29.9527%" y="133" width="0.4607%" height="15" fill="rgb(222,148,37)"/><text x="30.2027%" y="143.50"></text></g><g><title>object_safety_violations (564,755 samples, 0.12%)</title><rect x="30.6515%" y="117" width="0.1164%" height="15" fill="rgb(234,67,33)"/><text x="30.9015%" y="127.50"></text></g><g><title>analysis (79,677,663 samples, 16.43%)</title><rect x="14.3745%" y="181" width="16.4283%" height="15" fill="rgb(247,98,35)"/><text x="14.6245%" y="191.50">analysis</text></g><g><title>type_check_crate (46,949,712 samples, 9.68%)</title><rect x="21.1225%" y="165" width="9.6803%" height="15" fill="rgb(247,138,52)"/><text x="21.3725%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (5,743,455 samples, 1.18%)</title><rect x="29.6186%" y="149" width="1.1842%" height="15" fill="rgb(213,79,30)"/><text x="29.8686%" y="159.50"></text></g><g><title>check_trait_item_well_formed (1,888,712 samples, 0.39%)</title><rect x="30.4134%" y="133" width="0.3894%" height="15" fill="rgb(246,177,23)"/><text x="30.6634%" y="143.50"></text></g><g><title>layout_of (842,538 samples, 0.17%)</title><rect x="33.8440%" y="133" width="0.1737%" height="15" fill="rgb(230,62,27)"/><text x="34.0940%" y="143.50"></text></g><g><title>predicates_of (531,537 samples, 0.11%)</title><rect x="34.2364%" y="117" width="0.1096%" height="15" fill="rgb(216,154,8)"/><text x="34.4864%" y="127.50"></text></g><g><title>param_env (1,597,027 samples, 0.33%)</title><rect x="34.0177%" y="133" width="0.3293%" height="15" fill="rgb(244,35,45)"/><text x="34.2677%" y="143.50"></text></g><g><title>fn_abi_of_instance (4,322,571 samples, 0.89%)</title><rect x="33.5017%" y="149" width="0.8912%" height="15" fill="rgb(251,115,12)"/><text x="33.7517%" y="159.50"></text></g><g><title>layout_of (528,118 samples, 0.11%)</title><rect x="34.4228%" y="149" width="0.1089%" height="15" fill="rgb(240,54,50)"/><text x="34.6728%" y="159.50"></text></g><g><title>codegen_module (16,952,681 samples, 3.50%)</title><rect x="31.0654%" y="165" width="3.4954%" height="15" fill="rgb(233,84,52)"/><text x="31.3154%" y="175.50">cod..</text></g><g><title>item_attrs (574,194 samples, 0.12%)</title><rect x="34.7450%" y="101" width="0.1184%" height="15" fill="rgb(207,117,47)"/><text x="34.9950%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (551,543 samples, 0.11%)</title><rect x="34.7497%" y="85" width="0.1137%" height="15" fill="rgb(249,43,39)"/><text x="34.9997%" y="95.50"></text></g><g><title>codegen_fn_attrs (922,357 samples, 0.19%)</title><rect x="34.7167%" y="117" width="0.1902%" height="15" fill="rgb(209,38,44)"/><text x="34.9667%" y="127.50"></text></g><g><title>mir_shims (651,939 samples, 0.13%)</title><rect x="34.9648%" y="117" width="0.1344%" height="15" fill="rgb(236,212,23)"/><text x="35.2148%" y="127.50"></text></g><g><title>optimized_mir (839,906 samples, 0.17%)</title><rect x="35.0992%" y="117" width="0.1732%" height="15" fill="rgb(242,79,21)"/><text x="35.3492%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (707,075 samples, 0.15%)</title><rect x="35.1266%" y="101" width="0.1458%" height="15" fill="rgb(211,96,35)"/><text x="35.3766%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,305,675 samples, 0.27%)</title><rect x="35.3426%" y="101" width="0.2692%" height="15" fill="rgb(253,215,40)"/><text x="35.5926%" y="111.50"></text></g><g><title>resolve_instance (2,543,477 samples, 0.52%)</title><rect x="35.2724%" y="117" width="0.5244%" height="15" fill="rgb(211,81,21)"/><text x="35.5224%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (6,132,880 samples, 1.26%)</title><rect x="34.5681%" y="133" width="1.2645%" height="15" fill="rgb(208,190,38)"/><text x="34.8181%" y="143.50"></text></g><g><title>monomorphization_collector (6,163,320 samples, 1.27%)</title><rect x="34.5677%" y="149" width="1.2708%" height="15" fill="rgb(235,213,38)"/><text x="34.8177%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (783,038 samples, 0.16%)</title><rect x="35.8399%" y="133" width="0.1615%" height="15" fill="rgb(237,122,38)"/><text x="36.0899%" y="143.50"></text></g><g><title>symbol_name (714,108 samples, 0.15%)</title><rect x="35.8541%" y="117" width="0.1472%" height="15" fill="rgb(244,218,35)"/><text x="36.1041%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (7,296,273 samples, 1.50%)</title><rect x="34.5622%" y="165" width="1.5044%" height="15" fill="rgb(240,68,47)"/><text x="34.8122%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,106,432 samples, 0.23%)</title><rect x="35.8385%" y="149" width="0.2281%" height="15" fill="rgb(210,16,53)"/><text x="36.0885%" y="159.50"></text></g><g><title>codegen_crate (25,585,909 samples, 5.28%)</title><rect x="30.8046%" y="181" width="5.2754%" height="15" fill="rgb(235,124,12)"/><text x="31.0546%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (89,221,798 samples, 18.40%)</title><rect x="36.0801%" y="181" width="18.3962%" height="15" fill="rgb(224,169,11)"/><text x="36.3301%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (80,840,053 samples, 16.67%)</title><rect x="37.8083%" y="165" width="16.6680%" height="15" fill="rgb(250,166,2)"/><text x="38.0583%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (39,276,567 samples, 8.10%)</title><rect x="55.6668%" y="165" width="8.0982%" height="15" fill="rgb(242,216,29)"/><text x="55.9168%" y="175.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (72,514,444 samples, 14.95%)</title><rect x="63.7651%" y="165" width="14.9514%" height="15" fill="rgb(230,116,27)"/><text x="64.0151%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (71,045,205 samples, 14.65%)</title><rect x="64.0680%" y="149" width="14.6484%" height="15" fill="rgb(228,99,48)"/><text x="64.3180%" y="159.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (5,064,590 samples, 1.04%)</title><rect x="78.7165%" y="165" width="1.0442%" height="15" fill="rgb(253,11,6)"/><text x="78.9665%" y="175.50"></text></g><g><title>codegen_module_perform_lto (122,924,740 samples, 25.35%)</title><rect x="54.4763%" y="181" width="25.3452%" height="15" fill="rgb(247,143,39)"/><text x="54.7263%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,381,886 samples, 0.49%)</title><rect x="83.8133%" y="133" width="0.4911%" height="15" fill="rgb(236,97,10)"/><text x="84.0633%" y="143.50"></text></g><g><title>metadata_register_crate (850,030 samples, 0.18%)</title><rect x="84.1291%" y="117" width="0.1753%" height="15" fill="rgb(233,208,19)"/><text x="84.3791%" y="127.50"></text></g><g><title>macro_expand_crate (21,387,483 samples, 4.41%)</title><rect x="79.9356%" y="165" width="4.4098%" height="15" fill="rgb(216,164,2)"/><text x="80.1856%" y="175.50">macro..</text></g><g><title>expand_crate (21,373,023 samples, 4.41%)</title><rect x="79.9386%" y="149" width="4.4068%" height="15" fill="rgb(220,129,5)"/><text x="80.1886%" y="159.50">expan..</text></g><g><title>late_resolve_crate (3,232,576 samples, 0.67%)</title><rect x="84.4298%" y="149" width="0.6665%" height="15" fill="rgb(242,17,10)"/><text x="84.6798%" y="159.50"></text></g><g><title>configure_and_expand (25,675,001 samples, 5.29%)</title><rect x="79.8215%" y="181" width="5.2938%" height="15" fill="rgb(242,107,0)"/><text x="80.0715%" y="191.50">config..</text></g><g><title>resolve_crate (3,504,199 samples, 0.72%)</title><rect x="84.3928%" y="165" width="0.7225%" height="15" fill="rgb(251,28,31)"/><text x="84.6428%" y="175.50"></text></g><g><title>free_global_ctxt (5,498,902 samples, 1.13%)</title><rect x="85.2022%" y="181" width="1.1338%" height="15" fill="rgb(233,223,10)"/><text x="85.4522%" y="191.50"></text></g><g><title>layout_of (516,555 samples, 0.11%)</title><rect x="87.3861%" y="117" width="0.1065%" height="15" fill="rgb(215,21,27)"/><text x="87.6361%" y="127.50"></text></g><g><title>layout_of (692,697 samples, 0.14%)</title><rect x="87.3579%" y="133" width="0.1428%" height="15" fill="rgb(232,23,21)"/><text x="87.6079%" y="143.50"></text></g><g><title>layout_of (1,243,998 samples, 0.26%)</title><rect x="87.2512%" y="149" width="0.2565%" height="15" fill="rgb(244,5,23)"/><text x="87.5012%" y="159.50"></text></g><g><title>needs_drop_raw (524,214 samples, 0.11%)</title><rect x="88.0371%" y="133" width="0.1081%" height="15" fill="rgb(226,81,46)"/><text x="88.2871%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,112,155 samples, 0.64%)</title><rect x="87.5077%" y="149" width="0.6417%" height="15" fill="rgb(247,70,30)"/><text x="87.7577%" y="159.50"></text></g><g><title>optimized_mir (7,370,222 samples, 1.52%)</title><rect x="86.7003%" y="165" width="1.5196%" height="15" fill="rgb(212,68,19)"/><text x="86.9503%" y="175.50"></text></g><g><title>generate_crate_metadata (9,398,466 samples, 1.94%)</title><rect x="86.3360%" y="181" width="1.9378%" height="15" fill="rgb(240,187,13)"/><text x="86.5860%" y="191.50">g..</text></g><g><title>hir_lowering (2,255,116 samples, 0.46%)</title><rect x="88.2738%" y="181" width="0.4650%" height="15" fill="rgb(223,113,26)"/><text x="88.5238%" y="191.50"></text></g><g><title>finish_ongoing_codegen (48,987,046 samples, 10.10%)</title><rect x="88.7422%" y="165" width="10.1004%" height="15" fill="rgb(206,192,2)"/><text x="88.9922%" y="175.50">finish_ongoing_..</text></g><g><title>link_crate (1,253,194 samples, 0.26%)</title><rect x="98.8426%" y="165" width="0.2584%" height="15" fill="rgb(241,108,4)"/><text x="99.0926%" y="175.50"></text></g><g><title>link_binary (1,218,894 samples, 0.25%)</title><rect x="98.8496%" y="149" width="0.2513%" height="15" fill="rgb(247,173,49)"/><text x="99.0996%" y="159.50"></text></g><g><title>link_rlib (776,328 samples, 0.16%)</title><rect x="98.9409%" y="133" width="0.1601%" height="15" fill="rgb(224,114,35)"/><text x="99.1909%" y="143.50"></text></g><g><title>link (50,266,120 samples, 10.36%)</title><rect x="88.7388%" y="181" width="10.3641%" height="15" fill="rgb(245,159,27)"/><text x="88.9888%" y="191.50">link</text></g><g><title>parse_crate (2,139,744 samples, 0.44%)</title><rect x="99.1029%" y="181" width="0.4412%" height="15" fill="rgb(245,172,44)"/><text x="99.3529%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,610,798 samples, 0.33%)</title><rect x="99.5834%" y="181" width="0.3321%" height="15" fill="rgb(236,23,11)"/><text x="99.8334%" y="191.50"></text></g><g><title>all (485,001,549 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (485,001,549 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>