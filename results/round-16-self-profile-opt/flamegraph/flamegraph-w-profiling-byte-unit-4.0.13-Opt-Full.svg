<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (130,484,065 samples, 17.65%)</title><rect x="0.0733%" y="165" width="17.6529%" height="15" fill="rgb(227,0,7)"/><text x="0.3233%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (838,879 samples, 0.11%)</title><rect x="17.6127%" y="149" width="0.1135%" height="15" fill="rgb(217,0,24)"/><text x="17.8627%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (819,039 samples, 0.11%)</title><rect x="17.6154%" y="133" width="0.1108%" height="15" fill="rgb(221,193,54)"/><text x="17.8654%" y="143.50"></text></g><g><title>needs_drop_raw (912,438 samples, 0.12%)</title><rect x="20.5452%" y="53" width="0.1234%" height="15" fill="rgb(248,212,6)"/><text x="20.7952%" y="63.50"></text></g><g><title>specialization_graph_of (1,129,792 samples, 0.15%)</title><rect x="20.7369%" y="37" width="0.1528%" height="15" fill="rgb(208,68,35)"/><text x="20.9869%" y="47.50"></text></g><g><title>resolve_instance (1,667,258 samples, 0.23%)</title><rect x="20.6720%" y="53" width="0.2256%" height="15" fill="rgb(232,128,0)"/><text x="20.9220%" y="63.50"></text></g><g><title>thir_body (1,286,369 samples, 0.17%)</title><rect x="20.9003%" y="53" width="0.1740%" height="15" fill="rgb(207,160,47)"/><text x="21.1503%" y="63.50"></text></g><g><title>mir_const (9,214,887 samples, 1.25%)</title><rect x="19.8293%" y="101" width="1.2467%" height="15" fill="rgb(228,23,34)"/><text x="20.0793%" y="111.50"></text></g><g><title>unsafety_check_result (8,192,868 samples, 1.11%)</title><rect x="19.9675%" y="85" width="1.1084%" height="15" fill="rgb(218,30,26)"/><text x="20.2175%" y="95.50"></text></g><g><title>mir_built (7,538,963 samples, 1.02%)</title><rect x="20.0560%" y="69" width="1.0199%" height="15" fill="rgb(220,122,19)"/><text x="20.3060%" y="79.50"></text></g><g><title>mir_const (815,119 samples, 0.11%)</title><rect x="21.1106%" y="85" width="0.1103%" height="15" fill="rgb(250,228,42)"/><text x="21.3606%" y="95.50"></text></g><g><title>mir_promoted (11,333,773 samples, 1.53%)</title><rect x="19.6877%" y="117" width="1.5333%" height="15" fill="rgb(240,193,28)"/><text x="19.9377%" y="127.50"></text></g><g><title>mir_const_qualif (1,072,642 samples, 0.15%)</title><rect x="21.0759%" y="101" width="0.1451%" height="15" fill="rgb(216,20,37)"/><text x="21.3259%" y="111.50"></text></g><g><title>type_op_prove_predicate (1,605,652 samples, 0.22%)</title><rect x="21.3670%" y="117" width="0.2172%" height="15" fill="rgb(206,188,39)"/><text x="21.6170%" y="127.50"></text></g><g><title>MIR_borrow_checking (28,181,890 samples, 3.81%)</title><rect x="17.7730%" y="149" width="3.8127%" height="15" fill="rgb(217,207,13)"/><text x="18.0230%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (28,027,759 samples, 3.79%)</title><rect x="17.7938%" y="133" width="3.7918%" height="15" fill="rgb(231,73,38)"/><text x="18.0438%" y="143.50">mir_..</text></g><g><title>misc_checking_1 (1,475,776 samples, 0.20%)</title><rect x="21.6754%" y="149" width="0.1997%" height="15" fill="rgb(225,20,46)"/><text x="21.9254%" y="159.50"></text></g><g><title>misc_checking_2 (1,269,503 samples, 0.17%)</title><rect x="21.8751%" y="149" width="0.1717%" height="15" fill="rgb(210,31,41)"/><text x="22.1251%" y="159.50"></text></g><g><title>match_checking (781,408 samples, 0.11%)</title><rect x="21.9411%" y="133" width="0.1057%" height="15" fill="rgb(221,200,47)"/><text x="22.1911%" y="143.50"></text></g><g><title>check_match (744,308 samples, 0.10%)</title><rect x="21.9461%" y="117" width="0.1007%" height="15" fill="rgb(226,26,5)"/><text x="22.1961%" y="127.50"></text></g><g><title>crate_lints (2,822,540 samples, 0.38%)</title><rect x="22.1747%" y="117" width="0.3819%" height="15" fill="rgb(249,33,26)"/><text x="22.4247%" y="127.50"></text></g><g><title>type_of (1,096,333 samples, 0.15%)</title><rect x="22.4082%" y="101" width="0.1483%" height="15" fill="rgb(235,183,28)"/><text x="22.6582%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (864,470 samples, 0.12%)</title><rect x="22.4396%" y="85" width="0.1170%" height="15" fill="rgb(221,5,38)"/><text x="22.6896%" y="95.50"></text></g><g><title>lint_checking (3,471,397 samples, 0.47%)</title><rect x="22.1745%" y="133" width="0.4696%" height="15" fill="rgb(247,18,42)"/><text x="22.4245%" y="143.50"></text></g><g><title>privacy_checking_modules (939,340 samples, 0.13%)</title><rect x="22.6921%" y="133" width="0.1271%" height="15" fill="rgb(241,131,45)"/><text x="22.9421%" y="143.50"></text></g><g><title>check_mod_privacy (934,060 samples, 0.13%)</title><rect x="22.6928%" y="117" width="0.1264%" height="15" fill="rgb(249,31,29)"/><text x="22.9428%" y="127.50"></text></g><g><title>misc_checking_3 (5,724,091 samples, 0.77%)</title><rect x="22.0468%" y="149" width="0.7744%" height="15" fill="rgb(225,111,53)"/><text x="22.2968%" y="159.50"></text></g><g><title>impl_parent (2,940,561 samples, 0.40%)</title><rect x="23.5866%" y="85" width="0.3978%" height="15" fill="rgb(238,160,17)"/><text x="23.8366%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,687,056 samples, 0.23%)</title><rect x="23.7562%" y="69" width="0.2282%" height="15" fill="rgb(214,148,48)"/><text x="24.0062%" y="79.50"></text></g><g><title>impl_trait_ref (6,087,263 samples, 0.82%)</title><rect x="23.9845%" y="85" width="0.8235%" height="15" fill="rgb(232,36,49)"/><text x="24.2345%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,630,828 samples, 0.63%)</title><rect x="24.1816%" y="69" width="0.6265%" height="15" fill="rgb(209,103,24)"/><text x="24.4316%" y="79.50"></text></g><g><title>trait_impls_of (1,059,043 samples, 0.14%)</title><rect x="24.8228%" y="85" width="0.1433%" height="15" fill="rgb(229,88,8)"/><text x="25.0728%" y="95.50"></text></g><g><title>coherent_trait (15,509,935 samples, 2.10%)</title><rect x="22.8679%" y="117" width="2.0983%" height="15" fill="rgb(213,181,19)"/><text x="23.1179%" y="127.50">c..</text></g><g><title>specialization_graph_of (15,035,270 samples, 2.03%)</title><rect x="22.9322%" y="101" width="2.0341%" height="15" fill="rgb(254,191,54)"/><text x="23.1822%" y="111.50">s..</text></g><g><title>coherence_checking (15,849,438 samples, 2.14%)</title><rect x="22.8329%" y="133" width="2.1442%" height="15" fill="rgb(241,83,37)"/><text x="23.0829%" y="143.50">c..</text></g><g><title>associated_items (820,098 samples, 0.11%)</title><rect x="28.5960%" y="85" width="0.1109%" height="15" fill="rgb(233,36,39)"/><text x="28.8460%" y="95.50"></text></g><g><title>evaluate_obligation (3,022,529 samples, 0.41%)</title><rect x="28.7780%" y="85" width="0.4089%" height="15" fill="rgb(226,3,54)"/><text x="29.0280%" y="95.50"></text></g><g><title>item_bodies_checking (33,091,721 samples, 4.48%)</title><rect x="24.9822%" y="133" width="4.4769%" height="15" fill="rgb(245,192,40)"/><text x="25.2322%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (33,089,401 samples, 4.48%)</title><rect x="24.9825%" y="117" width="4.4766%" height="15" fill="rgb(238,167,29)"/><text x="25.2325%" y="127.50">typec..</text></g><g><title>typeck (32,993,989 samples, 4.46%)</title><rect x="24.9954%" y="101" width="4.4637%" height="15" fill="rgb(232,182,51)"/><text x="25.2454%" y="111.50">typeck</text></g><g><title>impl_trait_ref (820,558 samples, 0.11%)</title><rect x="30.1613%" y="69" width="0.1110%" height="15" fill="rgb(231,60,39)"/><text x="30.4113%" y="79.50"></text></g><g><title>specializes (1,879,293 samples, 0.25%)</title><rect x="30.3559%" y="69" width="0.2542%" height="15" fill="rgb(208,69,12)"/><text x="30.6059%" y="79.50"></text></g><g><title>param_env (1,092,313 samples, 0.15%)</title><rect x="30.4624%" y="53" width="0.1478%" height="15" fill="rgb(235,93,37)"/><text x="30.7124%" y="63.50"></text></g><g><title>evaluate_obligation (6,097,924 samples, 0.82%)</title><rect x="29.7972%" y="85" width="0.8250%" height="15" fill="rgb(213,116,39)"/><text x="30.0472%" y="95.50"></text></g><g><title>item_types_checking (8,834,534 samples, 1.20%)</title><rect x="29.4591%" y="133" width="1.1952%" height="15" fill="rgb(222,207,29)"/><text x="29.7091%" y="143.50"></text></g><g><title>check_mod_item_types (8,826,974 samples, 1.19%)</title><rect x="29.4601%" y="117" width="1.1942%" height="15" fill="rgb(206,96,30)"/><text x="29.7101%" y="127.50"></text></g><g><title>typeck (7,622,290 samples, 1.03%)</title><rect x="29.6231%" y="101" width="1.0312%" height="15" fill="rgb(218,138,4)"/><text x="29.8731%" y="111.50"></text></g><g><title>type_collecting (2,087,122 samples, 0.28%)</title><rect x="30.6547%" y="133" width="0.2824%" height="15" fill="rgb(250,191,14)"/><text x="30.9047%" y="143.50"></text></g><g><title>collect_mod_item_types (2,074,352 samples, 0.28%)</title><rect x="30.6564%" y="117" width="0.2806%" height="15" fill="rgb(239,60,40)"/><text x="30.9064%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,573,817 samples, 0.35%)</title><rect x="30.9682%" y="117" width="0.3482%" height="15" fill="rgb(206,27,48)"/><text x="31.2182%" y="127.50"></text></g><g><title>analysis (103,196,155 samples, 13.96%)</title><rect x="17.7262%" y="165" width="13.9612%" height="15" fill="rgb(225,35,8)"/><text x="17.9762%" y="175.50">analysis</text></g><g><title>type_check_crate (65,535,925 samples, 8.87%)</title><rect x="22.8212%" y="149" width="8.8662%" height="15" fill="rgb(250,213,24)"/><text x="23.0712%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (5,539,759 samples, 0.75%)</title><rect x="30.9380%" y="133" width="0.7495%" height="15" fill="rgb(247,123,22)"/><text x="31.1880%" y="143.50"></text></g><g><title>check_item_well_formed (2,742,760 samples, 0.37%)</title><rect x="31.3164%" y="117" width="0.3711%" height="15" fill="rgb(231,138,38)"/><text x="31.5664%" y="127.50"></text></g><g><title>param_env (1,389,308 samples, 0.19%)</title><rect x="34.2386%" y="117" width="0.1880%" height="15" fill="rgb(231,145,46)"/><text x="34.4886%" y="127.50"></text></g><g><title>fn_abi_of_instance (5,022,346 samples, 0.68%)</title><rect x="33.8011%" y="133" width="0.6795%" height="15" fill="rgb(251,118,11)"/><text x="34.0511%" y="143.50"></text></g><g><title>codegen_module (19,896,674 samples, 2.69%)</title><rect x="31.9120%" y="149" width="2.6918%" height="15" fill="rgb(217,147,25)"/><text x="32.1620%" y="159.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,117,649 samples, 0.15%)</title><rect x="35.1153%" y="85" width="0.1512%" height="15" fill="rgb(247,81,37)"/><text x="35.3653%" y="95.50"></text></g><g><title>optimized_mir (3,393,406 samples, 0.46%)</title><rect x="34.8326%" y="101" width="0.4591%" height="15" fill="rgb(209,12,38)"/><text x="35.0826%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (787,658 samples, 0.11%)</title><rect x="35.3360%" y="85" width="0.1066%" height="15" fill="rgb(227,1,9)"/><text x="35.5860%" y="95.50"></text></g><g><title>resolve_instance (1,718,335 samples, 0.23%)</title><rect x="35.2917%" y="101" width="0.2325%" height="15" fill="rgb(248,47,43)"/><text x="35.5417%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (7,246,757 samples, 0.98%)</title><rect x="34.6075%" y="117" width="0.9804%" height="15" fill="rgb(221,10,30)"/><text x="34.8575%" y="127.50"></text></g><g><title>monomorphization_collector (7,304,938 samples, 0.99%)</title><rect x="34.6072%" y="133" width="0.9883%" height="15" fill="rgb(210,229,1)"/><text x="34.8572%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (761,108 samples, 0.10%)</title><rect x="35.5959%" y="117" width="0.1030%" height="15" fill="rgb(222,148,37)"/><text x="35.8459%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (8,336,169 samples, 1.13%)</title><rect x="34.6045%" y="149" width="1.1278%" height="15" fill="rgb(234,67,33)"/><text x="34.8545%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,011,561 samples, 0.14%)</title><rect x="35.5955%" y="133" width="0.1369%" height="15" fill="rgb(247,98,35)"/><text x="35.8455%" y="143.50"></text></g><g><title>codegen_crate (29,956,158 samples, 4.05%)</title><rect x="31.6881%" y="165" width="4.0527%" height="15" fill="rgb(247,138,52)"/><text x="31.9381%" y="175.50">code..</text></g><g><title>codegen_module_optimize (150,006,080 samples, 20.29%)</title><rect x="35.7408%" y="165" width="20.2940%" height="15" fill="rgb(213,79,30)"/><text x="35.9908%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (138,568,150 samples, 18.75%)</title><rect x="37.2882%" y="149" width="18.7466%" height="15" fill="rgb(246,177,23)"/><text x="37.5382%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (63,784,663 samples, 8.63%)</title><rect x="57.2828%" y="149" width="8.6293%" height="15" fill="rgb(230,62,27)"/><text x="57.5328%" y="159.50">LLVM_lto_opt..</text></g><g><title>LLVM_module_codegen (95,640,728 samples, 12.94%)</title><rect x="65.9121%" y="149" width="12.9391%" height="15" fill="rgb(216,154,8)"/><text x="66.1621%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (94,418,672 samples, 12.77%)</title><rect x="66.0774%" y="133" width="12.7737%" height="15" fill="rgb(244,35,45)"/><text x="66.3274%" y="143.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (2,247,507 samples, 0.30%)</title><rect x="78.8511%" y="149" width="0.3041%" height="15" fill="rgb(251,115,12)"/><text x="79.1011%" y="159.50"></text></g><g><title>codegen_module_perform_lto (171,295,799 samples, 23.17%)</title><rect x="56.0348%" y="165" width="23.1743%" height="15" fill="rgb(240,54,50)"/><text x="56.2848%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,307,924 samples, 0.18%)</title><rect x="81.1479%" y="117" width="0.1769%" height="15" fill="rgb(233,84,52)"/><text x="81.3979%" y="127.50"></text></g><g><title>macro_expand_crate (15,544,735 samples, 2.10%)</title><rect x="79.2615%" y="149" width="2.1030%" height="15" fill="rgb(207,117,47)"/><text x="79.5115%" y="159.50">m..</text></g><g><title>expand_crate (15,537,124 samples, 2.10%)</title><rect x="79.2626%" y="133" width="2.1020%" height="15" fill="rgb(249,43,39)"/><text x="79.5126%" y="143.50">e..</text></g><g><title>late_resolve_crate (2,013,982 samples, 0.27%)</title><rect x="81.4053%" y="133" width="0.2725%" height="15" fill="rgb(209,38,44)"/><text x="81.6553%" y="143.50"></text></g><g><title>configure_and_expand (18,399,725 samples, 2.49%)</title><rect x="79.2091%" y="165" width="2.4893%" height="15" fill="rgb(236,212,23)"/><text x="79.4591%" y="175.50">co..</text></g><g><title>resolve_crate (2,446,196 samples, 0.33%)</title><rect x="81.3674%" y="149" width="0.3309%" height="15" fill="rgb(242,79,21)"/><text x="81.6174%" y="159.50"></text></g><g><title>free_global_ctxt (6,376,287 samples, 0.86%)</title><rect x="81.8056%" y="165" width="0.8626%" height="15" fill="rgb(211,96,35)"/><text x="82.0556%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,521,694 samples, 0.34%)</title><rect x="83.5305%" y="133" width="0.3412%" height="15" fill="rgb(253,215,40)"/><text x="83.7805%" y="143.50"></text></g><g><title>optimized_mir (7,484,990 samples, 1.01%)</title><rect x="83.0029%" y="149" width="1.0126%" height="15" fill="rgb(211,81,21)"/><text x="83.2529%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (822,707 samples, 0.11%)</title><rect x="83.9042%" y="133" width="0.1113%" height="15" fill="rgb(208,190,38)"/><text x="84.1542%" y="143.50"></text></g><g><title>generate_crate_metadata (10,030,997 samples, 1.36%)</title><rect x="82.6683%" y="165" width="1.3571%" height="15" fill="rgb(235,213,38)"/><text x="82.9183%" y="175.50"></text></g><g><title>hir_lowering (3,792,350 samples, 0.51%)</title><rect x="84.0253%" y="165" width="0.5131%" height="15" fill="rgb(237,122,38)"/><text x="84.2753%" y="175.50"></text></g><g><title>finish_ongoing_codegen (109,398,471 samples, 14.80%)</title><rect x="84.5407%" y="149" width="14.8003%" height="15" fill="rgb(244,218,35)"/><text x="84.7907%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,884,700 samples, 0.25%)</title><rect x="99.3410%" y="149" width="0.2550%" height="15" fill="rgb(240,68,47)"/><text x="99.5910%" y="159.50"></text></g><g><title>link_binary (1,863,259 samples, 0.25%)</title><rect x="99.3439%" y="133" width="0.2521%" height="15" fill="rgb(210,16,53)"/><text x="99.5939%" y="143.50"></text></g><g><title>link_rlib (1,258,923 samples, 0.17%)</title><rect x="99.4257%" y="117" width="0.1703%" height="15" fill="rgb(235,124,12)"/><text x="99.6757%" y="127.50"></text></g><g><title>link (111,311,122 samples, 15.06%)</title><rect x="84.5384%" y="165" width="15.0591%" height="15" fill="rgb(224,169,11)"/><text x="84.7884%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,087,061 samples, 0.28%)</title><rect x="99.6499%" y="165" width="0.2824%" height="15" fill="rgb(250,166,2)"/><text x="99.8999%" y="175.50"></text></g><g><title>all (739,163,324 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (739,163,324 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>