<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (79,111,090 samples, 5.33%)</title><rect x="0.0474%" y="181" width="5.3331%" height="15" fill="rgb(227,0,7)"/><text x="0.2974%" y="191.50">LLVM_pa..</text></g><g><title>mir_const (5,876,403 samples, 0.40%)</title><rect x="11.8678%" y="117" width="0.3961%" height="15" fill="rgb(217,0,24)"/><text x="12.1178%" y="127.50"></text></g><g><title>unsafety_check_result (5,210,577 samples, 0.35%)</title><rect x="11.9127%" y="101" width="0.3513%" height="15" fill="rgb(221,193,54)"/><text x="12.1627%" y="111.50"></text></g><g><title>mir_built (4,704,862 samples, 0.32%)</title><rect x="11.9468%" y="85" width="0.3172%" height="15" fill="rgb(248,212,6)"/><text x="12.1968%" y="95.50"></text></g><g><title>thir_body (11,118,023 samples, 0.75%)</title><rect x="14.2605%" y="53" width="0.7495%" height="15" fill="rgb(208,68,35)"/><text x="14.5105%" y="63.50"></text></g><g><title>mir_const (38,296,761 samples, 2.58%)</title><rect x="12.4285%" y="101" width="2.5817%" height="15" fill="rgb(232,128,0)"/><text x="12.6785%" y="111.50">mi..</text></g><g><title>unsafety_check_result (33,869,483 samples, 2.28%)</title><rect x="12.7270%" y="85" width="2.2833%" height="15" fill="rgb(207,160,47)"/><text x="12.9770%" y="95.50">u..</text></g><g><title>mir_built (30,376,215 samples, 2.05%)</title><rect x="12.9625%" y="69" width="2.0478%" height="15" fill="rgb(228,23,34)"/><text x="13.2125%" y="79.50">m..</text></g><g><title>mir_promoted (51,774,916 samples, 3.49%)</title><rect x="11.5199%" y="133" width="3.4903%" height="15" fill="rgb(218,30,26)"/><text x="11.7699%" y="143.50">mir..</text></g><g><title>mir_const_qualif (40,737,818 samples, 2.75%)</title><rect x="12.2640%" y="117" width="2.7463%" height="15" fill="rgb(220,122,19)"/><text x="12.5140%" y="127.50">mi..</text></g><g><title>MIR_borrow_checking (143,054,883 samples, 9.64%)</title><rect x="5.5153%" y="165" width="9.6438%" height="15" fill="rgb(250,228,42)"/><text x="5.7653%" y="175.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (142,932,350 samples, 9.64%)</title><rect x="5.5235%" y="149" width="9.6355%" height="15" fill="rgb(240,193,28)"/><text x="5.7735%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (44,587,170 samples, 3.01%)</title><rect x="15.1591%" y="165" width="3.0058%" height="15" fill="rgb(216,20,37)"/><text x="15.4091%" y="175.50">MIR..</text></g><g><title>mir_drops_elaborated_and_const_checked (44,437,119 samples, 3.00%)</title><rect x="15.1692%" y="149" width="2.9957%" height="15" fill="rgb(206,188,39)"/><text x="15.4192%" y="159.50">mir..</text></g><g><title>check_mod_attrs (1,732,589 samples, 0.12%)</title><rect x="18.2420%" y="149" width="0.1168%" height="15" fill="rgb(217,207,13)"/><text x="18.4920%" y="159.50"></text></g><g><title>misc_checking_1 (3,308,806 samples, 0.22%)</title><rect x="18.2398%" y="165" width="0.2231%" height="15" fill="rgb(231,73,38)"/><text x="18.4898%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,176,304 samples, 0.15%)</title><rect x="18.4630%" y="149" width="0.1467%" height="15" fill="rgb(225,20,46)"/><text x="18.7130%" y="159.50"></text></g><g><title>check_mod_liveness (1,586,927 samples, 0.11%)</title><rect x="18.5027%" y="133" width="0.1070%" height="15" fill="rgb(210,31,41)"/><text x="18.7527%" y="143.50"></text></g><g><title>misc_checking_2 (4,024,484 samples, 0.27%)</title><rect x="18.4629%" y="165" width="0.2713%" height="15" fill="rgb(221,200,47)"/><text x="18.7129%" y="175.50"></text></g><g><title>match_checking (1,846,090 samples, 0.12%)</title><rect x="18.6097%" y="149" width="0.1245%" height="15" fill="rgb(226,26,5)"/><text x="18.8597%" y="159.50"></text></g><g><title>check_match (1,804,999 samples, 0.12%)</title><rect x="18.6125%" y="133" width="0.1217%" height="15" fill="rgb(249,33,26)"/><text x="18.8625%" y="143.50"></text></g><g><title>mir_for_ctfe (5,186,907 samples, 0.35%)</title><rect x="20.3516%" y="85" width="0.3497%" height="15" fill="rgb(235,183,28)"/><text x="20.6016%" y="95.50"></text></g><g><title>eval_to_allocation_raw (23,221,726 samples, 1.57%)</title><rect x="19.1405%" y="117" width="1.5655%" height="15" fill="rgb(221,5,38)"/><text x="19.3905%" y="127.50"></text></g><g><title>eval_to_allocation_raw (23,215,696 samples, 1.57%)</title><rect x="19.1409%" y="101" width="1.5650%" height="15" fill="rgb(247,18,42)"/><text x="19.3909%" y="111.50"></text></g><g><title>crate_lints (28,288,851 samples, 1.91%)</title><rect x="18.8644%" y="133" width="1.9070%" height="15" fill="rgb(241,131,45)"/><text x="19.1144%" y="143.50">c..</text></g><g><title>lint_checking (33,145,624 samples, 2.23%)</title><rect x="18.8642%" y="149" width="2.2345%" height="15" fill="rgb(249,31,29)"/><text x="19.1142%" y="159.50">l..</text></g><g><title>module_lints (4,853,133 samples, 0.33%)</title><rect x="20.7715%" y="133" width="0.3272%" height="15" fill="rgb(225,111,53)"/><text x="21.0215%" y="143.50"></text></g><g><title>lint_mod (4,842,603 samples, 0.33%)</title><rect x="20.7722%" y="117" width="0.3265%" height="15" fill="rgb(238,160,17)"/><text x="21.0222%" y="127.50"></text></g><g><title>privacy_access_levels (2,443,937 samples, 0.16%)</title><rect x="21.0986%" y="149" width="0.1648%" height="15" fill="rgb(214,148,48)"/><text x="21.3486%" y="159.50"></text></g><g><title>privacy_checking_modules (3,822,912 samples, 0.26%)</title><rect x="21.2634%" y="149" width="0.2577%" height="15" fill="rgb(232,36,49)"/><text x="21.5134%" y="159.50"></text></g><g><title>check_mod_privacy (3,817,612 samples, 0.26%)</title><rect x="21.2637%" y="133" width="0.2574%" height="15" fill="rgb(209,103,24)"/><text x="21.5137%" y="143.50"></text></g><g><title>misc_checking_3 (41,361,265 samples, 2.79%)</title><rect x="18.7342%" y="165" width="2.7883%" height="15" fill="rgb(229,88,8)"/><text x="18.9842%" y="175.50">mi..</text></g><g><title>impl_trait_ref (1,516,778 samples, 0.10%)</title><rect x="21.6483%" y="101" width="0.1023%" height="15" fill="rgb(213,181,19)"/><text x="21.8983%" y="111.50"></text></g><g><title>coherent_trait (3,572,279 samples, 0.24%)</title><rect x="21.5308%" y="133" width="0.2408%" height="15" fill="rgb(254,191,54)"/><text x="21.7808%" y="143.50"></text></g><g><title>specialization_graph_of (3,475,888 samples, 0.23%)</title><rect x="21.5373%" y="117" width="0.2343%" height="15" fill="rgb(241,83,37)"/><text x="21.7873%" y="127.50"></text></g><g><title>coherence_checking (3,634,630 samples, 0.25%)</title><rect x="21.5296%" y="149" width="0.2450%" height="15" fill="rgb(233,36,39)"/><text x="21.7796%" y="159.50"></text></g><g><title>evaluate_obligation (6,300,349 samples, 0.42%)</title><rect x="56.7541%" y="101" width="0.4247%" height="15" fill="rgb(226,3,54)"/><text x="57.0041%" y="111.50"></text></g><g><title>item_bodies_checking (526,696,404 samples, 35.51%)</title><rect x="21.7766%" y="149" width="35.5064%" height="15" fill="rgb(245,192,40)"/><text x="22.0266%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (526,692,564 samples, 35.51%)</title><rect x="21.7768%" y="133" width="35.5061%" height="15" fill="rgb(238,167,29)"/><text x="22.0268%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (526,603,743 samples, 35.50%)</title><rect x="21.7828%" y="117" width="35.5001%" height="15" fill="rgb(232,182,51)"/><text x="22.0328%" y="127.50">typeck</text></g><g><title>mir_borrowck (1,750,801 samples, 0.12%)</title><rect x="57.5433%" y="37" width="0.1180%" height="15" fill="rgb(231,60,39)"/><text x="57.7933%" y="47.50"></text></g><g><title>mir_for_ctfe (2,683,980 samples, 0.18%)</title><rect x="57.4812%" y="69" width="0.1809%" height="15" fill="rgb(208,69,12)"/><text x="57.7312%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,455,269 samples, 0.17%)</title><rect x="57.4966%" y="53" width="0.1655%" height="15" fill="rgb(235,93,37)"/><text x="57.7466%" y="63.50"></text></g><g><title>eval_to_const_value_raw (5,372,367 samples, 0.36%)</title><rect x="57.3768%" y="117" width="0.3622%" height="15" fill="rgb(213,116,39)"/><text x="57.6268%" y="127.50"></text></g><g><title>eval_to_const_value_raw (5,329,266 samples, 0.36%)</title><rect x="57.3797%" y="101" width="0.3593%" height="15" fill="rgb(222,207,29)"/><text x="57.6297%" y="111.50"></text></g><g><title>eval_to_allocation_raw (5,264,246 samples, 0.35%)</title><rect x="57.3841%" y="85" width="0.3549%" height="15" fill="rgb(206,96,30)"/><text x="57.6341%" y="95.50"></text></g><g><title>fn_sig (1,491,728 samples, 0.10%)</title><rect x="57.7390%" y="117" width="0.1006%" height="15" fill="rgb(218,138,4)"/><text x="57.9890%" y="127.50"></text></g><g><title>type_collecting (10,036,811 samples, 0.68%)</title><rect x="57.3351%" y="149" width="0.6766%" height="15" fill="rgb(250,191,14)"/><text x="57.5851%" y="159.50"></text></g><g><title>collect_mod_item_types (10,025,341 samples, 0.68%)</title><rect x="57.3359%" y="133" width="0.6758%" height="15" fill="rgb(239,60,40)"/><text x="57.5859%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,760,926 samples, 0.12%)</title><rect x="58.0499%" y="133" width="0.1187%" height="15" fill="rgb(206,27,48)"/><text x="58.2999%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,757,639 samples, 0.12%)</title><rect x="58.2180%" y="117" width="0.1185%" height="15" fill="rgb(225,35,8)"/><text x="58.4680%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,753,169 samples, 0.12%)</title><rect x="58.2183%" y="101" width="0.1182%" height="15" fill="rgb(250,213,24)"/><text x="58.4683%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,746,609 samples, 0.12%)</title><rect x="58.2188%" y="85" width="0.1177%" height="15" fill="rgb(247,123,22)"/><text x="58.4688%" y="95.50"></text></g><g><title>region_scope_tree (2,722,520 samples, 0.18%)</title><rect x="58.3988%" y="117" width="0.1835%" height="15" fill="rgb(231,138,38)"/><text x="58.6488%" y="127.50"></text></g><g><title>check_item_well_formed (6,244,999 samples, 0.42%)</title><rect x="58.1686%" y="133" width="0.4210%" height="15" fill="rgb(231,145,46)"/><text x="58.4186%" y="143.50"></text></g><g><title>analysis (789,693,027 samples, 53.24%)</title><rect x="5.3806%" y="181" width="53.2358%" height="15" fill="rgb(251,118,11)"/><text x="5.6306%" y="191.50">analysis</text></g><g><title>type_check_crate (550,246,224 samples, 37.09%)</title><rect x="21.5225%" y="165" width="37.0939%" height="15" fill="rgb(217,147,25)"/><text x="21.7725%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,958,088 samples, 0.60%)</title><rect x="58.0125%" y="149" width="0.6039%" height="15" fill="rgb(247,81,37)"/><text x="58.2625%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,193,923 samples, 0.28%)</title><rect x="59.4175%" y="149" width="0.2827%" height="15" fill="rgb(209,12,38)"/><text x="59.6675%" y="159.50"></text></g><g><title>codegen_module (15,622,262 samples, 1.05%)</title><rect x="58.6904%" y="165" width="1.0531%" height="15" fill="rgb(227,1,9)"/><text x="58.9404%" y="175.50"></text></g><g><title>optimized_mir (3,298,614 samples, 0.22%)</title><rect x="59.8701%" y="117" width="0.2224%" height="15" fill="rgb(248,47,43)"/><text x="60.1201%" y="127.50"></text></g><g><title>resolve_instance (3,565,543 samples, 0.24%)</title><rect x="60.0924%" y="117" width="0.2404%" height="15" fill="rgb(221,10,30)"/><text x="60.3424%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (9,045,459 samples, 0.61%)</title><rect x="59.7457%" y="133" width="0.6098%" height="15" fill="rgb(210,229,1)"/><text x="59.9957%" y="143.50"></text></g><g><title>monomorphization_collector (9,102,719 samples, 0.61%)</title><rect x="59.7455%" y="149" width="0.6136%" height="15" fill="rgb(222,148,37)"/><text x="59.9955%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (10,063,090 samples, 0.68%)</title><rect x="59.7438%" y="165" width="0.6784%" height="15" fill="rgb(234,67,33)"/><text x="59.9938%" y="175.50"></text></g><g><title>codegen_crate (26,802,995 samples, 1.81%)</title><rect x="58.6169%" y="181" width="1.8069%" height="15" fill="rgb(247,98,35)"/><text x="58.8669%" y="191.50">c..</text></g><g><title>codegen_module_optimize (101,930,052 samples, 6.87%)</title><rect x="60.4237%" y="181" width="6.8714%" height="15" fill="rgb(247,138,52)"/><text x="60.6737%" y="191.50">codegen_m..</text></g><g><title>LLVM_module_optimize (88,722,488 samples, 5.98%)</title><rect x="61.3141%" y="165" width="5.9811%" height="15" fill="rgb(213,79,30)"/><text x="61.5641%" y="175.50">LLVM_mod..</text></g><g><title>LLVM_lto_optimize (44,160,982 samples, 2.98%)</title><rect x="67.7228%" y="165" width="2.9770%" height="15" fill="rgb(246,177,23)"/><text x="67.9728%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen (79,639,758 samples, 5.37%)</title><rect x="70.6998%" y="165" width="5.3688%" height="15" fill="rgb(230,62,27)"/><text x="70.9498%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (78,360,574 samples, 5.28%)</title><rect x="70.7861%" y="149" width="5.2825%" height="15" fill="rgb(216,154,8)"/><text x="71.0361%" y="159.50">LLVM_m..</text></g><g><title>LLVM_thin_lto_import (2,578,607 samples, 0.17%)</title><rect x="76.0686%" y="165" width="0.1738%" height="15" fill="rgb(244,35,45)"/><text x="76.3186%" y="175.50"></text></g><g><title>codegen_module_perform_lto (133,114,320 samples, 8.97%)</title><rect x="67.2952%" y="181" width="8.9737%" height="15" fill="rgb(251,115,12)"/><text x="67.5452%" y="191.50">codegen_modul..</text></g><g><title>macro_expand_crate (220,404,705 samples, 14.86%)</title><rect x="76.3486%" y="165" width="14.8582%" height="15" fill="rgb(240,54,50)"/><text x="76.5986%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (220,390,345 samples, 14.86%)</title><rect x="76.3496%" y="149" width="14.8572%" height="15" fill="rgb(233,84,52)"/><text x="76.5996%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (10,403,474 samples, 0.70%)</title><rect x="91.2380%" y="149" width="0.7013%" height="15" fill="rgb(207,117,47)"/><text x="91.4880%" y="159.50"></text></g><g><title>configure_and_expand (233,763,411 samples, 15.76%)</title><rect x="76.2689%" y="181" width="15.7588%" height="15" fill="rgb(249,43,39)"/><text x="76.5189%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (11,945,461 samples, 0.81%)</title><rect x="91.2223%" y="165" width="0.8053%" height="15" fill="rgb(209,38,44)"/><text x="91.4723%" y="175.50"></text></g><g><title>drop_ast (1,521,517 samples, 0.10%)</title><rect x="92.0276%" y="181" width="0.1026%" height="15" fill="rgb(236,212,23)"/><text x="92.2776%" y="191.50"></text></g><g><title>early_lint_checks (3,698,771 samples, 0.25%)</title><rect x="92.1328%" y="181" width="0.2493%" height="15" fill="rgb(242,79,21)"/><text x="92.3828%" y="191.50"></text></g><g><title>free_global_ctxt (21,031,781 samples, 1.42%)</title><rect x="92.3822%" y="181" width="1.4178%" height="15" fill="rgb(211,96,35)"/><text x="92.6322%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,685,527 samples, 0.11%)</title><rect x="94.6520%" y="149" width="0.1136%" height="15" fill="rgb(253,215,40)"/><text x="94.9020%" y="159.50"></text></g><g><title>optimized_mir (4,685,012 samples, 0.32%)</title><rect x="94.4517%" y="165" width="0.3158%" height="15" fill="rgb(211,81,21)"/><text x="94.7017%" y="175.50"></text></g><g><title>generate_crate_metadata (14,435,429 samples, 0.97%)</title><rect x="93.8000%" y="181" width="0.9731%" height="15" fill="rgb(208,190,38)"/><text x="94.0500%" y="191.50"></text></g><g><title>hir_lowering (17,988,918 samples, 1.21%)</title><rect x="94.7731%" y="181" width="1.2127%" height="15" fill="rgb(235,213,38)"/><text x="95.0231%" y="191.50"></text></g><g><title>finish_ongoing_codegen (45,694,733 samples, 3.08%)</title><rect x="95.9874%" y="165" width="3.0804%" height="15" fill="rgb(237,122,38)"/><text x="96.2374%" y="175.50">fin..</text></g><g><title>link_crate (6,343,450 samples, 0.43%)</title><rect x="99.0679%" y="165" width="0.4276%" height="15" fill="rgb(244,218,35)"/><text x="99.3179%" y="175.50"></text></g><g><title>link_binary (6,292,479 samples, 0.42%)</title><rect x="99.0713%" y="149" width="0.4242%" height="15" fill="rgb(240,68,47)"/><text x="99.3213%" y="159.50"></text></g><g><title>link_rlib (5,359,228 samples, 0.36%)</title><rect x="99.1342%" y="133" width="0.3613%" height="15" fill="rgb(210,16,53)"/><text x="99.3842%" y="143.50"></text></g><g><title>link (52,075,543 samples, 3.51%)</title><rect x="95.9858%" y="181" width="3.5106%" height="15" fill="rgb(235,124,12)"/><text x="96.2358%" y="191.50">link</text></g><g><title>parse_crate (3,683,441 samples, 0.25%)</title><rect x="99.4964%" y="181" width="0.2483%" height="15" fill="rgb(224,169,11)"/><text x="99.7464%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,142,463 samples, 0.14%)</title><rect x="99.7638%" y="181" width="0.1444%" height="15" fill="rgb(250,166,2)"/><text x="100.0138%" y="191.50"></text></g><g><title>all (1,483,386,374 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,483,386,374 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>