<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="197.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="197.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (97,374,373 samples, 22.66%)</title><rect x="0.1467%" y="133" width="22.6577%" height="15" fill="rgb(227,0,7)"/><text x="0.3967%" y="143.50">LLVM_passes</text></g><g><title>mir_const (2,061,821 samples, 0.48%)</title><rect x="23.9696%" y="69" width="0.4798%" height="15" fill="rgb(217,0,24)"/><text x="24.2196%" y="79.50"></text></g><g><title>unsafety_check_result (1,764,788 samples, 0.41%)</title><rect x="24.0387%" y="53" width="0.4106%" height="15" fill="rgb(221,193,54)"/><text x="24.2887%" y="63.50"></text></g><g><title>mir_built (1,560,726 samples, 0.36%)</title><rect x="24.0862%" y="37" width="0.3632%" height="15" fill="rgb(248,212,6)"/><text x="24.3362%" y="47.50"></text></g><g><title>mir_promoted (2,417,045 samples, 0.56%)</title><rect x="23.8909%" y="85" width="0.5624%" height="15" fill="rgb(208,68,35)"/><text x="24.1409%" y="95.50"></text></g><g><title>type_op_prove_predicate (645,565 samples, 0.15%)</title><rect x="24.5311%" y="85" width="0.1502%" height="15" fill="rgb(232,128,0)"/><text x="24.7811%" y="95.50"></text></g><g><title>MIR_borrow_checking (7,814,807 samples, 1.82%)</title><rect x="22.8646%" y="117" width="1.8184%" height="15" fill="rgb(207,160,47)"/><text x="23.1146%" y="127.50">M..</text></g><g><title>mir_borrowck (7,779,487 samples, 1.81%)</title><rect x="22.8728%" y="101" width="1.8102%" height="15" fill="rgb(228,23,34)"/><text x="23.1228%" y="111.50">m..</text></g><g><title>codegen_fn_attrs (437,725 samples, 0.10%)</title><rect x="24.7777%" y="85" width="0.1019%" height="15" fill="rgb(218,30,26)"/><text x="25.0277%" y="95.50"></text></g><g><title>check_mod_attrs (658,837 samples, 0.15%)</title><rect x="24.7263%" y="101" width="0.1533%" height="15" fill="rgb(220,122,19)"/><text x="24.9763%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (452,035 samples, 0.11%)</title><rect x="24.9170%" y="101" width="0.1052%" height="15" fill="rgb(250,228,42)"/><text x="25.1670%" y="111.50"></text></g><g><title>misc_checking_1 (1,364,125 samples, 0.32%)</title><rect x="24.7199%" y="117" width="0.3174%" height="15" fill="rgb(240,193,28)"/><text x="24.9699%" y="127.50"></text></g><g><title>crate_lints (1,720,329 samples, 0.40%)</title><rect x="25.2169%" y="85" width="0.4003%" height="15" fill="rgb(216,20,37)"/><text x="25.4669%" y="95.50"></text></g><g><title>type_of (1,048,397 samples, 0.24%)</title><rect x="25.3733%" y="69" width="0.2439%" height="15" fill="rgb(206,188,39)"/><text x="25.6233%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (817,296 samples, 0.19%)</title><rect x="25.4271%" y="53" width="0.1902%" height="15" fill="rgb(217,207,13)"/><text x="25.6771%" y="63.50"></text></g><g><title>lint_checking (1,937,812 samples, 0.45%)</title><rect x="25.2166%" y="101" width="0.4509%" height="15" fill="rgb(231,73,38)"/><text x="25.4666%" y="111.50"></text></g><g><title>misc_checking_3 (2,781,750 samples, 0.65%)</title><rect x="25.1241%" y="117" width="0.6473%" height="15" fill="rgb(225,20,46)"/><text x="25.3741%" y="127.50"></text></g><g><title>impl_parent (3,629,038 samples, 0.84%)</title><rect x="27.2571%" y="53" width="0.8444%" height="15" fill="rgb(210,31,41)"/><text x="27.5071%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,880,301 samples, 0.44%)</title><rect x="27.6640%" y="37" width="0.4375%" height="15" fill="rgb(221,200,47)"/><text x="27.9140%" y="47.50"></text></g><g><title>impl_trait_ref (8,418,075 samples, 1.96%)</title><rect x="28.1015%" y="53" width="1.9588%" height="15" fill="rgb(226,26,5)"/><text x="28.3515%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,708,457 samples, 1.56%)</title><rect x="28.4993%" y="37" width="1.5610%" height="15" fill="rgb(249,33,26)"/><text x="28.7493%" y="47.50"></text></g><g><title>trait_impls_of (1,350,174 samples, 0.31%)</title><rect x="30.0651%" y="53" width="0.3142%" height="15" fill="rgb(235,183,28)"/><text x="30.3151%" y="63.50"></text></g><g><title>coherent_trait (19,743,878 samples, 4.59%)</title><rect x="25.7853%" y="85" width="4.5941%" height="15" fill="rgb(221,5,38)"/><text x="26.0353%" y="95.50">coher..</text></g><g><title>specialization_graph_of (19,341,184 samples, 4.50%)</title><rect x="25.8790%" y="69" width="4.5004%" height="15" fill="rgb(247,18,42)"/><text x="26.1290%" y="79.50">speci..</text></g><g><title>coherence_checking (19,823,980 samples, 4.61%)</title><rect x="25.7794%" y="101" width="4.6128%" height="15" fill="rgb(241,131,45)"/><text x="26.0294%" y="111.50">coher..</text></g><g><title>item_bodies_checking (8,412,403 samples, 1.96%)</title><rect x="30.4024%" y="101" width="1.9574%" height="15" fill="rgb(249,31,29)"/><text x="30.6524%" y="111.50">i..</text></g><g><title>typeck_item_bodies (8,410,113 samples, 1.96%)</title><rect x="30.4029%" y="85" width="1.9569%" height="15" fill="rgb(225,111,53)"/><text x="30.6529%" y="95.50">t..</text></g><g><title>typeck (8,383,813 samples, 1.95%)</title><rect x="30.4090%" y="69" width="1.9508%" height="15" fill="rgb(238,160,17)"/><text x="30.6590%" y="79.50">t..</text></g><g><title>item_types_checking (524,855 samples, 0.12%)</title><rect x="32.3598%" y="101" width="0.1221%" height="15" fill="rgb(214,148,48)"/><text x="32.6098%" y="111.50"></text></g><g><title>check_mod_item_types (522,225 samples, 0.12%)</title><rect x="32.3604%" y="85" width="0.1215%" height="15" fill="rgb(232,36,49)"/><text x="32.6104%" y="95.50"></text></g><g><title>fn_sig (481,855 samples, 0.11%)</title><rect x="32.5509%" y="69" width="0.1121%" height="15" fill="rgb(209,103,24)"/><text x="32.8009%" y="79.50"></text></g><g><title>named_region_map (458,074 samples, 0.11%)</title><rect x="32.6867%" y="53" width="0.1066%" height="15" fill="rgb(229,88,8)"/><text x="32.9367%" y="63.50"></text></g><g><title>generics_of (576,256 samples, 0.13%)</title><rect x="32.6631%" y="69" width="0.1341%" height="15" fill="rgb(213,181,19)"/><text x="32.9131%" y="79.50"></text></g><g><title>predicates_of (502,995 samples, 0.12%)</title><rect x="32.8198%" y="69" width="0.1170%" height="15" fill="rgb(254,191,54)"/><text x="33.0698%" y="79.50"></text></g><g><title>predicates_defined_on (453,314 samples, 0.11%)</title><rect x="32.8313%" y="53" width="0.1055%" height="15" fill="rgb(241,83,37)"/><text x="33.0813%" y="63.50"></text></g><g><title>type_collecting (2,048,063 samples, 0.48%)</title><rect x="32.4821%" y="101" width="0.4766%" height="15" fill="rgb(233,36,39)"/><text x="32.7321%" y="111.50"></text></g><g><title>collect_mod_item_types (2,032,693 samples, 0.47%)</title><rect x="32.4857%" y="85" width="0.4730%" height="15" fill="rgb(226,3,54)"/><text x="32.7357%" y="95.50"></text></g><g><title>object_safety_violations (462,785 samples, 0.11%)</title><rect x="33.2022%" y="69" width="0.1077%" height="15" fill="rgb(245,192,40)"/><text x="33.4522%" y="79.50"></text></g><g><title>check_impl_item_well_formed (1,695,767 samples, 0.39%)</title><rect x="32.9785%" y="85" width="0.3946%" height="15" fill="rgb(238,167,29)"/><text x="33.2285%" y="95.50"></text></g><g><title>analysis (46,545,383 samples, 10.83%)</title><rect x="22.8044%" y="133" width="10.8305%" height="15" fill="rgb(232,182,51)"/><text x="23.0544%" y="143.50">analysis</text></g><g><title>type_check_crate (33,794,243 samples, 7.86%)</title><rect x="25.7714%" y="117" width="7.8634%" height="15" fill="rgb(231,60,39)"/><text x="26.0214%" y="127.50">type_check_..</text></g><g><title>wf_checking (2,903,912 samples, 0.68%)</title><rect x="32.9591%" y="101" width="0.6757%" height="15" fill="rgb(208,69,12)"/><text x="33.2091%" y="111.50"></text></g><g><title>check_item_well_formed (1,124,725 samples, 0.26%)</title><rect x="33.3731%" y="85" width="0.2617%" height="15" fill="rgb(235,93,37)"/><text x="33.6231%" y="95.50"></text></g><g><title>layout_of (501,595 samples, 0.12%)</title><rect x="35.2095%" y="69" width="0.1167%" height="15" fill="rgb(213,116,39)"/><text x="35.4595%" y="79.50"></text></g><g><title>layout_of (630,817 samples, 0.15%)</title><rect x="35.1914%" y="85" width="0.1468%" height="15" fill="rgb(222,207,29)"/><text x="35.4414%" y="95.50"></text></g><g><title>fn_abi_of_instance (1,935,180 samples, 0.45%)</title><rect x="34.9475%" y="101" width="0.4503%" height="15" fill="rgb(206,96,30)"/><text x="35.1975%" y="111.50"></text></g><g><title>codegen_module (7,018,057 samples, 1.63%)</title><rect x="33.8579%" y="117" width="1.6330%" height="15" fill="rgb(218,138,4)"/><text x="34.1079%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (808,438 samples, 0.19%)</title><rect x="35.9845%" y="53" width="0.1881%" height="15" fill="rgb(250,191,14)"/><text x="36.2345%" y="63.50"></text></g><g><title>optimized_mir (2,921,532 samples, 0.68%)</title><rect x="35.6363%" y="69" width="0.6798%" height="15" fill="rgb(239,60,40)"/><text x="35.8863%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (4,247,597 samples, 0.99%)</title><rect x="35.4958%" y="85" width="0.9884%" height="15" fill="rgb(206,27,48)"/><text x="35.7458%" y="95.50"></text></g><g><title>vtable_entries (459,633 samples, 0.11%)</title><rect x="36.3772%" y="69" width="0.1070%" height="15" fill="rgb(225,35,8)"/><text x="36.6272%" y="79.50"></text></g><g><title>monomorphization_collector (4,289,568 samples, 1.00%)</title><rect x="35.4953%" y="101" width="0.9981%" height="15" fill="rgb(250,213,24)"/><text x="35.7453%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (4,864,974 samples, 1.13%)</title><rect x="35.4913%" y="117" width="1.1320%" height="15" fill="rgb(247,123,22)"/><text x="35.7413%" y="127.50"></text></g><g><title>partition_and_assert_distinct_symbols (557,966 samples, 0.13%)</title><rect x="36.4935%" y="101" width="0.1298%" height="15" fill="rgb(231,138,38)"/><text x="36.7435%" y="111.50"></text></g><g><title>codegen_crate (12,909,003 samples, 3.00%)</title><rect x="33.6362%" y="133" width="3.0037%" height="15" fill="rgb(231,145,46)"/><text x="33.8862%" y="143.50">cod..</text></g><g><title>codegen_module_optimize (50,027,161 samples, 11.64%)</title><rect x="36.6400%" y="133" width="11.6406%" height="15" fill="rgb(251,118,11)"/><text x="36.8900%" y="143.50">codegen_module_op..</text></g><g><title>LLVM_module_optimize (40,823,619 samples, 9.50%)</title><rect x="38.7815%" y="117" width="9.4991%" height="15" fill="rgb(217,147,25)"/><text x="39.0315%" y="127.50">LLVM_module_op..</text></g><g><title>LLVM_lto_optimize (42,587,059 samples, 9.91%)</title><rect x="49.2493%" y="117" width="9.9094%" height="15" fill="rgb(247,81,37)"/><text x="49.4993%" y="127.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (56,142,819 samples, 13.06%)</title><rect x="59.1587%" y="117" width="13.0637%" height="15" fill="rgb(209,12,38)"/><text x="59.4087%" y="127.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (55,505,880 samples, 12.92%)</title><rect x="59.3069%" y="101" width="12.9154%" height="15" fill="rgb(227,1,9)"/><text x="59.5569%" y="111.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (1,008,330 samples, 0.23%)</title><rect x="72.2223%" y="117" width="0.2346%" height="15" fill="rgb(248,47,43)"/><text x="72.4723%" y="127.50"></text></g><g><title>codegen_module_perform_lto (104,254,608 samples, 24.26%)</title><rect x="48.2806%" y="133" width="24.2586%" height="15" fill="rgb(221,10,30)"/><text x="48.5306%" y="143.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,316,904 samples, 0.31%)</title><rect x="75.2531%" y="85" width="0.3064%" height="15" fill="rgb(210,229,1)"/><text x="75.5031%" y="95.50"></text></g><g><title>metadata_register_crate (441,975 samples, 0.10%)</title><rect x="75.4567%" y="69" width="0.1028%" height="15" fill="rgb(222,148,37)"/><text x="75.7067%" y="79.50"></text></g><g><title>macro_expand_crate (12,958,063 samples, 3.02%)</title><rect x="72.6110%" y="117" width="3.0152%" height="15" fill="rgb(234,67,33)"/><text x="72.8610%" y="127.50">mac..</text></g><g><title>expand_crate (12,948,363 samples, 3.01%)</title><rect x="72.6132%" y="101" width="3.0129%" height="15" fill="rgb(247,98,35)"/><text x="72.8632%" y="111.50">exp..</text></g><g><title>late_resolve_crate (1,134,473 samples, 0.26%)</title><rect x="75.6855%" y="101" width="0.2640%" height="15" fill="rgb(247,138,52)"/><text x="75.9355%" y="111.50"></text></g><g><title>configure_and_expand (14,710,913 samples, 3.42%)</title><rect x="72.5392%" y="133" width="3.4230%" height="15" fill="rgb(213,79,30)"/><text x="72.7892%" y="143.50">con..</text></g><g><title>resolve_crate (1,410,856 samples, 0.33%)</title><rect x="75.6339%" y="117" width="0.3283%" height="15" fill="rgb(246,177,23)"/><text x="75.8839%" y="127.50"></text></g><g><title>free_global_ctxt (4,115,226 samples, 0.96%)</title><rect x="76.0317%" y="133" width="0.9576%" height="15" fill="rgb(230,62,27)"/><text x="76.2817%" y="143.50"></text></g><g><title>optimized_mir (612,376 samples, 0.14%)</title><rect x="77.3687%" y="117" width="0.1425%" height="15" fill="rgb(216,154,8)"/><text x="77.6187%" y="127.50"></text></g><g><title>generate_crate_metadata (2,276,895 samples, 0.53%)</title><rect x="76.9892%" y="133" width="0.5298%" height="15" fill="rgb(244,35,45)"/><text x="77.2392%" y="143.50"></text></g><g><title>hir_lowering (3,590,159 samples, 0.84%)</title><rect x="77.5190%" y="133" width="0.8354%" height="15" fill="rgb(251,115,12)"/><text x="77.7690%" y="143.50"></text></g><g><title>finish_ongoing_codegen (88,792,539 samples, 20.66%)</title><rect x="78.3578%" y="117" width="20.6608%" height="15" fill="rgb(240,54,50)"/><text x="78.6078%" y="127.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,376,985 samples, 0.32%)</title><rect x="99.0186%" y="117" width="0.3204%" height="15" fill="rgb(233,84,52)"/><text x="99.2686%" y="127.50"></text></g><g><title>link_binary (1,346,265 samples, 0.31%)</title><rect x="99.0258%" y="101" width="0.3133%" height="15" fill="rgb(207,117,47)"/><text x="99.2758%" y="111.50"></text></g><g><title>link_rlib (997,271 samples, 0.23%)</title><rect x="99.1070%" y="85" width="0.2321%" height="15" fill="rgb(249,43,39)"/><text x="99.3570%" y="95.50"></text></g><g><title>link (90,191,904 samples, 20.99%)</title><rect x="78.3544%" y="133" width="20.9864%" height="15" fill="rgb(209,38,44)"/><text x="78.6044%" y="143.50">link</text></g><g><title>self_profile_alloc_query_strings (1,922,681 samples, 0.45%)</title><rect x="99.4321%" y="133" width="0.4474%" height="15" fill="rgb(236,212,23)"/><text x="99.6821%" y="143.50"></text></g><g><title>all (429,763,576 samples, 100%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="175.50"></text></g><g><title>rustc (429,763,576 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="159.50">rustc</text></g></svg></svg>