<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,448,686,616 samples, 23.25%)</title><rect x="0.1625%" y="149" width="23.2524%" height="15" fill="rgb(227,0,7)"/><text x="0.4125%" y="159.50">LLVM_passes</text></g><g><title>thir_body (148,900,604 samples, 0.22%)</title><rect x="29.2414%" y="37" width="0.2241%" height="15" fill="rgb(217,0,24)"/><text x="29.4914%" y="47.50"></text></g><g><title>mir_const (1,107,178,339 samples, 1.67%)</title><rect x="27.8114%" y="85" width="1.6665%" height="15" fill="rgb(221,193,54)"/><text x="28.0614%" y="95.50"></text></g><g><title>unsafety_check_result (902,923,159 samples, 1.36%)</title><rect x="28.1188%" y="69" width="1.3590%" height="15" fill="rgb(248,212,6)"/><text x="28.3688%" y="79.50"></text></g><g><title>mir_built (809,746,758 samples, 1.22%)</title><rect x="28.2591%" y="53" width="1.2188%" height="15" fill="rgb(208,68,35)"/><text x="28.5091%" y="63.50"></text></g><g><title>mir_promoted (1,320,526,053 samples, 1.99%)</title><rect x="27.5388%" y="101" width="1.9876%" height="15" fill="rgb(232,128,0)"/><text x="27.7888%" y="111.50">m..</text></g><g><title>MIR_borrow_checking (4,067,627,760 samples, 6.12%)</title><rect x="23.5270%" y="133" width="6.1223%" height="15" fill="rgb(207,160,47)"/><text x="23.7770%" y="143.50">MIR_borr..</text></g><g><title>mir_borrowck (3,993,085,641 samples, 6.01%)</title><rect x="23.6392%" y="117" width="6.0101%" height="15" fill="rgb(228,23,34)"/><text x="23.8892%" y="127.50">mir_borr..</text></g><g><title>codegen_fn_attrs (127,871,077 samples, 0.19%)</title><rect x="29.9414%" y="101" width="0.1925%" height="15" fill="rgb(218,30,26)"/><text x="30.1914%" y="111.50"></text></g><g><title>check_mod_attrs (231,617,491 samples, 0.35%)</title><rect x="29.7853%" y="117" width="0.3486%" height="15" fill="rgb(220,122,19)"/><text x="30.0353%" y="127.50"></text></g><g><title>check_mod_const_bodies (91,839,561 samples, 0.14%)</title><rect x="30.1339%" y="117" width="0.1382%" height="15" fill="rgb(250,228,42)"/><text x="30.3839%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (103,914,434 samples, 0.16%)</title><rect x="30.3547%" y="117" width="0.1564%" height="15" fill="rgb(240,193,28)"/><text x="30.6047%" y="127.50"></text></g><g><title>misc_checking_1 (484,868,679 samples, 0.73%)</title><rect x="29.7851%" y="133" width="0.7298%" height="15" fill="rgb(216,20,37)"/><text x="30.0351%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (132,615,350 samples, 0.20%)</title><rect x="30.5149%" y="117" width="0.1996%" height="15" fill="rgb(206,188,39)"/><text x="30.7649%" y="127.50"></text></g><g><title>check_mod_liveness (97,506,447 samples, 0.15%)</title><rect x="30.5677%" y="101" width="0.1468%" height="15" fill="rgb(217,207,13)"/><text x="30.8177%" y="111.50"></text></g><g><title>misc_checking_2 (294,143,359 samples, 0.44%)</title><rect x="30.5149%" y="133" width="0.4427%" height="15" fill="rgb(231,73,38)"/><text x="30.7649%" y="143.50"></text></g><g><title>match_checking (161,524,279 samples, 0.24%)</title><rect x="30.7145%" y="117" width="0.2431%" height="15" fill="rgb(225,20,46)"/><text x="30.9645%" y="127.50"></text></g><g><title>check_match (137,888,123 samples, 0.21%)</title><rect x="30.7501%" y="101" width="0.2075%" height="15" fill="rgb(210,31,41)"/><text x="31.0001%" y="111.50"></text></g><g><title>check_private_in_public (105,114,827 samples, 0.16%)</title><rect x="30.9576%" y="117" width="0.1582%" height="15" fill="rgb(221,200,47)"/><text x="31.2076%" y="127.50"></text></g><g><title>death_checking (77,005,458 samples, 0.12%)</title><rect x="31.1158%" y="117" width="0.1159%" height="15" fill="rgb(226,26,5)"/><text x="31.3658%" y="127.50"></text></g><g><title>crate_lints (100,971,121 samples, 0.15%)</title><rect x="31.2318%" y="101" width="0.1520%" height="15" fill="rgb(249,33,26)"/><text x="31.4818%" y="111.50"></text></g><g><title>lint_checking (220,075,082 samples, 0.33%)</title><rect x="31.2317%" y="117" width="0.3312%" height="15" fill="rgb(235,183,28)"/><text x="31.4817%" y="127.50"></text></g><g><title>module_lints (119,098,081 samples, 0.18%)</title><rect x="31.3837%" y="101" width="0.1793%" height="15" fill="rgb(221,5,38)"/><text x="31.6337%" y="111.50"></text></g><g><title>lint_mod (119,041,931 samples, 0.18%)</title><rect x="31.3838%" y="85" width="0.1792%" height="15" fill="rgb(247,18,42)"/><text x="31.6338%" y="95.50"></text></g><g><title>privacy_access_levels (229,998,512 samples, 0.35%)</title><rect x="31.5630%" y="117" width="0.3462%" height="15" fill="rgb(241,131,45)"/><text x="31.8130%" y="127.50"></text></g><g><title>privacy_checking_modules (247,608,546 samples, 0.37%)</title><rect x="31.9092%" y="117" width="0.3727%" height="15" fill="rgb(249,31,29)"/><text x="32.1592%" y="127.50"></text></g><g><title>check_mod_privacy (247,576,516 samples, 0.37%)</title><rect x="31.9092%" y="101" width="0.3726%" height="15" fill="rgb(225,111,53)"/><text x="32.1592%" y="111.50"></text></g><g><title>misc_checking_3 (881,828,477 samples, 1.33%)</title><rect x="30.9576%" y="133" width="1.3273%" height="15" fill="rgb(238,160,17)"/><text x="31.2076%" y="143.50"></text></g><g><title>coherent_trait (544,224,542 samples, 0.82%)</title><rect x="32.3261%" y="101" width="0.8191%" height="15" fill="rgb(214,148,48)"/><text x="32.5761%" y="111.50"></text></g><g><title>specialization_graph_of (501,151,407 samples, 0.75%)</title><rect x="32.3909%" y="85" width="0.7543%" height="15" fill="rgb(232,36,49)"/><text x="32.6409%" y="95.50"></text></g><g><title>coherence_checking (549,076,075 samples, 0.83%)</title><rect x="32.3260%" y="117" width="0.8264%" height="15" fill="rgb(209,103,24)"/><text x="32.5760%" y="127.50"></text></g><g><title>typeck (262,814,099 samples, 0.40%)</title><rect x="38.9872%" y="69" width="0.3956%" height="15" fill="rgb(229,88,8)"/><text x="39.2372%" y="79.50"></text></g><g><title>item_bodies_checking (4,132,124,095 samples, 6.22%)</title><rect x="33.1824%" y="117" width="6.2194%" height="15" fill="rgb(213,181,19)"/><text x="33.4324%" y="127.50">item_bod..</text></g><g><title>typeck_item_bodies (4,132,121,175 samples, 6.22%)</title><rect x="33.1824%" y="101" width="6.2194%" height="15" fill="rgb(254,191,54)"/><text x="33.4324%" y="111.50">typeck_i..</text></g><g><title>typeck (4,059,828,598 samples, 6.11%)</title><rect x="33.2912%" y="85" width="6.1106%" height="15" fill="rgb(241,83,37)"/><text x="33.5412%" y="95.50">typeck</text></g><g><title>item_types_checking (578,278,437 samples, 0.87%)</title><rect x="39.4018%" y="117" width="0.8704%" height="15" fill="rgb(233,36,39)"/><text x="39.6518%" y="127.50"></text></g><g><title>check_mod_item_types (578,235,536 samples, 0.87%)</title><rect x="39.4018%" y="101" width="0.8703%" height="15" fill="rgb(226,3,54)"/><text x="39.6518%" y="111.50"></text></g><g><title>fn_sig (109,536,994 samples, 0.16%)</title><rect x="40.4231%" y="85" width="0.1649%" height="15" fill="rgb(245,192,40)"/><text x="40.6731%" y="95.50"></text></g><g><title>lint_levels (79,980,491 samples, 0.12%)</title><rect x="40.6657%" y="37" width="0.1204%" height="15" fill="rgb(238,167,29)"/><text x="40.9157%" y="47.50"></text></g><g><title>is_late_bound_map (85,038,515 samples, 0.13%)</title><rect x="40.6581%" y="69" width="0.1280%" height="15" fill="rgb(232,182,51)"/><text x="40.9081%" y="79.50"></text></g><g><title>resolve_lifetimes (84,711,368 samples, 0.13%)</title><rect x="40.6586%" y="53" width="0.1275%" height="15" fill="rgb(231,60,39)"/><text x="40.9086%" y="63.50"></text></g><g><title>named_region_map (83,503,781 samples, 0.13%)</title><rect x="40.7861%" y="69" width="0.1257%" height="15" fill="rgb(208,69,12)"/><text x="41.0361%" y="79.50"></text></g><g><title>resolve_lifetimes (72,138,053 samples, 0.11%)</title><rect x="40.8032%" y="53" width="0.1086%" height="15" fill="rgb(235,93,37)"/><text x="41.0532%" y="63.50"></text></g><g><title>generics_of (218,124,614 samples, 0.33%)</title><rect x="40.5880%" y="85" width="0.3283%" height="15" fill="rgb(213,116,39)"/><text x="40.8380%" y="95.50"></text></g><g><title>predicates_of (82,489,475 samples, 0.12%)</title><rect x="40.9195%" y="85" width="0.1242%" height="15" fill="rgb(222,207,29)"/><text x="41.1695%" y="95.50"></text></g><g><title>late_bound_vars_map (96,802,221 samples, 0.15%)</title><rect x="41.0808%" y="69" width="0.1457%" height="15" fill="rgb(206,96,30)"/><text x="41.3308%" y="79.50"></text></g><g><title>resolve_lifetimes (96,039,492 samples, 0.14%)</title><rect x="41.0819%" y="53" width="0.1446%" height="15" fill="rgb(218,138,4)"/><text x="41.3319%" y="63.50"></text></g><g><title>type_collecting (634,608,108 samples, 0.96%)</title><rect x="40.2722%" y="117" width="0.9552%" height="15" fill="rgb(250,191,14)"/><text x="40.5222%" y="127.50"></text></g><g><title>collect_mod_item_types (634,556,758 samples, 0.96%)</title><rect x="40.2723%" y="101" width="0.9551%" height="15" fill="rgb(239,60,40)"/><text x="40.5223%" y="111.50"></text></g><g><title>type_of (121,951,586 samples, 0.18%)</title><rect x="41.0438%" y="85" width="0.1836%" height="15" fill="rgb(206,27,48)"/><text x="41.2938%" y="95.50"></text></g><g><title>evaluate_obligation (78,003,218 samples, 0.12%)</title><rect x="43.5675%" y="85" width="0.1174%" height="15" fill="rgb(225,35,8)"/><text x="43.8175%" y="95.50"></text></g><g><title>param_env (168,613,142 samples, 0.25%)</title><rect x="43.7393%" y="85" width="0.2538%" height="15" fill="rgb(250,213,24)"/><text x="43.9893%" y="95.50"></text></g><g><title>region_scope_tree (117,693,002 samples, 0.18%)</title><rect x="43.9932%" y="85" width="0.1771%" height="15" fill="rgb(247,123,22)"/><text x="44.2432%" y="95.50"></text></g><g><title>check_impl_item_well_formed (1,876,166,434 samples, 2.82%)</title><rect x="41.3471%" y="101" width="2.8239%" height="15" fill="rgb(231,138,38)"/><text x="41.5971%" y="111.50">ch..</text></g><g><title>evaluate_obligation (305,325,308 samples, 0.46%)</title><rect x="44.4941%" y="85" width="0.4596%" height="15" fill="rgb(231,145,46)"/><text x="44.7441%" y="95.50"></text></g><g><title>check_item_well_formed (577,664,119 samples, 0.87%)</title><rect x="44.1710%" y="101" width="0.8695%" height="15" fill="rgb(251,118,11)"/><text x="44.4210%" y="111.50"></text></g><g><title>analysis (14,371,568,578 samples, 21.63%)</title><rect x="23.4149%" y="149" width="21.6312%" height="15" fill="rgb(217,147,25)"/><text x="23.6649%" y="159.50">analysis</text></g><g><title>type_check_crate (8,478,409,679 samples, 12.76%)</title><rect x="32.2849%" y="133" width="12.7612%" height="15" fill="rgb(247,81,37)"/><text x="32.5349%" y="143.50">type_check_crate</text></g><g><title>wf_checking (2,529,951,996 samples, 3.81%)</title><rect x="41.2381%" y="117" width="3.8079%" height="15" fill="rgb(209,12,38)"/><text x="41.4881%" y="127.50">wf_c..</text></g><g><title>fn_abi_of_instance (90,907,987 samples, 0.14%)</title><rect x="45.7400%" y="117" width="0.1368%" height="15" fill="rgb(227,1,9)"/><text x="45.9900%" y="127.50"></text></g><g><title>codegen_module (572,194,239 samples, 0.86%)</title><rect x="45.0479%" y="133" width="0.8612%" height="15" fill="rgb(248,47,43)"/><text x="45.2979%" y="143.50"></text></g><g><title>resolve_instance (80,355,514 samples, 0.12%)</title><rect x="46.1164%" y="85" width="0.1209%" height="15" fill="rgb(221,10,30)"/><text x="46.3664%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (241,949,403 samples, 0.36%)</title><rect x="45.9094%" y="101" width="0.3642%" height="15" fill="rgb(210,229,1)"/><text x="46.1594%" y="111.50"></text></g><g><title>monomorphization_collector (260,418,566 samples, 0.39%)</title><rect x="45.9094%" y="117" width="0.3920%" height="15" fill="rgb(222,148,37)"/><text x="46.1594%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (305,934,527 samples, 0.46%)</title><rect x="45.9091%" y="133" width="0.4605%" height="15" fill="rgb(234,67,33)"/><text x="46.1591%" y="143.50"></text></g><g><title>codegen_crate (879,560,253 samples, 1.32%)</title><rect x="45.0460%" y="149" width="1.3239%" height="15" fill="rgb(247,98,35)"/><text x="45.2960%" y="159.50"></text></g><g><title>LLVM_module_codegen (4,082,699,166 samples, 6.15%)</title><rect x="46.3699%" y="133" width="6.1450%" height="15" fill="rgb(247,138,52)"/><text x="46.6199%" y="143.50">LLVM_mod..</text></g><g><title>LLVM_module_codegen_emit_obj (3,978,176,496 samples, 5.99%)</title><rect x="46.5272%" y="117" width="5.9877%" height="15" fill="rgb(213,79,30)"/><text x="46.7772%" y="127.50">LLVM_mod..</text></g><g><title>codegen_module_optimize (15,448,064,409 samples, 23.25%)</title><rect x="46.3699%" y="149" width="23.2514%" height="15" fill="rgb(246,177,23)"/><text x="46.6199%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (11,365,343,253 samples, 17.11%)</title><rect x="52.5149%" y="133" width="17.1064%" height="15" fill="rgb(230,62,27)"/><text x="52.7649%" y="143.50">LLVM_module_optimize</text></g><g><title>AST_validation (123,204,457 samples, 0.19%)</title><rect x="69.6216%" y="133" width="0.1854%" height="15" fill="rgb(216,154,8)"/><text x="69.8716%" y="143.50"></text></g><g><title>macro_expand_crate (958,218,521 samples, 1.44%)</title><rect x="69.8748%" y="133" width="1.4422%" height="15" fill="rgb(244,35,45)"/><text x="70.1248%" y="143.50"></text></g><g><title>expand_crate (958,199,831 samples, 1.44%)</title><rect x="69.8749%" y="117" width="1.4422%" height="15" fill="rgb(251,115,12)"/><text x="70.1249%" y="127.50"></text></g><g><title>late_resolve_crate (220,153,364 samples, 0.33%)</title><rect x="71.3433%" y="117" width="0.3314%" height="15" fill="rgb(240,54,50)"/><text x="71.5933%" y="127.50"></text></g><g><title>configure_and_expand (1,430,767,955 samples, 2.15%)</title><rect x="69.6213%" y="149" width="2.1535%" height="15" fill="rgb(233,84,52)"/><text x="69.8713%" y="159.50">c..</text></g><g><title>resolve_crate (304,035,118 samples, 0.46%)</title><rect x="71.3172%" y="133" width="0.4576%" height="15" fill="rgb(207,117,47)"/><text x="71.5672%" y="143.50"></text></g><g><title>drop_ast (81,840,532 samples, 0.12%)</title><rect x="71.7748%" y="149" width="0.1232%" height="15" fill="rgb(249,43,39)"/><text x="72.0248%" y="159.50"></text></g><g><title>early_lint_checks (87,135,800 samples, 0.13%)</title><rect x="71.8981%" y="149" width="0.1312%" height="15" fill="rgb(209,38,44)"/><text x="72.1481%" y="159.50"></text></g><g><title>free_global_ctxt (162,618,160 samples, 0.24%)</title><rect x="72.0292%" y="149" width="0.2448%" height="15" fill="rgb(236,212,23)"/><text x="72.2792%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (935,394,280 samples, 1.41%)</title><rect x="74.3761%" y="117" width="1.4079%" height="15" fill="rgb(242,79,21)"/><text x="74.6261%" y="127.50"></text></g><g><title>optimized_mir (1,879,640,302 samples, 2.83%)</title><rect x="72.9680%" y="133" width="2.8291%" height="15" fill="rgb(211,96,35)"/><text x="73.2180%" y="143.50">op..</text></g><g><title>generate_crate_metadata (2,393,068,425 samples, 3.60%)</title><rect x="72.2740%" y="149" width="3.6019%" height="15" fill="rgb(253,215,40)"/><text x="72.5240%" y="159.50">gene..</text></g><g><title>hir_lowering (678,956,976 samples, 1.02%)</title><rect x="75.8759%" y="149" width="1.0219%" height="15" fill="rgb(211,81,21)"/><text x="76.1259%" y="159.50"></text></g><g><title>finish_ongoing_codegen (15,245,405,038 samples, 22.95%)</title><rect x="76.8978%" y="133" width="22.9464%" height="15" fill="rgb(208,190,38)"/><text x="77.1478%" y="143.50">finish_ongoing_codegen</text></g><g><title>link (15,290,641,736 samples, 23.01%)</title><rect x="76.8978%" y="149" width="23.0145%" height="15" fill="rgb(235,213,38)"/><text x="77.1478%" y="159.50">link</text></g><g><title>all (66,439,205,839 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (66,439,205,839 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(244,218,35)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>