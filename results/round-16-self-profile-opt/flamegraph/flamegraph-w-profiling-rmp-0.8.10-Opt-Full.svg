<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (144,456,757 samples, 13.01%)</title><rect x="0.0773%" y="181" width="13.0084%" height="15" fill="rgb(227,0,7)"/><text x="0.3273%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,569,907 samples, 0.14%)</title><rect x="12.9444%" y="165" width="0.1414%" height="15" fill="rgb(217,0,24)"/><text x="13.1944%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,533,497 samples, 0.14%)</title><rect x="12.9477%" y="149" width="0.1381%" height="15" fill="rgb(221,193,54)"/><text x="13.1977%" y="159.50"></text></g><g><title>needs_drop_raw (1,981,021 samples, 0.18%)</title><rect x="16.8055%" y="69" width="0.1784%" height="15" fill="rgb(248,212,6)"/><text x="17.0555%" y="79.50"></text></g><g><title>is_copy_raw (1,661,981 samples, 0.15%)</title><rect x="16.8342%" y="53" width="0.1497%" height="15" fill="rgb(208,68,35)"/><text x="17.0842%" y="63.50"></text></g><g><title>evaluate_obligation (1,462,199 samples, 0.13%)</title><rect x="16.8522%" y="37" width="0.1317%" height="15" fill="rgb(232,128,0)"/><text x="17.1022%" y="47.50"></text></g><g><title>thir_body (2,725,019 samples, 0.25%)</title><rect x="17.0483%" y="69" width="0.2454%" height="15" fill="rgb(207,160,47)"/><text x="17.2983%" y="79.50"></text></g><g><title>mir_const (17,687,666 samples, 1.59%)</title><rect x="15.7036%" y="117" width="1.5928%" height="15" fill="rgb(228,23,34)"/><text x="15.9536%" y="127.50"></text></g><g><title>unsafety_check_result (15,046,139 samples, 1.35%)</title><rect x="15.9415%" y="101" width="1.3549%" height="15" fill="rgb(218,30,26)"/><text x="16.1915%" y="111.50"></text></g><g><title>mir_built (13,188,530 samples, 1.19%)</title><rect x="16.1087%" y="85" width="1.1876%" height="15" fill="rgb(220,122,19)"/><text x="16.3587%" y="95.50"></text></g><g><title>mir_promoted (20,051,821 samples, 1.81%)</title><rect x="15.5227%" y="133" width="1.8057%" height="15" fill="rgb(250,228,42)"/><text x="15.7727%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (2,395,466 samples, 0.22%)</title><rect x="17.4770%" y="133" width="0.2157%" height="15" fill="rgb(240,193,28)"/><text x="17.7270%" y="143.50"></text></g><g><title>MIR_borrow_checking (50,554,733 samples, 4.55%)</title><rect x="13.1412%" y="165" width="4.5525%" height="15" fill="rgb(216,20,37)"/><text x="13.3912%" y="175.50">MIR_b..</text></g><g><title>mir_borrowck (50,305,071 samples, 4.53%)</title><rect x="13.1636%" y="149" width="4.5300%" height="15" fill="rgb(206,188,39)"/><text x="13.4136%" y="159.50">mir_b..</text></g><g><title>check_mod_unstable_api_usage (1,183,273 samples, 0.11%)</title><rect x="17.8779%" y="149" width="0.1066%" height="15" fill="rgb(217,207,13)"/><text x="18.1279%" y="159.50"></text></g><g><title>misc_checking_1 (2,709,051 samples, 0.24%)</title><rect x="17.7519%" y="165" width="0.2440%" height="15" fill="rgb(231,73,38)"/><text x="18.0019%" y="175.50"></text></g><g><title>misc_checking_2 (3,406,789 samples, 0.31%)</title><rect x="17.9959%" y="165" width="0.3068%" height="15" fill="rgb(225,20,46)"/><text x="18.2459%" y="175.50"></text></g><g><title>match_checking (2,393,557 samples, 0.22%)</title><rect x="18.0871%" y="149" width="0.2155%" height="15" fill="rgb(210,31,41)"/><text x="18.3371%" y="159.50"></text></g><g><title>check_match (2,332,137 samples, 0.21%)</title><rect x="18.0926%" y="133" width="0.2100%" height="15" fill="rgb(221,200,47)"/><text x="18.3426%" y="143.50"></text></g><g><title>crate_lints (3,800,603 samples, 0.34%)</title><rect x="18.4216%" y="133" width="0.3422%" height="15" fill="rgb(226,26,5)"/><text x="18.6716%" y="143.50"></text></g><g><title>type_of (1,331,685 samples, 0.12%)</title><rect x="18.6439%" y="117" width="0.1199%" height="15" fill="rgb(249,33,26)"/><text x="18.8939%" y="127.50"></text></g><g><title>lint_checking (5,112,438 samples, 0.46%)</title><rect x="18.4214%" y="149" width="0.4604%" height="15" fill="rgb(235,183,28)"/><text x="18.6714%" y="159.50"></text></g><g><title>module_lints (1,309,985 samples, 0.12%)</title><rect x="18.7638%" y="133" width="0.1180%" height="15" fill="rgb(221,5,38)"/><text x="19.0138%" y="143.50"></text></g><g><title>lint_mod (1,296,135 samples, 0.12%)</title><rect x="18.7651%" y="117" width="0.1167%" height="15" fill="rgb(247,18,42)"/><text x="19.0151%" y="127.50"></text></g><g><title>privacy_checking_modules (1,934,352 samples, 0.17%)</title><rect x="18.9308%" y="149" width="0.1742%" height="15" fill="rgb(241,131,45)"/><text x="19.1808%" y="159.50"></text></g><g><title>check_mod_privacy (1,923,642 samples, 0.17%)</title><rect x="18.9317%" y="133" width="0.1732%" height="15" fill="rgb(249,31,29)"/><text x="19.1817%" y="143.50"></text></g><g><title>misc_checking_3 (8,936,761 samples, 0.80%)</title><rect x="18.3026%" y="165" width="0.8048%" height="15" fill="rgb(225,111,53)"/><text x="18.5526%" y="175.50"></text></g><g><title>impl_parent (2,385,256 samples, 0.21%)</title><rect x="19.4850%" y="101" width="0.2148%" height="15" fill="rgb(238,160,17)"/><text x="19.7350%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,286,685 samples, 0.12%)</title><rect x="19.5839%" y="85" width="0.1159%" height="15" fill="rgb(214,148,48)"/><text x="19.8339%" y="95.50"></text></g><g><title>impl_trait_ref (5,224,073 samples, 0.47%)</title><rect x="19.6998%" y="101" width="0.4704%" height="15" fill="rgb(232,36,49)"/><text x="19.9498%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,115,091 samples, 0.37%)</title><rect x="19.7996%" y="85" width="0.3706%" height="15" fill="rgb(209,103,24)"/><text x="20.0496%" y="95.50"></text></g><g><title>coherent_trait (12,404,561 samples, 1.12%)</title><rect x="19.1233%" y="133" width="1.1170%" height="15" fill="rgb(229,88,8)"/><text x="19.3733%" y="143.50"></text></g><g><title>specialization_graph_of (11,929,426 samples, 1.07%)</title><rect x="19.1660%" y="117" width="1.0743%" height="15" fill="rgb(213,181,19)"/><text x="19.4160%" y="127.50"></text></g><g><title>coherence_checking (12,500,571 samples, 1.13%)</title><rect x="19.1211%" y="149" width="1.1257%" height="15" fill="rgb(254,191,54)"/><text x="19.3711%" y="159.50"></text></g><g><title>evaluate_obligation (6,418,324 samples, 0.58%)</title><rect x="25.4061%" y="101" width="0.5780%" height="15" fill="rgb(241,83,37)"/><text x="25.6561%" y="111.50"></text></g><g><title>typeck (3,040,765 samples, 0.27%)</title><rect x="26.2162%" y="101" width="0.2738%" height="15" fill="rgb(233,36,39)"/><text x="26.4662%" y="111.50"></text></g><g><title>item_bodies_checking (69,383,096 samples, 6.25%)</title><rect x="20.2503%" y="149" width="6.2480%" height="15" fill="rgb(226,3,54)"/><text x="20.5003%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (69,380,396 samples, 6.25%)</title><rect x="20.2505%" y="133" width="6.2478%" height="15" fill="rgb(245,192,40)"/><text x="20.5005%" y="143.50">typeck_i..</text></g><g><title>typeck (69,214,264 samples, 6.23%)</title><rect x="20.2655%" y="117" width="6.2328%" height="15" fill="rgb(238,167,29)"/><text x="20.5155%" y="127.50">typeck</text></g><g><title>type_collecting (3,174,186 samples, 0.29%)</title><rect x="26.5830%" y="149" width="0.2858%" height="15" fill="rgb(232,182,51)"/><text x="26.8330%" y="159.50"></text></g><g><title>collect_mod_item_types (3,152,446 samples, 0.28%)</title><rect x="26.5850%" y="133" width="0.2839%" height="15" fill="rgb(231,60,39)"/><text x="26.8350%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,030,454 samples, 0.18%)</title><rect x="26.9028%" y="133" width="0.1828%" height="15" fill="rgb(208,69,12)"/><text x="27.1528%" y="143.50"></text></g><g><title>analysis (161,103,646 samples, 14.51%)</title><rect x="13.0857%" y="181" width="14.5075%" height="15" fill="rgb(235,93,37)"/><text x="13.3357%" y="191.50">analysis</text></g><g><title>type_check_crate (94,233,998 samples, 8.49%)</title><rect x="19.1074%" y="165" width="8.4858%" height="15" fill="rgb(213,116,39)"/><text x="19.3574%" y="175.50">type_check_c..</text></g><g><title>wf_checking (8,034,121 samples, 0.72%)</title><rect x="26.8698%" y="149" width="0.7235%" height="15" fill="rgb(222,207,29)"/><text x="27.1198%" y="159.50"></text></g><g><title>check_item_well_formed (5,636,920 samples, 0.51%)</title><rect x="27.0856%" y="133" width="0.5076%" height="15" fill="rgb(206,96,30)"/><text x="27.3356%" y="143.50"></text></g><g><title>layout_of (1,507,319 samples, 0.14%)</title><rect x="30.0847%" y="133" width="0.1357%" height="15" fill="rgb(218,138,4)"/><text x="30.3347%" y="143.50"></text></g><g><title>param_env (1,738,943 samples, 0.16%)</title><rect x="30.2204%" y="133" width="0.1566%" height="15" fill="rgb(250,191,14)"/><text x="30.4704%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,023,943 samples, 0.63%)</title><rect x="29.8080%" y="149" width="0.6325%" height="15" fill="rgb(239,60,40)"/><text x="30.0580%" y="159.50"></text></g><g><title>codegen_module (31,086,942 samples, 2.80%)</title><rect x="27.7506%" y="165" width="2.7994%" height="15" fill="rgb(206,27,48)"/><text x="28.0006%" y="175.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,096,761 samples, 0.19%)</title><rect x="31.0611%" y="101" width="0.1888%" height="15" fill="rgb(225,35,8)"/><text x="31.3111%" y="111.50"></text></g><g><title>optimized_mir (5,099,041 samples, 0.46%)</title><rect x="30.7915%" y="117" width="0.4592%" height="15" fill="rgb(250,213,24)"/><text x="31.0415%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,648,029 samples, 0.15%)</title><rect x="31.2961%" y="101" width="0.1484%" height="15" fill="rgb(247,123,22)"/><text x="31.5461%" y="111.50"></text></g><g><title>specialization_graph_of (2,009,424 samples, 0.18%)</title><rect x="31.5086%" y="101" width="0.1809%" height="15" fill="rgb(231,138,38)"/><text x="31.7586%" y="111.50"></text></g><g><title>resolve_instance (5,065,228 samples, 0.46%)</title><rect x="31.2506%" y="117" width="0.4561%" height="15" fill="rgb(231,145,46)"/><text x="31.5006%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (13,672,594 samples, 1.23%)</title><rect x="30.5544%" y="133" width="1.2312%" height="15" fill="rgb(251,118,11)"/><text x="30.8044%" y="143.50"></text></g><g><title>monomorphization_collector (13,753,515 samples, 1.24%)</title><rect x="30.5542%" y="149" width="1.2385%" height="15" fill="rgb(217,147,25)"/><text x="30.8042%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (15,243,532 samples, 1.37%)</title><rect x="30.5505%" y="165" width="1.3727%" height="15" fill="rgb(247,81,37)"/><text x="30.8005%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,448,736 samples, 0.13%)</title><rect x="31.7928%" y="149" width="0.1305%" height="15" fill="rgb(209,12,38)"/><text x="32.0428%" y="159.50"></text></g><g><title>codegen_crate (48,140,476 samples, 4.34%)</title><rect x="27.5941%" y="181" width="4.3351%" height="15" fill="rgb(227,1,9)"/><text x="27.8441%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (268,468,822 samples, 24.18%)</title><rect x="31.9292%" y="181" width="24.1758%" height="15" fill="rgb(248,47,43)"/><text x="32.1792%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (249,270,125 samples, 22.45%)</title><rect x="33.6581%" y="165" width="22.4469%" height="15" fill="rgb(221,10,30)"/><text x="33.9081%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (106,505,546 samples, 9.59%)</title><rect x="57.1663%" y="165" width="9.5909%" height="15" fill="rgb(210,229,1)"/><text x="57.4163%" y="175.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (165,253,762 samples, 14.88%)</title><rect x="66.7572%" y="165" width="14.8812%" height="15" fill="rgb(222,148,37)"/><text x="67.0072%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (163,297,012 samples, 14.71%)</title><rect x="66.9334%" y="149" width="14.7050%" height="15" fill="rgb(234,67,33)"/><text x="67.1834%" y="159.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (5,942,968 samples, 0.54%)</title><rect x="81.6384%" y="165" width="0.5352%" height="15" fill="rgb(247,98,35)"/><text x="81.8884%" y="175.50"></text></g><g><title>codegen_module_perform_lto (290,342,635 samples, 26.15%)</title><rect x="56.1050%" y="181" width="26.1455%" height="15" fill="rgb(247,138,52)"/><text x="56.3550%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,750,132 samples, 0.25%)</title><rect x="85.0334%" y="133" width="0.2477%" height="15" fill="rgb(213,79,30)"/><text x="85.2834%" y="143.50"></text></g><g><title>macro_expand_crate (33,861,294 samples, 3.05%)</title><rect x="82.3064%" y="165" width="3.0492%" height="15" fill="rgb(246,177,23)"/><text x="82.5564%" y="175.50">mac..</text></g><g><title>expand_crate (33,840,104 samples, 3.05%)</title><rect x="82.3083%" y="149" width="3.0473%" height="15" fill="rgb(230,62,27)"/><text x="82.5583%" y="159.50">exp..</text></g><g><title>late_resolve_crate (2,950,024 samples, 0.27%)</title><rect x="85.3920%" y="149" width="0.2657%" height="15" fill="rgb(216,154,8)"/><text x="85.6420%" y="159.50"></text></g><g><title>configure_and_expand (38,055,111 samples, 3.43%)</title><rect x="82.2506%" y="181" width="3.4269%" height="15" fill="rgb(244,35,45)"/><text x="82.5006%" y="191.50">con..</text></g><g><title>resolve_crate (3,499,799 samples, 0.32%)</title><rect x="85.3623%" y="165" width="0.3152%" height="15" fill="rgb(251,115,12)"/><text x="85.6123%" y="175.50"></text></g><g><title>free_global_ctxt (7,263,942 samples, 0.65%)</title><rect x="85.7694%" y="181" width="0.6541%" height="15" fill="rgb(240,54,50)"/><text x="86.0194%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (11,750,129 samples, 1.06%)</title><rect x="87.5321%" y="149" width="1.0581%" height="15" fill="rgb(233,84,52)"/><text x="87.7821%" y="159.50"></text></g><g><title>optimized_mir (19,621,162 samples, 1.77%)</title><rect x="86.8292%" y="165" width="1.7669%" height="15" fill="rgb(207,117,47)"/><text x="87.0792%" y="175.50"></text></g><g><title>generate_crate_metadata (24,260,085 samples, 2.18%)</title><rect x="86.4236%" y="181" width="2.1846%" height="15" fill="rgb(249,43,39)"/><text x="86.6736%" y="191.50">g..</text></g><g><title>hir_lowering (6,429,743 samples, 0.58%)</title><rect x="88.6082%" y="181" width="0.5790%" height="15" fill="rgb(209,38,44)"/><text x="88.8582%" y="191.50"></text></g><g><title>finish_ongoing_codegen (113,520,727 samples, 10.22%)</title><rect x="89.1890%" y="165" width="10.2226%" height="15" fill="rgb(236,212,23)"/><text x="89.4390%" y="175.50">finish_ongoing_..</text></g><g><title>link_crate (2,983,704 samples, 0.27%)</title><rect x="99.4117%" y="165" width="0.2687%" height="15" fill="rgb(242,79,21)"/><text x="99.6617%" y="175.50"></text></g><g><title>link_binary (2,920,723 samples, 0.26%)</title><rect x="99.4173%" y="149" width="0.2630%" height="15" fill="rgb(211,96,35)"/><text x="99.6673%" y="159.50"></text></g><g><title>link_rlib (2,108,414 samples, 0.19%)</title><rect x="99.4905%" y="133" width="0.1899%" height="15" fill="rgb(253,215,40)"/><text x="99.7405%" y="143.50"></text></g><g><title>link (116,540,781 samples, 10.49%)</title><rect x="89.1872%" y="181" width="10.4946%" height="15" fill="rgb(211,81,21)"/><text x="89.4372%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,131,224 samples, 0.19%)</title><rect x="99.7529%" y="181" width="0.1919%" height="15" fill="rgb(208,190,38)"/><text x="100.0029%" y="191.50"></text></g><g><title>all (1,110,486,009 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,110,486,009 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,122,38)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>