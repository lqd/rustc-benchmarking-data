<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (13,596,930 samples, 17.55%)</title><rect x="0.6023%" y="181" width="17.5516%" height="15" fill="rgb(227,0,7)"/><text x="0.8523%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (176,782 samples, 0.23%)</title><rect x="17.9257%" y="165" width="0.2282%" height="15" fill="rgb(217,0,24)"/><text x="18.1757%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (160,772 samples, 0.21%)</title><rect x="17.9464%" y="149" width="0.2075%" height="15" fill="rgb(221,193,54)"/><text x="18.1964%" y="159.50"></text></g><g><title>needs_drop_raw (183,781 samples, 0.24%)</title><rect x="22.6342%" y="69" width="0.2372%" height="15" fill="rgb(248,212,6)"/><text x="22.8842%" y="79.50"></text></g><g><title>is_copy_raw (156,991 samples, 0.20%)</title><rect x="22.6688%" y="53" width="0.2027%" height="15" fill="rgb(208,68,35)"/><text x="22.9188%" y="63.50"></text></g><g><title>evaluate_obligation (129,040 samples, 0.17%)</title><rect x="22.7048%" y="37" width="0.1666%" height="15" fill="rgb(232,128,0)"/><text x="22.9548%" y="47.50"></text></g><g><title>resolve_instance (92,981 samples, 0.12%)</title><rect x="22.8714%" y="69" width="0.1200%" height="15" fill="rgb(207,160,47)"/><text x="23.1214%" y="79.50"></text></g><g><title>thir_body (176,335 samples, 0.23%)</title><rect x="23.0034%" y="69" width="0.2276%" height="15" fill="rgb(228,23,34)"/><text x="23.2534%" y="79.50"></text></g><g><title>mir_const (1,477,557 samples, 1.91%)</title><rect x="21.3931%" y="117" width="1.9073%" height="15" fill="rgb(218,30,26)"/><text x="21.6431%" y="127.50">m..</text></g><g><title>unsafety_check_result (1,199,936 samples, 1.55%)</title><rect x="21.7514%" y="101" width="1.5489%" height="15" fill="rgb(220,122,19)"/><text x="22.0014%" y="111.50"></text></g><g><title>mir_built (1,020,004 samples, 1.32%)</title><rect x="21.9837%" y="85" width="1.3167%" height="15" fill="rgb(250,228,42)"/><text x="22.2337%" y="95.50"></text></g><g><title>mir_promoted (1,684,051 samples, 2.17%)</title><rect x="21.1425%" y="133" width="2.1739%" height="15" fill="rgb(240,193,28)"/><text x="21.3925%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (323,846 samples, 0.42%)</title><rect x="23.3163%" y="133" width="0.4180%" height="15" fill="rgb(216,20,37)"/><text x="23.5663%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (90,470 samples, 0.12%)</title><rect x="23.7344%" y="133" width="0.1168%" height="15" fill="rgb(206,188,39)"/><text x="23.9844%" y="143.50"></text></g><g><title>type_op_normalize_ty (160,102 samples, 0.21%)</title><rect x="23.9027%" y="133" width="0.2067%" height="15" fill="rgb(217,207,13)"/><text x="24.1527%" y="143.50"></text></g><g><title>type_op_prove_predicate (448,945 samples, 0.58%)</title><rect x="24.1094%" y="133" width="0.5795%" height="15" fill="rgb(231,73,38)"/><text x="24.3594%" y="143.50"></text></g><g><title>MIR_borrow_checking (4,938,824 samples, 6.38%)</title><rect x="18.3151%" y="165" width="6.3753%" height="15" fill="rgb(225,20,46)"/><text x="18.5651%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (4,914,383 samples, 6.34%)</title><rect x="18.3467%" y="149" width="6.3437%" height="15" fill="rgb(210,31,41)"/><text x="18.5967%" y="159.50">mir_borr..</text></g><g><title>hir_module_items (102,501 samples, 0.13%)</title><rect x="24.6994%" y="165" width="0.1323%" height="15" fill="rgb(221,200,47)"/><text x="24.9494%" y="175.50"></text></g><g><title>should_inherit_track_caller (125,922 samples, 0.16%)</title><rect x="25.0843%" y="117" width="0.1625%" height="15" fill="rgb(226,26,5)"/><text x="25.3343%" y="127.50"></text></g><g><title>codegen_fn_attrs (241,763 samples, 0.31%)</title><rect x="24.9608%" y="133" width="0.3121%" height="15" fill="rgb(249,33,26)"/><text x="25.2108%" y="143.50"></text></g><g><title>check_mod_attrs (324,793 samples, 0.42%)</title><rect x="24.8543%" y="149" width="0.4193%" height="15" fill="rgb(235,183,28)"/><text x="25.1043%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (152,252 samples, 0.20%)</title><rect x="25.3481%" y="149" width="0.1965%" height="15" fill="rgb(221,5,38)"/><text x="25.5981%" y="159.50"></text></g><g><title>misc_checking_1 (580,447 samples, 0.75%)</title><rect x="24.8325%" y="165" width="0.7493%" height="15" fill="rgb(247,18,42)"/><text x="25.0825%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (108,241 samples, 0.14%)</title><rect x="25.5835%" y="149" width="0.1397%" height="15" fill="rgb(241,131,45)"/><text x="25.8335%" y="159.50"></text></g><g><title>check_mod_liveness (83,930 samples, 0.11%)</title><rect x="25.6149%" y="133" width="0.1083%" height="15" fill="rgb(249,31,29)"/><text x="25.8649%" y="143.50"></text></g><g><title>misc_checking_2 (259,663 samples, 0.34%)</title><rect x="25.5818%" y="165" width="0.3352%" height="15" fill="rgb(225,111,53)"/><text x="25.8318%" y="175.50"></text></g><g><title>match_checking (150,082 samples, 0.19%)</title><rect x="25.7232%" y="149" width="0.1937%" height="15" fill="rgb(238,160,17)"/><text x="25.9732%" y="159.50"></text></g><g><title>check_match (141,932 samples, 0.18%)</title><rect x="25.7338%" y="133" width="0.1832%" height="15" fill="rgb(214,148,48)"/><text x="25.9838%" y="143.50"></text></g><g><title>death_checking (481,886 samples, 0.62%)</title><rect x="26.0178%" y="149" width="0.6220%" height="15" fill="rgb(232,36,49)"/><text x="26.2678%" y="159.50"></text></g><g><title>item_attrs (355,254 samples, 0.46%)</title><rect x="26.1813%" y="133" width="0.4586%" height="15" fill="rgb(209,103,24)"/><text x="26.4313%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (118,122 samples, 0.15%)</title><rect x="26.4874%" y="117" width="0.1525%" height="15" fill="rgb(229,88,8)"/><text x="26.7374%" y="127.50"></text></g><g><title>crate_lints (644,757 samples, 0.83%)</title><rect x="26.6416%" y="133" width="0.8323%" height="15" fill="rgb(213,181,19)"/><text x="26.8916%" y="143.50"></text></g><g><title>type_of (334,544 samples, 0.43%)</title><rect x="27.0420%" y="117" width="0.4318%" height="15" fill="rgb(254,191,54)"/><text x="27.2920%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (248,793 samples, 0.32%)</title><rect x="27.1527%" y="101" width="0.3212%" height="15" fill="rgb(241,83,37)"/><text x="27.4027%" y="111.50"></text></g><g><title>lint_checking (725,718 samples, 0.94%)</title><rect x="26.6399%" y="149" width="0.9368%" height="15" fill="rgb(233,36,39)"/><text x="26.8899%" y="159.50"></text></g><g><title>module_lints (79,661 samples, 0.10%)</title><rect x="27.4739%" y="133" width="0.1028%" height="15" fill="rgb(226,3,54)"/><text x="27.7239%" y="143.50"></text></g><g><title>lint_mod (77,721 samples, 0.10%)</title><rect x="27.4764%" y="117" width="0.1003%" height="15" fill="rgb(245,192,40)"/><text x="27.7264%" y="127.50"></text></g><g><title>privacy_access_levels (96,801 samples, 0.12%)</title><rect x="27.5767%" y="149" width="0.1250%" height="15" fill="rgb(238,167,29)"/><text x="27.8267%" y="159.50"></text></g><g><title>privacy_checking_modules (228,932 samples, 0.30%)</title><rect x="27.7016%" y="149" width="0.2955%" height="15" fill="rgb(232,182,51)"/><text x="27.9516%" y="159.50"></text></g><g><title>check_mod_privacy (227,612 samples, 0.29%)</title><rect x="27.7033%" y="133" width="0.2938%" height="15" fill="rgb(231,60,39)"/><text x="27.9533%" y="143.50"></text></g><g><title>misc_checking_3 (1,627,427 samples, 2.10%)</title><rect x="25.9170%" y="165" width="2.1008%" height="15" fill="rgb(208,69,12)"/><text x="26.1670%" y="175.50">m..</text></g><g><title>impl_parent (767,541 samples, 0.99%)</title><rect x="29.8401%" y="101" width="0.9908%" height="15" fill="rgb(235,93,37)"/><text x="30.0901%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (455,567 samples, 0.59%)</title><rect x="30.2428%" y="85" width="0.5881%" height="15" fill="rgb(213,116,39)"/><text x="30.4928%" y="95.50"></text></g><g><title>impl_trait_ref (1,473,883 samples, 1.90%)</title><rect x="30.8309%" y="101" width="1.9026%" height="15" fill="rgb(222,207,29)"/><text x="31.0809%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (1,151,331 samples, 1.49%)</title><rect x="31.2472%" y="85" width="1.4862%" height="15" fill="rgb(206,96,30)"/><text x="31.4972%" y="95.50"></text></g><g><title>coherent_trait (3,889,753 samples, 5.02%)</title><rect x="28.0711%" y="133" width="5.0211%" height="15" fill="rgb(218,138,4)"/><text x="28.3211%" y="143.50">cohere..</text></g><g><title>specialization_graph_of (3,737,131 samples, 4.82%)</title><rect x="28.2681%" y="117" width="4.8241%" height="15" fill="rgb(250,191,14)"/><text x="28.5181%" y="127.50">specia..</text></g><g><title>trait_impls_of (276,732 samples, 0.36%)</title><rect x="32.7349%" y="101" width="0.3572%" height="15" fill="rgb(239,60,40)"/><text x="32.9849%" y="111.50"></text></g><g><title>coherence_checking (3,942,393 samples, 5.09%)</title><rect x="28.0503%" y="149" width="5.0890%" height="15" fill="rgb(206,27,48)"/><text x="28.3003%" y="159.50">cohere..</text></g><g><title>associated_item (169,592 samples, 0.22%)</title><rect x="36.9360%" y="85" width="0.2189%" height="15" fill="rgb(225,35,8)"/><text x="37.1860%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (136,551 samples, 0.18%)</title><rect x="36.9786%" y="69" width="0.1763%" height="15" fill="rgb(250,213,24)"/><text x="37.2286%" y="79.50"></text></g><g><title>associated_items (228,482 samples, 0.29%)</title><rect x="36.8725%" y="101" width="0.2949%" height="15" fill="rgb(247,123,22)"/><text x="37.1225%" y="111.50"></text></g><g><title>dropck_outlives (80,862 samples, 0.10%)</title><rect x="37.1833%" y="101" width="0.1044%" height="15" fill="rgb(231,138,38)"/><text x="37.4333%" y="111.50"></text></g><g><title>evaluate_obligation (258,801 samples, 0.33%)</title><rect x="37.2877%" y="101" width="0.3341%" height="15" fill="rgb(231,145,46)"/><text x="37.5377%" y="111.50"></text></g><g><title>associated_item (81,112 samples, 0.10%)</title><rect x="39.2005%" y="69" width="0.1047%" height="15" fill="rgb(251,118,11)"/><text x="39.4505%" y="79.50"></text></g><g><title>associated_items (115,752 samples, 0.15%)</title><rect x="39.1611%" y="85" width="0.1494%" height="15" fill="rgb(217,147,25)"/><text x="39.4111%" y="95.50"></text></g><g><title>is_copy_raw (121,622 samples, 0.16%)</title><rect x="39.4600%" y="85" width="0.1570%" height="15" fill="rgb(247,81,37)"/><text x="39.7100%" y="95.50"></text></g><g><title>evaluate_obligation (108,982 samples, 0.14%)</title><rect x="39.4763%" y="69" width="0.1407%" height="15" fill="rgb(209,12,38)"/><text x="39.7263%" y="79.50"></text></g><g><title>typeck (1,305,785 samples, 1.69%)</title><rect x="38.0128%" y="101" width="1.6856%" height="15" fill="rgb(227,1,9)"/><text x="38.2628%" y="111.50"></text></g><g><title>item_bodies_checking (5,066,706 samples, 6.54%)</title><rect x="33.1647%" y="149" width="6.5404%" height="15" fill="rgb(248,47,43)"/><text x="33.4147%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (5,064,646 samples, 6.54%)</title><rect x="33.1674%" y="133" width="6.5377%" height="15" fill="rgb(221,10,30)"/><text x="33.4174%" y="143.50">typeck_it..</text></g><g><title>typeck (5,049,056 samples, 6.52%)</title><rect x="33.1875%" y="117" width="6.5176%" height="15" fill="rgb(210,229,1)"/><text x="33.4375%" y="127.50">typeck</text></g><g><title>item_types_checking (696,068 samples, 0.90%)</title><rect x="39.7051%" y="149" width="0.8985%" height="15" fill="rgb(222,148,37)"/><text x="39.9551%" y="159.50"></text></g><g><title>check_mod_item_types (694,158 samples, 0.90%)</title><rect x="39.7076%" y="133" width="0.8961%" height="15" fill="rgb(234,67,33)"/><text x="39.9576%" y="143.50"></text></g><g><title>fn_sig (129,022 samples, 0.17%)</title><rect x="40.7763%" y="117" width="0.1665%" height="15" fill="rgb(247,98,35)"/><text x="41.0263%" y="127.50"></text></g><g><title>named_region_map (134,802 samples, 0.17%)</title><rect x="41.0774%" y="101" width="0.1740%" height="15" fill="rgb(247,138,52)"/><text x="41.3274%" y="111.50"></text></g><g><title>resolve_lifetimes (125,772 samples, 0.16%)</title><rect x="41.0890%" y="85" width="0.1624%" height="15" fill="rgb(213,79,30)"/><text x="41.3390%" y="95.50"></text></g><g><title>generics_of (255,453 samples, 0.33%)</title><rect x="40.9428%" y="117" width="0.3298%" height="15" fill="rgb(246,177,23)"/><text x="41.1928%" y="127.50"></text></g><g><title>item_bounds (143,451 samples, 0.19%)</title><rect x="41.3117%" y="117" width="0.1852%" height="15" fill="rgb(230,62,27)"/><text x="41.5617%" y="127.50"></text></g><g><title>explicit_predicates_of (247,964 samples, 0.32%)</title><rect x="41.5868%" y="85" width="0.3201%" height="15" fill="rgb(216,154,8)"/><text x="41.8368%" y="95.50"></text></g><g><title>predicates_of (334,965 samples, 0.43%)</title><rect x="41.4968%" y="117" width="0.4324%" height="15" fill="rgb(244,35,45)"/><text x="41.7468%" y="127.50"></text></g><g><title>predicates_defined_on (308,064 samples, 0.40%)</title><rect x="41.5316%" y="101" width="0.3977%" height="15" fill="rgb(251,115,12)"/><text x="41.7816%" y="111.50"></text></g><g><title>type_collecting (1,251,964 samples, 1.62%)</title><rect x="40.6056%" y="149" width="1.6161%" height="15" fill="rgb(240,54,50)"/><text x="40.8556%" y="159.50"></text></g><g><title>collect_mod_item_types (1,244,804 samples, 1.61%)</title><rect x="40.6148%" y="133" width="1.6069%" height="15" fill="rgb(233,84,52)"/><text x="40.8648%" y="143.50"></text></g><g><title>type_of (158,942 samples, 0.21%)</title><rect x="42.0165%" y="117" width="0.2052%" height="15" fill="rgb(207,117,47)"/><text x="42.2665%" y="127.50"></text></g><g><title>implied_outlives_bounds (83,101 samples, 0.11%)</title><rect x="43.0364%" y="117" width="0.1073%" height="15" fill="rgb(249,43,39)"/><text x="43.2864%" y="127.50"></text></g><g><title>param_env (94,012 samples, 0.12%)</title><rect x="43.1437%" y="117" width="0.1214%" height="15" fill="rgb(209,38,44)"/><text x="43.3937%" y="127.50"></text></g><g><title>check_impl_item_well_formed (770,852 samples, 1.00%)</title><rect x="42.3195%" y="133" width="0.9951%" height="15" fill="rgb(236,212,23)"/><text x="42.5695%" y="143.50"></text></g><g><title>implied_outlives_bounds (84,531 samples, 0.11%)</title><rect x="44.6086%" y="117" width="0.1091%" height="15" fill="rgb(242,79,21)"/><text x="44.8586%" y="127.50"></text></g><g><title>param_env (160,972 samples, 0.21%)</title><rect x="44.7177%" y="117" width="0.2078%" height="15" fill="rgb(211,96,35)"/><text x="44.9677%" y="127.50"></text></g><g><title>check_item_well_formed (1,343,704 samples, 1.73%)</title><rect x="43.3145%" y="133" width="1.7345%" height="15" fill="rgb(253,215,40)"/><text x="43.5645%" y="143.50"></text></g><g><title>evaluate_obligation (154,071 samples, 0.20%)</title><rect x="45.8988%" y="117" width="0.1989%" height="15" fill="rgb(211,81,21)"/><text x="46.1488%" y="127.50"></text></g><g><title>implied_outlives_bounds (103,341 samples, 0.13%)</title><rect x="46.0977%" y="117" width="0.1334%" height="15" fill="rgb(208,190,38)"/><text x="46.3477%" y="127.50"></text></g><g><title>param_env (78,451 samples, 0.10%)</title><rect x="46.2321%" y="117" width="0.1013%" height="15" fill="rgb(235,213,38)"/><text x="46.4821%" y="127.50"></text></g><g><title>analysis (21,931,472 samples, 28.31%)</title><rect x="18.1539%" y="181" width="28.3103%" height="15" fill="rgb(237,122,38)"/><text x="18.4039%" y="191.50">analysis</text></g><g><title>type_check_crate (14,290,118 samples, 18.45%)</title><rect x="28.0177%" y="165" width="18.4464%" height="15" fill="rgb(244,218,35)"/><text x="28.2677%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,285,127 samples, 4.24%)</title><rect x="42.2235%" y="149" width="4.2406%" height="15" fill="rgb(240,68,47)"/><text x="42.4735%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,096,251 samples, 1.42%)</title><rect x="45.0491%" y="133" width="1.4151%" height="15" fill="rgb(210,16,53)"/><text x="45.2991%" y="143.50"></text></g><g><title>is_unpin_raw (104,071 samples, 0.13%)</title><rect x="48.0152%" y="133" width="0.1343%" height="15" fill="rgb(235,124,12)"/><text x="48.2652%" y="143.50"></text></g><g><title>evaluate_obligation (101,951 samples, 0.13%)</title><rect x="48.0180%" y="117" width="0.1316%" height="15" fill="rgb(224,169,11)"/><text x="48.2680%" y="127.50"></text></g><g><title>fn_abi_of_instance (266,943 samples, 0.34%)</title><rect x="47.8794%" y="149" width="0.3446%" height="15" fill="rgb(250,166,2)"/><text x="48.1294%" y="159.50"></text></g><g><title>codegen_module (895,579 samples, 1.16%)</title><rect x="47.1170%" y="165" width="1.1561%" height="15" fill="rgb(242,216,29)"/><text x="47.3670%" y="175.50"></text></g><g><title>optimized_mir (212,962 samples, 0.27%)</title><rect x="48.4176%" y="117" width="0.2749%" height="15" fill="rgb(230,116,27)"/><text x="48.6676%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (305,303 samples, 0.39%)</title><rect x="48.3032%" y="133" width="0.3941%" height="15" fill="rgb(228,99,48)"/><text x="48.5532%" y="143.50"></text></g><g><title>monomorphization_collector (330,664 samples, 0.43%)</title><rect x="48.3004%" y="149" width="0.4268%" height="15" fill="rgb(253,11,6)"/><text x="48.5504%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (389,255 samples, 0.50%)</title><rect x="48.2737%" y="165" width="0.5025%" height="15" fill="rgb(247,143,39)"/><text x="48.5237%" y="175.50"></text></g><g><title>codegen_crate (1,812,420 samples, 2.34%)</title><rect x="46.4733%" y="181" width="2.3396%" height="15" fill="rgb(236,97,10)"/><text x="46.7233%" y="191.50">c..</text></g><g><title>codegen_module_optimize (4,840,753 samples, 6.25%)</title><rect x="48.8128%" y="181" width="6.2487%" height="15" fill="rgb(233,208,19)"/><text x="49.0628%" y="191.50">codegen_..</text></g><g><title>LLVM_module_optimize (4,045,245 samples, 5.22%)</title><rect x="49.8397%" y="165" width="5.2218%" height="15" fill="rgb(216,164,2)"/><text x="50.0897%" y="175.50">LLVM_m..</text></g><g><title>LLVM_lto_optimize (1,919,432 samples, 2.48%)</title><rect x="55.6740%" y="165" width="2.4777%" height="15" fill="rgb(220,129,5)"/><text x="55.9240%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (5,424,890 samples, 7.00%)</title><rect x="58.1517%" y="165" width="7.0027%" height="15" fill="rgb(242,17,10)"/><text x="58.4017%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (5,319,069 samples, 6.87%)</title><rect x="58.2883%" y="149" width="6.8661%" height="15" fill="rgb(242,107,0)"/><text x="58.5383%" y="159.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (7,875,747 samples, 10.17%)</title><rect x="55.0615%" y="181" width="10.1664%" height="15" fill="rgb(251,28,31)"/><text x="55.3115%" y="191.50">codegen_module_..</text></g><g><title>macro_expand_crate (6,291,769 samples, 8.12%)</title><rect x="65.5970%" y="165" width="8.1217%" height="15" fill="rgb(233,223,10)"/><text x="65.8470%" y="175.50">macro_expan..</text></g><g><title>expand_crate (6,269,939 samples, 8.09%)</title><rect x="65.6252%" y="149" width="8.0936%" height="15" fill="rgb(215,21,27)"/><text x="65.8752%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (185,112 samples, 0.24%)</title><rect x="73.4798%" y="133" width="0.2390%" height="15" fill="rgb(232,23,21)"/><text x="73.7298%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (95,431 samples, 0.12%)</title><rect x="73.7236%" y="165" width="0.1232%" height="15" fill="rgb(244,5,23)"/><text x="73.9736%" y="175.50"></text></g><g><title>finalize_macro_resolutions (113,842 samples, 0.15%)</title><rect x="73.8809%" y="149" width="0.1470%" height="15" fill="rgb(226,81,46)"/><text x="74.1309%" y="159.50"></text></g><g><title>late_resolve_crate (541,596 samples, 0.70%)</title><rect x="74.0279%" y="149" width="0.6991%" height="15" fill="rgb(247,70,30)"/><text x="74.2779%" y="159.50"></text></g><g><title>configure_and_expand (7,405,822 samples, 9.56%)</title><rect x="65.2280%" y="181" width="9.5598%" height="15" fill="rgb(212,68,19)"/><text x="65.4780%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (728,948 samples, 0.94%)</title><rect x="73.8468%" y="165" width="0.9410%" height="15" fill="rgb(240,187,13)"/><text x="74.0968%" y="175.50"></text></g><g><title>early_lint_checks (138,041 samples, 0.18%)</title><rect x="74.8917%" y="181" width="0.1782%" height="15" fill="rgb(223,113,26)"/><text x="75.1417%" y="191.50"></text></g><g><title>free_global_ctxt (1,523,587 samples, 1.97%)</title><rect x="75.0699%" y="181" width="1.9667%" height="15" fill="rgb(206,192,2)"/><text x="75.3199%" y="191.50">f..</text></g><g><title>exported_symbols (114,141 samples, 0.15%)</title><rect x="77.7831%" y="165" width="0.1473%" height="15" fill="rgb(241,108,4)"/><text x="78.0331%" y="175.50"></text></g><g><title>is_sized_raw (177,543 samples, 0.23%)</title><rect x="78.8383%" y="133" width="0.2292%" height="15" fill="rgb(247,173,49)"/><text x="79.0883%" y="143.50"></text></g><g><title>evaluate_obligation (154,992 samples, 0.20%)</title><rect x="78.8674%" y="117" width="0.2001%" height="15" fill="rgb(224,114,35)"/><text x="79.1174%" y="127.50"></text></g><g><title>layout_of (461,648 samples, 0.60%)</title><rect x="78.7267%" y="149" width="0.5959%" height="15" fill="rgb(245,159,27)"/><text x="78.9767%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (195,893 samples, 0.25%)</title><rect x="79.0698%" y="133" width="0.2529%" height="15" fill="rgb(245,172,44)"/><text x="79.3198%" y="143.50"></text></g><g><title>normalize_projection_ty (160,413 samples, 0.21%)</title><rect x="79.1156%" y="117" width="0.2071%" height="15" fill="rgb(236,23,11)"/><text x="79.3656%" y="127.50"></text></g><g><title>needs_drop_raw (119,502 samples, 0.15%)</title><rect x="80.0555%" y="133" width="0.1543%" height="15" fill="rgb(205,117,38)"/><text x="80.3055%" y="143.50"></text></g><g><title>is_copy_raw (104,862 samples, 0.14%)</title><rect x="80.0744%" y="117" width="0.1354%" height="15" fill="rgb(237,72,25)"/><text x="80.3244%" y="127.50"></text></g><g><title>evaluate_obligation (81,931 samples, 0.11%)</title><rect x="80.1040%" y="101" width="0.1058%" height="15" fill="rgb(244,70,9)"/><text x="80.3540%" y="111.50"></text></g><g><title>optimized_mir (1,778,580 samples, 2.30%)</title><rect x="77.9862%" y="165" width="2.2959%" height="15" fill="rgb(217,125,39)"/><text x="78.2362%" y="175.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (743,259 samples, 0.96%)</title><rect x="79.3227%" y="149" width="0.9594%" height="15" fill="rgb(235,36,10)"/><text x="79.5727%" y="159.50"></text></g><g><title>generate_crate_metadata (2,538,508 samples, 3.28%)</title><rect x="77.0366%" y="181" width="3.2768%" height="15" fill="rgb(251,123,47)"/><text x="77.2866%" y="191.50">gen..</text></g><g><title>hir_lowering (802,609 samples, 1.04%)</title><rect x="80.3134%" y="181" width="1.0360%" height="15" fill="rgb(221,13,13)"/><text x="80.5634%" y="191.50"></text></g><g><title>finish_ongoing_codegen (11,595,768 samples, 14.97%)</title><rect x="81.3706%" y="165" width="14.9684%" height="15" fill="rgb(238,131,9)"/><text x="81.6206%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (668,207 samples, 0.86%)</title><rect x="96.3390%" y="165" width="0.8626%" height="15" fill="rgb(211,50,8)"/><text x="96.5890%" y="175.50"></text></g><g><title>link_binary (658,357 samples, 0.85%)</title><rect x="96.3517%" y="149" width="0.8498%" height="15" fill="rgb(245,182,24)"/><text x="96.6017%" y="159.50"></text></g><g><title>link_rlib (414,745 samples, 0.54%)</title><rect x="96.6662%" y="133" width="0.5354%" height="15" fill="rgb(242,14,37)"/><text x="96.9162%" y="143.50"></text></g><g><title>link (12,288,665 samples, 15.86%)</title><rect x="81.3495%" y="181" width="15.8628%" height="15" fill="rgb(246,228,12)"/><text x="81.5995%" y="191.50">link</text></g><g><title>parse_crate (1,123,422 samples, 1.45%)</title><rect x="97.2123%" y="181" width="1.4502%" height="15" fill="rgb(213,55,15)"/><text x="97.4623%" y="191.50"></text></g><g><title>prepare_outputs (185,112 samples, 0.24%)</title><rect x="98.6695%" y="181" width="0.2390%" height="15" fill="rgb(209,9,3)"/><text x="98.9195%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (493,036 samples, 0.64%)</title><rect x="98.9084%" y="181" width="0.6364%" height="15" fill="rgb(230,59,30)"/><text x="99.1584%" y="191.50"></text></g><g><title>setup_global_ctxt (78,771 samples, 0.10%)</title><rect x="99.5461%" y="181" width="0.1017%" height="15" fill="rgb(209,121,21)"/><text x="99.7961%" y="191.50"></text></g><g><title>all (77,468,266 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (77,468,266 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (272,863 samples, 0.35%)</title><rect x="99.6478%" y="181" width="0.3522%" height="15" fill="rgb(215,41,42)"/><text x="99.8978%" y="191.50"></text></g></svg></svg>