<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (45,345,381 samples, 10.11%)</title><rect x="0.1538%" y="181" width="10.1143%" height="15" fill="rgb(227,0,7)"/><text x="0.4038%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (510,154 samples, 0.11%)</title><rect x="18.8410%" y="85" width="0.1138%" height="15" fill="rgb(217,0,24)"/><text x="19.0910%" y="95.50"></text></g><g><title>is_copy_raw (681,289 samples, 0.15%)</title><rect x="20.7660%" y="69" width="0.1520%" height="15" fill="rgb(221,193,54)"/><text x="21.0160%" y="79.50"></text></g><g><title>evaluate_obligation (515,876 samples, 0.12%)</title><rect x="20.8029%" y="53" width="0.1151%" height="15" fill="rgb(248,212,6)"/><text x="21.0529%" y="63.50"></text></g><g><title>needs_drop_raw (1,065,281 samples, 0.24%)</title><rect x="20.9187%" y="69" width="0.2376%" height="15" fill="rgb(208,68,35)"/><text x="21.1687%" y="79.50"></text></g><g><title>is_copy_raw (762,078 samples, 0.17%)</title><rect x="20.9863%" y="53" width="0.1700%" height="15" fill="rgb(232,128,0)"/><text x="21.2363%" y="63.50"></text></g><g><title>evaluate_obligation (669,558 samples, 0.15%)</title><rect x="21.0069%" y="37" width="0.1493%" height="15" fill="rgb(207,160,47)"/><text x="21.2569%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (475,655 samples, 0.11%)</title><rect x="21.2369%" y="53" width="0.1061%" height="15" fill="rgb(228,23,34)"/><text x="21.4869%" y="63.50"></text></g><g><title>specialization_graph_of (986,811 samples, 0.22%)</title><rect x="21.3483%" y="53" width="0.2201%" height="15" fill="rgb(218,30,26)"/><text x="21.5983%" y="63.50"></text></g><g><title>impl_trait_ref (466,594 samples, 0.10%)</title><rect x="21.4643%" y="37" width="0.1041%" height="15" fill="rgb(220,122,19)"/><text x="21.7143%" y="47.50"></text></g><g><title>resolve_instance (1,931,154 samples, 0.43%)</title><rect x="21.1563%" y="69" width="0.4307%" height="15" fill="rgb(250,228,42)"/><text x="21.4063%" y="79.50"></text></g><g><title>thir_body (3,391,553 samples, 0.76%)</title><rect x="21.6002%" y="69" width="0.7565%" height="15" fill="rgb(240,193,28)"/><text x="21.8502%" y="79.50"></text></g><g><title>mir_const (19,615,504 samples, 4.38%)</title><rect x="17.9893%" y="117" width="4.3753%" height="15" fill="rgb(216,20,37)"/><text x="18.2393%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (17,060,515 samples, 3.81%)</title><rect x="18.5592%" y="101" width="3.8054%" height="15" fill="rgb(206,188,39)"/><text x="18.8092%" y="111.50">unsa..</text></g><g><title>mir_built (15,287,060 samples, 3.41%)</title><rect x="18.9548%" y="85" width="3.4098%" height="15" fill="rgb(217,207,13)"/><text x="19.2048%" y="95.50">mir..</text></g><g><title>mir_promoted (23,090,824 samples, 5.15%)</title><rect x="17.4966%" y="133" width="5.1504%" height="15" fill="rgb(231,73,38)"/><text x="17.7466%" y="143.50">mir_pr..</text></g><g><title>mir_const_qualif (1,266,567 samples, 0.28%)</title><rect x="22.3646%" y="117" width="0.2825%" height="15" fill="rgb(225,20,46)"/><text x="22.6146%" y="127.50"></text></g><g><title>mir_const (951,844 samples, 0.21%)</title><rect x="22.4348%" y="101" width="0.2123%" height="15" fill="rgb(210,31,41)"/><text x="22.6848%" y="111.50"></text></g><g><title>unsafety_check_result (656,628 samples, 0.15%)</title><rect x="22.5006%" y="85" width="0.1465%" height="15" fill="rgb(221,200,47)"/><text x="22.7506%" y="95.50"></text></g><g><title>mir_built (554,977 samples, 0.12%)</title><rect x="22.5233%" y="69" width="0.1238%" height="15" fill="rgb(226,26,5)"/><text x="22.7733%" y="79.50"></text></g><g><title>type_op_normalize_fn_sig (1,465,016 samples, 0.33%)</title><rect x="22.6612%" y="133" width="0.3268%" height="15" fill="rgb(249,33,26)"/><text x="22.9112%" y="143.50"></text></g><g><title>normalize_projection_ty (968,751 samples, 0.22%)</title><rect x="22.7719%" y="117" width="0.2161%" height="15" fill="rgb(235,183,28)"/><text x="23.0219%" y="127.50"></text></g><g><title>type_op_prove_predicate (3,576,571 samples, 0.80%)</title><rect x="23.0007%" y="133" width="0.7978%" height="15" fill="rgb(221,5,38)"/><text x="23.2507%" y="143.50"></text></g><g><title>MIR_borrow_checking (60,083,148 samples, 13.40%)</title><rect x="10.3972%" y="165" width="13.4016%" height="15" fill="rgb(247,18,42)"/><text x="10.6472%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (59,692,456 samples, 13.31%)</title><rect x="10.4844%" y="149" width="13.3145%" height="15" fill="rgb(241,131,45)"/><text x="10.7344%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (642,127 samples, 0.14%)</title><rect x="23.7988%" y="165" width="0.1432%" height="15" fill="rgb(249,31,29)"/><text x="24.0488%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (471,935 samples, 0.11%)</title><rect x="23.8368%" y="149" width="0.1053%" height="15" fill="rgb(225,111,53)"/><text x="24.0868%" y="159.50"></text></g><g><title>codegen_fn_attrs (621,308 samples, 0.14%)</title><rect x="24.1392%" y="133" width="0.1386%" height="15" fill="rgb(238,160,17)"/><text x="24.3892%" y="143.50"></text></g><g><title>check_mod_attrs (1,177,642 samples, 0.26%)</title><rect x="24.0152%" y="149" width="0.2627%" height="15" fill="rgb(214,148,48)"/><text x="24.2652%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (453,154 samples, 0.10%)</title><rect x="24.3627%" y="149" width="0.1011%" height="15" fill="rgb(232,36,49)"/><text x="24.6127%" y="159.50"></text></g><g><title>misc_checking_1 (2,070,672 samples, 0.46%)</title><rect x="24.0109%" y="165" width="0.4619%" height="15" fill="rgb(209,103,24)"/><text x="24.2609%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,294,444 samples, 0.29%)</title><rect x="24.4730%" y="149" width="0.2887%" height="15" fill="rgb(229,88,8)"/><text x="24.7230%" y="159.50"></text></g><g><title>check_mod_liveness (1,113,252 samples, 0.25%)</title><rect x="24.5135%" y="133" width="0.2483%" height="15" fill="rgb(213,181,19)"/><text x="24.7635%" y="143.50"></text></g><g><title>misc_checking_2 (2,499,066 samples, 0.56%)</title><rect x="24.4727%" y="165" width="0.5574%" height="15" fill="rgb(254,191,54)"/><text x="24.7227%" y="175.50"></text></g><g><title>match_checking (1,203,342 samples, 0.27%)</title><rect x="24.7618%" y="149" width="0.2684%" height="15" fill="rgb(241,83,37)"/><text x="25.0118%" y="159.50"></text></g><g><title>check_match (1,119,791 samples, 0.25%)</title><rect x="24.7804%" y="133" width="0.2498%" height="15" fill="rgb(233,36,39)"/><text x="25.0304%" y="143.50"></text></g><g><title>death_checking (707,308 samples, 0.16%)</title><rect x="25.0996%" y="149" width="0.1578%" height="15" fill="rgb(226,3,54)"/><text x="25.3496%" y="159.50"></text></g><g><title>crate_lints (2,409,096 samples, 0.54%)</title><rect x="25.2577%" y="133" width="0.5374%" height="15" fill="rgb(245,192,40)"/><text x="25.5077%" y="143.50"></text></g><g><title>type_of (1,096,770 samples, 0.24%)</title><rect x="25.5504%" y="117" width="0.2446%" height="15" fill="rgb(238,167,29)"/><text x="25.8004%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (862,248 samples, 0.19%)</title><rect x="25.6027%" y="101" width="0.1923%" height="15" fill="rgb(232,182,51)"/><text x="25.8527%" y="111.50"></text></g><g><title>lint_checking (3,386,916 samples, 0.76%)</title><rect x="25.2574%" y="149" width="0.7555%" height="15" fill="rgb(231,60,39)"/><text x="25.5074%" y="159.50"></text></g><g><title>module_lints (976,480 samples, 0.22%)</title><rect x="25.7951%" y="133" width="0.2178%" height="15" fill="rgb(208,69,12)"/><text x="26.0451%" y="143.50"></text></g><g><title>lint_mod (972,670 samples, 0.22%)</title><rect x="25.7959%" y="117" width="0.2170%" height="15" fill="rgb(235,93,37)"/><text x="26.0459%" y="127.50"></text></g><g><title>privacy_access_levels (608,716 samples, 0.14%)</title><rect x="26.0129%" y="149" width="0.1358%" height="15" fill="rgb(213,116,39)"/><text x="26.2629%" y="159.50"></text></g><g><title>privacy_checking_modules (1,477,366 samples, 0.33%)</title><rect x="26.1486%" y="149" width="0.3295%" height="15" fill="rgb(222,207,29)"/><text x="26.3986%" y="159.50"></text></g><g><title>check_mod_privacy (1,474,836 samples, 0.33%)</title><rect x="26.1492%" y="133" width="0.3290%" height="15" fill="rgb(206,96,30)"/><text x="26.3992%" y="143.50"></text></g><g><title>misc_checking_3 (6,519,719 samples, 1.45%)</title><rect x="25.0302%" y="165" width="1.4542%" height="15" fill="rgb(218,138,4)"/><text x="25.2802%" y="175.50"></text></g><g><title>impl_parent (2,582,918 samples, 0.58%)</title><rect x="27.5124%" y="101" width="0.5761%" height="15" fill="rgb(250,191,14)"/><text x="27.7624%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,484,974 samples, 0.33%)</title><rect x="27.7573%" y="85" width="0.3312%" height="15" fill="rgb(239,60,40)"/><text x="28.0073%" y="95.50"></text></g><g><title>impl_trait_ref (5,391,639 samples, 1.20%)</title><rect x="28.0885%" y="101" width="1.2026%" height="15" fill="rgb(206,27,48)"/><text x="28.3385%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,055,736 samples, 0.90%)</title><rect x="28.3865%" y="85" width="0.9046%" height="15" fill="rgb(225,35,8)"/><text x="28.6365%" y="95.50"></text></g><g><title>coherent_trait (13,275,602 samples, 2.96%)</title><rect x="26.5184%" y="133" width="2.9611%" height="15" fill="rgb(250,213,24)"/><text x="26.7684%" y="143.50">coh..</text></g><g><title>specialization_graph_of (12,861,517 samples, 2.87%)</title><rect x="26.6108%" y="117" width="2.8688%" height="15" fill="rgb(247,123,22)"/><text x="26.8608%" y="127.50">sp..</text></g><g><title>trait_impls_of (843,168 samples, 0.19%)</title><rect x="29.2915%" y="101" width="0.1881%" height="15" fill="rgb(231,138,38)"/><text x="29.5415%" y="111.50"></text></g><g><title>coherence_checking (13,342,692 samples, 2.98%)</title><rect x="26.5140%" y="149" width="2.9761%" height="15" fill="rgb(231,145,46)"/><text x="26.7640%" y="159.50">coh..</text></g><g><title>associated_item (796,148 samples, 0.18%)</title><rect x="44.4638%" y="85" width="0.1776%" height="15" fill="rgb(251,118,11)"/><text x="44.7138%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (603,986 samples, 0.13%)</title><rect x="44.5067%" y="69" width="0.1347%" height="15" fill="rgb(217,147,25)"/><text x="44.7567%" y="79.50"></text></g><g><title>associated_items (1,147,172 samples, 0.26%)</title><rect x="44.3952%" y="101" width="0.2559%" height="15" fill="rgb(247,81,37)"/><text x="44.6452%" y="111.50"></text></g><g><title>dropck_outlives (537,924 samples, 0.12%)</title><rect x="44.6667%" y="101" width="0.1200%" height="15" fill="rgb(209,12,38)"/><text x="44.9167%" y="111.50"></text></g><g><title>generics_of (1,234,374 samples, 0.28%)</title><rect x="46.4122%" y="85" width="0.2753%" height="15" fill="rgb(227,1,9)"/><text x="46.6622%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (911,971 samples, 0.20%)</title><rect x="46.4841%" y="69" width="0.2034%" height="15" fill="rgb(248,47,43)"/><text x="46.7341%" y="79.50"></text></g><g><title>impl_trait_ref (1,305,614 samples, 0.29%)</title><rect x="46.7506%" y="85" width="0.2912%" height="15" fill="rgb(221,10,30)"/><text x="47.0006%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,056,239 samples, 0.24%)</title><rect x="46.8062%" y="69" width="0.2356%" height="15" fill="rgb(210,229,1)"/><text x="47.0562%" y="79.50"></text></g><g><title>predicates_of (1,082,782 samples, 0.24%)</title><rect x="47.0559%" y="85" width="0.2415%" height="15" fill="rgb(222,148,37)"/><text x="47.3059%" y="95.50"></text></g><g><title>predicates_defined_on (616,686 samples, 0.14%)</title><rect x="47.1599%" y="69" width="0.1376%" height="15" fill="rgb(234,67,33)"/><text x="47.4099%" y="79.50"></text></g><g><title>specializes (3,280,523 samples, 0.73%)</title><rect x="47.2975%" y="85" width="0.7317%" height="15" fill="rgb(247,98,35)"/><text x="47.5475%" y="95.50"></text></g><g><title>param_env (1,729,999 samples, 0.39%)</title><rect x="47.6433%" y="69" width="0.3859%" height="15" fill="rgb(247,138,52)"/><text x="47.8933%" y="79.50"></text></g><g><title>def_span (733,644 samples, 0.16%)</title><rect x="47.8655%" y="53" width="0.1636%" height="15" fill="rgb(213,79,30)"/><text x="48.1155%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (639,643 samples, 0.14%)</title><rect x="47.8865%" y="37" width="0.1427%" height="15" fill="rgb(246,177,23)"/><text x="48.1365%" y="47.50"></text></g><g><title>trait_impls_of (582,926 samples, 0.13%)</title><rect x="48.0324%" y="85" width="0.1300%" height="15" fill="rgb(230,62,27)"/><text x="48.2824%" y="95.50"></text></g><g><title>evaluate_obligation (14,780,605 samples, 3.30%)</title><rect x="44.8746%" y="101" width="3.2968%" height="15" fill="rgb(216,154,8)"/><text x="45.1246%" y="111.50">eva..</text></g><g><title>generics_of (694,555 samples, 0.15%)</title><rect x="48.2116%" y="101" width="0.1549%" height="15" fill="rgb(244,35,45)"/><text x="48.4616%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (524,303 samples, 0.12%)</title><rect x="48.2496%" y="85" width="0.1169%" height="15" fill="rgb(251,115,12)"/><text x="48.4996%" y="95.50"></text></g><g><title>item_attrs (667,060 samples, 0.15%)</title><rect x="48.4461%" y="101" width="0.1488%" height="15" fill="rgb(240,54,50)"/><text x="48.6961%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (658,359 samples, 0.15%)</title><rect x="48.4481%" y="85" width="0.1468%" height="15" fill="rgb(233,84,52)"/><text x="48.6981%" y="95.50"></text></g><g><title>method_autoderef_steps (508,634 samples, 0.11%)</title><rect x="48.6215%" y="101" width="0.1135%" height="15" fill="rgb(207,117,47)"/><text x="48.8715%" y="111.50"></text></g><g><title>param_env (1,159,544 samples, 0.26%)</title><rect x="48.7558%" y="101" width="0.2586%" height="15" fill="rgb(249,43,39)"/><text x="49.0058%" y="111.50"></text></g><g><title>predicates_of (500,717 samples, 0.11%)</title><rect x="48.9027%" y="85" width="0.1117%" height="15" fill="rgb(209,38,44)"/><text x="49.1527%" y="95.50"></text></g><g><title>predicates_of (500,594 samples, 0.11%)</title><rect x="49.0294%" y="101" width="0.1117%" height="15" fill="rgb(236,212,23)"/><text x="49.2794%" y="111.50"></text></g><g><title>item_bodies_checking (88,686,451 samples, 19.78%)</title><rect x="29.4967%" y="149" width="19.7816%" height="15" fill="rgb(242,79,21)"/><text x="29.7467%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (88,683,921 samples, 19.78%)</title><rect x="29.4972%" y="133" width="19.7810%" height="15" fill="rgb(211,96,35)"/><text x="29.7472%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (88,397,046 samples, 19.72%)</title><rect x="29.5612%" y="117" width="19.7171%" height="15" fill="rgb(253,215,40)"/><text x="29.8112%" y="127.50">typeck</text></g><g><title>item_types_checking (958,320 samples, 0.21%)</title><rect x="49.2783%" y="149" width="0.2138%" height="15" fill="rgb(211,81,21)"/><text x="49.5283%" y="159.50"></text></g><g><title>check_mod_item_types (955,490 samples, 0.21%)</title><rect x="49.2789%" y="133" width="0.2131%" height="15" fill="rgb(208,190,38)"/><text x="49.5289%" y="143.50"></text></g><g><title>fn_sig (465,195 samples, 0.10%)</title><rect x="49.5872%" y="117" width="0.1038%" height="15" fill="rgb(235,213,38)"/><text x="49.8372%" y="127.50"></text></g><g><title>named_region_map (926,591 samples, 0.21%)</title><rect x="49.7357%" y="101" width="0.2067%" height="15" fill="rgb(237,122,38)"/><text x="49.9857%" y="111.50"></text></g><g><title>resolve_lifetimes (878,061 samples, 0.20%)</title><rect x="49.7466%" y="85" width="0.1959%" height="15" fill="rgb(244,218,35)"/><text x="49.9966%" y="95.50"></text></g><g><title>generics_of (1,151,221 samples, 0.26%)</title><rect x="49.6910%" y="117" width="0.2568%" height="15" fill="rgb(240,68,47)"/><text x="49.9410%" y="127.50"></text></g><g><title>type_collecting (2,719,509 samples, 0.61%)</title><rect x="49.4924%" y="149" width="0.6066%" height="15" fill="rgb(210,16,53)"/><text x="49.7424%" y="159.50"></text></g><g><title>collect_mod_item_types (2,712,529 samples, 0.61%)</title><rect x="49.4939%" y="133" width="0.6050%" height="15" fill="rgb(235,124,12)"/><text x="49.7439%" y="143.50"></text></g><g><title>region_scope_tree (591,295 samples, 0.13%)</title><rect x="50.5910%" y="117" width="0.1319%" height="15" fill="rgb(224,169,11)"/><text x="50.8410%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,416,447 samples, 0.54%)</title><rect x="50.1870%" y="133" width="0.5390%" height="15" fill="rgb(250,166,2)"/><text x="50.4370%" y="143.50"></text></g><g><title>check_item_well_formed (1,365,852 samples, 0.30%)</title><rect x="50.7260%" y="133" width="0.3047%" height="15" fill="rgb(242,216,29)"/><text x="50.9760%" y="143.50"></text></g><g><title>param_env (1,378,070 samples, 0.31%)</title><rect x="52.5373%" y="117" width="0.3074%" height="15" fill="rgb(230,116,27)"/><text x="52.7873%" y="127.50"></text></g><g><title>analysis (191,400,011 samples, 42.69%)</title><rect x="10.2681%" y="181" width="42.6920%" height="15" fill="rgb(228,99,48)"/><text x="10.5181%" y="191.50">analysis</text></g><g><title>type_check_crate (118,698,030 samples, 26.48%)</title><rect x="26.4844%" y="165" width="26.4757%" height="15" fill="rgb(253,11,6)"/><text x="26.7344%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,810,416 samples, 2.86%)</title><rect x="50.1027%" y="149" width="2.8574%" height="15" fill="rgb(247,143,39)"/><text x="50.3527%" y="159.50">wf..</text></g><g><title>check_trait_item_well_formed (8,650,243 samples, 1.93%)</title><rect x="51.0307%" y="133" width="1.9294%" height="15" fill="rgb(236,97,10)"/><text x="51.2807%" y="143.50">c..</text></g><g><title>region_scope_tree (496,625 samples, 0.11%)</title><rect x="52.8493%" y="117" width="0.1108%" height="15" fill="rgb(233,208,19)"/><text x="53.0993%" y="127.50"></text></g><g><title>layout_of (930,098 samples, 0.21%)</title><rect x="54.5581%" y="133" width="0.2075%" height="15" fill="rgb(216,164,2)"/><text x="54.8081%" y="143.50"></text></g><g><title>param_env (809,551 samples, 0.18%)</title><rect x="54.7656%" y="133" width="0.1806%" height="15" fill="rgb(220,129,5)"/><text x="55.0156%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,006,001 samples, 0.67%)</title><rect x="54.2955%" y="149" width="0.6705%" height="15" fill="rgb(242,17,10)"/><text x="54.5455%" y="159.50"></text></g><g><title>codegen_module (8,347,548 samples, 1.86%)</title><rect x="53.2136%" y="165" width="1.8619%" height="15" fill="rgb(242,107,0)"/><text x="53.4636%" y="175.50">c..</text></g><g><title>codegen_fn_attrs (613,458 samples, 0.14%)</title><rect x="55.1720%" y="117" width="0.1368%" height="15" fill="rgb(251,28,31)"/><text x="55.4220%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (481,254 samples, 0.11%)</title><rect x="55.4146%" y="101" width="0.1073%" height="15" fill="rgb(233,223,10)"/><text x="55.6646%" y="111.50"></text></g><g><title>optimized_mir (747,476 samples, 0.17%)</title><rect x="55.3773%" y="117" width="0.1667%" height="15" fill="rgb(215,21,27)"/><text x="55.6273%" y="127.50"></text></g><g><title>specialization_graph_of (988,861 samples, 0.22%)</title><rect x="55.7175%" y="101" width="0.2206%" height="15" fill="rgb(232,23,21)"/><text x="55.9675%" y="111.50"></text></g><g><title>resolve_instance (1,889,270 samples, 0.42%)</title><rect x="55.5440%" y="117" width="0.4214%" height="15" fill="rgb(244,5,23)"/><text x="55.7940%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (4,542,189 samples, 1.01%)</title><rect x="55.0805%" y="133" width="1.0131%" height="15" fill="rgb(226,81,46)"/><text x="55.3305%" y="143.50"></text></g><g><title>vtable_entries (525,416 samples, 0.12%)</title><rect x="55.9765%" y="117" width="0.1172%" height="15" fill="rgb(247,70,30)"/><text x="56.2265%" y="127.50"></text></g><g><title>monomorphization_collector (4,592,689 samples, 1.02%)</title><rect x="55.0801%" y="149" width="1.0244%" height="15" fill="rgb(212,68,19)"/><text x="55.3301%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (449,455 samples, 0.10%)</title><rect x="56.1051%" y="133" width="0.1003%" height="15" fill="rgb(240,187,13)"/><text x="56.3551%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (5,218,635 samples, 1.16%)</title><rect x="55.0762%" y="165" width="1.1640%" height="15" fill="rgb(223,113,26)"/><text x="55.3262%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (608,546 samples, 0.14%)</title><rect x="56.1045%" y="149" width="0.1357%" height="15" fill="rgb(206,192,2)"/><text x="56.3545%" y="159.50"></text></g><g><title>codegen_crate (14,758,567 samples, 3.29%)</title><rect x="52.9626%" y="181" width="3.2919%" height="15" fill="rgb(241,108,4)"/><text x="53.2126%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (38,956,546 samples, 8.69%)</title><rect x="56.2545%" y="181" width="8.6893%" height="15" fill="rgb(247,173,49)"/><text x="56.5045%" y="191.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (35,569,569 samples, 7.93%)</title><rect x="57.0100%" y="165" width="7.9338%" height="15" fill="rgb(224,114,35)"/><text x="57.2600%" y="175.50">LLVM_module..</text></g><g><title>LLVM_lto_optimize (9,887,755 samples, 2.21%)</title><rect x="65.4030%" y="165" width="2.2055%" height="15" fill="rgb(245,159,27)"/><text x="65.6530%" y="175.50">L..</text></g><g><title>LLVM_module_codegen (25,343,491 samples, 5.65%)</title><rect x="67.6085%" y="165" width="5.6529%" height="15" fill="rgb(245,172,44)"/><text x="67.8585%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (24,880,975 samples, 5.55%)</title><rect x="67.7116%" y="149" width="5.5497%" height="15" fill="rgb(236,23,11)"/><text x="67.9616%" y="159.50">LLVM_mo..</text></g><g><title>LLVM_thin_lto_import (451,404 samples, 0.10%)</title><rect x="73.2614%" y="165" width="0.1007%" height="15" fill="rgb(205,117,38)"/><text x="73.5114%" y="175.50"></text></g><g><title>codegen_module_perform_lto (37,884,433 samples, 8.45%)</title><rect x="64.9438%" y="181" width="8.4502%" height="15" fill="rgb(237,72,25)"/><text x="65.1938%" y="191.50">codegen_modu..</text></g><g><title>metadata_register_crate (1,462,906 samples, 0.33%)</title><rect x="77.4772%" y="133" width="0.3263%" height="15" fill="rgb(244,70,9)"/><text x="77.7272%" y="143.50"></text></g><g><title>metadata_register_crate (513,115 samples, 0.11%)</title><rect x="77.6890%" y="117" width="0.1145%" height="15" fill="rgb(217,125,39)"/><text x="77.9390%" y="127.50"></text></g><g><title>macro_expand_crate (19,373,985 samples, 4.32%)</title><rect x="73.5281%" y="165" width="4.3214%" height="15" fill="rgb(235,36,10)"/><text x="73.7781%" y="175.50">macro..</text></g><g><title>expand_crate (19,361,725 samples, 4.32%)</title><rect x="73.5308%" y="149" width="4.3187%" height="15" fill="rgb(251,123,47)"/><text x="73.7808%" y="159.50">expan..</text></g><g><title>pre_AST_expansion_lint_checks (1,256,333 samples, 0.28%)</title><rect x="77.8500%" y="165" width="0.2802%" height="15" fill="rgb(221,13,13)"/><text x="78.1000%" y="175.50"></text></g><g><title>late_resolve_crate (3,746,719 samples, 0.84%)</title><rect x="78.1930%" y="149" width="0.8357%" height="15" fill="rgb(238,131,9)"/><text x="78.4430%" y="159.50"></text></g><g><title>configure_and_expand (25,473,221 samples, 5.68%)</title><rect x="73.3940%" y="181" width="5.6818%" height="15" fill="rgb(211,50,8)"/><text x="73.6440%" y="191.50">configu..</text></g><g><title>resolve_crate (4,239,355 samples, 0.95%)</title><rect x="78.1302%" y="165" width="0.9456%" height="15" fill="rgb(245,182,24)"/><text x="78.3802%" y="175.50"></text></g><g><title>drop_ast (619,616 samples, 0.14%)</title><rect x="79.0758%" y="181" width="0.1382%" height="15" fill="rgb(242,14,37)"/><text x="79.3258%" y="191.50"></text></g><g><title>early_lint_checks (849,229 samples, 0.19%)</title><rect x="79.2174%" y="181" width="0.1894%" height="15" fill="rgb(246,228,12)"/><text x="79.4674%" y="191.50"></text></g><g><title>free_global_ctxt (5,014,202 samples, 1.12%)</title><rect x="79.4069%" y="181" width="1.1184%" height="15" fill="rgb(213,55,15)"/><text x="79.6569%" y="191.50"></text></g><g><title>layout_of (1,239,271 samples, 0.28%)</title><rect x="83.6536%" y="149" width="0.2764%" height="15" fill="rgb(209,9,3)"/><text x="83.9036%" y="159.50"></text></g><g><title>optimized_mir (20,358,939 samples, 4.54%)</title><rect x="81.5618%" y="165" width="4.5411%" height="15" fill="rgb(230,59,30)"/><text x="81.8118%" y="175.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (9,741,550 samples, 2.17%)</title><rect x="83.9301%" y="149" width="2.1729%" height="15" fill="rgb(209,121,21)"/><text x="84.1801%" y="159.50">m..</text></g><g><title>generate_crate_metadata (25,165,977 samples, 5.61%)</title><rect x="80.5253%" y="181" width="5.6133%" height="15" fill="rgb(220,109,13)"/><text x="80.7753%" y="191.50">generat..</text></g><g><title>hir_lowering (6,643,191 samples, 1.48%)</title><rect x="86.1386%" y="181" width="1.4818%" height="15" fill="rgb(232,18,1)"/><text x="86.3886%" y="191.50"></text></g><g><title>finish_ongoing_codegen (35,291,105 samples, 7.87%)</title><rect x="87.6237%" y="165" width="7.8717%" height="15" fill="rgb(215,41,42)"/><text x="87.8737%" y="175.50">finish_ongo..</text></g><g><title>link_crate (1,485,136 samples, 0.33%)</title><rect x="95.4954%" y="165" width="0.3313%" height="15" fill="rgb(224,123,36)"/><text x="95.7454%" y="175.50"></text></g><g><title>link_binary (1,446,626 samples, 0.32%)</title><rect x="95.5040%" y="149" width="0.3227%" height="15" fill="rgb(240,125,3)"/><text x="95.7540%" y="159.50"></text></g><g><title>link_rlib (1,103,521 samples, 0.25%)</title><rect x="95.5805%" y="133" width="0.2461%" height="15" fill="rgb(205,98,50)"/><text x="95.8305%" y="143.50"></text></g><g><title>link (36,799,541 samples, 8.21%)</title><rect x="87.6204%" y="181" width="8.2082%" height="15" fill="rgb(205,185,37)"/><text x="87.8704%" y="191.50">link</text></g><g><title>parse_crate (15,841,788 samples, 3.53%)</title><rect x="95.8285%" y="181" width="3.5335%" height="15" fill="rgb(238,207,15)"/><text x="96.0785%" y="191.50">par..</text></g><g><title>self_profile_alloc_query_strings (2,007,821 samples, 0.45%)</title><rect x="99.4160%" y="181" width="0.4478%" height="15" fill="rgb(213,199,42)"/><text x="99.6660%" y="191.50"></text></g><g><title>all (448,327,821 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (448,327,821 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (542,166 samples, 0.12%)</title><rect x="99.8791%" y="181" width="0.1209%" height="15" fill="rgb(241,35,35)"/><text x="100.1291%" y="191.50"></text></g></svg></svg>