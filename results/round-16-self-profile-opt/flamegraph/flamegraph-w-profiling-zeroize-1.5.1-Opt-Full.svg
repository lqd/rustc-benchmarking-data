<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (56,565,700 samples, 13.72%)</title><rect x="0.1819%" y="165" width="13.7194%" height="15" fill="rgb(227,0,7)"/><text x="0.4319%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (441,774 samples, 0.11%)</title><rect x="16.7899%" y="37" width="0.1071%" height="15" fill="rgb(217,0,24)"/><text x="17.0399%" y="47.50"></text></g><g><title>resolve_instance (1,070,954 samples, 0.26%)</title><rect x="16.6575%" y="53" width="0.2597%" height="15" fill="rgb(221,193,54)"/><text x="16.9075%" y="63.50"></text></g><g><title>thir_body (681,506 samples, 0.17%)</title><rect x="16.9222%" y="53" width="0.1653%" height="15" fill="rgb(248,212,6)"/><text x="17.1722%" y="63.50"></text></g><g><title>mir_const (5,163,667 samples, 1.25%)</title><rect x="15.8378%" y="101" width="1.2524%" height="15" fill="rgb(208,68,35)"/><text x="16.0878%" y="111.50"></text></g><g><title>unsafety_check_result (4,444,828 samples, 1.08%)</title><rect x="16.0122%" y="85" width="1.0780%" height="15" fill="rgb(232,128,0)"/><text x="16.2622%" y="95.50"></text></g><g><title>mir_built (3,891,752 samples, 0.94%)</title><rect x="16.1463%" y="69" width="0.9439%" height="15" fill="rgb(207,160,47)"/><text x="16.3963%" y="79.50"></text></g><g><title>mir_promoted (5,765,934 samples, 1.40%)</title><rect x="15.7127%" y="117" width="1.3985%" height="15" fill="rgb(228,23,34)"/><text x="15.9627%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,370,757 samples, 0.33%)</title><rect x="17.1808%" y="117" width="0.3325%" height="15" fill="rgb(218,30,26)"/><text x="17.4308%" y="127.50"></text></g><g><title>MIR_borrow_checking (14,685,116 samples, 3.56%)</title><rect x="13.9521%" y="149" width="3.5617%" height="15" fill="rgb(220,122,19)"/><text x="14.2021%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (14,584,094 samples, 3.54%)</title><rect x="13.9766%" y="133" width="3.5372%" height="15" fill="rgb(250,228,42)"/><text x="14.2266%" y="143.50">mir..</text></g><g><title>check_mod_attrs (478,465 samples, 0.12%)</title><rect x="17.5840%" y="133" width="0.1160%" height="15" fill="rgb(240,193,28)"/><text x="17.8340%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (485,916 samples, 0.12%)</title><rect x="17.7378%" y="133" width="0.1179%" height="15" fill="rgb(216,20,37)"/><text x="17.9878%" y="143.50"></text></g><g><title>misc_checking_1 (1,194,414 samples, 0.29%)</title><rect x="17.5792%" y="149" width="0.2897%" height="15" fill="rgb(206,188,39)"/><text x="17.8292%" y="159.50"></text></g><g><title>misc_checking_2 (580,007 samples, 0.14%)</title><rect x="17.8689%" y="149" width="0.1407%" height="15" fill="rgb(217,207,13)"/><text x="18.1189%" y="159.50"></text></g><g><title>death_checking (464,025 samples, 0.11%)</title><rect x="18.0577%" y="133" width="0.1125%" height="15" fill="rgb(231,73,38)"/><text x="18.3077%" y="143.50"></text></g><g><title>crate_lints (1,242,986 samples, 0.30%)</title><rect x="18.1706%" y="117" width="0.3015%" height="15" fill="rgb(225,20,46)"/><text x="18.4206%" y="127.50"></text></g><g><title>lint_checking (1,473,478 samples, 0.36%)</title><rect x="18.1702%" y="133" width="0.3574%" height="15" fill="rgb(210,31,41)"/><text x="18.4202%" y="143.50"></text></g><g><title>privacy_checking_modules (550,317 samples, 0.13%)</title><rect x="18.5900%" y="133" width="0.1335%" height="15" fill="rgb(221,200,47)"/><text x="18.8400%" y="143.50"></text></g><g><title>check_mod_privacy (548,267 samples, 0.13%)</title><rect x="18.5905%" y="117" width="0.1330%" height="15" fill="rgb(226,26,5)"/><text x="18.8405%" y="127.50"></text></g><g><title>misc_checking_3 (2,956,116 samples, 0.72%)</title><rect x="18.0095%" y="149" width="0.7170%" height="15" fill="rgb(249,33,26)"/><text x="18.2595%" y="159.50"></text></g><g><title>adt_sized_constraint (513,606 samples, 0.12%)</title><rect x="19.2754%" y="85" width="0.1246%" height="15" fill="rgb(235,183,28)"/><text x="19.5254%" y="95.50"></text></g><g><title>impl_parent (832,962 samples, 0.20%)</title><rect x="19.4006%" y="85" width="0.2020%" height="15" fill="rgb(221,5,38)"/><text x="19.6506%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (440,646 samples, 0.11%)</title><rect x="19.4957%" y="69" width="0.1069%" height="15" fill="rgb(247,18,42)"/><text x="19.7457%" y="79.50"></text></g><g><title>impl_trait_ref (2,148,498 samples, 0.52%)</title><rect x="19.6027%" y="85" width="0.5211%" height="15" fill="rgb(241,131,45)"/><text x="19.8527%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,520,408 samples, 0.37%)</title><rect x="19.7550%" y="69" width="0.3688%" height="15" fill="rgb(249,31,29)"/><text x="20.0050%" y="79.50"></text></g><g><title>coherent_trait (6,041,752 samples, 1.47%)</title><rect x="18.7456%" y="117" width="1.4654%" height="15" fill="rgb(225,111,53)"/><text x="18.9956%" y="127.50"></text></g><g><title>specialization_graph_of (6,017,712 samples, 1.46%)</title><rect x="18.7514%" y="101" width="1.4595%" height="15" fill="rgb(238,160,17)"/><text x="19.0014%" y="111.50"></text></g><g><title>coherence_checking (6,129,224 samples, 1.49%)</title><rect x="18.7410%" y="133" width="1.4866%" height="15" fill="rgb(214,148,48)"/><text x="18.9910%" y="143.50"></text></g><g><title>associated_item (700,932 samples, 0.17%)</title><rect x="23.0911%" y="69" width="0.1700%" height="15" fill="rgb(232,36,49)"/><text x="23.3411%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (541,710 samples, 0.13%)</title><rect x="23.1297%" y="53" width="0.1314%" height="15" fill="rgb(209,103,24)"/><text x="23.3797%" y="63.50"></text></g><g><title>associated_items (1,054,327 samples, 0.26%)</title><rect x="23.0184%" y="85" width="0.2557%" height="15" fill="rgb(229,88,8)"/><text x="23.2684%" y="95.50"></text></g><g><title>evaluate_obligation (1,238,805 samples, 0.30%)</title><rect x="23.3479%" y="85" width="0.3005%" height="15" fill="rgb(213,181,19)"/><text x="23.5979%" y="95.50"></text></g><g><title>method_autoderef_steps (769,347 samples, 0.19%)</title><rect x="23.8178%" y="85" width="0.1866%" height="15" fill="rgb(254,191,54)"/><text x="24.0678%" y="95.50"></text></g><g><title>item_bodies_checking (16,133,344 samples, 3.91%)</title><rect x="20.2407%" y="133" width="3.9130%" height="15" fill="rgb(241,83,37)"/><text x="20.4907%" y="143.50">item..</text></g><g><title>typeck_item_bodies (16,131,514 samples, 3.91%)</title><rect x="20.2411%" y="117" width="3.9125%" height="15" fill="rgb(233,36,39)"/><text x="20.4911%" y="127.50">type..</text></g><g><title>typeck (16,057,754 samples, 3.89%)</title><rect x="20.2590%" y="101" width="3.8946%" height="15" fill="rgb(226,3,54)"/><text x="20.5090%" y="111.50">type..</text></g><g><title>item_types_checking (1,086,423 samples, 0.26%)</title><rect x="24.1537%" y="133" width="0.2635%" height="15" fill="rgb(245,192,40)"/><text x="24.4037%" y="143.50"></text></g><g><title>check_mod_item_types (1,083,203 samples, 0.26%)</title><rect x="24.1544%" y="117" width="0.2627%" height="15" fill="rgb(238,167,29)"/><text x="24.4044%" y="127.50"></text></g><g><title>explicit_predicates_of (652,518 samples, 0.16%)</title><rect x="24.6515%" y="69" width="0.1583%" height="15" fill="rgb(232,182,51)"/><text x="24.9015%" y="79.50"></text></g><g><title>predicates_of (852,801 samples, 0.21%)</title><rect x="24.6114%" y="101" width="0.2068%" height="15" fill="rgb(231,60,39)"/><text x="24.8614%" y="111.50"></text></g><g><title>predicates_defined_on (786,060 samples, 0.19%)</title><rect x="24.6275%" y="85" width="0.1907%" height="15" fill="rgb(208,69,12)"/><text x="24.8775%" y="95.50"></text></g><g><title>type_collecting (2,018,024 samples, 0.49%)</title><rect x="24.4178%" y="133" width="0.4894%" height="15" fill="rgb(235,93,37)"/><text x="24.6678%" y="143.50"></text></g><g><title>collect_mod_item_types (2,011,554 samples, 0.49%)</title><rect x="24.4194%" y="117" width="0.4879%" height="15" fill="rgb(213,116,39)"/><text x="24.6694%" y="127.50"></text></g><g><title>evaluate_obligation (796,782 samples, 0.19%)</title><rect x="25.4410%" y="101" width="0.1933%" height="15" fill="rgb(222,207,29)"/><text x="25.6910%" y="111.50"></text></g><g><title>check_impl_item_well_formed (3,652,898 samples, 0.89%)</title><rect x="24.9687%" y="117" width="0.8860%" height="15" fill="rgb(206,96,30)"/><text x="25.2187%" y="127.50"></text></g><g><title>evaluate_obligation (941,906 samples, 0.23%)</title><rect x="26.9604%" y="101" width="0.2284%" height="15" fill="rgb(218,138,4)"/><text x="27.2104%" y="111.50"></text></g><g><title>param_env (589,113 samples, 0.14%)</title><rect x="27.2556%" y="101" width="0.1429%" height="15" fill="rgb(250,191,14)"/><text x="27.5056%" y="111.50"></text></g><g><title>check_item_well_formed (6,691,658 samples, 1.62%)</title><rect x="25.8547%" y="117" width="1.6230%" height="15" fill="rgb(239,60,40)"/><text x="26.1047%" y="127.50"></text></g><g><title>analysis (56,309,907 samples, 13.66%)</title><rect x="13.9012%" y="165" width="13.6573%" height="15" fill="rgb(206,27,48)"/><text x="14.1512%" y="175.50">analysis</text></g><g><title>type_check_crate (36,415,058 samples, 8.83%)</title><rect x="18.7265%" y="149" width="8.8321%" height="15" fill="rgb(225,35,8)"/><text x="18.9765%" y="159.50">type_check_c..</text></g><g><title>wf_checking (10,927,061 samples, 2.65%)</title><rect x="24.9083%" y="133" width="2.6502%" height="15" fill="rgb(250,213,24)"/><text x="25.1583%" y="143.50">wf..</text></g><g><title>is_unpin_raw (414,146 samples, 0.10%)</title><rect x="30.1953%" y="117" width="0.1004%" height="15" fill="rgb(247,123,22)"/><text x="30.4453%" y="127.50"></text></g><g><title>param_env (893,874 samples, 0.22%)</title><rect x="30.3882%" y="117" width="0.2168%" height="15" fill="rgb(231,138,38)"/><text x="30.6382%" y="127.50"></text></g><g><title>fn_abi_of_instance (3,154,876 samples, 0.77%)</title><rect x="29.8874%" y="133" width="0.7652%" height="15" fill="rgb(231,145,46)"/><text x="30.1374%" y="143.50"></text></g><g><title>codegen_module (11,815,933 samples, 2.87%)</title><rect x="27.8973%" y="149" width="2.8658%" height="15" fill="rgb(251,118,11)"/><text x="28.1473%" y="159.50">co..</text></g><g><title>codegen_fn_attrs (526,036 samples, 0.13%)</title><rect x="30.9197%" y="101" width="0.1276%" height="15" fill="rgb(217,147,25)"/><text x="31.1697%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (528,261 samples, 0.13%)</title><rect x="31.2856%" y="85" width="0.1281%" height="15" fill="rgb(247,81,37)"/><text x="31.5356%" y="95.50"></text></g><g><title>optimized_mir (1,861,257 samples, 0.45%)</title><rect x="31.0901%" y="101" width="0.4514%" height="15" fill="rgb(209,12,38)"/><text x="31.3401%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (527,167 samples, 0.13%)</title><rect x="31.4137%" y="85" width="0.1279%" height="15" fill="rgb(227,1,9)"/><text x="31.6637%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (479,874 samples, 0.12%)</title><rect x="31.6060%" y="85" width="0.1164%" height="15" fill="rgb(248,47,43)"/><text x="31.8560%" y="95.50"></text></g><g><title>resolve_instance (1,271,883 samples, 0.31%)</title><rect x="31.5416%" y="101" width="0.3085%" height="15" fill="rgb(221,10,30)"/><text x="31.7916%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (4,671,186 samples, 1.13%)</title><rect x="30.7691%" y="117" width="1.1329%" height="15" fill="rgb(210,229,1)"/><text x="31.0191%" y="127.50"></text></g><g><title>monomorphization_collector (4,719,287 samples, 1.14%)</title><rect x="30.7686%" y="133" width="1.1446%" height="15" fill="rgb(222,148,37)"/><text x="31.0186%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (541,476 samples, 0.13%)</title><rect x="31.9141%" y="117" width="0.1313%" height="15" fill="rgb(234,67,33)"/><text x="32.1641%" y="127.50"></text></g><g><title>symbol_name (478,266 samples, 0.12%)</title><rect x="31.9294%" y="101" width="0.1160%" height="15" fill="rgb(247,98,35)"/><text x="32.1794%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (5,514,916 samples, 1.34%)</title><rect x="30.7641%" y="149" width="1.3376%" height="15" fill="rgb(247,138,52)"/><text x="31.0141%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (777,059 samples, 0.19%)</title><rect x="31.9132%" y="133" width="0.1885%" height="15" fill="rgb(213,79,30)"/><text x="32.1632%" y="143.50"></text></g><g><title>codegen_crate (18,737,175 samples, 4.54%)</title><rect x="27.5605%" y="165" width="4.5445%" height="15" fill="rgb(246,177,23)"/><text x="27.8105%" y="175.50">codeg..</text></g><g><title>codegen_module_optimize (82,199,938 samples, 19.94%)</title><rect x="32.1050%" y="165" width="19.9367%" height="15" fill="rgb(230,62,27)"/><text x="32.3550%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (76,169,385 samples, 18.47%)</title><rect x="33.5676%" y="149" width="18.4740%" height="15" fill="rgb(216,154,8)"/><text x="33.8176%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (51,601,428 samples, 12.52%)</title><rect x="52.9705%" y="149" width="12.5153%" height="15" fill="rgb(244,35,45)"/><text x="53.2205%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (61,911,723 samples, 15.02%)</title><rect x="65.4859%" y="149" width="15.0160%" height="15" fill="rgb(251,115,12)"/><text x="65.7359%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (60,838,611 samples, 14.76%)</title><rect x="65.7461%" y="133" width="14.7557%" height="15" fill="rgb(240,54,50)"/><text x="65.9961%" y="143.50">LLVM_module_codegen_emi..</text></g><g><title>LLVM_thin_lto_import (3,493,001 samples, 0.85%)</title><rect x="80.5019%" y="149" width="0.8472%" height="15" fill="rgb(233,84,52)"/><text x="80.7519%" y="159.50"></text></g><g><title>codegen_module_perform_lto (121,068,513 samples, 29.36%)</title><rect x="52.0417%" y="165" width="29.3638%" height="15" fill="rgb(207,117,47)"/><text x="52.2917%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (11,975,694 samples, 2.90%)</title><rect x="81.5023%" y="149" width="2.9046%" height="15" fill="rgb(249,43,39)"/><text x="81.7523%" y="159.50">ma..</text></g><g><title>expand_crate (11,965,763 samples, 2.90%)</title><rect x="81.5047%" y="133" width="2.9022%" height="15" fill="rgb(209,38,44)"/><text x="81.7547%" y="143.50">ex..</text></g><g><title>late_resolve_crate (1,888,173 samples, 0.46%)</title><rect x="84.5308%" y="133" width="0.4580%" height="15" fill="rgb(236,212,23)"/><text x="84.7808%" y="143.50"></text></g><g><title>configure_and_expand (14,849,768 samples, 3.60%)</title><rect x="81.4055%" y="165" width="3.6016%" height="15" fill="rgb(242,79,21)"/><text x="81.6555%" y="175.50">conf..</text></g><g><title>resolve_crate (2,270,477 samples, 0.55%)</title><rect x="84.4564%" y="149" width="0.5507%" height="15" fill="rgb(211,96,35)"/><text x="84.7064%" y="159.50"></text></g><g><title>free_global_ctxt (3,366,480 samples, 0.82%)</title><rect x="85.1159%" y="165" width="0.8165%" height="15" fill="rgb(253,215,40)"/><text x="85.3659%" y="175.50"></text></g><g><title>is_sized_raw (530,256 samples, 0.13%)</title><rect x="87.0386%" y="117" width="0.1286%" height="15" fill="rgb(211,81,21)"/><text x="87.2886%" y="127.50"></text></g><g><title>layout_of (886,079 samples, 0.21%)</title><rect x="86.9752%" y="133" width="0.2149%" height="15" fill="rgb(208,190,38)"/><text x="87.2252%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,418,276 samples, 0.34%)</title><rect x="87.1901%" y="133" width="0.3440%" height="15" fill="rgb(235,213,38)"/><text x="87.4401%" y="143.50"></text></g><g><title>optimized_mir (3,955,227 samples, 0.96%)</title><rect x="86.6084%" y="149" width="0.9593%" height="15" fill="rgb(237,122,38)"/><text x="86.8584%" y="159.50"></text></g><g><title>generate_crate_metadata (6,784,542 samples, 1.65%)</title><rect x="85.9324%" y="165" width="1.6455%" height="15" fill="rgb(244,218,35)"/><text x="86.1824%" y="175.50"></text></g><g><title>hir_lowering (2,491,210 samples, 0.60%)</title><rect x="87.5779%" y="165" width="0.6042%" height="15" fill="rgb(240,68,47)"/><text x="87.8279%" y="175.50"></text></g><g><title>finish_ongoing_codegen (41,327,527 samples, 10.02%)</title><rect x="88.1865%" y="149" width="10.0235%" height="15" fill="rgb(210,16,53)"/><text x="88.4365%" y="159.50">finish_ongoing..</text></g><g><title>link_crate (1,625,710 samples, 0.39%)</title><rect x="98.2101%" y="149" width="0.3943%" height="15" fill="rgb(235,124,12)"/><text x="98.4601%" y="159.50"></text></g><g><title>link_binary (1,604,869 samples, 0.39%)</title><rect x="98.2151%" y="133" width="0.3892%" height="15" fill="rgb(224,169,11)"/><text x="98.4651%" y="143.50"></text></g><g><title>link_rlib (1,168,024 samples, 0.28%)</title><rect x="98.3211%" y="117" width="0.2833%" height="15" fill="rgb(250,166,2)"/><text x="98.5711%" y="127.50"></text></g><g><title>link (42,981,797 samples, 10.42%)</title><rect x="88.1821%" y="165" width="10.4248%" height="15" fill="rgb(242,216,29)"/><text x="88.4321%" y="175.50">link</text></g><g><title>parse_crate (3,398,311 samples, 0.82%)</title><rect x="98.6068%" y="165" width="0.8242%" height="15" fill="rgb(230,116,27)"/><text x="98.8568%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,515,139 samples, 0.37%)</title><rect x="99.4898%" y="165" width="0.3675%" height="15" fill="rgb(228,99,48)"/><text x="99.7398%" y="175.50"></text></g><g><title>all (412,305,263 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (412,305,263 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (522,616 samples, 0.13%)</title><rect x="99.8732%" y="165" width="0.1268%" height="15" fill="rgb(236,97,10)"/><text x="100.1232%" y="175.50"></text></g></svg></svg>