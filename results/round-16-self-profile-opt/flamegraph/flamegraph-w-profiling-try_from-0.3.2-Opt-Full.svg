<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (160,565,852 samples, 21.26%)</title><rect x="0.1031%" y="165" width="21.2554%" height="15" fill="rgb(227,0,7)"/><text x="0.3531%" y="175.50">LLVM_passes</text></g><g><title>thir_body (2,326,156 samples, 0.31%)</title><rect x="24.6919%" y="53" width="0.3079%" height="15" fill="rgb(217,0,24)"/><text x="24.9419%" y="63.50"></text></g><g><title>mir_const (10,665,193 samples, 1.41%)</title><rect x="23.5920%" y="101" width="1.4118%" height="15" fill="rgb(221,193,54)"/><text x="23.8420%" y="111.50"></text></g><g><title>unsafety_check_result (8,941,978 samples, 1.18%)</title><rect x="23.8201%" y="85" width="1.1837%" height="15" fill="rgb(248,212,6)"/><text x="24.0701%" y="95.50"></text></g><g><title>mir_built (8,147,689 samples, 1.08%)</title><rect x="23.9252%" y="69" width="1.0786%" height="15" fill="rgb(208,68,35)"/><text x="24.1752%" y="79.50"></text></g><g><title>mir_promoted (12,295,940 samples, 1.63%)</title><rect x="23.3881%" y="117" width="1.6277%" height="15" fill="rgb(232,128,0)"/><text x="23.6381%" y="127.50"></text></g><g><title>MIR_borrow_checking (28,038,689 samples, 3.71%)</title><rect x="21.4294%" y="149" width="3.7117%" height="15" fill="rgb(207,160,47)"/><text x="21.6794%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (27,759,784 samples, 3.67%)</title><rect x="21.4664%" y="133" width="3.6748%" height="15" fill="rgb(228,23,34)"/><text x="21.7164%" y="143.50">mir_..</text></g><g><title>check_mod_attrs (1,009,861 samples, 0.13%)</title><rect x="25.2068%" y="133" width="0.1337%" height="15" fill="rgb(218,30,26)"/><text x="25.4568%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,041,142 samples, 0.14%)</title><rect x="25.3857%" y="133" width="0.1378%" height="15" fill="rgb(220,122,19)"/><text x="25.6357%" y="143.50"></text></g><g><title>misc_checking_1 (2,501,668 samples, 0.33%)</title><rect x="25.2035%" y="149" width="0.3312%" height="15" fill="rgb(250,228,42)"/><text x="25.4535%" y="159.50"></text></g><g><title>misc_checking_2 (1,381,596 samples, 0.18%)</title><rect x="25.5347%" y="149" width="0.1829%" height="15" fill="rgb(240,193,28)"/><text x="25.7847%" y="159.50"></text></g><g><title>crate_lints (2,648,569 samples, 0.35%)</title><rect x="25.8728%" y="117" width="0.3506%" height="15" fill="rgb(216,20,37)"/><text x="26.1228%" y="127.50"></text></g><g><title>type_of (1,080,273 samples, 0.14%)</title><rect x="26.0804%" y="101" width="0.1430%" height="15" fill="rgb(206,188,39)"/><text x="26.3304%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (849,342 samples, 0.11%)</title><rect x="26.1110%" y="85" width="0.1124%" height="15" fill="rgb(217,207,13)"/><text x="26.3610%" y="95.50"></text></g><g><title>lint_checking (3,323,506 samples, 0.44%)</title><rect x="25.8726%" y="133" width="0.4400%" height="15" fill="rgb(231,73,38)"/><text x="26.1226%" y="143.50"></text></g><g><title>privacy_checking_modules (1,318,375 samples, 0.17%)</title><rect x="26.3961%" y="133" width="0.1745%" height="15" fill="rgb(225,20,46)"/><text x="26.6461%" y="143.50"></text></g><g><title>check_mod_privacy (1,315,685 samples, 0.17%)</title><rect x="26.3965%" y="117" width="0.1742%" height="15" fill="rgb(210,31,41)"/><text x="26.6465%" y="127.50"></text></g><g><title>misc_checking_3 (6,456,111 samples, 0.85%)</title><rect x="25.7176%" y="149" width="0.8546%" height="15" fill="rgb(221,200,47)"/><text x="25.9676%" y="159.50"></text></g><g><title>impl_parent (2,616,144 samples, 0.35%)</title><rect x="27.1782%" y="85" width="0.3463%" height="15" fill="rgb(226,26,5)"/><text x="27.4282%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,406,003 samples, 0.19%)</title><rect x="27.3384%" y="69" width="0.1861%" height="15" fill="rgb(249,33,26)"/><text x="27.5884%" y="79.50"></text></g><g><title>impl_trait_ref (5,446,549 samples, 0.72%)</title><rect x="27.5246%" y="85" width="0.7210%" height="15" fill="rgb(235,183,28)"/><text x="27.7746%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,237,188 samples, 0.56%)</title><rect x="27.6847%" y="69" width="0.5609%" height="15" fill="rgb(221,5,38)"/><text x="27.9347%" y="79.50"></text></g><g><title>trait_impls_of (843,340 samples, 0.11%)</title><rect x="28.2493%" y="85" width="0.1116%" height="15" fill="rgb(247,18,42)"/><text x="28.4993%" y="95.50"></text></g><g><title>coherent_trait (13,386,646 samples, 1.77%)</title><rect x="26.5890%" y="117" width="1.7721%" height="15" fill="rgb(241,131,45)"/><text x="26.8390%" y="127.50">c..</text></g><g><title>specialization_graph_of (13,028,173 samples, 1.72%)</title><rect x="26.6364%" y="101" width="1.7246%" height="15" fill="rgb(249,31,29)"/><text x="26.8864%" y="111.50"></text></g><g><title>coherence_checking (13,516,079 samples, 1.79%)</title><rect x="26.5862%" y="133" width="1.7892%" height="15" fill="rgb(225,111,53)"/><text x="26.8362%" y="143.50">c..</text></g><g><title>evaluate_obligation (781,148 samples, 0.10%)</title><rect x="32.3750%" y="85" width="0.1034%" height="15" fill="rgb(238,160,17)"/><text x="32.6250%" y="95.50"></text></g><g><title>item_bodies_checking (31,661,060 samples, 4.19%)</title><rect x="28.3896%" y="133" width="4.1912%" height="15" fill="rgb(214,148,48)"/><text x="28.6396%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (31,657,940 samples, 4.19%)</title><rect x="28.3901%" y="117" width="4.1908%" height="15" fill="rgb(232,36,49)"/><text x="28.6401%" y="127.50">typec..</text></g><g><title>typeck (31,455,085 samples, 4.16%)</title><rect x="28.4169%" y="101" width="4.1640%" height="15" fill="rgb(209,103,24)"/><text x="28.6669%" y="111.50">typeck</text></g><g><title>item_types_checking (5,738,882 samples, 0.76%)</title><rect x="32.5809%" y="133" width="0.7597%" height="15" fill="rgb(229,88,8)"/><text x="32.8309%" y="143.50"></text></g><g><title>check_mod_item_types (5,734,492 samples, 0.76%)</title><rect x="32.5815%" y="117" width="0.7591%" height="15" fill="rgb(213,181,19)"/><text x="32.8315%" y="127.50"></text></g><g><title>fn_sig (1,152,963 samples, 0.15%)</title><rect x="33.4366%" y="101" width="0.1526%" height="15" fill="rgb(254,191,54)"/><text x="33.6866%" y="111.50"></text></g><g><title>predicates_of (839,502 samples, 0.11%)</title><rect x="33.6754%" y="101" width="0.1111%" height="15" fill="rgb(241,83,37)"/><text x="33.9254%" y="111.50"></text></g><g><title>type_collecting (3,691,250 samples, 0.49%)</title><rect x="33.3409%" y="133" width="0.4886%" height="15" fill="rgb(233,36,39)"/><text x="33.5909%" y="143.50"></text></g><g><title>collect_mod_item_types (3,683,070 samples, 0.49%)</title><rect x="33.3420%" y="117" width="0.4876%" height="15" fill="rgb(226,3,54)"/><text x="33.5920%" y="127.50"></text></g><g><title>param_env (1,085,972 samples, 0.14%)</title><rect x="34.4321%" y="101" width="0.1438%" height="15" fill="rgb(245,192,40)"/><text x="34.6821%" y="111.50"></text></g><g><title>check_impl_item_well_formed (6,256,654 samples, 0.83%)</title><rect x="33.9013%" y="117" width="0.8282%" height="15" fill="rgb(238,167,29)"/><text x="34.1513%" y="127.50"></text></g><g><title>region_scope_tree (1,134,987 samples, 0.15%)</title><rect x="34.5793%" y="101" width="0.1502%" height="15" fill="rgb(232,182,51)"/><text x="34.8293%" y="111.50"></text></g><g><title>evaluate_obligation (1,584,951 samples, 0.21%)</title><rect x="35.1418%" y="101" width="0.2098%" height="15" fill="rgb(231,60,39)"/><text x="35.3918%" y="111.50"></text></g><g><title>check_item_well_formed (5,680,148 samples, 0.75%)</title><rect x="34.7296%" y="117" width="0.7519%" height="15" fill="rgb(208,69,12)"/><text x="34.9796%" y="127.50"></text></g><g><title>analysis (106,862,710 samples, 14.15%)</title><rect x="21.3585%" y="165" width="14.1463%" height="15" fill="rgb(235,93,37)"/><text x="21.6085%" y="175.50">analysis</text></g><g><title>type_check_crate (67,477,764 samples, 8.93%)</title><rect x="26.5722%" y="149" width="8.9326%" height="15" fill="rgb(213,116,39)"/><text x="26.8222%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (12,643,789 samples, 1.67%)</title><rect x="33.8310%" y="133" width="1.6738%" height="15" fill="rgb(222,207,29)"/><text x="34.0810%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,024,482 samples, 0.14%)</title><rect x="36.4364%" y="133" width="0.1356%" height="15" fill="rgb(206,96,30)"/><text x="36.6864%" y="143.50"></text></g><g><title>codegen_module (7,416,271 samples, 0.98%)</title><rect x="35.5964%" y="149" width="0.9818%" height="15" fill="rgb(218,138,4)"/><text x="35.8464%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,420,424 samples, 0.85%)</title><rect x="37.8716%" y="85" width="0.8499%" height="15" fill="rgb(250,191,14)"/><text x="38.1216%" y="95.50"></text></g><g><title>eval_to_const_value_raw (890,019 samples, 0.12%)</title><rect x="38.7296%" y="69" width="0.1178%" height="15" fill="rgb(239,60,40)"/><text x="38.9796%" y="79.50"></text></g><g><title>eval_to_const_value_raw (873,349 samples, 0.12%)</title><rect x="38.7319%" y="53" width="0.1156%" height="15" fill="rgb(206,27,48)"/><text x="38.9819%" y="63.50"></text></g><g><title>eval_to_allocation_raw (846,899 samples, 0.11%)</title><rect x="38.7354%" y="37" width="0.1121%" height="15" fill="rgb(225,35,8)"/><text x="38.9854%" y="47.50"></text></g><g><title>optimized_mir (16,079,086 samples, 2.13%)</title><rect x="36.7236%" y="101" width="2.1285%" height="15" fill="rgb(250,213,24)"/><text x="36.9736%" y="111.50">o..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (986,311 samples, 0.13%)</title><rect x="38.7215%" y="85" width="0.1306%" height="15" fill="rgb(247,123,22)"/><text x="38.9715%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (17,589,725 samples, 2.33%)</title><rect x="36.5819%" y="117" width="2.3285%" height="15" fill="rgb(231,138,38)"/><text x="36.8319%" y="127.50">m..</text></g><g><title>monomorphization_collector (17,794,917 samples, 2.36%)</title><rect x="36.5816%" y="133" width="2.3557%" height="15" fill="rgb(231,145,46)"/><text x="36.8316%" y="143.50">m..</text></g><g><title>collect_and_partition_mono_items (18,332,053 samples, 2.43%)</title><rect x="36.5783%" y="149" width="2.4268%" height="15" fill="rgb(251,118,11)"/><text x="36.8283%" y="159.50">co..</text></g><g><title>codegen_crate (26,500,533 samples, 3.51%)</title><rect x="35.5060%" y="165" width="3.5081%" height="15" fill="rgb(217,147,25)"/><text x="35.7560%" y="175.50">cod..</text></g><g><title>codegen_module_optimize (112,299,161 samples, 14.87%)</title><rect x="39.0141%" y="165" width="14.8660%" height="15" fill="rgb(247,81,37)"/><text x="39.2641%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (107,160,113 samples, 14.19%)</title><rect x="39.6944%" y="149" width="14.1857%" height="15" fill="rgb(209,12,38)"/><text x="39.9444%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (59,637,898 samples, 7.89%)</title><rect x="54.1116%" y="149" width="7.8948%" height="15" fill="rgb(227,1,9)"/><text x="54.3616%" y="159.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (76,014,228 samples, 10.06%)</title><rect x="62.0063%" y="149" width="10.0626%" height="15" fill="rgb(248,47,43)"/><text x="62.2563%" y="159.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (75,610,493 samples, 10.01%)</title><rect x="62.0598%" y="133" width="10.0092%" height="15" fill="rgb(221,10,30)"/><text x="62.3098%" y="143.50">LLVM_module_co..</text></g><g><title>codegen_module_perform_lto (138,300,466 samples, 18.31%)</title><rect x="53.8800%" y="165" width="18.3080%" height="15" fill="rgb(210,229,1)"/><text x="54.1300%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,315,555 samples, 0.31%)</title><rect x="76.2733%" y="117" width="0.3065%" height="15" fill="rgb(222,148,37)"/><text x="76.5233%" y="127.50"></text></g><g><title>metadata_register_crate (852,759 samples, 0.11%)</title><rect x="76.4670%" y="101" width="0.1129%" height="15" fill="rgb(234,67,33)"/><text x="76.7170%" y="111.50"></text></g><g><title>macro_expand_crate (32,859,633 samples, 4.35%)</title><rect x="72.2533%" y="149" width="4.3499%" height="15" fill="rgb(247,98,35)"/><text x="72.5033%" y="159.50">macro..</text></g><g><title>expand_crate (32,841,693 samples, 4.35%)</title><rect x="72.2556%" y="133" width="4.3475%" height="15" fill="rgb(247,138,52)"/><text x="72.5056%" y="143.50">expan..</text></g><g><title>late_resolve_crate (3,599,440 samples, 0.48%)</title><rect x="76.6401%" y="133" width="0.4765%" height="15" fill="rgb(213,79,30)"/><text x="76.8901%" y="143.50"></text></g><g><title>configure_and_expand (37,392,113 samples, 4.95%)</title><rect x="72.1880%" y="165" width="4.9499%" height="15" fill="rgb(246,177,23)"/><text x="72.4380%" y="175.50">config..</text></g><g><title>resolve_crate (3,966,244 samples, 0.53%)</title><rect x="76.6129%" y="149" width="0.5250%" height="15" fill="rgb(230,62,27)"/><text x="76.8629%" y="159.50"></text></g><g><title>early_lint_checks (918,850 samples, 0.12%)</title><rect x="77.1785%" y="165" width="0.1216%" height="15" fill="rgb(216,154,8)"/><text x="77.4285%" y="175.50"></text></g><g><title>free_global_ctxt (4,691,322 samples, 0.62%)</title><rect x="77.3002%" y="165" width="0.6210%" height="15" fill="rgb(244,35,45)"/><text x="77.5502%" y="175.50"></text></g><g><title>exported_symbols (910,360 samples, 0.12%)</title><rect x="78.1703%" y="149" width="0.1205%" height="15" fill="rgb(251,115,12)"/><text x="78.4203%" y="159.50"></text></g><g><title>optimized_mir (951,511 samples, 0.13%)</title><rect x="78.3088%" y="149" width="0.1260%" height="15" fill="rgb(240,54,50)"/><text x="78.5588%" y="159.50"></text></g><g><title>generate_crate_metadata (3,923,213 samples, 0.52%)</title><rect x="77.9212%" y="165" width="0.5193%" height="15" fill="rgb(233,84,52)"/><text x="78.1712%" y="175.50"></text></g><g><title>hir_lowering (6,851,456 samples, 0.91%)</title><rect x="78.4405%" y="165" width="0.9070%" height="15" fill="rgb(207,117,47)"/><text x="78.6905%" y="175.50"></text></g><g><title>finish_ongoing_codegen (151,964,497 samples, 20.12%)</title><rect x="79.3497%" y="149" width="20.1168%" height="15" fill="rgb(249,43,39)"/><text x="79.5997%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,103,752 samples, 0.15%)</title><rect x="99.4665%" y="149" width="0.1461%" height="15" fill="rgb(209,38,44)"/><text x="99.7165%" y="159.50"></text></g><g><title>link_binary (1,075,412 samples, 0.14%)</title><rect x="99.4703%" y="133" width="0.1424%" height="15" fill="rgb(236,212,23)"/><text x="99.7203%" y="143.50"></text></g><g><title>link_rlib (779,139 samples, 0.10%)</title><rect x="99.5095%" y="117" width="0.1031%" height="15" fill="rgb(242,79,21)"/><text x="99.7595%" y="127.50"></text></g><g><title>link (153,096,570 samples, 20.27%)</title><rect x="79.3475%" y="165" width="20.2667%" height="15" fill="rgb(211,96,35)"/><text x="79.5975%" y="175.50">link</text></g><g><title>parse_crate (857,410 samples, 0.11%)</title><rect x="99.6142%" y="165" width="0.1135%" height="15" fill="rgb(253,215,40)"/><text x="99.8642%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,361,415 samples, 0.18%)</title><rect x="99.7584%" y="165" width="0.1802%" height="15" fill="rgb(211,81,21)"/><text x="100.0084%" y="175.50"></text></g><g><title>all (755,411,009 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (755,411,009 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>