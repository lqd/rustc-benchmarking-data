<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,408,553 samples, 14.04%)</title><rect x="0.6822%" y="197" width="14.0397%" height="15" fill="rgb(227,0,7)"/><text x="0.9322%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (132,342 samples, 0.22%)</title><rect x="14.5009%" y="181" width="0.2210%" height="15" fill="rgb(217,0,24)"/><text x="14.7509%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (119,151 samples, 0.20%)</title><rect x="14.5229%" y="165" width="0.1989%" height="15" fill="rgb(221,193,54)"/><text x="14.7729%" y="175.50"></text></g><g><title>is_copy_raw (105,451 samples, 0.18%)</title><rect x="18.7028%" y="53" width="0.1761%" height="15" fill="rgb(248,212,6)"/><text x="18.9528%" y="63.50"></text></g><g><title>evaluate_obligation (101,651 samples, 0.17%)</title><rect x="18.7091%" y="37" width="0.1697%" height="15" fill="rgb(208,68,35)"/><text x="18.9591%" y="47.50"></text></g><g><title>adt_drop_tys (119,851 samples, 0.20%)</title><rect x="18.6938%" y="69" width="0.2001%" height="15" fill="rgb(232,128,0)"/><text x="18.9438%" y="79.50"></text></g><g><title>needs_drop_raw (495,375 samples, 0.83%)</title><rect x="18.6351%" y="85" width="0.8271%" height="15" fill="rgb(207,160,47)"/><text x="18.8851%" y="95.50"></text></g><g><title>is_copy_raw (340,344 samples, 0.57%)</title><rect x="18.8940%" y="69" width="0.5683%" height="15" fill="rgb(228,23,34)"/><text x="19.1440%" y="79.50"></text></g><g><title>evaluate_obligation (298,584 samples, 0.50%)</title><rect x="18.9637%" y="53" width="0.4985%" height="15" fill="rgb(218,30,26)"/><text x="19.2137%" y="63.50"></text></g><g><title>trait_impls_of (132,672 samples, 0.22%)</title><rect x="19.2407%" y="37" width="0.2215%" height="15" fill="rgb(220,122,19)"/><text x="19.4907%" y="47.50"></text></g><g><title>thir_body (100,461 samples, 0.17%)</title><rect x="19.5645%" y="85" width="0.1677%" height="15" fill="rgb(250,228,42)"/><text x="19.8145%" y="95.50"></text></g><g><title>mir_const (1,360,574 samples, 2.27%)</title><rect x="17.4656%" y="133" width="2.2717%" height="15" fill="rgb(240,193,28)"/><text x="17.7156%" y="143.50">m..</text></g><g><title>unsafety_check_result (1,117,351 samples, 1.87%)</title><rect x="17.8718%" y="117" width="1.8656%" height="15" fill="rgb(216,20,37)"/><text x="18.1218%" y="127.50">u..</text></g><g><title>mir_built (993,560 samples, 1.66%)</title><rect x="18.0784%" y="101" width="1.6589%" height="15" fill="rgb(206,188,39)"/><text x="18.3284%" y="111.50"></text></g><g><title>mir_promoted (1,539,495 samples, 2.57%)</title><rect x="17.1857%" y="149" width="2.5705%" height="15" fill="rgb(217,207,13)"/><text x="17.4357%" y="159.50">mi..</text></g><g><title>type_op_prove_predicate (219,101 samples, 0.37%)</title><rect x="19.9040%" y="149" width="0.3658%" height="15" fill="rgb(231,73,38)"/><text x="20.1540%" y="159.50"></text></g><g><title>MIR_borrow_checking (3,215,525 samples, 5.37%)</title><rect x="14.9030%" y="181" width="5.3689%" height="15" fill="rgb(225,20,46)"/><text x="15.1530%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (3,196,485 samples, 5.34%)</title><rect x="14.9348%" y="165" width="5.3371%" height="15" fill="rgb(210,31,41)"/><text x="15.1848%" y="175.50">mir_bor..</text></g><g><title>hir_module_items (86,881 samples, 0.15%)</title><rect x="20.2817%" y="181" width="0.1451%" height="15" fill="rgb(221,200,47)"/><text x="20.5317%" y="191.50"></text></g><g><title>codegen_fn_attrs (115,711 samples, 0.19%)</title><rect x="20.7000%" y="117" width="0.1932%" height="15" fill="rgb(226,26,5)"/><text x="20.9500%" y="127.50"></text></g><g><title>codegen_fn_attrs (177,412 samples, 0.30%)</title><rect x="20.5998%" y="149" width="0.2962%" height="15" fill="rgb(249,33,26)"/><text x="20.8498%" y="159.50"></text></g><g><title>should_inherit_track_caller (156,791 samples, 0.26%)</title><rect x="20.6342%" y="133" width="0.2618%" height="15" fill="rgb(235,183,28)"/><text x="20.8842%" y="143.50"></text></g><g><title>check_mod_attrs (251,734 samples, 0.42%)</title><rect x="20.4759%" y="165" width="0.4203%" height="15" fill="rgb(221,5,38)"/><text x="20.7259%" y="175.50"></text></g><g><title>lookup_deprecation_entry (73,791 samples, 0.12%)</title><rect x="21.1052%" y="149" width="0.1232%" height="15" fill="rgb(247,18,42)"/><text x="21.3552%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (165,711 samples, 0.28%)</title><rect x="20.9944%" y="165" width="0.2767%" height="15" fill="rgb(241,131,45)"/><text x="21.2444%" y="175.50"></text></g><g><title>misc_checking_1 (540,166 samples, 0.90%)</title><rect x="20.4273%" y="181" width="0.9019%" height="15" fill="rgb(249,31,29)"/><text x="20.6773%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (76,751 samples, 0.13%)</title><rect x="21.3313%" y="165" width="0.1282%" height="15" fill="rgb(225,111,53)"/><text x="21.5813%" y="175.50"></text></g><g><title>misc_checking_2 (172,772 samples, 0.29%)</title><rect x="21.3292%" y="181" width="0.2885%" height="15" fill="rgb(238,160,17)"/><text x="21.5792%" y="191.50"></text></g><g><title>match_checking (94,751 samples, 0.16%)</title><rect x="21.4595%" y="165" width="0.1582%" height="15" fill="rgb(214,148,48)"/><text x="21.7095%" y="175.50"></text></g><g><title>check_match (88,121 samples, 0.15%)</title><rect x="21.4706%" y="149" width="0.1471%" height="15" fill="rgb(232,36,49)"/><text x="21.7206%" y="159.50"></text></g><g><title>check_private_in_public (67,731 samples, 0.11%)</title><rect x="21.6305%" y="165" width="0.1131%" height="15" fill="rgb(209,103,24)"/><text x="21.8805%" y="175.50"></text></g><g><title>death_checking (193,052 samples, 0.32%)</title><rect x="21.7436%" y="165" width="0.3223%" height="15" fill="rgb(229,88,8)"/><text x="21.9936%" y="175.50"></text></g><g><title>lint_levels (62,191 samples, 0.10%)</title><rect x="21.9621%" y="149" width="0.1038%" height="15" fill="rgb(213,181,19)"/><text x="22.2121%" y="159.50"></text></g><g><title>param_env (117,372 samples, 0.20%)</title><rect x="23.0071%" y="133" width="0.1960%" height="15" fill="rgb(254,191,54)"/><text x="23.2571%" y="143.50"></text></g><g><title>crate_lints (1,696,579 samples, 2.83%)</title><rect x="22.0683%" y="149" width="2.8328%" height="15" fill="rgb(241,83,37)"/><text x="22.3183%" y="159.50">cr..</text></g><g><title>type_of (1,016,942 samples, 1.70%)</title><rect x="23.2031%" y="133" width="1.6980%" height="15" fill="rgb(233,36,39)"/><text x="23.4531%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (787,260 samples, 1.31%)</title><rect x="23.5866%" y="117" width="1.3145%" height="15" fill="rgb(226,3,54)"/><text x="23.8366%" y="127.50"></text></g><g><title>lint_checking (1,756,449 samples, 2.93%)</title><rect x="22.0660%" y="165" width="2.9327%" height="15" fill="rgb(245,192,40)"/><text x="22.3160%" y="175.50">li..</text></g><g><title>privacy_access_levels (75,251 samples, 0.13%)</title><rect x="24.9987%" y="165" width="0.1256%" height="15" fill="rgb(238,167,29)"/><text x="25.2487%" y="175.50"></text></g><g><title>privacy_checking_modules (163,972 samples, 0.27%)</title><rect x="25.1243%" y="165" width="0.2738%" height="15" fill="rgb(232,182,51)"/><text x="25.3743%" y="175.50"></text></g><g><title>check_mod_privacy (161,172 samples, 0.27%)</title><rect x="25.1290%" y="149" width="0.2691%" height="15" fill="rgb(231,60,39)"/><text x="25.3790%" y="159.50"></text></g><g><title>misc_checking_3 (2,273,985 samples, 3.80%)</title><rect x="21.6177%" y="181" width="3.7969%" height="15" fill="rgb(208,69,12)"/><text x="21.8677%" y="191.50">misc..</text></g><g><title>impl_parent (1,609,623 samples, 2.69%)</title><rect x="28.7725%" y="117" width="2.6876%" height="15" fill="rgb(235,93,37)"/><text x="29.0225%" y="127.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (901,482 samples, 1.51%)</title><rect x="29.9548%" y="101" width="1.5052%" height="15" fill="rgb(213,116,39)"/><text x="30.2048%" y="111.50"></text></g><g><title>impl_trait_ref (3,894,272 samples, 6.50%)</title><rect x="31.4600%" y="117" width="6.5022%" height="15" fill="rgb(222,207,29)"/><text x="31.7100%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,390,758 samples, 5.66%)</title><rect x="32.3007%" y="101" width="5.6615%" height="15" fill="rgb(206,96,30)"/><text x="32.5507%" y="111.50">metadat..</text></g><g><title>coherent_trait (7,899,126 samples, 13.19%)</title><rect x="25.4809%" y="149" width="13.1891%" height="15" fill="rgb(218,138,4)"/><text x="25.7309%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (7,890,726 samples, 13.18%)</title><rect x="25.4950%" y="133" width="13.1751%" height="15" fill="rgb(250,191,14)"/><text x="25.7450%" y="143.50">specialization_graph..</text></g><g><title>trait_impls_of (421,754 samples, 0.70%)</title><rect x="37.9658%" y="117" width="0.7042%" height="15" fill="rgb(239,60,40)"/><text x="38.2158%" y="127.50"></text></g><g><title>implementations_of_trait (96,302 samples, 0.16%)</title><rect x="38.5092%" y="101" width="0.1608%" height="15" fill="rgb(206,27,48)"/><text x="38.7592%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (79,182 samples, 0.13%)</title><rect x="38.5378%" y="85" width="0.1322%" height="15" fill="rgb(225,35,8)"/><text x="38.7878%" y="95.50"></text></g><g><title>coherence_checking (7,947,699 samples, 13.27%)</title><rect x="25.4580%" y="165" width="13.2702%" height="15" fill="rgb(250,213,24)"/><text x="25.7080%" y="175.50">coherence_checking</text></g><g><title>adt_dtorck_constraint (63,050 samples, 0.11%)</title><rect x="41.6350%" y="101" width="0.1053%" height="15" fill="rgb(247,123,22)"/><text x="41.8850%" y="111.50"></text></g><g><title>dropck_outlives (145,261 samples, 0.24%)</title><rect x="41.5182%" y="117" width="0.2425%" height="15" fill="rgb(231,138,38)"/><text x="41.7682%" y="127.50"></text></g><g><title>method_autoderef_steps (95,310 samples, 0.16%)</title><rect x="41.9563%" y="117" width="0.1591%" height="15" fill="rgb(231,145,46)"/><text x="42.2063%" y="127.50"></text></g><g><title>object_safety_violations (140,181 samples, 0.23%)</title><rect x="42.1154%" y="117" width="0.2341%" height="15" fill="rgb(251,118,11)"/><text x="42.3654%" y="127.50"></text></g><g><title>item_bodies_checking (2,250,755 samples, 3.76%)</title><rect x="38.7577%" y="165" width="3.7581%" height="15" fill="rgb(217,147,25)"/><text x="39.0077%" y="175.50">item..</text></g><g><title>typeck_item_bodies (2,248,905 samples, 3.75%)</title><rect x="38.7608%" y="149" width="3.7550%" height="15" fill="rgb(247,81,37)"/><text x="39.0108%" y="159.50">type..</text></g><g><title>typeck (2,234,245 samples, 3.73%)</title><rect x="38.7853%" y="133" width="3.7305%" height="15" fill="rgb(209,12,38)"/><text x="39.0353%" y="143.50">type..</text></g><g><title>impl_trait_ref (132,651 samples, 0.22%)</title><rect x="43.0712%" y="85" width="0.2215%" height="15" fill="rgb(227,1,9)"/><text x="43.3212%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (113,991 samples, 0.19%)</title><rect x="43.1023%" y="69" width="0.1903%" height="15" fill="rgb(248,47,43)"/><text x="43.3523%" y="79.50"></text></g><g><title>adt_destructor (288,673 samples, 0.48%)</title><rect x="42.8530%" y="133" width="0.4820%" height="15" fill="rgb(221,10,30)"/><text x="43.1030%" y="143.50"></text></g><g><title>coherent_trait (285,523 samples, 0.48%)</title><rect x="42.8583%" y="117" width="0.4767%" height="15" fill="rgb(210,229,1)"/><text x="43.1083%" y="127.50"></text></g><g><title>specialization_graph_of (284,053 samples, 0.47%)</title><rect x="42.8607%" y="101" width="0.4743%" height="15" fill="rgb(222,148,37)"/><text x="43.1107%" y="111.50"></text></g><g><title>item_types_checking (528,286 samples, 0.88%)</title><rect x="42.5158%" y="165" width="0.8821%" height="15" fill="rgb(234,67,33)"/><text x="42.7658%" y="175.50"></text></g><g><title>check_mod_item_types (524,346 samples, 0.88%)</title><rect x="42.5224%" y="149" width="0.8755%" height="15" fill="rgb(247,98,35)"/><text x="42.7724%" y="159.50"></text></g><g><title>fn_sig (182,623 samples, 0.30%)</title><rect x="43.5588%" y="133" width="0.3049%" height="15" fill="rgb(247,138,52)"/><text x="43.8088%" y="143.50"></text></g><g><title>explicit_predicates_of (155,811 samples, 0.26%)</title><rect x="44.0132%" y="101" width="0.2602%" height="15" fill="rgb(213,79,30)"/><text x="44.2632%" y="111.50"></text></g><g><title>predicates_of (203,931 samples, 0.34%)</title><rect x="43.9650%" y="133" width="0.3405%" height="15" fill="rgb(246,177,23)"/><text x="44.2150%" y="143.50"></text></g><g><title>predicates_defined_on (192,931 samples, 0.32%)</title><rect x="43.9834%" y="117" width="0.3221%" height="15" fill="rgb(230,62,27)"/><text x="44.2334%" y="127.50"></text></g><g><title>type_collecting (922,020 samples, 1.54%)</title><rect x="43.3995%" y="165" width="1.5395%" height="15" fill="rgb(216,154,8)"/><text x="43.6495%" y="175.50"></text></g><g><title>collect_mod_item_types (909,540 samples, 1.52%)</title><rect x="43.4204%" y="149" width="1.5187%" height="15" fill="rgb(244,35,45)"/><text x="43.6704%" y="159.50"></text></g><g><title>type_of (376,565 samples, 0.63%)</title><rect x="44.3103%" y="133" width="0.6287%" height="15" fill="rgb(251,115,12)"/><text x="44.5603%" y="143.50"></text></g><g><title>evaluate_obligation (152,243 samples, 0.25%)</title><rect x="46.0645%" y="133" width="0.2542%" height="15" fill="rgb(240,54,50)"/><text x="46.3145%" y="143.50"></text></g><g><title>implied_outlives_bounds (89,401 samples, 0.15%)</title><rect x="46.3260%" y="133" width="0.1493%" height="15" fill="rgb(233,84,52)"/><text x="46.5760%" y="143.50"></text></g><g><title>param_env (99,083 samples, 0.17%)</title><rect x="46.4874%" y="133" width="0.1654%" height="15" fill="rgb(207,117,47)"/><text x="46.7374%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,101,862 samples, 1.84%)</title><rect x="45.0144%" y="149" width="1.8398%" height="15" fill="rgb(249,43,39)"/><text x="45.2644%" y="159.50">c..</text></g><g><title>evaluate_obligation (97,410 samples, 0.16%)</title><rect x="47.3915%" y="133" width="0.1626%" height="15" fill="rgb(209,38,44)"/><text x="47.6415%" y="143.50"></text></g><g><title>param_env (114,072 samples, 0.19%)</title><rect x="47.6379%" y="133" width="0.1905%" height="15" fill="rgb(236,212,23)"/><text x="47.8879%" y="143.50"></text></g><g><title>analysis (19,914,010 samples, 33.25%)</title><rect x="14.7219%" y="197" width="33.2502%" height="15" fill="rgb(242,79,21)"/><text x="14.9719%" y="207.50">analysis</text></g><g><title>type_check_crate (13,510,020 samples, 22.56%)</title><rect x="25.4145%" y="181" width="22.5576%" height="15" fill="rgb(211,96,35)"/><text x="25.6645%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,815,450 samples, 3.03%)</title><rect x="44.9409%" y="165" width="3.0312%" height="15" fill="rgb(253,215,40)"/><text x="45.1909%" y="175.50">wf_..</text></g><g><title>check_item_well_formed (669,517 samples, 1.12%)</title><rect x="46.8542%" y="149" width="1.1179%" height="15" fill="rgb(211,81,21)"/><text x="47.1042%" y="159.50"></text></g><g><title>codegen_module (470,205 samples, 0.79%)</title><rect x="48.7675%" y="181" width="0.7851%" height="15" fill="rgb(208,190,38)"/><text x="49.0175%" y="191.50"></text></g><g><title>optimized_mir (127,362 samples, 0.21%)</title><rect x="49.6370%" y="133" width="0.2127%" height="15" fill="rgb(235,213,38)"/><text x="49.8870%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (158,422 samples, 0.26%)</title><rect x="49.5890%" y="149" width="0.2645%" height="15" fill="rgb(237,122,38)"/><text x="49.8390%" y="159.50"></text></g><g><title>monomorphization_collector (179,522 samples, 0.30%)</title><rect x="49.5829%" y="165" width="0.2997%" height="15" fill="rgb(244,218,35)"/><text x="49.8329%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (231,302 samples, 0.39%)</title><rect x="49.5535%" y="181" width="0.3862%" height="15" fill="rgb(240,68,47)"/><text x="49.8035%" y="191.50"></text></g><g><title>codegen_crate (1,247,304 samples, 2.08%)</title><rect x="47.9828%" y="197" width="2.0826%" height="15" fill="rgb(210,16,53)"/><text x="48.2328%" y="207.50">c..</text></g><g><title>codegen_module_optimize (4,646,931 samples, 7.76%)</title><rect x="50.0654%" y="197" width="7.7589%" height="15" fill="rgb(235,124,12)"/><text x="50.3154%" y="207.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (4,012,094 samples, 6.70%)</title><rect x="51.1254%" y="181" width="6.6990%" height="15" fill="rgb(224,169,11)"/><text x="51.3754%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (1,041,541 samples, 1.74%)</title><rect x="58.2180%" y="181" width="1.7391%" height="15" fill="rgb(250,166,2)"/><text x="58.4680%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,045,323 samples, 3.42%)</title><rect x="59.9571%" y="181" width="3.4151%" height="15" fill="rgb(242,216,29)"/><text x="60.2071%" y="191.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (1,996,933 samples, 3.33%)</title><rect x="60.0379%" y="165" width="3.3343%" height="15" fill="rgb(230,116,27)"/><text x="60.2879%" y="175.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,344,997 samples, 5.59%)</title><rect x="57.8243%" y="197" width="5.5851%" height="15" fill="rgb(228,99,48)"/><text x="58.0743%" y="207.50">codegen..</text></g><g><title>AST_validation (68,051 samples, 0.11%)</title><rect x="63.6196%" y="181" width="0.1136%" height="15" fill="rgb(253,11,6)"/><text x="63.8696%" y="191.50"></text></g><g><title>metadata_register_crate (1,307,315 samples, 2.18%)</title><rect x="74.3349%" y="149" width="2.1828%" height="15" fill="rgb(247,143,39)"/><text x="74.5849%" y="159.50">m..</text></g><g><title>metadata_register_crate (453,075 samples, 0.76%)</title><rect x="75.7612%" y="133" width="0.7565%" height="15" fill="rgb(236,97,10)"/><text x="76.0112%" y="143.50"></text></g><g><title>macro_expand_crate (7,644,445 samples, 12.76%)</title><rect x="63.8646%" y="181" width="12.7639%" height="15" fill="rgb(233,208,19)"/><text x="64.1146%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (7,635,445 samples, 12.75%)</title><rect x="63.8796%" y="165" width="12.7488%" height="15" fill="rgb(216,164,2)"/><text x="64.1296%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (66,342 samples, 0.11%)</title><rect x="76.5177%" y="149" width="0.1108%" height="15" fill="rgb(220,129,5)"/><text x="76.7677%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (79,140 samples, 0.13%)</title><rect x="76.6340%" y="181" width="0.1321%" height="15" fill="rgb(242,17,10)"/><text x="76.8840%" y="191.50"></text></g><g><title>late_resolve_crate (662,607 samples, 1.11%)</title><rect x="76.8880%" y="165" width="1.1063%" height="15" fill="rgb(242,107,0)"/><text x="77.1380%" y="175.50"></text></g><g><title>configure_and_expand (8,791,047 samples, 14.68%)</title><rect x="63.4095%" y="197" width="14.6783%" height="15" fill="rgb(251,28,31)"/><text x="63.6595%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (791,549 samples, 1.32%)</title><rect x="76.7661%" y="181" width="1.3216%" height="15" fill="rgb(233,223,10)"/><text x="77.0161%" y="191.50"></text></g><g><title>drop_ast (73,091 samples, 0.12%)</title><rect x="78.0878%" y="197" width="0.1220%" height="15" fill="rgb(215,21,27)"/><text x="78.3378%" y="207.50"></text></g><g><title>early_lint_checks (144,851 samples, 0.24%)</title><rect x="78.2453%" y="197" width="0.2419%" height="15" fill="rgb(232,23,21)"/><text x="78.4953%" y="207.50"></text></g><g><title>free_global_ctxt (2,586,448 samples, 4.32%)</title><rect x="78.4872%" y="197" width="4.3186%" height="15" fill="rgb(244,5,23)"/><text x="78.7372%" y="207.50">free_..</text></g><g><title>crate_hash (65,341 samples, 0.11%)</title><rect x="83.6028%" y="181" width="0.1091%" height="15" fill="rgb(226,81,46)"/><text x="83.8528%" y="191.50"></text></g><g><title>exported_symbols (114,801 samples, 0.19%)</title><rect x="83.7654%" y="181" width="0.1917%" height="15" fill="rgb(247,70,30)"/><text x="84.0154%" y="191.50"></text></g><g><title>layout_of (181,791 samples, 0.30%)</title><rect x="84.7261%" y="165" width="0.3035%" height="15" fill="rgb(212,68,19)"/><text x="84.9761%" y="175.50"></text></g><g><title>needs_drop_raw (160,290 samples, 0.27%)</title><rect x="85.7730%" y="149" width="0.2676%" height="15" fill="rgb(240,187,13)"/><text x="86.0230%" y="159.50"></text></g><g><title>is_copy_raw (138,320 samples, 0.23%)</title><rect x="85.8096%" y="133" width="0.2310%" height="15" fill="rgb(223,113,26)"/><text x="86.0596%" y="143.50"></text></g><g><title>evaluate_obligation (102,370 samples, 0.17%)</title><rect x="85.8697%" y="117" width="0.1709%" height="15" fill="rgb(206,192,2)"/><text x="86.1197%" y="127.50"></text></g><g><title>optimized_mir (1,209,863 samples, 2.02%)</title><rect x="84.0473%" y="181" width="2.0201%" height="15" fill="rgb(241,108,4)"/><text x="84.2973%" y="191.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (621,556 samples, 1.04%)</title><rect x="85.0296%" y="165" width="1.0378%" height="15" fill="rgb(247,173,49)"/><text x="85.2796%" y="175.50"></text></g><g><title>generate_crate_metadata (1,973,022 samples, 3.29%)</title><rect x="82.8057%" y="197" width="3.2943%" height="15" fill="rgb(224,114,35)"/><text x="83.0557%" y="207.50">gen..</text></g><g><title>hir_lowering (608,507 samples, 1.02%)</title><rect x="86.1001%" y="197" width="1.0160%" height="15" fill="rgb(245,159,27)"/><text x="86.3501%" y="207.50"></text></g><g><title>finish_ongoing_codegen (5,524,342 samples, 9.22%)</title><rect x="87.1364%" y="181" width="9.2239%" height="15" fill="rgb(245,172,44)"/><text x="87.3864%" y="191.50">finish_ongoin..</text></g><g><title>link_crate (673,287 samples, 1.12%)</title><rect x="96.3603%" y="181" width="1.1242%" height="15" fill="rgb(236,23,11)"/><text x="96.6103%" y="191.50"></text></g><g><title>link_binary (662,787 samples, 1.11%)</title><rect x="96.3778%" y="165" width="1.1066%" height="15" fill="rgb(205,117,38)"/><text x="96.6278%" y="175.50"></text></g><g><title>link_rlib (399,675 samples, 0.67%)</title><rect x="96.8172%" y="149" width="0.6673%" height="15" fill="rgb(237,72,25)"/><text x="97.0672%" y="159.50"></text></g><g><title>link (6,218,419 samples, 10.38%)</title><rect x="87.1161%" y="197" width="10.3828%" height="15" fill="rgb(244,70,9)"/><text x="87.3661%" y="207.50">link</text></g><g><title>parse_crate (484,785 samples, 0.81%)</title><rect x="97.4989%" y="197" width="0.8094%" height="15" fill="rgb(217,125,39)"/><text x="97.7489%" y="207.50"></text></g><g><title>prepare_outputs (174,132 samples, 0.29%)</title><rect x="98.3172%" y="197" width="0.2907%" height="15" fill="rgb(235,36,10)"/><text x="98.5672%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (431,315 samples, 0.72%)</title><rect x="98.6080%" y="197" width="0.7202%" height="15" fill="rgb(251,123,47)"/><text x="98.8580%" y="207.50"></text></g><g><title>setup_global_ctxt (94,941 samples, 0.16%)</title><rect x="99.3293%" y="197" width="0.1585%" height="15" fill="rgb(221,13,13)"/><text x="99.5793%" y="207.50"></text></g><g><title>all (59,891,333 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (59,891,333 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (306,724 samples, 0.51%)</title><rect x="99.4879%" y="197" width="0.5121%" height="15" fill="rgb(245,182,24)"/><text x="99.7379%" y="207.50"></text></g></svg></svg>