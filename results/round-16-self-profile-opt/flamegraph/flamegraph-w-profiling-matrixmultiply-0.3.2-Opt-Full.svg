<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,816,444,209 samples, 24.19%)</title><rect x="0.0211%" y="213" width="24.1882%" height="15" fill="rgb(227,0,7)"/><text x="0.2711%" y="223.50">LLVM_passes</text></g><g><title>mir_const (31,967,833 samples, 0.43%)</title><rect x="24.9018%" y="149" width="0.4257%" height="15" fill="rgb(217,0,24)"/><text x="25.1518%" y="159.50"></text></g><g><title>unsafety_check_result (28,775,818 samples, 0.38%)</title><rect x="24.9443%" y="133" width="0.3832%" height="15" fill="rgb(221,193,54)"/><text x="25.1943%" y="143.50"></text></g><g><title>mir_built (26,322,369 samples, 0.35%)</title><rect x="24.9769%" y="117" width="0.3505%" height="15" fill="rgb(248,212,6)"/><text x="25.2269%" y="127.50"></text></g><g><title>mir_promoted (35,519,142 samples, 0.47%)</title><rect x="24.8678%" y="165" width="0.4730%" height="15" fill="rgb(208,68,35)"/><text x="25.1178%" y="175.50"></text></g><g><title>MIR_borrow_checking (87,386,912 samples, 1.16%)</title><rect x="24.2279%" y="197" width="1.1637%" height="15" fill="rgb(232,128,0)"/><text x="24.4779%" y="207.50"></text></g><g><title>mir_borrowck (87,006,188 samples, 1.16%)</title><rect x="24.2329%" y="181" width="1.1586%" height="15" fill="rgb(207,160,47)"/><text x="24.4829%" y="191.50"></text></g><g><title>misc_checking_3 (11,214,457 samples, 0.15%)</title><rect x="25.5398%" y="197" width="0.1493%" height="15" fill="rgb(228,23,34)"/><text x="25.7898%" y="207.50"></text></g><g><title>coherence_checking (7,576,536 samples, 0.10%)</title><rect x="25.6958%" y="181" width="0.1009%" height="15" fill="rgb(218,30,26)"/><text x="25.9458%" y="191.50"></text></g><g><title>mir_for_ctfe_of_const_arg (10,120,861 samples, 0.13%)</title><rect x="28.9884%" y="53" width="0.1348%" height="15" fill="rgb(220,122,19)"/><text x="29.2384%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,192,260 samples, 0.12%)</title><rect x="29.0008%" y="37" width="0.1224%" height="15" fill="rgb(250,228,42)"/><text x="29.2508%" y="47.50"></text></g><g><title>eval_to_const_value_raw (32,676,636 samples, 0.44%)</title><rect x="28.8822%" y="101" width="0.4351%" height="15" fill="rgb(240,193,28)"/><text x="29.1322%" y="111.50"></text></g><g><title>eval_to_const_value_raw (29,787,729 samples, 0.40%)</title><rect x="28.9207%" y="85" width="0.3967%" height="15" fill="rgb(216,20,37)"/><text x="29.1707%" y="95.50"></text></g><g><title>eval_to_allocation_raw (29,617,668 samples, 0.39%)</title><rect x="28.9229%" y="69" width="0.3944%" height="15" fill="rgb(206,188,39)"/><text x="29.1729%" y="79.50"></text></g><g><title>typeck_const_arg (11,880,578 samples, 0.16%)</title><rect x="29.1591%" y="53" width="0.1582%" height="15" fill="rgb(217,207,13)"/><text x="29.4091%" y="63.50"></text></g><g><title>opt_const_param_of (149,668,181 samples, 1.99%)</title><rect x="27.3722%" y="133" width="1.9930%" height="15" fill="rgb(231,73,38)"/><text x="27.6222%" y="143.50">o..</text></g><g><title>typeck (149,435,819 samples, 1.99%)</title><rect x="27.3753%" y="117" width="1.9899%" height="15" fill="rgb(225,20,46)"/><text x="27.6253%" y="127.50">t..</text></g><g><title>item_bodies_checking (277,765,730 samples, 3.70%)</title><rect x="25.7974%" y="181" width="3.6988%" height="15" fill="rgb(210,31,41)"/><text x="26.0474%" y="191.50">item..</text></g><g><title>typeck_item_bodies (277,761,580 samples, 3.70%)</title><rect x="25.7975%" y="165" width="3.6987%" height="15" fill="rgb(221,200,47)"/><text x="26.0475%" y="175.50">type..</text></g><g><title>typeck (277,516,907 samples, 3.70%)</title><rect x="25.8008%" y="149" width="3.6955%" height="15" fill="rgb(226,26,5)"/><text x="26.0508%" y="159.50">type..</text></g><g><title>item_types_checking (13,025,647 samples, 0.17%)</title><rect x="29.4962%" y="181" width="0.1735%" height="15" fill="rgb(249,33,26)"/><text x="29.7462%" y="191.50"></text></g><g><title>check_mod_item_types (13,012,487 samples, 0.17%)</title><rect x="29.4964%" y="165" width="0.1733%" height="15" fill="rgb(235,183,28)"/><text x="29.7464%" y="175.50"></text></g><g><title>typeck (11,409,480 samples, 0.15%)</title><rect x="29.5178%" y="149" width="0.1519%" height="15" fill="rgb(221,5,38)"/><text x="29.7678%" y="159.50"></text></g><g><title>check_item_well_formed (9,214,714 samples, 0.12%)</title><rect x="29.7643%" y="165" width="0.1227%" height="15" fill="rgb(247,18,42)"/><text x="30.0143%" y="175.50"></text></g><g><title>analysis (427,139,630 samples, 5.69%)</title><rect x="24.2093%" y="213" width="5.6879%" height="15" fill="rgb(241,131,45)"/><text x="24.4593%" y="223.50">analysis</text></g><g><title>type_check_crate (316,010,760 samples, 4.21%)</title><rect x="25.6891%" y="197" width="4.2081%" height="15" fill="rgb(249,31,29)"/><text x="25.9391%" y="207.50">type_..</text></g><g><title>wf_checking (12,849,084 samples, 0.17%)</title><rect x="29.7261%" y="181" width="0.1711%" height="15" fill="rgb(225,111,53)"/><text x="29.9761%" y="191.50"></text></g><g><title>fn_abi_of_instance (8,184,639 samples, 0.11%)</title><rect x="32.1351%" y="181" width="0.1090%" height="15" fill="rgb(238,160,17)"/><text x="32.3851%" y="191.50"></text></g><g><title>codegen_module (177,227,923 samples, 2.36%)</title><rect x="29.9230%" y="197" width="2.3600%" height="15" fill="rgb(214,148,48)"/><text x="30.1730%" y="207.50">co..</text></g><g><title>monomorphization_collector_graph_walk (21,352,570 samples, 0.28%)</title><rect x="32.2838%" y="165" width="0.2843%" height="15" fill="rgb(232,36,49)"/><text x="32.5338%" y="175.50"></text></g><g><title>monomorphization_collector (21,487,122 samples, 0.29%)</title><rect x="32.2838%" y="181" width="0.2861%" height="15" fill="rgb(209,103,24)"/><text x="32.5338%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (24,232,693 samples, 0.32%)</title><rect x="32.2831%" y="197" width="0.3227%" height="15" fill="rgb(229,88,8)"/><text x="32.5331%" y="207.50"></text></g><g><title>codegen_crate (203,472,647 samples, 2.71%)</title><rect x="29.8972%" y="213" width="2.7095%" height="15" fill="rgb(213,181,19)"/><text x="30.1472%" y="223.50">co..</text></g><g><title>codegen_module_optimize (1,251,356,518 samples, 16.66%)</title><rect x="32.6067%" y="213" width="16.6634%" height="15" fill="rgb(254,191,54)"/><text x="32.8567%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,179,278,000 samples, 15.70%)</title><rect x="33.5666%" y="197" width="15.7035%" height="15" fill="rgb(241,83,37)"/><text x="33.8166%" y="207.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (738,575,717 samples, 9.84%)</title><rect x="50.8890%" y="197" width="9.8351%" height="15" fill="rgb(233,36,39)"/><text x="51.1390%" y="207.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (1,097,389,730 samples, 14.61%)</title><rect x="60.7240%" y="197" width="14.6131%" height="15" fill="rgb(226,3,54)"/><text x="60.9740%" y="207.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,080,345,957 samples, 14.39%)</title><rect x="60.9510%" y="181" width="14.3861%" height="15" fill="rgb(245,192,40)"/><text x="61.2010%" y="191.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (23,736,865 samples, 0.32%)</title><rect x="75.3371%" y="197" width="0.3161%" height="15" fill="rgb(238,167,29)"/><text x="75.5871%" y="207.50"></text></g><g><title>codegen_module_perform_lto (1,987,962,767 samples, 26.47%)</title><rect x="49.2701%" y="213" width="26.4722%" height="15" fill="rgb(232,182,51)"/><text x="49.5201%" y="223.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (45,440,190 samples, 0.61%)</title><rect x="75.7573%" y="197" width="0.6051%" height="15" fill="rgb(231,60,39)"/><text x="76.0073%" y="207.50"></text></g><g><title>expand_crate (45,428,970 samples, 0.60%)</title><rect x="75.7575%" y="181" width="0.6049%" height="15" fill="rgb(208,69,12)"/><text x="76.0075%" y="191.50"></text></g><g><title>late_resolve_crate (8,879,970 samples, 0.12%)</title><rect x="76.3785%" y="181" width="0.1182%" height="15" fill="rgb(235,93,37)"/><text x="76.6285%" y="191.50"></text></g><g><title>configure_and_expand (57,396,514 samples, 0.76%)</title><rect x="75.7423%" y="213" width="0.7643%" height="15" fill="rgb(213,116,39)"/><text x="75.9923%" y="223.50"></text></g><g><title>resolve_crate (10,786,171 samples, 0.14%)</title><rect x="76.3630%" y="197" width="0.1436%" height="15" fill="rgb(222,207,29)"/><text x="76.6130%" y="207.50"></text></g><g><title>free_global_ctxt (10,048,593 samples, 0.13%)</title><rect x="76.5522%" y="213" width="0.1338%" height="15" fill="rgb(206,96,30)"/><text x="76.8022%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (16,838,996 samples, 0.22%)</title><rect x="77.0865%" y="181" width="0.2242%" height="15" fill="rgb(218,138,4)"/><text x="77.3365%" y="191.50"></text></g><g><title>optimized_mir (35,287,190 samples, 0.47%)</title><rect x="76.8467%" y="197" width="0.4699%" height="15" fill="rgb(250,191,14)"/><text x="77.0967%" y="207.50"></text></g><g><title>generate_crate_metadata (47,804,777 samples, 0.64%)</title><rect x="76.6860%" y="213" width="0.6366%" height="15" fill="rgb(239,60,40)"/><text x="76.9360%" y="223.50"></text></g><g><title>hir_lowering (13,136,578 samples, 0.17%)</title><rect x="77.3226%" y="213" width="0.1749%" height="15" fill="rgb(206,27,48)"/><text x="77.5726%" y="223.50"></text></g><g><title>finish_ongoing_codegen (1,671,722,403 samples, 22.26%)</title><rect x="77.4985%" y="197" width="22.2611%" height="15" fill="rgb(225,35,8)"/><text x="77.7485%" y="207.50">finish_ongoing_codegen</text></g><g><title>link_crate (13,765,465 samples, 0.18%)</title><rect x="99.7596%" y="197" width="0.1833%" height="15" fill="rgb(250,213,24)"/><text x="100.0096%" y="207.50"></text></g><g><title>link_binary (13,490,921 samples, 0.18%)</title><rect x="99.7632%" y="181" width="0.1796%" height="15" fill="rgb(247,123,22)"/><text x="100.0132%" y="191.50"></text></g><g><title>link_rlib (11,341,777 samples, 0.15%)</title><rect x="99.7919%" y="165" width="0.1510%" height="15" fill="rgb(231,138,38)"/><text x="100.0419%" y="175.50"></text></g><g><title>link (1,685,580,199 samples, 22.45%)</title><rect x="77.4975%" y="213" width="22.4456%" height="15" fill="rgb(231,145,46)"/><text x="77.7475%" y="223.50">link</text></g><g><title>all (7,509,627,424 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(251,118,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (7,509,627,424 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(217,147,25)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>