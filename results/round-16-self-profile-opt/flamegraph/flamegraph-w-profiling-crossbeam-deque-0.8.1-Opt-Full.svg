<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,914,848 samples, 4.59%)</title><rect x="0.3047%" y="213" width="4.5850%" height="15" fill="rgb(227,0,7)"/><text x="0.5547%" y="223.50">LLVM_..</text></g><g><title>param_env (492,224 samples, 0.25%)</title><rect x="15.2543%" y="133" width="0.2532%" height="15" fill="rgb(217,0,24)"/><text x="15.5043%" y="143.50"></text></g><g><title>item_attrs (488,983 samples, 0.25%)</title><rect x="16.0378%" y="101" width="0.2515%" height="15" fill="rgb(221,193,54)"/><text x="16.2878%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (474,763 samples, 0.24%)</title><rect x="16.0451%" y="85" width="0.2442%" height="15" fill="rgb(248,212,6)"/><text x="16.2951%" y="95.50"></text></g><g><title>codegen_fn_attrs (678,698 samples, 0.35%)</title><rect x="15.9530%" y="117" width="0.3491%" height="15" fill="rgb(208,68,35)"/><text x="16.2030%" y="127.50"></text></g><g><title>is_copy_raw (586,227 samples, 0.30%)</title><rect x="18.9101%" y="85" width="0.3015%" height="15" fill="rgb(232,128,0)"/><text x="19.1601%" y="95.50"></text></g><g><title>evaluate_obligation (478,476 samples, 0.25%)</title><rect x="18.9656%" y="69" width="0.2461%" height="15" fill="rgb(207,160,47)"/><text x="19.2156%" y="79.50"></text></g><g><title>needs_drop_raw (806,561 samples, 0.41%)</title><rect x="18.7990%" y="101" width="0.4148%" height="15" fill="rgb(228,23,34)"/><text x="19.0490%" y="111.50"></text></g><g><title>impl_parent (326,012 samples, 0.17%)</title><rect x="19.7405%" y="69" width="0.1677%" height="15" fill="rgb(218,30,26)"/><text x="19.9905%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (218,052 samples, 0.11%)</title><rect x="19.7960%" y="53" width="0.1121%" height="15" fill="rgb(220,122,19)"/><text x="20.0460%" y="63.50"></text></g><g><title>specialization_graph_of (1,682,449 samples, 0.87%)</title><rect x="19.3798%" y="85" width="0.8653%" height="15" fill="rgb(250,228,42)"/><text x="19.6298%" y="95.50"></text></g><g><title>impl_trait_ref (655,227 samples, 0.34%)</title><rect x="19.9081%" y="69" width="0.3370%" height="15" fill="rgb(240,193,28)"/><text x="20.1581%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (545,217 samples, 0.28%)</title><rect x="19.9647%" y="53" width="0.2804%" height="15" fill="rgb(216,20,37)"/><text x="20.2147%" y="63.50"></text></g><g><title>resolve_instance (2,111,482 samples, 1.09%)</title><rect x="19.2138%" y="101" width="1.0860%" height="15" fill="rgb(206,188,39)"/><text x="19.4638%" y="111.50"></text></g><g><title>thir_body (2,073,670 samples, 1.07%)</title><rect x="20.3125%" y="101" width="1.0665%" height="15" fill="rgb(217,207,13)"/><text x="20.5625%" y="111.50"></text></g><g><title>mir_const (13,147,134 samples, 6.76%)</title><rect x="14.6260%" y="149" width="6.7618%" height="15" fill="rgb(231,73,38)"/><text x="14.8760%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (11,433,327 samples, 5.88%)</title><rect x="15.5075%" y="133" width="5.8803%" height="15" fill="rgb(225,20,46)"/><text x="15.7575%" y="143.50">unsafet..</text></g><g><title>mir_built (9,888,256 samples, 5.09%)</title><rect x="16.3021%" y="117" width="5.0857%" height="15" fill="rgb(210,31,41)"/><text x="16.5521%" y="127.50">mir_bu..</text></g><g><title>mir_promoted (14,588,251 samples, 7.50%)</title><rect x="14.0182%" y="165" width="7.5030%" height="15" fill="rgb(221,200,47)"/><text x="14.2682%" y="175.50">mir_promot..</text></g><g><title>mir_const_qualif (259,382 samples, 0.13%)</title><rect x="21.3878%" y="149" width="0.1334%" height="15" fill="rgb(226,26,5)"/><text x="21.6378%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (435,424 samples, 0.22%)</title><rect x="21.5212%" y="165" width="0.2239%" height="15" fill="rgb(249,33,26)"/><text x="21.7712%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (327,271 samples, 0.17%)</title><rect x="21.7451%" y="165" width="0.1683%" height="15" fill="rgb(235,183,28)"/><text x="21.9951%" y="175.50"></text></g><g><title>normalize_projection_ty (210,930 samples, 0.11%)</title><rect x="21.8050%" y="149" width="0.1085%" height="15" fill="rgb(221,5,38)"/><text x="22.0550%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,032,510 samples, 0.53%)</title><rect x="21.9258%" y="165" width="0.5310%" height="15" fill="rgb(247,18,42)"/><text x="22.1758%" y="175.50"></text></g><g><title>MIR_borrow_checking (33,759,474 samples, 17.36%)</title><rect x="5.0947%" y="197" width="17.3630%" height="15" fill="rgb(241,131,45)"/><text x="5.3447%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,639,783 samples, 17.30%)</title><rect x="5.1562%" y="181" width="17.3015%" height="15" fill="rgb(249,31,29)"/><text x="5.4062%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (201,223 samples, 0.10%)</title><rect x="22.5534%" y="197" width="0.1035%" height="15" fill="rgb(225,111,53)"/><text x="22.8034%" y="207.50"></text></g><g><title>codegen_fn_attrs (314,855 samples, 0.16%)</title><rect x="22.8341%" y="165" width="0.1619%" height="15" fill="rgb(238,160,17)"/><text x="23.0841%" y="175.50"></text></g><g><title>check_mod_attrs (640,496 samples, 0.33%)</title><rect x="22.6667%" y="181" width="0.3294%" height="15" fill="rgb(214,148,48)"/><text x="22.9167%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (524,387 samples, 0.27%)</title><rect x="23.1224%" y="181" width="0.2697%" height="15" fill="rgb(232,36,49)"/><text x="23.3724%" y="191.50"></text></g><g><title>misc_checking_1 (1,475,336 samples, 0.76%)</title><rect x="22.6571%" y="197" width="0.7588%" height="15" fill="rgb(209,103,24)"/><text x="22.9071%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (758,399 samples, 0.39%)</title><rect x="23.4167%" y="181" width="0.3901%" height="15" fill="rgb(229,88,8)"/><text x="23.6667%" y="191.50"></text></g><g><title>check_mod_liveness (601,637 samples, 0.31%)</title><rect x="23.4973%" y="165" width="0.3094%" height="15" fill="rgb(213,181,19)"/><text x="23.7473%" y="175.50"></text></g><g><title>misc_checking_2 (1,410,886 samples, 0.73%)</title><rect x="23.4159%" y="197" width="0.7256%" height="15" fill="rgb(254,191,54)"/><text x="23.6659%" y="207.50"></text></g><g><title>match_checking (650,957 samples, 0.33%)</title><rect x="23.8068%" y="181" width="0.3348%" height="15" fill="rgb(241,83,37)"/><text x="24.0568%" y="191.50"></text></g><g><title>check_match (623,537 samples, 0.32%)</title><rect x="23.8209%" y="165" width="0.3207%" height="15" fill="rgb(233,36,39)"/><text x="24.0709%" y="175.50"></text></g><g><title>check_private_in_public (265,403 samples, 0.14%)</title><rect x="24.1467%" y="181" width="0.1365%" height="15" fill="rgb(226,3,54)"/><text x="24.3967%" y="191.50"></text></g><g><title>death_checking (595,906 samples, 0.31%)</title><rect x="24.2833%" y="181" width="0.3065%" height="15" fill="rgb(245,192,40)"/><text x="24.5333%" y="191.50"></text></g><g><title>param_env (200,772 samples, 0.10%)</title><rect x="25.2687%" y="149" width="0.1033%" height="15" fill="rgb(238,167,29)"/><text x="25.5187%" y="159.50"></text></g><g><title>crate_lints (2,894,162 samples, 1.49%)</title><rect x="24.5906%" y="165" width="1.4885%" height="15" fill="rgb(232,182,51)"/><text x="24.8406%" y="175.50"></text></g><g><title>type_of (1,359,385 samples, 0.70%)</title><rect x="25.3800%" y="149" width="0.6992%" height="15" fill="rgb(231,60,39)"/><text x="25.6300%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (885,838 samples, 0.46%)</title><rect x="25.6235%" y="133" width="0.4556%" height="15" fill="rgb(208,69,12)"/><text x="25.8735%" y="143.50"></text></g><g><title>lint_checking (3,614,270 samples, 1.86%)</title><rect x="24.5897%" y="181" width="1.8589%" height="15" fill="rgb(235,93,37)"/><text x="24.8397%" y="191.50">l..</text></g><g><title>module_lints (718,438 samples, 0.37%)</title><rect x="26.0791%" y="165" width="0.3695%" height="15" fill="rgb(213,116,39)"/><text x="26.3291%" y="175.50"></text></g><g><title>lint_mod (715,438 samples, 0.37%)</title><rect x="26.0806%" y="149" width="0.3680%" height="15" fill="rgb(222,207,29)"/><text x="26.3306%" y="159.50"></text></g><g><title>privacy_access_levels (287,593 samples, 0.15%)</title><rect x="26.4486%" y="181" width="0.1479%" height="15" fill="rgb(206,96,30)"/><text x="26.6986%" y="191.50"></text></g><g><title>privacy_checking_modules (1,184,073 samples, 0.61%)</title><rect x="26.5965%" y="181" width="0.6090%" height="15" fill="rgb(218,138,4)"/><text x="26.8465%" y="191.50"></text></g><g><title>check_mod_privacy (1,182,013 samples, 0.61%)</title><rect x="26.5976%" y="165" width="0.6079%" height="15" fill="rgb(250,191,14)"/><text x="26.8476%" y="175.50"></text></g><g><title>misc_checking_3 (5,972,516 samples, 3.07%)</title><rect x="24.1416%" y="197" width="3.0718%" height="15" fill="rgb(239,60,40)"/><text x="24.3916%" y="207.50">mis..</text></g><g><title>adt_destructor (365,754 samples, 0.19%)</title><rect x="27.2835%" y="149" width="0.1881%" height="15" fill="rgb(206,27,48)"/><text x="27.5335%" y="159.50"></text></g><g><title>coherent_trait (357,164 samples, 0.18%)</title><rect x="27.2879%" y="133" width="0.1837%" height="15" fill="rgb(225,35,8)"/><text x="27.5379%" y="143.50"></text></g><g><title>specialization_graph_of (355,264 samples, 0.18%)</title><rect x="27.2889%" y="117" width="0.1827%" height="15" fill="rgb(250,213,24)"/><text x="27.5389%" y="127.50"></text></g><g><title>impl_parent (2,381,603 samples, 1.22%)</title><rect x="29.5741%" y="133" width="1.2249%" height="15" fill="rgb(247,123,22)"/><text x="29.8241%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,405,046 samples, 0.72%)</title><rect x="30.0764%" y="117" width="0.7226%" height="15" fill="rgb(231,138,38)"/><text x="30.3264%" y="127.50"></text></g><g><title>impl_trait_ref (5,414,159 samples, 2.78%)</title><rect x="30.7990%" y="133" width="2.7846%" height="15" fill="rgb(231,145,46)"/><text x="31.0490%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,004,746 samples, 2.06%)</title><rect x="31.5239%" y="117" width="2.0597%" height="15" fill="rgb(251,118,11)"/><text x="31.7739%" y="127.50">m..</text></g><g><title>coherent_trait (13,151,936 samples, 6.76%)</title><rect x="27.2607%" y="165" width="6.7642%" height="15" fill="rgb(217,147,25)"/><text x="27.5107%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (12,429,818 samples, 6.39%)</title><rect x="27.6321%" y="149" width="6.3928%" height="15" fill="rgb(247,81,37)"/><text x="27.8821%" y="159.50">speciali..</text></g><g><title>trait_impls_of (856,400 samples, 0.44%)</title><rect x="33.5845%" y="133" width="0.4405%" height="15" fill="rgb(209,12,38)"/><text x="33.8345%" y="143.50"></text></g><g><title>implementations_of_trait (236,123 samples, 0.12%)</title><rect x="33.9036%" y="117" width="0.1214%" height="15" fill="rgb(227,1,9)"/><text x="34.1536%" y="127.50"></text></g><g><title>coherence_checking (13,234,297 samples, 6.81%)</title><rect x="27.2507%" y="181" width="6.8066%" height="15" fill="rgb(248,47,43)"/><text x="27.5007%" y="191.50">coherence..</text></g><g><title>adt_def (404,664 samples, 0.21%)</title><rect x="52.5222%" y="117" width="0.2081%" height="15" fill="rgb(221,10,30)"/><text x="52.7722%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (403,254 samples, 0.21%)</title><rect x="52.5230%" y="101" width="0.2074%" height="15" fill="rgb(210,229,1)"/><text x="52.7730%" y="111.50"></text></g><g><title>item_attrs (386,504 samples, 0.20%)</title><rect x="52.5316%" y="85" width="0.1988%" height="15" fill="rgb(222,148,37)"/><text x="52.7816%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (384,944 samples, 0.20%)</title><rect x="52.5324%" y="69" width="0.1980%" height="15" fill="rgb(234,67,33)"/><text x="52.7824%" y="79.50"></text></g><g><title>adt_sized_constraint (423,564 samples, 0.22%)</title><rect x="52.5159%" y="133" width="0.2178%" height="15" fill="rgb(247,98,35)"/><text x="52.7659%" y="143.50"></text></g><g><title>associated_item (748,309 samples, 0.38%)</title><rect x="52.8716%" y="117" width="0.3849%" height="15" fill="rgb(247,138,52)"/><text x="53.1216%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (588,579 samples, 0.30%)</title><rect x="52.9538%" y="101" width="0.3027%" height="15" fill="rgb(213,79,30)"/><text x="53.2038%" y="111.50"></text></g><g><title>associated_items (1,065,822 samples, 0.55%)</title><rect x="52.7362%" y="133" width="0.5482%" height="15" fill="rgb(246,177,23)"/><text x="52.9862%" y="143.50"></text></g><g><title>adt_dtorck_constraint (269,495 samples, 0.14%)</title><rect x="53.4413%" y="117" width="0.1386%" height="15" fill="rgb(230,62,27)"/><text x="53.6913%" y="127.50"></text></g><g><title>dropck_outlives (464,316 samples, 0.24%)</title><rect x="53.3442%" y="133" width="0.2388%" height="15" fill="rgb(216,154,8)"/><text x="53.5942%" y="143.50"></text></g><g><title>generics_of (528,434 samples, 0.27%)</title><rect x="55.4126%" y="117" width="0.2718%" height="15" fill="rgb(244,35,45)"/><text x="55.6626%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (400,813 samples, 0.21%)</title><rect x="55.4783%" y="101" width="0.2061%" height="15" fill="rgb(251,115,12)"/><text x="55.7283%" y="111.50"></text></g><g><title>impl_trait_ref (830,311 samples, 0.43%)</title><rect x="55.7385%" y="117" width="0.4270%" height="15" fill="rgb(240,54,50)"/><text x="55.9885%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (703,999 samples, 0.36%)</title><rect x="55.8035%" y="101" width="0.3621%" height="15" fill="rgb(233,84,52)"/><text x="56.0535%" y="111.50"></text></g><g><title>predicates_of (401,707 samples, 0.21%)</title><rect x="56.1876%" y="117" width="0.2066%" height="15" fill="rgb(207,117,47)"/><text x="56.4376%" y="127.50"></text></g><g><title>predicates_defined_on (226,105 samples, 0.12%)</title><rect x="56.2779%" y="101" width="0.1163%" height="15" fill="rgb(249,43,39)"/><text x="56.5279%" y="111.50"></text></g><g><title>specializes (978,872 samples, 0.50%)</title><rect x="56.3942%" y="117" width="0.5034%" height="15" fill="rgb(209,38,44)"/><text x="56.6442%" y="127.50"></text></g><g><title>param_env (579,086 samples, 0.30%)</title><rect x="56.5998%" y="101" width="0.2978%" height="15" fill="rgb(236,212,23)"/><text x="56.8498%" y="111.50"></text></g><g><title>def_span (237,134 samples, 0.12%)</title><rect x="56.7757%" y="85" width="0.1220%" height="15" fill="rgb(242,79,21)"/><text x="57.0257%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (208,403 samples, 0.11%)</title><rect x="56.7905%" y="69" width="0.1072%" height="15" fill="rgb(211,96,35)"/><text x="57.0405%" y="79.50"></text></g><g><title>trait_impls_of (567,936 samples, 0.29%)</title><rect x="56.9113%" y="117" width="0.2921%" height="15" fill="rgb(253,215,40)"/><text x="57.1613%" y="127.50"></text></g><g><title>implementations_of_trait (241,042 samples, 0.12%)</title><rect x="57.0795%" y="101" width="0.1240%" height="15" fill="rgb(211,81,21)"/><text x="57.3295%" y="111.50"></text></g><g><title>evaluate_obligation (7,071,299 samples, 3.64%)</title><rect x="53.5830%" y="133" width="3.6369%" height="15" fill="rgb(208,190,38)"/><text x="53.8330%" y="143.50">eval..</text></g><g><title>fn_sig (202,613 samples, 0.10%)</title><rect x="57.2411%" y="133" width="0.1042%" height="15" fill="rgb(235,213,38)"/><text x="57.4911%" y="143.50"></text></g><g><title>item_attrs (350,333 samples, 0.18%)</title><rect x="57.5304%" y="133" width="0.1802%" height="15" fill="rgb(237,122,38)"/><text x="57.7804%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (338,203 samples, 0.17%)</title><rect x="57.5366%" y="117" width="0.1739%" height="15" fill="rgb(244,218,35)"/><text x="57.7866%" y="127.50"></text></g><g><title>evaluate_obligation (287,462 samples, 0.15%)</title><rect x="57.8907%" y="117" width="0.1478%" height="15" fill="rgb(240,68,47)"/><text x="58.1407%" y="127.50"></text></g><g><title>method_autoderef_steps (550,626 samples, 0.28%)</title><rect x="57.7717%" y="133" width="0.2832%" height="15" fill="rgb(210,16,53)"/><text x="58.0217%" y="143.50"></text></g><g><title>predicates_of (522,794 samples, 0.27%)</title><rect x="58.0880%" y="133" width="0.2689%" height="15" fill="rgb(235,124,12)"/><text x="58.3380%" y="143.50"></text></g><g><title>predicates_defined_on (357,634 samples, 0.18%)</title><rect x="58.1729%" y="117" width="0.1839%" height="15" fill="rgb(224,169,11)"/><text x="58.4229%" y="127.50"></text></g><g><title>evaluate_obligation (308,252 samples, 0.16%)</title><rect x="59.1964%" y="117" width="0.1585%" height="15" fill="rgb(250,166,2)"/><text x="59.4464%" y="127.50"></text></g><g><title>typeck (2,050,953 samples, 1.05%)</title><rect x="58.4448%" y="133" width="1.0548%" height="15" fill="rgb(242,216,29)"/><text x="58.6948%" y="143.50"></text></g><g><title>item_bodies_checking (49,489,538 samples, 25.45%)</title><rect x="34.0745%" y="181" width="25.4532%" height="15" fill="rgb(230,116,27)"/><text x="34.3245%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (49,485,628 samples, 25.45%)</title><rect x="34.0765%" y="165" width="25.4512%" height="15" fill="rgb(228,99,48)"/><text x="34.3265%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (49,407,536 samples, 25.41%)</title><rect x="34.1166%" y="149" width="25.4111%" height="15" fill="rgb(253,11,6)"/><text x="34.3666%" y="159.50">typeck</text></g><g><title>generics_of (475,513 samples, 0.24%)</title><rect x="61.3712%" y="117" width="0.2446%" height="15" fill="rgb(247,143,39)"/><text x="61.6212%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (340,343 samples, 0.18%)</title><rect x="61.4407%" y="101" width="0.1750%" height="15" fill="rgb(236,97,10)"/><text x="61.6907%" y="111.50"></text></g><g><title>impl_trait_ref (676,659 samples, 0.35%)</title><rect x="61.6740%" y="117" width="0.3480%" height="15" fill="rgb(233,208,19)"/><text x="61.9240%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (537,416 samples, 0.28%)</title><rect x="61.7456%" y="101" width="0.2764%" height="15" fill="rgb(216,164,2)"/><text x="61.9956%" y="111.50"></text></g><g><title>predicates_of (639,636 samples, 0.33%)</title><rect x="62.0397%" y="117" width="0.3290%" height="15" fill="rgb(220,129,5)"/><text x="62.2897%" y="127.50"></text></g><g><title>predicates_defined_on (354,701 samples, 0.18%)</title><rect x="62.1863%" y="101" width="0.1824%" height="15" fill="rgb(242,17,10)"/><text x="62.4363%" y="111.50"></text></g><g><title>specializes (2,090,595 samples, 1.08%)</title><rect x="62.3687%" y="117" width="1.0752%" height="15" fill="rgb(242,107,0)"/><text x="62.6187%" y="127.50"></text></g><g><title>param_env (1,124,429 samples, 0.58%)</title><rect x="62.8656%" y="101" width="0.5783%" height="15" fill="rgb(251,28,31)"/><text x="63.1156%" y="111.50"></text></g><g><title>def_span (537,215 samples, 0.28%)</title><rect x="63.1676%" y="85" width="0.2763%" height="15" fill="rgb(233,223,10)"/><text x="63.4176%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (480,444 samples, 0.25%)</title><rect x="63.1968%" y="69" width="0.2471%" height="15" fill="rgb(215,21,27)"/><text x="63.4468%" y="79.50"></text></g><g><title>evaluate_obligation (6,120,787 samples, 3.15%)</title><rect x="60.3431%" y="133" width="3.1480%" height="15" fill="rgb(232,23,21)"/><text x="60.5931%" y="143.50">eva..</text></g><g><title>item_types_checking (7,933,197 samples, 4.08%)</title><rect x="59.5277%" y="181" width="4.0802%" height="15" fill="rgb(244,5,23)"/><text x="59.7777%" y="191.50">item..</text></g><g><title>check_mod_item_types (7,929,877 samples, 4.08%)</title><rect x="59.5294%" y="165" width="4.0785%" height="15" fill="rgb(226,81,46)"/><text x="59.7794%" y="175.50">chec..</text></g><g><title>typeck (7,300,780 samples, 3.75%)</title><rect x="59.8530%" y="149" width="3.7549%" height="15" fill="rgb(247,70,30)"/><text x="60.1030%" y="159.50">type..</text></g><g><title>fn_sig (286,705 samples, 0.15%)</title><rect x="63.7628%" y="149" width="0.1475%" height="15" fill="rgb(212,68,19)"/><text x="64.0128%" y="159.50"></text></g><g><title>named_region_map (366,553 samples, 0.19%)</title><rect x="63.9647%" y="133" width="0.1885%" height="15" fill="rgb(240,187,13)"/><text x="64.2147%" y="143.50"></text></g><g><title>resolve_lifetimes (352,643 samples, 0.18%)</title><rect x="63.9719%" y="117" width="0.1814%" height="15" fill="rgb(223,113,26)"/><text x="64.2219%" y="127.50"></text></g><g><title>lint_levels (204,782 samples, 0.11%)</title><rect x="64.0480%" y="101" width="0.1053%" height="15" fill="rgb(206,192,2)"/><text x="64.2980%" y="111.50"></text></g><g><title>generics_of (486,316 samples, 0.25%)</title><rect x="63.9103%" y="149" width="0.2501%" height="15" fill="rgb(241,108,4)"/><text x="64.1603%" y="159.50"></text></g><g><title>explicit_predicates_of (313,092 samples, 0.16%)</title><rect x="64.2539%" y="117" width="0.1610%" height="15" fill="rgb(247,173,49)"/><text x="64.5039%" y="127.50"></text></g><g><title>predicates_of (741,578 samples, 0.38%)</title><rect x="64.1877%" y="149" width="0.3814%" height="15" fill="rgb(224,114,35)"/><text x="64.4377%" y="159.50"></text></g><g><title>predicates_defined_on (690,155 samples, 0.35%)</title><rect x="64.2142%" y="133" width="0.3550%" height="15" fill="rgb(245,159,27)"/><text x="64.4642%" y="143.50"></text></g><g><title>inferred_outlives_of (299,833 samples, 0.15%)</title><rect x="64.4149%" y="117" width="0.1542%" height="15" fill="rgb(245,172,44)"/><text x="64.6649%" y="127.50"></text></g><g><title>inferred_outlives_crate (279,973 samples, 0.14%)</title><rect x="64.4252%" y="101" width="0.1440%" height="15" fill="rgb(236,23,11)"/><text x="64.6752%" y="111.50"></text></g><g><title>type_collecting (1,975,151 samples, 1.02%)</title><rect x="63.6091%" y="181" width="1.0159%" height="15" fill="rgb(205,117,38)"/><text x="63.8591%" y="191.50"></text></g><g><title>collect_mod_item_types (1,964,701 samples, 1.01%)</title><rect x="63.6145%" y="165" width="1.0105%" height="15" fill="rgb(237,72,25)"/><text x="63.8645%" y="175.50"></text></g><g><title>evaluate_obligation (342,545 samples, 0.18%)</title><rect x="65.6621%" y="149" width="0.1762%" height="15" fill="rgb(244,70,9)"/><text x="65.9121%" y="159.50"></text></g><g><title>param_env (283,995 samples, 0.15%)</title><rect x="65.9284%" y="149" width="0.1461%" height="15" fill="rgb(217,125,39)"/><text x="66.1784%" y="159.50"></text></g><g><title>region_scope_tree (742,469 samples, 0.38%)</title><rect x="66.0939%" y="149" width="0.3819%" height="15" fill="rgb(235,36,10)"/><text x="66.3439%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,494,666 samples, 1.80%)</title><rect x="64.7410%" y="165" width="1.7974%" height="15" fill="rgb(251,123,47)"/><text x="64.9910%" y="175.50">c..</text></g><g><title>adt_sized_constraint (279,714 samples, 0.14%)</title><rect x="67.2841%" y="149" width="0.1439%" height="15" fill="rgb(221,13,13)"/><text x="67.5341%" y="159.50"></text></g><g><title>mir_borrowck (380,805 samples, 0.20%)</title><rect x="67.6538%" y="69" width="0.1959%" height="15" fill="rgb(238,131,9)"/><text x="67.9038%" y="79.50"></text></g><g><title>mir_for_ctfe (516,546 samples, 0.27%)</title><rect x="67.5846%" y="101" width="0.2657%" height="15" fill="rgb(211,50,8)"/><text x="67.8346%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (476,246 samples, 0.24%)</title><rect x="67.6053%" y="85" width="0.2449%" height="15" fill="rgb(245,182,24)"/><text x="67.8553%" y="95.50"></text></g><g><title>eval_to_const_value_raw (719,728 samples, 0.37%)</title><rect x="67.8537%" y="85" width="0.3702%" height="15" fill="rgb(242,14,37)"/><text x="68.1037%" y="95.50"></text></g><g><title>eval_to_const_value_raw (718,858 samples, 0.37%)</title><rect x="67.8542%" y="69" width="0.3697%" height="15" fill="rgb(246,228,12)"/><text x="68.1042%" y="79.50"></text></g><g><title>eval_to_allocation_raw (717,988 samples, 0.37%)</title><rect x="67.8546%" y="53" width="0.3693%" height="15" fill="rgb(213,55,15)"/><text x="68.1046%" y="63.50"></text></g><g><title>typeck (319,574 samples, 0.16%)</title><rect x="68.0595%" y="37" width="0.1644%" height="15" fill="rgb(209,9,3)"/><text x="68.3095%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (730,038 samples, 0.38%)</title><rect x="67.8504%" y="101" width="0.3755%" height="15" fill="rgb(230,59,30)"/><text x="68.1004%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,648,988 samples, 0.85%)</title><rect x="67.4280%" y="149" width="0.8481%" height="15" fill="rgb(209,121,21)"/><text x="67.6780%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,634,558 samples, 0.84%)</title><rect x="67.4354%" y="133" width="0.8407%" height="15" fill="rgb(220,109,13)"/><text x="67.6854%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,632,728 samples, 0.84%)</title><rect x="67.4363%" y="117" width="0.8397%" height="15" fill="rgb(232,18,1)"/><text x="67.6863%" y="127.50"></text></g><g><title>param_env (269,452 samples, 0.14%)</title><rect x="68.4097%" y="149" width="0.1386%" height="15" fill="rgb(215,41,42)"/><text x="68.6597%" y="159.50"></text></g><g><title>analysis (124,006,523 samples, 63.78%)</title><rect x="4.8898%" y="213" width="63.7785%" height="15" fill="rgb(224,123,36)"/><text x="5.1398%" y="223.50">analysis</text></g><g><title>type_check_crate (80,602,123 samples, 41.45%)</title><rect x="27.2133%" y="197" width="41.4549%" height="15" fill="rgb(240,125,3)"/><text x="27.4633%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,855,977 samples, 4.04%)</title><rect x="64.6278%" y="181" width="4.0405%" height="15" fill="rgb(205,98,50)"/><text x="64.8778%" y="191.50">wf_c..</text></g><g><title>check_item_well_formed (4,141,245 samples, 2.13%)</title><rect x="66.5383%" y="165" width="2.1299%" height="15" fill="rgb(205,185,37)"/><text x="66.7883%" y="175.50">c..</text></g><g><title>fn_abi_of_instance (300,203 samples, 0.15%)</title><rect x="69.2195%" y="181" width="0.1544%" height="15" fill="rgb(238,207,15)"/><text x="69.4695%" y="191.50"></text></g><g><title>codegen_module (955,061 samples, 0.49%)</title><rect x="68.9018%" y="197" width="0.4912%" height="15" fill="rgb(213,199,42)"/><text x="69.1518%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (234,802 samples, 0.12%)</title><rect x="69.4012%" y="165" width="0.1208%" height="15" fill="rgb(235,201,11)"/><text x="69.6512%" y="175.50"></text></g><g><title>monomorphization_collector (267,333 samples, 0.14%)</title><rect x="69.4002%" y="181" width="0.1375%" height="15" fill="rgb(207,46,11)"/><text x="69.6502%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (376,434 samples, 0.19%)</title><rect x="69.3933%" y="197" width="0.1936%" height="15" fill="rgb(241,35,35)"/><text x="69.6433%" y="207.50"></text></g><g><title>codegen_crate (1,874,851 samples, 0.96%)</title><rect x="68.6713%" y="213" width="0.9643%" height="15" fill="rgb(243,32,47)"/><text x="68.9213%" y="223.50"></text></g><g><title>codegen_module_optimize (4,915,095 samples, 2.53%)</title><rect x="69.6356%" y="213" width="2.5279%" height="15" fill="rgb(247,202,23)"/><text x="69.8856%" y="223.50">co..</text></g><g><title>LLVM_module_optimize (4,406,039 samples, 2.27%)</title><rect x="69.8974%" y="197" width="2.2661%" height="15" fill="rgb(219,102,11)"/><text x="70.1474%" y="207.50">L..</text></g><g><title>LLVM_lto_optimize (707,048 samples, 0.36%)</title><rect x="72.2940%" y="197" width="0.3636%" height="15" fill="rgb(243,110,44)"/><text x="72.5440%" y="207.50"></text></g><g><title>LLVM_module_codegen (2,564,818 samples, 1.32%)</title><rect x="72.6576%" y="197" width="1.3191%" height="15" fill="rgb(222,74,54)"/><text x="72.9076%" y="207.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,515,927 samples, 1.29%)</title><rect x="72.6828%" y="181" width="1.2940%" height="15" fill="rgb(216,99,12)"/><text x="72.9328%" y="191.50"></text></g><g><title>codegen_module_perform_lto (3,554,329 samples, 1.83%)</title><rect x="72.1635%" y="213" width="1.8280%" height="15" fill="rgb(226,22,26)"/><text x="72.4135%" y="223.50">c..</text></g><g><title>metadata_register_crate (1,495,878 samples, 0.77%)</title><rect x="80.8932%" y="165" width="0.7694%" height="15" fill="rgb(217,163,10)"/><text x="81.1432%" y="175.50"></text></g><g><title>metadata_register_crate (475,715 samples, 0.24%)</title><rect x="81.4179%" y="149" width="0.2447%" height="15" fill="rgb(213,25,53)"/><text x="81.6679%" y="159.50"></text></g><g><title>macro_expand_crate (14,765,683 samples, 7.59%)</title><rect x="74.2177%" y="197" width="7.5942%" height="15" fill="rgb(252,105,26)"/><text x="74.4677%" y="207.50">macro_expa..</text></g><g><title>expand_crate (14,755,163 samples, 7.59%)</title><rect x="74.2231%" y="181" width="7.5888%" height="15" fill="rgb(220,39,43)"/><text x="74.4731%" y="191.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (290,423 samples, 0.15%)</title><rect x="81.6625%" y="165" width="0.1494%" height="15" fill="rgb(229,68,48)"/><text x="81.9125%" y="175.50"></text></g><g><title>late_resolve_crate (2,634,979 samples, 1.36%)</title><rect x="81.9110%" y="181" width="1.3552%" height="15" fill="rgb(252,8,32)"/><text x="82.1610%" y="191.50"></text></g><g><title>configure_and_expand (18,189,492 samples, 9.36%)</title><rect x="73.9915%" y="213" width="9.3551%" height="15" fill="rgb(223,20,43)"/><text x="74.2415%" y="223.50">configure_and..</text></g><g><title>resolve_crate (2,933,862 samples, 1.51%)</title><rect x="81.8377%" y="197" width="1.5089%" height="15" fill="rgb(229,81,49)"/><text x="82.0877%" y="207.50"></text></g><g><title>drop_ast (276,153 samples, 0.14%)</title><rect x="83.3467%" y="213" width="0.1420%" height="15" fill="rgb(236,28,36)"/><text x="83.5967%" y="223.50"></text></g><g><title>early_lint_checks (567,896 samples, 0.29%)</title><rect x="83.5007%" y="213" width="0.2921%" height="15" fill="rgb(249,185,26)"/><text x="83.7507%" y="223.50"></text></g><g><title>free_global_ctxt (4,623,262 samples, 2.38%)</title><rect x="83.7927%" y="213" width="2.3778%" height="15" fill="rgb(249,174,33)"/><text x="84.0427%" y="223.50">fr..</text></g><g><title>layout_of (346,503 samples, 0.18%)</title><rect x="90.7913%" y="165" width="0.1782%" height="15" fill="rgb(233,201,37)"/><text x="91.0413%" y="175.50"></text></g><g><title>layout_of (871,458 samples, 0.45%)</title><rect x="90.5512%" y="181" width="0.4482%" height="15" fill="rgb(221,78,26)"/><text x="90.8012%" y="191.50"></text></g><g><title>needs_drop_raw (302,932 samples, 0.16%)</title><rect x="94.3719%" y="165" width="0.1558%" height="15" fill="rgb(250,127,30)"/><text x="94.6219%" y="175.50"></text></g><g><title>is_copy_raw (272,901 samples, 0.14%)</title><rect x="94.3873%" y="149" width="0.1404%" height="15" fill="rgb(230,49,44)"/><text x="94.6373%" y="159.50"></text></g><g><title>evaluate_obligation (214,331 samples, 0.11%)</title><rect x="94.4174%" y="133" width="0.1102%" height="15" fill="rgb(229,67,23)"/><text x="94.6674%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,917,532 samples, 3.56%)</title><rect x="90.9994%" y="181" width="3.5578%" height="15" fill="rgb(249,83,47)"/><text x="91.2494%" y="191.50">mir_..</text></g><g><title>optimized_mir (13,620,034 samples, 7.00%)</title><rect x="87.5793%" y="197" width="7.0050%" height="15" fill="rgb(215,43,3)"/><text x="87.8293%" y="207.50">optimized..</text></g><g><title>generate_crate_metadata (16,468,893 samples, 8.47%)</title><rect x="86.1705%" y="213" width="8.4702%" height="15" fill="rgb(238,154,13)"/><text x="86.4205%" y="223.50">generate_cra..</text></g><g><title>hir_lowering (4,021,535 samples, 2.07%)</title><rect x="94.6407%" y="213" width="2.0683%" height="15" fill="rgb(219,56,2)"/><text x="94.8907%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (3,132,724 samples, 1.61%)</title><rect x="96.7181%" y="197" width="1.6112%" height="15" fill="rgb(233,0,4)"/><text x="96.9681%" y="207.50"></text></g><g><title>link_crate (1,061,052 samples, 0.55%)</title><rect x="98.3293%" y="197" width="0.5457%" height="15" fill="rgb(235,30,7)"/><text x="98.5793%" y="207.50"></text></g><g><title>link_binary (1,049,862 samples, 0.54%)</title><rect x="98.3351%" y="181" width="0.5400%" height="15" fill="rgb(250,79,13)"/><text x="98.5851%" y="191.50"></text></g><g><title>link_rlib (734,908 samples, 0.38%)</title><rect x="98.4970%" y="165" width="0.3780%" height="15" fill="rgb(211,146,34)"/><text x="98.7470%" y="175.50"></text></g><g><title>link (4,219,446 samples, 2.17%)</title><rect x="96.7091%" y="213" width="2.1701%" height="15" fill="rgb(228,22,38)"/><text x="96.9591%" y="223.50">l..</text></g><g><title>prepare_outputs (210,092 samples, 0.11%)</title><rect x="98.9813%" y="213" width="0.1081%" height="15" fill="rgb(235,168,5)"/><text x="99.2313%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (1,213,763 samples, 0.62%)</title><rect x="99.0893%" y="213" width="0.6243%" height="15" fill="rgb(221,155,16)"/><text x="99.3393%" y="223.50"></text></g><g><title>all (194,433,202 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (194,433,202 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (473,745 samples, 0.24%)</title><rect x="99.7563%" y="213" width="0.2437%" height="15" fill="rgb(234,103,6)"/><text x="100.0063%" y="223.50"></text></g></svg></svg>