<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,563,889 samples, 7.44%)</title><rect x="0.2410%" y="229" width="7.4449%" height="15" fill="rgb(227,0,7)"/><text x="0.4910%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (482,046 samples, 0.16%)</title><rect x="7.5269%" y="213" width="0.1591%" height="15" fill="rgb(217,0,24)"/><text x="7.7769%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (445,055 samples, 0.15%)</title><rect x="7.5391%" y="197" width="0.1468%" height="15" fill="rgb(221,193,54)"/><text x="7.7891%" y="207.50"></text></g><g><title>mir_const (1,928,524 samples, 0.64%)</title><rect x="12.4221%" y="165" width="0.6363%" height="15" fill="rgb(248,212,6)"/><text x="12.6721%" y="175.50"></text></g><g><title>unsafety_check_result (1,543,959 samples, 0.51%)</title><rect x="12.5490%" y="149" width="0.5094%" height="15" fill="rgb(208,68,35)"/><text x="12.7990%" y="159.50"></text></g><g><title>mir_built (1,375,977 samples, 0.45%)</title><rect x="12.6044%" y="133" width="0.4540%" height="15" fill="rgb(232,128,0)"/><text x="12.8544%" y="143.50"></text></g><g><title>thir_body (23,812,186 samples, 7.86%)</title><rect x="15.6151%" y="101" width="7.8568%" height="15" fill="rgb(207,160,47)"/><text x="15.8651%" y="111.50">thir_body</text></g><g><title>lit_to_const (5,445,777 samples, 1.80%)</title><rect x="21.6751%" y="85" width="1.7968%" height="15" fill="rgb(228,23,34)"/><text x="21.9251%" y="95.50">l..</text></g><g><title>mir_promoted (36,396,533 samples, 12.01%)</title><rect x="11.4666%" y="181" width="12.0090%" height="15" fill="rgb(218,30,26)"/><text x="11.7166%" y="191.50">mir_promoted</text></g><g><title>mir_const_qualif (31,572,084 samples, 10.42%)</title><rect x="13.0584%" y="165" width="10.4172%" height="15" fill="rgb(220,122,19)"/><text x="13.3084%" y="175.50">mir_const_qualif</text></g><g><title>mir_const (31,197,760 samples, 10.29%)</title><rect x="13.1820%" y="149" width="10.2936%" height="15" fill="rgb(250,228,42)"/><text x="13.4320%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (30,668,764 samples, 10.12%)</title><rect x="13.3565%" y="133" width="10.1191%" height="15" fill="rgb(240,193,28)"/><text x="13.6065%" y="143.50">unsafety_check_..</text></g><g><title>mir_built (30,424,441 samples, 10.04%)</title><rect x="13.4371%" y="117" width="10.0385%" height="15" fill="rgb(216,20,37)"/><text x="13.6871%" y="127.50">mir_built</text></g><g><title>MIR_borrow_checking (47,766,877 samples, 15.76%)</title><rect x="8.0384%" y="213" width="15.7606%" height="15" fill="rgb(206,188,39)"/><text x="8.2884%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,654,185 samples, 15.72%)</title><rect x="8.0756%" y="197" width="15.7234%" height="15" fill="rgb(217,207,13)"/><text x="8.3256%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (980,245 samples, 0.32%)</title><rect x="23.4756%" y="181" width="0.3234%" height="15" fill="rgb(231,73,38)"/><text x="23.7256%" y="191.50"></text></g><g><title>MIR_effect_checking (448,655 samples, 0.15%)</title><rect x="23.7990%" y="213" width="0.1480%" height="15" fill="rgb(225,20,46)"/><text x="24.0490%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (402,464 samples, 0.13%)</title><rect x="23.8143%" y="197" width="0.1328%" height="15" fill="rgb(210,31,41)"/><text x="24.0643%" y="207.50"></text></g><g><title>check_mod_attrs (1,695,599 samples, 0.56%)</title><rect x="24.0412%" y="197" width="0.5595%" height="15" fill="rgb(221,200,47)"/><text x="24.2912%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (317,193 samples, 0.10%)</title><rect x="24.7253%" y="197" width="0.1047%" height="15" fill="rgb(226,26,5)"/><text x="24.9753%" y="207.50"></text></g><g><title>misc_checking_1 (2,442,876 samples, 0.81%)</title><rect x="24.0346%" y="213" width="0.8060%" height="15" fill="rgb(249,33,26)"/><text x="24.2846%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (853,350 samples, 0.28%)</title><rect x="24.8411%" y="197" width="0.2816%" height="15" fill="rgb(235,183,28)"/><text x="25.0911%" y="207.50"></text></g><g><title>check_mod_liveness (556,236 samples, 0.18%)</title><rect x="24.9391%" y="181" width="0.1835%" height="15" fill="rgb(221,5,38)"/><text x="25.1891%" y="191.50"></text></g><g><title>misc_checking_2 (1,271,534 samples, 0.42%)</title><rect x="24.8406%" y="213" width="0.4195%" height="15" fill="rgb(247,18,42)"/><text x="25.0906%" y="223.50"></text></g><g><title>match_checking (416,824 samples, 0.14%)</title><rect x="25.1226%" y="197" width="0.1375%" height="15" fill="rgb(241,131,45)"/><text x="25.3726%" y="207.50"></text></g><g><title>check_match (394,683 samples, 0.13%)</title><rect x="25.1299%" y="181" width="0.1302%" height="15" fill="rgb(249,31,29)"/><text x="25.3799%" y="191.50"></text></g><g><title>death_checking (1,266,425 samples, 0.42%)</title><rect x="25.3188%" y="197" width="0.4179%" height="15" fill="rgb(225,111,53)"/><text x="25.5688%" y="207.50"></text></g><g><title>lint_levels (894,490 samples, 0.30%)</title><rect x="25.4415%" y="181" width="0.2951%" height="15" fill="rgb(238,160,17)"/><text x="25.6915%" y="191.50"></text></g><g><title>eval_to_const_value_raw (17,464,744 samples, 5.76%)</title><rect x="28.6232%" y="117" width="5.7625%" height="15" fill="rgb(214,148,48)"/><text x="28.8732%" y="127.50">eval_to..</text></g><g><title>eval_to_const_value_raw (17,444,864 samples, 5.76%)</title><rect x="28.6298%" y="101" width="5.7559%" height="15" fill="rgb(232,36,49)"/><text x="28.8798%" y="111.50">eval_to..</text></g><g><title>eval_to_allocation_raw (17,408,273 samples, 5.74%)</title><rect x="28.6419%" y="85" width="5.7438%" height="15" fill="rgb(209,103,24)"/><text x="28.8919%" y="95.50">eval_to..</text></g><g><title>promoted_mir (492,421 samples, 0.16%)</title><rect x="34.2232%" y="69" width="0.1625%" height="15" fill="rgb(229,88,8)"/><text x="34.4732%" y="79.50"></text></g><g><title>eval_to_allocation_raw (24,388,969 samples, 8.05%)</title><rect x="26.3477%" y="165" width="8.0471%" height="15" fill="rgb(213,181,19)"/><text x="26.5977%" y="175.50">eval_to_all..</text></g><g><title>eval_to_allocation_raw (24,358,579 samples, 8.04%)</title><rect x="26.3577%" y="149" width="8.0371%" height="15" fill="rgb(254,191,54)"/><text x="26.6077%" y="159.50">eval_to_all..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (17,582,754 samples, 5.80%)</title><rect x="28.5934%" y="133" width="5.8014%" height="15" fill="rgb(241,83,37)"/><text x="28.8434%" y="143.50">try_nor..</text></g><g><title>crate_lints (26,275,029 samples, 8.67%)</title><rect x="25.7374%" y="181" width="8.6694%" height="15" fill="rgb(233,36,39)"/><text x="25.9874%" y="191.50">crate_lints</text></g><g><title>lint_checking (29,502,015 samples, 9.73%)</title><rect x="25.7366%" y="197" width="9.7341%" height="15" fill="rgb(226,3,54)"/><text x="25.9866%" y="207.50">lint_checking</text></g><g><title>module_lints (3,224,486 samples, 1.06%)</title><rect x="34.4068%" y="181" width="1.0639%" height="15" fill="rgb(245,192,40)"/><text x="34.6568%" y="191.50"></text></g><g><title>lint_mod (3,220,446 samples, 1.06%)</title><rect x="34.4082%" y="165" width="1.0626%" height="15" fill="rgb(238,167,29)"/><text x="34.6582%" y="175.50"></text></g><g><title>privacy_access_levels (320,514 samples, 0.11%)</title><rect x="35.4707%" y="197" width="0.1058%" height="15" fill="rgb(232,182,51)"/><text x="35.7207%" y="207.50"></text></g><g><title>privacy_checking_modules (1,335,115 samples, 0.44%)</title><rect x="35.5765%" y="197" width="0.4405%" height="15" fill="rgb(231,60,39)"/><text x="35.8265%" y="207.50"></text></g><g><title>check_mod_privacy (1,332,945 samples, 0.44%)</title><rect x="35.5772%" y="181" width="0.4398%" height="15" fill="rgb(208,69,12)"/><text x="35.8272%" y="191.50"></text></g><g><title>misc_checking_3 (32,609,760 samples, 10.76%)</title><rect x="25.2602%" y="213" width="10.7595%" height="15" fill="rgb(235,93,37)"/><text x="25.5102%" y="223.50">misc_checking_3</text></g><g><title>impl_trait_ref (343,104 samples, 0.11%)</title><rect x="37.1469%" y="53" width="0.1132%" height="15" fill="rgb(213,116,39)"/><text x="37.3969%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (322,044 samples, 0.11%)</title><rect x="37.1538%" y="37" width="0.1063%" height="15" fill="rgb(222,207,29)"/><text x="37.4038%" y="47.50"></text></g><g><title>coherent_trait (549,946 samples, 0.18%)</title><rect x="37.0868%" y="85" width="0.1815%" height="15" fill="rgb(206,96,30)"/><text x="37.3368%" y="95.50"></text></g><g><title>specialization_graph_of (547,136 samples, 0.18%)</title><rect x="37.0877%" y="69" width="0.1805%" height="15" fill="rgb(218,138,4)"/><text x="37.3377%" y="79.50"></text></g><g><title>adt_destructor (555,196 samples, 0.18%)</title><rect x="37.0853%" y="117" width="0.1832%" height="15" fill="rgb(250,191,14)"/><text x="37.3353%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (554,676 samples, 0.18%)</title><rect x="37.0855%" y="101" width="0.1830%" height="15" fill="rgb(239,60,40)"/><text x="37.3355%" y="111.50"></text></g><g><title>dropck_outlives (625,327 samples, 0.21%)</title><rect x="37.0641%" y="149" width="0.2063%" height="15" fill="rgb(206,27,48)"/><text x="37.3141%" y="159.50"></text></g><g><title>adt_dtorck_constraint (607,256 samples, 0.20%)</title><rect x="37.0701%" y="133" width="0.2004%" height="15" fill="rgb(225,35,8)"/><text x="37.3201%" y="143.50"></text></g><g><title>item_bodies_checking (3,906,512 samples, 1.29%)</title><rect x="36.0742%" y="197" width="1.2889%" height="15" fill="rgb(250,213,24)"/><text x="36.3242%" y="207.50"></text></g><g><title>typeck_item_bodies (3,903,802 samples, 1.29%)</title><rect x="36.0751%" y="181" width="1.2881%" height="15" fill="rgb(247,123,22)"/><text x="36.3251%" y="191.50"></text></g><g><title>typeck (3,867,672 samples, 1.28%)</title><rect x="36.0870%" y="165" width="1.2761%" height="15" fill="rgb(231,138,38)"/><text x="36.3370%" y="175.50"></text></g><g><title>item_types_checking (9,365,014 samples, 3.09%)</title><rect x="37.3631%" y="197" width="3.0900%" height="15" fill="rgb(231,145,46)"/><text x="37.6131%" y="207.50">ite..</text></g><g><title>check_mod_item_types (9,361,994 samples, 3.09%)</title><rect x="37.3641%" y="181" width="3.0890%" height="15" fill="rgb(251,118,11)"/><text x="37.6141%" y="191.50">che..</text></g><g><title>typeck (9,105,530 samples, 3.00%)</title><rect x="37.4488%" y="165" width="3.0044%" height="15" fill="rgb(217,147,25)"/><text x="37.6988%" y="175.50">typ..</text></g><g><title>type_collecting (1,237,064 samples, 0.41%)</title><rect x="40.4533%" y="197" width="0.4082%" height="15" fill="rgb(247,81,37)"/><text x="40.7033%" y="207.50"></text></g><g><title>collect_mod_item_types (1,229,764 samples, 0.41%)</title><rect x="40.4557%" y="181" width="0.4058%" height="15" fill="rgb(209,12,38)"/><text x="40.7057%" y="191.50"></text></g><g><title>type_of (354,943 samples, 0.12%)</title><rect x="40.7444%" y="165" width="0.1171%" height="15" fill="rgb(227,1,9)"/><text x="40.9944%" y="175.50"></text></g><g><title>named_region_map (308,063 samples, 0.10%)</title><rect x="40.7598%" y="149" width="0.1016%" height="15" fill="rgb(248,47,43)"/><text x="41.0098%" y="159.50"></text></g><g><title>check_impl_item_well_formed (355,244 samples, 0.12%)</title><rect x="40.9234%" y="181" width="0.1172%" height="15" fill="rgb(221,10,30)"/><text x="41.1734%" y="191.50"></text></g><g><title>region_scope_tree (1,507,656 samples, 0.50%)</title><rect x="41.3745%" y="165" width="0.4974%" height="15" fill="rgb(210,229,1)"/><text x="41.6245%" y="175.50"></text></g><g><title>check_item_well_formed (2,756,989 samples, 0.91%)</title><rect x="41.0406%" y="181" width="0.9097%" height="15" fill="rgb(222,148,37)"/><text x="41.2906%" y="191.50"></text></g><g><title>analysis (104,704,425 samples, 34.55%)</title><rect x="7.6859%" y="229" width="34.5470%" height="15" fill="rgb(234,67,33)"/><text x="7.9359%" y="239.50">analysis</text></g><g><title>type_check_crate (18,831,108 samples, 6.21%)</title><rect x="36.0197%" y="213" width="6.2133%" height="15" fill="rgb(247,98,35)"/><text x="36.2697%" y="223.50">type_che..</text></g><g><title>wf_checking (4,151,876 samples, 1.37%)</title><rect x="40.8631%" y="197" width="1.3699%" height="15" fill="rgb(247,138,52)"/><text x="41.1131%" y="207.50"></text></g><g><title>check_trait_item_well_formed (856,960 samples, 0.28%)</title><rect x="41.9502%" y="181" width="0.2828%" height="15" fill="rgb(213,79,30)"/><text x="42.2002%" y="191.50"></text></g><g><title>layout_of (405,254 samples, 0.13%)</title><rect x="43.1918%" y="181" width="0.1337%" height="15" fill="rgb(246,177,23)"/><text x="43.4418%" y="191.50"></text></g><g><title>fn_abi_of_instance (941,050 samples, 0.31%)</title><rect x="43.0950%" y="197" width="0.3105%" height="15" fill="rgb(230,62,27)"/><text x="43.3450%" y="207.50"></text></g><g><title>codegen_module (3,122,714 samples, 1.03%)</title><rect x="42.4500%" y="213" width="1.0303%" height="15" fill="rgb(216,154,8)"/><text x="42.7000%" y="223.50"></text></g><g><title>optimized_mir (320,585 samples, 0.11%)</title><rect x="43.6126%" y="165" width="0.1058%" height="15" fill="rgb(244,35,45)"/><text x="43.8626%" y="175.50"></text></g><g><title>impl_parent (507,134 samples, 0.17%)</title><rect x="44.0726%" y="133" width="0.1673%" height="15" fill="rgb(251,115,12)"/><text x="44.3226%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (355,213 samples, 0.12%)</title><rect x="44.1227%" y="117" width="0.1172%" height="15" fill="rgb(240,54,50)"/><text x="44.3727%" y="127.50"></text></g><g><title>specialization_graph_of (2,651,579 samples, 0.87%)</title><rect x="43.8642%" y="149" width="0.8749%" height="15" fill="rgb(233,84,52)"/><text x="44.1142%" y="159.50"></text></g><g><title>impl_trait_ref (1,512,716 samples, 0.50%)</title><rect x="44.2399%" y="133" width="0.4991%" height="15" fill="rgb(207,117,47)"/><text x="44.4899%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,355,975 samples, 0.45%)</title><rect x="44.2917%" y="117" width="0.4474%" height="15" fill="rgb(249,43,39)"/><text x="44.5417%" y="127.50"></text></g><g><title>resolve_instance (3,137,745 samples, 1.04%)</title><rect x="43.7184%" y="165" width="1.0353%" height="15" fill="rgb(209,38,44)"/><text x="43.9684%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (4,118,096 samples, 1.36%)</title><rect x="43.4880%" y="181" width="1.3588%" height="15" fill="rgb(236,212,23)"/><text x="43.7380%" y="191.50"></text></g><g><title>monomorphization_collector (4,171,406 samples, 1.38%)</title><rect x="43.4873%" y="197" width="1.3763%" height="15" fill="rgb(242,79,21)"/><text x="43.7373%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (4,424,138 samples, 1.46%)</title><rect x="43.4807%" y="213" width="1.4597%" height="15" fill="rgb(211,96,35)"/><text x="43.7307%" y="223.50"></text></g><g><title>codegen_crate (8,253,420 samples, 2.72%)</title><rect x="42.2364%" y="229" width="2.7232%" height="15" fill="rgb(253,215,40)"/><text x="42.4864%" y="239.50">co..</text></g><g><title>codegen_module_optimize (21,205,654 samples, 7.00%)</title><rect x="44.9596%" y="229" width="6.9968%" height="15" fill="rgb(211,81,21)"/><text x="45.2096%" y="239.50">codegen_m..</text></g><g><title>LLVM_module_optimize (13,466,359 samples, 4.44%)</title><rect x="47.5132%" y="213" width="4.4432%" height="15" fill="rgb(208,190,38)"/><text x="47.7632%" y="223.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (11,163,283 samples, 3.68%)</title><rect x="52.8220%" y="213" width="3.6833%" height="15" fill="rgb(235,213,38)"/><text x="53.0720%" y="223.50">LLVM..</text></g><g><title>LLVM_module_codegen (13,869,193 samples, 4.58%)</title><rect x="56.5053%" y="213" width="4.5761%" height="15" fill="rgb(237,122,38)"/><text x="56.7553%" y="223.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (13,599,561 samples, 4.49%)</title><rect x="56.5942%" y="197" width="4.4872%" height="15" fill="rgb(244,218,35)"/><text x="56.8442%" y="207.50">LLVM_..</text></g><g><title>LLVM_thin_lto_import (508,415 samples, 0.17%)</title><rect x="61.0814%" y="213" width="0.1678%" height="15" fill="rgb(240,68,47)"/><text x="61.3314%" y="223.50"></text></g><g><title>codegen_module_perform_lto (28,286,172 samples, 9.33%)</title><rect x="51.9564%" y="229" width="9.3330%" height="15" fill="rgb(210,16,53)"/><text x="52.2064%" y="239.50">codegen_modul..</text></g><g><title>metadata_register_crate (1,278,014 samples, 0.42%)</title><rect x="83.8226%" y="181" width="0.4217%" height="15" fill="rgb(235,124,12)"/><text x="84.0726%" y="191.50"></text></g><g><title>metadata_register_crate (476,485 samples, 0.16%)</title><rect x="84.0871%" y="165" width="0.1572%" height="15" fill="rgb(224,169,11)"/><text x="84.3371%" y="175.50"></text></g><g><title>macro_expand_crate (70,010,302 samples, 23.10%)</title><rect x="61.5362%" y="213" width="23.0998%" height="15" fill="rgb(250,166,2)"/><text x="61.7862%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (69,989,712 samples, 23.09%)</title><rect x="61.5430%" y="197" width="23.0930%" height="15" fill="rgb(242,216,29)"/><text x="61.7930%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,187,224 samples, 0.39%)</title><rect x="84.2443%" y="181" width="0.3917%" height="15" fill="rgb(230,116,27)"/><text x="84.4943%" y="191.50"></text></g><g><title>late_resolve_crate (638,027 samples, 0.21%)</title><rect x="84.7634%" y="197" width="0.2105%" height="15" fill="rgb(228,99,48)"/><text x="85.0134%" y="207.50"></text></g><g><title>configure_and_expand (72,069,834 samples, 23.78%)</title><rect x="61.2894%" y="229" width="23.7793%" height="15" fill="rgb(253,11,6)"/><text x="61.5394%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,151,372 samples, 0.38%)</title><rect x="84.6888%" y="213" width="0.3799%" height="15" fill="rgb(247,143,39)"/><text x="84.9388%" y="223.50"></text></g><g><title>drop_ast (749,268 samples, 0.25%)</title><rect x="85.0687%" y="229" width="0.2472%" height="15" fill="rgb(236,97,10)"/><text x="85.3187%" y="239.50"></text></g><g><title>early_lint_checks (3,088,974 samples, 1.02%)</title><rect x="85.3241%" y="229" width="1.0192%" height="15" fill="rgb(233,208,19)"/><text x="85.5741%" y="239.50"></text></g><g><title>free_global_ctxt (3,491,728 samples, 1.15%)</title><rect x="86.3433%" y="229" width="1.1521%" height="15" fill="rgb(216,164,2)"/><text x="86.5933%" y="239.50"></text></g><g><title>optimized_mir (2,409,728 samples, 0.80%)</title><rect x="88.7478%" y="213" width="0.7951%" height="15" fill="rgb(220,129,5)"/><text x="88.9978%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,061,970 samples, 0.35%)</title><rect x="89.1925%" y="197" width="0.3504%" height="15" fill="rgb(242,17,10)"/><text x="89.4425%" y="207.50"></text></g><g><title>generate_crate_metadata (6,278,009 samples, 2.07%)</title><rect x="87.4954%" y="229" width="2.0714%" height="15" fill="rgb(242,107,0)"/><text x="87.7454%" y="239.50">g..</text></g><g><title>hir_lowering (6,769,365 samples, 2.23%)</title><rect x="89.5668%" y="229" width="2.2335%" height="15" fill="rgb(251,28,31)"/><text x="89.8168%" y="239.50">h..</text></g><g><title>finish_ongoing_codegen (16,737,405 samples, 5.52%)</title><rect x="91.8071%" y="213" width="5.5225%" height="15" fill="rgb(233,223,10)"/><text x="92.0571%" y="223.50">finish_..</text></g><g><title>link_crate (2,973,213 samples, 0.98%)</title><rect x="97.3296%" y="213" width="0.9810%" height="15" fill="rgb(215,21,27)"/><text x="97.5796%" y="223.50"></text></g><g><title>link_binary (2,949,723 samples, 0.97%)</title><rect x="97.3373%" y="197" width="0.9733%" height="15" fill="rgb(232,23,21)"/><text x="97.5873%" y="207.50"></text></g><g><title>link_rlib (2,343,255 samples, 0.77%)</title><rect x="97.5374%" y="181" width="0.7732%" height="15" fill="rgb(244,5,23)"/><text x="97.7874%" y="191.50"></text></g><g><title>link (19,744,218 samples, 6.51%)</title><rect x="91.8004%" y="229" width="6.5146%" height="15" fill="rgb(226,81,46)"/><text x="92.0504%" y="239.50">link</text></g><g><title>parse_crate (2,648,699 samples, 0.87%)</title><rect x="98.3149%" y="229" width="0.8739%" height="15" fill="rgb(247,70,30)"/><text x="98.5649%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,528,737 samples, 0.50%)</title><rect x="99.2664%" y="229" width="0.5044%" height="15" fill="rgb(212,68,19)"/><text x="99.5164%" y="239.50"></text></g><g><title>all (303,077,853 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (303,077,853 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (602,837 samples, 0.20%)</title><rect x="99.8011%" y="229" width="0.1989%" height="15" fill="rgb(206,192,2)"/><text x="100.0511%" y="239.50"></text></g></svg></svg>