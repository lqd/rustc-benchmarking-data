<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (249,310,816 samples, 5.93%)</title><rect x="0.1145%" y="197" width="5.9346%" height="15" fill="rgb(227,0,7)"/><text x="0.3645%" y="207.50">LLVM_pas..</text></g><g><title>is_sized_raw (32,722,483 samples, 0.78%)</title><rect x="12.1655%" y="149" width="0.7789%" height="15" fill="rgb(217,0,24)"/><text x="12.4155%" y="159.50"></text></g><g><title>evaluate_obligation (27,870,015 samples, 0.66%)</title><rect x="12.2810%" y="133" width="0.6634%" height="15" fill="rgb(221,193,54)"/><text x="12.5310%" y="143.50"></text></g><g><title>is_copy_raw (24,751,535 samples, 0.59%)</title><rect x="15.6017%" y="69" width="0.5892%" height="15" fill="rgb(248,212,6)"/><text x="15.8517%" y="79.50"></text></g><g><title>evaluate_obligation (17,485,841 samples, 0.42%)</title><rect x="15.7747%" y="53" width="0.4162%" height="15" fill="rgb(208,68,35)"/><text x="16.0247%" y="63.50"></text></g><g><title>needs_drop_raw (31,277,486 samples, 0.74%)</title><rect x="15.4603%" y="85" width="0.7445%" height="15" fill="rgb(232,128,0)"/><text x="15.7103%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (32,913,111 samples, 0.78%)</title><rect x="16.3397%" y="69" width="0.7835%" height="15" fill="rgb(207,160,47)"/><text x="16.5897%" y="79.50"></text></g><g><title>resolve_instance (42,610,288 samples, 1.01%)</title><rect x="16.2048%" y="85" width="1.0143%" height="15" fill="rgb(228,23,34)"/><text x="16.4548%" y="95.50"></text></g><g><title>thir_body (19,072,535 samples, 0.45%)</title><rect x="17.2341%" y="85" width="0.4540%" height="15" fill="rgb(218,30,26)"/><text x="17.4841%" y="95.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (4,573,092 samples, 0.11%)</title><rect x="17.6960%" y="85" width="0.1089%" height="15" fill="rgb(220,122,19)"/><text x="17.9460%" y="95.50"></text></g><g><title>mir_const (189,147,973 samples, 4.50%)</title><rect x="13.3029%" y="133" width="4.5025%" height="15" fill="rgb(250,228,42)"/><text x="13.5529%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (172,080,808 samples, 4.10%)</title><rect x="13.7092%" y="117" width="4.0962%" height="15" fill="rgb(240,193,28)"/><text x="13.9592%" y="127.50">unsa..</text></g><g><title>mir_built (159,218,375 samples, 3.79%)</title><rect x="14.0154%" y="101" width="3.7900%" height="15" fill="rgb(216,20,37)"/><text x="14.2654%" y="111.50">mir_..</text></g><g><title>mir_promoted (205,492,518 samples, 4.89%)</title><rect x="12.9444%" y="149" width="4.8916%" height="15" fill="rgb(206,188,39)"/><text x="13.1944%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (7,320,855 samples, 0.17%)</title><rect x="17.8359%" y="149" width="0.1743%" height="15" fill="rgb(217,207,13)"/><text x="18.0859%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (16,664,793 samples, 0.40%)</title><rect x="18.0102%" y="149" width="0.3967%" height="15" fill="rgb(231,73,38)"/><text x="18.2602%" y="159.50"></text></g><g><title>normalize_projection_ty (6,552,785 samples, 0.16%)</title><rect x="18.2509%" y="133" width="0.1560%" height="15" fill="rgb(225,20,46)"/><text x="18.5009%" y="143.50"></text></g><g><title>type_op_normalize_predicate (25,035,396 samples, 0.60%)</title><rect x="18.4069%" y="149" width="0.5959%" height="15" fill="rgb(210,31,41)"/><text x="18.6569%" y="159.50"></text></g><g><title>normalize_projection_ty (15,473,174 samples, 0.37%)</title><rect x="18.6345%" y="133" width="0.3683%" height="15" fill="rgb(221,200,47)"/><text x="18.8845%" y="143.50"></text></g><g><title>type_op_normalize_ty (56,497,975 samples, 1.34%)</title><rect x="19.0028%" y="149" width="1.3449%" height="15" fill="rgb(226,26,5)"/><text x="19.2528%" y="159.50"></text></g><g><title>normalize_projection_ty (41,724,607 samples, 0.99%)</title><rect x="19.3545%" y="133" width="0.9932%" height="15" fill="rgb(249,33,26)"/><text x="19.6045%" y="143.50"></text></g><g><title>type_op_prove_predicate (146,371,525 samples, 3.48%)</title><rect x="20.3477%" y="149" width="3.4842%" height="15" fill="rgb(235,183,28)"/><text x="20.5977%" y="159.50">typ..</text></g><g><title>MIR_borrow_checking (742,490,914 samples, 17.67%)</title><rect x="6.1585%" y="181" width="17.6743%" height="15" fill="rgb(221,5,38)"/><text x="6.4085%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (739,509,686 samples, 17.60%)</title><rect x="6.2294%" y="165" width="17.6033%" height="15" fill="rgb(247,18,42)"/><text x="6.4794%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (5,080,457 samples, 0.12%)</title><rect x="24.0554%" y="149" width="0.1209%" height="15" fill="rgb(241,131,45)"/><text x="24.3054%" y="159.50"></text></g><g><title>check_mod_attrs (8,786,924 samples, 0.21%)</title><rect x="23.9672%" y="165" width="0.2092%" height="15" fill="rgb(249,31,29)"/><text x="24.2172%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (10,245,856 samples, 0.24%)</title><rect x="24.3001%" y="165" width="0.2439%" height="15" fill="rgb(225,111,53)"/><text x="24.5501%" y="175.50"></text></g><g><title>misc_checking_1 (25,176,174 samples, 0.60%)</title><rect x="23.9621%" y="181" width="0.5993%" height="15" fill="rgb(238,160,17)"/><text x="24.2121%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (9,595,238 samples, 0.23%)</title><rect x="24.5614%" y="165" width="0.2284%" height="15" fill="rgb(214,148,48)"/><text x="24.8114%" y="175.50"></text></g><g><title>check_mod_liveness (7,979,320 samples, 0.19%)</title><rect x="24.5999%" y="149" width="0.1899%" height="15" fill="rgb(232,36,49)"/><text x="24.8499%" y="159.50"></text></g><g><title>misc_checking_2 (18,408,618 samples, 0.44%)</title><rect x="24.5614%" y="181" width="0.4382%" height="15" fill="rgb(209,103,24)"/><text x="24.8114%" y="191.50"></text></g><g><title>match_checking (8,809,630 samples, 0.21%)</title><rect x="24.7899%" y="165" width="0.2097%" height="15" fill="rgb(229,88,8)"/><text x="25.0399%" y="175.50"></text></g><g><title>check_match (7,913,792 samples, 0.19%)</title><rect x="24.8112%" y="149" width="0.1884%" height="15" fill="rgb(213,181,19)"/><text x="25.0612%" y="159.50"></text></g><g><title>check_private_in_public (7,498,315 samples, 0.18%)</title><rect x="25.0001%" y="165" width="0.1785%" height="15" fill="rgb(254,191,54)"/><text x="25.2501%" y="175.50"></text></g><g><title>death_checking (9,387,986 samples, 0.22%)</title><rect x="25.1786%" y="165" width="0.2235%" height="15" fill="rgb(241,83,37)"/><text x="25.4286%" y="175.50"></text></g><g><title>crate_lints (13,623,144 samples, 0.32%)</title><rect x="25.4022%" y="149" width="0.3243%" height="15" fill="rgb(233,36,39)"/><text x="25.6522%" y="159.50"></text></g><g><title>lint_checking (22,936,879 samples, 0.55%)</title><rect x="25.4021%" y="165" width="0.5460%" height="15" fill="rgb(226,3,54)"/><text x="25.6521%" y="175.50"></text></g><g><title>module_lints (9,310,445 samples, 0.22%)</title><rect x="25.7265%" y="149" width="0.2216%" height="15" fill="rgb(245,192,40)"/><text x="25.9765%" y="159.50"></text></g><g><title>lint_mod (9,238,495 samples, 0.22%)</title><rect x="25.7282%" y="133" width="0.2199%" height="15" fill="rgb(238,167,29)"/><text x="25.9782%" y="143.50"></text></g><g><title>privacy_access_levels (12,632,033 samples, 0.30%)</title><rect x="25.9481%" y="165" width="0.3007%" height="15" fill="rgb(232,182,51)"/><text x="26.1981%" y="175.50"></text></g><g><title>privacy_checking_modules (26,415,979 samples, 0.63%)</title><rect x="26.2488%" y="165" width="0.6288%" height="15" fill="rgb(231,60,39)"/><text x="26.4988%" y="175.50"></text></g><g><title>check_mod_privacy (26,329,217 samples, 0.63%)</title><rect x="26.2509%" y="149" width="0.6267%" height="15" fill="rgb(208,69,12)"/><text x="26.5009%" y="159.50"></text></g><g><title>misc_checking_3 (79,089,904 samples, 1.88%)</title><rect x="24.9996%" y="181" width="1.8827%" height="15" fill="rgb(235,93,37)"/><text x="25.2496%" y="191.50">m..</text></g><g><title>impl_trait_ref (6,292,761 samples, 0.15%)</title><rect x="27.4522%" y="117" width="0.1498%" height="15" fill="rgb(213,116,39)"/><text x="27.7022%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,145,532 samples, 0.12%)</title><rect x="27.4795%" y="101" width="0.1225%" height="15" fill="rgb(222,207,29)"/><text x="27.7295%" y="111.50"></text></g><g><title>coherent_trait (29,941,789 samples, 0.71%)</title><rect x="26.9181%" y="149" width="0.7127%" height="15" fill="rgb(206,96,30)"/><text x="27.1681%" y="159.50"></text></g><g><title>specialization_graph_of (29,051,378 samples, 0.69%)</title><rect x="26.9393%" y="133" width="0.6915%" height="15" fill="rgb(218,138,4)"/><text x="27.1893%" y="143.50"></text></g><g><title>coherence_checking (30,898,659 samples, 0.74%)</title><rect x="26.9172%" y="165" width="0.7355%" height="15" fill="rgb(250,191,14)"/><text x="27.1672%" y="175.50"></text></g><g><title>dropck_outlives (52,323,358 samples, 1.25%)</title><rect x="38.5973%" y="117" width="1.2455%" height="15" fill="rgb(239,60,40)"/><text x="38.8473%" y="127.50"></text></g><g><title>normalize_projection_ty (32,550,046 samples, 0.77%)</title><rect x="39.0679%" y="101" width="0.7748%" height="15" fill="rgb(206,27,48)"/><text x="39.3179%" y="111.50"></text></g><g><title>evaluate_obligation (49,641,077 samples, 1.18%)</title><rect x="39.9347%" y="117" width="1.1817%" height="15" fill="rgb(225,35,8)"/><text x="40.1847%" y="127.50"></text></g><g><title>evaluate_obligation (8,844,931 samples, 0.21%)</title><rect x="41.4485%" y="101" width="0.2105%" height="15" fill="rgb(250,213,24)"/><text x="41.6985%" y="111.50"></text></g><g><title>method_autoderef_steps (18,659,540 samples, 0.44%)</title><rect x="41.2153%" y="117" width="0.4442%" height="15" fill="rgb(247,123,22)"/><text x="41.4653%" y="127.50"></text></g><g><title>evaluate_obligation (5,016,613 samples, 0.12%)</title><rect x="42.4944%" y="101" width="0.1194%" height="15" fill="rgb(231,138,38)"/><text x="42.7444%" y="111.50"></text></g><g><title>typeck (38,284,894 samples, 0.91%)</title><rect x="41.7474%" y="117" width="0.9113%" height="15" fill="rgb(231,145,46)"/><text x="41.9974%" y="127.50"></text></g><g><title>item_bodies_checking (629,738,711 samples, 14.99%)</title><rect x="27.6872%" y="165" width="14.9903%" height="15" fill="rgb(251,118,11)"/><text x="27.9372%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (629,734,501 samples, 14.99%)</title><rect x="27.6873%" y="149" width="14.9902%" height="15" fill="rgb(217,147,25)"/><text x="27.9373%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (627,094,063 samples, 14.93%)</title><rect x="27.7501%" y="133" width="14.9274%" height="15" fill="rgb(247,81,37)"/><text x="28.0001%" y="143.50">typeck</text></g><g><title>mir_borrowck (5,174,809 samples, 0.12%)</title><rect x="46.3278%" y="101" width="0.1232%" height="15" fill="rgb(209,12,38)"/><text x="46.5778%" y="111.50"></text></g><g><title>mir_built (10,860,352 samples, 0.26%)</title><rect x="46.4635%" y="53" width="0.2585%" height="15" fill="rgb(227,1,9)"/><text x="46.7135%" y="63.50"></text></g><g><title>typeck (10,098,793 samples, 0.24%)</title><rect x="46.4817%" y="37" width="0.2404%" height="15" fill="rgb(248,47,43)"/><text x="46.7317%" y="47.50"></text></g><g><title>mir_const (13,116,006 samples, 0.31%)</title><rect x="46.4560%" y="85" width="0.3122%" height="15" fill="rgb(221,10,30)"/><text x="46.7060%" y="95.50"></text></g><g><title>unsafety_check_result (12,892,774 samples, 0.31%)</title><rect x="46.4613%" y="69" width="0.3069%" height="15" fill="rgb(210,229,1)"/><text x="46.7113%" y="79.50"></text></g><g><title>mir_promoted (13,354,820 samples, 0.32%)</title><rect x="46.4510%" y="101" width="0.3179%" height="15" fill="rgb(222,148,37)"/><text x="46.7010%" y="111.50"></text></g><g><title>type_of (22,099,059 samples, 0.53%)</title><rect x="46.2524%" y="133" width="0.5260%" height="15" fill="rgb(234,67,33)"/><text x="46.5024%" y="143.50"></text></g><g><title>mir_borrowck (22,010,978 samples, 0.52%)</title><rect x="46.2545%" y="117" width="0.5240%" height="15" fill="rgb(247,98,35)"/><text x="46.5045%" y="127.50"></text></g><g><title>item_types_checking (174,108,047 samples, 4.14%)</title><rect x="42.6775%" y="165" width="4.1445%" height="15" fill="rgb(247,138,52)"/><text x="42.9275%" y="175.50">item_..</text></g><g><title>check_mod_item_types (174,008,315 samples, 4.14%)</title><rect x="42.6799%" y="149" width="4.1421%" height="15" fill="rgb(213,79,30)"/><text x="42.9299%" y="159.50">check..</text></g><g><title>fn_sig (7,150,668 samples, 0.17%)</title><rect x="46.9782%" y="133" width="0.1702%" height="15" fill="rgb(246,177,23)"/><text x="47.2282%" y="143.50"></text></g><g><title>resolve_lifetimes (4,788,675 samples, 0.11%)</title><rect x="47.2407%" y="101" width="0.1140%" height="15" fill="rgb(230,62,27)"/><text x="47.4907%" y="111.50"></text></g><g><title>is_late_bound_map (5,105,318 samples, 0.12%)</title><rect x="47.2333%" y="117" width="0.1215%" height="15" fill="rgb(216,154,8)"/><text x="47.4833%" y="127.50"></text></g><g><title>generics_of (10,544,654 samples, 0.25%)</title><rect x="47.1484%" y="133" width="0.2510%" height="15" fill="rgb(244,35,45)"/><text x="47.3984%" y="143.50"></text></g><g><title>late_bound_vars_map (5,445,651 samples, 0.13%)</title><rect x="47.7874%" y="85" width="0.1296%" height="15" fill="rgb(251,115,12)"/><text x="48.0374%" y="95.50"></text></g><g><title>resolve_lifetimes (5,008,268 samples, 0.12%)</title><rect x="47.7978%" y="69" width="0.1192%" height="15" fill="rgb(240,54,50)"/><text x="48.0478%" y="79.50"></text></g><g><title>explicit_predicates_of (19,789,189 samples, 0.47%)</title><rect x="47.5191%" y="101" width="0.4711%" height="15" fill="rgb(233,84,52)"/><text x="47.7691%" y="111.50"></text></g><g><title>predicates_of (27,934,764 samples, 0.66%)</title><rect x="47.4285%" y="133" width="0.6650%" height="15" fill="rgb(207,117,47)"/><text x="47.6785%" y="143.50"></text></g><g><title>predicates_defined_on (26,313,254 samples, 0.63%)</title><rect x="47.4671%" y="117" width="0.6264%" height="15" fill="rgb(249,43,39)"/><text x="47.7171%" y="127.50"></text></g><g><title>inferred_outlives_of (4,338,806 samples, 0.10%)</title><rect x="47.9902%" y="101" width="0.1033%" height="15" fill="rgb(209,38,44)"/><text x="48.2402%" y="111.50"></text></g><g><title>type_collecting (61,134,230 samples, 1.46%)</title><rect x="46.8226%" y="165" width="1.4552%" height="15" fill="rgb(236,212,23)"/><text x="47.0726%" y="175.50"></text></g><g><title>collect_mod_item_types (61,039,558 samples, 1.45%)</title><rect x="46.8249%" y="149" width="1.4530%" height="15" fill="rgb(242,79,21)"/><text x="47.0749%" y="159.50"></text></g><g><title>type_of (7,692,782 samples, 0.18%)</title><rect x="48.0947%" y="133" width="0.1831%" height="15" fill="rgb(211,96,35)"/><text x="48.3447%" y="143.50"></text></g><g><title>evaluate_obligation (11,004,105 samples, 0.26%)</title><rect x="50.9986%" y="133" width="0.2619%" height="15" fill="rgb(253,215,40)"/><text x="51.2486%" y="143.50"></text></g><g><title>implied_outlives_bounds (23,861,942 samples, 0.57%)</title><rect x="51.2824%" y="133" width="0.5680%" height="15" fill="rgb(211,81,21)"/><text x="51.5324%" y="143.50"></text></g><g><title>param_env (33,304,308 samples, 0.79%)</title><rect x="51.8504%" y="133" width="0.7928%" height="15" fill="rgb(208,190,38)"/><text x="52.1004%" y="143.50"></text></g><g><title>region_scope_tree (6,608,142 samples, 0.16%)</title><rect x="52.6488%" y="133" width="0.1573%" height="15" fill="rgb(235,213,38)"/><text x="52.8988%" y="143.50"></text></g><g><title>check_impl_item_well_formed (183,953,153 samples, 4.38%)</title><rect x="48.4288%" y="149" width="4.3788%" height="15" fill="rgb(237,122,38)"/><text x="48.6788%" y="159.50">check..</text></g><g><title>implied_outlives_bounds (4,288,178 samples, 0.10%)</title><rect x="54.6987%" y="133" width="0.1021%" height="15" fill="rgb(244,218,35)"/><text x="54.9487%" y="143.50"></text></g><g><title>param_env (24,254,963 samples, 0.58%)</title><rect x="54.8017%" y="133" width="0.5774%" height="15" fill="rgb(240,68,47)"/><text x="55.0517%" y="143.50"></text></g><g><title>check_item_well_formed (112,951,925 samples, 2.69%)</title><rect x="52.8076%" y="149" width="2.6887%" height="15" fill="rgb(210,16,53)"/><text x="53.0576%" y="159.50">ch..</text></g><g><title>analysis (2,089,903,461 samples, 49.75%)</title><rect x="6.0491%" y="197" width="49.7482%" height="15" fill="rgb(235,124,12)"/><text x="6.2991%" y="207.50">analysis</text></g><g><title>type_check_crate (1,214,711,097 samples, 28.92%)</title><rect x="26.8822%" y="181" width="28.9151%" height="15" fill="rgb(224,169,11)"/><text x="27.1322%" y="191.50">type_check_crate</text></g><g><title>wf_checking (315,687,514 samples, 7.51%)</title><rect x="48.2826%" y="165" width="7.5146%" height="15" fill="rgb(250,166,2)"/><text x="48.5326%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (12,641,779 samples, 0.30%)</title><rect x="55.4963%" y="149" width="0.3009%" height="15" fill="rgb(242,216,29)"/><text x="55.7463%" y="159.50"></text></g><g><title>param_env (4,651,041 samples, 0.11%)</title><rect x="57.1757%" y="149" width="0.1107%" height="15" fill="rgb(230,116,27)"/><text x="57.4257%" y="159.50"></text></g><g><title>fn_abi_of_instance (15,281,980 samples, 0.36%)</title><rect x="56.9518%" y="165" width="0.3638%" height="15" fill="rgb(228,99,48)"/><text x="57.2018%" y="175.50"></text></g><g><title>codegen_module (63,247,474 samples, 1.51%)</title><rect x="55.8507%" y="181" width="1.5055%" height="15" fill="rgb(253,11,6)"/><text x="56.1007%" y="191.50"></text></g><g><title>optimized_mir (11,340,760 samples, 0.27%)</title><rect x="57.5324%" y="133" width="0.2700%" height="15" fill="rgb(247,143,39)"/><text x="57.7824%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (5,515,823 samples, 0.13%)</title><rect x="57.8447%" y="117" width="0.1313%" height="15" fill="rgb(236,97,10)"/><text x="58.0947%" y="127.50"></text></g><g><title>resolve_instance (9,533,067 samples, 0.23%)</title><rect x="57.8024%" y="133" width="0.2269%" height="15" fill="rgb(233,208,19)"/><text x="58.0524%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (29,268,951 samples, 0.70%)</title><rect x="57.3579%" y="149" width="0.6967%" height="15" fill="rgb(216,164,2)"/><text x="57.6079%" y="159.50"></text></g><g><title>monomorphization_collector (30,039,290 samples, 0.72%)</title><rect x="57.3579%" y="165" width="0.7151%" height="15" fill="rgb(220,129,5)"/><text x="57.6079%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (34,817,123 samples, 0.83%)</title><rect x="57.3565%" y="181" width="0.8288%" height="15" fill="rgb(242,17,10)"/><text x="57.6065%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (4,720,123 samples, 0.11%)</title><rect x="58.0729%" y="165" width="0.1124%" height="15" fill="rgb(242,107,0)"/><text x="58.3229%" y="175.50"></text></g><g><title>codegen_crate (100,407,414 samples, 2.39%)</title><rect x="55.7974%" y="197" width="2.3901%" height="15" fill="rgb(251,28,31)"/><text x="56.0474%" y="207.50">co..</text></g><g><title>codegen_module_optimize (501,324,971 samples, 11.93%)</title><rect x="58.1875%" y="197" width="11.9336%" height="15" fill="rgb(233,223,10)"/><text x="58.4375%" y="207.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (475,636,230 samples, 11.32%)</title><rect x="58.7990%" y="181" width="11.3221%" height="15" fill="rgb(215,21,27)"/><text x="59.0490%" y="191.50">LLVM_module_optim..</text></g><g><title>LLVM_lto_optimize (279,365,906 samples, 6.65%)</title><rect x="70.4603%" y="181" width="6.6500%" height="15" fill="rgb(232,23,21)"/><text x="70.7103%" y="191.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (209,397,982 samples, 4.98%)</title><rect x="77.1104%" y="181" width="4.9845%" height="15" fill="rgb(244,5,23)"/><text x="77.3604%" y="191.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (206,917,915 samples, 4.93%)</title><rect x="77.1694%" y="165" width="4.9255%" height="15" fill="rgb(226,81,46)"/><text x="77.4194%" y="175.50">LLVM_m..</text></g><g><title>LLVM_thin_lto_import (14,615,628 samples, 0.35%)</title><rect x="82.0949%" y="181" width="0.3479%" height="15" fill="rgb(247,70,30)"/><text x="82.3449%" y="191.50"></text></g><g><title>codegen_module_perform_lto (518,976,340 samples, 12.35%)</title><rect x="70.1211%" y="197" width="12.3537%" height="15" fill="rgb(212,68,19)"/><text x="70.3711%" y="207.50">codegen_module_per..</text></g><g><title>macro_expand_crate (120,240,458 samples, 2.86%)</title><rect x="82.6199%" y="181" width="2.8622%" height="15" fill="rgb(240,187,13)"/><text x="82.8699%" y="191.50">ma..</text></g><g><title>expand_crate (120,207,457 samples, 2.86%)</title><rect x="82.6206%" y="165" width="2.8614%" height="15" fill="rgb(223,113,26)"/><text x="82.8706%" y="175.50">ex..</text></g><g><title>late_resolve_crate (29,851,127 samples, 0.71%)</title><rect x="85.5332%" y="165" width="0.7106%" height="15" fill="rgb(206,192,2)"/><text x="85.7832%" y="175.50"></text></g><g><title>configure_and_expand (162,924,340 samples, 3.88%)</title><rect x="82.4748%" y="197" width="3.8783%" height="15" fill="rgb(241,108,4)"/><text x="82.7248%" y="207.50">conf..</text></g><g><title>resolve_crate (36,521,243 samples, 0.87%)</title><rect x="85.4837%" y="181" width="0.8694%" height="15" fill="rgb(247,173,49)"/><text x="85.7337%" y="191.50"></text></g><g><title>drop_ast (4,976,156 samples, 0.12%)</title><rect x="86.3531%" y="197" width="0.1185%" height="15" fill="rgb(224,114,35)"/><text x="86.6031%" y="207.50"></text></g><g><title>early_lint_checks (7,139,211 samples, 0.17%)</title><rect x="86.4726%" y="197" width="0.1699%" height="15" fill="rgb(245,159,27)"/><text x="86.7226%" y="207.50"></text></g><g><title>free_global_ctxt (35,909,946 samples, 0.85%)</title><rect x="86.6426%" y="197" width="0.8548%" height="15" fill="rgb(245,172,44)"/><text x="86.8926%" y="207.50"></text></g><g><title>exported_symbols (4,503,891 samples, 0.11%)</title><rect x="88.5127%" y="181" width="0.1072%" height="15" fill="rgb(236,23,11)"/><text x="88.7627%" y="191.50"></text></g><g><title>is_sized_raw (9,069,637 samples, 0.22%)</title><rect x="90.4138%" y="149" width="0.2159%" height="15" fill="rgb(205,117,38)"/><text x="90.6638%" y="159.50"></text></g><g><title>evaluate_obligation (5,830,352 samples, 0.14%)</title><rect x="90.4909%" y="133" width="0.1388%" height="15" fill="rgb(237,72,25)"/><text x="90.7409%" y="143.50"></text></g><g><title>layout_of (5,362,894 samples, 0.13%)</title><rect x="90.6297%" y="149" width="0.1277%" height="15" fill="rgb(244,70,9)"/><text x="90.8797%" y="159.50"></text></g><g><title>layout_of (27,674,784 samples, 0.66%)</title><rect x="90.2502%" y="165" width="0.6588%" height="15" fill="rgb(217,125,39)"/><text x="90.5002%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (6,117,496 samples, 0.15%)</title><rect x="90.7633%" y="149" width="0.1456%" height="15" fill="rgb(235,36,10)"/><text x="91.0133%" y="159.50"></text></g><g><title>is_copy_raw (18,837,615 samples, 0.45%)</title><rect x="92.9931%" y="133" width="0.4484%" height="15" fill="rgb(251,123,47)"/><text x="93.2431%" y="143.50"></text></g><g><title>evaluate_obligation (12,120,219 samples, 0.29%)</title><rect x="93.1530%" y="117" width="0.2885%" height="15" fill="rgb(221,13,13)"/><text x="93.4030%" y="127.50"></text></g><g><title>needs_drop_raw (22,623,820 samples, 0.54%)</title><rect x="92.9137%" y="149" width="0.5385%" height="15" fill="rgb(238,131,9)"/><text x="93.1637%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (133,540,274 samples, 3.18%)</title><rect x="90.9090%" y="165" width="3.1788%" height="15" fill="rgb(211,50,8)"/><text x="91.1590%" y="175.50">mir..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (25,338,171 samples, 0.60%)</title><rect x="93.4846%" y="149" width="0.6032%" height="15" fill="rgb(245,182,24)"/><text x="93.7346%" y="159.50"></text></g><g><title>normalize_projection_ty (20,346,022 samples, 0.48%)</title><rect x="93.6034%" y="133" width="0.4843%" height="15" fill="rgb(242,14,37)"/><text x="93.8534%" y="143.50"></text></g><g><title>optimized_mir (228,414,559 samples, 5.44%)</title><rect x="88.6726%" y="181" width="5.4372%" height="15" fill="rgb(246,228,12)"/><text x="88.9226%" y="191.50">optimiz..</text></g><g><title>generate_crate_metadata (279,473,455 samples, 6.65%)</title><rect x="87.4974%" y="197" width="6.6526%" height="15" fill="rgb(213,55,15)"/><text x="87.7474%" y="207.50">generate_..</text></g><g><title>hir_lowering (66,502,041 samples, 1.58%)</title><rect x="94.1500%" y="197" width="1.5830%" height="15" fill="rgb(209,9,3)"/><text x="94.4000%" y="207.50"></text></g><g><title>finish_ongoing_codegen (156,825,540 samples, 3.73%)</title><rect x="95.7337%" y="181" width="3.7331%" height="15" fill="rgb(230,59,30)"/><text x="95.9837%" y="191.50">fini..</text></g><g><title>link_crate (9,115,813 samples, 0.22%)</title><rect x="99.4668%" y="181" width="0.2170%" height="15" fill="rgb(209,121,21)"/><text x="99.7168%" y="191.50"></text></g><g><title>link_binary (9,065,742 samples, 0.22%)</title><rect x="99.4680%" y="165" width="0.2158%" height="15" fill="rgb(220,109,13)"/><text x="99.7180%" y="175.50"></text></g><g><title>link_rlib (7,744,278 samples, 0.18%)</title><rect x="99.4994%" y="149" width="0.1843%" height="15" fill="rgb(232,18,1)"/><text x="99.7494%" y="159.50"></text></g><g><title>link (165,979,744 samples, 3.95%)</title><rect x="95.7330%" y="197" width="3.9510%" height="15" fill="rgb(215,41,42)"/><text x="95.9830%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (9,854,251 samples, 0.23%)</title><rect x="99.7001%" y="197" width="0.2346%" height="15" fill="rgb(224,123,36)"/><text x="99.9501%" y="207.50"></text></g><g><title>all (4,200,964,580 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (4,200,964,580 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>