<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (161,254,035 samples, 9.79%)</title><rect x="0.0664%" y="149" width="9.7938%" height="15" fill="rgb(227,0,7)"/><text x="0.3164%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (2,315,446 samples, 0.14%)</title><rect x="9.7196%" y="133" width="0.1406%" height="15" fill="rgb(217,0,24)"/><text x="9.9696%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (2,279,956 samples, 0.14%)</title><rect x="9.7217%" y="117" width="0.1385%" height="15" fill="rgb(221,193,54)"/><text x="9.9717%" y="127.50"></text></g><g><title>needs_drop_raw (1,701,611 samples, 0.10%)</title><rect x="12.7418%" y="37" width="0.1033%" height="15" fill="rgb(248,212,6)"/><text x="12.9918%" y="47.50"></text></g><g><title>thir_body (2,794,374 samples, 0.17%)</title><rect x="12.9326%" y="37" width="0.1697%" height="15" fill="rgb(208,68,35)"/><text x="13.1826%" y="47.50"></text></g><g><title>mir_const (17,881,341 samples, 1.09%)</title><rect x="12.0194%" y="85" width="1.0860%" height="15" fill="rgb(232,128,0)"/><text x="12.2694%" y="95.50"></text></g><g><title>unsafety_check_result (15,393,294 samples, 0.93%)</title><rect x="12.1705%" y="69" width="0.9349%" height="15" fill="rgb(207,160,47)"/><text x="12.4205%" y="79.50"></text></g><g><title>mir_built (13,632,215 samples, 0.83%)</title><rect x="12.2774%" y="53" width="0.8280%" height="15" fill="rgb(228,23,34)"/><text x="12.5274%" y="63.50"></text></g><g><title>mir_const (2,961,513 samples, 0.18%)</title><rect x="13.1666%" y="69" width="0.1799%" height="15" fill="rgb(218,30,26)"/><text x="13.4166%" y="79.50"></text></g><g><title>unsafety_check_result (2,282,385 samples, 0.14%)</title><rect x="13.2078%" y="53" width="0.1386%" height="15" fill="rgb(220,122,19)"/><text x="13.4578%" y="63.50"></text></g><g><title>mir_built (1,993,061 samples, 0.12%)</title><rect x="13.2254%" y="37" width="0.1210%" height="15" fill="rgb(250,228,42)"/><text x="13.4754%" y="47.50"></text></g><g><title>mir_promoted (24,371,146 samples, 1.48%)</title><rect x="11.8681%" y="101" width="1.4802%" height="15" fill="rgb(240,193,28)"/><text x="12.1181%" y="111.50"></text></g><g><title>mir_const_qualif (3,998,820 samples, 0.24%)</title><rect x="13.1054%" y="85" width="0.2429%" height="15" fill="rgb(216,20,37)"/><text x="13.3554%" y="95.50"></text></g><g><title>type_op_prove_predicate (2,875,507 samples, 0.17%)</title><rect x="13.4693%" y="101" width="0.1746%" height="15" fill="rgb(206,188,39)"/><text x="13.7193%" y="111.50"></text></g><g><title>MIR_borrow_checking (61,632,437 samples, 3.74%)</title><rect x="9.9015%" y="133" width="3.7433%" height="15" fill="rgb(217,207,13)"/><text x="10.1515%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (61,121,926 samples, 3.71%)</title><rect x="9.9325%" y="117" width="3.7122%" height="15" fill="rgb(231,73,38)"/><text x="10.1825%" y="127.50">mir_..</text></g><g><title>MIR_effect_checking (1,824,131 samples, 0.11%)</title><rect x="13.6447%" y="133" width="0.1108%" height="15" fill="rgb(225,20,46)"/><text x="13.8947%" y="143.50"></text></g><g><title>misc_checking_1 (3,184,226 samples, 0.19%)</title><rect x="13.7884%" y="133" width="0.1934%" height="15" fill="rgb(210,31,41)"/><text x="14.0384%" y="143.50"></text></g><g><title>misc_checking_2 (2,696,981 samples, 0.16%)</title><rect x="13.9817%" y="133" width="0.1638%" height="15" fill="rgb(221,200,47)"/><text x="14.2317%" y="143.50"></text></g><g><title>crate_lints (4,233,688 samples, 0.26%)</title><rect x="14.2552%" y="101" width="0.2571%" height="15" fill="rgb(226,26,5)"/><text x="14.5052%" y="111.50"></text></g><g><title>lint_checking (5,398,161 samples, 0.33%)</title><rect x="14.2551%" y="117" width="0.3279%" height="15" fill="rgb(249,33,26)"/><text x="14.5051%" y="127.50"></text></g><g><title>privacy_checking_modules (1,921,302 samples, 0.12%)</title><rect x="14.6232%" y="117" width="0.1167%" height="15" fill="rgb(235,183,28)"/><text x="14.8732%" y="127.50"></text></g><g><title>check_mod_privacy (1,915,932 samples, 0.12%)</title><rect x="14.6236%" y="101" width="0.1164%" height="15" fill="rgb(221,5,38)"/><text x="14.8736%" y="111.50"></text></g><g><title>misc_checking_3 (9,819,111 samples, 0.60%)</title><rect x="14.1455%" y="133" width="0.5964%" height="15" fill="rgb(247,18,42)"/><text x="14.3955%" y="143.50"></text></g><g><title>impl_parent (3,697,209 samples, 0.22%)</title><rect x="15.1984%" y="69" width="0.2246%" height="15" fill="rgb(241,131,45)"/><text x="15.4484%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,134,690 samples, 0.13%)</title><rect x="15.2933%" y="53" width="0.1297%" height="15" fill="rgb(249,31,29)"/><text x="15.5433%" y="63.50"></text></g><g><title>impl_trait_ref (7,512,414 samples, 0.46%)</title><rect x="15.4230%" y="69" width="0.4563%" height="15" fill="rgb(225,111,53)"/><text x="15.6730%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,741,922 samples, 0.35%)</title><rect x="15.5305%" y="53" width="0.3487%" height="15" fill="rgb(238,160,17)"/><text x="15.7805%" y="63.50"></text></g><g><title>coherent_trait (20,194,329 samples, 1.23%)</title><rect x="14.7567%" y="101" width="1.2265%" height="15" fill="rgb(214,148,48)"/><text x="15.0067%" y="111.50"></text></g><g><title>specialization_graph_of (19,434,311 samples, 1.18%)</title><rect x="14.8029%" y="85" width="1.1803%" height="15" fill="rgb(232,36,49)"/><text x="15.0529%" y="95.50"></text></g><g><title>trait_impls_of (1,709,040 samples, 0.10%)</title><rect x="15.8794%" y="69" width="0.1038%" height="15" fill="rgb(209,103,24)"/><text x="16.1294%" y="79.50"></text></g><g><title>coherence_checking (20,515,442 samples, 1.25%)</title><rect x="14.7546%" y="117" width="1.2460%" height="15" fill="rgb(229,88,8)"/><text x="15.0046%" y="127.50"></text></g><g><title>evaluate_obligation (4,288,351 samples, 0.26%)</title><rect x="19.5334%" y="69" width="0.2605%" height="15" fill="rgb(213,181,19)"/><text x="19.7834%" y="79.50"></text></g><g><title>typeck (4,344,949 samples, 0.26%)</title><rect x="19.9605%" y="69" width="0.2639%" height="15" fill="rgb(254,191,54)"/><text x="20.2105%" y="79.50"></text></g><g><title>item_bodies_checking (69,578,926 samples, 4.23%)</title><rect x="16.0067%" y="117" width="4.2259%" height="15" fill="rgb(241,83,37)"/><text x="16.2567%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (69,574,626 samples, 4.23%)</title><rect x="16.0069%" y="101" width="4.2256%" height="15" fill="rgb(233,36,39)"/><text x="16.2569%" y="111.50">typec..</text></g><g><title>typeck (69,240,414 samples, 4.21%)</title><rect x="16.0272%" y="85" width="4.2053%" height="15" fill="rgb(226,3,54)"/><text x="16.2772%" y="95.50">typeck</text></g><g><title>item_types_checking (3,293,738 samples, 0.20%)</title><rect x="20.2326%" y="117" width="0.2000%" height="15" fill="rgb(245,192,40)"/><text x="20.4826%" y="127.50"></text></g><g><title>check_mod_item_types (3,285,698 samples, 0.20%)</title><rect x="20.2330%" y="101" width="0.1996%" height="15" fill="rgb(238,167,29)"/><text x="20.4830%" y="111.50"></text></g><g><title>generics_of (1,690,567 samples, 0.10%)</title><rect x="20.5281%" y="85" width="0.1027%" height="15" fill="rgb(232,182,51)"/><text x="20.7781%" y="95.50"></text></g><g><title>type_collecting (4,718,043 samples, 0.29%)</title><rect x="20.4330%" y="117" width="0.2866%" height="15" fill="rgb(231,60,39)"/><text x="20.6830%" y="127.50"></text></g><g><title>collect_mod_item_types (4,702,333 samples, 0.29%)</title><rect x="20.4339%" y="101" width="0.2856%" height="15" fill="rgb(208,69,12)"/><text x="20.6839%" y="111.50"></text></g><g><title>check_impl_item_well_formed (7,555,257 samples, 0.46%)</title><rect x="20.7527%" y="101" width="0.4589%" height="15" fill="rgb(235,93,37)"/><text x="21.0027%" y="111.50"></text></g><g><title>check_item_well_formed (3,482,990 samples, 0.21%)</title><rect x="21.2116%" y="101" width="0.2115%" height="15" fill="rgb(213,116,39)"/><text x="21.4616%" y="111.50"></text></g><g><title>analysis (192,003,693 samples, 11.66%)</title><rect x="9.8602%" y="149" width="11.6614%" height="15" fill="rgb(222,207,29)"/><text x="10.1102%" y="159.50">analysis</text></g><g><title>type_check_crate (111,626,883 samples, 6.78%)</title><rect x="14.7419%" y="133" width="6.7797%" height="15" fill="rgb(206,96,30)"/><text x="14.9919%" y="143.50">type_chec..</text></g><g><title>wf_checking (13,183,249 samples, 0.80%)</title><rect x="20.7209%" y="117" width="0.8007%" height="15" fill="rgb(218,138,4)"/><text x="20.9709%" y="127.50"></text></g><g><title>layout_of (1,956,796 samples, 0.12%)</title><rect x="24.9263%" y="101" width="0.1188%" height="15" fill="rgb(250,191,14)"/><text x="25.1763%" y="111.50"></text></g><g><title>predicates_of (1,833,922 samples, 0.11%)</title><rect x="25.2288%" y="85" width="0.1114%" height="15" fill="rgb(239,60,40)"/><text x="25.4788%" y="95.50"></text></g><g><title>param_env (4,868,757 samples, 0.30%)</title><rect x="25.0451%" y="101" width="0.2957%" height="15" fill="rgb(206,27,48)"/><text x="25.2951%" y="111.50"></text></g><g><title>fn_abi_of_instance (14,448,252 samples, 0.88%)</title><rect x="24.5009%" y="117" width="0.8775%" height="15" fill="rgb(225,35,8)"/><text x="24.7509%" y="127.50"></text></g><g><title>layout_of (2,304,627 samples, 0.14%)</title><rect x="25.3945%" y="117" width="0.1400%" height="15" fill="rgb(250,213,24)"/><text x="25.6445%" y="127.50"></text></g><g><title>codegen_module (64,468,728 samples, 3.92%)</title><rect x="21.6786%" y="133" width="3.9155%" height="15" fill="rgb(247,123,22)"/><text x="21.9286%" y="143.50">code..</text></g><g><title>item_attrs (2,100,102 samples, 0.13%)</title><rect x="25.8034%" y="69" width="0.1275%" height="15" fill="rgb(231,138,38)"/><text x="26.0534%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (2,040,931 samples, 0.12%)</title><rect x="25.8070%" y="53" width="0.1240%" height="15" fill="rgb(231,145,46)"/><text x="26.0570%" y="63.50"></text></g><g><title>codegen_fn_attrs (2,872,427 samples, 0.17%)</title><rect x="25.7815%" y="85" width="0.1745%" height="15" fill="rgb(251,118,11)"/><text x="26.0315%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,525,422 samples, 0.15%)</title><rect x="26.3420%" y="69" width="0.1534%" height="15" fill="rgb(217,147,25)"/><text x="26.5920%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,188,140 samples, 0.32%)</title><rect x="26.4954%" y="69" width="0.3151%" height="15" fill="rgb(247,81,37)"/><text x="26.7454%" y="79.50"></text></g><g><title>optimized_mir (13,608,309 samples, 0.83%)</title><rect x="26.0326%" y="85" width="0.8265%" height="15" fill="rgb(209,12,38)"/><text x="26.2826%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,475,838 samples, 0.21%)</title><rect x="26.9340%" y="69" width="0.2111%" height="15" fill="rgb(227,1,9)"/><text x="27.1840%" y="79.50"></text></g><g><title>resolve_instance (7,302,994 samples, 0.44%)</title><rect x="26.8591%" y="85" width="0.4435%" height="15" fill="rgb(248,47,43)"/><text x="27.1091%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (30,046,270 samples, 1.82%)</title><rect x="25.5973%" y="101" width="1.8249%" height="15" fill="rgb(221,10,30)"/><text x="25.8473%" y="111.50">m..</text></g><g><title>monomorphization_collector (30,176,871 samples, 1.83%)</title><rect x="25.5971%" y="117" width="1.8328%" height="15" fill="rgb(210,229,1)"/><text x="25.8471%" y="127.50">m..</text></g><g><title>assert_symbols_are_distinct (3,270,748 samples, 0.20%)</title><rect x="27.4302%" y="101" width="0.1986%" height="15" fill="rgb(222,148,37)"/><text x="27.6802%" y="111.50"></text></g><g><title>symbol_name (3,063,625 samples, 0.19%)</title><rect x="27.4428%" y="85" width="0.1861%" height="15" fill="rgb(234,67,33)"/><text x="27.6928%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (34,374,289 samples, 2.09%)</title><rect x="25.5947%" y="133" width="2.0877%" height="15" fill="rgb(247,98,35)"/><text x="25.8447%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (4,158,238 samples, 0.25%)</title><rect x="27.4299%" y="117" width="0.2526%" height="15" fill="rgb(247,138,52)"/><text x="27.6799%" y="127.50"></text></g><g><title>codegen_crate (101,524,869 samples, 6.17%)</title><rect x="21.5221%" y="149" width="6.1661%" height="15" fill="rgb(213,79,30)"/><text x="21.7721%" y="159.50">codegen_..</text></g><g><title>codegen_module_optimize (506,043,928 samples, 30.73%)</title><rect x="27.6882%" y="149" width="30.7346%" height="15" fill="rgb(246,177,23)"/><text x="27.9382%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (481,694,590 samples, 29.26%)</title><rect x="29.1671%" y="133" width="29.2558%" height="15" fill="rgb(230,62,27)"/><text x="29.4171%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (180,409,764 samples, 10.96%)</title><rect x="59.2513%" y="133" width="10.9572%" height="15" fill="rgb(216,154,8)"/><text x="59.5013%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (216,282,469 samples, 13.14%)</title><rect x="70.2085%" y="133" width="13.1359%" height="15" fill="rgb(244,35,45)"/><text x="70.4585%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (213,870,312 samples, 12.99%)</title><rect x="70.3550%" y="117" width="12.9894%" height="15" fill="rgb(251,115,12)"/><text x="70.6050%" y="127.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (28,525,771 samples, 1.73%)</title><rect x="83.3444%" y="133" width="1.7325%" height="15" fill="rgb(240,54,50)"/><text x="83.5944%" y="143.50"></text></g><g><title>codegen_module_perform_lto (439,912,029 samples, 26.72%)</title><rect x="58.4228%" y="149" width="26.7181%" height="15" fill="rgb(233,84,52)"/><text x="58.6728%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (10,190,097 samples, 0.62%)</title><rect x="90.5627%" y="101" width="0.6189%" height="15" fill="rgb(207,117,47)"/><text x="90.8127%" y="111.50"></text></g><g><title>metadata_register_crate (7,818,558 samples, 0.47%)</title><rect x="90.7067%" y="85" width="0.4749%" height="15" fill="rgb(249,43,39)"/><text x="90.9567%" y="95.50"></text></g><g><title>macro_expand_crate (98,905,879 samples, 6.01%)</title><rect x="85.1959%" y="133" width="6.0071%" height="15" fill="rgb(209,38,44)"/><text x="85.4459%" y="143.50">macro_ex..</text></g><g><title>expand_crate (98,891,629 samples, 6.01%)</title><rect x="85.1968%" y="117" width="6.0062%" height="15" fill="rgb(236,212,23)"/><text x="85.4468%" y="127.50">expand_c..</text></g><g><title>late_resolve_crate (3,369,068 samples, 0.20%)</title><rect x="91.2548%" y="117" width="0.2046%" height="15" fill="rgb(242,79,21)"/><text x="91.5048%" y="127.50"></text></g><g><title>configure_and_expand (104,268,399 samples, 6.33%)</title><rect x="85.1409%" y="149" width="6.3328%" height="15" fill="rgb(211,96,35)"/><text x="85.3909%" y="159.50">configur..</text></g><g><title>resolve_crate (4,374,939 samples, 0.27%)</title><rect x="91.2080%" y="133" width="0.2657%" height="15" fill="rgb(253,215,40)"/><text x="91.4580%" y="143.50"></text></g><g><title>free_global_ctxt (10,798,122 samples, 0.66%)</title><rect x="91.5730%" y="149" width="0.6558%" height="15" fill="rgb(211,81,21)"/><text x="91.8230%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,704,538 samples, 0.29%)</title><rect x="93.0636%" y="117" width="0.2857%" height="15" fill="rgb(208,190,38)"/><text x="93.3136%" y="127.50"></text></g><g><title>optimized_mir (13,419,754 samples, 0.82%)</title><rect x="92.6410%" y="133" width="0.8151%" height="15" fill="rgb(235,213,38)"/><text x="92.8910%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,673,769 samples, 0.10%)</title><rect x="93.3544%" y="117" width="0.1017%" height="15" fill="rgb(237,122,38)"/><text x="93.6044%" y="127.50"></text></g><g><title>generate_crate_metadata (20,393,450 samples, 1.24%)</title><rect x="92.2289%" y="149" width="1.2386%" height="15" fill="rgb(244,218,35)"/><text x="92.4789%" y="159.50"></text></g><g><title>hir_lowering (8,391,945 samples, 0.51%)</title><rect x="93.4675%" y="149" width="0.5097%" height="15" fill="rgb(240,68,47)"/><text x="93.7175%" y="159.50"></text></g><g><title>finish_ongoing_codegen (90,688,867 samples, 5.51%)</title><rect x="93.9784%" y="133" width="5.5080%" height="15" fill="rgb(210,16,53)"/><text x="94.2284%" y="143.50">finish_..</text></g><g><title>link_crate (2,328,516 samples, 0.14%)</title><rect x="99.4864%" y="133" width="0.1414%" height="15" fill="rgb(235,124,12)"/><text x="99.7364%" y="143.50"></text></g><g><title>link_binary (2,305,666 samples, 0.14%)</title><rect x="99.4878%" y="117" width="0.1400%" height="15" fill="rgb(224,169,11)"/><text x="99.7378%" y="127.50"></text></g><g><title>link (93,049,313 samples, 5.65%)</title><rect x="93.9771%" y="149" width="5.6514%" height="15" fill="rgb(250,166,2)"/><text x="94.2271%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (4,868,885 samples, 0.30%)</title><rect x="99.6655%" y="149" width="0.2957%" height="15" fill="rgb(242,216,29)"/><text x="99.9155%" y="159.50"></text></g><g><title>all (1,646,494,184 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,646,494,184 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>