<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (133,967,022 samples, 6.93%)</title><rect x="0.0954%" y="181" width="6.9298%" height="15" fill="rgb(227,0,7)"/><text x="0.3454%" y="191.50">LLVM_pass..</text></g><g><title>needs_drop_raw (6,344,473 samples, 0.33%)</title><rect x="18.9515%" y="69" width="0.3282%" height="15" fill="rgb(217,0,24)"/><text x="19.2015%" y="79.50"></text></g><g><title>is_copy_raw (5,139,558 samples, 0.27%)</title><rect x="19.0139%" y="53" width="0.2659%" height="15" fill="rgb(221,193,54)"/><text x="19.2639%" y="63.50"></text></g><g><title>evaluate_obligation (4,158,517 samples, 0.22%)</title><rect x="19.0646%" y="37" width="0.2151%" height="15" fill="rgb(248,212,6)"/><text x="19.3146%" y="47.50"></text></g><g><title>resolve_instance (3,095,922 samples, 0.16%)</title><rect x="19.2797%" y="69" width="0.1601%" height="15" fill="rgb(208,68,35)"/><text x="19.5297%" y="79.50"></text></g><g><title>thir_body (15,354,433 samples, 0.79%)</title><rect x="19.4513%" y="69" width="0.7942%" height="15" fill="rgb(232,128,0)"/><text x="19.7013%" y="79.50"></text></g><g><title>mir_const (70,535,470 samples, 3.65%)</title><rect x="16.6033%" y="117" width="3.6486%" height="15" fill="rgb(207,160,47)"/><text x="16.8533%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (63,742,169 samples, 3.30%)</title><rect x="16.9547%" y="101" width="3.2972%" height="15" fill="rgb(228,23,34)"/><text x="17.2047%" y="111.50">uns..</text></g><g><title>mir_built (58,100,820 samples, 3.01%)</title><rect x="17.2465%" y="85" width="3.0054%" height="15" fill="rgb(218,30,26)"/><text x="17.4965%" y="95.50">mir..</text></g><g><title>mir_const_qualif (2,407,197 samples, 0.12%)</title><rect x="20.2519%" y="117" width="0.1245%" height="15" fill="rgb(220,122,19)"/><text x="20.5019%" y="127.50"></text></g><g><title>mir_promoted (83,515,657 samples, 4.32%)</title><rect x="16.0566%" y="133" width="4.3201%" height="15" fill="rgb(250,228,42)"/><text x="16.3066%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (6,272,771 samples, 0.32%)</title><rect x="20.3772%" y="133" width="0.3245%" height="15" fill="rgb(240,193,28)"/><text x="20.6272%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,973,586 samples, 0.10%)</title><rect x="20.7017%" y="133" width="0.1021%" height="15" fill="rgb(216,20,37)"/><text x="20.9517%" y="143.50"></text></g><g><title>type_op_prove_predicate (22,740,484 samples, 1.18%)</title><rect x="20.8734%" y="133" width="1.1763%" height="15" fill="rgb(206,188,39)"/><text x="21.1234%" y="143.50"></text></g><g><title>MIR_borrow_checking (287,318,928 samples, 14.86%)</title><rect x="7.1881%" y="165" width="14.8623%" height="15" fill="rgb(217,207,13)"/><text x="7.4381%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (286,588,745 samples, 14.82%)</title><rect x="7.2258%" y="149" width="14.8246%" height="15" fill="rgb(231,73,38)"/><text x="7.4758%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,959,903 samples, 0.15%)</title><rect x="22.1796%" y="149" width="0.1531%" height="15" fill="rgb(225,20,46)"/><text x="22.4296%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (4,131,817 samples, 0.21%)</title><rect x="22.4117%" y="149" width="0.2137%" height="15" fill="rgb(210,31,41)"/><text x="22.6617%" y="159.50"></text></g><g><title>misc_checking_1 (8,823,729 samples, 0.46%)</title><rect x="22.1766%" y="165" width="0.4564%" height="15" fill="rgb(221,200,47)"/><text x="22.4266%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,372,049 samples, 0.23%)</title><rect x="22.6332%" y="149" width="0.2262%" height="15" fill="rgb(226,26,5)"/><text x="22.8832%" y="159.50"></text></g><g><title>check_mod_liveness (3,400,468 samples, 0.18%)</title><rect x="22.6834%" y="133" width="0.1759%" height="15" fill="rgb(249,33,26)"/><text x="22.9334%" y="143.50"></text></g><g><title>misc_checking_2 (7,306,192 samples, 0.38%)</title><rect x="22.6330%" y="165" width="0.3779%" height="15" fill="rgb(235,183,28)"/><text x="22.8830%" y="175.50"></text></g><g><title>match_checking (2,931,593 samples, 0.15%)</title><rect x="22.8593%" y="149" width="0.1516%" height="15" fill="rgb(221,5,38)"/><text x="23.1093%" y="159.50"></text></g><g><title>check_match (2,755,370 samples, 0.14%)</title><rect x="22.8684%" y="133" width="0.1425%" height="15" fill="rgb(247,18,42)"/><text x="23.1184%" y="143.50"></text></g><g><title>death_checking (2,851,422 samples, 0.15%)</title><rect x="23.0917%" y="149" width="0.1475%" height="15" fill="rgb(241,131,45)"/><text x="23.3417%" y="159.50"></text></g><g><title>crate_lints (7,902,979 samples, 0.41%)</title><rect x="23.2393%" y="133" width="0.4088%" height="15" fill="rgb(249,31,29)"/><text x="23.4893%" y="143.50"></text></g><g><title>lint_checking (13,768,954 samples, 0.71%)</title><rect x="23.2392%" y="149" width="0.7122%" height="15" fill="rgb(225,111,53)"/><text x="23.4892%" y="159.50"></text></g><g><title>module_lints (5,862,585 samples, 0.30%)</title><rect x="23.6482%" y="133" width="0.3033%" height="15" fill="rgb(238,160,17)"/><text x="23.8982%" y="143.50"></text></g><g><title>lint_mod (5,845,995 samples, 0.30%)</title><rect x="23.6490%" y="117" width="0.3024%" height="15" fill="rgb(214,148,48)"/><text x="23.8990%" y="127.50"></text></g><g><title>privacy_access_levels (2,579,909 samples, 0.13%)</title><rect x="23.9514%" y="149" width="0.1335%" height="15" fill="rgb(232,36,49)"/><text x="24.2014%" y="159.50"></text></g><g><title>privacy_checking_modules (10,254,305 samples, 0.53%)</title><rect x="24.0849%" y="149" width="0.5304%" height="15" fill="rgb(209,103,24)"/><text x="24.3349%" y="159.50"></text></g><g><title>check_mod_privacy (10,240,115 samples, 0.53%)</title><rect x="24.0856%" y="133" width="0.5297%" height="15" fill="rgb(229,88,8)"/><text x="24.3356%" y="143.50"></text></g><g><title>misc_checking_3 (31,065,268 samples, 1.61%)</title><rect x="23.0110%" y="165" width="1.6069%" height="15" fill="rgb(213,181,19)"/><text x="23.2610%" y="175.50"></text></g><g><title>impl_parent (2,921,786 samples, 0.15%)</title><rect x="24.8888%" y="101" width="0.1511%" height="15" fill="rgb(254,191,54)"/><text x="25.1388%" y="111.50"></text></g><g><title>impl_trait_ref (5,882,290 samples, 0.30%)</title><rect x="25.0400%" y="101" width="0.3043%" height="15" fill="rgb(241,83,37)"/><text x="25.2900%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,770,530 samples, 0.25%)</title><rect x="25.0975%" y="85" width="0.2468%" height="15" fill="rgb(233,36,39)"/><text x="25.3475%" y="95.50"></text></g><g><title>coherent_trait (14,697,275 samples, 0.76%)</title><rect x="24.6351%" y="133" width="0.7603%" height="15" fill="rgb(226,3,54)"/><text x="24.8851%" y="143.50"></text></g><g><title>specialization_graph_of (14,146,500 samples, 0.73%)</title><rect x="24.6636%" y="117" width="0.7318%" height="15" fill="rgb(245,192,40)"/><text x="24.9136%" y="127.50"></text></g><g><title>coherence_checking (14,999,078 samples, 0.78%)</title><rect x="24.6336%" y="149" width="0.7759%" height="15" fill="rgb(238,167,29)"/><text x="24.8836%" y="159.50"></text></g><g><title>specializes (2,725,801 samples, 0.14%)</title><rect x="38.5804%" y="85" width="0.1410%" height="15" fill="rgb(232,182,51)"/><text x="38.8304%" y="95.50"></text></g><g><title>evaluate_obligation (16,188,741 samples, 0.84%)</title><rect x="37.9210%" y="101" width="0.8374%" height="15" fill="rgb(231,60,39)"/><text x="38.1710%" y="111.50"></text></g><g><title>method_autoderef_steps (2,395,159 samples, 0.12%)</title><rect x="38.8494%" y="101" width="0.1239%" height="15" fill="rgb(208,69,12)"/><text x="39.0994%" y="111.50"></text></g><g><title>evaluate_obligation (6,692,917 samples, 0.35%)</title><rect x="45.1314%" y="85" width="0.3462%" height="15" fill="rgb(235,93,37)"/><text x="45.3814%" y="95.50"></text></g><g><title>typeck (128,911,999 samples, 6.67%)</title><rect x="39.0479%" y="101" width="6.6683%" height="15" fill="rgb(213,116,39)"/><text x="39.2979%" y="111.50">typeck</text></g><g><title>item_bodies_checking (392,519,197 samples, 20.30%)</title><rect x="25.4191%" y="149" width="20.3041%" height="15" fill="rgb(222,207,29)"/><text x="25.6691%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (392,515,647 samples, 20.30%)</title><rect x="25.4192%" y="133" width="20.3039%" height="15" fill="rgb(206,96,30)"/><text x="25.6692%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (392,085,221 samples, 20.28%)</title><rect x="25.4415%" y="117" width="20.2817%" height="15" fill="rgb(218,138,4)"/><text x="25.6915%" y="127.50">typeck</text></g><g><title>item_types_checking (5,977,047 samples, 0.31%)</title><rect x="45.7232%" y="149" width="0.3092%" height="15" fill="rgb(250,191,14)"/><text x="45.9732%" y="159.50"></text></g><g><title>check_mod_item_types (5,960,517 samples, 0.31%)</title><rect x="45.7240%" y="133" width="0.3083%" height="15" fill="rgb(239,60,40)"/><text x="45.9740%" y="143.50"></text></g><g><title>late_bound_vars_map (2,192,143 samples, 0.11%)</title><rect x="46.4247%" y="69" width="0.1134%" height="15" fill="rgb(206,27,48)"/><text x="46.6747%" y="79.50"></text></g><g><title>resolve_lifetimes (2,112,392 samples, 0.11%)</title><rect x="46.4288%" y="53" width="0.1093%" height="15" fill="rgb(225,35,8)"/><text x="46.6788%" y="63.50"></text></g><g><title>explicit_predicates_of (3,311,406 samples, 0.17%)</title><rect x="46.3704%" y="85" width="0.1713%" height="15" fill="rgb(250,213,24)"/><text x="46.6204%" y="95.50"></text></g><g><title>predicates_of (4,966,974 samples, 0.26%)</title><rect x="46.3401%" y="117" width="0.2569%" height="15" fill="rgb(247,123,22)"/><text x="46.5901%" y="127.50"></text></g><g><title>predicates_defined_on (4,737,621 samples, 0.25%)</title><rect x="46.3520%" y="101" width="0.2451%" height="15" fill="rgb(231,138,38)"/><text x="46.6020%" y="111.50"></text></g><g><title>type_collecting (11,452,468 samples, 0.59%)</title><rect x="46.0328%" y="149" width="0.5924%" height="15" fill="rgb(231,145,46)"/><text x="46.2828%" y="159.50"></text></g><g><title>collect_mod_item_types (11,430,997 samples, 0.59%)</title><rect x="46.0339%" y="133" width="0.5913%" height="15" fill="rgb(251,118,11)"/><text x="46.2839%" y="143.50"></text></g><g><title>evaluate_obligation (2,133,425 samples, 0.11%)</title><rect x="47.1972%" y="117" width="0.1104%" height="15" fill="rgb(217,147,25)"/><text x="47.4472%" y="127.50"></text></g><g><title>region_scope_tree (3,598,344 samples, 0.19%)</title><rect x="47.4745%" y="117" width="0.1861%" height="15" fill="rgb(247,81,37)"/><text x="47.7245%" y="127.50"></text></g><g><title>check_impl_item_well_formed (18,836,160 samples, 0.97%)</title><rect x="46.6886%" y="133" width="0.9744%" height="15" fill="rgb(209,12,38)"/><text x="46.9386%" y="143.50"></text></g><g><title>check_item_well_formed (10,479,767 samples, 0.54%)</title><rect x="47.6630%" y="133" width="0.5421%" height="15" fill="rgb(227,1,9)"/><text x="47.9130%" y="143.50"></text></g><g><title>analysis (796,908,358 samples, 41.22%)</title><rect x="7.0252%" y="181" width="41.2222%" height="15" fill="rgb(248,47,43)"/><text x="7.2752%" y="191.50">analysis</text></g><g><title>type_check_crate (456,806,618 samples, 23.63%)</title><rect x="24.6179%" y="165" width="23.6296%" height="15" fill="rgb(221,10,30)"/><text x="24.8679%" y="175.50">type_check_crate</text></g><g><title>wf_checking (31,333,492 samples, 1.62%)</title><rect x="46.6267%" y="149" width="1.6208%" height="15" fill="rgb(210,229,1)"/><text x="46.8767%" y="159.50"></text></g><g><title>param_env (2,804,256 samples, 0.15%)</title><rect x="50.2424%" y="133" width="0.1451%" height="15" fill="rgb(222,148,37)"/><text x="50.4924%" y="143.50"></text></g><g><title>fn_abi_of_instance (9,911,570 samples, 0.51%)</title><rect x="49.8999%" y="149" width="0.5127%" height="15" fill="rgb(234,67,33)"/><text x="50.1499%" y="159.50"></text></g><g><title>codegen_module (41,110,938 samples, 2.13%)</title><rect x="48.3680%" y="165" width="2.1266%" height="15" fill="rgb(247,98,35)"/><text x="48.6180%" y="175.50">c..</text></g><g><title>metadata_decode_entry_optimized_mir (2,284,284 samples, 0.12%)</title><rect x="50.7569%" y="101" width="0.1182%" height="15" fill="rgb(247,138,52)"/><text x="51.0069%" y="111.50"></text></g><g><title>optimized_mir (3,503,216 samples, 0.18%)</title><rect x="50.7194%" y="117" width="0.1812%" height="15" fill="rgb(213,79,30)"/><text x="50.9694%" y="127.50"></text></g><g><title>resolve_instance (4,850,027 samples, 0.25%)</title><rect x="50.9006%" y="117" width="0.2509%" height="15" fill="rgb(246,177,23)"/><text x="51.1506%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (14,699,895 samples, 0.76%)</title><rect x="50.4974%" y="133" width="0.7604%" height="15" fill="rgb(230,62,27)"/><text x="50.7474%" y="143.50"></text></g><g><title>monomorphization_collector (14,818,956 samples, 0.77%)</title><rect x="50.4973%" y="149" width="0.7666%" height="15" fill="rgb(216,154,8)"/><text x="50.7473%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (17,082,931 samples, 0.88%)</title><rect x="50.4950%" y="165" width="0.8837%" height="15" fill="rgb(244,35,45)"/><text x="50.7450%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,219,475 samples, 0.11%)</title><rect x="51.2638%" y="149" width="0.1148%" height="15" fill="rgb(251,115,12)"/><text x="51.5138%" y="159.50"></text></g><g><title>codegen_crate (60,592,269 samples, 3.13%)</title><rect x="48.2480%" y="181" width="3.1343%" height="15" fill="rgb(240,54,50)"/><text x="48.4980%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (287,475,731 samples, 14.87%)</title><rect x="51.3823%" y="181" width="14.8705%" height="15" fill="rgb(233,84,52)"/><text x="51.6323%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (266,343,283 samples, 13.78%)</title><rect x="52.4754%" y="165" width="13.7773%" height="15" fill="rgb(207,117,47)"/><text x="52.7254%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (108,718,741 samples, 5.62%)</title><rect x="66.9046%" y="165" width="5.6238%" height="15" fill="rgb(249,43,39)"/><text x="67.1546%" y="175.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (162,910,873 samples, 8.43%)</title><rect x="72.5284%" y="165" width="8.4270%" height="15" fill="rgb(209,38,44)"/><text x="72.7784%" y="175.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (160,665,271 samples, 8.31%)</title><rect x="72.6445%" y="149" width="8.3108%" height="15" fill="rgb(236,212,23)"/><text x="72.8945%" y="159.50">LLVM_module_..</text></g><g><title>LLVM_thin_lto_import (13,528,892 samples, 0.70%)</title><rect x="80.9554%" y="165" width="0.6998%" height="15" fill="rgb(242,79,21)"/><text x="81.2054%" y="175.50"></text></g><g><title>codegen_module_perform_lto (298,589,852 samples, 15.45%)</title><rect x="66.2528%" y="181" width="15.4454%" height="15" fill="rgb(211,96,35)"/><text x="66.5028%" y="191.50">codegen_module_perform_l..</text></g><g><title>metadata_register_crate (2,283,955 samples, 0.12%)</title><rect x="86.0015%" y="133" width="0.1181%" height="15" fill="rgb(253,215,40)"/><text x="86.2515%" y="143.50"></text></g><g><title>macro_expand_crate (84,558,607 samples, 4.37%)</title><rect x="81.8104%" y="165" width="4.3740%" height="15" fill="rgb(211,81,21)"/><text x="82.0604%" y="175.50">macro..</text></g><g><title>expand_crate (84,533,277 samples, 4.37%)</title><rect x="81.8117%" y="149" width="4.3727%" height="15" fill="rgb(208,190,38)"/><text x="82.0617%" y="159.50">expan..</text></g><g><title>late_resolve_crate (19,024,413 samples, 0.98%)</title><rect x="86.2621%" y="149" width="0.9841%" height="15" fill="rgb(235,213,38)"/><text x="86.5121%" y="159.50"></text></g><g><title>configure_and_expand (109,128,832 samples, 5.64%)</title><rect x="81.6981%" y="181" width="5.6450%" height="15" fill="rgb(237,122,38)"/><text x="81.9481%" y="191.50">configu..</text></g><g><title>resolve_crate (22,156,049 samples, 1.15%)</title><rect x="86.1970%" y="165" width="1.1461%" height="15" fill="rgb(244,218,35)"/><text x="86.4470%" y="175.50"></text></g><g><title>drop_ast (2,127,454 samples, 0.11%)</title><rect x="87.3431%" y="181" width="0.1100%" height="15" fill="rgb(240,68,47)"/><text x="87.5931%" y="191.50"></text></g><g><title>early_lint_checks (4,725,963 samples, 0.24%)</title><rect x="87.4548%" y="181" width="0.2445%" height="15" fill="rgb(210,16,53)"/><text x="87.7048%" y="191.50"></text></g><g><title>free_global_ctxt (22,481,862 samples, 1.16%)</title><rect x="87.6993%" y="181" width="1.1629%" height="15" fill="rgb(235,124,12)"/><text x="87.9493%" y="191.50"></text></g><g><title>layout_of (4,566,463 samples, 0.24%)</title><rect x="90.9515%" y="149" width="0.2362%" height="15" fill="rgb(224,169,11)"/><text x="91.2015%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (29,574,931 samples, 1.53%)</title><rect x="91.1877%" y="149" width="1.5298%" height="15" fill="rgb(250,166,2)"/><text x="91.4377%" y="159.50"></text></g><g><title>optimized_mir (59,571,562 samples, 3.08%)</title><rect x="89.7537%" y="165" width="3.0815%" height="15" fill="rgb(242,216,29)"/><text x="90.0037%" y="175.50">opt..</text></g><g><title>promoted_mir (15,867,832 samples, 0.82%)</title><rect x="92.8352%" y="165" width="0.8208%" height="15" fill="rgb(230,116,27)"/><text x="93.0852%" y="175.50"></text></g><g><title>generate_crate_metadata (92,845,780 samples, 4.80%)</title><rect x="88.8622%" y="181" width="4.8027%" height="15" fill="rgb(228,99,48)"/><text x="89.1122%" y="191.50">genera..</text></g><g><title>hir_lowering (36,286,096 samples, 1.88%)</title><rect x="93.6649%" y="181" width="1.8770%" height="15" fill="rgb(253,11,6)"/><text x="93.9149%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (69,308,257 samples, 3.59%)</title><rect x="95.5430%" y="165" width="3.5852%" height="15" fill="rgb(247,143,39)"/><text x="95.7930%" y="175.50">fini..</text></g><g><title>link_crate (3,679,451 samples, 0.19%)</title><rect x="99.1282%" y="165" width="0.1903%" height="15" fill="rgb(236,97,10)"/><text x="99.3782%" y="175.50"></text></g><g><title>link_binary (3,640,061 samples, 0.19%)</title><rect x="99.1302%" y="149" width="0.1883%" height="15" fill="rgb(233,208,19)"/><text x="99.3802%" y="159.50"></text></g><g><title>link_rlib (2,851,402 samples, 0.15%)</title><rect x="99.1710%" y="133" width="0.1475%" height="15" fill="rgb(216,164,2)"/><text x="99.4210%" y="143.50"></text></g><g><title>link (73,020,619 samples, 3.78%)</title><rect x="95.5419%" y="181" width="3.7772%" height="15" fill="rgb(220,129,5)"/><text x="95.7919%" y="191.50">link</text></g><g><title>parse_crate (4,655,762 samples, 0.24%)</title><rect x="99.3191%" y="181" width="0.2408%" height="15" fill="rgb(242,17,10)"/><text x="99.5691%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (7,035,169 samples, 0.36%)</title><rect x="99.5742%" y="181" width="0.3639%" height="15" fill="rgb(242,107,0)"/><text x="99.8242%" y="191.50"></text></g><g><title>all (1,933,200,146 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,933,200,146 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>