<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,732,593 samples, 18.46%)</title><rect x="1.4709%" y="245" width="18.4621%" height="15" fill="rgb(227,0,7)"/><text x="1.7209%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (107,981 samples, 0.42%)</title><rect x="19.5118%" y="229" width="0.4212%" height="15" fill="rgb(217,0,24)"/><text x="19.7618%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (97,621 samples, 0.38%)</title><rect x="19.5522%" y="213" width="0.3808%" height="15" fill="rgb(221,193,54)"/><text x="19.8022%" y="223.50"></text></g><g><title>hir_module_items (70,231 samples, 0.27%)</title><rect x="20.2645%" y="229" width="0.2740%" height="15" fill="rgb(248,212,6)"/><text x="20.5145%" y="239.50"></text></g><g><title>check_mod_attrs (37,040 samples, 0.14%)</title><rect x="20.6036%" y="213" width="0.1445%" height="15" fill="rgb(208,68,35)"/><text x="20.8536%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (32,650 samples, 0.13%)</title><rect x="20.8055%" y="213" width="0.1274%" height="15" fill="rgb(232,128,0)"/><text x="21.0555%" y="223.50"></text></g><g><title>misc_checking_1 (126,842 samples, 0.49%)</title><rect x="20.5397%" y="229" width="0.4948%" height="15" fill="rgb(207,160,47)"/><text x="20.7897%" y="239.50"></text></g><g><title>codegen_fn_attrs (34,831 samples, 0.14%)</title><rect x="21.2890%" y="197" width="0.1359%" height="15" fill="rgb(228,23,34)"/><text x="21.5390%" y="207.50"></text></g><g><title>death_checking (78,031 samples, 0.30%)</title><rect x="21.1863%" y="213" width="0.3044%" height="15" fill="rgb(218,30,26)"/><text x="21.4363%" y="223.50"></text></g><g><title>crate_lints (86,301 samples, 0.34%)</title><rect x="21.4954%" y="197" width="0.3367%" height="15" fill="rgb(220,122,19)"/><text x="21.7454%" y="207.50"></text></g><g><title>param_env (39,621 samples, 0.15%)</title><rect x="21.6775%" y="181" width="0.1546%" height="15" fill="rgb(250,228,42)"/><text x="21.9275%" y="191.50"></text></g><g><title>lint_checking (108,831 samples, 0.42%)</title><rect x="21.4907%" y="213" width="0.4246%" height="15" fill="rgb(240,193,28)"/><text x="21.7407%" y="223.50"></text></g><g><title>misc_checking_3 (247,123 samples, 0.96%)</title><rect x="21.1205%" y="229" width="0.9640%" height="15" fill="rgb(216,20,37)"/><text x="21.3705%" y="239.50"></text></g><g><title>impl_trait_ref (26,941 samples, 0.11%)</title><rect x="22.3965%" y="133" width="0.1051%" height="15" fill="rgb(206,188,39)"/><text x="22.6465%" y="143.50"></text></g><g><title>item_types_checking (74,141 samples, 0.29%)</title><rect x="22.2395%" y="213" width="0.2892%" height="15" fill="rgb(217,207,13)"/><text x="22.4895%" y="223.50"></text></g><g><title>check_mod_item_types (72,991 samples, 0.28%)</title><rect x="22.2440%" y="197" width="0.2847%" height="15" fill="rgb(231,73,38)"/><text x="22.4940%" y="207.50"></text></g><g><title>adt_destructor (61,561 samples, 0.24%)</title><rect x="22.2886%" y="181" width="0.2402%" height="15" fill="rgb(225,20,46)"/><text x="22.5386%" y="191.50"></text></g><g><title>coherent_trait (58,491 samples, 0.23%)</title><rect x="22.3006%" y="165" width="0.2282%" height="15" fill="rgb(210,31,41)"/><text x="22.5506%" y="175.50"></text></g><g><title>specialization_graph_of (55,351 samples, 0.22%)</title><rect x="22.3128%" y="149" width="0.2159%" height="15" fill="rgb(221,200,47)"/><text x="22.5628%" y="159.50"></text></g><g><title>is_mir_available (43,441 samples, 0.17%)</title><rect x="23.3322%" y="133" width="0.1695%" height="15" fill="rgb(226,26,5)"/><text x="23.5822%" y="143.50"></text></g><g><title>mir_keys (36,121 samples, 0.14%)</title><rect x="23.3608%" y="117" width="0.1409%" height="15" fill="rgb(249,33,26)"/><text x="23.6108%" y="127.50"></text></g><g><title>layout_of (30,481 samples, 0.12%)</title><rect x="23.5017%" y="133" width="0.1189%" height="15" fill="rgb(235,183,28)"/><text x="23.7517%" y="143.50"></text></g><g><title>is_copy_raw (94,401 samples, 0.37%)</title><rect x="24.2486%" y="69" width="0.3683%" height="15" fill="rgb(221,5,38)"/><text x="24.4986%" y="79.50"></text></g><g><title>evaluate_obligation (88,981 samples, 0.35%)</title><rect x="24.2697%" y="53" width="0.3471%" height="15" fill="rgb(247,18,42)"/><text x="24.5197%" y="63.50"></text></g><g><title>trait_impls_of (26,930 samples, 0.11%)</title><rect x="24.5118%" y="37" width="0.1051%" height="15" fill="rgb(241,131,45)"/><text x="24.7618%" y="47.50"></text></g><g><title>thir_body (50,531 samples, 0.20%)</title><rect x="24.6212%" y="69" width="0.1971%" height="15" fill="rgb(249,31,29)"/><text x="24.8712%" y="79.50"></text></g><g><title>mir_const_qualif (312,183 samples, 1.22%)</title><rect x="23.6206%" y="133" width="1.2178%" height="15" fill="rgb(225,111,53)"/><text x="23.8706%" y="143.50"></text></g><g><title>mir_const (278,773 samples, 1.09%)</title><rect x="23.7509%" y="117" width="1.0875%" height="15" fill="rgb(238,160,17)"/><text x="24.0009%" y="127.50"></text></g><g><title>unsafety_check_result (233,592 samples, 0.91%)</title><rect x="23.9272%" y="101" width="0.9113%" height="15" fill="rgb(214,148,48)"/><text x="24.1772%" y="111.50"></text></g><g><title>mir_built (212,722 samples, 0.83%)</title><rect x="24.0086%" y="85" width="0.8298%" height="15" fill="rgb(232,36,49)"/><text x="24.2586%" y="95.50"></text></g><g><title>implied_outlives_bounds (36,681 samples, 0.14%)</title><rect x="26.7858%" y="85" width="0.1431%" height="15" fill="rgb(209,103,24)"/><text x="27.0358%" y="95.50"></text></g><g><title>mir_promoted (26,471 samples, 0.10%)</title><rect x="27.0262%" y="85" width="0.1033%" height="15" fill="rgb(229,88,8)"/><text x="27.2762%" y="95.50"></text></g><g><title>mir_borrowck (463,525 samples, 1.81%)</title><rect x="25.3819%" y="101" width="1.8082%" height="15" fill="rgb(213,181,19)"/><text x="25.6319%" y="111.50">m..</text></g><g><title>mir_for_ctfe (603,567 samples, 2.35%)</title><rect x="24.8384%" y="133" width="2.3545%" height="15" fill="rgb(254,191,54)"/><text x="25.0884%" y="143.50">m..</text></g><g><title>mir_drops_elaborated_and_const_checked (554,756 samples, 2.16%)</title><rect x="25.0288%" y="117" width="2.1641%" height="15" fill="rgb(241,83,37)"/><text x="25.2788%" y="127.50">m..</text></g><g><title>evaluate_obligation (55,480 samples, 0.22%)</title><rect x="28.3578%" y="117" width="0.2164%" height="15" fill="rgb(233,36,39)"/><text x="28.6078%" y="127.50"></text></g><g><title>impl_trait_ref (81,721 samples, 0.32%)</title><rect x="28.5743%" y="117" width="0.3188%" height="15" fill="rgb(226,3,54)"/><text x="28.8243%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (77,440 samples, 0.30%)</title><rect x="28.5910%" y="101" width="0.3021%" height="15" fill="rgb(245,192,40)"/><text x="28.8410%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,580,147 samples, 6.16%)</title><rect x="22.8825%" y="181" width="6.1642%" height="15" fill="rgb(238,167,29)"/><text x="23.1325%" y="191.50">eval_to_..</text></g><g><title>eval_to_const_value_raw (1,560,697 samples, 6.09%)</title><rect x="22.9584%" y="165" width="6.0884%" height="15" fill="rgb(232,182,51)"/><text x="23.2084%" y="175.50">eval_to_..</text></g><g><title>eval_to_allocation_raw (1,556,767 samples, 6.07%)</title><rect x="22.9737%" y="149" width="6.0730%" height="15" fill="rgb(231,60,39)"/><text x="23.2237%" y="159.50">eval_to_..</text></g><g><title>typeck (474,805 samples, 1.85%)</title><rect x="27.1945%" y="133" width="1.8522%" height="15" fill="rgb(208,69,12)"/><text x="27.4445%" y="143.50">t..</text></g><g><title>param_env (150,241 samples, 0.59%)</title><rect x="29.1482%" y="181" width="0.5861%" height="15" fill="rgb(235,93,37)"/><text x="29.3982%" y="191.50"></text></g><g><title>predicates_of (57,011 samples, 0.22%)</title><rect x="29.7343%" y="181" width="0.2224%" height="15" fill="rgb(213,116,39)"/><text x="29.9843%" y="191.50"></text></g><g><title>predicates_defined_on (53,391 samples, 0.21%)</title><rect x="29.7484%" y="165" width="0.2083%" height="15" fill="rgb(222,207,29)"/><text x="29.9984%" y="175.50"></text></g><g><title>type_collecting (1,974,021 samples, 7.70%)</title><rect x="22.5322%" y="213" width="7.7008%" height="15" fill="rgb(206,96,30)"/><text x="22.7822%" y="223.50">type_collec..</text></g><g><title>collect_mod_item_types (1,961,861 samples, 7.65%)</title><rect x="22.5796%" y="197" width="7.6533%" height="15" fill="rgb(218,138,4)"/><text x="22.8296%" y="207.50">collect_mo..</text></g><g><title>type_of (70,801 samples, 0.28%)</title><rect x="29.9567%" y="181" width="0.2762%" height="15" fill="rgb(250,191,14)"/><text x="30.2067%" y="191.50"></text></g><g><title>adt_def (57,411 samples, 0.22%)</title><rect x="30.0090%" y="165" width="0.2240%" height="15" fill="rgb(239,60,40)"/><text x="30.2590%" y="175.50"></text></g><g><title>analysis (2,699,489 samples, 10.53%)</title><rect x="19.9330%" y="245" width="10.5308%" height="15" fill="rgb(206,27,48)"/><text x="20.1830%" y="255.50">analysis</text></g><g><title>type_check_crate (2,147,963 samples, 8.38%)</title><rect x="22.0846%" y="229" width="8.3793%" height="15" fill="rgb(225,35,8)"/><text x="22.3346%" y="239.50">type_check_c..</text></g><g><title>wf_checking (58,731 samples, 0.23%)</title><rect x="30.2348%" y="213" width="0.2291%" height="15" fill="rgb(250,213,24)"/><text x="30.4848%" y="223.50"></text></g><g><title>check_item_well_formed (53,370 samples, 0.21%)</title><rect x="30.2557%" y="197" width="0.2082%" height="15" fill="rgb(247,123,22)"/><text x="30.5057%" y="207.50"></text></g><g><title>codegen_module (225,452 samples, 0.88%)</title><rect x="31.8694%" y="229" width="0.8795%" height="15" fill="rgb(231,138,38)"/><text x="32.1194%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (55,411 samples, 0.22%)</title><rect x="32.7513%" y="229" width="0.2162%" height="15" fill="rgb(231,145,46)"/><text x="33.0013%" y="239.50"></text></g><g><title>codegen_crate (652,847 samples, 2.55%)</title><rect x="30.4888%" y="245" width="2.5468%" height="15" fill="rgb(251,118,11)"/><text x="30.7388%" y="255.50">co..</text></g><g><title>codegen_module_optimize (1,111,782 samples, 4.34%)</title><rect x="33.0356%" y="245" width="4.3371%" height="15" fill="rgb(217,147,25)"/><text x="33.2856%" y="255.50">codeg..</text></g><g><title>LLVM_module_optimize (448,515 samples, 1.75%)</title><rect x="35.6231%" y="229" width="1.7497%" height="15" fill="rgb(247,81,37)"/><text x="35.8731%" y="239.50"></text></g><g><title>LLVM_lto_optimize (233,223 samples, 0.91%)</title><rect x="38.9161%" y="229" width="0.9098%" height="15" fill="rgb(209,12,38)"/><text x="39.1661%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,406,757 samples, 9.39%)</title><rect x="39.8259%" y="229" width="9.3889%" height="15" fill="rgb(227,1,9)"/><text x="40.0759%" y="239.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (2,362,317 samples, 9.22%)</title><rect x="39.9993%" y="213" width="9.2155%" height="15" fill="rgb(248,47,43)"/><text x="40.2493%" y="223.50">LLVM_module_c..</text></g><g><title>codegen_module_perform_lto (3,068,594 samples, 11.97%)</title><rect x="37.3727%" y="245" width="11.9707%" height="15" fill="rgb(221,10,30)"/><text x="37.6227%" y="255.50">codegen_module_per..</text></g><g><title>AST_validation (32,421 samples, 0.13%)</title><rect x="49.8539%" y="229" width="0.1265%" height="15" fill="rgb(210,229,1)"/><text x="50.1039%" y="239.50"></text></g><g><title>crate_injection (73,261 samples, 0.29%)</title><rect x="50.0463%" y="229" width="0.2858%" height="15" fill="rgb(222,148,37)"/><text x="50.2963%" y="239.50"></text></g><g><title>metadata_load_macro (50,892 samples, 0.20%)</title><rect x="69.7818%" y="197" width="0.1985%" height="15" fill="rgb(234,67,33)"/><text x="70.0318%" y="207.50"></text></g><g><title>macro_expand_crate (5,884,825 samples, 22.96%)</title><rect x="50.3321%" y="229" width="22.9570%" height="15" fill="rgb(247,98,35)"/><text x="50.5821%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (5,866,035 samples, 22.88%)</title><rect x="50.4054%" y="213" width="22.8837%" height="15" fill="rgb(247,138,52)"/><text x="50.6554%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (848,188 samples, 3.31%)</title><rect x="69.9803%" y="197" width="3.3088%" height="15" fill="rgb(213,79,30)"/><text x="70.2303%" y="207.50">met..</text></g><g><title>pre_AST_expansion_lint_checks (35,411 samples, 0.14%)</title><rect x="73.2998%" y="229" width="0.1381%" height="15" fill="rgb(246,177,23)"/><text x="73.5498%" y="239.50"></text></g><g><title>late_resolve_crate (128,742 samples, 0.50%)</title><rect x="73.5624%" y="213" width="0.5022%" height="15" fill="rgb(230,62,27)"/><text x="73.8124%" y="223.50"></text></g><g><title>configure_and_expand (6,357,401 samples, 24.80%)</title><rect x="49.3435%" y="245" width="24.8005%" height="15" fill="rgb(216,154,8)"/><text x="49.5935%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (181,002 samples, 0.71%)</title><rect x="73.4379%" y="229" width="0.7061%" height="15" fill="rgb(244,35,45)"/><text x="73.6879%" y="239.50"></text></g><g><title>early_lint_checks (43,931 samples, 0.17%)</title><rect x="74.2737%" y="245" width="0.1714%" height="15" fill="rgb(251,115,12)"/><text x="74.5237%" y="255.50"></text></g><g><title>free_global_ctxt (726,068 samples, 2.83%)</title><rect x="74.4451%" y="245" width="2.8324%" height="15" fill="rgb(240,54,50)"/><text x="74.6951%" y="255.50">fr..</text></g><g><title>crate_hash (60,381 samples, 0.24%)</title><rect x="78.0887%" y="229" width="0.2355%" height="15" fill="rgb(233,84,52)"/><text x="78.3387%" y="239.50"></text></g><g><title>generate_crate_metadata (323,544 samples, 1.26%)</title><rect x="77.2775%" y="245" width="1.2622%" height="15" fill="rgb(207,117,47)"/><text x="77.5275%" y="255.50"></text></g><g><title>hir_lowering (185,722 samples, 0.72%)</title><rect x="78.5397%" y="245" width="0.7245%" height="15" fill="rgb(249,43,39)"/><text x="78.7897%" y="255.50"></text></g><g><title>finish_ongoing_codegen (3,753,742 samples, 14.64%)</title><rect x="79.3265%" y="229" width="14.6435%" height="15" fill="rgb(209,38,44)"/><text x="79.5765%" y="239.50">finish_ongoing_codegen</text></g><g><title>join_worker_thread (28,530 samples, 0.11%)</title><rect x="93.8587%" y="213" width="0.1113%" height="15" fill="rgb(236,212,23)"/><text x="94.1087%" y="223.50"></text></g><g><title>link_crate (501,646 samples, 1.96%)</title><rect x="93.9700%" y="229" width="1.9569%" height="15" fill="rgb(242,79,21)"/><text x="94.2200%" y="239.50">l..</text></g><g><title>link_binary (493,446 samples, 1.92%)</title><rect x="94.0020%" y="213" width="1.9250%" height="15" fill="rgb(211,96,35)"/><text x="94.2520%" y="223.50">l..</text></g><g><title>link_rlib (311,204 samples, 1.21%)</title><rect x="94.7130%" y="197" width="1.2140%" height="15" fill="rgb(253,215,40)"/><text x="94.9630%" y="207.50"></text></g><g><title>link (4,278,028 samples, 16.69%)</title><rect x="79.2642%" y="245" width="16.6888%" height="15" fill="rgb(211,81,21)"/><text x="79.5142%" y="255.50">link</text></g><g><title>parse_crate (194,652 samples, 0.76%)</title><rect x="95.9530%" y="245" width="0.7593%" height="15" fill="rgb(208,190,38)"/><text x="96.2030%" y="255.50"></text></g><g><title>prepare_outputs (171,452 samples, 0.67%)</title><rect x="96.7328%" y="245" width="0.6688%" height="15" fill="rgb(235,213,38)"/><text x="96.9828%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (291,654 samples, 1.14%)</title><rect x="97.4016%" y="245" width="1.1378%" height="15" fill="rgb(237,122,38)"/><text x="97.6516%" y="255.50"></text></g><g><title>setup_global_ctxt (84,841 samples, 0.33%)</title><rect x="98.5633%" y="245" width="0.3310%" height="15" fill="rgb(244,218,35)"/><text x="98.8133%" y="255.50"></text></g><g><title>all (25,634,125 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (25,634,125 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (283,433 samples, 1.11%)</title><rect x="98.8943%" y="245" width="1.1057%" height="15" fill="rgb(235,124,12)"/><text x="99.1443%" y="255.50"></text></g></svg></svg>