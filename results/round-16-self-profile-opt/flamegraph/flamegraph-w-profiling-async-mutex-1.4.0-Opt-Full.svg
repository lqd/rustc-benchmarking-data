<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,239,740 samples, 11.34%)</title><rect x="0.3481%" y="261" width="11.3414%" height="15" fill="rgb(227,0,7)"/><text x="0.5981%" y="271.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (131,341 samples, 0.13%)</title><rect x="11.5570%" y="245" width="0.1325%" height="15" fill="rgb(217,0,24)"/><text x="11.8070%" y="255.50"></text></g><g><title>LLVM_thin_lto_global_analysis (119,641 samples, 0.12%)</title><rect x="11.5688%" y="229" width="0.1207%" height="15" fill="rgb(221,193,54)"/><text x="11.8188%" y="239.50"></text></g><g><title>needs_drop_raw (134,071 samples, 0.14%)</title><rect x="15.9143%" y="149" width="0.1353%" height="15" fill="rgb(248,212,6)"/><text x="16.1643%" y="159.50"></text></g><g><title>impl_parent (763,598 samples, 0.77%)</title><rect x="17.1798%" y="117" width="0.7705%" height="15" fill="rgb(208,68,35)"/><text x="17.4298%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (333,914 samples, 0.34%)</title><rect x="17.6133%" y="101" width="0.3369%" height="15" fill="rgb(232,128,0)"/><text x="17.8633%" y="111.50"></text></g><g><title>specialization_graph_of (2,771,889 samples, 2.80%)</title><rect x="16.2206%" y="133" width="2.7970%" height="15" fill="rgb(207,160,47)"/><text x="16.4706%" y="143.50">sp..</text></g><g><title>impl_trait_ref (1,057,748 samples, 1.07%)</title><rect x="17.9503%" y="117" width="1.0673%" height="15" fill="rgb(228,23,34)"/><text x="18.2003%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (854,956 samples, 0.86%)</title><rect x="18.1549%" y="101" width="0.8627%" height="15" fill="rgb(218,30,26)"/><text x="18.4049%" y="111.50"></text></g><g><title>resolve_instance (2,968,182 samples, 3.00%)</title><rect x="16.0496%" y="149" width="2.9950%" height="15" fill="rgb(220,122,19)"/><text x="16.2996%" y="159.50">res..</text></g><g><title>thir_body (202,922 samples, 0.20%)</title><rect x="19.0523%" y="149" width="0.2048%" height="15" fill="rgb(250,228,42)"/><text x="19.3023%" y="159.50"></text></g><g><title>mir_const (4,332,919 samples, 4.37%)</title><rect x="14.8897%" y="197" width="4.3721%" height="15" fill="rgb(240,193,28)"/><text x="15.1397%" y="207.50">mir_c..</text></g><g><title>unsafety_check_result (4,075,725 samples, 4.11%)</title><rect x="15.1492%" y="181" width="4.1126%" height="15" fill="rgb(216,20,37)"/><text x="15.3992%" y="191.50">unsa..</text></g><g><title>mir_built (3,855,852 samples, 3.89%)</title><rect x="15.3711%" y="165" width="3.8907%" height="15" fill="rgb(206,188,39)"/><text x="15.6211%" y="175.50">mir_..</text></g><g><title>mir_const (142,212 samples, 0.14%)</title><rect x="19.4803%" y="181" width="0.1435%" height="15" fill="rgb(217,207,13)"/><text x="19.7303%" y="191.50"></text></g><g><title>unsafety_check_result (113,581 samples, 0.11%)</title><rect x="19.5092%" y="165" width="0.1146%" height="15" fill="rgb(231,73,38)"/><text x="19.7592%" y="175.50"></text></g><g><title>mir_promoted (4,920,153 samples, 4.96%)</title><rect x="14.6798%" y="213" width="4.9647%" height="15" fill="rgb(225,20,46)"/><text x="14.9298%" y="223.50">mir_pr..</text></g><g><title>mir_const_qualif (379,244 samples, 0.38%)</title><rect x="19.2618%" y="197" width="0.3827%" height="15" fill="rgb(210,31,41)"/><text x="19.5118%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (147,641 samples, 0.15%)</title><rect x="19.7074%" y="213" width="0.1490%" height="15" fill="rgb(221,200,47)"/><text x="19.9574%" y="223.50"></text></g><g><title>type_op_prove_predicate (438,474 samples, 0.44%)</title><rect x="19.8564%" y="213" width="0.4424%" height="15" fill="rgb(226,26,5)"/><text x="20.1064%" y="223.50"></text></g><g><title>MIR_borrow_checking (8,397,179 samples, 8.47%)</title><rect x="11.8271%" y="245" width="8.4731%" height="15" fill="rgb(249,33,26)"/><text x="12.0771%" y="255.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (8,355,869 samples, 8.43%)</title><rect x="11.8688%" y="229" width="8.4315%" height="15" fill="rgb(235,183,28)"/><text x="12.1188%" y="239.50">mir_borrowck</text></g><g><title>MIR_effect_checking (172,692 samples, 0.17%)</title><rect x="20.3003%" y="245" width="0.1743%" height="15" fill="rgb(221,5,38)"/><text x="20.5503%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (146,282 samples, 0.15%)</title><rect x="20.3269%" y="229" width="0.1476%" height="15" fill="rgb(247,18,42)"/><text x="20.5769%" y="239.50"></text></g><g><title>should_inherit_track_caller (132,732 samples, 0.13%)</title><rect x="20.7740%" y="197" width="0.1339%" height="15" fill="rgb(241,131,45)"/><text x="21.0240%" y="207.50"></text></g><g><title>codegen_fn_attrs (238,943 samples, 0.24%)</title><rect x="20.6788%" y="213" width="0.2411%" height="15" fill="rgb(249,31,29)"/><text x="20.9288%" y="223.50"></text></g><g><title>check_mod_attrs (332,734 samples, 0.34%)</title><rect x="20.5843%" y="229" width="0.3357%" height="15" fill="rgb(225,111,53)"/><text x="20.8343%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (289,973 samples, 0.29%)</title><rect x="21.0063%" y="229" width="0.2926%" height="15" fill="rgb(238,160,17)"/><text x="21.2563%" y="239.50"></text></g><g><title>misc_checking_1 (749,348 samples, 0.76%)</title><rect x="20.5717%" y="245" width="0.7561%" height="15" fill="rgb(214,148,48)"/><text x="20.8217%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (194,712 samples, 0.20%)</title><rect x="21.3290%" y="229" width="0.1965%" height="15" fill="rgb(232,36,49)"/><text x="21.5790%" y="239.50"></text></g><g><title>check_mod_liveness (156,332 samples, 0.16%)</title><rect x="21.3677%" y="213" width="0.1577%" height="15" fill="rgb(209,103,24)"/><text x="21.6177%" y="223.50"></text></g><g><title>misc_checking_2 (352,894 samples, 0.36%)</title><rect x="21.3279%" y="245" width="0.3561%" height="15" fill="rgb(229,88,8)"/><text x="21.5779%" y="255.50"></text></g><g><title>match_checking (157,032 samples, 0.16%)</title><rect x="21.5255%" y="229" width="0.1585%" height="15" fill="rgb(213,181,19)"/><text x="21.7755%" y="239.50"></text></g><g><title>check_match (143,822 samples, 0.15%)</title><rect x="21.5388%" y="213" width="0.1451%" height="15" fill="rgb(254,191,54)"/><text x="21.7888%" y="223.50"></text></g><g><title>check_private_in_public (112,061 samples, 0.11%)</title><rect x="21.6909%" y="229" width="0.1131%" height="15" fill="rgb(241,83,37)"/><text x="21.9409%" y="239.50"></text></g><g><title>death_checking (170,792 samples, 0.17%)</title><rect x="21.8040%" y="229" width="0.1723%" height="15" fill="rgb(233,36,39)"/><text x="22.0540%" y="239.50"></text></g><g><title>crate_lints (1,654,818 samples, 1.67%)</title><rect x="21.9777%" y="213" width="1.6698%" height="15" fill="rgb(226,3,54)"/><text x="22.2277%" y="223.50"></text></g><g><title>type_of (1,030,641 samples, 1.04%)</title><rect x="22.6075%" y="197" width="1.0400%" height="15" fill="rgb(245,192,40)"/><text x="22.8575%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (791,467 samples, 0.80%)</title><rect x="22.8488%" y="181" width="0.7986%" height="15" fill="rgb(238,167,29)"/><text x="23.0988%" y="191.50"></text></g><g><title>lint_checking (1,821,659 samples, 1.84%)</title><rect x="21.9763%" y="229" width="1.8381%" height="15" fill="rgb(232,182,51)"/><text x="22.2263%" y="239.50">l..</text></g><g><title>module_lints (165,521 samples, 0.17%)</title><rect x="23.6474%" y="213" width="0.1670%" height="15" fill="rgb(231,60,39)"/><text x="23.8974%" y="223.50"></text></g><g><title>lint_mod (163,641 samples, 0.17%)</title><rect x="23.6493%" y="197" width="0.1651%" height="15" fill="rgb(208,69,12)"/><text x="23.8993%" y="207.50"></text></g><g><title>privacy_access_levels (158,052 samples, 0.16%)</title><rect x="23.8145%" y="229" width="0.1595%" height="15" fill="rgb(235,93,37)"/><text x="24.0645%" y="239.50"></text></g><g><title>privacy_checking_modules (407,295 samples, 0.41%)</title><rect x="23.9739%" y="229" width="0.4110%" height="15" fill="rgb(213,116,39)"/><text x="24.2239%" y="239.50"></text></g><g><title>check_mod_privacy (405,905 samples, 0.41%)</title><rect x="23.9753%" y="213" width="0.4096%" height="15" fill="rgb(222,207,29)"/><text x="24.2253%" y="223.50"></text></g><g><title>misc_checking_3 (2,691,769 samples, 2.72%)</title><rect x="21.6839%" y="245" width="2.7161%" height="15" fill="rgb(206,96,30)"/><text x="21.9339%" y="255.50">mi..</text></g><g><title>impl_parent (1,265,480 samples, 1.28%)</title><rect x="26.6519%" y="181" width="1.2769%" height="15" fill="rgb(218,138,4)"/><text x="26.9019%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (791,587 samples, 0.80%)</title><rect x="27.1301%" y="165" width="0.7987%" height="15" fill="rgb(250,191,14)"/><text x="27.3801%" y="175.50"></text></g><g><title>impl_trait_ref (3,810,600 samples, 3.85%)</title><rect x="27.9303%" y="181" width="3.8451%" height="15" fill="rgb(239,60,40)"/><text x="28.1803%" y="191.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,335,035 samples, 3.37%)</title><rect x="28.4102%" y="165" width="3.3652%" height="15" fill="rgb(206,27,48)"/><text x="28.6602%" y="175.50">met..</text></g><g><title>trait_impls_of (459,505 samples, 0.46%)</title><rect x="31.8117%" y="181" width="0.4637%" height="15" fill="rgb(225,35,8)"/><text x="32.0617%" y="191.50"></text></g><g><title>implementations_of_trait (136,721 samples, 0.14%)</title><rect x="32.1374%" y="165" width="0.1380%" height="15" fill="rgb(250,213,24)"/><text x="32.3874%" y="175.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (99,331 samples, 0.10%)</title><rect x="32.1751%" y="149" width="0.1002%" height="15" fill="rgb(247,123,22)"/><text x="32.4251%" y="159.50"></text></g><g><title>coherent_trait (7,752,123 samples, 7.82%)</title><rect x="24.4541%" y="213" width="7.8223%" height="15" fill="rgb(231,138,38)"/><text x="24.7041%" y="223.50">coherent_tr..</text></g><g><title>specialization_graph_of (7,734,592 samples, 7.80%)</title><rect x="24.4718%" y="197" width="7.8046%" height="15" fill="rgb(231,145,46)"/><text x="24.7218%" y="207.50">specializat..</text></g><g><title>coherence_checking (7,810,243 samples, 7.88%)</title><rect x="24.4402%" y="229" width="7.8809%" height="15" fill="rgb(251,118,11)"/><text x="24.6902%" y="239.50">coherence_c..</text></g><g><title>evaluate_obligation (200,192 samples, 0.20%)</title><rect x="36.5622%" y="181" width="0.2020%" height="15" fill="rgb(217,147,25)"/><text x="36.8122%" y="191.50"></text></g><g><title>method_autoderef_steps (103,331 samples, 0.10%)</title><rect x="36.8856%" y="181" width="0.1043%" height="15" fill="rgb(247,81,37)"/><text x="37.1356%" y="191.50"></text></g><g><title>object_safety_violations (119,891 samples, 0.12%)</title><rect x="36.9898%" y="181" width="0.1210%" height="15" fill="rgb(209,12,38)"/><text x="37.2398%" y="191.50"></text></g><g><title>item_bodies_checking (4,839,662 samples, 4.88%)</title><rect x="32.3475%" y="229" width="4.8834%" height="15" fill="rgb(227,1,9)"/><text x="32.5975%" y="239.50">item_b..</text></g><g><title>typeck_item_bodies (4,837,392 samples, 4.88%)</title><rect x="32.3498%" y="213" width="4.8812%" height="15" fill="rgb(248,47,43)"/><text x="32.5998%" y="223.50">typeck..</text></g><g><title>typeck (4,805,882 samples, 4.85%)</title><rect x="32.3816%" y="197" width="4.8494%" height="15" fill="rgb(221,10,30)"/><text x="32.6316%" y="207.50">typeck</text></g><g><title>mir_borrowck (173,262 samples, 0.17%)</title><rect x="41.2798%" y="149" width="0.1748%" height="15" fill="rgb(210,229,1)"/><text x="41.5298%" y="159.50"></text></g><g><title>mir_const (222,982 samples, 0.22%)</title><rect x="41.6037%" y="133" width="0.2250%" height="15" fill="rgb(222,148,37)"/><text x="41.8537%" y="143.50"></text></g><g><title>mir_promoted (373,484 samples, 0.38%)</title><rect x="41.4547%" y="149" width="0.3769%" height="15" fill="rgb(234,67,33)"/><text x="41.7047%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (130,712 samples, 0.13%)</title><rect x="41.8390%" y="149" width="0.1319%" height="15" fill="rgb(247,98,35)"/><text x="42.0890%" y="159.50"></text></g><g><title>type_op_prove_predicate (286,274 samples, 0.29%)</title><rect x="41.9900%" y="149" width="0.2889%" height="15" fill="rgb(247,138,52)"/><text x="42.2400%" y="159.50"></text></g><g><title>mir_borrowck (3,118,813 samples, 3.15%)</title><rect x="39.1332%" y="165" width="3.1470%" height="15" fill="rgb(213,79,30)"/><text x="39.3832%" y="175.50">mir..</text></g><g><title>associated_item (125,111 samples, 0.13%)</title><rect x="47.6248%" y="69" width="0.1262%" height="15" fill="rgb(246,177,23)"/><text x="47.8748%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (100,291 samples, 0.10%)</title><rect x="47.6499%" y="53" width="0.1012%" height="15" fill="rgb(230,62,27)"/><text x="47.8999%" y="63.50"></text></g><g><title>associated_items (192,541 samples, 0.19%)</title><rect x="47.5729%" y="85" width="0.1943%" height="15" fill="rgb(216,154,8)"/><text x="47.8229%" y="95.50"></text></g><g><title>adt_def (134,071 samples, 0.14%)</title><rect x="47.9336%" y="53" width="0.1353%" height="15" fill="rgb(244,35,45)"/><text x="48.1836%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (131,171 samples, 0.13%)</title><rect x="47.9365%" y="37" width="0.1324%" height="15" fill="rgb(251,115,12)"/><text x="48.1865%" y="47.50"></text></g><g><title>adt_dtorck_constraint (143,963 samples, 0.15%)</title><rect x="48.2770%" y="37" width="0.1453%" height="15" fill="rgb(240,54,50)"/><text x="48.5270%" y="47.50"></text></g><g><title>adt_dtorck_constraint (302,104 samples, 0.30%)</title><rect x="48.1445%" y="53" width="0.3048%" height="15" fill="rgb(233,84,52)"/><text x="48.3945%" y="63.50"></text></g><g><title>dropck_outlives (697,257 samples, 0.70%)</title><rect x="47.7880%" y="85" width="0.7036%" height="15" fill="rgb(207,117,47)"/><text x="48.0380%" y="95.50"></text></g><g><title>adt_dtorck_constraint (605,606 samples, 0.61%)</title><rect x="47.8805%" y="69" width="0.6111%" height="15" fill="rgb(249,43,39)"/><text x="48.1305%" y="79.50"></text></g><g><title>adt_sized_constraint (160,541 samples, 0.16%)</title><rect x="49.5070%" y="69" width="0.1620%" height="15" fill="rgb(209,38,44)"/><text x="49.7570%" y="79.50"></text></g><g><title>generics_of (242,943 samples, 0.25%)</title><rect x="49.6690%" y="69" width="0.2451%" height="15" fill="rgb(236,212,23)"/><text x="49.9190%" y="79.50"></text></g><g><title>metadata_decode_entry_generics_of (190,492 samples, 0.19%)</title><rect x="49.7219%" y="53" width="0.1922%" height="15" fill="rgb(242,79,21)"/><text x="49.9719%" y="63.50"></text></g><g><title>impl_trait_ref (325,594 samples, 0.33%)</title><rect x="49.9520%" y="69" width="0.3285%" height="15" fill="rgb(211,96,35)"/><text x="50.2020%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (271,083 samples, 0.27%)</title><rect x="50.0070%" y="53" width="0.2735%" height="15" fill="rgb(253,215,40)"/><text x="50.2570%" y="63.50"></text></g><g><title>predicates_of (116,841 samples, 0.12%)</title><rect x="50.2927%" y="69" width="0.1179%" height="15" fill="rgb(211,81,21)"/><text x="50.5427%" y="79.50"></text></g><g><title>specializes (266,822 samples, 0.27%)</title><rect x="50.4106%" y="69" width="0.2692%" height="15" fill="rgb(208,190,38)"/><text x="50.6606%" y="79.50"></text></g><g><title>param_env (156,271 samples, 0.16%)</title><rect x="50.5222%" y="53" width="0.1577%" height="15" fill="rgb(235,213,38)"/><text x="50.7722%" y="63.50"></text></g><g><title>trait_impls_of (382,923 samples, 0.39%)</title><rect x="50.6864%" y="69" width="0.3864%" height="15" fill="rgb(237,122,38)"/><text x="50.9364%" y="79.50"></text></g><g><title>implementations_of_trait (123,401 samples, 0.12%)</title><rect x="50.9482%" y="53" width="0.1245%" height="15" fill="rgb(244,218,35)"/><text x="51.1982%" y="63.50"></text></g><g><title>evaluate_obligation (2,565,096 samples, 2.59%)</title><rect x="48.4930%" y="85" width="2.5883%" height="15" fill="rgb(240,68,47)"/><text x="48.7430%" y="95.50">ev..</text></g><g><title>is_copy_raw (372,335 samples, 0.38%)</title><rect x="51.3604%" y="85" width="0.3757%" height="15" fill="rgb(210,16,53)"/><text x="51.6104%" y="95.50"></text></g><g><title>evaluate_obligation (333,175 samples, 0.34%)</title><rect x="51.3999%" y="69" width="0.3362%" height="15" fill="rgb(235,124,12)"/><text x="51.6499%" y="79.50"></text></g><g><title>trait_impls_of (128,561 samples, 0.13%)</title><rect x="51.6064%" y="53" width="0.1297%" height="15" fill="rgb(224,169,11)"/><text x="51.8564%" y="63.50"></text></g><g><title>item_attrs (124,720 samples, 0.13%)</title><rect x="51.7361%" y="85" width="0.1258%" height="15" fill="rgb(250,166,2)"/><text x="51.9861%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,120 samples, 0.12%)</title><rect x="51.7397%" y="69" width="0.1222%" height="15" fill="rgb(242,216,29)"/><text x="51.9897%" y="79.50"></text></g><g><title>predicates_of (218,555 samples, 0.22%)</title><rect x="52.0329%" y="85" width="0.2205%" height="15" fill="rgb(230,116,27)"/><text x="52.2829%" y="95.50"></text></g><g><title>predicates_defined_on (153,963 samples, 0.16%)</title><rect x="52.0981%" y="69" width="0.1554%" height="15" fill="rgb(228,99,48)"/><text x="52.3481%" y="79.50"></text></g><g><title>trait_impls_of (112,261 samples, 0.11%)</title><rect x="52.2719%" y="85" width="0.1133%" height="15" fill="rgb(253,11,6)"/><text x="52.5219%" y="95.50"></text></g><g><title>mir_built (9,983,816 samples, 10.07%)</title><rect x="42.4517%" y="117" width="10.0741%" height="15" fill="rgb(247,143,39)"/><text x="42.7017%" y="127.50">mir_built</text></g><g><title>typeck (9,706,503 samples, 9.79%)</title><rect x="42.7315%" y="101" width="9.7943%" height="15" fill="rgb(236,97,10)"/><text x="42.9815%" y="111.50">typeck</text></g><g><title>codegen_fn_attrs (109,342 samples, 0.11%)</title><rect x="52.6194%" y="101" width="0.1103%" height="15" fill="rgb(233,208,19)"/><text x="52.8694%" y="111.50"></text></g><g><title>is_copy_raw (101,681 samples, 0.10%)</title><rect x="53.3140%" y="69" width="0.1026%" height="15" fill="rgb(216,164,2)"/><text x="53.5640%" y="79.50"></text></g><g><title>needs_drop_raw (134,053 samples, 0.14%)</title><rect x="53.2817%" y="85" width="0.1353%" height="15" fill="rgb(220,129,5)"/><text x="53.5317%" y="95.50"></text></g><g><title>thir_body (197,403 samples, 0.20%)</title><rect x="53.4244%" y="85" width="0.1992%" height="15" fill="rgb(242,17,10)"/><text x="53.6744%" y="95.50"></text></g><g><title>mir_built (890,269 samples, 0.90%)</title><rect x="52.7298%" y="101" width="0.8983%" height="15" fill="rgb(242,107,0)"/><text x="52.9798%" y="111.50"></text></g><g><title>mir_const (11,252,799 samples, 11.35%)</title><rect x="42.3408%" y="149" width="11.3546%" height="15" fill="rgb(251,28,31)"/><text x="42.5908%" y="159.50">mir_const</text></g><g><title>unsafety_check_result (11,165,218 samples, 11.27%)</title><rect x="42.4292%" y="133" width="11.2662%" height="15" fill="rgb(233,223,10)"/><text x="42.6792%" y="143.50">unsafety_check_re..</text></g><g><title>unsafety_check_result (1,159,102 samples, 1.17%)</title><rect x="52.5258%" y="117" width="1.1696%" height="15" fill="rgb(215,21,27)"/><text x="52.7758%" y="127.50"></text></g><g><title>mir_promoted (11,318,400 samples, 11.42%)</title><rect x="42.2802%" y="165" width="11.4208%" height="15" fill="rgb(232,23,21)"/><text x="42.5302%" y="175.50">mir_promoted</text></g><g><title>item_types_checking (16,592,676 samples, 16.74%)</title><rect x="37.2309%" y="229" width="16.7428%" height="15" fill="rgb(244,5,23)"/><text x="37.4809%" y="239.50">item_types_checking</text></g><g><title>check_mod_item_types (16,590,006 samples, 16.74%)</title><rect x="37.2336%" y="213" width="16.7401%" height="15" fill="rgb(226,81,46)"/><text x="37.4836%" y="223.50">check_mod_item_types</text></g><g><title>type_of (15,812,948 samples, 15.96%)</title><rect x="38.0177%" y="197" width="15.9560%" height="15" fill="rgb(247,70,30)"/><text x="38.2677%" y="207.50">type_of</text></g><g><title>mir_borrowck (15,801,628 samples, 15.94%)</title><rect x="38.0291%" y="181" width="15.9446%" height="15" fill="rgb(212,68,19)"/><text x="38.2791%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (174,474 samples, 0.18%)</title><rect x="53.7977%" y="165" width="0.1761%" height="15" fill="rgb(240,187,13)"/><text x="54.0477%" y="175.50"></text></g><g><title>fn_sig (151,061 samples, 0.15%)</title><rect x="54.1225%" y="197" width="0.1524%" height="15" fill="rgb(223,113,26)"/><text x="54.3725%" y="207.50"></text></g><g><title>is_late_bound_map (130,080 samples, 0.13%)</title><rect x="54.3521%" y="181" width="0.1313%" height="15" fill="rgb(206,192,2)"/><text x="54.6021%" y="191.50"></text></g><g><title>resolve_lifetimes (120,990 samples, 0.12%)</title><rect x="54.3613%" y="165" width="0.1221%" height="15" fill="rgb(241,108,4)"/><text x="54.6113%" y="175.50"></text></g><g><title>generics_of (258,731 samples, 0.26%)</title><rect x="54.2749%" y="197" width="0.2611%" height="15" fill="rgb(247,173,49)"/><text x="54.5249%" y="207.50"></text></g><g><title>explicit_predicates_of (286,763 samples, 0.29%)</title><rect x="54.6519%" y="165" width="0.2894%" height="15" fill="rgb(224,114,35)"/><text x="54.9019%" y="175.50"></text></g><g><title>predicates_of (555,206 samples, 0.56%)</title><rect x="54.5800%" y="197" width="0.5602%" height="15" fill="rgb(245,159,27)"/><text x="54.8300%" y="207.50"></text></g><g><title>predicates_defined_on (528,156 samples, 0.53%)</title><rect x="54.6073%" y="181" width="0.5329%" height="15" fill="rgb(245,172,44)"/><text x="54.8573%" y="191.50"></text></g><g><title>inferred_outlives_of (197,112 samples, 0.20%)</title><rect x="54.9413%" y="165" width="0.1989%" height="15" fill="rgb(236,23,11)"/><text x="55.1913%" y="175.50"></text></g><g><title>inferred_outlives_crate (183,122 samples, 0.18%)</title><rect x="54.9554%" y="149" width="0.1848%" height="15" fill="rgb(205,117,38)"/><text x="55.2054%" y="159.50"></text></g><g><title>type_collecting (1,238,243 samples, 1.25%)</title><rect x="53.9753%" y="229" width="1.2494%" height="15" fill="rgb(237,72,25)"/><text x="54.2253%" y="239.50"></text></g><g><title>collect_mod_item_types (1,233,143 samples, 1.24%)</title><rect x="53.9804%" y="213" width="1.2443%" height="15" fill="rgb(244,70,9)"/><text x="54.2304%" y="223.50"></text></g><g><title>evaluate_obligation (362,464 samples, 0.37%)</title><rect x="56.3589%" y="197" width="0.3657%" height="15" fill="rgb(217,125,39)"/><text x="56.6089%" y="207.50"></text></g><g><title>implied_outlives_bounds (187,260 samples, 0.19%)</title><rect x="56.7387%" y="197" width="0.1890%" height="15" fill="rgb(235,36,10)"/><text x="56.9887%" y="207.50"></text></g><g><title>param_env (121,472 samples, 0.12%)</title><rect x="56.9276%" y="197" width="0.1226%" height="15" fill="rgb(251,123,47)"/><text x="57.1776%" y="207.50"></text></g><g><title>region_scope_tree (181,492 samples, 0.18%)</title><rect x="57.0695%" y="197" width="0.1831%" height="15" fill="rgb(221,13,13)"/><text x="57.3195%" y="207.50"></text></g><g><title>check_impl_item_well_formed (1,904,722 samples, 1.92%)</title><rect x="55.3314%" y="213" width="1.9220%" height="15" fill="rgb(238,131,9)"/><text x="55.5814%" y="223.50">c..</text></g><g><title>param_env (191,382 samples, 0.19%)</title><rect x="58.3926%" y="197" width="0.1931%" height="15" fill="rgb(211,50,8)"/><text x="58.6426%" y="207.50"></text></g><g><title>analysis (46,671,127 samples, 47.09%)</title><rect x="11.6895%" y="261" width="47.0933%" height="15" fill="rgb(245,182,24)"/><text x="11.9395%" y="271.50">analysis</text></g><g><title>type_check_crate (34,074,542 samples, 34.38%)</title><rect x="24.4001%" y="245" width="34.3828%" height="15" fill="rgb(242,14,37)"/><text x="24.6501%" y="255.50">type_check_crate</text></g><g><title>wf_checking (3,523,968 samples, 3.56%)</title><rect x="55.2270%" y="229" width="3.5558%" height="15" fill="rgb(246,228,12)"/><text x="55.4770%" y="239.50">wf_c..</text></g><g><title>check_item_well_formed (1,515,786 samples, 1.53%)</title><rect x="57.2534%" y="213" width="1.5295%" height="15" fill="rgb(213,55,15)"/><text x="57.5034%" y="223.50"></text></g><g><title>is_unpin_raw (102,831 samples, 0.10%)</title><rect x="59.7009%" y="213" width="0.1038%" height="15" fill="rgb(209,9,3)"/><text x="59.9509%" y="223.50"></text></g><g><title>evaluate_obligation (100,461 samples, 0.10%)</title><rect x="59.7033%" y="197" width="0.1014%" height="15" fill="rgb(230,59,30)"/><text x="59.9533%" y="207.50"></text></g><g><title>fn_abi_of_instance (216,422 samples, 0.22%)</title><rect x="59.6478%" y="229" width="0.2184%" height="15" fill="rgb(209,121,21)"/><text x="59.8978%" y="239.50"></text></g><g><title>codegen_module (679,897 samples, 0.69%)</title><rect x="59.2048%" y="245" width="0.6860%" height="15" fill="rgb(220,109,13)"/><text x="59.4548%" y="255.50"></text></g><g><title>monomorphization_collector_graph_walk (160,752 samples, 0.16%)</title><rect x="59.9121%" y="213" width="0.1622%" height="15" fill="rgb(232,18,1)"/><text x="60.1621%" y="223.50"></text></g><g><title>monomorphization_collector (181,752 samples, 0.18%)</title><rect x="59.9101%" y="229" width="0.1834%" height="15" fill="rgb(215,41,42)"/><text x="60.1601%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (267,933 samples, 0.27%)</title><rect x="59.8911%" y="245" width="0.2704%" height="15" fill="rgb(224,123,36)"/><text x="60.1411%" y="255.50"></text></g><g><title>codegen_crate (1,438,465 samples, 1.45%)</title><rect x="58.7883%" y="261" width="1.4515%" height="15" fill="rgb(240,125,3)"/><text x="59.0383%" y="271.50"></text></g><g><title>codegen_module_optimize (4,807,920 samples, 4.85%)</title><rect x="60.2398%" y="261" width="4.8514%" height="15" fill="rgb(205,98,50)"/><text x="60.4898%" y="271.50">codege..</text></g><g><title>LLVM_module_optimize (4,208,074 samples, 4.25%)</title><rect x="60.8451%" y="245" width="4.2461%" height="15" fill="rgb(205,185,37)"/><text x="61.0951%" y="255.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (1,276,583 samples, 1.29%)</title><rect x="65.4787%" y="245" width="1.2881%" height="15" fill="rgb(238,207,15)"/><text x="65.7287%" y="255.50"></text></g><g><title>LLVM_module_codegen (4,119,884 samples, 4.16%)</title><rect x="66.7668%" y="245" width="4.1572%" height="15" fill="rgb(213,199,42)"/><text x="67.0168%" y="255.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (4,035,383 samples, 4.07%)</title><rect x="66.8521%" y="229" width="4.0719%" height="15" fill="rgb(235,201,11)"/><text x="67.1021%" y="239.50">LLVM..</text></g><g><title>codegen_module_perform_lto (5,819,312 samples, 5.87%)</title><rect x="65.0912%" y="261" width="5.8720%" height="15" fill="rgb(207,46,11)"/><text x="65.3412%" y="271.50">codegen..</text></g><g><title>macro_expand_crate (6,109,135 samples, 6.16%)</title><rect x="71.1994%" y="245" width="6.1644%" height="15" fill="rgb(241,35,35)"/><text x="71.4494%" y="255.50">macro_ex..</text></g><g><title>expand_crate (6,098,965 samples, 6.15%)</title><rect x="71.2096%" y="229" width="6.1541%" height="15" fill="rgb(243,32,47)"/><text x="71.4596%" y="239.50">expand_c..</text></g><g><title>metadata_register_crate (1,310,444 samples, 1.32%)</title><rect x="76.0415%" y="213" width="1.3223%" height="15" fill="rgb(247,202,23)"/><text x="76.2915%" y="223.50"></text></g><g><title>metadata_register_crate (473,945 samples, 0.48%)</title><rect x="76.8855%" y="197" width="0.4782%" height="15" fill="rgb(219,102,11)"/><text x="77.1355%" y="207.50"></text></g><g><title>finalize_imports (118,191 samples, 0.12%)</title><rect x="77.4698%" y="229" width="0.1193%" height="15" fill="rgb(243,110,44)"/><text x="77.7198%" y="239.50"></text></g><g><title>late_resolve_crate (738,778 samples, 0.75%)</title><rect x="77.5933%" y="229" width="0.7455%" height="15" fill="rgb(222,74,54)"/><text x="77.8433%" y="239.50"></text></g><g><title>configure_and_expand (7,355,138 samples, 7.42%)</title><rect x="70.9632%" y="261" width="7.4217%" height="15" fill="rgb(216,99,12)"/><text x="71.2132%" y="271.50">configure_..</text></g><g><title>resolve_crate (911,020 samples, 0.92%)</title><rect x="77.4656%" y="245" width="0.9193%" height="15" fill="rgb(226,22,26)"/><text x="77.7156%" y="255.50"></text></g><g><title>early_lint_checks (148,851 samples, 0.15%)</title><rect x="78.4706%" y="261" width="0.1502%" height="15" fill="rgb(217,163,10)"/><text x="78.7206%" y="271.50"></text></g><g><title>free_global_ctxt (3,193,603 samples, 3.22%)</title><rect x="78.6208%" y="261" width="3.2225%" height="15" fill="rgb(213,25,53)"/><text x="78.8708%" y="271.50">fre..</text></g><g><title>layout_of (218,782 samples, 0.22%)</title><rect x="85.5059%" y="197" width="0.2208%" height="15" fill="rgb(252,105,26)"/><text x="85.7559%" y="207.50"></text></g><g><title>layout_of (288,633 samples, 0.29%)</title><rect x="85.4510%" y="213" width="0.2912%" height="15" fill="rgb(220,39,43)"/><text x="85.7010%" y="223.50"></text></g><g><title>layout_of (528,876 samples, 0.53%)</title><rect x="85.2350%" y="229" width="0.5337%" height="15" fill="rgb(229,68,48)"/><text x="85.4850%" y="239.50"></text></g><g><title>is_copy_raw (138,161 samples, 0.14%)</title><rect x="87.6170%" y="197" width="0.1394%" height="15" fill="rgb(252,8,32)"/><text x="87.8670%" y="207.50"></text></g><g><title>evaluate_obligation (106,931 samples, 0.11%)</title><rect x="87.6486%" y="181" width="0.1079%" height="15" fill="rgb(223,20,43)"/><text x="87.8986%" y="191.50"></text></g><g><title>needs_drop_raw (179,272 samples, 0.18%)</title><rect x="87.5758%" y="213" width="0.1809%" height="15" fill="rgb(229,81,49)"/><text x="87.8258%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,993,202 samples, 2.01%)</title><rect x="85.7686%" y="229" width="2.0112%" height="15" fill="rgb(236,28,36)"/><text x="86.0186%" y="239.50">m..</text></g><g><title>optimized_mir (4,776,803 samples, 4.82%)</title><rect x="82.9967%" y="245" width="4.8200%" height="15" fill="rgb(249,185,26)"/><text x="83.2467%" y="255.50">optimi..</text></g><g><title>generate_crate_metadata (5,972,033 samples, 6.03%)</title><rect x="81.8433%" y="261" width="6.0261%" height="15" fill="rgb(249,174,33)"/><text x="82.0933%" y="271.50">generate..</text></g><g><title>hir_lowering (1,213,543 samples, 1.22%)</title><rect x="87.8694%" y="261" width="1.2245%" height="15" fill="rgb(233,201,37)"/><text x="88.1194%" y="271.50"></text></g><g><title>finish_ongoing_codegen (7,378,390 samples, 7.45%)</title><rect x="89.1056%" y="245" width="7.4451%" height="15" fill="rgb(221,78,26)"/><text x="89.3556%" y="255.50">finish_ong..</text></g><g><title>link_crate (667,927 samples, 0.67%)</title><rect x="96.5508%" y="245" width="0.6740%" height="15" fill="rgb(250,127,30)"/><text x="96.8008%" y="255.50"></text></g><g><title>link_binary (654,077 samples, 0.66%)</title><rect x="96.5647%" y="229" width="0.6600%" height="15" fill="rgb(230,49,44)"/><text x="96.8147%" y="239.50"></text></g><g><title>link_rlib (420,484 samples, 0.42%)</title><rect x="96.8005%" y="213" width="0.4243%" height="15" fill="rgb(229,67,23)"/><text x="97.0505%" y="223.50"></text></g><g><title>link (8,064,567 samples, 8.14%)</title><rect x="89.0939%" y="261" width="8.1375%" height="15" fill="rgb(249,83,47)"/><text x="89.3439%" y="271.50">link</text></g><g><title>parse_crate (1,430,715 samples, 1.44%)</title><rect x="97.2314%" y="261" width="1.4437%" height="15" fill="rgb(215,43,3)"/><text x="97.4814%" y="271.50"></text></g><g><title>prepare_outputs (190,042 samples, 0.19%)</title><rect x="98.6863%" y="261" width="0.1918%" height="15" fill="rgb(238,154,13)"/><text x="98.9363%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (699,728 samples, 0.71%)</title><rect x="98.8780%" y="261" width="0.7061%" height="15" fill="rgb(219,56,2)"/><text x="99.1280%" y="271.50"></text></g><g><title>all (99,103,453 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (99,103,453 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (351,074 samples, 0.35%)</title><rect x="99.6457%" y="261" width="0.3543%" height="15" fill="rgb(250,79,13)"/><text x="99.8957%" y="271.50"></text></g></svg></svg>