<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,182,320,443 samples, 7.99%)</title><rect x="0.1132%" y="181" width="7.9904%" height="15" fill="rgb(227,0,7)"/><text x="0.3632%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (36,598,939 samples, 0.25%)</title><rect x="14.8353%" y="53" width="0.2473%" height="15" fill="rgb(217,0,24)"/><text x="15.0853%" y="63.50"></text></g><g><title>evaluate_obligation (27,515,811 samples, 0.19%)</title><rect x="14.8967%" y="37" width="0.1860%" height="15" fill="rgb(221,193,54)"/><text x="15.1467%" y="47.50"></text></g><g><title>needs_drop_raw (44,510,345 samples, 0.30%)</title><rect x="14.7822%" y="69" width="0.3008%" height="15" fill="rgb(248,212,6)"/><text x="15.0322%" y="79.50"></text></g><g><title>thir_body (63,063,638 samples, 0.43%)</title><rect x="15.1922%" y="69" width="0.4262%" height="15" fill="rgb(208,68,35)"/><text x="15.4422%" y="79.50"></text></g><g><title>mir_const (354,833,324 samples, 2.40%)</title><rect x="13.2421%" y="117" width="2.3981%" height="15" fill="rgb(232,128,0)"/><text x="13.4921%" y="127.50">mi..</text></g><g><title>unsafety_check_result (311,229,950 samples, 2.10%)</title><rect x="13.5368%" y="101" width="2.1034%" height="15" fill="rgb(207,160,47)"/><text x="13.7868%" y="111.50">u..</text></g><g><title>mir_built (284,704,874 samples, 1.92%)</title><rect x="13.7160%" y="85" width="1.9241%" height="15" fill="rgb(228,23,34)"/><text x="13.9660%" y="95.50">m..</text></g><g><title>mir_promoted (407,980,424 samples, 2.76%)</title><rect x="12.9478%" y="133" width="2.7572%" height="15" fill="rgb(218,30,26)"/><text x="13.1978%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (18,090,927 samples, 0.12%)</title><rect x="15.7050%" y="133" width="0.1223%" height="15" fill="rgb(220,122,19)"/><text x="15.9550%" y="143.50"></text></g><g><title>type_op_prove_predicate (74,446,485 samples, 0.50%)</title><rect x="15.9703%" y="133" width="0.5031%" height="15" fill="rgb(250,228,42)"/><text x="16.2203%" y="143.50"></text></g><g><title>MIR_borrow_checking (1,226,150,372 samples, 8.29%)</title><rect x="8.1871%" y="165" width="8.2866%" height="15" fill="rgb(240,193,28)"/><text x="8.4371%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (1,217,654,931 samples, 8.23%)</title><rect x="8.2445%" y="149" width="8.2292%" height="15" fill="rgb(216,20,37)"/><text x="8.4945%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (20,759,402 samples, 0.14%)</title><rect x="16.5666%" y="149" width="0.1403%" height="15" fill="rgb(206,188,39)"/><text x="16.8166%" y="159.50"></text></g><g><title>misc_checking_1 (46,519,170 samples, 0.31%)</title><rect x="16.5654%" y="165" width="0.3144%" height="15" fill="rgb(217,207,13)"/><text x="16.8154%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (25,155,201 samples, 0.17%)</title><rect x="16.8798%" y="149" width="0.1700%" height="15" fill="rgb(231,73,38)"/><text x="17.1298%" y="159.50"></text></g><g><title>check_mod_liveness (20,170,803 samples, 0.14%)</title><rect x="16.9135%" y="133" width="0.1363%" height="15" fill="rgb(225,20,46)"/><text x="17.1635%" y="143.50"></text></g><g><title>misc_checking_2 (69,390,094 samples, 0.47%)</title><rect x="16.8798%" y="165" width="0.4690%" height="15" fill="rgb(210,31,41)"/><text x="17.1298%" y="175.50"></text></g><g><title>match_checking (44,231,693 samples, 0.30%)</title><rect x="17.0498%" y="149" width="0.2989%" height="15" fill="rgb(221,200,47)"/><text x="17.2998%" y="159.50"></text></g><g><title>check_match (41,552,023 samples, 0.28%)</title><rect x="17.0679%" y="133" width="0.2808%" height="15" fill="rgb(226,26,5)"/><text x="17.3179%" y="143.50"></text></g><g><title>check_private_in_public (15,730,705 samples, 0.11%)</title><rect x="17.3489%" y="149" width="0.1063%" height="15" fill="rgb(249,33,26)"/><text x="17.5989%" y="159.50"></text></g><g><title>death_checking (21,676,631 samples, 0.15%)</title><rect x="17.4552%" y="149" width="0.1465%" height="15" fill="rgb(235,183,28)"/><text x="17.7052%" y="159.50"></text></g><g><title>crate_lints (31,698,314 samples, 0.21%)</title><rect x="17.6017%" y="133" width="0.2142%" height="15" fill="rgb(221,5,38)"/><text x="17.8517%" y="143.50"></text></g><g><title>lint_checking (62,526,288 samples, 0.42%)</title><rect x="17.6017%" y="149" width="0.4226%" height="15" fill="rgb(247,18,42)"/><text x="17.8517%" y="159.50"></text></g><g><title>module_lints (30,824,454 samples, 0.21%)</title><rect x="17.8159%" y="133" width="0.2083%" height="15" fill="rgb(241,131,45)"/><text x="18.0659%" y="143.50"></text></g><g><title>lint_mod (30,762,073 samples, 0.21%)</title><rect x="17.8164%" y="117" width="0.2079%" height="15" fill="rgb(249,31,29)"/><text x="18.0664%" y="127.50"></text></g><g><title>privacy_access_levels (17,789,639 samples, 0.12%)</title><rect x="18.0243%" y="149" width="0.1202%" height="15" fill="rgb(225,111,53)"/><text x="18.2743%" y="159.50"></text></g><g><title>privacy_checking_modules (52,405,804 samples, 0.35%)</title><rect x="18.1445%" y="149" width="0.3542%" height="15" fill="rgb(238,160,17)"/><text x="18.3945%" y="159.50"></text></g><g><title>check_mod_privacy (52,349,094 samples, 0.35%)</title><rect x="18.1449%" y="133" width="0.3538%" height="15" fill="rgb(214,148,48)"/><text x="18.3949%" y="143.50"></text></g><g><title>misc_checking_3 (170,510,631 samples, 1.15%)</title><rect x="17.3487%" y="165" width="1.1524%" height="15" fill="rgb(232,36,49)"/><text x="17.5987%" y="175.50"></text></g><g><title>evaluate_obligation (21,470,149 samples, 0.15%)</title><rect x="24.2123%" y="101" width="0.1451%" height="15" fill="rgb(209,103,24)"/><text x="24.4623%" y="111.50"></text></g><g><title>typeck (400,071,981 samples, 2.70%)</title><rect x="24.4075%" y="101" width="2.7038%" height="15" fill="rgb(229,88,8)"/><text x="24.6575%" y="111.50">ty..</text></g><g><title>item_bodies_checking (1,255,919,255 samples, 8.49%)</title><rect x="18.6303%" y="149" width="8.4878%" height="15" fill="rgb(213,181,19)"/><text x="18.8803%" y="159.50">item_bodies_..</text></g><g><title>typeck_item_bodies (1,255,914,734 samples, 8.49%)</title><rect x="18.6304%" y="133" width="8.4878%" height="15" fill="rgb(254,191,54)"/><text x="18.8804%" y="143.50">typeck_item_..</text></g><g><title>typeck (1,249,070,028 samples, 8.44%)</title><rect x="18.6766%" y="117" width="8.4415%" height="15" fill="rgb(241,83,37)"/><text x="18.9266%" y="127.50">typeck</text></g><g><title>item_types_checking (75,323,339 samples, 0.51%)</title><rect x="27.1181%" y="149" width="0.5091%" height="15" fill="rgb(233,36,39)"/><text x="27.3681%" y="159.50"></text></g><g><title>check_mod_item_types (75,269,669 samples, 0.51%)</title><rect x="27.1185%" y="133" width="0.5087%" height="15" fill="rgb(226,3,54)"/><text x="27.3685%" y="143.50"></text></g><g><title>named_region_map (23,452,891 samples, 0.16%)</title><rect x="27.9902%" y="101" width="0.1585%" height="15" fill="rgb(245,192,40)"/><text x="28.2402%" y="111.50"></text></g><g><title>resolve_lifetimes (22,276,199 samples, 0.15%)</title><rect x="27.9981%" y="85" width="0.1505%" height="15" fill="rgb(238,167,29)"/><text x="28.2481%" y="95.50"></text></g><g><title>generics_of (37,303,791 samples, 0.25%)</title><rect x="27.9002%" y="117" width="0.2521%" height="15" fill="rgb(232,182,51)"/><text x="28.1502%" y="127.50"></text></g><g><title>predicates_of (21,277,794 samples, 0.14%)</title><rect x="28.1670%" y="117" width="0.1438%" height="15" fill="rgb(231,60,39)"/><text x="28.4170%" y="127.50"></text></g><g><title>predicates_defined_on (18,196,627 samples, 0.12%)</title><rect x="28.1878%" y="101" width="0.1230%" height="15" fill="rgb(208,69,12)"/><text x="28.4378%" y="111.50"></text></g><g><title>type_collecting (105,130,452 samples, 0.71%)</title><rect x="27.6273%" y="149" width="0.7105%" height="15" fill="rgb(235,93,37)"/><text x="27.8773%" y="159.50"></text></g><g><title>collect_mod_item_types (105,060,041 samples, 0.71%)</title><rect x="27.6278%" y="133" width="0.7100%" height="15" fill="rgb(213,116,39)"/><text x="27.8778%" y="143.50"></text></g><g><title>evaluate_obligation (18,734,997 samples, 0.13%)</title><rect x="28.9783%" y="117" width="0.1266%" height="15" fill="rgb(222,207,29)"/><text x="29.2283%" y="127.50"></text></g><g><title>region_scope_tree (22,202,277 samples, 0.15%)</title><rect x="29.2568%" y="117" width="0.1500%" height="15" fill="rgb(206,96,30)"/><text x="29.5068%" y="127.50"></text></g><g><title>check_impl_item_well_formed (148,078,559 samples, 1.00%)</title><rect x="28.4069%" y="133" width="1.0008%" height="15" fill="rgb(218,138,4)"/><text x="28.6569%" y="143.50"></text></g><g><title>evaluate_obligation (15,397,433 samples, 0.10%)</title><rect x="29.7478%" y="117" width="0.1041%" height="15" fill="rgb(250,191,14)"/><text x="29.9978%" y="127.50"></text></g><g><title>check_item_well_formed (86,180,030 samples, 0.58%)</title><rect x="29.4076%" y="133" width="0.5824%" height="15" fill="rgb(239,60,40)"/><text x="29.6576%" y="143.50"></text></g><g><title>analysis (3,239,525,362 samples, 21.89%)</title><rect x="8.1036%" y="181" width="21.8935%" height="15" fill="rgb(206,27,48)"/><text x="8.3536%" y="191.50">analysis</text></g><g><title>type_check_crate (1,701,037,187 samples, 11.50%)</title><rect x="18.5011%" y="165" width="11.4960%" height="15" fill="rgb(225,35,8)"/><text x="18.7511%" y="175.50">type_check_crate</text></g><g><title>wf_checking (244,868,681 samples, 1.65%)</title><rect x="28.3422%" y="149" width="1.6549%" height="15" fill="rgb(250,213,24)"/><text x="28.5922%" y="159.50"></text></g><g><title>fn_abi_of_instance (46,614,537 samples, 0.32%)</title><rect x="31.5242%" y="149" width="0.3150%" height="15" fill="rgb(247,123,22)"/><text x="31.7742%" y="159.50"></text></g><g><title>codegen_module (276,230,882 samples, 1.87%)</title><rect x="30.0182%" y="165" width="1.8668%" height="15" fill="rgb(231,138,38)"/><text x="30.2682%" y="175.50">c..</text></g><g><title>mir_drops_elaborated_and_const_checked (43,569,076 samples, 0.29%)</title><rect x="32.4602%" y="101" width="0.2945%" height="15" fill="rgb(231,145,46)"/><text x="32.7102%" y="111.50"></text></g><g><title>optimized_mir (95,556,142 samples, 0.65%)</title><rect x="32.1132%" y="117" width="0.6458%" height="15" fill="rgb(251,118,11)"/><text x="32.3632%" y="127.50"></text></g><g><title>resolve_instance (21,872,920 samples, 0.15%)</title><rect x="32.7590%" y="117" width="0.1478%" height="15" fill="rgb(217,147,25)"/><text x="33.0090%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (169,716,492 samples, 1.15%)</title><rect x="31.8861%" y="133" width="1.1470%" height="15" fill="rgb(247,81,37)"/><text x="32.1361%" y="143.50"></text></g><g><title>monomorphization_collector (172,718,016 samples, 1.17%)</title><rect x="31.8861%" y="149" width="1.1673%" height="15" fill="rgb(209,12,38)"/><text x="32.1361%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (193,903,022 samples, 1.31%)</title><rect x="31.8851%" y="165" width="1.3104%" height="15" fill="rgb(227,1,9)"/><text x="32.1351%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (21,037,064 samples, 0.14%)</title><rect x="33.0534%" y="149" width="0.1422%" height="15" fill="rgb(248,47,43)"/><text x="33.3034%" y="159.50"></text></g><g><title>codegen_crate (473,315,647 samples, 3.20%)</title><rect x="29.9972%" y="181" width="3.1988%" height="15" fill="rgb(221,10,30)"/><text x="30.2472%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (2,377,811,222 samples, 16.07%)</title><rect x="33.1959%" y="181" width="16.0698%" height="15" fill="rgb(210,229,1)"/><text x="33.4459%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,234,062,258 samples, 15.10%)</title><rect x="34.1674%" y="165" width="15.0983%" height="15" fill="rgb(222,148,37)"/><text x="34.4174%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (2,048,785,234 samples, 13.85%)</title><rect x="49.8444%" y="165" width="13.8462%" height="15" fill="rgb(234,67,33)"/><text x="50.0944%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (1,814,561,893 samples, 12.26%)</title><rect x="63.6906%" y="165" width="12.2633%" height="15" fill="rgb(247,98,35)"/><text x="63.9406%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,803,792,333 samples, 12.19%)</title><rect x="63.7634%" y="149" width="12.1905%" height="15" fill="rgb(247,138,52)"/><text x="64.0134%" y="159.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (224,606,854 samples, 1.52%)</title><rect x="75.9539%" y="165" width="1.5179%" height="15" fill="rgb(213,79,30)"/><text x="76.2039%" y="175.50"></text></g><g><title>codegen_module_perform_lto (4,185,021,813 samples, 28.28%)</title><rect x="49.2658%" y="181" width="28.2834%" height="15" fill="rgb(246,177,23)"/><text x="49.5158%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (17,503,425 samples, 0.12%)</title><rect x="87.9178%" y="133" width="0.1183%" height="15" fill="rgb(230,62,27)"/><text x="88.1678%" y="143.50"></text></g><g><title>macro_expand_crate (1,535,712,395 samples, 10.38%)</title><rect x="77.6604%" y="165" width="10.3787%" height="15" fill="rgb(216,154,8)"/><text x="77.9104%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (1,535,672,555 samples, 10.38%)</title><rect x="77.6606%" y="149" width="10.3784%" height="15" fill="rgb(244,35,45)"/><text x="77.9106%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (82,069,495 samples, 0.55%)</title><rect x="88.0709%" y="149" width="0.5546%" height="15" fill="rgb(251,115,12)"/><text x="88.3209%" y="159.50"></text></g><g><title>configure_and_expand (1,650,324,542 samples, 11.15%)</title><rect x="77.5492%" y="181" width="11.1533%" height="15" fill="rgb(240,54,50)"/><text x="77.7992%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (97,997,843 samples, 0.66%)</title><rect x="88.0402%" y="165" width="0.6623%" height="15" fill="rgb(233,84,52)"/><text x="88.2902%" y="175.50"></text></g><g><title>early_lint_checks (23,845,975 samples, 0.16%)</title><rect x="88.7978%" y="181" width="0.1612%" height="15" fill="rgb(207,117,47)"/><text x="89.0478%" y="191.50"></text></g><g><title>free_global_ctxt (66,644,583 samples, 0.45%)</title><rect x="88.9590%" y="181" width="0.4504%" height="15" fill="rgb(249,43,39)"/><text x="89.2090%" y="191.50"></text></g><g><title>layout_of (18,024,645 samples, 0.12%)</title><rect x="91.2433%" y="149" width="0.1218%" height="15" fill="rgb(209,38,44)"/><text x="91.4933%" y="159.50"></text></g><g><title>is_copy_raw (16,443,036 samples, 0.11%)</title><rect x="92.6459%" y="117" width="0.1111%" height="15" fill="rgb(236,212,23)"/><text x="92.8959%" y="127.50"></text></g><g><title>needs_drop_raw (18,622,600 samples, 0.13%)</title><rect x="92.6316%" y="133" width="0.1259%" height="15" fill="rgb(242,79,21)"/><text x="92.8816%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (209,472,867 samples, 1.42%)</title><rect x="91.3652%" y="149" width="1.4157%" height="15" fill="rgb(211,96,35)"/><text x="91.6152%" y="159.50"></text></g><g><title>optimized_mir (385,318,831 samples, 2.60%)</title><rect x="90.2152%" y="165" width="2.6041%" height="15" fill="rgb(253,215,40)"/><text x="90.4652%" y="175.50">op..</text></g><g><title>generate_crate_metadata (510,684,313 samples, 3.45%)</title><rect x="89.4094%" y="181" width="3.4513%" height="15" fill="rgb(211,81,21)"/><text x="89.6594%" y="191.50">gen..</text></g><g><title>hir_lowering (155,246,641 samples, 1.05%)</title><rect x="92.8607%" y="181" width="1.0492%" height="15" fill="rgb(208,190,38)"/><text x="93.1107%" y="191.50"></text></g><g><title>finish_ongoing_codegen (860,643,366 samples, 5.82%)</title><rect x="93.9101%" y="165" width="5.8164%" height="15" fill="rgb(235,213,38)"/><text x="94.1601%" y="175.50">finish_..</text></g><g><title>link_crate (19,686,159 samples, 0.13%)</title><rect x="99.7265%" y="165" width="0.1330%" height="15" fill="rgb(237,122,38)"/><text x="99.9765%" y="175.50"></text></g><g><title>link_binary (19,411,436 samples, 0.13%)</title><rect x="99.7283%" y="149" width="0.1312%" height="15" fill="rgb(244,218,35)"/><text x="99.9783%" y="159.50"></text></g><g><title>link_rlib (17,263,802 samples, 0.12%)</title><rect x="99.7429%" y="133" width="0.1167%" height="15" fill="rgb(240,68,47)"/><text x="99.9929%" y="143.50"></text></g><g><title>link (880,362,095 samples, 5.95%)</title><rect x="93.9099%" y="181" width="5.9497%" height="15" fill="rgb(210,16,53)"/><text x="94.1599%" y="191.50">link</text></g><g><title>all (14,796,742,827 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (14,796,742,827 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>