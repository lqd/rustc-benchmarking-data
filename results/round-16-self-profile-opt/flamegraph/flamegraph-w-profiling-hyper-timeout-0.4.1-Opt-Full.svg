<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,577,055 samples, 5.80%)</title><rect x="0.4569%" y="309" width="5.8026%" height="15" fill="rgb(227,0,7)"/><text x="0.7069%" y="319.50">LLVM_pa..</text></g><g><title>codegen_generate_lto_work (1,080,633 samples, 0.95%)</title><rect x="5.3061%" y="293" width="0.9534%" height="15" fill="rgb(217,0,24)"/><text x="5.5561%" y="303.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,067,972 samples, 0.94%)</title><rect x="5.3173%" y="277" width="0.9422%" height="15" fill="rgb(221,193,54)"/><text x="5.5673%" y="287.50"></text></g><g><title>implied_outlives_bounds (150,462 samples, 0.13%)</title><rect x="12.2432%" y="261" width="0.1327%" height="15" fill="rgb(248,212,6)"/><text x="12.4932%" y="271.50"></text></g><g><title>param_env (256,414 samples, 0.23%)</title><rect x="13.2670%" y="229" width="0.2262%" height="15" fill="rgb(208,68,35)"/><text x="13.5170%" y="239.50"></text></g><g><title>codegen_fn_attrs (189,253 samples, 0.17%)</title><rect x="13.7325%" y="213" width="0.1670%" height="15" fill="rgb(232,128,0)"/><text x="13.9825%" y="223.50"></text></g><g><title>adt_drop_tys (155,341 samples, 0.14%)</title><rect x="15.1651%" y="165" width="0.1370%" height="15" fill="rgb(207,160,47)"/><text x="15.4151%" y="175.50"></text></g><g><title>adt_drop_tys (332,312 samples, 0.29%)</title><rect x="15.1415%" y="181" width="0.2932%" height="15" fill="rgb(228,23,34)"/><text x="15.3915%" y="191.50"></text></g><g><title>is_copy_raw (591,504 samples, 0.52%)</title><rect x="15.4346%" y="181" width="0.5219%" height="15" fill="rgb(218,30,26)"/><text x="15.6846%" y="191.50"></text></g><g><title>evaluate_obligation (480,014 samples, 0.42%)</title><rect x="15.5330%" y="165" width="0.4235%" height="15" fill="rgb(220,122,19)"/><text x="15.7830%" y="175.50"></text></g><g><title>needs_drop_raw (1,018,888 samples, 0.90%)</title><rect x="15.0644%" y="197" width="0.8989%" height="15" fill="rgb(250,228,42)"/><text x="15.3144%" y="207.50"></text></g><g><title>specialization_graph_of (198,563 samples, 0.18%)</title><rect x="16.1993%" y="181" width="0.1752%" height="15" fill="rgb(240,193,28)"/><text x="16.4493%" y="191.50"></text></g><g><title>resolve_instance (552,787 samples, 0.49%)</title><rect x="15.9633%" y="197" width="0.4877%" height="15" fill="rgb(216,20,37)"/><text x="16.2133%" y="207.50"></text></g><g><title>thir_body (418,892 samples, 0.37%)</title><rect x="16.4671%" y="197" width="0.3696%" height="15" fill="rgb(206,188,39)"/><text x="16.7171%" y="207.50"></text></g><g><title>mir_const (4,623,030 samples, 4.08%)</title><rect x="12.8384%" y="245" width="4.0787%" height="15" fill="rgb(217,207,13)"/><text x="13.0884%" y="255.50">mir_..</text></g><g><title>unsafety_check_result (3,880,781 samples, 3.42%)</title><rect x="13.4933%" y="229" width="3.4238%" height="15" fill="rgb(231,73,38)"/><text x="13.7433%" y="239.50">uns..</text></g><g><title>mir_built (3,420,326 samples, 3.02%)</title><rect x="13.8995%" y="213" width="3.0176%" height="15" fill="rgb(225,20,46)"/><text x="14.1495%" y="223.50">mir..</text></g><g><title>mir_promoted (5,118,943 samples, 4.52%)</title><rect x="12.4450%" y="261" width="4.5162%" height="15" fill="rgb(210,31,41)"/><text x="12.6950%" y="271.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (450,585 samples, 0.40%)</title><rect x="16.9612%" y="261" width="0.3975%" height="15" fill="rgb(221,200,47)"/><text x="17.2112%" y="271.50"></text></g><g><title>type_op_normalize_fn_sig (381,404 samples, 0.34%)</title><rect x="17.3587%" y="261" width="0.3365%" height="15" fill="rgb(226,26,5)"/><text x="17.6087%" y="271.50"></text></g><g><title>normalize_projection_ty (181,203 samples, 0.16%)</title><rect x="17.5353%" y="245" width="0.1599%" height="15" fill="rgb(249,33,26)"/><text x="17.7853%" y="255.50"></text></g><g><title>type_op_normalize_predicate (230,782 samples, 0.20%)</title><rect x="17.6952%" y="261" width="0.2036%" height="15" fill="rgb(235,183,28)"/><text x="17.9452%" y="271.50"></text></g><g><title>type_op_normalize_ty (287,122 samples, 0.25%)</title><rect x="17.8988%" y="261" width="0.2533%" height="15" fill="rgb(221,5,38)"/><text x="18.1488%" y="271.50"></text></g><g><title>normalize_projection_ty (119,862 samples, 0.11%)</title><rect x="18.0464%" y="245" width="0.1057%" height="15" fill="rgb(247,18,42)"/><text x="18.2964%" y="255.50"></text></g><g><title>type_op_prove_predicate (2,154,387 samples, 1.90%)</title><rect x="18.1521%" y="261" width="1.9007%" height="15" fill="rgb(241,131,45)"/><text x="18.4021%" y="271.50">t..</text></g><g><title>MIR_borrow_checking (15,446,945 samples, 13.63%)</title><rect x="6.4291%" y="293" width="13.6280%" height="15" fill="rgb(249,31,29)"/><text x="6.6791%" y="303.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (15,381,620 samples, 13.57%)</title><rect x="6.4868%" y="277" width="13.5704%" height="15" fill="rgb(225,111,53)"/><text x="6.7368%" y="287.50">mir_borrowck</text></g><g><title>hir_module_items (136,692 samples, 0.12%)</title><rect x="20.1559%" y="293" width="0.1206%" height="15" fill="rgb(238,160,17)"/><text x="20.4059%" y="303.50"></text></g><g><title>codegen_fn_attrs (224,304 samples, 0.20%)</title><rect x="20.5377%" y="229" width="0.1979%" height="15" fill="rgb(214,148,48)"/><text x="20.7877%" y="239.50"></text></g><g><title>codegen_fn_attrs (357,824 samples, 0.32%)</title><rect x="20.4234%" y="261" width="0.3157%" height="15" fill="rgb(232,36,49)"/><text x="20.6734%" y="271.50"></text></g><g><title>should_inherit_track_caller (316,614 samples, 0.28%)</title><rect x="20.4597%" y="245" width="0.2793%" height="15" fill="rgb(209,103,24)"/><text x="20.7097%" y="255.50"></text></g><g><title>check_mod_attrs (499,516 samples, 0.44%)</title><rect x="20.2985%" y="277" width="0.4407%" height="15" fill="rgb(229,88,8)"/><text x="20.5485%" y="287.50"></text></g><g><title>check_mod_unstable_api_usage (265,673 samples, 0.23%)</title><rect x="20.8386%" y="277" width="0.2344%" height="15" fill="rgb(213,181,19)"/><text x="21.0886%" y="287.50"></text></g><g><title>misc_checking_1 (938,981 samples, 0.83%)</title><rect x="20.2768%" y="293" width="0.8284%" height="15" fill="rgb(254,191,54)"/><text x="20.5268%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (274,813 samples, 0.24%)</title><rect x="21.1068%" y="277" width="0.2425%" height="15" fill="rgb(241,83,37)"/><text x="21.3568%" y="287.50"></text></g><g><title>check_mod_liveness (227,733 samples, 0.20%)</title><rect x="21.1483%" y="261" width="0.2009%" height="15" fill="rgb(233,36,39)"/><text x="21.3983%" y="271.50"></text></g><g><title>misc_checking_2 (600,786 samples, 0.53%)</title><rect x="21.1052%" y="293" width="0.5300%" height="15" fill="rgb(226,3,54)"/><text x="21.3552%" y="303.50"></text></g><g><title>match_checking (324,183 samples, 0.29%)</title><rect x="21.3492%" y="277" width="0.2860%" height="15" fill="rgb(245,192,40)"/><text x="21.5992%" y="287.50"></text></g><g><title>check_match (306,393 samples, 0.27%)</title><rect x="21.3649%" y="261" width="0.2703%" height="15" fill="rgb(238,167,29)"/><text x="21.6149%" y="271.50"></text></g><g><title>check_private_in_public (147,561 samples, 0.13%)</title><rect x="21.6430%" y="277" width="0.1302%" height="15" fill="rgb(232,182,51)"/><text x="21.8930%" y="287.50"></text></g><g><title>death_checking (253,302 samples, 0.22%)</title><rect x="21.7732%" y="277" width="0.2235%" height="15" fill="rgb(231,60,39)"/><text x="22.0232%" y="287.50"></text></g><g><title>eval_to_const_value_raw (156,682 samples, 0.14%)</title><rect x="22.7133%" y="245" width="0.1382%" height="15" fill="rgb(208,69,12)"/><text x="22.9633%" y="255.50"></text></g><g><title>eval_to_const_value_raw (149,352 samples, 0.13%)</title><rect x="22.7197%" y="229" width="0.1318%" height="15" fill="rgb(235,93,37)"/><text x="22.9697%" y="239.50"></text></g><g><title>eval_to_allocation_raw (142,772 samples, 0.13%)</title><rect x="22.7255%" y="213" width="0.1260%" height="15" fill="rgb(213,116,39)"/><text x="22.9755%" y="223.50"></text></g><g><title>param_env (192,933 samples, 0.17%)</title><rect x="22.8515%" y="245" width="0.1702%" height="15" fill="rgb(222,207,29)"/><text x="23.1015%" y="255.50"></text></g><g><title>crate_lints (2,618,719 samples, 2.31%)</title><rect x="21.9979%" y="261" width="2.3104%" height="15" fill="rgb(206,96,30)"/><text x="22.2479%" y="271.50">c..</text></g><g><title>type_of (1,455,727 samples, 1.28%)</title><rect x="23.0239%" y="245" width="1.2843%" height="15" fill="rgb(218,138,4)"/><text x="23.2739%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (1,102,336 samples, 0.97%)</title><rect x="23.3357%" y="229" width="0.9725%" height="15" fill="rgb(250,191,14)"/><text x="23.5857%" y="239.50"></text></g><g><title>lint_checking (2,836,172 samples, 2.50%)</title><rect x="21.9966%" y="277" width="2.5022%" height="15" fill="rgb(239,60,40)"/><text x="22.2466%" y="287.50">li..</text></g><g><title>module_lints (216,033 samples, 0.19%)</title><rect x="24.3083%" y="261" width="0.1906%" height="15" fill="rgb(206,27,48)"/><text x="24.5583%" y="271.50"></text></g><g><title>lint_mod (212,943 samples, 0.19%)</title><rect x="24.3110%" y="245" width="0.1879%" height="15" fill="rgb(225,35,8)"/><text x="24.5610%" y="255.50"></text></g><g><title>privacy_access_levels (196,142 samples, 0.17%)</title><rect x="24.4988%" y="277" width="0.1730%" height="15" fill="rgb(250,213,24)"/><text x="24.7488%" y="287.50"></text></g><g><title>privacy_checking_modules (657,197 samples, 0.58%)</title><rect x="24.6719%" y="277" width="0.5798%" height="15" fill="rgb(247,123,22)"/><text x="24.9219%" y="287.50"></text></g><g><title>check_mod_privacy (654,857 samples, 0.58%)</title><rect x="24.6740%" y="261" width="0.5777%" height="15" fill="rgb(231,138,38)"/><text x="24.9240%" y="271.50"></text></g><g><title>misc_checking_3 (4,110,796 samples, 3.63%)</title><rect x="21.6352%" y="293" width="3.6267%" height="15" fill="rgb(231,145,46)"/><text x="21.8852%" y="303.50">misc..</text></g><g><title>impl_parent (2,004,204 samples, 1.77%)</title><rect x="28.4155%" y="229" width="1.7682%" height="15" fill="rgb(251,118,11)"/><text x="28.6655%" y="239.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,277,714 samples, 1.13%)</title><rect x="29.0564%" y="213" width="1.1273%" height="15" fill="rgb(217,147,25)"/><text x="29.3064%" y="223.50"></text></g><g><title>impl_trait_ref (5,429,413 samples, 4.79%)</title><rect x="30.1837%" y="229" width="4.7901%" height="15" fill="rgb(247,81,37)"/><text x="30.4337%" y="239.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,692,094 samples, 4.14%)</title><rect x="30.8342%" y="213" width="4.1396%" height="15" fill="rgb(209,12,38)"/><text x="31.0842%" y="223.50">metad..</text></g><g><title>coherent_trait (11,738,934 samples, 10.36%)</title><rect x="25.3230%" y="261" width="10.3567%" height="15" fill="rgb(227,1,9)"/><text x="25.5730%" y="271.50">coherent_trait</text></g><g><title>specialization_graph_of (11,723,784 samples, 10.34%)</title><rect x="25.3364%" y="245" width="10.3433%" height="15" fill="rgb(248,47,43)"/><text x="25.5864%" y="255.50">specialization_..</text></g><g><title>trait_impls_of (759,220 samples, 0.67%)</title><rect x="35.0098%" y="229" width="0.6698%" height="15" fill="rgb(221,10,30)"/><text x="35.2598%" y="239.50"></text></g><g><title>implementations_of_trait (225,375 samples, 0.20%)</title><rect x="35.4808%" y="213" width="0.1988%" height="15" fill="rgb(210,229,1)"/><text x="35.7308%" y="223.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (153,042 samples, 0.14%)</title><rect x="35.5446%" y="197" width="0.1350%" height="15" fill="rgb(222,148,37)"/><text x="35.7946%" y="207.50"></text></g><g><title>orphan_check_crate (172,022 samples, 0.15%)</title><rect x="35.7033%" y="261" width="0.1518%" height="15" fill="rgb(234,67,33)"/><text x="35.9533%" y="271.50"></text></g><g><title>coherence_checking (11,964,676 samples, 10.56%)</title><rect x="25.3063%" y="277" width="10.5558%" height="15" fill="rgb(247,98,35)"/><text x="25.5563%" y="287.50">coherence_check..</text></g><g><title>associated_items (113,454 samples, 0.10%)</title><rect x="42.0769%" y="229" width="0.1001%" height="15" fill="rgb(247,138,52)"/><text x="42.3269%" y="239.50"></text></g><g><title>adt_def (203,473 samples, 0.18%)</title><rect x="42.4291%" y="197" width="0.1795%" height="15" fill="rgb(213,79,30)"/><text x="42.6791%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (199,683 samples, 0.18%)</title><rect x="42.4324%" y="181" width="0.1762%" height="15" fill="rgb(246,177,23)"/><text x="42.6824%" y="191.50"></text></g><g><title>adt_def (162,222 samples, 0.14%)</title><rect x="42.6999%" y="165" width="0.1431%" height="15" fill="rgb(230,62,27)"/><text x="42.9499%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (160,922 samples, 0.14%)</title><rect x="42.7010%" y="149" width="0.1420%" height="15" fill="rgb(216,154,8)"/><text x="42.9510%" y="159.50"></text></g><g><title>adt_def (393,615 samples, 0.35%)</title><rect x="43.2398%" y="85" width="0.3473%" height="15" fill="rgb(244,35,45)"/><text x="43.4898%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (392,985 samples, 0.35%)</title><rect x="43.2403%" y="69" width="0.3467%" height="15" fill="rgb(251,115,12)"/><text x="43.4903%" y="79.50"></text></g><g><title>item_attrs (385,305 samples, 0.34%)</title><rect x="43.2471%" y="53" width="0.3399%" height="15" fill="rgb(240,54,50)"/><text x="43.4971%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (384,405 samples, 0.34%)</title><rect x="43.2479%" y="37" width="0.3391%" height="15" fill="rgb(233,84,52)"/><text x="43.4979%" y="47.50"></text></g><g><title>adt_dtorck_constraint (495,076 samples, 0.44%)</title><rect x="43.2307%" y="101" width="0.4368%" height="15" fill="rgb(207,117,47)"/><text x="43.4807%" y="111.50"></text></g><g><title>adt_dtorck_constraint (558,147 samples, 0.49%)</title><rect x="43.1768%" y="117" width="0.4924%" height="15" fill="rgb(249,43,39)"/><text x="43.4268%" y="127.50"></text></g><g><title>adt_dtorck_constraint (603,437 samples, 0.53%)</title><rect x="43.1410%" y="133" width="0.5324%" height="15" fill="rgb(209,38,44)"/><text x="43.3910%" y="143.50"></text></g><g><title>adt_dtorck_constraint (690,568 samples, 0.61%)</title><rect x="43.0724%" y="149" width="0.6093%" height="15" fill="rgb(236,212,23)"/><text x="43.3224%" y="159.50"></text></g><g><title>adt_dtorck_constraint (958,612 samples, 0.85%)</title><rect x="42.8509%" y="165" width="0.8457%" height="15" fill="rgb(242,79,21)"/><text x="43.1009%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,164,184 samples, 1.03%)</title><rect x="42.6838%" y="181" width="1.0271%" height="15" fill="rgb(211,96,35)"/><text x="42.9338%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,238,344 samples, 1.09%)</title><rect x="42.6286%" y="197" width="1.0925%" height="15" fill="rgb(253,215,40)"/><text x="42.8786%" y="207.50"></text></g><g><title>adt_dtorck_constraint (1,574,040 samples, 1.39%)</title><rect x="42.3734%" y="213" width="1.3887%" height="15" fill="rgb(211,81,21)"/><text x="42.6234%" y="223.50"></text></g><g><title>dropck_outlives (1,758,512 samples, 1.55%)</title><rect x="42.2268%" y="229" width="1.5514%" height="15" fill="rgb(208,190,38)"/><text x="42.4768%" y="239.50"></text></g><g><title>evaluate_obligation (486,616 samples, 0.43%)</title><rect x="43.7783%" y="229" width="0.4293%" height="15" fill="rgb(235,213,38)"/><text x="44.0283%" y="239.50"></text></g><g><title>method_autoderef_steps (266,212 samples, 0.23%)</title><rect x="44.4162%" y="229" width="0.2349%" height="15" fill="rgb(237,122,38)"/><text x="44.6662%" y="239.50"></text></g><g><title>predicates_of (147,084 samples, 0.13%)</title><rect x="44.6922%" y="229" width="0.1298%" height="15" fill="rgb(244,218,35)"/><text x="44.9422%" y="239.50"></text></g><g><title>associated_items (126,410 samples, 0.11%)</title><rect x="49.4933%" y="213" width="0.1115%" height="15" fill="rgb(240,68,47)"/><text x="49.7433%" y="223.50"></text></g><g><title>dropck_outlives (380,233 samples, 0.34%)</title><rect x="49.6161%" y="213" width="0.3355%" height="15" fill="rgb(210,16,53)"/><text x="49.8661%" y="223.50"></text></g><g><title>evaluate_obligation (943,292 samples, 0.83%)</title><rect x="49.9516%" y="213" width="0.8322%" height="15" fill="rgb(235,124,12)"/><text x="50.2016%" y="223.50"></text></g><g><title>trait_impls_of (175,242 samples, 0.15%)</title><rect x="50.6292%" y="197" width="0.1546%" height="15" fill="rgb(224,169,11)"/><text x="50.8792%" y="207.50"></text></g><g><title>is_copy_raw (654,767 samples, 0.58%)</title><rect x="50.9418%" y="213" width="0.5777%" height="15" fill="rgb(250,166,2)"/><text x="51.1918%" y="223.50"></text></g><g><title>evaluate_obligation (577,407 samples, 0.51%)</title><rect x="51.0100%" y="197" width="0.5094%" height="15" fill="rgb(242,216,29)"/><text x="51.2600%" y="207.50"></text></g><g><title>trait_impls_of (203,602 samples, 0.18%)</title><rect x="51.3398%" y="181" width="0.1796%" height="15" fill="rgb(230,116,27)"/><text x="51.5898%" y="191.50"></text></g><g><title>item_attrs (128,521 samples, 0.11%)</title><rect x="51.5194%" y="213" width="0.1134%" height="15" fill="rgb(228,99,48)"/><text x="51.7694%" y="223.50"></text></g><g><title>metadata_decode_entry_item_attrs (123,781 samples, 0.11%)</title><rect x="51.5236%" y="197" width="0.1092%" height="15" fill="rgb(253,11,6)"/><text x="51.7736%" y="207.50"></text></g><g><title>predicates_of (168,281 samples, 0.15%)</title><rect x="51.7457%" y="213" width="0.1485%" height="15" fill="rgb(247,143,39)"/><text x="51.9957%" y="223.50"></text></g><g><title>typeck (8,097,963 samples, 7.14%)</title><rect x="44.8714%" y="229" width="7.1444%" height="15" fill="rgb(236,97,10)"/><text x="45.1214%" y="239.50">typeck</text></g><g><title>item_bodies_checking (18,310,988 samples, 16.15%)</title><rect x="35.8850%" y="277" width="16.1548%" height="15" fill="rgb(233,208,19)"/><text x="36.1350%" y="287.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (18,307,488 samples, 16.15%)</title><rect x="35.8881%" y="261" width="16.1517%" height="15" fill="rgb(216,164,2)"/><text x="36.1381%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (18,260,408 samples, 16.11%)</title><rect x="35.9296%" y="245" width="16.1102%" height="15" fill="rgb(220,129,5)"/><text x="36.1796%" y="255.50">typeck</text></g><g><title>adt_destructor (535,566 samples, 0.47%)</title><rect x="53.0661%" y="245" width="0.4725%" height="15" fill="rgb(242,17,10)"/><text x="53.3161%" y="255.50"></text></g><g><title>coherent_trait (530,826 samples, 0.47%)</title><rect x="53.0703%" y="229" width="0.4683%" height="15" fill="rgb(242,107,0)"/><text x="53.3203%" y="239.50"></text></g><g><title>specialization_graph_of (528,806 samples, 0.47%)</title><rect x="53.0721%" y="213" width="0.4665%" height="15" fill="rgb(251,28,31)"/><text x="53.3221%" y="223.50"></text></g><g><title>impl_trait_ref (267,163 samples, 0.24%)</title><rect x="53.3029%" y="197" width="0.2357%" height="15" fill="rgb(233,223,10)"/><text x="53.5529%" y="207.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (230,312 samples, 0.20%)</title><rect x="53.3354%" y="181" width="0.2032%" height="15" fill="rgb(215,21,27)"/><text x="53.5854%" y="191.50"></text></g><g><title>type_of (249,862 samples, 0.22%)</title><rect x="53.6904%" y="245" width="0.2204%" height="15" fill="rgb(232,23,21)"/><text x="53.9404%" y="255.50"></text></g><g><title>metadata_decode_entry_type_of (233,212 samples, 0.21%)</title><rect x="53.7051%" y="229" width="0.2058%" height="15" fill="rgb(244,5,23)"/><text x="53.9551%" y="239.50"></text></g><g><title>item_types_checking (2,216,135 samples, 1.96%)</title><rect x="52.0398%" y="277" width="1.9552%" height="15" fill="rgb(226,81,46)"/><text x="52.2898%" y="287.50">i..</text></g><g><title>check_mod_item_types (2,212,125 samples, 1.95%)</title><rect x="52.0434%" y="261" width="1.9516%" height="15" fill="rgb(247,70,30)"/><text x="52.2934%" y="271.50">c..</text></g><g><title>fn_sig (166,551 samples, 0.15%)</title><rect x="54.1545%" y="245" width="0.1469%" height="15" fill="rgb(212,68,19)"/><text x="54.4045%" y="255.50"></text></g><g><title>generics_of (142,363 samples, 0.13%)</title><rect x="54.3014%" y="245" width="0.1256%" height="15" fill="rgb(240,187,13)"/><text x="54.5514%" y="255.50"></text></g><g><title>late_bound_vars_map (361,262 samples, 0.32%)</title><rect x="54.7027%" y="197" width="0.3187%" height="15" fill="rgb(223,113,26)"/><text x="54.9527%" y="207.50"></text></g><g><title>resolve_lifetimes (351,872 samples, 0.31%)</title><rect x="54.7109%" y="181" width="0.3104%" height="15" fill="rgb(206,192,2)"/><text x="54.9609%" y="191.50"></text></g><g><title>lint_levels (139,721 samples, 0.12%)</title><rect x="54.8981%" y="165" width="0.1233%" height="15" fill="rgb(241,108,4)"/><text x="55.1481%" y="175.50"></text></g><g><title>explicit_predicates_of (690,936 samples, 0.61%)</title><rect x="54.5090%" y="213" width="0.6096%" height="15" fill="rgb(247,173,49)"/><text x="54.7590%" y="223.50"></text></g><g><title>predicates_of (994,169 samples, 0.88%)</title><rect x="54.4394%" y="245" width="0.8771%" height="15" fill="rgb(224,114,35)"/><text x="54.6894%" y="255.50"></text></g><g><title>predicates_defined_on (965,809 samples, 0.85%)</title><rect x="54.4645%" y="229" width="0.8521%" height="15" fill="rgb(245,159,27)"/><text x="54.7145%" y="239.50"></text></g><g><title>inferred_outlives_of (224,362 samples, 0.20%)</title><rect x="55.1186%" y="213" width="0.1979%" height="15" fill="rgb(245,172,44)"/><text x="55.3686%" y="223.50"></text></g><g><title>inferred_outlives_crate (207,702 samples, 0.18%)</title><rect x="55.1333%" y="197" width="0.1832%" height="15" fill="rgb(236,23,11)"/><text x="55.3833%" y="207.50"></text></g><g><title>type_of (114,302 samples, 0.10%)</title><rect x="55.2157%" y="181" width="0.1008%" height="15" fill="rgb(205,117,38)"/><text x="55.4657%" y="191.50"></text></g><g><title>type_collecting (1,959,752 samples, 1.73%)</title><rect x="53.9976%" y="277" width="1.7290%" height="15" fill="rgb(237,72,25)"/><text x="54.2476%" y="287.50"></text></g><g><title>collect_mod_item_types (1,951,362 samples, 1.72%)</title><rect x="54.0050%" y="261" width="1.7216%" height="15" fill="rgb(244,70,9)"/><text x="54.2550%" y="271.50"></text></g><g><title>type_of (460,926 samples, 0.41%)</title><rect x="55.3199%" y="245" width="0.4067%" height="15" fill="rgb(217,125,39)"/><text x="55.5699%" y="255.50"></text></g><g><title>adt_sized_constraint (133,511 samples, 0.12%)</title><rect x="58.2832%" y="229" width="0.1178%" height="15" fill="rgb(235,36,10)"/><text x="58.5332%" y="239.50"></text></g><g><title>evaluate_obligation (757,147 samples, 0.67%)</title><rect x="57.9042%" y="245" width="0.6680%" height="15" fill="rgb(251,123,47)"/><text x="58.1542%" y="255.50"></text></g><g><title>implied_outlives_bounds (270,323 samples, 0.24%)</title><rect x="58.6025%" y="245" width="0.2385%" height="15" fill="rgb(221,13,13)"/><text x="58.8525%" y="255.50"></text></g><g><title>layout_of (144,142 samples, 0.13%)</title><rect x="58.9342%" y="229" width="0.1272%" height="15" fill="rgb(238,131,9)"/><text x="59.1842%" y="239.50"></text></g><g><title>object_safety_violations (264,903 samples, 0.23%)</title><rect x="58.8410%" y="245" width="0.2337%" height="15" fill="rgb(211,50,8)"/><text x="59.0910%" y="255.50"></text></g><g><title>param_env (309,295 samples, 0.27%)</title><rect x="59.0747%" y="245" width="0.2729%" height="15" fill="rgb(245,182,24)"/><text x="59.3247%" y="255.50"></text></g><g><title>region_scope_tree (203,452 samples, 0.18%)</title><rect x="59.3933%" y="245" width="0.1795%" height="15" fill="rgb(242,14,37)"/><text x="59.6433%" y="255.50"></text></g><g><title>check_impl_item_well_formed (4,228,270 samples, 3.73%)</title><rect x="55.8461%" y="261" width="3.7304%" height="15" fill="rgb(246,228,12)"/><text x="56.0961%" y="271.50">chec..</text></g><g><title>evaluate_obligation (164,250 samples, 0.14%)</title><rect x="60.8361%" y="245" width="0.1449%" height="15" fill="rgb(213,55,15)"/><text x="61.0861%" y="255.50"></text></g><g><title>implied_outlives_bounds (132,700 samples, 0.12%)</title><rect x="61.0339%" y="245" width="0.1171%" height="15" fill="rgb(209,9,3)"/><text x="61.2839%" y="255.50"></text></g><g><title>evaluate_obligation (150,021 samples, 0.13%)</title><rect x="61.2911%" y="229" width="0.1324%" height="15" fill="rgb(230,59,30)"/><text x="61.5411%" y="239.50"></text></g><g><title>object_safety_violations (498,126 samples, 0.44%)</title><rect x="61.1714%" y="245" width="0.4395%" height="15" fill="rgb(209,121,21)"/><text x="61.4214%" y="255.50"></text></g><g><title>param_env (256,663 samples, 0.23%)</title><rect x="61.6114%" y="245" width="0.2264%" height="15" fill="rgb(220,109,13)"/><text x="61.8614%" y="255.50"></text></g><g><title>trait_impls_of (200,054 samples, 0.18%)</title><rect x="61.9295%" y="245" width="0.1765%" height="15" fill="rgb(232,18,1)"/><text x="62.1795%" y="255.50"></text></g><g><title>analysis (63,386,828 samples, 55.92%)</title><rect x="6.2595%" y="309" width="55.9229%" height="15" fill="rgb(215,41,42)"/><text x="6.5095%" y="319.50">analysis</text></g><g><title>type_check_crate (41,848,105 samples, 36.92%)</title><rect x="25.2620%" y="293" width="36.9204%" height="15" fill="rgb(224,123,36)"/><text x="25.5120%" y="303.50">type_check_crate</text></g><g><title>wf_checking (7,314,283 samples, 6.45%)</title><rect x="55.7294%" y="277" width="6.4530%" height="15" fill="rgb(240,125,3)"/><text x="55.9794%" y="287.50">wf_check..</text></g><g><title>check_item_well_formed (2,953,681 samples, 2.61%)</title><rect x="59.5765%" y="261" width="2.6059%" height="15" fill="rgb(205,98,50)"/><text x="59.8265%" y="271.50">ch..</text></g><g><title>codegen_module (219,373 samples, 0.19%)</title><rect x="62.6288%" y="293" width="0.1935%" height="15" fill="rgb(205,185,37)"/><text x="62.8788%" y="303.50"></text></g><g><title>codegen_crate (926,080 samples, 0.82%)</title><rect x="62.1879%" y="309" width="0.8170%" height="15" fill="rgb(238,207,15)"/><text x="62.4379%" y="319.50"></text></g><g><title>codegen_module_optimize (1,254,354 samples, 1.11%)</title><rect x="63.0049%" y="309" width="1.1067%" height="15" fill="rgb(213,199,42)"/><text x="63.2549%" y="319.50"></text></g><g><title>LLVM_module_optimize (473,655 samples, 0.42%)</title><rect x="63.6937%" y="293" width="0.4179%" height="15" fill="rgb(235,201,11)"/><text x="63.9437%" y="303.50"></text></g><g><title>LLVM_lto_optimize (237,762 samples, 0.21%)</title><rect x="64.4737%" y="293" width="0.2098%" height="15" fill="rgb(207,46,11)"/><text x="64.7237%" y="303.50"></text></g><g><title>LLVM_module_codegen (2,375,737 samples, 2.10%)</title><rect x="64.6835%" y="293" width="2.0960%" height="15" fill="rgb(241,35,35)"/><text x="64.9335%" y="303.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,338,837 samples, 2.06%)</title><rect x="64.7160%" y="277" width="2.0634%" height="15" fill="rgb(243,32,47)"/><text x="64.9660%" y="287.50">L..</text></g><g><title>codegen_module_perform_lto (3,056,794 samples, 2.70%)</title><rect x="64.1116%" y="309" width="2.6969%" height="15" fill="rgb(247,202,23)"/><text x="64.3616%" y="319.50">co..</text></g><g><title>metadata_load_macro (651,638 samples, 0.57%)</title><rect x="76.2998%" y="261" width="0.5749%" height="15" fill="rgb(219,102,11)"/><text x="76.5498%" y="271.50"></text></g><g><title>metadata_register_crate (6,461,704 samples, 5.70%)</title><rect x="76.8747%" y="261" width="5.7008%" height="15" fill="rgb(243,110,44)"/><text x="77.1247%" y="271.50">metadat..</text></g><g><title>metadata_register_crate (4,524,612 samples, 3.99%)</title><rect x="78.5837%" y="245" width="3.9918%" height="15" fill="rgb(222,74,54)"/><text x="78.8337%" y="255.50">meta..</text></g><g><title>metadata_register_crate (172,252 samples, 0.15%)</title><rect x="82.4236%" y="229" width="0.1520%" height="15" fill="rgb(216,99,12)"/><text x="82.6736%" y="239.50"></text></g><g><title>macro_expand_crate (17,563,849 samples, 15.50%)</title><rect x="67.1039%" y="293" width="15.4957%" height="15" fill="rgb(226,22,26)"/><text x="67.3539%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (17,546,259 samples, 15.48%)</title><rect x="67.1194%" y="277" width="15.4802%" height="15" fill="rgb(217,163,10)"/><text x="67.3694%" y="287.50">expand_crate</text></g><g><title>late_resolve_crate (1,106,413 samples, 0.98%)</title><rect x="82.8137%" y="277" width="0.9761%" height="15" fill="rgb(213,25,53)"/><text x="83.0637%" y="287.50"></text></g><g><title>configure_and_expand (19,312,119 samples, 17.04%)</title><rect x="66.8085%" y="309" width="17.0381%" height="15" fill="rgb(252,105,26)"/><text x="67.0585%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (1,307,965 samples, 1.15%)</title><rect x="82.6926%" y="293" width="1.1539%" height="15" fill="rgb(220,39,43)"/><text x="82.9426%" y="303.50"></text></g><g><title>early_lint_checks (298,453 samples, 0.26%)</title><rect x="83.9567%" y="309" width="0.2633%" height="15" fill="rgb(229,68,48)"/><text x="84.2067%" y="319.50"></text></g><g><title>free_global_ctxt (4,002,846 samples, 3.53%)</title><rect x="84.2200%" y="309" width="3.5315%" height="15" fill="rgb(252,8,32)"/><text x="84.4700%" y="319.50">fre..</text></g><g><title>dep_kind (236,853 samples, 0.21%)</title><rect x="88.8594%" y="293" width="0.2090%" height="15" fill="rgb(223,20,43)"/><text x="89.1094%" y="303.50"></text></g><g><title>layout_of (191,402 samples, 0.17%)</title><rect x="91.3776%" y="197" width="0.1689%" height="15" fill="rgb(229,81,49)"/><text x="91.6276%" y="207.50"></text></g><g><title>layout_of (327,745 samples, 0.29%)</title><rect x="91.2782%" y="213" width="0.2892%" height="15" fill="rgb(236,28,36)"/><text x="91.5282%" y="223.50"></text></g><g><title>layout_of (401,935 samples, 0.35%)</title><rect x="91.2315%" y="229" width="0.3546%" height="15" fill="rgb(249,185,26)"/><text x="91.4815%" y="239.50"></text></g><g><title>layout_of (463,145 samples, 0.41%)</title><rect x="91.1966%" y="245" width="0.4086%" height="15" fill="rgb(249,174,33)"/><text x="91.4466%" y="255.50"></text></g><g><title>layout_of (580,647 samples, 0.51%)</title><rect x="91.1248%" y="261" width="0.5123%" height="15" fill="rgb(233,201,37)"/><text x="91.3748%" y="271.50"></text></g><g><title>layout_of (928,080 samples, 0.82%)</title><rect x="90.8332%" y="277" width="0.8188%" height="15" fill="rgb(221,78,26)"/><text x="91.0832%" y="287.50"></text></g><g><title>is_copy_raw (514,028 samples, 0.45%)</title><rect x="93.4348%" y="245" width="0.4535%" height="15" fill="rgb(250,127,30)"/><text x="93.6848%" y="255.50"></text></g><g><title>evaluate_obligation (434,998 samples, 0.38%)</title><rect x="93.5045%" y="229" width="0.3838%" height="15" fill="rgb(230,49,44)"/><text x="93.7545%" y="239.50"></text></g><g><title>needs_drop_raw (579,268 samples, 0.51%)</title><rect x="93.3825%" y="261" width="0.5111%" height="15" fill="rgb(229,67,23)"/><text x="93.6325%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,670,273 samples, 2.36%)</title><rect x="91.6520%" y="277" width="2.3558%" height="15" fill="rgb(249,83,47)"/><text x="91.9020%" y="287.50">m..</text></g><g><title>optimized_mir (5,428,871 samples, 4.79%)</title><rect x="89.2201%" y="293" width="4.7896%" height="15" fill="rgb(215,43,3)"/><text x="89.4701%" y="303.50">optimi..</text></g><g><title>generate_crate_metadata (7,129,761 samples, 6.29%)</title><rect x="87.7515%" y="309" width="6.2902%" height="15" fill="rgb(238,154,13)"/><text x="88.0015%" y="319.50">generate..</text></g><g><title>hir_lowering (1,569,188 samples, 1.38%)</title><rect x="94.0417%" y="309" width="1.3844%" height="15" fill="rgb(219,56,2)"/><text x="94.2917%" y="319.50"></text></g><g><title>finish_ongoing_codegen (1,977,442 samples, 1.74%)</title><rect x="95.4373%" y="293" width="1.7446%" height="15" fill="rgb(233,0,4)"/><text x="95.6873%" y="303.50"></text></g><g><title>link_crate (779,249 samples, 0.69%)</title><rect x="97.1819%" y="293" width="0.6875%" height="15" fill="rgb(235,30,7)"/><text x="97.4319%" y="303.50"></text></g><g><title>link_binary (758,329 samples, 0.67%)</title><rect x="97.2004%" y="277" width="0.6690%" height="15" fill="rgb(250,79,13)"/><text x="97.4504%" y="287.50"></text></g><g><title>link_rlib (493,416 samples, 0.44%)</title><rect x="97.4341%" y="261" width="0.4353%" height="15" fill="rgb(211,146,34)"/><text x="97.6841%" y="271.50"></text></g><g><title>link (2,776,981 samples, 2.45%)</title><rect x="95.4261%" y="309" width="2.4500%" height="15" fill="rgb(228,22,38)"/><text x="95.6761%" y="319.50">li..</text></g><g><title>parse_crate (988,191 samples, 0.87%)</title><rect x="97.8761%" y="309" width="0.8718%" height="15" fill="rgb(235,168,5)"/><text x="98.1261%" y="319.50"></text></g><g><title>prepare_outputs (218,893 samples, 0.19%)</title><rect x="98.7530%" y="309" width="0.1931%" height="15" fill="rgb(221,155,16)"/><text x="99.0030%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (760,459 samples, 0.67%)</title><rect x="98.9461%" y="309" width="0.6709%" height="15" fill="rgb(215,215,53)"/><text x="99.1961%" y="319.50"></text></g><g><title>all (113,346,795 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (113,346,795 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (356,834 samples, 0.31%)</title><rect x="99.6852%" y="309" width="0.3148%" height="15" fill="rgb(227,97,0)"/><text x="99.9352%" y="319.50"></text></g></svg></svg>