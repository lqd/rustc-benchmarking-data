<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (138,695,352 samples, 10.11%)</title><rect x="0.0572%" y="181" width="10.1102%" height="15" fill="rgb(227,0,7)"/><text x="0.3072%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,479,228 samples, 0.18%)</title><rect x="18.1008%" y="69" width="0.1807%" height="15" fill="rgb(217,0,24)"/><text x="18.3508%" y="79.50"></text></g><g><title>is_copy_raw (2,051,014 samples, 0.15%)</title><rect x="18.1320%" y="53" width="0.1495%" height="15" fill="rgb(221,193,54)"/><text x="18.3820%" y="63.50"></text></g><g><title>evaluate_obligation (1,701,652 samples, 0.12%)</title><rect x="18.1575%" y="37" width="0.1240%" height="15" fill="rgb(248,212,6)"/><text x="18.4075%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (2,773,035 samples, 0.20%)</title><rect x="18.3871%" y="53" width="0.2021%" height="15" fill="rgb(208,68,35)"/><text x="18.6371%" y="63.50"></text></g><g><title>resolve_instance (5,726,133 samples, 0.42%)</title><rect x="18.2815%" y="69" width="0.4174%" height="15" fill="rgb(232,128,0)"/><text x="18.5315%" y="79.50"></text></g><g><title>thir_body (7,177,694 samples, 0.52%)</title><rect x="18.7127%" y="69" width="0.5232%" height="15" fill="rgb(207,160,47)"/><text x="18.9627%" y="79.50"></text></g><g><title>mir_const (43,638,747 samples, 3.18%)</title><rect x="16.0638%" y="117" width="3.1810%" height="15" fill="rgb(228,23,34)"/><text x="16.3138%" y="127.50">mir..</text></g><g><title>unsafety_check_result (37,363,386 samples, 2.72%)</title><rect x="16.5212%" y="101" width="2.7236%" height="15" fill="rgb(218,30,26)"/><text x="16.7712%" y="111.50">un..</text></g><g><title>mir_built (33,643,878 samples, 2.45%)</title><rect x="16.7924%" y="85" width="2.4525%" height="15" fill="rgb(220,122,19)"/><text x="17.0424%" y="95.50">mi..</text></g><g><title>mir_promoted (49,812,437 samples, 3.63%)</title><rect x="15.6540%" y="133" width="3.6311%" height="15" fill="rgb(250,228,42)"/><text x="15.9040%" y="143.50">mir_..</text></g><g><title>type_op_normalize_fn_sig (2,871,990 samples, 0.21%)</title><rect x="19.3810%" y="133" width="0.2094%" height="15" fill="rgb(240,193,28)"/><text x="19.6310%" y="143.50"></text></g><g><title>normalize_projection_ty (1,590,106 samples, 0.12%)</title><rect x="19.4744%" y="117" width="0.1159%" height="15" fill="rgb(216,20,37)"/><text x="19.7244%" y="127.50"></text></g><g><title>type_op_normalize_ty (4,651,682 samples, 0.34%)</title><rect x="19.6089%" y="133" width="0.3391%" height="15" fill="rgb(206,188,39)"/><text x="19.8589%" y="143.50"></text></g><g><title>normalize_projection_ty (3,150,065 samples, 0.23%)</title><rect x="19.7184%" y="117" width="0.2296%" height="15" fill="rgb(217,207,13)"/><text x="19.9684%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,393,905 samples, 0.54%)</title><rect x="19.9480%" y="133" width="0.5390%" height="15" fill="rgb(231,73,38)"/><text x="20.1980%" y="143.50"></text></g><g><title>MIR_borrow_checking (139,949,007 samples, 10.20%)</title><rect x="10.2860%" y="165" width="10.2016%" height="15" fill="rgb(225,20,46)"/><text x="10.5360%" y="175.50">MIR_borrow_chec..</text></g><g><title>mir_borrowck (138,962,730 samples, 10.13%)</title><rect x="10.3579%" y="149" width="10.1297%" height="15" fill="rgb(210,31,41)"/><text x="10.6079%" y="159.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (1,789,658 samples, 0.13%)</title><rect x="20.7144%" y="133" width="0.1305%" height="15" fill="rgb(221,200,47)"/><text x="20.9644%" y="143.50"></text></g><g><title>check_mod_attrs (3,037,684 samples, 0.22%)</title><rect x="20.6235%" y="149" width="0.2214%" height="15" fill="rgb(226,26,5)"/><text x="20.8735%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,660,067 samples, 0.12%)</title><rect x="20.9341%" y="149" width="0.1210%" height="15" fill="rgb(249,33,26)"/><text x="21.1841%" y="159.50"></text></g><g><title>misc_checking_1 (6,145,199 samples, 0.45%)</title><rect x="20.6212%" y="165" width="0.4480%" height="15" fill="rgb(235,183,28)"/><text x="20.8712%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,461,537 samples, 0.18%)</title><rect x="21.0693%" y="149" width="0.1794%" height="15" fill="rgb(221,5,38)"/><text x="21.3193%" y="159.50"></text></g><g><title>check_mod_liveness (1,986,183 samples, 0.14%)</title><rect x="21.1039%" y="133" width="0.1448%" height="15" fill="rgb(247,18,42)"/><text x="21.3539%" y="143.50"></text></g><g><title>misc_checking_2 (4,892,885 samples, 0.36%)</title><rect x="21.0692%" y="165" width="0.3567%" height="15" fill="rgb(241,131,45)"/><text x="21.3192%" y="175.50"></text></g><g><title>match_checking (2,429,628 samples, 0.18%)</title><rect x="21.2487%" y="149" width="0.1771%" height="15" fill="rgb(249,31,29)"/><text x="21.4987%" y="159.50"></text></g><g><title>check_match (2,209,415 samples, 0.16%)</title><rect x="21.2648%" y="133" width="0.1611%" height="15" fill="rgb(225,111,53)"/><text x="21.5148%" y="143.50"></text></g><g><title>check_private_in_public (1,394,906 samples, 0.10%)</title><rect x="21.4265%" y="149" width="0.1017%" height="15" fill="rgb(238,160,17)"/><text x="21.6765%" y="159.50"></text></g><g><title>death_checking (2,051,263 samples, 0.15%)</title><rect x="21.5282%" y="149" width="0.1495%" height="15" fill="rgb(214,148,48)"/><text x="21.7782%" y="159.50"></text></g><g><title>crate_lints (4,925,545 samples, 0.36%)</title><rect x="21.6779%" y="133" width="0.3590%" height="15" fill="rgb(232,36,49)"/><text x="21.9279%" y="143.50"></text></g><g><title>type_of (1,438,256 samples, 0.10%)</title><rect x="21.9321%" y="117" width="0.1048%" height="15" fill="rgb(209,103,24)"/><text x="22.1821%" y="127.50"></text></g><g><title>lint_checking (7,097,220 samples, 0.52%)</title><rect x="21.6777%" y="149" width="0.5174%" height="15" fill="rgb(229,88,8)"/><text x="21.9277%" y="159.50"></text></g><g><title>module_lints (2,169,245 samples, 0.16%)</title><rect x="22.0370%" y="133" width="0.1581%" height="15" fill="rgb(213,181,19)"/><text x="22.2870%" y="143.50"></text></g><g><title>lint_mod (2,163,135 samples, 0.16%)</title><rect x="22.0374%" y="117" width="0.1577%" height="15" fill="rgb(254,191,54)"/><text x="22.2874%" y="127.50"></text></g><g><title>privacy_access_levels (2,511,658 samples, 0.18%)</title><rect x="22.1951%" y="149" width="0.1831%" height="15" fill="rgb(241,83,37)"/><text x="22.4451%" y="159.50"></text></g><g><title>privacy_checking_modules (6,118,368 samples, 0.45%)</title><rect x="22.3782%" y="149" width="0.4460%" height="15" fill="rgb(233,36,39)"/><text x="22.6282%" y="159.50"></text></g><g><title>check_mod_privacy (6,113,318 samples, 0.45%)</title><rect x="22.3785%" y="133" width="0.4456%" height="15" fill="rgb(226,3,54)"/><text x="22.6285%" y="143.50"></text></g><g><title>misc_checking_3 (19,229,195 samples, 1.40%)</title><rect x="21.4258%" y="165" width="1.4017%" height="15" fill="rgb(245,192,40)"/><text x="21.6758%" y="175.50"></text></g><g><title>impl_parent (3,681,530 samples, 0.27%)</title><rect x="25.4157%" y="101" width="0.2684%" height="15" fill="rgb(238,167,29)"/><text x="25.6657%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,071,139 samples, 0.15%)</title><rect x="25.5331%" y="85" width="0.1510%" height="15" fill="rgb(232,182,51)"/><text x="25.7831%" y="95.50"></text></g><g><title>impl_trait_ref (7,706,081 samples, 0.56%)</title><rect x="25.6843%" y="101" width="0.5617%" height="15" fill="rgb(231,60,39)"/><text x="25.9343%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,841,924 samples, 0.43%)</title><rect x="25.8201%" y="85" width="0.4258%" height="15" fill="rgb(208,69,12)"/><text x="26.0701%" y="95.50"></text></g><g><title>item_attrs (1,829,620 samples, 0.13%)</title><rect x="26.2460%" y="101" width="0.1334%" height="15" fill="rgb(235,93,37)"/><text x="26.4960%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,651,540 samples, 0.12%)</title><rect x="26.2590%" y="85" width="0.1204%" height="15" fill="rgb(213,116,39)"/><text x="26.5090%" y="95.50"></text></g><g><title>predicates_of (2,085,838 samples, 0.15%)</title><rect x="26.3794%" y="101" width="0.1520%" height="15" fill="rgb(222,207,29)"/><text x="26.6294%" y="111.50"></text></g><g><title>trait_impls_of (1,548,478 samples, 0.11%)</title><rect x="26.5316%" y="101" width="0.1129%" height="15" fill="rgb(206,96,30)"/><text x="26.7816%" y="111.50"></text></g><g><title>coherent_trait (57,176,171 samples, 4.17%)</title><rect x="22.8569%" y="133" width="4.1679%" height="15" fill="rgb(218,138,4)"/><text x="23.1069%" y="143.50">coher..</text></g><g><title>specialization_graph_of (56,679,455 samples, 4.13%)</title><rect x="22.8931%" y="117" width="4.1316%" height="15" fill="rgb(250,191,14)"/><text x="23.1431%" y="127.50">speci..</text></g><g><title>visible_parent_map (4,764,374 samples, 0.35%)</title><rect x="26.6775%" y="101" width="0.3473%" height="15" fill="rgb(239,60,40)"/><text x="26.9275%" y="111.50"></text></g><g><title>module_children (4,289,176 samples, 0.31%)</title><rect x="26.7121%" y="85" width="0.3127%" height="15" fill="rgb(206,27,48)"/><text x="26.9621%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,180,005 samples, 0.30%)</title><rect x="26.7201%" y="69" width="0.3047%" height="15" fill="rgb(225,35,8)"/><text x="26.9701%" y="79.50"></text></g><g><title>coherence_checking (57,610,606 samples, 4.20%)</title><rect x="22.8539%" y="149" width="4.1995%" height="15" fill="rgb(250,213,24)"/><text x="23.1039%" y="159.50">coher..</text></g><g><title>associated_item (1,450,467 samples, 0.11%)</title><rect x="37.7378%" y="85" width="0.1057%" height="15" fill="rgb(247,123,22)"/><text x="37.9878%" y="95.50"></text></g><g><title>associated_items (2,044,602 samples, 0.15%)</title><rect x="37.6986%" y="101" width="0.1490%" height="15" fill="rgb(231,138,38)"/><text x="37.9486%" y="111.50"></text></g><g><title>specializes (2,430,775 samples, 0.18%)</title><rect x="38.8948%" y="85" width="0.1772%" height="15" fill="rgb(231,145,46)"/><text x="39.1448%" y="95.50"></text></g><g><title>param_env (1,487,533 samples, 0.11%)</title><rect x="38.9635%" y="69" width="0.1084%" height="15" fill="rgb(251,118,11)"/><text x="39.2135%" y="79.50"></text></g><g><title>evaluate_obligation (16,297,952 samples, 1.19%)</title><rect x="37.9263%" y="101" width="1.1880%" height="15" fill="rgb(217,147,25)"/><text x="38.1763%" y="111.50"></text></g><g><title>typeck (2,568,109 samples, 0.19%)</title><rect x="39.3792%" y="101" width="0.1872%" height="15" fill="rgb(247,81,37)"/><text x="39.6292%" y="111.50"></text></g><g><title>item_bodies_checking (171,479,900 samples, 12.50%)</title><rect x="27.0836%" y="149" width="12.5000%" height="15" fill="rgb(209,12,38)"/><text x="27.3336%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (171,477,260 samples, 12.50%)</title><rect x="27.0838%" y="133" width="12.4998%" height="15" fill="rgb(227,1,9)"/><text x="27.3338%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (170,767,854 samples, 12.45%)</title><rect x="27.1355%" y="117" width="12.4481%" height="15" fill="rgb(248,47,43)"/><text x="27.3855%" y="127.50">typeck</text></g><g><title>item_types_checking (36,182,534 samples, 2.64%)</title><rect x="39.5836%" y="149" width="2.6375%" height="15" fill="rgb(221,10,30)"/><text x="39.8336%" y="159.50">it..</text></g><g><title>check_mod_item_types (36,176,034 samples, 2.64%)</title><rect x="39.5841%" y="133" width="2.6371%" height="15" fill="rgb(210,229,1)"/><text x="39.8341%" y="143.50">ch..</text></g><g><title>fn_sig (1,882,727 samples, 0.14%)</title><rect x="42.3913%" y="117" width="0.1372%" height="15" fill="rgb(222,148,37)"/><text x="42.6413%" y="127.50"></text></g><g><title>is_late_bound_map (3,298,039 samples, 0.24%)</title><rect x="42.6012%" y="101" width="0.2404%" height="15" fill="rgb(234,67,33)"/><text x="42.8512%" y="111.50"></text></g><g><title>resolve_lifetimes (2,769,514 samples, 0.20%)</title><rect x="42.6397%" y="85" width="0.2019%" height="15" fill="rgb(247,98,35)"/><text x="42.8897%" y="95.50"></text></g><g><title>generics_of (4,659,395 samples, 0.34%)</title><rect x="42.5285%" y="117" width="0.3396%" height="15" fill="rgb(247,138,52)"/><text x="42.7785%" y="127.50"></text></g><g><title>late_bound_vars_map (1,557,620 samples, 0.11%)</title><rect x="43.1093%" y="69" width="0.1135%" height="15" fill="rgb(213,79,30)"/><text x="43.3593%" y="79.50"></text></g><g><title>resolve_lifetimes (1,499,090 samples, 0.11%)</title><rect x="43.1136%" y="53" width="0.1093%" height="15" fill="rgb(246,177,23)"/><text x="43.3636%" y="63.50"></text></g><g><title>explicit_predicates_of (2,940,392 samples, 0.21%)</title><rect x="43.0153%" y="85" width="0.2143%" height="15" fill="rgb(230,62,27)"/><text x="43.2653%" y="95.50"></text></g><g><title>predicates_of (4,302,920 samples, 0.31%)</title><rect x="42.9297%" y="117" width="0.3137%" height="15" fill="rgb(216,154,8)"/><text x="43.1797%" y="127.50"></text></g><g><title>predicates_defined_on (3,845,821 samples, 0.28%)</title><rect x="42.9631%" y="101" width="0.2803%" height="15" fill="rgb(244,35,45)"/><text x="43.2131%" y="111.50"></text></g><g><title>type_collecting (15,072,519 samples, 1.10%)</title><rect x="42.2214%" y="149" width="1.0987%" height="15" fill="rgb(251,115,12)"/><text x="42.4714%" y="159.50"></text></g><g><title>collect_mod_item_types (15,060,609 samples, 1.10%)</title><rect x="42.2223%" y="133" width="1.0978%" height="15" fill="rgb(240,54,50)"/><text x="42.4723%" y="143.50"></text></g><g><title>param_env (6,441,690 samples, 0.47%)</title><rect x="45.0088%" y="117" width="0.4696%" height="15" fill="rgb(233,84,52)"/><text x="45.2588%" y="127.50"></text></g><g><title>region_scope_tree (2,336,655 samples, 0.17%)</title><rect x="45.4816%" y="117" width="0.1703%" height="15" fill="rgb(207,117,47)"/><text x="45.7316%" y="127.50"></text></g><g><title>check_impl_item_well_formed (30,207,013 samples, 2.20%)</title><rect x="43.4548%" y="133" width="2.2019%" height="15" fill="rgb(249,43,39)"/><text x="43.7048%" y="143.50">c..</text></g><g><title>param_env (3,381,661 samples, 0.25%)</title><rect x="48.1843%" y="117" width="0.2465%" height="15" fill="rgb(209,38,44)"/><text x="48.4343%" y="127.50"></text></g><g><title>analysis (526,307,962 samples, 38.37%)</title><rect x="10.1674%" y="181" width="38.3652%" height="15" fill="rgb(236,212,23)"/><text x="10.4174%" y="191.50">analysis</text></g><g><title>type_check_crate (352,631,437 samples, 25.71%)</title><rect x="22.8275%" y="165" width="25.7051%" height="15" fill="rgb(242,79,21)"/><text x="23.0775%" y="175.50">type_check_crate</text></g><g><title>wf_checking (71,463,280 samples, 5.21%)</title><rect x="43.3233%" y="149" width="5.2093%" height="15" fill="rgb(211,96,35)"/><text x="43.5733%" y="159.50">wf_che..</text></g><g><title>check_item_well_formed (39,451,853 samples, 2.88%)</title><rect x="45.6568%" y="133" width="2.8758%" height="15" fill="rgb(253,215,40)"/><text x="45.9068%" y="143.50">ch..</text></g><g><title>param_env (1,847,483 samples, 0.13%)</title><rect x="50.1738%" y="133" width="0.1347%" height="15" fill="rgb(211,81,21)"/><text x="50.4238%" y="143.50"></text></g><g><title>fn_abi_of_instance (5,196,640 samples, 0.38%)</title><rect x="49.9470%" y="149" width="0.3788%" height="15" fill="rgb(208,190,38)"/><text x="50.1970%" y="159.50"></text></g><g><title>codegen_module (24,487,733 samples, 1.79%)</title><rect x="48.6443%" y="165" width="1.7850%" height="15" fill="rgb(235,213,38)"/><text x="48.8943%" y="175.50">c..</text></g><g><title>item_attrs (1,444,307 samples, 0.11%)</title><rect x="50.5347%" y="101" width="0.1053%" height="15" fill="rgb(237,122,38)"/><text x="50.7847%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,414,436 samples, 0.10%)</title><rect x="50.5369%" y="85" width="0.1031%" height="15" fill="rgb(244,218,35)"/><text x="50.7869%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,901,564 samples, 0.14%)</title><rect x="50.5208%" y="117" width="0.1386%" height="15" fill="rgb(240,68,47)"/><text x="50.7708%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,724,729 samples, 0.13%)</title><rect x="50.9566%" y="101" width="0.1257%" height="15" fill="rgb(210,16,53)"/><text x="51.2066%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,232,632 samples, 0.24%)</title><rect x="51.1035%" y="85" width="0.2356%" height="15" fill="rgb(235,124,12)"/><text x="51.3535%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,195,642 samples, 0.23%)</title><rect x="51.1062%" y="69" width="0.2329%" height="15" fill="rgb(224,169,11)"/><text x="51.3562%" y="79.50"></text></g><g><title>eval_to_allocation_raw (3,126,132 samples, 0.23%)</title><rect x="51.1113%" y="53" width="0.2279%" height="15" fill="rgb(250,166,2)"/><text x="51.3613%" y="63.50"></text></g><g><title>optimized_mir (8,873,021 samples, 0.65%)</title><rect x="50.6928%" y="117" width="0.6468%" height="15" fill="rgb(242,216,29)"/><text x="50.9428%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,374,165 samples, 0.25%)</title><rect x="51.0937%" y="101" width="0.2460%" height="15" fill="rgb(230,116,27)"/><text x="51.3437%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,396,887 samples, 0.10%)</title><rect x="51.3749%" y="101" width="0.1018%" height="15" fill="rgb(228,99,48)"/><text x="51.6249%" y="111.50"></text></g><g><title>resolve_instance (3,219,726 samples, 0.23%)</title><rect x="51.3396%" y="117" width="0.2347%" height="15" fill="rgb(253,11,6)"/><text x="51.5896%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (16,833,688 samples, 1.23%)</title><rect x="50.4323%" y="133" width="1.2271%" height="15" fill="rgb(247,143,39)"/><text x="50.6823%" y="143.50"></text></g><g><title>monomorphization_collector (17,033,851 samples, 1.24%)</title><rect x="50.4321%" y="149" width="1.2417%" height="15" fill="rgb(236,97,10)"/><text x="50.6821%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (18,426,727 samples, 1.34%)</title><rect x="50.4298%" y="165" width="1.3432%" height="15" fill="rgb(233,208,19)"/><text x="50.6798%" y="175.50"></text></g><g><title>codegen_crate (44,503,378 samples, 3.24%)</title><rect x="48.5335%" y="181" width="3.2441%" height="15" fill="rgb(216,164,2)"/><text x="48.7835%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (208,641,428 samples, 15.21%)</title><rect x="51.7776%" y="181" width="15.2089%" height="15" fill="rgb(220,129,5)"/><text x="52.0276%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (197,912,718 samples, 14.43%)</title><rect x="52.5597%" y="165" width="14.4268%" height="15" fill="rgb(242,17,10)"/><text x="52.8097%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (72,783,385 samples, 5.31%)</title><rect x="67.4901%" y="165" width="5.3055%" height="15" fill="rgb(242,107,0)"/><text x="67.7401%" y="175.50">LLVM_l..</text></g><g><title>LLVM_module_codegen (80,474,819 samples, 5.87%)</title><rect x="72.7956%" y="165" width="5.8662%" height="15" fill="rgb(251,28,31)"/><text x="73.0456%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (79,188,626 samples, 5.77%)</title><rect x="72.8894%" y="149" width="5.7725%" height="15" fill="rgb(233,223,10)"/><text x="73.1394%" y="159.50">LLVM_mo..</text></g><g><title>LLVM_thin_lto_import (6,332,300 samples, 0.46%)</title><rect x="78.6618%" y="165" width="0.4616%" height="15" fill="rgb(215,21,27)"/><text x="78.9118%" y="175.50"></text></g><g><title>codegen_module_perform_lto (166,809,536 samples, 12.16%)</title><rect x="66.9865%" y="181" width="12.1596%" height="15" fill="rgb(232,23,21)"/><text x="67.2365%" y="191.50">codegen_module_per..</text></g><g><title>macro_expand_crate (35,842,652 samples, 2.61%)</title><rect x="79.2500%" y="165" width="2.6127%" height="15" fill="rgb(244,5,23)"/><text x="79.5000%" y="175.50">ma..</text></g><g><title>expand_crate (35,829,501 samples, 2.61%)</title><rect x="79.2510%" y="149" width="2.6118%" height="15" fill="rgb(226,81,46)"/><text x="79.5010%" y="159.50">ex..</text></g><g><title>late_resolve_crate (10,937,872 samples, 0.80%)</title><rect x="81.9989%" y="149" width="0.7973%" height="15" fill="rgb(247,70,30)"/><text x="82.2489%" y="159.50"></text></g><g><title>configure_and_expand (51,093,982 samples, 3.72%)</title><rect x="79.1461%" y="181" width="3.7245%" height="15" fill="rgb(212,68,19)"/><text x="79.3961%" y="191.50">conf..</text></g><g><title>resolve_crate (12,497,220 samples, 0.91%)</title><rect x="81.9596%" y="165" width="0.9110%" height="15" fill="rgb(240,187,13)"/><text x="82.2096%" y="175.50"></text></g><g><title>drop_ast (2,335,046 samples, 0.17%)</title><rect x="82.8706%" y="181" width="0.1702%" height="15" fill="rgb(223,113,26)"/><text x="83.1206%" y="191.50"></text></g><g><title>early_lint_checks (2,275,635 samples, 0.17%)</title><rect x="83.0427%" y="181" width="0.1659%" height="15" fill="rgb(206,192,2)"/><text x="83.2927%" y="191.50"></text></g><g><title>free_global_ctxt (9,091,682 samples, 0.66%)</title><rect x="83.2086%" y="181" width="0.6627%" height="15" fill="rgb(241,108,4)"/><text x="83.4586%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (21,868,512 samples, 1.59%)</title><rect x="86.3614%" y="149" width="1.5941%" height="15" fill="rgb(247,173,49)"/><text x="86.6114%" y="159.50"></text></g><g><title>optimized_mir (42,908,579 samples, 3.13%)</title><rect x="84.8287%" y="165" width="3.1278%" height="15" fill="rgb(224,114,35)"/><text x="85.0787%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (57,001,528 samples, 4.16%)</title><rect x="83.8713%" y="181" width="4.1551%" height="15" fill="rgb(245,159,27)"/><text x="84.1213%" y="191.50">gener..</text></g><g><title>hir_lowering (23,406,703 samples, 1.71%)</title><rect x="88.0264%" y="181" width="1.7062%" height="15" fill="rgb(245,172,44)"/><text x="88.2764%" y="191.50"></text></g><g><title>finish_ongoing_codegen (109,688,848 samples, 8.00%)</title><rect x="89.7341%" y="165" width="7.9958%" height="15" fill="rgb(236,23,11)"/><text x="89.9841%" y="175.50">finish_ongo..</text></g><g><title>link_crate (5,010,236 samples, 0.37%)</title><rect x="97.7299%" y="165" width="0.3652%" height="15" fill="rgb(205,117,38)"/><text x="97.9799%" y="175.50"></text></g><g><title>link_binary (4,972,155 samples, 0.36%)</title><rect x="97.7327%" y="149" width="0.3624%" height="15" fill="rgb(237,72,25)"/><text x="97.9827%" y="159.50"></text></g><g><title>link_rlib (3,986,294 samples, 0.29%)</title><rect x="97.8045%" y="133" width="0.2906%" height="15" fill="rgb(244,70,9)"/><text x="98.0545%" y="143.50"></text></g><g><title>link (114,732,235 samples, 8.36%)</title><rect x="89.7327%" y="181" width="8.3634%" height="15" fill="rgb(217,125,39)"/><text x="89.9827%" y="191.50">link</text></g><g><title>parse_crate (21,249,517 samples, 1.55%)</title><rect x="98.0961%" y="181" width="1.5490%" height="15" fill="rgb(235,36,10)"/><text x="98.3461%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (3,636,941 samples, 0.27%)</title><rect x="99.6651%" y="181" width="0.2651%" height="15" fill="rgb(251,123,47)"/><text x="99.9151%" y="191.50"></text></g><g><title>all (1,371,836,917 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(221,13,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,371,836,917 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>