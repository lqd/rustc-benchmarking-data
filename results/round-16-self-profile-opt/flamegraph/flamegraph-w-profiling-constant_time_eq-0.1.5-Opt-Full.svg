<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (55,229,583 samples, 25.13%)</title><rect x="0.2773%" y="197" width="25.1254%" height="15" fill="rgb(227,0,7)"/><text x="0.5273%" y="207.50">LLVM_passes</text></g><g><title>specialization_graph_of (848,349 samples, 0.39%)</title><rect x="28.8409%" y="69" width="0.3859%" height="15" fill="rgb(217,0,24)"/><text x="29.0909%" y="79.50"></text></g><g><title>impl_trait_ref (467,305 samples, 0.21%)</title><rect x="29.0142%" y="53" width="0.2126%" height="15" fill="rgb(221,193,54)"/><text x="29.2642%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (410,445 samples, 0.19%)</title><rect x="29.0401%" y="37" width="0.1867%" height="15" fill="rgb(248,212,6)"/><text x="29.2901%" y="47.50"></text></g><g><title>resolve_instance (997,911 samples, 0.45%)</title><rect x="28.7835%" y="85" width="0.4540%" height="15" fill="rgb(208,68,35)"/><text x="29.0335%" y="95.50"></text></g><g><title>thir_body (370,783 samples, 0.17%)</title><rect x="29.2406%" y="85" width="0.1687%" height="15" fill="rgb(232,128,0)"/><text x="29.4906%" y="95.50"></text></g><g><title>mir_const (3,501,249 samples, 1.59%)</title><rect x="27.8184%" y="133" width="1.5928%" height="15" fill="rgb(207,160,47)"/><text x="28.0684%" y="143.50"></text></g><g><title>unsafety_check_result (3,081,285 samples, 1.40%)</title><rect x="28.0094%" y="117" width="1.4018%" height="15" fill="rgb(228,23,34)"/><text x="28.2594%" y="127.50"></text></g><g><title>mir_built (2,835,902 samples, 1.29%)</title><rect x="28.1211%" y="101" width="1.2901%" height="15" fill="rgb(218,30,26)"/><text x="28.3711%" y="111.50"></text></g><g><title>mir_promoted (4,508,999 samples, 2.05%)</title><rect x="27.6204%" y="149" width="2.0513%" height="15" fill="rgb(220,122,19)"/><text x="27.8704%" y="159.50">m..</text></g><g><title>mir_const_qualif (572,487 samples, 0.26%)</title><rect x="29.4112%" y="133" width="0.2604%" height="15" fill="rgb(250,228,42)"/><text x="29.6612%" y="143.50"></text></g><g><title>mir_const (446,555 samples, 0.20%)</title><rect x="29.4685%" y="117" width="0.2031%" height="15" fill="rgb(240,193,28)"/><text x="29.7185%" y="127.50"></text></g><g><title>unsafety_check_result (307,354 samples, 0.14%)</title><rect x="29.5318%" y="101" width="0.1398%" height="15" fill="rgb(216,20,37)"/><text x="29.7818%" y="111.50"></text></g><g><title>mir_built (262,024 samples, 0.12%)</title><rect x="29.5524%" y="85" width="0.1192%" height="15" fill="rgb(206,188,39)"/><text x="29.8024%" y="95.50"></text></g><g><title>MIR_borrow_checking (9,712,768 samples, 4.42%)</title><rect x="25.4824%" y="181" width="4.4186%" height="15" fill="rgb(217,207,13)"/><text x="25.7324%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (9,641,978 samples, 4.39%)</title><rect x="25.5147%" y="165" width="4.3864%" height="15" fill="rgb(231,73,38)"/><text x="25.7647%" y="175.50">mir_b..</text></g><g><title>type_op_prove_predicate (316,724 samples, 0.14%)</title><rect x="29.7570%" y="149" width="0.1441%" height="15" fill="rgb(225,20,46)"/><text x="30.0070%" y="159.50"></text></g><g><title>MIR_effect_checking (387,185 samples, 0.18%)</title><rect x="29.9010%" y="181" width="0.1761%" height="15" fill="rgb(210,31,41)"/><text x="30.1510%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (336,134 samples, 0.15%)</title><rect x="29.9243%" y="165" width="0.1529%" height="15" fill="rgb(221,200,47)"/><text x="30.1743%" y="175.50"></text></g><g><title>check_mod_attrs (272,943 samples, 0.12%)</title><rect x="30.1333%" y="165" width="0.1242%" height="15" fill="rgb(226,26,5)"/><text x="30.3833%" y="175.50"></text></g><g><title>misc_checking_1 (527,586 samples, 0.24%)</title><rect x="30.1223%" y="181" width="0.2400%" height="15" fill="rgb(249,33,26)"/><text x="30.3723%" y="191.50"></text></g><g><title>misc_checking_2 (447,395 samples, 0.20%)</title><rect x="30.3623%" y="181" width="0.2035%" height="15" fill="rgb(235,183,28)"/><text x="30.6123%" y="191.50"></text></g><g><title>match_checking (246,643 samples, 0.11%)</title><rect x="30.4536%" y="165" width="0.1122%" height="15" fill="rgb(221,5,38)"/><text x="30.7036%" y="175.50"></text></g><g><title>check_match (226,523 samples, 0.10%)</title><rect x="30.4628%" y="149" width="0.1031%" height="15" fill="rgb(247,18,42)"/><text x="30.7128%" y="159.50"></text></g><g><title>lint_checking (335,174 samples, 0.15%)</title><rect x="30.6657%" y="165" width="0.1525%" height="15" fill="rgb(241,131,45)"/><text x="30.9157%" y="175.50"></text></g><g><title>misc_checking_3 (818,079 samples, 0.37%)</title><rect x="30.5658%" y="181" width="0.3722%" height="15" fill="rgb(249,31,29)"/><text x="30.8158%" y="191.50"></text></g><g><title>associated_item (429,646 samples, 0.20%)</title><rect x="35.0991%" y="101" width="0.1955%" height="15" fill="rgb(225,111,53)"/><text x="35.3491%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (365,684 samples, 0.17%)</title><rect x="35.1282%" y="85" width="0.1664%" height="15" fill="rgb(238,160,17)"/><text x="35.3782%" y="95.50"></text></g><g><title>associated_items (541,316 samples, 0.25%)</title><rect x="35.0538%" y="117" width="0.2463%" height="15" fill="rgb(214,148,48)"/><text x="35.3038%" y="127.50"></text></g><g><title>dropck_outlives (256,754 samples, 0.12%)</title><rect x="35.3139%" y="117" width="0.1168%" height="15" fill="rgb(232,36,49)"/><text x="35.5639%" y="127.50"></text></g><g><title>generics_of (325,322 samples, 0.15%)</title><rect x="36.1699%" y="101" width="0.1480%" height="15" fill="rgb(209,103,24)"/><text x="36.4199%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (252,252 samples, 0.11%)</title><rect x="36.2031%" y="85" width="0.1148%" height="15" fill="rgb(229,88,8)"/><text x="36.4531%" y="95.50"></text></g><g><title>impl_trait_ref (488,688 samples, 0.22%)</title><rect x="36.3537%" y="101" width="0.2223%" height="15" fill="rgb(213,181,19)"/><text x="36.6037%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (412,127 samples, 0.19%)</title><rect x="36.3885%" y="85" width="0.1875%" height="15" fill="rgb(254,191,54)"/><text x="36.6385%" y="95.50"></text></g><g><title>predicates_of (299,303 samples, 0.14%)</title><rect x="36.5883%" y="101" width="0.1362%" height="15" fill="rgb(241,83,37)"/><text x="36.8383%" y="111.50"></text></g><g><title>specializes (584,765 samples, 0.27%)</title><rect x="36.7245%" y="101" width="0.2660%" height="15" fill="rgb(233,36,39)"/><text x="36.9745%" y="111.50"></text></g><g><title>param_env (406,994 samples, 0.19%)</title><rect x="36.8054%" y="85" width="0.1852%" height="15" fill="rgb(226,3,54)"/><text x="37.0554%" y="95.50"></text></g><g><title>def_span (251,883 samples, 0.11%)</title><rect x="36.8759%" y="69" width="0.1146%" height="15" fill="rgb(245,192,40)"/><text x="37.1259%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (237,873 samples, 0.11%)</title><rect x="36.8823%" y="53" width="0.1082%" height="15" fill="rgb(238,167,29)"/><text x="37.1323%" y="63.50"></text></g><g><title>trait_impls_of (334,624 samples, 0.15%)</title><rect x="36.9975%" y="101" width="0.1522%" height="15" fill="rgb(232,182,51)"/><text x="37.2475%" y="111.50"></text></g><g><title>evaluate_obligation (3,785,993 samples, 1.72%)</title><rect x="35.4307%" y="117" width="1.7223%" height="15" fill="rgb(231,60,39)"/><text x="35.6807%" y="127.50"></text></g><g><title>impl_item_implementor_ids (265,472 samples, 0.12%)</title><rect x="37.2761%" y="117" width="0.1208%" height="15" fill="rgb(208,69,12)"/><text x="37.5261%" y="127.50"></text></g><g><title>associated_items (235,462 samples, 0.11%)</title><rect x="37.2897%" y="101" width="0.1071%" height="15" fill="rgb(235,93,37)"/><text x="37.5397%" y="111.50"></text></g><g><title>param_env (272,984 samples, 0.12%)</title><rect x="37.5836%" y="117" width="0.1242%" height="15" fill="rgb(213,116,39)"/><text x="37.8336%" y="127.50"></text></g><g><title>predicates_of (328,233 samples, 0.15%)</title><rect x="37.7088%" y="117" width="0.1493%" height="15" fill="rgb(222,207,29)"/><text x="37.9588%" y="127.50"></text></g><g><title>item_bodies_checking (15,521,282 samples, 7.06%)</title><rect x="30.9728%" y="165" width="7.0610%" height="15" fill="rgb(206,96,30)"/><text x="31.2228%" y="175.50">item_bodi..</text></g><g><title>typeck_item_bodies (15,517,722 samples, 7.06%)</title><rect x="30.9744%" y="149" width="7.0594%" height="15" fill="rgb(218,138,4)"/><text x="31.2244%" y="159.50">typeck_it..</text></g><g><title>typeck (15,470,532 samples, 7.04%)</title><rect x="30.9959%" y="133" width="7.0379%" height="15" fill="rgb(250,191,14)"/><text x="31.2459%" y="143.50">typeck</text></g><g><title>type_collecting (597,677 samples, 0.27%)</title><rect x="38.0366%" y="165" width="0.2719%" height="15" fill="rgb(239,60,40)"/><text x="38.2866%" y="175.50"></text></g><g><title>collect_mod_item_types (588,287 samples, 0.27%)</title><rect x="38.0409%" y="149" width="0.2676%" height="15" fill="rgb(206,27,48)"/><text x="38.2909%" y="159.50"></text></g><g><title>param_env (229,481 samples, 0.10%)</title><rect x="38.7104%" y="133" width="0.1044%" height="15" fill="rgb(225,35,8)"/><text x="38.9604%" y="143.50"></text></g><g><title>analysis (29,601,659 samples, 13.47%)</title><rect x="25.4027%" y="197" width="13.4666%" height="15" fill="rgb(250,213,24)"/><text x="25.6527%" y="207.50">analysis</text></g><g><title>type_check_crate (17,434,103 samples, 7.93%)</title><rect x="30.9380%" y="181" width="7.9312%" height="15" fill="rgb(247,123,22)"/><text x="31.1880%" y="191.50">type_check_..</text></g><g><title>wf_checking (1,228,984 samples, 0.56%)</title><rect x="38.3101%" y="165" width="0.5591%" height="15" fill="rgb(231,138,38)"/><text x="38.5601%" y="175.50"></text></g><g><title>check_item_well_formed (1,186,304 samples, 0.54%)</title><rect x="38.3295%" y="149" width="0.5397%" height="15" fill="rgb(231,145,46)"/><text x="38.5795%" y="159.50"></text></g><g><title>param_env (347,626 samples, 0.16%)</title><rect x="40.1966%" y="149" width="0.1581%" height="15" fill="rgb(251,118,11)"/><text x="40.4466%" y="159.50"></text></g><g><title>fn_abi_of_instance (982,042 samples, 0.45%)</title><rect x="39.9433%" y="165" width="0.4468%" height="15" fill="rgb(217,147,25)"/><text x="40.1933%" y="175.50"></text></g><g><title>codegen_module (3,077,063 samples, 1.40%)</title><rect x="39.0710%" y="181" width="1.3998%" height="15" fill="rgb(247,81,37)"/><text x="39.3210%" y="191.50"></text></g><g><title>item_attrs (396,908 samples, 0.18%)</title><rect x="40.6954%" y="117" width="0.1806%" height="15" fill="rgb(209,12,38)"/><text x="40.9454%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (383,778 samples, 0.17%)</title><rect x="40.7013%" y="101" width="0.1746%" height="15" fill="rgb(227,1,9)"/><text x="40.9513%" y="111.50"></text></g><g><title>codegen_fn_attrs (694,811 samples, 0.32%)</title><rect x="40.6529%" y="133" width="0.3161%" height="15" fill="rgb(248,47,43)"/><text x="40.9029%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (387,372 samples, 0.18%)</title><rect x="41.4287%" y="117" width="0.1762%" height="15" fill="rgb(221,10,30)"/><text x="41.6787%" y="127.50"></text></g><g><title>optimized_mir (1,757,927 samples, 0.80%)</title><rect x="41.0696%" y="133" width="0.7997%" height="15" fill="rgb(210,229,1)"/><text x="41.3196%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (581,106 samples, 0.26%)</title><rect x="41.6049%" y="117" width="0.2644%" height="15" fill="rgb(222,148,37)"/><text x="41.8549%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (715,297 samples, 0.33%)</title><rect x="41.9627%" y="117" width="0.3254%" height="15" fill="rgb(234,67,33)"/><text x="42.2127%" y="127.50"></text></g><g><title>impl_parent (388,153 samples, 0.18%)</title><rect x="42.7092%" y="101" width="0.1766%" height="15" fill="rgb(247,98,35)"/><text x="42.9592%" y="111.50"></text></g><g><title>specialization_graph_of (2,244,855 samples, 1.02%)</title><rect x="42.3819%" y="117" width="1.0212%" height="15" fill="rgb(247,138,52)"/><text x="42.6319%" y="127.50"></text></g><g><title>impl_trait_ref (1,137,082 samples, 0.52%)</title><rect x="42.8858%" y="101" width="0.5173%" height="15" fill="rgb(213,79,30)"/><text x="43.1358%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (966,401 samples, 0.44%)</title><rect x="42.9635%" y="85" width="0.4396%" height="15" fill="rgb(246,177,23)"/><text x="43.2135%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (6,491,012 samples, 2.95%)</title><rect x="40.4912%" y="149" width="2.9529%" height="15" fill="rgb(230,62,27)"/><text x="40.7412%" y="159.50">mon..</text></g><g><title>resolve_instance (3,461,759 samples, 1.57%)</title><rect x="41.8693%" y="133" width="1.5748%" height="15" fill="rgb(216,154,8)"/><text x="42.1193%" y="143.50"></text></g><g><title>monomorphization_collector (6,530,653 samples, 2.97%)</title><rect x="40.4895%" y="165" width="2.9710%" height="15" fill="rgb(244,35,45)"/><text x="40.7395%" y="175.50">mon..</text></g><g><title>assert_symbols_are_distinct (241,733 samples, 0.11%)</title><rect x="43.4636%" y="149" width="0.1100%" height="15" fill="rgb(251,115,12)"/><text x="43.7136%" y="159.50"></text></g><g><title>symbol_name (227,013 samples, 0.10%)</title><rect x="43.4703%" y="133" width="0.1033%" height="15" fill="rgb(240,54,50)"/><text x="43.7203%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (6,864,526 samples, 3.12%)</title><rect x="40.4710%" y="181" width="3.1229%" height="15" fill="rgb(233,84,52)"/><text x="40.7210%" y="191.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (293,273 samples, 0.13%)</title><rect x="43.4605%" y="165" width="0.1334%" height="15" fill="rgb(207,117,47)"/><text x="43.7105%" y="175.50"></text></g><g><title>codegen_crate (10,397,005 samples, 4.73%)</title><rect x="38.8737%" y="197" width="4.7299%" height="15" fill="rgb(249,43,39)"/><text x="39.1237%" y="207.50">codege..</text></g><g><title>codegen_module_optimize (17,984,079 samples, 8.18%)</title><rect x="43.6036%" y="197" width="8.1814%" height="15" fill="rgb(209,38,44)"/><text x="43.8536%" y="207.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (17,371,783 samples, 7.90%)</title><rect x="43.8821%" y="181" width="7.9029%" height="15" fill="rgb(236,212,23)"/><text x="44.1321%" y="191.50">LLVM_module..</text></g><g><title>LLVM_lto_optimize (17,098,260 samples, 7.78%)</title><rect x="52.1198%" y="181" width="7.7784%" height="15" fill="rgb(242,79,21)"/><text x="52.3698%" y="191.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (18,765,349 samples, 8.54%)</title><rect x="59.8983%" y="181" width="8.5368%" height="15" fill="rgb(211,96,35)"/><text x="60.1483%" y="191.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (18,591,337 samples, 8.46%)</title><rect x="59.9774%" y="165" width="8.4577%" height="15" fill="rgb(253,215,40)"/><text x="60.2274%" y="175.50">LLVM_module_..</text></g><g><title>codegen_module_perform_lto (36,666,857 samples, 16.68%)</title><rect x="51.7850%" y="197" width="16.6807%" height="15" fill="rgb(211,81,21)"/><text x="52.0350%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (7,166,840 samples, 3.26%)</title><rect x="68.6448%" y="181" width="3.2604%" height="15" fill="rgb(208,190,38)"/><text x="68.8948%" y="191.50">mac..</text></g><g><title>expand_crate (7,144,839 samples, 3.25%)</title><rect x="68.6548%" y="165" width="3.2504%" height="15" fill="rgb(235,213,38)"/><text x="68.9048%" y="175.50">exp..</text></g><g><title>finalize_macro_resolutions (267,123 samples, 0.12%)</title><rect x="71.9545%" y="165" width="0.1215%" height="15" fill="rgb(237,122,38)"/><text x="72.2045%" y="175.50"></text></g><g><title>late_resolve_crate (582,956 samples, 0.27%)</title><rect x="72.0760%" y="165" width="0.2652%" height="15" fill="rgb(244,218,35)"/><text x="72.3260%" y="175.50"></text></g><g><title>configure_and_expand (8,564,865 samples, 3.90%)</title><rect x="68.4657%" y="197" width="3.8964%" height="15" fill="rgb(240,68,47)"/><text x="68.7157%" y="207.50">conf..</text></g><g><title>resolve_crate (917,950 samples, 0.42%)</title><rect x="71.9445%" y="181" width="0.4176%" height="15" fill="rgb(210,16,53)"/><text x="72.1945%" y="191.50"></text></g><g><title>free_global_ctxt (1,217,224 samples, 0.55%)</title><rect x="72.4496%" y="197" width="0.5537%" height="15" fill="rgb(235,124,12)"/><text x="72.6996%" y="207.50"></text></g><g><title>optimized_mir (896,409 samples, 0.41%)</title><rect x="73.4417%" y="181" width="0.4078%" height="15" fill="rgb(224,169,11)"/><text x="73.6917%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (316,432 samples, 0.14%)</title><rect x="73.7056%" y="165" width="0.1440%" height="15" fill="rgb(250,166,2)"/><text x="73.9556%" y="175.50"></text></g><g><title>generate_crate_metadata (1,908,181 samples, 0.87%)</title><rect x="73.0033%" y="197" width="0.8681%" height="15" fill="rgb(242,216,29)"/><text x="73.2533%" y="207.50"></text></g><g><title>hir_lowering (842,360 samples, 0.38%)</title><rect x="73.8714%" y="197" width="0.3832%" height="15" fill="rgb(230,116,27)"/><text x="74.1214%" y="207.50"></text></g><g><title>finish_ongoing_codegen (53,715,206 samples, 24.44%)</title><rect x="74.2602%" y="181" width="24.4364%" height="15" fill="rgb(228,99,48)"/><text x="74.5102%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (546,506 samples, 0.25%)</title><rect x="98.6967%" y="181" width="0.2486%" height="15" fill="rgb(253,11,6)"/><text x="98.9467%" y="191.50"></text></g><g><title>link_binary (542,126 samples, 0.25%)</title><rect x="98.6987%" y="165" width="0.2466%" height="15" fill="rgb(247,143,39)"/><text x="98.9487%" y="175.50"></text></g><g><title>link_rlib (310,294 samples, 0.14%)</title><rect x="98.8041%" y="149" width="0.1412%" height="15" fill="rgb(236,97,10)"/><text x="99.0541%" y="159.50"></text></g><g><title>link (54,280,382 samples, 24.69%)</title><rect x="74.2546%" y="197" width="24.6936%" height="15" fill="rgb(233,208,19)"/><text x="74.5046%" y="207.50">link</text></g><g><title>parse_crate (963,851 samples, 0.44%)</title><rect x="98.9482%" y="197" width="0.4385%" height="15" fill="rgb(216,164,2)"/><text x="99.1982%" y="207.50"></text></g><g><title>prepare_outputs (342,604 samples, 0.16%)</title><rect x="99.3904%" y="197" width="0.1559%" height="15" fill="rgb(220,129,5)"/><text x="99.6404%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (340,694 samples, 0.15%)</title><rect x="99.5462%" y="197" width="0.1550%" height="15" fill="rgb(242,17,10)"/><text x="99.7962%" y="207.50"></text></g><g><title>all (219,815,959 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (219,815,959 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (537,206 samples, 0.24%)</title><rect x="99.7556%" y="197" width="0.2444%" height="15" fill="rgb(233,223,10)"/><text x="100.0056%" y="207.50"></text></g></svg></svg>