<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (895,792,930 samples, 11.89%)</title><rect x="0.0146%" y="149" width="11.8915%" height="15" fill="rgb(227,0,7)"/><text x="0.2646%" y="159.50">LLVM_passes</text></g><g><title>needs_drop_raw (7,621,759 samples, 0.10%)</title><rect x="16.1059%" y="37" width="0.1012%" height="15" fill="rgb(217,0,24)"/><text x="16.3559%" y="47.50"></text></g><g><title>thir_body (28,853,034 samples, 0.38%)</title><rect x="16.3066%" y="37" width="0.3830%" height="15" fill="rgb(221,193,54)"/><text x="16.5566%" y="47.50"></text></g><g><title>mir_const (128,705,833 samples, 1.71%)</title><rect x="14.9861%" y="85" width="1.7085%" height="15" fill="rgb(248,212,6)"/><text x="15.2361%" y="95.50"></text></g><g><title>unsafety_check_result (115,005,455 samples, 1.53%)</title><rect x="15.1680%" y="69" width="1.5267%" height="15" fill="rgb(208,68,35)"/><text x="15.4180%" y="79.50"></text></g><g><title>mir_built (106,053,069 samples, 1.41%)</title><rect x="15.2868%" y="53" width="1.4078%" height="15" fill="rgb(232,128,0)"/><text x="15.5368%" y="63.50"></text></g><g><title>mir_const_qualif (11,037,123 samples, 0.15%)</title><rect x="16.6946%" y="85" width="0.1465%" height="15" fill="rgb(207,160,47)"/><text x="16.9446%" y="95.50"></text></g><g><title>mir_promoted (151,715,523 samples, 2.01%)</title><rect x="14.8272%" y="101" width="2.0140%" height="15" fill="rgb(228,23,34)"/><text x="15.0772%" y="111.50">m..</text></g><g><title>type_op_prove_predicate (22,534,302 samples, 0.30%)</title><rect x="16.9846%" y="101" width="0.2991%" height="15" fill="rgb(218,30,26)"/><text x="17.2346%" y="111.50"></text></g><g><title>MIR_borrow_checking (401,402,481 samples, 5.33%)</title><rect x="11.9555%" y="133" width="5.3285%" height="15" fill="rgb(220,122,19)"/><text x="12.2055%" y="143.50">MIR_bor..</text></g><g><title>mir_borrowck (399,535,368 samples, 5.30%)</title><rect x="11.9803%" y="117" width="5.3038%" height="15" fill="rgb(250,228,42)"/><text x="12.2303%" y="127.50">mir_bo..</text></g><g><title>misc_checking_1 (16,370,676 samples, 0.22%)</title><rect x="17.3626%" y="133" width="0.2173%" height="15" fill="rgb(240,193,28)"/><text x="17.6126%" y="143.50"></text></g><g><title>misc_checking_2 (15,499,046 samples, 0.21%)</title><rect x="17.5799%" y="133" width="0.2057%" height="15" fill="rgb(216,20,37)"/><text x="17.8299%" y="143.50"></text></g><g><title>match_checking (8,105,992 samples, 0.11%)</title><rect x="17.6781%" y="117" width="0.1076%" height="15" fill="rgb(206,188,39)"/><text x="17.9281%" y="127.50"></text></g><g><title>check_match (7,569,484 samples, 0.10%)</title><rect x="17.6852%" y="101" width="0.1005%" height="15" fill="rgb(217,207,13)"/><text x="17.9352%" y="111.50"></text></g><g><title>crate_lints (15,183,503 samples, 0.20%)</title><rect x="17.9046%" y="101" width="0.2016%" height="15" fill="rgb(231,73,38)"/><text x="18.1546%" y="111.50"></text></g><g><title>lint_checking (25,446,490 samples, 0.34%)</title><rect x="17.9046%" y="117" width="0.3378%" height="15" fill="rgb(225,20,46)"/><text x="18.1546%" y="127.50"></text></g><g><title>module_lints (10,259,337 samples, 0.14%)</title><rect x="18.1062%" y="101" width="0.1362%" height="15" fill="rgb(210,31,41)"/><text x="18.3562%" y="111.50"></text></g><g><title>lint_mod (10,231,307 samples, 0.14%)</title><rect x="18.1065%" y="85" width="0.1358%" height="15" fill="rgb(221,200,47)"/><text x="18.3565%" y="95.50"></text></g><g><title>privacy_checking_modules (14,304,362 samples, 0.19%)</title><rect x="18.3210%" y="117" width="0.1899%" height="15" fill="rgb(226,26,5)"/><text x="18.5710%" y="127.50"></text></g><g><title>check_mod_privacy (14,281,932 samples, 0.19%)</title><rect x="18.3213%" y="101" width="0.1896%" height="15" fill="rgb(249,33,26)"/><text x="18.5713%" y="111.50"></text></g><g><title>misc_checking_3 (54,802,222 samples, 0.73%)</title><rect x="17.7857%" y="133" width="0.7275%" height="15" fill="rgb(235,183,28)"/><text x="18.0357%" y="143.50"></text></g><g><title>impl_trait_ref (7,717,319 samples, 0.10%)</title><rect x="18.6900%" y="69" width="0.1024%" height="15" fill="rgb(221,5,38)"/><text x="18.9400%" y="79.50"></text></g><g><title>coherent_trait (22,204,492 samples, 0.29%)</title><rect x="18.5264%" y="101" width="0.2948%" height="15" fill="rgb(247,18,42)"/><text x="18.7764%" y="111.50"></text></g><g><title>specialization_graph_of (21,593,286 samples, 0.29%)</title><rect x="18.5345%" y="85" width="0.2866%" height="15" fill="rgb(241,131,45)"/><text x="18.7845%" y="95.50"></text></g><g><title>coherence_checking (22,762,259 samples, 0.30%)</title><rect x="18.5258%" y="117" width="0.3022%" height="15" fill="rgb(249,31,29)"/><text x="18.7758%" y="127.50"></text></g><g><title>evaluate_obligation (19,553,992 samples, 0.26%)</title><rect x="21.5585%" y="69" width="0.2596%" height="15" fill="rgb(225,111,53)"/><text x="21.8085%" y="79.50"></text></g><g><title>typeck (618,062,558 samples, 8.20%)</title><rect x="21.9124%" y="69" width="8.2047%" height="15" fill="rgb(238,160,17)"/><text x="22.1624%" y="79.50">typeck</text></g><g><title>item_bodies_checking (850,205,001 samples, 11.29%)</title><rect x="18.8351%" y="117" width="11.2863%" height="15" fill="rgb(214,148,48)"/><text x="19.0851%" y="127.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (850,200,861 samples, 11.29%)</title><rect x="18.8351%" y="101" width="11.2863%" height="15" fill="rgb(232,36,49)"/><text x="19.0851%" y="111.50">typeck_item_bodies</text></g><g><title>typeck (848,160,117 samples, 11.26%)</title><rect x="18.8622%" y="85" width="11.2592%" height="15" fill="rgb(209,103,24)"/><text x="19.1122%" y="95.50">typeck</text></g><g><title>evaluate_obligation (7,910,689 samples, 0.11%)</title><rect x="30.3893%" y="69" width="0.1050%" height="15" fill="rgb(229,88,8)"/><text x="30.6393%" y="79.50"></text></g><g><title>item_types_checking (28,415,303 samples, 0.38%)</title><rect x="30.1214%" y="117" width="0.3772%" height="15" fill="rgb(213,181,19)"/><text x="30.3714%" y="127.50"></text></g><g><title>check_mod_item_types (28,390,353 samples, 0.38%)</title><rect x="30.1217%" y="101" width="0.3769%" height="15" fill="rgb(254,191,54)"/><text x="30.3717%" y="111.50"></text></g><g><title>typeck (14,471,716 samples, 0.19%)</title><rect x="30.3065%" y="85" width="0.1921%" height="15" fill="rgb(241,83,37)"/><text x="30.5565%" y="95.50"></text></g><g><title>type_collecting (19,220,269 samples, 0.26%)</title><rect x="30.4988%" y="117" width="0.2551%" height="15" fill="rgb(233,36,39)"/><text x="30.7488%" y="127.50"></text></g><g><title>collect_mod_item_types (19,185,408 samples, 0.25%)</title><rect x="30.4992%" y="101" width="0.2547%" height="15" fill="rgb(226,3,54)"/><text x="30.7492%" y="111.50"></text></g><g><title>check_impl_item_well_formed (35,431,304 samples, 0.47%)</title><rect x="30.7896%" y="101" width="0.4703%" height="15" fill="rgb(245,192,40)"/><text x="31.0396%" y="111.50"></text></g><g><title>check_item_well_formed (28,662,214 samples, 0.38%)</title><rect x="31.2600%" y="101" width="0.3805%" height="15" fill="rgb(238,167,29)"/><text x="31.5100%" y="111.50"></text></g><g><title>analysis (1,486,957,457 samples, 19.74%)</title><rect x="11.9061%" y="149" width="19.7391%" height="15" fill="rgb(232,182,51)"/><text x="12.1561%" y="159.50">analysis</text></g><g><title>type_check_crate (989,241,631 samples, 13.13%)</title><rect x="18.5132%" y="133" width="13.1320%" height="15" fill="rgb(231,60,39)"/><text x="18.7632%" y="143.50">type_check_crate</text></g><g><title>wf_checking (67,022,491 samples, 0.89%)</title><rect x="30.7555%" y="117" width="0.8897%" height="15" fill="rgb(208,69,12)"/><text x="31.0055%" y="127.50"></text></g><g><title>fn_abi_of_instance (32,010,642 samples, 0.42%)</title><rect x="33.9391%" y="117" width="0.4249%" height="15" fill="rgb(235,93,37)"/><text x="34.1891%" y="127.50"></text></g><g><title>codegen_module (208,280,968 samples, 2.76%)</title><rect x="31.6740%" y="133" width="2.7649%" height="15" fill="rgb(213,116,39)"/><text x="31.9240%" y="143.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (52,698,849 samples, 0.70%)</title><rect x="35.3725%" y="69" width="0.6996%" height="15" fill="rgb(222,207,29)"/><text x="35.6225%" y="79.50"></text></g><g><title>optimized_mir (109,038,052 samples, 1.45%)</title><rect x="34.6389%" y="85" width="1.4475%" height="15" fill="rgb(206,96,30)"/><text x="34.8889%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (9,523,525 samples, 0.13%)</title><rect x="36.1286%" y="69" width="0.1264%" height="15" fill="rgb(218,138,4)"/><text x="36.3786%" y="79.50"></text></g><g><title>resolve_instance (16,417,927 samples, 0.22%)</title><rect x="36.0863%" y="85" width="0.2179%" height="15" fill="rgb(250,191,14)"/><text x="36.3363%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (146,723,947 samples, 1.95%)</title><rect x="34.4402%" y="101" width="1.9477%" height="15" fill="rgb(239,60,40)"/><text x="34.6902%" y="111.50">m..</text></g><g><title>monomorphization_collector (147,261,453 samples, 1.95%)</title><rect x="34.4401%" y="117" width="1.9549%" height="15" fill="rgb(206,27,48)"/><text x="34.6901%" y="127.50">m..</text></g><g><title>collect_and_partition_mono_items (156,196,985 samples, 2.07%)</title><rect x="34.4390%" y="133" width="2.0735%" height="15" fill="rgb(225,35,8)"/><text x="34.6890%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (8,850,680 samples, 0.12%)</title><rect x="36.3950%" y="117" width="0.1175%" height="15" fill="rgb(250,213,24)"/><text x="36.6450%" y="127.50"></text></g><g><title>codegen_crate (366,723,108 samples, 4.87%)</title><rect x="31.6453%" y="149" width="4.8682%" height="15" fill="rgb(247,123,22)"/><text x="31.8953%" y="159.50">codege..</text></g><g><title>codegen_module_optimize (1,695,256,893 samples, 22.50%)</title><rect x="36.5135%" y="149" width="22.5042%" height="15" fill="rgb(231,138,38)"/><text x="36.7635%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,632,097,107 samples, 21.67%)</title><rect x="37.3519%" y="133" width="21.6658%" height="15" fill="rgb(231,145,46)"/><text x="37.6019%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (1,020,381,741 samples, 13.55%)</title><rect x="59.6880%" y="133" width="13.5454%" height="15" fill="rgb(251,118,11)"/><text x="59.9380%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (726,900,992 samples, 9.65%)</title><rect x="73.2333%" y="133" width="9.6495%" height="15" fill="rgb(217,147,25)"/><text x="73.4833%" y="143.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (721,423,518 samples, 9.58%)</title><rect x="73.3060%" y="117" width="9.5768%" height="15" fill="rgb(247,81,37)"/><text x="73.5560%" y="127.50">LLVM_module_co..</text></g><g><title>LLVM_thin_lto_import (158,865,347 samples, 2.11%)</title><rect x="82.8828%" y="133" width="2.1089%" height="15" fill="rgb(209,12,38)"/><text x="83.1328%" y="143.50">L..</text></g><g><title>codegen_module_perform_lto (1,960,758,781 samples, 26.03%)</title><rect x="59.0177%" y="149" width="26.0287%" height="15" fill="rgb(227,1,9)"/><text x="59.2677%" y="159.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (203,458,541 samples, 2.70%)</title><rect x="85.1180%" y="133" width="2.7009%" height="15" fill="rgb(248,47,43)"/><text x="85.3680%" y="143.50">ma..</text></g><g><title>expand_crate (203,429,741 samples, 2.70%)</title><rect x="85.1184%" y="117" width="2.7005%" height="15" fill="rgb(221,10,30)"/><text x="85.3684%" y="127.50">ex..</text></g><g><title>late_resolve_crate (17,489,128 samples, 0.23%)</title><rect x="87.8517%" y="117" width="0.2322%" height="15" fill="rgb(210,229,1)"/><text x="88.1017%" y="127.50"></text></g><g><title>configure_and_expand (232,466,492 samples, 3.09%)</title><rect x="85.0465%" y="149" width="3.0860%" height="15" fill="rgb(222,148,37)"/><text x="85.2965%" y="159.50">con..</text></g><g><title>resolve_crate (23,499,087 samples, 0.31%)</title><rect x="87.8205%" y="133" width="0.3119%" height="15" fill="rgb(234,67,33)"/><text x="88.0705%" y="143.50"></text></g><g><title>drop_ast (23,615,199 samples, 0.31%)</title><rect x="88.1324%" y="149" width="0.3135%" height="15" fill="rgb(247,98,35)"/><text x="88.3824%" y="159.50"></text></g><g><title>free_global_ctxt (36,056,120 samples, 0.48%)</title><rect x="88.5441%" y="149" width="0.4786%" height="15" fill="rgb(247,138,52)"/><text x="88.7941%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (30,796,928 samples, 0.41%)</title><rect x="89.7318%" y="117" width="0.4088%" height="15" fill="rgb(213,79,30)"/><text x="89.9818%" y="127.50"></text></g><g><title>optimized_mir (62,598,334 samples, 0.83%)</title><rect x="89.3195%" y="133" width="0.8310%" height="15" fill="rgb(246,177,23)"/><text x="89.5695%" y="143.50"></text></g><g><title>generate_crate_metadata (85,826,945 samples, 1.14%)</title><rect x="89.0227%" y="149" width="1.1393%" height="15" fill="rgb(230,62,27)"/><text x="89.2727%" y="159.50"></text></g><g><title>hir_lowering (45,182,273 samples, 0.60%)</title><rect x="90.1621%" y="149" width="0.5998%" height="15" fill="rgb(216,154,8)"/><text x="90.4121%" y="159.50"></text></g><g><title>finish_ongoing_codegen (677,157,155 samples, 8.99%)</title><rect x="90.7623%" y="133" width="8.9891%" height="15" fill="rgb(244,35,45)"/><text x="91.0123%" y="143.50">finish_ongoin..</text></g><g><title>link_crate (8,345,795 samples, 0.11%)</title><rect x="99.7514%" y="133" width="0.1108%" height="15" fill="rgb(251,115,12)"/><text x="100.0014%" y="143.50"></text></g><g><title>link_binary (8,283,634 samples, 0.11%)</title><rect x="99.7522%" y="117" width="0.1100%" height="15" fill="rgb(240,54,50)"/><text x="100.0022%" y="127.50"></text></g><g><title>link (685,547,590 samples, 9.10%)</title><rect x="90.7619%" y="149" width="9.1005%" height="15" fill="rgb(233,84,52)"/><text x="91.0119%" y="159.50">link</text></g><g><title>all (7,533,058,411 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (7,533,058,411 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(249,43,39)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>