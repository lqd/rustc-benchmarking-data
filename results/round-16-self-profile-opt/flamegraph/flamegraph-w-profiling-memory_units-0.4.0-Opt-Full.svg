<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,299,773 samples, 9.22%)</title><rect x="0.5175%" y="165" width="9.2213%" height="15" fill="rgb(227,0,7)"/><text x="0.7675%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (405,895 samples, 0.23%)</title><rect x="9.5092%" y="149" width="0.2296%" height="15" fill="rgb(217,0,24)"/><text x="9.7592%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (385,575 samples, 0.22%)</title><rect x="9.5207%" y="133" width="0.2181%" height="15" fill="rgb(221,193,54)"/><text x="9.7707%" y="143.50"></text></g><g><title>needs_drop_raw (256,074 samples, 0.14%)</title><rect x="15.8794%" y="53" width="0.1449%" height="15" fill="rgb(248,212,6)"/><text x="16.1294%" y="63.50"></text></g><g><title>thir_body (634,497 samples, 0.36%)</title><rect x="16.1154%" y="53" width="0.3590%" height="15" fill="rgb(208,68,35)"/><text x="16.3654%" y="63.50"></text></g><g><title>mir_const (4,250,894 samples, 2.40%)</title><rect x="14.0780%" y="101" width="2.4049%" height="15" fill="rgb(232,128,0)"/><text x="14.3280%" y="111.50">mi..</text></g><g><title>unsafety_check_result (3,606,040 samples, 2.04%)</title><rect x="14.4428%" y="85" width="2.0401%" height="15" fill="rgb(207,160,47)"/><text x="14.6928%" y="95.50">u..</text></g><g><title>mir_built (3,247,775 samples, 1.84%)</title><rect x="14.6455%" y="69" width="1.8374%" height="15" fill="rgb(228,23,34)"/><text x="14.8955%" y="79.50">m..</text></g><g><title>mir_promoted (5,124,024 samples, 2.90%)</title><rect x="13.7417%" y="117" width="2.8988%" height="15" fill="rgb(218,30,26)"/><text x="13.9917%" y="127.50">mi..</text></g><g><title>mir_const_qualif (278,742 samples, 0.16%)</title><rect x="16.4828%" y="101" width="0.1577%" height="15" fill="rgb(220,122,19)"/><text x="16.7328%" y="111.50"></text></g><g><title>type_op_prove_predicate (261,493 samples, 0.15%)</title><rect x="16.7264%" y="117" width="0.1479%" height="15" fill="rgb(250,228,42)"/><text x="16.9764%" y="127.50"></text></g><g><title>MIR_borrow_checking (12,081,306 samples, 6.83%)</title><rect x="10.0408%" y="149" width="6.8348%" height="15" fill="rgb(240,193,28)"/><text x="10.2908%" y="159.50">MIR_borro..</text></g><g><title>mir_borrowck (11,960,206 samples, 6.77%)</title><rect x="10.1093%" y="133" width="6.7663%" height="15" fill="rgb(216,20,37)"/><text x="10.3593%" y="143.50">mir_borro..</text></g><g><title>MIR_effect_checking (193,022 samples, 0.11%)</title><rect x="16.8756%" y="149" width="0.1092%" height="15" fill="rgb(206,188,39)"/><text x="17.1256%" y="159.50"></text></g><g><title>hir_module_items (388,614 samples, 0.22%)</title><rect x="16.9848%" y="149" width="0.2199%" height="15" fill="rgb(217,207,13)"/><text x="17.2348%" y="159.50"></text></g><g><title>codegen_fn_attrs (211,413 samples, 0.12%)</title><rect x="17.8334%" y="85" width="0.1196%" height="15" fill="rgb(231,73,38)"/><text x="18.0834%" y="95.50"></text></g><g><title>should_inherit_track_caller (472,838 samples, 0.27%)</title><rect x="17.6943%" y="101" width="0.2675%" height="15" fill="rgb(225,20,46)"/><text x="17.9443%" y="111.50"></text></g><g><title>codegen_fn_attrs (847,080 samples, 0.48%)</title><rect x="17.5006%" y="117" width="0.4792%" height="15" fill="rgb(210,31,41)"/><text x="17.7506%" y="127.50"></text></g><g><title>check_mod_attrs (1,329,326 samples, 0.75%)</title><rect x="17.2280%" y="133" width="0.7520%" height="15" fill="rgb(221,200,47)"/><text x="17.4780%" y="143.50"></text></g><g><title>check_mod_const_bodies (232,153 samples, 0.13%)</title><rect x="17.9800%" y="133" width="0.1313%" height="15" fill="rgb(226,26,5)"/><text x="18.2300%" y="143.50"></text></g><g><title>lookup_deprecation_entry (224,003 samples, 0.13%)</title><rect x="18.3790%" y="117" width="0.1267%" height="15" fill="rgb(249,33,26)"/><text x="18.6290%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (686,598 samples, 0.39%)</title><rect x="18.1858%" y="133" width="0.3884%" height="15" fill="rgb(235,183,28)"/><text x="18.4358%" y="143.50"></text></g><g><title>misc_checking_1 (2,535,209 samples, 1.43%)</title><rect x="17.2049%" y="149" width="1.4343%" height="15" fill="rgb(221,5,38)"/><text x="17.4549%" y="159.50"></text></g><g><title>misc_checking_2 (594,646 samples, 0.34%)</title><rect x="18.6392%" y="149" width="0.3364%" height="15" fill="rgb(247,18,42)"/><text x="18.8892%" y="159.50"></text></g><g><title>match_checking (418,594 samples, 0.24%)</title><rect x="18.7388%" y="133" width="0.2368%" height="15" fill="rgb(241,131,45)"/><text x="18.9888%" y="143.50"></text></g><g><title>check_match (391,854 samples, 0.22%)</title><rect x="18.7539%" y="117" width="0.2217%" height="15" fill="rgb(249,31,29)"/><text x="19.0039%" y="127.50"></text></g><g><title>check_private_in_public (179,322 samples, 0.10%)</title><rect x="18.9808%" y="133" width="0.1014%" height="15" fill="rgb(225,111,53)"/><text x="19.2308%" y="143.50"></text></g><g><title>death_checking (476,265 samples, 0.27%)</title><rect x="19.0822%" y="133" width="0.2694%" height="15" fill="rgb(238,160,17)"/><text x="19.3322%" y="143.50"></text></g><g><title>crate_lints (791,089 samples, 0.45%)</title><rect x="19.3525%" y="117" width="0.4475%" height="15" fill="rgb(214,148,48)"/><text x="19.6025%" y="127.50"></text></g><g><title>type_of (331,135 samples, 0.19%)</title><rect x="19.6127%" y="101" width="0.1873%" height="15" fill="rgb(232,36,49)"/><text x="19.8627%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (253,404 samples, 0.14%)</title><rect x="19.6567%" y="85" width="0.1434%" height="15" fill="rgb(209,103,24)"/><text x="19.9067%" y="95.50"></text></g><g><title>lint_checking (1,013,232 samples, 0.57%)</title><rect x="19.3517%" y="133" width="0.5732%" height="15" fill="rgb(229,88,8)"/><text x="19.6017%" y="143.50"></text></g><g><title>module_lints (220,653 samples, 0.12%)</title><rect x="19.8001%" y="117" width="0.1248%" height="15" fill="rgb(213,181,19)"/><text x="20.0501%" y="127.50"></text></g><g><title>lint_mod (217,773 samples, 0.12%)</title><rect x="19.8017%" y="101" width="0.1232%" height="15" fill="rgb(254,191,54)"/><text x="20.0517%" y="111.50"></text></g><g><title>privacy_access_levels (257,983 samples, 0.15%)</title><rect x="19.9249%" y="133" width="0.1459%" height="15" fill="rgb(241,83,37)"/><text x="20.1749%" y="143.50"></text></g><g><title>privacy_checking_modules (497,205 samples, 0.28%)</title><rect x="20.0709%" y="133" width="0.2813%" height="15" fill="rgb(233,36,39)"/><text x="20.3209%" y="143.50"></text></g><g><title>check_mod_privacy (494,325 samples, 0.28%)</title><rect x="20.0725%" y="117" width="0.2797%" height="15" fill="rgb(226,3,54)"/><text x="20.3225%" y="127.50"></text></g><g><title>misc_checking_3 (2,451,867 samples, 1.39%)</title><rect x="18.9756%" y="149" width="1.3871%" height="15" fill="rgb(245,192,40)"/><text x="19.2256%" y="159.50"></text></g><g><title>impl_parent (2,433,864 samples, 1.38%)</title><rect x="22.8819%" y="85" width="1.3769%" height="15" fill="rgb(238,167,29)"/><text x="23.1319%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,049,892 samples, 0.59%)</title><rect x="23.6649%" y="69" width="0.5940%" height="15" fill="rgb(232,182,51)"/><text x="23.9149%" y="79.50"></text></g><g><title>impl_trait_ref (4,163,453 samples, 2.36%)</title><rect x="24.2588%" y="85" width="2.3554%" height="15" fill="rgb(231,60,39)"/><text x="24.5088%" y="95.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,123,010 samples, 1.77%)</title><rect x="24.8474%" y="69" width="1.7668%" height="15" fill="rgb(208,69,12)"/><text x="25.0974%" y="79.50"></text></g><g><title>trait_impls_of (767,117 samples, 0.43%)</title><rect x="26.6333%" y="85" width="0.4340%" height="15" fill="rgb(235,93,37)"/><text x="26.8833%" y="95.50"></text></g><g><title>implementations_of_trait (218,343 samples, 0.12%)</title><rect x="26.9438%" y="69" width="0.1235%" height="15" fill="rgb(213,116,39)"/><text x="27.1938%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (197,493 samples, 0.11%)</title><rect x="26.9555%" y="53" width="0.1117%" height="15" fill="rgb(222,207,29)"/><text x="27.2055%" y="63.50"></text></g><g><title>coherent_trait (11,768,222 samples, 6.66%)</title><rect x="20.4103%" y="117" width="6.6577%" height="15" fill="rgb(206,96,30)"/><text x="20.6603%" y="127.50">coherent_..</text></g><g><title>specialization_graph_of (11,424,029 samples, 6.46%)</title><rect x="20.6050%" y="101" width="6.4629%" height="15" fill="rgb(218,138,4)"/><text x="20.8550%" y="111.50">speciali..</text></g><g><title>coherence_checking (11,911,333 samples, 6.74%)</title><rect x="20.3905%" y="133" width="6.7386%" height="15" fill="rgb(250,191,14)"/><text x="20.6405%" y="143.50">coherence..</text></g><g><title>specializes (207,102 samples, 0.12%)</title><rect x="33.2755%" y="69" width="0.1172%" height="15" fill="rgb(239,60,40)"/><text x="33.5255%" y="79.50"></text></g><g><title>param_env (180,162 samples, 0.10%)</title><rect x="33.2908%" y="53" width="0.1019%" height="15" fill="rgb(206,27,48)"/><text x="33.5408%" y="63.50"></text></g><g><title>evaluate_obligation (1,349,690 samples, 0.76%)</title><rect x="32.6305%" y="85" width="0.7636%" height="15" fill="rgb(225,35,8)"/><text x="32.8805%" y="95.50"></text></g><g><title>item_bodies_checking (11,538,940 samples, 6.53%)</title><rect x="27.1936%" y="133" width="6.5280%" height="15" fill="rgb(250,213,24)"/><text x="27.4436%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (11,536,260 samples, 6.53%)</title><rect x="27.1951%" y="117" width="6.5264%" height="15" fill="rgb(247,123,22)"/><text x="27.4451%" y="127.50">typeck_it..</text></g><g><title>typeck (11,457,507 samples, 6.48%)</title><rect x="27.2397%" y="101" width="6.4819%" height="15" fill="rgb(231,138,38)"/><text x="27.4897%" y="111.50">typeck</text></g><g><title>item_types_checking (2,016,203 samples, 1.14%)</title><rect x="33.7216%" y="133" width="1.1406%" height="15" fill="rgb(231,145,46)"/><text x="33.9716%" y="143.50"></text></g><g><title>check_mod_item_types (2,012,303 samples, 1.14%)</title><rect x="33.7238%" y="117" width="1.1384%" height="15" fill="rgb(251,118,11)"/><text x="33.9738%" y="127.50"></text></g><g><title>fn_sig (656,518 samples, 0.37%)</title><rect x="35.2823%" y="101" width="0.3714%" height="15" fill="rgb(217,147,25)"/><text x="35.5323%" y="111.50"></text></g><g><title>named_region_map (794,551 samples, 0.45%)</title><rect x="35.8355%" y="85" width="0.4495%" height="15" fill="rgb(247,81,37)"/><text x="36.0855%" y="95.50"></text></g><g><title>resolve_lifetimes (751,301 samples, 0.43%)</title><rect x="35.8600%" y="69" width="0.4250%" height="15" fill="rgb(209,12,38)"/><text x="36.1100%" y="79.50"></text></g><g><title>lint_levels (290,143 samples, 0.16%)</title><rect x="36.1209%" y="53" width="0.1641%" height="15" fill="rgb(227,1,9)"/><text x="36.3709%" y="63.50"></text></g><g><title>generics_of (1,171,455 samples, 0.66%)</title><rect x="35.6537%" y="101" width="0.6627%" height="15" fill="rgb(248,47,43)"/><text x="35.9037%" y="111.50"></text></g><g><title>impl_trait_ref (269,652 samples, 0.15%)</title><rect x="36.3164%" y="101" width="0.1526%" height="15" fill="rgb(221,10,30)"/><text x="36.5664%" y="111.50"></text></g><g><title>late_bound_vars_map (356,883 samples, 0.20%)</title><rect x="36.9902%" y="53" width="0.2019%" height="15" fill="rgb(210,229,1)"/><text x="37.2402%" y="63.50"></text></g><g><title>resolve_lifetimes (323,302 samples, 0.18%)</title><rect x="37.0092%" y="37" width="0.1829%" height="15" fill="rgb(222,148,37)"/><text x="37.2592%" y="47.50"></text></g><g><title>explicit_predicates_of (881,389 samples, 0.50%)</title><rect x="36.7168%" y="69" width="0.4986%" height="15" fill="rgb(234,67,33)"/><text x="36.9668%" y="79.50"></text></g><g><title>predicates_of (1,446,194 samples, 0.82%)</title><rect x="36.4690%" y="101" width="0.8182%" height="15" fill="rgb(247,98,35)"/><text x="36.7190%" y="111.50"></text></g><g><title>predicates_defined_on (1,283,172 samples, 0.73%)</title><rect x="36.5612%" y="85" width="0.7259%" height="15" fill="rgb(247,138,52)"/><text x="36.8112%" y="95.50"></text></g><g><title>type_collecting (4,512,811 samples, 2.55%)</title><rect x="34.8629%" y="133" width="2.5530%" height="15" fill="rgb(213,79,30)"/><text x="35.1129%" y="143.50">ty..</text></g><g><title>collect_mod_item_types (4,493,631 samples, 2.54%)</title><rect x="34.8737%" y="117" width="2.5422%" height="15" fill="rgb(246,177,23)"/><text x="35.1237%" y="127.50">co..</text></g><g><title>type_of (186,294 samples, 0.11%)</title><rect x="37.3105%" y="101" width="0.1054%" height="15" fill="rgb(230,62,27)"/><text x="37.5605%" y="111.50"></text></g><g><title>evaluate_obligation (195,783 samples, 0.11%)</title><rect x="38.4928%" y="101" width="0.1108%" height="15" fill="rgb(216,154,8)"/><text x="38.7428%" y="111.50"></text></g><g><title>param_env (409,770 samples, 0.23%)</title><rect x="38.6399%" y="101" width="0.2318%" height="15" fill="rgb(244,35,45)"/><text x="38.8899%" y="111.50"></text></g><g><title>check_impl_item_well_formed (2,699,756 samples, 1.53%)</title><rect x="37.5347%" y="117" width="1.5273%" height="15" fill="rgb(251,115,12)"/><text x="37.7847%" y="127.50"></text></g><g><title>region_scope_tree (311,634 samples, 0.18%)</title><rect x="38.8858%" y="101" width="0.1763%" height="15" fill="rgb(240,54,50)"/><text x="39.1358%" y="111.50"></text></g><g><title>evaluate_obligation (488,118 samples, 0.28%)</title><rect x="40.1146%" y="101" width="0.2761%" height="15" fill="rgb(233,84,52)"/><text x="40.3646%" y="111.50"></text></g><g><title>param_env (355,236 samples, 0.20%)</title><rect x="40.4575%" y="101" width="0.2010%" height="15" fill="rgb(207,117,47)"/><text x="40.7075%" y="111.50"></text></g><g><title>check_item_well_formed (3,028,691 samples, 1.71%)</title><rect x="39.0621%" y="117" width="1.7134%" height="15" fill="rgb(249,43,39)"/><text x="39.3121%" y="127.50"></text></g><g><title>analysis (54,918,077 samples, 31.07%)</title><rect x="9.7388%" y="165" width="31.0689%" height="15" fill="rgb(209,38,44)"/><text x="9.9888%" y="175.50">analysis</text></g><g><title>type_check_crate (36,139,157 samples, 20.45%)</title><rect x="20.3627%" y="149" width="20.4451%" height="15" fill="rgb(236,212,23)"/><text x="20.6127%" y="159.50">type_check_crate</text></g><g><title>wf_checking (5,991,107 samples, 3.39%)</title><rect x="37.4184%" y="133" width="3.3894%" height="15" fill="rgb(242,79,21)"/><text x="37.6684%" y="143.50">wf_..</text></g><g><title>fn_abi_of_instance (707,905 samples, 0.40%)</title><rect x="42.2329%" y="133" width="0.4005%" height="15" fill="rgb(211,96,35)"/><text x="42.4829%" y="143.50"></text></g><g><title>codegen_module (2,673,099 samples, 1.51%)</title><rect x="41.1920%" y="149" width="1.5123%" height="15" fill="rgb(253,215,40)"/><text x="41.4420%" y="159.50"></text></g><g><title>optimized_mir (632,227 samples, 0.36%)</title><rect x="42.8615%" y="101" width="0.3577%" height="15" fill="rgb(211,81,21)"/><text x="43.1115%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (220,585 samples, 0.12%)</title><rect x="43.0944%" y="85" width="0.1248%" height="15" fill="rgb(208,190,38)"/><text x="43.3444%" y="95.50"></text></g><g><title>specialization_graph_of (267,162 samples, 0.15%)</title><rect x="43.3337%" y="85" width="0.1511%" height="15" fill="rgb(235,213,38)"/><text x="43.5837%" y="95.50"></text></g><g><title>resolve_instance (486,195 samples, 0.28%)</title><rect x="43.2192%" y="101" width="0.2751%" height="15" fill="rgb(237,122,38)"/><text x="43.4692%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,492,127 samples, 0.84%)</title><rect x="42.7214%" y="117" width="0.8441%" height="15" fill="rgb(244,218,35)"/><text x="42.9714%" y="127.50"></text></g><g><title>monomorphization_collector (1,539,717 samples, 0.87%)</title><rect x="42.7204%" y="133" width="0.8711%" height="15" fill="rgb(240,68,47)"/><text x="42.9704%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,686,789 samples, 0.95%)</title><rect x="42.7051%" y="149" width="0.9543%" height="15" fill="rgb(210,16,53)"/><text x="42.9551%" y="159.50"></text></g><g><title>codegen_crate (5,041,786 samples, 2.85%)</title><rect x="40.8143%" y="165" width="2.8523%" height="15" fill="rgb(235,124,12)"/><text x="41.0643%" y="175.50">co..</text></g><g><title>codegen_module_optimize (17,015,183 samples, 9.63%)</title><rect x="43.6666%" y="165" width="9.6260%" height="15" fill="rgb(224,169,11)"/><text x="43.9166%" y="175.50">codegen_module..</text></g><g><title>LLVM_module_optimize (14,130,579 samples, 7.99%)</title><rect x="45.2985%" y="149" width="7.9941%" height="15" fill="rgb(250,166,2)"/><text x="45.5485%" y="159.50">LLVM_module..</text></g><g><title>LLVM_lto_optimize (7,008,480 samples, 3.96%)</title><rect x="54.3273%" y="149" width="3.9649%" height="15" fill="rgb(242,216,29)"/><text x="54.5773%" y="159.50">LLVM..</text></g><g><title>LLVM_module_codegen (20,240,418 samples, 11.45%)</title><rect x="58.2922%" y="149" width="11.4507%" height="15" fill="rgb(230,116,27)"/><text x="58.5422%" y="159.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (19,892,522 samples, 11.25%)</title><rect x="58.4890%" y="133" width="11.2538%" height="15" fill="rgb(228,99,48)"/><text x="58.7390%" y="143.50">LLVM_module_codeg..</text></g><g><title>codegen_module_perform_lto (29,252,050 samples, 16.55%)</title><rect x="53.2926%" y="165" width="16.5488%" height="15" fill="rgb(253,11,6)"/><text x="53.5426%" y="175.50">codegen_module_perform_lto</text></g><g><title>AST_validation (251,063 samples, 0.14%)</title><rect x="69.9785%" y="149" width="0.1420%" height="15" fill="rgb(247,143,39)"/><text x="70.2285%" y="159.50"></text></g><g><title>macro_expand_crate (16,335,013 samples, 9.24%)</title><rect x="70.2407%" y="149" width="9.2412%" height="15" fill="rgb(236,97,10)"/><text x="70.4907%" y="159.50">macro_expand_..</text></g><g><title>expand_crate (16,306,773 samples, 9.23%)</title><rect x="70.2567%" y="133" width="9.2253%" height="15" fill="rgb(233,208,19)"/><text x="70.5067%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (209,552 samples, 0.12%)</title><rect x="79.3634%" y="117" width="0.1186%" height="15" fill="rgb(216,164,2)"/><text x="79.6134%" y="127.50"></text></g><g><title>finalize_macro_resolutions (601,627 samples, 0.34%)</title><rect x="79.6052%" y="133" width="0.3404%" height="15" fill="rgb(220,129,5)"/><text x="79.8552%" y="143.50"></text></g><g><title>late_resolve_crate (3,447,069 samples, 1.95%)</title><rect x="79.9455%" y="133" width="1.9501%" height="15" fill="rgb(242,17,10)"/><text x="80.1955%" y="143.50">l..</text></g><g><title>configure_and_expand (21,496,441 samples, 12.16%)</title><rect x="69.8415%" y="165" width="12.1612%" height="15" fill="rgb(242,107,0)"/><text x="70.0915%" y="175.50">configure_and_expa..</text></g><g><title>resolve_crate (4,288,668 samples, 2.43%)</title><rect x="79.5765%" y="149" width="2.4262%" height="15" fill="rgb(251,28,31)"/><text x="79.8265%" y="159.50">re..</text></g><g><title>drop_ast (335,184 samples, 0.19%)</title><rect x="82.0027%" y="165" width="0.1896%" height="15" fill="rgb(233,223,10)"/><text x="82.2527%" y="175.50"></text></g><g><title>early_lint_checks (640,957 samples, 0.36%)</title><rect x="82.2001%" y="165" width="0.3626%" height="15" fill="rgb(215,21,27)"/><text x="82.4501%" y="175.50"></text></g><g><title>free_global_ctxt (2,510,508 samples, 1.42%)</title><rect x="82.5627%" y="165" width="1.4203%" height="15" fill="rgb(232,23,21)"/><text x="82.8127%" y="175.50"></text></g><g><title>exported_symbols (227,522 samples, 0.13%)</title><rect x="84.9884%" y="149" width="0.1287%" height="15" fill="rgb(244,5,23)"/><text x="85.2384%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,962,510 samples, 1.11%)</title><rect x="86.4647%" y="133" width="1.1103%" height="15" fill="rgb(226,81,46)"/><text x="86.7147%" y="143.50"></text></g><g><title>optimized_mir (4,510,179 samples, 2.55%)</title><rect x="85.1973%" y="149" width="2.5516%" height="15" fill="rgb(247,70,30)"/><text x="85.4473%" y="159.50">op..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (288,704 samples, 0.16%)</title><rect x="87.5855%" y="133" width="0.1633%" height="15" fill="rgb(212,68,19)"/><text x="87.8355%" y="143.50"></text></g><g><title>generate_crate_metadata (6,724,796 samples, 3.80%)</title><rect x="83.9830%" y="165" width="3.8044%" height="15" fill="rgb(240,187,13)"/><text x="84.2330%" y="175.50">gene..</text></g><g><title>hir_lowering (6,470,913 samples, 3.66%)</title><rect x="87.7874%" y="165" width="3.6608%" height="15" fill="rgb(223,113,26)"/><text x="88.0374%" y="175.50">hir_..</text></g><g><title>finish_ongoing_codegen (11,247,897 samples, 6.36%)</title><rect x="91.4561%" y="149" width="6.3633%" height="15" fill="rgb(206,192,2)"/><text x="91.7061%" y="159.50">finish_o..</text></g><g><title>link_crate (904,270 samples, 0.51%)</title><rect x="97.8194%" y="149" width="0.5116%" height="15" fill="rgb(241,108,4)"/><text x="98.0694%" y="159.50"></text></g><g><title>link_binary (886,930 samples, 0.50%)</title><rect x="97.8292%" y="133" width="0.5018%" height="15" fill="rgb(247,173,49)"/><text x="98.0792%" y="143.50"></text></g><g><title>link_rlib (603,117 samples, 0.34%)</title><rect x="97.9898%" y="117" width="0.3412%" height="15" fill="rgb(224,114,35)"/><text x="98.2398%" y="127.50"></text></g><g><title>link (12,176,497 samples, 6.89%)</title><rect x="91.4482%" y="165" width="6.8886%" height="15" fill="rgb(245,159,27)"/><text x="91.6982%" y="175.50">link</text></g><g><title>parse_crate (1,288,474 samples, 0.73%)</title><rect x="98.3368%" y="165" width="0.7289%" height="15" fill="rgb(245,172,44)"/><text x="98.5868%" y="175.50"></text></g><g><title>prepare_outputs (356,244 samples, 0.20%)</title><rect x="99.0714%" y="165" width="0.2015%" height="15" fill="rgb(236,23,11)"/><text x="99.3214%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (808,739 samples, 0.46%)</title><rect x="99.2730%" y="165" width="0.4575%" height="15" fill="rgb(205,117,38)"/><text x="99.5230%" y="175.50"></text></g><g><title>all (176,761,958 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (176,761,958 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (342,464 samples, 0.19%)</title><rect x="99.8063%" y="165" width="0.1937%" height="15" fill="rgb(217,125,39)"/><text x="100.0563%" y="175.50"></text></g></svg></svg>