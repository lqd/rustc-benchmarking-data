<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (52,288,137 samples, 15.47%)</title><rect x="0.1788%" y="197" width="15.4719%" height="15" fill="rgb(227,0,7)"/><text x="0.4288%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (872,313 samples, 0.26%)</title><rect x="19.2601%" y="69" width="0.2581%" height="15" fill="rgb(217,0,24)"/><text x="19.5101%" y="79.50"></text></g><g><title>evaluate_obligation (779,452 samples, 0.23%)</title><rect x="19.2875%" y="53" width="0.2306%" height="15" fill="rgb(221,193,54)"/><text x="19.5375%" y="63.50"></text></g><g><title>needs_drop_raw (1,195,766 samples, 0.35%)</title><rect x="19.1663%" y="85" width="0.3538%" height="15" fill="rgb(248,212,6)"/><text x="19.4163%" y="95.50"></text></g><g><title>impl_parent (502,485 samples, 0.15%)</title><rect x="19.8990%" y="53" width="0.1487%" height="15" fill="rgb(208,68,35)"/><text x="20.1490%" y="63.50"></text></g><g><title>specialization_graph_of (3,004,224 samples, 0.89%)</title><rect x="19.6256%" y="69" width="0.8889%" height="15" fill="rgb(232,128,0)"/><text x="19.8756%" y="79.50"></text></g><g><title>impl_trait_ref (1,577,766 samples, 0.47%)</title><rect x="20.0477%" y="53" width="0.4669%" height="15" fill="rgb(207,160,47)"/><text x="20.2977%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,394,785 samples, 0.41%)</title><rect x="20.1018%" y="37" width="0.4127%" height="15" fill="rgb(228,23,34)"/><text x="20.3518%" y="47.50"></text></g><g><title>resolve_instance (3,400,268 samples, 1.01%)</title><rect x="19.5201%" y="85" width="1.0061%" height="15" fill="rgb(218,30,26)"/><text x="19.7701%" y="95.50"></text></g><g><title>thir_body (599,377 samples, 0.18%)</title><rect x="20.5279%" y="85" width="0.1774%" height="15" fill="rgb(220,122,19)"/><text x="20.7779%" y="95.50"></text></g><g><title>mir_const (7,889,630 samples, 2.33%)</title><rect x="18.3716%" y="133" width="2.3345%" height="15" fill="rgb(250,228,42)"/><text x="18.6216%" y="143.50">m..</text></g><g><title>unsafety_check_result (7,345,214 samples, 2.17%)</title><rect x="18.5327%" y="117" width="2.1734%" height="15" fill="rgb(240,193,28)"/><text x="18.7827%" y="127.50">u..</text></g><g><title>mir_built (6,953,549 samples, 2.06%)</title><rect x="18.6486%" y="101" width="2.0575%" height="15" fill="rgb(216,20,37)"/><text x="18.8986%" y="111.50">m..</text></g><g><title>mir_promoted (8,541,235 samples, 2.53%)</title><rect x="18.2222%" y="149" width="2.5273%" height="15" fill="rgb(206,188,39)"/><text x="18.4722%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (469,173 samples, 0.14%)</title><rect x="20.7495%" y="149" width="0.1388%" height="15" fill="rgb(217,207,13)"/><text x="20.9995%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,018,324 samples, 0.60%)</title><rect x="20.9996%" y="149" width="0.5972%" height="15" fill="rgb(231,73,38)"/><text x="21.2496%" y="159.50"></text></g><g><title>MIR_borrow_checking (19,828,397 samples, 5.87%)</title><rect x="15.7326%" y="181" width="5.8671%" height="15" fill="rgb(225,20,46)"/><text x="15.9826%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (19,800,007 samples, 5.86%)</title><rect x="15.7410%" y="165" width="5.8587%" height="15" fill="rgb(210,31,41)"/><text x="15.9910%" y="175.50">mir_bor..</text></g><g><title>check_mod_attrs (527,637 samples, 0.16%)</title><rect x="21.6778%" y="165" width="0.1561%" height="15" fill="rgb(221,200,47)"/><text x="21.9278%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (369,054 samples, 0.11%)</title><rect x="21.8776%" y="165" width="0.1092%" height="15" fill="rgb(226,26,5)"/><text x="22.1276%" y="175.50"></text></g><g><title>misc_checking_1 (1,111,642 samples, 0.33%)</title><rect x="21.6695%" y="181" width="0.3289%" height="15" fill="rgb(249,33,26)"/><text x="21.9195%" y="191.50"></text></g><g><title>misc_checking_2 (659,928 samples, 0.20%)</title><rect x="21.9984%" y="181" width="0.1953%" height="15" fill="rgb(235,183,28)"/><text x="22.2484%" y="191.50"></text></g><g><title>crate_lints (2,693,841 samples, 0.80%)</title><rect x="22.2742%" y="149" width="0.7971%" height="15" fill="rgb(221,5,38)"/><text x="22.5242%" y="159.50"></text></g><g><title>type_of (1,940,942 samples, 0.57%)</title><rect x="22.4970%" y="133" width="0.5743%" height="15" fill="rgb(247,18,42)"/><text x="22.7470%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,697,837 samples, 0.50%)</title><rect x="22.5689%" y="117" width="0.5024%" height="15" fill="rgb(241,131,45)"/><text x="22.8189%" y="127.50"></text></g><g><title>lint_checking (2,945,853 samples, 0.87%)</title><rect x="22.2738%" y="165" width="0.8717%" height="15" fill="rgb(249,31,29)"/><text x="22.5238%" y="175.50"></text></g><g><title>privacy_checking_modules (461,776 samples, 0.14%)</title><rect x="23.1703%" y="165" width="0.1366%" height="15" fill="rgb(225,111,53)"/><text x="23.4203%" y="175.50"></text></g><g><title>check_mod_privacy (459,835 samples, 0.14%)</title><rect x="23.1708%" y="149" width="0.1361%" height="15" fill="rgb(238,160,17)"/><text x="23.4208%" y="159.50"></text></g><g><title>misc_checking_3 (3,770,973 samples, 1.12%)</title><rect x="22.1937%" y="181" width="1.1158%" height="15" fill="rgb(214,148,48)"/><text x="22.4437%" y="191.50"></text></g><g><title>impl_parent (523,696 samples, 0.15%)</title><rect x="23.5018%" y="117" width="0.1550%" height="15" fill="rgb(232,36,49)"/><text x="23.7518%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (381,386 samples, 0.11%)</title><rect x="23.5439%" y="101" width="0.1129%" height="15" fill="rgb(209,103,24)"/><text x="23.7939%" y="111.50"></text></g><g><title>impl_trait_ref (1,469,807 samples, 0.43%)</title><rect x="23.6567%" y="117" width="0.4349%" height="15" fill="rgb(229,88,8)"/><text x="23.9067%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,317,365 samples, 0.39%)</title><rect x="23.7018%" y="101" width="0.3898%" height="15" fill="rgb(213,181,19)"/><text x="23.9518%" y="111.50"></text></g><g><title>coherent_trait (2,783,971 samples, 0.82%)</title><rect x="23.3241%" y="149" width="0.8238%" height="15" fill="rgb(254,191,54)"/><text x="23.5741%" y="159.50"></text></g><g><title>specialization_graph_of (2,776,231 samples, 0.82%)</title><rect x="23.3264%" y="133" width="0.8215%" height="15" fill="rgb(241,83,37)"/><text x="23.5764%" y="143.50"></text></g><g><title>coherence_checking (2,837,713 samples, 0.84%)</title><rect x="23.3199%" y="165" width="0.8397%" height="15" fill="rgb(233,36,39)"/><text x="23.5699%" y="175.50"></text></g><g><title>associated_item (723,478 samples, 0.21%)</title><rect x="30.5700%" y="101" width="0.2141%" height="15" fill="rgb(226,3,54)"/><text x="30.8200%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (610,858 samples, 0.18%)</title><rect x="30.6034%" y="85" width="0.1808%" height="15" fill="rgb(245,192,40)"/><text x="30.8534%" y="95.50"></text></g><g><title>associated_items (947,999 samples, 0.28%)</title><rect x="30.5153%" y="117" width="0.2805%" height="15" fill="rgb(238,167,29)"/><text x="30.7653%" y="127.50"></text></g><g><title>adt_dtorck_constraint (494,586 samples, 0.15%)</title><rect x="30.9120%" y="101" width="0.1463%" height="15" fill="rgb(232,182,51)"/><text x="31.1620%" y="111.50"></text></g><g><title>dropck_outlives (895,239 samples, 0.26%)</title><rect x="30.8170%" y="117" width="0.2649%" height="15" fill="rgb(231,60,39)"/><text x="31.0670%" y="127.50"></text></g><g><title>adt_sized_constraint (444,723 samples, 0.13%)</title><rect x="31.4819%" y="101" width="0.1316%" height="15" fill="rgb(208,69,12)"/><text x="31.7319%" y="111.50"></text></g><g><title>evaluate_obligation (3,290,953 samples, 0.97%)</title><rect x="31.0819%" y="117" width="0.9738%" height="15" fill="rgb(235,93,37)"/><text x="31.3319%" y="127.50"></text></g><g><title>trait_impls_of (989,378 samples, 0.29%)</title><rect x="31.7629%" y="101" width="0.2928%" height="15" fill="rgb(213,116,39)"/><text x="32.0129%" y="111.50"></text></g><g><title>method_autoderef_steps (522,075 samples, 0.15%)</title><rect x="32.2748%" y="117" width="0.1545%" height="15" fill="rgb(222,207,29)"/><text x="32.5248%" y="127.50"></text></g><g><title>predicates_of (607,796 samples, 0.18%)</title><rect x="32.4373%" y="117" width="0.1798%" height="15" fill="rgb(206,96,30)"/><text x="32.6873%" y="127.50"></text></g><g><title>predicates_defined_on (443,764 samples, 0.13%)</title><rect x="32.4858%" y="101" width="0.1313%" height="15" fill="rgb(218,138,4)"/><text x="32.7358%" y="111.50"></text></g><g><title>item_bodies_checking (28,767,339 samples, 8.51%)</title><rect x="24.1664%" y="165" width="8.5121%" height="15" fill="rgb(250,191,14)"/><text x="24.4164%" y="175.50">item_bodies_..</text></g><g><title>typeck_item_bodies (28,765,008 samples, 8.51%)</title><rect x="24.1671%" y="149" width="8.5115%" height="15" fill="rgb(239,60,40)"/><text x="24.4171%" y="159.50">typeck_item_..</text></g><g><title>typeck (28,737,958 samples, 8.50%)</title><rect x="24.1751%" y="133" width="8.5035%" height="15" fill="rgb(206,27,48)"/><text x="24.4251%" y="143.50">typeck</text></g><g><title>adt_destructor (655,707 samples, 0.19%)</title><rect x="32.7328%" y="133" width="0.1940%" height="15" fill="rgb(225,35,8)"/><text x="32.9828%" y="143.50"></text></g><g><title>coherent_trait (649,647 samples, 0.19%)</title><rect x="32.7346%" y="117" width="0.1922%" height="15" fill="rgb(250,213,24)"/><text x="32.9846%" y="127.50"></text></g><g><title>specialization_graph_of (647,047 samples, 0.19%)</title><rect x="32.7354%" y="101" width="0.1915%" height="15" fill="rgb(247,123,22)"/><text x="32.9854%" y="111.50"></text></g><g><title>item_types_checking (1,040,501 samples, 0.31%)</title><rect x="32.6786%" y="165" width="0.3079%" height="15" fill="rgb(231,138,38)"/><text x="32.9286%" y="175.50"></text></g><g><title>check_mod_item_types (1,036,101 samples, 0.31%)</title><rect x="32.6799%" y="149" width="0.3066%" height="15" fill="rgb(231,145,46)"/><text x="32.9299%" y="159.50"></text></g><g><title>is_late_bound_map (490,377 samples, 0.15%)</title><rect x="33.0914%" y="117" width="0.1451%" height="15" fill="rgb(251,118,11)"/><text x="33.3414%" y="127.50"></text></g><g><title>resolve_lifetimes (463,796 samples, 0.14%)</title><rect x="33.0992%" y="101" width="0.1372%" height="15" fill="rgb(217,147,25)"/><text x="33.3492%" y="111.50"></text></g><g><title>generics_of (673,209 samples, 0.20%)</title><rect x="33.0668%" y="133" width="0.1992%" height="15" fill="rgb(247,81,37)"/><text x="33.3168%" y="143.50"></text></g><g><title>predicates_of (432,614 samples, 0.13%)</title><rect x="33.2722%" y="133" width="0.1280%" height="15" fill="rgb(209,12,38)"/><text x="33.5222%" y="143.50"></text></g><g><title>predicates_defined_on (411,494 samples, 0.12%)</title><rect x="33.2784%" y="117" width="0.1218%" height="15" fill="rgb(227,1,9)"/><text x="33.5284%" y="127.50"></text></g><g><title>type_collecting (1,496,987 samples, 0.44%)</title><rect x="32.9869%" y="165" width="0.4430%" height="15" fill="rgb(248,47,43)"/><text x="33.2369%" y="175.50"></text></g><g><title>collect_mod_item_types (1,486,177 samples, 0.44%)</title><rect x="32.9901%" y="149" width="0.4398%" height="15" fill="rgb(221,10,30)"/><text x="33.2401%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,381,637 samples, 0.41%)</title><rect x="33.4651%" y="149" width="0.4088%" height="15" fill="rgb(210,229,1)"/><text x="33.7151%" y="159.50"></text></g><g><title>trait_impls_of (340,014 samples, 0.10%)</title><rect x="34.3431%" y="133" width="0.1006%" height="15" fill="rgb(222,148,37)"/><text x="34.5931%" y="143.50"></text></g><g><title>analysis (63,570,676 samples, 18.81%)</title><rect x="15.6506%" y="197" width="18.8103%" height="15" fill="rgb(234,67,33)"/><text x="15.9006%" y="207.50">analysis</text></g><g><title>type_check_crate (37,686,940 samples, 11.15%)</title><rect x="23.3095%" y="181" width="11.1514%" height="15" fill="rgb(247,98,35)"/><text x="23.5595%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,483,270 samples, 1.03%)</title><rect x="33.4303%" y="165" width="1.0307%" height="15" fill="rgb(247,138,52)"/><text x="33.6803%" y="175.50"></text></g><g><title>check_item_well_formed (1,984,002 samples, 0.59%)</title><rect x="33.8739%" y="149" width="0.5871%" height="15" fill="rgb(213,79,30)"/><text x="34.1239%" y="159.50"></text></g><g><title>is_unpin_raw (431,455 samples, 0.13%)</title><rect x="36.8905%" y="149" width="0.1277%" height="15" fill="rgb(246,177,23)"/><text x="37.1405%" y="159.50"></text></g><g><title>evaluate_obligation (413,915 samples, 0.12%)</title><rect x="36.8957%" y="133" width="0.1225%" height="15" fill="rgb(230,62,27)"/><text x="37.1457%" y="143.50"></text></g><g><title>layout_of (1,045,181 samples, 0.31%)</title><rect x="37.0182%" y="149" width="0.3093%" height="15" fill="rgb(216,154,8)"/><text x="37.2682%" y="159.50"></text></g><g><title>param_env (776,059 samples, 0.23%)</title><rect x="37.3274%" y="149" width="0.2296%" height="15" fill="rgb(244,35,45)"/><text x="37.5774%" y="159.50"></text></g><g><title>fn_abi_of_instance (3,343,888 samples, 0.99%)</title><rect x="36.5920%" y="165" width="0.9894%" height="15" fill="rgb(251,115,12)"/><text x="36.8420%" y="175.50"></text></g><g><title>codegen_module (9,974,602 samples, 2.95%)</title><rect x="34.7916%" y="181" width="2.9514%" height="15" fill="rgb(240,54,50)"/><text x="35.0416%" y="191.50">cod..</text></g><g><title>codegen_fn_attrs (461,093 samples, 0.14%)</title><rect x="37.8428%" y="133" width="0.1364%" height="15" fill="rgb(233,84,52)"/><text x="38.0928%" y="143.50"></text></g><g><title>optimized_mir (1,011,752 samples, 0.30%)</title><rect x="38.0857%" y="133" width="0.2994%" height="15" fill="rgb(207,117,47)"/><text x="38.3357%" y="143.50"></text></g><g><title>specialization_graph_of (961,971 samples, 0.28%)</title><rect x="38.5520%" y="117" width="0.2846%" height="15" fill="rgb(249,43,39)"/><text x="38.8020%" y="127.50"></text></g><g><title>impl_trait_ref (364,344 samples, 0.11%)</title><rect x="38.7289%" y="101" width="0.1078%" height="15" fill="rgb(209,38,44)"/><text x="38.9789%" y="111.50"></text></g><g><title>resolve_instance (1,603,009 samples, 0.47%)</title><rect x="38.3851%" y="133" width="0.4743%" height="15" fill="rgb(236,212,23)"/><text x="38.6351%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (3,807,243 samples, 1.13%)</title><rect x="37.7509%" y="149" width="1.1265%" height="15" fill="rgb(242,79,21)"/><text x="38.0009%" y="159.50"></text></g><g><title>monomorphization_collector (3,828,004 samples, 1.13%)</title><rect x="37.7503%" y="165" width="1.1327%" height="15" fill="rgb(211,96,35)"/><text x="38.0003%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (356,114 samples, 0.11%)</title><rect x="38.8876%" y="149" width="0.1054%" height="15" fill="rgb(253,215,40)"/><text x="39.1376%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (4,342,550 samples, 1.28%)</title><rect x="37.7444%" y="181" width="1.2849%" height="15" fill="rgb(211,81,21)"/><text x="37.9944%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (494,546 samples, 0.15%)</title><rect x="38.8830%" y="165" width="0.1463%" height="15" fill="rgb(208,190,38)"/><text x="39.1330%" y="175.50"></text></g><g><title>codegen_crate (15,502,087 samples, 4.59%)</title><rect x="34.4631%" y="197" width="4.5870%" height="15" fill="rgb(235,213,38)"/><text x="34.7131%" y="207.50">codeg..</text></g><g><title>codegen_module_optimize (45,035,194 samples, 13.33%)</title><rect x="39.0501%" y="197" width="13.3257%" height="15" fill="rgb(237,122,38)"/><text x="39.3001%" y="207.50">codegen_module_optim..</text></g><g><title>LLVM_module_optimize (38,248,027 samples, 11.32%)</title><rect x="41.0584%" y="181" width="11.3174%" height="15" fill="rgb(244,218,35)"/><text x="41.3084%" y="191.50">LLVM_module_optim..</text></g><g><title>LLVM_lto_optimize (31,493,241 samples, 9.32%)</title><rect x="53.5290%" y="181" width="9.3187%" height="15" fill="rgb(240,68,47)"/><text x="53.7790%" y="191.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (46,284,630 samples, 13.70%)</title><rect x="62.8477%" y="181" width="13.6954%" height="15" fill="rgb(210,16,53)"/><text x="63.0977%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (45,453,769 samples, 13.45%)</title><rect x="63.0935%" y="165" width="13.4496%" height="15" fill="rgb(235,124,12)"/><text x="63.3435%" y="175.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (3,287,456 samples, 0.97%)</title><rect x="76.5431%" y="181" width="0.9727%" height="15" fill="rgb(224,169,11)"/><text x="76.7931%" y="191.50"></text></g><g><title>codegen_module_perform_lto (85,179,503 samples, 25.20%)</title><rect x="52.3758%" y="197" width="25.2043%" height="15" fill="rgb(250,166,2)"/><text x="52.6258%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,107,614 samples, 0.62%)</title><rect x="81.8551%" y="149" width="0.6236%" height="15" fill="rgb(242,216,29)"/><text x="82.1051%" y="159.50"></text></g><g><title>metadata_register_crate (757,069 samples, 0.22%)</title><rect x="82.2547%" y="133" width="0.2240%" height="15" fill="rgb(230,116,27)"/><text x="82.5047%" y="143.50"></text></g><g><title>macro_expand_crate (16,320,127 samples, 4.83%)</title><rect x="77.6846%" y="181" width="4.8291%" height="15" fill="rgb(228,99,48)"/><text x="77.9346%" y="191.50">macro_..</text></g><g><title>expand_crate (16,308,797 samples, 4.83%)</title><rect x="77.6879%" y="165" width="4.8257%" height="15" fill="rgb(253,11,6)"/><text x="77.9379%" y="175.50">expand..</text></g><g><title>late_resolve_crate (1,346,865 samples, 0.40%)</title><rect x="82.5870%" y="165" width="0.3985%" height="15" fill="rgb(247,143,39)"/><text x="82.8370%" y="175.50"></text></g><g><title>configure_and_expand (18,356,520 samples, 5.43%)</title><rect x="77.5801%" y="197" width="5.4316%" height="15" fill="rgb(236,97,10)"/><text x="77.8301%" y="207.50">configu..</text></g><g><title>resolve_crate (1,565,968 samples, 0.46%)</title><rect x="82.5484%" y="181" width="0.4634%" height="15" fill="rgb(233,208,19)"/><text x="82.7984%" y="191.50"></text></g><g><title>early_lint_checks (341,214 samples, 0.10%)</title><rect x="83.0602%" y="197" width="0.1010%" height="15" fill="rgb(216,164,2)"/><text x="83.3102%" y="207.50"></text></g><g><title>free_global_ctxt (3,930,545 samples, 1.16%)</title><rect x="83.1612%" y="197" width="1.1630%" height="15" fill="rgb(220,129,5)"/><text x="83.4112%" y="207.50"></text></g><g><title>layout_of (705,714 samples, 0.21%)</title><rect x="85.0777%" y="165" width="0.2088%" height="15" fill="rgb(242,17,10)"/><text x="85.3277%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,783,470 samples, 0.53%)</title><rect x="85.2865%" y="165" width="0.5277%" height="15" fill="rgb(242,107,0)"/><text x="85.5365%" y="175.50"></text></g><g><title>optimized_mir (4,094,066 samples, 1.21%)</title><rect x="84.6514%" y="181" width="1.2114%" height="15" fill="rgb(251,28,31)"/><text x="84.9014%" y="191.50"></text></g><g><title>generate_crate_metadata (5,508,893 samples, 1.63%)</title><rect x="84.3242%" y="197" width="1.6301%" height="15" fill="rgb(233,223,10)"/><text x="84.5742%" y="207.50"></text></g><g><title>hir_lowering (2,669,550 samples, 0.79%)</title><rect x="85.9543%" y="197" width="0.7899%" height="15" fill="rgb(215,21,27)"/><text x="86.2043%" y="207.50"></text></g><g><title>finish_ongoing_codegen (41,045,029 samples, 12.15%)</title><rect x="86.7480%" y="181" width="12.1451%" height="15" fill="rgb(232,23,21)"/><text x="86.9980%" y="191.50">finish_ongoing_cod..</text></g><g><title>link_crate (1,014,331 samples, 0.30%)</title><rect x="98.8930%" y="181" width="0.3001%" height="15" fill="rgb(244,5,23)"/><text x="99.1430%" y="191.50"></text></g><g><title>link_binary (970,051 samples, 0.29%)</title><rect x="98.9062%" y="165" width="0.2870%" height="15" fill="rgb(226,81,46)"/><text x="99.1562%" y="175.50"></text></g><g><title>link_rlib (601,837 samples, 0.18%)</title><rect x="99.0151%" y="149" width="0.1781%" height="15" fill="rgb(247,70,30)"/><text x="99.2651%" y="159.50"></text></g><g><title>link (42,079,440 samples, 12.45%)</title><rect x="86.7442%" y="197" width="12.4511%" height="15" fill="rgb(212,68,19)"/><text x="86.9942%" y="207.50">link</text></g><g><title>parse_crate (1,110,603 samples, 0.33%)</title><rect x="99.1953%" y="197" width="0.3286%" height="15" fill="rgb(240,187,13)"/><text x="99.4453%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (865,150 samples, 0.26%)</title><rect x="99.6047%" y="197" width="0.2560%" height="15" fill="rgb(223,113,26)"/><text x="99.8547%" y="207.50"></text></g><g><title>all (337,956,260 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (337,956,260 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (370,524 samples, 0.11%)</title><rect x="99.8904%" y="197" width="0.1096%" height="15" fill="rgb(247,173,49)"/><text x="100.1404%" y="207.50"></text></g></svg></svg>