<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (600,483,347 samples, 15.88%)</title><rect x="0.0429%" y="165" width="15.8757%" height="15" fill="rgb(227,0,7)"/><text x="0.2929%" y="175.50">LLVM_passes</text></g><g><title>resolve_instance (4,479,260 samples, 0.12%)</title><rect x="19.4082%" y="53" width="0.1184%" height="15" fill="rgb(217,0,24)"/><text x="19.6582%" y="63.50"></text></g><g><title>thir_body (7,784,806 samples, 0.21%)</title><rect x="19.5312%" y="53" width="0.2058%" height="15" fill="rgb(221,193,54)"/><text x="19.7812%" y="63.50"></text></g><g><title>mir_const (46,151,338 samples, 1.22%)</title><rect x="18.5216%" y="101" width="1.2202%" height="15" fill="rgb(248,212,6)"/><text x="18.7716%" y="111.50"></text></g><g><title>unsafety_check_result (40,529,873 samples, 1.07%)</title><rect x="18.6702%" y="85" width="1.0715%" height="15" fill="rgb(208,68,35)"/><text x="18.9202%" y="95.50"></text></g><g><title>mir_built (36,357,071 samples, 0.96%)</title><rect x="18.7805%" y="69" width="0.9612%" height="15" fill="rgb(232,128,0)"/><text x="19.0305%" y="79.50"></text></g><g><title>mir_promoted (56,827,748 samples, 1.50%)</title><rect x="18.3504%" y="117" width="1.5024%" height="15" fill="rgb(207,160,47)"/><text x="18.6004%" y="127.50"></text></g><g><title>mir_const_qualif (4,201,321 samples, 0.11%)</title><rect x="19.7417%" y="101" width="0.1111%" height="15" fill="rgb(228,23,34)"/><text x="19.9917%" y="111.50"></text></g><g><title>type_op_prove_predicate (8,667,541 samples, 0.23%)</title><rect x="20.0045%" y="117" width="0.2292%" height="15" fill="rgb(218,30,26)"/><text x="20.2545%" y="127.50"></text></g><g><title>MIR_borrow_checking (161,663,259 samples, 4.27%)</title><rect x="15.9597%" y="149" width="4.2741%" height="15" fill="rgb(220,122,19)"/><text x="16.2097%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (160,422,045 samples, 4.24%)</title><rect x="15.9926%" y="133" width="4.2413%" height="15" fill="rgb(250,228,42)"/><text x="16.2426%" y="143.50">mir_b..</text></g><g><title>misc_checking_1 (6,906,086 samples, 0.18%)</title><rect x="20.3200%" y="149" width="0.1826%" height="15" fill="rgb(240,193,28)"/><text x="20.5700%" y="159.50"></text></g><g><title>misc_checking_2 (6,711,113 samples, 0.18%)</title><rect x="20.5026%" y="149" width="0.1774%" height="15" fill="rgb(216,20,37)"/><text x="20.7526%" y="159.50"></text></g><g><title>crate_lints (5,166,977 samples, 0.14%)</title><rect x="20.7724%" y="117" width="0.1366%" height="15" fill="rgb(206,188,39)"/><text x="21.0224%" y="127.50"></text></g><g><title>lint_checking (8,013,578 samples, 0.21%)</title><rect x="20.7723%" y="133" width="0.2119%" height="15" fill="rgb(217,207,13)"/><text x="21.0223%" y="143.50"></text></g><g><title>privacy_checking_modules (5,551,381 samples, 0.15%)</title><rect x="21.0409%" y="133" width="0.1468%" height="15" fill="rgb(231,73,38)"/><text x="21.2909%" y="143.50"></text></g><g><title>check_mod_privacy (5,547,891 samples, 0.15%)</title><rect x="21.0409%" y="117" width="0.1467%" height="15" fill="rgb(225,20,46)"/><text x="21.2909%" y="127.50"></text></g><g><title>misc_checking_3 (19,249,622 samples, 0.51%)</title><rect x="20.6801%" y="149" width="0.5089%" height="15" fill="rgb(210,31,41)"/><text x="20.9301%" y="159.50"></text></g><g><title>eval_to_const_value_raw (4,275,856 samples, 0.11%)</title><rect x="21.8684%" y="85" width="0.1130%" height="15" fill="rgb(221,200,47)"/><text x="22.1184%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,258,415 samples, 0.11%)</title><rect x="21.8689%" y="69" width="0.1126%" height="15" fill="rgb(226,26,5)"/><text x="22.1189%" y="79.50"></text></g><g><title>eval_to_allocation_raw (4,248,195 samples, 0.11%)</title><rect x="21.8692%" y="53" width="0.1123%" height="15" fill="rgb(249,33,26)"/><text x="22.1192%" y="63.50"></text></g><g><title>impl_parent (6,099,872 samples, 0.16%)</title><rect x="22.0040%" y="85" width="0.1613%" height="15" fill="rgb(235,183,28)"/><text x="22.2540%" y="95.50"></text></g><g><title>impl_trait_ref (11,688,082 samples, 0.31%)</title><rect x="22.1652%" y="85" width="0.3090%" height="15" fill="rgb(221,5,38)"/><text x="22.4152%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,952,792 samples, 0.24%)</title><rect x="22.2376%" y="69" width="0.2367%" height="15" fill="rgb(247,18,42)"/><text x="22.4876%" y="79.50"></text></g><g><title>item_attrs (4,978,987 samples, 0.13%)</title><rect x="22.4743%" y="85" width="0.1316%" height="15" fill="rgb(241,131,45)"/><text x="22.7243%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (4,453,531 samples, 0.12%)</title><rect x="22.4882%" y="69" width="0.1177%" height="15" fill="rgb(249,31,29)"/><text x="22.7382%" y="79.50"></text></g><g><title>coherent_trait (60,209,533 samples, 1.59%)</title><rect x="21.2036%" y="117" width="1.5918%" height="15" fill="rgb(225,111,53)"/><text x="21.4536%" y="127.50"></text></g><g><title>specialization_graph_of (59,241,552 samples, 1.57%)</title><rect x="21.2292%" y="101" width="1.5662%" height="15" fill="rgb(238,160,17)"/><text x="21.4792%" y="111.50"></text></g><g><title>coherence_checking (60,639,957 samples, 1.60%)</title><rect x="21.2022%" y="133" width="1.6032%" height="15" fill="rgb(214,148,48)"/><text x="21.4522%" y="143.50"></text></g><g><title>eval_to_allocation_raw (5,980,455 samples, 0.16%)</title><rect x="26.9732%" y="69" width="0.1581%" height="15" fill="rgb(232,36,49)"/><text x="27.2232%" y="79.50"></text></g><g><title>eval_to_const_value_raw (7,688,817 samples, 0.20%)</title><rect x="26.9703%" y="85" width="0.2033%" height="15" fill="rgb(209,103,24)"/><text x="27.2203%" y="95.50"></text></g><g><title>evaluate_obligation (20,219,604 samples, 0.53%)</title><rect x="27.1736%" y="85" width="0.5346%" height="15" fill="rgb(229,88,8)"/><text x="27.4236%" y="95.50"></text></g><g><title>typeck (15,260,808 samples, 0.40%)</title><rect x="27.9368%" y="85" width="0.4035%" height="15" fill="rgb(213,181,19)"/><text x="28.1868%" y="95.50"></text></g><g><title>item_bodies_checking (209,394,054 samples, 5.54%)</title><rect x="22.8122%" y="133" width="5.5360%" height="15" fill="rgb(254,191,54)"/><text x="23.0622%" y="143.50">item_bo..</text></g><g><title>typeck_item_bodies (209,389,934 samples, 5.54%)</title><rect x="22.8123%" y="117" width="5.5359%" height="15" fill="rgb(241,83,37)"/><text x="23.0623%" y="127.50">typeck_..</text></g><g><title>typeck (208,526,304 samples, 5.51%)</title><rect x="22.8351%" y="101" width="5.5131%" height="15" fill="rgb(233,36,39)"/><text x="23.0851%" y="111.50">typeck</text></g><g><title>evaluate_obligation (4,414,590 samples, 0.12%)</title><rect x="28.7498%" y="85" width="0.1167%" height="15" fill="rgb(226,3,54)"/><text x="28.9998%" y="95.50"></text></g><g><title>typeck (5,744,273 samples, 0.15%)</title><rect x="28.7198%" y="101" width="0.1519%" height="15" fill="rgb(245,192,40)"/><text x="28.9698%" y="111.50"></text></g><g><title>item_types_checking (19,800,398 samples, 0.52%)</title><rect x="28.3482%" y="133" width="0.5235%" height="15" fill="rgb(238,167,29)"/><text x="28.5982%" y="143.50"></text></g><g><title>check_mod_item_types (19,794,948 samples, 0.52%)</title><rect x="28.3483%" y="117" width="0.5233%" height="15" fill="rgb(232,182,51)"/><text x="28.5983%" y="127.50"></text></g><g><title>type_collecting (10,973,391 samples, 0.29%)</title><rect x="28.8718%" y="133" width="0.2901%" height="15" fill="rgb(231,60,39)"/><text x="29.1218%" y="143.50"></text></g><g><title>collect_mod_item_types (10,962,081 samples, 0.29%)</title><rect x="28.8721%" y="117" width="0.2898%" height="15" fill="rgb(208,69,12)"/><text x="29.1221%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,585,774 samples, 0.60%)</title><rect x="29.2004%" y="117" width="0.5971%" height="15" fill="rgb(235,93,37)"/><text x="29.4504%" y="127.50"></text></g><g><title>check_item_well_formed (18,667,825 samples, 0.49%)</title><rect x="29.7976%" y="117" width="0.4935%" height="15" fill="rgb(213,116,39)"/><text x="30.0476%" y="127.50"></text></g><g><title>analysis (543,953,885 samples, 14.38%)</title><rect x="15.9186%" y="165" width="14.3812%" height="15" fill="rgb(222,207,29)"/><text x="16.1686%" y="175.50">analysis</text></g><g><title>type_check_crate (344,606,532 samples, 9.11%)</title><rect x="21.1890%" y="149" width="9.1108%" height="15" fill="rgb(206,96,30)"/><text x="21.4390%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (42,979,452 samples, 1.14%)</title><rect x="29.1635%" y="133" width="1.1363%" height="15" fill="rgb(218,138,4)"/><text x="29.4135%" y="143.50"></text></g><g><title>param_env (3,970,414 samples, 0.10%)</title><rect x="32.4337%" y="117" width="0.1050%" height="15" fill="rgb(250,191,14)"/><text x="32.6837%" y="127.50"></text></g><g><title>fn_abi_of_instance (15,038,108 samples, 0.40%)</title><rect x="32.2048%" y="133" width="0.3976%" height="15" fill="rgb(239,60,40)"/><text x="32.4548%" y="143.50"></text></g><g><title>codegen_module (85,871,222 samples, 2.27%)</title><rect x="30.3806%" y="149" width="2.2703%" height="15" fill="rgb(206,27,48)"/><text x="30.6306%" y="159.50">c..</text></g><g><title>mir_drops_elaborated_and_const_checked (14,038,828 samples, 0.37%)</title><rect x="33.3599%" y="85" width="0.3712%" height="15" fill="rgb(225,35,8)"/><text x="33.6099%" y="95.50"></text></g><g><title>eval_to_const_value_raw (5,743,677 samples, 0.15%)</title><rect x="33.7555%" y="69" width="0.1519%" height="15" fill="rgb(250,213,24)"/><text x="34.0055%" y="79.50"></text></g><g><title>eval_to_const_value_raw (5,618,776 samples, 0.15%)</title><rect x="33.7588%" y="53" width="0.1486%" height="15" fill="rgb(247,123,22)"/><text x="34.0088%" y="63.50"></text></g><g><title>eval_to_allocation_raw (5,370,785 samples, 0.14%)</title><rect x="33.7654%" y="37" width="0.1420%" height="15" fill="rgb(231,138,38)"/><text x="34.0154%" y="47.50"></text></g><g><title>optimized_mir (39,897,223 samples, 1.05%)</title><rect x="32.8568%" y="101" width="1.0548%" height="15" fill="rgb(231,145,46)"/><text x="33.1068%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,494,934 samples, 0.17%)</title><rect x="33.7399%" y="85" width="0.1717%" height="15" fill="rgb(251,118,11)"/><text x="33.9899%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,512,458 samples, 0.17%)</title><rect x="33.9667%" y="85" width="0.1722%" height="15" fill="rgb(217,147,25)"/><text x="34.2167%" y="95.50"></text></g><g><title>resolve_instance (11,190,123 samples, 0.30%)</title><rect x="33.9116%" y="101" width="0.2958%" height="15" fill="rgb(247,81,37)"/><text x="34.1616%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (60,439,215 samples, 1.60%)</title><rect x="32.6527%" y="117" width="1.5979%" height="15" fill="rgb(209,12,38)"/><text x="32.9027%" y="127.50"></text></g><g><title>monomorphization_collector (60,889,160 samples, 1.61%)</title><rect x="32.6526%" y="133" width="1.6098%" height="15" fill="rgb(227,1,9)"/><text x="32.9026%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (65,837,714 samples, 1.74%)</title><rect x="32.6512%" y="149" width="1.7406%" height="15" fill="rgb(248,47,43)"/><text x="32.9012%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (4,893,584 samples, 0.13%)</title><rect x="34.2625%" y="133" width="0.1294%" height="15" fill="rgb(221,10,30)"/><text x="34.5125%" y="143.50"></text></g><g><title>codegen_crate (154,901,754 samples, 4.10%)</title><rect x="30.3001%" y="165" width="4.0953%" height="15" fill="rgb(210,229,1)"/><text x="30.5501%" y="175.50">code..</text></g><g><title>codegen_module_optimize (879,417,958 samples, 23.25%)</title><rect x="34.3954%" y="165" width="23.2502%" height="15" fill="rgb(222,148,37)"/><text x="34.6454%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (844,507,872 samples, 22.33%)</title><rect x="35.3183%" y="149" width="22.3273%" height="15" fill="rgb(234,67,33)"/><text x="35.5683%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (427,768,186 samples, 11.31%)</title><rect x="58.4455%" y="149" width="11.3094%" height="15" fill="rgb(247,98,35)"/><text x="58.6955%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (418,199,289 samples, 11.06%)</title><rect x="69.7549%" y="149" width="11.0564%" height="15" fill="rgb(247,138,52)"/><text x="70.0049%" y="159.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (414,379,461 samples, 10.96%)</title><rect x="69.8559%" y="133" width="10.9555%" height="15" fill="rgb(213,79,30)"/><text x="70.1059%" y="143.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (27,664,629 samples, 0.73%)</title><rect x="80.8114%" y="149" width="0.7314%" height="15" fill="rgb(246,177,23)"/><text x="81.0614%" y="159.50"></text></g><g><title>codegen_module_perform_lto (905,713,073 samples, 23.95%)</title><rect x="57.6456%" y="165" width="23.9454%" height="15" fill="rgb(230,62,27)"/><text x="57.8956%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (21,692,868 samples, 0.57%)</title><rect x="83.1157%" y="117" width="0.5735%" height="15" fill="rgb(216,154,8)"/><text x="83.3657%" y="127.50"></text></g><g><title>metadata_register_crate (18,899,548 samples, 0.50%)</title><rect x="83.1895%" y="101" width="0.4997%" height="15" fill="rgb(244,35,45)"/><text x="83.4395%" y="111.50"></text></g><g><title>metadata_register_crate (17,255,851 samples, 0.46%)</title><rect x="83.2330%" y="85" width="0.4562%" height="15" fill="rgb(251,115,12)"/><text x="83.4830%" y="95.50"></text></g><g><title>metadata_register_crate (15,712,884 samples, 0.42%)</title><rect x="83.2738%" y="69" width="0.4154%" height="15" fill="rgb(240,54,50)"/><text x="83.5238%" y="79.50"></text></g><g><title>macro_expand_crate (78,447,583 samples, 2.07%)</title><rect x="81.6224%" y="149" width="2.0740%" height="15" fill="rgb(233,84,52)"/><text x="81.8724%" y="159.50">m..</text></g><g><title>expand_crate (78,432,143 samples, 2.07%)</title><rect x="81.6228%" y="133" width="2.0736%" height="15" fill="rgb(207,117,47)"/><text x="81.8728%" y="143.50">e..</text></g><g><title>late_resolve_crate (8,631,526 samples, 0.23%)</title><rect x="83.7168%" y="133" width="0.2282%" height="15" fill="rgb(249,43,39)"/><text x="83.9668%" y="143.50"></text></g><g><title>configure_and_expand (89,682,717 samples, 2.37%)</title><rect x="81.5911%" y="165" width="2.3711%" height="15" fill="rgb(209,38,44)"/><text x="81.8411%" y="175.50">co..</text></g><g><title>resolve_crate (9,991,441 samples, 0.26%)</title><rect x="83.6980%" y="149" width="0.2642%" height="15" fill="rgb(236,212,23)"/><text x="83.9480%" y="159.50"></text></g><g><title>free_global_ctxt (16,707,934 samples, 0.44%)</title><rect x="84.0610%" y="165" width="0.4417%" height="15" fill="rgb(242,79,21)"/><text x="84.3110%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,675,774 samples, 0.28%)</title><rect x="85.1686%" y="133" width="0.2822%" height="15" fill="rgb(211,96,35)"/><text x="85.4186%" y="143.50"></text></g><g><title>optimized_mir (24,808,356 samples, 0.66%)</title><rect x="84.8126%" y="149" width="0.6559%" height="15" fill="rgb(253,215,40)"/><text x="85.0626%" y="159.50"></text></g><g><title>generate_crate_metadata (37,100,319 samples, 0.98%)</title><rect x="84.5028%" y="165" width="0.9809%" height="15" fill="rgb(211,81,21)"/><text x="84.7528%" y="175.50"></text></g><g><title>hir_lowering (20,273,983 samples, 0.54%)</title><rect x="85.4836%" y="165" width="0.5360%" height="15" fill="rgb(208,190,38)"/><text x="85.7336%" y="175.50"></text></g><g><title>finish_ongoing_codegen (517,952,569 samples, 13.69%)</title><rect x="86.0201%" y="149" width="13.6937%" height="15" fill="rgb(235,213,38)"/><text x="86.2701%" y="159.50">finish_ongoing_codegen</text></g><g><title>link (520,659,199 samples, 13.77%)</title><rect x="86.0196%" y="165" width="13.7653%" height="15" fill="rgb(237,122,38)"/><text x="86.2696%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (6,707,104 samples, 0.18%)</title><rect x="99.8000%" y="165" width="0.1773%" height="15" fill="rgb(244,218,35)"/><text x="100.0500%" y="175.50"></text></g><g><title>all (3,782,402,258 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,782,402,258 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>