<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,613,827 samples, 23.01%)</title><rect x="0.8588%" y="181" width="23.0060%" height="15" fill="rgb(227,0,7)"/><text x="1.1088%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (113,031 samples, 0.27%)</title><rect x="23.5943%" y="165" width="0.2705%" height="15" fill="rgb(217,0,24)"/><text x="23.8443%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (102,091 samples, 0.24%)</title><rect x="23.6205%" y="149" width="0.2443%" height="15" fill="rgb(221,193,54)"/><text x="23.8705%" y="159.50"></text></g><g><title>is_copy_raw (173,652 samples, 0.42%)</title><rect x="25.4640%" y="69" width="0.4156%" height="15" fill="rgb(248,212,6)"/><text x="25.7140%" y="79.50"></text></g><g><title>evaluate_obligation (169,122 samples, 0.40%)</title><rect x="25.4748%" y="53" width="0.4047%" height="15" fill="rgb(208,68,35)"/><text x="25.7248%" y="63.50"></text></g><g><title>trait_impls_of (137,381 samples, 0.33%)</title><rect x="25.5508%" y="37" width="0.3288%" height="15" fill="rgb(232,128,0)"/><text x="25.8008%" y="47.50"></text></g><g><title>mir_const (222,353 samples, 0.53%)</title><rect x="25.3635%" y="117" width="0.5321%" height="15" fill="rgb(207,160,47)"/><text x="25.6135%" y="127.50"></text></g><g><title>unsafety_check_result (215,673 samples, 0.52%)</title><rect x="25.3795%" y="101" width="0.5161%" height="15" fill="rgb(228,23,34)"/><text x="25.6295%" y="111.50"></text></g><g><title>mir_built (212,223 samples, 0.51%)</title><rect x="25.3877%" y="85" width="0.5079%" height="15" fill="rgb(218,30,26)"/><text x="25.6377%" y="95.50"></text></g><g><title>thir_body (44,691 samples, 0.11%)</title><rect x="26.3594%" y="53" width="0.1069%" height="15" fill="rgb(220,122,19)"/><text x="26.6094%" y="63.50"></text></g><g><title>mir_promoted (514,367 samples, 1.23%)</title><rect x="25.2395%" y="133" width="1.2309%" height="15" fill="rgb(250,228,42)"/><text x="25.4895%" y="143.50"></text></g><g><title>mir_const_qualif (240,214 samples, 0.57%)</title><rect x="25.8956%" y="117" width="0.5748%" height="15" fill="rgb(240,193,28)"/><text x="26.1456%" y="127.50"></text></g><g><title>mir_const (202,493 samples, 0.48%)</title><rect x="25.9859%" y="101" width="0.4846%" height="15" fill="rgb(216,20,37)"/><text x="26.2359%" y="111.50"></text></g><g><title>unsafety_check_result (137,892 samples, 0.33%)</title><rect x="26.1404%" y="85" width="0.3300%" height="15" fill="rgb(206,188,39)"/><text x="26.3904%" y="95.50"></text></g><g><title>mir_built (109,432 samples, 0.26%)</title><rect x="26.2086%" y="69" width="0.2619%" height="15" fill="rgb(217,207,13)"/><text x="26.4586%" y="79.50"></text></g><g><title>MIR_borrow_checking (1,047,422 samples, 2.51%)</title><rect x="23.9991%" y="165" width="2.5065%" height="15" fill="rgb(231,73,38)"/><text x="24.2491%" y="175.50">MI..</text></g><g><title>mir_borrowck (1,036,912 samples, 2.48%)</title><rect x="24.0242%" y="149" width="2.4813%" height="15" fill="rgb(225,20,46)"/><text x="24.2742%" y="159.50">mi..</text></g><g><title>MIR_effect_checking (137,711 samples, 0.33%)</title><rect x="26.5056%" y="165" width="0.3295%" height="15" fill="rgb(210,31,41)"/><text x="26.7556%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (122,681 samples, 0.29%)</title><rect x="26.5415%" y="149" width="0.2936%" height="15" fill="rgb(221,200,47)"/><text x="26.7915%" y="159.50"></text></g><g><title>hir_module_items (51,531 samples, 0.12%)</title><rect x="26.8351%" y="165" width="0.1233%" height="15" fill="rgb(226,26,5)"/><text x="27.0851%" y="175.50"></text></g><g><title>codegen_fn_attrs (78,891 samples, 0.19%)</title><rect x="27.0411%" y="133" width="0.1888%" height="15" fill="rgb(249,33,26)"/><text x="27.2911%" y="143.50"></text></g><g><title>check_mod_attrs (104,802 samples, 0.25%)</title><rect x="26.9793%" y="149" width="0.2508%" height="15" fill="rgb(235,183,28)"/><text x="27.2293%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (44,840 samples, 0.11%)</title><rect x="27.2753%" y="149" width="0.1073%" height="15" fill="rgb(221,5,38)"/><text x="27.5253%" y="159.50"></text></g><g><title>misc_checking_1 (197,812 samples, 0.47%)</title><rect x="26.9591%" y="165" width="0.4734%" height="15" fill="rgb(247,18,42)"/><text x="27.2091%" y="175.50"></text></g><g><title>misc_checking_2 (72,201 samples, 0.17%)</title><rect x="27.4325%" y="165" width="0.1728%" height="15" fill="rgb(241,131,45)"/><text x="27.6825%" y="175.50"></text></g><g><title>match_checking (51,051 samples, 0.12%)</title><rect x="27.4831%" y="149" width="0.1222%" height="15" fill="rgb(249,31,29)"/><text x="27.7331%" y="159.50"></text></g><g><title>check_match (47,311 samples, 0.11%)</title><rect x="27.4920%" y="133" width="0.1132%" height="15" fill="rgb(225,111,53)"/><text x="27.7420%" y="143.50"></text></g><g><title>death_checking (42,600 samples, 0.10%)</title><rect x="27.6478%" y="149" width="0.1019%" height="15" fill="rgb(238,160,17)"/><text x="27.8978%" y="159.50"></text></g><g><title>eval_to_const_value_raw (153,102 samples, 0.37%)</title><rect x="27.8687%" y="117" width="0.3664%" height="15" fill="rgb(214,148,48)"/><text x="28.1187%" y="127.50"></text></g><g><title>eval_to_const_value_raw (148,382 samples, 0.36%)</title><rect x="27.8800%" y="101" width="0.3551%" height="15" fill="rgb(232,36,49)"/><text x="28.1300%" y="111.50"></text></g><g><title>eval_to_allocation_raw (140,132 samples, 0.34%)</title><rect x="27.8997%" y="85" width="0.3353%" height="15" fill="rgb(209,103,24)"/><text x="28.1497%" y="95.50"></text></g><g><title>mir_for_ctfe (55,342 samples, 0.13%)</title><rect x="28.1026%" y="69" width="0.1324%" height="15" fill="rgb(229,88,8)"/><text x="28.3526%" y="79.50"></text></g><g><title>crate_lints (221,452 samples, 0.53%)</title><rect x="27.7529%" y="133" width="0.5299%" height="15" fill="rgb(213,181,19)"/><text x="28.0029%" y="143.50"></text></g><g><title>lint_checking (239,222 samples, 0.57%)</title><rect x="27.7498%" y="149" width="0.5725%" height="15" fill="rgb(254,191,54)"/><text x="27.9998%" y="159.50"></text></g><g><title>misc_checking_3 (344,643 samples, 0.82%)</title><rect x="27.6052%" y="165" width="0.8247%" height="15" fill="rgb(241,83,37)"/><text x="27.8552%" y="175.50"></text></g><g><title>impl_trait_ref (45,670 samples, 0.11%)</title><rect x="29.8239%" y="85" width="0.1093%" height="15" fill="rgb(233,36,39)"/><text x="30.0739%" y="95.50"></text></g><g><title>predicates_of (81,191 samples, 0.19%)</title><rect x="29.9611%" y="85" width="0.1943%" height="15" fill="rgb(226,3,54)"/><text x="30.2111%" y="95.50"></text></g><g><title>predicates_defined_on (49,011 samples, 0.12%)</title><rect x="30.0382%" y="69" width="0.1173%" height="15" fill="rgb(245,192,40)"/><text x="30.2882%" y="79.50"></text></g><g><title>specializes (304,903 samples, 0.73%)</title><rect x="30.1554%" y="85" width="0.7296%" height="15" fill="rgb(238,167,29)"/><text x="30.4054%" y="95.50"></text></g><g><title>param_env (235,942 samples, 0.56%)</title><rect x="30.3205%" y="69" width="0.5646%" height="15" fill="rgb(232,182,51)"/><text x="30.5705%" y="79.50"></text></g><g><title>def_span (169,732 samples, 0.41%)</title><rect x="30.4789%" y="53" width="0.4062%" height="15" fill="rgb(231,60,39)"/><text x="30.7289%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (163,601 samples, 0.39%)</title><rect x="30.4936%" y="37" width="0.3915%" height="15" fill="rgb(208,69,12)"/><text x="30.7436%" y="47.50"></text></g><g><title>trait_impls_of (94,631 samples, 0.23%)</title><rect x="30.8916%" y="85" width="0.2265%" height="15" fill="rgb(235,93,37)"/><text x="31.1416%" y="95.50"></text></g><g><title>evaluate_obligation (878,780 samples, 2.10%)</title><rect x="29.0271%" y="101" width="2.1029%" height="15" fill="rgb(213,116,39)"/><text x="29.2771%" y="111.50">e..</text></g><g><title>item_bodies_checking (1,147,893 samples, 2.75%)</title><rect x="28.4971%" y="149" width="2.7469%" height="15" fill="rgb(222,207,29)"/><text x="28.7471%" y="159.50">it..</text></g><g><title>typeck_item_bodies (1,146,693 samples, 2.74%)</title><rect x="28.4999%" y="133" width="2.7440%" height="15" fill="rgb(206,96,30)"/><text x="28.7499%" y="143.50">ty..</text></g><g><title>typeck (1,144,753 samples, 2.74%)</title><rect x="28.5046%" y="117" width="2.7394%" height="15" fill="rgb(218,138,4)"/><text x="28.7546%" y="127.50">ty..</text></g><g><title>item_types_checking (180,152 samples, 0.43%)</title><rect x="31.2440%" y="149" width="0.4311%" height="15" fill="rgb(250,191,14)"/><text x="31.4940%" y="159.50"></text></g><g><title>check_mod_item_types (178,632 samples, 0.43%)</title><rect x="31.2476%" y="133" width="0.4275%" height="15" fill="rgb(239,60,40)"/><text x="31.4976%" y="143.50"></text></g><g><title>typeck (171,962 samples, 0.41%)</title><rect x="31.2636%" y="117" width="0.4115%" height="15" fill="rgb(206,27,48)"/><text x="31.5136%" y="127.50"></text></g><g><title>type_collecting (136,582 samples, 0.33%)</title><rect x="31.6758%" y="149" width="0.3268%" height="15" fill="rgb(225,35,8)"/><text x="31.9258%" y="159.50"></text></g><g><title>collect_mod_item_types (128,882 samples, 0.31%)</title><rect x="31.6943%" y="133" width="0.3084%" height="15" fill="rgb(250,213,24)"/><text x="31.9443%" y="143.50"></text></g><g><title>param_env (104,401 samples, 0.25%)</title><rect x="32.6172%" y="117" width="0.2498%" height="15" fill="rgb(247,123,22)"/><text x="32.8672%" y="127.50"></text></g><g><title>analysis (3,781,102 samples, 9.05%)</title><rect x="23.8648%" y="181" width="9.0482%" height="15" fill="rgb(231,138,38)"/><text x="24.1148%" y="191.50">analysis</text></g><g><title>type_check_crate (1,873,371 samples, 4.48%)</title><rect x="28.4300%" y="165" width="4.4830%" height="15" fill="rgb(231,145,46)"/><text x="28.6800%" y="175.50">type_..</text></g><g><title>wf_checking (379,564 samples, 0.91%)</title><rect x="32.0047%" y="149" width="0.9083%" height="15" fill="rgb(251,118,11)"/><text x="32.2547%" y="159.50"></text></g><g><title>check_item_well_formed (368,544 samples, 0.88%)</title><rect x="32.0310%" y="133" width="0.8819%" height="15" fill="rgb(217,147,25)"/><text x="32.2810%" y="143.50"></text></g><g><title>codegen_module (334,264 samples, 0.80%)</title><rect x="33.8740%" y="165" width="0.7999%" height="15" fill="rgb(247,81,37)"/><text x="34.1240%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (129,461 samples, 0.31%)</title><rect x="34.7192%" y="133" width="0.3098%" height="15" fill="rgb(209,12,38)"/><text x="34.9692%" y="143.50"></text></g><g><title>optimized_mir (118,561 samples, 0.28%)</title><rect x="34.7453%" y="117" width="0.2837%" height="15" fill="rgb(227,1,9)"/><text x="34.9953%" y="127.50"></text></g><g><title>monomorphization_collector (146,891 samples, 0.35%)</title><rect x="34.7154%" y="149" width="0.3515%" height="15" fill="rgb(248,47,43)"/><text x="34.9654%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (211,332 samples, 0.51%)</title><rect x="34.6746%" y="165" width="0.5057%" height="15" fill="rgb(221,10,30)"/><text x="34.9246%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (47,401 samples, 0.11%)</title><rect x="35.0669%" y="149" width="0.1134%" height="15" fill="rgb(210,229,1)"/><text x="35.3169%" y="159.50"></text></g><g><title>codegen_crate (1,005,251 samples, 2.41%)</title><rect x="32.9310%" y="181" width="2.4056%" height="15" fill="rgb(222,148,37)"/><text x="33.1810%" y="191.50">co..</text></g><g><title>codegen_module_optimize (3,387,867 samples, 8.11%)</title><rect x="35.3366%" y="181" width="8.1072%" height="15" fill="rgb(234,67,33)"/><text x="35.5866%" y="191.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (2,834,011 samples, 6.78%)</title><rect x="36.6620%" y="165" width="6.7818%" height="15" fill="rgb(247,98,35)"/><text x="36.9120%" y="175.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (1,521,907 samples, 3.64%)</title><rect x="44.2681%" y="165" width="3.6419%" height="15" fill="rgb(247,138,52)"/><text x="44.5181%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen (3,949,234 samples, 9.45%)</title><rect x="47.9101%" y="165" width="9.4506%" height="15" fill="rgb(213,79,30)"/><text x="48.1601%" y="175.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (3,867,013 samples, 9.25%)</title><rect x="48.1068%" y="149" width="9.2538%" height="15" fill="rgb(246,177,23)"/><text x="48.3568%" y="159.50">LLVM_module_c..</text></g><g><title>codegen_module_perform_lto (5,844,245 samples, 13.99%)</title><rect x="43.4438%" y="181" width="13.9853%" height="15" fill="rgb(230,62,27)"/><text x="43.6938%" y="191.50">codegen_module_perfor..</text></g><g><title>crate_injection (59,401 samples, 0.14%)</title><rect x="57.8559%" y="165" width="0.1421%" height="15" fill="rgb(216,154,8)"/><text x="58.1059%" y="175.50"></text></g><g><title>macro_expand_crate (5,670,343 samples, 13.57%)</title><rect x="57.9980%" y="165" width="13.5692%" height="15" fill="rgb(244,35,45)"/><text x="58.2480%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (5,658,243 samples, 13.54%)</title><rect x="58.0270%" y="149" width="13.5402%" height="15" fill="rgb(251,115,12)"/><text x="58.2770%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (1,688,179 samples, 4.04%)</title><rect x="67.5274%" y="133" width="4.0398%" height="15" fill="rgb(240,54,50)"/><text x="67.7774%" y="143.50">meta..</text></g><g><title>metadata_register_crate (597,098 samples, 1.43%)</title><rect x="70.1383%" y="117" width="1.4289%" height="15" fill="rgb(233,84,52)"/><text x="70.3883%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (48,151 samples, 0.12%)</title><rect x="71.5720%" y="165" width="0.1152%" height="15" fill="rgb(207,117,47)"/><text x="71.8220%" y="175.50"></text></g><g><title>finalize_macro_resolutions (147,781 samples, 0.35%)</title><rect x="71.7067%" y="149" width="0.3536%" height="15" fill="rgb(249,43,39)"/><text x="71.9567%" y="159.50"></text></g><g><title>configure_and_expand (6,157,119 samples, 14.73%)</title><rect x="57.4291%" y="181" width="14.7340%" height="15" fill="rgb(209,38,44)"/><text x="57.6791%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (198,902 samples, 0.48%)</title><rect x="71.6872%" y="165" width="0.4760%" height="15" fill="rgb(236,212,23)"/><text x="71.9372%" y="175.50"></text></g><g><title>free_global_ctxt (1,399,845 samples, 3.35%)</title><rect x="72.3125%" y="181" width="3.3498%" height="15" fill="rgb(242,79,21)"/><text x="72.5625%" y="191.50">fre..</text></g><g><title>crate_hash (66,081 samples, 0.16%)</title><rect x="76.0603%" y="165" width="0.1581%" height="15" fill="rgb(211,96,35)"/><text x="76.3103%" y="175.50"></text></g><g><title>generate_crate_metadata (301,494 samples, 0.72%)</title><rect x="75.6624%" y="181" width="0.7215%" height="15" fill="rgb(253,215,40)"/><text x="75.9124%" y="191.50"></text></g><g><title>hir_lowering (130,662 samples, 0.31%)</title><rect x="76.3838%" y="181" width="0.3127%" height="15" fill="rgb(211,81,21)"/><text x="76.6338%" y="191.50"></text></g><g><title>finish_ongoing_codegen (8,115,410 samples, 19.42%)</title><rect x="76.7220%" y="165" width="19.4203%" height="15" fill="rgb(208,190,38)"/><text x="76.9720%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (505,586 samples, 1.21%)</title><rect x="96.1423%" y="165" width="1.2099%" height="15" fill="rgb(235,213,38)"/><text x="96.3923%" y="175.50"></text></g><g><title>link_binary (497,955 samples, 1.19%)</title><rect x="96.1605%" y="149" width="1.1916%" height="15" fill="rgb(237,122,38)"/><text x="96.4105%" y="159.50"></text></g><g><title>link_rlib (277,693 samples, 0.66%)</title><rect x="96.6876%" y="133" width="0.6645%" height="15" fill="rgb(244,218,35)"/><text x="96.9376%" y="143.50"></text></g><g><title>link (8,639,157 samples, 20.67%)</title><rect x="76.6965%" y="181" width="20.6736%" height="15" fill="rgb(240,68,47)"/><text x="76.9465%" y="191.50">link</text></g><g><title>parse_crate (342,214 samples, 0.82%)</title><rect x="97.3701%" y="181" width="0.8189%" height="15" fill="rgb(210,16,53)"/><text x="97.6201%" y="191.50"></text></g><g><title>prepare_outputs (179,682 samples, 0.43%)</title><rect x="98.2045%" y="181" width="0.4300%" height="15" fill="rgb(235,124,12)"/><text x="98.4545%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (259,063 samples, 0.62%)</title><rect x="98.6345%" y="181" width="0.6199%" height="15" fill="rgb(224,169,11)"/><text x="98.8845%" y="191.50"></text></g><g><title>setup_global_ctxt (58,741 samples, 0.14%)</title><rect x="99.2561%" y="181" width="0.1406%" height="15" fill="rgb(250,166,2)"/><text x="99.5061%" y="191.50"></text></g><g><title>all (41,788,385 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (41,788,385 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (252,143 samples, 0.60%)</title><rect x="99.3966%" y="181" width="0.6034%" height="15" fill="rgb(228,99,48)"/><text x="99.6466%" y="191.50"></text></g></svg></svg>