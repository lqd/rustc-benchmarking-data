<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (122,552,058 samples, 21.91%)</title><rect x="0.1144%" y="165" width="21.9056%" height="15" fill="rgb(227,0,7)"/><text x="0.3644%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (588,228 samples, 0.11%)</title><rect x="23.5856%" y="53" width="0.1051%" height="15" fill="rgb(217,0,24)"/><text x="23.8356%" y="63.50"></text></g><g><title>specialization_graph_of (1,125,592 samples, 0.20%)</title><rect x="23.7347%" y="37" width="0.2012%" height="15" fill="rgb(221,193,54)"/><text x="23.9847%" y="47.50"></text></g><g><title>resolve_instance (1,413,726 samples, 0.25%)</title><rect x="23.6907%" y="53" width="0.2527%" height="15" fill="rgb(248,212,6)"/><text x="23.9407%" y="63.50"></text></g><g><title>mir_const (4,843,914 samples, 0.87%)</title><rect x="23.1739%" y="101" width="0.8658%" height="15" fill="rgb(208,68,35)"/><text x="23.4239%" y="111.50"></text></g><g><title>unsafety_check_result (4,296,029 samples, 0.77%)</title><rect x="23.2718%" y="85" width="0.7679%" height="15" fill="rgb(232,128,0)"/><text x="23.5218%" y="95.50"></text></g><g><title>mir_built (3,820,572 samples, 0.68%)</title><rect x="23.3568%" y="69" width="0.6829%" height="15" fill="rgb(207,160,47)"/><text x="23.6068%" y="79.50"></text></g><g><title>mir_promoted (5,297,168 samples, 0.95%)</title><rect x="23.0963%" y="117" width="0.9468%" height="15" fill="rgb(228,23,34)"/><text x="23.3463%" y="127.50"></text></g><g><title>type_op_prove_predicate (791,458 samples, 0.14%)</title><rect x="24.0957%" y="117" width="0.1415%" height="15" fill="rgb(218,30,26)"/><text x="24.3457%" y="127.50"></text></g><g><title>MIR_borrow_checking (12,252,905 samples, 2.19%)</title><rect x="22.0478%" y="149" width="2.1902%" height="15" fill="rgb(220,122,19)"/><text x="22.2978%" y="159.50">M..</text></g><g><title>mir_borrowck (12,204,214 samples, 2.18%)</title><rect x="22.0566%" y="133" width="2.1814%" height="15" fill="rgb(250,228,42)"/><text x="22.3066%" y="143.50">m..</text></g><g><title>misc_checking_1 (778,708 samples, 0.14%)</title><rect x="24.2605%" y="149" width="0.1392%" height="15" fill="rgb(240,193,28)"/><text x="24.5105%" y="159.50"></text></g><g><title>crate_lints (1,961,192 samples, 0.35%)</title><rect x="24.5444%" y="117" width="0.3506%" height="15" fill="rgb(216,20,37)"/><text x="24.7944%" y="127.50"></text></g><g><title>type_of (1,149,582 samples, 0.21%)</title><rect x="24.6895%" y="101" width="0.2055%" height="15" fill="rgb(206,188,39)"/><text x="24.9395%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (911,550 samples, 0.16%)</title><rect x="24.7320%" y="85" width="0.1629%" height="15" fill="rgb(217,207,13)"/><text x="24.9820%" y="95.50"></text></g><g><title>lint_checking (2,179,714 samples, 0.39%)</title><rect x="24.5442%" y="133" width="0.3896%" height="15" fill="rgb(231,73,38)"/><text x="24.7942%" y="143.50"></text></g><g><title>misc_checking_3 (3,046,153 samples, 0.54%)</title><rect x="24.4807%" y="149" width="0.5445%" height="15" fill="rgb(225,20,46)"/><text x="24.7307%" y="159.50"></text></g><g><title>impl_parent (1,760,816 samples, 0.31%)</title><rect x="25.6873%" y="85" width="0.3147%" height="15" fill="rgb(210,31,41)"/><text x="25.9373%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,054,596 samples, 0.19%)</title><rect x="25.8136%" y="69" width="0.1885%" height="15" fill="rgb(221,200,47)"/><text x="26.0636%" y="79.50"></text></g><g><title>impl_trait_ref (4,510,977 samples, 0.81%)</title><rect x="26.0021%" y="85" width="0.8063%" height="15" fill="rgb(226,26,5)"/><text x="26.2521%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,819,021 samples, 0.68%)</title><rect x="26.1258%" y="69" width="0.6826%" height="15" fill="rgb(249,33,26)"/><text x="26.3758%" y="79.50"></text></g><g><title>trait_impls_of (603,646 samples, 0.11%)</title><rect x="26.8124%" y="85" width="0.1079%" height="15" fill="rgb(235,183,28)"/><text x="27.0624%" y="95.50"></text></g><g><title>coherent_trait (10,548,636 samples, 1.89%)</title><rect x="25.0349%" y="117" width="1.8855%" height="15" fill="rgb(221,5,38)"/><text x="25.2849%" y="127.50">c..</text></g><g><title>specialization_graph_of (10,171,071 samples, 1.82%)</title><rect x="25.1024%" y="101" width="1.8180%" height="15" fill="rgb(247,18,42)"/><text x="25.3524%" y="111.50">s..</text></g><g><title>coherence_checking (10,618,576 samples, 1.90%)</title><rect x="25.0320%" y="133" width="1.8980%" height="15" fill="rgb(241,131,45)"/><text x="25.2820%" y="143.50">c..</text></g><g><title>evaluate_obligation (598,478 samples, 0.11%)</title><rect x="28.2357%" y="85" width="0.1070%" height="15" fill="rgb(249,31,29)"/><text x="28.4857%" y="95.50"></text></g><g><title>typeck (4,429,628 samples, 0.79%)</title><rect x="28.4781%" y="85" width="0.7918%" height="15" fill="rgb(225,111,53)"/><text x="28.7281%" y="95.50"></text></g><g><title>item_bodies_checking (13,104,175 samples, 2.34%)</title><rect x="26.9333%" y="133" width="2.3423%" height="15" fill="rgb(238,160,17)"/><text x="27.1833%" y="143.50">i..</text></g><g><title>typeck_item_bodies (13,101,225 samples, 2.34%)</title><rect x="26.9338%" y="117" width="2.3418%" height="15" fill="rgb(214,148,48)"/><text x="27.1838%" y="127.50">t..</text></g><g><title>typeck (13,066,703 samples, 2.34%)</title><rect x="26.9400%" y="101" width="2.3356%" height="15" fill="rgb(232,36,49)"/><text x="27.1900%" y="111.50">t..</text></g><g><title>mir_promoted (616,187 samples, 0.11%)</title><rect x="29.4521%" y="69" width="0.1101%" height="15" fill="rgb(209,103,24)"/><text x="29.7021%" y="79.50"></text></g><g><title>item_types_checking (1,616,157 samples, 0.29%)</title><rect x="29.2756%" y="133" width="0.2889%" height="15" fill="rgb(229,88,8)"/><text x="29.5256%" y="143.50"></text></g><g><title>check_mod_item_types (1,613,547 samples, 0.29%)</title><rect x="29.2761%" y="117" width="0.2884%" height="15" fill="rgb(213,181,19)"/><text x="29.5261%" y="127.50"></text></g><g><title>type_of (1,090,542 samples, 0.19%)</title><rect x="29.3696%" y="101" width="0.1949%" height="15" fill="rgb(254,191,54)"/><text x="29.6196%" y="111.50"></text></g><g><title>mir_borrowck (1,074,842 samples, 0.19%)</title><rect x="29.3724%" y="85" width="0.1921%" height="15" fill="rgb(241,83,37)"/><text x="29.6224%" y="95.50"></text></g><g><title>type_collecting (1,148,583 samples, 0.21%)</title><rect x="29.5648%" y="133" width="0.2053%" height="15" fill="rgb(233,36,39)"/><text x="29.8148%" y="143.50"></text></g><g><title>collect_mod_item_types (1,142,253 samples, 0.20%)</title><rect x="29.5659%" y="117" width="0.2042%" height="15" fill="rgb(226,3,54)"/><text x="29.8159%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,484,095 samples, 0.27%)</title><rect x="29.7856%" y="117" width="0.2653%" height="15" fill="rgb(245,192,40)"/><text x="30.0356%" y="127.50"></text></g><g><title>analysis (46,013,645 samples, 8.22%)</title><rect x="22.0200%" y="165" width="8.2247%" height="15" fill="rgb(238,167,29)"/><text x="22.2700%" y="175.50">analysis</text></g><g><title>type_check_crate (29,201,271 samples, 5.22%)</title><rect x="25.0252%" y="149" width="5.2196%" height="15" fill="rgb(232,182,51)"/><text x="25.2752%" y="159.50">type_c..</text></g><g><title>wf_checking (2,652,150 samples, 0.47%)</title><rect x="29.7707%" y="133" width="0.4741%" height="15" fill="rgb(231,60,39)"/><text x="30.0207%" y="143.50"></text></g><g><title>check_item_well_formed (1,084,724 samples, 0.19%)</title><rect x="30.0509%" y="117" width="0.1939%" height="15" fill="rgb(208,69,12)"/><text x="30.3009%" y="127.50"></text></g><g><title>layout_of (1,105,128 samples, 0.20%)</title><rect x="32.9791%" y="117" width="0.1975%" height="15" fill="rgb(235,93,37)"/><text x="33.2291%" y="127.50"></text></g><g><title>predicates_of (609,301 samples, 0.11%)</title><rect x="33.3760%" y="101" width="0.1089%" height="15" fill="rgb(213,116,39)"/><text x="33.6260%" y="111.50"></text></g><g><title>param_env (1,727,424 samples, 0.31%)</title><rect x="33.1767%" y="117" width="0.3088%" height="15" fill="rgb(222,207,29)"/><text x="33.4267%" y="127.50"></text></g><g><title>fn_abi_of_instance (5,382,683 samples, 0.96%)</title><rect x="32.5670%" y="133" width="0.9621%" height="15" fill="rgb(206,96,30)"/><text x="32.8170%" y="143.50"></text></g><g><title>codegen_module (17,631,444 samples, 3.15%)</title><rect x="30.5154%" y="149" width="3.1515%" height="15" fill="rgb(218,138,4)"/><text x="30.7654%" y="159.50">cod..</text></g><g><title>item_attrs (1,159,262 samples, 0.21%)</title><rect x="33.8821%" y="85" width="0.2072%" height="15" fill="rgb(250,191,14)"/><text x="34.1321%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,133,652 samples, 0.20%)</title><rect x="33.8867%" y="69" width="0.2026%" height="15" fill="rgb(239,60,40)"/><text x="34.1367%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,510,705 samples, 0.27%)</title><rect x="33.8513%" y="101" width="0.2700%" height="15" fill="rgb(206,27,48)"/><text x="34.1013%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,079,185 samples, 0.19%)</title><rect x="34.4401%" y="85" width="0.1929%" height="15" fill="rgb(225,35,8)"/><text x="34.6901%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (993,700 samples, 0.18%)</title><rect x="34.6330%" y="85" width="0.1776%" height="15" fill="rgb(250,213,24)"/><text x="34.8830%" y="95.50"></text></g><g><title>optimized_mir (3,975,687 samples, 0.71%)</title><rect x="34.2258%" y="101" width="0.7106%" height="15" fill="rgb(247,123,22)"/><text x="34.4758%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (833,279 samples, 0.15%)</title><rect x="35.0126%" y="85" width="0.1489%" height="15" fill="rgb(231,138,38)"/><text x="35.2626%" y="95.50"></text></g><g><title>specialization_graph_of (1,585,387 samples, 0.28%)</title><rect x="35.2257%" y="85" width="0.2834%" height="15" fill="rgb(231,145,46)"/><text x="35.4757%" y="95.50"></text></g><g><title>resolve_instance (3,441,265 samples, 0.62%)</title><rect x="34.9364%" y="101" width="0.6151%" height="15" fill="rgb(251,118,11)"/><text x="35.1864%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (570,788 samples, 0.10%)</title><rect x="35.5582%" y="101" width="0.1020%" height="15" fill="rgb(217,147,25)"/><text x="35.8082%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (11,142,963 samples, 1.99%)</title><rect x="33.6750%" y="117" width="1.9918%" height="15" fill="rgb(247,81,37)"/><text x="33.9250%" y="127.50">m..</text></g><g><title>monomorphization_collector (11,183,504 samples, 2.00%)</title><rect x="33.6745%" y="133" width="1.9990%" height="15" fill="rgb(209,12,38)"/><text x="33.9245%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (853,080 samples, 0.15%)</title><rect x="35.6743%" y="117" width="0.1525%" height="15" fill="rgb(227,1,9)"/><text x="35.9243%" y="127.50"></text></g><g><title>symbol_name (779,229 samples, 0.14%)</title><rect x="35.6875%" y="101" width="0.1393%" height="15" fill="rgb(248,47,43)"/><text x="35.9375%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (12,383,537 samples, 2.21%)</title><rect x="33.6682%" y="149" width="2.2135%" height="15" fill="rgb(221,10,30)"/><text x="33.9182%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,164,353 samples, 0.21%)</title><rect x="35.6735%" y="133" width="0.2081%" height="15" fill="rgb(210,229,1)"/><text x="35.9235%" y="143.50"></text></g><g><title>codegen_crate (31,600,987 samples, 5.65%)</title><rect x="30.2470%" y="165" width="5.6485%" height="15" fill="rgb(222,148,37)"/><text x="30.4970%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (110,265,984 samples, 19.71%)</title><rect x="35.8955%" y="165" width="19.7096%" height="15" fill="rgb(234,67,33)"/><text x="36.1455%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (104,878,384 samples, 18.75%)</title><rect x="36.8585%" y="149" width="18.7465%" height="15" fill="rgb(247,98,35)"/><text x="37.1085%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (31,680,980 samples, 5.66%)</title><rect x="56.3533%" y="149" width="5.6628%" height="15" fill="rgb(247,138,52)"/><text x="56.6033%" y="159.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (56,698,484 samples, 10.13%)</title><rect x="62.0161%" y="149" width="10.1346%" height="15" fill="rgb(213,79,30)"/><text x="62.2661%" y="159.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (55,629,132 samples, 9.94%)</title><rect x="62.2073%" y="133" width="9.9435%" height="15" fill="rgb(246,177,23)"/><text x="62.4573%" y="143.50">LLVM_module_co..</text></g><g><title>LLVM_thin_lto_import (3,435,846 samples, 0.61%)</title><rect x="72.1507%" y="149" width="0.6141%" height="15" fill="rgb(230,62,27)"/><text x="72.4007%" y="159.50"></text></g><g><title>codegen_module_perform_lto (96,221,738 samples, 17.20%)</title><rect x="55.6051%" y="165" width="17.1992%" height="15" fill="rgb(216,154,8)"/><text x="55.8551%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_load_macro (629,270 samples, 0.11%)</title><rect x="76.0183%" y="117" width="0.1125%" height="15" fill="rgb(244,35,45)"/><text x="76.2683%" y="127.50"></text></g><g><title>macro_expand_crate (20,946,960 samples, 3.74%)</title><rect x="72.9000%" y="149" width="3.7442%" height="15" fill="rgb(251,115,12)"/><text x="73.1500%" y="159.50">macr..</text></g><g><title>expand_crate (20,917,809 samples, 3.74%)</title><rect x="72.9052%" y="133" width="3.7390%" height="15" fill="rgb(240,54,50)"/><text x="73.1552%" y="143.50">expa..</text></g><g><title>metadata_register_crate (2,872,171 samples, 0.51%)</title><rect x="76.1308%" y="117" width="0.5134%" height="15" fill="rgb(233,84,52)"/><text x="76.3808%" y="127.50"></text></g><g><title>metadata_register_crate (994,770 samples, 0.18%)</title><rect x="76.4663%" y="101" width="0.1778%" height="15" fill="rgb(207,117,47)"/><text x="76.7163%" y="111.50"></text></g><g><title>late_resolve_crate (1,503,637 samples, 0.27%)</title><rect x="76.7459%" y="133" width="0.2688%" height="15" fill="rgb(249,43,39)"/><text x="76.9959%" y="143.50"></text></g><g><title>configure_and_expand (23,649,250 samples, 4.23%)</title><rect x="72.8043%" y="165" width="4.2272%" height="15" fill="rgb(209,38,44)"/><text x="73.0543%" y="175.50">confi..</text></g><g><title>resolve_crate (1,915,272 samples, 0.34%)</title><rect x="76.6891%" y="149" width="0.3423%" height="15" fill="rgb(236,212,23)"/><text x="76.9391%" y="159.50"></text></g><g><title>free_global_ctxt (5,144,356 samples, 0.92%)</title><rect x="77.0863%" y="165" width="0.9195%" height="15" fill="rgb(242,79,21)"/><text x="77.3363%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,057,902 samples, 0.19%)</title><rect x="78.4640%" y="133" width="0.1891%" height="15" fill="rgb(211,96,35)"/><text x="78.7140%" y="143.50"></text></g><g><title>optimized_mir (3,055,704 samples, 0.55%)</title><rect x="78.1996%" y="149" width="0.5462%" height="15" fill="rgb(253,215,40)"/><text x="78.4496%" y="159.50"></text></g><g><title>generate_crate_metadata (4,164,456 samples, 0.74%)</title><rect x="78.0058%" y="165" width="0.7444%" height="15" fill="rgb(211,81,21)"/><text x="78.2558%" y="175.50"></text></g><g><title>hir_lowering (2,029,402 samples, 0.36%)</title><rect x="78.7502%" y="165" width="0.3627%" height="15" fill="rgb(208,190,38)"/><text x="79.0002%" y="175.50"></text></g><g><title>finish_ongoing_codegen (108,437,012 samples, 19.38%)</title><rect x="79.1180%" y="149" width="19.3826%" height="15" fill="rgb(235,213,38)"/><text x="79.3680%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,710,599 samples, 0.31%)</title><rect x="98.5006%" y="149" width="0.3058%" height="15" fill="rgb(237,122,38)"/><text x="98.7506%" y="159.50"></text></g><g><title>link_binary (1,658,719 samples, 0.30%)</title><rect x="98.5099%" y="133" width="0.2965%" height="15" fill="rgb(244,218,35)"/><text x="98.7599%" y="143.50"></text></g><g><title>link_rlib (1,074,902 samples, 0.19%)</title><rect x="98.6143%" y="117" width="0.1921%" height="15" fill="rgb(240,68,47)"/><text x="98.8643%" y="127.50"></text></g><g><title>link (110,190,842 samples, 19.70%)</title><rect x="79.1129%" y="165" width="19.6961%" height="15" fill="rgb(210,16,53)"/><text x="79.3629%" y="175.50">link</text></g><g><title>parse_crate (3,480,189 samples, 0.62%)</title><rect x="98.8090%" y="165" width="0.6221%" height="15" fill="rgb(235,124,12)"/><text x="99.0590%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (2,439,558 samples, 0.44%)</title><rect x="99.4853%" y="165" width="0.4361%" height="15" fill="rgb(224,169,11)"/><text x="99.7353%" y="175.50"></text></g><g><title>all (559,454,355 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (559,454,355 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>