<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (26,119,928 samples, 21.95%)</title><rect x="0.2661%" y="213" width="21.9482%" height="15" fill="rgb(227,0,7)"/><text x="0.5161%" y="223.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (181,782 samples, 0.15%)</title><rect x="22.0616%" y="197" width="0.1527%" height="15" fill="rgb(217,0,24)"/><text x="22.3116%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (166,011 samples, 0.14%)</title><rect x="22.0748%" y="181" width="0.1395%" height="15" fill="rgb(221,193,54)"/><text x="22.3248%" y="191.50"></text></g><g><title>item_attrs (119,291 samples, 0.10%)</title><rect x="23.6335%" y="101" width="0.1002%" height="15" fill="rgb(248,212,6)"/><text x="23.8835%" y="111.50"></text></g><g><title>codegen_fn_attrs (148,821 samples, 0.13%)</title><rect x="23.6115%" y="117" width="0.1251%" height="15" fill="rgb(208,68,35)"/><text x="23.8615%" y="127.50"></text></g><g><title>needs_drop_raw (135,061 samples, 0.11%)</title><rect x="24.1017%" y="101" width="0.1135%" height="15" fill="rgb(232,128,0)"/><text x="24.3517%" y="111.50"></text></g><g><title>is_copy_raw (127,671 samples, 0.11%)</title><rect x="24.1079%" y="85" width="0.1073%" height="15" fill="rgb(207,160,47)"/><text x="24.3579%" y="95.50"></text></g><g><title>thir_body (135,702 samples, 0.11%)</title><rect x="24.2353%" y="101" width="0.1140%" height="15" fill="rgb(228,23,34)"/><text x="24.4853%" y="111.50"></text></g><g><title>mir_const (1,070,940 samples, 0.90%)</title><rect x="23.4503%" y="149" width="0.8999%" height="15" fill="rgb(218,30,26)"/><text x="23.7003%" y="159.50"></text></g><g><title>unsafety_check_result (934,539 samples, 0.79%)</title><rect x="23.5649%" y="133" width="0.7853%" height="15" fill="rgb(220,122,19)"/><text x="23.8149%" y="143.50"></text></g><g><title>mir_built (730,338 samples, 0.61%)</title><rect x="23.7365%" y="117" width="0.6137%" height="15" fill="rgb(250,228,42)"/><text x="23.9865%" y="127.50"></text></g><g><title>needs_drop_raw (263,103 samples, 0.22%)</title><rect x="24.5867%" y="85" width="0.2211%" height="15" fill="rgb(240,193,28)"/><text x="24.8367%" y="95.50"></text></g><g><title>is_copy_raw (200,443 samples, 0.17%)</title><rect x="24.6393%" y="69" width="0.1684%" height="15" fill="rgb(216,20,37)"/><text x="24.8893%" y="79.50"></text></g><g><title>evaluate_obligation (192,843 samples, 0.16%)</title><rect x="24.6457%" y="53" width="0.1620%" height="15" fill="rgb(206,188,39)"/><text x="24.8957%" y="63.50"></text></g><g><title>trait_impls_of (141,552 samples, 0.12%)</title><rect x="24.6888%" y="37" width="0.1189%" height="15" fill="rgb(217,207,13)"/><text x="24.9388%" y="47.50"></text></g><g><title>mir_const (403,994 samples, 0.34%)</title><rect x="24.4891%" y="133" width="0.3395%" height="15" fill="rgb(231,73,38)"/><text x="24.7391%" y="143.50"></text></g><g><title>unsafety_check_result (350,263 samples, 0.29%)</title><rect x="24.5342%" y="117" width="0.2943%" height="15" fill="rgb(225,20,46)"/><text x="24.7842%" y="127.50"></text></g><g><title>mir_built (332,473 samples, 0.28%)</title><rect x="24.5492%" y="101" width="0.2794%" height="15" fill="rgb(210,31,41)"/><text x="24.7992%" y="111.50"></text></g><g><title>mir_const_qualif (583,846 samples, 0.49%)</title><rect x="24.3502%" y="149" width="0.4906%" height="15" fill="rgb(221,200,47)"/><text x="24.6002%" y="159.50"></text></g><g><title>mir_promoted (1,765,428 samples, 1.48%)</title><rect x="23.3576%" y="165" width="1.4835%" height="15" fill="rgb(226,26,5)"/><text x="23.6076%" y="175.50"></text></g><g><title>type_op_prove_predicate (197,642 samples, 0.17%)</title><rect x="24.8979%" y="165" width="0.1661%" height="15" fill="rgb(249,33,26)"/><text x="25.1479%" y="175.50"></text></g><g><title>MIR_borrow_checking (3,304,795 samples, 2.78%)</title><rect x="22.2885%" y="197" width="2.7770%" height="15" fill="rgb(235,183,28)"/><text x="22.5385%" y="207.50">MI..</text></g><g><title>mir_borrowck (3,292,915 samples, 2.77%)</title><rect x="22.2985%" y="181" width="2.7670%" height="15" fill="rgb(221,5,38)"/><text x="22.5485%" y="191.50">mi..</text></g><g><title>codegen_fn_attrs (160,892 samples, 0.14%)</title><rect x="25.2781%" y="165" width="0.1352%" height="15" fill="rgb(247,18,42)"/><text x="25.5281%" y="175.50"></text></g><g><title>check_mod_attrs (208,462 samples, 0.18%)</title><rect x="25.2383%" y="181" width="0.1752%" height="15" fill="rgb(241,131,45)"/><text x="25.4883%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (151,792 samples, 0.13%)</title><rect x="25.4447%" y="181" width="0.1275%" height="15" fill="rgb(249,31,29)"/><text x="25.6947%" y="191.50"></text></g><g><title>misc_checking_1 (433,395 samples, 0.36%)</title><rect x="25.2277%" y="197" width="0.3642%" height="15" fill="rgb(225,111,53)"/><text x="25.4777%" y="207.50"></text></g><g><title>mir_borrowck (302,093 samples, 0.25%)</title><rect x="25.9853%" y="69" width="0.2538%" height="15" fill="rgb(238,160,17)"/><text x="26.2353%" y="79.50"></text></g><g><title>eval_to_const_value_raw (527,076 samples, 0.44%)</title><rect x="25.7969%" y="149" width="0.4429%" height="15" fill="rgb(214,148,48)"/><text x="26.0469%" y="159.50"></text></g><g><title>eval_to_const_value_raw (521,206 samples, 0.44%)</title><rect x="25.8018%" y="133" width="0.4380%" height="15" fill="rgb(232,36,49)"/><text x="26.0518%" y="143.50"></text></g><g><title>eval_to_allocation_raw (515,476 samples, 0.43%)</title><rect x="25.8066%" y="117" width="0.4331%" height="15" fill="rgb(209,103,24)"/><text x="26.0566%" y="127.50"></text></g><g><title>mir_for_ctfe (435,004 samples, 0.37%)</title><rect x="25.8743%" y="101" width="0.3655%" height="15" fill="rgb(229,88,8)"/><text x="26.1243%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (391,144 samples, 0.33%)</title><rect x="25.9111%" y="85" width="0.3287%" height="15" fill="rgb(213,181,19)"/><text x="26.1611%" y="95.50"></text></g><g><title>mir_const_qualif (147,611 samples, 0.12%)</title><rect x="26.2478%" y="149" width="0.1240%" height="15" fill="rgb(254,191,54)"/><text x="26.4978%" y="159.50"></text></g><g><title>misc_checking_2 (933,140 samples, 0.78%)</title><rect x="25.5918%" y="197" width="0.7841%" height="15" fill="rgb(241,83,37)"/><text x="25.8418%" y="207.50"></text></g><g><title>match_checking (833,679 samples, 0.70%)</title><rect x="25.6754%" y="181" width="0.7005%" height="15" fill="rgb(233,36,39)"/><text x="25.9254%" y="191.50"></text></g><g><title>check_match (827,169 samples, 0.70%)</title><rect x="25.6809%" y="165" width="0.6951%" height="15" fill="rgb(226,3,54)"/><text x="25.9309%" y="175.50"></text></g><g><title>death_checking (360,224 samples, 0.30%)</title><rect x="26.4235%" y="181" width="0.3027%" height="15" fill="rgb(245,192,40)"/><text x="26.6735%" y="191.50"></text></g><g><title>impl_parent (499,623 samples, 0.42%)</title><rect x="27.9513%" y="117" width="0.4198%" height="15" fill="rgb(238,167,29)"/><text x="28.2013%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (299,463 samples, 0.25%)</title><rect x="28.1195%" y="101" width="0.2516%" height="15" fill="rgb(232,182,51)"/><text x="28.3695%" y="111.50"></text></g><g><title>specialization_graph_of (2,255,044 samples, 1.89%)</title><rect x="27.2849%" y="133" width="1.8949%" height="15" fill="rgb(231,60,39)"/><text x="27.5349%" y="143.50">s..</text></g><g><title>impl_trait_ref (962,431 samples, 0.81%)</title><rect x="28.3711%" y="117" width="0.8087%" height="15" fill="rgb(208,69,12)"/><text x="28.6211%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (762,899 samples, 0.64%)</title><rect x="28.5388%" y="101" width="0.6411%" height="15" fill="rgb(235,93,37)"/><text x="28.7888%" y="111.50"></text></g><g><title>resolve_instance (2,298,874 samples, 1.93%)</title><rect x="27.2497%" y="149" width="1.9317%" height="15" fill="rgb(213,116,39)"/><text x="27.4997%" y="159.50">r..</text></g><g><title>crate_lints (3,976,292 samples, 3.34%)</title><rect x="26.7276%" y="165" width="3.3412%" height="15" fill="rgb(222,207,29)"/><text x="26.9776%" y="175.50">cra..</text></g><g><title>type_of (1,050,551 samples, 0.88%)</title><rect x="29.1860%" y="149" width="0.8828%" height="15" fill="rgb(206,96,30)"/><text x="29.4360%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (805,349 samples, 0.68%)</title><rect x="29.3921%" y="133" width="0.6767%" height="15" fill="rgb(218,138,4)"/><text x="29.6421%" y="143.50"></text></g><g><title>lint_checking (4,056,522 samples, 3.41%)</title><rect x="26.7262%" y="181" width="3.4086%" height="15" fill="rgb(250,191,14)"/><text x="26.9762%" y="191.50">lin..</text></g><g><title>privacy_checking_modules (124,912 samples, 0.10%)</title><rect x="30.1796%" y="181" width="0.1050%" height="15" fill="rgb(239,60,40)"/><text x="30.4296%" y="191.50"></text></g><g><title>check_mod_privacy (123,712 samples, 0.10%)</title><rect x="30.1806%" y="165" width="0.1040%" height="15" fill="rgb(206,27,48)"/><text x="30.4306%" y="175.50"></text></g><g><title>misc_checking_3 (4,657,609 samples, 3.91%)</title><rect x="26.3759%" y="197" width="3.9137%" height="15" fill="rgb(225,35,8)"/><text x="26.6259%" y="207.50">misc..</text></g><g><title>impl_parent (979,860 samples, 0.82%)</title><rect x="31.4088%" y="133" width="0.8234%" height="15" fill="rgb(250,213,24)"/><text x="31.6588%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (644,156 samples, 0.54%)</title><rect x="31.6909%" y="117" width="0.5413%" height="15" fill="rgb(247,123,22)"/><text x="31.9409%" y="127.50"></text></g><g><title>impl_trait_ref (3,190,028 samples, 2.68%)</title><rect x="32.2321%" y="133" width="2.6805%" height="15" fill="rgb(231,138,38)"/><text x="32.4821%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,847,136 samples, 2.39%)</title><rect x="32.5203%" y="117" width="2.3924%" height="15" fill="rgb(231,145,46)"/><text x="32.7703%" y="127.50">me..</text></g><g><title>coherent_trait (5,759,732 samples, 4.84%)</title><rect x="30.3184%" y="165" width="4.8398%" height="15" fill="rgb(251,118,11)"/><text x="30.5684%" y="175.50">cohere..</text></g><g><title>specialization_graph_of (5,750,432 samples, 4.83%)</title><rect x="30.3262%" y="149" width="4.8320%" height="15" fill="rgb(217,147,25)"/><text x="30.5762%" y="159.50">specia..</text></g><g><title>trait_impls_of (291,023 samples, 0.24%)</title><rect x="34.9136%" y="133" width="0.2445%" height="15" fill="rgb(247,81,37)"/><text x="35.1636%" y="143.50"></text></g><g><title>coherence_checking (5,790,962 samples, 4.87%)</title><rect x="30.3099%" y="181" width="4.8661%" height="15" fill="rgb(209,12,38)"/><text x="30.5599%" y="191.50">cohere..</text></g><g><title>associated_item (164,442 samples, 0.14%)</title><rect x="37.3554%" y="117" width="0.1382%" height="15" fill="rgb(227,1,9)"/><text x="37.6054%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (127,791 samples, 0.11%)</title><rect x="37.3862%" y="101" width="0.1074%" height="15" fill="rgb(248,47,43)"/><text x="37.6362%" y="111.50"></text></g><g><title>associated_items (241,163 samples, 0.20%)</title><rect x="37.2990%" y="133" width="0.2026%" height="15" fill="rgb(221,10,30)"/><text x="37.5490%" y="143.50"></text></g><g><title>dropck_outlives (129,050 samples, 0.11%)</title><rect x="37.5189%" y="133" width="0.1084%" height="15" fill="rgb(210,229,1)"/><text x="37.7689%" y="143.50"></text></g><g><title>trait_impls_of (410,052 samples, 0.34%)</title><rect x="37.9022%" y="117" width="0.3446%" height="15" fill="rgb(222,148,37)"/><text x="38.1522%" y="127.50"></text></g><g><title>evaluate_obligation (740,817 samples, 0.62%)</title><rect x="37.6273%" y="133" width="0.6225%" height="15" fill="rgb(234,67,33)"/><text x="37.8773%" y="143.50"></text></g><g><title>predicates_of (128,272 samples, 0.11%)</title><rect x="38.5779%" y="133" width="0.1078%" height="15" fill="rgb(247,98,35)"/><text x="38.8279%" y="143.50"></text></g><g><title>item_bodies_checking (4,212,465 samples, 3.54%)</title><rect x="35.1898%" y="181" width="3.5397%" height="15" fill="rgb(247,138,52)"/><text x="35.4398%" y="191.50">ite..</text></g><g><title>typeck_item_bodies (4,210,975 samples, 3.54%)</title><rect x="35.1911%" y="165" width="3.5384%" height="15" fill="rgb(213,79,30)"/><text x="35.4411%" y="175.50">typ..</text></g><g><title>typeck (4,202,505 samples, 3.53%)</title><rect x="35.1982%" y="149" width="3.5313%" height="15" fill="rgb(246,177,23)"/><text x="35.4482%" y="159.50">typ..</text></g><g><title>impl_trait_ref (137,812 samples, 0.12%)</title><rect x="38.9150%" y="101" width="0.1158%" height="15" fill="rgb(230,62,27)"/><text x="39.1650%" y="111.50"></text></g><g><title>adt_destructor (307,243 samples, 0.26%)</title><rect x="38.8017%" y="149" width="0.2582%" height="15" fill="rgb(216,154,8)"/><text x="39.0517%" y="159.50"></text></g><g><title>coherent_trait (305,103 samples, 0.26%)</title><rect x="38.8035%" y="133" width="0.2564%" height="15" fill="rgb(244,35,45)"/><text x="39.0535%" y="143.50"></text></g><g><title>specialization_graph_of (303,673 samples, 0.26%)</title><rect x="38.8047%" y="117" width="0.2552%" height="15" fill="rgb(251,115,12)"/><text x="39.0547%" y="127.50"></text></g><g><title>item_types_checking (516,275 samples, 0.43%)</title><rect x="38.7295%" y="181" width="0.4338%" height="15" fill="rgb(240,54,50)"/><text x="38.9795%" y="191.50"></text></g><g><title>check_mod_item_types (514,655 samples, 0.43%)</title><rect x="38.7309%" y="165" width="0.4325%" height="15" fill="rgb(233,84,52)"/><text x="38.9809%" y="175.50"></text></g><g><title>predicates_of (178,272 samples, 0.15%)</title><rect x="39.3065%" y="149" width="0.1498%" height="15" fill="rgb(207,117,47)"/><text x="39.5565%" y="159.50"></text></g><g><title>predicates_defined_on (170,682 samples, 0.14%)</title><rect x="39.3129%" y="133" width="0.1434%" height="15" fill="rgb(249,43,39)"/><text x="39.5629%" y="143.50"></text></g><g><title>inferred_outlives_of (124,551 samples, 0.10%)</title><rect x="39.3517%" y="117" width="0.1047%" height="15" fill="rgb(209,38,44)"/><text x="39.6017%" y="127.50"></text></g><g><title>type_collecting (427,084 samples, 0.36%)</title><rect x="39.1647%" y="181" width="0.3589%" height="15" fill="rgb(236,212,23)"/><text x="39.4147%" y="191.50"></text></g><g><title>collect_mod_item_types (422,234 samples, 0.35%)</title><rect x="39.1687%" y="165" width="0.3548%" height="15" fill="rgb(242,79,21)"/><text x="39.4187%" y="175.50"></text></g><g><title>check_impl_item_well_formed (383,955 samples, 0.32%)</title><rect x="39.5505%" y="165" width="0.3226%" height="15" fill="rgb(211,96,35)"/><text x="39.8005%" y="175.50"></text></g><g><title>evaluate_obligation (198,912 samples, 0.17%)</title><rect x="40.0817%" y="149" width="0.1671%" height="15" fill="rgb(253,215,40)"/><text x="40.3317%" y="159.50"></text></g><g><title>analysis (21,647,430 samples, 18.19%)</title><rect x="22.2143%" y="213" width="18.1901%" height="15" fill="rgb(211,81,21)"/><text x="22.4643%" y="223.50">analysis</text></g><g><title>type_check_crate (12,037,228 samples, 10.11%)</title><rect x="30.2897%" y="197" width="10.1147%" height="15" fill="rgb(208,190,38)"/><text x="30.5397%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,047,411 samples, 0.88%)</title><rect x="39.5243%" y="181" width="0.8801%" height="15" fill="rgb(235,213,38)"/><text x="39.7743%" y="191.50"></text></g><g><title>check_item_well_formed (632,266 samples, 0.53%)</title><rect x="39.8731%" y="165" width="0.5313%" height="15" fill="rgb(237,122,38)"/><text x="40.1231%" y="175.50"></text></g><g><title>is_freeze_raw (174,641 samples, 0.15%)</title><rect x="43.5264%" y="165" width="0.1467%" height="15" fill="rgb(244,218,35)"/><text x="43.7764%" y="175.50"></text></g><g><title>evaluate_obligation (160,381 samples, 0.13%)</title><rect x="43.5384%" y="149" width="0.1348%" height="15" fill="rgb(240,68,47)"/><text x="43.7884%" y="159.50"></text></g><g><title>is_unpin_raw (150,091 samples, 0.13%)</title><rect x="43.6731%" y="165" width="0.1261%" height="15" fill="rgb(210,16,53)"/><text x="43.9231%" y="175.50"></text></g><g><title>evaluate_obligation (138,021 samples, 0.12%)</title><rect x="43.6833%" y="149" width="0.1160%" height="15" fill="rgb(235,124,12)"/><text x="43.9333%" y="159.50"></text></g><g><title>eval_to_const_value_raw (161,570 samples, 0.14%)</title><rect x="43.9853%" y="149" width="0.1358%" height="15" fill="rgb(224,169,11)"/><text x="44.2353%" y="159.50"></text></g><g><title>eval_to_const_value_raw (144,840 samples, 0.12%)</title><rect x="43.9993%" y="133" width="0.1217%" height="15" fill="rgb(250,166,2)"/><text x="44.2493%" y="143.50"></text></g><g><title>eval_to_allocation_raw (124,940 samples, 0.10%)</title><rect x="44.0161%" y="117" width="0.1050%" height="15" fill="rgb(242,216,29)"/><text x="44.2661%" y="127.50"></text></g><g><title>param_env (141,820 samples, 0.12%)</title><rect x="44.2318%" y="149" width="0.1192%" height="15" fill="rgb(230,116,27)"/><text x="44.4818%" y="159.50"></text></g><g><title>layout_of (661,657 samples, 0.56%)</title><rect x="43.7992%" y="165" width="0.5560%" height="15" fill="rgb(228,99,48)"/><text x="44.0492%" y="175.50"></text></g><g><title>predicates_of (161,943 samples, 0.14%)</title><rect x="44.6354%" y="149" width="0.1361%" height="15" fill="rgb(253,11,6)"/><text x="44.8854%" y="159.50"></text></g><g><title>param_env (497,015 samples, 0.42%)</title><rect x="44.3552%" y="165" width="0.4176%" height="15" fill="rgb(247,143,39)"/><text x="44.6052%" y="175.50"></text></g><g><title>fn_abi_of_instance (1,930,750 samples, 1.62%)</title><rect x="43.1532%" y="181" width="1.6224%" height="15" fill="rgb(236,97,10)"/><text x="43.4032%" y="191.50"></text></g><g><title>layout_of (166,402 samples, 0.14%)</title><rect x="44.8436%" y="181" width="0.1398%" height="15" fill="rgb(233,208,19)"/><text x="45.0936%" y="191.50"></text></g><g><title>codegen_module (4,884,382 samples, 4.10%)</title><rect x="40.9438%" y="197" width="4.1043%" height="15" fill="rgb(216,164,2)"/><text x="41.1938%" y="207.50">code..</text></g><g><title>item_attrs (213,731 samples, 0.18%)</title><rect x="45.3315%" y="133" width="0.1796%" height="15" fill="rgb(220,129,5)"/><text x="45.5815%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (209,301 samples, 0.18%)</title><rect x="45.3352%" y="117" width="0.1759%" height="15" fill="rgb(242,17,10)"/><text x="45.5852%" y="127.50"></text></g><g><title>codegen_fn_attrs (270,211 samples, 0.23%)</title><rect x="45.3018%" y="149" width="0.2271%" height="15" fill="rgb(242,107,0)"/><text x="45.5518%" y="159.50"></text></g><g><title>layout_of (323,643 samples, 0.27%)</title><rect x="46.2056%" y="133" width="0.2720%" height="15" fill="rgb(251,28,31)"/><text x="46.4556%" y="143.50"></text></g><g><title>layout_of (169,582 samples, 0.14%)</title><rect x="46.3351%" y="117" width="0.1425%" height="15" fill="rgb(233,223,10)"/><text x="46.5851%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (314,283 samples, 0.26%)</title><rect x="46.4776%" y="133" width="0.2641%" height="15" fill="rgb(215,21,27)"/><text x="46.7276%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (478,336 samples, 0.40%)</title><rect x="46.7417%" y="133" width="0.4019%" height="15" fill="rgb(232,23,21)"/><text x="46.9917%" y="143.50"></text></g><g><title>eval_to_const_value_raw (149,602 samples, 0.13%)</title><rect x="47.1553%" y="117" width="0.1257%" height="15" fill="rgb(244,5,23)"/><text x="47.4053%" y="127.50"></text></g><g><title>eval_to_const_value_raw (147,462 samples, 0.12%)</title><rect x="47.1571%" y="101" width="0.1239%" height="15" fill="rgb(226,81,46)"/><text x="47.4071%" y="111.50"></text></g><g><title>eval_to_allocation_raw (142,722 samples, 0.12%)</title><rect x="47.1611%" y="85" width="0.1199%" height="15" fill="rgb(247,70,30)"/><text x="47.4111%" y="95.50"></text></g><g><title>optimized_mir (1,873,891 samples, 1.57%)</title><rect x="45.7094%" y="149" width="1.5746%" height="15" fill="rgb(212,68,19)"/><text x="45.9594%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (166,692 samples, 0.14%)</title><rect x="47.1440%" y="133" width="0.1401%" height="15" fill="rgb(240,187,13)"/><text x="47.3940%" y="143.50"></text></g><g><title>resolve_instance (241,183 samples, 0.20%)</title><rect x="47.2840%" y="149" width="0.2027%" height="15" fill="rgb(223,113,26)"/><text x="47.5340%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (3,072,403 samples, 2.58%)</title><rect x="45.0713%" y="165" width="2.5817%" height="15" fill="rgb(206,192,2)"/><text x="45.3213%" y="175.50">mo..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (197,863 samples, 0.17%)</title><rect x="47.4867%" y="149" width="0.1663%" height="15" fill="rgb(241,108,4)"/><text x="47.7367%" y="159.50"></text></g><g><title>eval_to_const_value_raw (173,362 samples, 0.15%)</title><rect x="47.5073%" y="133" width="0.1457%" height="15" fill="rgb(247,173,49)"/><text x="47.7573%" y="143.50"></text></g><g><title>eval_to_const_value_raw (167,842 samples, 0.14%)</title><rect x="47.5119%" y="117" width="0.1410%" height="15" fill="rgb(224,114,35)"/><text x="47.7619%" y="127.50"></text></g><g><title>eval_to_allocation_raw (157,352 samples, 0.13%)</title><rect x="47.5208%" y="101" width="0.1322%" height="15" fill="rgb(245,159,27)"/><text x="47.7708%" y="111.50"></text></g><g><title>monomorphization_collector (3,095,553 samples, 2.60%)</title><rect x="45.0697%" y="181" width="2.6012%" height="15" fill="rgb(245,172,44)"/><text x="45.3197%" y="191.50">mo..</text></g><g><title>assert_symbols_are_distinct (200,332 samples, 0.17%)</title><rect x="47.6811%" y="165" width="0.1683%" height="15" fill="rgb(236,23,11)"/><text x="47.9311%" y="175.50"></text></g><g><title>symbol_name (178,272 samples, 0.15%)</title><rect x="47.6996%" y="149" width="0.1498%" height="15" fill="rgb(205,117,38)"/><text x="47.9496%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (3,394,987 samples, 2.85%)</title><rect x="45.0484%" y="197" width="2.8528%" height="15" fill="rgb(237,72,25)"/><text x="45.2984%" y="207.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (274,063 samples, 0.23%)</title><rect x="47.6709%" y="181" width="0.2303%" height="15" fill="rgb(244,70,9)"/><text x="47.9209%" y="191.50"></text></g><g><title>codegen_crate (8,985,736 samples, 7.55%)</title><rect x="40.4087%" y="213" width="7.5506%" height="15" fill="rgb(217,125,39)"/><text x="40.6587%" y="223.50">codegen_cr..</text></g><g><title>codegen_module_optimize (15,161,861 samples, 12.74%)</title><rect x="47.9593%" y="213" width="12.7403%" height="15" fill="rgb(235,36,10)"/><text x="48.2093%" y="223.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (14,442,283 samples, 12.14%)</title><rect x="48.5639%" y="197" width="12.1357%" height="15" fill="rgb(251,123,47)"/><text x="48.8139%" y="207.50">LLVM_module_optimi..</text></g><g><title>LLVM_lto_optimize (3,008,572 samples, 2.53%)</title><rect x="61.1530%" y="197" width="2.5281%" height="15" fill="rgb(221,13,13)"/><text x="61.4030%" y="207.50">LL..</text></g><g><title>LLVM_module_codegen (6,863,673 samples, 5.77%)</title><rect x="63.6811%" y="197" width="5.7675%" height="15" fill="rgb(238,131,9)"/><text x="63.9311%" y="207.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (6,774,602 samples, 5.69%)</title><rect x="63.7560%" y="181" width="5.6926%" height="15" fill="rgb(211,50,8)"/><text x="64.0060%" y="191.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (10,475,771 samples, 8.80%)</title><rect x="60.6996%" y="213" width="8.8027%" height="15" fill="rgb(245,182,24)"/><text x="60.9496%" y="223.50">codegen_modu..</text></g><g><title>metadata_load_macro (136,593 samples, 0.11%)</title><rect x="73.9510%" y="165" width="0.1148%" height="15" fill="rgb(242,14,37)"/><text x="74.2010%" y="175.50"></text></g><g><title>macro_expand_crate (6,570,289 samples, 5.52%)</title><rect x="69.6490%" y="197" width="5.5209%" height="15" fill="rgb(246,228,12)"/><text x="69.8990%" y="207.50">macro_e..</text></g><g><title>expand_crate (6,558,999 samples, 5.51%)</title><rect x="69.6585%" y="181" width="5.5114%" height="15" fill="rgb(213,55,15)"/><text x="69.9085%" y="191.50">expand_..</text></g><g><title>metadata_register_crate (1,314,054 samples, 1.10%)</title><rect x="74.0657%" y="165" width="1.1042%" height="15" fill="rgb(209,9,3)"/><text x="74.3157%" y="175.50"></text></g><g><title>metadata_register_crate (476,964 samples, 0.40%)</title><rect x="74.7691%" y="149" width="0.4008%" height="15" fill="rgb(230,59,30)"/><text x="75.0191%" y="159.50"></text></g><g><title>finalize_imports (129,791 samples, 0.11%)</title><rect x="75.2117%" y="181" width="0.1091%" height="15" fill="rgb(209,121,21)"/><text x="75.4617%" y="191.50"></text></g><g><title>late_resolve_crate (461,325 samples, 0.39%)</title><rect x="75.3279%" y="181" width="0.3876%" height="15" fill="rgb(220,109,13)"/><text x="75.5779%" y="191.50"></text></g><g><title>configure_and_expand (7,420,669 samples, 6.24%)</title><rect x="69.5022%" y="213" width="6.2355%" height="15" fill="rgb(232,18,1)"/><text x="69.7522%" y="223.50">configur..</text></g><g><title>resolve_crate (630,087 samples, 0.53%)</title><rect x="75.2083%" y="197" width="0.5295%" height="15" fill="rgb(215,41,42)"/><text x="75.4583%" y="207.50"></text></g><g><title>free_global_ctxt (3,383,505 samples, 2.84%)</title><rect x="75.8436%" y="213" width="2.8431%" height="15" fill="rgb(224,123,36)"/><text x="76.0936%" y="223.50">fr..</text></g><g><title>generate_crate_metadata (431,524 samples, 0.36%)</title><rect x="78.6867%" y="213" width="0.3626%" height="15" fill="rgb(240,125,3)"/><text x="78.9367%" y="223.50"></text></g><g><title>hir_lowering (495,005 samples, 0.42%)</title><rect x="79.0493%" y="213" width="0.4159%" height="15" fill="rgb(205,98,50)"/><text x="79.2993%" y="223.50"></text></g><g><title>finish_ongoing_codegen (21,715,961 samples, 18.25%)</title><rect x="79.4802%" y="197" width="18.2476%" height="15" fill="rgb(205,185,37)"/><text x="79.7302%" y="207.50">finish_ongoing_codegen</text></g><g><title>link_crate (601,947 samples, 0.51%)</title><rect x="97.7278%" y="197" width="0.5058%" height="15" fill="rgb(238,207,15)"/><text x="97.9778%" y="207.50"></text></g><g><title>link_binary (588,097 samples, 0.49%)</title><rect x="97.7395%" y="181" width="0.4942%" height="15" fill="rgb(213,199,42)"/><text x="97.9895%" y="191.50"></text></g><g><title>link_rlib (333,784 samples, 0.28%)</title><rect x="97.9531%" y="165" width="0.2805%" height="15" fill="rgb(235,201,11)"/><text x="98.2031%" y="175.50"></text></g><g><title>link (22,343,988 samples, 18.78%)</title><rect x="79.4653%" y="213" width="18.7754%" height="15" fill="rgb(207,46,11)"/><text x="79.7153%" y="223.50">link</text></g><g><title>parse_crate (651,547 samples, 0.55%)</title><rect x="98.2406%" y="213" width="0.5475%" height="15" fill="rgb(241,35,35)"/><text x="98.4906%" y="223.50"></text></g><g><title>prepare_outputs (209,782 samples, 0.18%)</title><rect x="98.7915%" y="213" width="0.1763%" height="15" fill="rgb(243,32,47)"/><text x="99.0415%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (876,579 samples, 0.74%)</title><rect x="98.9678%" y="213" width="0.7366%" height="15" fill="rgb(247,202,23)"/><text x="99.2178%" y="223.50"></text></g><g><title>all (119,006,964 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (119,006,964 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (278,763 samples, 0.23%)</title><rect x="99.7658%" y="213" width="0.2342%" height="15" fill="rgb(222,74,54)"/><text x="100.0158%" y="223.50"></text></g></svg></svg>