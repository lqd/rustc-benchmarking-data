<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (9,910,225 samples, 13.14%)</title><rect x="0.4367%" y="197" width="13.1386%" height="15" fill="rgb(227,0,7)"/><text x="0.6867%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (161,671 samples, 0.21%)</title><rect x="13.3609%" y="181" width="0.2143%" height="15" fill="rgb(217,0,24)"/><text x="13.6109%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (146,251 samples, 0.19%)</title><rect x="13.3814%" y="165" width="0.1939%" height="15" fill="rgb(221,193,54)"/><text x="13.6314%" y="175.50"></text></g><g><title>param_env (76,421 samples, 0.10%)</title><rect x="20.4939%" y="117" width="0.1013%" height="15" fill="rgb(248,212,6)"/><text x="20.7439%" y="127.50"></text></g><g><title>needs_drop_raw (262,462 samples, 0.35%)</title><rect x="22.5352%" y="85" width="0.3480%" height="15" fill="rgb(208,68,35)"/><text x="22.7852%" y="95.50"></text></g><g><title>is_copy_raw (165,942 samples, 0.22%)</title><rect x="22.6632%" y="69" width="0.2200%" height="15" fill="rgb(232,128,0)"/><text x="22.9132%" y="79.50"></text></g><g><title>evaluate_obligation (129,722 samples, 0.17%)</title><rect x="22.7112%" y="53" width="0.1720%" height="15" fill="rgb(207,160,47)"/><text x="22.9612%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (106,092 samples, 0.14%)</title><rect x="22.9312%" y="69" width="0.1407%" height="15" fill="rgb(228,23,34)"/><text x="23.1812%" y="79.50"></text></g><g><title>specialization_graph_of (364,963 samples, 0.48%)</title><rect x="23.0760%" y="69" width="0.4839%" height="15" fill="rgb(218,30,26)"/><text x="23.3260%" y="79.50"></text></g><g><title>impl_trait_ref (189,352 samples, 0.25%)</title><rect x="23.3088%" y="53" width="0.2510%" height="15" fill="rgb(220,122,19)"/><text x="23.5588%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (165,812 samples, 0.22%)</title><rect x="23.3400%" y="37" width="0.2198%" height="15" fill="rgb(250,228,42)"/><text x="23.5900%" y="47.50"></text></g><g><title>resolve_instance (518,996 samples, 0.69%)</title><rect x="22.8842%" y="85" width="0.6881%" height="15" fill="rgb(240,193,28)"/><text x="23.1342%" y="95.50"></text></g><g><title>thir_body (429,355 samples, 0.57%)</title><rect x="23.5869%" y="85" width="0.5692%" height="15" fill="rgb(216,20,37)"/><text x="23.8369%" y="95.50"></text></g><g><title>mir_const (3,126,782 samples, 4.15%)</title><rect x="20.0207%" y="133" width="4.1454%" height="15" fill="rgb(206,188,39)"/><text x="20.2707%" y="143.50">mir_c..</text></g><g><title>unsafety_check_result (2,693,430 samples, 3.57%)</title><rect x="20.5952%" y="117" width="3.5708%" height="15" fill="rgb(217,207,13)"/><text x="20.8452%" y="127.50">unsa..</text></g><g><title>mir_built (2,353,176 samples, 3.12%)</title><rect x="21.0463%" y="101" width="3.1198%" height="15" fill="rgb(231,73,38)"/><text x="21.2963%" y="111.50">mir..</text></g><g><title>mir_promoted (3,455,216 samples, 4.58%)</title><rect x="19.6087%" y="149" width="4.5808%" height="15" fill="rgb(225,20,46)"/><text x="19.8587%" y="159.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (260,565 samples, 0.35%)</title><rect x="24.2332%" y="149" width="0.3454%" height="15" fill="rgb(210,31,41)"/><text x="24.4832%" y="159.50"></text></g><g><title>normalize_projection_ty (170,981 samples, 0.23%)</title><rect x="24.3519%" y="133" width="0.2267%" height="15" fill="rgb(221,200,47)"/><text x="24.6019%" y="143.50"></text></g><g><title>type_op_normalize_predicate (84,242 samples, 0.11%)</title><rect x="24.5786%" y="149" width="0.1117%" height="15" fill="rgb(226,26,5)"/><text x="24.8286%" y="159.50"></text></g><g><title>type_op_prove_predicate (437,533 samples, 0.58%)</title><rect x="24.6903%" y="149" width="0.5801%" height="15" fill="rgb(249,33,26)"/><text x="24.9403%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,689,582 samples, 11.52%)</title><rect x="13.7533%" y="181" width="11.5203%" height="15" fill="rgb(235,183,28)"/><text x="14.0033%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (8,647,822 samples, 11.46%)</title><rect x="13.8087%" y="165" width="11.4650%" height="15" fill="rgb(221,5,38)"/><text x="14.0587%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (79,221 samples, 0.11%)</title><rect x="25.2857%" y="181" width="0.1050%" height="15" fill="rgb(247,18,42)"/><text x="25.5357%" y="191.50"></text></g><g><title>should_inherit_track_caller (98,702 samples, 0.13%)</title><rect x="25.6363%" y="133" width="0.1309%" height="15" fill="rgb(241,131,45)"/><text x="25.8863%" y="143.50"></text></g><g><title>codegen_fn_attrs (182,283 samples, 0.24%)</title><rect x="25.5457%" y="149" width="0.2417%" height="15" fill="rgb(249,31,29)"/><text x="25.7957%" y="159.50"></text></g><g><title>check_mod_attrs (286,603 samples, 0.38%)</title><rect x="25.4077%" y="165" width="0.3800%" height="15" fill="rgb(225,111,53)"/><text x="25.6577%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (149,361 samples, 0.20%)</title><rect x="25.8924%" y="165" width="0.1980%" height="15" fill="rgb(238,160,17)"/><text x="26.1424%" y="175.50"></text></g><g><title>misc_checking_1 (555,926 samples, 0.74%)</title><rect x="25.3912%" y="181" width="0.7370%" height="15" fill="rgb(214,148,48)"/><text x="25.6412%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (152,312 samples, 0.20%)</title><rect x="26.1300%" y="165" width="0.2019%" height="15" fill="rgb(232,36,49)"/><text x="26.3800%" y="175.50"></text></g><g><title>check_mod_liveness (116,491 samples, 0.15%)</title><rect x="26.1775%" y="149" width="0.1544%" height="15" fill="rgb(209,103,24)"/><text x="26.4275%" y="159.50"></text></g><g><title>misc_checking_2 (386,274 samples, 0.51%)</title><rect x="26.1282%" y="181" width="0.5121%" height="15" fill="rgb(229,88,8)"/><text x="26.3782%" y="191.50"></text></g><g><title>match_checking (232,632 samples, 0.31%)</title><rect x="26.3319%" y="165" width="0.3084%" height="15" fill="rgb(213,181,19)"/><text x="26.5819%" y="175.50"></text></g><g><title>check_match (220,402 samples, 0.29%)</title><rect x="26.3482%" y="149" width="0.2922%" height="15" fill="rgb(254,191,54)"/><text x="26.5982%" y="159.50"></text></g><g><title>check_private_in_public (81,871 samples, 0.11%)</title><rect x="26.6491%" y="165" width="0.1085%" height="15" fill="rgb(241,83,37)"/><text x="26.8991%" y="175.50"></text></g><g><title>death_checking (192,662 samples, 0.26%)</title><rect x="26.7577%" y="165" width="0.2554%" height="15" fill="rgb(233,36,39)"/><text x="27.0077%" y="175.50"></text></g><g><title>crate_lints (843,519 samples, 1.12%)</title><rect x="27.0150%" y="149" width="1.1183%" height="15" fill="rgb(226,3,54)"/><text x="27.2650%" y="159.50"></text></g><g><title>type_of (278,933 samples, 0.37%)</title><rect x="27.7635%" y="133" width="0.3698%" height="15" fill="rgb(245,192,40)"/><text x="28.0135%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (193,493 samples, 0.26%)</title><rect x="27.8768%" y="117" width="0.2565%" height="15" fill="rgb(238,167,29)"/><text x="28.1268%" y="127.50"></text></g><g><title>lint_checking (982,000 samples, 1.30%)</title><rect x="27.0131%" y="165" width="1.3019%" height="15" fill="rgb(232,182,51)"/><text x="27.2631%" y="175.50"></text></g><g><title>module_lints (137,051 samples, 0.18%)</title><rect x="28.1333%" y="149" width="0.1817%" height="15" fill="rgb(231,60,39)"/><text x="28.3833%" y="159.50"></text></g><g><title>lint_mod (135,451 samples, 0.18%)</title><rect x="28.1354%" y="133" width="0.1796%" height="15" fill="rgb(208,69,12)"/><text x="28.3854%" y="143.50"></text></g><g><title>privacy_access_levels (103,131 samples, 0.14%)</title><rect x="28.3150%" y="165" width="0.1367%" height="15" fill="rgb(235,93,37)"/><text x="28.5650%" y="175.50"></text></g><g><title>privacy_checking_modules (291,633 samples, 0.39%)</title><rect x="28.4517%" y="165" width="0.3866%" height="15" fill="rgb(213,116,39)"/><text x="28.7017%" y="175.50"></text></g><g><title>check_mod_privacy (290,123 samples, 0.38%)</title><rect x="28.4537%" y="149" width="0.3846%" height="15" fill="rgb(222,207,29)"/><text x="28.7037%" y="159.50"></text></g><g><title>misc_checking_3 (1,665,727 samples, 2.21%)</title><rect x="26.6404%" y="181" width="2.2084%" height="15" fill="rgb(206,96,30)"/><text x="26.8904%" y="191.50">m..</text></g><g><title>param_env (87,641 samples, 0.12%)</title><rect x="28.9999%" y="133" width="0.1162%" height="15" fill="rgb(218,138,4)"/><text x="29.2499%" y="143.50"></text></g><g><title>impl_parent (435,874 samples, 0.58%)</title><rect x="30.1789%" y="117" width="0.5779%" height="15" fill="rgb(250,191,14)"/><text x="30.4289%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (247,692 samples, 0.33%)</title><rect x="30.4284%" y="101" width="0.3284%" height="15" fill="rgb(239,60,40)"/><text x="30.6784%" y="111.50"></text></g><g><title>impl_trait_ref (1,061,739 samples, 1.41%)</title><rect x="30.7568%" y="117" width="1.4076%" height="15" fill="rgb(206,27,48)"/><text x="31.0068%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (866,765 samples, 1.15%)</title><rect x="31.0153%" y="101" width="1.1491%" height="15" fill="rgb(225,35,8)"/><text x="31.2653%" y="111.50"></text></g><g><title>coherent_trait (2,630,408 samples, 3.49%)</title><rect x="28.9029%" y="149" width="3.4873%" height="15" fill="rgb(250,213,24)"/><text x="29.1529%" y="159.50">coh..</text></g><g><title>specialization_graph_of (2,469,596 samples, 3.27%)</title><rect x="29.1161%" y="133" width="3.2741%" height="15" fill="rgb(247,123,22)"/><text x="29.3661%" y="143.50">spe..</text></g><g><title>trait_impls_of (169,020 samples, 0.22%)</title><rect x="32.1661%" y="117" width="0.2241%" height="15" fill="rgb(231,138,38)"/><text x="32.4161%" y="127.50"></text></g><g><title>coherence_checking (2,675,679 samples, 3.55%)</title><rect x="28.8882%" y="165" width="3.5473%" height="15" fill="rgb(231,145,46)"/><text x="29.1382%" y="175.50">cohe..</text></g><g><title>adt_sized_constraint (77,181 samples, 0.10%)</title><rect x="41.6287%" y="117" width="0.1023%" height="15" fill="rgb(251,118,11)"/><text x="41.8787%" y="127.50"></text></g><g><title>associated_item (93,502 samples, 0.12%)</title><rect x="41.8134%" y="101" width="0.1240%" height="15" fill="rgb(217,147,25)"/><text x="42.0634%" y="111.50"></text></g><g><title>associated_items (162,312 samples, 0.22%)</title><rect x="41.7389%" y="117" width="0.2152%" height="15" fill="rgb(247,81,37)"/><text x="41.9889%" y="127.50"></text></g><g><title>dropck_outlives (143,902 samples, 0.19%)</title><rect x="41.9819%" y="117" width="0.1908%" height="15" fill="rgb(209,12,38)"/><text x="42.2319%" y="127.50"></text></g><g><title>adt_sized_constraint (79,051 samples, 0.10%)</title><rect x="42.8274%" y="101" width="0.1048%" height="15" fill="rgb(227,1,9)"/><text x="43.0774%" y="111.50"></text></g><g><title>predicates_of (83,252 samples, 0.11%)</title><rect x="43.0831%" y="101" width="0.1104%" height="15" fill="rgb(248,47,43)"/><text x="43.3331%" y="111.50"></text></g><g><title>trait_impls_of (165,422 samples, 0.22%)</title><rect x="43.2708%" y="101" width="0.2193%" height="15" fill="rgb(221,10,30)"/><text x="43.5208%" y="111.50"></text></g><g><title>evaluate_obligation (994,542 samples, 1.32%)</title><rect x="42.1727%" y="117" width="1.3185%" height="15" fill="rgb(210,229,1)"/><text x="42.4227%" y="127.50"></text></g><g><title>impl_item_implementor_ids (104,570 samples, 0.14%)</title><rect x="43.6547%" y="117" width="0.1386%" height="15" fill="rgb(222,148,37)"/><text x="43.9047%" y="127.50"></text></g><g><title>associated_items (90,300 samples, 0.12%)</title><rect x="43.6736%" y="101" width="0.1197%" height="15" fill="rgb(234,67,33)"/><text x="43.9236%" y="111.50"></text></g><g><title>explicit_predicates_of (89,121 samples, 0.12%)</title><rect x="44.1700%" y="85" width="0.1182%" height="15" fill="rgb(247,98,35)"/><text x="44.4200%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (77,390 samples, 0.10%)</title><rect x="44.1855%" y="69" width="0.1026%" height="15" fill="rgb(247,138,52)"/><text x="44.4355%" y="79.50"></text></g><g><title>predicates_of (198,731 samples, 0.26%)</title><rect x="44.0484%" y="117" width="0.2635%" height="15" fill="rgb(213,79,30)"/><text x="44.2984%" y="127.50"></text></g><g><title>predicates_defined_on (141,671 samples, 0.19%)</title><rect x="44.1240%" y="101" width="0.1878%" height="15" fill="rgb(246,177,23)"/><text x="44.3740%" y="111.50"></text></g><g><title>associated_item (98,631 samples, 0.13%)</title><rect x="47.7808%" y="85" width="0.1308%" height="15" fill="rgb(230,62,27)"/><text x="48.0308%" y="95.50"></text></g><g><title>associated_items (141,371 samples, 0.19%)</title><rect x="47.7279%" y="101" width="0.1874%" height="15" fill="rgb(216,154,8)"/><text x="47.9779%" y="111.50"></text></g><g><title>evaluate_obligation (110,122 samples, 0.15%)</title><rect x="47.9494%" y="101" width="0.1460%" height="15" fill="rgb(244,35,45)"/><text x="48.1994%" y="111.50"></text></g><g><title>typeck (2,949,000 samples, 3.91%)</title><rect x="44.4493%" y="117" width="3.9097%" height="15" fill="rgb(251,115,12)"/><text x="44.6993%" y="127.50">type..</text></g><g><title>item_bodies_checking (12,013,938 samples, 15.93%)</title><rect x="32.4613%" y="165" width="15.9276%" height="15" fill="rgb(240,54,50)"/><text x="32.7113%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (12,012,218 samples, 15.93%)</title><rect x="32.4636%" y="149" width="15.9253%" height="15" fill="rgb(233,84,52)"/><text x="32.7136%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (11,981,956 samples, 15.89%)</title><rect x="32.5037%" y="133" width="15.8852%" height="15" fill="rgb(207,117,47)"/><text x="32.7537%" y="143.50">typeck</text></g><g><title>item_types_checking (599,776 samples, 0.80%)</title><rect x="48.3890%" y="165" width="0.7952%" height="15" fill="rgb(249,43,39)"/><text x="48.6390%" y="175.50"></text></g><g><title>check_mod_item_types (598,096 samples, 0.79%)</title><rect x="48.3912%" y="149" width="0.7929%" height="15" fill="rgb(209,38,44)"/><text x="48.6412%" y="159.50"></text></g><g><title>fn_sig (131,301 samples, 0.17%)</title><rect x="49.3839%" y="133" width="0.1741%" height="15" fill="rgb(236,212,23)"/><text x="49.6339%" y="143.50"></text></g><g><title>named_region_map (190,001 samples, 0.25%)</title><rect x="49.6495%" y="117" width="0.2519%" height="15" fill="rgb(242,79,21)"/><text x="49.8995%" y="127.50"></text></g><g><title>resolve_lifetimes (177,641 samples, 0.24%)</title><rect x="49.6658%" y="101" width="0.2355%" height="15" fill="rgb(211,96,35)"/><text x="49.9158%" y="111.50"></text></g><g><title>lint_levels (79,641 samples, 0.11%)</title><rect x="49.7958%" y="85" width="0.1056%" height="15" fill="rgb(253,215,40)"/><text x="50.0458%" y="95.50"></text></g><g><title>generics_of (270,121 samples, 0.36%)</title><rect x="49.5580%" y="133" width="0.3581%" height="15" fill="rgb(211,81,21)"/><text x="49.8080%" y="143.50"></text></g><g><title>late_bound_vars_map (93,401 samples, 0.12%)</title><rect x="50.1587%" y="85" width="0.1238%" height="15" fill="rgb(208,190,38)"/><text x="50.4087%" y="95.50"></text></g><g><title>resolve_lifetimes (89,001 samples, 0.12%)</title><rect x="50.1645%" y="69" width="0.1180%" height="15" fill="rgb(235,213,38)"/><text x="50.4145%" y="79.50"></text></g><g><title>explicit_predicates_of (209,483 samples, 0.28%)</title><rect x="50.0626%" y="101" width="0.2777%" height="15" fill="rgb(237,122,38)"/><text x="50.3126%" y="111.50"></text></g><g><title>predicates_of (314,177 samples, 0.42%)</title><rect x="49.9542%" y="133" width="0.4165%" height="15" fill="rgb(244,218,35)"/><text x="50.2042%" y="143.50"></text></g><g><title>predicates_defined_on (275,825 samples, 0.37%)</title><rect x="50.0051%" y="117" width="0.3657%" height="15" fill="rgb(240,68,47)"/><text x="50.2551%" y="127.50"></text></g><g><title>type_collecting (995,131 samples, 1.32%)</title><rect x="49.1850%" y="165" width="1.3193%" height="15" fill="rgb(210,16,53)"/><text x="49.4350%" y="175.50"></text></g><g><title>collect_mod_item_types (990,351 samples, 1.31%)</title><rect x="49.1914%" y="149" width="1.3130%" height="15" fill="rgb(235,124,12)"/><text x="49.4414%" y="159.50"></text></g><g><title>type_of (82,372 samples, 0.11%)</title><rect x="50.3951%" y="133" width="0.1092%" height="15" fill="rgb(224,169,11)"/><text x="50.6451%" y="143.50"></text></g><g><title>evaluate_obligation (166,504 samples, 0.22%)</title><rect x="51.7518%" y="133" width="0.2207%" height="15" fill="rgb(250,166,2)"/><text x="52.0018%" y="143.50"></text></g><g><title>param_env (159,372 samples, 0.21%)</title><rect x="52.0631%" y="133" width="0.2113%" height="15" fill="rgb(242,216,29)"/><text x="52.3131%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,440,260 samples, 1.91%)</title><rect x="50.6229%" y="149" width="1.9094%" height="15" fill="rgb(230,116,27)"/><text x="50.8729%" y="159.50">c..</text></g><g><title>region_scope_tree (189,993 samples, 0.25%)</title><rect x="52.2804%" y="133" width="0.2519%" height="15" fill="rgb(228,99,48)"/><text x="52.5304%" y="143.50"></text></g><g><title>evaluate_obligation (180,910 samples, 0.24%)</title><rect x="53.5381%" y="133" width="0.2398%" height="15" fill="rgb(253,11,6)"/><text x="53.7881%" y="143.50"></text></g><g><title>param_env (189,280 samples, 0.25%)</title><rect x="53.8491%" y="133" width="0.2509%" height="15" fill="rgb(247,143,39)"/><text x="54.0991%" y="143.50"></text></g><g><title>check_item_well_formed (1,317,329 samples, 1.75%)</title><rect x="52.5323%" y="149" width="1.7465%" height="15" fill="rgb(236,97,10)"/><text x="52.7823%" y="159.50"></text></g><g><title>analysis (30,963,128 samples, 41.05%)</title><rect x="13.5753%" y="197" width="41.0497%" height="15" fill="rgb(233,208,19)"/><text x="13.8253%" y="207.50">analysis</text></g><g><title>type_check_crate (19,442,627 samples, 25.78%)</title><rect x="28.8487%" y="181" width="25.7763%" height="15" fill="rgb(216,164,2)"/><text x="29.0987%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,106,362 samples, 4.12%)</title><rect x="50.5067%" y="165" width="4.1183%" height="15" fill="rgb(220,129,5)"/><text x="50.7567%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (261,173 samples, 0.35%)</title><rect x="54.2788%" y="149" width="0.3463%" height="15" fill="rgb(242,17,10)"/><text x="54.5288%" y="159.50"></text></g><g><title>is_freeze_raw (85,000 samples, 0.11%)</title><rect x="56.4793%" y="149" width="0.1127%" height="15" fill="rgb(242,107,0)"/><text x="56.7293%" y="159.50"></text></g><g><title>is_unpin_raw (87,681 samples, 0.12%)</title><rect x="56.5920%" y="149" width="0.1162%" height="15" fill="rgb(251,28,31)"/><text x="56.8420%" y="159.50"></text></g><g><title>evaluate_obligation (82,451 samples, 0.11%)</title><rect x="56.5989%" y="133" width="0.1093%" height="15" fill="rgb(233,223,10)"/><text x="56.8489%" y="143.50"></text></g><g><title>fn_abi_of_instance (312,934 samples, 0.41%)</title><rect x="56.3851%" y="165" width="0.4149%" height="15" fill="rgb(215,21,27)"/><text x="56.6351%" y="175.50"></text></g><g><title>codegen_module (914,670 samples, 1.21%)</title><rect x="55.6203%" y="181" width="1.2126%" height="15" fill="rgb(232,23,21)"/><text x="55.8703%" y="191.50"></text></g><g><title>optimized_mir (422,705 samples, 0.56%)</title><rect x="56.9930%" y="133" width="0.5604%" height="15" fill="rgb(244,5,23)"/><text x="57.2430%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (173,122 samples, 0.23%)</title><rect x="57.3239%" y="117" width="0.2295%" height="15" fill="rgb(226,81,46)"/><text x="57.5739%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (528,326 samples, 0.70%)</title><rect x="56.8555%" y="149" width="0.7004%" height="15" fill="rgb(247,70,30)"/><text x="57.1055%" y="159.50"></text></g><g><title>monomorphization_collector (554,346 samples, 0.73%)</title><rect x="56.8533%" y="165" width="0.7349%" height="15" fill="rgb(212,68,19)"/><text x="57.1033%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (605,446 samples, 0.80%)</title><rect x="56.8334%" y="181" width="0.8027%" height="15" fill="rgb(240,187,13)"/><text x="57.0834%" y="191.50"></text></g><g><title>codegen_crate (2,293,024 samples, 3.04%)</title><rect x="54.6314%" y="197" width="3.0400%" height="15" fill="rgb(223,113,26)"/><text x="54.8814%" y="207.50">cod..</text></g><g><title>codegen_module_optimize (3,092,922 samples, 4.10%)</title><rect x="57.6714%" y="197" width="4.1005%" height="15" fill="rgb(206,192,2)"/><text x="57.9214%" y="207.50">code..</text></g><g><title>LLVM_module_optimize (2,557,777 samples, 3.39%)</title><rect x="58.3809%" y="181" width="3.3910%" height="15" fill="rgb(241,108,4)"/><text x="58.6309%" y="191.50">LLV..</text></g><g><title>LLVM_lto_optimize (1,507,507 samples, 2.00%)</title><rect x="62.1277%" y="181" width="1.9986%" height="15" fill="rgb(247,173,49)"/><text x="62.3777%" y="191.50">L..</text></g><g><title>LLVM_module_codegen (4,392,296 samples, 5.82%)</title><rect x="64.1263%" y="181" width="5.8231%" height="15" fill="rgb(224,114,35)"/><text x="64.3763%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (4,342,036 samples, 5.76%)</title><rect x="64.1929%" y="165" width="5.7565%" height="15" fill="rgb(245,159,27)"/><text x="64.4429%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (6,211,076 samples, 8.23%)</title><rect x="61.7719%" y="197" width="8.2344%" height="15" fill="rgb(245,172,44)"/><text x="62.0219%" y="207.50">codegen_mod..</text></g><g><title>metadata_load_macro (76,330 samples, 0.10%)</title><rect x="76.0520%" y="149" width="0.1012%" height="15" fill="rgb(236,23,11)"/><text x="76.3020%" y="159.50"></text></g><g><title>macro_expand_crate (4,576,639 samples, 6.07%)</title><rect x="70.2970%" y="181" width="6.0675%" height="15" fill="rgb(205,117,38)"/><text x="70.5470%" y="191.50">macro_ex..</text></g><g><title>expand_crate (4,565,559 samples, 6.05%)</title><rect x="70.3117%" y="165" width="6.0528%" height="15" fill="rgb(237,72,25)"/><text x="70.5617%" y="175.50">expand_c..</text></g><g><title>metadata_register_crate (159,442 samples, 0.21%)</title><rect x="76.1532%" y="149" width="0.2114%" height="15" fill="rgb(244,70,9)"/><text x="76.4032%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (89,631 samples, 0.12%)</title><rect x="76.3718%" y="181" width="0.1188%" height="15" fill="rgb(217,125,39)"/><text x="76.6218%" y="191.50"></text></g><g><title>finalize_macro_resolutions (118,712 samples, 0.16%)</title><rect x="76.5320%" y="165" width="0.1574%" height="15" fill="rgb(235,36,10)"/><text x="76.7820%" y="175.50"></text></g><g><title>late_resolve_crate (712,407 samples, 0.94%)</title><rect x="76.6894%" y="165" width="0.9445%" height="15" fill="rgb(251,123,47)"/><text x="76.9394%" y="175.50"></text></g><g><title>configure_and_expand (5,801,022 samples, 7.69%)</title><rect x="70.0063%" y="197" width="7.6908%" height="15" fill="rgb(221,13,13)"/><text x="70.2563%" y="207.50">configure_a..</text></g><g><title>resolve_crate (910,009 samples, 1.21%)</title><rect x="76.4907%" y="181" width="1.2065%" height="15" fill="rgb(238,131,9)"/><text x="76.7407%" y="191.50"></text></g><g><title>early_lint_checks (154,192 samples, 0.20%)</title><rect x="77.8065%" y="197" width="0.2044%" height="15" fill="rgb(211,50,8)"/><text x="78.0565%" y="207.50"></text></g><g><title>free_global_ctxt (1,373,004 samples, 1.82%)</title><rect x="78.0109%" y="197" width="1.8203%" height="15" fill="rgb(245,182,24)"/><text x="78.2609%" y="207.50">f..</text></g><g><title>exported_symbols (125,891 samples, 0.17%)</title><rect x="80.7759%" y="181" width="0.1669%" height="15" fill="rgb(242,14,37)"/><text x="81.0259%" y="191.50"></text></g><g><title>is_sized_raw (81,081 samples, 0.11%)</title><rect x="82.6945%" y="149" width="0.1075%" height="15" fill="rgb(246,228,12)"/><text x="82.9445%" y="159.50"></text></g><g><title>layout_of (297,034 samples, 0.39%)</title><rect x="82.4978%" y="165" width="0.3938%" height="15" fill="rgb(213,55,15)"/><text x="82.7478%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,106,612 samples, 1.47%)</title><rect x="82.8916%" y="165" width="1.4671%" height="15" fill="rgb(209,9,3)"/><text x="83.1416%" y="175.50"></text></g><g><title>optimized_mir (2,556,879 samples, 3.39%)</title><rect x="80.9929%" y="181" width="3.3898%" height="15" fill="rgb(230,59,30)"/><text x="81.2429%" y="191.50">opt..</text></g><g><title>generate_crate_metadata (3,458,886 samples, 4.59%)</title><rect x="79.8312%" y="197" width="4.5857%" height="15" fill="rgb(209,121,21)"/><text x="80.0812%" y="207.50">gener..</text></g><g><title>hir_lowering (1,083,311 samples, 1.44%)</title><rect x="84.4168%" y="197" width="1.4362%" height="15" fill="rgb(220,109,13)"/><text x="84.6668%" y="207.50"></text></g><g><title>finish_ongoing_codegen (8,021,315 samples, 10.63%)</title><rect x="85.8692%" y="181" width="10.6344%" height="15" fill="rgb(232,18,1)"/><text x="86.1192%" y="191.50">finish_ongoing_c..</text></g><g><title>link_crate (638,767 samples, 0.85%)</title><rect x="96.5035%" y="181" width="0.8469%" height="15" fill="rgb(215,41,42)"/><text x="96.7535%" y="191.50"></text></g><g><title>link_binary (633,697 samples, 0.84%)</title><rect x="96.5103%" y="165" width="0.8401%" height="15" fill="rgb(224,123,36)"/><text x="96.7603%" y="175.50"></text></g><g><title>link_rlib (405,045 samples, 0.54%)</title><rect x="96.8134%" y="149" width="0.5370%" height="15" fill="rgb(240,125,3)"/><text x="97.0634%" y="159.50"></text></g><g><title>link (8,679,612 samples, 11.51%)</title><rect x="85.8531%" y="197" width="11.5071%" height="15" fill="rgb(205,98,50)"/><text x="86.1031%" y="207.50">link</text></g><g><title>parse_crate (1,023,360 samples, 1.36%)</title><rect x="97.3602%" y="197" width="1.3567%" height="15" fill="rgb(205,185,37)"/><text x="97.6102%" y="207.50"></text></g><g><title>prepare_outputs (182,572 samples, 0.24%)</title><rect x="98.7223%" y="197" width="0.2420%" height="15" fill="rgb(238,207,15)"/><text x="98.9723%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (396,544 samples, 0.53%)</title><rect x="98.9644%" y="197" width="0.5257%" height="15" fill="rgb(213,199,42)"/><text x="99.2144%" y="207.50"></text></g><g><title>all (75,428,299 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (75,428,299 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (318,164 samples, 0.42%)</title><rect x="99.5782%" y="197" width="0.4218%" height="15" fill="rgb(241,35,35)"/><text x="99.8282%" y="207.50"></text></g></svg></svg>