<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,632,217 samples, 8.35%)</title><rect x="0.3219%" y="181" width="8.3511%" height="15" fill="rgb(227,0,7)"/><text x="0.5719%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (212,022 samples, 0.10%)</title><rect x="8.5726%" y="165" width="0.1004%" height="15" fill="rgb(217,0,24)"/><text x="8.8226%" y="175.50"></text></g><g><title>codegen_fn_attrs (238,732 samples, 0.11%)</title><rect x="15.1800%" y="85" width="0.1131%" height="15" fill="rgb(221,193,54)"/><text x="15.4300%" y="95.50"></text></g><g><title>is_copy_raw (405,733 samples, 0.19%)</title><rect x="16.6666%" y="69" width="0.1922%" height="15" fill="rgb(248,212,6)"/><text x="16.9166%" y="79.50"></text></g><g><title>evaluate_obligation (316,832 samples, 0.15%)</title><rect x="16.7087%" y="53" width="0.1501%" height="15" fill="rgb(208,68,35)"/><text x="16.9587%" y="63.50"></text></g><g><title>needs_drop_raw (847,418 samples, 0.40%)</title><rect x="16.8587%" y="69" width="0.4014%" height="15" fill="rgb(232,128,0)"/><text x="17.1087%" y="79.50"></text></g><g><title>is_copy_raw (405,825 samples, 0.19%)</title><rect x="17.0679%" y="53" width="0.1922%" height="15" fill="rgb(207,160,47)"/><text x="17.3179%" y="63.50"></text></g><g><title>evaluate_obligation (332,664 samples, 0.16%)</title><rect x="17.1025%" y="37" width="0.1576%" height="15" fill="rgb(228,23,34)"/><text x="17.3525%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (508,354 samples, 0.24%)</title><rect x="17.4317%" y="53" width="0.2408%" height="15" fill="rgb(218,30,26)"/><text x="17.6817%" y="63.50"></text></g><g><title>resolve_instance (1,053,100 samples, 0.50%)</title><rect x="17.2601%" y="69" width="0.4988%" height="15" fill="rgb(220,122,19)"/><text x="17.5101%" y="79.50"></text></g><g><title>thir_body (1,318,045 samples, 0.62%)</title><rect x="17.7743%" y="69" width="0.6243%" height="15" fill="rgb(250,228,42)"/><text x="18.0243%" y="79.50"></text></g><g><title>mir_const (8,343,005 samples, 3.95%)</title><rect x="14.4558%" y="117" width="3.9515%" height="15" fill="rgb(240,193,28)"/><text x="14.7058%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (7,301,391 samples, 3.46%)</title><rect x="14.9492%" y="101" width="3.4581%" height="15" fill="rgb(216,20,37)"/><text x="15.1992%" y="111.50">uns..</text></g><g><title>mir_built (6,575,287 samples, 3.11%)</title><rect x="15.2931%" y="85" width="3.1142%" height="15" fill="rgb(206,188,39)"/><text x="15.5431%" y="95.50">mir..</text></g><g><title>mir_promoted (9,238,227 samples, 4.38%)</title><rect x="14.0585%" y="133" width="4.3755%" height="15" fill="rgb(217,207,13)"/><text x="14.3085%" y="143.50">mir_p..</text></g><g><title>type_op_normalize_fn_sig (1,299,939 samples, 0.62%)</title><rect x="18.5307%" y="133" width="0.6157%" height="15" fill="rgb(231,73,38)"/><text x="18.7807%" y="143.50"></text></g><g><title>normalize_projection_ty (769,982 samples, 0.36%)</title><rect x="18.7817%" y="117" width="0.3647%" height="15" fill="rgb(225,20,46)"/><text x="19.0317%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,618,809 samples, 0.77%)</title><rect x="19.1463%" y="133" width="0.7667%" height="15" fill="rgb(210,31,41)"/><text x="19.3963%" y="143.50"></text></g><g><title>MIR_borrow_checking (23,422,012 samples, 11.09%)</title><rect x="8.8221%" y="165" width="11.0933%" height="15" fill="rgb(221,200,47)"/><text x="9.0721%" y="175.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (23,271,368 samples, 11.02%)</title><rect x="8.8934%" y="149" width="11.0220%" height="15" fill="rgb(226,26,5)"/><text x="9.1434%" y="159.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (226,303 samples, 0.11%)</title><rect x="20.3166%" y="117" width="0.1072%" height="15" fill="rgb(249,33,26)"/><text x="20.5666%" y="127.50"></text></g><g><title>codegen_fn_attrs (434,906 samples, 0.21%)</title><rect x="20.2271%" y="133" width="0.2060%" height="15" fill="rgb(235,183,28)"/><text x="20.4771%" y="143.50"></text></g><g><title>check_mod_attrs (988,941 samples, 0.47%)</title><rect x="20.0231%" y="149" width="0.4684%" height="15" fill="rgb(221,5,38)"/><text x="20.2731%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (302,894 samples, 0.14%)</title><rect x="20.5845%" y="149" width="0.1435%" height="15" fill="rgb(247,18,42)"/><text x="20.8345%" y="159.50"></text></g><g><title>misc_checking_1 (1,547,517 samples, 0.73%)</title><rect x="20.0152%" y="165" width="0.7329%" height="15" fill="rgb(241,131,45)"/><text x="20.2652%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (437,245 samples, 0.21%)</title><rect x="20.7487%" y="149" width="0.2071%" height="15" fill="rgb(249,31,29)"/><text x="20.9987%" y="159.50"></text></g><g><title>check_mod_liveness (355,094 samples, 0.17%)</title><rect x="20.7876%" y="133" width="0.1682%" height="15" fill="rgb(225,111,53)"/><text x="21.0376%" y="143.50"></text></g><g><title>misc_checking_2 (972,921 samples, 0.46%)</title><rect x="20.7481%" y="165" width="0.4608%" height="15" fill="rgb(238,160,17)"/><text x="20.9981%" y="175.50"></text></g><g><title>match_checking (534,416 samples, 0.25%)</title><rect x="20.9558%" y="149" width="0.2531%" height="15" fill="rgb(214,148,48)"/><text x="21.2058%" y="159.50"></text></g><g><title>check_match (503,115 samples, 0.24%)</title><rect x="20.9706%" y="133" width="0.2383%" height="15" fill="rgb(232,36,49)"/><text x="21.2206%" y="143.50"></text></g><g><title>death_checking (345,164 samples, 0.16%)</title><rect x="21.3121%" y="149" width="0.1635%" height="15" fill="rgb(209,103,24)"/><text x="21.5621%" y="159.50"></text></g><g><title>crate_lints (2,009,082 samples, 0.95%)</title><rect x="21.4762%" y="133" width="0.9516%" height="15" fill="rgb(229,88,8)"/><text x="21.7262%" y="143.50"></text></g><g><title>type_of (1,120,331 samples, 0.53%)</title><rect x="21.8971%" y="117" width="0.5306%" height="15" fill="rgb(213,181,19)"/><text x="22.1471%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (879,098 samples, 0.42%)</title><rect x="22.0114%" y="101" width="0.4164%" height="15" fill="rgb(254,191,54)"/><text x="22.2614%" y="111.50"></text></g><g><title>lint_checking (2,354,326 samples, 1.12%)</title><rect x="21.4755%" y="149" width="1.1151%" height="15" fill="rgb(241,83,37)"/><text x="21.7255%" y="159.50"></text></g><g><title>module_lints (343,834 samples, 0.16%)</title><rect x="22.4278%" y="133" width="0.1628%" height="15" fill="rgb(233,36,39)"/><text x="22.6778%" y="143.50"></text></g><g><title>lint_mod (341,294 samples, 0.16%)</title><rect x="22.4290%" y="117" width="0.1616%" height="15" fill="rgb(226,3,54)"/><text x="22.6790%" y="127.50"></text></g><g><title>privacy_access_levels (285,583 samples, 0.14%)</title><rect x="22.5906%" y="149" width="0.1353%" height="15" fill="rgb(245,192,40)"/><text x="22.8406%" y="159.50"></text></g><g><title>privacy_checking_modules (583,167 samples, 0.28%)</title><rect x="22.7259%" y="149" width="0.2762%" height="15" fill="rgb(238,167,29)"/><text x="22.9759%" y="159.50"></text></g><g><title>check_mod_privacy (581,477 samples, 0.28%)</title><rect x="22.7267%" y="133" width="0.2754%" height="15" fill="rgb(232,182,51)"/><text x="22.9767%" y="143.50"></text></g><g><title>misc_checking_3 (3,800,933 samples, 1.80%)</title><rect x="21.2089%" y="165" width="1.8002%" height="15" fill="rgb(231,60,39)"/><text x="21.4589%" y="175.50">m..</text></g><g><title>adt_destructor (302,574 samples, 0.14%)</title><rect x="23.0758%" y="117" width="0.1433%" height="15" fill="rgb(208,69,12)"/><text x="23.3258%" y="127.50"></text></g><g><title>coherent_trait (294,114 samples, 0.14%)</title><rect x="23.0798%" y="101" width="0.1393%" height="15" fill="rgb(235,93,37)"/><text x="23.3298%" y="111.50"></text></g><g><title>specialization_graph_of (292,884 samples, 0.14%)</title><rect x="23.0804%" y="85" width="0.1387%" height="15" fill="rgb(213,116,39)"/><text x="23.3304%" y="95.50"></text></g><g><title>impl_parent (2,323,853 samples, 1.10%)</title><rect x="24.9108%" y="101" width="1.1006%" height="15" fill="rgb(222,207,29)"/><text x="25.1608%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,259,342 samples, 0.60%)</title><rect x="25.4150%" y="85" width="0.5965%" height="15" fill="rgb(206,96,30)"/><text x="25.6650%" y="95.50"></text></g><g><title>impl_trait_ref (5,358,519 samples, 2.54%)</title><rect x="26.0115%" y="101" width="2.5379%" height="15" fill="rgb(218,138,4)"/><text x="26.2615%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,274,071 samples, 2.02%)</title><rect x="26.5251%" y="85" width="2.0243%" height="15" fill="rgb(250,191,14)"/><text x="26.7751%" y="95.50">m..</text></g><g><title>trait_impls_of (693,039 samples, 0.33%)</title><rect x="28.5650%" y="101" width="0.3282%" height="15" fill="rgb(239,60,40)"/><text x="28.8150%" y="111.50"></text></g><g><title>coherent_trait (12,328,648 samples, 5.84%)</title><rect x="23.0546%" y="133" width="5.8392%" height="15" fill="rgb(206,27,48)"/><text x="23.3046%" y="143.50">coheren..</text></g><g><title>specialization_graph_of (11,787,072 samples, 5.58%)</title><rect x="23.3111%" y="117" width="5.5827%" height="15" fill="rgb(225,35,8)"/><text x="23.5611%" y="127.50">special..</text></g><g><title>coherence_checking (12,432,759 samples, 5.89%)</title><rect x="23.0432%" y="149" width="5.8885%" height="15" fill="rgb(250,213,24)"/><text x="23.2932%" y="159.50">coheren..</text></g><g><title>associated_item (751,900 samples, 0.36%)</title><rect x="40.5971%" y="85" width="0.3561%" height="15" fill="rgb(247,123,22)"/><text x="40.8471%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (592,449 samples, 0.28%)</title><rect x="40.6726%" y="69" width="0.2806%" height="15" fill="rgb(231,138,38)"/><text x="40.9226%" y="79.50"></text></g><g><title>associated_items (1,016,913 samples, 0.48%)</title><rect x="40.4902%" y="101" width="0.4816%" height="15" fill="rgb(231,145,46)"/><text x="40.7402%" y="111.50"></text></g><g><title>dropck_outlives (212,162 samples, 0.10%)</title><rect x="40.9922%" y="101" width="0.1005%" height="15" fill="rgb(251,118,11)"/><text x="41.2422%" y="111.50"></text></g><g><title>generics_of (1,193,821 samples, 0.57%)</title><rect x="44.6781%" y="85" width="0.5654%" height="15" fill="rgb(217,147,25)"/><text x="44.9281%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (937,968 samples, 0.44%)</title><rect x="44.7993%" y="69" width="0.4442%" height="15" fill="rgb(247,81,37)"/><text x="45.0493%" y="79.50"></text></g><g><title>impl_trait_ref (717,599 samples, 0.34%)</title><rect x="45.4269%" y="85" width="0.3399%" height="15" fill="rgb(209,12,38)"/><text x="45.6769%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (561,499 samples, 0.27%)</title><rect x="45.5008%" y="69" width="0.2659%" height="15" fill="rgb(227,1,9)"/><text x="45.7508%" y="79.50"></text></g><g><title>predicates_of (975,280 samples, 0.46%)</title><rect x="45.7968%" y="85" width="0.4619%" height="15" fill="rgb(248,47,43)"/><text x="46.0468%" y="95.50"></text></g><g><title>predicates_defined_on (553,905 samples, 0.26%)</title><rect x="45.9964%" y="69" width="0.2623%" height="15" fill="rgb(221,10,30)"/><text x="46.2464%" y="79.50"></text></g><g><title>specializes (2,734,474 samples, 1.30%)</title><rect x="46.2587%" y="85" width="1.2951%" height="15" fill="rgb(210,229,1)"/><text x="46.5087%" y="95.50"></text></g><g><title>param_env (1,727,961 samples, 0.82%)</title><rect x="46.7354%" y="69" width="0.8184%" height="15" fill="rgb(222,148,37)"/><text x="46.9854%" y="79.50"></text></g><g><title>def_span (702,539 samples, 0.33%)</title><rect x="47.2211%" y="53" width="0.3327%" height="15" fill="rgb(234,67,33)"/><text x="47.4711%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (625,079 samples, 0.30%)</title><rect x="47.2578%" y="37" width="0.2961%" height="15" fill="rgb(247,98,35)"/><text x="47.5078%" y="47.50"></text></g><g><title>trait_impls_of (452,175 samples, 0.21%)</title><rect x="47.5620%" y="85" width="0.2142%" height="15" fill="rgb(247,138,52)"/><text x="47.8120%" y="95.50"></text></g><g><title>evaluate_obligation (14,145,659 samples, 6.70%)</title><rect x="41.0926%" y="101" width="6.6998%" height="15" fill="rgb(213,79,30)"/><text x="41.3426%" y="111.50">evaluate_..</text></g><g><title>generics_of (662,714 samples, 0.31%)</title><rect x="47.8494%" y="101" width="0.3139%" height="15" fill="rgb(246,177,23)"/><text x="48.0994%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (501,492 samples, 0.24%)</title><rect x="47.9258%" y="85" width="0.2375%" height="15" fill="rgb(230,62,27)"/><text x="48.1758%" y="95.50"></text></g><g><title>impl_item_implementor_ids (401,575 samples, 0.19%)</title><rect x="48.1652%" y="101" width="0.1902%" height="15" fill="rgb(216,154,8)"/><text x="48.4152%" y="111.50"></text></g><g><title>associated_items (342,044 samples, 0.16%)</title><rect x="48.1934%" y="85" width="0.1620%" height="15" fill="rgb(244,35,45)"/><text x="48.4434%" y="95.50"></text></g><g><title>impl_trait_ref (771,986 samples, 0.37%)</title><rect x="48.3636%" y="101" width="0.3656%" height="15" fill="rgb(251,115,12)"/><text x="48.6136%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (647,275 samples, 0.31%)</title><rect x="48.4226%" y="85" width="0.3066%" height="15" fill="rgb(240,54,50)"/><text x="48.6726%" y="95.50"></text></g><g><title>predicates_of (321,346 samples, 0.15%)</title><rect x="49.0533%" y="101" width="0.1522%" height="15" fill="rgb(233,84,52)"/><text x="49.3033%" y="111.50"></text></g><g><title>item_bodies_checking (43,149,242 samples, 20.44%)</title><rect x="28.9507%" y="149" width="20.4367%" height="15" fill="rgb(207,117,47)"/><text x="29.2007%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (43,146,092 samples, 20.44%)</title><rect x="28.9522%" y="133" width="20.4352%" height="15" fill="rgb(249,43,39)"/><text x="29.2022%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (43,040,341 samples, 20.39%)</title><rect x="29.0023%" y="117" width="20.3851%" height="15" fill="rgb(209,38,44)"/><text x="29.2523%" y="127.50">typeck</text></g><g><title>item_types_checking (1,469,426 samples, 0.70%)</title><rect x="49.3874%" y="149" width="0.6960%" height="15" fill="rgb(236,212,23)"/><text x="49.6374%" y="159.50"></text></g><g><title>check_mod_item_types (1,467,106 samples, 0.69%)</title><rect x="49.3885%" y="133" width="0.6949%" height="15" fill="rgb(242,79,21)"/><text x="49.6385%" y="143.50"></text></g><g><title>fn_sig (315,523 samples, 0.15%)</title><rect x="50.2216%" y="117" width="0.1494%" height="15" fill="rgb(211,96,35)"/><text x="50.4716%" y="127.50"></text></g><g><title>named_region_map (252,614 samples, 0.12%)</title><rect x="50.4252%" y="101" width="0.1196%" height="15" fill="rgb(253,215,40)"/><text x="50.6752%" y="111.50"></text></g><g><title>resolve_lifetimes (227,244 samples, 0.11%)</title><rect x="50.4372%" y="85" width="0.1076%" height="15" fill="rgb(211,81,21)"/><text x="50.6872%" y="95.50"></text></g><g><title>generics_of (385,545 samples, 0.18%)</title><rect x="50.3711%" y="117" width="0.1826%" height="15" fill="rgb(208,190,38)"/><text x="50.6211%" y="127.50"></text></g><g><title>explicit_predicates_of (349,382 samples, 0.17%)</title><rect x="50.6649%" y="85" width="0.1655%" height="15" fill="rgb(235,213,38)"/><text x="50.9149%" y="95.50"></text></g><g><title>predicates_of (579,404 samples, 0.27%)</title><rect x="50.5929%" y="117" width="0.2744%" height="15" fill="rgb(237,122,38)"/><text x="50.8429%" y="127.50"></text></g><g><title>predicates_defined_on (518,343 samples, 0.25%)</title><rect x="50.6219%" y="101" width="0.2455%" height="15" fill="rgb(244,218,35)"/><text x="50.8719%" y="111.50"></text></g><g><title>type_collecting (1,827,021 samples, 0.87%)</title><rect x="50.0839%" y="149" width="0.8653%" height="15" fill="rgb(240,68,47)"/><text x="50.3339%" y="159.50"></text></g><g><title>collect_mod_item_types (1,820,181 samples, 0.86%)</title><rect x="50.0871%" y="133" width="0.8621%" height="15" fill="rgb(210,16,53)"/><text x="50.3371%" y="143.50"></text></g><g><title>evaluate_obligation (596,095 samples, 0.28%)</title><rect x="52.0628%" y="117" width="0.2823%" height="15" fill="rgb(235,124,12)"/><text x="52.3128%" y="127.50"></text></g><g><title>implied_outlives_bounds (219,261 samples, 0.10%)</title><rect x="52.3451%" y="117" width="0.1038%" height="15" fill="rgb(224,169,11)"/><text x="52.5951%" y="127.50"></text></g><g><title>param_env (350,828 samples, 0.17%)</title><rect x="52.4490%" y="117" width="0.1662%" height="15" fill="rgb(250,166,2)"/><text x="52.6990%" y="127.50"></text></g><g><title>region_scope_tree (459,392 samples, 0.22%)</title><rect x="52.6261%" y="117" width="0.2176%" height="15" fill="rgb(242,216,29)"/><text x="52.8761%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,820,118 samples, 1.81%)</title><rect x="51.0613%" y="133" width="1.8093%" height="15" fill="rgb(230,116,27)"/><text x="51.3113%" y="143.50">c..</text></g><g><title>evaluate_obligation (538,497 samples, 0.26%)</title><rect x="53.6008%" y="117" width="0.2550%" height="15" fill="rgb(228,99,48)"/><text x="53.8508%" y="127.50"></text></g><g><title>param_env (274,132 samples, 0.13%)</title><rect x="53.9345%" y="117" width="0.1298%" height="15" fill="rgb(253,11,6)"/><text x="54.1845%" y="127.50"></text></g><g><title>check_item_well_formed (2,716,942 samples, 1.29%)</title><rect x="52.8706%" y="133" width="1.2868%" height="15" fill="rgb(247,143,39)"/><text x="53.1206%" y="143.50"></text></g><g><title>analysis (96,502,838 samples, 45.71%)</title><rect x="8.6730%" y="181" width="45.7065%" height="15" fill="rgb(236,97,10)"/><text x="8.9230%" y="191.50">analysis</text></g><g><title>type_check_crate (66,234,029 samples, 31.37%)</title><rect x="23.0092%" y="165" width="31.3703%" height="15" fill="rgb(233,208,19)"/><text x="23.2592%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,235,681 samples, 3.43%)</title><rect x="50.9524%" y="149" width="3.4270%" height="15" fill="rgb(216,164,2)"/><text x="51.2024%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (468,715 samples, 0.22%)</title><rect x="54.1575%" y="133" width="0.2220%" height="15" fill="rgb(220,129,5)"/><text x="54.4075%" y="143.50"></text></g><g><title>fn_abi_of_instance (618,299 samples, 0.29%)</title><rect x="55.2194%" y="149" width="0.2928%" height="15" fill="rgb(242,17,10)"/><text x="55.4694%" y="159.50"></text></g><g><title>codegen_module (1,885,222 samples, 0.89%)</title><rect x="54.6769%" y="165" width="0.8929%" height="15" fill="rgb(242,107,0)"/><text x="54.9269%" y="175.50"></text></g><g><title>optimized_mir (306,873 samples, 0.15%)</title><rect x="55.6839%" y="117" width="0.1453%" height="15" fill="rgb(251,28,31)"/><text x="55.9339%" y="127.50"></text></g><g><title>specialization_graph_of (451,966 samples, 0.21%)</title><rect x="55.9413%" y="101" width="0.2141%" height="15" fill="rgb(233,223,10)"/><text x="56.1913%" y="111.50"></text></g><g><title>resolve_instance (709,879 samples, 0.34%)</title><rect x="55.8293%" y="117" width="0.3362%" height="15" fill="rgb(215,21,27)"/><text x="56.0793%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,371,915 samples, 0.65%)</title><rect x="55.5810%" y="133" width="0.6498%" height="15" fill="rgb(232,23,21)"/><text x="55.8310%" y="143.50"></text></g><g><title>monomorphization_collector (1,418,796 samples, 0.67%)</title><rect x="55.5801%" y="149" width="0.6720%" height="15" fill="rgb(244,5,23)"/><text x="55.8301%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,550,888 samples, 0.73%)</title><rect x="55.5702%" y="165" width="0.7345%" height="15" fill="rgb(226,81,46)"/><text x="55.8202%" y="175.50"></text></g><g><title>codegen_crate (4,117,256 samples, 1.95%)</title><rect x="54.3853%" y="181" width="1.9500%" height="15" fill="rgb(247,70,30)"/><text x="54.6353%" y="191.50">c..</text></g><g><title>codegen_module_optimize (13,590,620 samples, 6.44%)</title><rect x="56.3353%" y="181" width="6.4369%" height="15" fill="rgb(212,68,19)"/><text x="56.5853%" y="191.50">codegen_..</text></g><g><title>LLVM_module_optimize (12,076,393 samples, 5.72%)</title><rect x="57.0525%" y="165" width="5.7197%" height="15" fill="rgb(240,187,13)"/><text x="57.3025%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_lto_optimize (4,028,786 samples, 1.91%)</title><rect x="63.3126%" y="165" width="1.9081%" height="15" fill="rgb(223,113,26)"/><text x="63.5626%" y="175.50">L..</text></g><g><title>LLVM_module_codegen (12,112,985 samples, 5.74%)</title><rect x="65.2207%" y="165" width="5.7370%" height="15" fill="rgb(206,192,2)"/><text x="65.4707%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (11,908,473 samples, 5.64%)</title><rect x="65.3176%" y="149" width="5.6402%" height="15" fill="rgb(241,108,4)"/><text x="65.5676%" y="159.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (17,393,545 samples, 8.24%)</title><rect x="62.7722%" y="181" width="8.2381%" height="15" fill="rgb(247,173,49)"/><text x="63.0222%" y="191.50">codegen_mod..</text></g><g><title>metadata_load_macro (221,093 samples, 0.10%)</title><rect x="80.7185%" y="133" width="0.1047%" height="15" fill="rgb(224,114,35)"/><text x="80.9685%" y="143.50"></text></g><g><title>macro_expand_crate (22,274,779 samples, 10.55%)</title><rect x="71.3070%" y="165" width="10.5500%" height="15" fill="rgb(245,159,27)"/><text x="71.5570%" y="175.50">macro_expand_cr..</text></g><g><title>expand_crate (22,259,409 samples, 10.54%)</title><rect x="71.3142%" y="149" width="10.5427%" height="15" fill="rgb(245,172,44)"/><text x="71.5642%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,182,444 samples, 1.03%)</title><rect x="80.8233%" y="133" width="1.0337%" height="15" fill="rgb(236,23,11)"/><text x="81.0733%" y="143.50"></text></g><g><title>metadata_register_crate (803,838 samples, 0.38%)</title><rect x="81.4762%" y="117" width="0.3807%" height="15" fill="rgb(205,117,38)"/><text x="81.7262%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (269,263 samples, 0.13%)</title><rect x="81.8589%" y="165" width="0.1275%" height="15" fill="rgb(237,72,25)"/><text x="82.1089%" y="175.50"></text></g><g><title>finalize_macro_resolutions (241,802 samples, 0.11%)</title><rect x="82.0044%" y="149" width="0.1145%" height="15" fill="rgb(244,70,9)"/><text x="82.2544%" y="159.50"></text></g><g><title>late_resolve_crate (2,372,617 samples, 1.12%)</title><rect x="82.1189%" y="149" width="1.1237%" height="15" fill="rgb(217,125,39)"/><text x="82.3689%" y="159.50"></text></g><g><title>configure_and_expand (25,938,530 samples, 12.29%)</title><rect x="71.0103%" y="181" width="12.2852%" height="15" fill="rgb(235,36,10)"/><text x="71.2603%" y="191.50">configure_and_expa..</text></g><g><title>resolve_crate (2,763,911 samples, 1.31%)</title><rect x="81.9864%" y="165" width="1.3091%" height="15" fill="rgb(251,123,47)"/><text x="82.2364%" y="175.50"></text></g><g><title>early_lint_checks (352,834 samples, 0.17%)</title><rect x="83.4002%" y="181" width="0.1671%" height="15" fill="rgb(221,13,13)"/><text x="83.6502%" y="191.50"></text></g><g><title>free_global_ctxt (4,266,937 samples, 2.02%)</title><rect x="83.5673%" y="181" width="2.0209%" height="15" fill="rgb(238,131,9)"/><text x="83.8173%" y="191.50">f..</text></g><g><title>exported_symbols (225,133 samples, 0.11%)</title><rect x="86.4354%" y="165" width="0.1066%" height="15" fill="rgb(211,50,8)"/><text x="86.6854%" y="175.50"></text></g><g><title>layout_of (520,595 samples, 0.25%)</title><rect x="88.1515%" y="149" width="0.2466%" height="15" fill="rgb(245,182,24)"/><text x="88.4015%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,046,035 samples, 1.44%)</title><rect x="88.3981%" y="149" width="1.4427%" height="15" fill="rgb(242,14,37)"/><text x="88.6481%" y="159.50"></text></g><g><title>optimized_mir (6,890,639 samples, 3.26%)</title><rect x="86.5808%" y="165" width="3.2636%" height="15" fill="rgb(246,228,12)"/><text x="86.8308%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (9,076,242 samples, 4.30%)</title><rect x="85.5882%" y="181" width="4.2988%" height="15" fill="rgb(213,55,15)"/><text x="85.8382%" y="191.50">gener..</text></g><g><title>hir_lowering (2,920,423 samples, 1.38%)</title><rect x="89.8870%" y="181" width="1.3832%" height="15" fill="rgb(209,9,3)"/><text x="90.1370%" y="191.50"></text></g><g><title>finish_ongoing_codegen (11,462,208 samples, 5.43%)</title><rect x="91.2822%" y="165" width="5.4288%" height="15" fill="rgb(230,59,30)"/><text x="91.5322%" y="175.50">finish_..</text></g><g><title>link_crate (907,280 samples, 0.43%)</title><rect x="96.7110%" y="165" width="0.4297%" height="15" fill="rgb(209,121,21)"/><text x="96.9610%" y="175.50"></text></g><g><title>link_binary (877,899 samples, 0.42%)</title><rect x="96.7249%" y="149" width="0.4158%" height="15" fill="rgb(220,109,13)"/><text x="96.9749%" y="159.50"></text></g><g><title>link_rlib (605,877 samples, 0.29%)</title><rect x="96.8537%" y="133" width="0.2870%" height="15" fill="rgb(232,18,1)"/><text x="97.1037%" y="143.50"></text></g><g><title>link (12,403,559 samples, 5.87%)</title><rect x="91.2702%" y="181" width="5.8747%" height="15" fill="rgb(215,41,42)"/><text x="91.5202%" y="191.50">link</text></g><g><title>parse_crate (4,221,286 samples, 2.00%)</title><rect x="97.1448%" y="181" width="1.9993%" height="15" fill="rgb(224,123,36)"/><text x="97.3948%" y="191.50">p..</text></g><g><title>prepare_outputs (216,592 samples, 0.10%)</title><rect x="99.1483%" y="181" width="0.1026%" height="15" fill="rgb(240,125,3)"/><text x="99.3983%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,098,963 samples, 0.52%)</title><rect x="99.2508%" y="181" width="0.5205%" height="15" fill="rgb(205,98,50)"/><text x="99.5008%" y="191.50"></text></g><g><title>all (211,136,146 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (211,136,146 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (393,324 samples, 0.19%)</title><rect x="99.8137%" y="181" width="0.1863%" height="15" fill="rgb(213,199,42)"/><text x="100.0637%" y="191.50"></text></g></svg></svg>