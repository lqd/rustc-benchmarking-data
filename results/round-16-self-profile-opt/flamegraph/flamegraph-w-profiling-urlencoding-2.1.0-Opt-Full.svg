<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (110,825,902 samples, 14.18%)</title><rect x="0.0989%" y="165" width="14.1810%" height="15" fill="rgb(227,0,7)"/><text x="0.3489%" y="175.50">LLVM_passes</text></g><g><title>needs_drop_raw (901,552 samples, 0.12%)</title><rect x="15.5161%" y="53" width="0.1154%" height="15" fill="rgb(217,0,24)"/><text x="15.7661%" y="63.50"></text></g><g><title>specialization_graph_of (801,569 samples, 0.10%)</title><rect x="15.6854%" y="37" width="0.1026%" height="15" fill="rgb(221,193,54)"/><text x="15.9354%" y="47.50"></text></g><g><title>resolve_instance (1,266,352 samples, 0.16%)</title><rect x="15.6347%" y="53" width="0.1620%" height="15" fill="rgb(248,212,6)"/><text x="15.8847%" y="63.50"></text></g><g><title>mir_const (5,534,181 samples, 0.71%)</title><rect x="15.1501%" y="101" width="0.7081%" height="15" fill="rgb(208,68,35)"/><text x="15.4001%" y="111.50"></text></g><g><title>unsafety_check_result (4,856,731 samples, 0.62%)</title><rect x="15.2368%" y="85" width="0.6215%" height="15" fill="rgb(232,128,0)"/><text x="15.4868%" y="95.50"></text></g><g><title>mir_built (4,267,036 samples, 0.55%)</title><rect x="15.3122%" y="69" width="0.5460%" height="15" fill="rgb(207,160,47)"/><text x="15.5622%" y="79.50"></text></g><g><title>mir_promoted (6,002,765 samples, 0.77%)</title><rect x="15.0929%" y="117" width="0.7681%" height="15" fill="rgb(228,23,34)"/><text x="15.3429%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,523,664 samples, 0.19%)</title><rect x="15.9454%" y="117" width="0.1950%" height="15" fill="rgb(218,30,26)"/><text x="16.1954%" y="127.50"></text></g><g><title>MIR_borrow_checking (14,208,247 samples, 1.82%)</title><rect x="14.3227%" y="149" width="1.8181%" height="15" fill="rgb(220,122,19)"/><text x="14.5727%" y="159.50">M..</text></g><g><title>mir_borrowck (14,154,834 samples, 1.81%)</title><rect x="14.3295%" y="133" width="1.8112%" height="15" fill="rgb(250,228,42)"/><text x="14.5795%" y="143.50">m..</text></g><g><title>check_mod_attrs (789,019 samples, 0.10%)</title><rect x="16.1738%" y="133" width="0.1010%" height="15" fill="rgb(240,193,28)"/><text x="16.4238%" y="143.50"></text></g><g><title>misc_checking_1 (1,726,209 samples, 0.22%)</title><rect x="16.1679%" y="149" width="0.2209%" height="15" fill="rgb(216,20,37)"/><text x="16.4179%" y="159.50"></text></g><g><title>crate_lints (1,665,619 samples, 0.21%)</title><rect x="16.5758%" y="117" width="0.2131%" height="15" fill="rgb(206,188,39)"/><text x="16.8258%" y="127.50"></text></g><g><title>type_of (1,036,449 samples, 0.13%)</title><rect x="16.6563%" y="101" width="0.1326%" height="15" fill="rgb(217,207,13)"/><text x="16.9063%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (805,139 samples, 0.10%)</title><rect x="16.6859%" y="85" width="0.1030%" height="15" fill="rgb(231,73,38)"/><text x="16.9359%" y="95.50"></text></g><g><title>lint_checking (1,861,021 samples, 0.24%)</title><rect x="16.5756%" y="133" width="0.2381%" height="15" fill="rgb(225,20,46)"/><text x="16.8256%" y="143.50"></text></g><g><title>misc_checking_3 (3,179,025 samples, 0.41%)</title><rect x="16.4737%" y="149" width="0.4068%" height="15" fill="rgb(210,31,41)"/><text x="16.7237%" y="159.50"></text></g><g><title>impl_parent (3,818,736 samples, 0.49%)</title><rect x="17.8246%" y="85" width="0.4886%" height="15" fill="rgb(221,200,47)"/><text x="18.0746%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,029,295 samples, 0.26%)</title><rect x="18.0536%" y="69" width="0.2597%" height="15" fill="rgb(226,26,5)"/><text x="18.3036%" y="79.50"></text></g><g><title>impl_trait_ref (8,820,855 samples, 1.13%)</title><rect x="18.3133%" y="85" width="1.1287%" height="15" fill="rgb(249,33,26)"/><text x="18.5633%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,145,041 samples, 0.91%)</title><rect x="18.5277%" y="69" width="0.9143%" height="15" fill="rgb(235,183,28)"/><text x="18.7777%" y="79.50"></text></g><g><title>coherent_trait (21,395,036 samples, 2.74%)</title><rect x="16.8894%" y="117" width="2.7377%" height="15" fill="rgb(221,5,38)"/><text x="17.1394%" y="127.50">co..</text></g><g><title>specialization_graph_of (20,830,958 samples, 2.67%)</title><rect x="16.9616%" y="101" width="2.6655%" height="15" fill="rgb(247,18,42)"/><text x="17.2116%" y="111.50">sp..</text></g><g><title>trait_impls_of (1,444,536 samples, 0.18%)</title><rect x="19.4422%" y="85" width="0.1848%" height="15" fill="rgb(241,131,45)"/><text x="19.6922%" y="95.50"></text></g><g><title>coherence_checking (21,500,366 samples, 2.75%)</title><rect x="16.8862%" y="133" width="2.7511%" height="15" fill="rgb(249,31,29)"/><text x="17.1362%" y="143.50">co..</text></g><g><title>evaluate_obligation (4,265,838 samples, 0.55%)</title><rect x="21.5527%" y="69" width="0.5458%" height="15" fill="rgb(225,111,53)"/><text x="21.8027%" y="79.50"></text></g><g><title>typeck (14,177,766 samples, 1.81%)</title><rect x="20.4897%" y="85" width="1.8142%" height="15" fill="rgb(238,160,17)"/><text x="20.7397%" y="95.50">t..</text></g><g><title>item_bodies_checking (20,812,669 samples, 2.66%)</title><rect x="19.6427%" y="133" width="2.6631%" height="15" fill="rgb(214,148,48)"/><text x="19.8927%" y="143.50">it..</text></g><g><title>typeck_item_bodies (20,809,659 samples, 2.66%)</title><rect x="19.6431%" y="117" width="2.6628%" height="15" fill="rgb(232,36,49)"/><text x="19.8931%" y="127.50">ty..</text></g><g><title>typeck (20,775,219 samples, 2.66%)</title><rect x="19.6475%" y="101" width="2.6583%" height="15" fill="rgb(209,103,24)"/><text x="19.8975%" y="111.50">ty..</text></g><g><title>explicit_predicates_of (1,061,333 samples, 0.14%)</title><rect x="22.5134%" y="69" width="0.1358%" height="15" fill="rgb(229,88,8)"/><text x="22.7634%" y="79.50"></text></g><g><title>predicates_of (1,228,554 samples, 0.16%)</title><rect x="22.4986%" y="101" width="0.1572%" height="15" fill="rgb(213,181,19)"/><text x="22.7486%" y="111.50"></text></g><g><title>predicates_defined_on (1,185,454 samples, 0.15%)</title><rect x="22.5041%" y="85" width="0.1517%" height="15" fill="rgb(254,191,54)"/><text x="22.7541%" y="95.50"></text></g><g><title>type_collecting (2,501,877 samples, 0.32%)</title><rect x="22.3549%" y="133" width="0.3201%" height="15" fill="rgb(241,83,37)"/><text x="22.6049%" y="143.50"></text></g><g><title>collect_mod_item_types (2,481,097 samples, 0.32%)</title><rect x="22.3575%" y="117" width="0.3175%" height="15" fill="rgb(233,36,39)"/><text x="22.6075%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,589,218 samples, 0.20%)</title><rect x="22.6867%" y="117" width="0.2034%" height="15" fill="rgb(226,3,54)"/><text x="22.9367%" y="127.50"></text></g><g><title>analysis (69,107,842 samples, 8.84%)</title><rect x="14.2800%" y="165" width="8.8429%" height="15" fill="rgb(245,192,40)"/><text x="14.5300%" y="175.50">analysis</text></g><g><title>type_check_crate (48,784,377 samples, 6.24%)</title><rect x="16.8805%" y="149" width="6.2423%" height="15" fill="rgb(238,167,29)"/><text x="17.1305%" y="159.50">type_che..</text></g><g><title>wf_checking (3,497,579 samples, 0.45%)</title><rect x="22.6753%" y="133" width="0.4475%" height="15" fill="rgb(232,182,51)"/><text x="22.9253%" y="143.50"></text></g><g><title>check_item_well_formed (1,819,461 samples, 0.23%)</title><rect x="22.8900%" y="117" width="0.2328%" height="15" fill="rgb(231,60,39)"/><text x="23.1400%" y="127.50"></text></g><g><title>layout_of (895,298 samples, 0.11%)</title><rect x="26.2654%" y="117" width="0.1146%" height="15" fill="rgb(208,69,12)"/><text x="26.5154%" y="127.50"></text></g><g><title>param_env (2,689,347 samples, 0.34%)</title><rect x="26.3800%" y="117" width="0.3441%" height="15" fill="rgb(235,93,37)"/><text x="26.6300%" y="127.50"></text></g><g><title>fn_abi_of_instance (7,006,725 samples, 0.90%)</title><rect x="25.9062%" y="133" width="0.8966%" height="15" fill="rgb(213,116,39)"/><text x="26.1562%" y="143.50"></text></g><g><title>codegen_module (27,773,508 samples, 3.55%)</title><rect x="23.3502%" y="149" width="3.5538%" height="15" fill="rgb(222,207,29)"/><text x="23.6002%" y="159.50">code..</text></g><g><title>item_attrs (892,384 samples, 0.11%)</title><rect x="27.1321%" y="85" width="0.1142%" height="15" fill="rgb(206,96,30)"/><text x="27.3821%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (852,574 samples, 0.11%)</title><rect x="27.1372%" y="69" width="0.1091%" height="15" fill="rgb(218,138,4)"/><text x="27.3872%" y="79.50"></text></g><g><title>codegen_fn_attrs (1,548,112 samples, 0.20%)</title><rect x="27.0989%" y="101" width="0.1981%" height="15" fill="rgb(250,191,14)"/><text x="27.3489%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,721,762 samples, 0.22%)</title><rect x="27.4527%" y="85" width="0.2203%" height="15" fill="rgb(239,60,40)"/><text x="27.7027%" y="95.50"></text></g><g><title>optimized_mir (3,033,187 samples, 0.39%)</title><rect x="27.3698%" y="101" width="0.3881%" height="15" fill="rgb(206,27,48)"/><text x="27.6198%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (2,385,042 samples, 0.31%)</title><rect x="27.8495%" y="85" width="0.3052%" height="15" fill="rgb(225,35,8)"/><text x="28.0995%" y="95.50"></text></g><g><title>specialization_graph_of (3,248,424 samples, 0.42%)</title><rect x="28.2255%" y="85" width="0.4157%" height="15" fill="rgb(250,213,24)"/><text x="28.4755%" y="95.50"></text></g><g><title>impl_trait_ref (1,201,753 samples, 0.15%)</title><rect x="28.4874%" y="69" width="0.1538%" height="15" fill="rgb(247,123,22)"/><text x="28.7374%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,006,632 samples, 0.13%)</title><rect x="28.5124%" y="53" width="0.1288%" height="15" fill="rgb(231,138,38)"/><text x="28.7624%" y="63.50"></text></g><g><title>resolve_instance (7,190,591 samples, 0.92%)</title><rect x="27.7580%" y="101" width="0.9201%" height="15" fill="rgb(231,145,46)"/><text x="28.0080%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (14,511,470 samples, 1.86%)</title><rect x="26.9106%" y="117" width="1.8569%" height="15" fill="rgb(251,118,11)"/><text x="27.1606%" y="127.50">m..</text></g><g><title>monomorphization_collector (14,545,000 samples, 1.86%)</title><rect x="26.9101%" y="133" width="1.8611%" height="15" fill="rgb(217,147,25)"/><text x="27.1601%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (1,400,455 samples, 0.18%)</title><rect x="28.7718%" y="117" width="0.1792%" height="15" fill="rgb(247,81,37)"/><text x="29.0218%" y="127.50"></text></g><g><title>symbol_name (1,289,814 samples, 0.17%)</title><rect x="28.7860%" y="101" width="0.1650%" height="15" fill="rgb(209,12,38)"/><text x="29.0360%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (16,387,681 samples, 2.10%)</title><rect x="26.9051%" y="149" width="2.0969%" height="15" fill="rgb(227,1,9)"/><text x="27.1551%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,803,350 samples, 0.23%)</title><rect x="28.7713%" y="133" width="0.2308%" height="15" fill="rgb(248,47,43)"/><text x="29.0213%" y="143.50"></text></g><g><title>codegen_crate (45,997,637 samples, 5.89%)</title><rect x="23.1241%" y="165" width="5.8858%" height="15" fill="rgb(221,10,30)"/><text x="23.3741%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (270,797,173 samples, 34.65%)</title><rect x="29.0099%" y="165" width="34.6506%" height="15" fill="rgb(210,229,1)"/><text x="29.2599%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (257,527,619 samples, 32.95%)</title><rect x="30.7078%" y="149" width="32.9526%" height="15" fill="rgb(222,148,37)"/><text x="30.9578%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (62,613,181 samples, 8.01%)</title><rect x="64.5987%" y="149" width="8.0118%" height="15" fill="rgb(234,67,33)"/><text x="64.8487%" y="159.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (84,963,484 samples, 10.87%)</title><rect x="72.6106%" y="149" width="10.8717%" height="15" fill="rgb(247,98,35)"/><text x="72.8606%" y="159.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (83,384,519 samples, 10.67%)</title><rect x="72.8126%" y="133" width="10.6697%" height="15" fill="rgb(247,138,52)"/><text x="73.0626%" y="143.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (5,882,596 samples, 0.75%)</title><rect x="83.4823%" y="149" width="0.7527%" height="15" fill="rgb(213,79,30)"/><text x="83.7323%" y="159.50"></text></g><g><title>codegen_module_perform_lto (161,142,904 samples, 20.62%)</title><rect x="63.6605%" y="165" width="20.6195%" height="15" fill="rgb(246,177,23)"/><text x="63.9105%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,647,589 samples, 0.34%)</title><rect x="86.1565%" y="117" width="0.3388%" height="15" fill="rgb(230,62,27)"/><text x="86.4065%" y="127.50"></text></g><g><title>metadata_register_crate (970,333 samples, 0.12%)</title><rect x="86.3711%" y="101" width="0.1242%" height="15" fill="rgb(216,154,8)"/><text x="86.6211%" y="111.50"></text></g><g><title>macro_expand_crate (16,938,276 samples, 2.17%)</title><rect x="84.3505%" y="149" width="2.1674%" height="15" fill="rgb(244,35,45)"/><text x="84.6005%" y="159.50">m..</text></g><g><title>expand_crate (16,913,436 samples, 2.16%)</title><rect x="84.3537%" y="133" width="2.1642%" height="15" fill="rgb(251,115,12)"/><text x="84.6037%" y="143.50">e..</text></g><g><title>late_resolve_crate (2,892,791 samples, 0.37%)</title><rect x="86.5793%" y="133" width="0.3702%" height="15" fill="rgb(240,54,50)"/><text x="86.8293%" y="143.50"></text></g><g><title>configure_and_expand (20,976,261 samples, 2.68%)</title><rect x="84.2799%" y="165" width="2.6841%" height="15" fill="rgb(233,84,52)"/><text x="84.5299%" y="175.50">co..</text></g><g><title>resolve_crate (3,376,647 samples, 0.43%)</title><rect x="86.5319%" y="149" width="0.4321%" height="15" fill="rgb(207,117,47)"/><text x="86.7819%" y="159.50"></text></g><g><title>free_global_ctxt (6,048,846 samples, 0.77%)</title><rect x="87.0412%" y="165" width="0.7740%" height="15" fill="rgb(249,43,39)"/><text x="87.2912%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,607,179 samples, 0.21%)</title><rect x="88.2005%" y="133" width="0.2057%" height="15" fill="rgb(209,38,44)"/><text x="88.4505%" y="143.50"></text></g><g><title>optimized_mir (3,605,531 samples, 0.46%)</title><rect x="87.9462%" y="149" width="0.4614%" height="15" fill="rgb(236,212,23)"/><text x="88.1962%" y="159.50"></text></g><g><title>generate_crate_metadata (4,681,202 samples, 0.60%)</title><rect x="87.8152%" y="165" width="0.5990%" height="15" fill="rgb(242,79,21)"/><text x="88.0652%" y="175.50"></text></g><g><title>hir_lowering (2,808,981 samples, 0.36%)</title><rect x="88.4142%" y="165" width="0.3594%" height="15" fill="rgb(211,96,35)"/><text x="88.6642%" y="175.50"></text></g><g><title>finish_ongoing_codegen (81,463,618 samples, 10.42%)</title><rect x="88.7769%" y="149" width="10.4239%" height="15" fill="rgb(253,215,40)"/><text x="89.0269%" y="159.50">finish_ongoing_..</text></g><g><title>link_crate (2,271,365 samples, 0.29%)</title><rect x="99.2008%" y="149" width="0.2906%" height="15" fill="rgb(211,81,21)"/><text x="99.4508%" y="159.50"></text></g><g><title>link_binary (2,247,344 samples, 0.29%)</title><rect x="99.2038%" y="133" width="0.2876%" height="15" fill="rgb(208,190,38)"/><text x="99.4538%" y="143.50"></text></g><g><title>link_rlib (1,393,375 samples, 0.18%)</title><rect x="99.3131%" y="117" width="0.1783%" height="15" fill="rgb(235,213,38)"/><text x="99.5631%" y="127.50"></text></g><g><title>link (83,773,504 samples, 10.72%)</title><rect x="88.7736%" y="165" width="10.7195%" height="15" fill="rgb(237,122,38)"/><text x="89.0236%" y="175.50">link</text></g><g><title>parse_crate (1,230,184 samples, 0.16%)</title><rect x="99.4931%" y="165" width="0.1574%" height="15" fill="rgb(244,218,35)"/><text x="99.7431%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,844,911 samples, 0.24%)</title><rect x="99.7017%" y="165" width="0.2361%" height="15" fill="rgb(240,68,47)"/><text x="99.9517%" y="175.50"></text></g><g><title>all (781,508,081 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (781,508,081 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>