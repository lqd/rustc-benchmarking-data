<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,592,224 samples, 5.07%)</title><rect x="0.3855%" y="197" width="5.0684%" height="15" fill="rgb(227,0,7)"/><text x="0.6355%" y="207.50">LLVM_p..</text></g><g><title>codegen_generate_lto_work (309,813 samples, 0.10%)</title><rect x="5.3531%" y="181" width="0.1007%" height="15" fill="rgb(217,0,24)"/><text x="5.6031%" y="191.50"></text></g><g><title>mir_promoted (690,819 samples, 0.22%)</title><rect x="12.2314%" y="133" width="0.2246%" height="15" fill="rgb(221,193,54)"/><text x="12.4814%" y="143.50"></text></g><g><title>mir_const_qualif_const_arg (587,328 samples, 0.19%)</title><rect x="12.2651%" y="117" width="0.1909%" height="15" fill="rgb(248,212,6)"/><text x="12.5151%" y="127.50"></text></g><g><title>mir_const (497,567 samples, 0.16%)</title><rect x="12.2942%" y="101" width="0.1617%" height="15" fill="rgb(208,68,35)"/><text x="12.5442%" y="111.50"></text></g><g><title>unsafety_check_result_for_const_arg (319,394 samples, 0.10%)</title><rect x="12.3521%" y="85" width="0.1038%" height="15" fill="rgb(232,128,0)"/><text x="12.6021%" y="95.50"></text></g><g><title>mir_borrowck_const_arg (1,675,729 samples, 0.54%)</title><rect x="11.9127%" y="149" width="0.5447%" height="15" fill="rgb(207,160,47)"/><text x="12.1627%" y="159.50"></text></g><g><title>param_env (531,096 samples, 0.17%)</title><rect x="13.2467%" y="117" width="0.1726%" height="15" fill="rgb(228,23,34)"/><text x="13.4967%" y="127.50"></text></g><g><title>item_attrs (395,655 samples, 0.13%)</title><rect x="13.7597%" y="85" width="0.1286%" height="15" fill="rgb(218,30,26)"/><text x="14.0097%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (382,405 samples, 0.12%)</title><rect x="13.7640%" y="69" width="0.1243%" height="15" fill="rgb(220,122,19)"/><text x="14.0140%" y="79.50"></text></g><g><title>codegen_fn_attrs (611,779 samples, 0.20%)</title><rect x="13.6993%" y="101" width="0.1989%" height="15" fill="rgb(250,228,42)"/><text x="13.9493%" y="111.50"></text></g><g><title>is_copy_raw (331,872 samples, 0.11%)</title><rect x="15.4543%" y="85" width="0.1079%" height="15" fill="rgb(240,193,28)"/><text x="15.7043%" y="95.50"></text></g><g><title>is_copy_raw (1,552,975 samples, 0.50%)</title><rect x="15.7166%" y="69" width="0.5048%" height="15" fill="rgb(216,20,37)"/><text x="15.9666%" y="79.50"></text></g><g><title>evaluate_obligation (1,380,942 samples, 0.45%)</title><rect x="15.7726%" y="53" width="0.4489%" height="15" fill="rgb(206,188,39)"/><text x="16.0226%" y="63.50"></text></g><g><title>needs_drop_raw (2,033,521 samples, 0.66%)</title><rect x="15.5622%" y="85" width="0.6610%" height="15" fill="rgb(217,207,13)"/><text x="15.8122%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (739,195 samples, 0.24%)</title><rect x="16.3402%" y="69" width="0.2403%" height="15" fill="rgb(231,73,38)"/><text x="16.5902%" y="79.50"></text></g><g><title>impl_parent (395,209 samples, 0.13%)</title><rect x="16.8244%" y="53" width="0.1285%" height="15" fill="rgb(225,20,46)"/><text x="17.0744%" y="63.50"></text></g><g><title>specialization_graph_of (1,813,972 samples, 0.59%)</title><rect x="16.6125%" y="69" width="0.5896%" height="15" fill="rgb(210,31,41)"/><text x="16.8625%" y="79.50"></text></g><g><title>impl_trait_ref (766,697 samples, 0.25%)</title><rect x="16.9529%" y="53" width="0.2492%" height="15" fill="rgb(221,200,47)"/><text x="17.2029%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (630,387 samples, 0.20%)</title><rect x="16.9972%" y="37" width="0.2049%" height="15" fill="rgb(226,26,5)"/><text x="17.2472%" y="47.50"></text></g><g><title>resolve_instance (3,178,053 samples, 1.03%)</title><rect x="16.2232%" y="85" width="1.0331%" height="15" fill="rgb(249,33,26)"/><text x="16.4732%" y="95.50"></text></g><g><title>thir_body (2,105,971 samples, 0.68%)</title><rect x="17.2671%" y="85" width="0.6846%" height="15" fill="rgb(235,183,28)"/><text x="17.5171%" y="95.50"></text></g><g><title>mir_const (15,683,213 samples, 5.10%)</title><rect x="12.8603%" y="133" width="5.0980%" height="15" fill="rgb(221,5,38)"/><text x="13.1103%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (13,963,449 samples, 4.54%)</title><rect x="13.4193%" y="117" width="4.5389%" height="15" fill="rgb(247,18,42)"/><text x="13.6693%" y="127.50">unsaf..</text></g><g><title>mir_built (12,490,200 samples, 4.06%)</title><rect x="13.8982%" y="101" width="4.0600%" height="15" fill="rgb(241,131,45)"/><text x="14.1482%" y="111.50">mir_..</text></g><g><title>mir_const (399,576 samples, 0.13%)</title><rect x="18.0968%" y="117" width="0.1299%" height="15" fill="rgb(249,31,29)"/><text x="18.3468%" y="127.50"></text></g><g><title>mir_const_qualif (856,091 samples, 0.28%)</title><rect x="17.9582%" y="133" width="0.2783%" height="15" fill="rgb(225,111,53)"/><text x="18.2082%" y="143.50"></text></g><g><title>mir_promoted (17,779,636 samples, 5.78%)</title><rect x="12.4574%" y="149" width="5.7794%" height="15" fill="rgb(238,160,17)"/><text x="12.7074%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (503,754 samples, 0.16%)</title><rect x="18.2376%" y="149" width="0.1637%" height="15" fill="rgb(214,148,48)"/><text x="18.4876%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (3,083,343 samples, 1.00%)</title><rect x="18.4014%" y="149" width="1.0023%" height="15" fill="rgb(232,36,49)"/><text x="18.6514%" y="159.50"></text></g><g><title>normalize_projection_ty (2,250,082 samples, 0.73%)</title><rect x="18.6723%" y="133" width="0.7314%" height="15" fill="rgb(209,103,24)"/><text x="18.9223%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,520,220 samples, 1.47%)</title><rect x="19.5322%" y="149" width="1.4693%" height="15" fill="rgb(229,88,8)"/><text x="19.7822%" y="159.50"></text></g><g><title>MIR_borrow_checking (47,374,187 samples, 15.40%)</title><rect x="5.6043%" y="181" width="15.3994%" height="15" fill="rgb(213,181,19)"/><text x="5.8543%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (47,164,874 samples, 15.33%)</title><rect x="5.6723%" y="165" width="15.3313%" height="15" fill="rgb(254,191,54)"/><text x="5.9223%" y="175.50">mir_borrowck</text></g><g><title>mir_drops_elaborated_and_const_checked (524,436 samples, 0.17%)</title><rect x="21.0593%" y="165" width="0.1705%" height="15" fill="rgb(241,83,37)"/><text x="21.3093%" y="175.50"></text></g><g><title>MIR_effect_checking (703,088 samples, 0.23%)</title><rect x="21.0037%" y="181" width="0.2285%" height="15" fill="rgb(233,36,39)"/><text x="21.2537%" y="191.50"></text></g><g><title>codegen_fn_attrs (672,252 samples, 0.22%)</title><rect x="21.4848%" y="149" width="0.2185%" height="15" fill="rgb(226,3,54)"/><text x="21.7348%" y="159.50"></text></g><g><title>check_mod_attrs (1,104,164 samples, 0.36%)</title><rect x="21.3444%" y="165" width="0.3589%" height="15" fill="rgb(245,192,40)"/><text x="21.5944%" y="175.50"></text></g><g><title>mir_borrowck (449,305 samples, 0.15%)</title><rect x="22.1763%" y="37" width="0.1461%" height="15" fill="rgb(238,167,29)"/><text x="22.4263%" y="47.50"></text></g><g><title>mir_for_ctfe (613,197 samples, 0.20%)</title><rect x="22.1234%" y="69" width="0.1993%" height="15" fill="rgb(232,182,51)"/><text x="22.3734%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (565,946 samples, 0.18%)</title><rect x="22.1387%" y="53" width="0.1840%" height="15" fill="rgb(231,60,39)"/><text x="22.3887%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,799,660 samples, 0.58%)</title><rect x="22.0025%" y="117" width="0.5850%" height="15" fill="rgb(208,69,12)"/><text x="22.2525%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,789,009 samples, 0.58%)</title><rect x="22.0060%" y="101" width="0.5815%" height="15" fill="rgb(235,93,37)"/><text x="22.2560%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,785,149 samples, 0.58%)</title><rect x="22.0073%" y="85" width="0.5803%" height="15" fill="rgb(213,116,39)"/><text x="22.2573%" y="95.50"></text></g><g><title>typeck (609,176 samples, 0.20%)</title><rect x="22.3895%" y="69" width="0.1980%" height="15" fill="rgb(222,207,29)"/><text x="22.6395%" y="79.50"></text></g><g><title>is_copy_raw (2,199,184 samples, 0.71%)</title><rect x="21.9087%" y="149" width="0.7149%" height="15" fill="rgb(206,96,30)"/><text x="22.1587%" y="159.50"></text></g><g><title>evaluate_obligation (2,182,764 samples, 0.71%)</title><rect x="21.9141%" y="133" width="0.7095%" height="15" fill="rgb(218,138,4)"/><text x="22.1641%" y="143.50"></text></g><g><title>predicates_of (445,344 samples, 0.14%)</title><rect x="22.7823%" y="133" width="0.1448%" height="15" fill="rgb(250,191,14)"/><text x="23.0323%" y="143.50"></text></g><g><title>predicates_defined_on (443,174 samples, 0.14%)</title><rect x="22.7830%" y="117" width="0.1441%" height="15" fill="rgb(239,60,40)"/><text x="23.0330%" y="127.50"></text></g><g><title>inferred_outlives_of (342,613 samples, 0.11%)</title><rect x="22.8157%" y="101" width="0.1114%" height="15" fill="rgb(206,27,48)"/><text x="23.0657%" y="111.50"></text></g><g><title>inferred_outlives_crate (334,483 samples, 0.11%)</title><rect x="22.8183%" y="85" width="0.1087%" height="15" fill="rgb(225,35,8)"/><text x="23.0683%" y="95.50"></text></g><g><title>param_env (663,797 samples, 0.22%)</title><rect x="22.7235%" y="149" width="0.2158%" height="15" fill="rgb(250,213,24)"/><text x="22.9735%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (3,544,170 samples, 1.15%)</title><rect x="21.8178%" y="165" width="1.1521%" height="15" fill="rgb(247,123,22)"/><text x="22.0678%" y="175.50"></text></g><g><title>misc_checking_1 (5,149,356 samples, 1.67%)</title><rect x="21.3310%" y="181" width="1.6738%" height="15" fill="rgb(231,138,38)"/><text x="21.5810%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (903,270 samples, 0.29%)</title><rect x="23.0053%" y="165" width="0.2936%" height="15" fill="rgb(231,145,46)"/><text x="23.2553%" y="175.50"></text></g><g><title>check_mod_liveness (720,008 samples, 0.23%)</title><rect x="23.0649%" y="149" width="0.2340%" height="15" fill="rgb(251,118,11)"/><text x="23.3149%" y="159.50"></text></g><g><title>misc_checking_2 (1,725,439 samples, 0.56%)</title><rect x="23.0048%" y="181" width="0.5609%" height="15" fill="rgb(217,147,25)"/><text x="23.2548%" y="191.50"></text></g><g><title>match_checking (820,619 samples, 0.27%)</title><rect x="23.2989%" y="165" width="0.2667%" height="15" fill="rgb(247,81,37)"/><text x="23.5489%" y="175.50"></text></g><g><title>check_match (759,778 samples, 0.25%)</title><rect x="23.3187%" y="149" width="0.2470%" height="15" fill="rgb(209,12,38)"/><text x="23.5687%" y="159.50"></text></g><g><title>check_private_in_public (392,904 samples, 0.13%)</title><rect x="23.5690%" y="165" width="0.1277%" height="15" fill="rgb(227,1,9)"/><text x="23.8190%" y="175.50"></text></g><g><title>death_checking (788,669 samples, 0.26%)</title><rect x="23.6967%" y="165" width="0.2564%" height="15" fill="rgb(248,47,43)"/><text x="23.9467%" y="175.50"></text></g><g><title>param_env (802,129 samples, 0.26%)</title><rect x="24.4798%" y="133" width="0.2607%" height="15" fill="rgb(221,10,30)"/><text x="24.7298%" y="143.50"></text></g><g><title>predicates_of (365,374 samples, 0.12%)</title><rect x="24.6218%" y="117" width="0.1188%" height="15" fill="rgb(210,229,1)"/><text x="24.8718%" y="127.50"></text></g><g><title>crate_lints (2,905,512 samples, 0.94%)</title><rect x="23.9535%" y="149" width="0.9445%" height="15" fill="rgb(222,148,37)"/><text x="24.2035%" y="159.50"></text></g><g><title>type_of (473,185 samples, 0.15%)</title><rect x="24.7442%" y="133" width="0.1538%" height="15" fill="rgb(234,67,33)"/><text x="24.9942%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (379,415 samples, 0.12%)</title><rect x="24.7747%" y="117" width="0.1233%" height="15" fill="rgb(247,98,35)"/><text x="25.0247%" y="127.50"></text></g><g><title>lint_checking (3,770,562 samples, 1.23%)</title><rect x="23.9531%" y="165" width="1.2257%" height="15" fill="rgb(247,138,52)"/><text x="24.2031%" y="175.50"></text></g><g><title>module_lints (863,560 samples, 0.28%)</title><rect x="24.8980%" y="149" width="0.2807%" height="15" fill="rgb(213,79,30)"/><text x="25.1480%" y="159.50"></text></g><g><title>lint_mod (852,560 samples, 0.28%)</title><rect x="24.9016%" y="133" width="0.2771%" height="15" fill="rgb(246,177,23)"/><text x="25.1516%" y="143.50"></text></g><g><title>privacy_access_levels (339,614 samples, 0.11%)</title><rect x="25.1787%" y="165" width="0.1104%" height="15" fill="rgb(230,62,27)"/><text x="25.4287%" y="175.50"></text></g><g><title>privacy_checking_modules (1,314,685 samples, 0.43%)</title><rect x="25.2891%" y="165" width="0.4273%" height="15" fill="rgb(216,154,8)"/><text x="25.5391%" y="175.50"></text></g><g><title>check_mod_privacy (1,306,655 samples, 0.42%)</title><rect x="25.2917%" y="149" width="0.4247%" height="15" fill="rgb(244,35,45)"/><text x="25.5417%" y="159.50"></text></g><g><title>misc_checking_3 (6,635,504 samples, 2.16%)</title><rect x="23.5657%" y="181" width="2.1569%" height="15" fill="rgb(251,115,12)"/><text x="23.8157%" y="191.50">m..</text></g><g><title>impl_parent (579,524 samples, 0.19%)</title><rect x="26.2262%" y="117" width="0.1884%" height="15" fill="rgb(240,54,50)"/><text x="26.4762%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (363,473 samples, 0.12%)</title><rect x="26.2965%" y="101" width="0.1182%" height="15" fill="rgb(233,84,52)"/><text x="26.5465%" y="111.50"></text></g><g><title>impl_trait_ref (1,399,179 samples, 0.45%)</title><rect x="26.4146%" y="117" width="0.4548%" height="15" fill="rgb(207,117,47)"/><text x="26.6646%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,187,426 samples, 0.39%)</title><rect x="26.4834%" y="101" width="0.3860%" height="15" fill="rgb(249,43,39)"/><text x="26.7334%" y="111.50"></text></g><g><title>coherent_trait (3,318,916 samples, 1.08%)</title><rect x="25.8511%" y="149" width="1.0788%" height="15" fill="rgb(209,38,44)"/><text x="26.1011%" y="159.50"></text></g><g><title>specialization_graph_of (3,018,073 samples, 0.98%)</title><rect x="25.9489%" y="133" width="0.9811%" height="15" fill="rgb(236,212,23)"/><text x="26.1989%" y="143.50"></text></g><g><title>coherence_checking (3,403,368 samples, 1.11%)</title><rect x="25.8445%" y="165" width="1.1063%" height="15" fill="rgb(242,79,21)"/><text x="26.0945%" y="175.50"></text></g><g><title>associated_item (955,117 samples, 0.31%)</title><rect x="41.3743%" y="101" width="0.3105%" height="15" fill="rgb(211,96,35)"/><text x="41.6243%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (811,096 samples, 0.26%)</title><rect x="41.4211%" y="85" width="0.2637%" height="15" fill="rgb(253,215,40)"/><text x="41.6711%" y="95.50"></text></g><g><title>associated_items (1,288,044 samples, 0.42%)</title><rect x="41.2852%" y="117" width="0.4187%" height="15" fill="rgb(211,81,21)"/><text x="41.5352%" y="127.50"></text></g><g><title>dropck_outlives (724,088 samples, 0.24%)</title><rect x="41.7413%" y="117" width="0.2354%" height="15" fill="rgb(208,190,38)"/><text x="41.9913%" y="127.50"></text></g><g><title>eval_to_const_value_raw (604,067 samples, 0.20%)</title><rect x="41.9766%" y="117" width="0.1964%" height="15" fill="rgb(235,213,38)"/><text x="42.2266%" y="127.50"></text></g><g><title>eval_to_const_value_raw (598,337 samples, 0.19%)</title><rect x="41.9785%" y="101" width="0.1945%" height="15" fill="rgb(237,122,38)"/><text x="42.2285%" y="111.50"></text></g><g><title>eval_to_allocation_raw (587,297 samples, 0.19%)</title><rect x="41.9821%" y="85" width="0.1909%" height="15" fill="rgb(244,218,35)"/><text x="42.2321%" y="95.50"></text></g><g><title>generics_of (855,413 samples, 0.28%)</title><rect x="44.2013%" y="101" width="0.2781%" height="15" fill="rgb(240,68,47)"/><text x="44.4513%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (638,749 samples, 0.21%)</title><rect x="44.2718%" y="85" width="0.2076%" height="15" fill="rgb(210,16,53)"/><text x="44.5218%" y="95.50"></text></g><g><title>impl_trait_ref (1,056,884 samples, 0.34%)</title><rect x="44.5565%" y="101" width="0.3435%" height="15" fill="rgb(235,124,12)"/><text x="44.8065%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (851,720 samples, 0.28%)</title><rect x="44.6231%" y="85" width="0.2769%" height="15" fill="rgb(224,169,11)"/><text x="44.8731%" y="95.50"></text></g><g><title>predicates_of (1,191,841 samples, 0.39%)</title><rect x="44.9241%" y="101" width="0.3874%" height="15" fill="rgb(250,166,2)"/><text x="45.1741%" y="111.50"></text></g><g><title>predicates_defined_on (662,915 samples, 0.22%)</title><rect x="45.0960%" y="85" width="0.2155%" height="15" fill="rgb(242,216,29)"/><text x="45.3460%" y="95.50"></text></g><g><title>specializes (2,620,883 samples, 0.85%)</title><rect x="45.3115%" y="101" width="0.8519%" height="15" fill="rgb(230,116,27)"/><text x="45.5615%" y="111.50"></text></g><g><title>param_env (1,536,058 samples, 0.50%)</title><rect x="45.6641%" y="85" width="0.4993%" height="15" fill="rgb(228,99,48)"/><text x="45.9141%" y="95.50"></text></g><g><title>def_span (687,736 samples, 0.22%)</title><rect x="45.9399%" y="69" width="0.2236%" height="15" fill="rgb(253,11,6)"/><text x="46.1899%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (604,836 samples, 0.20%)</title><rect x="45.9668%" y="53" width="0.1966%" height="15" fill="rgb(247,143,39)"/><text x="46.2168%" y="63.50"></text></g><g><title>trait_impls_of (512,677 samples, 0.17%)</title><rect x="46.1698%" y="101" width="0.1667%" height="15" fill="rgb(236,97,10)"/><text x="46.4198%" y="111.50"></text></g><g><title>evaluate_obligation (12,839,302 samples, 4.17%)</title><rect x="42.1730%" y="117" width="4.1735%" height="15" fill="rgb(233,208,19)"/><text x="42.4230%" y="127.50">evalu..</text></g><g><title>generics_of (312,666 samples, 0.10%)</title><rect x="46.4315%" y="117" width="0.1016%" height="15" fill="rgb(216,164,2)"/><text x="46.6815%" y="127.50"></text></g><g><title>impl_item_implementor_ids (319,453 samples, 0.10%)</title><rect x="46.5331%" y="117" width="0.1038%" height="15" fill="rgb(220,129,5)"/><text x="46.7831%" y="127.50"></text></g><g><title>impl_trait_ref (349,103 samples, 0.11%)</title><rect x="46.6432%" y="117" width="0.1135%" height="15" fill="rgb(242,17,10)"/><text x="46.8932%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (315,083 samples, 0.10%)</title><rect x="46.6543%" y="101" width="0.1024%" height="15" fill="rgb(242,107,0)"/><text x="46.9043%" y="111.50"></text></g><g><title>evaluate_obligation (468,034 samples, 0.15%)</title><rect x="47.0037%" y="101" width="0.1521%" height="15" fill="rgb(251,28,31)"/><text x="47.2537%" y="111.50"></text></g><g><title>method_autoderef_steps (888,999 samples, 0.29%)</title><rect x="46.8707%" y="117" width="0.2890%" height="15" fill="rgb(233,223,10)"/><text x="47.1207%" y="127.50"></text></g><g><title>opt_const_param_of (1,986,003 samples, 0.65%)</title><rect x="47.2023%" y="117" width="0.6456%" height="15" fill="rgb(215,21,27)"/><text x="47.4523%" y="127.50"></text></g><g><title>typeck (1,931,373 samples, 0.63%)</title><rect x="47.2201%" y="101" width="0.6278%" height="15" fill="rgb(232,23,21)"/><text x="47.4701%" y="111.50"></text></g><g><title>predicates_of (631,824 samples, 0.21%)</title><rect x="47.9018%" y="117" width="0.2054%" height="15" fill="rgb(244,5,23)"/><text x="48.1518%" y="127.50"></text></g><g><title>predicates_defined_on (427,053 samples, 0.14%)</title><rect x="47.9684%" y="101" width="0.1388%" height="15" fill="rgb(226,81,46)"/><text x="48.2184%" y="111.50"></text></g><g><title>evaluate_obligation (397,646 samples, 0.13%)</title><rect x="49.7051%" y="101" width="0.1293%" height="15" fill="rgb(247,70,30)"/><text x="49.9551%" y="111.50"></text></g><g><title>typeck (5,207,307 samples, 1.69%)</title><rect x="48.2282%" y="117" width="1.6927%" height="15" fill="rgb(212,68,19)"/><text x="48.4782%" y="127.50"></text></g><g><title>typeck_const_arg (724,998 samples, 0.24%)</title><rect x="49.9209%" y="117" width="0.2357%" height="15" fill="rgb(240,187,13)"/><text x="50.1709%" y="127.50"></text></g><g><title>item_bodies_checking (71,427,834 samples, 23.22%)</title><rect x="26.9639%" y="165" width="23.2182%" height="15" fill="rgb(223,113,26)"/><text x="27.2139%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (71,424,254 samples, 23.22%)</title><rect x="26.9650%" y="149" width="23.2171%" height="15" fill="rgb(206,192,2)"/><text x="27.2150%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (71,285,303 samples, 23.17%)</title><rect x="27.0102%" y="133" width="23.1719%" height="15" fill="rgb(241,108,4)"/><text x="27.2602%" y="143.50">typeck</text></g><g><title>evaluate_obligation (1,002,921 samples, 0.33%)</title><rect x="50.5760%" y="133" width="0.3260%" height="15" fill="rgb(247,173,49)"/><text x="50.8260%" y="143.50"></text></g><g><title>item_types_checking (3,263,227 samples, 1.06%)</title><rect x="50.1821%" y="165" width="1.0607%" height="15" fill="rgb(224,114,35)"/><text x="50.4321%" y="175.50"></text></g><g><title>check_mod_item_types (3,250,737 samples, 1.06%)</title><rect x="50.1861%" y="149" width="1.0567%" height="15" fill="rgb(245,159,27)"/><text x="50.4361%" y="159.50"></text></g><g><title>typeck (803,039 samples, 0.26%)</title><rect x="50.9818%" y="133" width="0.2610%" height="15" fill="rgb(245,172,44)"/><text x="51.2318%" y="143.50"></text></g><g><title>named_region_map (427,765 samples, 0.14%)</title><rect x="51.4733%" y="117" width="0.1390%" height="15" fill="rgb(236,23,11)"/><text x="51.7233%" y="127.50"></text></g><g><title>resolve_lifetimes (413,805 samples, 0.13%)</title><rect x="51.4778%" y="101" width="0.1345%" height="15" fill="rgb(205,117,38)"/><text x="51.7278%" y="111.50"></text></g><g><title>generics_of (554,816 samples, 0.18%)</title><rect x="51.4364%" y="133" width="0.1803%" height="15" fill="rgb(237,72,25)"/><text x="51.6864%" y="143.50"></text></g><g><title>explicit_predicates_of (362,994 samples, 0.12%)</title><rect x="51.6864%" y="101" width="0.1180%" height="15" fill="rgb(244,70,9)"/><text x="51.9364%" y="111.50"></text></g><g><title>predicates_of (569,488 samples, 0.19%)</title><rect x="51.6280%" y="133" width="0.1851%" height="15" fill="rgb(217,125,39)"/><text x="51.8780%" y="143.50"></text></g><g><title>predicates_defined_on (500,298 samples, 0.16%)</title><rect x="51.6505%" y="117" width="0.1626%" height="15" fill="rgb(235,36,10)"/><text x="51.9005%" y="127.50"></text></g><g><title>type_collecting (1,899,402 samples, 0.62%)</title><rect x="51.2455%" y="165" width="0.6174%" height="15" fill="rgb(251,123,47)"/><text x="51.4955%" y="175.50"></text></g><g><title>collect_mod_item_types (1,888,482 samples, 0.61%)</title><rect x="51.2491%" y="149" width="0.6139%" height="15" fill="rgb(221,13,13)"/><text x="51.4991%" y="159.50"></text></g><g><title>mir_borrowck (509,964 samples, 0.17%)</title><rect x="53.3381%" y="53" width="0.1658%" height="15" fill="rgb(238,131,9)"/><text x="53.5881%" y="63.50"></text></g><g><title>mir_for_ctfe (772,398 samples, 0.25%)</title><rect x="53.2538%" y="85" width="0.2511%" height="15" fill="rgb(211,50,8)"/><text x="53.5038%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (705,616 samples, 0.23%)</title><rect x="53.2755%" y="69" width="0.2294%" height="15" fill="rgb(245,182,24)"/><text x="53.5255%" y="79.50"></text></g><g><title>eval_to_const_value_raw (439,425 samples, 0.14%)</title><rect x="53.5112%" y="69" width="0.1428%" height="15" fill="rgb(242,14,37)"/><text x="53.7612%" y="79.50"></text></g><g><title>eval_to_const_value_raw (435,865 samples, 0.14%)</title><rect x="53.5123%" y="53" width="0.1417%" height="15" fill="rgb(246,228,12)"/><text x="53.7623%" y="63.50"></text></g><g><title>eval_to_allocation_raw (426,885 samples, 0.14%)</title><rect x="53.5153%" y="37" width="0.1388%" height="15" fill="rgb(213,55,15)"/><text x="53.7653%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (464,195 samples, 0.15%)</title><rect x="53.5054%" y="85" width="0.1509%" height="15" fill="rgb(209,9,3)"/><text x="53.7554%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,963,032 samples, 0.64%)</title><rect x="53.1301%" y="133" width="0.6381%" height="15" fill="rgb(230,59,30)"/><text x="53.3801%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,955,192 samples, 0.64%)</title><rect x="53.1327%" y="117" width="0.6356%" height="15" fill="rgb(209,121,21)"/><text x="53.3827%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,939,932 samples, 0.63%)</title><rect x="53.1376%" y="101" width="0.6306%" height="15" fill="rgb(220,109,13)"/><text x="53.3876%" y="111.50"></text></g><g><title>typeck (344,242 samples, 0.11%)</title><rect x="53.6563%" y="85" width="0.1119%" height="15" fill="rgb(232,18,1)"/><text x="53.9063%" y="95.50"></text></g><g><title>evaluate_obligation (916,389 samples, 0.30%)</title><rect x="53.7682%" y="133" width="0.2979%" height="15" fill="rgb(215,41,42)"/><text x="54.0182%" y="143.50"></text></g><g><title>param_env (429,935 samples, 0.14%)</title><rect x="54.2007%" y="133" width="0.1398%" height="15" fill="rgb(224,123,36)"/><text x="54.4507%" y="143.50"></text></g><g><title>region_scope_tree (462,516 samples, 0.15%)</title><rect x="54.3656%" y="133" width="0.1503%" height="15" fill="rgb(240,125,3)"/><text x="54.6156%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,957,700 samples, 2.59%)</title><rect x="51.9677%" y="149" width="2.5867%" height="15" fill="rgb(205,98,50)"/><text x="52.2177%" y="159.50">ch..</text></g><g><title>mir_for_ctfe (418,863 samples, 0.14%)</title><rect x="55.3426%" y="85" width="0.1362%" height="15" fill="rgb(205,185,37)"/><text x="55.5926%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (383,762 samples, 0.12%)</title><rect x="55.3540%" y="69" width="0.1247%" height="15" fill="rgb(238,207,15)"/><text x="55.6040%" y="79.50"></text></g><g><title>eval_to_const_value_raw (597,856 samples, 0.19%)</title><rect x="55.4803%" y="69" width="0.1943%" height="15" fill="rgb(213,199,42)"/><text x="55.7303%" y="79.50"></text></g><g><title>eval_to_const_value_raw (597,266 samples, 0.19%)</title><rect x="55.4805%" y="53" width="0.1941%" height="15" fill="rgb(235,201,11)"/><text x="55.7305%" y="63.50"></text></g><g><title>eval_to_allocation_raw (596,226 samples, 0.19%)</title><rect x="55.4809%" y="37" width="0.1938%" height="15" fill="rgb(207,46,11)"/><text x="55.7309%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (603,856 samples, 0.20%)</title><rect x="55.4791%" y="85" width="0.1963%" height="15" fill="rgb(241,35,35)"/><text x="55.7291%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,403,146 samples, 0.46%)</title><rect x="55.2744%" y="133" width="0.4561%" height="15" fill="rgb(243,32,47)"/><text x="55.5244%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,399,266 samples, 0.45%)</title><rect x="55.2756%" y="117" width="0.4548%" height="15" fill="rgb(247,202,23)"/><text x="55.5256%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,391,196 samples, 0.45%)</title><rect x="55.2782%" y="101" width="0.4522%" height="15" fill="rgb(219,102,11)"/><text x="55.5282%" y="111.50"></text></g><g><title>evaluate_obligation (341,676 samples, 0.11%)</title><rect x="55.7305%" y="133" width="0.1111%" height="15" fill="rgb(243,110,44)"/><text x="55.9805%" y="143.50"></text></g><g><title>param_env (386,663 samples, 0.13%)</title><rect x="55.8836%" y="133" width="0.1257%" height="15" fill="rgb(222,74,54)"/><text x="56.1336%" y="143.50"></text></g><g><title>check_item_well_formed (4,891,505 samples, 1.59%)</title><rect x="54.5544%" y="149" width="1.5900%" height="15" fill="rgb(216,99,12)"/><text x="54.8044%" y="159.50"></text></g><g><title>analysis (155,984,254 samples, 50.70%)</title><rect x="5.4538%" y="197" width="50.7040%" height="15" fill="rgb(226,22,26)"/><text x="5.7038%" y="207.50">analysis</text></g><g><title>type_check_crate (93,630,041 samples, 30.44%)</title><rect x="25.7226%" y="181" width="30.4352%" height="15" fill="rgb(217,163,10)"/><text x="25.9726%" y="191.50">type_check_crate</text></g><g><title>wf_checking (13,196,666 samples, 4.29%)</title><rect x="51.8682%" y="165" width="4.2897%" height="15" fill="rgb(213,25,53)"/><text x="52.1182%" y="175.50">wf_ch..</text></g><g><title>fn_abi_of_instance (409,534 samples, 0.13%)</title><rect x="56.7931%" y="165" width="0.1331%" height="15" fill="rgb(252,105,26)"/><text x="57.0431%" y="175.50"></text></g><g><title>codegen_module (1,773,270 samples, 0.58%)</title><rect x="56.3897%" y="181" width="0.5764%" height="15" fill="rgb(220,39,43)"/><text x="56.6397%" y="191.50"></text></g><g><title>optimized_mir (345,204 samples, 0.11%)</title><rect x="57.0465%" y="133" width="0.1122%" height="15" fill="rgb(229,68,48)"/><text x="57.2965%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (810,959 samples, 0.26%)</title><rect x="56.9725%" y="149" width="0.2636%" height="15" fill="rgb(252,8,32)"/><text x="57.2225%" y="159.50"></text></g><g><title>monomorphization_collector (869,289 samples, 0.28%)</title><rect x="56.9717%" y="165" width="0.2826%" height="15" fill="rgb(223,20,43)"/><text x="57.2217%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,009,831 samples, 0.33%)</title><rect x="56.9664%" y="181" width="0.3283%" height="15" fill="rgb(229,81,49)"/><text x="57.2164%" y="191.50"></text></g><g><title>codegen_crate (3,520,050 samples, 1.14%)</title><rect x="56.1611%" y="197" width="1.1442%" height="15" fill="rgb(236,28,36)"/><text x="56.4111%" y="207.50"></text></g><g><title>codegen_module_optimize (16,508,132 samples, 5.37%)</title><rect x="57.3054%" y="197" width="5.3661%" height="15" fill="rgb(249,185,26)"/><text x="57.5554%" y="207.50">codegen..</text></g><g><title>LLVM_module_optimize (13,919,205 samples, 4.52%)</title><rect x="58.1469%" y="181" width="4.5246%" height="15" fill="rgb(249,174,33)"/><text x="58.3969%" y="191.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (5,780,133 samples, 1.88%)</title><rect x="63.2472%" y="181" width="1.8789%" height="15" fill="rgb(233,201,37)"/><text x="63.4972%" y="191.50">L..</text></g><g><title>LLVM_module_codegen (16,798,400 samples, 5.46%)</title><rect x="65.1261%" y="181" width="5.4605%" height="15" fill="rgb(221,78,26)"/><text x="65.3761%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (16,453,884 samples, 5.35%)</title><rect x="65.2381%" y="165" width="5.3485%" height="15" fill="rgb(250,127,30)"/><text x="65.4881%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (24,508,875 samples, 7.97%)</title><rect x="62.6715%" y="197" width="7.9668%" height="15" fill="rgb(230,49,44)"/><text x="62.9215%" y="207.50">codegen_mod..</text></g><g><title>metadata_load_macro (491,587 samples, 0.16%)</title><rect x="84.2829%" y="149" width="0.1598%" height="15" fill="rgb(229,67,23)"/><text x="84.5329%" y="159.50"></text></g><g><title>metadata_register_crate (881,099 samples, 0.29%)</title><rect x="84.4427%" y="149" width="0.2864%" height="15" fill="rgb(249,83,47)"/><text x="84.6927%" y="159.50"></text></g><g><title>metadata_register_crate (417,135 samples, 0.14%)</title><rect x="84.5935%" y="133" width="0.1356%" height="15" fill="rgb(215,43,3)"/><text x="84.8435%" y="143.50"></text></g><g><title>macro_expand_crate (43,526,444 samples, 14.15%)</title><rect x="70.8729%" y="181" width="14.1486%" height="15" fill="rgb(238,154,13)"/><text x="71.1229%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (43,510,334 samples, 14.14%)</title><rect x="70.8781%" y="165" width="14.1434%" height="15" fill="rgb(219,56,2)"/><text x="71.1281%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (899,739 samples, 0.29%)</title><rect x="84.7291%" y="149" width="0.2925%" height="15" fill="rgb(233,0,4)"/><text x="84.9791%" y="159.50"></text></g><g><title>finalize_imports (458,945 samples, 0.15%)</title><rect x="85.0543%" y="165" width="0.1492%" height="15" fill="rgb(235,30,7)"/><text x="85.3043%" y="175.50"></text></g><g><title>late_resolve_crate (2,111,314 samples, 0.69%)</title><rect x="85.2481%" y="165" width="0.6863%" height="15" fill="rgb(250,79,13)"/><text x="85.4981%" y="175.50"></text></g><g><title>configure_and_expand (47,331,166 samples, 15.39%)</title><rect x="70.6383%" y="197" width="15.3854%" height="15" fill="rgb(211,146,34)"/><text x="70.8883%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,987,182 samples, 0.97%)</title><rect x="85.0527%" y="181" width="0.9710%" height="15" fill="rgb(228,22,38)"/><text x="85.3027%" y="191.50"></text></g><g><title>drop_ast (347,504 samples, 0.11%)</title><rect x="86.0237%" y="197" width="0.1130%" height="15" fill="rgb(235,168,5)"/><text x="86.2737%" y="207.50"></text></g><g><title>early_lint_checks (679,108 samples, 0.22%)</title><rect x="86.1436%" y="197" width="0.2207%" height="15" fill="rgb(221,155,16)"/><text x="86.3936%" y="207.50"></text></g><g><title>free_global_ctxt (3,598,209 samples, 1.17%)</title><rect x="86.3644%" y="197" width="1.1696%" height="15" fill="rgb(215,215,53)"/><text x="86.6144%" y="207.50"></text></g><g><title>exported_symbols (335,894 samples, 0.11%)</title><rect x="89.0749%" y="181" width="0.1092%" height="15" fill="rgb(223,4,10)"/><text x="89.3249%" y="191.50"></text></g><g><title>is_sized_raw (539,715 samples, 0.18%)</title><rect x="91.2753%" y="149" width="0.1754%" height="15" fill="rgb(234,103,6)"/><text x="91.5253%" y="159.50"></text></g><g><title>evaluate_obligation (503,255 samples, 0.16%)</title><rect x="91.2872%" y="133" width="0.1636%" height="15" fill="rgb(227,97,0)"/><text x="91.5372%" y="143.50"></text></g><g><title>layout_of (529,924 samples, 0.17%)</title><rect x="91.4508%" y="149" width="0.1723%" height="15" fill="rgb(234,150,53)"/><text x="91.7008%" y="159.50"></text></g><g><title>layout_of (1,757,047 samples, 0.57%)</title><rect x="91.0677%" y="165" width="0.5711%" height="15" fill="rgb(228,201,54)"/><text x="91.3177%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,195,147 samples, 1.69%)</title><rect x="91.6389%" y="165" width="1.6887%" height="15" fill="rgb(222,22,37)"/><text x="91.8889%" y="175.50"></text></g><g><title>optimized_mir (12,600,381 samples, 4.10%)</title><rect x="89.2998%" y="181" width="4.0959%" height="15" fill="rgb(237,53,32)"/><text x="89.5498%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (18,306,643 samples, 5.95%)</title><rect x="87.5340%" y="197" width="5.9507%" height="15" fill="rgb(233,25,53)"/><text x="87.7840%" y="207.50">generate..</text></g><g><title>hir_lowering (4,715,913 samples, 1.53%)</title><rect x="93.4847%" y="197" width="1.5329%" height="15" fill="rgb(210,40,34)"/><text x="93.7347%" y="207.50"></text></g><g><title>finish_ongoing_codegen (9,999,201 samples, 3.25%)</title><rect x="95.0231%" y="181" width="3.2503%" height="15" fill="rgb(241,220,44)"/><text x="95.2731%" y="191.50">fin..</text></g><g><title>link_crate (2,152,684 samples, 0.70%)</title><rect x="98.2734%" y="181" width="0.6997%" height="15" fill="rgb(235,28,35)"/><text x="98.5234%" y="191.50"></text></g><g><title>link_binary (2,142,634 samples, 0.70%)</title><rect x="98.2767%" y="165" width="0.6965%" height="15" fill="rgb(210,56,17)"/><text x="98.5267%" y="175.50"></text></g><g><title>link_rlib (1,726,689 samples, 0.56%)</title><rect x="98.4119%" y="149" width="0.5613%" height="15" fill="rgb(224,130,29)"/><text x="98.6619%" y="159.50"></text></g><g><title>link (12,178,265 samples, 3.96%)</title><rect x="95.0177%" y="197" width="3.9586%" height="15" fill="rgb(235,212,8)"/><text x="95.2677%" y="207.50">link</text></g><g><title>parse_crate (771,098 samples, 0.25%)</title><rect x="98.9763%" y="197" width="0.2507%" height="15" fill="rgb(223,33,50)"/><text x="99.2263%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,287,575 samples, 0.42%)</title><rect x="99.3038%" y="197" width="0.4185%" height="15" fill="rgb(219,149,13)"/><text x="99.5538%" y="207.50"></text></g><g><title>all (307,636,851 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(250,156,29)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (307,636,851 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,193,19)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (756,258 samples, 0.25%)</title><rect x="99.7542%" y="197" width="0.2458%" height="15" fill="rgb(216,135,14)"/><text x="100.0042%" y="207.50"></text></g></svg></svg>