<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (108,694,452 samples, 13.43%)</title><rect x="0.0992%" y="181" width="13.4274%" height="15" fill="rgb(227,0,7)"/><text x="0.3492%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,414,763 samples, 0.17%)</title><rect x="15.6446%" y="53" width="0.1748%" height="15" fill="rgb(217,0,24)"/><text x="15.8946%" y="63.50"></text></g><g><title>evaluate_obligation (1,191,072 samples, 0.15%)</title><rect x="15.6723%" y="37" width="0.1471%" height="15" fill="rgb(221,193,54)"/><text x="15.9223%" y="47.50"></text></g><g><title>needs_drop_raw (1,775,118 samples, 0.22%)</title><rect x="15.6040%" y="69" width="0.2193%" height="15" fill="rgb(248,212,6)"/><text x="15.8540%" y="79.50"></text></g><g><title>resolve_instance (1,266,331 samples, 0.16%)</title><rect x="15.8264%" y="69" width="0.1564%" height="15" fill="rgb(208,68,35)"/><text x="16.0764%" y="79.50"></text></g><g><title>mir_const (8,540,402 samples, 1.06%)</title><rect x="15.0354%" y="117" width="1.0550%" height="15" fill="rgb(232,128,0)"/><text x="15.2854%" y="127.50"></text></g><g><title>unsafety_check_result (7,361,213 samples, 0.91%)</title><rect x="15.1811%" y="101" width="0.9094%" height="15" fill="rgb(207,160,47)"/><text x="15.4311%" y="111.50"></text></g><g><title>mir_built (6,650,403 samples, 0.82%)</title><rect x="15.2689%" y="85" width="0.8215%" height="15" fill="rgb(228,23,34)"/><text x="15.5189%" y="95.50"></text></g><g><title>mir_promoted (9,405,160 samples, 1.16%)</title><rect x="14.9355%" y="133" width="1.1619%" height="15" fill="rgb(218,30,26)"/><text x="15.1855%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,513,108 samples, 0.43%)</title><rect x="16.3670%" y="133" width="0.4340%" height="15" fill="rgb(220,122,19)"/><text x="16.6170%" y="143.50"></text></g><g><title>MIR_borrow_checking (26,233,455 samples, 3.24%)</title><rect x="13.5605%" y="165" width="3.2407%" height="15" fill="rgb(250,228,42)"/><text x="13.8105%" y="175.50">MIR..</text></g><g><title>mir_borrowck (26,081,574 samples, 3.22%)</title><rect x="13.5793%" y="149" width="3.2220%" height="15" fill="rgb(240,193,28)"/><text x="13.8293%" y="159.50">mir..</text></g><g><title>misc_checking_1 (1,511,527 samples, 0.19%)</title><rect x="16.8310%" y="165" width="0.1867%" height="15" fill="rgb(216,20,37)"/><text x="17.0810%" y="175.50"></text></g><g><title>misc_checking_2 (863,350 samples, 0.11%)</title><rect x="17.0177%" y="165" width="0.1067%" height="15" fill="rgb(206,188,39)"/><text x="17.2677%" y="175.50"></text></g><g><title>death_checking (870,810 samples, 0.11%)</title><rect x="17.1597%" y="149" width="0.1076%" height="15" fill="rgb(217,207,13)"/><text x="17.4097%" y="159.50"></text></g><g><title>crate_lints (2,420,317 samples, 0.30%)</title><rect x="17.2674%" y="133" width="0.2990%" height="15" fill="rgb(231,73,38)"/><text x="17.5174%" y="143.50"></text></g><g><title>type_of (1,305,095 samples, 0.16%)</title><rect x="17.4052%" y="117" width="0.1612%" height="15" fill="rgb(225,20,46)"/><text x="17.6552%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (830,302 samples, 0.10%)</title><rect x="17.4639%" y="101" width="0.1026%" height="15" fill="rgb(210,31,41)"/><text x="17.7139%" y="111.50"></text></g><g><title>lint_checking (2,744,921 samples, 0.34%)</title><rect x="17.2673%" y="149" width="0.3391%" height="15" fill="rgb(221,200,47)"/><text x="17.5173%" y="159.50"></text></g><g><title>privacy_checking_modules (1,320,055 samples, 0.16%)</title><rect x="17.6477%" y="149" width="0.1631%" height="15" fill="rgb(226,26,5)"/><text x="17.8977%" y="159.50"></text></g><g><title>check_mod_privacy (1,315,565 samples, 0.16%)</title><rect x="17.6483%" y="133" width="0.1625%" height="15" fill="rgb(249,33,26)"/><text x="17.8983%" y="143.50"></text></g><g><title>misc_checking_3 (5,570,143 samples, 0.69%)</title><rect x="17.1244%" y="165" width="0.6881%" height="15" fill="rgb(235,183,28)"/><text x="17.3744%" y="175.50"></text></g><g><title>impl_parent (2,744,493 samples, 0.34%)</title><rect x="18.5085%" y="101" width="0.3390%" height="15" fill="rgb(221,5,38)"/><text x="18.7585%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,633,024 samples, 0.20%)</title><rect x="18.6458%" y="85" width="0.2017%" height="15" fill="rgb(247,18,42)"/><text x="18.8958%" y="95.50"></text></g><g><title>impl_trait_ref (6,451,940 samples, 0.80%)</title><rect x="18.8478%" y="101" width="0.7970%" height="15" fill="rgb(241,131,45)"/><text x="19.0978%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,155,767 samples, 0.64%)</title><rect x="19.0079%" y="85" width="0.6369%" height="15" fill="rgb(249,31,29)"/><text x="19.2579%" y="95.50"></text></g><g><title>trait_impls_of (1,097,250 samples, 0.14%)</title><rect x="19.7069%" y="101" width="0.1355%" height="15" fill="rgb(225,111,53)"/><text x="19.9569%" y="111.50"></text></g><g><title>coherent_trait (16,364,933 samples, 2.02%)</title><rect x="17.8264%" y="133" width="2.0216%" height="15" fill="rgb(238,160,17)"/><text x="18.0764%" y="143.50">c..</text></g><g><title>specialization_graph_of (16,328,543 samples, 2.02%)</title><rect x="17.8309%" y="117" width="2.0171%" height="15" fill="rgb(214,148,48)"/><text x="18.0809%" y="127.50">s..</text></g><g><title>coherence_checking (16,487,726 samples, 2.04%)</title><rect x="17.8228%" y="149" width="2.0368%" height="15" fill="rgb(232,36,49)"/><text x="18.0728%" y="159.50">c..</text></g><g><title>dropck_outlives (978,844 samples, 0.12%)</title><rect x="22.1829%" y="101" width="0.1209%" height="15" fill="rgb(209,103,24)"/><text x="22.4329%" y="111.50"></text></g><g><title>evaluate_obligation (1,837,492 samples, 0.23%)</title><rect x="22.3038%" y="101" width="0.2270%" height="15" fill="rgb(229,88,8)"/><text x="22.5538%" y="111.50"></text></g><g><title>item_bodies_checking (23,061,529 samples, 2.85%)</title><rect x="19.8665%" y="149" width="2.8489%" height="15" fill="rgb(213,181,19)"/><text x="20.1165%" y="159.50">it..</text></g><g><title>typeck_item_bodies (23,058,289 samples, 2.85%)</title><rect x="19.8669%" y="133" width="2.8485%" height="15" fill="rgb(254,191,54)"/><text x="20.1169%" y="143.50">ty..</text></g><g><title>typeck (22,939,677 samples, 2.83%)</title><rect x="19.8816%" y="117" width="2.8338%" height="15" fill="rgb(241,83,37)"/><text x="20.1316%" y="127.50">ty..</text></g><g><title>item_types_checking (4,680,593 samples, 0.58%)</title><rect x="22.7154%" y="149" width="0.5782%" height="15" fill="rgb(233,36,39)"/><text x="22.9654%" y="159.50"></text></g><g><title>check_mod_item_types (4,674,493 samples, 0.58%)</title><rect x="22.7161%" y="133" width="0.5775%" height="15" fill="rgb(226,3,54)"/><text x="22.9661%" y="143.50"></text></g><g><title>fn_sig (978,360 samples, 0.12%)</title><rect x="23.3395%" y="117" width="0.1209%" height="15" fill="rgb(245,192,40)"/><text x="23.5895%" y="127.50"></text></g><g><title>generics_of (935,657 samples, 0.12%)</title><rect x="23.4604%" y="117" width="0.1156%" height="15" fill="rgb(238,167,29)"/><text x="23.7104%" y="127.50"></text></g><g><title>type_collecting (3,359,687 samples, 0.42%)</title><rect x="23.2942%" y="149" width="0.4150%" height="15" fill="rgb(232,182,51)"/><text x="23.5442%" y="159.50"></text></g><g><title>collect_mod_item_types (3,349,817 samples, 0.41%)</title><rect x="23.2954%" y="133" width="0.4138%" height="15" fill="rgb(231,60,39)"/><text x="23.5454%" y="143.50"></text></g><g><title>check_impl_item_well_formed (7,161,775 samples, 0.88%)</title><rect x="23.7487%" y="133" width="0.8847%" height="15" fill="rgb(208,69,12)"/><text x="23.9987%" y="143.50"></text></g><g><title>check_item_well_formed (3,802,576 samples, 0.47%)</title><rect x="24.6334%" y="133" width="0.4697%" height="15" fill="rgb(235,93,37)"/><text x="24.8834%" y="143.50"></text></g><g><title>analysis (93,902,155 samples, 11.60%)</title><rect x="13.5266%" y="181" width="11.6001%" height="15" fill="rgb(213,116,39)"/><text x="13.7766%" y="191.50">analysis</text></g><g><title>type_check_crate (59,208,545 samples, 7.31%)</title><rect x="17.8125%" y="165" width="7.3143%" height="15" fill="rgb(222,207,29)"/><text x="18.0625%" y="175.50">type_check..</text></g><g><title>wf_checking (11,468,298 samples, 1.42%)</title><rect x="23.7100%" y="149" width="1.4167%" height="15" fill="rgb(206,96,30)"/><text x="23.9600%" y="159.50"></text></g><g><title>layout_of (1,316,799 samples, 0.16%)</title><rect x="28.0530%" y="133" width="0.1627%" height="15" fill="rgb(218,138,4)"/><text x="28.3030%" y="143.50"></text></g><g><title>predicates_of (828,733 samples, 0.10%)</title><rect x="28.3561%" y="117" width="0.1024%" height="15" fill="rgb(250,191,14)"/><text x="28.6061%" y="127.50"></text></g><g><title>param_env (1,965,770 samples, 0.24%)</title><rect x="28.2157%" y="133" width="0.2428%" height="15" fill="rgb(239,60,40)"/><text x="28.4657%" y="143.50"></text></g><g><title>fn_abi_of_instance (6,920,907 samples, 0.85%)</title><rect x="27.6589%" y="149" width="0.8550%" height="15" fill="rgb(206,27,48)"/><text x="27.9089%" y="159.50"></text></g><g><title>codegen_module (26,875,660 samples, 3.32%)</title><rect x="25.3102%" y="165" width="3.3201%" height="15" fill="rgb(225,35,8)"/><text x="25.5602%" y="175.50">cod..</text></g><g><title>item_attrs (940,750 samples, 0.12%)</title><rect x="28.8170%" y="101" width="0.1162%" height="15" fill="rgb(250,213,24)"/><text x="29.0670%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (907,500 samples, 0.11%)</title><rect x="28.8211%" y="85" width="0.1121%" height="15" fill="rgb(247,123,22)"/><text x="29.0711%" y="95.50"></text></g><g><title>codegen_fn_attrs (1,463,192 samples, 0.18%)</title><rect x="28.7884%" y="117" width="0.1808%" height="15" fill="rgb(231,138,38)"/><text x="29.0384%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,349,094 samples, 0.17%)</title><rect x="29.1608%" y="101" width="0.1667%" height="15" fill="rgb(231,145,46)"/><text x="29.4108%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (873,649 samples, 0.11%)</title><rect x="29.3274%" y="101" width="0.1079%" height="15" fill="rgb(251,118,11)"/><text x="29.5774%" y="111.50"></text></g><g><title>optimized_mir (3,370,208 samples, 0.42%)</title><rect x="29.0266%" y="117" width="0.4163%" height="15" fill="rgb(217,147,25)"/><text x="29.2766%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,298,665 samples, 0.16%)</title><rect x="29.5159%" y="101" width="0.1604%" height="15" fill="rgb(247,81,37)"/><text x="29.7659%" y="111.50"></text></g><g><title>specialization_graph_of (1,377,964 samples, 0.17%)</title><rect x="29.7378%" y="101" width="0.1702%" height="15" fill="rgb(209,12,38)"/><text x="29.9878%" y="111.50"></text></g><g><title>resolve_instance (4,114,077 samples, 0.51%)</title><rect x="29.4430%" y="117" width="0.5082%" height="15" fill="rgb(227,1,9)"/><text x="29.6930%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (11,525,609 samples, 1.42%)</title><rect x="28.6350%" y="133" width="1.4238%" height="15" fill="rgb(248,47,43)"/><text x="28.8850%" y="143.50"></text></g><g><title>monomorphization_collector (11,596,370 samples, 1.43%)</title><rect x="28.6347%" y="149" width="1.4325%" height="15" fill="rgb(221,10,30)"/><text x="28.8847%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (1,105,612 samples, 0.14%)</title><rect x="30.0678%" y="133" width="0.1366%" height="15" fill="rgb(210,229,1)"/><text x="30.3178%" y="143.50"></text></g><g><title>symbol_name (998,561 samples, 0.12%)</title><rect x="30.0811%" y="117" width="0.1234%" height="15" fill="rgb(222,148,37)"/><text x="30.3311%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (13,160,017 samples, 1.63%)</title><rect x="28.6311%" y="165" width="1.6257%" height="15" fill="rgb(234,67,33)"/><text x="28.8811%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,534,607 samples, 0.19%)</title><rect x="30.0673%" y="149" width="0.1896%" height="15" fill="rgb(247,98,35)"/><text x="30.3173%" y="159.50"></text></g><g><title>codegen_crate (41,582,327 samples, 5.14%)</title><rect x="25.1280%" y="181" width="5.1368%" height="15" fill="rgb(247,138,52)"/><text x="25.3780%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (211,164,326 samples, 26.09%)</title><rect x="30.2648%" y="181" width="26.0859%" height="15" fill="rgb(213,79,30)"/><text x="30.5148%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (197,183,737 samples, 24.36%)</title><rect x="31.9919%" y="165" width="24.3588%" height="15" fill="rgb(246,177,23)"/><text x="32.2419%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (92,349,936 samples, 11.41%)</title><rect x="57.3696%" y="165" width="11.4083%" height="15" fill="rgb(230,62,27)"/><text x="57.6196%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (105,973,688 samples, 13.09%)</title><rect x="68.7779%" y="165" width="13.0913%" height="15" fill="rgb(216,154,8)"/><text x="69.0279%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (104,084,658 samples, 12.86%)</title><rect x="69.0113%" y="149" width="12.8580%" height="15" fill="rgb(244,35,45)"/><text x="69.2613%" y="159.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (12,027,225 samples, 1.49%)</title><rect x="81.8692%" y="165" width="1.4858%" height="15" fill="rgb(251,115,12)"/><text x="82.1192%" y="175.50"></text></g><g><title>codegen_module_perform_lto (219,052,497 samples, 27.06%)</title><rect x="56.3508%" y="181" width="27.0604%" height="15" fill="rgb(240,54,50)"/><text x="56.6008%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,786,251 samples, 0.34%)</title><rect x="86.1638%" y="133" width="0.3442%" height="15" fill="rgb(233,84,52)"/><text x="86.4138%" y="143.50"></text></g><g><title>metadata_register_crate (984,890 samples, 0.12%)</title><rect x="86.3864%" y="117" width="0.1217%" height="15" fill="rgb(207,117,47)"/><text x="86.6364%" y="127.50"></text></g><g><title>macro_expand_crate (24,749,098 samples, 3.06%)</title><rect x="83.4950%" y="165" width="3.0573%" height="15" fill="rgb(249,43,39)"/><text x="83.7450%" y="175.50">mac..</text></g><g><title>expand_crate (24,733,738 samples, 3.06%)</title><rect x="83.4969%" y="149" width="3.0555%" height="15" fill="rgb(209,38,44)"/><text x="83.7469%" y="159.50">exp..</text></g><g><title>late_resolve_crate (2,344,617 samples, 0.29%)</title><rect x="86.6012%" y="149" width="0.2896%" height="15" fill="rgb(236,212,23)"/><text x="86.8512%" y="159.50"></text></g><g><title>configure_and_expand (28,274,807 samples, 3.49%)</title><rect x="83.4111%" y="181" width="3.4929%" height="15" fill="rgb(242,79,21)"/><text x="83.6611%" y="191.50">con..</text></g><g><title>resolve_crate (2,742,181 samples, 0.34%)</title><rect x="86.5653%" y="165" width="0.3388%" height="15" fill="rgb(211,96,35)"/><text x="86.8153%" y="175.50"></text></g><g><title>free_global_ctxt (6,941,388 samples, 0.86%)</title><rect x="86.9638%" y="181" width="0.8575%" height="15" fill="rgb(253,215,40)"/><text x="87.2138%" y="191.50"></text></g><g><title>layout_of (899,990 samples, 0.11%)</title><rect x="88.3998%" y="149" width="0.1112%" height="15" fill="rgb(211,81,21)"/><text x="88.6498%" y="159.50"></text></g><g><title>is_copy_raw (886,171 samples, 0.11%)</title><rect x="88.8561%" y="117" width="0.1095%" height="15" fill="rgb(208,190,38)"/><text x="89.1061%" y="127.50"></text></g><g><title>needs_drop_raw (1,008,841 samples, 0.12%)</title><rect x="88.8459%" y="133" width="0.1246%" height="15" fill="rgb(235,213,38)"/><text x="89.0959%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,870,355 samples, 0.48%)</title><rect x="88.5110%" y="149" width="0.4781%" height="15" fill="rgb(237,122,38)"/><text x="88.7610%" y="159.50"></text></g><g><title>optimized_mir (7,102,310 samples, 0.88%)</title><rect x="88.1131%" y="165" width="0.8774%" height="15" fill="rgb(244,218,35)"/><text x="88.3631%" y="175.50"></text></g><g><title>generate_crate_metadata (9,532,358 samples, 1.18%)</title><rect x="87.8213%" y="181" width="1.1776%" height="15" fill="rgb(240,68,47)"/><text x="88.0713%" y="191.50"></text></g><g><title>hir_lowering (2,850,492 samples, 0.35%)</title><rect x="88.9989%" y="181" width="0.3521%" height="15" fill="rgb(210,16,53)"/><text x="89.2489%" y="191.50"></text></g><g><title>finish_ongoing_codegen (78,554,353 samples, 9.70%)</title><rect x="89.3553%" y="165" width="9.7041%" height="15" fill="rgb(235,124,12)"/><text x="89.6053%" y="175.50">finish_ongoing..</text></g><g><title>link_crate (2,688,640 samples, 0.33%)</title><rect x="99.0594%" y="165" width="0.3321%" height="15" fill="rgb(224,169,11)"/><text x="99.3094%" y="175.50"></text></g><g><title>link_binary (2,637,970 samples, 0.33%)</title><rect x="99.0657%" y="149" width="0.3259%" height="15" fill="rgb(250,166,2)"/><text x="99.3157%" y="159.50"></text></g><g><title>link_rlib (1,590,848 samples, 0.20%)</title><rect x="99.1950%" y="133" width="0.1965%" height="15" fill="rgb(242,216,29)"/><text x="99.4450%" y="143.50"></text></g><g><title>link (81,294,714 samples, 10.04%)</title><rect x="89.3510%" y="181" width="10.0426%" height="15" fill="rgb(230,116,27)"/><text x="89.6010%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (3,542,620 samples, 0.44%)</title><rect x="99.5048%" y="181" width="0.4376%" height="15" fill="rgb(228,99,48)"/><text x="99.7548%" y="191.50"></text></g><g><title>all (809,495,456 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (809,495,456 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>