<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="661.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="661.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,227,662 samples, 6.20%)</title><rect x="0.6598%" y="597" width="6.1996%" height="15" fill="rgb(227,0,7)"/><text x="0.9098%" y="607.50">LLVM_pas..</text></g><g><title>codegen_generate_lto_work (161,592 samples, 0.12%)</title><rect x="6.7377%" y="581" width="0.1218%" height="15" fill="rgb(217,0,24)"/><text x="6.9877%" y="591.50"></text></g><g><title>LLVM_thin_lto_global_analysis (146,752 samples, 0.11%)</title><rect x="6.7489%" y="565" width="0.1106%" height="15" fill="rgb(221,193,54)"/><text x="6.9989%" y="575.50"></text></g><g><title>param_env (251,812 samples, 0.19%)</title><rect x="11.8337%" y="517" width="0.1897%" height="15" fill="rgb(248,212,6)"/><text x="12.0837%" y="527.50"></text></g><g><title>item_attrs (184,482 samples, 0.14%)</title><rect x="12.1979%" y="485" width="0.1390%" height="15" fill="rgb(208,68,35)"/><text x="12.4479%" y="495.50"></text></g><g><title>metadata_decode_entry_item_attrs (179,132 samples, 0.13%)</title><rect x="12.2019%" y="469" width="0.1350%" height="15" fill="rgb(232,128,0)"/><text x="12.4519%" y="479.50"></text></g><g><title>codegen_fn_attrs (251,423 samples, 0.19%)</title><rect x="12.1556%" y="501" width="0.1894%" height="15" fill="rgb(207,160,47)"/><text x="12.4056%" y="511.50"></text></g><g><title>adt_drop_tys (161,293 samples, 0.12%)</title><rect x="13.4772%" y="469" width="0.1215%" height="15" fill="rgb(228,23,34)"/><text x="13.7272%" y="479.50"></text></g><g><title>needs_drop_raw (406,595 samples, 0.31%)</title><rect x="13.4490%" y="485" width="0.3064%" height="15" fill="rgb(218,30,26)"/><text x="13.6990%" y="495.50"></text></g><g><title>is_copy_raw (207,842 samples, 0.16%)</title><rect x="13.5987%" y="469" width="0.1566%" height="15" fill="rgb(220,122,19)"/><text x="13.8487%" y="479.50"></text></g><g><title>evaluate_obligation (185,432 samples, 0.14%)</title><rect x="13.6156%" y="453" width="0.1397%" height="15" fill="rgb(250,228,42)"/><text x="13.8656%" y="463.50"></text></g><g><title>codegen_fulfill_obligation (242,182 samples, 0.18%)</title><rect x="13.8384%" y="469" width="0.1825%" height="15" fill="rgb(240,193,28)"/><text x="14.0884%" y="479.50"></text></g><g><title>impl_parent (198,092 samples, 0.15%)</title><rect x="14.4082%" y="453" width="0.1493%" height="15" fill="rgb(216,20,37)"/><text x="14.6582%" y="463.50"></text></g><g><title>metadata_decode_entry_impl_parent (133,762 samples, 0.10%)</title><rect x="14.4566%" y="437" width="0.1008%" height="15" fill="rgb(206,188,39)"/><text x="14.7066%" y="447.50"></text></g><g><title>specialization_graph_of (1,113,504 samples, 0.84%)</title><rect x="14.0443%" y="469" width="0.8390%" height="15" fill="rgb(217,207,13)"/><text x="14.2943%" y="479.50"></text></g><g><title>impl_trait_ref (432,517 samples, 0.33%)</title><rect x="14.5574%" y="453" width="0.3259%" height="15" fill="rgb(231,73,38)"/><text x="14.8074%" y="463.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (368,497 samples, 0.28%)</title><rect x="14.6057%" y="437" width="0.2777%" height="15" fill="rgb(225,20,46)"/><text x="14.8557%" y="447.50"></text></g><g><title>resolve_instance (1,587,906 samples, 1.20%)</title><rect x="13.7553%" y="485" width="1.1965%" height="15" fill="rgb(210,31,41)"/><text x="14.0053%" y="495.50"></text></g><g><title>thir_body (714,318 samples, 0.54%)</title><rect x="14.9584%" y="485" width="0.5382%" height="15" fill="rgb(221,200,47)"/><text x="15.2084%" y="495.50"></text></g><g><title>mir_const (5,201,518 samples, 3.92%)</title><rect x="11.5807%" y="533" width="3.9194%" height="15" fill="rgb(226,26,5)"/><text x="11.8307%" y="543.50">mir_..</text></g><g><title>unsafety_check_result (4,613,893 samples, 3.48%)</title><rect x="12.0235%" y="517" width="3.4766%" height="15" fill="rgb(249,33,26)"/><text x="12.2735%" y="527.50">uns..</text></g><g><title>mir_built (4,187,188 samples, 3.16%)</title><rect x="12.3450%" y="501" width="3.1551%" height="15" fill="rgb(235,183,28)"/><text x="12.5950%" y="511.50">mir..</text></g><g><title>mir_promoted (5,812,999 samples, 4.38%)</title><rect x="11.3175%" y="549" width="4.3802%" height="15" fill="rgb(221,5,38)"/><text x="11.5675%" y="559.50">mir_p..</text></g><g><title>mir_const_qualif (262,145 samples, 0.20%)</title><rect x="15.5001%" y="533" width="0.1975%" height="15" fill="rgb(247,18,42)"/><text x="15.7501%" y="543.50"></text></g><g><title>mir_const (218,104 samples, 0.16%)</title><rect x="15.5333%" y="517" width="0.1643%" height="15" fill="rgb(241,131,45)"/><text x="15.7833%" y="527.50"></text></g><g><title>unsafety_check_result (174,583 samples, 0.13%)</title><rect x="15.5661%" y="501" width="0.1316%" height="15" fill="rgb(249,31,29)"/><text x="15.8161%" y="511.50"></text></g><g><title>mir_built (159,153 samples, 0.12%)</title><rect x="15.5777%" y="485" width="0.1199%" height="15" fill="rgb(225,111,53)"/><text x="15.8277%" y="495.50"></text></g><g><title>type_op_normalize_fn_sig (459,625 samples, 0.35%)</title><rect x="15.7152%" y="549" width="0.3463%" height="15" fill="rgb(238,160,17)"/><text x="15.9652%" y="559.50"></text></g><g><title>normalize_projection_ty (306,045 samples, 0.23%)</title><rect x="15.8309%" y="533" width="0.2306%" height="15" fill="rgb(214,148,48)"/><text x="16.0809%" y="543.50"></text></g><g><title>type_op_normalize_predicate (183,052 samples, 0.14%)</title><rect x="16.0616%" y="549" width="0.1379%" height="15" fill="rgb(232,36,49)"/><text x="16.3116%" y="559.50"></text></g><g><title>normalize_projection_ty (175,882 samples, 0.13%)</title><rect x="16.0670%" y="533" width="0.1325%" height="15" fill="rgb(209,103,24)"/><text x="16.3170%" y="543.50"></text></g><g><title>type_op_prove_predicate (1,173,185 samples, 0.88%)</title><rect x="16.2413%" y="549" width="0.8840%" height="15" fill="rgb(229,88,8)"/><text x="16.4913%" y="559.50"></text></g><g><title>MIR_borrow_checking (13,227,790 samples, 9.97%)</title><rect x="7.1591%" y="581" width="9.9673%" height="15" fill="rgb(213,181,19)"/><text x="7.4091%" y="591.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (13,189,240 samples, 9.94%)</title><rect x="7.1882%" y="565" width="9.9382%" height="15" fill="rgb(254,191,54)"/><text x="7.4382%" y="575.50">mir_borrowck</text></g><g><title>MIR_effect_checking (135,371 samples, 0.10%)</title><rect x="17.1264%" y="581" width="0.1020%" height="15" fill="rgb(241,83,37)"/><text x="17.3764%" y="591.50"></text></g><g><title>hir_module_items (209,782 samples, 0.16%)</title><rect x="17.2284%" y="581" width="0.1581%" height="15" fill="rgb(233,36,39)"/><text x="17.4784%" y="591.50"></text></g><g><title>should_inherit_track_caller (222,072 samples, 0.17%)</title><rect x="17.8271%" y="533" width="0.1673%" height="15" fill="rgb(226,3,54)"/><text x="18.0771%" y="543.50"></text></g><g><title>codegen_fn_attrs (485,915 samples, 0.37%)</title><rect x="17.6552%" y="549" width="0.3661%" height="15" fill="rgb(245,192,40)"/><text x="17.9052%" y="559.50"></text></g><g><title>check_mod_attrs (809,559 samples, 0.61%)</title><rect x="17.4116%" y="565" width="0.6100%" height="15" fill="rgb(238,167,29)"/><text x="17.6616%" y="575.50"></text></g><g><title>check_mod_unstable_api_usage (317,524 samples, 0.24%)</title><rect x="18.1672%" y="565" width="0.2393%" height="15" fill="rgb(232,182,51)"/><text x="18.4172%" y="575.50"></text></g><g><title>misc_checking_1 (1,437,656 samples, 1.08%)</title><rect x="17.3868%" y="581" width="1.0833%" height="15" fill="rgb(231,60,39)"/><text x="17.6368%" y="591.50"></text></g><g><title>liveness_and_intrinsic_checking (253,032 samples, 0.19%)</title><rect x="18.4714%" y="565" width="0.1907%" height="15" fill="rgb(208,69,12)"/><text x="18.7214%" y="575.50"></text></g><g><title>check_mod_liveness (197,061 samples, 0.15%)</title><rect x="18.5135%" y="549" width="0.1485%" height="15" fill="rgb(235,93,37)"/><text x="18.7635%" y="559.50"></text></g><g><title>misc_checking_2 (433,044 samples, 0.33%)</title><rect x="18.4701%" y="581" width="0.3263%" height="15" fill="rgb(213,116,39)"/><text x="18.7201%" y="591.50"></text></g><g><title>match_checking (178,272 samples, 0.13%)</title><rect x="18.6620%" y="565" width="0.1343%" height="15" fill="rgb(222,207,29)"/><text x="18.9120%" y="575.50"></text></g><g><title>check_match (164,972 samples, 0.12%)</title><rect x="18.6721%" y="549" width="0.1243%" height="15" fill="rgb(206,96,30)"/><text x="18.9221%" y="559.50"></text></g><g><title>death_checking (179,032 samples, 0.13%)</title><rect x="18.8689%" y="565" width="0.1349%" height="15" fill="rgb(218,138,4)"/><text x="19.1189%" y="575.50"></text></g><g><title>param_env (152,581 samples, 0.11%)</title><rect x="19.5311%" y="533" width="0.1150%" height="15" fill="rgb(250,191,14)"/><text x="19.7811%" y="543.50"></text></g><g><title>crate_lints (1,970,862 samples, 1.49%)</title><rect x="19.0053%" y="549" width="1.4851%" height="15" fill="rgb(239,60,40)"/><text x="19.2553%" y="559.50"></text></g><g><title>type_of (1,116,737 samples, 0.84%)</title><rect x="19.6489%" y="533" width="0.8415%" height="15" fill="rgb(206,27,48)"/><text x="19.8989%" y="543.50"></text></g><g><title>metadata_decode_entry_type_of (878,066 samples, 0.66%)</title><rect x="19.8288%" y="517" width="0.6616%" height="15" fill="rgb(225,35,8)"/><text x="20.0788%" y="527.50"></text></g><g><title>lint_checking (2,265,155 samples, 1.71%)</title><rect x="19.0038%" y="565" width="1.7068%" height="15" fill="rgb(250,213,24)"/><text x="19.2538%" y="575.50"></text></g><g><title>module_lints (292,233 samples, 0.22%)</title><rect x="20.4904%" y="549" width="0.2202%" height="15" fill="rgb(247,123,22)"/><text x="20.7404%" y="559.50"></text></g><g><title>lint_mod (289,263 samples, 0.22%)</title><rect x="20.4926%" y="533" width="0.2180%" height="15" fill="rgb(231,138,38)"/><text x="20.7426%" y="543.50"></text></g><g><title>privacy_checking_modules (360,264 samples, 0.27%)</title><rect x="20.7909%" y="565" width="0.2715%" height="15" fill="rgb(231,145,46)"/><text x="21.0409%" y="575.50"></text></g><g><title>check_mod_privacy (357,884 samples, 0.27%)</title><rect x="20.7927%" y="549" width="0.2697%" height="15" fill="rgb(251,118,11)"/><text x="21.0427%" y="559.50"></text></g><g><title>misc_checking_3 (3,022,754 samples, 2.28%)</title><rect x="18.7964%" y="581" width="2.2777%" height="15" fill="rgb(217,147,25)"/><text x="19.0464%" y="591.50">m..</text></g><g><title>impl_parent (2,438,041 samples, 1.84%)</title><rect x="24.0945%" y="517" width="1.8371%" height="15" fill="rgb(247,81,37)"/><text x="24.3445%" y="527.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,438,270 samples, 1.08%)</title><rect x="24.8479%" y="501" width="1.0838%" height="15" fill="rgb(209,12,38)"/><text x="25.0979%" y="511.50"></text></g><g><title>impl_trait_ref (8,147,884 samples, 6.14%)</title><rect x="25.9316%" y="517" width="6.1395%" height="15" fill="rgb(227,1,9)"/><text x="26.1816%" y="527.50">impl_tra..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,946,824 samples, 5.23%)</title><rect x="26.8366%" y="501" width="5.2345%" height="15" fill="rgb(248,47,43)"/><text x="27.0866%" y="511.50">metada..</text></g><g><title>coherent_trait (15,583,325 samples, 11.74%)</title><rect x="21.1235%" y="549" width="11.7422%" height="15" fill="rgb(221,10,30)"/><text x="21.3735%" y="559.50">coherent_trait</text></g><g><title>specialization_graph_of (15,557,263 samples, 11.72%)</title><rect x="21.1431%" y="533" width="11.7226%" height="15" fill="rgb(210,229,1)"/><text x="21.3931%" y="543.50">specialization_gr..</text></g><g><title>trait_impls_of (1,052,740 samples, 0.79%)</title><rect x="32.0724%" y="517" width="0.7933%" height="15" fill="rgb(222,148,37)"/><text x="32.3224%" y="527.50"></text></g><g><title>implementations_of_trait (326,592 samples, 0.25%)</title><rect x="32.6196%" y="501" width="0.2461%" height="15" fill="rgb(234,67,33)"/><text x="32.8696%" y="511.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (185,381 samples, 0.14%)</title><rect x="32.7260%" y="485" width="0.1397%" height="15" fill="rgb(247,98,35)"/><text x="32.9760%" y="495.50"></text></g><g><title>coherence_checking (15,658,285 samples, 11.80%)</title><rect x="21.1045%" y="565" width="11.7987%" height="15" fill="rgb(247,138,52)"/><text x="21.3545%" y="575.50">coherence_checking</text></g><g><title>associated_item (463,204 samples, 0.35%)</title><rect x="46.9173%" y="501" width="0.3490%" height="15" fill="rgb(213,79,30)"/><text x="47.1673%" y="511.50"></text></g><g><title>metadata_decode_entry_associated_item (370,434 samples, 0.28%)</title><rect x="46.9872%" y="485" width="0.2791%" height="15" fill="rgb(246,177,23)"/><text x="47.2372%" y="495.50"></text></g><g><title>associated_items (631,614 samples, 0.48%)</title><rect x="46.8133%" y="517" width="0.4759%" height="15" fill="rgb(230,62,27)"/><text x="47.0633%" y="527.50"></text></g><g><title>dropck_outlives (166,482 samples, 0.13%)</title><rect x="47.3088%" y="517" width="0.1254%" height="15" fill="rgb(216,154,8)"/><text x="47.5588%" y="527.50"></text></g><g><title>mir_borrowck (140,431 samples, 0.11%)</title><rect x="47.6719%" y="437" width="0.1058%" height="15" fill="rgb(244,35,45)"/><text x="47.9219%" y="447.50"></text></g><g><title>mir_for_ctfe (214,242 samples, 0.16%)</title><rect x="47.6166%" y="469" width="0.1614%" height="15" fill="rgb(251,115,12)"/><text x="47.8666%" y="479.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (184,492 samples, 0.14%)</title><rect x="47.6390%" y="453" width="0.1390%" height="15" fill="rgb(240,54,50)"/><text x="47.8890%" y="463.50"></text></g><g><title>eval_to_const_value_raw (461,965 samples, 0.35%)</title><rect x="47.4343%" y="517" width="0.3481%" height="15" fill="rgb(233,84,52)"/><text x="47.6843%" y="527.50"></text></g><g><title>eval_to_const_value_raw (458,455 samples, 0.35%)</title><rect x="47.4369%" y="501" width="0.3455%" height="15" fill="rgb(207,117,47)"/><text x="47.6869%" y="511.50"></text></g><g><title>eval_to_allocation_raw (453,264 samples, 0.34%)</title><rect x="47.4408%" y="485" width="0.3415%" height="15" fill="rgb(249,43,39)"/><text x="47.6908%" y="495.50"></text></g><g><title>predicates_of (132,743 samples, 0.10%)</title><rect x="48.3157%" y="501" width="0.1000%" height="15" fill="rgb(209,38,44)"/><text x="48.5657%" y="511.50"></text></g><g><title>specializes (171,942 samples, 0.13%)</title><rect x="48.4157%" y="501" width="0.1296%" height="15" fill="rgb(236,212,23)"/><text x="48.6657%" y="511.50"></text></g><g><title>param_env (149,222 samples, 0.11%)</title><rect x="48.4328%" y="485" width="0.1124%" height="15" fill="rgb(242,79,21)"/><text x="48.6828%" y="495.50"></text></g><g><title>trait_impls_of (430,213 samples, 0.32%)</title><rect x="48.5523%" y="501" width="0.3242%" height="15" fill="rgb(211,96,35)"/><text x="48.8023%" y="511.50"></text></g><g><title>implementations_of_trait (171,821 samples, 0.13%)</title><rect x="48.7470%" y="485" width="0.1295%" height="15" fill="rgb(253,215,40)"/><text x="48.9970%" y="495.50"></text></g><g><title>evaluate_obligation (1,460,433 samples, 1.10%)</title><rect x="47.7824%" y="517" width="1.1005%" height="15" fill="rgb(211,81,21)"/><text x="48.0324%" y="527.50"></text></g><g><title>generics_of (168,541 samples, 0.13%)</title><rect x="48.9423%" y="517" width="0.1270%" height="15" fill="rgb(208,190,38)"/><text x="49.1923%" y="527.50"></text></g><g><title>metadata_decode_entry_generics_of (145,730 samples, 0.11%)</title><rect x="48.9595%" y="501" width="0.1098%" height="15" fill="rgb(235,213,38)"/><text x="49.2095%" y="511.50"></text></g><g><title>impl_trait_ref (219,523 samples, 0.17%)</title><rect x="49.1584%" y="517" width="0.1654%" height="15" fill="rgb(237,122,38)"/><text x="49.4084%" y="527.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (198,443 samples, 0.15%)</title><rect x="49.1743%" y="501" width="0.1495%" height="15" fill="rgb(244,218,35)"/><text x="49.4243%" y="511.50"></text></g><g><title>method_autoderef_steps (138,750 samples, 0.10%)</title><rect x="49.4274%" y="517" width="0.1045%" height="15" fill="rgb(240,68,47)"/><text x="49.6774%" y="527.50"></text></g><g><title>predicates_of (242,057 samples, 0.18%)</title><rect x="49.6140%" y="517" width="0.1824%" height="15" fill="rgb(210,16,53)"/><text x="49.8640%" y="527.50"></text></g><g><title>predicates_defined_on (171,635 samples, 0.13%)</title><rect x="49.6671%" y="501" width="0.1293%" height="15" fill="rgb(235,124,12)"/><text x="49.9171%" y="511.50"></text></g><g><title>evaluate_obligation (137,211 samples, 0.10%)</title><rect x="51.3947%" y="501" width="0.1034%" height="15" fill="rgb(224,169,11)"/><text x="51.6447%" y="511.50"></text></g><g><title>typeck (2,751,391 samples, 2.07%)</title><rect x="49.8546%" y="517" width="2.0732%" height="15" fill="rgb(250,166,2)"/><text x="50.1046%" y="527.50">t..</text></g><g><title>item_bodies_checking (25,239,184 samples, 19.02%)</title><rect x="32.9349%" y="565" width="19.0180%" height="15" fill="rgb(242,216,29)"/><text x="33.1849%" y="575.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (25,235,984 samples, 19.02%)</title><rect x="32.9373%" y="549" width="19.0156%" height="15" fill="rgb(230,116,27)"/><text x="33.1873%" y="559.50">typeck_item_bodies</text></g><g><title>typeck (25,207,293 samples, 18.99%)</title><rect x="32.9589%" y="533" width="18.9940%" height="15" fill="rgb(228,99,48)"/><text x="33.2089%" y="543.50">typeck</text></g><g><title>impl_trait_ref (175,741 samples, 0.13%)</title><rect x="52.3253%" y="485" width="0.1324%" height="15" fill="rgb(253,11,6)"/><text x="52.5753%" y="495.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (155,671 samples, 0.12%)</title><rect x="52.3404%" y="469" width="0.1173%" height="15" fill="rgb(247,143,39)"/><text x="52.5904%" y="479.50"></text></g><g><title>adt_destructor (353,504 samples, 0.27%)</title><rect x="52.2127%" y="533" width="0.2664%" height="15" fill="rgb(236,97,10)"/><text x="52.4627%" y="543.50"></text></g><g><title>coherent_trait (350,434 samples, 0.26%)</title><rect x="52.2150%" y="517" width="0.2641%" height="15" fill="rgb(233,208,19)"/><text x="52.4650%" y="527.50"></text></g><g><title>specialization_graph_of (348,264 samples, 0.26%)</title><rect x="52.2166%" y="501" width="0.2624%" height="15" fill="rgb(216,164,2)"/><text x="52.4666%" y="511.50"></text></g><g><title>evaluate_obligation (167,072 samples, 0.13%)</title><rect x="52.4861%" y="533" width="0.1259%" height="15" fill="rgb(220,129,5)"/><text x="52.7361%" y="543.50"></text></g><g><title>item_types_checking (1,015,831 samples, 0.77%)</title><rect x="51.9529%" y="565" width="0.7654%" height="15" fill="rgb(242,17,10)"/><text x="52.2029%" y="575.50"></text></g><g><title>check_mod_item_types (1,012,841 samples, 0.76%)</title><rect x="51.9551%" y="549" width="0.7632%" height="15" fill="rgb(242,107,0)"/><text x="52.2051%" y="559.50"></text></g><g><title>fn_sig (241,812 samples, 0.18%)</title><rect x="52.9053%" y="533" width="0.1822%" height="15" fill="rgb(251,28,31)"/><text x="53.1553%" y="543.50"></text></g><g><title>named_region_map (267,784 samples, 0.20%)</title><rect x="53.1513%" y="517" width="0.2018%" height="15" fill="rgb(233,223,10)"/><text x="53.4013%" y="527.50"></text></g><g><title>resolve_lifetimes (250,094 samples, 0.19%)</title><rect x="53.1646%" y="501" width="0.1884%" height="15" fill="rgb(215,21,27)"/><text x="53.4146%" y="511.50"></text></g><g><title>generics_of (374,394 samples, 0.28%)</title><rect x="53.0875%" y="533" width="0.2821%" height="15" fill="rgb(232,23,21)"/><text x="53.3375%" y="543.50"></text></g><g><title>predicates_of (347,725 samples, 0.26%)</title><rect x="53.4232%" y="533" width="0.2620%" height="15" fill="rgb(244,5,23)"/><text x="53.6732%" y="543.50"></text></g><g><title>predicates_defined_on (313,904 samples, 0.24%)</title><rect x="53.4487%" y="517" width="0.2365%" height="15" fill="rgb(226,81,46)"/><text x="53.6987%" y="527.50"></text></g><g><title>inferred_outlives_of (172,252 samples, 0.13%)</title><rect x="53.5555%" y="501" width="0.1298%" height="15" fill="rgb(247,70,30)"/><text x="53.8055%" y="511.50"></text></g><g><title>inferred_outlives_crate (149,781 samples, 0.11%)</title><rect x="53.5724%" y="485" width="0.1129%" height="15" fill="rgb(212,68,19)"/><text x="53.8224%" y="495.50"></text></g><g><title>type_collecting (1,487,846 samples, 1.12%)</title><rect x="52.7199%" y="565" width="1.1211%" height="15" fill="rgb(240,187,13)"/><text x="52.9699%" y="575.50"></text></g><g><title>collect_mod_item_types (1,473,636 samples, 1.11%)</title><rect x="52.7306%" y="549" width="1.1104%" height="15" fill="rgb(223,113,26)"/><text x="52.9806%" y="559.50"></text></g><g><title>type_of (206,682 samples, 0.16%)</title><rect x="53.6852%" y="533" width="0.1557%" height="15" fill="rgb(206,192,2)"/><text x="53.9352%" y="543.50"></text></g><g><title>evaluate_obligation (596,538 samples, 0.45%)</title><rect x="54.2956%" y="533" width="0.4495%" height="15" fill="rgb(241,108,4)"/><text x="54.5456%" y="543.50"></text></g><g><title>implied_outlives_bounds (225,043 samples, 0.17%)</title><rect x="54.7536%" y="533" width="0.1696%" height="15" fill="rgb(247,173,49)"/><text x="55.0036%" y="543.50"></text></g><g><title>check_impl_item_well_formed (1,518,366 samples, 1.14%)</title><rect x="53.8938%" y="549" width="1.1441%" height="15" fill="rgb(224,114,35)"/><text x="54.1438%" y="559.50"></text></g><g><title>mir_const_qualif (144,421 samples, 0.11%)</title><rect x="55.8529%" y="485" width="0.1088%" height="15" fill="rgb(245,159,27)"/><text x="56.1029%" y="495.50"></text></g><g><title>mir_borrowck (350,863 samples, 0.26%)</title><rect x="56.0581%" y="453" width="0.2644%" height="15" fill="rgb(245,172,44)"/><text x="56.3081%" y="463.50"></text></g><g><title>mir_for_ctfe (479,176 samples, 0.36%)</title><rect x="55.9617%" y="485" width="0.3611%" height="15" fill="rgb(236,23,11)"/><text x="56.2117%" y="495.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (440,234 samples, 0.33%)</title><rect x="55.9911%" y="469" width="0.3317%" height="15" fill="rgb(205,117,38)"/><text x="56.2411%" y="479.50"></text></g><g><title>eval_to_const_value_raw (158,151 samples, 0.12%)</title><rect x="56.5627%" y="85" width="0.1192%" height="15" fill="rgb(237,72,25)"/><text x="56.8127%" y="95.50"></text></g><g><title>eval_to_const_value_raw (157,671 samples, 0.12%)</title><rect x="56.5631%" y="69" width="0.1188%" height="15" fill="rgb(244,70,9)"/><text x="56.8131%" y="79.50"></text></g><g><title>eval_to_allocation_raw (156,541 samples, 0.12%)</title><rect x="56.5639%" y="53" width="0.1180%" height="15" fill="rgb(217,125,39)"/><text x="56.8139%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (146,071 samples, 0.11%)</title><rect x="56.5718%" y="37" width="0.1101%" height="15" fill="rgb(235,36,10)"/><text x="56.8218%" y="47.50"></text></g><g><title>eval_to_const_value_raw (190,242 samples, 0.14%)</title><rect x="56.5552%" y="149" width="0.1433%" height="15" fill="rgb(251,123,47)"/><text x="56.8052%" y="159.50"></text></g><g><title>eval_to_const_value_raw (189,792 samples, 0.14%)</title><rect x="56.5556%" y="133" width="0.1430%" height="15" fill="rgb(221,13,13)"/><text x="56.8056%" y="143.50"></text></g><g><title>eval_to_allocation_raw (189,082 samples, 0.14%)</title><rect x="56.5561%" y="117" width="0.1425%" height="15" fill="rgb(238,131,9)"/><text x="56.8061%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (183,092 samples, 0.14%)</title><rect x="56.5606%" y="101" width="0.1380%" height="15" fill="rgb(211,50,8)"/><text x="56.8106%" y="111.50"></text></g><g><title>eval_to_const_value_raw (217,612 samples, 0.16%)</title><rect x="56.5476%" y="213" width="0.1640%" height="15" fill="rgb(245,182,24)"/><text x="56.7976%" y="223.50"></text></g><g><title>eval_to_const_value_raw (217,152 samples, 0.16%)</title><rect x="56.5479%" y="197" width="0.1636%" height="15" fill="rgb(242,14,37)"/><text x="56.7979%" y="207.50"></text></g><g><title>eval_to_allocation_raw (216,432 samples, 0.16%)</title><rect x="56.5485%" y="181" width="0.1631%" height="15" fill="rgb(246,228,12)"/><text x="56.7985%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (210,122 samples, 0.16%)</title><rect x="56.5532%" y="165" width="0.1583%" height="15" fill="rgb(213,55,15)"/><text x="56.8032%" y="175.50"></text></g><g><title>eval_to_const_value_raw (252,973 samples, 0.19%)</title><rect x="56.5377%" y="277" width="0.1906%" height="15" fill="rgb(209,9,3)"/><text x="56.7877%" y="287.50"></text></g><g><title>eval_to_const_value_raw (250,013 samples, 0.19%)</title><rect x="56.5400%" y="261" width="0.1884%" height="15" fill="rgb(230,59,30)"/><text x="56.7900%" y="271.50"></text></g><g><title>eval_to_allocation_raw (248,883 samples, 0.19%)</title><rect x="56.5408%" y="245" width="0.1875%" height="15" fill="rgb(209,121,21)"/><text x="56.7908%" y="255.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (242,113 samples, 0.18%)</title><rect x="56.5459%" y="229" width="0.1824%" height="15" fill="rgb(220,109,13)"/><text x="56.7959%" y="239.50"></text></g><g><title>eval_to_const_value_raw (335,683 samples, 0.25%)</title><rect x="56.4882%" y="341" width="0.2529%" height="15" fill="rgb(232,18,1)"/><text x="56.7382%" y="351.50"></text></g><g><title>eval_to_const_value_raw (333,543 samples, 0.25%)</title><rect x="56.4898%" y="325" width="0.2513%" height="15" fill="rgb(215,41,42)"/><text x="56.7398%" y="335.50"></text></g><g><title>eval_to_allocation_raw (328,463 samples, 0.25%)</title><rect x="56.4936%" y="309" width="0.2475%" height="15" fill="rgb(224,123,36)"/><text x="56.7436%" y="319.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (272,303 samples, 0.21%)</title><rect x="56.5360%" y="293" width="0.2052%" height="15" fill="rgb(240,125,3)"/><text x="56.7860%" y="303.50"></text></g><g><title>eval_to_const_value_raw (428,465 samples, 0.32%)</title><rect x="56.4574%" y="405" width="0.3229%" height="15" fill="rgb(205,98,50)"/><text x="56.7074%" y="415.50"></text></g><g><title>eval_to_const_value_raw (427,835 samples, 0.32%)</title><rect x="56.4579%" y="389" width="0.3224%" height="15" fill="rgb(205,185,37)"/><text x="56.7079%" y="399.50"></text></g><g><title>eval_to_allocation_raw (427,015 samples, 0.32%)</title><rect x="56.4585%" y="373" width="0.3218%" height="15" fill="rgb(238,207,15)"/><text x="56.7085%" y="383.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (395,465 samples, 0.30%)</title><rect x="56.4823%" y="357" width="0.2980%" height="15" fill="rgb(213,199,42)"/><text x="56.7323%" y="367.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (600,997 samples, 0.45%)</title><rect x="56.4450%" y="421" width="0.4529%" height="15" fill="rgb(235,201,11)"/><text x="56.6950%" y="431.50"></text></g><g><title>resolve_instance (156,072 samples, 0.12%)</title><rect x="56.7803%" y="405" width="0.1176%" height="15" fill="rgb(207,46,11)"/><text x="57.0303%" y="415.50"></text></g><g><title>evaluate_obligation (367,284 samples, 0.28%)</title><rect x="57.0133%" y="405" width="0.2768%" height="15" fill="rgb(241,35,35)"/><text x="57.2633%" y="415.50"></text></g><g><title>trait_impls_of (132,762 samples, 0.10%)</title><rect x="57.1900%" y="389" width="0.1000%" height="15" fill="rgb(243,32,47)"/><text x="57.4400%" y="399.50"></text></g><g><title>eval_to_const_value_raw (1,305,175 samples, 0.98%)</title><rect x="56.3273%" y="469" width="0.9835%" height="15" fill="rgb(247,202,23)"/><text x="56.5773%" y="479.50"></text></g><g><title>eval_to_const_value_raw (1,304,205 samples, 0.98%)</title><rect x="56.3281%" y="453" width="0.9827%" height="15" fill="rgb(219,102,11)"/><text x="56.5781%" y="463.50"></text></g><g><title>eval_to_allocation_raw (1,303,375 samples, 0.98%)</title><rect x="56.3287%" y="437" width="0.9821%" height="15" fill="rgb(243,110,44)"/><text x="56.5787%" y="447.50"></text></g><g><title>typeck (548,006 samples, 0.41%)</title><rect x="56.8979%" y="421" width="0.4129%" height="15" fill="rgb(222,74,54)"/><text x="57.1479%" y="431.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,314,325 samples, 0.99%)</title><rect x="56.3230%" y="485" width="0.9904%" height="15" fill="rgb(216,99,12)"/><text x="56.5730%" y="495.50"></text></g><g><title>eval_to_const_value_raw (2,150,484 samples, 1.62%)</title><rect x="55.7720%" y="533" width="1.6204%" height="15" fill="rgb(226,22,26)"/><text x="56.0220%" y="543.50"></text></g><g><title>eval_to_const_value_raw (2,136,494 samples, 1.61%)</title><rect x="55.7825%" y="517" width="1.6099%" height="15" fill="rgb(217,163,10)"/><text x="56.0325%" y="527.50"></text></g><g><title>eval_to_allocation_raw (2,135,104 samples, 1.61%)</title><rect x="55.7836%" y="501" width="1.6088%" height="15" fill="rgb(213,25,53)"/><text x="56.0336%" y="511.50"></text></g><g><title>evaluate_obligation (665,928 samples, 0.50%)</title><rect x="57.3924%" y="533" width="0.5018%" height="15" fill="rgb(252,105,26)"/><text x="57.6424%" y="543.50"></text></g><g><title>param_env (166,473 samples, 0.13%)</title><rect x="58.0065%" y="533" width="0.1254%" height="15" fill="rgb(220,39,43)"/><text x="58.2565%" y="543.50"></text></g><g><title>region_scope_tree (145,081 samples, 0.11%)</title><rect x="58.2137%" y="533" width="0.1093%" height="15" fill="rgb(229,68,48)"/><text x="58.4637%" y="543.50"></text></g><g><title>analysis (68,396,538 samples, 51.54%)</title><rect x="6.8594%" y="597" width="51.5375%" height="15" fill="rgb(252,8,32)"/><text x="7.1094%" y="607.50">analysis</text></g><g><title>type_check_crate (49,532,036 samples, 37.32%)</title><rect x="21.0740%" y="581" width="37.3229%" height="15" fill="rgb(223,20,43)"/><text x="21.3240%" y="591.50">type_check_crate</text></g><g><title>wf_checking (6,044,088 samples, 4.55%)</title><rect x="53.8427%" y="565" width="4.5543%" height="15" fill="rgb(229,81,49)"/><text x="54.0927%" y="575.50">wf_ch..</text></g><g><title>check_item_well_formed (4,457,781 samples, 3.36%)</title><rect x="55.0380%" y="549" width="3.3590%" height="15" fill="rgb(236,28,36)"/><text x="55.2880%" y="559.50">che..</text></g><g><title>is_unpin_raw (133,602 samples, 0.10%)</title><rect x="59.1847%" y="549" width="0.1007%" height="15" fill="rgb(249,185,26)"/><text x="59.4347%" y="559.50"></text></g><g><title>fn_abi_of_instance (271,003 samples, 0.20%)</title><rect x="59.1184%" y="565" width="0.2042%" height="15" fill="rgb(249,174,33)"/><text x="59.3684%" y="575.50"></text></g><g><title>codegen_module (831,149 samples, 0.63%)</title><rect x="58.7186%" y="581" width="0.6263%" height="15" fill="rgb(233,201,37)"/><text x="58.9686%" y="591.50"></text></g><g><title>optimized_mir (205,613 samples, 0.15%)</title><rect x="59.4167%" y="533" width="0.1549%" height="15" fill="rgb(221,78,26)"/><text x="59.6667%" y="543.50"></text></g><g><title>monomorphization_collector_graph_walk (285,194 samples, 0.21%)</title><rect x="59.3583%" y="549" width="0.2149%" height="15" fill="rgb(250,127,30)"/><text x="59.6083%" y="559.50"></text></g><g><title>monomorphization_collector (317,844 samples, 0.24%)</title><rect x="59.3566%" y="565" width="0.2395%" height="15" fill="rgb(230,49,44)"/><text x="59.6066%" y="575.50"></text></g><g><title>collect_and_partition_mono_items (377,604 samples, 0.28%)</title><rect x="59.3453%" y="581" width="0.2845%" height="15" fill="rgb(229,67,23)"/><text x="59.5953%" y="591.50"></text></g><g><title>codegen_crate (1,779,390 samples, 1.34%)</title><rect x="58.4058%" y="597" width="1.3408%" height="15" fill="rgb(249,83,47)"/><text x="58.6558%" y="607.50"></text></g><g><title>codegen_module_optimize (4,106,646 samples, 3.09%)</title><rect x="59.7466%" y="597" width="3.0944%" height="15" fill="rgb(215,43,3)"/><text x="59.9966%" y="607.50">cod..</text></g><g><title>LLVM_module_optimize (3,715,402 samples, 2.80%)</title><rect x="60.0414%" y="581" width="2.7996%" height="15" fill="rgb(238,154,13)"/><text x="60.2914%" y="591.50">LL..</text></g><g><title>LLVM_lto_optimize (791,898 samples, 0.60%)</title><rect x="63.0193%" y="581" width="0.5967%" height="15" fill="rgb(219,56,2)"/><text x="63.2693%" y="591.50"></text></g><g><title>LLVM_module_codegen (2,591,420 samples, 1.95%)</title><rect x="63.6160%" y="581" width="1.9527%" height="15" fill="rgb(233,0,4)"/><text x="63.8660%" y="591.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,544,058 samples, 1.92%)</title><rect x="63.6517%" y="565" width="1.9170%" height="15" fill="rgb(235,30,7)"/><text x="63.9017%" y="575.50">L..</text></g><g><title>codegen_module_perform_lto (3,655,211 samples, 2.75%)</title><rect x="62.8410%" y="597" width="2.7542%" height="15" fill="rgb(250,79,13)"/><text x="63.0910%" y="607.50">co..</text></g><g><title>AST_validation (180,952 samples, 0.14%)</title><rect x="65.7741%" y="581" width="0.1363%" height="15" fill="rgb(211,146,34)"/><text x="66.0241%" y="591.50"></text></g><g><title>metadata_register_crate (3,085,245 samples, 2.32%)</title><rect x="80.0014%" y="549" width="2.3248%" height="15" fill="rgb(228,22,38)"/><text x="80.2514%" y="559.50">m..</text></g><g><title>metadata_register_crate (2,034,243 samples, 1.53%)</title><rect x="80.7934%" y="533" width="1.5328%" height="15" fill="rgb(235,168,5)"/><text x="81.0434%" y="543.50"></text></g><g><title>metadata_register_crate (792,477 samples, 0.60%)</title><rect x="81.7291%" y="517" width="0.5971%" height="15" fill="rgb(221,155,16)"/><text x="81.9791%" y="527.50"></text></g><g><title>macro_expand_crate (21,853,685 samples, 16.47%)</title><rect x="66.0373%" y="581" width="16.4670%" height="15" fill="rgb(215,215,53)"/><text x="66.2873%" y="591.50">macro_expand_crate</text></g><g><title>expand_crate (21,836,625 samples, 16.45%)</title><rect x="66.0502%" y="565" width="16.4541%" height="15" fill="rgb(223,4,10)"/><text x="66.3002%" y="575.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (236,383 samples, 0.18%)</title><rect x="82.3262%" y="549" width="0.1781%" height="15" fill="rgb(234,103,6)"/><text x="82.5762%" y="559.50"></text></g><g><title>pre_AST_expansion_lint_checks (148,102 samples, 0.11%)</title><rect x="82.5090%" y="581" width="0.1116%" height="15" fill="rgb(227,97,0)"/><text x="82.7590%" y="591.50"></text></g><g><title>late_resolve_crate (1,633,819 samples, 1.23%)</title><rect x="82.7659%" y="565" width="1.2311%" height="15" fill="rgb(234,150,53)"/><text x="83.0159%" y="575.50"></text></g><g><title>configure_and_expand (24,569,835 samples, 18.51%)</title><rect x="65.5953%" y="597" width="18.5136%" height="15" fill="rgb(228,201,54)"/><text x="65.8453%" y="607.50">configure_and_expand</text></g><g><title>resolve_crate (1,975,112 samples, 1.49%)</title><rect x="82.6206%" y="581" width="1.4883%" height="15" fill="rgb(222,22,37)"/><text x="82.8706%" y="591.50"></text></g><g><title>drop_ast (219,112 samples, 0.17%)</title><rect x="84.1089%" y="597" width="0.1651%" height="15" fill="rgb(237,53,32)"/><text x="84.3589%" y="607.50"></text></g><g><title>early_lint_checks (560,857 samples, 0.42%)</title><rect x="84.2903%" y="597" width="0.4226%" height="15" fill="rgb(233,25,53)"/><text x="84.5403%" y="607.50"></text></g><g><title>free_global_ctxt (3,220,097 samples, 2.43%)</title><rect x="84.7129%" y="597" width="2.4264%" height="15" fill="rgb(210,40,34)"/><text x="84.9629%" y="607.50">fr..</text></g><g><title>exported_symbols (159,472 samples, 0.12%)</title><rect x="87.7990%" y="581" width="0.1202%" height="15" fill="rgb(241,220,44)"/><text x="88.0490%" y="591.50"></text></g><g><title>eval_to_allocation_raw (134,572 samples, 0.10%)</title><rect x="89.4206%" y="565" width="0.1014%" height="15" fill="rgb(235,28,35)"/><text x="89.6706%" y="575.50"></text></g><g><title>eval_to_allocation_raw (133,212 samples, 0.10%)</title><rect x="89.4217%" y="549" width="0.1004%" height="15" fill="rgb(210,56,17)"/><text x="89.6717%" y="559.50"></text></g><g><title>is_sized_raw (305,473 samples, 0.23%)</title><rect x="89.6504%" y="549" width="0.2302%" height="15" fill="rgb(224,130,29)"/><text x="89.9004%" y="559.50"></text></g><g><title>evaluate_obligation (290,273 samples, 0.22%)</title><rect x="89.6618%" y="533" width="0.2187%" height="15" fill="rgb(235,212,8)"/><text x="89.9118%" y="543.50"></text></g><g><title>layout_of (575,956 samples, 0.43%)</title><rect x="89.5220%" y="565" width="0.4340%" height="15" fill="rgb(223,33,50)"/><text x="89.7720%" y="575.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,618,957 samples, 1.22%)</title><rect x="89.9560%" y="565" width="1.2199%" height="15" fill="rgb(219,149,13)"/><text x="90.2060%" y="575.50"></text></g><g><title>optimized_mir (4,276,617 samples, 3.22%)</title><rect x="87.9694%" y="581" width="3.2225%" height="15" fill="rgb(250,156,29)"/><text x="88.2194%" y="591.50">opt..</text></g><g><title>generate_crate_metadata (5,402,101 samples, 4.07%)</title><rect x="87.1393%" y="597" width="4.0705%" height="15" fill="rgb(216,193,19)"/><text x="87.3893%" y="607.50">gene..</text></g><g><title>hir_lowering (2,808,172 samples, 2.12%)</title><rect x="91.2098%" y="597" width="2.1160%" height="15" fill="rgb(216,135,14)"/><text x="91.4598%" y="607.50">h..</text></g><g><title>finish_ongoing_codegen (4,769,303 samples, 3.59%)</title><rect x="93.3389%" y="581" width="3.5937%" height="15" fill="rgb(241,47,5)"/><text x="93.5889%" y="591.50">fini..</text></g><g><title>link_crate (1,270,915 samples, 0.96%)</title><rect x="96.9326%" y="581" width="0.9576%" height="15" fill="rgb(233,42,35)"/><text x="97.1826%" y="591.50"></text></g><g><title>link_binary (1,250,654 samples, 0.94%)</title><rect x="96.9479%" y="565" width="0.9424%" height="15" fill="rgb(231,13,6)"/><text x="97.1979%" y="575.50"></text></g><g><title>link_rlib (819,919 samples, 0.62%)</title><rect x="97.2724%" y="549" width="0.6178%" height="15" fill="rgb(207,181,40)"/><text x="97.5224%" y="559.50"></text></g><g><title>link (6,069,878 samples, 4.57%)</title><rect x="93.3258%" y="597" width="4.5737%" height="15" fill="rgb(254,173,49)"/><text x="93.5758%" y="607.50">link</text></g><g><title>parse_crate (1,346,505 samples, 1.01%)</title><rect x="97.8995%" y="597" width="1.0146%" height="15" fill="rgb(221,1,38)"/><text x="98.1495%" y="607.50"></text></g><g><title>prepare_outputs (348,704 samples, 0.26%)</title><rect x="98.9215%" y="597" width="0.2628%" height="15" fill="rgb(206,124,46)"/><text x="99.1715%" y="607.50"></text></g><g><title>self_profile_alloc_query_strings (577,016 samples, 0.43%)</title><rect x="99.1842%" y="597" width="0.4348%" height="15" fill="rgb(249,21,11)"/><text x="99.4342%" y="607.50"></text></g><g><title>setup_global_ctxt (134,932 samples, 0.10%)</title><rect x="99.6197%" y="597" width="0.1017%" height="15" fill="rgb(222,201,40)"/><text x="99.8697%" y="607.50"></text></g><g><title>all (132,712,190 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(235,61,29)"/><text x="0.2500%" y="639.50"></text></g><g><title>rustc (132,712,190 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(219,207,3)"/><text x="0.2500%" y="623.50">rustc</text></g><g><title>write_crate_metadata (369,794 samples, 0.28%)</title><rect x="99.7214%" y="597" width="0.2786%" height="15" fill="rgb(222,56,46)"/><text x="99.9714%" y="607.50"></text></g></svg></svg>