<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,239,720 samples, 7.74%)</title><rect x="0.9449%" y="165" width="7.7449%" height="15" fill="rgb(227,0,7)"/><text x="1.1949%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (512,586 samples, 0.64%)</title><rect x="8.0536%" y="149" width="0.6362%" height="15" fill="rgb(217,0,24)"/><text x="8.3036%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (503,106 samples, 0.62%)</title><rect x="8.0653%" y="133" width="0.6245%" height="15" fill="rgb(221,193,54)"/><text x="8.3153%" y="143.50"></text></g><g><title>adt_drop_tys (81,801 samples, 0.10%)</title><rect x="10.8626%" y="37" width="0.1015%" height="15" fill="rgb(248,212,6)"/><text x="11.1126%" y="47.50"></text></g><g><title>needs_drop_raw (174,091 samples, 0.22%)</title><rect x="10.8495%" y="53" width="0.2161%" height="15" fill="rgb(208,68,35)"/><text x="11.0995%" y="63.50"></text></g><g><title>is_copy_raw (81,710 samples, 0.10%)</title><rect x="10.9641%" y="37" width="0.1014%" height="15" fill="rgb(232,128,0)"/><text x="11.2141%" y="47.50"></text></g><g><title>mir_const (678,727 samples, 0.84%)</title><rect x="10.3830%" y="101" width="0.8425%" height="15" fill="rgb(207,160,47)"/><text x="10.6330%" y="111.50"></text></g><g><title>unsafety_check_result (557,806 samples, 0.69%)</title><rect x="10.5331%" y="85" width="0.6924%" height="15" fill="rgb(228,23,34)"/><text x="10.7831%" y="95.50"></text></g><g><title>mir_built (459,964 samples, 0.57%)</title><rect x="10.6546%" y="69" width="0.5709%" height="15" fill="rgb(218,30,26)"/><text x="10.9046%" y="79.50"></text></g><g><title>mir_promoted (799,129 samples, 0.99%)</title><rect x="10.2409%" y="117" width="0.9919%" height="15" fill="rgb(220,122,19)"/><text x="10.4909%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (87,490 samples, 0.11%)</title><rect x="11.2328%" y="117" width="0.1086%" height="15" fill="rgb(250,228,42)"/><text x="11.4828%" y="127.50"></text></g><g><title>type_op_prove_predicate (292,953 samples, 0.36%)</title><rect x="11.4133%" y="117" width="0.3636%" height="15" fill="rgb(240,193,28)"/><text x="11.6633%" y="127.50"></text></g><g><title>MIR_borrow_checking (2,345,187 samples, 2.91%)</title><rect x="8.8693%" y="149" width="2.9109%" height="15" fill="rgb(216,20,37)"/><text x="9.1193%" y="159.50">MI..</text></g><g><title>mir_borrowck (2,337,277 samples, 2.90%)</title><rect x="8.8791%" y="133" width="2.9011%" height="15" fill="rgb(206,188,39)"/><text x="9.1291%" y="143.50">mi..</text></g><g><title>hir_module_items (126,442 samples, 0.16%)</title><rect x="11.7845%" y="149" width="0.1569%" height="15" fill="rgb(217,207,13)"/><text x="12.0345%" y="159.50"></text></g><g><title>get_lang_items (86,760 samples, 0.11%)</title><rect x="12.1497%" y="101" width="0.1077%" height="15" fill="rgb(231,73,38)"/><text x="12.3997%" y="111.50"></text></g><g><title>codegen_fn_attrs (98,310 samples, 0.12%)</title><rect x="12.3578%" y="85" width="0.1220%" height="15" fill="rgb(225,20,46)"/><text x="12.6078%" y="95.50"></text></g><g><title>should_inherit_track_caller (181,911 samples, 0.23%)</title><rect x="12.2574%" y="101" width="0.2258%" height="15" fill="rgb(210,31,41)"/><text x="12.5074%" y="111.50"></text></g><g><title>codegen_fn_attrs (357,684 samples, 0.44%)</title><rect x="12.0781%" y="117" width="0.4440%" height="15" fill="rgb(221,200,47)"/><text x="12.3281%" y="127.50"></text></g><g><title>check_mod_attrs (442,665 samples, 0.55%)</title><rect x="11.9734%" y="133" width="0.5494%" height="15" fill="rgb(226,26,5)"/><text x="12.2234%" y="143.50"></text></g><g><title>lookup_deprecation_entry (86,132 samples, 0.11%)</title><rect x="12.7019%" y="117" width="0.1069%" height="15" fill="rgb(249,33,26)"/><text x="12.9519%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (242,842 samples, 0.30%)</title><rect x="12.5965%" y="133" width="0.3014%" height="15" fill="rgb(235,183,28)"/><text x="12.8465%" y="143.50"></text></g><g><title>misc_checking_1 (808,059 samples, 1.00%)</title><rect x="11.9418%" y="149" width="1.0030%" height="15" fill="rgb(221,5,38)"/><text x="12.1918%" y="159.50"></text></g><g><title>misc_checking_2 (103,811 samples, 0.13%)</title><rect x="12.9448%" y="149" width="0.1289%" height="15" fill="rgb(247,18,42)"/><text x="13.1948%" y="159.50"></text></g><g><title>crate_lints (1,763,050 samples, 2.19%)</title><rect x="13.2025%" y="117" width="2.1883%" height="15" fill="rgb(241,131,45)"/><text x="13.4525%" y="127.50">c..</text></g><g><title>type_of (1,039,113 samples, 1.29%)</title><rect x="14.1011%" y="101" width="1.2898%" height="15" fill="rgb(249,31,29)"/><text x="14.3511%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (804,270 samples, 1.00%)</title><rect x="14.3926%" y="85" width="0.9983%" height="15" fill="rgb(225,111,53)"/><text x="14.6426%" y="95.50"></text></g><g><title>lint_checking (1,797,391 samples, 2.23%)</title><rect x="13.2009%" y="133" width="2.2310%" height="15" fill="rgb(238,160,17)"/><text x="13.4509%" y="143.50">l..</text></g><g><title>privacy_checking_modules (88,851 samples, 0.11%)</title><rect x="15.4959%" y="133" width="0.1103%" height="15" fill="rgb(214,148,48)"/><text x="15.7459%" y="143.50"></text></g><g><title>check_mod_privacy (87,841 samples, 0.11%)</title><rect x="15.4972%" y="117" width="0.1090%" height="15" fill="rgb(232,36,49)"/><text x="15.7472%" y="127.50"></text></g><g><title>misc_checking_3 (2,045,453 samples, 2.54%)</title><rect x="13.0737%" y="149" width="2.5389%" height="15" fill="rgb(209,103,24)"/><text x="13.3237%" y="159.50">mi..</text></g><g><title>impl_parent (86,261 samples, 0.11%)</title><rect x="15.9669%" y="53" width="0.1071%" height="15" fill="rgb(229,88,8)"/><text x="16.2169%" y="63.50"></text></g><g><title>impl_trait_ref (241,252 samples, 0.30%)</title><rect x="16.0740%" y="53" width="0.2994%" height="15" fill="rgb(213,181,19)"/><text x="16.3240%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (205,751 samples, 0.26%)</title><rect x="16.1180%" y="37" width="0.2554%" height="15" fill="rgb(254,191,54)"/><text x="16.3680%" y="47.50"></text></g><g><title>adt_destructor (536,746 samples, 0.67%)</title><rect x="15.7815%" y="101" width="0.6662%" height="15" fill="rgb(241,83,37)"/><text x="16.0315%" y="111.50"></text></g><g><title>coherent_trait (531,866 samples, 0.66%)</title><rect x="15.7876%" y="85" width="0.6602%" height="15" fill="rgb(233,36,39)"/><text x="16.0376%" y="95.50"></text></g><g><title>specialization_graph_of (529,616 samples, 0.66%)</title><rect x="15.7904%" y="69" width="0.6574%" height="15" fill="rgb(226,3,54)"/><text x="16.0404%" y="79.50"></text></g><g><title>is_copy_raw (81,711 samples, 0.10%)</title><rect x="16.4478%" y="101" width="0.1014%" height="15" fill="rgb(245,192,40)"/><text x="16.6978%" y="111.50"></text></g><g><title>param_env (113,121 samples, 0.14%)</title><rect x="16.5492%" y="101" width="0.1404%" height="15" fill="rgb(238,167,29)"/><text x="16.7992%" y="111.50"></text></g><g><title>impl_parent (3,691,669 samples, 4.58%)</title><rect x="25.8538%" y="85" width="4.5822%" height="15" fill="rgb(232,182,51)"/><text x="26.1038%" y="95.50">impl_..</text></g><g><title>metadata_decode_entry_impl_parent (2,008,437 samples, 2.49%)</title><rect x="27.9431%" y="69" width="2.4929%" height="15" fill="rgb(231,60,39)"/><text x="28.1931%" y="79.50">me..</text></g><g><title>impl_trait_ref (9,363,036 samples, 11.62%)</title><rect x="30.4360%" y="85" width="11.6217%" height="15" fill="rgb(208,69,12)"/><text x="30.6860%" y="95.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,640,661 samples, 9.48%)</title><rect x="32.5739%" y="69" width="9.4838%" height="15" fill="rgb(235,93,37)"/><text x="32.8239%" y="79.50">metadata_decod..</text></g><g><title>specialization_graph_of (21,989,216 samples, 27.29%)</title><rect x="16.6896%" y="101" width="27.2936%" height="15" fill="rgb(213,116,39)"/><text x="16.9396%" y="111.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,549,836 samples, 1.92%)</title><rect x="42.0595%" y="85" width="1.9237%" height="15" fill="rgb(222,207,29)"/><text x="42.3095%" y="95.50">t..</text></g><g><title>implementations_of_trait (372,204 samples, 0.46%)</title><rect x="43.5213%" y="69" width="0.4620%" height="15" fill="rgb(206,96,30)"/><text x="43.7713%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (309,254 samples, 0.38%)</title><rect x="43.5994%" y="53" width="0.3839%" height="15" fill="rgb(218,138,4)"/><text x="43.8494%" y="63.50"></text></g><g><title>coherent_trait (22,807,465 samples, 28.31%)</title><rect x="15.6746%" y="117" width="28.3093%" height="15" fill="rgb(250,191,14)"/><text x="15.9246%" y="127.50">coherent_trait</text></g><g><title>coherence_checking (22,879,115 samples, 28.40%)</title><rect x="15.6420%" y="133" width="28.3982%" height="15" fill="rgb(239,60,40)"/><text x="15.8920%" y="143.50">coherence_checking</text></g><g><title>dropck_outlives (121,590 samples, 0.15%)</title><rect x="46.0969%" y="85" width="0.1509%" height="15" fill="rgb(206,27,48)"/><text x="46.3469%" y="95.50"></text></g><g><title>evaluate_obligation (103,660 samples, 0.13%)</title><rect x="46.2478%" y="85" width="0.1287%" height="15" fill="rgb(225,35,8)"/><text x="46.4978%" y="95.50"></text></g><g><title>object_safety_violations (133,902 samples, 0.17%)</title><rect x="46.5711%" y="85" width="0.1662%" height="15" fill="rgb(250,213,24)"/><text x="46.8211%" y="95.50"></text></g><g><title>predicates_of (101,492 samples, 0.13%)</title><rect x="46.7506%" y="85" width="0.1260%" height="15" fill="rgb(247,123,22)"/><text x="47.0006%" y="95.50"></text></g><g><title>predicates_defined_on (87,132 samples, 0.11%)</title><rect x="46.7684%" y="69" width="0.1082%" height="15" fill="rgb(231,138,38)"/><text x="47.0184%" y="79.50"></text></g><g><title>item_bodies_checking (2,351,496 samples, 2.92%)</title><rect x="44.0704%" y="133" width="2.9187%" height="15" fill="rgb(231,145,46)"/><text x="44.3204%" y="143.50">it..</text></g><g><title>typeck_item_bodies (2,349,746 samples, 2.92%)</title><rect x="44.0725%" y="117" width="2.9166%" height="15" fill="rgb(251,118,11)"/><text x="44.3225%" y="127.50">ty..</text></g><g><title>typeck (2,342,646 samples, 2.91%)</title><rect x="44.0813%" y="101" width="2.9078%" height="15" fill="rgb(217,147,25)"/><text x="44.3313%" y="111.50">ty..</text></g><g><title>item_types_checking (194,423 samples, 0.24%)</title><rect x="46.9891%" y="133" width="0.2413%" height="15" fill="rgb(247,81,37)"/><text x="47.2391%" y="143.50"></text></g><g><title>check_mod_item_types (192,623 samples, 0.24%)</title><rect x="46.9913%" y="117" width="0.2391%" height="15" fill="rgb(209,12,38)"/><text x="47.2413%" y="127.50"></text></g><g><title>fn_sig (162,252 samples, 0.20%)</title><rect x="47.4146%" y="101" width="0.2014%" height="15" fill="rgb(227,1,9)"/><text x="47.6646%" y="111.50"></text></g><g><title>explicit_item_bounds (97,941 samples, 0.12%)</title><rect x="47.8965%" y="85" width="0.1216%" height="15" fill="rgb(248,47,43)"/><text x="48.1465%" y="95.50"></text></g><g><title>item_bounds (199,812 samples, 0.25%)</title><rect x="47.7966%" y="101" width="0.2480%" height="15" fill="rgb(221,10,30)"/><text x="48.0466%" y="111.50"></text></g><g><title>late_bound_vars_map (187,912 samples, 0.23%)</title><rect x="48.2789%" y="53" width="0.2332%" height="15" fill="rgb(210,229,1)"/><text x="48.5289%" y="63.50"></text></g><g><title>resolve_lifetimes (173,682 samples, 0.22%)</title><rect x="48.2966%" y="37" width="0.2156%" height="15" fill="rgb(222,148,37)"/><text x="48.5466%" y="47.50"></text></g><g><title>explicit_predicates_of (336,274 samples, 0.42%)</title><rect x="48.1320%" y="69" width="0.4174%" height="15" fill="rgb(234,67,33)"/><text x="48.3820%" y="79.50"></text></g><g><title>predicates_of (567,597 samples, 0.70%)</title><rect x="48.0446%" y="101" width="0.7045%" height="15" fill="rgb(247,98,35)"/><text x="48.2946%" y="111.50"></text></g><g><title>predicates_defined_on (541,897 samples, 0.67%)</title><rect x="48.0765%" y="85" width="0.6726%" height="15" fill="rgb(247,138,52)"/><text x="48.3265%" y="95.50"></text></g><g><title>inferred_outlives_of (160,942 samples, 0.20%)</title><rect x="48.5494%" y="69" width="0.1998%" height="15" fill="rgb(213,79,30)"/><text x="48.7994%" y="79.50"></text></g><g><title>inferred_outlives_crate (143,282 samples, 0.18%)</title><rect x="48.5713%" y="53" width="0.1778%" height="15" fill="rgb(246,177,23)"/><text x="48.8213%" y="63.50"></text></g><g><title>type_of (105,361 samples, 0.13%)</title><rect x="48.6184%" y="37" width="0.1308%" height="15" fill="rgb(230,62,27)"/><text x="48.8684%" y="47.50"></text></g><g><title>super_predicates_of (143,291 samples, 0.18%)</title><rect x="48.7491%" y="101" width="0.1779%" height="15" fill="rgb(216,154,8)"/><text x="48.9991%" y="111.50"></text></g><g><title>super_predicates_that_define_assoc_type (131,641 samples, 0.16%)</title><rect x="48.7636%" y="85" width="0.1634%" height="15" fill="rgb(244,35,45)"/><text x="49.0136%" y="95.50"></text></g><g><title>type_collecting (1,460,646 samples, 1.81%)</title><rect x="47.2312%" y="133" width="1.8130%" height="15" fill="rgb(251,115,12)"/><text x="47.4812%" y="143.50">t..</text></g><g><title>collect_mod_item_types (1,451,136 samples, 1.80%)</title><rect x="47.2430%" y="117" width="1.8012%" height="15" fill="rgb(240,54,50)"/><text x="47.4930%" y="127.50">c..</text></g><g><title>type_of (91,301 samples, 0.11%)</title><rect x="48.9308%" y="101" width="0.1133%" height="15" fill="rgb(233,84,52)"/><text x="49.1808%" y="111.50"></text></g><g><title>evaluate_obligation (100,412 samples, 0.12%)</title><rect x="49.3287%" y="101" width="0.1246%" height="15" fill="rgb(207,117,47)"/><text x="49.5787%" y="111.50"></text></g><g><title>check_impl_item_well_formed (376,894 samples, 0.47%)</title><rect x="49.0882%" y="117" width="0.4678%" height="15" fill="rgb(249,43,39)"/><text x="49.3382%" y="127.50"></text></g><g><title>check_item_well_formed (566,816 samples, 0.70%)</title><rect x="49.5560%" y="117" width="0.7035%" height="15" fill="rgb(209,38,44)"/><text x="49.8060%" y="127.50"></text></g><g><title>analysis (33,789,268 samples, 41.94%)</title><rect x="8.6898%" y="165" width="41.9402%" height="15" fill="rgb(236,212,23)"/><text x="8.9398%" y="175.50">analysis</text></g><g><title>type_check_crate (28,211,935 samples, 35.02%)</title><rect x="15.6126%" y="149" width="35.0175%" height="15" fill="rgb(242,79,21)"/><text x="15.8626%" y="159.50">type_check_crate</text></g><g><title>wf_checking (1,277,224 samples, 1.59%)</title><rect x="49.0447%" y="133" width="1.5853%" height="15" fill="rgb(211,96,35)"/><text x="49.2947%" y="143.50"></text></g><g><title>check_trait_item_well_formed (298,454 samples, 0.37%)</title><rect x="50.2596%" y="117" width="0.3704%" height="15" fill="rgb(253,215,40)"/><text x="50.5096%" y="127.50"></text></g><g><title>codegen_module (192,052 samples, 0.24%)</title><rect x="51.1531%" y="149" width="0.2384%" height="15" fill="rgb(211,81,21)"/><text x="51.4031%" y="159.50"></text></g><g><title>codegen_crate (704,347 samples, 0.87%)</title><rect x="50.6420%" y="165" width="0.8743%" height="15" fill="rgb(208,190,38)"/><text x="50.8920%" y="175.50"></text></g><g><title>codegen_module_optimize (1,963,602 samples, 2.44%)</title><rect x="51.5163%" y="165" width="2.4373%" height="15" fill="rgb(235,213,38)"/><text x="51.7663%" y="175.50">co..</text></g><g><title>LLVM_module_optimize (427,225 samples, 0.53%)</title><rect x="53.4233%" y="149" width="0.5303%" height="15" fill="rgb(237,122,38)"/><text x="53.6733%" y="159.50"></text></g><g><title>LLVM_lto_optimize (249,183 samples, 0.31%)</title><rect x="54.4617%" y="149" width="0.3093%" height="15" fill="rgb(244,218,35)"/><text x="54.7117%" y="159.50"></text></g><g><title>LLVM_module_codegen (2,629,190 samples, 3.26%)</title><rect x="54.7710%" y="149" width="3.2634%" height="15" fill="rgb(240,68,47)"/><text x="55.0210%" y="159.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (2,585,889 samples, 3.21%)</title><rect x="54.8247%" y="133" width="3.2097%" height="15" fill="rgb(210,16,53)"/><text x="55.0747%" y="143.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,325,917 samples, 4.13%)</title><rect x="53.9536%" y="165" width="4.1282%" height="15" fill="rgb(235,124,12)"/><text x="54.2036%" y="175.50">code..</text></g><g><title>metadata_load_macro (135,301 samples, 0.17%)</title><rect x="70.7930%" y="117" width="0.1679%" height="15" fill="rgb(224,169,11)"/><text x="71.0430%" y="127.50"></text></g><g><title>macro_expand_crate (20,773,773 samples, 25.79%)</title><rect x="58.4958%" y="149" width="25.7850%" height="15" fill="rgb(250,166,2)"/><text x="58.7458%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (20,759,322 samples, 25.77%)</title><rect x="58.5137%" y="133" width="25.7671%" height="15" fill="rgb(242,216,29)"/><text x="58.7637%" y="143.50">expand_crate</text></g><g><title>metadata_register_crate (10,731,180 samples, 13.32%)</title><rect x="70.9609%" y="117" width="13.3199%" height="15" fill="rgb(230,116,27)"/><text x="71.2109%" y="127.50">metadata_register_cr..</text></g><g><title>metadata_register_crate (995,283 samples, 1.24%)</title><rect x="83.0454%" y="101" width="1.2354%" height="15" fill="rgb(228,99,48)"/><text x="83.2954%" y="111.50"></text></g><g><title>finalize_macro_resolutions (310,073 samples, 0.38%)</title><rect x="84.4407%" y="133" width="0.3849%" height="15" fill="rgb(253,11,6)"/><text x="84.6907%" y="143.50"></text></g><g><title>late_resolve_crate (1,141,643 samples, 1.42%)</title><rect x="84.8256%" y="133" width="1.4170%" height="15" fill="rgb(247,143,39)"/><text x="85.0756%" y="143.50"></text></g><g><title>configure_and_expand (22,732,825 samples, 28.22%)</title><rect x="58.0818%" y="165" width="28.2166%" height="15" fill="rgb(236,97,10)"/><text x="58.3318%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (1,547,257 samples, 1.92%)</title><rect x="84.3779%" y="149" width="1.9205%" height="15" fill="rgb(233,208,19)"/><text x="84.6279%" y="159.50">r..</text></g><g><title>early_lint_checks (122,291 samples, 0.15%)</title><rect x="86.3939%" y="165" width="0.1518%" height="15" fill="rgb(216,164,2)"/><text x="86.6439%" y="175.50"></text></g><g><title>free_global_ctxt (2,608,309 samples, 3.24%)</title><rect x="86.5457%" y="165" width="3.2375%" height="15" fill="rgb(220,129,5)"/><text x="86.7957%" y="175.50">fre..</text></g><g><title>layout_of (85,162 samples, 0.11%)</title><rect x="90.8410%" y="117" width="0.1057%" height="15" fill="rgb(242,17,10)"/><text x="91.0910%" y="127.50"></text></g><g><title>layout_of (237,012 samples, 0.29%)</title><rect x="90.6861%" y="133" width="0.2942%" height="15" fill="rgb(242,107,0)"/><text x="90.9361%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (230,712 samples, 0.29%)</title><rect x="90.9803%" y="133" width="0.2864%" height="15" fill="rgb(251,28,31)"/><text x="91.2303%" y="143.50"></text></g><g><title>optimized_mir (790,588 samples, 0.98%)</title><rect x="90.3679%" y="149" width="0.9813%" height="15" fill="rgb(233,223,10)"/><text x="90.6179%" y="159.50"></text></g><g><title>generate_crate_metadata (1,302,014 samples, 1.62%)</title><rect x="89.7832%" y="165" width="1.6161%" height="15" fill="rgb(215,21,27)"/><text x="90.0332%" y="175.50"></text></g><g><title>hir_lowering (842,140 samples, 1.05%)</title><rect x="91.3993%" y="165" width="1.0453%" height="15" fill="rgb(232,23,21)"/><text x="91.6493%" y="175.50"></text></g><g><title>finish_ongoing_codegen (3,363,288 samples, 4.17%)</title><rect x="92.4587%" y="149" width="4.1746%" height="15" fill="rgb(244,5,23)"/><text x="92.7087%" y="159.50">finis..</text></g><g><title>link_crate (567,586 samples, 0.70%)</title><rect x="96.6333%" y="149" width="0.7045%" height="15" fill="rgb(226,81,46)"/><text x="96.8833%" y="159.50"></text></g><g><title>link_binary (556,726 samples, 0.69%)</title><rect x="96.6468%" y="133" width="0.6910%" height="15" fill="rgb(247,70,30)"/><text x="96.8968%" y="143.50"></text></g><g><title>link_rlib (311,354 samples, 0.39%)</title><rect x="96.9514%" y="117" width="0.3865%" height="15" fill="rgb(212,68,19)"/><text x="97.2014%" y="127.50"></text></g><g><title>link (3,948,484 samples, 4.90%)</title><rect x="92.4446%" y="165" width="4.9010%" height="15" fill="rgb(240,187,13)"/><text x="92.6946%" y="175.50">link</text></g><g><title>parse_crate (906,220 samples, 1.12%)</title><rect x="97.3456%" y="165" width="1.1248%" height="15" fill="rgb(223,113,26)"/><text x="97.5956%" y="175.50"></text></g><g><title>prepare_outputs (365,724 samples, 0.45%)</title><rect x="98.4811%" y="165" width="0.4539%" height="15" fill="rgb(206,192,2)"/><text x="98.7311%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (448,625 samples, 0.56%)</title><rect x="98.9350%" y="165" width="0.5568%" height="15" fill="rgb(241,108,4)"/><text x="99.1850%" y="175.50"></text></g><g><title>setup_global_ctxt (117,531 samples, 0.15%)</title><rect x="99.4925%" y="165" width="0.1459%" height="15" fill="rgb(247,173,49)"/><text x="99.7425%" y="175.50"></text></g><g><title>all (80,565,321 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (80,565,321 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (291,344 samples, 0.36%)</title><rect x="99.6384%" y="165" width="0.3616%" height="15" fill="rgb(245,172,44)"/><text x="99.8884%" y="175.50"></text></g></svg></svg>