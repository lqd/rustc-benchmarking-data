<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (44,146,331 samples, 9.82%)</title><rect x="0.1816%" y="149" width="9.8158%" height="15" fill="rgb(227,0,7)"/><text x="0.4316%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,062,932 samples, 0.24%)</title><rect x="9.7611%" y="133" width="0.2363%" height="15" fill="rgb(217,0,24)"/><text x="10.0111%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,023,842 samples, 0.23%)</title><rect x="9.7697%" y="117" width="0.2276%" height="15" fill="rgb(221,193,54)"/><text x="10.0197%" y="127.50"></text></g><g><title>thir_body (979,647 samples, 0.22%)</title><rect x="13.7106%" y="37" width="0.2178%" height="15" fill="rgb(248,212,6)"/><text x="13.9606%" y="47.50"></text></g><g><title>mir_const (5,291,416 samples, 1.18%)</title><rect x="12.7556%" y="85" width="1.1765%" height="15" fill="rgb(208,68,35)"/><text x="13.0056%" y="95.50"></text></g><g><title>unsafety_check_result (4,511,835 samples, 1.00%)</title><rect x="12.9289%" y="69" width="1.0032%" height="15" fill="rgb(232,128,0)"/><text x="13.1789%" y="79.50"></text></g><g><title>mir_built (4,034,668 samples, 0.90%)</title><rect x="13.0350%" y="53" width="0.8971%" height="15" fill="rgb(207,160,47)"/><text x="13.2850%" y="63.50"></text></g><g><title>mir_promoted (6,062,471 samples, 1.35%)</title><rect x="12.5948%" y="101" width="1.3480%" height="15" fill="rgb(228,23,34)"/><text x="12.8448%" y="111.50"></text></g><g><title>type_op_prove_predicate (895,168 samples, 0.20%)</title><rect x="13.9807%" y="101" width="0.1990%" height="15" fill="rgb(218,30,26)"/><text x="14.2307%" y="111.50"></text></g><g><title>MIR_borrow_checking (18,103,686 samples, 4.03%)</title><rect x="10.1558%" y="133" width="4.0253%" height="15" fill="rgb(220,122,19)"/><text x="10.4058%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (17,979,295 samples, 4.00%)</title><rect x="10.1834%" y="117" width="3.9976%" height="15" fill="rgb(250,228,42)"/><text x="10.4334%" y="127.50">mir_..</text></g><g><title>codegen_fn_attrs (702,299 samples, 0.16%)</title><rect x="14.4181%" y="101" width="0.1562%" height="15" fill="rgb(240,193,28)"/><text x="14.6681%" y="111.50"></text></g><g><title>check_mod_attrs (1,290,827 samples, 0.29%)</title><rect x="14.2873%" y="117" width="0.2870%" height="15" fill="rgb(216,20,37)"/><text x="14.5373%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (600,185 samples, 0.13%)</title><rect x="14.6700%" y="117" width="0.1334%" height="15" fill="rgb(206,188,39)"/><text x="14.9200%" y="127.50"></text></g><g><title>misc_checking_1 (2,491,128 samples, 0.55%)</title><rect x="14.2756%" y="133" width="0.5539%" height="15" fill="rgb(217,207,13)"/><text x="14.5256%" y="143.50"></text></g><g><title>misc_checking_2 (1,009,271 samples, 0.22%)</title><rect x="14.8295%" y="133" width="0.2244%" height="15" fill="rgb(231,73,38)"/><text x="15.0795%" y="143.50"></text></g><g><title>match_checking (841,869 samples, 0.19%)</title><rect x="14.8667%" y="117" width="0.1872%" height="15" fill="rgb(225,20,46)"/><text x="15.1167%" y="127.50"></text></g><g><title>check_match (811,439 samples, 0.18%)</title><rect x="14.8735%" y="101" width="0.1804%" height="15" fill="rgb(210,31,41)"/><text x="15.1235%" y="111.50"></text></g><g><title>death_checking (532,877 samples, 0.12%)</title><rect x="15.1046%" y="117" width="0.1185%" height="15" fill="rgb(221,200,47)"/><text x="15.3546%" y="127.50"></text></g><g><title>crate_lints (988,261 samples, 0.22%)</title><rect x="15.2234%" y="101" width="0.2197%" height="15" fill="rgb(226,26,5)"/><text x="15.4734%" y="111.50"></text></g><g><title>lint_checking (1,431,706 samples, 0.32%)</title><rect x="15.2231%" y="117" width="0.3183%" height="15" fill="rgb(249,33,26)"/><text x="15.4731%" y="127.50"></text></g><g><title>privacy_checking_modules (781,419 samples, 0.17%)</title><rect x="15.6158%" y="117" width="0.1737%" height="15" fill="rgb(235,183,28)"/><text x="15.8658%" y="127.50"></text></g><g><title>check_mod_privacy (776,569 samples, 0.17%)</title><rect x="15.6168%" y="101" width="0.1727%" height="15" fill="rgb(221,5,38)"/><text x="15.8668%" y="111.50"></text></g><g><title>misc_checking_3 (3,330,558 samples, 0.74%)</title><rect x="15.0539%" y="133" width="0.7405%" height="15" fill="rgb(247,18,42)"/><text x="15.3039%" y="143.50"></text></g><g><title>impl_parent (1,442,767 samples, 0.32%)</title><rect x="16.5755%" y="69" width="0.3208%" height="15" fill="rgb(241,131,45)"/><text x="16.8255%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (717,906 samples, 0.16%)</title><rect x="16.7367%" y="53" width="0.1596%" height="15" fill="rgb(249,31,29)"/><text x="16.9867%" y="63.50"></text></g><g><title>impl_trait_ref (2,845,153 samples, 0.63%)</title><rect x="16.8963%" y="69" width="0.6326%" height="15" fill="rgb(225,111,53)"/><text x="17.1463%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,136,167 samples, 0.47%)</title><rect x="17.0539%" y="53" width="0.4750%" height="15" fill="rgb(238,160,17)"/><text x="17.3039%" y="63.50"></text></g><g><title>coherent_trait (8,297,375 samples, 1.84%)</title><rect x="15.8143%" y="101" width="1.8449%" height="15" fill="rgb(214,148,48)"/><text x="16.0643%" y="111.50">c..</text></g><g><title>specialization_graph_of (7,536,477 samples, 1.68%)</title><rect x="15.9835%" y="85" width="1.6757%" height="15" fill="rgb(232,36,49)"/><text x="16.2335%" y="95.50"></text></g><g><title>trait_impls_of (583,859 samples, 0.13%)</title><rect x="17.5294%" y="69" width="0.1298%" height="15" fill="rgb(209,103,24)"/><text x="17.7794%" y="79.50"></text></g><g><title>coherence_checking (8,461,236 samples, 1.88%)</title><rect x="15.8079%" y="117" width="1.8813%" height="15" fill="rgb(229,88,8)"/><text x="16.0579%" y="127.50">c..</text></g><g><title>evaluate_obligation (537,873 samples, 0.12%)</title><rect x="22.0514%" y="69" width="0.1196%" height="15" fill="rgb(213,181,19)"/><text x="22.3014%" y="79.50"></text></g><g><title>item_bodies_checking (20,637,815 samples, 4.59%)</title><rect x="17.7120%" y="117" width="4.5887%" height="15" fill="rgb(254,191,54)"/><text x="17.9620%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (20,635,435 samples, 4.59%)</title><rect x="17.7125%" y="101" width="4.5882%" height="15" fill="rgb(241,83,37)"/><text x="17.9625%" y="111.50">typec..</text></g><g><title>typeck (20,544,825 samples, 4.57%)</title><rect x="17.7327%" y="85" width="4.5681%" height="15" fill="rgb(233,36,39)"/><text x="17.9827%" y="95.50">typeck</text></g><g><title>item_types_checking (1,354,435 samples, 0.30%)</title><rect x="22.3007%" y="117" width="0.3012%" height="15" fill="rgb(226,3,54)"/><text x="22.5507%" y="127.50"></text></g><g><title>check_mod_item_types (1,346,685 samples, 0.30%)</title><rect x="22.3025%" y="101" width="0.2994%" height="15" fill="rgb(245,192,40)"/><text x="22.5525%" y="111.50"></text></g><g><title>fn_sig (509,335 samples, 0.11%)</title><rect x="22.7770%" y="85" width="0.1132%" height="15" fill="rgb(238,167,29)"/><text x="23.0270%" y="95.50"></text></g><g><title>is_late_bound_map (468,355 samples, 0.10%)</title><rect x="22.9568%" y="69" width="0.1041%" height="15" fill="rgb(232,182,51)"/><text x="23.2068%" y="79.50"></text></g><g><title>resolve_lifetimes (462,835 samples, 0.10%)</title><rect x="22.9580%" y="53" width="0.1029%" height="15" fill="rgb(231,60,39)"/><text x="23.2080%" y="63.50"></text></g><g><title>named_region_map (884,891 samples, 0.20%)</title><rect x="23.0609%" y="69" width="0.1968%" height="15" fill="rgb(208,69,12)"/><text x="23.3109%" y="79.50"></text></g><g><title>resolve_lifetimes (808,810 samples, 0.18%)</title><rect x="23.0778%" y="53" width="0.1798%" height="15" fill="rgb(235,93,37)"/><text x="23.3278%" y="63.50"></text></g><g><title>generics_of (1,699,991 samples, 0.38%)</title><rect x="22.8902%" y="85" width="0.3780%" height="15" fill="rgb(213,116,39)"/><text x="23.1402%" y="95.50"></text></g><g><title>predicates_of (1,159,022 samples, 0.26%)</title><rect x="23.3055%" y="85" width="0.2577%" height="15" fill="rgb(222,207,29)"/><text x="23.5555%" y="95.50"></text></g><g><title>predicates_defined_on (967,768 samples, 0.22%)</title><rect x="23.3480%" y="69" width="0.2152%" height="15" fill="rgb(206,96,30)"/><text x="23.5980%" y="79.50"></text></g><g><title>type_collecting (4,593,232 samples, 1.02%)</title><rect x="22.6023%" y="117" width="1.0213%" height="15" fill="rgb(218,138,4)"/><text x="22.8523%" y="127.50"></text></g><g><title>collect_mod_item_types (4,569,451 samples, 1.02%)</title><rect x="22.6075%" y="101" width="1.0160%" height="15" fill="rgb(250,191,14)"/><text x="22.8575%" y="111.50"></text></g><g><title>evaluate_obligation (573,248 samples, 0.13%)</title><rect x="24.3174%" y="85" width="0.1275%" height="15" fill="rgb(239,60,40)"/><text x="24.5674%" y="95.50"></text></g><g><title>region_scope_tree (586,215 samples, 0.13%)</title><rect x="24.5969%" y="85" width="0.1303%" height="15" fill="rgb(206,27,48)"/><text x="24.8469%" y="95.50"></text></g><g><title>check_impl_item_well_formed (4,652,595 samples, 1.03%)</title><rect x="23.6970%" y="101" width="1.0345%" height="15" fill="rgb(225,35,8)"/><text x="23.9470%" y="111.50"></text></g><g><title>evaluate_obligation (794,434 samples, 0.18%)</title><rect x="25.2754%" y="85" width="0.1766%" height="15" fill="rgb(250,213,24)"/><text x="25.5254%" y="95.50"></text></g><g><title>param_env (504,719 samples, 0.11%)</title><rect x="25.4842%" y="85" width="0.1122%" height="15" fill="rgb(247,123,22)"/><text x="25.7342%" y="95.50"></text></g><g><title>check_item_well_formed (4,111,205 samples, 0.91%)</title><rect x="24.7315%" y="101" width="0.9141%" height="15" fill="rgb(231,138,38)"/><text x="24.9815%" y="111.50"></text></g><g><title>analysis (70,658,223 samples, 15.71%)</title><rect x="9.9974%" y="149" width="15.7106%" height="15" fill="rgb(231,145,46)"/><text x="10.2474%" y="159.50">analysis</text></g><g><title>type_check_crate (44,586,047 samples, 9.91%)</title><rect x="15.7945%" y="133" width="9.9136%" height="15" fill="rgb(251,118,11)"/><text x="16.0445%" y="143.50">type_check_cra..</text></g><g><title>wf_checking (9,369,347 samples, 2.08%)</title><rect x="23.6248%" y="117" width="2.0832%" height="15" fill="rgb(217,147,25)"/><text x="23.8748%" y="127.50">w..</text></g><g><title>fn_abi_of_instance (1,409,776 samples, 0.31%)</title><rect x="27.7415%" y="117" width="0.3135%" height="15" fill="rgb(247,81,37)"/><text x="27.9915%" y="127.50"></text></g><g><title>codegen_module (9,857,961 samples, 2.19%)</title><rect x="25.9322%" y="133" width="2.1919%" height="15" fill="rgb(209,12,38)"/><text x="26.1822%" y="143.50">c..</text></g><g><title>optimized_mir (2,191,666 samples, 0.49%)</title><rect x="28.2440%" y="85" width="0.4873%" height="15" fill="rgb(227,1,9)"/><text x="28.4940%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (944,193 samples, 0.21%)</title><rect x="28.5214%" y="69" width="0.2099%" height="15" fill="rgb(248,47,43)"/><text x="28.7714%" y="79.50"></text></g><g><title>resolve_instance (850,330 samples, 0.19%)</title><rect x="28.7313%" y="85" width="0.1891%" height="15" fill="rgb(221,10,30)"/><text x="28.9813%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (4,023,396 samples, 0.89%)</title><rect x="28.1334%" y="101" width="0.8946%" height="15" fill="rgb(210,229,1)"/><text x="28.3834%" y="111.50"></text></g><g><title>vtable_entries (484,036 samples, 0.11%)</title><rect x="28.9204%" y="85" width="0.1076%" height="15" fill="rgb(222,148,37)"/><text x="29.1704%" y="95.50"></text></g><g><title>monomorphization_collector (4,095,037 samples, 0.91%)</title><rect x="28.1330%" y="117" width="0.9105%" height="15" fill="rgb(234,67,33)"/><text x="28.3830%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (4,450,101 samples, 0.99%)</title><rect x="28.1250%" y="133" width="0.9895%" height="15" fill="rgb(247,98,35)"/><text x="28.3750%" y="143.50"></text></g><g><title>codegen_crate (15,326,594 samples, 3.41%)</title><rect x="25.7100%" y="149" width="3.4078%" height="15" fill="rgb(247,138,52)"/><text x="25.9600%" y="159.50">cod..</text></g><g><title>codegen_module_optimize (74,455,358 samples, 16.55%)</title><rect x="29.1178%" y="149" width="16.5549%" height="15" fill="rgb(213,79,30)"/><text x="29.3678%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (60,133,136 samples, 13.37%)</title><rect x="32.3023%" y="133" width="13.3704%" height="15" fill="rgb(246,177,23)"/><text x="32.5523%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (44,523,390 samples, 9.90%)</title><rect x="47.3178%" y="133" width="9.8996%" height="15" fill="rgb(230,62,27)"/><text x="47.5678%" y="143.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (115,170,390 samples, 25.61%)</title><rect x="57.2175%" y="133" width="25.6077%" height="15" fill="rgb(216,154,8)"/><text x="57.4675%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (113,847,852 samples, 25.31%)</title><rect x="57.5115%" y="117" width="25.3137%" height="15" fill="rgb(244,35,45)"/><text x="57.7615%" y="127.50">LLVM_module_codegen_emit_obj</text></g><g><title>LLVM_thin_lto_rename (974,262 samples, 0.22%)</title><rect x="82.9122%" y="133" width="0.2166%" height="15" fill="rgb(251,115,12)"/><text x="83.1622%" y="143.50"></text></g><g><title>codegen_module_perform_lto (168,649,705 samples, 37.50%)</title><rect x="45.6727%" y="149" width="37.4987%" height="15" fill="rgb(240,54,50)"/><text x="45.9227%" y="159.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (15,866,440 samples, 3.53%)</title><rect x="83.3210%" y="133" width="3.5278%" height="15" fill="rgb(233,84,52)"/><text x="83.5710%" y="143.50">mac..</text></g><g><title>expand_crate (15,844,520 samples, 3.52%)</title><rect x="83.3259%" y="117" width="3.5230%" height="15" fill="rgb(207,117,47)"/><text x="83.5759%" y="127.50">exp..</text></g><g><title>finalize_macro_resolutions (752,518 samples, 0.17%)</title><rect x="86.8901%" y="117" width="0.1673%" height="15" fill="rgb(249,43,39)"/><text x="87.1401%" y="127.50"></text></g><g><title>late_resolve_crate (4,299,009 samples, 0.96%)</title><rect x="87.0574%" y="117" width="0.9559%" height="15" fill="rgb(209,38,44)"/><text x="87.3074%" y="127.50"></text></g><g><title>configure_and_expand (22,024,621 samples, 4.90%)</title><rect x="83.1714%" y="149" width="4.8971%" height="15" fill="rgb(236,212,23)"/><text x="83.4214%" y="159.50">config..</text></g><g><title>resolve_crate (5,404,712 samples, 1.20%)</title><rect x="86.8668%" y="133" width="1.2017%" height="15" fill="rgb(242,79,21)"/><text x="87.1168%" y="143.50"></text></g><g><title>early_lint_checks (948,991 samples, 0.21%)</title><rect x="88.1481%" y="149" width="0.2110%" height="15" fill="rgb(211,96,35)"/><text x="88.3981%" y="159.50"></text></g><g><title>free_global_ctxt (2,607,850 samples, 0.58%)</title><rect x="88.3591%" y="149" width="0.5798%" height="15" fill="rgb(253,215,40)"/><text x="88.6091%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,729,170 samples, 0.38%)</title><rect x="89.8656%" y="117" width="0.3845%" height="15" fill="rgb(211,81,21)"/><text x="90.1156%" y="127.50"></text></g><g><title>optimized_mir (3,910,933 samples, 0.87%)</title><rect x="89.3876%" y="133" width="0.8696%" height="15" fill="rgb(208,190,38)"/><text x="89.6376%" y="143.50"></text></g><g><title>generate_crate_metadata (5,989,828 samples, 1.33%)</title><rect x="88.9389%" y="149" width="1.3318%" height="15" fill="rgb(235,213,38)"/><text x="89.1889%" y="159.50"></text></g><g><title>hir_lowering (7,436,545 samples, 1.65%)</title><rect x="90.2707%" y="149" width="1.6535%" height="15" fill="rgb(237,122,38)"/><text x="90.5207%" y="159.50"></text></g><g><title>finish_ongoing_codegen (32,564,380 samples, 7.24%)</title><rect x="91.9278%" y="133" width="7.2406%" height="15" fill="rgb(244,218,35)"/><text x="92.1778%" y="143.50">finish_ong..</text></g><g><title>link_crate (1,233,834 samples, 0.27%)</title><rect x="99.1684%" y="133" width="0.2743%" height="15" fill="rgb(240,68,47)"/><text x="99.4184%" y="143.50"></text></g><g><title>link_binary (1,205,824 samples, 0.27%)</title><rect x="99.1746%" y="117" width="0.2681%" height="15" fill="rgb(210,16,53)"/><text x="99.4246%" y="127.50"></text></g><g><title>link_rlib (798,799 samples, 0.18%)</title><rect x="99.2651%" y="101" width="0.1776%" height="15" fill="rgb(235,124,12)"/><text x="99.5151%" y="111.50"></text></g><g><title>link (33,825,474 samples, 7.52%)</title><rect x="91.9242%" y="149" width="7.5210%" height="15" fill="rgb(224,169,11)"/><text x="92.1742%" y="159.50">link</text></g><g><title>parse_crate (924,991 samples, 0.21%)</title><rect x="99.4452%" y="149" width="0.2057%" height="15" fill="rgb(250,166,2)"/><text x="99.6952%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (728,679 samples, 0.16%)</title><rect x="99.7180%" y="149" width="0.1620%" height="15" fill="rgb(242,216,29)"/><text x="99.9680%" y="159.50"></text></g><g><title>all (449,748,281 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (449,748,281 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>