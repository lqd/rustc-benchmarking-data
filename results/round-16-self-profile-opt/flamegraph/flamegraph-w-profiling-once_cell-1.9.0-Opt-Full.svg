<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (81,114,417 samples, 16.34%)</title><rect x="0.1718%" y="181" width="16.3382%" height="15" fill="rgb(227,0,7)"/><text x="0.4218%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (551,296 samples, 0.11%)</title><rect x="16.3990%" y="165" width="0.1110%" height="15" fill="rgb(217,0,24)"/><text x="16.6490%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (535,586 samples, 0.11%)</title><rect x="16.4022%" y="149" width="0.1079%" height="15" fill="rgb(221,193,54)"/><text x="16.6522%" y="159.50"></text></g><g><title>needs_drop_raw (1,499,042 samples, 0.30%)</title><rect x="20.8414%" y="69" width="0.3019%" height="15" fill="rgb(248,212,6)"/><text x="21.0914%" y="79.50"></text></g><g><title>is_copy_raw (1,213,281 samples, 0.24%)</title><rect x="20.8990%" y="53" width="0.2444%" height="15" fill="rgb(208,68,35)"/><text x="21.1490%" y="63.50"></text></g><g><title>evaluate_obligation (1,017,149 samples, 0.20%)</title><rect x="20.9385%" y="37" width="0.2049%" height="15" fill="rgb(232,128,0)"/><text x="21.1885%" y="47.50"></text></g><g><title>resolve_instance (501,855 samples, 0.10%)</title><rect x="21.1434%" y="69" width="0.1011%" height="15" fill="rgb(207,160,47)"/><text x="21.3934%" y="79.50"></text></g><g><title>thir_body (1,258,580 samples, 0.25%)</title><rect x="21.2552%" y="69" width="0.2535%" height="15" fill="rgb(228,23,34)"/><text x="21.5052%" y="79.50"></text></g><g><title>mir_const (9,386,695 samples, 1.89%)</title><rect x="19.6241%" y="117" width="1.8907%" height="15" fill="rgb(218,30,26)"/><text x="19.8741%" y="127.50">m..</text></g><g><title>unsafety_check_result (7,971,486 samples, 1.61%)</title><rect x="19.9091%" y="101" width="1.6056%" height="15" fill="rgb(220,122,19)"/><text x="20.1591%" y="111.50"></text></g><g><title>mir_built (6,963,535 samples, 1.40%)</title><rect x="20.1121%" y="85" width="1.4026%" height="15" fill="rgb(250,228,42)"/><text x="20.3621%" y="95.50"></text></g><g><title>mir_const (639,735 samples, 0.13%)</title><rect x="21.6680%" y="101" width="0.1289%" height="15" fill="rgb(240,193,28)"/><text x="21.9180%" y="111.50"></text></g><g><title>unsafety_check_result (510,704 samples, 0.10%)</title><rect x="21.6940%" y="85" width="0.1029%" height="15" fill="rgb(216,20,37)"/><text x="21.9440%" y="95.50"></text></g><g><title>mir_const_qualif (1,496,946 samples, 0.30%)</title><rect x="21.5148%" y="117" width="0.3015%" height="15" fill="rgb(206,188,39)"/><text x="21.7648%" y="127.50"></text></g><g><title>mir_promoted (11,953,601 samples, 2.41%)</title><rect x="19.4086%" y="133" width="2.4077%" height="15" fill="rgb(217,207,13)"/><text x="19.6586%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (635,631 samples, 0.13%)</title><rect x="21.8163%" y="133" width="0.1280%" height="15" fill="rgb(231,73,38)"/><text x="22.0663%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,950,195 samples, 0.59%)</title><rect x="22.0092%" y="133" width="0.5942%" height="15" fill="rgb(225,20,46)"/><text x="22.2592%" y="143.50"></text></g><g><title>MIR_borrow_checking (29,937,685 samples, 6.03%)</title><rect x="16.5745%" y="165" width="6.0301%" height="15" fill="rgb(210,31,41)"/><text x="16.8245%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (29,763,092 samples, 5.99%)</title><rect x="16.6097%" y="149" width="5.9949%" height="15" fill="rgb(221,200,47)"/><text x="16.8597%" y="159.50">mir_borr..</text></g><g><title>MIR_effect_checking (520,885 samples, 0.10%)</title><rect x="22.6046%" y="165" width="0.1049%" height="15" fill="rgb(226,26,5)"/><text x="22.8546%" y="175.50"></text></g><g><title>check_mod_attrs (681,747 samples, 0.14%)</title><rect x="22.7568%" y="149" width="0.1373%" height="15" fill="rgb(249,33,26)"/><text x="23.0068%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (507,076 samples, 0.10%)</title><rect x="22.9449%" y="149" width="0.1021%" height="15" fill="rgb(235,183,28)"/><text x="23.1949%" y="159.50"></text></g><g><title>misc_checking_1 (1,528,487 samples, 0.31%)</title><rect x="22.7507%" y="165" width="0.3079%" height="15" fill="rgb(221,5,38)"/><text x="23.0007%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (589,927 samples, 0.12%)</title><rect x="23.0590%" y="149" width="0.1188%" height="15" fill="rgb(247,18,42)"/><text x="23.3090%" y="159.50"></text></g><g><title>eval_to_const_value_raw (698,538 samples, 0.14%)</title><rect x="23.2973%" y="117" width="0.1407%" height="15" fill="rgb(241,131,45)"/><text x="23.5473%" y="127.50"></text></g><g><title>eval_to_const_value_raw (691,188 samples, 0.14%)</title><rect x="23.2987%" y="101" width="0.1392%" height="15" fill="rgb(249,31,29)"/><text x="23.5487%" y="111.50"></text></g><g><title>eval_to_allocation_raw (683,858 samples, 0.14%)</title><rect x="23.3002%" y="85" width="0.1377%" height="15" fill="rgb(225,111,53)"/><text x="23.5502%" y="95.50"></text></g><g><title>mir_for_ctfe (531,226 samples, 0.11%)</title><rect x="23.3310%" y="69" width="0.1070%" height="15" fill="rgb(238,160,17)"/><text x="23.5810%" y="79.50"></text></g><g><title>misc_checking_2 (2,223,175 samples, 0.45%)</title><rect x="23.0586%" y="165" width="0.4478%" height="15" fill="rgb(214,148,48)"/><text x="23.3086%" y="175.50"></text></g><g><title>match_checking (1,631,068 samples, 0.33%)</title><rect x="23.1778%" y="149" width="0.3285%" height="15" fill="rgb(232,36,49)"/><text x="23.4278%" y="159.50"></text></g><g><title>check_match (1,586,176 samples, 0.32%)</title><rect x="23.1869%" y="133" width="0.3195%" height="15" fill="rgb(209,103,24)"/><text x="23.4369%" y="143.50"></text></g><g><title>death_checking (529,045 samples, 0.11%)</title><rect x="23.5669%" y="149" width="0.1066%" height="15" fill="rgb(229,88,8)"/><text x="23.8169%" y="159.50"></text></g><g><title>crate_lints (2,381,156 samples, 0.48%)</title><rect x="23.6738%" y="133" width="0.4796%" height="15" fill="rgb(213,181,19)"/><text x="23.9238%" y="143.50"></text></g><g><title>type_of (1,090,170 samples, 0.22%)</title><rect x="23.9338%" y="117" width="0.2196%" height="15" fill="rgb(254,191,54)"/><text x="24.1838%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (860,048 samples, 0.17%)</title><rect x="23.9802%" y="101" width="0.1732%" height="15" fill="rgb(241,83,37)"/><text x="24.2302%" y="111.50"></text></g><g><title>lint_checking (2,840,772 samples, 0.57%)</title><rect x="23.6735%" y="149" width="0.5722%" height="15" fill="rgb(233,36,39)"/><text x="23.9235%" y="159.50"></text></g><g><title>privacy_checking_modules (974,020 samples, 0.20%)</title><rect x="24.3114%" y="149" width="0.1962%" height="15" fill="rgb(226,3,54)"/><text x="24.5614%" y="159.50"></text></g><g><title>check_mod_privacy (969,410 samples, 0.20%)</title><rect x="24.3123%" y="133" width="0.1953%" height="15" fill="rgb(245,192,40)"/><text x="24.5623%" y="143.50"></text></g><g><title>misc_checking_3 (4,989,615 samples, 1.01%)</title><rect x="23.5064%" y="165" width="1.0050%" height="15" fill="rgb(238,167,29)"/><text x="23.7564%" y="175.50"></text></g><g><title>impl_parent (2,141,726 samples, 0.43%)</title><rect x="25.2630%" y="101" width="0.4314%" height="15" fill="rgb(232,182,51)"/><text x="25.5130%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,306,422 samples, 0.26%)</title><rect x="25.4312%" y="85" width="0.2631%" height="15" fill="rgb(231,60,39)"/><text x="25.6812%" y="95.50"></text></g><g><title>impl_trait_ref (5,272,496 samples, 1.06%)</title><rect x="25.6948%" y="101" width="1.0620%" height="15" fill="rgb(208,69,12)"/><text x="25.9448%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,225,838 samples, 0.85%)</title><rect x="25.9056%" y="85" width="0.8512%" height="15" fill="rgb(235,93,37)"/><text x="26.1556%" y="95.50"></text></g><g><title>trait_impls_of (707,837 samples, 0.14%)</title><rect x="26.7647%" y="101" width="0.1426%" height="15" fill="rgb(213,116,39)"/><text x="27.0147%" y="111.50"></text></g><g><title>coherent_trait (11,785,902 samples, 2.37%)</title><rect x="24.5336%" y="133" width="2.3739%" height="15" fill="rgb(222,207,29)"/><text x="24.7836%" y="143.50">co..</text></g><g><title>specialization_graph_of (11,764,562 samples, 2.37%)</title><rect x="24.5379%" y="117" width="2.3696%" height="15" fill="rgb(206,96,30)"/><text x="24.7879%" y="127.50">sp..</text></g><g><title>coherence_checking (11,878,843 samples, 2.39%)</title><rect x="24.5293%" y="149" width="2.3927%" height="15" fill="rgb(218,138,4)"/><text x="24.7793%" y="159.50">co..</text></g><g><title>associated_items (576,818 samples, 0.12%)</title><rect x="30.6832%" y="101" width="0.1162%" height="15" fill="rgb(250,191,14)"/><text x="30.9332%" y="111.50"></text></g><g><title>dropck_outlives (1,072,674 samples, 0.22%)</title><rect x="30.8138%" y="101" width="0.2161%" height="15" fill="rgb(239,60,40)"/><text x="31.0638%" y="111.50"></text></g><g><title>adt_dtorck_constraint (761,461 samples, 0.15%)</title><rect x="30.8765%" y="85" width="0.1534%" height="15" fill="rgb(206,27,48)"/><text x="31.1265%" y="95.50"></text></g><g><title>evaluate_obligation (1,220,657 samples, 0.25%)</title><rect x="31.0300%" y="101" width="0.2459%" height="15" fill="rgb(225,35,8)"/><text x="31.2800%" y="111.50"></text></g><g><title>method_autoderef_steps (499,478 samples, 0.10%)</title><rect x="31.4343%" y="101" width="0.1006%" height="15" fill="rgb(250,213,24)"/><text x="31.6843%" y="111.50"></text></g><g><title>is_copy_raw (577,146 samples, 0.12%)</title><rect x="33.0840%" y="85" width="0.1162%" height="15" fill="rgb(247,123,22)"/><text x="33.3340%" y="95.50"></text></g><g><title>typeck (7,975,741 samples, 1.61%)</title><rect x="31.6588%" y="101" width="1.6065%" height="15" fill="rgb(231,138,38)"/><text x="31.9088%" y="111.50"></text></g><g><title>item_bodies_checking (31,520,013 samples, 6.35%)</title><rect x="26.9317%" y="149" width="6.3488%" height="15" fill="rgb(231,145,46)"/><text x="27.1817%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (31,516,733 samples, 6.35%)</title><rect x="26.9324%" y="133" width="6.3482%" height="15" fill="rgb(251,118,11)"/><text x="27.1824%" y="143.50">typeck_i..</text></g><g><title>typeck (31,407,212 samples, 6.33%)</title><rect x="26.9544%" y="117" width="6.3261%" height="15" fill="rgb(217,147,25)"/><text x="27.2044%" y="127.50">typeck</text></g><g><title>item_types_checking (1,040,841 samples, 0.21%)</title><rect x="33.2805%" y="149" width="0.2096%" height="15" fill="rgb(247,81,37)"/><text x="33.5305%" y="159.50"></text></g><g><title>check_mod_item_types (1,034,351 samples, 0.21%)</title><rect x="33.2818%" y="133" width="0.2083%" height="15" fill="rgb(209,12,38)"/><text x="33.5318%" y="143.50"></text></g><g><title>fn_sig (704,010 samples, 0.14%)</title><rect x="33.5617%" y="117" width="0.1418%" height="15" fill="rgb(227,1,9)"/><text x="33.8117%" y="127.50"></text></g><g><title>explicit_predicates_of (723,225 samples, 0.15%)</title><rect x="33.8189%" y="85" width="0.1457%" height="15" fill="rgb(248,47,43)"/><text x="34.0689%" y="95.50"></text></g><g><title>predicates_of (1,168,901 samples, 0.24%)</title><rect x="33.7839%" y="117" width="0.2354%" height="15" fill="rgb(221,10,30)"/><text x="34.0339%" y="127.50"></text></g><g><title>predicates_defined_on (1,103,360 samples, 0.22%)</title><rect x="33.7971%" y="101" width="0.2222%" height="15" fill="rgb(210,229,1)"/><text x="34.0471%" y="111.50"></text></g><g><title>type_collecting (2,761,811 samples, 0.56%)</title><rect x="33.4910%" y="149" width="0.5563%" height="15" fill="rgb(222,148,37)"/><text x="33.7410%" y="159.50"></text></g><g><title>collect_mod_item_types (2,748,451 samples, 0.55%)</title><rect x="33.4936%" y="133" width="0.5536%" height="15" fill="rgb(234,67,33)"/><text x="33.7436%" y="143.50"></text></g><g><title>evaluate_obligation (829,593 samples, 0.17%)</title><rect x="34.6337%" y="117" width="0.1671%" height="15" fill="rgb(247,98,35)"/><text x="34.8837%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,788,207 samples, 0.96%)</title><rect x="34.1040%" y="133" width="0.9645%" height="15" fill="rgb(247,138,52)"/><text x="34.3540%" y="143.50"></text></g><g><title>analysis (95,754,311 samples, 19.29%)</title><rect x="16.5101%" y="181" width="19.2870%" height="15" fill="rgb(213,79,30)"/><text x="16.7601%" y="191.50">analysis</text></g><g><title>type_check_crate (56,030,167 samples, 11.29%)</title><rect x="24.5114%" y="165" width="11.2857%" height="15" fill="rgb(246,177,23)"/><text x="24.7614%" y="175.50">type_check_crate</text></g><g><title>wf_checking (8,679,657 samples, 1.75%)</title><rect x="34.0488%" y="149" width="1.7483%" height="15" fill="rgb(230,62,27)"/><text x="34.2988%" y="159.50"></text></g><g><title>check_item_well_formed (3,617,256 samples, 0.73%)</title><rect x="35.0685%" y="133" width="0.7286%" height="15" fill="rgb(216,154,8)"/><text x="35.3185%" y="143.50"></text></g><g><title>is_freeze_raw (515,006 samples, 0.10%)</title><rect x="38.5431%" y="133" width="0.1037%" height="15" fill="rgb(244,35,45)"/><text x="38.7931%" y="143.50"></text></g><g><title>layout_of (871,230 samples, 0.18%)</title><rect x="38.7378%" y="133" width="0.1755%" height="15" fill="rgb(251,115,12)"/><text x="38.9878%" y="143.50"></text></g><g><title>param_env (1,276,169 samples, 0.26%)</title><rect x="38.9132%" y="133" width="0.2570%" height="15" fill="rgb(240,54,50)"/><text x="39.1632%" y="143.50"></text></g><g><title>fn_abi_of_instance (4,693,454 samples, 0.95%)</title><rect x="38.2601%" y="149" width="0.9454%" height="15" fill="rgb(233,84,52)"/><text x="38.5101%" y="159.50"></text></g><g><title>codegen_module (16,059,240 samples, 3.23%)</title><rect x="36.1491%" y="165" width="3.2347%" height="15" fill="rgb(207,117,47)"/><text x="36.3991%" y="175.50">cod..</text></g><g><title>codegen_fn_attrs (615,799 samples, 0.12%)</title><rect x="39.5188%" y="117" width="0.1240%" height="15" fill="rgb(249,43,39)"/><text x="39.7688%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (765,010 samples, 0.15%)</title><rect x="39.9330%" y="101" width="0.1541%" height="15" fill="rgb(209,38,44)"/><text x="40.1830%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (627,487 samples, 0.13%)</title><rect x="40.0871%" y="101" width="0.1264%" height="15" fill="rgb(236,212,23)"/><text x="40.3371%" y="111.50"></text></g><g><title>optimized_mir (2,227,838 samples, 0.45%)</title><rect x="39.7785%" y="117" width="0.4487%" height="15" fill="rgb(242,79,21)"/><text x="40.0285%" y="127.50"></text></g><g><title>specialization_graph_of (512,264 samples, 0.10%)</title><rect x="40.4327%" y="101" width="0.1032%" height="15" fill="rgb(211,96,35)"/><text x="40.6827%" y="111.50"></text></g><g><title>resolve_instance (1,698,039 samples, 0.34%)</title><rect x="40.2272%" y="117" width="0.3420%" height="15" fill="rgb(253,215,40)"/><text x="40.4772%" y="127.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (560,455 samples, 0.11%)</title><rect x="40.5692%" y="117" width="0.1129%" height="15" fill="rgb(211,81,21)"/><text x="40.8192%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (6,600,903 samples, 1.33%)</title><rect x="39.3898%" y="133" width="1.3296%" height="15" fill="rgb(208,190,38)"/><text x="39.6398%" y="143.50"></text></g><g><title>monomorphization_collector (6,641,344 samples, 1.34%)</title><rect x="39.3894%" y="149" width="1.3377%" height="15" fill="rgb(235,213,38)"/><text x="39.6394%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (526,146 samples, 0.11%)</title><rect x="40.7277%" y="133" width="0.1060%" height="15" fill="rgb(237,122,38)"/><text x="40.9777%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (7,403,192 samples, 1.49%)</title><rect x="39.3847%" y="165" width="1.4912%" height="15" fill="rgb(244,218,35)"/><text x="39.6347%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (738,548 samples, 0.15%)</title><rect x="40.7271%" y="149" width="0.1488%" height="15" fill="rgb(240,68,47)"/><text x="40.9771%" y="159.50"></text></g><g><title>codegen_crate (25,262,212 samples, 5.09%)</title><rect x="35.7996%" y="181" width="5.0884%" height="15" fill="rgb(210,16,53)"/><text x="36.0496%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (82,724,076 samples, 16.66%)</title><rect x="40.8880%" y="181" width="16.6624%" height="15" fill="rgb(235,124,12)"/><text x="41.1380%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (77,229,642 samples, 15.56%)</title><rect x="41.9947%" y="165" width="15.5557%" height="15" fill="rgb(224,169,11)"/><text x="42.2447%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (28,931,894 samples, 5.83%)</title><rect x="58.3822%" y="165" width="5.8275%" height="15" fill="rgb(250,166,2)"/><text x="58.6322%" y="175.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (60,010,443 samples, 12.09%)</title><rect x="64.2097%" y="165" width="12.0874%" height="15" fill="rgb(242,216,29)"/><text x="64.4597%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (58,997,093 samples, 11.88%)</title><rect x="64.4138%" y="149" width="11.8833%" height="15" fill="rgb(230,116,27)"/><text x="64.6638%" y="159.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (1,559,137 samples, 0.31%)</title><rect x="76.2971%" y="165" width="0.3140%" height="15" fill="rgb(228,99,48)"/><text x="76.5471%" y="175.50"></text></g><g><title>codegen_module_perform_lto (94,854,303 samples, 19.11%)</title><rect x="57.5504%" y="181" width="19.1057%" height="15" fill="rgb(253,11,6)"/><text x="57.8004%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,611,789 samples, 0.53%)</title><rect x="79.8555%" y="133" width="0.5261%" height="15" fill="rgb(247,143,39)"/><text x="80.1055%" y="143.50"></text></g><g><title>metadata_register_crate (939,521 samples, 0.19%)</title><rect x="80.1923%" y="117" width="0.1892%" height="15" fill="rgb(236,97,10)"/><text x="80.4423%" y="127.50"></text></g><g><title>macro_expand_crate (18,207,764 samples, 3.67%)</title><rect x="76.7676%" y="165" width="3.6674%" height="15" fill="rgb(233,208,19)"/><text x="77.0176%" y="175.50">macr..</text></g><g><title>expand_crate (18,193,592 samples, 3.66%)</title><rect x="76.7705%" y="149" width="3.6646%" height="15" fill="rgb(216,164,2)"/><text x="77.0205%" y="159.50">expa..</text></g><g><title>late_resolve_crate (1,856,251 samples, 0.37%)</title><rect x="80.5146%" y="149" width="0.3739%" height="15" fill="rgb(220,129,5)"/><text x="80.7646%" y="159.50"></text></g><g><title>configure_and_expand (21,153,176 samples, 4.26%)</title><rect x="76.6562%" y="181" width="4.2607%" height="15" fill="rgb(242,17,10)"/><text x="76.9062%" y="191.50">confi..</text></g><g><title>resolve_crate (2,127,314 samples, 0.43%)</title><rect x="80.4884%" y="165" width="0.4285%" height="15" fill="rgb(242,107,0)"/><text x="80.7384%" y="175.50"></text></g><g><title>free_global_ctxt (5,251,379 samples, 1.06%)</title><rect x="81.0527%" y="181" width="1.0577%" height="15" fill="rgb(251,28,31)"/><text x="81.3027%" y="191.50"></text></g><g><title>layout_of (900,072 samples, 0.18%)</title><rect x="83.4217%" y="149" width="0.1813%" height="15" fill="rgb(233,223,10)"/><text x="83.6717%" y="159.50"></text></g><g><title>needs_drop_raw (756,427 samples, 0.15%)</title><rect x="84.4417%" y="133" width="0.1524%" height="15" fill="rgb(215,21,27)"/><text x="84.6917%" y="143.50"></text></g><g><title>is_copy_raw (668,796 samples, 0.13%)</title><rect x="84.4593%" y="117" width="0.1347%" height="15" fill="rgb(232,23,21)"/><text x="84.7093%" y="127.50"></text></g><g><title>evaluate_obligation (556,636 samples, 0.11%)</title><rect x="84.4819%" y="101" width="0.1121%" height="15" fill="rgb(244,5,23)"/><text x="84.7319%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,959,644 samples, 1.00%)</title><rect x="83.6030%" y="149" width="0.9990%" height="15" fill="rgb(226,81,46)"/><text x="83.8530%" y="159.50"></text></g><g><title>optimized_mir (9,841,368 samples, 1.98%)</title><rect x="82.6269%" y="165" width="1.9823%" height="15" fill="rgb(247,70,30)"/><text x="82.8769%" y="175.50">o..</text></g><g><title>generate_crate_metadata (12,535,890 samples, 2.53%)</title><rect x="82.1104%" y="181" width="2.5250%" height="15" fill="rgb(212,68,19)"/><text x="82.3604%" y="191.50">ge..</text></g><g><title>hir_lowering (3,390,188 samples, 0.68%)</title><rect x="84.6354%" y="181" width="0.6829%" height="15" fill="rgb(240,187,13)"/><text x="84.8854%" y="191.50"></text></g><g><title>finish_ongoing_codegen (62,203,745 samples, 12.53%)</title><rect x="85.3219%" y="165" width="12.5292%" height="15" fill="rgb(223,113,26)"/><text x="85.5719%" y="175.50">finish_ongoing_code..</text></g><g><title>link_crate (1,421,926 samples, 0.29%)</title><rect x="97.8511%" y="165" width="0.2864%" height="15" fill="rgb(206,192,2)"/><text x="98.1011%" y="175.50"></text></g><g><title>link_binary (1,335,715 samples, 0.27%)</title><rect x="97.8685%" y="149" width="0.2690%" height="15" fill="rgb(241,108,4)"/><text x="98.1185%" y="159.50"></text></g><g><title>link_rlib (836,149 samples, 0.17%)</title><rect x="97.9691%" y="133" width="0.1684%" height="15" fill="rgb(247,173,49)"/><text x="98.2191%" y="143.50"></text></g><g><title>link (63,653,421 samples, 12.82%)</title><rect x="85.3183%" y="181" width="12.8212%" height="15" fill="rgb(224,114,35)"/><text x="85.5683%" y="191.50">link</text></g><g><title>parse_crate (5,892,906 samples, 1.19%)</title><rect x="98.1395%" y="181" width="1.1870%" height="15" fill="rgb(245,159,27)"/><text x="98.3895%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,583,729 samples, 0.52%)</title><rect x="99.3745%" y="181" width="0.5204%" height="15" fill="rgb(245,172,44)"/><text x="99.6245%" y="191.50"></text></g><g><title>all (496,470,134 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (496,470,134 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>