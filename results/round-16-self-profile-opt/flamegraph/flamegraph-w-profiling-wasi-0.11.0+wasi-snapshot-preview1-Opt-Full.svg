<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (258,867,907 samples, 24.34%)</title><rect x="0.0816%" y="149" width="24.3398%" height="15" fill="rgb(227,0,7)"/><text x="0.3316%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (2,235,127 samples, 0.21%)</title><rect x="24.2112%" y="133" width="0.2102%" height="15" fill="rgb(217,0,24)"/><text x="24.4612%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (2,179,876 samples, 0.20%)</title><rect x="24.2164%" y="117" width="0.2050%" height="15" fill="rgb(221,193,54)"/><text x="24.4664%" y="127.50"></text></g><g><title>thir_body (3,248,379 samples, 0.31%)</title><rect x="28.4646%" y="37" width="0.3054%" height="15" fill="rgb(248,212,6)"/><text x="28.7146%" y="47.50"></text></g><g><title>mir_const (13,256,867 samples, 1.25%)</title><rect x="27.5265%" y="85" width="1.2465%" height="15" fill="rgb(208,68,35)"/><text x="27.7765%" y="95.50"></text></g><g><title>unsafety_check_result (11,576,042 samples, 1.09%)</title><rect x="27.6845%" y="69" width="1.0884%" height="15" fill="rgb(232,128,0)"/><text x="27.9345%" y="79.50"></text></g><g><title>mir_built (10,562,594 samples, 0.99%)</title><rect x="27.7798%" y="53" width="0.9931%" height="15" fill="rgb(207,160,47)"/><text x="28.0298%" y="63.50"></text></g><g><title>mir_const (3,833,861 samples, 0.36%)</title><rect x="28.9138%" y="69" width="0.3605%" height="15" fill="rgb(228,23,34)"/><text x="29.1638%" y="79.50"></text></g><g><title>unsafety_check_result (2,840,211 samples, 0.27%)</title><rect x="29.0072%" y="53" width="0.2670%" height="15" fill="rgb(218,30,26)"/><text x="29.2572%" y="63.50"></text></g><g><title>mir_built (2,458,628 samples, 0.23%)</title><rect x="29.0431%" y="37" width="0.2312%" height="15" fill="rgb(220,122,19)"/><text x="29.2931%" y="47.50"></text></g><g><title>mir_promoted (20,915,431 samples, 1.97%)</title><rect x="27.3098%" y="101" width="1.9666%" height="15" fill="rgb(250,228,42)"/><text x="27.5598%" y="111.50">m..</text></g><g><title>mir_const_qualif (5,354,315 samples, 0.50%)</title><rect x="28.7729%" y="85" width="0.5034%" height="15" fill="rgb(240,193,28)"/><text x="29.0229%" y="95.50"></text></g><g><title>type_op_prove_predicate (1,408,769 samples, 0.13%)</title><rect x="29.3018%" y="101" width="0.1325%" height="15" fill="rgb(216,20,37)"/><text x="29.5518%" y="111.50"></text></g><g><title>MIR_borrow_checking (52,650,346 samples, 4.95%)</title><rect x="24.4844%" y="133" width="4.9504%" height="15" fill="rgb(206,188,39)"/><text x="24.7344%" y="143.50">MIR_bo..</text></g><g><title>mir_borrowck (52,094,941 samples, 4.90%)</title><rect x="24.5366%" y="117" width="4.8982%" height="15" fill="rgb(217,207,13)"/><text x="24.7866%" y="127.50">mir_bo..</text></g><g><title>MIR_effect_checking (2,359,669 samples, 0.22%)</title><rect x="29.4348%" y="133" width="0.2219%" height="15" fill="rgb(231,73,38)"/><text x="29.6848%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,006,165 samples, 0.19%)</title><rect x="29.4680%" y="117" width="0.1886%" height="15" fill="rgb(225,20,46)"/><text x="29.7180%" y="127.50"></text></g><g><title>check_mod_attrs (1,124,305 samples, 0.11%)</title><rect x="29.7121%" y="117" width="0.1057%" height="15" fill="rgb(210,31,41)"/><text x="29.9621%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (1,487,588 samples, 0.14%)</title><rect x="29.8589%" y="117" width="0.1399%" height="15" fill="rgb(221,200,47)"/><text x="30.1089%" y="127.50"></text></g><g><title>misc_checking_1 (3,232,390 samples, 0.30%)</title><rect x="29.7097%" y="133" width="0.3039%" height="15" fill="rgb(226,26,5)"/><text x="29.9597%" y="143.50"></text></g><g><title>misc_checking_2 (2,691,562 samples, 0.25%)</title><rect x="30.0137%" y="133" width="0.2531%" height="15" fill="rgb(249,33,26)"/><text x="30.2637%" y="143.50"></text></g><g><title>match_checking (1,846,582 samples, 0.17%)</title><rect x="30.0931%" y="117" width="0.1736%" height="15" fill="rgb(235,183,28)"/><text x="30.3431%" y="127.50"></text></g><g><title>check_match (1,730,542 samples, 0.16%)</title><rect x="30.1040%" y="101" width="0.1627%" height="15" fill="rgb(221,5,38)"/><text x="30.3540%" y="111.50"></text></g><g><title>death_checking (1,293,786 samples, 0.12%)</title><rect x="30.3206%" y="117" width="0.1216%" height="15" fill="rgb(247,18,42)"/><text x="30.5706%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,495,983 samples, 0.23%)</title><rect x="30.6132%" y="85" width="0.2347%" height="15" fill="rgb(241,131,45)"/><text x="30.8632%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,369,602 samples, 0.22%)</title><rect x="30.6251%" y="69" width="0.2228%" height="15" fill="rgb(249,31,29)"/><text x="30.8751%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,200,512 samples, 0.21%)</title><rect x="30.6410%" y="53" width="0.2069%" height="15" fill="rgb(225,111,53)"/><text x="30.8910%" y="63.50"></text></g><g><title>crate_lints (5,826,260 samples, 0.55%)</title><rect x="30.4424%" y="101" width="0.5478%" height="15" fill="rgb(238,160,17)"/><text x="30.6924%" y="111.50"></text></g><g><title>type_of (1,275,556 samples, 0.12%)</title><rect x="30.8703%" y="85" width="0.1199%" height="15" fill="rgb(214,148,48)"/><text x="31.1203%" y="95.50"></text></g><g><title>lint_checking (6,898,703 samples, 0.65%)</title><rect x="30.4422%" y="117" width="0.6486%" height="15" fill="rgb(232,36,49)"/><text x="30.6922%" y="127.50"></text></g><g><title>module_lints (1,070,413 samples, 0.10%)</title><rect x="30.9902%" y="101" width="0.1006%" height="15" fill="rgb(209,103,24)"/><text x="31.2402%" y="111.50"></text></g><g><title>lint_mod (1,065,563 samples, 0.10%)</title><rect x="30.9907%" y="85" width="0.1002%" height="15" fill="rgb(229,88,8)"/><text x="31.2407%" y="95.50"></text></g><g><title>privacy_checking_modules (1,679,060 samples, 0.16%)</title><rect x="31.1844%" y="117" width="0.1579%" height="15" fill="rgb(213,181,19)"/><text x="31.4344%" y="127.50"></text></g><g><title>check_mod_privacy (1,675,720 samples, 0.16%)</title><rect x="31.1847%" y="101" width="0.1576%" height="15" fill="rgb(254,191,54)"/><text x="31.4347%" y="111.50"></text></g><g><title>misc_checking_3 (11,470,298 samples, 1.08%)</title><rect x="30.2667%" y="133" width="1.0785%" height="15" fill="rgb(241,83,37)"/><text x="30.5167%" y="143.50"></text></g><g><title>impl_parent (2,576,459 samples, 0.24%)</title><rect x="31.8673%" y="69" width="0.2422%" height="15" fill="rgb(233,36,39)"/><text x="32.1173%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,515,880 samples, 0.14%)</title><rect x="31.9670%" y="53" width="0.1425%" height="15" fill="rgb(226,3,54)"/><text x="32.2170%" y="63.50"></text></g><g><title>impl_trait_ref (5,588,049 samples, 0.53%)</title><rect x="32.1096%" y="69" width="0.5254%" height="15" fill="rgb(245,192,40)"/><text x="32.3596%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,277,557 samples, 0.40%)</title><rect x="32.2328%" y="53" width="0.4022%" height="15" fill="rgb(238,167,29)"/><text x="32.4828%" y="63.50"></text></g><g><title>coherent_trait (14,280,072 samples, 1.34%)</title><rect x="31.3663%" y="101" width="1.3427%" height="15" fill="rgb(232,182,51)"/><text x="31.6163%" y="111.50"></text></g><g><title>specialization_graph_of (13,537,662 samples, 1.27%)</title><rect x="31.4361%" y="85" width="1.2729%" height="15" fill="rgb(231,60,39)"/><text x="31.6861%" y="95.50"></text></g><g><title>coherence_checking (14,424,844 samples, 1.36%)</title><rect x="31.3636%" y="117" width="1.3563%" height="15" fill="rgb(208,69,12)"/><text x="31.6136%" y="127.50"></text></g><g><title>item_bodies_checking (37,554,153 samples, 3.53%)</title><rect x="32.7259%" y="117" width="3.5310%" height="15" fill="rgb(235,93,37)"/><text x="32.9759%" y="127.50">ite..</text></g><g><title>typeck_item_bodies (37,550,353 samples, 3.53%)</title><rect x="32.7263%" y="101" width="3.5306%" height="15" fill="rgb(213,116,39)"/><text x="32.9763%" y="111.50">typ..</text></g><g><title>typeck (37,309,208 samples, 3.51%)</title><rect x="32.7490%" y="85" width="3.5080%" height="15" fill="rgb(222,207,29)"/><text x="32.9990%" y="95.50">typ..</text></g><g><title>specializes (2,185,437 samples, 0.21%)</title><rect x="37.5622%" y="53" width="0.2055%" height="15" fill="rgb(206,96,30)"/><text x="37.8122%" y="63.50"></text></g><g><title>param_env (1,407,867 samples, 0.13%)</title><rect x="37.6353%" y="37" width="0.1324%" height="15" fill="rgb(218,138,4)"/><text x="37.8853%" y="47.50"></text></g><g><title>evaluate_obligation (6,680,272 samples, 0.63%)</title><rect x="37.1475%" y="69" width="0.6281%" height="15" fill="rgb(250,191,14)"/><text x="37.3975%" y="79.50"></text></g><g><title>item_types_checking (16,534,000 samples, 1.55%)</title><rect x="36.2569%" y="117" width="1.5546%" height="15" fill="rgb(239,60,40)"/><text x="36.5069%" y="127.50"></text></g><g><title>check_mod_item_types (16,527,710 samples, 1.55%)</title><rect x="36.2575%" y="101" width="1.5540%" height="15" fill="rgb(206,27,48)"/><text x="36.5075%" y="111.50"></text></g><g><title>typeck (14,152,193 samples, 1.33%)</title><rect x="36.4809%" y="85" width="1.3306%" height="15" fill="rgb(225,35,8)"/><text x="36.7309%" y="95.50"></text></g><g><title>generics_of (1,438,297 samples, 0.14%)</title><rect x="37.9497%" y="85" width="0.1352%" height="15" fill="rgb(250,213,24)"/><text x="38.1997%" y="95.50"></text></g><g><title>type_collecting (4,042,388 samples, 0.38%)</title><rect x="37.8116%" y="117" width="0.3801%" height="15" fill="rgb(247,123,22)"/><text x="38.0616%" y="127.50"></text></g><g><title>collect_mod_item_types (4,039,258 samples, 0.38%)</title><rect x="37.8119%" y="101" width="0.3798%" height="15" fill="rgb(231,138,38)"/><text x="38.0619%" y="111.50"></text></g><g><title>check_impl_item_well_formed (5,297,053 samples, 0.50%)</title><rect x="38.2437%" y="101" width="0.4980%" height="15" fill="rgb(231,145,46)"/><text x="38.4937%" y="111.50"></text></g><g><title>param_env (1,195,550 samples, 0.11%)</title><rect x="39.2404%" y="85" width="0.1124%" height="15" fill="rgb(251,118,11)"/><text x="39.4904%" y="95.50"></text></g><g><title>analysis (159,780,789 samples, 15.02%)</title><rect x="24.4214%" y="149" width="15.0232%" height="15" fill="rgb(217,147,25)"/><text x="24.6714%" y="159.50">analysis</text></g><g><title>type_check_crate (86,141,550 samples, 8.10%)</title><rect x="31.3452%" y="133" width="8.0994%" height="15" fill="rgb(247,81,37)"/><text x="31.5952%" y="143.50">type_check_..</text></g><g><title>wf_checking (13,299,731 samples, 1.25%)</title><rect x="38.1941%" y="117" width="1.2505%" height="15" fill="rgb(209,12,38)"/><text x="38.4441%" y="127.50"></text></g><g><title>check_item_well_formed (7,474,605 samples, 0.70%)</title><rect x="38.7418%" y="101" width="0.7028%" height="15" fill="rgb(227,1,9)"/><text x="38.9918%" y="111.50"></text></g><g><title>fn_abi_of_instance (3,201,259 samples, 0.30%)</title><rect x="40.5216%" y="117" width="0.3010%" height="15" fill="rgb(248,47,43)"/><text x="40.7716%" y="127.50"></text></g><g><title>codegen_module (14,496,386 samples, 1.36%)</title><rect x="39.5124%" y="133" width="1.3630%" height="15" fill="rgb(221,10,30)"/><text x="39.7624%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,436,510 samples, 0.42%)</title><rect x="41.5781%" y="69" width="0.4171%" height="15" fill="rgb(210,229,1)"/><text x="41.8281%" y="79.50"></text></g><g><title>optimized_mir (10,408,807 samples, 0.98%)</title><rect x="41.0306%" y="85" width="0.9787%" height="15" fill="rgb(222,148,37)"/><text x="41.2806%" y="95.50"></text></g><g><title>resolve_instance (1,173,872 samples, 0.11%)</title><rect x="42.0093%" y="85" width="0.1104%" height="15" fill="rgb(234,67,33)"/><text x="42.2593%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (13,911,247 samples, 1.31%)</title><rect x="40.8789%" y="101" width="1.3080%" height="15" fill="rgb(247,98,35)"/><text x="41.1289%" y="111.50"></text></g><g><title>monomorphization_collector (14,144,790 samples, 1.33%)</title><rect x="40.8787%" y="117" width="1.3299%" height="15" fill="rgb(247,138,52)"/><text x="41.1287%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (14,919,739 samples, 1.40%)</title><rect x="40.8755%" y="133" width="1.4028%" height="15" fill="rgb(213,79,30)"/><text x="41.1255%" y="143.50"></text></g><g><title>codegen_crate (30,195,954 samples, 2.84%)</title><rect x="39.4456%" y="149" width="2.8391%" height="15" fill="rgb(246,177,23)"/><text x="39.6956%" y="159.50">co..</text></g><g><title>codegen_module_optimize (119,094,769 samples, 11.20%)</title><rect x="42.2848%" y="149" width="11.1978%" height="15" fill="rgb(230,62,27)"/><text x="42.5348%" y="159.50">codegen_module_o..</text></g><g><title>LLVM_module_optimize (109,000,487 samples, 10.25%)</title><rect x="43.2339%" y="133" width="10.2487%" height="15" fill="rgb(216,154,8)"/><text x="43.4839%" y="143.50">LLVM_module_opt..</text></g><g><title>LLVM_lto_optimize (52,360,352 samples, 4.92%)</title><rect x="53.8351%" y="133" width="4.9231%" height="15" fill="rgb(244,35,45)"/><text x="54.0851%" y="143.50">LLVM_l..</text></g><g><title>LLVM_module_codegen (118,757,515 samples, 11.17%)</title><rect x="58.7582%" y="133" width="11.1660%" height="15" fill="rgb(251,115,12)"/><text x="59.0082%" y="143.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (118,055,735 samples, 11.10%)</title><rect x="58.8242%" y="117" width="11.1001%" height="15" fill="rgb(240,54,50)"/><text x="59.0742%" y="127.50">LLVM_module_code..</text></g><g><title>codegen_module_perform_lto (175,968,785 samples, 16.55%)</title><rect x="53.4825%" y="149" width="16.5453%" height="15" fill="rgb(233,84,52)"/><text x="53.7325%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,703,751 samples, 0.16%)</title><rect x="73.0042%" y="101" width="0.1602%" height="15" fill="rgb(207,117,47)"/><text x="73.2542%" y="111.50"></text></g><g><title>macro_expand_crate (33,401,412 samples, 3.14%)</title><rect x="70.0970%" y="133" width="3.1405%" height="15" fill="rgb(249,43,39)"/><text x="70.3470%" y="143.50">mac..</text></g><g><title>expand_crate (33,386,632 samples, 3.14%)</title><rect x="70.0984%" y="117" width="3.1391%" height="15" fill="rgb(209,38,44)"/><text x="70.3484%" y="127.50">exp..</text></g><g><title>late_resolve_crate (4,596,986 samples, 0.43%)</title><rect x="73.2829%" y="117" width="0.4322%" height="15" fill="rgb(236,212,23)"/><text x="73.5329%" y="127.50"></text></g><g><title>configure_and_expand (39,509,847 samples, 3.71%)</title><rect x="70.0278%" y="149" width="3.7149%" height="15" fill="rgb(242,79,21)"/><text x="70.2778%" y="159.50">conf..</text></g><g><title>resolve_crate (5,308,974 samples, 0.50%)</title><rect x="73.2435%" y="133" width="0.4992%" height="15" fill="rgb(211,96,35)"/><text x="73.4935%" y="143.50"></text></g><g><title>free_global_ctxt (6,886,703 samples, 0.65%)</title><rect x="73.8882%" y="149" width="0.6475%" height="15" fill="rgb(253,215,40)"/><text x="74.1382%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,742,102 samples, 0.16%)</title><rect x="75.1726%" y="117" width="0.1638%" height="15" fill="rgb(211,81,21)"/><text x="75.4226%" y="127.50"></text></g><g><title>optimized_mir (4,215,935 samples, 0.40%)</title><rect x="74.9438%" y="133" width="0.3964%" height="15" fill="rgb(208,190,38)"/><text x="75.1938%" y="143.50"></text></g><g><title>generate_crate_metadata (8,696,826 samples, 0.82%)</title><rect x="74.5358%" y="149" width="0.8177%" height="15" fill="rgb(235,213,38)"/><text x="74.7858%" y="159.50"></text></g><g><title>hir_lowering (7,769,083 samples, 0.73%)</title><rect x="75.3535%" y="149" width="0.7305%" height="15" fill="rgb(237,122,38)"/><text x="75.6035%" y="159.50"></text></g><g><title>finish_ongoing_codegen (248,462,711 samples, 23.36%)</title><rect x="76.0865%" y="133" width="23.3614%" height="15" fill="rgb(244,218,35)"/><text x="76.3365%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,594,011 samples, 0.24%)</title><rect x="99.4479%" y="133" width="0.2439%" height="15" fill="rgb(240,68,47)"/><text x="99.6979%" y="143.50"></text></g><g><title>link_binary (2,499,540 samples, 0.24%)</title><rect x="99.4568%" y="117" width="0.2350%" height="15" fill="rgb(210,16,53)"/><text x="99.7068%" y="127.50"></text></g><g><title>link_rlib (2,004,194 samples, 0.19%)</title><rect x="99.5034%" y="101" width="0.1884%" height="15" fill="rgb(235,124,12)"/><text x="99.7534%" y="111.50"></text></g><g><title>link (251,098,592 samples, 23.61%)</title><rect x="76.0839%" y="149" width="23.6093%" height="15" fill="rgb(224,169,11)"/><text x="76.3339%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (2,094,616 samples, 0.20%)</title><rect x="99.7490%" y="149" width="0.1969%" height="15" fill="rgb(250,166,2)"/><text x="99.9990%" y="159.50"></text></g><g><title>all (1,063,559,086 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,063,559,086 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(230,116,27)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>