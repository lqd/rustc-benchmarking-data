<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,282,818 samples, 4.79%)</title><rect x="0.2659%" y="197" width="4.7896%" height="15" fill="rgb(227,0,7)"/><text x="0.5159%" y="207.50">LLVM_p..</text></g><g><title>is_sized_raw (358,803 samples, 0.12%)</title><rect x="13.2038%" y="149" width="0.1203%" height="15" fill="rgb(217,0,24)"/><text x="13.4538%" y="159.50"></text></g><g><title>param_env (323,073 samples, 0.11%)</title><rect x="14.3546%" y="117" width="0.1083%" height="15" fill="rgb(221,193,54)"/><text x="14.6046%" y="127.50"></text></g><g><title>item_attrs (499,858 samples, 0.17%)</title><rect x="14.7831%" y="85" width="0.1676%" height="15" fill="rgb(248,212,6)"/><text x="15.0331%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (493,448 samples, 0.17%)</title><rect x="14.7853%" y="69" width="0.1655%" height="15" fill="rgb(208,68,35)"/><text x="15.0353%" y="79.50"></text></g><g><title>codegen_fn_attrs (609,658 samples, 0.20%)</title><rect x="14.7524%" y="101" width="0.2044%" height="15" fill="rgb(232,128,0)"/><text x="15.0024%" y="111.50"></text></g><g><title>is_copy_raw (1,756,210 samples, 0.59%)</title><rect x="16.8331%" y="69" width="0.5889%" height="15" fill="rgb(207,160,47)"/><text x="17.0831%" y="79.50"></text></g><g><title>evaluate_obligation (1,386,896 samples, 0.47%)</title><rect x="16.9569%" y="53" width="0.4651%" height="15" fill="rgb(228,23,34)"/><text x="17.2069%" y="63.50"></text></g><g><title>needs_drop_raw (2,263,826 samples, 0.76%)</title><rect x="16.6788%" y="85" width="0.7591%" height="15" fill="rgb(218,30,26)"/><text x="16.9288%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (676,635 samples, 0.23%)</title><rect x="17.6131%" y="69" width="0.2269%" height="15" fill="rgb(220,122,19)"/><text x="17.8631%" y="79.50"></text></g><g><title>impl_parent (326,682 samples, 0.11%)</title><rect x="18.0401%" y="53" width="0.1095%" height="15" fill="rgb(250,228,42)"/><text x="18.2901%" y="63.50"></text></g><g><title>specialization_graph_of (1,667,687 samples, 0.56%)</title><rect x="17.8782%" y="69" width="0.5592%" height="15" fill="rgb(240,193,28)"/><text x="18.1282%" y="79.50"></text></g><g><title>impl_trait_ref (858,020 samples, 0.29%)</title><rect x="18.1497%" y="53" width="0.2877%" height="15" fill="rgb(216,20,37)"/><text x="18.3997%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (745,920 samples, 0.25%)</title><rect x="18.1873%" y="37" width="0.2501%" height="15" fill="rgb(206,188,39)"/><text x="18.4373%" y="47.50"></text></g><g><title>resolve_instance (3,105,994 samples, 1.04%)</title><rect x="17.4380%" y="85" width="1.0416%" height="15" fill="rgb(217,207,13)"/><text x="17.6880%" y="95.50"></text></g><g><title>thir_body (1,758,040 samples, 0.59%)</title><rect x="18.5033%" y="85" width="0.5895%" height="15" fill="rgb(231,73,38)"/><text x="18.7533%" y="95.50"></text></g><g><title>mir_const (15,889,886 samples, 5.33%)</title><rect x="13.8338%" y="133" width="5.3285%" height="15" fill="rgb(225,20,46)"/><text x="14.0838%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (14,013,595 samples, 4.70%)</title><rect x="14.4629%" y="117" width="4.6993%" height="15" fill="rgb(210,31,41)"/><text x="14.7129%" y="127.50">unsaf..</text></g><g><title>mir_built (12,540,769 samples, 4.21%)</title><rect x="14.9568%" y="101" width="4.2054%" height="15" fill="rgb(221,200,47)"/><text x="15.2068%" y="111.50">mir_b..</text></g><g><title>mir_promoted (17,504,935 samples, 5.87%)</title><rect x="13.3241%" y="149" width="5.8701%" height="15" fill="rgb(226,26,5)"/><text x="13.5741%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (1,531,352 samples, 0.51%)</title><rect x="19.1942%" y="149" width="0.5135%" height="15" fill="rgb(249,33,26)"/><text x="19.4442%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,005,220 samples, 0.34%)</title><rect x="19.7077%" y="149" width="0.3371%" height="15" fill="rgb(235,183,28)"/><text x="19.9577%" y="159.50"></text></g><g><title>normalize_projection_ty (397,795 samples, 0.13%)</title><rect x="19.9114%" y="133" width="0.1334%" height="15" fill="rgb(221,5,38)"/><text x="20.1614%" y="143.50"></text></g><g><title>type_op_normalize_predicate (490,063 samples, 0.16%)</title><rect x="20.0488%" y="149" width="0.1643%" height="15" fill="rgb(247,18,42)"/><text x="20.2988%" y="159.50"></text></g><g><title>type_op_normalize_ty (789,526 samples, 0.26%)</title><rect x="20.2131%" y="149" width="0.2648%" height="15" fill="rgb(241,131,45)"/><text x="20.4631%" y="159.50"></text></g><g><title>type_op_prove_predicate (6,959,418 samples, 2.33%)</title><rect x="20.4779%" y="149" width="2.3338%" height="15" fill="rgb(249,31,29)"/><text x="20.7279%" y="159.50">t..</text></g><g><title>MIR_borrow_checking (52,488,819 samples, 17.60%)</title><rect x="5.2125%" y="181" width="17.6015%" height="15" fill="rgb(225,111,53)"/><text x="5.4625%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (52,235,839 samples, 17.52%)</title><rect x="5.2974%" y="165" width="17.5166%" height="15" fill="rgb(238,160,17)"/><text x="5.5474%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (308,184 samples, 0.10%)</title><rect x="22.8381%" y="181" width="0.1033%" height="15" fill="rgb(214,148,48)"/><text x="23.0881%" y="191.50"></text></g><g><title>should_inherit_track_caller (347,274 samples, 0.12%)</title><rect x="23.1482%" y="133" width="0.1165%" height="15" fill="rgb(232,36,49)"/><text x="23.3982%" y="143.50"></text></g><g><title>codegen_fn_attrs (616,776 samples, 0.21%)</title><rect x="23.0646%" y="149" width="0.2068%" height="15" fill="rgb(209,103,24)"/><text x="23.3146%" y="159.50"></text></g><g><title>check_mod_attrs (962,031 samples, 0.32%)</title><rect x="22.9489%" y="165" width="0.3226%" height="15" fill="rgb(229,88,8)"/><text x="23.1989%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (612,028 samples, 0.21%)</title><rect x="23.3902%" y="165" width="0.2052%" height="15" fill="rgb(213,181,19)"/><text x="23.6402%" y="175.50"></text></g><g><title>misc_checking_1 (2,023,082 samples, 0.68%)</title><rect x="22.9417%" y="181" width="0.6784%" height="15" fill="rgb(254,191,54)"/><text x="23.1917%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (759,008 samples, 0.25%)</title><rect x="23.6207%" y="165" width="0.2545%" height="15" fill="rgb(241,83,37)"/><text x="23.8707%" y="175.50"></text></g><g><title>check_mod_liveness (601,826 samples, 0.20%)</title><rect x="23.6734%" y="149" width="0.2018%" height="15" fill="rgb(233,36,39)"/><text x="23.9234%" y="159.50"></text></g><g><title>misc_checking_2 (1,798,340 samples, 0.60%)</title><rect x="23.6202%" y="181" width="0.6031%" height="15" fill="rgb(226,3,54)"/><text x="23.8702%" y="191.50"></text></g><g><title>match_checking (1,037,602 samples, 0.35%)</title><rect x="23.8753%" y="165" width="0.3479%" height="15" fill="rgb(245,192,40)"/><text x="24.1253%" y="175.50"></text></g><g><title>check_match (972,552 samples, 0.33%)</title><rect x="23.8971%" y="149" width="0.3261%" height="15" fill="rgb(238,167,29)"/><text x="24.1471%" y="159.50"></text></g><g><title>check_private_in_public (442,065 samples, 0.15%)</title><rect x="24.2268%" y="165" width="0.1482%" height="15" fill="rgb(232,182,51)"/><text x="24.4768%" y="175.50"></text></g><g><title>death_checking (719,208 samples, 0.24%)</title><rect x="24.3750%" y="165" width="0.2412%" height="15" fill="rgb(231,60,39)"/><text x="24.6250%" y="175.50"></text></g><g><title>param_env (331,174 samples, 0.11%)</title><rect x="24.9321%" y="133" width="0.1111%" height="15" fill="rgb(208,69,12)"/><text x="25.1821%" y="143.50"></text></g><g><title>crate_lints (2,597,599 samples, 0.87%)</title><rect x="24.6167%" y="149" width="0.8711%" height="15" fill="rgb(235,93,37)"/><text x="24.8667%" y="159.50"></text></g><g><title>type_of (1,325,134 samples, 0.44%)</title><rect x="25.0434%" y="133" width="0.4444%" height="15" fill="rgb(213,116,39)"/><text x="25.2934%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (867,559 samples, 0.29%)</title><rect x="25.1969%" y="117" width="0.2909%" height="15" fill="rgb(222,207,29)"/><text x="25.4469%" y="127.50"></text></g><g><title>lint_checking (3,316,196 samples, 1.11%)</title><rect x="24.6162%" y="165" width="1.1120%" height="15" fill="rgb(206,96,30)"/><text x="24.8662%" y="175.50"></text></g><g><title>module_lints (717,037 samples, 0.24%)</title><rect x="25.4878%" y="149" width="0.2404%" height="15" fill="rgb(218,138,4)"/><text x="25.7378%" y="159.50"></text></g><g><title>lint_mod (710,157 samples, 0.24%)</title><rect x="25.4901%" y="133" width="0.2381%" height="15" fill="rgb(250,191,14)"/><text x="25.7401%" y="143.50"></text></g><g><title>privacy_access_levels (627,227 samples, 0.21%)</title><rect x="25.7282%" y="165" width="0.2103%" height="15" fill="rgb(239,60,40)"/><text x="25.9782%" y="175.50"></text></g><g><title>privacy_checking_modules (1,773,220 samples, 0.59%)</title><rect x="25.9386%" y="165" width="0.5946%" height="15" fill="rgb(206,27,48)"/><text x="26.1886%" y="175.50"></text></g><g><title>check_mod_privacy (1,768,150 samples, 0.59%)</title><rect x="25.9403%" y="149" width="0.5929%" height="15" fill="rgb(225,35,8)"/><text x="26.1903%" y="159.50"></text></g><g><title>misc_checking_3 (6,906,386 samples, 2.32%)</title><rect x="24.2232%" y="181" width="2.3160%" height="15" fill="rgb(250,213,24)"/><text x="24.4732%" y="191.50">m..</text></g><g><title>adt_destructor (331,734 samples, 0.11%)</title><rect x="26.6052%" y="133" width="0.1112%" height="15" fill="rgb(247,123,22)"/><text x="26.8552%" y="143.50"></text></g><g><title>coherent_trait (324,284 samples, 0.11%)</title><rect x="26.6077%" y="117" width="0.1087%" height="15" fill="rgb(231,138,38)"/><text x="26.8577%" y="127.50"></text></g><g><title>specialization_graph_of (322,524 samples, 0.11%)</title><rect x="26.6083%" y="101" width="0.1082%" height="15" fill="rgb(231,145,46)"/><text x="26.8583%" y="111.50"></text></g><g><title>impl_parent (2,321,040 samples, 0.78%)</title><rect x="27.9661%" y="117" width="0.7783%" height="15" fill="rgb(251,118,11)"/><text x="28.2161%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,273,517 samples, 0.43%)</title><rect x="28.3174%" y="101" width="0.4271%" height="15" fill="rgb(217,147,25)"/><text x="28.5674%" y="111.50"></text></g><g><title>impl_trait_ref (4,714,251 samples, 1.58%)</title><rect x="28.7444%" y="117" width="1.5809%" height="15" fill="rgb(247,81,37)"/><text x="28.9944%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,895,424 samples, 1.31%)</title><rect x="29.0190%" y="101" width="1.3063%" height="15" fill="rgb(209,12,38)"/><text x="29.2690%" y="111.50"></text></g><g><title>coherent_trait (11,896,682 samples, 3.99%)</title><rect x="26.5891%" y="149" width="3.9894%" height="15" fill="rgb(227,1,9)"/><text x="26.8391%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (11,362,156 samples, 3.81%)</title><rect x="26.7684%" y="133" width="3.8102%" height="15" fill="rgb(248,47,43)"/><text x="27.0184%" y="143.50">spec..</text></g><g><title>trait_impls_of (738,048 samples, 0.25%)</title><rect x="30.3310%" y="117" width="0.2475%" height="15" fill="rgb(221,10,30)"/><text x="30.5810%" y="127.50"></text></g><g><title>coherence_checking (12,040,633 samples, 4.04%)</title><rect x="26.5789%" y="165" width="4.0377%" height="15" fill="rgb(210,229,1)"/><text x="26.8289%" y="175.50">cohe..</text></g><g><title>associated_item (392,355 samples, 0.13%)</title><rect x="43.0411%" y="101" width="0.1316%" height="15" fill="rgb(222,148,37)"/><text x="43.2911%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (317,865 samples, 0.11%)</title><rect x="43.0660%" y="85" width="0.1066%" height="15" fill="rgb(234,67,33)"/><text x="43.3160%" y="95.50"></text></g><g><title>associated_items (541,665 samples, 0.18%)</title><rect x="42.9990%" y="117" width="0.1816%" height="15" fill="rgb(247,98,35)"/><text x="43.2490%" y="127.50"></text></g><g><title>dropck_outlives (818,861 samples, 0.27%)</title><rect x="43.2146%" y="117" width="0.2746%" height="15" fill="rgb(247,138,52)"/><text x="43.4646%" y="127.50"></text></g><g><title>trait_impls_of (328,782 samples, 0.11%)</title><rect x="44.5385%" y="101" width="0.1103%" height="15" fill="rgb(213,79,30)"/><text x="44.7885%" y="111.50"></text></g><g><title>evaluate_obligation (3,458,888 samples, 1.16%)</title><rect x="43.4892%" y="117" width="1.1599%" height="15" fill="rgb(246,177,23)"/><text x="43.7392%" y="127.50"></text></g><g><title>generics_of (356,966 samples, 0.12%)</title><rect x="44.7132%" y="117" width="0.1197%" height="15" fill="rgb(230,62,27)"/><text x="44.9632%" y="127.50"></text></g><g><title>evaluate_obligation (619,255 samples, 0.21%)</title><rect x="45.2265%" y="101" width="0.2077%" height="15" fill="rgb(216,154,8)"/><text x="45.4765%" y="111.50"></text></g><g><title>method_autoderef_steps (1,263,543 samples, 0.42%)</title><rect x="45.0137%" y="117" width="0.4237%" height="15" fill="rgb(244,35,45)"/><text x="45.2637%" y="127.50"></text></g><g><title>predicates_of (440,493 samples, 0.15%)</title><rect x="45.5120%" y="117" width="0.1477%" height="15" fill="rgb(251,115,12)"/><text x="45.7620%" y="127.50"></text></g><g><title>predicates_defined_on (299,382 samples, 0.10%)</title><rect x="45.5593%" y="101" width="0.1004%" height="15" fill="rgb(240,54,50)"/><text x="45.8093%" y="111.50"></text></g><g><title>evaluate_obligation (341,366 samples, 0.11%)</title><rect x="47.3141%" y="101" width="0.1145%" height="15" fill="rgb(233,84,52)"/><text x="47.5641%" y="111.50"></text></g><g><title>typeck (5,715,614 samples, 1.92%)</title><rect x="45.7098%" y="117" width="1.9167%" height="15" fill="rgb(207,117,47)"/><text x="45.9598%" y="127.50">t..</text></g><g><title>item_bodies_checking (50,740,649 samples, 17.02%)</title><rect x="30.6397%" y="165" width="17.0152%" height="15" fill="rgb(249,43,39)"/><text x="30.8897%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,737,069 samples, 17.01%)</title><rect x="30.6409%" y="149" width="17.0140%" height="15" fill="rgb(209,38,44)"/><text x="30.8909%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (50,566,636 samples, 16.96%)</title><rect x="30.6980%" y="133" width="16.9569%" height="15" fill="rgb(236,212,23)"/><text x="30.9480%" y="143.50">typeck</text></g><g><title>item_types_checking (3,303,537 samples, 1.11%)</title><rect x="47.6549%" y="165" width="1.1078%" height="15" fill="rgb(242,79,21)"/><text x="47.9049%" y="175.50"></text></g><g><title>check_mod_item_types (3,297,697 samples, 1.11%)</title><rect x="47.6569%" y="149" width="1.1058%" height="15" fill="rgb(211,96,35)"/><text x="47.9069%" y="159.50"></text></g><g><title>fn_sig (695,129 samples, 0.23%)</title><rect x="48.9573%" y="133" width="0.2331%" height="15" fill="rgb(253,215,40)"/><text x="49.2073%" y="143.50"></text></g><g><title>generics_of (606,117 samples, 0.20%)</title><rect x="49.1904%" y="133" width="0.2033%" height="15" fill="rgb(211,81,21)"/><text x="49.4404%" y="143.50"></text></g><g><title>late_bound_vars_map (832,717 samples, 0.28%)</title><rect x="49.7971%" y="85" width="0.2792%" height="15" fill="rgb(208,190,38)"/><text x="50.0471%" y="95.50"></text></g><g><title>resolve_lifetimes (792,847 samples, 0.27%)</title><rect x="49.8105%" y="69" width="0.2659%" height="15" fill="rgb(235,213,38)"/><text x="50.0605%" y="79.50"></text></g><g><title>explicit_predicates_of (1,610,779 samples, 0.54%)</title><rect x="49.5660%" y="101" width="0.5402%" height="15" fill="rgb(237,122,38)"/><text x="49.8160%" y="111.50"></text></g><g><title>predicates_of (2,413,618 samples, 0.81%)</title><rect x="49.4668%" y="133" width="0.8094%" height="15" fill="rgb(244,218,35)"/><text x="49.7168%" y="143.50"></text></g><g><title>predicates_defined_on (2,295,866 samples, 0.77%)</title><rect x="49.5062%" y="117" width="0.7699%" height="15" fill="rgb(240,68,47)"/><text x="49.7562%" y="127.50"></text></g><g><title>inferred_outlives_of (506,955 samples, 0.17%)</title><rect x="50.1061%" y="101" width="0.1700%" height="15" fill="rgb(210,16,53)"/><text x="50.3561%" y="111.50"></text></g><g><title>inferred_outlives_crate (464,105 samples, 0.16%)</title><rect x="50.1205%" y="85" width="0.1556%" height="15" fill="rgb(235,124,12)"/><text x="50.3705%" y="95.50"></text></g><g><title>type_of (334,245 samples, 0.11%)</title><rect x="50.1641%" y="69" width="0.1121%" height="15" fill="rgb(224,169,11)"/><text x="50.4141%" y="79.50"></text></g><g><title>type_collecting (4,903,124 samples, 1.64%)</title><rect x="48.7637%" y="165" width="1.6442%" height="15" fill="rgb(250,166,2)"/><text x="49.0137%" y="175.50"></text></g><g><title>collect_mod_item_types (4,887,743 samples, 1.64%)</title><rect x="48.7689%" y="149" width="1.6390%" height="15" fill="rgb(242,216,29)"/><text x="49.0189%" y="159.50"></text></g><g><title>type_of (342,443 samples, 0.11%)</title><rect x="50.2931%" y="133" width="0.1148%" height="15" fill="rgb(230,116,27)"/><text x="50.5431%" y="143.50"></text></g><g><title>evaluate_obligation (1,412,103 samples, 0.47%)</title><rect x="53.3411%" y="133" width="0.4735%" height="15" fill="rgb(228,99,48)"/><text x="53.5911%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,124,233 samples, 0.38%)</title><rect x="53.8216%" y="133" width="0.3770%" height="15" fill="rgb(253,11,6)"/><text x="54.0716%" y="143.50"></text></g><g><title>param_env (1,870,682 samples, 0.63%)</title><rect x="54.1991%" y="133" width="0.6273%" height="15" fill="rgb(247,143,39)"/><text x="54.4491%" y="143.50"></text></g><g><title>region_scope_tree (749,928 samples, 0.25%)</title><rect x="54.8480%" y="133" width="0.2515%" height="15" fill="rgb(236,97,10)"/><text x="55.0980%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,697,852 samples, 4.59%)</title><rect x="50.5732%" y="149" width="4.5934%" height="15" fill="rgb(233,208,19)"/><text x="50.8232%" y="159.50">check..</text></g><g><title>param_env (1,156,082 samples, 0.39%)</title><rect x="57.0416%" y="133" width="0.3877%" height="15" fill="rgb(216,164,2)"/><text x="57.2916%" y="143.50"></text></g><g><title>check_item_well_formed (7,235,604 samples, 2.43%)</title><rect x="55.1666%" y="149" width="2.4264%" height="15" fill="rgb(220,129,5)"/><text x="55.4166%" y="159.50">ch..</text></g><g><title>evaluate_obligation (397,525 samples, 0.13%)</title><rect x="58.1928%" y="133" width="0.1333%" height="15" fill="rgb(242,17,10)"/><text x="58.4428%" y="143.50"></text></g><g><title>param_env (334,303 samples, 0.11%)</title><rect x="58.3986%" y="133" width="0.1121%" height="15" fill="rgb(242,107,0)"/><text x="58.6486%" y="143.50"></text></g><g><title>analysis (159,448,097 samples, 53.47%)</title><rect x="5.0554%" y="197" width="53.4689%" height="15" fill="rgb(251,28,31)"/><text x="5.3054%" y="207.50">analysis</text></g><g><title>type_check_crate (95,382,001 samples, 31.99%)</title><rect x="26.5392%" y="181" width="31.9851%" height="15" fill="rgb(233,223,10)"/><text x="26.7892%" y="191.50">type_check_crate</text></g><g><title>wf_checking (24,194,266 samples, 8.11%)</title><rect x="50.4111%" y="165" width="8.1132%" height="15" fill="rgb(215,21,27)"/><text x="50.6611%" y="175.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,777,445 samples, 0.93%)</title><rect x="57.5929%" y="149" width="0.9314%" height="15" fill="rgb(232,23,21)"/><text x="57.8429%" y="159.50"></text></g><g><title>fn_abi_of_instance (498,114 samples, 0.17%)</title><rect x="59.1220%" y="165" width="0.1670%" height="15" fill="rgb(244,5,23)"/><text x="59.3720%" y="175.50"></text></g><g><title>codegen_module (1,661,029 samples, 0.56%)</title><rect x="58.7560%" y="181" width="0.5570%" height="15" fill="rgb(226,81,46)"/><text x="59.0060%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (722,888 samples, 0.24%)</title><rect x="59.3201%" y="149" width="0.2424%" height="15" fill="rgb(247,70,30)"/><text x="59.5701%" y="159.50"></text></g><g><title>monomorphization_collector (779,129 samples, 0.26%)</title><rect x="59.3193%" y="165" width="0.2613%" height="15" fill="rgb(212,68,19)"/><text x="59.5693%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (917,660 samples, 0.31%)</title><rect x="59.3134%" y="181" width="0.3077%" height="15" fill="rgb(240,187,13)"/><text x="59.5634%" y="191.50"></text></g><g><title>codegen_crate (3,337,247 samples, 1.12%)</title><rect x="58.5280%" y="197" width="1.1191%" height="15" fill="rgb(223,113,26)"/><text x="58.7780%" y="207.50"></text></g><g><title>codegen_module_optimize (16,351,031 samples, 5.48%)</title><rect x="59.6471%" y="197" width="5.4831%" height="15" fill="rgb(206,192,2)"/><text x="59.8971%" y="207.50">codegen..</text></g><g><title>LLVM_module_optimize (13,105,875 samples, 4.39%)</title><rect x="60.7353%" y="181" width="4.3949%" height="15" fill="rgb(241,108,4)"/><text x="60.9853%" y="191.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (3,887,033 samples, 1.30%)</title><rect x="65.4986%" y="181" width="1.3035%" height="15" fill="rgb(247,173,49)"/><text x="65.7486%" y="191.50"></text></g><g><title>LLVM_module_codegen (11,129,172 samples, 3.73%)</title><rect x="66.8021%" y="181" width="3.7320%" height="15" fill="rgb(224,114,35)"/><text x="67.0521%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (10,884,250 samples, 3.65%)</title><rect x="66.8842%" y="165" width="3.6499%" height="15" fill="rgb(245,159,27)"/><text x="67.1342%" y="175.50">LLVM..</text></g><g><title>codegen_module_perform_lto (16,208,037 samples, 5.44%)</title><rect x="65.1302%" y="197" width="5.4352%" height="15" fill="rgb(245,172,44)"/><text x="65.3802%" y="207.50">codegen..</text></g><g><title>AST_validation (443,345 samples, 0.15%)</title><rect x="70.6423%" y="181" width="0.1487%" height="15" fill="rgb(236,23,11)"/><text x="70.8923%" y="191.50"></text></g><g><title>metadata_load_macro (453,814 samples, 0.15%)</title><rect x="82.2530%" y="149" width="0.1522%" height="15" fill="rgb(205,117,38)"/><text x="82.5030%" y="159.50"></text></g><g><title>metadata_register_crate (2,775,900 samples, 0.93%)</title><rect x="82.4052%" y="149" width="0.9309%" height="15" fill="rgb(237,72,25)"/><text x="82.6552%" y="159.50"></text></g><g><title>metadata_register_crate (958,960 samples, 0.32%)</title><rect x="83.0145%" y="133" width="0.3216%" height="15" fill="rgb(244,70,9)"/><text x="83.2645%" y="143.50"></text></g><g><title>macro_expand_crate (37,815,546 samples, 12.68%)</title><rect x="70.8892%" y="181" width="12.6810%" height="15" fill="rgb(217,125,39)"/><text x="71.1392%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (37,787,516 samples, 12.67%)</title><rect x="70.8986%" y="165" width="12.6716%" height="15" fill="rgb(235,36,10)"/><text x="71.1486%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (698,086 samples, 0.23%)</title><rect x="83.3360%" y="149" width="0.2341%" height="15" fill="rgb(251,123,47)"/><text x="83.5860%" y="159.50"></text></g><g><title>finalize_macro_resolutions (354,824 samples, 0.12%)</title><rect x="83.6341%" y="165" width="0.1190%" height="15" fill="rgb(221,13,13)"/><text x="83.8841%" y="175.50"></text></g><g><title>late_resolve_crate (4,945,925 samples, 1.66%)</title><rect x="83.7530%" y="165" width="1.6586%" height="15" fill="rgb(238,131,9)"/><text x="84.0030%" y="175.50"></text></g><g><title>configure_and_expand (44,613,221 samples, 14.96%)</title><rect x="70.5653%" y="197" width="14.9605%" height="15" fill="rgb(211,50,8)"/><text x="70.8153%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (5,773,183 samples, 1.94%)</title><rect x="83.5898%" y="181" width="1.9360%" height="15" fill="rgb(245,182,24)"/><text x="83.8398%" y="191.50">r..</text></g><g><title>drop_ast (319,044 samples, 0.11%)</title><rect x="85.5258%" y="197" width="0.1070%" height="15" fill="rgb(242,14,37)"/><text x="85.7758%" y="207.50"></text></g><g><title>early_lint_checks (554,116 samples, 0.19%)</title><rect x="85.6387%" y="197" width="0.1858%" height="15" fill="rgb(246,228,12)"/><text x="85.8887%" y="207.50"></text></g><g><title>free_global_ctxt (5,407,650 samples, 1.81%)</title><rect x="85.8246%" y="197" width="1.8134%" height="15" fill="rgb(213,55,15)"/><text x="86.0746%" y="207.50">f..</text></g><g><title>exported_symbols (344,823 samples, 0.12%)</title><rect x="88.8035%" y="181" width="0.1156%" height="15" fill="rgb(209,9,3)"/><text x="89.0535%" y="191.50"></text></g><g><title>is_sized_raw (700,641 samples, 0.23%)</title><rect x="91.2880%" y="149" width="0.2350%" height="15" fill="rgb(230,59,30)"/><text x="91.5380%" y="159.50"></text></g><g><title>evaluate_obligation (547,659 samples, 0.18%)</title><rect x="91.3393%" y="133" width="0.1837%" height="15" fill="rgb(209,121,21)"/><text x="91.5893%" y="143.50"></text></g><g><title>layout_of (315,074 samples, 0.11%)</title><rect x="91.5230%" y="149" width="0.1057%" height="15" fill="rgb(220,109,13)"/><text x="91.7730%" y="159.50"></text></g><g><title>layout_of (2,150,478 samples, 0.72%)</title><rect x="91.0248%" y="165" width="0.7211%" height="15" fill="rgb(232,18,1)"/><text x="91.2748%" y="175.50"></text></g><g><title>is_copy_raw (867,756 samples, 0.29%)</title><rect x="93.8581%" y="133" width="0.2910%" height="15" fill="rgb(215,41,42)"/><text x="94.1081%" y="143.50"></text></g><g><title>evaluate_obligation (656,873 samples, 0.22%)</title><rect x="93.9288%" y="117" width="0.2203%" height="15" fill="rgb(224,123,36)"/><text x="94.1788%" y="127.50"></text></g><g><title>needs_drop_raw (1,111,528 samples, 0.37%)</title><rect x="93.8112%" y="149" width="0.3727%" height="15" fill="rgb(240,125,3)"/><text x="94.0612%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,680,130 samples, 2.58%)</title><rect x="91.7459%" y="165" width="2.5754%" height="15" fill="rgb(205,98,50)"/><text x="91.9959%" y="175.50">mi..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (306,598 samples, 0.10%)</title><rect x="94.2185%" y="149" width="0.1028%" height="15" fill="rgb(205,185,37)"/><text x="94.4685%" y="159.50"></text></g><g><title>specialization_graph_of (369,945 samples, 0.12%)</title><rect x="94.3612%" y="149" width="0.1241%" height="15" fill="rgb(238,207,15)"/><text x="94.6112%" y="159.50"></text></g><g><title>resolve_instance (470,185 samples, 0.16%)</title><rect x="94.3292%" y="165" width="0.1577%" height="15" fill="rgb(213,199,42)"/><text x="94.5792%" y="175.50"></text></g><g><title>optimized_mir (16,382,717 samples, 5.49%)</title><rect x="88.9934%" y="181" width="5.4937%" height="15" fill="rgb(235,201,11)"/><text x="89.2434%" y="191.50">optimiz..</text></g><g><title>promoted_mir (343,973 samples, 0.12%)</title><rect x="94.4872%" y="181" width="0.1153%" height="15" fill="rgb(207,46,11)"/><text x="94.7372%" y="191.50"></text></g><g><title>generate_crate_metadata (20,828,009 samples, 6.98%)</title><rect x="87.6379%" y="197" width="6.9844%" height="15" fill="rgb(241,35,35)"/><text x="87.8879%" y="207.50">generate_..</text></g><g><title>hir_lowering (5,333,789 samples, 1.79%)</title><rect x="94.6224%" y="197" width="1.7886%" height="15" fill="rgb(243,32,47)"/><text x="94.8724%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (5,873,534 samples, 1.97%)</title><rect x="96.4191%" y="181" width="1.9696%" height="15" fill="rgb(247,202,23)"/><text x="96.6691%" y="191.50">f..</text></g><g><title>link_crate (1,262,674 samples, 0.42%)</title><rect x="98.3887%" y="181" width="0.4234%" height="15" fill="rgb(219,102,11)"/><text x="98.6387%" y="191.50"></text></g><g><title>link_binary (1,224,023 samples, 0.41%)</title><rect x="98.4017%" y="165" width="0.4105%" height="15" fill="rgb(243,110,44)"/><text x="98.6517%" y="175.50"></text></g><g><title>link_rlib (901,260 samples, 0.30%)</title><rect x="98.5099%" y="149" width="0.3022%" height="15" fill="rgb(222,74,54)"/><text x="98.7599%" y="159.50"></text></g><g><title>link (7,171,819 samples, 2.40%)</title><rect x="96.4110%" y="197" width="2.4050%" height="15" fill="rgb(216,99,12)"/><text x="96.6610%" y="207.50">li..</text></g><g><title>parse_crate (357,394 samples, 0.12%)</title><rect x="98.8159%" y="197" width="0.1198%" height="15" fill="rgb(226,22,26)"/><text x="99.0659%" y="207.50"></text></g><g><title>prepare_outputs (323,424 samples, 0.11%)</title><rect x="98.9385%" y="197" width="0.1085%" height="15" fill="rgb(217,163,10)"/><text x="99.1885%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,313,466 samples, 0.78%)</title><rect x="99.0469%" y="197" width="0.7758%" height="15" fill="rgb(213,25,53)"/><text x="99.2969%" y="207.50"></text></g><g><title>all (298,207,196 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (298,207,196 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (441,555 samples, 0.15%)</title><rect x="99.8519%" y="197" width="0.1481%" height="15" fill="rgb(229,68,48)"/><text x="100.1019%" y="207.50"></text></g></svg></svg>