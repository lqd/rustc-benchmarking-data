<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (113,579,670 samples, 14.61%)</title><rect x="0.0933%" y="165" width="14.6063%" height="15" fill="rgb(227,0,7)"/><text x="0.3433%" y="175.50">LLVM_passes</text></g><g><title>thir_body (1,651,179 samples, 0.21%)</title><rect x="17.0250%" y="53" width="0.2123%" height="15" fill="rgb(217,0,24)"/><text x="17.2750%" y="63.50"></text></g><g><title>mir_const (7,151,192 samples, 0.92%)</title><rect x="16.3188%" y="101" width="0.9196%" height="15" fill="rgb(221,193,54)"/><text x="16.5688%" y="111.50"></text></g><g><title>unsafety_check_result (6,183,998 samples, 0.80%)</title><rect x="16.4432%" y="85" width="0.7953%" height="15" fill="rgb(248,212,6)"/><text x="16.6932%" y="95.50"></text></g><g><title>mir_built (5,552,751 samples, 0.71%)</title><rect x="16.5244%" y="69" width="0.7141%" height="15" fill="rgb(208,68,35)"/><text x="16.7744%" y="79.50"></text></g><g><title>thir_body (1,326,436 samples, 0.17%)</title><rect x="17.4072%" y="37" width="0.1706%" height="15" fill="rgb(232,128,0)"/><text x="17.6572%" y="47.50"></text></g><g><title>mir_promoted (10,645,071 samples, 1.37%)</title><rect x="16.2096%" y="117" width="1.3690%" height="15" fill="rgb(207,160,47)"/><text x="16.4596%" y="127.50"></text></g><g><title>mir_const_qualif (2,644,974 samples, 0.34%)</title><rect x="17.2385%" y="101" width="0.3401%" height="15" fill="rgb(228,23,34)"/><text x="17.4885%" y="111.50"></text></g><g><title>mir_const (2,492,153 samples, 0.32%)</title><rect x="17.2581%" y="85" width="0.3205%" height="15" fill="rgb(218,30,26)"/><text x="17.5081%" y="95.50"></text></g><g><title>unsafety_check_result (2,313,037 samples, 0.30%)</title><rect x="17.2811%" y="69" width="0.2975%" height="15" fill="rgb(220,122,19)"/><text x="17.5311%" y="79.50"></text></g><g><title>mir_built (2,238,887 samples, 0.29%)</title><rect x="17.2907%" y="53" width="0.2879%" height="15" fill="rgb(250,228,42)"/><text x="17.5407%" y="63.50"></text></g><g><title>MIR_borrow_checking (22,644,144 samples, 2.91%)</title><rect x="14.7566%" y="149" width="2.9120%" height="15" fill="rgb(240,193,28)"/><text x="15.0066%" y="159.50">MI..</text></g><g><title>mir_borrowck (22,541,182 samples, 2.90%)</title><rect x="14.7699%" y="133" width="2.8988%" height="15" fill="rgb(216,20,37)"/><text x="15.0199%" y="143.50">mi..</text></g><g><title>MIR_effect_checking (1,005,421 samples, 0.13%)</title><rect x="17.6687%" y="149" width="0.1293%" height="15" fill="rgb(206,188,39)"/><text x="17.9187%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (891,348 samples, 0.11%)</title><rect x="17.6833%" y="133" width="0.1146%" height="15" fill="rgb(217,207,13)"/><text x="17.9333%" y="143.50"></text></g><g><title>misc_checking_1 (1,189,413 samples, 0.15%)</title><rect x="17.8218%" y="149" width="0.1530%" height="15" fill="rgb(231,73,38)"/><text x="18.0718%" y="159.50"></text></g><g><title>misc_checking_2 (1,078,152 samples, 0.14%)</title><rect x="17.9747%" y="149" width="0.1387%" height="15" fill="rgb(225,20,46)"/><text x="18.2247%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,826,931 samples, 0.23%)</title><rect x="18.2757%" y="101" width="0.2349%" height="15" fill="rgb(210,31,41)"/><text x="18.5257%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,824,521 samples, 0.23%)</title><rect x="18.2760%" y="85" width="0.2346%" height="15" fill="rgb(221,200,47)"/><text x="18.5260%" y="95.50"></text></g><g><title>crate_lints (4,088,937 samples, 0.53%)</title><rect x="18.1778%" y="117" width="0.5258%" height="15" fill="rgb(226,26,5)"/><text x="18.4278%" y="127.50"></text></g><g><title>lint_checking (4,983,287 samples, 0.64%)</title><rect x="18.1774%" y="133" width="0.6408%" height="15" fill="rgb(249,33,26)"/><text x="18.4274%" y="143.50"></text></g><g><title>module_lints (891,650 samples, 0.11%)</title><rect x="18.7036%" y="117" width="0.1147%" height="15" fill="rgb(235,183,28)"/><text x="18.9536%" y="127.50"></text></g><g><title>lint_mod (880,810 samples, 0.11%)</title><rect x="18.7050%" y="101" width="0.1133%" height="15" fill="rgb(221,5,38)"/><text x="18.9550%" y="111.50"></text></g><g><title>misc_checking_3 (6,354,312 samples, 0.82%)</title><rect x="18.1134%" y="149" width="0.8172%" height="15" fill="rgb(247,18,42)"/><text x="18.3634%" y="159.50"></text></g><g><title>impl_trait_ref (811,922 samples, 0.10%)</title><rect x="19.0973%" y="85" width="0.1044%" height="15" fill="rgb(241,131,45)"/><text x="19.3473%" y="95.50"></text></g><g><title>coherent_trait (2,138,014 samples, 0.27%)</title><rect x="18.9400%" y="117" width="0.2749%" height="15" fill="rgb(249,31,29)"/><text x="19.1900%" y="127.50"></text></g><g><title>specialization_graph_of (1,670,229 samples, 0.21%)</title><rect x="19.0002%" y="101" width="0.2148%" height="15" fill="rgb(225,111,53)"/><text x="19.2502%" y="111.50"></text></g><g><title>coherence_checking (2,183,865 samples, 0.28%)</title><rect x="18.9385%" y="133" width="0.2808%" height="15" fill="rgb(238,160,17)"/><text x="19.1885%" y="143.50"></text></g><g><title>generics_of (787,165 samples, 0.10%)</title><rect x="22.9780%" y="69" width="0.1012%" height="15" fill="rgb(214,148,48)"/><text x="23.2280%" y="79.50"></text></g><g><title>impl_trait_ref (954,918 samples, 0.12%)</title><rect x="23.1120%" y="69" width="0.1228%" height="15" fill="rgb(232,36,49)"/><text x="23.3620%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (778,485 samples, 0.10%)</title><rect x="23.1347%" y="53" width="0.1001%" height="15" fill="rgb(209,103,24)"/><text x="23.3847%" y="63.50"></text></g><g><title>specializes (1,792,209 samples, 0.23%)</title><rect x="23.3240%" y="69" width="0.2305%" height="15" fill="rgb(229,88,8)"/><text x="23.5740%" y="79.50"></text></g><g><title>param_env (1,102,044 samples, 0.14%)</title><rect x="23.4128%" y="53" width="0.1417%" height="15" fill="rgb(213,181,19)"/><text x="23.6628%" y="63.50"></text></g><g><title>evaluate_obligation (8,555,359 samples, 1.10%)</title><rect x="22.5164%" y="85" width="1.1002%" height="15" fill="rgb(254,191,54)"/><text x="22.7664%" y="95.50"></text></g><g><title>item_bodies_checking (36,341,030 samples, 4.67%)</title><rect x="19.2213%" y="133" width="4.6735%" height="15" fill="rgb(241,83,37)"/><text x="19.4713%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (36,337,800 samples, 4.67%)</title><rect x="19.2217%" y="117" width="4.6730%" height="15" fill="rgb(233,36,39)"/><text x="19.4717%" y="127.50">typec..</text></g><g><title>typeck (36,282,600 samples, 4.67%)</title><rect x="19.2288%" y="101" width="4.6659%" height="15" fill="rgb(226,3,54)"/><text x="19.4788%" y="111.50">typeck</text></g><g><title>item_types_checking (3,224,746 samples, 0.41%)</title><rect x="23.8947%" y="133" width="0.4147%" height="15" fill="rgb(245,192,40)"/><text x="24.1447%" y="143.50"></text></g><g><title>check_mod_item_types (3,216,546 samples, 0.41%)</title><rect x="23.8958%" y="117" width="0.4136%" height="15" fill="rgb(238,167,29)"/><text x="24.1458%" y="127.50"></text></g><g><title>typeck (2,983,392 samples, 0.38%)</title><rect x="23.9258%" y="101" width="0.3837%" height="15" fill="rgb(232,182,51)"/><text x="24.1758%" y="111.50"></text></g><g><title>type_collecting (1,115,423 samples, 0.14%)</title><rect x="24.3097%" y="133" width="0.1434%" height="15" fill="rgb(231,60,39)"/><text x="24.5597%" y="143.50"></text></g><g><title>collect_mod_item_types (1,094,152 samples, 0.14%)</title><rect x="24.3125%" y="117" width="0.1407%" height="15" fill="rgb(208,69,12)"/><text x="24.5625%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,337,936 samples, 0.17%)</title><rect x="24.6253%" y="101" width="0.1721%" height="15" fill="rgb(235,93,37)"/><text x="24.8753%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,324,216 samples, 0.17%)</title><rect x="24.6271%" y="85" width="0.1703%" height="15" fill="rgb(213,116,39)"/><text x="24.8771%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,321,666 samples, 0.17%)</title><rect x="24.6274%" y="69" width="0.1700%" height="15" fill="rgb(222,207,29)"/><text x="24.8774%" y="79.50"></text></g><g><title>check_item_well_formed (3,169,086 samples, 0.41%)</title><rect x="24.5309%" y="117" width="0.4075%" height="15" fill="rgb(206,96,30)"/><text x="24.7809%" y="127.50"></text></g><g><title>analysis (79,711,449 samples, 10.25%)</title><rect x="14.6996%" y="165" width="10.2509%" height="15" fill="rgb(218,138,4)"/><text x="14.9496%" y="175.50">analysis</text></g><g><title>type_check_crate (46,811,589 samples, 6.02%)</title><rect x="18.9305%" y="149" width="6.0200%" height="15" fill="rgb(250,191,14)"/><text x="19.1805%" y="159.50">type_che..</text></g><g><title>wf_checking (3,859,984 samples, 0.50%)</title><rect x="24.4541%" y="133" width="0.4964%" height="15" fill="rgb(239,60,40)"/><text x="24.7041%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,037,351 samples, 0.13%)</title><rect x="26.2408%" y="133" width="0.1334%" height="15" fill="rgb(206,27,48)"/><text x="26.4908%" y="143.50"></text></g><g><title>codegen_module (9,925,491 samples, 1.28%)</title><rect x="25.1107%" y="149" width="1.2764%" height="15" fill="rgb(225,35,8)"/><text x="25.3607%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,603,178 samples, 0.46%)</title><rect x="27.0259%" y="85" width="0.4634%" height="15" fill="rgb(250,213,24)"/><text x="27.2759%" y="95.50"></text></g><g><title>optimized_mir (7,765,325 samples, 1.00%)</title><rect x="26.4976%" y="101" width="0.9986%" height="15" fill="rgb(247,123,22)"/><text x="26.7476%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (9,713,789 samples, 1.25%)</title><rect x="26.3931%" y="117" width="1.2492%" height="15" fill="rgb(231,138,38)"/><text x="26.6431%" y="127.50"></text></g><g><title>resolve_instance (1,136,334 samples, 0.15%)</title><rect x="27.4962%" y="101" width="0.1461%" height="15" fill="rgb(231,145,46)"/><text x="27.7462%" y="111.50"></text></g><g><title>monomorphization_collector (9,762,910 samples, 1.26%)</title><rect x="26.3929%" y="133" width="1.2555%" height="15" fill="rgb(251,118,11)"/><text x="26.6429%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (10,253,716 samples, 1.32%)</title><rect x="26.3878%" y="149" width="1.3186%" height="15" fill="rgb(217,147,25)"/><text x="26.6378%" y="159.50"></text></g><g><title>codegen_crate (21,433,092 samples, 2.76%)</title><rect x="24.9518%" y="165" width="2.7563%" height="15" fill="rgb(247,81,37)"/><text x="25.2018%" y="175.50">co..</text></g><g><title>codegen_module_optimize (137,469,160 samples, 17.68%)</title><rect x="27.7081%" y="165" width="17.6785%" height="15" fill="rgb(209,12,38)"/><text x="27.9581%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (125,842,779 samples, 16.18%)</title><rect x="29.2033%" y="149" width="16.1834%" height="15" fill="rgb(227,1,9)"/><text x="29.4533%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (144,997,680 samples, 18.65%)</title><rect x="46.2400%" y="149" width="18.6467%" height="15" fill="rgb(248,47,43)"/><text x="46.4900%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (123,506,170 samples, 15.88%)</title><rect x="64.8867%" y="149" width="15.8829%" height="15" fill="rgb(221,10,30)"/><text x="65.1367%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (122,282,120 samples, 15.73%)</title><rect x="65.0441%" y="133" width="15.7255%" height="15" fill="rgb(210,229,1)"/><text x="65.2941%" y="143.50">LLVM_module_codegen_emit..</text></g><g><title>LLVM_thin_lto_import (4,609,043 samples, 0.59%)</title><rect x="80.7695%" y="149" width="0.5927%" height="15" fill="rgb(222,148,37)"/><text x="81.0195%" y="159.50"></text></g><g><title>codegen_module_perform_lto (280,019,693 samples, 36.01%)</title><rect x="45.3866%" y="165" width="36.0105%" height="15" fill="rgb(234,67,33)"/><text x="45.6366%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (26,460,678 samples, 3.40%)</title><rect x="81.4706%" y="149" width="3.4028%" height="15" fill="rgb(247,98,35)"/><text x="81.7206%" y="159.50">mac..</text></g><g><title>expand_crate (26,442,008 samples, 3.40%)</title><rect x="81.4730%" y="133" width="3.4004%" height="15" fill="rgb(247,138,52)"/><text x="81.7230%" y="143.50">exp..</text></g><g><title>pre_AST_expansion_lint_checks (1,005,500 samples, 0.13%)</title><rect x="84.7441%" y="117" width="0.1293%" height="15" fill="rgb(213,79,30)"/><text x="84.9941%" y="127.50"></text></g><g><title>late_resolve_crate (2,302,816 samples, 0.30%)</title><rect x="84.9316%" y="133" width="0.2961%" height="15" fill="rgb(246,177,23)"/><text x="85.1816%" y="143.50"></text></g><g><title>configure_and_expand (29,949,058 samples, 3.85%)</title><rect x="81.3971%" y="165" width="3.8514%" height="15" fill="rgb(230,62,27)"/><text x="81.6471%" y="175.50">conf..</text></g><g><title>resolve_crate (2,675,900 samples, 0.34%)</title><rect x="84.9044%" y="149" width="0.3441%" height="15" fill="rgb(216,154,8)"/><text x="85.1544%" y="159.50"></text></g><g><title>free_global_ctxt (4,041,876 samples, 0.52%)</title><rect x="85.3828%" y="165" width="0.5198%" height="15" fill="rgb(244,35,45)"/><text x="85.6328%" y="175.50"></text></g><g><title>generate_crate_metadata (2,142,374 samples, 0.28%)</title><rect x="85.9026%" y="165" width="0.2755%" height="15" fill="rgb(251,115,12)"/><text x="86.1526%" y="175.50"></text></g><g><title>hir_lowering (3,399,758 samples, 0.44%)</title><rect x="86.1781%" y="165" width="0.4372%" height="15" fill="rgb(240,54,50)"/><text x="86.4281%" y="175.50"></text></g><g><title>finish_ongoing_codegen (99,597,143 samples, 12.81%)</title><rect x="86.6173%" y="149" width="12.8082%" height="15" fill="rgb(233,84,52)"/><text x="86.8673%" y="159.50">finish_ongoing_code..</text></g><g><title>link_crate (1,241,004 samples, 0.16%)</title><rect x="99.4254%" y="149" width="0.1596%" height="15" fill="rgb(207,117,47)"/><text x="99.6754%" y="159.50"></text></g><g><title>link_binary (1,221,193 samples, 0.16%)</title><rect x="99.4280%" y="133" width="0.1570%" height="15" fill="rgb(249,43,39)"/><text x="99.6780%" y="143.50"></text></g><g><title>link (100,863,687 samples, 12.97%)</title><rect x="86.6153%" y="165" width="12.9711%" height="15" fill="rgb(209,38,44)"/><text x="86.8653%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (1,945,092 samples, 0.25%)</title><rect x="99.6934%" y="165" width="0.2501%" height="15" fill="rgb(236,212,23)"/><text x="99.9434%" y="175.50"></text></g><g><title>all (777,605,912 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (777,605,912 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(211,96,35)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>