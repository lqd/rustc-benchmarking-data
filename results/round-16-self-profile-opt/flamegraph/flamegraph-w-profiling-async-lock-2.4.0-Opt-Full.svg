<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (126,622,355 samples, 15.62%)</title><rect x="0.0657%" y="229" width="15.6215%" height="15" fill="rgb(227,0,7)"/><text x="0.3157%" y="239.50">LLVM_passes</text></g><g><title>mir_const (4,706,930 samples, 0.58%)</title><rect x="16.9966%" y="165" width="0.5807%" height="15" fill="rgb(217,0,24)"/><text x="17.2466%" y="175.50"></text></g><g><title>unsafety_check_result (3,995,063 samples, 0.49%)</title><rect x="17.0844%" y="149" width="0.4929%" height="15" fill="rgb(221,193,54)"/><text x="17.3344%" y="159.50"></text></g><g><title>mir_built (3,482,709 samples, 0.43%)</title><rect x="17.1476%" y="133" width="0.4297%" height="15" fill="rgb(248,212,6)"/><text x="17.3976%" y="143.50"></text></g><g><title>mir_promoted (6,335,476 samples, 0.78%)</title><rect x="16.9165%" y="181" width="0.7816%" height="15" fill="rgb(208,68,35)"/><text x="17.1665%" y="191.50"></text></g><g><title>mir_const_qualif (979,521 samples, 0.12%)</title><rect x="17.5773%" y="165" width="0.1208%" height="15" fill="rgb(232,128,0)"/><text x="17.8273%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,217,752 samples, 0.15%)</title><rect x="17.7776%" y="181" width="0.1502%" height="15" fill="rgb(207,160,47)"/><text x="18.0276%" y="191.50"></text></g><g><title>MIR_borrow_checking (17,819,660 samples, 2.20%)</title><rect x="15.7299%" y="213" width="2.1984%" height="15" fill="rgb(228,23,34)"/><text x="15.9799%" y="223.50">M..</text></g><g><title>mir_borrowck (17,693,748 samples, 2.18%)</title><rect x="15.7455%" y="197" width="2.1829%" height="15" fill="rgb(218,30,26)"/><text x="15.9955%" y="207.50">m..</text></g><g><title>misc_checking_1 (1,631,768 samples, 0.20%)</title><rect x="17.9993%" y="213" width="0.2013%" height="15" fill="rgb(220,122,19)"/><text x="18.2493%" y="223.50"></text></g><g><title>misc_checking_2 (1,084,532 samples, 0.13%)</title><rect x="18.2007%" y="213" width="0.1338%" height="15" fill="rgb(250,228,42)"/><text x="18.4507%" y="223.50"></text></g><g><title>crate_lints (2,617,357 samples, 0.32%)</title><rect x="18.4394%" y="181" width="0.3229%" height="15" fill="rgb(240,193,28)"/><text x="18.6894%" y="191.50"></text></g><g><title>type_of (1,078,953 samples, 0.13%)</title><rect x="18.6292%" y="165" width="0.1331%" height="15" fill="rgb(216,20,37)"/><text x="18.8792%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (848,530 samples, 0.10%)</title><rect x="18.6577%" y="149" width="0.1047%" height="15" fill="rgb(206,188,39)"/><text x="18.9077%" y="159.50"></text></g><g><title>lint_checking (3,174,693 samples, 0.39%)</title><rect x="18.4393%" y="197" width="0.3917%" height="15" fill="rgb(217,207,13)"/><text x="18.6893%" y="207.50"></text></g><g><title>privacy_checking_modules (1,149,833 samples, 0.14%)</title><rect x="18.9014%" y="197" width="0.1419%" height="15" fill="rgb(231,73,38)"/><text x="19.1514%" y="207.50"></text></g><g><title>check_mod_privacy (1,145,943 samples, 0.14%)</title><rect x="18.9018%" y="181" width="0.1414%" height="15" fill="rgb(225,20,46)"/><text x="19.1518%" y="191.50"></text></g><g><title>misc_checking_3 (5,763,812 samples, 0.71%)</title><rect x="18.3345%" y="213" width="0.7111%" height="15" fill="rgb(210,31,41)"/><text x="18.5845%" y="223.50"></text></g><g><title>impl_parent (1,743,971 samples, 0.22%)</title><rect x="19.4234%" y="149" width="0.2152%" height="15" fill="rgb(221,200,47)"/><text x="19.6734%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,081,250 samples, 0.13%)</title><rect x="19.5052%" y="133" width="0.1334%" height="15" fill="rgb(226,26,5)"/><text x="19.7552%" y="143.50"></text></g><g><title>impl_trait_ref (4,454,717 samples, 0.55%)</title><rect x="19.6388%" y="149" width="0.5496%" height="15" fill="rgb(249,33,26)"/><text x="19.8888%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,800,052 samples, 0.47%)</title><rect x="19.7195%" y="133" width="0.4688%" height="15" fill="rgb(235,183,28)"/><text x="19.9695%" y="143.50"></text></g><g><title>coherent_trait (9,772,174 samples, 1.21%)</title><rect x="19.0572%" y="181" width="1.2056%" height="15" fill="rgb(221,5,38)"/><text x="19.3072%" y="191.50"></text></g><g><title>specialization_graph_of (9,753,684 samples, 1.20%)</title><rect x="19.0595%" y="165" width="1.2033%" height="15" fill="rgb(247,18,42)"/><text x="19.3095%" y="175.50"></text></g><g><title>coherence_checking (9,867,975 samples, 1.22%)</title><rect x="19.0553%" y="197" width="1.2174%" height="15" fill="rgb(241,131,45)"/><text x="19.3053%" y="207.50"></text></g><g><title>item_bodies_checking (17,659,058 samples, 2.18%)</title><rect x="20.2790%" y="197" width="2.1786%" height="15" fill="rgb(249,31,29)"/><text x="20.5290%" y="207.50">i..</text></g><g><title>typeck_item_bodies (17,656,558 samples, 2.18%)</title><rect x="20.2793%" y="181" width="2.1783%" height="15" fill="rgb(225,111,53)"/><text x="20.5293%" y="191.50">t..</text></g><g><title>typeck (17,564,827 samples, 2.17%)</title><rect x="20.2907%" y="165" width="2.1670%" height="15" fill="rgb(238,160,17)"/><text x="20.5407%" y="175.50">t..</text></g><g><title>mir_promoted (1,048,941 samples, 0.13%)</title><rect x="23.9465%" y="117" width="0.1294%" height="15" fill="rgb(214,148,48)"/><text x="24.1965%" y="127.50"></text></g><g><title>mir_borrowck (9,465,752 samples, 1.17%)</title><rect x="23.0264%" y="133" width="1.1678%" height="15" fill="rgb(232,36,49)"/><text x="23.2764%" y="143.50"></text></g><g><title>associated_items (873,229 samples, 0.11%)</title><rect x="26.1405%" y="53" width="0.1077%" height="15" fill="rgb(209,103,24)"/><text x="26.3905%" y="63.50"></text></g><g><title>dropck_outlives (1,145,651 samples, 0.14%)</title><rect x="26.2539%" y="53" width="0.1413%" height="15" fill="rgb(229,88,8)"/><text x="26.5039%" y="63.50"></text></g><g><title>adt_dtorck_constraint (930,241 samples, 0.11%)</title><rect x="26.2805%" y="37" width="0.1148%" height="15" fill="rgb(213,181,19)"/><text x="26.5305%" y="47.50"></text></g><g><title>evaluate_obligation (3,098,032 samples, 0.38%)</title><rect x="26.3957%" y="53" width="0.3822%" height="15" fill="rgb(254,191,54)"/><text x="26.6457%" y="63.50"></text></g><g><title>mir_built (22,846,953 samples, 2.82%)</title><rect x="24.2343%" y="85" width="2.8186%" height="15" fill="rgb(241,83,37)"/><text x="24.4843%" y="95.50">mi..</text></g><g><title>typeck (22,130,003 samples, 2.73%)</title><rect x="24.3228%" y="69" width="2.7302%" height="15" fill="rgb(233,36,39)"/><text x="24.5728%" y="79.50">ty..</text></g><g><title>mir_built (2,515,735 samples, 0.31%)</title><rect x="27.1079%" y="69" width="0.3104%" height="15" fill="rgb(226,3,54)"/><text x="27.3579%" y="79.50"></text></g><g><title>mir_const (26,163,959 samples, 3.23%)</title><rect x="24.2076%" y="117" width="3.2279%" height="15" fill="rgb(245,192,40)"/><text x="24.4576%" y="127.50">mir..</text></g><g><title>unsafety_check_result (25,995,736 samples, 3.21%)</title><rect x="24.2283%" y="101" width="3.2071%" height="15" fill="rgb(238,167,29)"/><text x="24.4783%" y="111.50">uns..</text></g><g><title>unsafety_check_result (3,100,082 samples, 0.38%)</title><rect x="27.0530%" y="85" width="0.3825%" height="15" fill="rgb(232,182,51)"/><text x="27.3030%" y="95.50"></text></g><g><title>mir_promoted (26,286,829 samples, 3.24%)</title><rect x="24.1942%" y="133" width="3.2430%" height="15" fill="rgb(231,60,39)"/><text x="24.4442%" y="143.50">mir..</text></g><g><title>type_of (39,119,767 samples, 4.83%)</title><rect x="22.7107%" y="165" width="4.8262%" height="15" fill="rgb(208,69,12)"/><text x="22.9607%" y="175.50">type_of</text></g><g><title>mir_borrowck (39,095,976 samples, 4.82%)</title><rect x="22.7137%" y="149" width="4.8233%" height="15" fill="rgb(235,93,37)"/><text x="22.9637%" y="159.50">mir_bo..</text></g><g><title>item_types_checking (41,205,308 samples, 5.08%)</title><rect x="22.4576%" y="197" width="5.0835%" height="15" fill="rgb(213,116,39)"/><text x="22.7076%" y="207.50">item_t..</text></g><g><title>check_mod_item_types (41,196,558 samples, 5.08%)</title><rect x="22.4587%" y="181" width="5.0824%" height="15" fill="rgb(222,207,29)"/><text x="22.7087%" y="191.50">check_..</text></g><g><title>predicates_of (929,399 samples, 0.11%)</title><rect x="27.7320%" y="165" width="0.1147%" height="15" fill="rgb(206,96,30)"/><text x="27.9820%" y="175.50"></text></g><g><title>predicates_defined_on (858,427 samples, 0.11%)</title><rect x="27.7408%" y="149" width="0.1059%" height="15" fill="rgb(218,138,4)"/><text x="27.9908%" y="159.50"></text></g><g><title>type_collecting (2,634,118 samples, 0.32%)</title><rect x="27.5415%" y="197" width="0.3250%" height="15" fill="rgb(250,191,14)"/><text x="27.7915%" y="207.50"></text></g><g><title>collect_mod_item_types (2,623,038 samples, 0.32%)</title><rect x="27.5429%" y="181" width="0.3236%" height="15" fill="rgb(239,60,40)"/><text x="27.7929%" y="191.50"></text></g><g><title>evaluate_obligation (857,749 samples, 0.11%)</title><rect x="28.2215%" y="165" width="0.1058%" height="15" fill="rgb(206,27,48)"/><text x="28.4715%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,882,749 samples, 0.60%)</title><rect x="27.9026%" y="181" width="0.6024%" height="15" fill="rgb(225,35,8)"/><text x="28.1526%" y="191.50"></text></g><g><title>analysis (107,376,592 samples, 13.25%)</title><rect x="15.6871%" y="229" width="13.2471%" height="15" fill="rgb(250,213,24)"/><text x="15.9371%" y="239.50">analysis</text></g><g><title>type_check_crate (80,154,521 samples, 9.89%)</title><rect x="19.0455%" y="213" width="9.8887%" height="15" fill="rgb(247,123,22)"/><text x="19.2955%" y="223.50">type_check_cra..</text></g><g><title>wf_checking (8,648,212 samples, 1.07%)</title><rect x="27.8673%" y="197" width="1.0669%" height="15" fill="rgb(231,138,38)"/><text x="28.1173%" y="207.50"></text></g><g><title>check_item_well_formed (3,479,787 samples, 0.43%)</title><rect x="28.5049%" y="181" width="0.4293%" height="15" fill="rgb(231,145,46)"/><text x="28.7549%" y="191.50"></text></g><g><title>is_freeze_raw (906,992 samples, 0.11%)</title><rect x="31.8547%" y="181" width="0.1119%" height="15" fill="rgb(251,118,11)"/><text x="32.1047%" y="191.50"></text></g><g><title>layout_of (1,243,814 samples, 0.15%)</title><rect x="32.0541%" y="181" width="0.1534%" height="15" fill="rgb(217,147,25)"/><text x="32.3041%" y="191.50"></text></g><g><title>param_env (1,911,991 samples, 0.24%)</title><rect x="32.2075%" y="181" width="0.2359%" height="15" fill="rgb(247,81,37)"/><text x="32.4575%" y="191.50"></text></g><g><title>fn_abi_of_instance (7,494,909 samples, 0.92%)</title><rect x="31.5336%" y="197" width="0.9247%" height="15" fill="rgb(209,12,38)"/><text x="31.7836%" y="207.50"></text></g><g><title>layout_of (1,039,620 samples, 0.13%)</title><rect x="32.4885%" y="197" width="0.1283%" height="15" fill="rgb(227,1,9)"/><text x="32.7385%" y="207.50"></text></g><g><title>codegen_module (28,465,884 samples, 3.51%)</title><rect x="29.1668%" y="213" width="3.5119%" height="15" fill="rgb(248,47,43)"/><text x="29.4168%" y="223.50">cod..</text></g><g><title>codegen_fn_attrs (834,562 samples, 0.10%)</title><rect x="32.8241%" y="165" width="0.1030%" height="15" fill="rgb(221,10,30)"/><text x="33.0741%" y="175.50"></text></g><g><title>mir_shims (915,271 samples, 0.11%)</title><rect x="32.9667%" y="165" width="0.1129%" height="15" fill="rgb(210,229,1)"/><text x="33.2167%" y="175.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,094,063 samples, 0.13%)</title><rect x="33.2419%" y="149" width="0.1350%" height="15" fill="rgb(222,148,37)"/><text x="33.4919%" y="159.50"></text></g><g><title>optimized_mir (3,202,366 samples, 0.40%)</title><rect x="33.0796%" y="165" width="0.3951%" height="15" fill="rgb(234,67,33)"/><text x="33.3296%" y="175.50"></text></g><g><title>resolve_instance (2,131,211 samples, 0.26%)</title><rect x="33.4747%" y="165" width="0.2629%" height="15" fill="rgb(247,98,35)"/><text x="33.7247%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (9,735,374 samples, 1.20%)</title><rect x="32.6835%" y="181" width="1.2011%" height="15" fill="rgb(247,138,52)"/><text x="32.9335%" y="191.50"></text></g><g><title>monomorphization_collector (9,803,755 samples, 1.21%)</title><rect x="32.6833%" y="197" width="1.2095%" height="15" fill="rgb(213,79,30)"/><text x="32.9333%" y="207.50"></text></g><g><title>assert_symbols_are_distinct (915,440 samples, 0.11%)</title><rect x="33.8931%" y="181" width="0.1129%" height="15" fill="rgb(246,177,23)"/><text x="34.1431%" y="191.50"></text></g><g><title>symbol_name (819,489 samples, 0.10%)</title><rect x="33.9050%" y="165" width="0.1011%" height="15" fill="rgb(230,62,27)"/><text x="34.1550%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (11,123,279 samples, 1.37%)</title><rect x="32.6795%" y="213" width="1.3723%" height="15" fill="rgb(216,154,8)"/><text x="32.9295%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,289,144 samples, 0.16%)</title><rect x="33.8928%" y="197" width="0.1590%" height="15" fill="rgb(244,35,45)"/><text x="34.1428%" y="207.50"></text></g><g><title>codegen_crate (41,536,962 samples, 5.12%)</title><rect x="28.9351%" y="229" width="5.1244%" height="15" fill="rgb(251,115,12)"/><text x="29.1851%" y="239.50">codege..</text></g><g><title>codegen_module_optimize (195,662,090 samples, 24.14%)</title><rect x="34.0595%" y="229" width="24.1389%" height="15" fill="rgb(240,54,50)"/><text x="34.3095%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (181,550,219 samples, 22.40%)</title><rect x="35.8005%" y="213" width="22.3979%" height="15" fill="rgb(233,84,52)"/><text x="36.0505%" y="223.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (60,644,068 samples, 7.48%)</title><rect x="59.4596%" y="213" width="7.4817%" height="15" fill="rgb(207,117,47)"/><text x="59.7096%" y="223.50">LLVM_lto_o..</text></g><g><title>LLVM_module_codegen (103,349,431 samples, 12.75%)</title><rect x="66.9413%" y="213" width="12.7503%" height="15" fill="rgb(249,43,39)"/><text x="67.1913%" y="223.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (101,886,387 samples, 12.57%)</title><rect x="67.1218%" y="197" width="12.5698%" height="15" fill="rgb(209,38,44)"/><text x="67.3718%" y="207.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (5,125,323 samples, 0.63%)</title><rect x="79.6916%" y="213" width="0.6323%" height="15" fill="rgb(236,212,23)"/><text x="79.9416%" y="223.50"></text></g><g><title>codegen_module_perform_lto (179,985,286 samples, 22.20%)</title><rect x="58.1985%" y="229" width="22.2049%" height="15" fill="rgb(242,79,21)"/><text x="58.4485%" y="239.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,576,467 samples, 0.32%)</title><rect x="82.9597%" y="181" width="0.3179%" height="15" fill="rgb(211,96,35)"/><text x="83.2097%" y="191.50"></text></g><g><title>metadata_register_crate (1,058,062 samples, 0.13%)</title><rect x="83.1470%" y="165" width="0.1305%" height="15" fill="rgb(253,215,40)"/><text x="83.3970%" y="175.50"></text></g><g><title>macro_expand_crate (23,081,646 samples, 2.85%)</title><rect x="80.4776%" y="213" width="2.8476%" height="15" fill="rgb(211,81,21)"/><text x="80.7276%" y="223.50">ma..</text></g><g><title>expand_crate (23,061,526 samples, 2.85%)</title><rect x="80.4801%" y="197" width="2.8451%" height="15" fill="rgb(208,190,38)"/><text x="80.7301%" y="207.50">ex..</text></g><g><title>late_resolve_crate (3,952,332 samples, 0.49%)</title><rect x="83.3722%" y="197" width="0.4876%" height="15" fill="rgb(235,213,38)"/><text x="83.6222%" y="207.50"></text></g><g><title>configure_and_expand (28,243,930 samples, 3.48%)</title><rect x="80.4033%" y="229" width="3.4845%" height="15" fill="rgb(237,122,38)"/><text x="80.6533%" y="239.50">con..</text></g><g><title>resolve_crate (4,472,127 samples, 0.55%)</title><rect x="83.3361%" y="213" width="0.5517%" height="15" fill="rgb(244,218,35)"/><text x="83.5861%" y="223.50"></text></g><g><title>free_global_ctxt (5,290,486 samples, 0.65%)</title><rect x="83.9568%" y="229" width="0.6527%" height="15" fill="rgb(240,68,47)"/><text x="84.2068%" y="239.50"></text></g><g><title>layout_of (852,459 samples, 0.11%)</title><rect x="85.7918%" y="197" width="0.1052%" height="15" fill="rgb(210,16,53)"/><text x="86.0418%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,469,032 samples, 0.80%)</title><rect x="85.8970%" y="197" width="0.7981%" height="15" fill="rgb(235,124,12)"/><text x="86.1470%" y="207.50"></text></g><g><title>optimized_mir (14,062,834 samples, 1.73%)</title><rect x="84.9810%" y="213" width="1.7349%" height="15" fill="rgb(224,169,11)"/><text x="85.2310%" y="223.50"></text></g><g><title>generate_crate_metadata (17,184,552 samples, 2.12%)</title><rect x="84.6095%" y="229" width="2.1201%" height="15" fill="rgb(250,166,2)"/><text x="84.8595%" y="239.50">g..</text></g><g><title>hir_lowering (5,106,014 samples, 0.63%)</title><rect x="86.7296%" y="229" width="0.6299%" height="15" fill="rgb(242,216,29)"/><text x="86.9796%" y="239.50"></text></g><g><title>finish_ongoing_codegen (98,588,258 samples, 12.16%)</title><rect x="87.3613%" y="213" width="12.1629%" height="15" fill="rgb(230,116,27)"/><text x="87.6113%" y="223.50">finish_ongoing_cod..</text></g><g><title>link_crate (1,513,806 samples, 0.19%)</title><rect x="99.5242%" y="213" width="0.1868%" height="15" fill="rgb(228,99,48)"/><text x="99.7742%" y="223.50"></text></g><g><title>link_binary (1,479,746 samples, 0.18%)</title><rect x="99.5284%" y="197" width="0.1826%" height="15" fill="rgb(253,11,6)"/><text x="99.7784%" y="207.50"></text></g><g><title>link_rlib (992,540 samples, 0.12%)</title><rect x="99.5885%" y="181" width="0.1225%" height="15" fill="rgb(247,143,39)"/><text x="99.8385%" y="191.50"></text></g><g><title>link (100,124,384 samples, 12.35%)</title><rect x="87.3595%" y="229" width="12.3524%" height="15" fill="rgb(236,97,10)"/><text x="87.6095%" y="239.50">link</text></g><g><title>self_profile_alloc_query_strings (1,214,683 samples, 0.15%)</title><rect x="99.7840%" y="229" width="0.1499%" height="15" fill="rgb(233,208,19)"/><text x="100.0340%" y="239.50"></text></g><g><title>all (810,566,437 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (810,566,437 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>