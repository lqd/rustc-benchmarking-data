<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,088,658,776 samples, 9.39%)</title><rect x="0.0170%" y="181" width="9.3934%" height="15" fill="rgb(227,0,7)"/><text x="0.2670%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (25,818,665 samples, 0.22%)</title><rect x="13.9441%" y="53" width="0.2228%" height="15" fill="rgb(217,0,24)"/><text x="14.1941%" y="63.50"></text></g><g><title>evaluate_obligation (20,356,001 samples, 0.18%)</title><rect x="13.9912%" y="37" width="0.1756%" height="15" fill="rgb(221,193,54)"/><text x="14.2412%" y="47.50"></text></g><g><title>needs_drop_raw (31,466,439 samples, 0.27%)</title><rect x="13.8984%" y="69" width="0.2715%" height="15" fill="rgb(248,212,6)"/><text x="14.1484%" y="79.50"></text></g><g><title>thir_body (30,826,760 samples, 0.27%)</title><rect x="14.2418%" y="69" width="0.2660%" height="15" fill="rgb(208,68,35)"/><text x="14.4918%" y="79.50"></text></g><g><title>mir_const (193,946,749 samples, 1.67%)</title><rect x="12.8548%" y="117" width="1.6735%" height="15" fill="rgb(232,128,0)"/><text x="13.1048%" y="127.50"></text></g><g><title>unsafety_check_result (173,178,010 samples, 1.49%)</title><rect x="13.0340%" y="101" width="1.4943%" height="15" fill="rgb(207,160,47)"/><text x="13.2840%" y="111.50"></text></g><g><title>mir_built (160,079,761 samples, 1.38%)</title><rect x="13.1470%" y="85" width="1.3812%" height="15" fill="rgb(228,23,34)"/><text x="13.3970%" y="95.50"></text></g><g><title>mir_promoted (220,310,882 samples, 1.90%)</title><rect x="12.6723%" y="133" width="1.9009%" height="15" fill="rgb(218,30,26)"/><text x="12.9223%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (17,504,571 samples, 0.15%)</title><rect x="14.5733%" y="133" width="0.1510%" height="15" fill="rgb(220,122,19)"/><text x="14.8233%" y="143.50"></text></g><g><title>type_op_prove_predicate (37,764,823 samples, 0.33%)</title><rect x="14.8878%" y="133" width="0.3259%" height="15" fill="rgb(250,228,42)"/><text x="15.1378%" y="143.50"></text></g><g><title>MIR_borrow_checking (664,669,521 samples, 5.74%)</title><rect x="9.4789%" y="165" width="5.7351%" height="15" fill="rgb(240,193,28)"/><text x="9.7289%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (662,079,959 samples, 5.71%)</title><rect x="9.5013%" y="149" width="5.7127%" height="15" fill="rgb(216,20,37)"/><text x="9.7513%" y="159.50">mir_bor..</text></g><g><title>misc_checking_1 (25,868,971 samples, 0.22%)</title><rect x="15.2720%" y="165" width="0.2232%" height="15" fill="rgb(206,188,39)"/><text x="15.5220%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (12,837,875 samples, 0.11%)</title><rect x="15.4952%" y="149" width="0.1108%" height="15" fill="rgb(217,207,13)"/><text x="15.7452%" y="159.50"></text></g><g><title>misc_checking_2 (36,849,694 samples, 0.32%)</title><rect x="15.4952%" y="165" width="0.3180%" height="15" fill="rgb(231,73,38)"/><text x="15.7452%" y="175.50"></text></g><g><title>match_checking (24,008,279 samples, 0.21%)</title><rect x="15.6060%" y="149" width="0.2072%" height="15" fill="rgb(225,20,46)"/><text x="15.8560%" y="159.50"></text></g><g><title>check_match (23,193,055 samples, 0.20%)</title><rect x="15.6130%" y="133" width="0.2001%" height="15" fill="rgb(210,31,41)"/><text x="15.8630%" y="143.50"></text></g><g><title>crate_lints (21,373,051 samples, 0.18%)</title><rect x="15.9511%" y="133" width="0.1844%" height="15" fill="rgb(221,200,47)"/><text x="16.2011%" y="143.50"></text></g><g><title>lint_checking (37,673,443 samples, 0.33%)</title><rect x="15.9511%" y="149" width="0.3251%" height="15" fill="rgb(226,26,5)"/><text x="16.2011%" y="159.50"></text></g><g><title>module_lints (16,296,552 samples, 0.14%)</title><rect x="16.1355%" y="133" width="0.1406%" height="15" fill="rgb(249,33,26)"/><text x="16.3855%" y="143.50"></text></g><g><title>lint_mod (16,273,662 samples, 0.14%)</title><rect x="16.1357%" y="117" width="0.1404%" height="15" fill="rgb(235,183,28)"/><text x="16.3857%" y="127.50"></text></g><g><title>privacy_checking_modules (31,140,090 samples, 0.27%)</title><rect x="16.3468%" y="149" width="0.2687%" height="15" fill="rgb(221,5,38)"/><text x="16.5968%" y="159.50"></text></g><g><title>check_mod_privacy (31,120,268 samples, 0.27%)</title><rect x="16.3469%" y="133" width="0.2685%" height="15" fill="rgb(247,18,42)"/><text x="16.5969%" y="143.50"></text></g><g><title>misc_checking_3 (93,143,576 samples, 0.80%)</title><rect x="15.8132%" y="165" width="0.8037%" height="15" fill="rgb(241,131,45)"/><text x="16.0632%" y="175.50"></text></g><g><title>coherent_trait (25,269,845 samples, 0.22%)</title><rect x="16.6258%" y="133" width="0.2180%" height="15" fill="rgb(249,31,29)"/><text x="16.8758%" y="143.50"></text></g><g><title>specialization_graph_of (24,566,357 samples, 0.21%)</title><rect x="16.6318%" y="117" width="0.2120%" height="15" fill="rgb(225,111,53)"/><text x="16.8818%" y="127.50"></text></g><g><title>coherence_checking (25,957,361 samples, 0.22%)</title><rect x="16.6254%" y="149" width="0.2240%" height="15" fill="rgb(238,160,17)"/><text x="16.8754%" y="159.50"></text></g><g><title>evaluate_obligation (17,651,749 samples, 0.15%)</title><rect x="22.6074%" y="101" width="0.1523%" height="15" fill="rgb(214,148,48)"/><text x="22.8574%" y="111.50"></text></g><g><title>typeck (62,673,214 samples, 0.54%)</title><rect x="22.8076%" y="101" width="0.5408%" height="15" fill="rgb(232,36,49)"/><text x="23.0576%" y="111.50"></text></g><g><title>item_bodies_checking (752,954,713 samples, 6.50%)</title><rect x="16.8559%" y="149" width="6.4968%" height="15" fill="rgb(209,103,24)"/><text x="17.1059%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (752,950,243 samples, 6.50%)</title><rect x="16.8560%" y="133" width="6.4968%" height="15" fill="rgb(229,88,8)"/><text x="17.1060%" y="143.50">typeck_it..</text></g><g><title>typeck (751,288,443 samples, 6.48%)</title><rect x="16.8703%" y="117" width="6.4825%" height="15" fill="rgb(213,181,19)"/><text x="17.1203%" y="127.50">typeck</text></g><g><title>item_types_checking (36,521,500 samples, 0.32%)</title><rect x="23.3528%" y="149" width="0.3151%" height="15" fill="rgb(254,191,54)"/><text x="23.6028%" y="159.50"></text></g><g><title>check_mod_item_types (36,504,020 samples, 0.31%)</title><rect x="23.3529%" y="133" width="0.3150%" height="15" fill="rgb(241,83,37)"/><text x="23.6029%" y="143.50"></text></g><g><title>is_late_bound_map (12,206,753 samples, 0.11%)</title><rect x="23.8056%" y="101" width="0.1053%" height="15" fill="rgb(233,36,39)"/><text x="24.0556%" y="111.50"></text></g><g><title>resolve_lifetimes (11,930,478 samples, 0.10%)</title><rect x="23.8080%" y="85" width="0.1029%" height="15" fill="rgb(226,3,54)"/><text x="24.0580%" y="95.50"></text></g><g><title>generics_of (18,312,555 samples, 0.16%)</title><rect x="23.7841%" y="117" width="0.1580%" height="15" fill="rgb(245,192,40)"/><text x="24.0341%" y="127.50"></text></g><g><title>type_collecting (44,196,397 samples, 0.38%)</title><rect x="23.6680%" y="149" width="0.3813%" height="15" fill="rgb(238,167,29)"/><text x="23.9180%" y="159.50"></text></g><g><title>collect_mod_item_types (44,156,177 samples, 0.38%)</title><rect x="23.6683%" y="133" width="0.3810%" height="15" fill="rgb(232,182,51)"/><text x="23.9183%" y="143.50"></text></g><g><title>check_impl_item_well_formed (72,079,633 samples, 0.62%)</title><rect x="24.0859%" y="133" width="0.6219%" height="15" fill="rgb(231,60,39)"/><text x="24.3359%" y="143.50"></text></g><g><title>analysis (1,806,225,901 samples, 15.58%)</title><rect x="9.4105%" y="181" width="15.5849%" height="15" fill="rgb(208,69,12)"/><text x="9.6605%" y="191.50">analysis</text></g><g><title>type_check_crate (971,040,505 samples, 8.38%)</title><rect x="16.6168%" y="165" width="8.3786%" height="15" fill="rgb(235,93,37)"/><text x="16.8668%" y="175.50">type_check_c..</text></g><g><title>wf_checking (109,520,251 samples, 0.94%)</title><rect x="24.0504%" y="149" width="0.9450%" height="15" fill="rgb(213,116,39)"/><text x="24.3004%" y="159.50"></text></g><g><title>check_item_well_formed (33,335,447 samples, 0.29%)</title><rect x="24.7078%" y="133" width="0.2876%" height="15" fill="rgb(222,207,29)"/><text x="24.9578%" y="143.50"></text></g><g><title>param_env (12,516,565 samples, 0.11%)</title><rect x="27.3106%" y="133" width="0.1080%" height="15" fill="rgb(206,96,30)"/><text x="27.5606%" y="143.50"></text></g><g><title>fn_abi_of_instance (59,161,675 samples, 0.51%)</title><rect x="26.9403%" y="149" width="0.5105%" height="15" fill="rgb(218,138,4)"/><text x="27.1903%" y="159.50"></text></g><g><title>codegen_module (293,762,042 samples, 2.53%)</title><rect x="25.0173%" y="165" width="2.5347%" height="15" fill="rgb(250,191,14)"/><text x="25.2673%" y="175.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (15,270,713 samples, 0.13%)</title><rect x="28.0079%" y="101" width="0.1318%" height="15" fill="rgb(239,60,40)"/><text x="28.2579%" y="111.50"></text></g><g><title>optimized_mir (45,049,179 samples, 0.39%)</title><rect x="27.7837%" y="117" width="0.3887%" height="15" fill="rgb(206,27,48)"/><text x="28.0337%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (16,045,837 samples, 0.14%)</title><rect x="28.2260%" y="101" width="0.1385%" height="15" fill="rgb(225,35,8)"/><text x="28.4760%" y="111.50"></text></g><g><title>resolve_instance (31,494,667 samples, 0.27%)</title><rect x="28.1724%" y="117" width="0.2718%" height="15" fill="rgb(250,213,24)"/><text x="28.4224%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (113,738,768 samples, 0.98%)</title><rect x="27.5531%" y="133" width="0.9814%" height="15" fill="rgb(247,123,22)"/><text x="27.8031%" y="143.50"></text></g><g><title>monomorphization_collector (114,874,071 samples, 0.99%)</title><rect x="27.5531%" y="149" width="0.9912%" height="15" fill="rgb(231,138,38)"/><text x="27.8031%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (13,713,254 samples, 0.12%)</title><rect x="28.5443%" y="133" width="0.1183%" height="15" fill="rgb(231,145,46)"/><text x="28.7943%" y="143.50"></text></g><g><title>symbol_name (12,033,996 samples, 0.10%)</title><rect x="28.5588%" y="117" width="0.1038%" height="15" fill="rgb(251,118,11)"/><text x="28.8088%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (133,526,931 samples, 1.15%)</title><rect x="27.5521%" y="165" width="1.1521%" height="15" fill="rgb(217,147,25)"/><text x="27.8021%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (18,546,309 samples, 0.16%)</title><rect x="28.5442%" y="149" width="0.1600%" height="15" fill="rgb(247,81,37)"/><text x="28.7942%" y="159.50"></text></g><g><title>codegen_crate (429,963,703 samples, 3.71%)</title><rect x="24.9955%" y="181" width="3.7099%" height="15" fill="rgb(209,12,38)"/><text x="25.2455%" y="191.50">code..</text></g><g><title>codegen_module_optimize (2,547,711,477 samples, 21.98%)</title><rect x="28.7054%" y="181" width="21.9828%" height="15" fill="rgb(227,1,9)"/><text x="28.9554%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,441,588,284 samples, 21.07%)</title><rect x="29.6211%" y="165" width="21.0671%" height="15" fill="rgb(248,47,43)"/><text x="29.8711%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (1,749,547,584 samples, 15.10%)</title><rect x="51.2658%" y="165" width="15.0959%" height="15" fill="rgb(221,10,30)"/><text x="51.5158%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (1,297,031,828 samples, 11.19%)</title><rect x="66.3617%" y="165" width="11.1914%" height="15" fill="rgb(210,229,1)"/><text x="66.6117%" y="175.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (1,286,510,601 samples, 11.10%)</title><rect x="66.4525%" y="149" width="11.1006%" height="15" fill="rgb(222,148,37)"/><text x="66.7025%" y="159.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (245,140,257 samples, 2.12%)</title><rect x="77.5531%" y="165" width="2.1152%" height="15" fill="rgb(234,67,33)"/><text x="77.8031%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (3,365,404,591 samples, 29.04%)</title><rect x="50.6882%" y="181" width="29.0383%" height="15" fill="rgb(247,98,35)"/><text x="50.9382%" y="191.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (918,139,310 samples, 7.92%)</title><rect x="79.8077%" y="165" width="7.9221%" height="15" fill="rgb(247,138,52)"/><text x="80.0577%" y="175.50">macro_expan..</text></g><g><title>expand_crate (918,110,210 samples, 7.92%)</title><rect x="79.8079%" y="149" width="7.9219%" height="15" fill="rgb(213,79,30)"/><text x="80.0579%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (60,956,325 samples, 0.53%)</title><rect x="87.7545%" y="149" width="0.5260%" height="15" fill="rgb(246,177,23)"/><text x="88.0045%" y="159.50"></text></g><g><title>configure_and_expand (998,065,788 samples, 8.61%)</title><rect x="79.7265%" y="181" width="8.6118%" height="15" fill="rgb(230,62,27)"/><text x="79.9765%" y="191.50">configure_an..</text></g><g><title>resolve_crate (70,441,401 samples, 0.61%)</title><rect x="87.7305%" y="165" width="0.6078%" height="15" fill="rgb(216,154,8)"/><text x="87.9805%" y="175.50"></text></g><g><title>drop_ast (14,525,984 samples, 0.13%)</title><rect x="88.3383%" y="181" width="0.1253%" height="15" fill="rgb(244,35,45)"/><text x="88.5883%" y="191.50"></text></g><g><title>early_lint_checks (17,944,211 samples, 0.15%)</title><rect x="88.4640%" y="181" width="0.1548%" height="15" fill="rgb(251,115,12)"/><text x="88.7140%" y="191.50"></text></g><g><title>free_global_ctxt (39,743,196 samples, 0.34%)</title><rect x="88.6188%" y="181" width="0.3429%" height="15" fill="rgb(240,54,50)"/><text x="88.8688%" y="191.50"></text></g><g><title>layout_of (11,996,343 samples, 0.10%)</title><rect x="90.4243%" y="149" width="0.1035%" height="15" fill="rgb(233,84,52)"/><text x="90.6743%" y="159.50"></text></g><g><title>is_copy_raw (15,985,969 samples, 0.14%)</title><rect x="91.7830%" y="117" width="0.1379%" height="15" fill="rgb(207,117,47)"/><text x="92.0330%" y="127.50"></text></g><g><title>evaluate_obligation (13,316,674 samples, 0.11%)</title><rect x="91.8061%" y="101" width="0.1149%" height="15" fill="rgb(249,43,39)"/><text x="92.0561%" y="111.50"></text></g><g><title>needs_drop_raw (17,755,406 samples, 0.15%)</title><rect x="91.7679%" y="133" width="0.1532%" height="15" fill="rgb(209,38,44)"/><text x="92.0179%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (164,306,439 samples, 1.42%)</title><rect x="90.5278%" y="149" width="1.4177%" height="15" fill="rgb(236,212,23)"/><text x="90.7778%" y="159.50"></text></g><g><title>optimized_mir (258,623,240 samples, 2.23%)</title><rect x="89.7180%" y="165" width="2.2315%" height="15" fill="rgb(242,79,21)"/><text x="89.9680%" y="175.50">o..</text></g><g><title>generate_crate_metadata (348,758,860 samples, 3.01%)</title><rect x="88.9618%" y="181" width="3.0093%" height="15" fill="rgb(211,96,35)"/><text x="89.2118%" y="191.50">gen..</text></g><g><title>hir_lowering (90,872,902 samples, 0.78%)</title><rect x="91.9710%" y="181" width="0.7841%" height="15" fill="rgb(253,215,40)"/><text x="92.2210%" y="191.50"></text></g><g><title>finish_ongoing_codegen (792,534,278 samples, 6.84%)</title><rect x="92.7553%" y="165" width="6.8383%" height="15" fill="rgb(211,81,21)"/><text x="93.0053%" y="175.50">finish_on..</text></g><g><title>link_crate (33,099,523 samples, 0.29%)</title><rect x="99.5937%" y="165" width="0.2856%" height="15" fill="rgb(208,190,38)"/><text x="99.8437%" y="175.50"></text></g><g><title>link_binary (32,819,380 samples, 0.28%)</title><rect x="99.5961%" y="149" width="0.2832%" height="15" fill="rgb(235,213,38)"/><text x="99.8461%" y="159.50"></text></g><g><title>link_rlib (29,284,010 samples, 0.25%)</title><rect x="99.6266%" y="133" width="0.2527%" height="15" fill="rgb(237,122,38)"/><text x="99.8766%" y="143.50"></text></g><g><title>link (825,672,891 samples, 7.12%)</title><rect x="92.7551%" y="181" width="7.1243%" height="15" fill="rgb(244,218,35)"/><text x="93.0051%" y="191.50">link</text></g><g><title>all (11,589,556,031 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (11,589,556,031 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>