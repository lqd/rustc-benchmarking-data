<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (165,625,103 samples, 16.34%)</title><rect x="0.0631%" y="165" width="16.3433%" height="15" fill="rgb(227,0,7)"/><text x="0.3131%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,269,114 samples, 0.13%)</title><rect x="16.2811%" y="149" width="0.1252%" height="15" fill="rgb(217,0,24)"/><text x="16.5311%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,217,734 samples, 0.12%)</title><rect x="16.2862%" y="133" width="0.1202%" height="15" fill="rgb(221,193,54)"/><text x="16.5362%" y="143.50"></text></g><g><title>specialization_graph_of (1,107,363 samples, 0.11%)</title><rect x="18.4315%" y="37" width="0.1093%" height="15" fill="rgb(248,212,6)"/><text x="18.6815%" y="47.50"></text></g><g><title>resolve_instance (1,810,202 samples, 0.18%)</title><rect x="18.3672%" y="53" width="0.1786%" height="15" fill="rgb(208,68,35)"/><text x="18.6172%" y="63.50"></text></g><g><title>thir_body (1,235,990 samples, 0.12%)</title><rect x="18.5483%" y="53" width="0.1220%" height="15" fill="rgb(232,128,0)"/><text x="18.7983%" y="63.50"></text></g><g><title>mir_const (9,305,850 samples, 0.92%)</title><rect x="17.7536%" y="101" width="0.9183%" height="15" fill="rgb(207,160,47)"/><text x="18.0036%" y="111.50"></text></g><g><title>unsafety_check_result (8,188,553 samples, 0.81%)</title><rect x="17.8639%" y="85" width="0.8080%" height="15" fill="rgb(228,23,34)"/><text x="18.1139%" y="95.50"></text></g><g><title>mir_built (7,409,562 samples, 0.73%)</title><rect x="17.9407%" y="69" width="0.7311%" height="15" fill="rgb(218,30,26)"/><text x="18.1907%" y="79.50"></text></g><g><title>mir_promoted (11,031,042 samples, 1.09%)</title><rect x="17.6356%" y="117" width="1.0885%" height="15" fill="rgb(220,122,19)"/><text x="17.8856%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,240,910 samples, 0.12%)</title><rect x="18.8376%" y="117" width="0.1224%" height="15" fill="rgb(250,228,42)"/><text x="19.0876%" y="127.50"></text></g><g><title>MIR_borrow_checking (25,595,490 samples, 2.53%)</title><rect x="16.4353%" y="149" width="2.5257%" height="15" fill="rgb(240,193,28)"/><text x="16.6853%" y="159.50">MI..</text></g><g><title>mir_borrowck (25,436,077 samples, 2.51%)</title><rect x="16.4510%" y="133" width="2.5099%" height="15" fill="rgb(216,20,37)"/><text x="16.7010%" y="143.50">mi..</text></g><g><title>misc_checking_1 (1,125,673 samples, 0.11%)</title><rect x="19.0120%" y="149" width="0.1111%" height="15" fill="rgb(206,188,39)"/><text x="19.2620%" y="159.50"></text></g><g><title>misc_checking_2 (1,097,532 samples, 0.11%)</title><rect x="19.1231%" y="149" width="0.1083%" height="15" fill="rgb(217,207,13)"/><text x="19.3731%" y="159.50"></text></g><g><title>lint_checking (1,019,422 samples, 0.10%)</title><rect x="19.2810%" y="133" width="0.1006%" height="15" fill="rgb(231,73,38)"/><text x="19.5310%" y="143.50"></text></g><g><title>misc_checking_3 (2,373,447 samples, 0.23%)</title><rect x="19.2314%" y="149" width="0.2342%" height="15" fill="rgb(225,20,46)"/><text x="19.4814%" y="159.50"></text></g><g><title>coherent_trait (1,121,362 samples, 0.11%)</title><rect x="19.4732%" y="117" width="0.1107%" height="15" fill="rgb(210,31,41)"/><text x="19.7232%" y="127.50"></text></g><g><title>specialization_graph_of (1,112,002 samples, 0.11%)</title><rect x="19.4741%" y="101" width="0.1097%" height="15" fill="rgb(221,200,47)"/><text x="19.7241%" y="111.50"></text></g><g><title>coherence_checking (1,173,033 samples, 0.12%)</title><rect x="19.4721%" y="133" width="0.1158%" height="15" fill="rgb(226,26,5)"/><text x="19.7221%" y="143.50"></text></g><g><title>associated_items (1,287,664 samples, 0.13%)</title><rect x="22.2008%" y="85" width="0.1271%" height="15" fill="rgb(249,33,26)"/><text x="22.4508%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,827,080 samples, 0.18%)</title><rect x="22.8726%" y="69" width="0.1803%" height="15" fill="rgb(235,183,28)"/><text x="23.1226%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,781,810 samples, 0.18%)</title><rect x="22.8770%" y="53" width="0.1758%" height="15" fill="rgb(221,5,38)"/><text x="23.1270%" y="63.50"></text></g><g><title>eval_to_allocation_raw (1,741,509 samples, 0.17%)</title><rect x="22.8810%" y="37" width="0.1718%" height="15" fill="rgb(247,18,42)"/><text x="23.1310%" y="47.50"></text></g><g><title>impl_trait_ref (1,456,410 samples, 0.14%)</title><rect x="23.1650%" y="69" width="0.1437%" height="15" fill="rgb(241,131,45)"/><text x="23.4150%" y="79.50"></text></g><g><title>specializes (1,683,678 samples, 0.17%)</title><rect x="23.3874%" y="69" width="0.1661%" height="15" fill="rgb(249,31,29)"/><text x="23.6374%" y="79.50"></text></g><g><title>param_env (1,023,382 samples, 0.10%)</title><rect x="23.4525%" y="53" width="0.1010%" height="15" fill="rgb(225,111,53)"/><text x="23.7025%" y="63.50"></text></g><g><title>trait_impls_of (1,110,859 samples, 0.11%)</title><rect x="23.5560%" y="69" width="0.1096%" height="15" fill="rgb(238,160,17)"/><text x="23.8060%" y="79.50"></text></g><g><title>evaluate_obligation (13,069,641 samples, 1.29%)</title><rect x="22.3785%" y="85" width="1.2897%" height="15" fill="rgb(214,148,48)"/><text x="22.6285%" y="95.50"></text></g><g><title>generics_of (1,669,425 samples, 0.16%)</title><rect x="23.6823%" y="85" width="0.1647%" height="15" fill="rgb(232,36,49)"/><text x="23.9323%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,297,799 samples, 0.13%)</title><rect x="23.7190%" y="69" width="0.1281%" height="15" fill="rgb(209,103,24)"/><text x="23.9690%" y="79.50"></text></g><g><title>impl_trait_ref (2,921,685 samples, 0.29%)</title><rect x="23.8682%" y="85" width="0.2883%" height="15" fill="rgb(229,88,8)"/><text x="24.1182%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,572,043 samples, 0.25%)</title><rect x="23.9027%" y="69" width="0.2538%" height="15" fill="rgb(213,181,19)"/><text x="24.1527%" y="79.50"></text></g><g><title>typeck (2,013,243 samples, 0.20%)</title><rect x="24.3283%" y="85" width="0.1987%" height="15" fill="rgb(254,191,54)"/><text x="24.5783%" y="95.50"></text></g><g><title>item_bodies_checking (50,093,997 samples, 4.94%)</title><rect x="19.5909%" y="133" width="4.9431%" height="15" fill="rgb(241,83,37)"/><text x="19.8409%" y="143.50">item_b..</text></g><g><title>typeck_item_bodies (50,091,097 samples, 4.94%)</title><rect x="19.5912%" y="117" width="4.9428%" height="15" fill="rgb(233,36,39)"/><text x="19.8412%" y="127.50">typeck..</text></g><g><title>typeck (49,974,534 samples, 4.93%)</title><rect x="19.6027%" y="101" width="4.9313%" height="15" fill="rgb(226,3,54)"/><text x="19.8527%" y="111.50">typeck</text></g><g><title>item_types_checking (1,332,385 samples, 0.13%)</title><rect x="24.5340%" y="133" width="0.1315%" height="15" fill="rgb(245,192,40)"/><text x="24.7840%" y="143.50"></text></g><g><title>check_mod_item_types (1,327,175 samples, 0.13%)</title><rect x="24.5345%" y="117" width="0.1310%" height="15" fill="rgb(238,167,29)"/><text x="24.7845%" y="127.50"></text></g><g><title>type_collecting (1,688,419 samples, 0.17%)</title><rect x="24.6656%" y="133" width="0.1666%" height="15" fill="rgb(232,182,51)"/><text x="24.9156%" y="143.50"></text></g><g><title>collect_mod_item_types (1,673,779 samples, 0.17%)</title><rect x="24.6670%" y="117" width="0.1652%" height="15" fill="rgb(231,60,39)"/><text x="24.9170%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,658,111 samples, 0.26%)</title><rect x="24.8515%" y="117" width="0.2623%" height="15" fill="rgb(208,69,12)"/><text x="25.1015%" y="127.50"></text></g><g><title>check_item_well_formed (1,947,023 samples, 0.19%)</title><rect x="25.1138%" y="117" width="0.1921%" height="15" fill="rgb(235,93,37)"/><text x="25.3638%" y="127.50"></text></g><g><title>analysis (91,543,526 samples, 9.03%)</title><rect x="16.4064%" y="165" width="9.0332%" height="15" fill="rgb(213,116,39)"/><text x="16.6564%" y="175.50">analysis</text></g><g><title>type_check_crate (60,540,924 samples, 5.97%)</title><rect x="19.4656%" y="149" width="5.9740%" height="15" fill="rgb(222,207,29)"/><text x="19.7156%" y="159.50">type_che..</text></g><g><title>wf_checking (6,147,599 samples, 0.61%)</title><rect x="24.8329%" y="133" width="0.6066%" height="15" fill="rgb(206,96,30)"/><text x="25.0829%" y="143.50"></text></g><g><title>check_trait_item_well_formed (1,353,874 samples, 0.13%)</title><rect x="25.3060%" y="117" width="0.1336%" height="15" fill="rgb(218,138,4)"/><text x="25.5560%" y="127.50"></text></g><g><title>layout_of (1,425,418 samples, 0.14%)</title><rect x="27.7735%" y="117" width="0.1407%" height="15" fill="rgb(250,191,14)"/><text x="28.0235%" y="127.50"></text></g><g><title>param_env (2,002,379 samples, 0.20%)</title><rect x="27.9142%" y="117" width="0.1976%" height="15" fill="rgb(239,60,40)"/><text x="28.1642%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,484,308 samples, 0.64%)</title><rect x="27.4923%" y="133" width="0.6398%" height="15" fill="rgb(206,27,48)"/><text x="27.7423%" y="143.50"></text></g><g><title>codegen_module (26,412,304 samples, 2.61%)</title><rect x="25.6290%" y="149" width="2.6063%" height="15" fill="rgb(225,35,8)"/><text x="25.8790%" y="159.50">co..</text></g><g><title>codegen_fn_attrs (1,373,997 samples, 0.14%)</title><rect x="28.3518%" y="101" width="0.1356%" height="15" fill="rgb(250,213,24)"/><text x="28.6018%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,226,268 samples, 0.22%)</title><rect x="28.9457%" y="85" width="0.2197%" height="15" fill="rgb(247,123,22)"/><text x="29.1957%" y="95.50"></text></g><g><title>optimized_mir (7,276,221 samples, 0.72%)</title><rect x="28.5381%" y="101" width="0.7180%" height="15" fill="rgb(231,138,38)"/><text x="28.7881%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,700,101 samples, 0.17%)</title><rect x="29.2982%" y="85" width="0.1678%" height="15" fill="rgb(231,145,46)"/><text x="29.5482%" y="95.50"></text></g><g><title>specialization_graph_of (1,456,416 samples, 0.14%)</title><rect x="29.5012%" y="85" width="0.1437%" height="15" fill="rgb(251,118,11)"/><text x="29.7512%" y="95.50"></text></g><g><title>resolve_instance (4,141,618 samples, 0.41%)</title><rect x="29.2561%" y="101" width="0.4087%" height="15" fill="rgb(217,147,25)"/><text x="29.5061%" y="111.50"></text></g><g><title>impl_trait_ref (1,659,499 samples, 0.16%)</title><rect x="29.9688%" y="53" width="0.1638%" height="15" fill="rgb(247,81,37)"/><text x="30.2188%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,375,066 samples, 0.14%)</title><rect x="29.9968%" y="37" width="0.1357%" height="15" fill="rgb(209,12,38)"/><text x="30.2468%" y="47.50"></text></g><g><title>specialization_graph_of (3,709,512 samples, 0.37%)</title><rect x="29.7666%" y="69" width="0.3660%" height="15" fill="rgb(227,1,9)"/><text x="30.0166%" y="79.50"></text></g><g><title>resolve_instance (3,926,375 samples, 0.39%)</title><rect x="29.7462%" y="85" width="0.3874%" height="15" fill="rgb(248,47,43)"/><text x="29.9962%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (19,191,927 samples, 1.89%)</title><rect x="28.2402%" y="117" width="1.8938%" height="15" fill="rgb(221,10,30)"/><text x="28.4902%" y="127.50">m..</text></g><g><title>vtable_entries (4,578,283 samples, 0.45%)</title><rect x="29.6822%" y="101" width="0.4518%" height="15" fill="rgb(210,229,1)"/><text x="29.9322%" y="111.50"></text></g><g><title>monomorphization_collector (19,294,398 samples, 1.90%)</title><rect x="28.2400%" y="133" width="1.9039%" height="15" fill="rgb(222,148,37)"/><text x="28.4900%" y="143.50">m..</text></g><g><title>collect_and_partition_mono_items (20,665,164 samples, 2.04%)</title><rect x="28.2361%" y="149" width="2.0392%" height="15" fill="rgb(234,67,33)"/><text x="28.4861%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,331,315 samples, 0.13%)</title><rect x="30.1439%" y="133" width="0.1314%" height="15" fill="rgb(247,98,35)"/><text x="30.3939%" y="143.50"></text></g><g><title>codegen_crate (49,058,605 samples, 4.84%)</title><rect x="25.4405%" y="165" width="4.8409%" height="15" fill="rgb(247,138,52)"/><text x="25.6905%" y="175.50">codege..</text></g><g><title>codegen_module_optimize (240,729,202 samples, 23.75%)</title><rect x="30.2814%" y="165" width="23.7543%" height="15" fill="rgb(213,79,30)"/><text x="30.5314%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (222,445,046 samples, 21.95%)</title><rect x="32.0857%" y="149" width="21.9501%" height="15" fill="rgb(246,177,23)"/><text x="32.3357%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (121,334,608 samples, 11.97%)</title><rect x="54.9819%" y="149" width="11.9729%" height="15" fill="rgb(230,62,27)"/><text x="55.2319%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (146,025,278 samples, 14.41%)</title><rect x="66.9548%" y="149" width="14.4092%" height="15" fill="rgb(216,154,8)"/><text x="67.2048%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (144,126,584 samples, 14.22%)</title><rect x="67.1421%" y="133" width="14.2219%" height="15" fill="rgb(244,35,45)"/><text x="67.3921%" y="143.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (10,001,190 samples, 0.99%)</title><rect x="81.3640%" y="149" width="0.9869%" height="15" fill="rgb(251,115,12)"/><text x="81.6140%" y="159.50"></text></g><g><title>codegen_module_perform_lto (287,569,545 samples, 28.38%)</title><rect x="54.0357%" y="165" width="28.3763%" height="15" fill="rgb(240,54,50)"/><text x="54.2857%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,460,798 samples, 0.24%)</title><rect x="84.2651%" y="117" width="0.2428%" height="15" fill="rgb(233,84,52)"/><text x="84.5151%" y="127.50"></text></g><g><title>macro_expand_crate (21,261,841 samples, 2.10%)</title><rect x="82.4572%" y="149" width="2.0980%" height="15" fill="rgb(207,117,47)"/><text x="82.7072%" y="159.50">m..</text></g><g><title>expand_crate (21,243,181 samples, 2.10%)</title><rect x="82.4591%" y="133" width="2.0962%" height="15" fill="rgb(249,43,39)"/><text x="82.7091%" y="143.50">e..</text></g><g><title>late_resolve_crate (1,744,160 samples, 0.17%)</title><rect x="84.5706%" y="133" width="0.1721%" height="15" fill="rgb(209,38,44)"/><text x="84.8206%" y="143.50"></text></g><g><title>configure_and_expand (23,714,428 samples, 2.34%)</title><rect x="82.4120%" y="165" width="2.3401%" height="15" fill="rgb(236,212,23)"/><text x="82.6620%" y="175.50">c..</text></g><g><title>resolve_crate (1,934,822 samples, 0.19%)</title><rect x="84.5611%" y="149" width="0.1909%" height="15" fill="rgb(242,79,21)"/><text x="84.8111%" y="159.50"></text></g><g><title>free_global_ctxt (5,872,167 samples, 0.58%)</title><rect x="84.8029%" y="165" width="0.5794%" height="15" fill="rgb(211,96,35)"/><text x="85.0529%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,560,349 samples, 0.15%)</title><rect x="85.7449%" y="133" width="0.1540%" height="15" fill="rgb(253,215,40)"/><text x="85.9949%" y="143.50"></text></g><g><title>optimized_mir (3,468,599 samples, 0.34%)</title><rect x="85.5574%" y="149" width="0.3423%" height="15" fill="rgb(211,81,21)"/><text x="85.8074%" y="159.50"></text></g><g><title>generate_crate_metadata (5,283,900 samples, 0.52%)</title><rect x="85.3823%" y="165" width="0.5214%" height="15" fill="rgb(208,190,38)"/><text x="85.6323%" y="175.50"></text></g><g><title>hir_lowering (2,891,742 samples, 0.29%)</title><rect x="85.9037%" y="165" width="0.2853%" height="15" fill="rgb(235,213,38)"/><text x="86.1537%" y="175.50"></text></g><g><title>finish_ongoing_codegen (133,706,902 samples, 13.19%)</title><rect x="86.1920%" y="149" width="13.1937%" height="15" fill="rgb(237,122,38)"/><text x="86.4420%" y="159.50">finish_ongoing_codeg..</text></g><g><title>link_crate (2,739,942 samples, 0.27%)</title><rect x="99.3857%" y="149" width="0.2704%" height="15" fill="rgb(244,218,35)"/><text x="99.6357%" y="159.50"></text></g><g><title>link_binary (2,368,677 samples, 0.23%)</title><rect x="99.4224%" y="133" width="0.2337%" height="15" fill="rgb(240,68,47)"/><text x="99.6724%" y="143.50"></text></g><g><title>link_rlib (1,389,516 samples, 0.14%)</title><rect x="99.5190%" y="117" width="0.1371%" height="15" fill="rgb(210,16,53)"/><text x="99.7690%" y="127.50"></text></g><g><title>link (136,493,604 samples, 13.47%)</title><rect x="86.1891%" y="165" width="13.4687%" height="15" fill="rgb(235,124,12)"/><text x="86.4391%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,326,046 samples, 0.23%)</title><rect x="99.7250%" y="165" width="0.2295%" height="15" fill="rgb(224,169,11)"/><text x="99.9750%" y="175.50"></text></g><g><title>all (1,013,414,393 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(250,166,2)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,013,414,393 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,216,29)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>