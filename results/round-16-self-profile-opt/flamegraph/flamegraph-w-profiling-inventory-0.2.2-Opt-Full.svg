<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,131,090 samples, 17.50%)</title><rect x="0.4235%" y="181" width="17.4980%" height="15" fill="rgb(227,0,7)"/><text x="0.6735%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (168,562 samples, 0.13%)</title><rect x="17.7882%" y="165" width="0.1333%" height="15" fill="rgb(217,0,24)"/><text x="18.0382%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (153,512 samples, 0.12%)</title><rect x="17.8001%" y="149" width="0.1214%" height="15" fill="rgb(221,193,54)"/><text x="18.0501%" y="159.50"></text></g><g><title>needs_drop_raw (257,536 samples, 0.20%)</title><rect x="20.0961%" y="69" width="0.2036%" height="15" fill="rgb(248,212,6)"/><text x="20.3461%" y="79.50"></text></g><g><title>is_copy_raw (232,866 samples, 0.18%)</title><rect x="20.1156%" y="53" width="0.1841%" height="15" fill="rgb(208,68,35)"/><text x="20.3656%" y="63.50"></text></g><g><title>evaluate_obligation (202,626 samples, 0.16%)</title><rect x="20.1395%" y="37" width="0.1602%" height="15" fill="rgb(232,128,0)"/><text x="20.3895%" y="47.50"></text></g><g><title>resolve_instance (175,491 samples, 0.14%)</title><rect x="20.2997%" y="69" width="0.1388%" height="15" fill="rgb(207,160,47)"/><text x="20.5497%" y="79.50"></text></g><g><title>mir_const (1,333,245 samples, 1.05%)</title><rect x="19.4717%" y="117" width="1.0541%" height="15" fill="rgb(228,23,34)"/><text x="19.7217%" y="127.50"></text></g><g><title>unsafety_check_result (1,158,753 samples, 0.92%)</title><rect x="19.6097%" y="101" width="0.9162%" height="15" fill="rgb(218,30,26)"/><text x="19.8597%" y="111.50"></text></g><g><title>mir_built (1,017,161 samples, 0.80%)</title><rect x="19.7216%" y="85" width="0.8042%" height="15" fill="rgb(220,122,19)"/><text x="19.9716%" y="95.50"></text></g><g><title>mir_const (137,842 samples, 0.11%)</title><rect x="20.6291%" y="101" width="0.1090%" height="15" fill="rgb(250,228,42)"/><text x="20.8791%" y="111.50"></text></g><g><title>mir_promoted (1,777,989 samples, 1.41%)</title><rect x="19.3528%" y="133" width="1.4058%" height="15" fill="rgb(240,193,28)"/><text x="19.6028%" y="143.50"></text></g><g><title>mir_const_qualif (294,323 samples, 0.23%)</title><rect x="20.5258%" y="117" width="0.2327%" height="15" fill="rgb(216,20,37)"/><text x="20.7758%" y="127.50"></text></g><g><title>MIR_borrow_checking (3,971,756 samples, 3.14%)</title><rect x="18.0480%" y="165" width="3.1403%" height="15" fill="rgb(206,188,39)"/><text x="18.2980%" y="175.50">MIR..</text></g><g><title>mir_borrowck (3,952,136 samples, 3.12%)</title><rect x="18.0635%" y="149" width="3.1248%" height="15" fill="rgb(217,207,13)"/><text x="18.3135%" y="159.50">mir..</text></g><g><title>type_op_prove_predicate (367,685 samples, 0.29%)</title><rect x="20.8976%" y="133" width="0.2907%" height="15" fill="rgb(231,73,38)"/><text x="21.1476%" y="143.50"></text></g><g><title>hir_module_items (136,191 samples, 0.11%)</title><rect x="21.2756%" y="165" width="0.1077%" height="15" fill="rgb(225,20,46)"/><text x="21.5256%" y="175.50"></text></g><g><title>should_inherit_track_caller (152,862 samples, 0.12%)</title><rect x="21.6266%" y="117" width="0.1209%" height="15" fill="rgb(210,31,41)"/><text x="21.8766%" y="127.50"></text></g><g><title>codegen_fn_attrs (318,754 samples, 0.25%)</title><rect x="21.5088%" y="133" width="0.2520%" height="15" fill="rgb(221,200,47)"/><text x="21.7588%" y="143.50"></text></g><g><title>check_mod_attrs (454,946 samples, 0.36%)</title><rect x="21.4014%" y="149" width="0.3597%" height="15" fill="rgb(226,26,5)"/><text x="21.6514%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (265,533 samples, 0.21%)</title><rect x="21.8139%" y="149" width="0.2099%" height="15" fill="rgb(249,33,26)"/><text x="22.0639%" y="159.50"></text></g><g><title>misc_checking_1 (859,880 samples, 0.68%)</title><rect x="21.3835%" y="165" width="0.6799%" height="15" fill="rgb(235,183,28)"/><text x="21.6335%" y="175.50"></text></g><g><title>misc_checking_2 (195,462 samples, 0.15%)</title><rect x="22.0634%" y="165" width="0.1545%" height="15" fill="rgb(221,5,38)"/><text x="22.3134%" y="175.50"></text></g><g><title>death_checking (174,892 samples, 0.14%)</title><rect x="22.2717%" y="149" width="0.1383%" height="15" fill="rgb(247,18,42)"/><text x="22.5217%" y="159.50"></text></g><g><title>param_env (132,782 samples, 0.10%)</title><rect x="22.7043%" y="117" width="0.1050%" height="15" fill="rgb(241,131,45)"/><text x="22.9543%" y="127.50"></text></g><g><title>crate_lints (973,491 samples, 0.77%)</title><rect x="22.4110%" y="133" width="0.7697%" height="15" fill="rgb(249,31,29)"/><text x="22.6610%" y="143.50"></text></g><g><title>type_of (396,984 samples, 0.31%)</title><rect x="22.8669%" y="117" width="0.3139%" height="15" fill="rgb(225,111,53)"/><text x="23.1169%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (314,303 samples, 0.25%)</title><rect x="22.9322%" y="101" width="0.2485%" height="15" fill="rgb(238,160,17)"/><text x="23.1822%" y="111.50"></text></g><g><title>lint_checking (1,119,033 samples, 0.88%)</title><rect x="22.4100%" y="149" width="0.8848%" height="15" fill="rgb(214,148,48)"/><text x="22.6600%" y="159.50"></text></g><g><title>module_lints (144,252 samples, 0.11%)</title><rect x="23.1807%" y="133" width="0.1141%" height="15" fill="rgb(232,36,49)"/><text x="23.4307%" y="143.50"></text></g><g><title>lint_mod (140,212 samples, 0.11%)</title><rect x="23.1839%" y="117" width="0.1109%" height="15" fill="rgb(209,103,24)"/><text x="23.4339%" y="127.50"></text></g><g><title>privacy_checking_modules (213,412 samples, 0.17%)</title><rect x="23.3831%" y="149" width="0.1687%" height="15" fill="rgb(229,88,8)"/><text x="23.6331%" y="159.50"></text></g><g><title>check_mod_privacy (210,822 samples, 0.17%)</title><rect x="23.3852%" y="133" width="0.1667%" height="15" fill="rgb(213,181,19)"/><text x="23.6352%" y="143.50"></text></g><g><title>misc_checking_3 (1,699,729 samples, 1.34%)</title><rect x="22.2179%" y="165" width="1.3439%" height="15" fill="rgb(254,191,54)"/><text x="22.4679%" y="175.50"></text></g><g><title>impl_parent (286,024 samples, 0.23%)</title><rect x="24.2071%" y="101" width="0.2261%" height="15" fill="rgb(241,83,37)"/><text x="24.4571%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (163,211 samples, 0.13%)</title><rect x="24.3043%" y="85" width="0.1290%" height="15" fill="rgb(233,36,39)"/><text x="24.5543%" y="95.50"></text></g><g><title>impl_trait_ref (818,897 samples, 0.65%)</title><rect x="24.4333%" y="101" width="0.6475%" height="15" fill="rgb(226,3,54)"/><text x="24.6833%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (692,397 samples, 0.55%)</title><rect x="24.5333%" y="85" width="0.5474%" height="15" fill="rgb(245,192,40)"/><text x="24.7833%" y="95.50"></text></g><g><title>coherent_trait (2,046,724 samples, 1.62%)</title><rect x="23.5907%" y="133" width="1.6182%" height="15" fill="rgb(238,167,29)"/><text x="23.8407%" y="143.50"></text></g><g><title>specialization_graph_of (1,830,151 samples, 1.45%)</title><rect x="23.7619%" y="117" width="1.4470%" height="15" fill="rgb(232,182,51)"/><text x="24.0119%" y="127.50"></text></g><g><title>coherence_checking (2,084,764 samples, 1.65%)</title><rect x="23.5795%" y="149" width="1.6483%" height="15" fill="rgb(231,60,39)"/><text x="23.8295%" y="159.50"></text></g><g><title>dropck_outlives (173,021 samples, 0.14%)</title><rect x="27.4283%" y="101" width="0.1368%" height="15" fill="rgb(208,69,12)"/><text x="27.6783%" y="111.50"></text></g><g><title>evaluate_obligation (172,251 samples, 0.14%)</title><rect x="27.5651%" y="101" width="0.1362%" height="15" fill="rgb(235,93,37)"/><text x="27.8151%" y="111.50"></text></g><g><title>item_bodies_checking (3,625,581 samples, 2.87%)</title><rect x="25.2414%" y="149" width="2.8666%" height="15" fill="rgb(213,116,39)"/><text x="25.4914%" y="159.50">it..</text></g><g><title>typeck_item_bodies (3,624,261 samples, 2.87%)</title><rect x="25.2425%" y="133" width="2.8655%" height="15" fill="rgb(222,207,29)"/><text x="25.4925%" y="143.50">ty..</text></g><g><title>typeck (3,610,171 samples, 2.85%)</title><rect x="25.2536%" y="117" width="2.8544%" height="15" fill="rgb(206,96,30)"/><text x="25.5036%" y="127.50">ty..</text></g><g><title>item_types_checking (574,646 samples, 0.45%)</title><rect x="28.1080%" y="149" width="0.4543%" height="15" fill="rgb(218,138,4)"/><text x="28.3580%" y="159.50"></text></g><g><title>check_mod_item_types (570,946 samples, 0.45%)</title><rect x="28.1109%" y="133" width="0.4514%" height="15" fill="rgb(250,191,14)"/><text x="28.3609%" y="143.50"></text></g><g><title>fn_sig (155,551 samples, 0.12%)</title><rect x="28.6502%" y="117" width="0.1230%" height="15" fill="rgb(239,60,40)"/><text x="28.9002%" y="127.50"></text></g><g><title>explicit_predicates_of (126,811 samples, 0.10%)</title><rect x="28.8916%" y="85" width="0.1003%" height="15" fill="rgb(206,27,48)"/><text x="29.1416%" y="95.50"></text></g><g><title>predicates_of (524,966 samples, 0.42%)</title><rect x="28.8493%" y="117" width="0.4151%" height="15" fill="rgb(225,35,8)"/><text x="29.0993%" y="127.50"></text></g><g><title>predicates_defined_on (505,526 samples, 0.40%)</title><rect x="28.8647%" y="101" width="0.3997%" height="15" fill="rgb(250,213,24)"/><text x="29.1147%" y="111.50"></text></g><g><title>inferred_outlives_of (344,694 samples, 0.27%)</title><rect x="28.9919%" y="85" width="0.2725%" height="15" fill="rgb(247,123,22)"/><text x="29.2419%" y="95.50"></text></g><g><title>inferred_outlives_crate (332,614 samples, 0.26%)</title><rect x="29.0014%" y="69" width="0.2630%" height="15" fill="rgb(231,138,38)"/><text x="29.2514%" y="79.50"></text></g><g><title>type_of (243,882 samples, 0.19%)</title><rect x="29.0716%" y="53" width="0.1928%" height="15" fill="rgb(231,145,46)"/><text x="29.3216%" y="63.50"></text></g><g><title>type_collecting (966,171 samples, 0.76%)</title><rect x="28.5632%" y="149" width="0.7639%" height="15" fill="rgb(251,118,11)"/><text x="28.8132%" y="159.50"></text></g><g><title>collect_mod_item_types (957,981 samples, 0.76%)</title><rect x="28.5697%" y="133" width="0.7574%" height="15" fill="rgb(217,147,25)"/><text x="28.8197%" y="143.50"></text></g><g><title>evaluate_obligation (139,872 samples, 0.11%)</title><rect x="29.7030%" y="117" width="0.1106%" height="15" fill="rgb(247,81,37)"/><text x="29.9530%" y="127.50"></text></g><g><title>check_impl_item_well_formed (765,368 samples, 0.61%)</title><rect x="29.3756%" y="133" width="0.6051%" height="15" fill="rgb(209,12,38)"/><text x="29.6256%" y="143.50"></text></g><g><title>object_safety_violations (170,232 samples, 0.13%)</title><rect x="30.6651%" y="117" width="0.1346%" height="15" fill="rgb(227,1,9)"/><text x="30.9151%" y="127.50"></text></g><g><title>param_env (126,551 samples, 0.10%)</title><rect x="30.7997%" y="117" width="0.1001%" height="15" fill="rgb(248,47,43)"/><text x="31.0497%" y="127.50"></text></g><g><title>check_item_well_formed (1,250,005 samples, 0.99%)</title><rect x="29.9808%" y="133" width="0.9883%" height="15" fill="rgb(221,10,30)"/><text x="30.2308%" y="143.50"></text></g><g><title>analysis (16,655,008 samples, 13.17%)</title><rect x="17.9214%" y="181" width="13.1683%" height="15" fill="rgb(210,229,1)"/><text x="18.1714%" y="191.50">analysis</text></g><g><title>type_check_crate (9,521,197 samples, 7.53%)</title><rect x="23.5618%" y="165" width="7.5279%" height="15" fill="rgb(222,148,37)"/><text x="23.8118%" y="175.50">type_check..</text></g><g><title>wf_checking (2,228,225 samples, 1.76%)</title><rect x="29.3280%" y="149" width="1.7617%" height="15" fill="rgb(234,67,33)"/><text x="29.5780%" y="159.50"></text></g><g><title>check_trait_item_well_formed (152,582 samples, 0.12%)</title><rect x="30.9691%" y="133" width="0.1206%" height="15" fill="rgb(247,98,35)"/><text x="31.2191%" y="143.50"></text></g><g><title>is_freeze_raw (177,961 samples, 0.14%)</title><rect x="33.1016%" y="133" width="0.1407%" height="15" fill="rgb(247,138,52)"/><text x="33.3516%" y="143.50"></text></g><g><title>evaluate_obligation (158,061 samples, 0.12%)</title><rect x="33.1173%" y="117" width="0.1250%" height="15" fill="rgb(213,79,30)"/><text x="33.3673%" y="127.50"></text></g><g><title>layout_of (158,882 samples, 0.13%)</title><rect x="33.2423%" y="133" width="0.1256%" height="15" fill="rgb(246,177,23)"/><text x="33.4923%" y="143.50"></text></g><g><title>param_env (272,052 samples, 0.22%)</title><rect x="33.3679%" y="133" width="0.2151%" height="15" fill="rgb(230,62,27)"/><text x="33.6179%" y="143.50"></text></g><g><title>fn_abi_of_instance (867,957 samples, 0.69%)</title><rect x="32.8997%" y="149" width="0.6863%" height="15" fill="rgb(216,154,8)"/><text x="33.1497%" y="159.50"></text></g><g><title>codegen_module (2,840,612 samples, 2.25%)</title><rect x="31.4944%" y="165" width="2.2459%" height="15" fill="rgb(244,35,45)"/><text x="31.7444%" y="175.50">c..</text></g><g><title>metadata_decode_entry_optimized_mir (235,252 samples, 0.19%)</title><rect x="34.1534%" y="101" width="0.1860%" height="15" fill="rgb(251,115,12)"/><text x="34.4034%" y="111.50"></text></g><g><title>optimized_mir (563,656 samples, 0.45%)</title><rect x="33.9841%" y="117" width="0.4457%" height="15" fill="rgb(240,54,50)"/><text x="34.2341%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,291,934 samples, 1.02%)</title><rect x="33.7573%" y="133" width="1.0215%" height="15" fill="rgb(233,84,52)"/><text x="34.0073%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (339,915 samples, 0.27%)</title><rect x="34.5100%" y="117" width="0.2688%" height="15" fill="rgb(207,117,47)"/><text x="34.7600%" y="127.50"></text></g><g><title>eval_to_const_value_raw (290,435 samples, 0.23%)</title><rect x="34.5491%" y="101" width="0.2296%" height="15" fill="rgb(249,43,39)"/><text x="34.7991%" y="111.50"></text></g><g><title>eval_to_const_value_raw (280,615 samples, 0.22%)</title><rect x="34.5569%" y="85" width="0.2219%" height="15" fill="rgb(209,38,44)"/><text x="34.8069%" y="95.50"></text></g><g><title>eval_to_allocation_raw (266,224 samples, 0.21%)</title><rect x="34.5683%" y="69" width="0.2105%" height="15" fill="rgb(236,212,23)"/><text x="34.8183%" y="79.50"></text></g><g><title>monomorphization_collector (1,316,084 samples, 1.04%)</title><rect x="33.7560%" y="149" width="1.0406%" height="15" fill="rgb(242,79,21)"/><text x="34.0060%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,503,696 samples, 1.19%)</title><rect x="33.7406%" y="165" width="1.1889%" height="15" fill="rgb(211,96,35)"/><text x="33.9906%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (168,211 samples, 0.13%)</title><rect x="34.7965%" y="149" width="0.1330%" height="15" fill="rgb(253,215,40)"/><text x="35.0465%" y="159.50"></text></g><g><title>codegen_crate (4,862,805 samples, 3.84%)</title><rect x="31.0971%" y="181" width="3.8448%" height="15" fill="rgb(211,81,21)"/><text x="31.3471%" y="191.50">code..</text></g><g><title>codegen_module_optimize (14,233,302 samples, 11.25%)</title><rect x="34.9419%" y="181" width="11.2536%" height="15" fill="rgb(208,190,38)"/><text x="35.1919%" y="191.50">codegen_module_op..</text></g><g><title>LLVM_module_optimize (13,079,498 samples, 10.34%)</title><rect x="35.8541%" y="165" width="10.3413%" height="15" fill="rgb(235,213,38)"/><text x="36.1041%" y="175.50">LLVM_module_opt..</text></g><g><title>LLVM_lto_optimize (4,022,355 samples, 3.18%)</title><rect x="46.8144%" y="165" width="3.1803%" height="15" fill="rgb(237,122,38)"/><text x="47.0644%" y="175.50">LLV..</text></g><g><title>LLVM_module_codegen (10,074,024 samples, 7.97%)</title><rect x="49.9947%" y="165" width="7.9650%" height="15" fill="rgb(244,218,35)"/><text x="50.2447%" y="175.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (9,881,561 samples, 7.81%)</title><rect x="50.1469%" y="149" width="7.8129%" height="15" fill="rgb(240,68,47)"/><text x="50.3969%" y="159.50">LLVM_module..</text></g><g><title>codegen_module_perform_lto (14,946,639 samples, 11.82%)</title><rect x="46.1955%" y="181" width="11.8176%" height="15" fill="rgb(210,16,53)"/><text x="46.4455%" y="191.50">codegen_module_per..</text></g><g><title>AST_validation (142,212 samples, 0.11%)</title><rect x="58.1413%" y="165" width="0.1124%" height="15" fill="rgb(235,124,12)"/><text x="58.3913%" y="175.50"></text></g><g><title>macro_expand_crate (23,106,881 samples, 18.27%)</title><rect x="58.3362%" y="165" width="18.2695%" height="15" fill="rgb(224,169,11)"/><text x="58.5862%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (23,085,881 samples, 18.25%)</title><rect x="58.3529%" y="149" width="18.2529%" height="15" fill="rgb(250,166,2)"/><text x="58.6029%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (13,121,239 samples, 10.37%)</title><rect x="66.2314%" y="133" width="10.3743%" height="15" fill="rgb(242,216,29)"/><text x="66.4814%" y="143.50">metadata_regist..</text></g><g><title>pre_AST_expansion_lint_checks (195,363 samples, 0.15%)</title><rect x="76.6095%" y="165" width="0.1545%" height="15" fill="rgb(230,116,27)"/><text x="76.8595%" y="175.50"></text></g><g><title>late_resolve_crate (860,309 samples, 0.68%)</title><rect x="76.8733%" y="149" width="0.6802%" height="15" fill="rgb(228,99,48)"/><text x="77.1233%" y="159.50"></text></g><g><title>configure_and_expand (24,794,891 samples, 19.60%)</title><rect x="58.0130%" y="181" width="19.6041%" height="15" fill="rgb(253,11,6)"/><text x="58.2630%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,079,122 samples, 0.85%)</title><rect x="76.7639%" y="165" width="0.8532%" height="15" fill="rgb(247,143,39)"/><text x="77.0139%" y="175.50"></text></g><g><title>early_lint_checks (256,233 samples, 0.20%)</title><rect x="77.6966%" y="181" width="0.2026%" height="15" fill="rgb(236,97,10)"/><text x="77.9466%" y="191.50"></text></g><g><title>free_global_ctxt (1,319,155 samples, 1.04%)</title><rect x="77.8992%" y="181" width="1.0430%" height="15" fill="rgb(233,208,19)"/><text x="78.1492%" y="191.50"></text></g><g><title>layout_of (164,401 samples, 0.13%)</title><rect x="79.8288%" y="149" width="0.1300%" height="15" fill="rgb(216,164,2)"/><text x="80.0788%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (246,695 samples, 0.20%)</title><rect x="79.9588%" y="149" width="0.1950%" height="15" fill="rgb(220,129,5)"/><text x="80.2088%" y="159.50"></text></g><g><title>optimized_mir (747,500 samples, 0.59%)</title><rect x="79.5736%" y="165" width="0.5910%" height="15" fill="rgb(242,17,10)"/><text x="79.8236%" y="175.50"></text></g><g><title>generate_crate_metadata (1,580,588 samples, 1.25%)</title><rect x="78.9422%" y="181" width="1.2497%" height="15" fill="rgb(242,107,0)"/><text x="79.1922%" y="191.50"></text></g><g><title>hir_lowering (1,395,395 samples, 1.10%)</title><rect x="80.1919%" y="181" width="1.1033%" height="15" fill="rgb(251,28,31)"/><text x="80.4419%" y="191.50"></text></g><g><title>finish_ongoing_codegen (20,167,878 samples, 15.95%)</title><rect x="81.3046%" y="165" width="15.9458%" height="15" fill="rgb(233,223,10)"/><text x="81.5546%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (632,227 samples, 0.50%)</title><rect x="97.2504%" y="165" width="0.4999%" height="15" fill="rgb(215,21,27)"/><text x="97.5004%" y="175.50"></text></g><g><title>link_binary (626,697 samples, 0.50%)</title><rect x="97.2547%" y="149" width="0.4955%" height="15" fill="rgb(232,23,21)"/><text x="97.5047%" y="159.50"></text></g><g><title>link_rlib (384,414 samples, 0.30%)</title><rect x="97.4463%" y="133" width="0.3039%" height="15" fill="rgb(244,5,23)"/><text x="97.6963%" y="143.50"></text></g><g><title>link (20,818,675 samples, 16.46%)</title><rect x="81.2952%" y="181" width="16.4603%" height="15" fill="rgb(226,81,46)"/><text x="81.5452%" y="191.50">link</text></g><g><title>parse_crate (1,753,060 samples, 1.39%)</title><rect x="97.7555%" y="181" width="1.3861%" height="15" fill="rgb(247,70,30)"/><text x="98.0055%" y="191.50"></text></g><g><title>prepare_outputs (273,943 samples, 0.22%)</title><rect x="99.1473%" y="181" width="0.2166%" height="15" fill="rgb(212,68,19)"/><text x="99.3973%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (409,585 samples, 0.32%)</title><rect x="99.3639%" y="181" width="0.3238%" height="15" fill="rgb(240,187,13)"/><text x="99.6139%" y="191.50"></text></g><g><title>all (126,478,041 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (126,478,041 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (312,064 samples, 0.25%)</title><rect x="99.7533%" y="181" width="0.2467%" height="15" fill="rgb(241,108,4)"/><text x="100.0033%" y="191.50"></text></g></svg></svg>