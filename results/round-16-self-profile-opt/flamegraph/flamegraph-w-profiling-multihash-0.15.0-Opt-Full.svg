<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (325,663,902 samples, 13.27%)</title><rect x="0.0434%" y="181" width="13.2653%" height="15" fill="rgb(227,0,7)"/><text x="0.2934%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (4,984,489 samples, 0.20%)</title><rect x="15.3810%" y="53" width="0.2030%" height="15" fill="rgb(217,0,24)"/><text x="15.6310%" y="63.50"></text></g><g><title>evaluate_obligation (4,528,824 samples, 0.18%)</title><rect x="15.3996%" y="37" width="0.1845%" height="15" fill="rgb(221,193,54)"/><text x="15.6496%" y="47.50"></text></g><g><title>needs_drop_raw (6,084,398 samples, 0.25%)</title><rect x="15.3410%" y="69" width="0.2478%" height="15" fill="rgb(248,212,6)"/><text x="15.5910%" y="79.50"></text></g><g><title>resolve_instance (3,298,906 samples, 0.13%)</title><rect x="15.5900%" y="69" width="0.1344%" height="15" fill="rgb(208,68,35)"/><text x="15.8400%" y="79.50"></text></g><g><title>thir_body (2,693,249 samples, 0.11%)</title><rect x="15.7279%" y="69" width="0.1097%" height="15" fill="rgb(232,128,0)"/><text x="15.9779%" y="79.50"></text></g><g><title>mir_const (24,706,068 samples, 1.01%)</title><rect x="14.8338%" y="117" width="1.0064%" height="15" fill="rgb(207,160,47)"/><text x="15.0838%" y="127.50"></text></g><g><title>unsafety_check_result (22,088,801 samples, 0.90%)</title><rect x="14.9404%" y="101" width="0.8997%" height="15" fill="rgb(228,23,34)"/><text x="15.1904%" y="111.50"></text></g><g><title>mir_built (20,366,569 samples, 0.83%)</title><rect x="15.0106%" y="85" width="0.8296%" height="15" fill="rgb(218,30,26)"/><text x="15.2606%" y="95.50"></text></g><g><title>mir_promoted (27,215,601 samples, 1.11%)</title><rect x="14.7383%" y="133" width="1.1086%" height="15" fill="rgb(220,122,19)"/><text x="14.9883%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,905,303 samples, 0.24%)</title><rect x="16.0246%" y="133" width="0.2405%" height="15" fill="rgb(250,228,42)"/><text x="16.2746%" y="143.50"></text></g><g><title>MIR_borrow_checking (71,820,606 samples, 2.93%)</title><rect x="13.3401%" y="165" width="2.9255%" height="15" fill="rgb(240,193,28)"/><text x="13.5901%" y="175.50">MI..</text></g><g><title>mir_borrowck (71,390,620 samples, 2.91%)</title><rect x="13.3576%" y="149" width="2.9080%" height="15" fill="rgb(216,20,37)"/><text x="13.6076%" y="159.50">mi..</text></g><g><title>misc_checking_1 (3,128,125 samples, 0.13%)</title><rect x="16.2967%" y="165" width="0.1274%" height="15" fill="rgb(206,188,39)"/><text x="16.5467%" y="175.50"></text></g><g><title>misc_checking_2 (2,884,252 samples, 0.12%)</title><rect x="16.4241%" y="165" width="0.1175%" height="15" fill="rgb(217,207,13)"/><text x="16.6741%" y="175.50"></text></g><g><title>crate_lints (3,518,000 samples, 0.14%)</title><rect x="16.6325%" y="133" width="0.1433%" height="15" fill="rgb(231,73,38)"/><text x="16.8825%" y="143.50"></text></g><g><title>lint_checking (4,803,094 samples, 0.20%)</title><rect x="16.6324%" y="149" width="0.1956%" height="15" fill="rgb(225,20,46)"/><text x="16.8824%" y="159.50"></text></g><g><title>privacy_checking_modules (3,079,285 samples, 0.13%)</title><rect x="16.8765%" y="149" width="0.1254%" height="15" fill="rgb(210,31,41)"/><text x="17.1265%" y="159.50"></text></g><g><title>check_mod_privacy (3,069,315 samples, 0.13%)</title><rect x="16.8769%" y="133" width="0.1250%" height="15" fill="rgb(221,200,47)"/><text x="17.1269%" y="143.50"></text></g><g><title>misc_checking_3 (11,335,338 samples, 0.46%)</title><rect x="16.5416%" y="165" width="0.4617%" height="15" fill="rgb(226,26,5)"/><text x="16.7916%" y="175.50"></text></g><g><title>impl_parent (3,438,995 samples, 0.14%)</title><rect x="17.3107%" y="101" width="0.1401%" height="15" fill="rgb(249,33,26)"/><text x="17.5607%" y="111.50"></text></g><g><title>impl_trait_ref (6,936,018 samples, 0.28%)</title><rect x="17.4508%" y="101" width="0.2825%" height="15" fill="rgb(235,183,28)"/><text x="17.7008%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,371,147 samples, 0.22%)</title><rect x="17.5145%" y="85" width="0.2188%" height="15" fill="rgb(221,5,38)"/><text x="17.7645%" y="95.50"></text></g><g><title>coherent_trait (19,115,044 samples, 0.78%)</title><rect x="17.0137%" y="133" width="0.7786%" height="15" fill="rgb(247,18,42)"/><text x="17.2637%" y="143.50"></text></g><g><title>specialization_graph_of (18,368,706 samples, 0.75%)</title><rect x="17.0441%" y="117" width="0.7482%" height="15" fill="rgb(241,131,45)"/><text x="17.2941%" y="127.50"></text></g><g><title>coherence_checking (19,332,016 samples, 0.79%)</title><rect x="17.0124%" y="149" width="0.7875%" height="15" fill="rgb(249,31,29)"/><text x="17.2624%" y="159.50"></text></g><g><title>dropck_outlives (3,314,985 samples, 0.14%)</title><rect x="20.5848%" y="101" width="0.1350%" height="15" fill="rgb(225,111,53)"/><text x="20.8348%" y="111.50"></text></g><g><title>evaluate_obligation (7,257,774 samples, 0.30%)</title><rect x="20.7276%" y="101" width="0.2956%" height="15" fill="rgb(238,160,17)"/><text x="20.9776%" y="111.50"></text></g><g><title>item_bodies_checking (82,525,465 samples, 3.36%)</title><rect x="17.8064%" y="149" width="3.3615%" height="15" fill="rgb(214,148,48)"/><text x="18.0564%" y="159.50">ite..</text></g><g><title>typeck_item_bodies (82,522,705 samples, 3.36%)</title><rect x="17.8065%" y="133" width="3.3614%" height="15" fill="rgb(232,36,49)"/><text x="18.0565%" y="143.50">typ..</text></g><g><title>typeck (82,189,913 samples, 3.35%)</title><rect x="17.8200%" y="117" width="3.3478%" height="15" fill="rgb(209,103,24)"/><text x="18.0700%" y="127.50">typ..</text></g><g><title>evaluate_obligation (3,253,666 samples, 0.13%)</title><rect x="21.5455%" y="117" width="0.1325%" height="15" fill="rgb(229,88,8)"/><text x="21.7955%" y="127.50"></text></g><g><title>item_types_checking (12,928,215 samples, 0.53%)</title><rect x="21.1679%" y="149" width="0.5266%" height="15" fill="rgb(213,181,19)"/><text x="21.4179%" y="159.50"></text></g><g><title>check_mod_item_types (12,915,105 samples, 0.53%)</title><rect x="21.1684%" y="133" width="0.5261%" height="15" fill="rgb(254,191,54)"/><text x="21.4184%" y="143.50"></text></g><g><title>predicates_of (3,273,006 samples, 0.13%)</title><rect x="21.8603%" y="117" width="0.1333%" height="15" fill="rgb(241,83,37)"/><text x="22.1103%" y="127.50"></text></g><g><title>predicates_defined_on (2,796,872 samples, 0.11%)</title><rect x="21.8797%" y="101" width="0.1139%" height="15" fill="rgb(233,36,39)"/><text x="22.1297%" y="111.50"></text></g><g><title>type_collecting (8,001,020 samples, 0.33%)</title><rect x="21.6948%" y="149" width="0.3259%" height="15" fill="rgb(226,3,54)"/><text x="21.9448%" y="159.50"></text></g><g><title>collect_mod_item_types (7,981,290 samples, 0.33%)</title><rect x="21.6956%" y="133" width="0.3251%" height="15" fill="rgb(245,192,40)"/><text x="21.9456%" y="143.50"></text></g><g><title>evaluate_obligation (3,483,650 samples, 0.14%)</title><rect x="22.5341%" y="117" width="0.1419%" height="15" fill="rgb(238,167,29)"/><text x="22.7841%" y="127.50"></text></g><g><title>param_env (2,727,170 samples, 0.11%)</title><rect x="22.7262%" y="117" width="0.1111%" height="15" fill="rgb(232,182,51)"/><text x="22.9762%" y="127.50"></text></g><g><title>check_impl_item_well_formed (20,392,975 samples, 0.83%)</title><rect x="22.0591%" y="133" width="0.8307%" height="15" fill="rgb(231,60,39)"/><text x="22.3091%" y="143.50"></text></g><g><title>evaluate_obligation (2,541,782 samples, 0.10%)</title><rect x="23.4658%" y="117" width="0.1035%" height="15" fill="rgb(208,69,12)"/><text x="23.7158%" y="127.50"></text></g><g><title>param_env (2,470,242 samples, 0.10%)</title><rect x="23.6083%" y="117" width="0.1006%" height="15" fill="rgb(235,93,37)"/><text x="23.8583%" y="127.50"></text></g><g><title>check_item_well_formed (20,765,907 samples, 0.85%)</title><rect x="22.8898%" y="133" width="0.8459%" height="15" fill="rgb(213,116,39)"/><text x="23.1398%" y="143.50"></text></g><g><title>analysis (258,115,915 samples, 10.51%)</title><rect x="13.3087%" y="181" width="10.5138%" height="15" fill="rgb(222,207,29)"/><text x="13.5587%" y="191.50">analysis</text></g><g><title>type_check_crate (167,413,688 samples, 6.82%)</title><rect x="17.0033%" y="165" width="6.8193%" height="15" fill="rgb(206,96,30)"/><text x="17.2533%" y="175.50">type_chec..</text></g><g><title>wf_checking (44,217,367 samples, 1.80%)</title><rect x="22.0215%" y="149" width="1.8011%" height="15" fill="rgb(218,138,4)"/><text x="22.2715%" y="159.50">w..</text></g><g><title>is_freeze_raw (3,038,174 samples, 0.12%)</title><rect x="26.8893%" y="133" width="0.1238%" height="15" fill="rgb(250,191,14)"/><text x="27.1393%" y="143.50"></text></g><g><title>evaluate_obligation (2,751,514 samples, 0.11%)</title><rect x="26.9010%" y="117" width="0.1121%" height="15" fill="rgb(239,60,40)"/><text x="27.1510%" y="127.50"></text></g><g><title>is_unpin_raw (3,432,330 samples, 0.14%)</title><rect x="27.0131%" y="133" width="0.1398%" height="15" fill="rgb(206,27,48)"/><text x="27.2631%" y="143.50"></text></g><g><title>evaluate_obligation (3,081,927 samples, 0.13%)</title><rect x="27.0273%" y="117" width="0.1255%" height="15" fill="rgb(225,35,8)"/><text x="27.2773%" y="127.50"></text></g><g><title>param_env (4,836,164 samples, 0.20%)</title><rect x="27.2212%" y="133" width="0.1970%" height="15" fill="rgb(250,213,24)"/><text x="27.4712%" y="143.50"></text></g><g><title>fn_abi_of_instance (22,572,017 samples, 0.92%)</title><rect x="26.5881%" y="149" width="0.9194%" height="15" fill="rgb(247,123,22)"/><text x="26.8381%" y="159.50"></text></g><g><title>codegen_module (91,962,120 samples, 3.75%)</title><rect x="23.9176%" y="165" width="3.7459%" height="15" fill="rgb(231,138,38)"/><text x="24.1676%" y="175.50">code..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,129,096 samples, 0.13%)</title><rect x="28.2996%" y="101" width="0.1275%" height="15" fill="rgb(231,145,46)"/><text x="28.5496%" y="111.50"></text></g><g><title>optimized_mir (10,630,630 samples, 0.43%)</title><rect x="28.0075%" y="117" width="0.4330%" height="15" fill="rgb(251,118,11)"/><text x="28.2575%" y="127.50"></text></g><g><title>evaluate_obligation (3,143,932 samples, 0.13%)</title><rect x="28.8413%" y="85" width="0.1281%" height="15" fill="rgb(217,147,25)"/><text x="29.0913%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (11,697,990 samples, 0.48%)</title><rect x="28.5353%" y="101" width="0.4765%" height="15" fill="rgb(247,81,37)"/><text x="28.7853%" y="111.50"></text></g><g><title>resolve_instance (18,835,337 samples, 0.77%)</title><rect x="28.4405%" y="117" width="0.7672%" height="15" fill="rgb(209,12,38)"/><text x="28.6905%" y="127.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,854,162 samples, 0.16%)</title><rect x="29.2078%" y="117" width="0.1570%" height="15" fill="rgb(227,1,9)"/><text x="29.4578%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (44,204,345 samples, 1.80%)</title><rect x="27.6658%" y="133" width="1.8006%" height="15" fill="rgb(248,47,43)"/><text x="27.9158%" y="143.50">m..</text></g><g><title>monomorphization_collector (44,366,527 samples, 1.81%)</title><rect x="27.6657%" y="149" width="1.8072%" height="15" fill="rgb(221,10,30)"/><text x="27.9157%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (3,742,882 samples, 0.15%)</title><rect x="29.4730%" y="133" width="0.1525%" height="15" fill="rgb(210,229,1)"/><text x="29.7230%" y="143.50"></text></g><g><title>symbol_name (3,346,344 samples, 0.14%)</title><rect x="29.4892%" y="117" width="0.1363%" height="15" fill="rgb(222,148,37)"/><text x="29.7392%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (49,435,454 samples, 2.01%)</title><rect x="27.6639%" y="165" width="2.0137%" height="15" fill="rgb(234,67,33)"/><text x="27.9139%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (5,024,557 samples, 0.20%)</title><rect x="29.4729%" y="149" width="0.2047%" height="15" fill="rgb(247,98,35)"/><text x="29.7229%" y="159.50"></text></g><g><title>codegen_crate (143,839,653 samples, 5.86%)</title><rect x="23.8230%" y="181" width="5.8590%" height="15" fill="rgb(247,138,52)"/><text x="24.0730%" y="191.50">codegen..</text></g><g><title>codegen_module_optimize (529,231,184 samples, 21.56%)</title><rect x="29.6820%" y="181" width="21.5572%" height="15" fill="rgb(213,79,30)"/><text x="29.9320%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (498,776,583 samples, 20.32%)</title><rect x="30.9225%" y="165" width="20.3167%" height="15" fill="rgb(246,177,23)"/><text x="31.1725%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (460,812,739 samples, 18.77%)</title><rect x="52.1581%" y="165" width="18.7703%" height="15" fill="rgb(230,62,27)"/><text x="52.4081%" y="175.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (261,478,404 samples, 10.65%)</title><rect x="70.9284%" y="165" width="10.6508%" height="15" fill="rgb(216,154,8)"/><text x="71.1784%" y="175.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (257,577,138 samples, 10.49%)</title><rect x="71.0873%" y="149" width="10.4919%" height="15" fill="rgb(244,35,45)"/><text x="71.3373%" y="159.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (70,140,577 samples, 2.86%)</title><rect x="81.5792%" y="165" width="2.8570%" height="15" fill="rgb(251,115,12)"/><text x="81.8292%" y="175.50">LL..</text></g><g><title>codegen_module_perform_lto (816,451,466 samples, 33.26%)</title><rect x="51.2392%" y="181" width="33.2566%" height="15" fill="rgb(240,54,50)"/><text x="51.4892%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (16,055,840 samples, 0.65%)</title><rect x="86.7942%" y="133" width="0.6540%" height="15" fill="rgb(233,84,52)"/><text x="87.0442%" y="143.50"></text></g><g><title>macro_expand_crate (72,177,399 samples, 2.94%)</title><rect x="84.5294%" y="165" width="2.9400%" height="15" fill="rgb(207,117,47)"/><text x="84.7794%" y="175.50">ma..</text></g><g><title>expand_crate (72,164,369 samples, 2.94%)</title><rect x="84.5299%" y="149" width="2.9395%" height="15" fill="rgb(249,43,39)"/><text x="84.7799%" y="159.50">ex..</text></g><g><title>late_resolve_crate (6,090,148 samples, 0.25%)</title><rect x="87.4973%" y="149" width="0.2481%" height="15" fill="rgb(209,38,44)"/><text x="87.7473%" y="159.50"></text></g><g><title>configure_and_expand (80,088,919 samples, 3.26%)</title><rect x="84.4958%" y="181" width="3.2623%" height="15" fill="rgb(236,212,23)"/><text x="84.7458%" y="191.50">con..</text></g><g><title>resolve_crate (6,996,589 samples, 0.28%)</title><rect x="87.4730%" y="165" width="0.2850%" height="15" fill="rgb(242,79,21)"/><text x="87.7230%" y="175.50"></text></g><g><title>free_global_ctxt (8,263,983 samples, 0.34%)</title><rect x="87.8188%" y="181" width="0.3366%" height="15" fill="rgb(211,96,35)"/><text x="88.0688%" y="191.50"></text></g><g><title>layout_of (3,600,681 samples, 0.15%)</title><rect x="88.6926%" y="149" width="0.1467%" height="15" fill="rgb(253,215,40)"/><text x="88.9426%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,199,853 samples, 0.33%)</title><rect x="88.8393%" y="149" width="0.3340%" height="15" fill="rgb(211,81,21)"/><text x="89.0893%" y="159.50"></text></g><g><title>optimized_mir (18,288,905 samples, 0.74%)</title><rect x="88.4350%" y="165" width="0.7450%" height="15" fill="rgb(208,190,38)"/><text x="88.6850%" y="175.50"></text></g><g><title>generate_crate_metadata (25,343,024 samples, 1.03%)</title><rect x="88.1554%" y="181" width="1.0323%" height="15" fill="rgb(235,213,38)"/><text x="88.4054%" y="191.50"></text></g><g><title>hir_lowering (10,228,545 samples, 0.42%)</title><rect x="89.1877%" y="181" width="0.4166%" height="15" fill="rgb(237,122,38)"/><text x="89.4377%" y="191.50"></text></g><g><title>finish_ongoing_codegen (248,164,483 samples, 10.11%)</title><rect x="89.6049%" y="165" width="10.1085%" height="15" fill="rgb(244,218,35)"/><text x="89.8549%" y="175.50">finish_ongoing_..</text></g><g><title>link (250,402,809 samples, 10.20%)</title><rect x="89.6043%" y="181" width="10.1997%" height="15" fill="rgb(240,68,47)"/><text x="89.8543%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (3,285,067 samples, 0.13%)</title><rect x="99.8397%" y="181" width="0.1338%" height="15" fill="rgb(210,16,53)"/><text x="100.0897%" y="191.50"></text></g><g><title>all (2,455,008,751 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,455,008,751 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>