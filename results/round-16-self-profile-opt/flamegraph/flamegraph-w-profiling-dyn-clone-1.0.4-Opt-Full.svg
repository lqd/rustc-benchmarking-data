<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,457,360 samples, 10.91%)</title><rect x="1.4298%" y="245" width="10.9122%" height="15" fill="rgb(227,0,7)"/><text x="1.6798%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (113,311 samples, 0.23%)</title><rect x="12.1154%" y="229" width="0.2266%" height="15" fill="rgb(217,0,24)"/><text x="12.3654%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (98,501 samples, 0.20%)</title><rect x="12.1451%" y="213" width="0.1970%" height="15" fill="rgb(221,193,54)"/><text x="12.3951%" y="223.50"></text></g><g><title>is_copy_raw (167,222 samples, 0.33%)</title><rect x="16.6464%" y="133" width="0.3344%" height="15" fill="rgb(248,212,6)"/><text x="16.8964%" y="143.50"></text></g><g><title>evaluate_obligation (150,562 samples, 0.30%)</title><rect x="16.6797%" y="117" width="0.3011%" height="15" fill="rgb(208,68,35)"/><text x="16.9297%" y="127.50"></text></g><g><title>explicit_predicates_of (91,321 samples, 0.18%)</title><rect x="17.2844%" y="53" width="0.1826%" height="15" fill="rgb(232,128,0)"/><text x="17.5344%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (90,081 samples, 0.18%)</title><rect x="17.2868%" y="37" width="0.1801%" height="15" fill="rgb(207,160,47)"/><text x="17.5368%" y="47.50"></text></g><g><title>predicates_of (100,202 samples, 0.20%)</title><rect x="17.2696%" y="85" width="0.2004%" height="15" fill="rgb(228,23,34)"/><text x="17.5196%" y="95.50"></text></g><g><title>predicates_defined_on (95,662 samples, 0.19%)</title><rect x="17.2787%" y="69" width="0.1913%" height="15" fill="rgb(218,30,26)"/><text x="17.5287%" y="79.50"></text></g><g><title>needs_drop_raw (317,314 samples, 0.63%)</title><rect x="16.9808%" y="133" width="0.6345%" height="15" fill="rgb(220,122,19)"/><text x="17.2308%" y="143.50"></text></g><g><title>is_copy_raw (299,424 samples, 0.60%)</title><rect x="17.0165%" y="117" width="0.5987%" height="15" fill="rgb(250,228,42)"/><text x="17.2665%" y="127.50"></text></g><g><title>evaluate_obligation (275,553 samples, 0.55%)</title><rect x="17.0643%" y="101" width="0.5510%" height="15" fill="rgb(240,193,28)"/><text x="17.3143%" y="111.50"></text></g><g><title>trait_impls_of (70,241 samples, 0.14%)</title><rect x="17.4748%" y="85" width="0.1404%" height="15" fill="rgb(216,20,37)"/><text x="17.7248%" y="95.50"></text></g><g><title>thir_body (91,773 samples, 0.18%)</title><rect x="17.7211%" y="133" width="0.1835%" height="15" fill="rgb(206,188,39)"/><text x="17.9711%" y="143.50"></text></g><g><title>mir_const (1,310,435 samples, 2.62%)</title><rect x="15.2875%" y="181" width="2.6203%" height="15" fill="rgb(217,207,13)"/><text x="15.5375%" y="191.50">mi..</text></g><g><title>unsafety_check_result (1,096,942 samples, 2.19%)</title><rect x="15.7144%" y="165" width="2.1934%" height="15" fill="rgb(231,73,38)"/><text x="15.9644%" y="175.50">u..</text></g><g><title>mir_built (969,122 samples, 1.94%)</title><rect x="15.9700%" y="149" width="1.9378%" height="15" fill="rgb(225,20,46)"/><text x="16.2200%" y="159.50">m..</text></g><g><title>mir_promoted (1,456,856 samples, 2.91%)</title><rect x="15.0127%" y="197" width="2.9130%" height="15" fill="rgb(210,31,41)"/><text x="15.2627%" y="207.50">mi..</text></g><g><title>type_op_ascribe_user_type (135,282 samples, 0.27%)</title><rect x="17.9258%" y="197" width="0.2705%" height="15" fill="rgb(221,200,47)"/><text x="18.1758%" y="207.50"></text></g><g><title>MIR_borrow_checking (2,918,532 samples, 5.84%)</title><rect x="12.7192%" y="229" width="5.8357%" height="15" fill="rgb(226,26,5)"/><text x="12.9692%" y="239.50">MIR_bor..</text></g><g><title>mir_borrowck (2,909,762 samples, 5.82%)</title><rect x="12.7368%" y="213" width="5.8182%" height="15" fill="rgb(249,33,26)"/><text x="12.9868%" y="223.50">mir_bor..</text></g><g><title>type_op_prove_predicate (179,401 samples, 0.36%)</title><rect x="18.1963%" y="197" width="0.3587%" height="15" fill="rgb(235,183,28)"/><text x="18.4463%" y="207.50"></text></g><g><title>hir_module_items (138,681 samples, 0.28%)</title><rect x="18.5618%" y="229" width="0.2773%" height="15" fill="rgb(221,5,38)"/><text x="18.8118%" y="239.50"></text></g><g><title>get_lang_items (64,270 samples, 0.13%)</title><rect x="19.3100%" y="181" width="0.1285%" height="15" fill="rgb(247,18,42)"/><text x="19.5600%" y="191.50"></text></g><g><title>should_inherit_track_caller (53,780 samples, 0.11%)</title><rect x="19.4385%" y="181" width="0.1075%" height="15" fill="rgb(241,131,45)"/><text x="19.6885%" y="191.50"></text></g><g><title>codegen_fn_attrs (227,693 samples, 0.46%)</title><rect x="19.1639%" y="197" width="0.4553%" height="15" fill="rgb(249,31,29)"/><text x="19.4139%" y="207.50"></text></g><g><title>check_mod_attrs (352,493 samples, 0.70%)</title><rect x="18.9148%" y="213" width="0.7048%" height="15" fill="rgb(225,111,53)"/><text x="19.1648%" y="223.50"></text></g><g><title>lookup_deprecation_entry (102,442 samples, 0.20%)</title><rect x="19.9130%" y="197" width="0.2048%" height="15" fill="rgb(238,160,17)"/><text x="20.1630%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (230,363 samples, 0.46%)</title><rect x="19.7642%" y="213" width="0.4606%" height="15" fill="rgb(214,148,48)"/><text x="20.0142%" y="223.50"></text></g><g><title>misc_checking_1 (739,688 samples, 1.48%)</title><rect x="18.8398%" y="229" width="1.4790%" height="15" fill="rgb(232,36,49)"/><text x="19.0898%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (117,272 samples, 0.23%)</title><rect x="20.3226%" y="213" width="0.2345%" height="15" fill="rgb(209,103,24)"/><text x="20.5726%" y="223.50"></text></g><g><title>check_mod_liveness (89,751 samples, 0.18%)</title><rect x="20.3777%" y="197" width="0.1795%" height="15" fill="rgb(229,88,8)"/><text x="20.6277%" y="207.50"></text></g><g><title>misc_checking_2 (244,993 samples, 0.49%)</title><rect x="20.3188%" y="229" width="0.4899%" height="15" fill="rgb(213,181,19)"/><text x="20.5688%" y="239.50"></text></g><g><title>match_checking (125,821 samples, 0.25%)</title><rect x="20.5571%" y="213" width="0.2516%" height="15" fill="rgb(254,191,54)"/><text x="20.8071%" y="223.50"></text></g><g><title>check_match (121,031 samples, 0.24%)</title><rect x="20.5667%" y="197" width="0.2420%" height="15" fill="rgb(241,83,37)"/><text x="20.8167%" y="207.50"></text></g><g><title>death_checking (77,961 samples, 0.16%)</title><rect x="20.8977%" y="213" width="0.1559%" height="15" fill="rgb(233,36,39)"/><text x="21.1477%" y="223.50"></text></g><g><title>param_env (107,911 samples, 0.22%)</title><rect x="21.5666%" y="181" width="0.2158%" height="15" fill="rgb(226,3,54)"/><text x="21.8166%" y="191.50"></text></g><g><title>predicates_of (50,361 samples, 0.10%)</title><rect x="21.6817%" y="165" width="0.1007%" height="15" fill="rgb(245,192,40)"/><text x="21.9317%" y="175.50"></text></g><g><title>crate_lints (1,354,555 samples, 2.71%)</title><rect x="21.0566%" y="197" width="2.7085%" height="15" fill="rgb(238,167,29)"/><text x="21.3066%" y="207.50">cr..</text></g><g><title>type_of (991,590 samples, 1.98%)</title><rect x="21.7824%" y="181" width="1.9827%" height="15" fill="rgb(232,182,51)"/><text x="22.0324%" y="191.50">t..</text></g><g><title>metadata_decode_entry_type_of (893,670 samples, 1.79%)</title><rect x="21.9781%" y="165" width="1.7869%" height="15" fill="rgb(231,60,39)"/><text x="22.2281%" y="175.50">m..</text></g><g><title>lint_checking (1,418,556 samples, 2.84%)</title><rect x="21.0536%" y="213" width="2.8365%" height="15" fill="rgb(208,69,12)"/><text x="21.3036%" y="223.50">li..</text></g><g><title>module_lints (62,491 samples, 0.12%)</title><rect x="23.7651%" y="197" width="0.1250%" height="15" fill="rgb(235,93,37)"/><text x="24.0151%" y="207.50"></text></g><g><title>lint_mod (59,151 samples, 0.12%)</title><rect x="23.7718%" y="181" width="0.1183%" height="15" fill="rgb(213,116,39)"/><text x="24.0218%" y="191.50"></text></g><g><title>privacy_access_levels (53,261 samples, 0.11%)</title><rect x="23.8900%" y="213" width="0.1065%" height="15" fill="rgb(222,207,29)"/><text x="24.1400%" y="223.50"></text></g><g><title>privacy_checking_modules (60,710 samples, 0.12%)</title><rect x="23.9965%" y="213" width="0.1214%" height="15" fill="rgb(206,96,30)"/><text x="24.2465%" y="223.50"></text></g><g><title>check_mod_privacy (58,680 samples, 0.12%)</title><rect x="24.0006%" y="197" width="0.1173%" height="15" fill="rgb(218,138,4)"/><text x="24.2506%" y="207.50"></text></g><g><title>misc_checking_3 (1,662,648 samples, 3.32%)</title><rect x="20.8087%" y="229" width="3.3245%" height="15" fill="rgb(250,191,14)"/><text x="21.0587%" y="239.50">mis..</text></g><g><title>coherent_trait (82,751 samples, 0.17%)</title><rect x="24.2557%" y="197" width="0.1655%" height="15" fill="rgb(239,60,40)"/><text x="24.5057%" y="207.50"></text></g><g><title>specialization_graph_of (74,341 samples, 0.15%)</title><rect x="24.2725%" y="181" width="0.1486%" height="15" fill="rgb(206,27,48)"/><text x="24.5225%" y="191.50"></text></g><g><title>coherence_checking (145,681 samples, 0.29%)</title><rect x="24.2213%" y="213" width="0.2913%" height="15" fill="rgb(225,35,8)"/><text x="24.4713%" y="223.50"></text></g><g><title>adt_def (89,700 samples, 0.18%)</title><rect x="30.9990%" y="149" width="0.1794%" height="15" fill="rgb(250,213,24)"/><text x="31.2490%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (87,090 samples, 0.17%)</title><rect x="31.0042%" y="133" width="0.1741%" height="15" fill="rgb(247,123,22)"/><text x="31.2542%" y="143.50"></text></g><g><title>adt_sized_constraint (112,091 samples, 0.22%)</title><rect x="30.9713%" y="165" width="0.2241%" height="15" fill="rgb(231,138,38)"/><text x="31.2213%" y="175.50"></text></g><g><title>associated_item (106,670 samples, 0.21%)</title><rect x="31.3030%" y="149" width="0.2133%" height="15" fill="rgb(231,145,46)"/><text x="31.5530%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (84,730 samples, 0.17%)</title><rect x="31.3469%" y="133" width="0.1694%" height="15" fill="rgb(251,118,11)"/><text x="31.5969%" y="143.50"></text></g><g><title>associated_items (184,131 samples, 0.37%)</title><rect x="31.1955%" y="165" width="0.3682%" height="15" fill="rgb(217,147,25)"/><text x="31.4455%" y="175.50"></text></g><g><title>adt_def (63,970 samples, 0.13%)</title><rect x="31.9673%" y="101" width="0.1279%" height="15" fill="rgb(247,81,37)"/><text x="32.2173%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (63,420 samples, 0.13%)</title><rect x="31.9684%" y="85" width="0.1268%" height="15" fill="rgb(209,12,38)"/><text x="32.2184%" y="95.50"></text></g><g><title>item_attrs (60,480 samples, 0.12%)</title><rect x="31.9743%" y="69" width="0.1209%" height="15" fill="rgb(227,1,9)"/><text x="32.2243%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (59,900 samples, 0.12%)</title><rect x="31.9755%" y="53" width="0.1198%" height="15" fill="rgb(248,47,43)"/><text x="32.2255%" y="63.50"></text></g><g><title>adt_dtorck_constraint (72,531 samples, 0.15%)</title><rect x="31.9580%" y="117" width="0.1450%" height="15" fill="rgb(221,10,30)"/><text x="32.2080%" y="127.50"></text></g><g><title>adt_dtorck_constraint (131,762 samples, 0.26%)</title><rect x="31.8501%" y="133" width="0.2635%" height="15" fill="rgb(210,229,1)"/><text x="32.1001%" y="143.50"></text></g><g><title>dropck_outlives (309,603 samples, 0.62%)</title><rect x="31.5923%" y="165" width="0.6191%" height="15" fill="rgb(222,148,37)"/><text x="31.8423%" y="175.50"></text></g><g><title>adt_dtorck_constraint (233,622 samples, 0.47%)</title><rect x="31.7443%" y="149" width="0.4671%" height="15" fill="rgb(234,67,33)"/><text x="31.9943%" y="159.50"></text></g><g><title>evaluate_obligation (851,748 samples, 1.70%)</title><rect x="32.2114%" y="165" width="1.7031%" height="15" fill="rgb(247,98,35)"/><text x="32.4614%" y="175.50"></text></g><g><title>trait_impls_of (342,503 samples, 0.68%)</title><rect x="33.2296%" y="149" width="0.6848%" height="15" fill="rgb(247,138,52)"/><text x="33.4796%" y="159.50"></text></g><g><title>implementations_of_trait (114,691 samples, 0.23%)</title><rect x="33.6852%" y="133" width="0.2293%" height="15" fill="rgb(213,79,30)"/><text x="33.9352%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (107,620 samples, 0.22%)</title><rect x="33.6993%" y="117" width="0.2152%" height="15" fill="rgb(246,177,23)"/><text x="33.9493%" y="127.50"></text></g><g><title>generics_of (67,431 samples, 0.13%)</title><rect x="34.0288%" y="165" width="0.1348%" height="15" fill="rgb(230,62,27)"/><text x="34.2788%" y="175.50"></text></g><g><title>metadata_decode_entry_generics_of (51,521 samples, 0.10%)</title><rect x="34.0606%" y="149" width="0.1030%" height="15" fill="rgb(216,154,8)"/><text x="34.3106%" y="159.50"></text></g><g><title>associated_item (123,391 samples, 0.25%)</title><rect x="34.1765%" y="133" width="0.2467%" height="15" fill="rgb(244,35,45)"/><text x="34.4265%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (122,161 samples, 0.24%)</title><rect x="34.1790%" y="117" width="0.2443%" height="15" fill="rgb(251,115,12)"/><text x="34.4290%" y="127.50"></text></g><g><title>impl_item_implementor_ids (131,071 samples, 0.26%)</title><rect x="34.1636%" y="165" width="0.2621%" height="15" fill="rgb(240,54,50)"/><text x="34.4136%" y="175.50"></text></g><g><title>associated_items (127,411 samples, 0.25%)</title><rect x="34.1709%" y="149" width="0.2548%" height="15" fill="rgb(233,84,52)"/><text x="34.4209%" y="159.50"></text></g><g><title>impl_trait_ref (70,932 samples, 0.14%)</title><rect x="34.4441%" y="165" width="0.1418%" height="15" fill="rgb(207,117,47)"/><text x="34.6941%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (65,592 samples, 0.13%)</title><rect x="34.4548%" y="149" width="0.1312%" height="15" fill="rgb(249,43,39)"/><text x="34.7048%" y="159.50"></text></g><g><title>item_attrs (74,092 samples, 0.15%)</title><rect x="34.6096%" y="165" width="0.1482%" height="15" fill="rgb(209,38,44)"/><text x="34.8596%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (70,442 samples, 0.14%)</title><rect x="34.6169%" y="149" width="0.1409%" height="15" fill="rgb(236,212,23)"/><text x="34.8669%" y="159.50"></text></g><g><title>lint_levels (56,701 samples, 0.11%)</title><rect x="34.7578%" y="165" width="0.1134%" height="15" fill="rgb(242,79,21)"/><text x="35.0078%" y="175.50"></text></g><g><title>explicit_predicates_of (78,453 samples, 0.16%)</title><rect x="35.2225%" y="133" width="0.1569%" height="15" fill="rgb(211,96,35)"/><text x="35.4725%" y="143.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (64,462 samples, 0.13%)</title><rect x="35.2505%" y="117" width="0.1289%" height="15" fill="rgb(253,215,40)"/><text x="35.5005%" y="127.50"></text></g><g><title>predicates_of (220,865 samples, 0.44%)</title><rect x="35.0108%" y="165" width="0.4416%" height="15" fill="rgb(211,81,21)"/><text x="35.2608%" y="175.50"></text></g><g><title>predicates_defined_on (156,185 samples, 0.31%)</title><rect x="35.1401%" y="149" width="0.3123%" height="15" fill="rgb(208,190,38)"/><text x="35.3901%" y="159.50"></text></g><g><title>type_of (54,590 samples, 0.11%)</title><rect x="35.5069%" y="165" width="0.1092%" height="15" fill="rgb(235,213,38)"/><text x="35.7569%" y="175.50"></text></g><g><title>item_bodies_checking (5,553,232 samples, 11.10%)</title><rect x="24.5601%" y="213" width="11.1039%" height="15" fill="rgb(237,122,38)"/><text x="24.8101%" y="223.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (5,549,752 samples, 11.10%)</title><rect x="24.5671%" y="197" width="11.0970%" height="15" fill="rgb(244,218,35)"/><text x="24.8171%" y="207.50">typeck_item_bodi..</text></g><g><title>typeck (5,537,742 samples, 11.07%)</title><rect x="24.5911%" y="181" width="11.0729%" height="15" fill="rgb(240,68,47)"/><text x="24.8411%" y="191.50">typeck</text></g><g><title>impl_parent (70,371 samples, 0.14%)</title><rect x="36.1836%" y="133" width="0.1407%" height="15" fill="rgb(210,16,53)"/><text x="36.4336%" y="143.50"></text></g><g><title>impl_trait_ref (549,495 samples, 1.10%)</title><rect x="36.3243%" y="133" width="1.0987%" height="15" fill="rgb(235,124,12)"/><text x="36.5743%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (523,974 samples, 1.05%)</title><rect x="36.3753%" y="117" width="1.0477%" height="15" fill="rgb(224,169,11)"/><text x="36.6253%" y="127.50"></text></g><g><title>adt_destructor (777,149 samples, 1.55%)</title><rect x="35.9289%" y="181" width="1.5539%" height="15" fill="rgb(250,166,2)"/><text x="36.1789%" y="191.50"></text></g><g><title>coherent_trait (771,749 samples, 1.54%)</title><rect x="35.9397%" y="165" width="1.5431%" height="15" fill="rgb(242,216,29)"/><text x="36.1897%" y="175.50"></text></g><g><title>specialization_graph_of (768,239 samples, 1.54%)</title><rect x="35.9468%" y="149" width="1.5361%" height="15" fill="rgb(230,116,27)"/><text x="36.1968%" y="159.50"></text></g><g><title>item_types_checking (920,570 samples, 1.84%)</title><rect x="35.6640%" y="213" width="1.8407%" height="15" fill="rgb(228,99,48)"/><text x="35.9140%" y="223.50">i..</text></g><g><title>check_mod_item_types (914,170 samples, 1.83%)</title><rect x="35.6768%" y="197" width="1.8279%" height="15" fill="rgb(253,11,6)"/><text x="35.9268%" y="207.50">c..</text></g><g><title>fn_sig (131,002 samples, 0.26%)</title><rect x="37.7610%" y="181" width="0.2619%" height="15" fill="rgb(247,143,39)"/><text x="38.0110%" y="191.50"></text></g><g><title>named_region_map (103,351 samples, 0.21%)</title><rect x="38.1479%" y="165" width="0.2067%" height="15" fill="rgb(236,97,10)"/><text x="38.3979%" y="175.50"></text></g><g><title>resolve_lifetimes (93,821 samples, 0.19%)</title><rect x="38.1669%" y="149" width="0.1876%" height="15" fill="rgb(233,208,19)"/><text x="38.4169%" y="159.50"></text></g><g><title>generics_of (175,592 samples, 0.35%)</title><rect x="38.0229%" y="181" width="0.3511%" height="15" fill="rgb(216,164,2)"/><text x="38.2729%" y="191.50"></text></g><g><title>explicit_predicates_of (161,131 samples, 0.32%)</title><rect x="38.4679%" y="149" width="0.3222%" height="15" fill="rgb(220,129,5)"/><text x="38.7179%" y="159.50"></text></g><g><title>predicates_of (233,702 samples, 0.47%)</title><rect x="38.3849%" y="181" width="0.4673%" height="15" fill="rgb(242,17,10)"/><text x="38.6349%" y="191.50"></text></g><g><title>predicates_defined_on (214,051 samples, 0.43%)</title><rect x="38.4242%" y="165" width="0.4280%" height="15" fill="rgb(242,107,0)"/><text x="38.6742%" y="175.50"></text></g><g><title>super_predicates_of (147,212 samples, 0.29%)</title><rect x="38.8522%" y="181" width="0.2944%" height="15" fill="rgb(251,28,31)"/><text x="39.1022%" y="191.50"></text></g><g><title>super_predicates_that_define_assoc_type (137,102 samples, 0.27%)</title><rect x="38.8724%" y="165" width="0.2741%" height="15" fill="rgb(233,223,10)"/><text x="39.1224%" y="175.50"></text></g><g><title>type_collecting (847,359 samples, 1.69%)</title><rect x="37.5083%" y="213" width="1.6943%" height="15" fill="rgb(215,21,27)"/><text x="37.7583%" y="223.50"></text></g><g><title>collect_mod_item_types (833,069 samples, 1.67%)</title><rect x="37.5368%" y="197" width="1.6658%" height="15" fill="rgb(232,23,21)"/><text x="37.7868%" y="207.50"></text></g><g><title>check_impl_item_well_formed (185,082 samples, 0.37%)</title><rect x="39.3214%" y="197" width="0.3701%" height="15" fill="rgb(244,5,23)"/><text x="39.5714%" y="207.50"></text></g><g><title>evaluate_obligation (114,700 samples, 0.23%)</title><rect x="41.4913%" y="181" width="0.2293%" height="15" fill="rgb(226,81,46)"/><text x="41.7413%" y="191.50"></text></g><g><title>implied_outlives_bounds (124,501 samples, 0.25%)</title><rect x="41.7258%" y="181" width="0.2489%" height="15" fill="rgb(247,70,30)"/><text x="41.9758%" y="191.50"></text></g><g><title>param_env (327,006 samples, 0.65%)</title><rect x="41.9747%" y="181" width="0.6539%" height="15" fill="rgb(212,68,19)"/><text x="42.2247%" y="191.50"></text></g><g><title>predicates_of (72,900 samples, 0.15%)</title><rect x="42.6286%" y="181" width="0.1458%" height="15" fill="rgb(240,187,13)"/><text x="42.8786%" y="191.50"></text></g><g><title>predicates_defined_on (56,770 samples, 0.11%)</title><rect x="42.6609%" y="165" width="0.1135%" height="15" fill="rgb(223,113,26)"/><text x="42.9109%" y="175.50"></text></g><g><title>region_scope_tree (56,712 samples, 0.11%)</title><rect x="42.7744%" y="181" width="0.1134%" height="15" fill="rgb(206,192,2)"/><text x="43.0244%" y="191.50"></text></g><g><title>trait_impls_of (131,801 samples, 0.26%)</title><rect x="42.8956%" y="181" width="0.2635%" height="15" fill="rgb(241,108,4)"/><text x="43.1456%" y="191.50"></text></g><g><title>check_item_well_formed (1,785,200 samples, 3.57%)</title><rect x="39.6915%" y="197" width="3.5696%" height="15" fill="rgb(247,173,49)"/><text x="39.9415%" y="207.50">chec..</text></g><g><title>variances_of (51,010 samples, 0.10%)</title><rect x="43.1591%" y="181" width="0.1020%" height="15" fill="rgb(224,114,35)"/><text x="43.4091%" y="191.50"></text></g><g><title>evaluate_obligation (153,781 samples, 0.31%)</title><rect x="43.6528%" y="181" width="0.3075%" height="15" fill="rgb(245,159,27)"/><text x="43.9028%" y="191.50"></text></g><g><title>analysis (15,862,305 samples, 31.72%)</title><rect x="12.3420%" y="245" width="31.7173%" height="15" fill="rgb(245,172,44)"/><text x="12.5920%" y="255.50">analysis</text></g><g><title>type_check_crate (9,965,330 samples, 19.93%)</title><rect x="24.1333%" y="229" width="19.9261%" height="15" fill="rgb(236,23,11)"/><text x="24.3833%" y="239.50">type_check_crate</text></g><g><title>wf_checking (2,427,587 samples, 4.85%)</title><rect x="39.2053%" y="213" width="4.8541%" height="15" fill="rgb(205,117,38)"/><text x="39.4553%" y="223.50">wf_che..</text></g><g><title>check_trait_item_well_formed (399,214 samples, 0.80%)</title><rect x="43.2611%" y="197" width="0.7982%" height="15" fill="rgb(237,72,25)"/><text x="43.5111%" y="207.50"></text></g><g><title>codegen_module (218,433 samples, 0.44%)</title><rect x="44.9922%" y="229" width="0.4368%" height="15" fill="rgb(244,70,9)"/><text x="45.2422%" y="239.50"></text></g><g><title>codegen_crate (735,878 samples, 1.47%)</title><rect x="44.0804%" y="245" width="1.4714%" height="15" fill="rgb(217,125,39)"/><text x="44.3304%" y="255.50"></text></g><g><title>codegen_module_optimize (1,970,921 samples, 3.94%)</title><rect x="45.5518%" y="245" width="3.9409%" height="15" fill="rgb(235,36,10)"/><text x="45.8018%" y="255.50">code..</text></g><g><title>LLVM_module_optimize (416,385 samples, 0.83%)</title><rect x="48.6602%" y="229" width="0.8326%" height="15" fill="rgb(251,123,47)"/><text x="48.9102%" y="239.50"></text></g><g><title>LLVM_lto_optimize (224,573 samples, 0.45%)</title><rect x="50.1920%" y="229" width="0.4490%" height="15" fill="rgb(221,13,13)"/><text x="50.4420%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,418,266 samples, 4.84%)</title><rect x="50.6411%" y="229" width="4.8354%" height="15" fill="rgb(238,131,9)"/><text x="50.8911%" y="239.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (2,383,716 samples, 4.77%)</title><rect x="50.7102%" y="213" width="4.7663%" height="15" fill="rgb(211,50,8)"/><text x="50.9602%" y="223.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (3,029,643 samples, 6.06%)</title><rect x="49.4928%" y="245" width="6.0579%" height="15" fill="rgb(245,182,24)"/><text x="49.7428%" y="255.50">codegen_..</text></g><g><title>AST_validation (126,851 samples, 0.25%)</title><rect x="55.9939%" y="229" width="0.2536%" height="15" fill="rgb(242,14,37)"/><text x="56.2439%" y="239.50"></text></g><g><title>crate_injection (82,630 samples, 0.17%)</title><rect x="56.3313%" y="229" width="0.1652%" height="15" fill="rgb(246,228,12)"/><text x="56.5813%" y="239.50"></text></g><g><title>metadata_load_macro (106,240 samples, 0.21%)</title><rect x="75.5906%" y="197" width="0.2124%" height="15" fill="rgb(213,55,15)"/><text x="75.8406%" y="207.50"></text></g><g><title>metadata_register_crate (251,473 samples, 0.50%)</title><rect x="75.8030%" y="197" width="0.5028%" height="15" fill="rgb(209,9,3)"/><text x="76.0530%" y="207.50"></text></g><g><title>macro_expand_crate (9,968,450 samples, 19.93%)</title><rect x="56.4965%" y="229" width="19.9323%" height="15" fill="rgb(230,59,30)"/><text x="56.7465%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (9,942,220 samples, 19.88%)</title><rect x="56.5490%" y="213" width="19.8799%" height="15" fill="rgb(209,121,21)"/><text x="56.7990%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (61,511 samples, 0.12%)</title><rect x="76.3059%" y="197" width="0.1230%" height="15" fill="rgb(220,109,13)"/><text x="76.5559%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (80,541 samples, 0.16%)</title><rect x="76.4395%" y="229" width="0.1610%" height="15" fill="rgb(232,18,1)"/><text x="76.6895%" y="239.50"></text></g><g><title>finalize_imports (240,703 samples, 0.48%)</title><rect x="76.6175%" y="213" width="0.4813%" height="15" fill="rgb(215,41,42)"/><text x="76.8675%" y="223.50"></text></g><g><title>late_resolve_crate (646,547 samples, 1.29%)</title><rect x="77.1428%" y="213" width="1.2928%" height="15" fill="rgb(224,123,36)"/><text x="77.3928%" y="223.50"></text></g><g><title>configure_and_expand (11,518,227 samples, 23.03%)</title><rect x="55.5507%" y="245" width="23.0312%" height="15" fill="rgb(240,125,3)"/><text x="55.8007%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (990,881 samples, 1.98%)</title><rect x="76.6005%" y="229" width="1.9813%" height="15" fill="rgb(205,98,50)"/><text x="76.8505%" y="239.50">r..</text></g><g><title>drop_ast (68,161 samples, 0.14%)</title><rect x="78.5818%" y="245" width="0.1363%" height="15" fill="rgb(205,185,37)"/><text x="78.8318%" y="255.50"></text></g><g><title>early_lint_checks (137,911 samples, 0.28%)</title><rect x="78.7446%" y="245" width="0.2758%" height="15" fill="rgb(238,207,15)"/><text x="78.9946%" y="255.50"></text></g><g><title>free_global_ctxt (1,562,847 samples, 3.12%)</title><rect x="79.0203%" y="245" width="3.1250%" height="15" fill="rgb(213,199,42)"/><text x="79.2703%" y="255.50">fre..</text></g><g><title>crate_hash (65,441 samples, 0.13%)</title><rect x="82.8464%" y="229" width="0.1309%" height="15" fill="rgb(235,201,11)"/><text x="83.0964%" y="239.50"></text></g><g><title>layout_of (120,630 samples, 0.24%)</title><rect x="83.8841%" y="197" width="0.2412%" height="15" fill="rgb(207,46,11)"/><text x="84.1341%" y="207.50"></text></g><g><title>layout_of (206,182 samples, 0.41%)</title><rect x="83.7256%" y="213" width="0.4123%" height="15" fill="rgb(241,35,35)"/><text x="83.9756%" y="223.50"></text></g><g><title>optimized_mir (807,629 samples, 1.61%)</title><rect x="83.1585%" y="229" width="1.6149%" height="15" fill="rgb(243,32,47)"/><text x="83.4085%" y="239.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (317,823 samples, 0.64%)</title><rect x="84.1379%" y="213" width="0.6355%" height="15" fill="rgb(247,202,23)"/><text x="84.3879%" y="223.50"></text></g><g><title>generate_crate_metadata (1,328,115 samples, 2.66%)</title><rect x="82.1453%" y="245" width="2.6556%" height="15" fill="rgb(219,102,11)"/><text x="82.3953%" y="255.50">ge..</text></g><g><title>hir_lowering (1,283,094 samples, 2.57%)</title><rect x="84.8009%" y="245" width="2.5656%" height="15" fill="rgb(243,110,44)"/><text x="85.0509%" y="255.50">hi..</text></g><g><title>finish_ongoing_codegen (3,572,579 samples, 7.14%)</title><rect x="87.3937%" y="229" width="7.1435%" height="15" fill="rgb(222,74,54)"/><text x="87.6437%" y="239.50">finish_ong..</text></g><g><title>link_crate (505,725 samples, 1.01%)</title><rect x="94.5372%" y="229" width="1.0112%" height="15" fill="rgb(216,99,12)"/><text x="94.7872%" y="239.50"></text></g><g><title>link_binary (496,195 samples, 0.99%)</title><rect x="94.5563%" y="213" width="0.9922%" height="15" fill="rgb(226,22,26)"/><text x="94.8063%" y="223.50"></text></g><g><title>link_rlib (302,553 samples, 0.60%)</title><rect x="94.9435%" y="197" width="0.6050%" height="15" fill="rgb(217,163,10)"/><text x="95.1935%" y="207.50"></text></g><g><title>link (4,098,635 samples, 8.20%)</title><rect x="87.3665%" y="245" width="8.1954%" height="15" fill="rgb(213,25,53)"/><text x="87.6165%" y="255.50">link</text></g><g><title>parse_crate (1,084,992 samples, 2.17%)</title><rect x="95.5619%" y="245" width="2.1695%" height="15" fill="rgb(252,105,26)"/><text x="95.8119%" y="255.50">p..</text></g><g><title>prepare_outputs (334,123 samples, 0.67%)</title><rect x="97.7516%" y="245" width="0.6681%" height="15" fill="rgb(220,39,43)"/><text x="98.0016%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (337,433 samples, 0.67%)</title><rect x="98.4197%" y="245" width="0.6747%" height="15" fill="rgb(229,68,48)"/><text x="98.6697%" y="255.50"></text></g><g><title>setup_global_ctxt (139,452 samples, 0.28%)</title><rect x="99.1056%" y="245" width="0.2788%" height="15" fill="rgb(252,8,32)"/><text x="99.3556%" y="255.50"></text></g><g><title>all (50,011,460 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (50,011,460 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(229,81,49)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (307,833 samples, 0.62%)</title><rect x="99.3845%" y="245" width="0.6155%" height="15" fill="rgb(236,28,36)"/><text x="99.6345%" y="255.50"></text></g></svg></svg>