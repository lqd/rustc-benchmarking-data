<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,418,479 samples, 6.68%)</title><rect x="0.9422%" y="229" width="6.6827%" height="15" fill="rgb(227,0,7)"/><text x="1.1922%" y="239.50">LLVM_pass..</text></g><g><title>codegen_generate_lto_work (106,731 samples, 0.16%)</title><rect x="7.4635%" y="213" width="0.1614%" height="15" fill="rgb(217,0,24)"/><text x="7.7135%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (96,751 samples, 0.15%)</title><rect x="7.4786%" y="197" width="0.1463%" height="15" fill="rgb(221,193,54)"/><text x="7.7286%" y="207.50"></text></g><g><title>param_env (90,911 samples, 0.14%)</title><rect x="12.0118%" y="149" width="0.1375%" height="15" fill="rgb(248,212,6)"/><text x="12.2618%" y="159.50"></text></g><g><title>is_copy_raw (97,191 samples, 0.15%)</title><rect x="13.1987%" y="85" width="0.1470%" height="15" fill="rgb(208,68,35)"/><text x="13.4487%" y="95.50"></text></g><g><title>evaluate_obligation (90,611 samples, 0.14%)</title><rect x="13.2087%" y="69" width="0.1370%" height="15" fill="rgb(232,128,0)"/><text x="13.4587%" y="79.50"></text></g><g><title>adt_drop_tys (122,541 samples, 0.19%)</title><rect x="13.1853%" y="101" width="0.1853%" height="15" fill="rgb(207,160,47)"/><text x="13.4353%" y="111.50"></text></g><g><title>needs_drop_raw (649,768 samples, 0.98%)</title><rect x="13.1458%" y="117" width="0.9827%" height="15" fill="rgb(228,23,34)"/><text x="13.3958%" y="127.50"></text></g><g><title>is_copy_raw (501,127 samples, 0.76%)</title><rect x="13.3707%" y="101" width="0.7579%" height="15" fill="rgb(218,30,26)"/><text x="13.6207%" y="111.50"></text></g><g><title>evaluate_obligation (473,026 samples, 0.72%)</title><rect x="13.4132%" y="85" width="0.7154%" height="15" fill="rgb(220,122,19)"/><text x="13.6632%" y="95.50"></text></g><g><title>trait_impls_of (315,994 samples, 0.48%)</title><rect x="13.6507%" y="69" width="0.4779%" height="15" fill="rgb(250,228,42)"/><text x="13.9007%" y="79.50"></text></g><g><title>implementations_of_trait (81,311 samples, 0.12%)</title><rect x="14.0056%" y="53" width="0.1230%" height="15" fill="rgb(240,193,28)"/><text x="14.2556%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (71,801 samples, 0.11%)</title><rect x="14.0200%" y="37" width="0.1086%" height="15" fill="rgb(216,20,37)"/><text x="14.2700%" y="47.50"></text></g><g><title>resolve_instance (180,491 samples, 0.27%)</title><rect x="14.1286%" y="117" width="0.2730%" height="15" fill="rgb(206,188,39)"/><text x="14.3786%" y="127.50"></text></g><g><title>thir_body (168,431 samples, 0.25%)</title><rect x="14.4119%" y="117" width="0.2547%" height="15" fill="rgb(217,207,13)"/><text x="14.6619%" y="127.50"></text></g><g><title>mir_const (2,018,152 samples, 3.05%)</title><rect x="11.6198%" y="165" width="3.0523%" height="15" fill="rgb(231,73,38)"/><text x="11.8698%" y="175.50">mir..</text></g><g><title>unsafety_check_result (1,668,007 samples, 2.52%)</title><rect x="12.1493%" y="149" width="2.5228%" height="15" fill="rgb(225,20,46)"/><text x="12.3993%" y="159.50">un..</text></g><g><title>mir_built (1,499,196 samples, 2.27%)</title><rect x="12.4046%" y="133" width="2.2675%" height="15" fill="rgb(210,31,41)"/><text x="12.6546%" y="143.50">m..</text></g><g><title>mir_promoted (2,284,024 samples, 3.45%)</title><rect x="11.2403%" y="181" width="3.4545%" height="15" fill="rgb(221,200,47)"/><text x="11.4903%" y="191.50">mir..</text></g><g><title>type_op_ascribe_user_type (205,283 samples, 0.31%)</title><rect x="14.6948%" y="181" width="0.3105%" height="15" fill="rgb(226,26,5)"/><text x="14.9448%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (82,220 samples, 0.12%)</title><rect x="15.0053%" y="181" width="0.1244%" height="15" fill="rgb(249,33,26)"/><text x="15.2553%" y="191.50"></text></g><g><title>type_op_normalize_ty (93,311 samples, 0.14%)</title><rect x="15.1296%" y="181" width="0.1411%" height="15" fill="rgb(235,183,28)"/><text x="15.3796%" y="191.50"></text></g><g><title>type_op_prove_predicate (331,104 samples, 0.50%)</title><rect x="15.2707%" y="181" width="0.5008%" height="15" fill="rgb(221,5,38)"/><text x="15.5207%" y="191.50"></text></g><g><title>MIR_borrow_checking (5,229,577 samples, 7.91%)</title><rect x="7.8671%" y="213" width="7.9095%" height="15" fill="rgb(247,18,42)"/><text x="8.1171%" y="223.50">MIR_borrow_..</text></g><g><title>mir_borrowck (5,204,687 samples, 7.87%)</title><rect x="7.9048%" y="197" width="7.8718%" height="15" fill="rgb(241,131,45)"/><text x="8.1548%" y="207.50">mir_borrowck</text></g><g><title>hir_module_items (128,381 samples, 0.19%)</title><rect x="15.7886%" y="213" width="0.1942%" height="15" fill="rgb(249,31,29)"/><text x="16.0386%" y="223.50"></text></g><g><title>get_lang_items (92,871 samples, 0.14%)</title><rect x="16.2821%" y="165" width="0.1405%" height="15" fill="rgb(225,111,53)"/><text x="16.5321%" y="175.50"></text></g><g><title>codegen_fn_attrs (92,260 samples, 0.14%)</title><rect x="16.5677%" y="149" width="0.1395%" height="15" fill="rgb(238,160,17)"/><text x="16.8177%" y="159.50"></text></g><g><title>should_inherit_track_caller (191,073 samples, 0.29%)</title><rect x="16.4226%" y="165" width="0.2890%" height="15" fill="rgb(214,148,48)"/><text x="16.6726%" y="175.50"></text></g><g><title>codegen_fn_attrs (384,574 samples, 0.58%)</title><rect x="16.1828%" y="181" width="0.5816%" height="15" fill="rgb(232,36,49)"/><text x="16.4328%" y="191.50"></text></g><g><title>check_mod_attrs (489,315 samples, 0.74%)</title><rect x="16.0249%" y="197" width="0.7401%" height="15" fill="rgb(209,103,24)"/><text x="16.2749%" y="207.50"></text></g><g><title>lookup_deprecation_entry (86,131 samples, 0.13%)</title><rect x="17.0034%" y="181" width="0.1303%" height="15" fill="rgb(229,88,8)"/><text x="17.2534%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (236,412 samples, 0.36%)</title><rect x="16.8690%" y="197" width="0.3576%" height="15" fill="rgb(213,181,19)"/><text x="17.1190%" y="207.50"></text></g><g><title>misc_checking_1 (864,680 samples, 1.31%)</title><rect x="15.9837%" y="213" width="1.3078%" height="15" fill="rgb(254,191,54)"/><text x="16.2337%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (98,721 samples, 0.15%)</title><rect x="17.2950%" y="197" width="0.1493%" height="15" fill="rgb(241,83,37)"/><text x="17.5450%" y="207.50"></text></g><g><title>check_mod_liveness (70,270 samples, 0.11%)</title><rect x="17.3381%" y="181" width="0.1063%" height="15" fill="rgb(233,36,39)"/><text x="17.5881%" y="191.50"></text></g><g><title>misc_checking_2 (256,923 samples, 0.39%)</title><rect x="17.2915%" y="213" width="0.3886%" height="15" fill="rgb(226,3,54)"/><text x="17.5415%" y="223.50"></text></g><g><title>match_checking (155,851 samples, 0.24%)</title><rect x="17.4444%" y="197" width="0.2357%" height="15" fill="rgb(245,192,40)"/><text x="17.6944%" y="207.50"></text></g><g><title>check_match (146,381 samples, 0.22%)</title><rect x="17.4587%" y="181" width="0.2214%" height="15" fill="rgb(238,167,29)"/><text x="17.7087%" y="191.50"></text></g><g><title>death_checking (160,762 samples, 0.24%)</title><rect x="17.7912%" y="197" width="0.2431%" height="15" fill="rgb(232,182,51)"/><text x="18.0412%" y="207.50"></text></g><g><title>param_env (85,071 samples, 0.13%)</title><rect x="19.0922%" y="165" width="0.1287%" height="15" fill="rgb(231,60,39)"/><text x="19.3422%" y="175.50"></text></g><g><title>crate_lints (2,352,806 samples, 3.56%)</title><rect x="18.0369%" y="181" width="3.5585%" height="15" fill="rgb(208,69,12)"/><text x="18.2869%" y="191.50">crat..</text></g><g><title>type_of (1,569,964 samples, 2.37%)</title><rect x="19.2209%" y="165" width="2.3745%" height="15" fill="rgb(235,93,37)"/><text x="19.4709%" y="175.50">ty..</text></g><g><title>metadata_decode_entry_type_of (1,132,702 samples, 1.71%)</title><rect x="19.8822%" y="149" width="1.7132%" height="15" fill="rgb(213,116,39)"/><text x="20.1322%" y="159.50"></text></g><g><title>lint_checking (2,405,016 samples, 3.64%)</title><rect x="18.0344%" y="197" width="3.6375%" height="15" fill="rgb(222,207,29)"/><text x="18.2844%" y="207.50">lint..</text></g><g><title>privacy_access_levels (80,081 samples, 0.12%)</title><rect x="21.6718%" y="197" width="0.1211%" height="15" fill="rgb(206,96,30)"/><text x="21.9218%" y="207.50"></text></g><g><title>privacy_checking_modules (86,131 samples, 0.13%)</title><rect x="21.7929%" y="197" width="0.1303%" height="15" fill="rgb(218,138,4)"/><text x="22.0429%" y="207.50"></text></g><g><title>check_mod_privacy (85,051 samples, 0.13%)</title><rect x="21.7946%" y="181" width="0.1286%" height="15" fill="rgb(250,191,14)"/><text x="22.0446%" y="191.50"></text></g><g><title>misc_checking_3 (2,817,981 samples, 4.26%)</title><rect x="17.6801%" y="213" width="4.2620%" height="15" fill="rgb(239,60,40)"/><text x="17.9301%" y="223.50">misc_..</text></g><g><title>impl_parent (1,663,684 samples, 2.52%)</title><rect x="26.1799%" y="149" width="2.5162%" height="15" fill="rgb(206,27,48)"/><text x="26.4299%" y="159.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (983,199 samples, 1.49%)</title><rect x="27.2091%" y="133" width="1.4870%" height="15" fill="rgb(225,35,8)"/><text x="27.4591%" y="143.50"></text></g><g><title>impl_trait_ref (6,482,366 samples, 9.80%)</title><rect x="28.6961%" y="149" width="9.8042%" height="15" fill="rgb(250,213,24)"/><text x="28.9461%" y="159.50">impl_trait_ref</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,773,395 samples, 8.73%)</title><rect x="29.7684%" y="133" width="8.7320%" height="15" fill="rgb(247,123,22)"/><text x="30.0184%" y="143.50">metadata_dec..</text></g><g><title>coherent_trait (11,501,096 samples, 17.39%)</title><rect x="22.0306%" y="181" width="17.3948%" height="15" fill="rgb(231,138,38)"/><text x="22.2806%" y="191.50">coherent_trait</text></g><g><title>specialization_graph_of (11,483,936 samples, 17.37%)</title><rect x="22.0566%" y="165" width="17.3688%" height="15" fill="rgb(231,145,46)"/><text x="22.3066%" y="175.50">specialization_graph_of</text></g><g><title>trait_impls_of (608,226 samples, 0.92%)</title><rect x="38.5055%" y="149" width="0.9199%" height="15" fill="rgb(251,118,11)"/><text x="38.7555%" y="159.50"></text></g><g><title>implementations_of_trait (157,091 samples, 0.24%)</title><rect x="39.1878%" y="133" width="0.2376%" height="15" fill="rgb(217,147,25)"/><text x="39.4378%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (116,890 samples, 0.18%)</title><rect x="39.2486%" y="117" width="0.1768%" height="15" fill="rgb(247,81,37)"/><text x="39.4986%" y="127.50"></text></g><g><title>coherence_checking (11,570,027 samples, 17.50%)</title><rect x="21.9991%" y="197" width="17.4990%" height="15" fill="rgb(209,12,38)"/><text x="22.2491%" y="207.50">coherence_checking</text></g><g><title>adt_sized_constraint (109,672 samples, 0.17%)</title><rect x="45.4588%" y="149" width="0.1659%" height="15" fill="rgb(227,1,9)"/><text x="45.7088%" y="159.50"></text></g><g><title>adt_sized_constraint (67,981 samples, 0.10%)</title><rect x="45.5219%" y="133" width="0.1028%" height="15" fill="rgb(248,47,43)"/><text x="45.7719%" y="143.50"></text></g><g><title>associated_items (119,311 samples, 0.18%)</title><rect x="45.6247%" y="149" width="0.1805%" height="15" fill="rgb(221,10,30)"/><text x="45.8747%" y="159.50"></text></g><g><title>dropck_outlives (106,661 samples, 0.16%)</title><rect x="45.8396%" y="149" width="0.1613%" height="15" fill="rgb(210,229,1)"/><text x="46.0896%" y="159.50"></text></g><g><title>evaluate_obligation (178,374 samples, 0.27%)</title><rect x="46.0010%" y="149" width="0.2698%" height="15" fill="rgb(222,148,37)"/><text x="46.2510%" y="159.50"></text></g><g><title>item_attrs (255,143 samples, 0.39%)</title><rect x="46.5290%" y="149" width="0.3859%" height="15" fill="rgb(234,67,33)"/><text x="46.7790%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (249,643 samples, 0.38%)</title><rect x="46.5373%" y="133" width="0.3776%" height="15" fill="rgb(247,98,35)"/><text x="46.7873%" y="143.50"></text></g><g><title>method_autoderef_steps (125,241 samples, 0.19%)</title><rect x="46.9447%" y="149" width="0.1894%" height="15" fill="rgb(247,138,52)"/><text x="47.1947%" y="159.50"></text></g><g><title>evaluate_obligation (131,351 samples, 0.20%)</title><rect x="47.4751%" y="133" width="0.1987%" height="15" fill="rgb(213,79,30)"/><text x="47.7251%" y="143.50"></text></g><g><title>layout_of (81,041 samples, 0.12%)</title><rect x="47.6737%" y="133" width="0.1226%" height="15" fill="rgb(246,177,23)"/><text x="47.9237%" y="143.50"></text></g><g><title>object_safety_violations (459,765 samples, 0.70%)</title><rect x="47.1341%" y="149" width="0.6954%" height="15" fill="rgb(230,62,27)"/><text x="47.3841%" y="159.50"></text></g><g><title>explicit_predicates_of (187,691 samples, 0.28%)</title><rect x="47.9597%" y="117" width="0.2839%" height="15" fill="rgb(216,154,8)"/><text x="48.2097%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (177,661 samples, 0.27%)</title><rect x="47.9748%" y="101" width="0.2687%" height="15" fill="rgb(244,35,45)"/><text x="48.2248%" y="111.50"></text></g><g><title>predicates_of (278,842 samples, 0.42%)</title><rect x="47.8503%" y="149" width="0.4217%" height="15" fill="rgb(251,115,12)"/><text x="48.1003%" y="159.50"></text></g><g><title>predicates_defined_on (237,791 samples, 0.36%)</title><rect x="47.9123%" y="133" width="0.3596%" height="15" fill="rgb(240,54,50)"/><text x="48.1623%" y="143.50"></text></g><g><title>type_of (86,710 samples, 0.13%)</title><rect x="48.3630%" y="149" width="0.1311%" height="15" fill="rgb(233,84,52)"/><text x="48.6130%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (73,580 samples, 0.11%)</title><rect x="48.3828%" y="133" width="0.1113%" height="15" fill="rgb(207,117,47)"/><text x="48.6328%" y="143.50"></text></g><g><title>item_bodies_checking (5,934,715 samples, 8.98%)</title><rect x="39.5390%" y="197" width="8.9759%" height="15" fill="rgb(249,43,39)"/><text x="39.7890%" y="207.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (5,931,015 samples, 8.97%)</title><rect x="39.5446%" y="181" width="8.9703%" height="15" fill="rgb(209,38,44)"/><text x="39.7946%" y="191.50">typeck_item_b..</text></g><g><title>typeck (5,910,115 samples, 8.94%)</title><rect x="39.5762%" y="165" width="8.9387%" height="15" fill="rgb(236,212,23)"/><text x="39.8262%" y="175.50">typeck</text></g><g><title>item_types_checking (563,356 samples, 0.85%)</title><rect x="48.5149%" y="197" width="0.8520%" height="15" fill="rgb(242,79,21)"/><text x="48.7649%" y="207.50"></text></g><g><title>check_mod_item_types (558,996 samples, 0.85%)</title><rect x="48.5215%" y="181" width="0.8455%" height="15" fill="rgb(211,96,35)"/><text x="48.7715%" y="191.50"></text></g><g><title>fn_sig (244,394 samples, 0.37%)</title><rect x="49.5919%" y="165" width="0.3696%" height="15" fill="rgb(253,215,40)"/><text x="49.8419%" y="175.50"></text></g><g><title>generics_of (84,222 samples, 0.13%)</title><rect x="49.9615%" y="165" width="0.1274%" height="15" fill="rgb(211,81,21)"/><text x="50.2115%" y="175.50"></text></g><g><title>late_bound_vars_map (241,312 samples, 0.36%)</title><rect x="50.4515%" y="117" width="0.3650%" height="15" fill="rgb(208,190,38)"/><text x="50.7015%" y="127.50"></text></g><g><title>resolve_lifetimes (227,972 samples, 0.34%)</title><rect x="50.4717%" y="101" width="0.3448%" height="15" fill="rgb(235,213,38)"/><text x="50.7217%" y="111.50"></text></g><g><title>explicit_predicates_of (427,504 samples, 0.65%)</title><rect x="50.2264%" y="133" width="0.6466%" height="15" fill="rgb(237,122,38)"/><text x="50.4764%" y="143.50"></text></g><g><title>predicates_of (610,156 samples, 0.92%)</title><rect x="50.1409%" y="165" width="0.9228%" height="15" fill="rgb(244,218,35)"/><text x="50.3909%" y="175.50"></text></g><g><title>predicates_defined_on (588,525 samples, 0.89%)</title><rect x="50.1736%" y="149" width="0.8901%" height="15" fill="rgb(240,68,47)"/><text x="50.4236%" y="159.50"></text></g><g><title>inferred_outlives_of (126,101 samples, 0.19%)</title><rect x="50.8730%" y="133" width="0.1907%" height="15" fill="rgb(210,16,53)"/><text x="51.1230%" y="143.50"></text></g><g><title>inferred_outlives_crate (108,861 samples, 0.16%)</title><rect x="50.8991%" y="117" width="0.1646%" height="15" fill="rgb(235,124,12)"/><text x="51.1491%" y="127.50"></text></g><g><title>type_collecting (1,246,934 samples, 1.89%)</title><rect x="49.3696%" y="197" width="1.8859%" height="15" fill="rgb(224,169,11)"/><text x="49.6196%" y="207.50">t..</text></g><g><title>collect_mod_item_types (1,236,004 samples, 1.87%)</title><rect x="49.3862%" y="181" width="1.8694%" height="15" fill="rgb(250,166,2)"/><text x="49.6362%" y="191.50">c..</text></g><g><title>type_of (69,241 samples, 0.10%)</title><rect x="51.1508%" y="165" width="0.1047%" height="15" fill="rgb(242,216,29)"/><text x="51.4008%" y="175.50"></text></g><g><title>evaluate_obligation (312,893 samples, 0.47%)</title><rect x="52.3694%" y="165" width="0.4732%" height="15" fill="rgb(230,116,27)"/><text x="52.6194%" y="175.50"></text></g><g><title>implied_outlives_bounds (118,831 samples, 0.18%)</title><rect x="52.8539%" y="165" width="0.1797%" height="15" fill="rgb(228,99,48)"/><text x="53.1039%" y="175.50"></text></g><g><title>param_env (93,531 samples, 0.14%)</title><rect x="53.0336%" y="165" width="0.1415%" height="15" fill="rgb(253,11,6)"/><text x="53.2836%" y="175.50"></text></g><g><title>predicates_of (75,010 samples, 0.11%)</title><rect x="53.1751%" y="165" width="0.1134%" height="15" fill="rgb(247,143,39)"/><text x="53.4251%" y="175.50"></text></g><g><title>check_impl_item_well_formed (1,354,084 samples, 2.05%)</title><rect x="51.3512%" y="181" width="2.0480%" height="15" fill="rgb(236,97,10)"/><text x="51.6012%" y="191.50">c..</text></g><g><title>region_scope_tree (73,140 samples, 0.11%)</title><rect x="53.2885%" y="165" width="0.1106%" height="15" fill="rgb(233,208,19)"/><text x="53.5385%" y="175.50"></text></g><g><title>param_env (229,395 samples, 0.35%)</title><rect x="54.5178%" y="165" width="0.3469%" height="15" fill="rgb(216,164,2)"/><text x="54.7678%" y="175.50"></text></g><g><title>predicates_of (76,851 samples, 0.12%)</title><rect x="54.8648%" y="165" width="0.1162%" height="15" fill="rgb(220,129,5)"/><text x="55.1148%" y="175.50"></text></g><g><title>check_item_well_formed (1,147,323 samples, 1.74%)</title><rect x="53.3992%" y="181" width="1.7353%" height="15" fill="rgb(242,17,10)"/><text x="53.6492%" y="191.50"></text></g><g><title>variances_of (89,261 samples, 0.14%)</title><rect x="54.9994%" y="165" width="0.1350%" height="15" fill="rgb(242,107,0)"/><text x="55.2494%" y="175.50"></text></g><g><title>crate_variances (84,491 samples, 0.13%)</title><rect x="55.0066%" y="149" width="0.1278%" height="15" fill="rgb(251,28,31)"/><text x="55.2566%" y="159.50"></text></g><g><title>implied_outlives_bounds (78,890 samples, 0.12%)</title><rect x="55.2750%" y="165" width="0.1193%" height="15" fill="rgb(233,223,10)"/><text x="55.5250%" y="175.50"></text></g><g><title>analysis (31,597,758 samples, 47.79%)</title><rect x="7.6249%" y="229" width="47.7899%" height="15" fill="rgb(215,21,27)"/><text x="7.8749%" y="239.50">analysis</text></g><g><title>type_check_crate (22,131,524 samples, 33.47%)</title><rect x="21.9421%" y="213" width="33.4727%" height="15" fill="rgb(232,23,21)"/><text x="22.1921%" y="223.50">type_check_crate</text></g><g><title>wf_checking (2,748,381 samples, 4.16%)</title><rect x="51.2581%" y="197" width="4.1568%" height="15" fill="rgb(244,5,23)"/><text x="51.5081%" y="207.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (185,422 samples, 0.28%)</title><rect x="55.1344%" y="181" width="0.2804%" height="15" fill="rgb(226,81,46)"/><text x="55.3844%" y="191.50"></text></g><g><title>codegen_module (228,442 samples, 0.35%)</title><rect x="56.4149%" y="213" width="0.3455%" height="15" fill="rgb(247,70,30)"/><text x="56.6649%" y="223.50"></text></g><g><title>codegen_crate (1,004,492 samples, 1.52%)</title><rect x="55.4327%" y="229" width="1.5192%" height="15" fill="rgb(212,68,19)"/><text x="55.6827%" y="239.50"></text></g><g><title>codegen_module_optimize (1,690,128 samples, 2.56%)</title><rect x="56.9519%" y="229" width="2.5562%" height="15" fill="rgb(240,187,13)"/><text x="57.2019%" y="239.50">co..</text></g><g><title>LLVM_module_optimize (316,393 samples, 0.48%)</title><rect x="59.0296%" y="213" width="0.4785%" height="15" fill="rgb(223,113,26)"/><text x="59.2796%" y="223.50"></text></g><g><title>LLVM_lto_optimize (133,752 samples, 0.20%)</title><rect x="59.9177%" y="213" width="0.2023%" height="15" fill="rgb(206,192,2)"/><text x="60.1677%" y="223.50"></text></g><g><title>LLVM_module_codegen (1,352,775 samples, 2.05%)</title><rect x="60.1200%" y="213" width="2.0460%" height="15" fill="rgb(241,108,4)"/><text x="60.3700%" y="223.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (1,326,084 samples, 2.01%)</title><rect x="60.1604%" y="197" width="2.0056%" height="15" fill="rgb(247,173,49)"/><text x="60.4104%" y="207.50">L..</text></g><g><title>codegen_module_perform_lto (1,781,090 samples, 2.69%)</title><rect x="59.5081%" y="229" width="2.6938%" height="15" fill="rgb(224,114,35)"/><text x="59.7581%" y="239.50">co..</text></g><g><title>AST_validation (92,481 samples, 0.14%)</title><rect x="62.5089%" y="213" width="0.1399%" height="15" fill="rgb(245,159,27)"/><text x="62.7589%" y="223.50"></text></g><g><title>crate_injection (92,681 samples, 0.14%)</title><rect x="62.6836%" y="213" width="0.1402%" height="15" fill="rgb(245,172,44)"/><text x="62.9336%" y="223.50"></text></g><g><title>metadata_load_macro (88,780 samples, 0.13%)</title><rect x="77.7999%" y="181" width="0.1343%" height="15" fill="rgb(236,23,11)"/><text x="78.0499%" y="191.50"></text></g><g><title>macro_expand_crate (12,589,518 samples, 19.04%)</title><rect x="62.8238%" y="213" width="19.0410%" height="15" fill="rgb(205,117,38)"/><text x="63.0738%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (12,565,488 samples, 19.00%)</title><rect x="62.8601%" y="197" width="19.0046%" height="15" fill="rgb(237,72,25)"/><text x="63.1101%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,598,859 samples, 3.93%)</title><rect x="77.9341%" y="181" width="3.9306%" height="15" fill="rgb(244,70,9)"/><text x="78.1841%" y="191.50">meta..</text></g><g><title>metadata_register_crate (956,131 samples, 1.45%)</title><rect x="80.4187%" y="165" width="1.4461%" height="15" fill="rgb(217,125,39)"/><text x="80.6687%" y="175.50"></text></g><g><title>metadata_register_crate (76,220 samples, 0.12%)</title><rect x="81.7495%" y="149" width="0.1153%" height="15" fill="rgb(235,36,10)"/><text x="81.9995%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (151,471 samples, 0.23%)</title><rect x="81.8735%" y="213" width="0.2291%" height="15" fill="rgb(251,123,47)"/><text x="82.1235%" y="223.50"></text></g><g><title>late_resolve_crate (1,477,056 samples, 2.23%)</title><rect x="82.2095%" y="197" width="2.2340%" height="15" fill="rgb(221,13,13)"/><text x="82.4595%" y="207.50">l..</text></g><g><title>configure_and_expand (14,763,652 samples, 22.33%)</title><rect x="62.2019%" y="229" width="22.3292%" height="15" fill="rgb(238,131,9)"/><text x="62.4519%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,605,728 samples, 2.43%)</title><rect x="82.1026%" y="213" width="2.4286%" height="15" fill="rgb(211,50,8)"/><text x="82.3526%" y="223.50">re..</text></g><g><title>drop_ast (69,211 samples, 0.10%)</title><rect x="84.5312%" y="229" width="0.1047%" height="15" fill="rgb(245,182,24)"/><text x="84.7812%" y="239.50"></text></g><g><title>early_lint_checks (164,162 samples, 0.25%)</title><rect x="84.6541%" y="229" width="0.2483%" height="15" fill="rgb(242,14,37)"/><text x="84.9041%" y="239.50"></text></g><g><title>free_global_ctxt (2,492,527 samples, 3.77%)</title><rect x="84.9024%" y="229" width="3.7698%" height="15" fill="rgb(246,228,12)"/><text x="85.1524%" y="239.50">free..</text></g><g><title>layout_of (135,122 samples, 0.20%)</title><rect x="89.9854%" y="197" width="0.2044%" height="15" fill="rgb(213,55,15)"/><text x="90.2354%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (349,855 samples, 0.53%)</title><rect x="90.1898%" y="197" width="0.5291%" height="15" fill="rgb(209,9,3)"/><text x="90.4398%" y="207.50"></text></g><g><title>optimized_mir (837,600 samples, 1.27%)</title><rect x="89.4676%" y="213" width="1.2668%" height="15" fill="rgb(230,59,30)"/><text x="89.7176%" y="223.50"></text></g><g><title>generate_crate_metadata (1,379,476 samples, 2.09%)</title><rect x="88.6722%" y="229" width="2.0864%" height="15" fill="rgb(209,121,21)"/><text x="88.9222%" y="239.50">g..</text></g><g><title>hir_lowering (935,751 samples, 1.42%)</title><rect x="90.7586%" y="229" width="1.4153%" height="15" fill="rgb(220,109,13)"/><text x="91.0086%" y="239.50"></text></g><g><title>finish_ongoing_codegen (1,565,627 samples, 2.37%)</title><rect x="92.2015%" y="213" width="2.3679%" height="15" fill="rgb(232,18,1)"/><text x="92.4515%" y="223.50">fi..</text></g><g><title>link_crate (570,886 samples, 0.86%)</title><rect x="94.5694%" y="213" width="0.8634%" height="15" fill="rgb(215,41,42)"/><text x="94.8194%" y="223.50"></text></g><g><title>link_binary (558,496 samples, 0.84%)</title><rect x="94.5881%" y="197" width="0.8447%" height="15" fill="rgb(224,123,36)"/><text x="94.8381%" y="207.50"></text></g><g><title>link_rlib (338,213 samples, 0.51%)</title><rect x="94.9213%" y="181" width="0.5115%" height="15" fill="rgb(240,125,3)"/><text x="95.1713%" y="191.50"></text></g><g><title>link (2,162,054 samples, 3.27%)</title><rect x="92.1738%" y="229" width="3.2700%" height="15" fill="rgb(205,98,50)"/><text x="92.4238%" y="239.50">link</text></g><g><title>parse_crate (1,846,400 samples, 2.79%)</title><rect x="95.4438%" y="229" width="2.7926%" height="15" fill="rgb(205,185,37)"/><text x="95.6938%" y="239.50">pa..</text></g><g><title>prepare_outputs (329,354 samples, 0.50%)</title><rect x="98.2516%" y="229" width="0.4981%" height="15" fill="rgb(238,207,15)"/><text x="98.5016%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (371,264 samples, 0.56%)</title><rect x="98.7497%" y="229" width="0.5615%" height="15" fill="rgb(213,199,42)"/><text x="98.9997%" y="239.50"></text></g><g><title>setup_global_ctxt (149,422 samples, 0.23%)</title><rect x="99.3199%" y="229" width="0.2260%" height="15" fill="rgb(235,201,11)"/><text x="99.5699%" y="239.50"></text></g><g><title>all (66,118,049 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (66,118,049 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (300,253 samples, 0.45%)</title><rect x="99.5459%" y="229" width="0.4541%" height="15" fill="rgb(243,32,47)"/><text x="99.7959%" y="239.50"></text></g></svg></svg>