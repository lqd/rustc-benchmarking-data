<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (67,453,381 samples, 9.90%)</title><rect x="0.1429%" y="181" width="9.9042%" height="15" fill="rgb(227,0,7)"/><text x="0.3929%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (920,651 samples, 0.14%)</title><rect x="9.9120%" y="165" width="0.1352%" height="15" fill="rgb(217,0,24)"/><text x="10.1620%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (898,870 samples, 0.13%)</title><rect x="9.9152%" y="149" width="0.1320%" height="15" fill="rgb(221,193,54)"/><text x="10.1652%" y="159.50"></text></g><g><title>needs_drop_raw (2,053,249 samples, 0.30%)</title><rect x="16.4559%" y="69" width="0.3015%" height="15" fill="rgb(248,212,6)"/><text x="16.7059%" y="79.50"></text></g><g><title>is_copy_raw (1,501,396 samples, 0.22%)</title><rect x="16.5369%" y="53" width="0.2205%" height="15" fill="rgb(208,68,35)"/><text x="16.7869%" y="63.50"></text></g><g><title>evaluate_obligation (1,161,111 samples, 0.17%)</title><rect x="16.5869%" y="37" width="0.1705%" height="15" fill="rgb(232,128,0)"/><text x="16.8369%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (808,119 samples, 0.12%)</title><rect x="16.8293%" y="53" width="0.1187%" height="15" fill="rgb(207,160,47)"/><text x="17.0793%" y="63.50"></text></g><g><title>specialization_graph_of (1,027,952 samples, 0.15%)</title><rect x="16.9548%" y="53" width="0.1509%" height="15" fill="rgb(228,23,34)"/><text x="17.2048%" y="63.50"></text></g><g><title>resolve_instance (2,435,625 samples, 0.36%)</title><rect x="16.7574%" y="69" width="0.3576%" height="15" fill="rgb(218,30,26)"/><text x="17.0074%" y="79.50"></text></g><g><title>thir_body (2,967,862 samples, 0.44%)</title><rect x="17.1256%" y="69" width="0.4358%" height="15" fill="rgb(220,122,19)"/><text x="17.3756%" y="79.50"></text></g><g><title>mir_const (19,210,161 samples, 2.82%)</title><rect x="14.7521%" y="117" width="2.8206%" height="15" fill="rgb(250,228,42)"/><text x="15.0021%" y="127.50">mi..</text></g><g><title>unsafety_check_result (16,892,789 samples, 2.48%)</title><rect x="15.0923%" y="101" width="2.4804%" height="15" fill="rgb(240,193,28)"/><text x="15.3423%" y="111.50">un..</text></g><g><title>mir_built (15,018,197 samples, 2.21%)</title><rect x="15.3676%" y="85" width="2.2051%" height="15" fill="rgb(216,20,37)"/><text x="15.6176%" y="95.50">m..</text></g><g><title>mir_promoted (21,755,649 samples, 3.19%)</title><rect x="14.4723%" y="133" width="3.1944%" height="15" fill="rgb(206,188,39)"/><text x="14.7223%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (1,025,762 samples, 0.15%)</title><rect x="17.6672%" y="133" width="0.1506%" height="15" fill="rgb(217,207,13)"/><text x="17.9172%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,373,740 samples, 0.20%)</title><rect x="17.8178%" y="133" width="0.2017%" height="15" fill="rgb(231,73,38)"/><text x="18.0678%" y="143.50"></text></g><g><title>normalize_projection_ty (844,804 samples, 0.12%)</title><rect x="17.8955%" y="117" width="0.1240%" height="15" fill="rgb(225,20,46)"/><text x="18.1455%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,094,888 samples, 0.16%)</title><rect x="18.0680%" y="133" width="0.1608%" height="15" fill="rgb(210,31,41)"/><text x="18.3180%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,981,937 samples, 0.73%)</title><rect x="18.2288%" y="133" width="0.7315%" height="15" fill="rgb(221,200,47)"/><text x="18.4788%" y="143.50"></text></g><g><title>MIR_borrow_checking (60,018,945 samples, 8.81%)</title><rect x="10.1493%" y="165" width="8.8126%" height="15" fill="rgb(226,26,5)"/><text x="10.3993%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (59,670,601 samples, 8.76%)</title><rect x="10.2005%" y="149" width="8.7615%" height="15" fill="rgb(249,33,26)"/><text x="10.4505%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (1,174,104 samples, 0.17%)</title><rect x="19.1036%" y="149" width="0.1724%" height="15" fill="rgb(235,183,28)"/><text x="19.3536%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,177,373 samples, 0.17%)</title><rect x="19.3484%" y="149" width="0.1729%" height="15" fill="rgb(221,5,38)"/><text x="19.5984%" y="159.50"></text></g><g><title>misc_checking_1 (2,985,653 samples, 0.44%)</title><rect x="19.0982%" y="165" width="0.4384%" height="15" fill="rgb(247,18,42)"/><text x="19.3482%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,199,994 samples, 0.18%)</title><rect x="19.5370%" y="149" width="0.1762%" height="15" fill="rgb(241,131,45)"/><text x="19.7870%" y="159.50"></text></g><g><title>check_mod_liveness (936,840 samples, 0.14%)</title><rect x="19.5756%" y="133" width="0.1376%" height="15" fill="rgb(249,31,29)"/><text x="19.8256%" y="143.50"></text></g><g><title>eval_to_const_value_raw (707,608 samples, 0.10%)</title><rect x="19.8974%" y="117" width="0.1039%" height="15" fill="rgb(225,111,53)"/><text x="20.1474%" y="127.50"></text></g><g><title>eval_to_const_value_raw (700,728 samples, 0.10%)</title><rect x="19.8984%" y="101" width="0.1029%" height="15" fill="rgb(238,160,17)"/><text x="20.1484%" y="111.50"></text></g><g><title>eval_to_allocation_raw (695,028 samples, 0.10%)</title><rect x="19.8993%" y="85" width="0.1021%" height="15" fill="rgb(214,148,48)"/><text x="20.1493%" y="95.50"></text></g><g><title>misc_checking_2 (3,499,060 samples, 0.51%)</title><rect x="19.5366%" y="165" width="0.5138%" height="15" fill="rgb(232,36,49)"/><text x="19.7866%" y="175.50"></text></g><g><title>match_checking (2,296,536 samples, 0.34%)</title><rect x="19.7132%" y="149" width="0.3372%" height="15" fill="rgb(209,103,24)"/><text x="19.9632%" y="159.50"></text></g><g><title>check_match (2,211,736 samples, 0.32%)</title><rect x="19.7256%" y="133" width="0.3248%" height="15" fill="rgb(229,88,8)"/><text x="19.9756%" y="143.50"></text></g><g><title>death_checking (992,941 samples, 0.15%)</title><rect x="20.1336%" y="149" width="0.1458%" height="15" fill="rgb(213,181,19)"/><text x="20.3836%" y="159.50"></text></g><g><title>crate_lints (3,129,655 samples, 0.46%)</title><rect x="20.2796%" y="133" width="0.4595%" height="15" fill="rgb(254,191,54)"/><text x="20.5296%" y="143.50"></text></g><g><title>type_of (1,104,720 samples, 0.16%)</title><rect x="20.5770%" y="117" width="0.1622%" height="15" fill="rgb(241,83,37)"/><text x="20.8270%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (874,648 samples, 0.13%)</title><rect x="20.6107%" y="101" width="0.1284%" height="15" fill="rgb(233,36,39)"/><text x="20.8607%" y="111.50"></text></g><g><title>lint_checking (4,339,028 samples, 0.64%)</title><rect x="20.2794%" y="149" width="0.6371%" height="15" fill="rgb(226,3,54)"/><text x="20.5294%" y="159.50"></text></g><g><title>module_lints (1,207,833 samples, 0.18%)</title><rect x="20.7392%" y="133" width="0.1773%" height="15" fill="rgb(245,192,40)"/><text x="20.9892%" y="143.50"></text></g><g><title>lint_mod (1,197,733 samples, 0.18%)</title><rect x="20.7407%" y="117" width="0.1759%" height="15" fill="rgb(238,167,29)"/><text x="20.9907%" y="127.50"></text></g><g><title>privacy_access_levels (894,770 samples, 0.13%)</title><rect x="20.9165%" y="149" width="0.1314%" height="15" fill="rgb(232,182,51)"/><text x="21.1665%" y="159.50"></text></g><g><title>privacy_checking_modules (2,355,627 samples, 0.35%)</title><rect x="21.0479%" y="149" width="0.3459%" height="15" fill="rgb(231,60,39)"/><text x="21.2979%" y="159.50"></text></g><g><title>check_mod_privacy (2,347,657 samples, 0.34%)</title><rect x="21.0491%" y="133" width="0.3447%" height="15" fill="rgb(208,69,12)"/><text x="21.2991%" y="143.50"></text></g><g><title>misc_checking_3 (9,182,534 samples, 1.35%)</title><rect x="20.0504%" y="165" width="1.3483%" height="15" fill="rgb(235,93,37)"/><text x="20.3004%" y="175.50"></text></g><g><title>impl_parent (2,759,115 samples, 0.41%)</title><rect x="22.2212%" y="101" width="0.4051%" height="15" fill="rgb(213,116,39)"/><text x="22.4712%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,492,167 samples, 0.22%)</title><rect x="22.4072%" y="85" width="0.2191%" height="15" fill="rgb(222,207,29)"/><text x="22.6572%" y="95.50"></text></g><g><title>impl_trait_ref (5,417,126 samples, 0.80%)</title><rect x="22.6269%" y="101" width="0.7954%" height="15" fill="rgb(206,96,30)"/><text x="22.8769%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,364,471 samples, 0.64%)</title><rect x="22.7814%" y="85" width="0.6408%" height="15" fill="rgb(218,138,4)"/><text x="23.0314%" y="95.50"></text></g><g><title>trait_impls_of (864,811 samples, 0.13%)</title><rect x="23.4304%" y="101" width="0.1270%" height="15" fill="rgb(250,191,14)"/><text x="23.6804%" y="111.50"></text></g><g><title>coherent_trait (14,508,402 samples, 2.13%)</title><rect x="21.4273%" y="133" width="2.1303%" height="15" fill="rgb(239,60,40)"/><text x="21.6773%" y="143.50">c..</text></g><g><title>specialization_graph_of (13,965,876 samples, 2.05%)</title><rect x="21.5070%" y="117" width="2.0506%" height="15" fill="rgb(206,27,48)"/><text x="21.7570%" y="127.50">s..</text></g><g><title>coherence_checking (14,659,485 samples, 2.15%)</title><rect x="21.4233%" y="149" width="2.1525%" height="15" fill="rgb(225,35,8)"/><text x="21.6733%" y="159.50">c..</text></g><g><title>associated_item (1,347,296 samples, 0.20%)</title><rect x="33.4890%" y="85" width="0.1978%" height="15" fill="rgb(250,213,24)"/><text x="33.7390%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,070,532 samples, 0.16%)</title><rect x="33.5297%" y="69" width="0.1572%" height="15" fill="rgb(247,123,22)"/><text x="33.7797%" y="79.50"></text></g><g><title>associated_items (1,847,693 samples, 0.27%)</title><rect x="33.4243%" y="101" width="0.2713%" height="15" fill="rgb(231,138,38)"/><text x="33.6743%" y="111.50"></text></g><g><title>generics_of (1,236,058 samples, 0.18%)</title><rect x="35.9462%" y="85" width="0.1815%" height="15" fill="rgb(231,145,46)"/><text x="36.1962%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (985,866 samples, 0.14%)</title><rect x="35.9830%" y="69" width="0.1448%" height="15" fill="rgb(251,118,11)"/><text x="36.2330%" y="79.50"></text></g><g><title>specializes (822,616 samples, 0.12%)</title><rect x="36.2774%" y="85" width="0.1208%" height="15" fill="rgb(217,147,25)"/><text x="36.5274%" y="95.50"></text></g><g><title>evaluate_obligation (17,963,669 samples, 2.64%)</title><rect x="33.8023%" y="101" width="2.6376%" height="15" fill="rgb(247,81,37)"/><text x="34.0523%" y="111.50">ev..</text></g><g><title>method_autoderef_steps (1,017,570 samples, 0.15%)</title><rect x="36.5743%" y="101" width="0.1494%" height="15" fill="rgb(209,12,38)"/><text x="36.8243%" y="111.50"></text></g><g><title>evaluate_obligation (1,043,282 samples, 0.15%)</title><rect x="37.5936%" y="85" width="0.1532%" height="15" fill="rgb(227,1,9)"/><text x="37.8436%" y="95.50"></text></g><g><title>typeck (6,648,895 samples, 0.98%)</title><rect x="36.8751%" y="101" width="0.9763%" height="15" fill="rgb(248,47,43)"/><text x="37.1251%" y="111.50"></text></g><g><title>item_bodies_checking (97,214,365 samples, 14.27%)</title><rect x="23.5923%" y="149" width="14.2741%" height="15" fill="rgb(221,10,30)"/><text x="23.8423%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (97,210,305 samples, 14.27%)</title><rect x="23.5929%" y="133" width="14.2735%" height="15" fill="rgb(210,229,1)"/><text x="23.8429%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (96,959,492 samples, 14.24%)</title><rect x="23.6297%" y="117" width="14.2366%" height="15" fill="rgb(222,148,37)"/><text x="23.8797%" y="127.50">typeck</text></g><g><title>specializes (1,906,920 samples, 0.28%)</title><rect x="39.5003%" y="85" width="0.2800%" height="15" fill="rgb(234,67,33)"/><text x="39.7503%" y="95.50"></text></g><g><title>param_env (1,116,241 samples, 0.16%)</title><rect x="39.6164%" y="69" width="0.1639%" height="15" fill="rgb(247,98,35)"/><text x="39.8664%" y="79.50"></text></g><g><title>evaluate_obligation (5,997,888 samples, 0.88%)</title><rect x="38.9104%" y="101" width="0.8807%" height="15" fill="rgb(247,138,52)"/><text x="39.1604%" y="111.50"></text></g><g><title>typeck (7,385,454 samples, 1.08%)</title><rect x="38.7423%" y="117" width="1.0844%" height="15" fill="rgb(213,79,30)"/><text x="38.9923%" y="127.50"></text></g><g><title>item_types_checking (13,352,360 samples, 1.96%)</title><rect x="37.8663%" y="149" width="1.9605%" height="15" fill="rgb(246,177,23)"/><text x="38.1163%" y="159.50">i..</text></g><g><title>check_mod_item_types (13,342,090 samples, 1.96%)</title><rect x="37.8679%" y="133" width="1.9590%" height="15" fill="rgb(230,62,27)"/><text x="38.1179%" y="143.50">c..</text></g><g><title>fn_sig (890,759 samples, 0.13%)</title><rect x="39.9515%" y="117" width="0.1308%" height="15" fill="rgb(216,154,8)"/><text x="40.2015%" y="127.50"></text></g><g><title>resolve_lifetimes (748,629 samples, 0.11%)</title><rect x="40.1511%" y="85" width="0.1099%" height="15" fill="rgb(244,35,45)"/><text x="40.4011%" y="95.50"></text></g><g><title>is_late_bound_map (834,950 samples, 0.12%)</title><rect x="40.1398%" y="101" width="0.1226%" height="15" fill="rgb(251,115,12)"/><text x="40.3898%" y="111.50"></text></g><g><title>generics_of (1,767,739 samples, 0.26%)</title><rect x="40.0823%" y="117" width="0.2596%" height="15" fill="rgb(240,54,50)"/><text x="40.3323%" y="127.50"></text></g><g><title>explicit_predicates_of (849,430 samples, 0.12%)</title><rect x="40.4502%" y="85" width="0.1247%" height="15" fill="rgb(233,84,52)"/><text x="40.7002%" y="95.50"></text></g><g><title>predicates_of (1,462,145 samples, 0.21%)</title><rect x="40.3852%" y="117" width="0.2147%" height="15" fill="rgb(207,117,47)"/><text x="40.6352%" y="127.50"></text></g><g><title>predicates_defined_on (1,287,533 samples, 0.19%)</title><rect x="40.4109%" y="101" width="0.1890%" height="15" fill="rgb(249,43,39)"/><text x="40.6609%" y="111.50"></text></g><g><title>type_collecting (5,652,574 samples, 0.83%)</title><rect x="39.8274%" y="149" width="0.8300%" height="15" fill="rgb(209,38,44)"/><text x="40.0774%" y="159.50"></text></g><g><title>collect_mod_item_types (5,629,023 samples, 0.83%)</title><rect x="39.8309%" y="133" width="0.8265%" height="15" fill="rgb(236,212,23)"/><text x="40.0809%" y="143.50"></text></g><g><title>evaluate_obligation (1,033,834 samples, 0.15%)</title><rect x="41.5139%" y="117" width="0.1518%" height="15" fill="rgb(242,79,21)"/><text x="41.7639%" y="127.50"></text></g><g><title>param_env (962,521 samples, 0.14%)</title><rect x="41.8141%" y="117" width="0.1413%" height="15" fill="rgb(211,96,35)"/><text x="42.0641%" y="127.50"></text></g><g><title>check_impl_item_well_formed (9,226,629 samples, 1.35%)</title><rect x="40.7591%" y="133" width="1.3548%" height="15" fill="rgb(253,215,40)"/><text x="41.0091%" y="143.50"></text></g><g><title>region_scope_tree (1,064,830 samples, 0.16%)</title><rect x="41.9575%" y="117" width="0.1563%" height="15" fill="rgb(211,81,21)"/><text x="42.2075%" y="127.50"></text></g><g><title>evaluate_obligation (1,588,575 samples, 0.23%)</title><rect x="43.0668%" y="117" width="0.2333%" height="15" fill="rgb(208,190,38)"/><text x="43.3168%" y="127.50"></text></g><g><title>param_env (893,217 samples, 0.13%)</title><rect x="43.3569%" y="117" width="0.1312%" height="15" fill="rgb(235,213,38)"/><text x="43.6069%" y="127.50"></text></g><g><title>check_item_well_formed (9,948,900 samples, 1.46%)</title><rect x="42.1138%" y="133" width="1.4608%" height="15" fill="rgb(237,122,38)"/><text x="42.3638%" y="143.50"></text></g><g><title>analysis (231,315,556 samples, 33.96%)</title><rect x="10.0472%" y="181" width="33.9643%" height="15" fill="rgb(244,218,35)"/><text x="10.2972%" y="191.50">analysis</text></g><g><title>type_check_crate (154,005,695 samples, 22.61%)</title><rect x="21.3986%" y="165" width="22.6128%" height="15" fill="rgb(240,68,47)"/><text x="21.6486%" y="175.50">type_check_crate</text></g><g><title>wf_checking (22,826,548 samples, 3.35%)</title><rect x="40.6598%" y="149" width="3.3516%" height="15" fill="rgb(210,16,53)"/><text x="40.9098%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (2,974,884 samples, 0.44%)</title><rect x="43.5746%" y="133" width="0.4368%" height="15" fill="rgb(235,124,12)"/><text x="43.8246%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,258,840 samples, 0.33%)</title><rect x="45.1247%" y="149" width="0.3317%" height="15" fill="rgb(224,169,11)"/><text x="45.3747%" y="159.50"></text></g><g><title>codegen_module (9,519,749 samples, 1.40%)</title><rect x="44.1594%" y="165" width="1.3978%" height="15" fill="rgb(250,166,2)"/><text x="44.4094%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (860,666 samples, 0.13%)</title><rect x="45.9557%" y="101" width="0.1264%" height="15" fill="rgb(242,216,29)"/><text x="46.2057%" y="111.50"></text></g><g><title>optimized_mir (3,054,751 samples, 0.45%)</title><rect x="45.6906%" y="117" width="0.4485%" height="15" fill="rgb(230,116,27)"/><text x="45.9406%" y="127.50"></text></g><g><title>resolve_instance (1,045,961 samples, 0.15%)</title><rect x="46.1392%" y="117" width="0.1536%" height="15" fill="rgb(228,99,48)"/><text x="46.3892%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (5,335,870 samples, 0.78%)</title><rect x="45.5622%" y="133" width="0.7835%" height="15" fill="rgb(253,11,6)"/><text x="45.8122%" y="143.50"></text></g><g><title>monomorphization_collector (5,446,901 samples, 0.80%)</title><rect x="45.5618%" y="149" width="0.7998%" height="15" fill="rgb(247,143,39)"/><text x="45.8118%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (5,945,787 samples, 0.87%)</title><rect x="45.5576%" y="165" width="0.8730%" height="15" fill="rgb(236,97,10)"/><text x="45.8076%" y="175.50"></text></g><g><title>codegen_crate (16,528,717 samples, 2.43%)</title><rect x="44.0130%" y="181" width="2.4269%" height="15" fill="rgb(233,208,19)"/><text x="44.2630%" y="191.50">co..</text></g><g><title>codegen_module_optimize (75,394,218 samples, 11.07%)</title><rect x="46.4399%" y="181" width="11.0702%" height="15" fill="rgb(216,164,2)"/><text x="46.6899%" y="191.50">codegen_module_o..</text></g><g><title>LLVM_module_optimize (65,058,553 samples, 9.55%)</title><rect x="47.9575%" y="165" width="9.5526%" height="15" fill="rgb(220,129,5)"/><text x="48.2075%" y="175.50">LLVM_module_op..</text></g><g><title>LLVM_lto_optimize (44,532,542 samples, 6.54%)</title><rect x="58.4743%" y="165" width="6.5388%" height="15" fill="rgb(242,17,10)"/><text x="58.7243%" y="175.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (85,964,999 samples, 12.62%)</title><rect x="65.0131%" y="165" width="12.6223%" height="15" fill="rgb(242,107,0)"/><text x="65.2631%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (84,689,634 samples, 12.44%)</title><rect x="65.2003%" y="149" width="12.4351%" height="15" fill="rgb(251,28,31)"/><text x="65.4503%" y="159.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (1,717,029 samples, 0.25%)</title><rect x="77.6354%" y="165" width="0.2521%" height="15" fill="rgb(233,223,10)"/><text x="77.8854%" y="175.50"></text></g><g><title>codegen_module_perform_lto (139,273,745 samples, 20.45%)</title><rect x="57.5101%" y="181" width="20.4497%" height="15" fill="rgb(215,21,27)"/><text x="57.7601%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,249,395 samples, 0.33%)</title><rect x="83.4023%" y="133" width="0.3303%" height="15" fill="rgb(232,23,21)"/><text x="83.6523%" y="143.50"></text></g><g><title>metadata_register_crate (822,709 samples, 0.12%)</title><rect x="83.6118%" y="117" width="0.1208%" height="15" fill="rgb(244,5,23)"/><text x="83.8618%" y="127.50"></text></g><g><title>macro_expand_crate (39,178,232 samples, 5.75%)</title><rect x="78.0629%" y="165" width="5.7526%" height="15" fill="rgb(226,81,46)"/><text x="78.3129%" y="175.50">macro_e..</text></g><g><title>expand_crate (39,161,722 samples, 5.75%)</title><rect x="78.0653%" y="149" width="5.7501%" height="15" fill="rgb(247,70,30)"/><text x="78.3153%" y="159.50">expand_..</text></g><g><title>late_resolve_crate (4,696,193 samples, 0.69%)</title><rect x="83.9092%" y="149" width="0.6895%" height="15" fill="rgb(212,68,19)"/><text x="84.1592%" y="159.50"></text></g><g><title>configure_and_expand (45,492,652 samples, 6.68%)</title><rect x="77.9598%" y="181" width="6.6797%" height="15" fill="rgb(240,187,13)"/><text x="78.2098%" y="191.50">configure..</text></g><g><title>resolve_crate (5,342,930 samples, 0.78%)</title><rect x="83.8550%" y="165" width="0.7845%" height="15" fill="rgb(223,113,26)"/><text x="84.1050%" y="175.50"></text></g><g><title>early_lint_checks (930,450 samples, 0.14%)</title><rect x="84.7311%" y="181" width="0.1366%" height="15" fill="rgb(206,192,2)"/><text x="84.9811%" y="191.50"></text></g><g><title>free_global_ctxt (6,423,243 samples, 0.94%)</title><rect x="84.8677%" y="181" width="0.9431%" height="15" fill="rgb(241,108,4)"/><text x="85.1177%" y="191.50"></text></g><g><title>layout_of (1,603,933 samples, 0.24%)</title><rect x="87.8470%" y="149" width="0.2355%" height="15" fill="rgb(247,173,49)"/><text x="88.0970%" y="159.50"></text></g><g><title>needs_drop_raw (793,225 samples, 0.12%)</title><rect x="89.2385%" y="133" width="0.1165%" height="15" fill="rgb(224,114,35)"/><text x="89.4885%" y="143.50"></text></g><g><title>is_copy_raw (719,175 samples, 0.11%)</title><rect x="89.2494%" y="117" width="0.1056%" height="15" fill="rgb(245,159,27)"/><text x="89.4994%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,774,143 samples, 1.29%)</title><rect x="88.0825%" y="149" width="1.2883%" height="15" fill="rgb(245,172,44)"/><text x="88.3325%" y="159.50"></text></g><g><title>optimized_mir (18,762,022 samples, 2.75%)</title><rect x="86.6245%" y="165" width="2.7548%" height="15" fill="rgb(236,23,11)"/><text x="86.8745%" y="175.50">op..</text></g><g><title>generate_crate_metadata (24,473,776 samples, 3.59%)</title><rect x="85.8108%" y="181" width="3.5935%" height="15" fill="rgb(205,117,38)"/><text x="86.0608%" y="191.50">gene..</text></g><g><title>hir_lowering (9,576,048 samples, 1.41%)</title><rect x="89.4043%" y="181" width="1.4061%" height="15" fill="rgb(237,72,25)"/><text x="89.6543%" y="191.50"></text></g><g><title>finish_ongoing_codegen (51,714,013 samples, 7.59%)</title><rect x="90.8156%" y="165" width="7.5932%" height="15" fill="rgb(244,70,9)"/><text x="91.0656%" y="175.50">finish_ong..</text></g><g><title>link_crate (3,406,018 samples, 0.50%)</title><rect x="98.4088%" y="165" width="0.5001%" height="15" fill="rgb(217,125,39)"/><text x="98.6588%" y="175.50"></text></g><g><title>link_binary (3,255,677 samples, 0.48%)</title><rect x="98.4309%" y="149" width="0.4780%" height="15" fill="rgb(235,36,10)"/><text x="98.6809%" y="159.50"></text></g><g><title>link_rlib (2,409,227 samples, 0.35%)</title><rect x="98.5552%" y="133" width="0.3537%" height="15" fill="rgb(251,123,47)"/><text x="98.8052%" y="143.50"></text></g><g><title>link (55,169,861 samples, 8.10%)</title><rect x="90.8104%" y="181" width="8.1006%" height="15" fill="rgb(221,13,13)"/><text x="91.0604%" y="191.50">link</text></g><g><title>parse_crate (4,070,975 samples, 0.60%)</title><rect x="98.9110%" y="181" width="0.5977%" height="15" fill="rgb(238,131,9)"/><text x="99.1610%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,451,157 samples, 0.36%)</title><rect x="99.5443%" y="181" width="0.3599%" height="15" fill="rgb(211,50,8)"/><text x="99.7943%" y="191.50"></text></g><g><title>all (681,055,758 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (681,055,758 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>