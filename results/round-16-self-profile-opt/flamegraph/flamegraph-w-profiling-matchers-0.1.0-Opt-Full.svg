<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (37,608,573 samples, 18.52%)</title><rect x="0.1965%" y="197" width="18.5203%" height="15" fill="rgb(227,0,7)"/><text x="0.4465%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (214,372 samples, 0.11%)</title><rect x="18.6113%" y="181" width="0.1056%" height="15" fill="rgb(217,0,24)"/><text x="18.8613%" y="191.50"></text></g><g><title>adt_drop_tys (311,113 samples, 0.15%)</title><rect x="23.0030%" y="53" width="0.1532%" height="15" fill="rgb(221,193,54)"/><text x="23.2530%" y="63.50"></text></g><g><title>adt_drop_tys (618,367 samples, 0.30%)</title><rect x="22.9871%" y="69" width="0.3045%" height="15" fill="rgb(248,212,6)"/><text x="23.2371%" y="79.50"></text></g><g><title>is_copy_raw (709,826 samples, 0.35%)</title><rect x="23.2917%" y="69" width="0.3496%" height="15" fill="rgb(208,68,35)"/><text x="23.5417%" y="79.50"></text></g><g><title>evaluate_obligation (594,806 samples, 0.29%)</title><rect x="23.3483%" y="53" width="0.2929%" height="15" fill="rgb(232,128,0)"/><text x="23.5983%" y="63.50"></text></g><g><title>needs_drop_raw (1,439,296 samples, 0.71%)</title><rect x="22.9349%" y="85" width="0.7088%" height="15" fill="rgb(207,160,47)"/><text x="23.1849%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (232,613 samples, 0.11%)</title><rect x="23.7189%" y="69" width="0.1146%" height="15" fill="rgb(228,23,34)"/><text x="23.9689%" y="79.50"></text></g><g><title>impl_parent (204,544 samples, 0.10%)</title><rect x="23.9964%" y="53" width="0.1007%" height="15" fill="rgb(218,30,26)"/><text x="24.2464%" y="63.50"></text></g><g><title>specialization_graph_of (924,650 samples, 0.46%)</title><rect x="23.8512%" y="69" width="0.4553%" height="15" fill="rgb(220,122,19)"/><text x="24.1012%" y="79.50"></text></g><g><title>impl_trait_ref (425,245 samples, 0.21%)</title><rect x="24.0971%" y="53" width="0.2094%" height="15" fill="rgb(250,228,42)"/><text x="24.3471%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (364,773 samples, 0.18%)</title><rect x="24.1269%" y="37" width="0.1796%" height="15" fill="rgb(240,193,28)"/><text x="24.3769%" y="47.50"></text></g><g><title>resolve_instance (1,426,069 samples, 0.70%)</title><rect x="23.6437%" y="85" width="0.7023%" height="15" fill="rgb(216,20,37)"/><text x="23.8937%" y="95.50"></text></g><g><title>thir_body (350,267 samples, 0.17%)</title><rect x="24.3511%" y="85" width="0.1725%" height="15" fill="rgb(206,188,39)"/><text x="24.6011%" y="95.50"></text></g><g><title>mir_const (5,668,365 samples, 2.79%)</title><rect x="21.7708%" y="133" width="2.7914%" height="15" fill="rgb(217,207,13)"/><text x="22.0208%" y="143.50">mi..</text></g><g><title>unsafety_check_result (4,927,827 samples, 2.43%)</title><rect x="22.1355%" y="117" width="2.4267%" height="15" fill="rgb(231,73,38)"/><text x="22.3855%" y="127.50">un..</text></g><g><title>mir_built (4,580,852 samples, 2.26%)</title><rect x="22.3064%" y="101" width="2.2558%" height="15" fill="rgb(225,20,46)"/><text x="22.5564%" y="111.50">m..</text></g><g><title>mir_promoted (6,062,000 samples, 2.99%)</title><rect x="21.5863%" y="149" width="2.9852%" height="15" fill="rgb(210,31,41)"/><text x="21.8363%" y="159.50">mir..</text></g><g><title>type_op_ascribe_user_type (480,215 samples, 0.24%)</title><rect x="24.5716%" y="149" width="0.2365%" height="15" fill="rgb(221,200,47)"/><text x="24.8216%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (365,216 samples, 0.18%)</title><rect x="24.8081%" y="149" width="0.1799%" height="15" fill="rgb(226,26,5)"/><text x="25.0581%" y="159.50"></text></g><g><title>type_op_prove_predicate (2,454,527 samples, 1.21%)</title><rect x="25.1446%" y="149" width="1.2087%" height="15" fill="rgb(249,33,26)"/><text x="25.3946%" y="159.50"></text></g><g><title>MIR_borrow_checking (15,346,323 samples, 7.56%)</title><rect x="18.7987%" y="181" width="7.5573%" height="15" fill="rgb(235,183,28)"/><text x="19.0487%" y="191.50">MIR_borrow..</text></g><g><title>mir_borrowck (15,303,422 samples, 7.54%)</title><rect x="18.8198%" y="165" width="7.5362%" height="15" fill="rgb(221,5,38)"/><text x="19.0698%" y="175.50">mir_borrow..</text></g><g><title>codegen_fn_attrs (281,212 samples, 0.14%)</title><rect x="26.4770%" y="149" width="0.1385%" height="15" fill="rgb(247,18,42)"/><text x="26.7270%" y="159.50"></text></g><g><title>check_mod_attrs (390,244 samples, 0.19%)</title><rect x="26.4234%" y="165" width="0.1922%" height="15" fill="rgb(241,131,45)"/><text x="26.6734%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (225,013 samples, 0.11%)</title><rect x="26.6621%" y="165" width="0.1108%" height="15" fill="rgb(249,31,29)"/><text x="26.9121%" y="175.50"></text></g><g><title>misc_checking_1 (762,339 samples, 0.38%)</title><rect x="26.4123%" y="181" width="0.3754%" height="15" fill="rgb(225,111,53)"/><text x="26.6623%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (246,773 samples, 0.12%)</title><rect x="26.7884%" y="165" width="0.1215%" height="15" fill="rgb(238,160,17)"/><text x="27.0384%" y="175.50"></text></g><g><title>check_mod_liveness (205,292 samples, 0.10%)</title><rect x="26.8088%" y="149" width="0.1011%" height="15" fill="rgb(214,148,48)"/><text x="27.0588%" y="159.50"></text></g><g><title>misc_checking_2 (464,516 samples, 0.23%)</title><rect x="26.7877%" y="181" width="0.2288%" height="15" fill="rgb(232,36,49)"/><text x="27.0377%" y="191.50"></text></g><g><title>match_checking (216,333 samples, 0.11%)</title><rect x="26.9099%" y="165" width="0.1065%" height="15" fill="rgb(209,103,24)"/><text x="27.1599%" y="175.50"></text></g><g><title>check_match (204,792 samples, 0.10%)</title><rect x="26.9156%" y="149" width="0.1008%" height="15" fill="rgb(229,88,8)"/><text x="27.1656%" y="159.50"></text></g><g><title>death_checking (583,266 samples, 0.29%)</title><rect x="27.0782%" y="165" width="0.2872%" height="15" fill="rgb(213,181,19)"/><text x="27.3282%" y="175.50"></text></g><g><title>item_attrs (424,834 samples, 0.21%)</title><rect x="27.1562%" y="149" width="0.2092%" height="15" fill="rgb(254,191,54)"/><text x="27.4062%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (423,594 samples, 0.21%)</title><rect x="27.1568%" y="133" width="0.2086%" height="15" fill="rgb(241,83,37)"/><text x="27.4068%" y="143.50"></text></g><g><title>crate_lints (1,794,961 samples, 0.88%)</title><rect x="27.3661%" y="149" width="0.8839%" height="15" fill="rgb(233,36,39)"/><text x="27.6161%" y="159.50"></text></g><g><title>type_of (1,118,174 samples, 0.55%)</title><rect x="27.6994%" y="133" width="0.5506%" height="15" fill="rgb(226,3,54)"/><text x="27.9494%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (855,669 samples, 0.42%)</title><rect x="27.8286%" y="117" width="0.4214%" height="15" fill="rgb(245,192,40)"/><text x="28.0786%" y="127.50"></text></g><g><title>lint_checking (1,958,352 samples, 0.96%)</title><rect x="27.3654%" y="165" width="0.9644%" height="15" fill="rgb(238,167,29)"/><text x="27.6154%" y="175.50"></text></g><g><title>privacy_checking_modules (427,785 samples, 0.21%)</title><rect x="28.4031%" y="165" width="0.2107%" height="15" fill="rgb(232,182,51)"/><text x="28.6531%" y="175.50"></text></g><g><title>check_mod_privacy (425,505 samples, 0.21%)</title><rect x="28.4042%" y="149" width="0.2095%" height="15" fill="rgb(231,60,39)"/><text x="28.6542%" y="159.50"></text></g><g><title>misc_checking_3 (3,254,276 samples, 1.60%)</title><rect x="27.0164%" y="181" width="1.6026%" height="15" fill="rgb(208,69,12)"/><text x="27.2664%" y="191.50"></text></g><g><title>impl_parent (1,728,924 samples, 0.85%)</title><rect x="29.7319%" y="117" width="0.8514%" height="15" fill="rgb(235,93,37)"/><text x="29.9819%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (948,294 samples, 0.47%)</title><rect x="30.1163%" y="101" width="0.4670%" height="15" fill="rgb(213,116,39)"/><text x="30.3663%" y="111.50"></text></g><g><title>impl_trait_ref (4,118,632 samples, 2.03%)</title><rect x="30.5833%" y="117" width="2.0282%" height="15" fill="rgb(222,207,29)"/><text x="30.8333%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,598,925 samples, 1.77%)</title><rect x="30.8392%" y="101" width="1.7723%" height="15" fill="rgb(206,96,30)"/><text x="31.0892%" y="111.50">m..</text></g><g><title>coherent_trait (8,497,707 samples, 4.18%)</title><rect x="28.6449%" y="149" width="4.1847%" height="15" fill="rgb(218,138,4)"/><text x="28.8949%" y="159.50">coher..</text></g><g><title>specialization_graph_of (8,485,466 samples, 4.18%)</title><rect x="28.6510%" y="133" width="4.1787%" height="15" fill="rgb(250,191,14)"/><text x="28.9010%" y="143.50">speci..</text></g><g><title>trait_impls_of (441,065 samples, 0.22%)</title><rect x="32.6124%" y="117" width="0.2172%" height="15" fill="rgb(239,60,40)"/><text x="32.8624%" y="127.50"></text></g><g><title>coherence_checking (8,562,277 samples, 4.22%)</title><rect x="28.6375%" y="165" width="4.2165%" height="15" fill="rgb(206,27,48)"/><text x="28.8875%" y="175.50">coher..</text></g><g><title>associated_items (296,865 samples, 0.15%)</title><rect x="38.1309%" y="117" width="0.1462%" height="15" fill="rgb(225,35,8)"/><text x="38.3809%" y="127.50"></text></g><g><title>adt_dtorck_constraint (261,203 samples, 0.13%)</title><rect x="38.4888%" y="85" width="0.1286%" height="15" fill="rgb(250,213,24)"/><text x="38.7388%" y="95.50"></text></g><g><title>adt_dtorck_constraint (399,223 samples, 0.20%)</title><rect x="38.4373%" y="101" width="0.1966%" height="15" fill="rgb(247,123,22)"/><text x="38.6873%" y="111.50"></text></g><g><title>dropck_outlives (728,158 samples, 0.36%)</title><rect x="38.3010%" y="117" width="0.3586%" height="15" fill="rgb(231,138,38)"/><text x="38.5510%" y="127.50"></text></g><g><title>impl_trait_ref (286,482 samples, 0.14%)</title><rect x="39.3664%" y="101" width="0.1411%" height="15" fill="rgb(231,145,46)"/><text x="39.6164%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (262,702 samples, 0.13%)</title><rect x="39.3782%" y="85" width="0.1294%" height="15" fill="rgb(251,118,11)"/><text x="39.6282%" y="95.50"></text></g><g><title>evaluate_obligation (2,174,065 samples, 1.07%)</title><rect x="38.6595%" y="117" width="1.0706%" height="15" fill="rgb(217,147,25)"/><text x="38.9095%" y="127.50"></text></g><g><title>method_autoderef_steps (385,456 samples, 0.19%)</title><rect x="40.0199%" y="117" width="0.1898%" height="15" fill="rgb(247,81,37)"/><text x="40.2699%" y="127.50"></text></g><g><title>predicates_of (303,112 samples, 0.15%)</title><rect x="40.2881%" y="117" width="0.1493%" height="15" fill="rgb(209,12,38)"/><text x="40.5381%" y="127.50"></text></g><g><title>predicates_defined_on (216,540 samples, 0.11%)</title><rect x="40.3307%" y="101" width="0.1066%" height="15" fill="rgb(227,1,9)"/><text x="40.5807%" y="111.50"></text></g><g><title>type_of (240,583 samples, 0.12%)</title><rect x="40.4625%" y="117" width="0.1185%" height="15" fill="rgb(248,47,43)"/><text x="40.7125%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (225,133 samples, 0.11%)</title><rect x="40.4701%" y="101" width="0.1109%" height="15" fill="rgb(221,10,30)"/><text x="40.7201%" y="111.50"></text></g><g><title>item_bodies_checking (15,704,666 samples, 7.73%)</title><rect x="32.8678%" y="165" width="7.7338%" height="15" fill="rgb(210,229,1)"/><text x="33.1178%" y="175.50">item_bodies..</text></g><g><title>typeck_item_bodies (15,702,256 samples, 7.73%)</title><rect x="32.8690%" y="149" width="7.7326%" height="15" fill="rgb(222,148,37)"/><text x="33.1190%" y="159.50">typeck_item..</text></g><g><title>typeck (15,667,355 samples, 7.72%)</title><rect x="32.8862%" y="133" width="7.7154%" height="15" fill="rgb(234,67,33)"/><text x="33.1362%" y="143.50">typeck</text></g><g><title>adt_destructor (329,513 samples, 0.16%)</title><rect x="40.8982%" y="133" width="0.1623%" height="15" fill="rgb(247,98,35)"/><text x="41.1482%" y="143.50"></text></g><g><title>coherent_trait (325,223 samples, 0.16%)</title><rect x="40.9003%" y="117" width="0.1602%" height="15" fill="rgb(247,138,52)"/><text x="41.1503%" y="127.50"></text></g><g><title>specialization_graph_of (322,423 samples, 0.16%)</title><rect x="40.9017%" y="101" width="0.1588%" height="15" fill="rgb(213,79,30)"/><text x="41.1517%" y="111.50"></text></g><g><title>item_types_checking (1,014,561 samples, 0.50%)</title><rect x="40.6016%" y="165" width="0.4996%" height="15" fill="rgb(246,177,23)"/><text x="40.8516%" y="175.50"></text></g><g><title>check_mod_item_types (1,011,511 samples, 0.50%)</title><rect x="40.6031%" y="149" width="0.4981%" height="15" fill="rgb(230,62,27)"/><text x="40.8531%" y="159.50"></text></g><g><title>fn_sig (256,694 samples, 0.13%)</title><rect x="41.1757%" y="133" width="0.1264%" height="15" fill="rgb(216,154,8)"/><text x="41.4257%" y="143.50"></text></g><g><title>generics_of (258,122 samples, 0.13%)</title><rect x="41.3022%" y="133" width="0.1271%" height="15" fill="rgb(244,35,45)"/><text x="41.5522%" y="143.50"></text></g><g><title>late_bound_vars_map (248,553 samples, 0.12%)</title><rect x="41.6495%" y="85" width="0.1224%" height="15" fill="rgb(251,115,12)"/><text x="41.8995%" y="95.50"></text></g><g><title>resolve_lifetimes (234,012 samples, 0.12%)</title><rect x="41.6566%" y="69" width="0.1152%" height="15" fill="rgb(240,54,50)"/><text x="41.9066%" y="79.50"></text></g><g><title>explicit_predicates_of (536,244 samples, 0.26%)</title><rect x="41.5178%" y="101" width="0.2641%" height="15" fill="rgb(233,84,52)"/><text x="41.7678%" y="111.50"></text></g><g><title>predicates_of (708,507 samples, 0.35%)</title><rect x="41.4884%" y="133" width="0.3489%" height="15" fill="rgb(207,117,47)"/><text x="41.7384%" y="143.50"></text></g><g><title>predicates_defined_on (685,577 samples, 0.34%)</title><rect x="41.4997%" y="117" width="0.3376%" height="15" fill="rgb(249,43,39)"/><text x="41.7497%" y="127.50"></text></g><g><title>type_collecting (1,696,969 samples, 0.84%)</title><rect x="41.1021%" y="165" width="0.8357%" height="15" fill="rgb(209,38,44)"/><text x="41.3521%" y="175.50"></text></g><g><title>collect_mod_item_types (1,690,029 samples, 0.83%)</title><rect x="41.1055%" y="149" width="0.8323%" height="15" fill="rgb(236,212,23)"/><text x="41.3555%" y="159.50"></text></g><g><title>evaluate_obligation (561,186 samples, 0.28%)</title><rect x="43.0136%" y="133" width="0.2764%" height="15" fill="rgb(242,79,21)"/><text x="43.2636%" y="143.50"></text></g><g><title>implied_outlives_bounds (320,266 samples, 0.16%)</title><rect x="43.2991%" y="133" width="0.1577%" height="15" fill="rgb(211,96,35)"/><text x="43.5491%" y="143.50"></text></g><g><title>param_env (343,460 samples, 0.17%)</title><rect x="43.4568%" y="133" width="0.1691%" height="15" fill="rgb(253,215,40)"/><text x="43.7068%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,611,790 samples, 1.78%)</title><rect x="41.9937%" y="149" width="1.7786%" height="15" fill="rgb(211,81,21)"/><text x="42.2437%" y="159.50">c..</text></g><g><title>evaluate_obligation (540,027 samples, 0.27%)</title><rect x="44.6066%" y="133" width="0.2659%" height="15" fill="rgb(208,190,38)"/><text x="44.8566%" y="143.50"></text></g><g><title>param_env (254,303 samples, 0.13%)</title><rect x="44.9453%" y="133" width="0.1252%" height="15" fill="rgb(235,213,38)"/><text x="45.1953%" y="143.50"></text></g><g><title>trait_impls_of (458,925 samples, 0.23%)</title><rect x="45.1151%" y="133" width="0.2260%" height="15" fill="rgb(237,122,38)"/><text x="45.3651%" y="143.50"></text></g><g><title>check_item_well_formed (3,249,267 samples, 1.60%)</title><rect x="43.7723%" y="149" width="1.6001%" height="15" fill="rgb(244,218,35)"/><text x="44.0223%" y="159.50"></text></g><g><title>analysis (54,354,691 samples, 26.77%)</title><rect x="18.7169%" y="197" width="26.7669%" height="15" fill="rgb(240,68,47)"/><text x="18.9669%" y="207.50">analysis</text></g><g><title>type_check_crate (34,246,744 samples, 16.86%)</title><rect x="28.6190%" y="181" width="16.8648%" height="15" fill="rgb(210,16,53)"/><text x="28.8690%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,199,191 samples, 3.55%)</title><rect x="41.9386%" y="165" width="3.5452%" height="15" fill="rgb(235,124,12)"/><text x="42.1886%" y="175.50">wf_c..</text></g><g><title>check_trait_item_well_formed (226,213 samples, 0.11%)</title><rect x="45.3724%" y="149" width="0.1114%" height="15" fill="rgb(224,169,11)"/><text x="45.6224%" y="159.50"></text></g><g><title>is_freeze_raw (217,312 samples, 0.11%)</title><rect x="46.4597%" y="149" width="0.1070%" height="15" fill="rgb(250,166,2)"/><text x="46.7097%" y="159.50"></text></g><g><title>evaluate_obligation (208,612 samples, 0.10%)</title><rect x="46.4640%" y="133" width="0.1027%" height="15" fill="rgb(242,216,29)"/><text x="46.7140%" y="143.50"></text></g><g><title>fn_abi_of_instance (574,176 samples, 0.28%)</title><rect x="46.4101%" y="165" width="0.2828%" height="15" fill="rgb(230,116,27)"/><text x="46.6601%" y="175.50"></text></g><g><title>codegen_module (1,950,802 samples, 0.96%)</title><rect x="45.7579%" y="181" width="0.9607%" height="15" fill="rgb(228,99,48)"/><text x="46.0079%" y="191.50"></text></g><g><title>layout_of (203,703 samples, 0.10%)</title><rect x="46.9273%" y="117" width="0.1003%" height="15" fill="rgb(253,11,6)"/><text x="47.1773%" y="127.50"></text></g><g><title>optimized_mir (844,409 samples, 0.42%)</title><rect x="46.8282%" y="133" width="0.4158%" height="15" fill="rgb(247,143,39)"/><text x="47.0782%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (414,555 samples, 0.20%)</title><rect x="47.0399%" y="117" width="0.2041%" height="15" fill="rgb(236,97,10)"/><text x="47.2899%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (215,002 samples, 0.11%)</title><rect x="47.2647%" y="117" width="0.1059%" height="15" fill="rgb(233,208,19)"/><text x="47.5147%" y="127.50"></text></g><g><title>specialization_graph_of (1,188,083 samples, 0.59%)</title><rect x="47.3815%" y="117" width="0.5851%" height="15" fill="rgb(216,164,2)"/><text x="47.6315%" y="127.50"></text></g><g><title>impl_trait_ref (429,176 samples, 0.21%)</title><rect x="47.7552%" y="101" width="0.2113%" height="15" fill="rgb(220,129,5)"/><text x="48.0052%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (335,204 samples, 0.17%)</title><rect x="47.8015%" y="85" width="0.1651%" height="15" fill="rgb(242,17,10)"/><text x="48.0515%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (2,506,658 samples, 1.23%)</title><rect x="46.7360%" y="149" width="1.2344%" height="15" fill="rgb(242,107,0)"/><text x="46.9860%" y="159.50"></text></g><g><title>resolve_instance (1,474,907 samples, 0.73%)</title><rect x="47.2440%" y="133" width="0.7263%" height="15" fill="rgb(251,28,31)"/><text x="47.4940%" y="143.50"></text></g><g><title>monomorphization_collector (2,539,888 samples, 1.25%)</title><rect x="46.7347%" y="165" width="1.2508%" height="15" fill="rgb(233,223,10)"/><text x="46.9847%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (2,684,990 samples, 1.32%)</title><rect x="46.7189%" y="181" width="1.3222%" height="15" fill="rgb(215,21,27)"/><text x="46.9689%" y="191.50"></text></g><g><title>codegen_crate (5,256,449 samples, 2.59%)</title><rect x="45.4870%" y="197" width="2.5885%" height="15" fill="rgb(232,23,21)"/><text x="45.7370%" y="207.50">co..</text></g><g><title>codegen_module_optimize (21,444,482 samples, 10.56%)</title><rect x="48.0755%" y="197" width="10.5603%" height="15" fill="rgb(244,5,23)"/><text x="48.3255%" y="207.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (19,776,023 samples, 9.74%)</title><rect x="48.8972%" y="181" width="9.7387%" height="15" fill="rgb(226,81,46)"/><text x="49.1472%" y="191.50">LLVM_module_op..</text></g><g><title>LLVM_lto_optimize (8,664,607 samples, 4.27%)</title><rect x="59.4031%" y="181" width="4.2669%" height="15" fill="rgb(247,70,30)"/><text x="59.6531%" y="191.50">LLVM_..</text></g><g><title>LLVM_module_codegen (16,074,070 samples, 7.92%)</title><rect x="63.6699%" y="181" width="7.9157%" height="15" fill="rgb(212,68,19)"/><text x="63.9199%" y="191.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (15,819,057 samples, 7.79%)</title><rect x="63.7955%" y="165" width="7.7901%" height="15" fill="rgb(240,187,13)"/><text x="64.0455%" y="175.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (342,604 samples, 0.17%)</title><rect x="71.5856%" y="181" width="0.1687%" height="15" fill="rgb(223,113,26)"/><text x="71.8356%" y="191.50"></text></g><g><title>codegen_module_perform_lto (26,698,900 samples, 13.15%)</title><rect x="58.6359%" y="197" width="13.1479%" height="15" fill="rgb(206,192,2)"/><text x="58.8859%" y="207.50">codegen_module_perfo..</text></g><g><title>macro_expand_crate (8,334,884 samples, 4.10%)</title><rect x="71.9173%" y="181" width="4.1045%" height="15" fill="rgb(241,108,4)"/><text x="72.1673%" y="191.50">macr..</text></g><g><title>expand_crate (8,319,983 samples, 4.10%)</title><rect x="71.9246%" y="165" width="4.0972%" height="15" fill="rgb(247,173,49)"/><text x="72.1746%" y="175.50">expa..</text></g><g><title>metadata_register_crate (1,404,936 samples, 0.69%)</title><rect x="75.3299%" y="149" width="0.6919%" height="15" fill="rgb(224,114,35)"/><text x="75.5799%" y="159.50"></text></g><g><title>metadata_register_crate (484,564 samples, 0.24%)</title><rect x="75.7832%" y="133" width="0.2386%" height="15" fill="rgb(245,159,27)"/><text x="76.0332%" y="143.50"></text></g><g><title>late_resolve_crate (930,321 samples, 0.46%)</title><rect x="76.1174%" y="165" width="0.4581%" height="15" fill="rgb(245,172,44)"/><text x="76.3674%" y="175.50"></text></g><g><title>configure_and_expand (9,783,510 samples, 4.82%)</title><rect x="71.7837%" y="197" width="4.8179%" height="15" fill="rgb(236,23,11)"/><text x="72.0337%" y="207.50">config..</text></g><g><title>resolve_crate (1,061,322 samples, 0.52%)</title><rect x="76.0790%" y="181" width="0.5226%" height="15" fill="rgb(205,117,38)"/><text x="76.3290%" y="191.50"></text></g><g><title>free_global_ctxt (3,591,800 samples, 1.77%)</title><rect x="76.7350%" y="197" width="1.7688%" height="15" fill="rgb(237,72,25)"/><text x="76.9850%" y="207.50"></text></g><g><title>layout_of (580,716 samples, 0.29%)</title><rect x="79.6401%" y="165" width="0.2860%" height="15" fill="rgb(244,70,9)"/><text x="79.8901%" y="175.50"></text></g><g><title>is_copy_raw (267,083 samples, 0.13%)</title><rect x="80.5967%" y="133" width="0.1315%" height="15" fill="rgb(217,125,39)"/><text x="80.8467%" y="143.50"></text></g><g><title>evaluate_obligation (206,652 samples, 0.10%)</title><rect x="80.6265%" y="117" width="0.1018%" height="15" fill="rgb(235,36,10)"/><text x="80.8765%" y="127.50"></text></g><g><title>needs_drop_raw (325,893 samples, 0.16%)</title><rect x="80.5699%" y="149" width="0.1605%" height="15" fill="rgb(251,123,47)"/><text x="80.8199%" y="159.50"></text></g><g><title>optimized_mir (3,572,029 samples, 1.76%)</title><rect x="79.0523%" y="181" width="1.7590%" height="15" fill="rgb(221,13,13)"/><text x="79.3023%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,797,779 samples, 0.89%)</title><rect x="79.9260%" y="165" width="0.8853%" height="15" fill="rgb(238,131,9)"/><text x="80.1760%" y="175.50"></text></g><g><title>generate_crate_metadata (4,750,954 samples, 2.34%)</title><rect x="78.5038%" y="197" width="2.3396%" height="15" fill="rgb(211,50,8)"/><text x="78.7538%" y="207.50">g..</text></g><g><title>hir_lowering (1,429,806 samples, 0.70%)</title><rect x="80.8434%" y="197" width="0.7041%" height="15" fill="rgb(245,182,24)"/><text x="81.0934%" y="207.50"></text></g><g><title>finish_ongoing_codegen (33,175,813 samples, 16.34%)</title><rect x="81.5546%" y="181" width="16.3374%" height="15" fill="rgb(242,14,37)"/><text x="81.8046%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (745,429 samples, 0.37%)</title><rect x="97.8920%" y="181" width="0.3671%" height="15" fill="rgb(246,228,12)"/><text x="98.1420%" y="191.50"></text></g><g><title>link_binary (733,219 samples, 0.36%)</title><rect x="97.8980%" y="165" width="0.3611%" height="15" fill="rgb(213,55,15)"/><text x="98.1480%" y="175.50"></text></g><g><title>link_rlib (455,606 samples, 0.22%)</title><rect x="98.0347%" y="149" width="0.2244%" height="15" fill="rgb(209,9,3)"/><text x="98.2847%" y="159.50"></text></g><g><title>link (33,943,622 samples, 16.72%)</title><rect x="81.5475%" y="197" width="16.7155%" height="15" fill="rgb(230,59,30)"/><text x="81.7975%" y="207.50">link</text></g><g><title>parse_crate (2,056,953 samples, 1.01%)</title><rect x="98.2630%" y="197" width="1.0129%" height="15" fill="rgb(209,121,21)"/><text x="98.5130%" y="207.50"></text></g><g><title>prepare_outputs (214,232 samples, 0.11%)</title><rect x="99.2789%" y="197" width="0.1055%" height="15" fill="rgb(220,109,13)"/><text x="99.5289%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (800,709 samples, 0.39%)</title><rect x="99.3844%" y="197" width="0.3943%" height="15" fill="rgb(232,18,1)"/><text x="99.6344%" y="207.50"></text></g><g><title>all (203,066,443 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (203,066,443 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (359,634 samples, 0.18%)</title><rect x="99.8229%" y="197" width="0.1771%" height="15" fill="rgb(240,125,3)"/><text x="100.0729%" y="207.50"></text></g></svg></svg>