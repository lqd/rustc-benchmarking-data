<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,162,318 samples, 8.19%)</title><rect x="0.4681%" y="181" width="8.1904%" height="15" fill="rgb(227,0,7)"/><text x="0.7181%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (1,128,514 samples, 0.65%)</title><rect x="16.0967%" y="69" width="0.6526%" height="15" fill="rgb(217,0,24)"/><text x="16.3467%" y="79.50"></text></g><g><title>is_copy_raw (935,801 samples, 0.54%)</title><rect x="16.2082%" y="53" width="0.5412%" height="15" fill="rgb(221,193,54)"/><text x="16.4582%" y="63.50"></text></g><g><title>evaluate_obligation (736,028 samples, 0.43%)</title><rect x="16.3237%" y="37" width="0.4257%" height="15" fill="rgb(248,212,6)"/><text x="16.5737%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (488,374 samples, 0.28%)</title><rect x="16.8714%" y="53" width="0.2824%" height="15" fill="rgb(208,68,35)"/><text x="17.1214%" y="63.50"></text></g><g><title>resolve_instance (772,575 samples, 0.45%)</title><rect x="16.7494%" y="69" width="0.4468%" height="15" fill="rgb(232,128,0)"/><text x="16.9994%" y="79.50"></text></g><g><title>thir_body (619,351 samples, 0.36%)</title><rect x="17.2097%" y="69" width="0.3582%" height="15" fill="rgb(207,160,47)"/><text x="17.4597%" y="79.50"></text></g><g><title>mir_const (5,837,068 samples, 3.38%)</title><rect x="14.2404%" y="117" width="3.3757%" height="15" fill="rgb(228,23,34)"/><text x="14.4904%" y="127.50">mir..</text></g><g><title>unsafety_check_result (5,053,627 samples, 2.92%)</title><rect x="14.6934%" y="101" width="2.9226%" height="15" fill="rgb(218,30,26)"/><text x="14.9434%" y="111.50">un..</text></g><g><title>mir_built (4,624,760 samples, 2.67%)</title><rect x="14.9415%" y="85" width="2.6746%" height="15" fill="rgb(220,122,19)"/><text x="15.1915%" y="95.50">mi..</text></g><g><title>mir_promoted (6,500,914 samples, 3.76%)</title><rect x="13.8794%" y="133" width="3.7596%" height="15" fill="rgb(250,228,42)"/><text x="14.1294%" y="143.50">mir_..</text></g><g><title>type_op_ascribe_user_type (348,663 samples, 0.20%)</title><rect x="17.6391%" y="133" width="0.2016%" height="15" fill="rgb(240,193,28)"/><text x="17.8891%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (971,672 samples, 0.56%)</title><rect x="17.8407%" y="133" width="0.5619%" height="15" fill="rgb(216,20,37)"/><text x="18.0907%" y="143.50"></text></g><g><title>normalize_projection_ty (563,617 samples, 0.33%)</title><rect x="18.0767%" y="117" width="0.3260%" height="15" fill="rgb(206,188,39)"/><text x="18.3267%" y="127.50"></text></g><g><title>type_op_normalize_ty (303,911 samples, 0.18%)</title><rect x="18.4984%" y="133" width="0.1758%" height="15" fill="rgb(217,207,13)"/><text x="18.7484%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,254,605 samples, 1.30%)</title><rect x="18.6742%" y="133" width="1.3039%" height="15" fill="rgb(231,73,38)"/><text x="18.9242%" y="143.50"></text></g><g><title>MIR_borrow_checking (19,159,985 samples, 11.08%)</title><rect x="8.8986%" y="165" width="11.0807%" height="15" fill="rgb(225,20,46)"/><text x="9.1486%" y="175.50">MIR_borrow_check..</text></g><g><title>mir_borrowck (19,058,734 samples, 11.02%)</title><rect x="8.9572%" y="149" width="11.0222%" height="15" fill="rgb(210,31,41)"/><text x="9.2072%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (296,154 samples, 0.17%)</title><rect x="19.9989%" y="165" width="0.1713%" height="15" fill="rgb(221,200,47)"/><text x="20.2489%" y="175.50"></text></g><g><title>codegen_fn_attrs (178,371 samples, 0.10%)</title><rect x="20.6020%" y="101" width="0.1032%" height="15" fill="rgb(226,26,5)"/><text x="20.8520%" y="111.50"></text></g><g><title>should_inherit_track_caller (380,694 samples, 0.22%)</title><rect x="20.4914%" y="117" width="0.2202%" height="15" fill="rgb(249,33,26)"/><text x="20.7414%" y="127.50"></text></g><g><title>codegen_fn_attrs (663,467 samples, 0.38%)</title><rect x="20.3437%" y="133" width="0.3837%" height="15" fill="rgb(235,183,28)"/><text x="20.5937%" y="143.50"></text></g><g><title>check_mod_attrs (946,970 samples, 0.55%)</title><rect x="20.1800%" y="149" width="0.5477%" height="15" fill="rgb(221,5,38)"/><text x="20.4300%" y="159.50"></text></g><g><title>lookup_deprecation_entry (252,794 samples, 0.15%)</title><rect x="20.9955%" y="133" width="0.1462%" height="15" fill="rgb(247,18,42)"/><text x="21.2455%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (621,717 samples, 0.36%)</title><rect x="20.8513%" y="149" width="0.3596%" height="15" fill="rgb(241,131,45)"/><text x="21.1013%" y="159.50"></text></g><g><title>misc_checking_1 (1,895,551 samples, 1.10%)</title><rect x="20.1704%" y="165" width="1.0962%" height="15" fill="rgb(249,31,29)"/><text x="20.4204%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (297,363 samples, 0.17%)</title><rect x="21.2675%" y="149" width="0.1720%" height="15" fill="rgb(225,111,53)"/><text x="21.5175%" y="159.50"></text></g><g><title>check_mod_liveness (240,833 samples, 0.14%)</title><rect x="21.3002%" y="133" width="0.1393%" height="15" fill="rgb(238,160,17)"/><text x="21.5502%" y="143.50"></text></g><g><title>misc_checking_2 (580,786 samples, 0.34%)</title><rect x="21.2667%" y="165" width="0.3359%" height="15" fill="rgb(214,148,48)"/><text x="21.5167%" y="175.50"></text></g><g><title>match_checking (282,023 samples, 0.16%)</title><rect x="21.4395%" y="149" width="0.1631%" height="15" fill="rgb(232,36,49)"/><text x="21.6895%" y="159.50"></text></g><g><title>check_match (256,443 samples, 0.15%)</title><rect x="21.4543%" y="133" width="0.1483%" height="15" fill="rgb(209,103,24)"/><text x="21.7043%" y="143.50"></text></g><g><title>check_private_in_public (231,872 samples, 0.13%)</title><rect x="21.6079%" y="149" width="0.1341%" height="15" fill="rgb(229,88,8)"/><text x="21.8579%" y="159.50"></text></g><g><title>death_checking (318,244 samples, 0.18%)</title><rect x="21.7420%" y="149" width="0.1840%" height="15" fill="rgb(213,181,19)"/><text x="21.9920%" y="159.50"></text></g><g><title>param_env (281,203 samples, 0.16%)</title><rect x="22.2943%" y="117" width="0.1626%" height="15" fill="rgb(254,191,54)"/><text x="22.5443%" y="127.50"></text></g><g><title>crate_lints (2,260,095 samples, 1.31%)</title><rect x="21.9271%" y="133" width="1.3071%" height="15" fill="rgb(241,83,37)"/><text x="22.1771%" y="143.50"></text></g><g><title>type_of (1,343,964 samples, 0.78%)</title><rect x="22.4569%" y="117" width="0.7772%" height="15" fill="rgb(233,36,39)"/><text x="22.7069%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (859,449 samples, 0.50%)</title><rect x="22.7371%" y="101" width="0.4970%" height="15" fill="rgb(226,3,54)"/><text x="22.9871%" y="111.50"></text></g><g><title>lint_checking (2,481,188 samples, 1.43%)</title><rect x="21.9261%" y="149" width="1.4349%" height="15" fill="rgb(245,192,40)"/><text x="22.1761%" y="159.50"></text></g><g><title>module_lints (219,383 samples, 0.13%)</title><rect x="23.2341%" y="133" width="0.1269%" height="15" fill="rgb(238,167,29)"/><text x="23.4841%" y="143.50"></text></g><g><title>lint_mod (217,173 samples, 0.13%)</title><rect x="23.2354%" y="117" width="0.1256%" height="15" fill="rgb(232,182,51)"/><text x="23.4854%" y="127.50"></text></g><g><title>privacy_access_levels (303,134 samples, 0.18%)</title><rect x="23.3610%" y="149" width="0.1753%" height="15" fill="rgb(231,60,39)"/><text x="23.6110%" y="159.50"></text></g><g><title>privacy_checking_modules (836,109 samples, 0.48%)</title><rect x="23.5363%" y="149" width="0.4835%" height="15" fill="rgb(208,69,12)"/><text x="23.7863%" y="159.50"></text></g><g><title>check_mod_privacy (834,379 samples, 0.48%)</title><rect x="23.5373%" y="133" width="0.4825%" height="15" fill="rgb(235,93,37)"/><text x="23.7873%" y="143.50"></text></g><g><title>misc_checking_3 (4,194,637 samples, 2.43%)</title><rect x="21.6026%" y="165" width="2.4259%" height="15" fill="rgb(213,116,39)"/><text x="21.8526%" y="175.50">mi..</text></g><g><title>impl_parent (2,589,528 samples, 1.50%)</title><rect x="26.4368%" y="101" width="1.4976%" height="15" fill="rgb(222,207,29)"/><text x="26.6868%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,453,770 samples, 0.84%)</title><rect x="27.0936%" y="85" width="0.8408%" height="15" fill="rgb(206,96,30)"/><text x="27.3436%" y="95.50"></text></g><g><title>impl_trait_ref (5,269,918 samples, 3.05%)</title><rect x="27.9360%" y="101" width="3.0477%" height="15" fill="rgb(218,138,4)"/><text x="28.1860%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,323,096 samples, 2.50%)</title><rect x="28.4836%" y="85" width="2.5002%" height="15" fill="rgb(250,191,14)"/><text x="28.7336%" y="95.50">me..</text></g><g><title>trait_impls_of (818,576 samples, 0.47%)</title><rect x="31.0400%" y="101" width="0.4734%" height="15" fill="rgb(239,60,40)"/><text x="31.2900%" y="111.50"></text></g><g><title>implementations_of_trait (248,212 samples, 0.14%)</title><rect x="31.3699%" y="85" width="0.1435%" height="15" fill="rgb(206,27,48)"/><text x="31.6199%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (182,492 samples, 0.11%)</title><rect x="31.4079%" y="69" width="0.1055%" height="15" fill="rgb(225,35,8)"/><text x="31.6579%" y="79.50"></text></g><g><title>coherent_trait (16,843,698 samples, 9.74%)</title><rect x="24.0801%" y="133" width="9.7411%" height="15" fill="rgb(250,213,24)"/><text x="24.3301%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,794,827 samples, 9.71%)</title><rect x="24.1084%" y="117" width="9.7129%" height="15" fill="rgb(247,123,22)"/><text x="24.3584%" y="127.50">specialization..</text></g><g><title>visible_parent_map (3,988,745 samples, 2.31%)</title><rect x="31.5145%" y="101" width="2.3068%" height="15" fill="rgb(231,138,38)"/><text x="31.7645%" y="111.50">v..</text></g><g><title>module_children (3,640,011 samples, 2.11%)</title><rect x="31.7162%" y="85" width="2.1051%" height="15" fill="rgb(231,145,46)"/><text x="31.9662%" y="95.50">m..</text></g><g><title>metadata_decode_entry_module_children (3,578,769 samples, 2.07%)</title><rect x="31.7516%" y="69" width="2.0697%" height="15" fill="rgb(251,118,11)"/><text x="32.0016%" y="79.50">m..</text></g><g><title>coherence_checking (16,935,348 samples, 9.79%)</title><rect x="24.0649%" y="149" width="9.7941%" height="15" fill="rgb(217,147,25)"/><text x="24.3149%" y="159.50">coherence_chec..</text></g><g><title>associated_items (207,063 samples, 0.12%)</title><rect x="40.8321%" y="101" width="0.1197%" height="15" fill="rgb(247,81,37)"/><text x="41.0821%" y="111.50"></text></g><g><title>adt_dtorck_constraint (340,774 samples, 0.20%)</title><rect x="41.1232%" y="85" width="0.1971%" height="15" fill="rgb(209,12,38)"/><text x="41.3732%" y="95.50"></text></g><g><title>dropck_outlives (613,728 samples, 0.35%)</title><rect x="40.9721%" y="101" width="0.3549%" height="15" fill="rgb(227,1,9)"/><text x="41.2221%" y="111.50"></text></g><g><title>evaluate_obligation (822,839 samples, 0.48%)</title><rect x="41.3270%" y="101" width="0.4759%" height="15" fill="rgb(248,47,43)"/><text x="41.5770%" y="111.50"></text></g><g><title>method_autoderef_steps (249,662 samples, 0.14%)</title><rect x="41.9609%" y="101" width="0.1444%" height="15" fill="rgb(221,10,30)"/><text x="42.2109%" y="111.50"></text></g><g><title>predicates_of (174,312 samples, 0.10%)</title><rect x="42.1239%" y="101" width="0.1008%" height="15" fill="rgb(210,229,1)"/><text x="42.3739%" y="111.50"></text></g><g><title>is_copy_raw (192,512 samples, 0.11%)</title><rect x="42.7400%" y="85" width="0.1113%" height="15" fill="rgb(222,148,37)"/><text x="42.9900%" y="95.50"></text></g><g><title>typeck (1,028,582 samples, 0.59%)</title><rect x="42.2621%" y="101" width="0.5949%" height="15" fill="rgb(234,67,33)"/><text x="42.5121%" y="111.50"></text></g><g><title>item_bodies_checking (15,557,603 samples, 9.00%)</title><rect x="33.8811%" y="149" width="8.9974%" height="15" fill="rgb(247,98,35)"/><text x="34.1311%" y="159.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (15,554,053 samples, 9.00%)</title><rect x="33.8831%" y="133" width="8.9953%" height="15" fill="rgb(247,138,52)"/><text x="34.1331%" y="143.50">typeck_item_b..</text></g><g><title>typeck (15,479,633 samples, 8.95%)</title><rect x="33.9262%" y="117" width="8.9523%" height="15" fill="rgb(213,79,30)"/><text x="34.1762%" y="127.50">typeck</text></g><g><title>adt_destructor (308,924 samples, 0.18%)</title><rect x="43.5528%" y="117" width="0.1787%" height="15" fill="rgb(246,177,23)"/><text x="43.8028%" y="127.50"></text></g><g><title>coherent_trait (304,753 samples, 0.18%)</title><rect x="43.5552%" y="101" width="0.1762%" height="15" fill="rgb(230,62,27)"/><text x="43.8052%" y="111.50"></text></g><g><title>specialization_graph_of (302,863 samples, 0.18%)</title><rect x="43.5563%" y="85" width="0.1752%" height="15" fill="rgb(216,154,8)"/><text x="43.8063%" y="95.50"></text></g><g><title>item_types_checking (1,795,931 samples, 1.04%)</title><rect x="42.8784%" y="149" width="1.0386%" height="15" fill="rgb(244,35,45)"/><text x="43.1284%" y="159.50"></text></g><g><title>check_mod_item_types (1,793,901 samples, 1.04%)</title><rect x="42.8796%" y="133" width="1.0375%" height="15" fill="rgb(251,115,12)"/><text x="43.1296%" y="143.50"></text></g><g><title>fn_sig (250,742 samples, 0.15%)</title><rect x="44.1069%" y="117" width="0.1450%" height="15" fill="rgb(240,54,50)"/><text x="44.3569%" y="127.50"></text></g><g><title>generics_of (310,206 samples, 0.18%)</title><rect x="44.2520%" y="117" width="0.1794%" height="15" fill="rgb(233,84,52)"/><text x="44.5020%" y="127.50"></text></g><g><title>late_bound_vars_map (501,155 samples, 0.29%)</title><rect x="44.9203%" y="69" width="0.2898%" height="15" fill="rgb(207,117,47)"/><text x="45.1703%" y="79.50"></text></g><g><title>resolve_lifetimes (478,485 samples, 0.28%)</title><rect x="44.9334%" y="53" width="0.2767%" height="15" fill="rgb(249,43,39)"/><text x="45.1834%" y="63.50"></text></g><g><title>explicit_predicates_of (1,210,206 samples, 0.70%)</title><rect x="44.5836%" y="85" width="0.6999%" height="15" fill="rgb(209,38,44)"/><text x="44.8336%" y="95.50"></text></g><g><title>predicates_of (1,444,957 samples, 0.84%)</title><rect x="44.4897%" y="117" width="0.8357%" height="15" fill="rgb(236,212,23)"/><text x="44.7397%" y="127.50"></text></g><g><title>predicates_defined_on (1,382,427 samples, 0.80%)</title><rect x="44.5259%" y="101" width="0.7995%" height="15" fill="rgb(242,79,21)"/><text x="44.7759%" y="111.50"></text></g><g><title>type_collecting (2,859,282 samples, 1.65%)</title><rect x="43.9188%" y="149" width="1.6536%" height="15" fill="rgb(211,96,35)"/><text x="44.1688%" y="159.50"></text></g><g><title>collect_mod_item_types (2,852,782 samples, 1.65%)</title><rect x="43.9226%" y="133" width="1.6498%" height="15" fill="rgb(253,215,40)"/><text x="44.1726%" y="143.50"></text></g><g><title>type_of (401,303 samples, 0.23%)</title><rect x="45.3403%" y="117" width="0.2321%" height="15" fill="rgb(211,81,21)"/><text x="45.5903%" y="127.50"></text></g><g><title>evaluate_obligation (452,862 samples, 0.26%)</title><rect x="47.2057%" y="117" width="0.2619%" height="15" fill="rgb(208,190,38)"/><text x="47.4557%" y="127.50"></text></g><g><title>implied_outlives_bounds (388,306 samples, 0.22%)</title><rect x="47.4758%" y="117" width="0.2246%" height="15" fill="rgb(235,213,38)"/><text x="47.7258%" y="127.50"></text></g><g><title>param_env (513,229 samples, 0.30%)</title><rect x="47.7054%" y="117" width="0.2968%" height="15" fill="rgb(237,122,38)"/><text x="47.9554%" y="127.50"></text></g><g><title>region_scope_tree (256,671 samples, 0.15%)</title><rect x="48.0554%" y="117" width="0.1484%" height="15" fill="rgb(244,218,35)"/><text x="48.3054%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,348,400 samples, 2.51%)</title><rect x="45.7098%" y="133" width="2.5148%" height="15" fill="rgb(240,68,47)"/><text x="45.9598%" y="143.50">ch..</text></g><g><title>implied_outlives_bounds (191,641 samples, 0.11%)</title><rect x="49.5341%" y="117" width="0.1108%" height="15" fill="rgb(210,16,53)"/><text x="49.7841%" y="127.50"></text></g><g><title>param_env (427,828 samples, 0.25%)</title><rect x="49.6450%" y="117" width="0.2474%" height="15" fill="rgb(235,124,12)"/><text x="49.8950%" y="127.50"></text></g><g><title>check_item_well_formed (3,126,866 samples, 1.81%)</title><rect x="48.2245%" y="133" width="1.8083%" height="15" fill="rgb(224,169,11)"/><text x="48.4745%" y="143.50">c..</text></g><g><title>analysis (71,781,202 samples, 41.51%)</title><rect x="8.6586%" y="181" width="41.5129%" height="15" fill="rgb(250,166,2)"/><text x="8.9086%" y="191.50">analysis</text></g><g><title>type_check_crate (45,204,735 samples, 26.14%)</title><rect x="24.0284%" y="165" width="26.1431%" height="15" fill="rgb(242,216,29)"/><text x="24.2784%" y="175.50">type_check_crate</text></g><g><title>wf_checking (7,947,999 samples, 4.60%)</title><rect x="45.5749%" y="149" width="4.5965%" height="15" fill="rgb(230,116,27)"/><text x="45.8249%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (239,632 samples, 0.14%)</title><rect x="50.0329%" y="133" width="0.1386%" height="15" fill="rgb(228,99,48)"/><text x="50.2829%" y="143.50"></text></g><g><title>fn_abi_of_instance (498,436 samples, 0.29%)</title><rect x="50.9458%" y="149" width="0.2883%" height="15" fill="rgb(253,11,6)"/><text x="51.1958%" y="159.50"></text></g><g><title>codegen_module (1,467,646 samples, 0.85%)</title><rect x="50.4576%" y="165" width="0.8488%" height="15" fill="rgb(247,143,39)"/><text x="50.7076%" y="175.50"></text></g><g><title>optimized_mir (326,364 samples, 0.19%)</title><rect x="51.3818%" y="117" width="0.1887%" height="15" fill="rgb(236,97,10)"/><text x="51.6318%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (498,765 samples, 0.29%)</title><rect x="51.3195%" y="133" width="0.2884%" height="15" fill="rgb(233,208,19)"/><text x="51.5695%" y="143.50"></text></g><g><title>monomorphization_collector (539,766 samples, 0.31%)</title><rect x="51.3181%" y="149" width="0.3122%" height="15" fill="rgb(216,164,2)"/><text x="51.5681%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (685,318 samples, 0.40%)</title><rect x="51.3067%" y="165" width="0.3963%" height="15" fill="rgb(220,129,5)"/><text x="51.5567%" y="175.50"></text></g><g><title>codegen_crate (2,706,401 samples, 1.57%)</title><rect x="50.1794%" y="181" width="1.5652%" height="15" fill="rgb(242,17,10)"/><text x="50.4294%" y="191.50"></text></g><g><title>codegen_module_optimize (6,572,084 samples, 3.80%)</title><rect x="51.7445%" y="181" width="3.8008%" height="15" fill="rgb(242,107,0)"/><text x="51.9945%" y="191.50">code..</text></g><g><title>LLVM_module_optimize (5,831,595 samples, 3.37%)</title><rect x="52.1728%" y="165" width="3.3726%" height="15" fill="rgb(251,28,31)"/><text x="52.4228%" y="175.50">LLV..</text></g><g><title>LLVM_lto_optimize (1,579,528 samples, 0.91%)</title><rect x="55.8563%" y="165" width="0.9135%" height="15" fill="rgb(233,223,10)"/><text x="56.1063%" y="175.50"></text></g><g><title>LLVM_module_codegen (4,919,645 samples, 2.85%)</title><rect x="56.7697%" y="165" width="2.8452%" height="15" fill="rgb(215,21,27)"/><text x="57.0197%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (4,815,944 samples, 2.79%)</title><rect x="56.8297%" y="149" width="2.7852%" height="15" fill="rgb(232,23,21)"/><text x="57.0797%" y="159.50">LL..</text></g><g><title>codegen_module_perform_lto (7,093,389 samples, 4.10%)</title><rect x="55.5453%" y="181" width="4.1023%" height="15" fill="rgb(244,5,23)"/><text x="55.7953%" y="191.50">code..</text></g><g><title>AST_validation (246,483 samples, 0.14%)</title><rect x="59.7865%" y="165" width="0.1425%" height="15" fill="rgb(226,81,46)"/><text x="60.0365%" y="175.50"></text></g><g><title>macro_expand_crate (15,192,770 samples, 8.79%)</title><rect x="60.0446%" y="165" width="8.7864%" height="15" fill="rgb(247,70,30)"/><text x="60.2946%" y="175.50">macro_expand..</text></g><g><title>expand_crate (15,166,470 samples, 8.77%)</title><rect x="60.0598%" y="149" width="8.7712%" height="15" fill="rgb(212,68,19)"/><text x="60.3098%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,640,660 samples, 1.53%)</title><rect x="67.3038%" y="133" width="1.5272%" height="15" fill="rgb(240,187,13)"/><text x="67.5538%" y="143.50"></text></g><g><title>metadata_register_crate (947,579 samples, 0.55%)</title><rect x="68.2830%" y="117" width="0.5480%" height="15" fill="rgb(223,113,26)"/><text x="68.5330%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (835,819 samples, 0.48%)</title><rect x="68.8337%" y="165" width="0.4834%" height="15" fill="rgb(206,192,2)"/><text x="69.0837%" y="175.50"></text></g><g><title>late_resolve_crate (2,465,587 samples, 1.43%)</title><rect x="69.4689%" y="149" width="1.4259%" height="15" fill="rgb(241,108,4)"/><text x="69.7189%" y="159.50"></text></g><g><title>configure_and_expand (19,636,579 samples, 11.36%)</title><rect x="59.6476%" y="181" width="11.3563%" height="15" fill="rgb(247,173,49)"/><text x="59.8976%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (2,916,882 samples, 1.69%)</title><rect x="69.3171%" y="165" width="1.6869%" height="15" fill="rgb(224,114,35)"/><text x="69.5671%" y="175.50"></text></g><g><title>drop_ast (404,725 samples, 0.23%)</title><rect x="71.0040%" y="181" width="0.2341%" height="15" fill="rgb(245,159,27)"/><text x="71.2540%" y="191.50"></text></g><g><title>early_lint_checks (1,180,913 samples, 0.68%)</title><rect x="71.2575%" y="181" width="0.6830%" height="15" fill="rgb(245,172,44)"/><text x="71.5075%" y="191.50"></text></g><g><title>free_global_ctxt (3,446,718 samples, 1.99%)</title><rect x="71.9405%" y="181" width="1.9933%" height="15" fill="rgb(236,23,11)"/><text x="72.1905%" y="191.50">f..</text></g><g><title>is_sized_raw (230,085 samples, 0.13%)</title><rect x="76.7189%" y="133" width="0.1331%" height="15" fill="rgb(205,117,38)"/><text x="76.9689%" y="143.50"></text></g><g><title>layout_of (537,078 samples, 0.31%)</title><rect x="76.8520%" y="133" width="0.3106%" height="15" fill="rgb(237,72,25)"/><text x="77.1020%" y="143.50"></text></g><g><title>layout_of (1,214,445 samples, 0.70%)</title><rect x="76.5391%" y="149" width="0.7023%" height="15" fill="rgb(244,70,9)"/><text x="76.7891%" y="159.50"></text></g><g><title>needs_drop_raw (855,056 samples, 0.49%)</title><rect x="78.8730%" y="133" width="0.4945%" height="15" fill="rgb(217,125,39)"/><text x="79.1230%" y="143.50"></text></g><g><title>is_copy_raw (742,686 samples, 0.43%)</title><rect x="78.9380%" y="117" width="0.4295%" height="15" fill="rgb(235,36,10)"/><text x="79.1880%" y="127.50"></text></g><g><title>evaluate_obligation (568,564 samples, 0.33%)</title><rect x="79.0387%" y="101" width="0.3288%" height="15" fill="rgb(251,123,47)"/><text x="79.2887%" y="111.50"></text></g><g><title>optimized_mir (7,352,668 samples, 4.25%)</title><rect x="75.1689%" y="165" width="4.2522%" height="15" fill="rgb(221,13,13)"/><text x="75.4189%" y="175.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (3,768,918 samples, 2.18%)</title><rect x="77.2415%" y="149" width="2.1797%" height="15" fill="rgb(238,131,9)"/><text x="77.4915%" y="159.50">m..</text></g><g><title>generate_crate_metadata (9,581,747 samples, 5.54%)</title><rect x="73.9338%" y="181" width="5.5414%" height="15" fill="rgb(211,50,8)"/><text x="74.1838%" y="191.50">generat..</text></g><g><title>hir_lowering (5,935,507 samples, 3.43%)</title><rect x="79.4752%" y="181" width="3.4327%" height="15" fill="rgb(245,182,24)"/><text x="79.7252%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (10,116,994 samples, 5.85%)</title><rect x="82.9185%" y="165" width="5.8509%" height="15" fill="rgb(242,14,37)"/><text x="83.1685%" y="175.50">finish_..</text></g><g><title>link_crate (1,477,536 samples, 0.85%)</title><rect x="88.7695%" y="165" width="0.8545%" height="15" fill="rgb(246,228,12)"/><text x="89.0195%" y="175.50"></text></g><g><title>link_binary (1,458,076 samples, 0.84%)</title><rect x="88.7807%" y="149" width="0.8432%" height="15" fill="rgb(213,55,15)"/><text x="89.0307%" y="159.50"></text></g><g><title>link_rlib (995,081 samples, 0.58%)</title><rect x="89.0485%" y="133" width="0.5755%" height="15" fill="rgb(209,9,3)"/><text x="89.2985%" y="143.50"></text></g><g><title>link (11,625,250 samples, 6.72%)</title><rect x="82.9078%" y="181" width="6.7232%" height="15" fill="rgb(230,59,30)"/><text x="83.1578%" y="191.50">link</text></g><g><title>parse_crate (16,274,562 samples, 9.41%)</title><rect x="89.6310%" y="181" width="9.4120%" height="15" fill="rgb(209,121,21)"/><text x="89.8810%" y="191.50">parse_crate</text></g><g><title>prepare_outputs (365,794 samples, 0.21%)</title><rect x="99.0488%" y="181" width="0.2115%" height="15" fill="rgb(220,109,13)"/><text x="99.2988%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (779,979 samples, 0.45%)</title><rect x="99.2604%" y="181" width="0.4511%" height="15" fill="rgb(232,18,1)"/><text x="99.5104%" y="191.50"></text></g><g><title>all (172,913,002 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (172,913,002 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (390,174 samples, 0.23%)</title><rect x="99.7744%" y="181" width="0.2256%" height="15" fill="rgb(240,125,3)"/><text x="100.0244%" y="191.50"></text></g></svg></svg>