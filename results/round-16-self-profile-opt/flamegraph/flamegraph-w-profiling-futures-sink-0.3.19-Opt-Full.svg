<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,597,951 samples, 6.14%)</title><rect x="0.8630%" y="245" width="6.1396%" height="15" fill="rgb(227,0,7)"/><text x="1.1130%" y="255.50">LLVM_pas..</text></g><g><title>codegen_generate_lto_work (233,283 samples, 0.26%)</title><rect x="6.7467%" y="229" width="0.2559%" height="15" fill="rgb(217,0,24)"/><text x="6.9967%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (222,242 samples, 0.24%)</title><rect x="6.7588%" y="213" width="0.2437%" height="15" fill="rgb(221,193,54)"/><text x="7.0088%" y="223.50"></text></g><g><title>param_env (142,511 samples, 0.16%)</title><rect x="15.5584%" y="165" width="0.1563%" height="15" fill="rgb(248,212,6)"/><text x="15.8084%" y="175.50"></text></g><g><title>codegen_fn_attrs (136,322 samples, 0.15%)</title><rect x="16.0694%" y="149" width="0.1495%" height="15" fill="rgb(208,68,35)"/><text x="16.3194%" y="159.50"></text></g><g><title>explicit_predicates_of (252,593 samples, 0.28%)</title><rect x="18.1455%" y="53" width="0.2770%" height="15" fill="rgb(232,128,0)"/><text x="18.3955%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (249,763 samples, 0.27%)</title><rect x="18.1486%" y="37" width="0.2739%" height="15" fill="rgb(207,160,47)"/><text x="18.3986%" y="47.50"></text></g><g><title>predicates_of (277,904 samples, 0.30%)</title><rect x="18.1225%" y="85" width="0.3048%" height="15" fill="rgb(228,23,34)"/><text x="18.3725%" y="95.50"></text></g><g><title>predicates_defined_on (265,423 samples, 0.29%)</title><rect x="18.1362%" y="69" width="0.2911%" height="15" fill="rgb(218,30,26)"/><text x="18.3862%" y="79.50"></text></g><g><title>is_copy_raw (1,203,372 samples, 1.32%)</title><rect x="17.4679%" y="117" width="1.3198%" height="15" fill="rgb(220,122,19)"/><text x="17.7179%" y="127.50"></text></g><g><title>evaluate_obligation (1,086,381 samples, 1.19%)</title><rect x="17.5962%" y="101" width="1.1915%" height="15" fill="rgb(250,228,42)"/><text x="17.8462%" y="111.50"></text></g><g><title>trait_impls_of (325,614 samples, 0.36%)</title><rect x="18.4306%" y="85" width="0.3571%" height="15" fill="rgb(240,193,28)"/><text x="18.6806%" y="95.50"></text></g><g><title>needs_drop_raw (1,263,402 samples, 1.39%)</title><rect x="17.4053%" y="133" width="1.3856%" height="15" fill="rgb(216,20,37)"/><text x="17.6553%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (158,391 samples, 0.17%)</title><rect x="18.9403%" y="117" width="0.1737%" height="15" fill="rgb(206,188,39)"/><text x="19.1903%" y="127.50"></text></g><g><title>specialization_graph_of (131,772 samples, 0.14%)</title><rect x="19.1372%" y="117" width="0.1445%" height="15" fill="rgb(217,207,13)"/><text x="19.3872%" y="127.50"></text></g><g><title>resolve_instance (502,928 samples, 0.55%)</title><rect x="18.7910%" y="133" width="0.5516%" height="15" fill="rgb(231,73,38)"/><text x="19.0410%" y="143.50"></text></g><g><title>thir_body (315,072 samples, 0.35%)</title><rect x="19.3609%" y="133" width="0.3456%" height="15" fill="rgb(225,20,46)"/><text x="19.6109%" y="143.50"></text></g><g><title>mir_const (4,291,337 samples, 4.71%)</title><rect x="15.0306%" y="181" width="4.7065%" height="15" fill="rgb(210,31,41)"/><text x="15.2806%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (3,667,552 samples, 4.02%)</title><rect x="15.7147%" y="165" width="4.0224%" height="15" fill="rgb(221,200,47)"/><text x="15.9647%" y="175.50">unsa..</text></g><g><title>mir_built (3,207,796 samples, 3.52%)</title><rect x="16.2189%" y="149" width="3.5182%" height="15" fill="rgb(226,26,5)"/><text x="16.4689%" y="159.50">mir..</text></g><g><title>mir_promoted (4,734,294 samples, 5.19%)</title><rect x="14.5793%" y="197" width="5.1923%" height="15" fill="rgb(249,33,26)"/><text x="14.8293%" y="207.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (202,062 samples, 0.22%)</title><rect x="19.7716%" y="197" width="0.2216%" height="15" fill="rgb(235,183,28)"/><text x="20.0216%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (301,645 samples, 0.33%)</title><rect x="19.9933%" y="197" width="0.3308%" height="15" fill="rgb(221,5,38)"/><text x="20.2433%" y="207.50"></text></g><g><title>normalize_projection_ty (116,171 samples, 0.13%)</title><rect x="20.1967%" y="181" width="0.1274%" height="15" fill="rgb(247,18,42)"/><text x="20.4467%" y="191.50"></text></g><g><title>type_op_normalize_ty (462,466 samples, 0.51%)</title><rect x="20.3348%" y="197" width="0.5072%" height="15" fill="rgb(241,131,45)"/><text x="20.5848%" y="207.50"></text></g><g><title>normalize_projection_ty (269,933 samples, 0.30%)</title><rect x="20.5460%" y="181" width="0.2960%" height="15" fill="rgb(249,31,29)"/><text x="20.7960%" y="191.50"></text></g><g><title>type_op_prove_predicate (980,345 samples, 1.08%)</title><rect x="20.8420%" y="197" width="1.0752%" height="15" fill="rgb(225,111,53)"/><text x="21.0920%" y="207.50"></text></g><g><title>MIR_borrow_checking (13,361,097 samples, 14.65%)</title><rect x="7.2879%" y="229" width="14.6538%" height="15" fill="rgb(238,160,17)"/><text x="7.5379%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (13,281,416 samples, 14.57%)</title><rect x="7.3753%" y="213" width="14.5664%" height="15" fill="rgb(214,148,48)"/><text x="7.6253%" y="223.50">mir_borrowck</text></g><g><title>hir_module_items (168,141 samples, 0.18%)</title><rect x="21.9495%" y="229" width="0.1844%" height="15" fill="rgb(232,36,49)"/><text x="22.1995%" y="239.50"></text></g><g><title>get_lang_items (114,541 samples, 0.13%)</title><rect x="22.4288%" y="181" width="0.1256%" height="15" fill="rgb(209,103,24)"/><text x="22.6788%" y="191.50"></text></g><g><title>should_inherit_track_caller (122,252 samples, 0.13%)</title><rect x="22.5544%" y="181" width="0.1341%" height="15" fill="rgb(229,88,8)"/><text x="22.8044%" y="191.50"></text></g><g><title>codegen_fn_attrs (344,743 samples, 0.38%)</title><rect x="22.3479%" y="197" width="0.3781%" height="15" fill="rgb(213,181,19)"/><text x="22.5979%" y="207.50"></text></g><g><title>check_mod_attrs (508,436 samples, 0.56%)</title><rect x="22.1690%" y="213" width="0.5576%" height="15" fill="rgb(254,191,54)"/><text x="22.4190%" y="223.50"></text></g><g><title>check_mod_const_bodies (95,470 samples, 0.10%)</title><rect x="22.7266%" y="213" width="0.1047%" height="15" fill="rgb(241,83,37)"/><text x="22.9766%" y="223.50"></text></g><g><title>lookup_stability (118,321 samples, 0.13%)</title><rect x="23.1169%" y="197" width="0.1298%" height="15" fill="rgb(233,36,39)"/><text x="23.3669%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (352,294 samples, 0.39%)</title><rect x="22.8937%" y="213" width="0.3864%" height="15" fill="rgb(226,3,54)"/><text x="23.1437%" y="223.50"></text></g><g><title>misc_checking_1 (1,100,012 samples, 1.21%)</title><rect x="22.1343%" y="229" width="1.2064%" height="15" fill="rgb(245,192,40)"/><text x="22.3843%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (210,502 samples, 0.23%)</title><rect x="23.3434%" y="213" width="0.2309%" height="15" fill="rgb(238,167,29)"/><text x="23.5934%" y="223.50"></text></g><g><title>check_mod_liveness (162,662 samples, 0.18%)</title><rect x="23.3959%" y="197" width="0.1784%" height="15" fill="rgb(232,182,51)"/><text x="23.6459%" y="207.50"></text></g><g><title>misc_checking_2 (440,515 samples, 0.48%)</title><rect x="23.3407%" y="229" width="0.4831%" height="15" fill="rgb(231,60,39)"/><text x="23.5907%" y="239.50"></text></g><g><title>match_checking (227,553 samples, 0.25%)</title><rect x="23.5743%" y="213" width="0.2496%" height="15" fill="rgb(208,69,12)"/><text x="23.8243%" y="223.50"></text></g><g><title>check_match (207,073 samples, 0.23%)</title><rect x="23.5968%" y="197" width="0.2271%" height="15" fill="rgb(235,93,37)"/><text x="23.8468%" y="207.50"></text></g><g><title>death_checking (128,231 samples, 0.14%)</title><rect x="23.9178%" y="213" width="0.1406%" height="15" fill="rgb(213,116,39)"/><text x="24.1678%" y="223.50"></text></g><g><title>crate_lints (165,172 samples, 0.18%)</title><rect x="24.0599%" y="197" width="0.1812%" height="15" fill="rgb(222,207,29)"/><text x="24.3099%" y="207.50"></text></g><g><title>lint_checking (244,223 samples, 0.27%)</title><rect x="24.0585%" y="213" width="0.2679%" height="15" fill="rgb(206,96,30)"/><text x="24.3085%" y="223.50"></text></g><g><title>privacy_access_levels (94,181 samples, 0.10%)</title><rect x="24.3263%" y="213" width="0.1033%" height="15" fill="rgb(218,138,4)"/><text x="24.5763%" y="223.50"></text></g><g><title>privacy_checking_modules (333,144 samples, 0.37%)</title><rect x="24.4296%" y="213" width="0.3654%" height="15" fill="rgb(250,191,14)"/><text x="24.6796%" y="223.50"></text></g><g><title>check_mod_privacy (331,034 samples, 0.36%)</title><rect x="24.4319%" y="197" width="0.3631%" height="15" fill="rgb(239,60,40)"/><text x="24.6819%" y="207.50"></text></g><g><title>misc_checking_3 (892,550 samples, 0.98%)</title><rect x="23.8239%" y="229" width="0.9789%" height="15" fill="rgb(206,27,48)"/><text x="24.0739%" y="239.50"></text></g><g><title>coherent_trait (112,521 samples, 0.12%)</title><rect x="24.9104%" y="197" width="0.1234%" height="15" fill="rgb(225,35,8)"/><text x="25.1604%" y="207.50"></text></g><g><title>specialization_graph_of (104,721 samples, 0.11%)</title><rect x="24.9189%" y="181" width="0.1149%" height="15" fill="rgb(250,213,24)"/><text x="25.1689%" y="191.50"></text></g><g><title>coherence_checking (189,702 samples, 0.21%)</title><rect x="24.8851%" y="213" width="0.2081%" height="15" fill="rgb(247,123,22)"/><text x="25.1351%" y="223.50"></text></g><g><title>associated_item (459,814 samples, 0.50%)</title><rect x="40.0718%" y="149" width="0.5043%" height="15" fill="rgb(231,138,38)"/><text x="40.3218%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (337,194 samples, 0.37%)</title><rect x="40.2062%" y="133" width="0.3698%" height="15" fill="rgb(231,145,46)"/><text x="40.4562%" y="143.50"></text></g><g><title>associated_items (694,528 samples, 0.76%)</title><rect x="39.8436%" y="165" width="0.7617%" height="15" fill="rgb(251,118,11)"/><text x="40.0936%" y="175.50"></text></g><g><title>impl_parent (163,741 samples, 0.18%)</title><rect x="41.1121%" y="69" width="0.1796%" height="15" fill="rgb(217,147,25)"/><text x="41.3621%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (113,021 samples, 0.12%)</title><rect x="41.1677%" y="53" width="0.1240%" height="15" fill="rgb(247,81,37)"/><text x="41.4177%" y="63.50"></text></g><g><title>impl_trait_ref (596,919 samples, 0.65%)</title><rect x="41.2917%" y="69" width="0.6547%" height="15" fill="rgb(209,12,38)"/><text x="41.5417%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (548,887 samples, 0.60%)</title><rect x="41.3444%" y="53" width="0.6020%" height="15" fill="rgb(227,1,9)"/><text x="41.5944%" y="63.50"></text></g><g><title>adt_destructor (1,045,263 samples, 1.15%)</title><rect x="40.8660%" y="133" width="1.1464%" height="15" fill="rgb(248,47,43)"/><text x="41.1160%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,041,712 samples, 1.14%)</title><rect x="40.8699%" y="117" width="1.1425%" height="15" fill="rgb(221,10,30)"/><text x="41.1199%" y="127.50"></text></g><g><title>coherent_trait (1,033,522 samples, 1.13%)</title><rect x="40.8788%" y="101" width="1.1335%" height="15" fill="rgb(210,229,1)"/><text x="41.1288%" y="111.50"></text></g><g><title>specialization_graph_of (1,030,062 samples, 1.13%)</title><rect x="40.8826%" y="85" width="1.1297%" height="15" fill="rgb(222,148,37)"/><text x="41.1326%" y="95.50"></text></g><g><title>adt_dtorck_constraint (1,078,174 samples, 1.18%)</title><rect x="40.8400%" y="149" width="1.1825%" height="15" fill="rgb(234,67,33)"/><text x="41.0900%" y="159.50"></text></g><g><title>dropck_outlives (1,306,734 samples, 1.43%)</title><rect x="40.6467%" y="165" width="1.4332%" height="15" fill="rgb(247,98,35)"/><text x="40.8967%" y="175.50"></text></g><g><title>evaluate_obligation (497,454 samples, 0.55%)</title><rect x="42.0798%" y="165" width="0.5456%" height="15" fill="rgb(247,138,52)"/><text x="42.3298%" y="175.50"></text></g><g><title>evaluate_obligation (340,073 samples, 0.37%)</title><rect x="43.6915%" y="149" width="0.3730%" height="15" fill="rgb(213,79,30)"/><text x="43.9415%" y="159.50"></text></g><g><title>method_autoderef_steps (1,034,999 samples, 1.14%)</title><rect x="42.9499%" y="165" width="1.1351%" height="15" fill="rgb(246,177,23)"/><text x="43.1999%" y="175.50"></text></g><g><title>predicates_of (134,581 samples, 0.15%)</title><rect x="44.1081%" y="165" width="0.1476%" height="15" fill="rgb(230,62,27)"/><text x="44.3581%" y="175.50"></text></g><g><title>predicates_defined_on (94,230 samples, 0.10%)</title><rect x="44.1524%" y="149" width="0.1033%" height="15" fill="rgb(216,154,8)"/><text x="44.4024%" y="159.50"></text></g><g><title>item_bodies_checking (17,574,834 samples, 19.28%)</title><rect x="25.1383%" y="213" width="19.2752%" height="15" fill="rgb(244,35,45)"/><text x="25.3883%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,570,374 samples, 19.27%)</title><rect x="25.1432%" y="197" width="19.2703%" height="15" fill="rgb(251,115,12)"/><text x="25.3932%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (17,506,782 samples, 19.20%)</title><rect x="25.2129%" y="181" width="19.2006%" height="15" fill="rgb(240,54,50)"/><text x="25.4629%" y="191.50">typeck</text></g><g><title>item_types_checking (2,561,898 samples, 2.81%)</title><rect x="44.4135%" y="213" width="2.8098%" height="15" fill="rgb(233,84,52)"/><text x="44.6635%" y="223.50">it..</text></g><g><title>check_mod_item_types (2,554,887 samples, 2.80%)</title><rect x="44.4212%" y="197" width="2.8021%" height="15" fill="rgb(207,117,47)"/><text x="44.6712%" y="207.50">ch..</text></g><g><title>fn_sig (487,564 samples, 0.53%)</title><rect x="47.5218%" y="181" width="0.5347%" height="15" fill="rgb(249,43,39)"/><text x="47.7718%" y="191.50"></text></g><g><title>is_late_bound_map (140,372 samples, 0.15%)</title><rect x="48.1905%" y="165" width="0.1540%" height="15" fill="rgb(209,38,44)"/><text x="48.4405%" y="175.50"></text></g><g><title>resolve_lifetimes (126,722 samples, 0.14%)</title><rect x="48.2054%" y="149" width="0.1390%" height="15" fill="rgb(236,212,23)"/><text x="48.4554%" y="159.50"></text></g><g><title>named_region_map (160,433 samples, 0.18%)</title><rect x="48.3444%" y="165" width="0.1760%" height="15" fill="rgb(242,79,21)"/><text x="48.5944%" y="175.50"></text></g><g><title>resolve_lifetimes (139,323 samples, 0.15%)</title><rect x="48.3676%" y="149" width="0.1528%" height="15" fill="rgb(211,96,35)"/><text x="48.6176%" y="159.50"></text></g><g><title>generics_of (447,356 samples, 0.49%)</title><rect x="48.0565%" y="181" width="0.4906%" height="15" fill="rgb(253,215,40)"/><text x="48.3065%" y="191.50"></text></g><g><title>item_bounds (105,211 samples, 0.12%)</title><rect x="48.5706%" y="181" width="0.1154%" height="15" fill="rgb(211,81,21)"/><text x="48.8206%" y="191.50"></text></g><g><title>late_bound_vars_map (122,761 samples, 0.13%)</title><rect x="49.0302%" y="133" width="0.1346%" height="15" fill="rgb(208,190,38)"/><text x="49.2802%" y="143.50"></text></g><g><title>resolve_lifetimes (117,161 samples, 0.13%)</title><rect x="49.0364%" y="117" width="0.1285%" height="15" fill="rgb(235,213,38)"/><text x="49.2864%" y="127.50"></text></g><g><title>type_param_predicates (126,841 samples, 0.14%)</title><rect x="49.2444%" y="133" width="0.1391%" height="15" fill="rgb(237,122,38)"/><text x="49.4944%" y="143.50"></text></g><g><title>explicit_predicates_of (529,747 samples, 0.58%)</title><rect x="48.8036%" y="149" width="0.5810%" height="15" fill="rgb(244,218,35)"/><text x="49.0536%" y="159.50"></text></g><g><title>predicates_of (648,129 samples, 0.71%)</title><rect x="48.6860%" y="181" width="0.7108%" height="15" fill="rgb(240,68,47)"/><text x="48.9360%" y="191.50"></text></g><g><title>predicates_defined_on (611,288 samples, 0.67%)</title><rect x="48.7264%" y="165" width="0.6704%" height="15" fill="rgb(210,16,53)"/><text x="48.9764%" y="175.50"></text></g><g><title>type_of (98,721 samples, 0.11%)</title><rect x="49.6132%" y="165" width="0.1083%" height="15" fill="rgb(235,124,12)"/><text x="49.8632%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (93,271 samples, 0.10%)</title><rect x="49.6192%" y="149" width="0.1023%" height="15" fill="rgb(224,169,11)"/><text x="49.8692%" y="159.50"></text></g><g><title>type_collecting (2,310,706 samples, 2.53%)</title><rect x="47.2259%" y="213" width="2.5343%" height="15" fill="rgb(250,166,2)"/><text x="47.4759%" y="223.50">ty..</text></g><g><title>collect_mod_item_types (2,291,316 samples, 2.51%)</title><rect x="47.2472%" y="197" width="2.5130%" height="15" fill="rgb(242,216,29)"/><text x="47.4972%" y="207.50">co..</text></g><g><title>type_of (268,512 samples, 0.29%)</title><rect x="49.4657%" y="181" width="0.2945%" height="15" fill="rgb(230,116,27)"/><text x="49.7157%" y="191.50"></text></g><g><title>evaluate_obligation (692,757 samples, 0.76%)</title><rect x="55.3264%" y="181" width="0.7598%" height="15" fill="rgb(228,99,48)"/><text x="55.5764%" y="191.50"></text></g><g><title>implied_outlives_bounds (321,033 samples, 0.35%)</title><rect x="56.1258%" y="181" width="0.3521%" height="15" fill="rgb(253,11,6)"/><text x="56.3758%" y="191.50"></text></g><g><title>param_env (492,016 samples, 0.54%)</title><rect x="56.4779%" y="181" width="0.5396%" height="15" fill="rgb(247,143,39)"/><text x="56.7279%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,652,014 samples, 7.30%)</title><rect x="49.9661%" y="197" width="7.2956%" height="15" fill="rgb(236,97,10)"/><text x="50.2161%" y="207.50">check_impl..</text></g><g><title>region_scope_tree (199,822 samples, 0.22%)</title><rect x="57.0426%" y="181" width="0.2192%" height="15" fill="rgb(233,208,19)"/><text x="57.2926%" y="191.50"></text></g><g><title>evaluate_obligation (133,801 samples, 0.15%)</title><rect x="58.1896%" y="181" width="0.1467%" height="15" fill="rgb(216,164,2)"/><text x="58.4396%" y="191.50"></text></g><g><title>param_env (252,762 samples, 0.28%)</title><rect x="58.4398%" y="181" width="0.2772%" height="15" fill="rgb(220,129,5)"/><text x="58.6898%" y="191.50"></text></g><g><title>predicates_of (115,791 samples, 0.13%)</title><rect x="58.7170%" y="181" width="0.1270%" height="15" fill="rgb(242,17,10)"/><text x="58.9670%" y="191.50"></text></g><g><title>check_item_well_formed (1,526,248 samples, 1.67%)</title><rect x="57.2618%" y="197" width="1.6739%" height="15" fill="rgb(242,107,0)"/><text x="57.5118%" y="207.50"></text></g><g><title>evaluate_obligation (486,476 samples, 0.53%)</title><rect x="60.1509%" y="181" width="0.5335%" height="15" fill="rgb(251,28,31)"/><text x="60.4009%" y="191.50"></text></g><g><title>implied_outlives_bounds (135,991 samples, 0.15%)</title><rect x="60.7142%" y="181" width="0.1491%" height="15" fill="rgb(233,223,10)"/><text x="60.9642%" y="191.50"></text></g><g><title>analysis (49,257,222 samples, 54.02%)</title><rect x="7.0025%" y="245" width="54.0229%" height="15" fill="rgb(215,21,27)"/><text x="7.2525%" y="255.50">analysis</text></g><g><title>type_check_crate (33,027,263 samples, 36.22%)</title><rect x="24.8028%" y="229" width="36.2227%" height="15" fill="rgb(232,23,21)"/><text x="25.0528%" y="239.50">type_check_crate</text></g><g><title>wf_checking (10,267,603 samples, 11.26%)</title><rect x="49.7645%" y="213" width="11.2610%" height="15" fill="rgb(244,5,23)"/><text x="50.0145%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,905,461 samples, 2.09%)</title><rect x="58.9357%" y="197" width="2.0898%" height="15" fill="rgb(226,81,46)"/><text x="59.1857%" y="207.50">c..</text></g><g><title>codegen_module (214,343 samples, 0.24%)</title><rect x="61.5334%" y="229" width="0.2351%" height="15" fill="rgb(247,70,30)"/><text x="61.7834%" y="239.50"></text></g><g><title>codegen_crate (800,189 samples, 0.88%)</title><rect x="61.0398%" y="245" width="0.8776%" height="15" fill="rgb(212,68,19)"/><text x="61.2898%" y="255.50"></text></g><g><title>codegen_module_optimize (1,555,258 samples, 1.71%)</title><rect x="61.9174%" y="245" width="1.7057%" height="15" fill="rgb(240,187,13)"/><text x="62.1674%" y="255.50"></text></g><g><title>LLVM_module_optimize (417,135 samples, 0.46%)</title><rect x="63.1656%" y="229" width="0.4575%" height="15" fill="rgb(223,113,26)"/><text x="63.4156%" y="239.50"></text></g><g><title>LLVM_lto_optimize (278,443 samples, 0.31%)</title><rect x="64.0894%" y="229" width="0.3054%" height="15" fill="rgb(206,192,2)"/><text x="64.3394%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,400,116 samples, 2.63%)</title><rect x="64.3948%" y="229" width="2.6323%" height="15" fill="rgb(241,108,4)"/><text x="64.6448%" y="239.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,356,496 samples, 2.58%)</title><rect x="64.4427%" y="213" width="2.5845%" height="15" fill="rgb(247,173,49)"/><text x="64.6927%" y="223.50">LL..</text></g><g><title>codegen_module_perform_lto (3,143,594 samples, 3.45%)</title><rect x="63.6231%" y="245" width="3.4477%" height="15" fill="rgb(224,114,35)"/><text x="63.8731%" y="255.50">cod..</text></g><g><title>AST_validation (174,322 samples, 0.19%)</title><rect x="67.3120%" y="229" width="0.1912%" height="15" fill="rgb(245,159,27)"/><text x="67.5620%" y="239.50"></text></g><g><title>crate_injection (126,031 samples, 0.14%)</title><rect x="67.5702%" y="229" width="0.1382%" height="15" fill="rgb(245,172,44)"/><text x="67.8202%" y="239.50"></text></g><g><title>macro_expand_crate (12,402,596 samples, 13.60%)</title><rect x="67.7084%" y="229" width="13.6026%" height="15" fill="rgb(236,23,11)"/><text x="67.9584%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (12,386,046 samples, 13.58%)</title><rect x="67.7265%" y="213" width="13.5844%" height="15" fill="rgb(205,117,38)"/><text x="67.9765%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (2,628,769 samples, 2.88%)</title><rect x="78.4278%" y="197" width="2.8831%" height="15" fill="rgb(237,72,25)"/><text x="78.6778%" y="207.50">me..</text></g><g><title>metadata_register_crate (920,250 samples, 1.01%)</title><rect x="80.3017%" y="181" width="1.0093%" height="15" fill="rgb(244,70,9)"/><text x="80.5517%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (163,082 samples, 0.18%)</title><rect x="81.3265%" y="229" width="0.1789%" height="15" fill="rgb(217,125,39)"/><text x="81.5765%" y="239.50"></text></g><g><title>finalize_imports (303,604 samples, 0.33%)</title><rect x="81.5160%" y="213" width="0.3330%" height="15" fill="rgb(235,36,10)"/><text x="81.7660%" y="223.50"></text></g><g><title>late_resolve_crate (1,721,309 samples, 1.89%)</title><rect x="81.8609%" y="213" width="1.8878%" height="15" fill="rgb(251,123,47)"/><text x="82.1109%" y="223.50">l..</text></g><g><title>configure_and_expand (15,292,128 samples, 16.77%)</title><rect x="67.0709%" y="245" width="16.7717%" height="15" fill="rgb(221,13,13)"/><text x="67.3209%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (2,131,024 samples, 2.34%)</title><rect x="81.5053%" y="229" width="2.3372%" height="15" fill="rgb(238,131,9)"/><text x="81.7553%" y="239.50">r..</text></g><g><title>drop_ast (148,881 samples, 0.16%)</title><rect x="83.8425%" y="245" width="0.1633%" height="15" fill="rgb(211,50,8)"/><text x="84.0925%" y="255.50"></text></g><g><title>early_lint_checks (243,993 samples, 0.27%)</title><rect x="84.0233%" y="245" width="0.2676%" height="15" fill="rgb(245,182,24)"/><text x="84.2733%" y="255.50"></text></g><g><title>free_global_ctxt (1,945,591 samples, 2.13%)</title><rect x="84.2909%" y="245" width="2.1338%" height="15" fill="rgb(242,14,37)"/><text x="84.5409%" y="255.50">f..</text></g><g><title>adt_def (101,081 samples, 0.11%)</title><rect x="88.2626%" y="165" width="0.1109%" height="15" fill="rgb(246,228,12)"/><text x="88.5126%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (99,551 samples, 0.11%)</title><rect x="88.2643%" y="149" width="0.1092%" height="15" fill="rgb(213,55,15)"/><text x="88.5143%" y="159.50"></text></g><g><title>adt_sized_constraint (129,462 samples, 0.14%)</title><rect x="88.2555%" y="181" width="0.1420%" height="15" fill="rgb(209,9,3)"/><text x="88.5055%" y="191.50"></text></g><g><title>layout_of (187,072 samples, 0.21%)</title><rect x="88.2334%" y="197" width="0.2052%" height="15" fill="rgb(230,59,30)"/><text x="88.4834%" y="207.50"></text></g><g><title>layout_of (394,904 samples, 0.43%)</title><rect x="88.0746%" y="213" width="0.4331%" height="15" fill="rgb(209,121,21)"/><text x="88.3246%" y="223.50"></text></g><g><title>optimized_mir (2,037,083 samples, 2.23%)</title><rect x="87.2196%" y="229" width="2.2342%" height="15" fill="rgb(220,109,13)"/><text x="87.4696%" y="239.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (862,626 samples, 0.95%)</title><rect x="88.5077%" y="213" width="0.9461%" height="15" fill="rgb(232,18,1)"/><text x="88.7577%" y="223.50"></text></g><g><title>generate_crate_metadata (2,827,241 samples, 3.10%)</title><rect x="86.4247%" y="245" width="3.1008%" height="15" fill="rgb(215,41,42)"/><text x="86.6747%" y="255.50">gen..</text></g><g><title>hir_lowering (1,916,571 samples, 2.10%)</title><rect x="89.5255%" y="245" width="2.1020%" height="15" fill="rgb(224,123,36)"/><text x="89.7755%" y="255.50">h..</text></g><g><title>finish_ongoing_codegen (3,268,986 samples, 3.59%)</title><rect x="91.6406%" y="229" width="3.5853%" height="15" fill="rgb(240,125,3)"/><text x="91.8906%" y="239.50">fini..</text></g><g><title>link_crate (616,117 samples, 0.68%)</title><rect x="95.2258%" y="229" width="0.6757%" height="15" fill="rgb(205,98,50)"/><text x="95.4758%" y="239.50"></text></g><g><title>link_binary (605,057 samples, 0.66%)</title><rect x="95.2380%" y="213" width="0.6636%" height="15" fill="rgb(205,185,37)"/><text x="95.4880%" y="223.50"></text></g><g><title>link_rlib (364,704 samples, 0.40%)</title><rect x="95.5016%" y="197" width="0.4000%" height="15" fill="rgb(238,207,15)"/><text x="95.7516%" y="207.50"></text></g><g><title>link (3,903,753 samples, 4.28%)</title><rect x="91.6275%" y="245" width="4.2814%" height="15" fill="rgb(213,199,42)"/><text x="91.8775%" y="255.50">link</text></g><g><title>parse_crate (2,467,577 samples, 2.71%)</title><rect x="95.9089%" y="245" width="2.7063%" height="15" fill="rgb(235,201,11)"/><text x="96.1589%" y="255.50">pa..</text></g><g><title>prepare_outputs (372,114 samples, 0.41%)</title><rect x="98.6262%" y="245" width="0.4081%" height="15" fill="rgb(207,46,11)"/><text x="98.8762%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (428,925 samples, 0.47%)</title><rect x="99.0344%" y="245" width="0.4704%" height="15" fill="rgb(241,35,35)"/><text x="99.2844%" y="255.50"></text></g><g><title>setup_global_ctxt (150,682 samples, 0.17%)</title><rect x="99.5059%" y="245" width="0.1653%" height="15" fill="rgb(243,32,47)"/><text x="99.7559%" y="255.50"></text></g><g><title>all (91,178,351 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(247,202,23)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (91,178,351 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(219,102,11)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (299,843 samples, 0.33%)</title><rect x="99.6711%" y="245" width="0.3289%" height="15" fill="rgb(243,110,44)"/><text x="99.9211%" y="255.50"></text></g></svg></svg>