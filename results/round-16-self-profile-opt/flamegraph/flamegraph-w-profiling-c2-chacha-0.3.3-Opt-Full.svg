<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="438" onload="init(evt)" viewBox="0 0 1200 438" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="438" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="421.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="421.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (603,969,970 samples, 25.87%)</title><rect x="0.0602%" y="357" width="25.8672%" height="15" fill="rgb(227,0,7)"/><text x="0.3102%" y="367.50">LLVM_passes</text></g><g><title>specialization_graph_of (2,947,032 samples, 0.13%)</title><rect x="27.0743%" y="229" width="0.1262%" height="15" fill="rgb(217,0,24)"/><text x="27.3243%" y="239.50"></text></g><g><title>resolve_instance (4,599,882 samples, 0.20%)</title><rect x="27.0076%" y="245" width="0.1970%" height="15" fill="rgb(221,193,54)"/><text x="27.2576%" y="255.50"></text></g><g><title>mir_const (14,040,811 samples, 0.60%)</title><rect x="26.6811%" y="293" width="0.6013%" height="15" fill="rgb(248,212,6)"/><text x="26.9311%" y="303.50"></text></g><g><title>unsafety_check_result (12,614,663 samples, 0.54%)</title><rect x="26.7422%" y="277" width="0.5403%" height="15" fill="rgb(208,68,35)"/><text x="26.9922%" y="287.50"></text></g><g><title>mir_built (11,674,453 samples, 0.50%)</title><rect x="26.7825%" y="261" width="0.5000%" height="15" fill="rgb(232,128,0)"/><text x="27.0325%" y="271.50"></text></g><g><title>mir_promoted (15,513,332 samples, 0.66%)</title><rect x="26.6352%" y="309" width="0.6644%" height="15" fill="rgb(207,160,47)"/><text x="26.8852%" y="319.50"></text></g><g><title>MIR_borrow_checking (35,877,770 samples, 1.54%)</title><rect x="25.9439%" y="341" width="1.5366%" height="15" fill="rgb(228,23,34)"/><text x="26.1939%" y="351.50"></text></g><g><title>mir_borrowck (35,683,438 samples, 1.53%)</title><rect x="25.9523%" y="325" width="1.5283%" height="15" fill="rgb(218,30,26)"/><text x="26.2023%" y="335.50"></text></g><g><title>crate_lints (2,639,659 samples, 0.11%)</title><rect x="27.6780%" y="309" width="0.1131%" height="15" fill="rgb(220,122,19)"/><text x="27.9280%" y="319.50"></text></g><g><title>lint_checking (3,320,257 samples, 0.14%)</title><rect x="27.6779%" y="325" width="0.1422%" height="15" fill="rgb(250,228,42)"/><text x="27.9279%" y="335.50"></text></g><g><title>misc_checking_3 (5,877,806 samples, 0.25%)</title><rect x="27.6417%" y="341" width="0.2517%" height="15" fill="rgb(240,193,28)"/><text x="27.8917%" y="351.50"></text></g><g><title>impl_trait_ref (3,610,166 samples, 0.15%)</title><rect x="28.0739%" y="277" width="0.1546%" height="15" fill="rgb(216,20,37)"/><text x="28.3239%" y="287.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,021,640 samples, 0.13%)</title><rect x="28.0991%" y="261" width="0.1294%" height="15" fill="rgb(206,188,39)"/><text x="28.3491%" y="271.50"></text></g><g><title>coherent_trait (8,279,073 samples, 0.35%)</title><rect x="27.8984%" y="309" width="0.3546%" height="15" fill="rgb(217,207,13)"/><text x="28.1484%" y="319.50"></text></g><g><title>specialization_graph_of (8,264,173 samples, 0.35%)</title><rect x="27.8990%" y="293" width="0.3539%" height="15" fill="rgb(231,73,38)"/><text x="28.1490%" y="303.50"></text></g><g><title>coherence_checking (8,381,183 samples, 0.36%)</title><rect x="27.8978%" y="325" width="0.3590%" height="15" fill="rgb(225,20,46)"/><text x="28.1478%" y="335.50"></text></g><g><title>evaluate_obligation (7,936,863 samples, 0.34%)</title><rect x="29.9401%" y="277" width="0.3399%" height="15" fill="rgb(210,31,41)"/><text x="30.1901%" y="287.50"></text></g><g><title>item_bodies_checking (51,738,015 samples, 2.22%)</title><rect x="28.2580%" y="325" width="2.2159%" height="15" fill="rgb(221,200,47)"/><text x="28.5080%" y="335.50">i..</text></g><g><title>typeck_item_bodies (51,735,425 samples, 2.22%)</title><rect x="28.2581%" y="309" width="2.2158%" height="15" fill="rgb(226,26,5)"/><text x="28.5081%" y="319.50">t..</text></g><g><title>typeck (51,602,634 samples, 2.21%)</title><rect x="28.2638%" y="293" width="2.2101%" height="15" fill="rgb(249,33,26)"/><text x="28.5138%" y="303.50">t..</text></g><g><title>item_types_checking (3,412,468 samples, 0.15%)</title><rect x="30.4739%" y="325" width="0.1462%" height="15" fill="rgb(235,183,28)"/><text x="30.7239%" y="335.50"></text></g><g><title>check_mod_item_types (3,409,368 samples, 0.15%)</title><rect x="30.4740%" y="309" width="0.1460%" height="15" fill="rgb(221,5,38)"/><text x="30.7240%" y="319.50"></text></g><g><title>evaluate_obligation (5,881,905 samples, 0.25%)</title><rect x="30.8991%" y="37" width="0.2519%" height="15" fill="rgb(247,18,42)"/><text x="31.1491%" y="47.50"></text></g><g><title>eval_to_const_value_raw (6,681,924 samples, 0.29%)</title><rect x="30.8679%" y="101" width="0.2862%" height="15" fill="rgb(241,131,45)"/><text x="31.1179%" y="111.50"></text></g><g><title>eval_to_const_value_raw (6,679,884 samples, 0.29%)</title><rect x="30.8680%" y="85" width="0.2861%" height="15" fill="rgb(249,31,29)"/><text x="31.1180%" y="95.50"></text></g><g><title>eval_to_allocation_raw (6,677,034 samples, 0.29%)</title><rect x="30.8681%" y="69" width="0.2860%" height="15" fill="rgb(225,111,53)"/><text x="31.1181%" y="79.50"></text></g><g><title>typeck (6,203,379 samples, 0.27%)</title><rect x="30.8884%" y="53" width="0.2657%" height="15" fill="rgb(238,160,17)"/><text x="31.1384%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (6,696,776 samples, 0.29%)</title><rect x="30.8675%" y="117" width="0.2868%" height="15" fill="rgb(214,148,48)"/><text x="31.1175%" y="127.50"></text></g><g><title>eval_to_const_value_raw (7,183,021 samples, 0.31%)</title><rect x="30.8602%" y="165" width="0.3076%" height="15" fill="rgb(232,36,49)"/><text x="31.1102%" y="175.50"></text></g><g><title>eval_to_const_value_raw (7,182,301 samples, 0.31%)</title><rect x="30.8602%" y="149" width="0.3076%" height="15" fill="rgb(209,103,24)"/><text x="31.1102%" y="159.50"></text></g><g><title>eval_to_allocation_raw (7,181,171 samples, 0.31%)</title><rect x="30.8603%" y="133" width="0.3076%" height="15" fill="rgb(229,88,8)"/><text x="31.1103%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,188,811 samples, 0.31%)</title><rect x="30.8600%" y="181" width="0.3079%" height="15" fill="rgb(213,181,19)"/><text x="31.1100%" y="191.50"></text></g><g><title>eval_to_const_value_raw (7,525,205 samples, 0.32%)</title><rect x="30.8484%" y="229" width="0.3223%" height="15" fill="rgb(254,191,54)"/><text x="31.0984%" y="239.50"></text></g><g><title>eval_to_const_value_raw (7,523,075 samples, 0.32%)</title><rect x="30.8485%" y="213" width="0.3222%" height="15" fill="rgb(241,83,37)"/><text x="31.0985%" y="223.50"></text></g><g><title>eval_to_allocation_raw (7,518,725 samples, 0.32%)</title><rect x="30.8487%" y="197" width="0.3220%" height="15" fill="rgb(233,36,39)"/><text x="31.0987%" y="207.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,541,145 samples, 0.32%)</title><rect x="30.8480%" y="245" width="0.3230%" height="15" fill="rgb(226,3,54)"/><text x="31.0980%" y="255.50"></text></g><g><title>eval_to_const_value_raw (8,522,546 samples, 0.37%)</title><rect x="30.8122%" y="293" width="0.3650%" height="15" fill="rgb(245,192,40)"/><text x="31.0622%" y="303.50"></text></g><g><title>eval_to_const_value_raw (8,509,586 samples, 0.36%)</title><rect x="30.8128%" y="277" width="0.3645%" height="15" fill="rgb(238,167,29)"/><text x="31.0628%" y="287.50"></text></g><g><title>eval_to_allocation_raw (8,503,966 samples, 0.36%)</title><rect x="30.8130%" y="261" width="0.3642%" height="15" fill="rgb(232,182,51)"/><text x="31.0630%" y="271.50"></text></g><g><title>check_impl_item_well_formed (12,963,324 samples, 0.56%)</title><rect x="30.7069%" y="309" width="0.5552%" height="15" fill="rgb(231,60,39)"/><text x="30.9569%" y="319.50"></text></g><g><title>check_item_well_formed (6,523,004 samples, 0.28%)</title><rect x="31.2621%" y="309" width="0.2794%" height="15" fill="rgb(208,69,12)"/><text x="31.5121%" y="319.50"></text></g><g><title>analysis (131,097,669 samples, 5.61%)</title><rect x="25.9274%" y="357" width="5.6147%" height="15" fill="rgb(235,93,37)"/><text x="26.1774%" y="367.50">analysis</text></g><g><title>type_check_crate (85,192,818 samples, 3.65%)</title><rect x="27.8934%" y="341" width="3.6487%" height="15" fill="rgb(213,116,39)"/><text x="28.1434%" y="351.50">type..</text></g><g><title>wf_checking (19,754,830 samples, 0.85%)</title><rect x="30.6960%" y="325" width="0.8461%" height="15" fill="rgb(222,207,29)"/><text x="30.9460%" y="335.50"></text></g><g><title>param_env (2,811,863 samples, 0.12%)</title><rect x="33.5434%" y="309" width="0.1204%" height="15" fill="rgb(206,96,30)"/><text x="33.7934%" y="319.50"></text></g><g><title>fn_abi_of_instance (10,049,404 samples, 0.43%)</title><rect x="33.2696%" y="325" width="0.4304%" height="15" fill="rgb(218,138,4)"/><text x="33.5196%" y="335.50"></text></g><g><title>codegen_module (50,033,729 samples, 2.14%)</title><rect x="31.6250%" y="341" width="2.1429%" height="15" fill="rgb(250,191,14)"/><text x="31.8750%" y="351.50">c..</text></g><g><title>optimized_mir (5,284,457 samples, 0.23%)</title><rect x="34.0174%" y="293" width="0.2263%" height="15" fill="rgb(239,60,40)"/><text x="34.2674%" y="303.50"></text></g><g><title>codegen_fulfill_obligation (4,944,607 samples, 0.21%)</title><rect x="34.2967%" y="277" width="0.2118%" height="15" fill="rgb(206,27,48)"/><text x="34.5467%" y="287.50"></text></g><g><title>specialization_graph_of (2,656,719 samples, 0.11%)</title><rect x="34.5395%" y="277" width="0.1138%" height="15" fill="rgb(225,35,8)"/><text x="34.7895%" y="287.50"></text></g><g><title>resolve_instance (9,940,258 samples, 0.43%)</title><rect x="34.2438%" y="293" width="0.4257%" height="15" fill="rgb(250,213,24)"/><text x="34.4938%" y="303.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,373,005 samples, 0.10%)</title><rect x="34.7131%" y="293" width="0.1016%" height="15" fill="rgb(247,123,22)"/><text x="34.9631%" y="303.50"></text></g><g><title>specialization_graph_of (2,865,891 samples, 0.12%)</title><rect x="34.8274%" y="261" width="0.1227%" height="15" fill="rgb(231,138,38)"/><text x="35.0774%" y="271.50"></text></g><g><title>monomorphization_collector_graph_walk (27,568,147 samples, 1.18%)</title><rect x="33.7696%" y="309" width="1.1807%" height="15" fill="rgb(231,145,46)"/><text x="34.0196%" y="319.50"></text></g><g><title>vtable_entries (3,164,284 samples, 0.14%)</title><rect x="34.8148%" y="293" width="0.1355%" height="15" fill="rgb(251,118,11)"/><text x="35.0648%" y="303.50"></text></g><g><title>resolve_instance (2,946,253 samples, 0.13%)</title><rect x="34.8241%" y="277" width="0.1262%" height="15" fill="rgb(217,147,25)"/><text x="35.0741%" y="287.50"></text></g><g><title>monomorphization_collector (27,615,747 samples, 1.18%)</title><rect x="33.7695%" y="325" width="1.1827%" height="15" fill="rgb(247,81,37)"/><text x="34.0195%" y="335.50"></text></g><g><title>assert_symbols_are_distinct (2,497,218 samples, 0.11%)</title><rect x="34.9524%" y="309" width="0.1070%" height="15" fill="rgb(209,12,38)"/><text x="35.2024%" y="319.50"></text></g><g><title>collect_and_partition_mono_items (30,809,822 samples, 1.32%)</title><rect x="33.7681%" y="341" width="1.3195%" height="15" fill="rgb(227,1,9)"/><text x="34.0181%" y="351.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,162,385 samples, 0.14%)</title><rect x="34.9522%" y="325" width="0.1354%" height="15" fill="rgb(248,47,43)"/><text x="35.2022%" y="335.50"></text></g><g><title>codegen_crate (82,846,241 samples, 3.55%)</title><rect x="31.5425%" y="357" width="3.5482%" height="15" fill="rgb(221,10,30)"/><text x="31.7925%" y="367.50">code..</text></g><g><title>codegen_module_optimize (578,523,367 samples, 24.78%)</title><rect x="35.0907%" y="357" width="24.7774%" height="15" fill="rgb(210,229,1)"/><text x="35.3407%" y="367.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (560,654,907 samples, 24.01%)</title><rect x="35.8559%" y="341" width="24.0121%" height="15" fill="rgb(222,148,37)"/><text x="36.1059%" y="351.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (129,182,279 samples, 5.53%)</title><rect x="60.2512%" y="341" width="5.5327%" height="15" fill="rgb(234,67,33)"/><text x="60.5012%" y="351.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (133,794,209 samples, 5.73%)</title><rect x="65.7839%" y="341" width="5.7302%" height="15" fill="rgb(247,98,35)"/><text x="66.0339%" y="351.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (132,326,311 samples, 5.67%)</title><rect x="65.8468%" y="325" width="5.6674%" height="15" fill="rgb(247,138,52)"/><text x="66.0968%" y="335.50">LLVM_mo..</text></g><g><title>LLVM_thin_lto_import (3,040,613 samples, 0.13%)</title><rect x="71.5141%" y="341" width="0.1302%" height="15" fill="rgb(213,79,30)"/><text x="71.7641%" y="351.50"></text></g><g><title>codegen_module_perform_lto (275,318,775 samples, 11.79%)</title><rect x="59.8680%" y="357" width="11.7915%" height="15" fill="rgb(246,177,23)"/><text x="60.1180%" y="367.50">codegen_module_pe..</text></g><g><title>metadata_register_crate (3,230,425 samples, 0.14%)</title><rect x="73.8751%" y="309" width="0.1384%" height="15" fill="rgb(230,62,27)"/><text x="74.1251%" y="319.50"></text></g><g><title>macro_expand_crate (54,915,740 samples, 2.35%)</title><rect x="71.6853%" y="341" width="2.3520%" height="15" fill="rgb(216,154,8)"/><text x="71.9353%" y="351.50">m..</text></g><g><title>expand_crate (54,900,600 samples, 2.35%)</title><rect x="71.6859%" y="325" width="2.3513%" height="15" fill="rgb(244,35,45)"/><text x="71.9359%" y="335.50">e..</text></g><g><title>late_resolve_crate (2,395,227 samples, 0.10%)</title><rect x="74.0884%" y="325" width="0.1026%" height="15" fill="rgb(251,115,12)"/><text x="74.3384%" y="335.50"></text></g><g><title>configure_and_expand (59,396,541 samples, 2.54%)</title><rect x="71.6595%" y="357" width="2.5439%" height="15" fill="rgb(240,54,50)"/><text x="71.9095%" y="367.50">co..</text></g><g><title>resolve_crate (3,833,623 samples, 0.16%)</title><rect x="74.0392%" y="341" width="0.1642%" height="15" fill="rgb(233,84,52)"/><text x="74.2892%" y="351.50"></text></g><g><title>free_global_ctxt (7,479,484 samples, 0.32%)</title><rect x="74.2423%" y="357" width="0.3203%" height="15" fill="rgb(207,117,47)"/><text x="74.4923%" y="367.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,408,349 samples, 0.15%)</title><rect x="74.8489%" y="325" width="0.1460%" height="15" fill="rgb(249,43,39)"/><text x="75.0989%" y="335.50"></text></g><g><title>optimized_mir (7,713,716 samples, 0.33%)</title><rect x="74.6662%" y="341" width="0.3304%" height="15" fill="rgb(209,38,44)"/><text x="74.9162%" y="351.50"></text></g><g><title>generate_crate_metadata (10,203,273 samples, 0.44%)</title><rect x="74.5626%" y="357" width="0.4370%" height="15" fill="rgb(236,212,23)"/><text x="74.8126%" y="367.50"></text></g><g><title>hir_lowering (3,662,821 samples, 0.16%)</title><rect x="74.9996%" y="357" width="0.1569%" height="15" fill="rgb(242,79,21)"/><text x="75.2496%" y="367.50"></text></g><g><title>finish_ongoing_codegen (571,577,169 samples, 24.48%)</title><rect x="75.1574%" y="341" width="24.4799%" height="15" fill="rgb(211,96,35)"/><text x="75.4074%" y="351.50">finish_ongoing_codegen</text></g><g><title>link (573,909,915 samples, 24.58%)</title><rect x="75.1565%" y="357" width="24.5798%" height="15" fill="rgb(253,215,40)"/><text x="75.4065%" y="367.50">link</text></g><g><title>self_profile_alloc_query_strings (5,181,497 samples, 0.22%)</title><rect x="99.7582%" y="357" width="0.2219%" height="15" fill="rgb(211,81,21)"/><text x="100.0082%" y="367.50"></text></g><g><title>all (2,334,887,220 samples, 100%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="399.50"></text></g><g><title>rustc (2,334,887,220 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="383.50">rustc</text></g></svg></svg>