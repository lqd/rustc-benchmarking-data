<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (837,221,146 samples, 10.94%)</title><rect x="0.0626%" y="149" width="10.9418%" height="15" fill="rgb(227,0,7)"/><text x="0.3126%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (7,838,119 samples, 0.10%)</title><rect x="10.9019%" y="133" width="0.1024%" height="15" fill="rgb(217,0,24)"/><text x="11.1519%" y="143.50"></text></g><g><title>resolve_instance (9,924,648 samples, 0.13%)</title><rect x="16.6532%" y="37" width="0.1297%" height="15" fill="rgb(221,193,54)"/><text x="16.9032%" y="47.50"></text></g><g><title>thir_body (29,738,892 samples, 0.39%)</title><rect x="16.7967%" y="37" width="0.3887%" height="15" fill="rgb(248,212,6)"/><text x="17.0467%" y="47.50"></text></g><g><title>mir_const (161,081,755 samples, 2.11%)</title><rect x="15.0883%" y="85" width="2.1052%" height="15" fill="rgb(208,68,35)"/><text x="15.3383%" y="95.50">m..</text></g><g><title>unsafety_check_result (136,340,794 samples, 1.78%)</title><rect x="15.4117%" y="69" width="1.7819%" height="15" fill="rgb(232,128,0)"/><text x="15.6617%" y="79.50">u..</text></g><g><title>mir_built (121,532,633 samples, 1.59%)</title><rect x="15.6052%" y="53" width="1.5883%" height="15" fill="rgb(207,160,47)"/><text x="15.8552%" y="63.50"></text></g><g><title>mir_promoted (188,529,498 samples, 2.46%)</title><rect x="14.7943%" y="101" width="2.4639%" height="15" fill="rgb(228,23,34)"/><text x="15.0443%" y="111.50">mi..</text></g><g><title>type_op_normalize_fn_sig (10,618,158 samples, 0.14%)</title><rect x="17.3385%" y="101" width="0.1388%" height="15" fill="rgb(218,30,26)"/><text x="17.5885%" y="111.50"></text></g><g><title>type_op_normalize_ty (9,161,468 samples, 0.12%)</title><rect x="17.4812%" y="101" width="0.1197%" height="15" fill="rgb(220,122,19)"/><text x="17.7312%" y="111.50"></text></g><g><title>MIR_borrow_checking (503,337,987 samples, 6.58%)</title><rect x="11.1146%" y="133" width="6.5782%" height="15" fill="rgb(250,228,42)"/><text x="11.3646%" y="143.50">MIR_borro..</text></g><g><title>mir_borrowck (497,934,204 samples, 6.51%)</title><rect x="11.1852%" y="117" width="6.5076%" height="15" fill="rgb(240,193,28)"/><text x="11.4352%" y="127.50">mir_borro..</text></g><g><title>codegen_fn_attrs (8,224,047 samples, 0.11%)</title><rect x="17.9855%" y="101" width="0.1075%" height="15" fill="rgb(216,20,37)"/><text x="18.2355%" y="111.50"></text></g><g><title>check_mod_attrs (35,698,914 samples, 0.47%)</title><rect x="17.8315%" y="117" width="0.4666%" height="15" fill="rgb(206,188,39)"/><text x="18.0815%" y="127.50"></text></g><g><title>lint_levels (15,663,966 samples, 0.20%)</title><rect x="18.0934%" y="101" width="0.2047%" height="15" fill="rgb(217,207,13)"/><text x="18.3434%" y="111.50"></text></g><g><title>check_mod_unstable_api_usage (9,211,553 samples, 0.12%)</title><rect x="18.4390%" y="117" width="0.1204%" height="15" fill="rgb(231,73,38)"/><text x="18.6890%" y="127.50"></text></g><g><title>misc_checking_1 (57,664,899 samples, 0.75%)</title><rect x="17.8310%" y="133" width="0.7536%" height="15" fill="rgb(225,20,46)"/><text x="18.0810%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (12,734,904 samples, 0.17%)</title><rect x="18.5846%" y="117" width="0.1664%" height="15" fill="rgb(210,31,41)"/><text x="18.8346%" y="127.50"></text></g><g><title>check_mod_liveness (8,984,322 samples, 0.12%)</title><rect x="18.6336%" y="101" width="0.1174%" height="15" fill="rgb(221,200,47)"/><text x="18.8836%" y="111.50"></text></g><g><title>misc_checking_2 (28,534,922 samples, 0.37%)</title><rect x="18.5846%" y="133" width="0.3729%" height="15" fill="rgb(226,26,5)"/><text x="18.8346%" y="143.50"></text></g><g><title>match_checking (15,797,068 samples, 0.21%)</title><rect x="18.7511%" y="117" width="0.2065%" height="15" fill="rgb(249,33,26)"/><text x="19.0011%" y="127.50"></text></g><g><title>check_match (14,060,455 samples, 0.18%)</title><rect x="18.7738%" y="101" width="0.1838%" height="15" fill="rgb(235,183,28)"/><text x="19.0238%" y="111.50"></text></g><g><title>check_private_in_public (11,333,668 samples, 0.15%)</title><rect x="18.9577%" y="117" width="0.1481%" height="15" fill="rgb(221,5,38)"/><text x="19.2077%" y="127.50"></text></g><g><title>death_checking (14,512,533 samples, 0.19%)</title><rect x="19.1059%" y="117" width="0.1897%" height="15" fill="rgb(247,18,42)"/><text x="19.3559%" y="127.50"></text></g><g><title>crate_lints (30,710,846 samples, 0.40%)</title><rect x="19.2956%" y="101" width="0.4014%" height="15" fill="rgb(241,131,45)"/><text x="19.5456%" y="111.50"></text></g><g><title>lint_checking (45,808,045 samples, 0.60%)</title><rect x="19.2955%" y="117" width="0.5987%" height="15" fill="rgb(249,31,29)"/><text x="19.5455%" y="127.50"></text></g><g><title>module_lints (15,094,549 samples, 0.20%)</title><rect x="19.6969%" y="101" width="0.1973%" height="15" fill="rgb(225,111,53)"/><text x="19.9469%" y="111.50"></text></g><g><title>lint_mod (15,080,909 samples, 0.20%)</title><rect x="19.6971%" y="85" width="0.1971%" height="15" fill="rgb(238,160,17)"/><text x="19.9471%" y="95.50"></text></g><g><title>privacy_access_levels (13,745,714 samples, 0.18%)</title><rect x="19.8942%" y="117" width="0.1796%" height="15" fill="rgb(214,148,48)"/><text x="20.1442%" y="127.50"></text></g><g><title>privacy_checking_modules (29,236,509 samples, 0.38%)</title><rect x="20.0738%" y="117" width="0.3821%" height="15" fill="rgb(232,36,49)"/><text x="20.3238%" y="127.50"></text></g><g><title>check_mod_privacy (29,226,479 samples, 0.38%)</title><rect x="20.0740%" y="101" width="0.3820%" height="15" fill="rgb(209,103,24)"/><text x="20.3240%" y="111.50"></text></g><g><title>misc_checking_3 (115,114,665 samples, 1.50%)</title><rect x="18.9575%" y="133" width="1.5045%" height="15" fill="rgb(229,88,8)"/><text x="19.2075%" y="143.50"></text></g><g><title>impl_trait_ref (10,052,076 samples, 0.13%)</title><rect x="21.0030%" y="69" width="0.1314%" height="15" fill="rgb(213,181,19)"/><text x="21.2530%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,916,998 samples, 0.10%)</title><rect x="21.0309%" y="53" width="0.1035%" height="15" fill="rgb(254,191,54)"/><text x="21.2809%" y="63.50"></text></g><g><title>coherent_trait (54,966,298 samples, 0.72%)</title><rect x="20.5294%" y="101" width="0.7184%" height="15" fill="rgb(241,83,37)"/><text x="20.7794%" y="111.50"></text></g><g><title>specialization_graph_of (54,778,916 samples, 0.72%)</title><rect x="20.5318%" y="85" width="0.7159%" height="15" fill="rgb(233,36,39)"/><text x="20.7818%" y="95.50"></text></g><g><title>coherence_checking (56,912,170 samples, 0.74%)</title><rect x="20.5287%" y="117" width="0.7438%" height="15" fill="rgb(226,3,54)"/><text x="20.7787%" y="127.50"></text></g><g><title>item_bodies_checking (496,935,525 samples, 6.49%)</title><rect x="21.2952%" y="117" width="6.4945%" height="15" fill="rgb(245,192,40)"/><text x="21.5452%" y="127.50">item_bodi..</text></g><g><title>typeck_item_bodies (496,930,325 samples, 6.49%)</title><rect x="21.2952%" y="101" width="6.4945%" height="15" fill="rgb(238,167,29)"/><text x="21.5452%" y="111.50">typeck_it..</text></g><g><title>typeck (492,555,887 samples, 6.44%)</title><rect x="21.3524%" y="85" width="6.4373%" height="15" fill="rgb(232,182,51)"/><text x="21.6024%" y="95.50">typeck</text></g><g><title>item_types_checking (68,484,712 samples, 0.90%)</title><rect x="27.7897%" y="117" width="0.8950%" height="15" fill="rgb(231,60,39)"/><text x="28.0397%" y="127.50"></text></g><g><title>check_mod_item_types (68,476,732 samples, 0.89%)</title><rect x="27.7898%" y="101" width="0.8949%" height="15" fill="rgb(208,69,12)"/><text x="28.0398%" y="111.50"></text></g><g><title>fn_sig (12,693,377 samples, 0.17%)</title><rect x="28.8122%" y="85" width="0.1659%" height="15" fill="rgb(235,93,37)"/><text x="29.0622%" y="95.50"></text></g><g><title>named_region_map (10,724,015 samples, 0.14%)</title><rect x="29.0689%" y="69" width="0.1402%" height="15" fill="rgb(213,116,39)"/><text x="29.3189%" y="79.50"></text></g><g><title>resolve_lifetimes (9,714,304 samples, 0.13%)</title><rect x="29.0821%" y="53" width="0.1270%" height="15" fill="rgb(222,207,29)"/><text x="29.3321%" y="63.50"></text></g><g><title>generics_of (18,137,283 samples, 0.24%)</title><rect x="28.9781%" y="85" width="0.2370%" height="15" fill="rgb(206,96,30)"/><text x="29.2281%" y="95.50"></text></g><g><title>predicates_of (9,549,678 samples, 0.12%)</title><rect x="29.2297%" y="85" width="0.1248%" height="15" fill="rgb(218,138,4)"/><text x="29.4797%" y="95.50"></text></g><g><title>type_collecting (54,376,393 samples, 0.71%)</title><rect x="28.6855%" y="117" width="0.7107%" height="15" fill="rgb(250,191,14)"/><text x="28.9355%" y="127.50"></text></g><g><title>collect_mod_item_types (54,359,343 samples, 0.71%)</title><rect x="28.6857%" y="101" width="0.7104%" height="15" fill="rgb(239,60,40)"/><text x="28.9357%" y="111.50"></text></g><g><title>param_env (8,857,890 samples, 0.12%)</title><rect x="30.1705%" y="85" width="0.1158%" height="15" fill="rgb(206,27,48)"/><text x="30.4205%" y="95.50"></text></g><g><title>region_scope_tree (10,279,847 samples, 0.13%)</title><rect x="30.2878%" y="85" width="0.1343%" height="15" fill="rgb(225,35,8)"/><text x="30.5378%" y="95.50"></text></g><g><title>check_impl_item_well_formed (70,615,408 samples, 0.92%)</title><rect x="29.4992%" y="101" width="0.9229%" height="15" fill="rgb(250,213,24)"/><text x="29.7492%" y="111.50"></text></g><g><title>evaluate_obligation (11,947,480 samples, 0.16%)</title><rect x="31.3522%" y="85" width="0.1561%" height="15" fill="rgb(247,123,22)"/><text x="31.6022%" y="95.50"></text></g><g><title>param_env (9,961,198 samples, 0.13%)</title><rect x="31.5343%" y="85" width="0.1302%" height="15" fill="rgb(231,138,38)"/><text x="31.7843%" y="95.50"></text></g><g><title>analysis (1,587,434,514 samples, 20.75%)</title><rect x="11.0044%" y="149" width="20.7464%" height="15" fill="rgb(231,145,46)"/><text x="11.2544%" y="159.50">analysis</text></g><g><title>type_check_crate (863,777,906 samples, 11.29%)</title><rect x="20.4620%" y="133" width="11.2889%" height="15" fill="rgb(251,118,11)"/><text x="20.7120%" y="143.50">type_check_crate</text></g><g><title>wf_checking (179,587,712 samples, 2.35%)</title><rect x="29.4038%" y="117" width="2.3471%" height="15" fill="rgb(217,147,25)"/><text x="29.6538%" y="127.50">w..</text></g><g><title>check_item_well_formed (101,666,920 samples, 1.33%)</title><rect x="30.4221%" y="101" width="1.3287%" height="15" fill="rgb(247,81,37)"/><text x="30.6721%" y="111.50"></text></g><g><title>fn_abi_of_instance (26,571,895 samples, 0.35%)</title><rect x="33.4111%" y="117" width="0.3473%" height="15" fill="rgb(209,12,38)"/><text x="33.6611%" y="127.50"></text></g><g><title>codegen_module (153,873,921 samples, 2.01%)</title><rect x="31.7841%" y="133" width="2.0110%" height="15" fill="rgb(227,1,9)"/><text x="32.0341%" y="143.50">c..</text></g><g><title>mir_drops_elaborated_and_const_checked (60,875,179 samples, 0.80%)</title><rect x="34.9414%" y="69" width="0.7956%" height="15" fill="rgb(248,47,43)"/><text x="35.1914%" y="79.50"></text></g><g><title>optimized_mir (126,738,855 samples, 1.66%)</title><rect x="34.0822%" y="85" width="1.6564%" height="15" fill="rgb(221,10,30)"/><text x="34.3322%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (14,686,391 samples, 0.19%)</title><rect x="35.7813%" y="69" width="0.1919%" height="15" fill="rgb(210,229,1)"/><text x="36.0313%" y="79.50"></text></g><g><title>resolve_instance (21,370,116 samples, 0.28%)</title><rect x="35.7386%" y="85" width="0.2793%" height="15" fill="rgb(222,148,37)"/><text x="35.9886%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (171,848,164 samples, 2.25%)</title><rect x="33.7972%" y="101" width="2.2459%" height="15" fill="rgb(234,67,33)"/><text x="34.0472%" y="111.50">m..</text></g><g><title>monomorphization_collector (174,948,789 samples, 2.29%)</title><rect x="33.7971%" y="117" width="2.2864%" height="15" fill="rgb(247,98,35)"/><text x="34.0471%" y="127.50">m..</text></g><g><title>assert_symbols_are_distinct (8,162,932 samples, 0.11%)</title><rect x="36.0839%" y="101" width="0.1067%" height="15" fill="rgb(247,138,52)"/><text x="36.3339%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (189,246,410 samples, 2.47%)</title><rect x="33.7953%" y="133" width="2.4733%" height="15" fill="rgb(213,79,30)"/><text x="34.0453%" y="143.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (14,157,180 samples, 0.19%)</title><rect x="36.0836%" y="117" width="0.1850%" height="15" fill="rgb(246,177,23)"/><text x="36.3336%" y="127.50"></text></g><g><title>codegen_crate (345,749,142 samples, 4.52%)</title><rect x="31.7510%" y="149" width="4.5187%" height="15" fill="rgb(230,62,27)"/><text x="32.0010%" y="159.50">codeg..</text></g><g><title>codegen_module_optimize (1,044,199,586 samples, 13.65%)</title><rect x="36.2696%" y="149" width="13.6468%" height="15" fill="rgb(216,154,8)"/><text x="36.5196%" y="159.50">codegen_module_optimi..</text></g><g><title>LLVM_module_optimize (997,484,012 samples, 13.04%)</title><rect x="36.8801%" y="133" width="13.0363%" height="15" fill="rgb(244,35,45)"/><text x="37.1301%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (314,809,054 samples, 4.11%)</title><rect x="50.1911%" y="133" width="4.1143%" height="15" fill="rgb(251,115,12)"/><text x="50.4411%" y="143.50">LLVM..</text></g><g><title>LLVM_module_codegen (415,275,765 samples, 5.43%)</title><rect x="54.3054%" y="133" width="5.4273%" height="15" fill="rgb(240,54,50)"/><text x="54.5554%" y="143.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (412,333,852 samples, 5.39%)</title><rect x="54.3438%" y="117" width="5.3889%" height="15" fill="rgb(233,84,52)"/><text x="54.5938%" y="127.50">LLVM_mo..</text></g><g><title>LLVM_thin_lto_import (43,635,569 samples, 0.57%)</title><rect x="59.7327%" y="133" width="0.5703%" height="15" fill="rgb(207,117,47)"/><text x="59.9827%" y="143.50"></text></g><g><title>codegen_module_perform_lto (797,519,986 samples, 10.42%)</title><rect x="49.9164%" y="149" width="10.4229%" height="15" fill="rgb(249,43,39)"/><text x="50.1664%" y="159.50">codegen_module_..</text></g><g><title>AST_validation (16,662,727 samples, 0.22%)</title><rect x="60.3415%" y="133" width="0.2178%" height="15" fill="rgb(209,38,44)"/><text x="60.5915%" y="143.50"></text></g><g><title>macro_expand_crate (1,852,379,508 samples, 24.21%)</title><rect x="60.6293%" y="133" width="24.2091%" height="15" fill="rgb(236,212,23)"/><text x="60.8793%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (1,852,355,558 samples, 24.21%)</title><rect x="60.6297%" y="117" width="24.2087%" height="15" fill="rgb(242,79,21)"/><text x="60.8797%" y="127.50">expand_crate</text></g><g><title>late_resolve_crate (59,854,743 samples, 0.78%)</title><rect x="84.9400%" y="117" width="0.7823%" height="15" fill="rgb(211,96,35)"/><text x="85.1900%" y="127.50"></text></g><g><title>configure_and_expand (1,950,340,541 samples, 25.49%)</title><rect x="60.3394%" y="149" width="25.4893%" height="15" fill="rgb(253,215,40)"/><text x="60.5894%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (74,791,773 samples, 0.98%)</title><rect x="84.8512%" y="133" width="0.9775%" height="15" fill="rgb(211,81,21)"/><text x="85.1012%" y="143.50"></text></g><g><title>drop_ast (20,921,276 samples, 0.27%)</title><rect x="85.8287%" y="149" width="0.2734%" height="15" fill="rgb(208,190,38)"/><text x="86.0787%" y="159.50"></text></g><g><title>early_lint_checks (22,382,802 samples, 0.29%)</title><rect x="86.1024%" y="149" width="0.2925%" height="15" fill="rgb(235,213,38)"/><text x="86.3524%" y="159.50"></text></g><g><title>free_global_ctxt (31,442,463 samples, 0.41%)</title><rect x="86.3950%" y="149" width="0.4109%" height="15" fill="rgb(237,122,38)"/><text x="86.6450%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (34,615,397 samples, 0.45%)</title><rect x="87.9936%" y="117" width="0.4524%" height="15" fill="rgb(244,218,35)"/><text x="88.2436%" y="127.50"></text></g><g><title>optimized_mir (70,684,693 samples, 0.92%)</title><rect x="87.5224%" y="133" width="0.9238%" height="15" fill="rgb(240,68,47)"/><text x="87.7724%" y="143.50"></text></g><g><title>generate_crate_metadata (127,045,270 samples, 1.66%)</title><rect x="86.8059%" y="149" width="1.6604%" height="15" fill="rgb(210,16,53)"/><text x="87.0559%" y="159.50"></text></g><g><title>hir_lowering (116,315,290 samples, 1.52%)</title><rect x="88.4663%" y="149" width="1.5201%" height="15" fill="rgb(235,124,12)"/><text x="88.7163%" y="159.50"></text></g><g><title>finish_ongoing_codegen (713,015,487 samples, 9.32%)</title><rect x="89.9866%" y="133" width="9.3185%" height="15" fill="rgb(224,169,11)"/><text x="90.2366%" y="143.50">finish_ongoin..</text></g><g><title>link_crate (8,790,819 samples, 0.11%)</title><rect x="99.3052%" y="133" width="0.1149%" height="15" fill="rgb(250,166,2)"/><text x="99.5552%" y="143.50"></text></g><g><title>link_binary (8,641,628 samples, 0.11%)</title><rect x="99.3071%" y="117" width="0.1129%" height="15" fill="rgb(242,216,29)"/><text x="99.5571%" y="127.50"></text></g><g><title>link (721,835,147 samples, 9.43%)</title><rect x="89.9864%" y="149" width="9.4338%" height="15" fill="rgb(230,116,27)"/><text x="90.2364%" y="159.50">link</text></g><g><title>parse_crate (32,238,093 samples, 0.42%)</title><rect x="99.4202%" y="149" width="0.4213%" height="15" fill="rgb(228,99,48)"/><text x="99.6702%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (8,724,879 samples, 0.11%)</title><rect x="99.8465%" y="149" width="0.1140%" height="15" fill="rgb(253,11,6)"/><text x="100.0965%" y="159.50"></text></g><g><title>all (7,651,596,269 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (7,651,596,269 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>