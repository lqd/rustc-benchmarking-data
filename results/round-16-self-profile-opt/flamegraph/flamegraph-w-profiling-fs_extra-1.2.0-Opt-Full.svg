<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (129,434,332 samples, 11.74%)</title><rect x="0.0777%" y="181" width="11.7400%" height="15" fill="rgb(227,0,7)"/><text x="0.3277%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,316,994 samples, 0.12%)</title><rect x="11.6982%" y="165" width="0.1195%" height="15" fill="rgb(217,0,24)"/><text x="11.9482%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,291,574 samples, 0.12%)</title><rect x="11.7005%" y="149" width="0.1171%" height="15" fill="rgb(221,193,54)"/><text x="11.9505%" y="159.50"></text></g><g><title>needs_drop_raw (3,253,169 samples, 0.30%)</title><rect x="16.6577%" y="69" width="0.2951%" height="15" fill="rgb(248,212,6)"/><text x="16.9077%" y="79.50"></text></g><g><title>is_copy_raw (2,333,217 samples, 0.21%)</title><rect x="16.7411%" y="53" width="0.2116%" height="15" fill="rgb(208,68,35)"/><text x="16.9911%" y="63.50"></text></g><g><title>evaluate_obligation (2,001,655 samples, 0.18%)</title><rect x="16.7712%" y="37" width="0.1816%" height="15" fill="rgb(232,128,0)"/><text x="17.0212%" y="47.50"></text></g><g><title>resolve_instance (1,791,019 samples, 0.16%)</title><rect x="16.9529%" y="69" width="0.1624%" height="15" fill="rgb(207,160,47)"/><text x="17.2029%" y="79.50"></text></g><g><title>thir_body (3,390,830 samples, 0.31%)</title><rect x="17.1196%" y="69" width="0.3076%" height="15" fill="rgb(228,23,34)"/><text x="17.3696%" y="79.50"></text></g><g><title>mir_const (23,110,555 samples, 2.10%)</title><rect x="15.3331%" y="117" width="2.0962%" height="15" fill="rgb(218,30,26)"/><text x="15.5831%" y="127.50">m..</text></g><g><title>unsafety_check_result (20,373,927 samples, 1.85%)</title><rect x="15.5813%" y="101" width="1.8480%" height="15" fill="rgb(220,122,19)"/><text x="15.8313%" y="111.50">u..</text></g><g><title>mir_built (18,606,449 samples, 1.69%)</title><rect x="15.7416%" y="85" width="1.6876%" height="15" fill="rgb(250,228,42)"/><text x="15.9916%" y="95.50"></text></g><g><title>mir_promoted (25,461,004 samples, 2.31%)</title><rect x="15.1245%" y="133" width="2.3094%" height="15" fill="rgb(240,193,28)"/><text x="15.3745%" y="143.50">m..</text></g><g><title>type_op_normalize_fn_sig (1,404,100 samples, 0.13%)</title><rect x="17.4941%" y="133" width="0.1274%" height="15" fill="rgb(216,20,37)"/><text x="17.7441%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,057,356 samples, 0.37%)</title><rect x="17.6718%" y="133" width="0.3680%" height="15" fill="rgb(206,188,39)"/><text x="17.9218%" y="143.50"></text></g><g><title>MIR_borrow_checking (67,981,057 samples, 6.17%)</title><rect x="11.8758%" y="165" width="6.1660%" height="15" fill="rgb(217,207,13)"/><text x="12.1258%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (67,842,866 samples, 6.15%)</title><rect x="11.8883%" y="149" width="6.1535%" height="15" fill="rgb(231,73,38)"/><text x="12.1383%" y="159.50">mir_borr..</text></g><g><title>misc_checking_1 (2,028,642 samples, 0.18%)</title><rect x="18.0724%" y="165" width="0.1840%" height="15" fill="rgb(225,20,46)"/><text x="18.3224%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,523,657 samples, 0.14%)</title><rect x="18.2566%" y="149" width="0.1382%" height="15" fill="rgb(210,31,41)"/><text x="18.5066%" y="159.50"></text></g><g><title>check_mod_liveness (1,276,154 samples, 0.12%)</title><rect x="18.2790%" y="133" width="0.1158%" height="15" fill="rgb(221,200,47)"/><text x="18.5290%" y="143.50"></text></g><g><title>misc_checking_2 (3,417,877 samples, 0.31%)</title><rect x="18.2564%" y="165" width="0.3100%" height="15" fill="rgb(226,26,5)"/><text x="18.5064%" y="175.50"></text></g><g><title>match_checking (1,892,430 samples, 0.17%)</title><rect x="18.3948%" y="149" width="0.1716%" height="15" fill="rgb(249,33,26)"/><text x="18.6448%" y="159.50"></text></g><g><title>check_match (1,856,480 samples, 0.17%)</title><rect x="18.3980%" y="133" width="0.1684%" height="15" fill="rgb(235,183,28)"/><text x="18.6480%" y="143.50"></text></g><g><title>crate_lints (2,711,840 samples, 0.25%)</title><rect x="18.6634%" y="133" width="0.2460%" height="15" fill="rgb(221,5,38)"/><text x="18.9134%" y="143.50"></text></g><g><title>lint_checking (4,438,899 samples, 0.40%)</title><rect x="18.6633%" y="149" width="0.4026%" height="15" fill="rgb(247,18,42)"/><text x="18.9133%" y="159.50"></text></g><g><title>module_lints (1,725,639 samples, 0.16%)</title><rect x="18.9094%" y="133" width="0.1565%" height="15" fill="rgb(241,131,45)"/><text x="19.1594%" y="143.50"></text></g><g><title>lint_mod (1,719,209 samples, 0.16%)</title><rect x="18.9099%" y="117" width="0.1559%" height="15" fill="rgb(249,31,29)"/><text x="19.1599%" y="127.50"></text></g><g><title>privacy_checking_modules (2,082,203 samples, 0.19%)</title><rect x="19.1129%" y="149" width="0.1889%" height="15" fill="rgb(225,111,53)"/><text x="19.3629%" y="159.50"></text></g><g><title>check_mod_privacy (2,077,853 samples, 0.19%)</title><rect x="19.1133%" y="133" width="0.1885%" height="15" fill="rgb(238,160,17)"/><text x="19.3633%" y="143.50"></text></g><g><title>misc_checking_3 (8,134,930 samples, 0.74%)</title><rect x="18.5664%" y="165" width="0.7379%" height="15" fill="rgb(214,148,48)"/><text x="18.8164%" y="175.50"></text></g><g><title>impl_parent (2,623,345 samples, 0.24%)</title><rect x="19.6729%" y="101" width="0.2379%" height="15" fill="rgb(232,36,49)"/><text x="19.9229%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,411,423 samples, 0.13%)</title><rect x="19.7828%" y="85" width="0.1280%" height="15" fill="rgb(209,103,24)"/><text x="20.0328%" y="95.50"></text></g><g><title>impl_trait_ref (5,156,187 samples, 0.47%)</title><rect x="19.9109%" y="101" width="0.4677%" height="15" fill="rgb(229,88,8)"/><text x="20.1609%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,200,575 samples, 0.38%)</title><rect x="19.9975%" y="85" width="0.3810%" height="15" fill="rgb(213,181,19)"/><text x="20.2475%" y="95.50"></text></g><g><title>coherent_trait (12,565,928 samples, 1.14%)</title><rect x="19.3124%" y="133" width="1.1398%" height="15" fill="rgb(254,191,54)"/><text x="19.5624%" y="143.50"></text></g><g><title>specialization_graph_of (12,542,168 samples, 1.14%)</title><rect x="19.3146%" y="117" width="1.1376%" height="15" fill="rgb(241,83,37)"/><text x="19.5646%" y="127.50"></text></g><g><title>coherence_checking (12,644,869 samples, 1.15%)</title><rect x="19.3106%" y="149" width="1.1469%" height="15" fill="rgb(233,36,39)"/><text x="19.5606%" y="159.50"></text></g><g><title>associated_items (1,215,188 samples, 0.11%)</title><rect x="24.6762%" y="101" width="0.1102%" height="15" fill="rgb(226,3,54)"/><text x="24.9262%" y="111.50"></text></g><g><title>dropck_outlives (1,168,385 samples, 0.11%)</title><rect x="24.7976%" y="101" width="0.1060%" height="15" fill="rgb(245,192,40)"/><text x="25.0476%" y="111.50"></text></g><g><title>evaluate_obligation (4,987,038 samples, 0.45%)</title><rect x="24.9036%" y="101" width="0.4523%" height="15" fill="rgb(238,167,29)"/><text x="25.1536%" y="111.50"></text></g><g><title>generics_of (1,259,541 samples, 0.11%)</title><rect x="25.3843%" y="101" width="0.1142%" height="15" fill="rgb(232,182,51)"/><text x="25.6343%" y="111.50"></text></g><g><title>evaluate_obligation (2,192,474 samples, 0.20%)</title><rect x="27.8699%" y="85" width="0.1989%" height="15" fill="rgb(231,60,39)"/><text x="28.1199%" y="95.50"></text></g><g><title>typeck (26,167,448 samples, 2.37%)</title><rect x="25.7532%" y="101" width="2.3734%" height="15" fill="rgb(208,69,12)"/><text x="26.0032%" y="111.50">ty..</text></g><g><title>item_bodies_checking (84,638,681 samples, 7.68%)</title><rect x="20.4597%" y="149" width="7.6769%" height="15" fill="rgb(235,93,37)"/><text x="20.7097%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (84,635,281 samples, 7.68%)</title><rect x="20.4600%" y="133" width="7.6766%" height="15" fill="rgb(213,116,39)"/><text x="20.7100%" y="143.50">typeck_item..</text></g><g><title>typeck (84,548,609 samples, 7.67%)</title><rect x="20.4679%" y="117" width="7.6688%" height="15" fill="rgb(222,207,29)"/><text x="20.7179%" y="127.50">typeck</text></g><g><title>generics_of (1,195,320 samples, 0.11%)</title><rect x="28.2899%" y="117" width="0.1084%" height="15" fill="rgb(206,96,30)"/><text x="28.5399%" y="127.50"></text></g><g><title>type_collecting (2,856,992 samples, 0.26%)</title><rect x="28.2303%" y="149" width="0.2591%" height="15" fill="rgb(218,138,4)"/><text x="28.4803%" y="159.50"></text></g><g><title>collect_mod_item_types (2,846,542 samples, 0.26%)</title><rect x="28.2312%" y="133" width="0.2582%" height="15" fill="rgb(250,191,14)"/><text x="28.4812%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,348,506 samples, 0.12%)</title><rect x="28.5119%" y="133" width="0.1223%" height="15" fill="rgb(239,60,40)"/><text x="28.7619%" y="143.50"></text></g><g><title>analysis (189,811,536 samples, 17.22%)</title><rect x="11.8177%" y="181" width="17.2163%" height="15" fill="rgb(206,27,48)"/><text x="12.0677%" y="191.50">analysis</text></g><g><title>type_check_crate (107,271,300 samples, 9.73%)</title><rect x="19.3043%" y="165" width="9.7298%" height="15" fill="rgb(225,35,8)"/><text x="19.5543%" y="175.50">type_check_cra..</text></g><g><title>wf_checking (5,999,666 samples, 0.54%)</title><rect x="28.4898%" y="149" width="0.5442%" height="15" fill="rgb(250,213,24)"/><text x="28.7398%" y="159.50"></text></g><g><title>check_item_well_formed (4,407,426 samples, 0.40%)</title><rect x="28.6343%" y="133" width="0.3998%" height="15" fill="rgb(247,123,22)"/><text x="28.8843%" y="143.50"></text></g><g><title>param_env (2,715,594 samples, 0.25%)</title><rect x="31.7337%" y="133" width="0.2463%" height="15" fill="rgb(231,138,38)"/><text x="31.9837%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,649,082 samples, 0.69%)</title><rect x="31.3102%" y="149" width="0.6938%" height="15" fill="rgb(231,145,46)"/><text x="31.5602%" y="159.50"></text></g><g><title>codegen_module (31,894,370 samples, 2.89%)</title><rect x="29.2159%" y="165" width="2.8929%" height="15" fill="rgb(251,118,11)"/><text x="29.4659%" y="175.50">co..</text></g><g><title>codegen_fn_attrs (1,689,516 samples, 0.15%)</title><rect x="32.2338%" y="117" width="0.1532%" height="15" fill="rgb(217,147,25)"/><text x="32.4838%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,569,116 samples, 0.14%)</title><rect x="32.5640%" y="101" width="0.1423%" height="15" fill="rgb(247,81,37)"/><text x="32.8140%" y="111.50"></text></g><g><title>optimized_mir (3,700,120 samples, 0.34%)</title><rect x="32.4612%" y="117" width="0.3356%" height="15" fill="rgb(209,12,38)"/><text x="32.7112%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (1,698,004 samples, 0.15%)</title><rect x="32.8523%" y="101" width="0.1540%" height="15" fill="rgb(227,1,9)"/><text x="33.1023%" y="111.50"></text></g><g><title>resolve_instance (3,903,668 samples, 0.35%)</title><rect x="32.7968%" y="117" width="0.3541%" height="15" fill="rgb(248,47,43)"/><text x="33.0468%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (12,803,051 samples, 1.16%)</title><rect x="32.1132%" y="133" width="1.1613%" height="15" fill="rgb(221,10,30)"/><text x="32.3632%" y="143.50"></text></g><g><title>monomorphization_collector (12,860,391 samples, 1.17%)</title><rect x="32.1130%" y="149" width="1.1665%" height="15" fill="rgb(210,229,1)"/><text x="32.3630%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (1,248,134 samples, 0.11%)</title><rect x="33.2799%" y="133" width="0.1132%" height="15" fill="rgb(222,148,37)"/><text x="33.5299%" y="143.50"></text></g><g><title>symbol_name (1,124,463 samples, 0.10%)</title><rect x="33.2911%" y="117" width="0.1020%" height="15" fill="rgb(234,67,33)"/><text x="33.5411%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (14,612,311 samples, 1.33%)</title><rect x="32.1097%" y="165" width="1.3254%" height="15" fill="rgb(247,98,35)"/><text x="32.3597%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,714,829 samples, 0.16%)</title><rect x="33.2795%" y="149" width="0.1555%" height="15" fill="rgb(247,138,52)"/><text x="33.5295%" y="159.50"></text></g><g><title>codegen_crate (48,570,295 samples, 4.41%)</title><rect x="29.0351%" y="181" width="4.4054%" height="15" fill="rgb(213,79,30)"/><text x="29.2851%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (269,121,555 samples, 24.41%)</title><rect x="33.4405%" y="181" width="24.4099%" height="15" fill="rgb(246,177,23)"/><text x="33.6905%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (246,483,678 samples, 22.36%)</title><rect x="35.4938%" y="165" width="22.3566%" height="15" fill="rgb(230,62,27)"/><text x="35.7438%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (102,352,272 samples, 9.28%)</title><rect x="58.9029%" y="165" width="9.2836%" height="15" fill="rgb(216,154,8)"/><text x="59.1529%" y="175.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (136,902,513 samples, 12.42%)</title><rect x="68.1865%" y="165" width="12.4174%" height="15" fill="rgb(244,35,45)"/><text x="68.4365%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (134,771,000 samples, 12.22%)</title><rect x="68.3798%" y="149" width="12.2240%" height="15" fill="rgb(251,115,12)"/><text x="68.6298%" y="159.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (10,060,542 samples, 0.91%)</title><rect x="80.6039%" y="165" width="0.9125%" height="15" fill="rgb(240,54,50)"/><text x="80.8539%" y="175.50"></text></g><g><title>codegen_module_perform_lto (261,523,444 samples, 23.72%)</title><rect x="57.8505%" y="181" width="23.7208%" height="15" fill="rgb(233,84,52)"/><text x="58.1005%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,550,048 samples, 0.23%)</title><rect x="84.9122%" y="133" width="0.2313%" height="15" fill="rgb(207,117,47)"/><text x="85.1622%" y="143.50"></text></g><g><title>macro_expand_crate (39,310,631 samples, 3.57%)</title><rect x="81.6361%" y="165" width="3.5656%" height="15" fill="rgb(249,43,39)"/><text x="81.8861%" y="175.50">macr..</text></g><g><title>expand_crate (39,287,591 samples, 3.56%)</title><rect x="81.6382%" y="149" width="3.5635%" height="15" fill="rgb(209,38,44)"/><text x="81.8882%" y="159.50">expa..</text></g><g><title>late_resolve_crate (4,962,295 samples, 0.45%)</title><rect x="85.2710%" y="149" width="0.4501%" height="15" fill="rgb(236,212,23)"/><text x="85.5210%" y="159.50"></text></g><g><title>configure_and_expand (45,992,376 samples, 4.17%)</title><rect x="81.5713%" y="181" width="4.1716%" height="15" fill="rgb(242,79,21)"/><text x="81.8213%" y="191.50">confi..</text></g><g><title>resolve_crate (5,624,622 samples, 0.51%)</title><rect x="85.2327%" y="165" width="0.5102%" height="15" fill="rgb(211,96,35)"/><text x="85.4827%" y="175.50"></text></g><g><title>early_lint_checks (3,133,384 samples, 0.28%)</title><rect x="85.7779%" y="181" width="0.2842%" height="15" fill="rgb(253,215,40)"/><text x="86.0279%" y="191.50"></text></g><g><title>free_global_ctxt (9,822,728 samples, 0.89%)</title><rect x="86.0621%" y="181" width="0.8909%" height="15" fill="rgb(211,81,21)"/><text x="86.3121%" y="191.50"></text></g><g><title>layout_of (1,820,221 samples, 0.17%)</title><rect x="88.2117%" y="149" width="0.1651%" height="15" fill="rgb(208,190,38)"/><text x="88.4617%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,005,983 samples, 1.54%)</title><rect x="88.3768%" y="149" width="1.5425%" height="15" fill="rgb(235,213,38)"/><text x="88.6268%" y="159.50"></text></g><g><title>optimized_mir (28,485,019 samples, 2.58%)</title><rect x="87.3442%" y="165" width="2.5837%" height="15" fill="rgb(237,122,38)"/><text x="87.5942%" y="175.50">op..</text></g><g><title>generate_crate_metadata (33,267,546 samples, 3.02%)</title><rect x="86.9531%" y="181" width="3.0174%" height="15" fill="rgb(244,218,35)"/><text x="87.2031%" y="191.50">gen..</text></g><g><title>hir_lowering (6,148,358 samples, 0.56%)</title><rect x="89.9705%" y="181" width="0.5577%" height="15" fill="rgb(240,68,47)"/><text x="90.2205%" y="191.50"></text></g><g><title>finish_ongoing_codegen (91,857,600 samples, 8.33%)</title><rect x="90.5300%" y="165" width="8.3317%" height="15" fill="rgb(210,16,53)"/><text x="90.7800%" y="175.50">finish_ongoi..</text></g><g><title>link_crate (3,977,114 samples, 0.36%)</title><rect x="98.8617%" y="165" width="0.3607%" height="15" fill="rgb(235,124,12)"/><text x="99.1117%" y="175.50"></text></g><g><title>link_binary (3,682,860 samples, 0.33%)</title><rect x="98.8884%" y="149" width="0.3340%" height="15" fill="rgb(224,169,11)"/><text x="99.1384%" y="159.50"></text></g><g><title>link_rlib (2,666,259 samples, 0.24%)</title><rect x="98.9806%" y="133" width="0.2418%" height="15" fill="rgb(250,166,2)"/><text x="99.2306%" y="143.50"></text></g><g><title>link (95,869,524 samples, 8.70%)</title><rect x="90.5282%" y="181" width="8.6956%" height="15" fill="rgb(242,216,29)"/><text x="90.7782%" y="191.50">link</text></g><g><title>parse_crate (5,316,189 samples, 0.48%)</title><rect x="99.2238%" y="181" width="0.4822%" height="15" fill="rgb(230,116,27)"/><text x="99.4738%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,321,885 samples, 0.21%)</title><rect x="99.7272%" y="181" width="0.2106%" height="15" fill="rgb(228,99,48)"/><text x="99.9772%" y="191.50"></text></g><g><title>all (1,102,507,685 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,102,507,685 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>