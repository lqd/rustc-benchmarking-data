<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (29,597,174 samples, 18.77%)</title><rect x="0.3673%" y="149" width="18.7664%" height="15" fill="rgb(227,0,7)"/><text x="0.6173%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (255,453 samples, 0.16%)</title><rect x="18.9717%" y="133" width="0.1620%" height="15" fill="rgb(217,0,24)"/><text x="19.2217%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (240,713 samples, 0.15%)</title><rect x="18.9811%" y="117" width="0.1526%" height="15" fill="rgb(221,193,54)"/><text x="19.2311%" y="127.50"></text></g><g><title>needs_drop_raw (307,692 samples, 0.20%)</title><rect x="21.6634%" y="37" width="0.1951%" height="15" fill="rgb(248,212,6)"/><text x="21.9134%" y="47.50"></text></g><g><title>thir_body (236,511 samples, 0.15%)</title><rect x="21.9060%" y="37" width="0.1500%" height="15" fill="rgb(208,68,35)"/><text x="22.1560%" y="47.50"></text></g><g><title>mir_const (1,888,611 samples, 1.20%)</title><rect x="20.8626%" y="85" width="1.1975%" height="15" fill="rgb(232,128,0)"/><text x="21.1126%" y="95.50"></text></g><g><title>unsafety_check_result (1,594,627 samples, 1.01%)</title><rect x="21.0490%" y="69" width="1.0111%" height="15" fill="rgb(207,160,47)"/><text x="21.2990%" y="79.50"></text></g><g><title>mir_built (1,322,205 samples, 0.84%)</title><rect x="21.2217%" y="53" width="0.8384%" height="15" fill="rgb(228,23,34)"/><text x="21.4717%" y="63.50"></text></g><g><title>mir_promoted (2,136,233 samples, 1.35%)</title><rect x="20.7114%" y="101" width="1.3545%" height="15" fill="rgb(218,30,26)"/><text x="20.9614%" y="111.50"></text></g><g><title>type_op_normalize_fn_sig (277,234 samples, 0.18%)</title><rect x="22.0802%" y="101" width="0.1758%" height="15" fill="rgb(220,122,19)"/><text x="22.3302%" y="111.50"></text></g><g><title>type_op_prove_predicate (306,083 samples, 0.19%)</title><rect x="22.2667%" y="101" width="0.1941%" height="15" fill="rgb(250,228,42)"/><text x="22.5167%" y="111.50"></text></g><g><title>MIR_borrow_checking (5,136,348 samples, 3.26%)</title><rect x="19.2050%" y="133" width="3.2568%" height="15" fill="rgb(240,193,28)"/><text x="19.4550%" y="143.50">MIR..</text></g><g><title>mir_borrowck (5,121,218 samples, 3.25%)</title><rect x="19.2146%" y="117" width="3.2472%" height="15" fill="rgb(216,20,37)"/><text x="19.4646%" y="127.50">mir..</text></g><g><title>codegen_fn_attrs (226,173 samples, 0.14%)</title><rect x="22.5731%" y="101" width="0.1434%" height="15" fill="rgb(206,188,39)"/><text x="22.8231%" y="111.50"></text></g><g><title>should_inherit_track_caller (199,643 samples, 0.13%)</title><rect x="22.5899%" y="85" width="0.1266%" height="15" fill="rgb(217,207,13)"/><text x="22.8399%" y="95.50"></text></g><g><title>check_mod_attrs (296,633 samples, 0.19%)</title><rect x="22.5285%" y="117" width="0.1881%" height="15" fill="rgb(231,73,38)"/><text x="22.7785%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (215,443 samples, 0.14%)</title><rect x="22.7475%" y="117" width="0.1366%" height="15" fill="rgb(225,20,46)"/><text x="22.9975%" y="127.50"></text></g><g><title>misc_checking_1 (602,697 samples, 0.38%)</title><rect x="22.5184%" y="133" width="0.3821%" height="15" fill="rgb(210,31,41)"/><text x="22.7684%" y="143.50"></text></g><g><title>misc_checking_2 (324,904 samples, 0.21%)</title><rect x="22.9006%" y="133" width="0.2060%" height="15" fill="rgb(221,200,47)"/><text x="23.1506%" y="143.50"></text></g><g><title>match_checking (201,523 samples, 0.13%)</title><rect x="22.9788%" y="117" width="0.1278%" height="15" fill="rgb(226,26,5)"/><text x="23.2288%" y="127.50"></text></g><g><title>check_match (195,293 samples, 0.12%)</title><rect x="22.9828%" y="101" width="0.1238%" height="15" fill="rgb(249,33,26)"/><text x="23.2328%" y="111.50"></text></g><g><title>death_checking (185,573 samples, 0.12%)</title><rect x="23.1430%" y="117" width="0.1177%" height="15" fill="rgb(235,183,28)"/><text x="23.3930%" y="127.50"></text></g><g><title>crate_lints (1,593,758 samples, 1.01%)</title><rect x="23.2617%" y="101" width="1.0105%" height="15" fill="rgb(221,5,38)"/><text x="23.5117%" y="111.50"></text></g><g><title>type_of (1,067,051 samples, 0.68%)</title><rect x="23.5956%" y="85" width="0.6766%" height="15" fill="rgb(247,18,42)"/><text x="23.8456%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (826,688 samples, 0.52%)</title><rect x="23.7480%" y="69" width="0.5242%" height="15" fill="rgb(241,131,45)"/><text x="23.9980%" y="79.50"></text></g><g><title>lint_checking (1,696,219 samples, 1.08%)</title><rect x="23.2607%" y="117" width="1.0755%" height="15" fill="rgb(249,31,29)"/><text x="23.5107%" y="127.50"></text></g><g><title>privacy_checking_modules (194,792 samples, 0.12%)</title><rect x="24.3786%" y="117" width="0.1235%" height="15" fill="rgb(225,111,53)"/><text x="24.6286%" y="127.50"></text></g><g><title>check_mod_privacy (193,442 samples, 0.12%)</title><rect x="24.3795%" y="101" width="0.1227%" height="15" fill="rgb(238,160,17)"/><text x="24.6295%" y="111.50"></text></g><g><title>misc_checking_3 (2,214,825 samples, 1.40%)</title><rect x="23.1066%" y="133" width="1.4043%" height="15" fill="rgb(214,148,48)"/><text x="23.3566%" y="143.50"></text></g><g><title>impl_trait_ref (164,603 samples, 0.10%)</title><rect x="24.7188%" y="37" width="0.1044%" height="15" fill="rgb(232,36,49)"/><text x="24.9688%" y="47.50"></text></g><g><title>adt_destructor (314,793 samples, 0.20%)</title><rect x="24.6389%" y="85" width="0.1996%" height="15" fill="rgb(209,103,24)"/><text x="24.8889%" y="95.50"></text></g><g><title>coherent_trait (312,003 samples, 0.20%)</title><rect x="24.6406%" y="69" width="0.1978%" height="15" fill="rgb(229,88,8)"/><text x="24.8906%" y="79.50"></text></g><g><title>specialization_graph_of (310,683 samples, 0.20%)</title><rect x="24.6415%" y="53" width="0.1970%" height="15" fill="rgb(213,181,19)"/><text x="24.8915%" y="63.50"></text></g><g><title>impl_parent (2,281,562 samples, 1.45%)</title><rect x="27.4473%" y="69" width="1.4466%" height="15" fill="rgb(254,191,54)"/><text x="27.6973%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,353,080 samples, 0.86%)</title><rect x="28.0360%" y="53" width="0.8579%" height="15" fill="rgb(241,83,37)"/><text x="28.2860%" y="63.50"></text></g><g><title>impl_trait_ref (4,925,511 samples, 3.12%)</title><rect x="28.8939%" y="69" width="3.1231%" height="15" fill="rgb(233,36,39)"/><text x="29.1439%" y="79.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,979,639 samples, 2.52%)</title><rect x="29.4937%" y="53" width="2.5233%" height="15" fill="rgb(226,3,54)"/><text x="29.7437%" y="63.50">me..</text></g><g><title>coherent_trait (12,475,491 samples, 7.91%)</title><rect x="24.6177%" y="101" width="7.9102%" height="15" fill="rgb(245,192,40)"/><text x="24.8677%" y="111.50">coherent_tr..</text></g><g><title>specialization_graph_of (12,047,056 samples, 7.64%)</title><rect x="24.8894%" y="85" width="7.6386%" height="15" fill="rgb(238,167,29)"/><text x="25.1394%" y="95.50">specializa..</text></g><g><title>trait_impls_of (804,170 samples, 0.51%)</title><rect x="32.0181%" y="69" width="0.5099%" height="15" fill="rgb(232,182,51)"/><text x="32.2681%" y="79.50"></text></g><g><title>implementations_of_trait (199,000 samples, 0.13%)</title><rect x="32.4018%" y="53" width="0.1262%" height="15" fill="rgb(231,60,39)"/><text x="32.6518%" y="63.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (163,950 samples, 0.10%)</title><rect x="32.4240%" y="37" width="0.1040%" height="15" fill="rgb(208,69,12)"/><text x="32.6740%" y="47.50"></text></g><g><title>coherence_checking (12,531,852 samples, 7.95%)</title><rect x="24.6062%" y="117" width="7.9460%" height="15" fill="rgb(235,93,37)"/><text x="24.8562%" y="127.50">coherence_c..</text></g><g><title>associated_item (179,911 samples, 0.11%)</title><rect x="35.4083%" y="53" width="0.1141%" height="15" fill="rgb(213,116,39)"/><text x="35.6583%" y="63.50"></text></g><g><title>associated_items (254,711 samples, 0.16%)</title><rect x="35.3683%" y="69" width="0.1615%" height="15" fill="rgb(222,207,29)"/><text x="35.6183%" y="79.50"></text></g><g><title>dropck_outlives (219,143 samples, 0.14%)</title><rect x="35.5677%" y="69" width="0.1389%" height="15" fill="rgb(206,96,30)"/><text x="35.8177%" y="79.50"></text></g><g><title>adt_dtorck_constraint (160,033 samples, 0.10%)</title><rect x="35.6052%" y="53" width="0.1015%" height="15" fill="rgb(218,138,4)"/><text x="35.8552%" y="63.50"></text></g><g><title>adt_sized_constraint (174,631 samples, 0.11%)</title><rect x="35.9324%" y="53" width="0.1107%" height="15" fill="rgb(250,191,14)"/><text x="36.1824%" y="63.50"></text></g><g><title>evaluate_obligation (958,568 samples, 0.61%)</title><rect x="35.7066%" y="69" width="0.6078%" height="15" fill="rgb(239,60,40)"/><text x="35.9566%" y="79.50"></text></g><g><title>trait_impls_of (254,323 samples, 0.16%)</title><rect x="36.1532%" y="53" width="0.1613%" height="15" fill="rgb(206,27,48)"/><text x="36.4032%" y="63.50"></text></g><g><title>predicates_of (162,993 samples, 0.10%)</title><rect x="36.6405%" y="69" width="0.1033%" height="15" fill="rgb(225,35,8)"/><text x="36.8905%" y="79.50"></text></g><g><title>item_bodies_checking (6,679,146 samples, 4.23%)</title><rect x="32.5615%" y="117" width="4.2350%" height="15" fill="rgb(250,213,24)"/><text x="32.8115%" y="127.50">item_..</text></g><g><title>typeck_item_bodies (6,676,415 samples, 4.23%)</title><rect x="32.5632%" y="101" width="4.2333%" height="15" fill="rgb(247,123,22)"/><text x="32.8132%" y="111.50">typec..</text></g><g><title>typeck (6,664,855 samples, 4.23%)</title><rect x="32.5706%" y="85" width="4.2259%" height="15" fill="rgb(231,138,38)"/><text x="32.8206%" y="95.50">typeck</text></g><g><title>item_types_checking (281,343 samples, 0.18%)</title><rect x="36.7965%" y="117" width="0.1784%" height="15" fill="rgb(231,145,46)"/><text x="37.0465%" y="127.50"></text></g><g><title>check_mod_item_types (279,233 samples, 0.18%)</title><rect x="36.7978%" y="101" width="0.1771%" height="15" fill="rgb(251,118,11)"/><text x="37.0478%" y="111.50"></text></g><g><title>fn_sig (187,521 samples, 0.12%)</title><rect x="37.0344%" y="85" width="0.1189%" height="15" fill="rgb(217,147,25)"/><text x="37.2844%" y="95.50"></text></g><g><title>type_collecting (654,417 samples, 0.41%)</title><rect x="36.9755%" y="117" width="0.4149%" height="15" fill="rgb(247,81,37)"/><text x="37.2255%" y="127.50"></text></g><g><title>collect_mod_item_types (647,357 samples, 0.41%)</title><rect x="36.9800%" y="101" width="0.4105%" height="15" fill="rgb(209,12,38)"/><text x="37.2300%" y="111.50"></text></g><g><title>predicates_of (261,723 samples, 0.17%)</title><rect x="37.7995%" y="85" width="0.1659%" height="15" fill="rgb(227,1,9)"/><text x="38.0495%" y="95.50"></text></g><g><title>predicates_defined_on (239,293 samples, 0.15%)</title><rect x="37.8138%" y="69" width="0.1517%" height="15" fill="rgb(248,47,43)"/><text x="38.0638%" y="79.50"></text></g><g><title>check_impl_item_well_formed (979,061 samples, 0.62%)</title><rect x="37.4163%" y="101" width="0.6208%" height="15" fill="rgb(221,10,30)"/><text x="37.6663%" y="111.50"></text></g><g><title>analysis (30,342,803 samples, 19.24%)</title><rect x="19.1337%" y="149" width="19.2392%" height="15" fill="rgb(210,229,1)"/><text x="19.3837%" y="159.50">analysis</text></g><g><title>type_check_crate (21,862,217 samples, 13.86%)</title><rect x="24.5109%" y="133" width="13.8620%" height="15" fill="rgb(222,148,37)"/><text x="24.7609%" y="143.50">type_check_crate</text></g><g><title>wf_checking (1,548,688 samples, 0.98%)</title><rect x="37.3909%" y="117" width="0.9820%" height="15" fill="rgb(234,67,33)"/><text x="37.6409%" y="127.50"></text></g><g><title>check_item_well_formed (529,566 samples, 0.34%)</title><rect x="38.0371%" y="101" width="0.3358%" height="15" fill="rgb(247,98,35)"/><text x="38.2871%" y="111.50"></text></g><g><title>fn_abi_of_instance (542,846 samples, 0.34%)</title><rect x="39.7446%" y="117" width="0.3442%" height="15" fill="rgb(247,138,52)"/><text x="39.9946%" y="127.50"></text></g><g><title>codegen_module (1,883,272 samples, 1.19%)</title><rect x="38.9249%" y="133" width="1.1941%" height="15" fill="rgb(213,79,30)"/><text x="39.1749%" y="143.50"></text></g><g><title>optimized_mir (564,867 samples, 0.36%)</title><rect x="40.3018%" y="85" width="0.3582%" height="15" fill="rgb(246,177,23)"/><text x="40.5518%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (200,672 samples, 0.13%)</title><rect x="40.5327%" y="69" width="0.1272%" height="15" fill="rgb(230,62,27)"/><text x="40.7827%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (297,794 samples, 0.19%)</title><rect x="40.6919%" y="69" width="0.1888%" height="15" fill="rgb(216,154,8)"/><text x="40.9419%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (1,236,344 samples, 0.78%)</title><rect x="40.1414%" y="101" width="0.7839%" height="15" fill="rgb(244,35,45)"/><text x="40.3914%" y="111.50"></text></g><g><title>resolve_instance (418,505 samples, 0.27%)</title><rect x="40.6599%" y="85" width="0.2654%" height="15" fill="rgb(251,115,12)"/><text x="40.9099%" y="95.50"></text></g><g><title>monomorphization_collector (1,264,104 samples, 0.80%)</title><rect x="40.1392%" y="117" width="0.8015%" height="15" fill="rgb(240,54,50)"/><text x="40.3892%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (1,427,276 samples, 0.90%)</title><rect x="40.1195%" y="133" width="0.9050%" height="15" fill="rgb(233,84,52)"/><text x="40.3695%" y="143.50"></text></g><g><title>codegen_crate (4,237,228 samples, 2.69%)</title><rect x="38.3803%" y="149" width="2.6867%" height="15" fill="rgb(207,117,47)"/><text x="38.6303%" y="159.50">co..</text></g><g><title>codegen_module_optimize (16,163,314 samples, 10.25%)</title><rect x="41.0670%" y="149" width="10.2485%" height="15" fill="rgb(249,43,39)"/><text x="41.3170%" y="159.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (14,465,074 samples, 9.17%)</title><rect x="42.1438%" y="133" width="9.1717%" height="15" fill="rgb(209,38,44)"/><text x="42.3938%" y="143.50">LLVM_module_o..</text></g><g><title>LLVM_lto_optimize (7,761,557 samples, 4.92%)</title><rect x="51.9496%" y="133" width="4.9213%" height="15" fill="rgb(236,212,23)"/><text x="52.1996%" y="143.50">LLVM_l..</text></g><g><title>LLVM_module_codegen (17,276,616 samples, 10.95%)</title><rect x="56.8709%" y="133" width="10.9544%" height="15" fill="rgb(242,79,21)"/><text x="57.1209%" y="143.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (17,016,103 samples, 10.79%)</title><rect x="57.0361%" y="117" width="10.7892%" height="15" fill="rgb(211,96,35)"/><text x="57.2861%" y="127.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (315,214 samples, 0.20%)</title><rect x="67.8253%" y="133" width="0.1999%" height="15" fill="rgb(253,215,40)"/><text x="68.0753%" y="143.50"></text></g><g><title>codegen_module_perform_lto (26,440,790 samples, 16.77%)</title><rect x="51.3155%" y="149" width="16.7651%" height="15" fill="rgb(211,81,21)"/><text x="51.5655%" y="159.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (12,790,165 samples, 8.11%)</title><rect x="68.3496%" y="133" width="8.1097%" height="15" fill="rgb(208,190,38)"/><text x="68.5996%" y="143.50">macro_expan..</text></g><g><title>expand_crate (12,769,455 samples, 8.10%)</title><rect x="68.3628%" y="117" width="8.0966%" height="15" fill="rgb(235,213,38)"/><text x="68.6128%" y="127.50">expand_crate</text></g><g><title>metadata_register_crate (2,711,932 samples, 1.72%)</title><rect x="74.7399%" y="101" width="1.7195%" height="15" fill="rgb(237,122,38)"/><text x="74.9899%" y="111.50"></text></g><g><title>metadata_register_crate (963,170 samples, 0.61%)</title><rect x="75.8487%" y="85" width="0.6107%" height="15" fill="rgb(244,218,35)"/><text x="76.0987%" y="95.50"></text></g><g><title>finalize_macro_resolutions (363,684 samples, 0.23%)</title><rect x="76.5578%" y="117" width="0.2306%" height="15" fill="rgb(240,68,47)"/><text x="76.8078%" y="127.50"></text></g><g><title>late_resolve_crate (1,244,204 samples, 0.79%)</title><rect x="76.7884%" y="117" width="0.7889%" height="15" fill="rgb(210,16,53)"/><text x="77.0384%" y="127.50"></text></g><g><title>configure_and_expand (15,015,820 samples, 9.52%)</title><rect x="68.0806%" y="149" width="9.5209%" height="15" fill="rgb(235,124,12)"/><text x="68.3306%" y="159.50">configure_and_..</text></g><g><title>resolve_crate (1,671,759 samples, 1.06%)</title><rect x="76.5415%" y="133" width="1.0600%" height="15" fill="rgb(224,169,11)"/><text x="76.7915%" y="143.50"></text></g><g><title>free_global_ctxt (3,252,367 samples, 2.06%)</title><rect x="77.7262%" y="149" width="2.0622%" height="15" fill="rgb(250,166,2)"/><text x="77.9762%" y="159.50">f..</text></g><g><title>layout_of (209,442 samples, 0.13%)</title><rect x="80.5744%" y="117" width="0.1328%" height="15" fill="rgb(242,216,29)"/><text x="80.8244%" y="127.50"></text></g><g><title>optimized_mir (1,364,577 samples, 0.87%)</title><rect x="80.2284%" y="133" width="0.8652%" height="15" fill="rgb(230,116,27)"/><text x="80.4784%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (609,438 samples, 0.39%)</title><rect x="80.7072%" y="117" width="0.3864%" height="15" fill="rgb(228,99,48)"/><text x="80.9572%" y="127.50"></text></g><g><title>generate_crate_metadata (2,127,075 samples, 1.35%)</title><rect x="79.7884%" y="149" width="1.3487%" height="15" fill="rgb(253,11,6)"/><text x="80.0384%" y="159.50"></text></g><g><title>hir_lowering (607,456 samples, 0.39%)</title><rect x="81.1371%" y="149" width="0.3852%" height="15" fill="rgb(247,143,39)"/><text x="81.3871%" y="159.50"></text></g><g><title>finish_ongoing_codegen (24,922,852 samples, 15.80%)</title><rect x="81.5349%" y="133" width="15.8026%" height="15" fill="rgb(236,97,10)"/><text x="81.7849%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,131,783 samples, 0.72%)</title><rect x="97.3375%" y="133" width="0.7176%" height="15" fill="rgb(233,208,19)"/><text x="97.5875%" y="143.50"></text></g><g><title>link_binary (1,114,593 samples, 0.71%)</title><rect x="97.3484%" y="117" width="0.7067%" height="15" fill="rgb(216,164,2)"/><text x="97.5984%" y="127.50"></text></g><g><title>link_rlib (688,388 samples, 0.44%)</title><rect x="97.6186%" y="101" width="0.4365%" height="15" fill="rgb(220,129,5)"/><text x="97.8686%" y="111.50"></text></g><g><title>link (26,087,795 samples, 16.54%)</title><rect x="81.5223%" y="149" width="16.5412%" height="15" fill="rgb(242,17,10)"/><text x="81.7723%" y="159.50">link</text></g><g><title>parse_crate (1,805,181 samples, 1.14%)</title><rect x="98.0635%" y="149" width="1.1446%" height="15" fill="rgb(242,107,0)"/><text x="98.3135%" y="159.50"></text></g><g><title>prepare_outputs (200,913 samples, 0.13%)</title><rect x="99.2143%" y="149" width="0.1274%" height="15" fill="rgb(251,28,31)"/><text x="99.4643%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (614,867 samples, 0.39%)</title><rect x="99.3417%" y="149" width="0.3899%" height="15" fill="rgb(233,223,10)"/><text x="99.5917%" y="159.50"></text></g><g><title>all (157,713,637 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (157,713,637 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (343,284 samples, 0.22%)</title><rect x="99.7823%" y="149" width="0.2177%" height="15" fill="rgb(244,5,23)"/><text x="100.0323%" y="159.50"></text></g></svg></svg>