<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (24,952,739 samples, 4.70%)</title><rect x="0.1312%" y="181" width="4.6952%" height="15" fill="rgb(227,0,7)"/><text x="0.3812%" y="191.50">LLVM_..</text></g><g><title>param_env (696,673 samples, 0.13%)</title><rect x="15.3856%" y="101" width="0.1311%" height="15" fill="rgb(217,0,24)"/><text x="15.6356%" y="111.50"></text></g><g><title>codegen_fn_attrs (695,737 samples, 0.13%)</title><rect x="15.8628%" y="85" width="0.1309%" height="15" fill="rgb(221,193,54)"/><text x="16.1128%" y="95.50"></text></g><g><title>needs_drop_raw (4,406,994 samples, 0.83%)</title><rect x="18.0032%" y="69" width="0.8292%" height="15" fill="rgb(248,212,6)"/><text x="18.2532%" y="79.50"></text></g><g><title>is_copy_raw (3,309,540 samples, 0.62%)</title><rect x="18.2097%" y="53" width="0.6227%" height="15" fill="rgb(208,68,35)"/><text x="18.4597%" y="63.50"></text></g><g><title>evaluate_obligation (2,555,533 samples, 0.48%)</title><rect x="18.3516%" y="37" width="0.4809%" height="15" fill="rgb(232,128,0)"/><text x="18.6016%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (3,056,854 samples, 0.58%)</title><rect x="19.0571%" y="53" width="0.5752%" height="15" fill="rgb(207,160,47)"/><text x="19.3071%" y="63.50"></text></g><g><title>resolve_instance (4,862,923 samples, 0.92%)</title><rect x="18.8324%" y="69" width="0.9150%" height="15" fill="rgb(228,23,34)"/><text x="19.0824%" y="79.50"></text></g><g><title>thir_body (3,914,990 samples, 0.74%)</title><rect x="19.7747%" y="69" width="0.7367%" height="15" fill="rgb(218,30,26)"/><text x="20.0247%" y="79.50"></text></g><g><title>mir_const (30,654,881 samples, 5.77%)</title><rect x="14.7685%" y="117" width="5.7681%" height="15" fill="rgb(220,122,19)"/><text x="15.0185%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (26,678,324 samples, 5.02%)</title><rect x="15.5167%" y="101" width="5.0199%" height="15" fill="rgb(250,228,42)"/><text x="15.7667%" y="111.50">unsafe..</text></g><g><title>mir_built (24,143,186 samples, 4.54%)</title><rect x="15.9937%" y="85" width="4.5429%" height="15" fill="rgb(240,193,28)"/><text x="16.2437%" y="95.50">mir_b..</text></g><g><title>mir_promoted (33,825,434 samples, 6.36%)</title><rect x="14.2120%" y="133" width="6.3647%" height="15" fill="rgb(216,20,37)"/><text x="14.4620%" y="143.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (2,459,473 samples, 0.46%)</title><rect x="20.5767%" y="133" width="0.4628%" height="15" fill="rgb(206,188,39)"/><text x="20.8267%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,571,321 samples, 0.48%)</title><rect x="21.0395%" y="133" width="0.4838%" height="15" fill="rgb(217,207,13)"/><text x="21.2895%" y="143.50"></text></g><g><title>normalize_projection_ty (1,458,766 samples, 0.27%)</title><rect x="21.2489%" y="117" width="0.2745%" height="15" fill="rgb(231,73,38)"/><text x="21.4989%" y="127.50"></text></g><g><title>type_op_normalize_predicate (2,356,886 samples, 0.44%)</title><rect x="21.5234%" y="133" width="0.4435%" height="15" fill="rgb(225,20,46)"/><text x="21.7734%" y="143.50"></text></g><g><title>normalize_projection_ty (1,460,246 samples, 0.27%)</title><rect x="21.6921%" y="117" width="0.2748%" height="15" fill="rgb(210,31,41)"/><text x="21.9421%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,053,362 samples, 0.20%)</title><rect x="21.9668%" y="133" width="0.1982%" height="15" fill="rgb(221,200,47)"/><text x="22.2168%" y="143.50"></text></g><g><title>normalize_projection_ty (710,799 samples, 0.13%)</title><rect x="22.0313%" y="117" width="0.1337%" height="15" fill="rgb(226,26,5)"/><text x="22.2813%" y="127.50"></text></g><g><title>type_op_prove_predicate (15,465,633 samples, 2.91%)</title><rect x="22.1650%" y="133" width="2.9101%" height="15" fill="rgb(249,33,26)"/><text x="22.4150%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (106,822,875 samples, 20.10%)</title><rect x="4.9774%" y="165" width="20.1002%" height="15" fill="rgb(235,183,28)"/><text x="5.2274%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (106,238,183 samples, 19.99%)</title><rect x="5.0874%" y="149" width="19.9902%" height="15" fill="rgb(221,5,38)"/><text x="5.3374%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (593,916 samples, 0.11%)</title><rect x="25.1084%" y="165" width="0.1118%" height="15" fill="rgb(247,18,42)"/><text x="25.3584%" y="175.50"></text></g><g><title>codegen_fn_attrs (580,136 samples, 0.11%)</title><rect x="25.4403%" y="101" width="0.1092%" height="15" fill="rgb(241,131,45)"/><text x="25.6903%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,121,521 samples, 0.21%)</title><rect x="25.3441%" y="133" width="0.2110%" height="15" fill="rgb(249,31,29)"/><text x="25.5941%" y="143.50"></text></g><g><title>should_inherit_track_caller (955,148 samples, 0.18%)</title><rect x="25.3754%" y="117" width="0.1797%" height="15" fill="rgb(225,111,53)"/><text x="25.6254%" y="127.50"></text></g><g><title>check_mod_attrs (1,752,620 samples, 0.33%)</title><rect x="25.2254%" y="149" width="0.3298%" height="15" fill="rgb(238,160,17)"/><text x="25.4754%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,427,407 samples, 0.27%)</title><rect x="25.6807%" y="149" width="0.2686%" height="15" fill="rgb(214,148,48)"/><text x="25.9307%" y="159.50"></text></g><g><title>misc_checking_1 (3,968,184 samples, 0.75%)</title><rect x="25.2202%" y="165" width="0.7467%" height="15" fill="rgb(232,36,49)"/><text x="25.4702%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (1,745,399 samples, 0.33%)</title><rect x="25.9672%" y="149" width="0.3284%" height="15" fill="rgb(209,103,24)"/><text x="26.2172%" y="159.50"></text></g><g><title>check_mod_liveness (1,465,306 samples, 0.28%)</title><rect x="26.0199%" y="133" width="0.2757%" height="15" fill="rgb(229,88,8)"/><text x="26.2699%" y="143.50"></text></g><g><title>misc_checking_2 (3,519,589 samples, 0.66%)</title><rect x="25.9668%" y="165" width="0.6623%" height="15" fill="rgb(213,181,19)"/><text x="26.2168%" y="175.50"></text></g><g><title>match_checking (1,772,310 samples, 0.33%)</title><rect x="26.2956%" y="149" width="0.3335%" height="15" fill="rgb(254,191,54)"/><text x="26.5456%" y="159.50"></text></g><g><title>check_match (1,635,368 samples, 0.31%)</title><rect x="26.3214%" y="133" width="0.3077%" height="15" fill="rgb(241,83,37)"/><text x="26.5714%" y="143.50"></text></g><g><title>check_private_in_public (757,439 samples, 0.14%)</title><rect x="26.6314%" y="149" width="0.1425%" height="15" fill="rgb(233,36,39)"/><text x="26.8814%" y="159.50"></text></g><g><title>death_checking (1,150,382 samples, 0.22%)</title><rect x="26.7740%" y="149" width="0.2165%" height="15" fill="rgb(226,3,54)"/><text x="27.0240%" y="159.50"></text></g><g><title>crate_lints (2,927,753 samples, 0.55%)</title><rect x="26.9907%" y="133" width="0.5509%" height="15" fill="rgb(245,192,40)"/><text x="27.2407%" y="143.50"></text></g><g><title>type_of (1,139,925 samples, 0.21%)</title><rect x="27.3271%" y="117" width="0.2145%" height="15" fill="rgb(238,167,29)"/><text x="27.5771%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (909,763 samples, 0.17%)</title><rect x="27.3704%" y="101" width="0.1712%" height="15" fill="rgb(232,182,51)"/><text x="27.6204%" y="111.50"></text></g><g><title>lint_checking (4,251,287 samples, 0.80%)</title><rect x="26.9904%" y="149" width="0.7999%" height="15" fill="rgb(231,60,39)"/><text x="27.2404%" y="159.50"></text></g><g><title>module_lints (1,321,864 samples, 0.25%)</title><rect x="27.5416%" y="133" width="0.2487%" height="15" fill="rgb(208,69,12)"/><text x="27.7916%" y="143.50"></text></g><g><title>lint_mod (1,314,824 samples, 0.25%)</title><rect x="27.5430%" y="117" width="0.2474%" height="15" fill="rgb(235,93,37)"/><text x="27.7930%" y="127.50"></text></g><g><title>privacy_access_levels (1,035,182 samples, 0.19%)</title><rect x="27.7904%" y="149" width="0.1948%" height="15" fill="rgb(213,116,39)"/><text x="28.0404%" y="159.50"></text></g><g><title>privacy_checking_modules (3,276,167 samples, 0.62%)</title><rect x="27.9851%" y="149" width="0.6165%" height="15" fill="rgb(222,207,29)"/><text x="28.2351%" y="159.50"></text></g><g><title>check_mod_privacy (3,269,977 samples, 0.62%)</title><rect x="27.9863%" y="133" width="0.6153%" height="15" fill="rgb(206,96,30)"/><text x="28.2363%" y="143.50"></text></g><g><title>misc_checking_3 (10,508,658 samples, 1.98%)</title><rect x="26.6291%" y="165" width="1.9774%" height="15" fill="rgb(218,138,4)"/><text x="26.8791%" y="175.50">m..</text></g><g><title>impl_parent (2,954,468 samples, 0.56%)</title><rect x="30.0897%" y="101" width="0.5559%" height="15" fill="rgb(250,191,14)"/><text x="30.3397%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,776,009 samples, 0.33%)</title><rect x="30.3115%" y="85" width="0.3342%" height="15" fill="rgb(239,60,40)"/><text x="30.5615%" y="95.50"></text></g><g><title>impl_trait_ref (6,397,593 samples, 1.20%)</title><rect x="30.6458%" y="101" width="1.2038%" height="15" fill="rgb(206,27,48)"/><text x="30.8958%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,232,777 samples, 0.98%)</title><rect x="30.8650%" y="85" width="0.9846%" height="15" fill="rgb(225,35,8)"/><text x="31.1150%" y="95.50"></text></g><g><title>item_attrs (1,205,851 samples, 0.23%)</title><rect x="31.8496%" y="101" width="0.2269%" height="15" fill="rgb(250,213,24)"/><text x="32.0996%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (964,358 samples, 0.18%)</title><rect x="31.8951%" y="85" width="0.1815%" height="15" fill="rgb(247,123,22)"/><text x="32.1451%" y="95.50"></text></g><g><title>predicates_of (762,381 samples, 0.14%)</title><rect x="32.0765%" y="101" width="0.1435%" height="15" fill="rgb(231,138,38)"/><text x="32.3265%" y="111.50"></text></g><g><title>trait_impls_of (999,171 samples, 0.19%)</title><rect x="32.2205%" y="101" width="0.1880%" height="15" fill="rgb(231,145,46)"/><text x="32.4705%" y="111.50"></text></g><g><title>coherent_trait (20,112,394 samples, 3.78%)</title><rect x="28.6550%" y="133" width="3.7844%" height="15" fill="rgb(251,118,11)"/><text x="28.9050%" y="143.50">cohe..</text></g><g><title>specialization_graph_of (19,476,638 samples, 3.66%)</title><rect x="28.7746%" y="117" width="3.6648%" height="15" fill="rgb(217,147,25)"/><text x="29.0246%" y="127.50">spec..</text></g><g><title>coherence_checking (20,302,616 samples, 3.82%)</title><rect x="28.6495%" y="149" width="3.8202%" height="15" fill="rgb(247,81,37)"/><text x="28.8995%" y="159.50">cohe..</text></g><g><title>associated_item (562,198 samples, 0.11%)</title><rect x="48.3537%" y="85" width="0.1058%" height="15" fill="rgb(209,12,38)"/><text x="48.6037%" y="95.50"></text></g><g><title>associated_items (826,023 samples, 0.16%)</title><rect x="48.3136%" y="101" width="0.1554%" height="15" fill="rgb(227,1,9)"/><text x="48.5636%" y="111.50"></text></g><g><title>dropck_outlives (1,433,190 samples, 0.27%)</title><rect x="48.4998%" y="101" width="0.2697%" height="15" fill="rgb(248,47,43)"/><text x="48.7498%" y="111.50"></text></g><g><title>generics_of (1,233,520 samples, 0.23%)</title><rect x="50.5556%" y="85" width="0.2321%" height="15" fill="rgb(221,10,30)"/><text x="50.8056%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (1,000,477 samples, 0.19%)</title><rect x="50.5994%" y="69" width="0.1883%" height="15" fill="rgb(210,229,1)"/><text x="50.8494%" y="79.50"></text></g><g><title>predicates_of (575,113 samples, 0.11%)</title><rect x="50.9060%" y="85" width="0.1082%" height="15" fill="rgb(222,148,37)"/><text x="51.1560%" y="95.50"></text></g><g><title>specializes (794,510 samples, 0.15%)</title><rect x="51.0142%" y="85" width="0.1495%" height="15" fill="rgb(234,67,33)"/><text x="51.2642%" y="95.50"></text></g><g><title>evaluate_obligation (13,284,021 samples, 2.50%)</title><rect x="48.7695%" y="101" width="2.4996%" height="15" fill="rgb(247,98,35)"/><text x="49.0195%" y="111.50">ev..</text></g><g><title>item_attrs (586,288 samples, 0.11%)</title><rect x="51.4770%" y="101" width="0.1103%" height="15" fill="rgb(247,138,52)"/><text x="51.7270%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (576,548 samples, 0.11%)</title><rect x="51.4788%" y="85" width="0.1085%" height="15" fill="rgb(213,79,30)"/><text x="51.7288%" y="95.50"></text></g><g><title>evaluate_obligation (1,226,692 samples, 0.23%)</title><rect x="51.8459%" y="85" width="0.2308%" height="15" fill="rgb(246,177,23)"/><text x="52.0959%" y="95.50"></text></g><g><title>method_autoderef_steps (2,452,071 samples, 0.46%)</title><rect x="51.6174%" y="101" width="0.4614%" height="15" fill="rgb(230,62,27)"/><text x="51.8674%" y="111.50"></text></g><g><title>evaluate_obligation (1,716,222 samples, 0.32%)</title><rect x="55.1186%" y="85" width="0.3229%" height="15" fill="rgb(216,154,8)"/><text x="55.3686%" y="95.50"></text></g><g><title>typeck (18,245,123 samples, 3.43%)</title><rect x="52.2686%" y="101" width="3.4331%" height="15" fill="rgb(244,35,45)"/><text x="52.5186%" y="111.50">typ..</text></g><g><title>item_bodies_checking (123,500,600 samples, 23.24%)</title><rect x="32.4931%" y="149" width="23.2384%" height="15" fill="rgb(251,115,12)"/><text x="32.7431%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (123,496,790 samples, 23.24%)</title><rect x="32.4939%" y="133" width="23.2376%" height="15" fill="rgb(240,54,50)"/><text x="32.7439%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (123,093,607 samples, 23.16%)</title><rect x="32.5697%" y="117" width="23.1618%" height="15" fill="rgb(233,84,52)"/><text x="32.8197%" y="127.50">typeck</text></g><g><title>item_types_checking (8,447,875 samples, 1.59%)</title><rect x="55.7315%" y="149" width="1.5896%" height="15" fill="rgb(207,117,47)"/><text x="55.9815%" y="159.50"></text></g><g><title>check_mod_item_types (8,440,835 samples, 1.59%)</title><rect x="55.7328%" y="133" width="1.5883%" height="15" fill="rgb(249,43,39)"/><text x="55.9828%" y="143.50"></text></g><g><title>fn_sig (1,130,160 samples, 0.21%)</title><rect x="57.4980%" y="117" width="0.2127%" height="15" fill="rgb(209,38,44)"/><text x="57.7480%" y="127.50"></text></g><g><title>is_late_bound_map (638,467 samples, 0.12%)</title><rect x="57.8010%" y="101" width="0.1201%" height="15" fill="rgb(236,212,23)"/><text x="58.0510%" y="111.50"></text></g><g><title>resolve_lifetimes (590,397 samples, 0.11%)</title><rect x="57.8100%" y="85" width="0.1111%" height="15" fill="rgb(242,79,21)"/><text x="58.0600%" y="95.50"></text></g><g><title>generics_of (1,535,437 samples, 0.29%)</title><rect x="57.7106%" y="117" width="0.2889%" height="15" fill="rgb(211,96,35)"/><text x="57.9606%" y="127.50"></text></g><g><title>late_bound_vars_map (606,316 samples, 0.11%)</title><rect x="58.3745%" y="69" width="0.1141%" height="15" fill="rgb(253,215,40)"/><text x="58.6245%" y="79.50"></text></g><g><title>resolve_lifetimes (563,525 samples, 0.11%)</title><rect x="58.3826%" y="53" width="0.1060%" height="15" fill="rgb(211,81,21)"/><text x="58.6326%" y="63.50"></text></g><g><title>explicit_predicates_of (1,710,797 samples, 0.32%)</title><rect x="58.1785%" y="85" width="0.3219%" height="15" fill="rgb(208,190,38)"/><text x="58.4285%" y="95.50"></text></g><g><title>predicates_of (3,275,011 samples, 0.62%)</title><rect x="58.0339%" y="117" width="0.6162%" height="15" fill="rgb(235,213,38)"/><text x="58.2839%" y="127.50"></text></g><g><title>predicates_defined_on (3,073,487 samples, 0.58%)</title><rect x="58.0718%" y="101" width="0.5783%" height="15" fill="rgb(237,122,38)"/><text x="58.3218%" y="111.50"></text></g><g><title>inferred_outlives_of (795,791 samples, 0.15%)</title><rect x="58.5004%" y="85" width="0.1497%" height="15" fill="rgb(244,218,35)"/><text x="58.7504%" y="95.50"></text></g><g><title>inferred_outlives_crate (727,389 samples, 0.14%)</title><rect x="58.5133%" y="69" width="0.1369%" height="15" fill="rgb(240,68,47)"/><text x="58.7633%" y="79.50"></text></g><g><title>type_collecting (7,519,574 samples, 1.41%)</title><rect x="57.3219%" y="149" width="1.4149%" height="15" fill="rgb(210,16,53)"/><text x="57.5719%" y="159.50"></text></g><g><title>collect_mod_item_types (7,507,974 samples, 1.41%)</title><rect x="57.3241%" y="133" width="1.4127%" height="15" fill="rgb(235,124,12)"/><text x="57.5741%" y="143.50"></text></g><g><title>evaluate_obligation (1,888,724 samples, 0.36%)</title><rect x="61.6555%" y="117" width="0.3554%" height="15" fill="rgb(224,169,11)"/><text x="61.9055%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,695,800 samples, 0.32%)</title><rect x="62.0235%" y="117" width="0.3191%" height="15" fill="rgb(250,166,2)"/><text x="62.2735%" y="127.50"></text></g><g><title>param_env (2,852,593 samples, 0.54%)</title><rect x="62.3427%" y="117" width="0.5368%" height="15" fill="rgb(242,216,29)"/><text x="62.5927%" y="127.50"></text></g><g><title>region_scope_tree (1,530,500 samples, 0.29%)</title><rect x="62.8937%" y="117" width="0.2880%" height="15" fill="rgb(230,116,27)"/><text x="63.1437%" y="127.50"></text></g><g><title>check_impl_item_well_formed (22,843,824 samples, 4.30%)</title><rect x="58.9055%" y="133" width="4.2984%" height="15" fill="rgb(228,99,48)"/><text x="59.1555%" y="143.50">check..</text></g><g><title>param_env (1,018,062 samples, 0.19%)</title><rect x="64.6407%" y="117" width="0.1916%" height="15" fill="rgb(253,11,6)"/><text x="64.8907%" y="127.50"></text></g><g><title>check_item_well_formed (9,420,932 samples, 1.77%)</title><rect x="63.2039%" y="133" width="1.7727%" height="15" fill="rgb(247,143,39)"/><text x="63.4539%" y="143.50">c..</text></g><g><title>analysis (320,339,951 samples, 60.28%)</title><rect x="4.8264%" y="181" width="60.2764%" height="15" fill="rgb(236,97,10)"/><text x="5.0764%" y="191.50">analysis</text></g><g><title>type_check_crate (193,960,768 samples, 36.50%)</title><rect x="28.6065%" y="165" width="36.4964%" height="15" fill="rgb(233,208,19)"/><text x="28.8565%" y="175.50">type_check_crate</text></g><g><title>wf_checking (33,806,638 samples, 6.36%)</title><rect x="58.7417%" y="149" width="6.3612%" height="15" fill="rgb(216,164,2)"/><text x="58.9917%" y="159.50">wf_check..</text></g><g><title>check_trait_item_well_formed (671,328 samples, 0.13%)</title><rect x="64.9766%" y="133" width="0.1263%" height="15" fill="rgb(220,129,5)"/><text x="65.2266%" y="143.50"></text></g><g><title>fn_abi_of_instance (924,569 samples, 0.17%)</title><rect x="65.5817%" y="149" width="0.1740%" height="15" fill="rgb(242,17,10)"/><text x="65.8317%" y="159.50"></text></g><g><title>codegen_module (3,060,885 samples, 0.58%)</title><rect x="65.2383%" y="165" width="0.5759%" height="15" fill="rgb(242,107,0)"/><text x="65.4883%" y="175.50"></text></g><g><title>optimized_mir (928,651 samples, 0.17%)</title><rect x="65.8730%" y="117" width="0.1747%" height="15" fill="rgb(251,28,31)"/><text x="66.1230%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,620,718 samples, 0.30%)</title><rect x="65.8199%" y="133" width="0.3050%" height="15" fill="rgb(233,223,10)"/><text x="66.0699%" y="143.50"></text></g><g><title>monomorphization_collector (1,691,419 samples, 0.32%)</title><rect x="65.8194%" y="149" width="0.3183%" height="15" fill="rgb(215,21,27)"/><text x="66.0694%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,862,481 samples, 0.35%)</title><rect x="65.8144%" y="165" width="0.3505%" height="15" fill="rgb(232,23,21)"/><text x="66.0644%" y="175.50"></text></g><g><title>codegen_crate (5,698,503 samples, 1.07%)</title><rect x="65.1050%" y="181" width="1.0723%" height="15" fill="rgb(244,5,23)"/><text x="65.3550%" y="191.50"></text></g><g><title>codegen_module_optimize (26,880,431 samples, 5.06%)</title><rect x="66.1772%" y="181" width="5.0579%" height="15" fill="rgb(226,81,46)"/><text x="66.4272%" y="191.50">codege..</text></g><g><title>LLVM_module_optimize (20,751,543 samples, 3.90%)</title><rect x="67.3305%" y="165" width="3.9047%" height="15" fill="rgb(247,70,30)"/><text x="67.5805%" y="175.50">LLVM..</text></g><g><title>LLVM_lto_optimize (8,764,277 samples, 1.65%)</title><rect x="71.6090%" y="165" width="1.6491%" height="15" fill="rgb(212,68,19)"/><text x="71.8590%" y="175.50"></text></g><g><title>LLVM_module_codegen (19,891,563 samples, 3.74%)</title><rect x="73.2581%" y="165" width="3.7429%" height="15" fill="rgb(240,187,13)"/><text x="73.5081%" y="175.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (19,510,969 samples, 3.67%)</title><rect x="73.3298%" y="149" width="3.6713%" height="15" fill="rgb(223,113,26)"/><text x="73.5798%" y="159.50">LLVM..</text></g><g><title>codegen_module_perform_lto (31,209,309 samples, 5.87%)</title><rect x="71.2351%" y="181" width="5.8725%" height="15" fill="rgb(206,192,2)"/><text x="71.4851%" y="191.50">codegen..</text></g><g><title>metadata_register_crate (1,255,154 samples, 0.24%)</title><rect x="83.6498%" y="133" width="0.2362%" height="15" fill="rgb(241,108,4)"/><text x="83.8998%" y="143.50"></text></g><g><title>macro_expand_crate (36,137,133 samples, 6.80%)</title><rect x="77.2672%" y="165" width="6.7997%" height="15" fill="rgb(247,173,49)"/><text x="77.5172%" y="175.50">macro_exp..</text></g><g><title>expand_crate (36,117,093 samples, 6.80%)</title><rect x="77.2710%" y="149" width="6.7959%" height="15" fill="rgb(224,114,35)"/><text x="77.5210%" y="159.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (961,771 samples, 0.18%)</title><rect x="83.8860%" y="133" width="0.1810%" height="15" fill="rgb(245,159,27)"/><text x="84.1360%" y="143.50"></text></g><g><title>late_resolve_crate (4,369,819 samples, 0.82%)</title><rect x="84.1296%" y="149" width="0.8222%" height="15" fill="rgb(245,172,44)"/><text x="84.3796%" y="159.50"></text></g><g><title>configure_and_expand (42,021,959 samples, 7.91%)</title><rect x="77.1076%" y="181" width="7.9070%" height="15" fill="rgb(236,23,11)"/><text x="77.3576%" y="191.50">configure_a..</text></g><g><title>resolve_crate (4,897,224 samples, 0.92%)</title><rect x="84.0932%" y="165" width="0.9215%" height="15" fill="rgb(205,117,38)"/><text x="84.3432%" y="175.50"></text></g><g><title>drop_ast (862,010 samples, 0.16%)</title><rect x="85.0146%" y="181" width="0.1622%" height="15" fill="rgb(237,72,25)"/><text x="85.2646%" y="191.50"></text></g><g><title>early_lint_checks (999,771 samples, 0.19%)</title><rect x="85.1816%" y="181" width="0.1881%" height="15" fill="rgb(244,70,9)"/><text x="85.4316%" y="191.50"></text></g><g><title>free_global_ctxt (6,650,814 samples, 1.25%)</title><rect x="85.3698%" y="181" width="1.2514%" height="15" fill="rgb(217,125,39)"/><text x="85.6198%" y="191.50"></text></g><g><title>exported_symbols (610,297 samples, 0.11%)</title><rect x="87.8645%" y="165" width="0.1148%" height="15" fill="rgb(235,36,10)"/><text x="88.1145%" y="175.50"></text></g><g><title>is_sized_raw (592,457 samples, 0.11%)</title><rect x="90.7479%" y="133" width="0.1115%" height="15" fill="rgb(251,123,47)"/><text x="90.9979%" y="143.50"></text></g><g><title>layout_of (625,769 samples, 0.12%)</title><rect x="90.9760%" y="117" width="0.1177%" height="15" fill="rgb(221,13,13)"/><text x="91.2260%" y="127.50"></text></g><g><title>layout_of (1,254,395 samples, 0.24%)</title><rect x="90.8594%" y="133" width="0.2360%" height="15" fill="rgb(238,131,9)"/><text x="91.1094%" y="143.50"></text></g><g><title>layout_of (3,731,726 samples, 0.70%)</title><rect x="90.4191%" y="149" width="0.7022%" height="15" fill="rgb(211,50,8)"/><text x="90.6691%" y="159.50"></text></g><g><title>is_copy_raw (1,338,238 samples, 0.25%)</title><rect x="93.5620%" y="117" width="0.2518%" height="15" fill="rgb(245,182,24)"/><text x="93.8120%" y="127.50"></text></g><g><title>evaluate_obligation (979,075 samples, 0.18%)</title><rect x="93.6296%" y="101" width="0.1842%" height="15" fill="rgb(242,14,37)"/><text x="93.8796%" y="111.50"></text></g><g><title>needs_drop_raw (1,579,272 samples, 0.30%)</title><rect x="93.5180%" y="133" width="0.2972%" height="15" fill="rgb(246,228,12)"/><text x="93.7680%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (14,726,188 samples, 2.77%)</title><rect x="91.1213%" y="149" width="2.7709%" height="15" fill="rgb(213,55,15)"/><text x="91.3713%" y="159.50">mi..</text></g><g><title>specialization_graph_of (567,766 samples, 0.11%)</title><rect x="93.9186%" y="133" width="0.1068%" height="15" fill="rgb(209,9,3)"/><text x="94.1686%" y="143.50"></text></g><g><title>optimized_mir (31,728,542 samples, 5.97%)</title><rect x="88.0559%" y="165" width="5.9702%" height="15" fill="rgb(230,59,30)"/><text x="88.3059%" y="175.50">optimize..</text></g><g><title>resolve_instance (675,178 samples, 0.13%)</title><rect x="93.8990%" y="149" width="0.1270%" height="15" fill="rgb(209,121,21)"/><text x="94.1490%" y="159.50"></text></g><g><title>generate_crate_metadata (39,708,544 samples, 7.47%)</title><rect x="86.6212%" y="181" width="7.4717%" height="15" fill="rgb(220,109,13)"/><text x="86.8712%" y="191.50">generate_c..</text></g><g><title>hir_lowering (9,565,517 samples, 1.80%)</title><rect x="94.0929%" y="181" width="1.7999%" height="15" fill="rgb(232,18,1)"/><text x="94.3429%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (14,959,828 samples, 2.81%)</title><rect x="95.8978%" y="165" width="2.8149%" height="15" fill="rgb(215,41,42)"/><text x="96.1478%" y="175.50">fi..</text></g><g><title>link_crate (2,797,091 samples, 0.53%)</title><rect x="98.7127%" y="165" width="0.5263%" height="15" fill="rgb(224,123,36)"/><text x="98.9627%" y="175.50"></text></g><g><title>link_binary (2,771,171 samples, 0.52%)</title><rect x="98.7176%" y="149" width="0.5214%" height="15" fill="rgb(240,125,3)"/><text x="98.9676%" y="159.50"></text></g><g><title>link_rlib (2,163,894 samples, 0.41%)</title><rect x="98.8319%" y="133" width="0.4072%" height="15" fill="rgb(205,98,50)"/><text x="99.0819%" y="143.50"></text></g><g><title>link (17,796,589 samples, 3.35%)</title><rect x="95.8928%" y="181" width="3.3487%" height="15" fill="rgb(205,185,37)"/><text x="96.1428%" y="191.50">link</text></g><g><title>parse_crate (1,019,071 samples, 0.19%)</title><rect x="99.2415%" y="181" width="0.1918%" height="15" fill="rgb(238,207,15)"/><text x="99.4915%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,043,192 samples, 0.38%)</title><rect x="99.4805%" y="181" width="0.3845%" height="15" fill="rgb(213,199,42)"/><text x="99.7305%" y="191.50"></text></g><g><title>all (531,451,341 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (531,451,341 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (634,707 samples, 0.12%)</title><rect x="99.8806%" y="181" width="0.1194%" height="15" fill="rgb(241,35,35)"/><text x="100.1306%" y="191.50"></text></g></svg></svg>