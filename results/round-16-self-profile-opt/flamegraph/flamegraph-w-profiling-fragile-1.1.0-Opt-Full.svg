<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (112,841,681 samples, 14.87%)</title><rect x="0.1201%" y="165" width="14.8669%" height="15" fill="rgb(227,0,7)"/><text x="0.3701%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (873,379 samples, 0.12%)</title><rect x="14.8719%" y="149" width="0.1151%" height="15" fill="rgb(217,0,24)"/><text x="15.1219%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (854,039 samples, 0.11%)</title><rect x="14.8745%" y="133" width="0.1125%" height="15" fill="rgb(221,193,54)"/><text x="15.1245%" y="143.50"></text></g><g><title>needs_drop_raw (927,962 samples, 0.12%)</title><rect x="17.6681%" y="53" width="0.1223%" height="15" fill="rgb(248,212,6)"/><text x="17.9181%" y="63.50"></text></g><g><title>specialization_graph_of (1,089,982 samples, 0.14%)</title><rect x="17.8376%" y="37" width="0.1436%" height="15" fill="rgb(208,68,35)"/><text x="18.0876%" y="47.50"></text></g><g><title>resolve_instance (1,522,478 samples, 0.20%)</title><rect x="17.7904%" y="53" width="0.2006%" height="15" fill="rgb(232,128,0)"/><text x="18.0404%" y="63.50"></text></g><g><title>thir_body (998,877 samples, 0.13%)</title><rect x="17.9967%" y="53" width="0.1316%" height="15" fill="rgb(207,160,47)"/><text x="18.2467%" y="63.50"></text></g><g><title>mir_const (8,821,297 samples, 1.16%)</title><rect x="16.9701%" y="101" width="1.1622%" height="15" fill="rgb(228,23,34)"/><text x="17.2201%" y="111.50"></text></g><g><title>unsafety_check_result (7,476,917 samples, 0.99%)</title><rect x="17.1473%" y="85" width="0.9851%" height="15" fill="rgb(218,30,26)"/><text x="17.3973%" y="95.50"></text></g><g><title>mir_built (6,186,454 samples, 0.82%)</title><rect x="17.3173%" y="69" width="0.8151%" height="15" fill="rgb(220,122,19)"/><text x="17.5673%" y="79.50"></text></g><g><title>mir_const_qualif (951,820 samples, 0.13%)</title><rect x="18.1323%" y="101" width="0.1254%" height="15" fill="rgb(250,228,42)"/><text x="18.3823%" y="111.50"></text></g><g><title>mir_promoted (10,774,007 samples, 1.42%)</title><rect x="16.8383%" y="117" width="1.4195%" height="15" fill="rgb(240,193,28)"/><text x="17.0883%" y="127.50"></text></g><g><title>type_op_prove_predicate (2,571,894 samples, 0.34%)</title><rect x="18.3552%" y="117" width="0.3388%" height="15" fill="rgb(216,20,37)"/><text x="18.6052%" y="127.50"></text></g><g><title>MIR_borrow_checking (27,681,605 samples, 3.65%)</title><rect x="15.0475%" y="149" width="3.6471%" height="15" fill="rgb(206,188,39)"/><text x="15.2975%" y="159.50">MIR_..</text></g><g><title>mir_borrowck (27,499,301 samples, 3.62%)</title><rect x="15.0716%" y="133" width="3.6230%" height="15" fill="rgb(217,207,13)"/><text x="15.3216%" y="143.50">mir_..</text></g><g><title>check_mod_attrs (1,006,942 samples, 0.13%)</title><rect x="18.7878%" y="133" width="0.1327%" height="15" fill="rgb(231,73,38)"/><text x="19.0378%" y="143.50"></text></g><g><title>misc_checking_1 (2,227,435 samples, 0.29%)</title><rect x="18.7835%" y="149" width="0.2935%" height="15" fill="rgb(225,20,46)"/><text x="19.0335%" y="159.50"></text></g><g><title>misc_checking_2 (896,720 samples, 0.12%)</title><rect x="19.0770%" y="149" width="0.1181%" height="15" fill="rgb(210,31,41)"/><text x="19.3270%" y="159.50"></text></g><g><title>crate_lints (2,734,750 samples, 0.36%)</title><rect x="19.2742%" y="117" width="0.3603%" height="15" fill="rgb(221,200,47)"/><text x="19.5242%" y="127.50"></text></g><g><title>type_of (1,090,862 samples, 0.14%)</title><rect x="19.4907%" y="101" width="0.1437%" height="15" fill="rgb(226,26,5)"/><text x="19.7407%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (862,280 samples, 0.11%)</title><rect x="19.5209%" y="85" width="0.1136%" height="15" fill="rgb(249,33,26)"/><text x="19.7709%" y="95.50"></text></g><g><title>lint_checking (3,231,896 samples, 0.43%)</title><rect x="19.2740%" y="133" width="0.4258%" height="15" fill="rgb(235,183,28)"/><text x="19.5240%" y="143.50"></text></g><g><title>privacy_checking_modules (914,190 samples, 0.12%)</title><rect x="19.7337%" y="133" width="0.1204%" height="15" fill="rgb(221,5,38)"/><text x="19.9837%" y="143.50"></text></g><g><title>check_mod_privacy (910,650 samples, 0.12%)</title><rect x="19.7342%" y="117" width="0.1200%" height="15" fill="rgb(247,18,42)"/><text x="19.9842%" y="127.50"></text></g><g><title>misc_checking_3 (5,016,065 samples, 0.66%)</title><rect x="19.1951%" y="149" width="0.6609%" height="15" fill="rgb(241,131,45)"/><text x="19.4451%" y="159.50"></text></g><g><title>impl_parent (2,681,578 samples, 0.35%)</title><rect x="20.4185%" y="85" width="0.3533%" height="15" fill="rgb(249,31,29)"/><text x="20.6685%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,464,238 samples, 0.19%)</title><rect x="20.5789%" y="69" width="0.1929%" height="15" fill="rgb(225,111,53)"/><text x="20.8289%" y="79.50"></text></g><g><title>impl_trait_ref (5,846,335 samples, 0.77%)</title><rect x="20.7722%" y="85" width="0.7703%" height="15" fill="rgb(238,160,17)"/><text x="21.0222%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,648,493 samples, 0.61%)</title><rect x="20.9301%" y="69" width="0.6124%" height="15" fill="rgb(214,148,48)"/><text x="21.1801%" y="79.50"></text></g><g><title>trait_impls_of (964,131 samples, 0.13%)</title><rect x="21.5485%" y="85" width="0.1270%" height="15" fill="rgb(232,36,49)"/><text x="21.7985%" y="95.50"></text></g><g><title>coherent_trait (13,695,741 samples, 1.80%)</title><rect x="19.8713%" y="117" width="1.8044%" height="15" fill="rgb(209,103,24)"/><text x="20.1213%" y="127.50">c..</text></g><g><title>specialization_graph_of (13,669,130 samples, 1.80%)</title><rect x="19.8748%" y="101" width="1.8009%" height="15" fill="rgb(229,88,8)"/><text x="20.1248%" y="111.50">s..</text></g><g><title>coherence_checking (13,811,901 samples, 1.82%)</title><rect x="19.8670%" y="133" width="1.8197%" height="15" fill="rgb(213,181,19)"/><text x="20.1170%" y="143.50">c..</text></g><g><title>typeck (7,703,066 samples, 1.01%)</title><rect x="23.9664%" y="85" width="1.0149%" height="15" fill="rgb(254,191,54)"/><text x="24.2164%" y="95.50"></text></g><g><title>item_bodies_checking (24,983,084 samples, 3.29%)</title><rect x="21.6961%" y="133" width="3.2915%" height="15" fill="rgb(241,83,37)"/><text x="21.9461%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (24,979,974 samples, 3.29%)</title><rect x="21.6965%" y="117" width="3.2911%" height="15" fill="rgb(233,36,39)"/><text x="21.9465%" y="127.50">typ..</text></g><g><title>typeck (24,870,344 samples, 3.28%)</title><rect x="21.7109%" y="101" width="3.2767%" height="15" fill="rgb(226,3,54)"/><text x="21.9609%" y="111.50">typ..</text></g><g><title>item_types_checking (2,573,379 samples, 0.34%)</title><rect x="24.9876%" y="133" width="0.3390%" height="15" fill="rgb(245,192,40)"/><text x="25.2376%" y="143.50"></text></g><g><title>check_mod_item_types (2,567,459 samples, 0.34%)</title><rect x="24.9884%" y="117" width="0.3383%" height="15" fill="rgb(238,167,29)"/><text x="25.2384%" y="127.50"></text></g><g><title>typeck (1,085,273 samples, 0.14%)</title><rect x="25.1837%" y="101" width="0.1430%" height="15" fill="rgb(232,182,51)"/><text x="25.4337%" y="111.50"></text></g><g><title>predicates_of (1,801,861 samples, 0.24%)</title><rect x="25.5794%" y="101" width="0.2374%" height="15" fill="rgb(231,60,39)"/><text x="25.8294%" y="111.50"></text></g><g><title>predicates_defined_on (1,692,580 samples, 0.22%)</title><rect x="25.5937%" y="85" width="0.2230%" height="15" fill="rgb(208,69,12)"/><text x="25.8437%" y="95.50"></text></g><g><title>inferred_outlives_of (857,699 samples, 0.11%)</title><rect x="25.7037%" y="69" width="0.1130%" height="15" fill="rgb(235,93,37)"/><text x="25.9537%" y="79.50"></text></g><g><title>inferred_outlives_crate (814,269 samples, 0.11%)</title><rect x="25.7095%" y="53" width="0.1073%" height="15" fill="rgb(213,116,39)"/><text x="25.9595%" y="63.50"></text></g><g><title>type_collecting (3,935,163 samples, 0.52%)</title><rect x="25.3270%" y="133" width="0.5185%" height="15" fill="rgb(222,207,29)"/><text x="25.5770%" y="143.50"></text></g><g><title>collect_mod_item_types (3,912,633 samples, 0.52%)</title><rect x="25.3300%" y="117" width="0.5155%" height="15" fill="rgb(206,96,30)"/><text x="25.5800%" y="127.50"></text></g><g><title>check_impl_item_well_formed (4,232,956 samples, 0.56%)</title><rect x="25.8775%" y="117" width="0.5577%" height="15" fill="rgb(218,138,4)"/><text x="26.1275%" y="127.50"></text></g><g><title>analysis (90,735,597 samples, 11.95%)</title><rect x="14.9870%" y="165" width="11.9545%" height="15" fill="rgb(250,191,14)"/><text x="15.2370%" y="175.50">analysis</text></g><g><title>type_check_crate (53,779,440 samples, 7.09%)</title><rect x="19.8560%" y="149" width="7.0855%" height="15" fill="rgb(239,60,40)"/><text x="20.1060%" y="159.50">type_check..</text></g><g><title>wf_checking (8,312,072 samples, 1.10%)</title><rect x="25.8463%" y="133" width="1.0951%" height="15" fill="rgb(206,27,48)"/><text x="26.0963%" y="143.50"></text></g><g><title>check_item_well_formed (3,842,455 samples, 0.51%)</title><rect x="26.4352%" y="117" width="0.5062%" height="15" fill="rgb(225,35,8)"/><text x="26.6852%" y="127.50"></text></g><g><title>is_freeze_raw (1,015,219 samples, 0.13%)</title><rect x="29.7118%" y="117" width="0.1338%" height="15" fill="rgb(250,213,24)"/><text x="29.9618%" y="127.50"></text></g><g><title>evaluate_obligation (884,217 samples, 0.12%)</title><rect x="29.7290%" y="101" width="0.1165%" height="15" fill="rgb(247,123,22)"/><text x="29.9790%" y="111.50"></text></g><g><title>layout_of (1,079,612 samples, 0.14%)</title><rect x="29.9415%" y="117" width="0.1422%" height="15" fill="rgb(231,138,38)"/><text x="30.1915%" y="127.50"></text></g><g><title>param_env (1,715,259 samples, 0.23%)</title><rect x="30.0837%" y="117" width="0.2260%" height="15" fill="rgb(231,145,46)"/><text x="30.3337%" y="127.50"></text></g><g><title>fn_abi_of_instance (7,044,507 samples, 0.93%)</title><rect x="29.4492%" y="133" width="0.9281%" height="15" fill="rgb(251,118,11)"/><text x="29.6992%" y="143.50"></text></g><g><title>codegen_module (25,397,060 samples, 3.35%)</title><rect x="27.1455%" y="149" width="3.3461%" height="15" fill="rgb(217,147,25)"/><text x="27.3955%" y="159.50">cod..</text></g><g><title>codegen_fn_attrs (1,033,324 samples, 0.14%)</title><rect x="30.6962%" y="101" width="0.1361%" height="15" fill="rgb(247,81,37)"/><text x="30.9462%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,129,032 samples, 0.15%)</title><rect x="31.0324%" y="85" width="0.1488%" height="15" fill="rgb(209,12,38)"/><text x="31.2824%" y="95.50"></text></g><g><title>optimized_mir (2,381,296 samples, 0.31%)</title><rect x="30.9362%" y="101" width="0.3137%" height="15" fill="rgb(227,1,9)"/><text x="31.1862%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (1,107,282 samples, 0.15%)</title><rect x="31.3162%" y="85" width="0.1459%" height="15" fill="rgb(248,47,43)"/><text x="31.5662%" y="95.50"></text></g><g><title>resolve_instance (2,401,422 samples, 0.32%)</title><rect x="31.2500%" y="101" width="0.3164%" height="15" fill="rgb(221,10,30)"/><text x="31.5000%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (8,788,467 samples, 1.16%)</title><rect x="30.4967%" y="117" width="1.1579%" height="15" fill="rgb(210,229,1)"/><text x="30.7467%" y="127.50"></text></g><g><title>monomorphization_collector (8,838,978 samples, 1.16%)</title><rect x="30.4964%" y="133" width="1.1645%" height="15" fill="rgb(222,148,37)"/><text x="30.7464%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (1,193,223 samples, 0.16%)</title><rect x="31.6615%" y="117" width="0.1572%" height="15" fill="rgb(234,67,33)"/><text x="31.9115%" y="127.50"></text></g><g><title>symbol_name (1,075,871 samples, 0.14%)</title><rect x="31.6770%" y="101" width="0.1417%" height="15" fill="rgb(247,98,35)"/><text x="31.9270%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (10,476,476 samples, 1.38%)</title><rect x="30.4924%" y="149" width="1.3803%" height="15" fill="rgb(247,138,52)"/><text x="30.7424%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,607,558 samples, 0.21%)</title><rect x="31.6609%" y="133" width="0.2118%" height="15" fill="rgb(213,79,30)"/><text x="31.9109%" y="143.50"></text></g><g><title>codegen_crate (37,479,143 samples, 4.94%)</title><rect x="26.9429%" y="165" width="4.9379%" height="15" fill="rgb(246,177,23)"/><text x="27.1929%" y="175.50">codege..</text></g><g><title>codegen_module_optimize (193,599,044 samples, 25.51%)</title><rect x="31.8808%" y="165" width="25.5068%" height="15" fill="rgb(230,62,27)"/><text x="32.1308%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (179,753,070 samples, 23.68%)</title><rect x="33.7050%" y="149" width="23.6826%" height="15" fill="rgb(216,154,8)"/><text x="33.9550%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (74,667,190 samples, 9.84%)</title><rect x="58.5359%" y="149" width="9.8374%" height="15" fill="rgb(244,35,45)"/><text x="58.7859%" y="159.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (83,790,021 samples, 11.04%)</title><rect x="68.3734%" y="149" width="11.0394%" height="15" fill="rgb(251,115,12)"/><text x="68.6234%" y="159.50">LLVM_module_code..</text></g><g><title>LLVM_module_codegen_emit_obj (82,072,242 samples, 10.81%)</title><rect x="68.5997%" y="133" width="10.8131%" height="15" fill="rgb(240,54,50)"/><text x="68.8497%" y="143.50">LLVM_module_code..</text></g><g><title>LLVM_thin_lto_import (9,678,376 samples, 1.28%)</title><rect x="79.4128%" y="149" width="1.2751%" height="15" fill="rgb(233,84,52)"/><text x="79.6628%" y="159.50"></text></g><g><title>codegen_module_perform_lto (177,310,766 samples, 23.36%)</title><rect x="57.3875%" y="165" width="23.3608%" height="15" fill="rgb(207,117,47)"/><text x="57.6375%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,662,749 samples, 0.35%)</title><rect x="84.1619%" y="117" width="0.3508%" height="15" fill="rgb(249,43,39)"/><text x="84.4119%" y="127.50"></text></g><g><title>metadata_register_crate (980,020 samples, 0.13%)</title><rect x="84.3836%" y="101" width="0.1291%" height="15" fill="rgb(209,38,44)"/><text x="84.6336%" y="111.50"></text></g><g><title>macro_expand_crate (28,327,511 samples, 3.73%)</title><rect x="80.8509%" y="149" width="3.7322%" height="15" fill="rgb(236,212,23)"/><text x="81.1009%" y="159.50">macr..</text></g><g><title>expand_crate (28,298,021 samples, 3.73%)</title><rect x="80.8548%" y="133" width="3.7283%" height="15" fill="rgb(242,79,21)"/><text x="81.1048%" y="143.50">expa..</text></g><g><title>late_resolve_crate (3,436,218 samples, 0.45%)</title><rect x="84.6255%" y="133" width="0.4527%" height="15" fill="rgb(211,96,35)"/><text x="84.8755%" y="143.50"></text></g><g><title>configure_and_expand (33,081,013 samples, 4.36%)</title><rect x="80.7483%" y="165" width="4.3584%" height="15" fill="rgb(253,215,40)"/><text x="80.9983%" y="175.50">confi..</text></g><g><title>resolve_crate (3,912,273 samples, 0.52%)</title><rect x="84.5913%" y="149" width="0.5154%" height="15" fill="rgb(211,81,21)"/><text x="84.8413%" y="159.50"></text></g><g><title>free_global_ctxt (5,141,886 samples, 0.68%)</title><rect x="85.2668%" y="165" width="0.6774%" height="15" fill="rgb(208,190,38)"/><text x="85.5168%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,504,270 samples, 0.46%)</title><rect x="86.7520%" y="133" width="0.4617%" height="15" fill="rgb(235,213,38)"/><text x="87.0020%" y="143.50"></text></g><g><title>optimized_mir (7,419,692 samples, 0.98%)</title><rect x="86.2386%" y="149" width="0.9775%" height="15" fill="rgb(237,122,38)"/><text x="86.4886%" y="159.50"></text></g><g><title>generate_crate_metadata (9,843,398 samples, 1.30%)</title><rect x="85.9442%" y="165" width="1.2969%" height="15" fill="rgb(244,218,35)"/><text x="86.1942%" y="175.50"></text></g><g><title>hir_lowering (5,781,043 samples, 0.76%)</title><rect x="87.2411%" y="165" width="0.7617%" height="15" fill="rgb(240,68,47)"/><text x="87.4911%" y="175.50"></text></g><g><title>finish_ongoing_codegen (85,979,705 samples, 11.33%)</title><rect x="88.0053%" y="149" width="11.3279%" height="15" fill="rgb(210,16,53)"/><text x="88.2553%" y="159.50">finish_ongoing_co..</text></g><g><title>link_crate (1,961,961 samples, 0.26%)</title><rect x="99.3332%" y="149" width="0.2585%" height="15" fill="rgb(235,124,12)"/><text x="99.5832%" y="159.50"></text></g><g><title>link_binary (1,918,651 samples, 0.25%)</title><rect x="99.3389%" y="133" width="0.2528%" height="15" fill="rgb(224,169,11)"/><text x="99.5889%" y="143.50"></text></g><g><title>link_rlib (1,243,573 samples, 0.16%)</title><rect x="99.4278%" y="117" width="0.1638%" height="15" fill="rgb(250,166,2)"/><text x="99.6778%" y="127.50"></text></g><g><title>link (87,975,947 samples, 11.59%)</title><rect x="88.0027%" y="165" width="11.5909%" height="15" fill="rgb(242,216,29)"/><text x="88.2527%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (1,794,520 samples, 0.24%)</title><rect x="99.6951%" y="165" width="0.2364%" height="15" fill="rgb(230,116,27)"/><text x="99.9451%" y="175.50"></text></g><g><title>all (759,010,566 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (759,010,566 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>