<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (57,960,970 samples, 23.55%)</title><rect x="0.3434%" y="229" width="23.5471%" height="15" fill="rgb(227,0,7)"/><text x="0.5934%" y="239.50">LLVM_passes</text></g><g><title>adt_drop_tys (429,542 samples, 0.17%)</title><rect x="25.3918%" y="101" width="0.1745%" height="15" fill="rgb(217,0,24)"/><text x="25.6418%" y="111.50"></text></g><g><title>needs_drop_raw (1,895,650 samples, 0.77%)</title><rect x="25.3584%" y="117" width="0.7701%" height="15" fill="rgb(221,193,54)"/><text x="25.6084%" y="127.50"></text></g><g><title>is_copy_raw (1,383,886 samples, 0.56%)</title><rect x="25.5663%" y="101" width="0.5622%" height="15" fill="rgb(248,212,6)"/><text x="25.8163%" y="111.50"></text></g><g><title>evaluate_obligation (1,271,814 samples, 0.52%)</title><rect x="25.6118%" y="85" width="0.5167%" height="15" fill="rgb(208,68,35)"/><text x="25.8618%" y="95.50"></text></g><g><title>trait_impls_of (421,984 samples, 0.17%)</title><rect x="25.9571%" y="69" width="0.1714%" height="15" fill="rgb(232,128,0)"/><text x="26.2071%" y="79.50"></text></g><g><title>resolve_instance (348,183 samples, 0.14%)</title><rect x="26.1285%" y="117" width="0.1415%" height="15" fill="rgb(207,160,47)"/><text x="26.3785%" y="127.50"></text></g><g><title>mir_const (3,799,003 samples, 1.54%)</title><rect x="24.8037%" y="165" width="1.5434%" height="15" fill="rgb(228,23,34)"/><text x="25.0537%" y="175.50"></text></g><g><title>unsafety_check_result (3,411,478 samples, 1.39%)</title><rect x="24.9611%" y="149" width="1.3859%" height="15" fill="rgb(218,30,26)"/><text x="25.2111%" y="159.50"></text></g><g><title>mir_built (3,133,515 samples, 1.27%)</title><rect x="25.0740%" y="133" width="1.2730%" height="15" fill="rgb(220,122,19)"/><text x="25.3240%" y="143.50"></text></g><g><title>mir_promoted (4,030,596 samples, 1.64%)</title><rect x="24.7162%" y="181" width="1.6375%" height="15" fill="rgb(250,228,42)"/><text x="24.9662%" y="191.50"></text></g><g><title>MIR_borrow_checking (6,662,205 samples, 2.71%)</title><rect x="23.9588%" y="213" width="2.7066%" height="15" fill="rgb(240,193,28)"/><text x="24.2088%" y="223.50">MI..</text></g><g><title>mir_borrowck (6,651,915 samples, 2.70%)</title><rect x="23.9630%" y="197" width="2.7024%" height="15" fill="rgb(216,20,37)"/><text x="24.2130%" y="207.50">mi..</text></g><g><title>type_op_prove_predicate (414,714 samples, 0.17%)</title><rect x="26.4969%" y="181" width="0.1685%" height="15" fill="rgb(206,188,39)"/><text x="26.7469%" y="191.50"></text></g><g><title>check_mod_attrs (297,433 samples, 0.12%)</title><rect x="26.7282%" y="197" width="0.1208%" height="15" fill="rgb(217,207,13)"/><text x="26.9782%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (283,864 samples, 0.12%)</title><rect x="26.8767%" y="197" width="0.1153%" height="15" fill="rgb(231,73,38)"/><text x="27.1267%" y="207.50"></text></g><g><title>misc_checking_1 (724,898 samples, 0.29%)</title><rect x="26.7147%" y="213" width="0.2945%" height="15" fill="rgb(225,20,46)"/><text x="26.9647%" y="223.50"></text></g><g><title>eval_to_const_value_raw (302,464 samples, 0.12%)</title><rect x="27.1346%" y="101" width="0.1229%" height="15" fill="rgb(210,31,41)"/><text x="27.3846%" y="111.50"></text></g><g><title>eval_to_const_value_raw (277,894 samples, 0.11%)</title><rect x="27.1446%" y="85" width="0.1129%" height="15" fill="rgb(221,200,47)"/><text x="27.3946%" y="95.50"></text></g><g><title>eval_to_allocation_raw (269,363 samples, 0.11%)</title><rect x="27.1481%" y="69" width="0.1094%" height="15" fill="rgb(226,26,5)"/><text x="27.3981%" y="79.50"></text></g><g><title>liveness_and_intrinsic_checking (641,027 samples, 0.26%)</title><rect x="27.0104%" y="197" width="0.2604%" height="15" fill="rgb(249,33,26)"/><text x="27.2604%" y="207.50"></text></g><g><title>check_mod_liveness (606,757 samples, 0.25%)</title><rect x="27.0243%" y="181" width="0.2465%" height="15" fill="rgb(235,183,28)"/><text x="27.2743%" y="191.50"></text></g><g><title>type_uninhabited_from (464,017 samples, 0.19%)</title><rect x="27.0823%" y="165" width="0.1885%" height="15" fill="rgb(221,5,38)"/><text x="27.3323%" y="175.50"></text></g><g><title>type_uninhabited_from (432,696 samples, 0.18%)</title><rect x="27.0950%" y="149" width="0.1758%" height="15" fill="rgb(247,18,42)"/><text x="27.3450%" y="159.50"></text></g><g><title>type_uninhabited_from (408,635 samples, 0.17%)</title><rect x="27.1048%" y="133" width="0.1660%" height="15" fill="rgb(241,131,45)"/><text x="27.3548%" y="143.50"></text></g><g><title>type_uninhabited_from (387,644 samples, 0.16%)</title><rect x="27.1134%" y="117" width="0.1575%" height="15" fill="rgb(249,31,29)"/><text x="27.3634%" y="127.50"></text></g><g><title>misc_checking_2 (885,730 samples, 0.36%)</title><rect x="27.0092%" y="213" width="0.3598%" height="15" fill="rgb(225,111,53)"/><text x="27.2592%" y="223.50"></text></g><g><title>misc_checking_3 (507,366 samples, 0.21%)</title><rect x="27.3690%" y="213" width="0.2061%" height="15" fill="rgb(238,160,17)"/><text x="27.6190%" y="223.50"></text></g><g><title>associated_item (309,092 samples, 0.13%)</title><rect x="29.8397%" y="133" width="0.1256%" height="15" fill="rgb(214,148,48)"/><text x="30.0897%" y="143.50"></text></g><g><title>associated_items (492,676 samples, 0.20%)</title><rect x="29.7770%" y="149" width="0.2002%" height="15" fill="rgb(232,36,49)"/><text x="30.0270%" y="159.50"></text></g><g><title>impl_trait_ref (599,673 samples, 0.24%)</title><rect x="30.3090%" y="53" width="0.2436%" height="15" fill="rgb(209,103,24)"/><text x="30.5590%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (548,363 samples, 0.22%)</title><rect x="30.3298%" y="37" width="0.2228%" height="15" fill="rgb(229,88,8)"/><text x="30.5798%" y="47.50"></text></g><g><title>coherent_trait (1,056,482 samples, 0.43%)</title><rect x="30.1514%" y="85" width="0.4292%" height="15" fill="rgb(213,181,19)"/><text x="30.4014%" y="95.50"></text></g><g><title>specialization_graph_of (1,049,882 samples, 0.43%)</title><rect x="30.1541%" y="69" width="0.4265%" height="15" fill="rgb(254,191,54)"/><text x="30.4041%" y="79.50"></text></g><g><title>adt_destructor (1,098,843 samples, 0.45%)</title><rect x="30.1405%" y="117" width="0.4464%" height="15" fill="rgb(241,83,37)"/><text x="30.3905%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,090,453 samples, 0.44%)</title><rect x="30.1439%" y="101" width="0.4430%" height="15" fill="rgb(233,36,39)"/><text x="30.3939%" y="111.50"></text></g><g><title>adt_dtorck_constraint (297,555 samples, 0.12%)</title><rect x="30.6366%" y="85" width="0.1209%" height="15" fill="rgb(226,3,54)"/><text x="30.8866%" y="95.50"></text></g><g><title>adt_dtorck_constraint (394,285 samples, 0.16%)</title><rect x="30.6142%" y="101" width="0.1602%" height="15" fill="rgb(245,192,40)"/><text x="30.8642%" y="111.50"></text></g><g><title>adt_dtorck_constraint (473,785 samples, 0.19%)</title><rect x="30.5869%" y="117" width="0.1925%" height="15" fill="rgb(238,167,29)"/><text x="30.8369%" y="127.50"></text></g><g><title>dropck_outlives (1,979,362 samples, 0.80%)</title><rect x="29.9903%" y="149" width="0.8041%" height="15" fill="rgb(232,182,51)"/><text x="30.2403%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,753,889 samples, 0.71%)</title><rect x="30.0819%" y="133" width="0.7125%" height="15" fill="rgb(231,60,39)"/><text x="30.3319%" y="143.50"></text></g><g><title>evaluate_obligation (1,753,752 samples, 0.71%)</title><rect x="30.7944%" y="149" width="0.7125%" height="15" fill="rgb(208,69,12)"/><text x="31.0444%" y="159.50"></text></g><g><title>trait_impls_of (265,742 samples, 0.11%)</title><rect x="31.3990%" y="133" width="0.1080%" height="15" fill="rgb(235,93,37)"/><text x="31.6490%" y="143.50"></text></g><g><title>predicates_of (342,674 samples, 0.14%)</title><rect x="31.7894%" y="149" width="0.1392%" height="15" fill="rgb(213,116,39)"/><text x="32.0394%" y="159.50"></text></g><g><title>item_bodies_checking (10,851,302 samples, 4.41%)</title><rect x="27.6106%" y="197" width="4.4084%" height="15" fill="rgb(222,207,29)"/><text x="27.8606%" y="207.50">item_..</text></g><g><title>typeck_item_bodies (10,847,822 samples, 4.41%)</title><rect x="27.6120%" y="181" width="4.4070%" height="15" fill="rgb(206,96,30)"/><text x="27.8620%" y="191.50">typec..</text></g><g><title>typeck (10,836,252 samples, 4.40%)</title><rect x="27.6167%" y="165" width="4.4023%" height="15" fill="rgb(218,138,4)"/><text x="27.8667%" y="175.50">typeck</text></g><g><title>fn_sig (295,342 samples, 0.12%)</title><rect x="32.0517%" y="165" width="0.1200%" height="15" fill="rgb(250,191,14)"/><text x="32.3017%" y="175.50"></text></g><g><title>type_collecting (621,977 samples, 0.25%)</title><rect x="32.0232%" y="197" width="0.2527%" height="15" fill="rgb(239,60,40)"/><text x="32.2732%" y="207.50"></text></g><g><title>collect_mod_item_types (610,817 samples, 0.25%)</title><rect x="32.0277%" y="181" width="0.2481%" height="15" fill="rgb(206,27,48)"/><text x="32.2777%" y="191.50"></text></g><g><title>adt_sized_constraint (289,503 samples, 0.12%)</title><rect x="32.7417%" y="117" width="0.1176%" height="15" fill="rgb(225,35,8)"/><text x="32.9917%" y="127.50"></text></g><g><title>adt_sized_constraint (439,084 samples, 0.18%)</title><rect x="32.6994%" y="133" width="0.1784%" height="15" fill="rgb(250,213,24)"/><text x="32.9494%" y="143.50"></text></g><g><title>adt_sized_constraint (608,006 samples, 0.25%)</title><rect x="32.6408%" y="149" width="0.2470%" height="15" fill="rgb(247,123,22)"/><text x="32.8908%" y="159.50"></text></g><g><title>evaluate_obligation (784,037 samples, 0.32%)</title><rect x="32.5697%" y="165" width="0.3185%" height="15" fill="rgb(231,138,38)"/><text x="32.8197%" y="175.50"></text></g><g><title>param_env (284,633 samples, 0.12%)</title><rect x="32.9449%" y="165" width="0.1156%" height="15" fill="rgb(231,145,46)"/><text x="33.1949%" y="175.50"></text></g><g><title>analysis (23,073,459 samples, 9.37%)</title><rect x="23.8905%" y="229" width="9.3738%" height="15" fill="rgb(251,118,11)"/><text x="24.1405%" y="239.50">analysis</text></g><g><title>type_check_crate (14,003,657 samples, 5.69%)</title><rect x="27.5751%" y="213" width="5.6891%" height="15" fill="rgb(217,147,25)"/><text x="27.8251%" y="223.50">type_ch..</text></g><g><title>wf_checking (2,431,757 samples, 0.99%)</title><rect x="32.2763%" y="197" width="0.9879%" height="15" fill="rgb(247,81,37)"/><text x="32.5263%" y="207.50"></text></g><g><title>check_item_well_formed (2,389,967 samples, 0.97%)</title><rect x="32.2933%" y="181" width="0.9709%" height="15" fill="rgb(209,12,38)"/><text x="32.5433%" y="191.50"></text></g><g><title>is_freeze_raw (625,488 samples, 0.25%)</title><rect x="34.6243%" y="181" width="0.2541%" height="15" fill="rgb(227,1,9)"/><text x="34.8743%" y="191.50"></text></g><g><title>evaluate_obligation (348,894 samples, 0.14%)</title><rect x="34.7367%" y="165" width="0.1417%" height="15" fill="rgb(248,47,43)"/><text x="34.9867%" y="175.50"></text></g><g><title>layout_of (718,708 samples, 0.29%)</title><rect x="34.8935%" y="181" width="0.2920%" height="15" fill="rgb(221,10,30)"/><text x="35.1435%" y="191.50"></text></g><g><title>param_env (281,686 samples, 0.11%)</title><rect x="35.1854%" y="181" width="0.1144%" height="15" fill="rgb(210,229,1)"/><text x="35.4354%" y="191.50"></text></g><g><title>fn_abi_of_instance (2,023,603 samples, 0.82%)</title><rect x="34.5037%" y="197" width="0.8221%" height="15" fill="rgb(222,148,37)"/><text x="34.7537%" y="207.50"></text></g><g><title>codegen_module (4,630,471 samples, 1.88%)</title><rect x="33.5020%" y="213" width="1.8812%" height="15" fill="rgb(234,67,33)"/><text x="33.7520%" y="223.50">c..</text></g><g><title>mir_shims (301,953 samples, 0.12%)</title><rect x="35.6730%" y="165" width="0.1227%" height="15" fill="rgb(247,98,35)"/><text x="35.9230%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (306,624 samples, 0.12%)</title><rect x="35.9753%" y="149" width="0.1246%" height="15" fill="rgb(247,138,52)"/><text x="36.2253%" y="159.50"></text></g><g><title>optimized_mir (945,564 samples, 0.38%)</title><rect x="35.7956%" y="165" width="0.3841%" height="15" fill="rgb(213,79,30)"/><text x="36.0456%" y="175.50"></text></g><g><title>impl_parent (591,899 samples, 0.24%)</title><rect x="36.7202%" y="133" width="0.2405%" height="15" fill="rgb(246,177,23)"/><text x="36.9702%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (388,078 samples, 0.16%)</title><rect x="36.8030%" y="117" width="0.1577%" height="15" fill="rgb(230,62,27)"/><text x="37.0530%" y="127.50"></text></g><g><title>specialization_graph_of (3,173,686 samples, 1.29%)</title><rect x="36.3797%" y="149" width="1.2893%" height="15" fill="rgb(216,154,8)"/><text x="36.6297%" y="159.50"></text></g><g><title>impl_trait_ref (1,743,570 samples, 0.71%)</title><rect x="36.9607%" y="133" width="0.7083%" height="15" fill="rgb(244,35,45)"/><text x="37.2107%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,536,190 samples, 0.62%)</title><rect x="37.0449%" y="117" width="0.6241%" height="15" fill="rgb(251,115,12)"/><text x="37.2949%" y="127.50"></text></g><g><title>resolve_instance (3,717,871 samples, 1.51%)</title><rect x="36.1798%" y="165" width="1.5104%" height="15" fill="rgb(240,54,50)"/><text x="36.4298%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (5,652,984 samples, 2.30%)</title><rect x="35.3949%" y="181" width="2.2966%" height="15" fill="rgb(233,84,52)"/><text x="35.6449%" y="191.50">m..</text></g><g><title>monomorphization_collector (5,670,084 samples, 2.30%)</title><rect x="35.3940%" y="197" width="2.3035%" height="15" fill="rgb(207,117,47)"/><text x="35.6440%" y="207.50">m..</text></g><g><title>assert_symbols_are_distinct (361,524 samples, 0.15%)</title><rect x="37.6987%" y="181" width="0.1469%" height="15" fill="rgb(249,43,39)"/><text x="37.9487%" y="191.50"></text></g><g><title>symbol_name (336,454 samples, 0.14%)</title><rect x="37.7089%" y="165" width="0.1367%" height="15" fill="rgb(209,38,44)"/><text x="37.9589%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (6,160,609 samples, 2.50%)</title><rect x="35.3835%" y="213" width="2.5028%" height="15" fill="rgb(236,212,23)"/><text x="35.6335%" y="223.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (464,535 samples, 0.19%)</title><rect x="37.6975%" y="197" width="0.1887%" height="15" fill="rgb(242,79,21)"/><text x="37.9475%" y="207.50"></text></g><g><title>codegen_crate (11,430,198 samples, 4.64%)</title><rect x="33.2688%" y="229" width="4.6436%" height="15" fill="rgb(211,96,35)"/><text x="33.5188%" y="239.50">codeg..</text></g><g><title>codegen_module_optimize (39,077,038 samples, 15.88%)</title><rect x="37.9124%" y="229" width="15.8753%" height="15" fill="rgb(253,215,40)"/><text x="38.1624%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (37,249,687 samples, 15.13%)</title><rect x="38.6548%" y="213" width="15.1330%" height="15" fill="rgb(211,81,21)"/><text x="38.9048%" y="223.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (8,276,413 samples, 3.36%)</title><rect x="54.3774%" y="213" width="3.3624%" height="15" fill="rgb(208,190,38)"/><text x="54.6274%" y="223.50">LLV..</text></g><g><title>LLVM_module_codegen (18,038,133 samples, 7.33%)</title><rect x="57.7397%" y="213" width="7.3281%" height="15" fill="rgb(235,213,38)"/><text x="57.9897%" y="223.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (17,793,550 samples, 7.23%)</title><rect x="57.8391%" y="197" width="7.2288%" height="15" fill="rgb(237,122,38)"/><text x="58.0891%" y="207.50">LLVM_modul..</text></g><g><title>codegen_module_perform_lto (28,062,004 samples, 11.40%)</title><rect x="53.7877%" y="229" width="11.4004%" height="15" fill="rgb(244,218,35)"/><text x="54.0377%" y="239.50">codegen_module_pe..</text></g><g><title>macro_expand_crate (12,745,253 samples, 5.18%)</title><rect x="65.3867%" y="213" width="5.1779%" height="15" fill="rgb(240,68,47)"/><text x="65.6367%" y="223.50">macro_..</text></g><g><title>expand_crate (12,721,493 samples, 5.17%)</title><rect x="65.3964%" y="197" width="5.1682%" height="15" fill="rgb(210,16,53)"/><text x="65.6464%" y="207.50">expand..</text></g><g><title>metadata_register_crate (2,885,972 samples, 1.17%)</title><rect x="69.3921%" y="181" width="1.1724%" height="15" fill="rgb(235,124,12)"/><text x="69.6421%" y="191.50"></text></g><g><title>metadata_register_crate (985,842 samples, 0.40%)</title><rect x="70.1641%" y="165" width="0.4005%" height="15" fill="rgb(224,169,11)"/><text x="70.4141%" y="175.50"></text></g><g><title>finalize_imports (527,996 samples, 0.21%)</title><rect x="70.6211%" y="197" width="0.2145%" height="15" fill="rgb(250,166,2)"/><text x="70.8711%" y="207.50"></text></g><g><title>late_resolve_crate (8,337,363 samples, 3.39%)</title><rect x="70.8403%" y="197" width="3.3871%" height="15" fill="rgb(242,216,29)"/><text x="71.0903%" y="207.50">lat..</text></g><g><title>configure_and_expand (22,308,490 samples, 9.06%)</title><rect x="65.1881%" y="229" width="9.0630%" height="15" fill="rgb(230,116,27)"/><text x="65.4381%" y="239.50">configure_and..</text></g><g><title>resolve_crate (8,946,290 samples, 3.63%)</title><rect x="70.6166%" y="213" width="3.6345%" height="15" fill="rgb(228,99,48)"/><text x="70.8666%" y="223.50">reso..</text></g><g><title>free_global_ctxt (2,740,211 samples, 1.11%)</title><rect x="74.3435%" y="229" width="1.1132%" height="15" fill="rgb(253,11,6)"/><text x="74.5935%" y="239.50"></text></g><g><title>layout_of (267,793 samples, 0.11%)</title><rect x="75.7932%" y="197" width="0.1088%" height="15" fill="rgb(247,143,39)"/><text x="76.0432%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (600,577 samples, 0.24%)</title><rect x="75.9020%" y="197" width="0.2440%" height="15" fill="rgb(236,97,10)"/><text x="76.1520%" y="207.50"></text></g><g><title>optimized_mir (1,308,684 samples, 0.53%)</title><rect x="75.6365%" y="213" width="0.5317%" height="15" fill="rgb(233,208,19)"/><text x="75.8865%" y="223.50"></text></g><g><title>generate_crate_metadata (1,777,610 samples, 0.72%)</title><rect x="75.4567%" y="229" width="0.7222%" height="15" fill="rgb(216,164,2)"/><text x="75.7067%" y="239.50"></text></g><g><title>hir_lowering (799,329 samples, 0.32%)</title><rect x="76.1789%" y="229" width="0.3247%" height="15" fill="rgb(220,129,5)"/><text x="76.4289%" y="239.50"></text></g><g><title>finish_ongoing_codegen (54,748,804 samples, 22.24%)</title><rect x="76.5089%" y="213" width="22.2421%" height="15" fill="rgb(242,17,10)"/><text x="76.7589%" y="223.50">finish_ongoing_codegen</text></g><g><title>join_worker_thread (263,662 samples, 0.11%)</title><rect x="98.6439%" y="197" width="0.1071%" height="15" fill="rgb(242,107,0)"/><text x="98.8939%" y="207.50"></text></g><g><title>link_crate (593,566 samples, 0.24%)</title><rect x="98.7510%" y="213" width="0.2411%" height="15" fill="rgb(251,28,31)"/><text x="99.0010%" y="223.50"></text></g><g><title>link_binary (579,926 samples, 0.24%)</title><rect x="98.7566%" y="197" width="0.2356%" height="15" fill="rgb(233,223,10)"/><text x="99.0066%" y="207.50"></text></g><g><title>link_rlib (351,334 samples, 0.14%)</title><rect x="98.8495%" y="181" width="0.1427%" height="15" fill="rgb(215,21,27)"/><text x="99.0995%" y="191.50"></text></g><g><title>link (55,363,790 samples, 22.49%)</title><rect x="76.5036%" y="229" width="22.4920%" height="15" fill="rgb(232,23,21)"/><text x="76.7536%" y="239.50">link</text></g><g><title>parse_crate (1,193,214 samples, 0.48%)</title><rect x="98.9956%" y="229" width="0.4848%" height="15" fill="rgb(244,5,23)"/><text x="99.2456%" y="239.50"></text></g><g><title>prepare_outputs (368,964 samples, 0.15%)</title><rect x="99.4845%" y="229" width="0.1499%" height="15" fill="rgb(226,81,46)"/><text x="99.7345%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (440,125 samples, 0.18%)</title><rect x="99.6344%" y="229" width="0.1788%" height="15" fill="rgb(247,70,30)"/><text x="99.8844%" y="239.50"></text></g><g><title>all (246,149,159 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (246,149,159 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (308,683 samples, 0.13%)</title><rect x="99.8746%" y="229" width="0.1254%" height="15" fill="rgb(223,113,26)"/><text x="100.1246%" y="239.50"></text></g></svg></svg>