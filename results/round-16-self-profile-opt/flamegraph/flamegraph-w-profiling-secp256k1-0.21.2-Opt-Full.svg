<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (210,130,596 samples, 12.60%)</title><rect x="0.0717%" y="149" width="12.5965%" height="15" fill="rgb(227,0,7)"/><text x="0.3217%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (2,006,383 samples, 0.12%)</title><rect x="12.5480%" y="133" width="0.1203%" height="15" fill="rgb(217,0,24)"/><text x="12.7980%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,944,882 samples, 0.12%)</title><rect x="12.5516%" y="117" width="0.1166%" height="15" fill="rgb(221,193,54)"/><text x="12.8016%" y="127.50"></text></g><g><title>resolve_instance (3,227,708 samples, 0.19%)</title><rect x="16.3172%" y="37" width="0.1935%" height="15" fill="rgb(248,212,6)"/><text x="16.5672%" y="47.50"></text></g><g><title>thir_body (3,732,326 samples, 0.22%)</title><rect x="16.5164%" y="37" width="0.2237%" height="15" fill="rgb(208,68,35)"/><text x="16.7664%" y="47.50"></text></g><g><title>mir_const (24,282,018 samples, 1.46%)</title><rect x="15.2878%" y="85" width="1.4556%" height="15" fill="rgb(232,128,0)"/><text x="15.5378%" y="95.50"></text></g><g><title>unsafety_check_result (20,962,112 samples, 1.26%)</title><rect x="15.4868%" y="69" width="1.2566%" height="15" fill="rgb(207,160,47)"/><text x="15.7368%" y="79.50"></text></g><g><title>mir_built (18,811,112 samples, 1.13%)</title><rect x="15.6158%" y="53" width="1.1277%" height="15" fill="rgb(228,23,34)"/><text x="15.8658%" y="63.50"></text></g><g><title>mir_const_qualif (2,365,865 samples, 0.14%)</title><rect x="16.7434%" y="85" width="0.1418%" height="15" fill="rgb(218,30,26)"/><text x="16.9934%" y="95.50"></text></g><g><title>mir_promoted (29,619,874 samples, 1.78%)</title><rect x="15.1097%" y="101" width="1.7756%" height="15" fill="rgb(220,122,19)"/><text x="15.3597%" y="111.50">m..</text></g><g><title>type_op_normalize_fn_sig (1,839,666 samples, 0.11%)</title><rect x="16.9446%" y="101" width="0.1103%" height="15" fill="rgb(250,228,42)"/><text x="17.1946%" y="111.50"></text></g><g><title>type_op_prove_predicate (4,773,914 samples, 0.29%)</title><rect x="17.0713%" y="101" width="0.2862%" height="15" fill="rgb(240,193,28)"/><text x="17.3213%" y="111.50"></text></g><g><title>MIR_borrow_checking (77,403,001 samples, 4.64%)</title><rect x="12.7184%" y="133" width="4.6400%" height="15" fill="rgb(216,20,37)"/><text x="12.9684%" y="143.50">MIR_b..</text></g><g><title>mir_borrowck (76,810,357 samples, 4.60%)</title><rect x="12.7539%" y="117" width="4.6045%" height="15" fill="rgb(206,188,39)"/><text x="13.0039%" y="127.50">mir_b..</text></g><g><title>misc_checking_1 (3,918,514 samples, 0.23%)</title><rect x="17.4593%" y="133" width="0.2349%" height="15" fill="rgb(217,207,13)"/><text x="17.7093%" y="143.50"></text></g><g><title>misc_checking_2 (3,173,426 samples, 0.19%)</title><rect x="17.6942%" y="133" width="0.1902%" height="15" fill="rgb(231,73,38)"/><text x="17.9442%" y="143.50"></text></g><g><title>match_checking (1,668,869 samples, 0.10%)</title><rect x="17.7844%" y="117" width="0.1000%" height="15" fill="rgb(225,20,46)"/><text x="18.0344%" y="127.50"></text></g><g><title>crate_lints (4,132,896 samples, 0.25%)</title><rect x="18.0158%" y="101" width="0.2478%" height="15" fill="rgb(210,31,41)"/><text x="18.2658%" y="111.50"></text></g><g><title>lint_checking (5,571,373 samples, 0.33%)</title><rect x="18.0156%" y="117" width="0.3340%" height="15" fill="rgb(221,200,47)"/><text x="18.2656%" y="127.50"></text></g><g><title>privacy_checking_modules (2,721,380 samples, 0.16%)</title><rect x="18.4372%" y="117" width="0.1631%" height="15" fill="rgb(226,26,5)"/><text x="18.6872%" y="127.50"></text></g><g><title>check_mod_privacy (2,712,840 samples, 0.16%)</title><rect x="18.4377%" y="101" width="0.1626%" height="15" fill="rgb(249,33,26)"/><text x="18.6877%" y="111.50"></text></g><g><title>misc_checking_3 (11,978,415 samples, 0.72%)</title><rect x="17.8844%" y="133" width="0.7181%" height="15" fill="rgb(235,183,28)"/><text x="18.1344%" y="143.50"></text></g><g><title>eval_to_const_value_raw (2,111,374 samples, 0.13%)</title><rect x="18.6470%" y="85" width="0.1266%" height="15" fill="rgb(221,5,38)"/><text x="18.8970%" y="95.50"></text></g><g><title>eval_to_const_value_raw (2,099,534 samples, 0.13%)</title><rect x="18.6477%" y="69" width="0.1259%" height="15" fill="rgb(247,18,42)"/><text x="18.8977%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,094,764 samples, 0.13%)</title><rect x="18.6480%" y="53" width="0.1256%" height="15" fill="rgb(241,131,45)"/><text x="18.8980%" y="63.50"></text></g><g><title>impl_parent (3,143,139 samples, 0.19%)</title><rect x="19.1198%" y="69" width="0.1884%" height="15" fill="rgb(249,31,29)"/><text x="19.3698%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,869,439 samples, 0.11%)</title><rect x="19.1961%" y="53" width="0.1121%" height="15" fill="rgb(225,111,53)"/><text x="19.4461%" y="63.50"></text></g><g><title>impl_trait_ref (6,141,044 samples, 0.37%)</title><rect x="19.3082%" y="69" width="0.3681%" height="15" fill="rgb(238,160,17)"/><text x="19.5582%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,863,938 samples, 0.29%)</title><rect x="19.3847%" y="53" width="0.2916%" height="15" fill="rgb(214,148,48)"/><text x="19.6347%" y="63.50"></text></g><g><title>coherent_trait (19,195,676 samples, 1.15%)</title><rect x="18.6211%" y="101" width="1.1507%" height="15" fill="rgb(232,36,49)"/><text x="18.8711%" y="111.50"></text></g><g><title>specialization_graph_of (16,382,915 samples, 0.98%)</title><rect x="18.7897%" y="85" width="0.9821%" height="15" fill="rgb(209,103,24)"/><text x="19.0397%" y="95.50"></text></g><g><title>coherence_checking (19,457,409 samples, 1.17%)</title><rect x="18.6188%" y="117" width="1.1664%" height="15" fill="rgb(229,88,8)"/><text x="18.8688%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,163,581 samples, 0.13%)</title><rect x="24.2090%" y="69" width="0.1297%" height="15" fill="rgb(213,181,19)"/><text x="24.4590%" y="79.50"></text></g><g><title>eval_to_allocation_raw (2,120,851 samples, 0.13%)</title><rect x="24.2116%" y="53" width="0.1271%" height="15" fill="rgb(254,191,54)"/><text x="24.4616%" y="63.50"></text></g><g><title>specializes (2,951,835 samples, 0.18%)</title><rect x="25.1014%" y="53" width="0.1770%" height="15" fill="rgb(241,83,37)"/><text x="25.3514%" y="63.50"></text></g><g><title>param_env (1,728,331 samples, 0.10%)</title><rect x="25.1748%" y="37" width="0.1036%" height="15" fill="rgb(233,36,39)"/><text x="25.4248%" y="47.50"></text></g><g><title>evaluate_obligation (16,590,366 samples, 0.99%)</title><rect x="24.3387%" y="69" width="0.9945%" height="15" fill="rgb(226,3,54)"/><text x="24.5887%" y="79.50"></text></g><g><title>typeck (2,205,795 samples, 0.13%)</title><rect x="25.6422%" y="69" width="0.1322%" height="15" fill="rgb(245,192,40)"/><text x="25.8922%" y="79.50"></text></g><g><title>item_bodies_checking (99,942,955 samples, 5.99%)</title><rect x="19.7930%" y="117" width="5.9912%" height="15" fill="rgb(238,167,29)"/><text x="20.0430%" y="127.50">item_bod..</text></g><g><title>typeck_item_bodies (99,938,685 samples, 5.99%)</title><rect x="19.7932%" y="101" width="5.9909%" height="15" fill="rgb(232,182,51)"/><text x="20.0432%" y="111.50">typeck_i..</text></g><g><title>typeck (99,504,437 samples, 5.96%)</title><rect x="19.8193%" y="85" width="5.9649%" height="15" fill="rgb(231,60,39)"/><text x="20.0693%" y="95.50">typeck</text></g><g><title>item_types_checking (3,972,315 samples, 0.24%)</title><rect x="25.7842%" y="117" width="0.2381%" height="15" fill="rgb(208,69,12)"/><text x="26.0342%" y="127.50"></text></g><g><title>check_mod_item_types (3,960,605 samples, 0.24%)</title><rect x="25.7849%" y="101" width="0.2374%" height="15" fill="rgb(235,93,37)"/><text x="26.0349%" y="111.50"></text></g><g><title>type_collecting (6,065,588 samples, 0.36%)</title><rect x="26.0227%" y="117" width="0.3636%" height="15" fill="rgb(213,116,39)"/><text x="26.2727%" y="127.50"></text></g><g><title>collect_mod_item_types (6,051,108 samples, 0.36%)</title><rect x="26.0236%" y="101" width="0.3627%" height="15" fill="rgb(222,207,29)"/><text x="26.2736%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,735,312 samples, 0.10%)</title><rect x="26.8654%" y="85" width="0.1040%" height="15" fill="rgb(206,96,30)"/><text x="27.1154%" y="95.50"></text></g><g><title>eval_to_const_value_raw (1,726,462 samples, 0.10%)</title><rect x="26.8659%" y="69" width="0.1035%" height="15" fill="rgb(218,138,4)"/><text x="27.1159%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,711,292 samples, 0.10%)</title><rect x="26.8668%" y="53" width="0.1026%" height="15" fill="rgb(250,191,14)"/><text x="27.1168%" y="63.50"></text></g><g><title>check_impl_item_well_formed (13,215,898 samples, 0.79%)</title><rect x="26.4352%" y="101" width="0.7922%" height="15" fill="rgb(239,60,40)"/><text x="26.6852%" y="111.50"></text></g><g><title>check_item_well_formed (7,721,397 samples, 0.46%)</title><rect x="27.2274%" y="101" width="0.4629%" height="15" fill="rgb(206,27,48)"/><text x="27.4774%" y="111.50"></text></g><g><title>analysis (250,686,133 samples, 15.03%)</title><rect x="12.6682%" y="149" width="15.0276%" height="15" fill="rgb(225,35,8)"/><text x="12.9182%" y="159.50">analysis</text></g><g><title>type_check_crate (151,693,078 samples, 9.09%)</title><rect x="18.6025%" y="133" width="9.0934%" height="15" fill="rgb(250,213,24)"/><text x="18.8525%" y="143.50">type_check_cr..</text></g><g><title>wf_checking (21,815,876 samples, 1.31%)</title><rect x="26.3881%" y="117" width="1.3078%" height="15" fill="rgb(247,123,22)"/><text x="26.6381%" y="127.50"></text></g><g><title>param_env (2,501,888 samples, 0.15%)</title><rect x="30.1922%" y="101" width="0.1500%" height="15" fill="rgb(231,138,38)"/><text x="30.4422%" y="111.50"></text></g><g><title>fn_abi_of_instance (7,931,738 samples, 0.48%)</title><rect x="29.9057%" y="117" width="0.4755%" height="15" fill="rgb(231,145,46)"/><text x="30.1557%" y="127.50"></text></g><g><title>codegen_module (43,980,273 samples, 2.64%)</title><rect x="27.8062%" y="133" width="2.6364%" height="15" fill="rgb(251,118,11)"/><text x="28.0562%" y="143.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (4,695,127 samples, 0.28%)</title><rect x="31.0493%" y="69" width="0.2815%" height="15" fill="rgb(217,147,25)"/><text x="31.2993%" y="79.50"></text></g><g><title>optimized_mir (13,168,757 samples, 0.79%)</title><rect x="30.6341%" y="85" width="0.7894%" height="15" fill="rgb(247,81,37)"/><text x="30.8841%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (2,003,692 samples, 0.12%)</title><rect x="31.4614%" y="69" width="0.1201%" height="15" fill="rgb(209,12,38)"/><text x="31.7114%" y="79.50"></text></g><g><title>resolve_instance (3,230,190 samples, 0.19%)</title><rect x="31.4235%" y="85" width="0.1936%" height="15" fill="rgb(227,1,9)"/><text x="31.6735%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (19,963,075 samples, 1.20%)</title><rect x="30.4458%" y="101" width="1.1967%" height="15" fill="rgb(248,47,43)"/><text x="30.6958%" y="111.50"></text></g><g><title>monomorphization_collector (20,178,068 samples, 1.21%)</title><rect x="30.4457%" y="117" width="1.2096%" height="15" fill="rgb(221,10,30)"/><text x="30.6957%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (22,139,030 samples, 1.33%)</title><rect x="30.4434%" y="133" width="1.3271%" height="15" fill="rgb(210,229,1)"/><text x="30.6934%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,922,202 samples, 0.12%)</title><rect x="31.6553%" y="117" width="0.1152%" height="15" fill="rgb(222,148,37)"/><text x="31.9053%" y="127.50"></text></g><g><title>codegen_crate (68,026,736 samples, 4.08%)</title><rect x="27.6966%" y="149" width="4.0779%" height="15" fill="rgb(234,67,33)"/><text x="27.9466%" y="159.50">code..</text></g><g><title>codegen_module_optimize (394,199,311 samples, 23.63%)</title><rect x="31.7746%" y="149" width="23.6307%" height="15" fill="rgb(247,98,35)"/><text x="32.0246%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (370,492,154 samples, 22.21%)</title><rect x="33.1957%" y="133" width="22.2095%" height="15" fill="rgb(247,138,52)"/><text x="33.4457%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (218,264,366 samples, 13.08%)</title><rect x="56.3527%" y="133" width="13.0841%" height="15" fill="rgb(213,79,30)"/><text x="56.6027%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (213,432,284 samples, 12.79%)</title><rect x="69.4367%" y="133" width="12.7944%" height="15" fill="rgb(246,177,23)"/><text x="69.6867%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (211,068,287 samples, 12.65%)</title><rect x="69.5785%" y="117" width="12.6527%" height="15" fill="rgb(230,62,27)"/><text x="69.8285%" y="127.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (16,582,293 samples, 0.99%)</title><rect x="82.2312%" y="133" width="0.9940%" height="15" fill="rgb(216,154,8)"/><text x="82.4812%" y="143.50"></text></g><g><title>codegen_module_perform_lto (465,182,376 samples, 27.89%)</title><rect x="55.4052%" y="149" width="27.8858%" height="15" fill="rgb(244,35,45)"/><text x="55.6552%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,030,173 samples, 0.12%)</title><rect x="86.0795%" y="101" width="0.1217%" height="15" fill="rgb(251,115,12)"/><text x="86.3295%" y="111.50"></text></g><g><title>macro_expand_crate (49,135,713 samples, 2.95%)</title><rect x="83.3421%" y="133" width="2.9455%" height="15" fill="rgb(240,54,50)"/><text x="83.5921%" y="143.50">ma..</text></g><g><title>expand_crate (49,121,463 samples, 2.94%)</title><rect x="83.3429%" y="117" width="2.9446%" height="15" fill="rgb(233,84,52)"/><text x="83.5929%" y="127.50">ex..</text></g><g><title>late_resolve_crate (5,238,699 samples, 0.31%)</title><rect x="86.3417%" y="117" width="0.3140%" height="15" fill="rgb(207,117,47)"/><text x="86.5917%" y="127.50"></text></g><g><title>configure_and_expand (56,447,356 samples, 3.38%)</title><rect x="83.2911%" y="149" width="3.3838%" height="15" fill="rgb(249,43,39)"/><text x="83.5411%" y="159.50">con..</text></g><g><title>resolve_crate (5,943,868 samples, 0.36%)</title><rect x="86.3185%" y="133" width="0.3563%" height="15" fill="rgb(209,38,44)"/><text x="86.5685%" y="143.50"></text></g><g><title>free_global_ctxt (8,918,510 samples, 0.53%)</title><rect x="86.7912%" y="149" width="0.5346%" height="15" fill="rgb(236,212,23)"/><text x="87.0412%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,633,474 samples, 0.34%)</title><rect x="88.2386%" y="117" width="0.3377%" height="15" fill="rgb(242,79,21)"/><text x="88.4886%" y="127.50"></text></g><g><title>optimized_mir (14,388,780 samples, 0.86%)</title><rect x="87.7419%" y="133" width="0.8625%" height="15" fill="rgb(211,96,35)"/><text x="87.9919%" y="143.50"></text></g><g><title>generate_crate_metadata (21,672,874 samples, 1.30%)</title><rect x="87.3259%" y="149" width="1.2992%" height="15" fill="rgb(253,215,40)"/><text x="87.5759%" y="159.50"></text></g><g><title>hir_lowering (10,134,103 samples, 0.61%)</title><rect x="88.6251%" y="149" width="0.6075%" height="15" fill="rgb(211,81,21)"/><text x="88.8751%" y="159.50"></text></g><g><title>finish_ongoing_codegen (163,460,191 samples, 9.80%)</title><rect x="89.2339%" y="133" width="9.7988%" height="15" fill="rgb(208,190,38)"/><text x="89.4839%" y="143.50">finish_ongoing..</text></g><g><title>link_crate (2,186,845 samples, 0.13%)</title><rect x="99.0327%" y="133" width="0.1311%" height="15" fill="rgb(235,213,38)"/><text x="99.2827%" y="143.50"></text></g><g><title>link_binary (2,098,744 samples, 0.13%)</title><rect x="99.0380%" y="117" width="0.1258%" height="15" fill="rgb(237,122,38)"/><text x="99.2880%" y="127.50"></text></g><g><title>link (165,680,676 samples, 9.93%)</title><rect x="89.2326%" y="149" width="9.9319%" height="15" fill="rgb(244,218,35)"/><text x="89.4826%" y="159.50">link</text></g><g><title>parse_crate (9,240,274 samples, 0.55%)</title><rect x="99.1645%" y="149" width="0.5539%" height="15" fill="rgb(240,68,47)"/><text x="99.4145%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (3,810,683 samples, 0.23%)</title><rect x="99.7323%" y="149" width="0.2284%" height="15" fill="rgb(210,16,53)"/><text x="99.9823%" y="159.50"></text></g><g><title>all (1,668,167,854 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (1,668,167,854 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>