<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (29,727,228 samples, 17.14%)</title><rect x="0.3327%" y="181" width="17.1358%" height="15" fill="rgb(227,0,7)"/><text x="0.5827%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (189,182 samples, 0.11%)</title><rect x="17.3595%" y="165" width="0.1091%" height="15" fill="rgb(217,0,24)"/><text x="17.6095%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (178,102 samples, 0.10%)</title><rect x="17.3659%" y="149" width="0.1027%" height="15" fill="rgb(221,193,54)"/><text x="17.6159%" y="159.50"></text></g><g><title>needs_drop_raw (266,772 samples, 0.15%)</title><rect x="18.6855%" y="69" width="0.1538%" height="15" fill="rgb(248,212,6)"/><text x="18.9355%" y="79.50"></text></g><g><title>is_copy_raw (212,362 samples, 0.12%)</title><rect x="18.7169%" y="53" width="0.1224%" height="15" fill="rgb(208,68,35)"/><text x="18.9669%" y="63.50"></text></g><g><title>evaluate_obligation (195,342 samples, 0.11%)</title><rect x="18.7267%" y="37" width="0.1126%" height="15" fill="rgb(232,128,0)"/><text x="18.9767%" y="47.50"></text></g><g><title>mir_const (1,037,972 samples, 0.60%)</title><rect x="18.3562%" y="117" width="0.5983%" height="15" fill="rgb(207,160,47)"/><text x="18.6062%" y="127.50"></text></g><g><title>unsafety_check_result (843,639 samples, 0.49%)</title><rect x="18.4682%" y="101" width="0.4863%" height="15" fill="rgb(228,23,34)"/><text x="18.7182%" y="111.50"></text></g><g><title>mir_built (746,517 samples, 0.43%)</title><rect x="18.5242%" y="85" width="0.4303%" height="15" fill="rgb(218,30,26)"/><text x="18.7742%" y="95.50"></text></g><g><title>mir_promoted (1,199,622 samples, 0.69%)</title><rect x="18.2684%" y="133" width="0.6915%" height="15" fill="rgb(220,122,19)"/><text x="18.5184%" y="143.50"></text></g><g><title>type_op_prove_predicate (175,301 samples, 0.10%)</title><rect x="19.0361%" y="133" width="0.1010%" height="15" fill="rgb(250,228,42)"/><text x="19.2861%" y="143.50"></text></g><g><title>MIR_borrow_checking (2,750,981 samples, 1.59%)</title><rect x="17.5529%" y="165" width="1.5858%" height="15" fill="rgb(240,193,28)"/><text x="17.8029%" y="175.50"></text></g><g><title>mir_borrowck (2,737,511 samples, 1.58%)</title><rect x="17.5607%" y="149" width="1.5780%" height="15" fill="rgb(216,20,37)"/><text x="17.8107%" y="159.50"></text></g><g><title>codegen_fn_attrs (255,542 samples, 0.15%)</title><rect x="19.3452%" y="101" width="0.1473%" height="15" fill="rgb(206,188,39)"/><text x="19.5952%" y="111.50"></text></g><g><title>codegen_fn_attrs (366,684 samples, 0.21%)</title><rect x="19.2830%" y="133" width="0.2114%" height="15" fill="rgb(217,207,13)"/><text x="19.5330%" y="143.50"></text></g><g><title>should_inherit_track_caller (327,374 samples, 0.19%)</title><rect x="19.3056%" y="117" width="0.1887%" height="15" fill="rgb(231,73,38)"/><text x="19.5556%" y="127.50"></text></g><g><title>check_mod_attrs (475,135 samples, 0.27%)</title><rect x="19.2207%" y="149" width="0.2739%" height="15" fill="rgb(225,20,46)"/><text x="19.4707%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (279,683 samples, 0.16%)</title><rect x="19.5329%" y="149" width="0.1612%" height="15" fill="rgb(210,31,41)"/><text x="19.7829%" y="159.50"></text></g><g><title>misc_checking_1 (896,590 samples, 0.52%)</title><rect x="19.2063%" y="165" width="0.5168%" height="15" fill="rgb(221,200,47)"/><text x="19.4563%" y="175.50"></text></g><g><title>misc_checking_2 (191,102 samples, 0.11%)</title><rect x="19.7231%" y="165" width="0.1102%" height="15" fill="rgb(226,26,5)"/><text x="19.9731%" y="175.50"></text></g><g><title>crate_lints (1,536,718 samples, 0.89%)</title><rect x="19.9428%" y="133" width="0.8858%" height="15" fill="rgb(249,33,26)"/><text x="20.1928%" y="143.50"></text></g><g><title>type_of (1,017,963 samples, 0.59%)</title><rect x="20.2419%" y="117" width="0.5868%" height="15" fill="rgb(235,183,28)"/><text x="20.4919%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (786,097 samples, 0.45%)</title><rect x="20.3755%" y="101" width="0.4531%" height="15" fill="rgb(221,5,38)"/><text x="20.6255%" y="111.50"></text></g><g><title>lint_checking (1,583,539 samples, 0.91%)</title><rect x="19.9418%" y="149" width="0.9128%" height="15" fill="rgb(247,18,42)"/><text x="20.1918%" y="159.50"></text></g><g><title>misc_checking_3 (1,939,773 samples, 1.12%)</title><rect x="19.8333%" y="165" width="1.1182%" height="15" fill="rgb(241,131,45)"/><text x="20.0833%" y="175.50"></text></g><g><title>impl_trait_ref (186,481 samples, 0.11%)</title><rect x="21.2068%" y="69" width="0.1075%" height="15" fill="rgb(249,31,29)"/><text x="21.4568%" y="79.50"></text></g><g><title>adt_destructor (567,956 samples, 0.33%)</title><rect x="21.0015%" y="117" width="0.3274%" height="15" fill="rgb(225,111,53)"/><text x="21.2515%" y="127.50"></text></g><g><title>coherent_trait (557,186 samples, 0.32%)</title><rect x="21.0077%" y="101" width="0.3212%" height="15" fill="rgb(238,160,17)"/><text x="21.2577%" y="111.50"></text></g><g><title>specialization_graph_of (556,106 samples, 0.32%)</title><rect x="21.0084%" y="85" width="0.3206%" height="15" fill="rgb(214,148,48)"/><text x="21.2584%" y="95.50"></text></g><g><title>impl_parent (2,601,937 samples, 1.50%)</title><rect x="24.0317%" y="101" width="1.4998%" height="15" fill="rgb(232,36,49)"/><text x="24.2817%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,497,975 samples, 0.86%)</title><rect x="24.6681%" y="85" width="0.8635%" height="15" fill="rgb(209,103,24)"/><text x="24.9181%" y="95.50"></text></g><g><title>impl_trait_ref (7,223,331 samples, 4.16%)</title><rect x="25.5316%" y="101" width="4.1638%" height="15" fill="rgb(229,88,8)"/><text x="25.7816%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,108,899 samples, 3.52%)</title><rect x="26.1740%" y="85" width="3.5214%" height="15" fill="rgb(213,181,19)"/><text x="26.4240%" y="95.50">met..</text></g><g><title>coherent_trait (16,214,555 samples, 9.35%)</title><rect x="20.9822%" y="133" width="9.3466%" height="15" fill="rgb(254,191,54)"/><text x="21.2322%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (15,504,507 samples, 8.94%)</title><rect x="21.3915%" y="117" width="8.9373%" height="15" fill="rgb(241,83,37)"/><text x="21.6415%" y="127.50">specializatio..</text></g><g><title>trait_impls_of (1,097,213 samples, 0.63%)</title><rect x="29.6963%" y="101" width="0.6325%" height="15" fill="rgb(233,36,39)"/><text x="29.9463%" y="111.50"></text></g><g><title>implementations_of_trait (251,552 samples, 0.15%)</title><rect x="30.1838%" y="85" width="0.1450%" height="15" fill="rgb(226,3,54)"/><text x="30.4338%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (199,311 samples, 0.11%)</title><rect x="30.2139%" y="69" width="0.1149%" height="15" fill="rgb(245,192,40)"/><text x="30.4639%" y="79.50"></text></g><g><title>coherence_checking (16,297,745 samples, 9.39%)</title><rect x="20.9682%" y="149" width="9.3946%" height="15" fill="rgb(238,167,29)"/><text x="21.2182%" y="159.50">coherence_che..</text></g><g><title>evaluate_obligation (365,713 samples, 0.21%)</title><rect x="31.5470%" y="101" width="0.2108%" height="15" fill="rgb(232,182,51)"/><text x="31.7970%" y="111.50"></text></g><g><title>item_bodies_checking (2,829,253 samples, 1.63%)</title><rect x="30.3797%" y="149" width="1.6309%" height="15" fill="rgb(231,60,39)"/><text x="30.6297%" y="159.50"></text></g><g><title>typeck_item_bodies (2,827,452 samples, 1.63%)</title><rect x="30.3807%" y="133" width="1.6298%" height="15" fill="rgb(208,69,12)"/><text x="30.6307%" y="143.50"></text></g><g><title>typeck (2,815,811 samples, 1.62%)</title><rect x="30.3875%" y="117" width="1.6231%" height="15" fill="rgb(235,93,37)"/><text x="30.6375%" y="127.50"></text></g><g><title>item_types_checking (224,592 samples, 0.13%)</title><rect x="32.0106%" y="149" width="0.1295%" height="15" fill="rgb(213,116,39)"/><text x="32.2606%" y="159.50"></text></g><g><title>check_mod_item_types (222,402 samples, 0.13%)</title><rect x="32.0119%" y="133" width="0.1282%" height="15" fill="rgb(222,207,29)"/><text x="32.2619%" y="143.50"></text></g><g><title>type_collecting (712,888 samples, 0.41%)</title><rect x="32.1408%" y="149" width="0.4109%" height="15" fill="rgb(206,96,30)"/><text x="32.3908%" y="159.50"></text></g><g><title>collect_mod_item_types (703,658 samples, 0.41%)</title><rect x="32.1461%" y="133" width="0.4056%" height="15" fill="rgb(218,138,4)"/><text x="32.3961%" y="143.50"></text></g><g><title>evaluate_obligation (249,523 samples, 0.14%)</title><rect x="32.7252%" y="117" width="0.1438%" height="15" fill="rgb(250,191,14)"/><text x="32.9752%" y="127.50"></text></g><g><title>check_impl_item_well_formed (681,938 samples, 0.39%)</title><rect x="32.5711%" y="133" width="0.3931%" height="15" fill="rgb(239,60,40)"/><text x="32.8211%" y="143.50"></text></g><g><title>analysis (27,330,031 samples, 15.75%)</title><rect x="17.4686%" y="181" width="15.7540%" height="15" fill="rgb(206,27,48)"/><text x="17.7186%" y="191.50">analysis</text></g><g><title>type_check_crate (21,287,992 samples, 12.27%)</title><rect x="20.9514%" y="165" width="12.2712%" height="15" fill="rgb(225,35,8)"/><text x="21.2014%" y="175.50">type_check_crate</text></g><g><title>wf_checking (1,163,083 samples, 0.67%)</title><rect x="32.5521%" y="149" width="0.6704%" height="15" fill="rgb(250,213,24)"/><text x="32.8021%" y="159.50"></text></g><g><title>check_item_well_formed (448,285 samples, 0.26%)</title><rect x="32.9642%" y="133" width="0.2584%" height="15" fill="rgb(247,123,22)"/><text x="33.2142%" y="143.50"></text></g><g><title>param_env (269,865 samples, 0.16%)</title><rect x="35.8638%" y="133" width="0.1556%" height="15" fill="rgb(231,138,38)"/><text x="36.1138%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,145,702 samples, 0.66%)</title><rect x="35.4444%" y="149" width="0.6604%" height="15" fill="rgb(231,145,46)"/><text x="35.6944%" y="159.50"></text></g><g><title>layout_of (204,012 samples, 0.12%)</title><rect x="36.1879%" y="133" width="0.1176%" height="15" fill="rgb(251,118,11)"/><text x="36.4379%" y="143.50"></text></g><g><title>layout_of (275,863 samples, 0.16%)</title><rect x="36.1485%" y="149" width="0.1590%" height="15" fill="rgb(217,147,25)"/><text x="36.3985%" y="159.50"></text></g><g><title>codegen_module (4,406,940 samples, 2.54%)</title><rect x="33.7937%" y="165" width="2.5403%" height="15" fill="rgb(247,81,37)"/><text x="34.0437%" y="175.50">co..</text></g><g><title>layout_of (258,564 samples, 0.15%)</title><rect x="36.7696%" y="101" width="0.1490%" height="15" fill="rgb(209,12,38)"/><text x="37.0196%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (208,131 samples, 0.12%)</title><rect x="36.9187%" y="101" width="0.1200%" height="15" fill="rgb(227,1,9)"/><text x="37.1687%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (252,222 samples, 0.15%)</title><rect x="37.0386%" y="101" width="0.1454%" height="15" fill="rgb(248,47,43)"/><text x="37.2886%" y="111.50"></text></g><g><title>specialization_graph_of (363,144 samples, 0.21%)</title><rect x="37.3175%" y="85" width="0.2093%" height="15" fill="rgb(221,10,30)"/><text x="37.5675%" y="95.50"></text></g><g><title>resolve_instance (596,926 samples, 0.34%)</title><rect x="37.1840%" y="101" width="0.3441%" height="15" fill="rgb(210,229,1)"/><text x="37.4340%" y="111.50"></text></g><g><title>optimized_mir (1,803,500 samples, 1.04%)</title><rect x="36.5635%" y="117" width="1.0396%" height="15" fill="rgb(222,148,37)"/><text x="36.8135%" y="127.50"></text></g><g><title>specialization_graph_of (982,241 samples, 0.57%)</title><rect x="37.7132%" y="101" width="0.5662%" height="15" fill="rgb(234,67,33)"/><text x="37.9632%" y="111.50"></text></g><g><title>impl_trait_ref (510,107 samples, 0.29%)</title><rect x="37.9854%" y="85" width="0.2940%" height="15" fill="rgb(247,98,35)"/><text x="38.2354%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (426,297 samples, 0.25%)</title><rect x="38.0337%" y="69" width="0.2457%" height="15" fill="rgb(247,138,52)"/><text x="38.2837%" y="79.50"></text></g><g><title>resolve_instance (1,197,846 samples, 0.69%)</title><rect x="37.6031%" y="117" width="0.6905%" height="15" fill="rgb(213,79,30)"/><text x="37.8531%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (3,431,469 samples, 1.98%)</title><rect x="36.3514%" y="133" width="1.9780%" height="15" fill="rgb(246,177,23)"/><text x="36.6014%" y="143.50">m..</text></g><g><title>monomorphization_collector (3,456,739 samples, 1.99%)</title><rect x="36.3504%" y="149" width="1.9926%" height="15" fill="rgb(230,62,27)"/><text x="36.6004%" y="159.50">m..</text></g><g><title>collect_and_partition_mono_items (3,700,932 samples, 2.13%)</title><rect x="36.3357%" y="165" width="2.1333%" height="15" fill="rgb(216,154,8)"/><text x="36.5857%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (218,652 samples, 0.13%)</title><rect x="38.3430%" y="149" width="0.1260%" height="15" fill="rgb(244,35,45)"/><text x="38.5930%" y="159.50"></text></g><g><title>codegen_crate (9,236,085 samples, 5.32%)</title><rect x="33.2285%" y="181" width="5.3240%" height="15" fill="rgb(251,115,12)"/><text x="33.4785%" y="191.50">codegen..</text></g><g><title>codegen_module_optimize (18,689,483 samples, 10.77%)</title><rect x="38.5525%" y="181" width="10.7733%" height="15" fill="rgb(240,54,50)"/><text x="38.8025%" y="191.50">codegen_module_o..</text></g><g><title>LLVM_module_optimize (12,661,544 samples, 7.30%)</title><rect x="42.0272%" y="165" width="7.2986%" height="15" fill="rgb(233,84,52)"/><text x="42.2772%" y="175.50">LLVM_modul..</text></g><g><title>LLVM_lto_optimize (15,994,053 samples, 9.22%)</title><rect x="50.1852%" y="165" width="9.2195%" height="15" fill="rgb(207,117,47)"/><text x="50.4352%" y="175.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (25,814,302 samples, 14.88%)</title><rect x="59.4047%" y="165" width="14.8803%" height="15" fill="rgb(249,43,39)"/><text x="59.6547%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (25,361,418 samples, 14.62%)</title><rect x="59.6658%" y="149" width="14.6192%" height="15" fill="rgb(209,38,44)"/><text x="59.9158%" y="159.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (1,629,978 samples, 0.94%)</title><rect x="74.2850%" y="165" width="0.9396%" height="15" fill="rgb(236,212,23)"/><text x="74.5350%" y="175.50"></text></g><g><title>codegen_module_perform_lto (45,047,762 samples, 25.97%)</title><rect x="49.3258%" y="181" width="25.9671%" height="15" fill="rgb(242,79,21)"/><text x="49.5758%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_load_macro (201,614 samples, 0.12%)</title><rect x="79.6951%" y="133" width="0.1162%" height="15" fill="rgb(211,96,35)"/><text x="79.9451%" y="143.50"></text></g><g><title>macro_expand_crate (9,902,742 samples, 5.71%)</title><rect x="75.5309%" y="165" width="5.7083%" height="15" fill="rgb(253,215,40)"/><text x="75.7809%" y="175.50">macro_e..</text></g><g><title>expand_crate (9,881,372 samples, 5.70%)</title><rect x="75.5433%" y="149" width="5.6960%" height="15" fill="rgb(211,81,21)"/><text x="75.7933%" y="159.50">expand_..</text></g><g><title>metadata_register_crate (2,477,089 samples, 1.43%)</title><rect x="79.8114%" y="133" width="1.4279%" height="15" fill="rgb(208,190,38)"/><text x="80.0614%" y="143.50"></text></g><g><title>metadata_register_crate (2,178,225 samples, 1.26%)</title><rect x="79.9836%" y="117" width="1.2556%" height="15" fill="rgb(235,213,38)"/><text x="80.2336%" y="127.50"></text></g><g><title>metadata_register_crate (1,730,660 samples, 1.00%)</title><rect x="80.2416%" y="101" width="0.9976%" height="15" fill="rgb(237,122,38)"/><text x="80.4916%" y="111.50"></text></g><g><title>metadata_register_crate (672,048 samples, 0.39%)</title><rect x="80.8518%" y="85" width="0.3874%" height="15" fill="rgb(244,218,35)"/><text x="81.1018%" y="95.50"></text></g><g><title>finalize_macro_resolutions (199,452 samples, 0.11%)</title><rect x="81.3555%" y="149" width="0.1150%" height="15" fill="rgb(240,68,47)"/><text x="81.6055%" y="159.50"></text></g><g><title>late_resolve_crate (924,660 samples, 0.53%)</title><rect x="81.4705%" y="149" width="0.5330%" height="15" fill="rgb(210,16,53)"/><text x="81.7205%" y="159.50"></text></g><g><title>configure_and_expand (11,692,583 samples, 6.74%)</title><rect x="75.2929%" y="181" width="6.7400%" height="15" fill="rgb(235,124,12)"/><text x="75.5429%" y="191.50">configure..</text></g><g><title>resolve_crate (1,244,965 samples, 0.72%)</title><rect x="81.3153%" y="165" width="0.7176%" height="15" fill="rgb(224,169,11)"/><text x="81.5653%" y="175.50"></text></g><g><title>free_global_ctxt (3,866,254 samples, 2.23%)</title><rect x="82.1454%" y="181" width="2.2286%" height="15" fill="rgb(250,166,2)"/><text x="82.3954%" y="191.50">f..</text></g><g><title>optimized_mir (213,482 samples, 0.12%)</title><rect x="84.6782%" y="165" width="0.1231%" height="15" fill="rgb(242,216,29)"/><text x="84.9282%" y="175.50"></text></g><g><title>generate_crate_metadata (751,278 samples, 0.43%)</title><rect x="84.3740%" y="181" width="0.4331%" height="15" fill="rgb(230,116,27)"/><text x="84.6240%" y="191.50"></text></g><g><title>hir_lowering (783,169 samples, 0.45%)</title><rect x="84.8071%" y="181" width="0.4514%" height="15" fill="rgb(228,99,48)"/><text x="85.0571%" y="191.50"></text></g><g><title>finish_ongoing_codegen (22,401,725 samples, 12.91%)</title><rect x="85.2681%" y="165" width="12.9131%" height="15" fill="rgb(253,11,6)"/><text x="85.5181%" y="175.50">finish_ongoing_code..</text></g><g><title>link_crate (676,818 samples, 0.39%)</title><rect x="98.1812%" y="165" width="0.3901%" height="15" fill="rgb(247,143,39)"/><text x="98.4312%" y="175.50"></text></g><g><title>link_binary (663,358 samples, 0.38%)</title><rect x="98.1890%" y="149" width="0.3824%" height="15" fill="rgb(236,97,10)"/><text x="98.4390%" y="159.50"></text></g><g><title>link_rlib (411,005 samples, 0.24%)</title><rect x="98.3345%" y="133" width="0.2369%" height="15" fill="rgb(233,208,19)"/><text x="98.5845%" y="143.50"></text></g><g><title>link (23,104,413 samples, 13.32%)</title><rect x="85.2585%" y="181" width="13.3182%" height="15" fill="rgb(216,164,2)"/><text x="85.5085%" y="191.50">link</text></g><g><title>parse_crate (866,630 samples, 0.50%)</title><rect x="98.5767%" y="181" width="0.4996%" height="15" fill="rgb(220,129,5)"/><text x="98.8267%" y="191.50"></text></g><g><title>prepare_outputs (291,694 samples, 0.17%)</title><rect x="99.0808%" y="181" width="0.1681%" height="15" fill="rgb(242,17,10)"/><text x="99.3308%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (872,960 samples, 0.50%)</title><rect x="99.2489%" y="181" width="0.5032%" height="15" fill="rgb(242,107,0)"/><text x="99.4989%" y="191.50"></text></g><g><title>all (173,479,983 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (173,479,983 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (308,514 samples, 0.18%)</title><rect x="99.8222%" y="181" width="0.1778%" height="15" fill="rgb(215,21,27)"/><text x="100.0722%" y="191.50"></text></g></svg></svg>