<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (364,854,024 samples, 12.32%)</title><rect x="0.0232%" y="165" width="12.3225%" height="15" fill="rgb(227,0,7)"/><text x="0.2732%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (4,930,795 samples, 0.17%)</title><rect x="12.1792%" y="149" width="0.1665%" height="15" fill="rgb(217,0,24)"/><text x="12.4292%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (4,864,484 samples, 0.16%)</title><rect x="12.1815%" y="133" width="0.1643%" height="15" fill="rgb(221,193,54)"/><text x="12.4315%" y="143.50"></text></g><g><title>specialization_graph_of (3,344,519 samples, 0.11%)</title><rect x="14.7810%" y="37" width="0.1130%" height="15" fill="rgb(248,212,6)"/><text x="15.0310%" y="47.50"></text></g><g><title>resolve_instance (4,826,214 samples, 0.16%)</title><rect x="14.7362%" y="53" width="0.1630%" height="15" fill="rgb(208,68,35)"/><text x="14.9862%" y="63.50"></text></g><g><title>thir_body (4,396,323 samples, 0.15%)</title><rect x="14.9018%" y="53" width="0.1485%" height="15" fill="rgb(232,128,0)"/><text x="15.1518%" y="63.50"></text></g><g><title>mir_const (27,212,675 samples, 0.92%)</title><rect x="14.1330%" y="101" width="0.9191%" height="15" fill="rgb(207,160,47)"/><text x="14.3830%" y="111.50"></text></g><g><title>unsafety_check_result (24,198,762 samples, 0.82%)</title><rect x="14.2348%" y="85" width="0.8173%" height="15" fill="rgb(228,23,34)"/><text x="14.4848%" y="95.50"></text></g><g><title>mir_built (22,301,745 samples, 0.75%)</title><rect x="14.2989%" y="69" width="0.7532%" height="15" fill="rgb(218,30,26)"/><text x="14.5489%" y="79.50"></text></g><g><title>mir_const_qualif (7,578,083 samples, 0.26%)</title><rect x="15.0521%" y="101" width="0.2559%" height="15" fill="rgb(220,122,19)"/><text x="15.3021%" y="111.50"></text></g><g><title>mir_const (3,301,324 samples, 0.11%)</title><rect x="15.1965%" y="85" width="0.1115%" height="15" fill="rgb(250,228,42)"/><text x="15.4465%" y="95.50"></text></g><g><title>mir_promoted (38,483,258 samples, 1.30%)</title><rect x="14.0083%" y="117" width="1.2997%" height="15" fill="rgb(240,193,28)"/><text x="14.2583%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,174,759 samples, 0.24%)</title><rect x="15.4142%" y="117" width="0.2423%" height="15" fill="rgb(216,20,37)"/><text x="15.6642%" y="127.50"></text></g><g><title>MIR_borrow_checking (96,976,910 samples, 3.28%)</title><rect x="12.3818%" y="149" width="3.2753%" height="15" fill="rgb(206,188,39)"/><text x="12.6318%" y="159.50">MIR..</text></g><g><title>mir_borrowck (96,404,057 samples, 3.26%)</title><rect x="12.4011%" y="133" width="3.2559%" height="15" fill="rgb(217,207,13)"/><text x="12.6511%" y="143.50">mir..</text></g><g><title>misc_checking_1 (3,692,711 samples, 0.12%)</title><rect x="15.7558%" y="149" width="0.1247%" height="15" fill="rgb(231,73,38)"/><text x="16.0058%" y="159.50"></text></g><g><title>eval_to_const_value_raw (3,539,258 samples, 0.12%)</title><rect x="16.1980%" y="101" width="0.1195%" height="15" fill="rgb(225,20,46)"/><text x="16.4480%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,518,968 samples, 0.12%)</title><rect x="16.1987%" y="85" width="0.1188%" height="15" fill="rgb(210,31,41)"/><text x="16.4487%" y="95.50"></text></g><g><title>eval_to_allocation_raw (3,477,028 samples, 0.12%)</title><rect x="16.2001%" y="69" width="0.1174%" height="15" fill="rgb(221,200,47)"/><text x="16.4501%" y="79.50"></text></g><g><title>misc_checking_2 (19,223,823 samples, 0.65%)</title><rect x="15.8805%" y="149" width="0.6493%" height="15" fill="rgb(226,26,5)"/><text x="16.1305%" y="159.50"></text></g><g><title>match_checking (17,781,927 samples, 0.60%)</title><rect x="15.9292%" y="133" width="0.6006%" height="15" fill="rgb(249,33,26)"/><text x="16.1792%" y="143.50"></text></g><g><title>check_match (17,579,695 samples, 0.59%)</title><rect x="15.9360%" y="117" width="0.5937%" height="15" fill="rgb(235,183,28)"/><text x="16.1860%" y="127.50"></text></g><g><title>visible_parent_map (4,579,701 samples, 0.15%)</title><rect x="16.3751%" y="101" width="0.1547%" height="15" fill="rgb(221,5,38)"/><text x="16.6251%" y="111.50"></text></g><g><title>module_children (4,139,366 samples, 0.14%)</title><rect x="16.3899%" y="85" width="0.1398%" height="15" fill="rgb(247,18,42)"/><text x="16.6399%" y="95.50"></text></g><g><title>metadata_decode_entry_module_children (4,074,386 samples, 0.14%)</title><rect x="16.3921%" y="69" width="0.1376%" height="15" fill="rgb(241,131,45)"/><text x="16.6421%" y="79.50"></text></g><g><title>crate_lints (3,598,710 samples, 0.12%)</title><rect x="16.6028%" y="117" width="0.1215%" height="15" fill="rgb(249,31,29)"/><text x="16.8528%" y="127.50"></text></g><g><title>lint_checking (5,373,210 samples, 0.18%)</title><rect x="16.6027%" y="133" width="0.1815%" height="15" fill="rgb(225,111,53)"/><text x="16.8527%" y="143.50"></text></g><g><title>privacy_checking_modules (4,828,874 samples, 0.16%)</title><rect x="16.8334%" y="133" width="0.1631%" height="15" fill="rgb(238,160,17)"/><text x="17.0834%" y="143.50"></text></g><g><title>check_mod_privacy (4,822,384 samples, 0.16%)</title><rect x="16.8336%" y="117" width="0.1629%" height="15" fill="rgb(214,148,48)"/><text x="17.0836%" y="127.50"></text></g><g><title>misc_checking_3 (13,845,284 samples, 0.47%)</title><rect x="16.5298%" y="149" width="0.4676%" height="15" fill="rgb(232,36,49)"/><text x="16.7798%" y="159.50"></text></g><g><title>impl_parent (3,551,834 samples, 0.12%)</title><rect x="17.2328%" y="85" width="0.1200%" height="15" fill="rgb(209,103,24)"/><text x="17.4828%" y="95.50"></text></g><g><title>impl_trait_ref (7,212,263 samples, 0.24%)</title><rect x="17.3527%" y="85" width="0.2436%" height="15" fill="rgb(229,88,8)"/><text x="17.6027%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,798,888 samples, 0.20%)</title><rect x="17.4005%" y="69" width="0.1959%" height="15" fill="rgb(213,181,19)"/><text x="17.6505%" y="79.50"></text></g><g><title>coherent_trait (18,833,941 samples, 0.64%)</title><rect x="17.0058%" y="117" width="0.6361%" height="15" fill="rgb(254,191,54)"/><text x="17.2558%" y="127.50"></text></g><g><title>specialization_graph_of (18,266,784 samples, 0.62%)</title><rect x="17.0250%" y="101" width="0.6169%" height="15" fill="rgb(241,83,37)"/><text x="17.2750%" y="111.50"></text></g><g><title>coherence_checking (19,002,432 samples, 0.64%)</title><rect x="17.0047%" y="133" width="0.6418%" height="15" fill="rgb(233,36,39)"/><text x="17.2547%" y="143.50"></text></g><g><title>evaluate_obligation (5,261,717 samples, 0.18%)</title><rect x="20.1807%" y="85" width="0.1777%" height="15" fill="rgb(226,3,54)"/><text x="20.4307%" y="95.50"></text></g><g><title>evaluate_obligation (3,096,447 samples, 0.10%)</title><rect x="20.8469%" y="69" width="0.1046%" height="15" fill="rgb(245,192,40)"/><text x="21.0969%" y="79.50"></text></g><g><title>typeck (15,942,108 samples, 0.54%)</title><rect x="20.4681%" y="85" width="0.5384%" height="15" fill="rgb(238,167,29)"/><text x="20.7181%" y="95.50"></text></g><g><title>item_bodies_checking (99,186,745 samples, 3.35%)</title><rect x="17.6616%" y="133" width="3.3499%" height="15" fill="rgb(232,182,51)"/><text x="17.9116%" y="143.50">ite..</text></g><g><title>typeck_item_bodies (99,183,015 samples, 3.35%)</title><rect x="17.6617%" y="117" width="3.3498%" height="15" fill="rgb(231,60,39)"/><text x="17.9117%" y="127.50">typ..</text></g><g><title>typeck (98,796,804 samples, 3.34%)</title><rect x="17.6748%" y="101" width="3.3368%" height="15" fill="rgb(208,69,12)"/><text x="17.9248%" y="111.50">typ..</text></g><g><title>item_types_checking (4,048,385 samples, 0.14%)</title><rect x="21.0115%" y="133" width="0.1367%" height="15" fill="rgb(235,93,37)"/><text x="21.2615%" y="143.50"></text></g><g><title>check_mod_item_types (4,041,995 samples, 0.14%)</title><rect x="21.0117%" y="117" width="0.1365%" height="15" fill="rgb(213,116,39)"/><text x="21.2617%" y="127.50"></text></g><g><title>type_collecting (6,486,062 samples, 0.22%)</title><rect x="21.1484%" y="133" width="0.2191%" height="15" fill="rgb(222,207,29)"/><text x="21.3984%" y="143.50"></text></g><g><title>collect_mod_item_types (6,470,842 samples, 0.22%)</title><rect x="21.1489%" y="117" width="0.2185%" height="15" fill="rgb(206,96,30)"/><text x="21.3989%" y="127.50"></text></g><g><title>check_impl_item_well_formed (11,326,638 samples, 0.38%)</title><rect x="21.3915%" y="117" width="0.3825%" height="15" fill="rgb(218,138,4)"/><text x="21.6415%" y="127.50"></text></g><g><title>check_item_well_formed (7,570,537 samples, 0.26%)</title><rect x="21.7740%" y="117" width="0.2557%" height="15" fill="rgb(250,191,14)"/><text x="22.0240%" y="127.50"></text></g><g><title>analysis (287,428,491 samples, 9.71%)</title><rect x="12.3458%" y="165" width="9.7076%" height="15" fill="rgb(239,60,40)"/><text x="12.5958%" y="175.50">analysis</text></g><g><title>type_check_crate (149,700,788 samples, 5.06%)</title><rect x="16.9974%" y="149" width="5.0560%" height="15" fill="rgb(206,27,48)"/><text x="17.2474%" y="159.50">type_c..</text></g><g><title>wf_checking (20,281,616 samples, 0.68%)</title><rect x="21.3684%" y="133" width="0.6850%" height="15" fill="rgb(225,35,8)"/><text x="21.6184%" y="143.50"></text></g><g><title>param_env (6,098,510 samples, 0.21%)</title><rect x="25.3048%" y="117" width="0.2060%" height="15" fill="rgb(250,213,24)"/><text x="25.5548%" y="127.50"></text></g><g><title>fn_abi_of_instance (21,076,846 samples, 0.71%)</title><rect x="24.8725%" y="133" width="0.7118%" height="15" fill="rgb(247,123,22)"/><text x="25.1225%" y="143.50"></text></g><g><title>codegen_module (105,287,742 samples, 3.56%)</title><rect x="22.1373%" y="149" width="3.5560%" height="15" fill="rgb(231,138,38)"/><text x="22.3873%" y="159.50">code..</text></g><g><title>codegen_fn_attrs (3,238,641 samples, 0.11%)</title><rect x="25.8541%" y="101" width="0.1094%" height="15" fill="rgb(231,145,46)"/><text x="26.1041%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,784,332 samples, 0.13%)</title><rect x="26.3338%" y="85" width="0.1278%" height="15" fill="rgb(251,118,11)"/><text x="26.5838%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,520,044 samples, 0.25%)</title><rect x="26.4617%" y="85" width="0.2540%" height="15" fill="rgb(217,147,25)"/><text x="26.7117%" y="95.50"></text></g><g><title>eval_to_const_value_raw (4,107,638 samples, 0.14%)</title><rect x="26.7295%" y="69" width="0.1387%" height="15" fill="rgb(247,81,37)"/><text x="26.9795%" y="79.50"></text></g><g><title>eval_to_const_value_raw (3,981,756 samples, 0.13%)</title><rect x="26.7338%" y="53" width="0.1345%" height="15" fill="rgb(209,12,38)"/><text x="26.9838%" y="63.50"></text></g><g><title>eval_to_allocation_raw (3,822,882 samples, 0.13%)</title><rect x="26.7392%" y="37" width="0.1291%" height="15" fill="rgb(227,1,9)"/><text x="26.9892%" y="47.50"></text></g><g><title>optimized_mir (25,209,107 samples, 0.85%)</title><rect x="26.0173%" y="101" width="0.8514%" height="15" fill="rgb(248,47,43)"/><text x="26.2673%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,397,050 samples, 0.15%)</title><rect x="26.7202%" y="85" width="0.1485%" height="15" fill="rgb(221,10,30)"/><text x="26.9702%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (6,836,833 samples, 0.23%)</title><rect x="26.9401%" y="85" width="0.2309%" height="15" fill="rgb(210,229,1)"/><text x="27.1901%" y="95.50"></text></g><g><title>resolve_instance (12,679,320 samples, 0.43%)</title><rect x="26.8687%" y="101" width="0.4282%" height="15" fill="rgb(222,148,37)"/><text x="27.1187%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (49,702,394 samples, 1.68%)</title><rect x="25.6958%" y="117" width="1.6786%" height="15" fill="rgb(234,67,33)"/><text x="25.9458%" y="127.50"></text></g><g><title>monomorphization_collector (49,906,856 samples, 1.69%)</title><rect x="25.6957%" y="133" width="1.6855%" height="15" fill="rgb(247,98,35)"/><text x="25.9457%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (3,479,119 samples, 0.12%)</title><rect x="27.3814%" y="117" width="0.1175%" height="15" fill="rgb(247,138,52)"/><text x="27.6314%" y="127.50"></text></g><g><title>symbol_name (3,110,447 samples, 0.11%)</title><rect x="27.3939%" y="101" width="0.1051%" height="15" fill="rgb(213,79,30)"/><text x="27.6439%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (54,848,691 samples, 1.85%)</title><rect x="25.6936%" y="149" width="1.8525%" height="15" fill="rgb(246,177,23)"/><text x="25.9436%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (4,878,744 samples, 0.16%)</title><rect x="27.3812%" y="133" width="0.1648%" height="15" fill="rgb(230,62,27)"/><text x="27.6312%" y="143.50"></text></g><g><title>codegen_crate (162,751,222 samples, 5.50%)</title><rect x="22.0537%" y="165" width="5.4967%" height="15" fill="rgb(216,154,8)"/><text x="22.3037%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (724,591,077 samples, 24.47%)</title><rect x="27.5505%" y="165" width="24.4723%" height="15" fill="rgb(244,35,45)"/><text x="27.8005%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (688,588,426 samples, 23.26%)</title><rect x="28.7664%" y="149" width="23.2563%" height="15" fill="rgb(251,115,12)"/><text x="29.0164%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (422,680,526 samples, 14.28%)</title><rect x="52.9049%" y="149" width="14.2756%" height="15" fill="rgb(240,54,50)"/><text x="53.1549%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (404,719,017 samples, 13.67%)</title><rect x="67.1804%" y="149" width="13.6689%" height="15" fill="rgb(233,84,52)"/><text x="67.4304%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (401,056,515 samples, 13.55%)</title><rect x="67.3041%" y="133" width="13.5452%" height="15" fill="rgb(207,117,47)"/><text x="67.5541%" y="143.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (74,636,692 samples, 2.52%)</title><rect x="80.8494%" y="149" width="2.5208%" height="15" fill="rgb(249,43,39)"/><text x="81.0994%" y="159.50">LL..</text></g><g><title>codegen_module_perform_lto (930,834,441 samples, 31.44%)</title><rect x="52.0227%" y="165" width="31.4379%" height="15" fill="rgb(209,38,44)"/><text x="52.2727%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (4,245,178 samples, 0.14%)</title><rect x="84.6350%" y="117" width="0.1434%" height="15" fill="rgb(236,212,23)"/><text x="84.8850%" y="127.50"></text></g><g><title>macro_expand_crate (38,918,333 samples, 1.31%)</title><rect x="83.4872%" y="149" width="1.3144%" height="15" fill="rgb(242,79,21)"/><text x="83.7372%" y="159.50"></text></g><g><title>expand_crate (38,897,293 samples, 1.31%)</title><rect x="83.4879%" y="133" width="1.3137%" height="15" fill="rgb(211,96,35)"/><text x="83.7379%" y="143.50"></text></g><g><title>late_resolve_crate (6,153,229 samples, 0.21%)</title><rect x="84.8296%" y="133" width="0.2078%" height="15" fill="rgb(253,215,40)"/><text x="85.0796%" y="143.50"></text></g><g><title>configure_and_expand (47,007,783 samples, 1.59%)</title><rect x="83.4607%" y="165" width="1.5876%" height="15" fill="rgb(211,81,21)"/><text x="83.7107%" y="175.50"></text></g><g><title>resolve_crate (6,845,166 samples, 0.23%)</title><rect x="84.8171%" y="149" width="0.2312%" height="15" fill="rgb(208,190,38)"/><text x="85.0671%" y="159.50"></text></g><g><title>free_global_ctxt (14,087,627 samples, 0.48%)</title><rect x="85.1280%" y="165" width="0.4758%" height="15" fill="rgb(235,213,38)"/><text x="85.3780%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,437,765 samples, 0.18%)</title><rect x="86.0709%" y="133" width="0.1837%" height="15" fill="rgb(237,122,38)"/><text x="86.3209%" y="143.50"></text></g><g><title>optimized_mir (11,305,056 samples, 0.38%)</title><rect x="85.8752%" y="149" width="0.3818%" height="15" fill="rgb(244,218,35)"/><text x="86.1252%" y="159.50"></text></g><g><title>generate_crate_metadata (19,678,639 samples, 0.66%)</title><rect x="85.6037%" y="165" width="0.6646%" height="15" fill="rgb(240,68,47)"/><text x="85.8537%" y="175.50"></text></g><g><title>hir_lowering (11,484,428 samples, 0.39%)</title><rect x="86.2684%" y="165" width="0.3879%" height="15" fill="rgb(210,16,53)"/><text x="86.5184%" y="175.50"></text></g><g><title>finish_ongoing_codegen (264,095,231 samples, 8.92%)</title><rect x="86.6610%" y="149" width="8.9195%" height="15" fill="rgb(235,124,12)"/><text x="86.9110%" y="159.50">finish_ongoin..</text></g><g><title>link_binary_remove_temps (115,852,540 samples, 3.91%)</title><rect x="95.5929%" y="117" width="3.9128%" height="15" fill="rgb(224,169,11)"/><text x="95.8429%" y="127.50">link..</text></g><g><title>link_crate (117,773,301 samples, 3.98%)</title><rect x="95.5806%" y="149" width="3.9777%" height="15" fill="rgb(250,166,2)"/><text x="95.8306%" y="159.50">link..</text></g><g><title>link_binary (117,716,631 samples, 3.98%)</title><rect x="95.5825%" y="133" width="3.9758%" height="15" fill="rgb(242,216,29)"/><text x="95.8325%" y="143.50">link..</text></g><g><title>link (382,021,493 samples, 12.90%)</title><rect x="86.6562%" y="165" width="12.9024%" height="15" fill="rgb(230,116,27)"/><text x="86.9062%" y="175.50">link</text></g><g><title>parse_crate (8,027,580 samples, 0.27%)</title><rect x="99.5586%" y="165" width="0.2711%" height="15" fill="rgb(228,99,48)"/><text x="99.8086%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (4,134,136 samples, 0.14%)</title><rect x="99.8386%" y="165" width="0.1396%" height="15" fill="rgb(253,11,6)"/><text x="100.0886%" y="175.50"></text></g><g><title>all (2,960,866,016 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,960,866,016 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(236,97,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>