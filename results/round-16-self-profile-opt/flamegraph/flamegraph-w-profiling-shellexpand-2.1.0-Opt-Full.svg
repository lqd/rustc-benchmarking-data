<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (44,756,221 samples, 17.18%)</title><rect x="0.2798%" y="181" width="17.1777%" height="15" fill="rgb(227,0,7)"/><text x="0.5298%" y="191.50">LLVM_passes</text></g><g><title>adt_drop_tys (288,893 samples, 0.11%)</title><rect x="21.2504%" y="53" width="0.1109%" height="15" fill="rgb(217,0,24)"/><text x="21.5004%" y="63.50"></text></g><g><title>is_copy_raw (554,269 samples, 0.21%)</title><rect x="21.3613%" y="53" width="0.2127%" height="15" fill="rgb(221,193,54)"/><text x="21.6113%" y="63.50"></text></g><g><title>evaluate_obligation (447,117 samples, 0.17%)</title><rect x="21.4024%" y="37" width="0.1716%" height="15" fill="rgb(248,212,6)"/><text x="21.6524%" y="47.50"></text></g><g><title>needs_drop_raw (948,913 samples, 0.36%)</title><rect x="21.2130%" y="69" width="0.3642%" height="15" fill="rgb(208,68,35)"/><text x="21.4630%" y="79.50"></text></g><g><title>resolve_instance (433,647 samples, 0.17%)</title><rect x="21.5772%" y="69" width="0.1664%" height="15" fill="rgb(232,128,0)"/><text x="21.8272%" y="79.50"></text></g><g><title>thir_body (527,274 samples, 0.20%)</title><rect x="21.7506%" y="69" width="0.2024%" height="15" fill="rgb(207,160,47)"/><text x="22.0006%" y="79.50"></text></g><g><title>mir_const (4,547,040 samples, 1.75%)</title><rect x="20.2121%" y="117" width="1.7452%" height="15" fill="rgb(228,23,34)"/><text x="20.4621%" y="127.50"></text></g><g><title>unsafety_check_result (3,954,273 samples, 1.52%)</title><rect x="20.4396%" y="101" width="1.5177%" height="15" fill="rgb(218,30,26)"/><text x="20.6896%" y="111.50"></text></g><g><title>mir_built (3,502,488 samples, 1.34%)</title><rect x="20.6130%" y="85" width="1.3443%" height="15" fill="rgb(220,122,19)"/><text x="20.8630%" y="95.50"></text></g><g><title>mir_promoted (5,025,655 samples, 1.93%)</title><rect x="20.0354%" y="133" width="1.9289%" height="15" fill="rgb(250,228,42)"/><text x="20.2854%" y="143.50">m..</text></g><g><title>type_op_prove_predicate (2,005,088 samples, 0.77%)</title><rect x="22.1322%" y="133" width="0.7696%" height="15" fill="rgb(240,193,28)"/><text x="22.3822%" y="143.50"></text></g><g><title>MIR_borrow_checking (13,950,696 samples, 5.35%)</title><rect x="17.5519%" y="165" width="5.3544%" height="15" fill="rgb(216,20,37)"/><text x="17.8019%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (13,906,605 samples, 5.34%)</title><rect x="17.5688%" y="149" width="5.3374%" height="15" fill="rgb(206,188,39)"/><text x="17.8188%" y="159.50">mir_bor..</text></g><g><title>codegen_fn_attrs (270,053 samples, 0.10%)</title><rect x="23.0237%" y="133" width="0.1036%" height="15" fill="rgb(217,207,13)"/><text x="23.2737%" y="143.50"></text></g><g><title>check_mod_attrs (392,545 samples, 0.15%)</title><rect x="22.9768%" y="149" width="0.1507%" height="15" fill="rgb(231,73,38)"/><text x="23.2268%" y="159.50"></text></g><g><title>misc_checking_1 (791,108 samples, 0.30%)</title><rect x="22.9714%" y="165" width="0.3036%" height="15" fill="rgb(225,20,46)"/><text x="23.2214%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (283,413 samples, 0.11%)</title><rect x="23.2756%" y="149" width="0.1088%" height="15" fill="rgb(210,31,41)"/><text x="23.5256%" y="159.50"></text></g><g><title>misc_checking_2 (650,157 samples, 0.25%)</title><rect x="23.2750%" y="165" width="0.2495%" height="15" fill="rgb(221,200,47)"/><text x="23.5250%" y="175.50"></text></g><g><title>match_checking (365,194 samples, 0.14%)</title><rect x="23.3844%" y="149" width="0.1402%" height="15" fill="rgb(226,26,5)"/><text x="23.6344%" y="159.50"></text></g><g><title>check_match (352,394 samples, 0.14%)</title><rect x="23.3893%" y="133" width="0.1353%" height="15" fill="rgb(249,33,26)"/><text x="23.6393%" y="143.50"></text></g><g><title>death_checking (581,656 samples, 0.22%)</title><rect x="23.5561%" y="149" width="0.2232%" height="15" fill="rgb(235,183,28)"/><text x="23.8061%" y="159.50"></text></g><g><title>item_attrs (450,036 samples, 0.17%)</title><rect x="23.6066%" y="133" width="0.1727%" height="15" fill="rgb(221,5,38)"/><text x="23.8566%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (448,606 samples, 0.17%)</title><rect x="23.6071%" y="117" width="0.1722%" height="15" fill="rgb(247,18,42)"/><text x="23.8571%" y="127.50"></text></g><g><title>crate_lints (1,696,889 samples, 0.65%)</title><rect x="23.7800%" y="133" width="0.6513%" height="15" fill="rgb(241,131,45)"/><text x="24.0300%" y="143.50"></text></g><g><title>type_of (1,055,544 samples, 0.41%)</title><rect x="24.0262%" y="117" width="0.4051%" height="15" fill="rgb(249,31,29)"/><text x="24.2762%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (822,591 samples, 0.32%)</title><rect x="24.1156%" y="101" width="0.3157%" height="15" fill="rgb(225,111,53)"/><text x="24.3656%" y="111.50"></text></g><g><title>lint_checking (1,890,511 samples, 0.73%)</title><rect x="23.7793%" y="149" width="0.7256%" height="15" fill="rgb(238,160,17)"/><text x="24.0293%" y="159.50"></text></g><g><title>privacy_checking_modules (470,155 samples, 0.18%)</title><rect x="24.5505%" y="149" width="0.1804%" height="15" fill="rgb(214,148,48)"/><text x="24.8005%" y="159.50"></text></g><g><title>check_mod_privacy (468,815 samples, 0.18%)</title><rect x="24.5510%" y="133" width="0.1799%" height="15" fill="rgb(232,36,49)"/><text x="24.8010%" y="143.50"></text></g><g><title>misc_checking_3 (3,163,435 samples, 1.21%)</title><rect x="23.5245%" y="165" width="1.2141%" height="15" fill="rgb(209,103,24)"/><text x="23.7745%" y="175.50"></text></g><g><title>impl_parent (2,353,553 samples, 0.90%)</title><rect x="26.0073%" y="101" width="0.9033%" height="15" fill="rgb(229,88,8)"/><text x="26.2573%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,285,173 samples, 0.49%)</title><rect x="26.4173%" y="85" width="0.4933%" height="15" fill="rgb(213,181,19)"/><text x="26.6673%" y="95.50"></text></g><g><title>impl_trait_ref (4,871,699 samples, 1.87%)</title><rect x="26.9106%" y="101" width="1.8698%" height="15" fill="rgb(254,191,54)"/><text x="27.1606%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,026,248 samples, 1.55%)</title><rect x="27.2351%" y="85" width="1.5453%" height="15" fill="rgb(241,83,37)"/><text x="27.4851%" y="95.50"></text></g><g><title>coherent_trait (11,182,205 samples, 4.29%)</title><rect x="24.7588%" y="133" width="4.2918%" height="15" fill="rgb(233,36,39)"/><text x="25.0088%" y="143.50">coher..</text></g><g><title>specialization_graph_of (11,167,825 samples, 4.29%)</title><rect x="24.7643%" y="117" width="4.2863%" height="15" fill="rgb(226,3,54)"/><text x="25.0143%" y="127.50">speci..</text></g><g><title>trait_impls_of (701,990 samples, 0.27%)</title><rect x="28.7812%" y="101" width="0.2694%" height="15" fill="rgb(245,192,40)"/><text x="29.0312%" y="111.50"></text></g><g><title>coherence_checking (11,229,036 samples, 4.31%)</title><rect x="24.7522%" y="149" width="4.3098%" height="15" fill="rgb(238,167,29)"/><text x="25.0022%" y="159.50">coher..</text></g><g><title>evaluate_obligation (396,773 samples, 0.15%)</title><rect x="30.9016%" y="101" width="0.1523%" height="15" fill="rgb(232,182,51)"/><text x="31.1516%" y="111.50"></text></g><g><title>associated_items (542,678 samples, 0.21%)</title><rect x="34.9030%" y="85" width="0.2083%" height="15" fill="rgb(231,60,39)"/><text x="35.1530%" y="95.50"></text></g><g><title>dropck_outlives (447,966 samples, 0.17%)</title><rect x="35.1278%" y="85" width="0.1719%" height="15" fill="rgb(208,69,12)"/><text x="35.3778%" y="95.50"></text></g><g><title>impl_trait_ref (316,025 samples, 0.12%)</title><rect x="35.9090%" y="69" width="0.1213%" height="15" fill="rgb(235,93,37)"/><text x="36.1590%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (264,904 samples, 0.10%)</title><rect x="35.9286%" y="53" width="0.1017%" height="15" fill="rgb(213,116,39)"/><text x="36.1786%" y="63.50"></text></g><g><title>trait_impls_of (431,075 samples, 0.17%)</title><rect x="36.1937%" y="69" width="0.1654%" height="15" fill="rgb(222,207,29)"/><text x="36.4437%" y="79.50"></text></g><g><title>evaluate_obligation (2,768,682 samples, 1.06%)</title><rect x="35.2997%" y="85" width="1.0626%" height="15" fill="rgb(206,96,30)"/><text x="35.5497%" y="95.50"></text></g><g><title>is_copy_raw (363,435 samples, 0.14%)</title><rect x="36.5663%" y="85" width="0.1395%" height="15" fill="rgb(218,138,4)"/><text x="36.8163%" y="95.50"></text></g><g><title>evaluate_obligation (315,345 samples, 0.12%)</title><rect x="36.5848%" y="69" width="0.1210%" height="15" fill="rgb(250,191,14)"/><text x="36.8348%" y="79.50"></text></g><g><title>typeck (14,964,918 samples, 5.74%)</title><rect x="31.2306%" y="101" width="5.7436%" height="15" fill="rgb(239,60,40)"/><text x="31.4806%" y="111.50">typeck</text></g><g><title>item_bodies_checking (20,616,851 samples, 7.91%)</title><rect x="29.0658%" y="149" width="7.9129%" height="15" fill="rgb(206,27,48)"/><text x="29.3158%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (20,613,981 samples, 7.91%)</title><rect x="29.0669%" y="133" width="7.9118%" height="15" fill="rgb(225,35,8)"/><text x="29.3169%" y="143.50">typeck_item..</text></g><g><title>typeck (20,586,651 samples, 7.90%)</title><rect x="29.0774%" y="117" width="7.9013%" height="15" fill="rgb(250,213,24)"/><text x="29.3274%" y="127.50">typeck</text></g><g><title>adt_destructor (303,944 samples, 0.12%)</title><rect x="37.0660%" y="117" width="0.1167%" height="15" fill="rgb(247,123,22)"/><text x="37.3160%" y="127.50"></text></g><g><title>coherent_trait (301,044 samples, 0.12%)</title><rect x="37.0671%" y="101" width="0.1155%" height="15" fill="rgb(231,138,38)"/><text x="37.3171%" y="111.50"></text></g><g><title>specialization_graph_of (299,544 samples, 0.11%)</title><rect x="37.0677%" y="85" width="0.1150%" height="15" fill="rgb(231,145,46)"/><text x="37.3177%" y="95.50"></text></g><g><title>item_types_checking (572,177 samples, 0.22%)</title><rect x="36.9787%" y="149" width="0.2196%" height="15" fill="rgb(251,118,11)"/><text x="37.2287%" y="159.50"></text></g><g><title>check_mod_item_types (569,957 samples, 0.22%)</title><rect x="36.9796%" y="133" width="0.2188%" height="15" fill="rgb(217,147,25)"/><text x="37.2296%" y="143.50"></text></g><g><title>generics_of (328,172 samples, 0.13%)</title><rect x="37.3235%" y="117" width="0.1260%" height="15" fill="rgb(247,81,37)"/><text x="37.5735%" y="127.50"></text></g><g><title>explicit_predicates_of (475,615 samples, 0.18%)</title><rect x="37.4735%" y="85" width="0.1825%" height="15" fill="rgb(209,12,38)"/><text x="37.7235%" y="95.50"></text></g><g><title>predicates_of (556,105 samples, 0.21%)</title><rect x="37.4589%" y="117" width="0.2134%" height="15" fill="rgb(227,1,9)"/><text x="37.7089%" y="127.50"></text></g><g><title>predicates_defined_on (541,935 samples, 0.21%)</title><rect x="37.4644%" y="101" width="0.2080%" height="15" fill="rgb(248,47,43)"/><text x="37.7144%" y="111.50"></text></g><g><title>type_collecting (1,267,925 samples, 0.49%)</title><rect x="37.1987%" y="149" width="0.4866%" height="15" fill="rgb(221,10,30)"/><text x="37.4487%" y="159.50"></text></g><g><title>collect_mod_item_types (1,260,914 samples, 0.48%)</title><rect x="37.2014%" y="133" width="0.4839%" height="15" fill="rgb(210,229,1)"/><text x="37.4514%" y="143.50"></text></g><g><title>object_safety_violations (429,155 samples, 0.16%)</title><rect x="37.9407%" y="117" width="0.1647%" height="15" fill="rgb(222,148,37)"/><text x="38.1907%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,108,621 samples, 0.43%)</title><rect x="37.7164%" y="133" width="0.4255%" height="15" fill="rgb(234,67,33)"/><text x="37.9664%" y="143.50"></text></g><g><title>evaluate_obligation (293,373 samples, 0.11%)</title><rect x="38.6365%" y="117" width="0.1126%" height="15" fill="rgb(247,98,35)"/><text x="38.8865%" y="127.50"></text></g><g><title>analysis (56,314,201 samples, 21.61%)</title><rect x="17.4575%" y="181" width="21.6137%" height="15" fill="rgb(247,138,52)"/><text x="17.7075%" y="191.50">analysis</text></g><g><title>type_check_crate (37,343,109 samples, 14.33%)</title><rect x="24.7387%" y="165" width="14.3325%" height="15" fill="rgb(213,79,30)"/><text x="24.9887%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,609,050 samples, 1.39%)</title><rect x="37.6860%" y="149" width="1.3852%" height="15" fill="rgb(246,177,23)"/><text x="37.9360%" y="159.50"></text></g><g><title>check_item_well_formed (2,421,148 samples, 0.93%)</title><rect x="38.1419%" y="133" width="0.9293%" height="15" fill="rgb(230,62,27)"/><text x="38.3919%" y="143.50"></text></g><g><title>layout_of (581,579 samples, 0.22%)</title><rect x="41.9015%" y="133" width="0.2232%" height="15" fill="rgb(216,154,8)"/><text x="42.1515%" y="143.50"></text></g><g><title>predicates_of (297,194 samples, 0.11%)</title><rect x="42.3569%" y="117" width="0.1141%" height="15" fill="rgb(244,35,45)"/><text x="42.6069%" y="127.50"></text></g><g><title>param_env (905,743 samples, 0.35%)</title><rect x="42.1247%" y="133" width="0.3476%" height="15" fill="rgb(251,115,12)"/><text x="42.3747%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (318,765 samples, 0.12%)</title><rect x="42.4723%" y="133" width="0.1223%" height="15" fill="rgb(240,54,50)"/><text x="42.7223%" y="143.50"></text></g><g><title>fn_abi_of_instance (2,985,177 samples, 1.15%)</title><rect x="41.4510%" y="149" width="1.1457%" height="15" fill="rgb(233,84,52)"/><text x="41.7010%" y="159.50"></text></g><g><title>layout_of (292,954 samples, 0.11%)</title><rect x="42.6330%" y="149" width="0.1124%" height="15" fill="rgb(207,117,47)"/><text x="42.8830%" y="159.50"></text></g><g><title>codegen_module (8,845,189 samples, 3.39%)</title><rect x="39.3998%" y="165" width="3.3948%" height="15" fill="rgb(249,43,39)"/><text x="39.6498%" y="175.50">cod..</text></g><g><title>item_attrs (397,964 samples, 0.15%)</title><rect x="43.0376%" y="101" width="0.1527%" height="15" fill="rgb(209,38,44)"/><text x="43.2876%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (382,354 samples, 0.15%)</title><rect x="43.0436%" y="85" width="0.1467%" height="15" fill="rgb(236,212,23)"/><text x="43.2936%" y="95.50"></text></g><g><title>codegen_fn_attrs (694,087 samples, 0.27%)</title><rect x="42.9992%" y="117" width="0.2664%" height="15" fill="rgb(242,79,21)"/><text x="43.2492%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (736,568 samples, 0.28%)</title><rect x="43.3686%" y="101" width="0.2827%" height="15" fill="rgb(211,96,35)"/><text x="43.6186%" y="111.50"></text></g><g><title>optimized_mir (920,660 samples, 0.35%)</title><rect x="43.3281%" y="117" width="0.3534%" height="15" fill="rgb(253,215,40)"/><text x="43.5781%" y="127.50"></text></g><g><title>trait_impls_of (299,023 samples, 0.11%)</title><rect x="44.0956%" y="85" width="0.1148%" height="15" fill="rgb(211,81,21)"/><text x="44.3456%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,111,771 samples, 0.43%)</title><rect x="43.7841%" y="101" width="0.4267%" height="15" fill="rgb(208,190,38)"/><text x="44.0341%" y="111.50"></text></g><g><title>specialization_graph_of (971,539 samples, 0.37%)</title><rect x="44.3327%" y="101" width="0.3729%" height="15" fill="rgb(235,213,38)"/><text x="44.5827%" y="111.50"></text></g><g><title>impl_trait_ref (459,932 samples, 0.18%)</title><rect x="44.5291%" y="85" width="0.1765%" height="15" fill="rgb(237,122,38)"/><text x="44.7791%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (394,442 samples, 0.15%)</title><rect x="44.5542%" y="69" width="0.1514%" height="15" fill="rgb(244,218,35)"/><text x="44.8042%" y="79.50"></text></g><g><title>resolve_instance (2,821,533 samples, 1.08%)</title><rect x="43.6814%" y="117" width="1.0829%" height="15" fill="rgb(240,68,47)"/><text x="43.9314%" y="127.50"></text></g><g><title>eval_to_const_value_raw (411,095 samples, 0.16%)</title><rect x="44.7990%" y="101" width="0.1578%" height="15" fill="rgb(210,16,53)"/><text x="45.0490%" y="111.50"></text></g><g><title>eval_to_const_value_raw (402,105 samples, 0.15%)</title><rect x="44.8024%" y="85" width="0.1543%" height="15" fill="rgb(235,124,12)"/><text x="45.0524%" y="95.50"></text></g><g><title>eval_to_allocation_raw (385,114 samples, 0.15%)</title><rect x="44.8089%" y="69" width="0.1478%" height="15" fill="rgb(224,169,11)"/><text x="45.0589%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (5,617,613 samples, 2.16%)</title><rect x="42.8076%" y="133" width="2.1561%" height="15" fill="rgb(250,166,2)"/><text x="43.0576%" y="143.50">m..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (471,466 samples, 0.18%)</title><rect x="44.7827%" y="117" width="0.1810%" height="15" fill="rgb(242,216,29)"/><text x="45.0327%" y="127.50"></text></g><g><title>monomorphization_collector (5,641,623 samples, 2.17%)</title><rect x="42.8069%" y="149" width="2.1653%" height="15" fill="rgb(230,116,27)"/><text x="43.0569%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (534,256 samples, 0.21%)</title><rect x="44.9739%" y="133" width="0.2051%" height="15" fill="rgb(228,99,48)"/><text x="45.2239%" y="143.50"></text></g><g><title>symbol_name (489,305 samples, 0.19%)</title><rect x="44.9911%" y="117" width="0.1878%" height="15" fill="rgb(253,11,6)"/><text x="45.2411%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (6,361,281 samples, 2.44%)</title><rect x="42.7955%" y="165" width="2.4415%" height="15" fill="rgb(247,143,39)"/><text x="43.0455%" y="175.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (690,008 samples, 0.26%)</title><rect x="44.9722%" y="149" width="0.2648%" height="15" fill="rgb(236,97,10)"/><text x="45.2222%" y="159.50"></text></g><g><title>codegen_crate (16,119,301 samples, 6.19%)</title><rect x="39.0760%" y="181" width="6.1867%" height="15" fill="rgb(233,208,19)"/><text x="39.3260%" y="191.50">codegen_..</text></g><g><title>codegen_module_optimize (42,861,450 samples, 16.45%)</title><rect x="45.2627%" y="181" width="16.4505%" height="15" fill="rgb(216,164,2)"/><text x="45.5127%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (40,952,300 samples, 15.72%)</title><rect x="45.9955%" y="165" width="15.7177%" height="15" fill="rgb(220,129,5)"/><text x="46.2455%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (7,379,762 samples, 2.83%)</title><rect x="62.1031%" y="165" width="2.8324%" height="15" fill="rgb(242,17,10)"/><text x="62.3531%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen (12,336,429 samples, 4.73%)</title><rect x="64.9355%" y="165" width="4.7348%" height="15" fill="rgb(242,107,0)"/><text x="65.1855%" y="175.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (12,114,026 samples, 4.65%)</title><rect x="65.0209%" y="149" width="4.6494%" height="15" fill="rgb(251,28,31)"/><text x="65.2709%" y="159.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (20,954,494 samples, 8.04%)</title><rect x="61.7132%" y="181" width="8.0425%" height="15" fill="rgb(233,223,10)"/><text x="61.9632%" y="191.50">codegen_mod..</text></g><g><title>metadata_load_macro (292,734 samples, 0.11%)</title><rect x="74.8320%" y="133" width="0.1124%" height="15" fill="rgb(215,21,27)"/><text x="75.0820%" y="143.50"></text></g><g><title>macro_expand_crate (16,005,189 samples, 6.14%)</title><rect x="69.9634%" y="165" width="6.1429%" height="15" fill="rgb(232,23,21)"/><text x="70.2134%" y="175.50">macro_ex..</text></g><g><title>expand_crate (15,977,589 samples, 6.13%)</title><rect x="69.9740%" y="149" width="6.1323%" height="15" fill="rgb(244,5,23)"/><text x="70.2240%" y="159.50">expand_c..</text></g><g><title>metadata_register_crate (3,027,444 samples, 1.16%)</title><rect x="74.9444%" y="133" width="1.1620%" height="15" fill="rgb(226,81,46)"/><text x="75.1944%" y="143.50"></text></g><g><title>metadata_register_crate (1,125,414 samples, 0.43%)</title><rect x="75.6744%" y="117" width="0.4319%" height="15" fill="rgb(247,70,30)"/><text x="75.9244%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (296,133 samples, 0.11%)</title><rect x="76.1085%" y="165" width="0.1137%" height="15" fill="rgb(212,68,19)"/><text x="76.3585%" y="175.50"></text></g><g><title>late_resolve_crate (2,079,244 samples, 0.80%)</title><rect x="76.3025%" y="149" width="0.7980%" height="15" fill="rgb(240,187,13)"/><text x="76.5525%" y="159.50"></text></g><g><title>configure_and_expand (19,280,516 samples, 7.40%)</title><rect x="69.7556%" y="181" width="7.4000%" height="15" fill="rgb(223,113,26)"/><text x="70.0056%" y="191.50">configure_..</text></g><g><title>resolve_crate (2,432,147 samples, 0.93%)</title><rect x="76.2221%" y="165" width="0.9335%" height="15" fill="rgb(206,192,2)"/><text x="76.4721%" y="175.50"></text></g><g><title>early_lint_checks (381,864 samples, 0.15%)</title><rect x="77.2317%" y="181" width="0.1466%" height="15" fill="rgb(241,108,4)"/><text x="77.4817%" y="191.50"></text></g><g><title>free_global_ctxt (4,705,853 samples, 1.81%)</title><rect x="77.3782%" y="181" width="1.8061%" height="15" fill="rgb(247,173,49)"/><text x="77.6282%" y="191.50">f..</text></g><g><title>layout_of (260,683 samples, 0.10%)</title><rect x="80.4549%" y="133" width="0.1001%" height="15" fill="rgb(224,114,35)"/><text x="80.7049%" y="143.50"></text></g><g><title>layout_of (730,459 samples, 0.28%)</title><rect x="80.2909%" y="149" width="0.2804%" height="15" fill="rgb(245,159,27)"/><text x="80.5409%" y="159.50"></text></g><g><title>is_copy_raw (327,213 samples, 0.13%)</title><rect x="81.4076%" y="117" width="0.1256%" height="15" fill="rgb(245,172,44)"/><text x="81.6576%" y="127.50"></text></g><g><title>evaluate_obligation (271,833 samples, 0.10%)</title><rect x="81.4289%" y="101" width="0.1043%" height="15" fill="rgb(236,23,11)"/><text x="81.6789%" y="111.50"></text></g><g><title>needs_drop_raw (419,134 samples, 0.16%)</title><rect x="81.3892%" y="133" width="0.1609%" height="15" fill="rgb(205,117,38)"/><text x="81.6392%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,569,948 samples, 0.99%)</title><rect x="80.5713%" y="149" width="0.9864%" height="15" fill="rgb(237,72,25)"/><text x="80.8213%" y="159.50"></text></g><g><title>optimized_mir (5,155,239 samples, 1.98%)</title><rect x="79.6214%" y="165" width="1.9786%" height="15" fill="rgb(244,70,9)"/><text x="79.8714%" y="175.50">o..</text></g><g><title>generate_crate_metadata (6,400,672 samples, 2.46%)</title><rect x="79.1844%" y="181" width="2.4566%" height="15" fill="rgb(217,125,39)"/><text x="79.4344%" y="191.50">ge..</text></g><g><title>hir_lowering (2,296,806 samples, 0.88%)</title><rect x="81.6410%" y="181" width="0.8815%" height="15" fill="rgb(235,36,10)"/><text x="81.8910%" y="191.50"></text></g><g><title>finish_ongoing_codegen (36,910,274 samples, 14.17%)</title><rect x="82.5291%" y="165" width="14.1664%" height="15" fill="rgb(251,123,47)"/><text x="82.7791%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (850,069 samples, 0.33%)</title><rect x="96.6955%" y="165" width="0.3263%" height="15" fill="rgb(221,13,13)"/><text x="96.9455%" y="175.50"></text></g><g><title>link_binary (834,579 samples, 0.32%)</title><rect x="96.7014%" y="149" width="0.3203%" height="15" fill="rgb(238,131,9)"/><text x="96.9514%" y="159.50"></text></g><g><title>link_rlib (543,046 samples, 0.21%)</title><rect x="96.8133%" y="133" width="0.2084%" height="15" fill="rgb(211,50,8)"/><text x="97.0633%" y="143.50"></text></g><g><title>link (37,788,893 samples, 14.50%)</title><rect x="82.5225%" y="181" width="14.5036%" height="15" fill="rgb(245,182,24)"/><text x="82.7725%" y="191.50">link</text></g><g><title>parse_crate (5,570,402 samples, 2.14%)</title><rect x="97.0261%" y="181" width="2.1380%" height="15" fill="rgb(242,14,37)"/><text x="97.2761%" y="191.50">p..</text></g><g><title>prepare_outputs (271,043 samples, 0.10%)</title><rect x="99.1680%" y="181" width="0.1040%" height="15" fill="rgb(246,228,12)"/><text x="99.4180%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,431,896 samples, 0.55%)</title><rect x="99.2720%" y="181" width="0.5496%" height="15" fill="rgb(213,55,15)"/><text x="99.5220%" y="191.50"></text></g><g><title>all (260,548,418 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,9,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (260,548,418 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (349,984 samples, 0.13%)</title><rect x="99.8657%" y="181" width="0.1343%" height="15" fill="rgb(209,121,21)"/><text x="100.1157%" y="191.50"></text></g></svg></svg>