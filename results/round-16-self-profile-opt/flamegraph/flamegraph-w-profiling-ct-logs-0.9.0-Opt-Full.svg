<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,312,727 samples, 19.76%)</title><rect x="0.6073%" y="229" width="19.7580%" height="15" fill="rgb(227,0,7)"/><text x="0.8573%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (341,594 samples, 0.55%)</title><rect x="19.8172%" y="213" width="0.5482%" height="15" fill="rgb(217,0,24)"/><text x="20.0672%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (331,024 samples, 0.53%)</title><rect x="19.8342%" y="197" width="0.5312%" height="15" fill="rgb(221,193,54)"/><text x="20.0842%" y="207.50"></text></g><g><title>has_structural_eq_impls (160,162 samples, 0.26%)</title><rect x="25.8269%" y="149" width="0.2570%" height="15" fill="rgb(248,212,6)"/><text x="26.0769%" y="159.50"></text></g><g><title>evaluate_obligation (146,062 samples, 0.23%)</title><rect x="25.8496%" y="133" width="0.2344%" height="15" fill="rgb(208,68,35)"/><text x="26.0996%" y="143.50"></text></g><g><title>trait_impls_of (134,432 samples, 0.22%)</title><rect x="25.8682%" y="117" width="0.2157%" height="15" fill="rgb(232,128,0)"/><text x="26.1182%" y="127.50"></text></g><g><title>is_freeze_raw (92,772 samples, 0.15%)</title><rect x="26.0839%" y="149" width="0.1489%" height="15" fill="rgb(207,160,47)"/><text x="26.3339%" y="159.50"></text></g><g><title>evaluate_obligation (88,230 samples, 0.14%)</title><rect x="26.0912%" y="133" width="0.1416%" height="15" fill="rgb(228,23,34)"/><text x="26.3412%" y="143.50"></text></g><g><title>thir_body (847,949 samples, 1.36%)</title><rect x="27.5504%" y="101" width="1.3607%" height="15" fill="rgb(218,30,26)"/><text x="27.8004%" y="111.50"></text></g><g><title>lit_to_const (116,700 samples, 0.19%)</title><rect x="28.7238%" y="85" width="0.1873%" height="15" fill="rgb(220,122,19)"/><text x="28.9738%" y="95.50"></text></g><g><title>mir_promoted (3,172,086 samples, 5.09%)</title><rect x="23.8277%" y="181" width="5.0902%" height="15" fill="rgb(250,228,42)"/><text x="24.0777%" y="191.50">mir_pr..</text></g><g><title>mir_const_qualif (2,582,399 samples, 4.14%)</title><rect x="24.7740%" y="165" width="4.1439%" height="15" fill="rgb(240,193,28)"/><text x="25.0240%" y="175.50">mir_c..</text></g><g><title>mir_const (1,673,288 samples, 2.69%)</title><rect x="26.2328%" y="149" width="2.6851%" height="15" fill="rgb(216,20,37)"/><text x="26.4828%" y="159.50">mi..</text></g><g><title>unsafety_check_result (1,576,577 samples, 2.53%)</title><rect x="26.3880%" y="133" width="2.5299%" height="15" fill="rgb(206,188,39)"/><text x="26.6380%" y="143.50">un..</text></g><g><title>mir_built (1,509,907 samples, 2.42%)</title><rect x="26.4950%" y="117" width="2.4229%" height="15" fill="rgb(217,207,13)"/><text x="26.7450%" y="127.50">mi..</text></g><g><title>MIR_borrow_checking (5,271,409 samples, 8.46%)</title><rect x="20.5646%" y="213" width="8.4589%" height="15" fill="rgb(231,73,38)"/><text x="20.8146%" y="223.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (5,269,089 samples, 8.46%)</title><rect x="20.5683%" y="197" width="8.4552%" height="15" fill="rgb(225,20,46)"/><text x="20.8183%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (65,842 samples, 0.11%)</title><rect x="28.9179%" y="181" width="0.1057%" height="15" fill="rgb(210,31,41)"/><text x="29.1679%" y="191.50"></text></g><g><title>MIR_effect_checking (122,351 samples, 0.20%)</title><rect x="29.0236%" y="213" width="0.1963%" height="15" fill="rgb(221,200,47)"/><text x="29.2736%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (112,711 samples, 0.18%)</title><rect x="29.0390%" y="197" width="0.1809%" height="15" fill="rgb(226,26,5)"/><text x="29.2890%" y="207.50"></text></g><g><title>check_mod_attrs (96,281 samples, 0.15%)</title><rect x="29.3397%" y="197" width="0.1545%" height="15" fill="rgb(249,33,26)"/><text x="29.5897%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (73,011 samples, 0.12%)</title><rect x="29.5481%" y="197" width="0.1172%" height="15" fill="rgb(235,183,28)"/><text x="29.7981%" y="207.50"></text></g><g><title>misc_checking_1 (249,662 samples, 0.40%)</title><rect x="29.3170%" y="213" width="0.4006%" height="15" fill="rgb(221,5,38)"/><text x="29.5670%" y="223.50"></text></g><g><title>misc_checking_2 (87,551 samples, 0.14%)</title><rect x="29.7176%" y="213" width="0.1405%" height="15" fill="rgb(247,18,42)"/><text x="29.9676%" y="223.50"></text></g><g><title>eval_to_const_value_raw (1,231,613 samples, 1.98%)</title><rect x="30.6193%" y="117" width="1.9763%" height="15" fill="rgb(241,131,45)"/><text x="30.8693%" y="127.50">e..</text></g><g><title>eval_to_const_value_raw (1,229,343 samples, 1.97%)</title><rect x="30.6229%" y="101" width="1.9727%" height="15" fill="rgb(249,31,29)"/><text x="30.8729%" y="111.50">e..</text></g><g><title>eval_to_allocation_raw (1,225,203 samples, 1.97%)</title><rect x="30.6296%" y="85" width="1.9661%" height="15" fill="rgb(225,111,53)"/><text x="30.8796%" y="95.50">e..</text></g><g><title>promoted_mir (178,082 samples, 0.29%)</title><rect x="32.3098%" y="69" width="0.2858%" height="15" fill="rgb(238,160,17)"/><text x="32.5598%" y="79.50"></text></g><g><title>eval_to_allocation_raw (1,512,277 samples, 2.43%)</title><rect x="30.1736%" y="165" width="2.4267%" height="15" fill="rgb(214,148,48)"/><text x="30.4236%" y="175.50">ev..</text></g><g><title>eval_to_allocation_raw (1,510,687 samples, 2.42%)</title><rect x="30.1761%" y="149" width="2.4242%" height="15" fill="rgb(232,36,49)"/><text x="30.4261%" y="159.50">ev..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,245,523 samples, 2.00%)</title><rect x="30.6016%" y="133" width="1.9987%" height="15" fill="rgb(209,103,24)"/><text x="30.8516%" y="143.50">t..</text></g><g><title>crate_lints (1,665,959 samples, 2.67%)</title><rect x="29.9743%" y="181" width="2.6733%" height="15" fill="rgb(229,88,8)"/><text x="30.2243%" y="191.50">cr..</text></g><g><title>lint_checking (1,823,780 samples, 2.93%)</title><rect x="29.9717%" y="197" width="2.9266%" height="15" fill="rgb(213,181,19)"/><text x="30.2217%" y="207.50">li..</text></g><g><title>module_lints (156,181 samples, 0.25%)</title><rect x="32.6476%" y="181" width="0.2506%" height="15" fill="rgb(254,191,54)"/><text x="32.8976%" y="191.50"></text></g><g><title>lint_mod (154,421 samples, 0.25%)</title><rect x="32.6505%" y="165" width="0.2478%" height="15" fill="rgb(241,83,37)"/><text x="32.9005%" y="175.50"></text></g><g><title>privacy_checking_modules (121,452 samples, 0.19%)</title><rect x="32.9544%" y="197" width="0.1949%" height="15" fill="rgb(233,36,39)"/><text x="33.2044%" y="207.50"></text></g><g><title>check_mod_privacy (120,632 samples, 0.19%)</title><rect x="32.9557%" y="181" width="0.1936%" height="15" fill="rgb(226,3,54)"/><text x="33.2057%" y="191.50"></text></g><g><title>misc_checking_3 (2,074,623 samples, 3.33%)</title><rect x="29.8581%" y="213" width="3.3291%" height="15" fill="rgb(245,192,40)"/><text x="30.1081%" y="223.50">mis..</text></g><g><title>impl_parent (114,970 samples, 0.18%)</title><rect x="39.1429%" y="53" width="0.1845%" height="15" fill="rgb(238,167,29)"/><text x="39.3929%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (91,500 samples, 0.15%)</title><rect x="39.1805%" y="37" width="0.1468%" height="15" fill="rgb(232,182,51)"/><text x="39.4305%" y="47.50"></text></g><g><title>impl_trait_ref (365,375 samples, 0.59%)</title><rect x="39.3274%" y="53" width="0.5863%" height="15" fill="rgb(231,60,39)"/><text x="39.5774%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (343,885 samples, 0.55%)</title><rect x="39.3618%" y="37" width="0.5518%" height="15" fill="rgb(208,69,12)"/><text x="39.6118%" y="47.50"></text></g><g><title>adt_destructor (622,207 samples, 1.00%)</title><rect x="38.9756%" y="117" width="0.9984%" height="15" fill="rgb(235,93,37)"/><text x="39.2256%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (621,767 samples, 1.00%)</title><rect x="38.9763%" y="101" width="0.9977%" height="15" fill="rgb(213,116,39)"/><text x="39.2263%" y="111.50"></text></g><g><title>coherent_trait (616,797 samples, 0.99%)</title><rect x="38.9843%" y="85" width="0.9898%" height="15" fill="rgb(222,207,29)"/><text x="39.2343%" y="95.50"></text></g><g><title>specialization_graph_of (613,207 samples, 0.98%)</title><rect x="38.9901%" y="69" width="0.9840%" height="15" fill="rgb(206,96,30)"/><text x="39.2401%" y="79.50"></text></g><g><title>dropck_outlives (688,177 samples, 1.10%)</title><rect x="38.8714%" y="149" width="1.1043%" height="15" fill="rgb(218,138,4)"/><text x="39.1214%" y="159.50"></text></g><g><title>adt_dtorck_constraint (632,227 samples, 1.01%)</title><rect x="38.9611%" y="133" width="1.0145%" height="15" fill="rgb(250,191,14)"/><text x="39.2111%" y="143.50"></text></g><g><title>item_types_checking (4,269,977 samples, 6.85%)</title><rect x="33.2628%" y="197" width="6.8520%" height="15" fill="rgb(239,60,40)"/><text x="33.5128%" y="207.50">item_type..</text></g><g><title>check_mod_item_types (4,268,097 samples, 6.85%)</title><rect x="33.2659%" y="181" width="6.8489%" height="15" fill="rgb(206,27,48)"/><text x="33.5159%" y="191.50">check_mod..</text></g><g><title>typeck (4,232,557 samples, 6.79%)</title><rect x="33.3229%" y="165" width="6.7919%" height="15" fill="rgb(225,35,8)"/><text x="33.5729%" y="175.50">typeck</text></g><g><title>named_region_map (129,162 samples, 0.21%)</title><rect x="40.3644%" y="149" width="0.2073%" height="15" fill="rgb(250,213,24)"/><text x="40.6144%" y="159.50"></text></g><g><title>resolve_lifetimes (121,562 samples, 0.20%)</title><rect x="40.3766%" y="133" width="0.1951%" height="15" fill="rgb(247,123,22)"/><text x="40.6266%" y="143.50"></text></g><g><title>type_collecting (290,664 samples, 0.47%)</title><rect x="40.1155%" y="197" width="0.4664%" height="15" fill="rgb(231,138,38)"/><text x="40.3655%" y="207.50"></text></g><g><title>collect_mod_item_types (280,083 samples, 0.45%)</title><rect x="40.1325%" y="181" width="0.4494%" height="15" fill="rgb(231,145,46)"/><text x="40.3825%" y="191.50"></text></g><g><title>type_of (187,452 samples, 0.30%)</title><rect x="40.2811%" y="165" width="0.3008%" height="15" fill="rgb(251,118,11)"/><text x="40.5311%" y="175.50"></text></g><g><title>evaluate_obligation (211,822 samples, 0.34%)</title><rect x="40.9872%" y="165" width="0.3399%" height="15" fill="rgb(217,147,25)"/><text x="41.2372%" y="175.50"></text></g><g><title>param_env (130,062 samples, 0.21%)</title><rect x="41.3820%" y="165" width="0.2087%" height="15" fill="rgb(247,81,37)"/><text x="41.6320%" y="175.50"></text></g><g><title>region_scope_tree (86,570 samples, 0.14%)</title><rect x="41.5974%" y="165" width="0.1389%" height="15" fill="rgb(209,12,38)"/><text x="41.8474%" y="175.50"></text></g><g><title>analysis (13,318,417 samples, 21.37%)</title><rect x="20.3654%" y="229" width="21.3718%" height="15" fill="rgb(227,1,9)"/><text x="20.6154%" y="239.50">analysis</text></g><g><title>type_check_crate (5,328,159 samples, 8.55%)</title><rect x="33.1872%" y="213" width="8.5500%" height="15" fill="rgb(248,47,43)"/><text x="33.4372%" y="223.50">type_check_c..</text></g><g><title>wf_checking (719,538 samples, 1.15%)</title><rect x="40.5826%" y="197" width="1.1546%" height="15" fill="rgb(221,10,30)"/><text x="40.8326%" y="207.50"></text></g><g><title>check_item_well_formed (702,818 samples, 1.13%)</title><rect x="40.6094%" y="181" width="1.1278%" height="15" fill="rgb(210,229,1)"/><text x="40.8594%" y="191.50"></text></g><g><title>codegen_module (609,596 samples, 0.98%)</title><rect x="42.4189%" y="213" width="0.9782%" height="15" fill="rgb(222,148,37)"/><text x="42.6689%" y="223.50"></text></g><g><title>monomorphization_collector (62,861 samples, 0.10%)</title><rect x="43.4341%" y="197" width="0.1009%" height="15" fill="rgb(234,67,33)"/><text x="43.6841%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (156,292 samples, 0.25%)</title><rect x="43.3980%" y="213" width="0.2508%" height="15" fill="rgb(247,98,35)"/><text x="43.6480%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (70,951 samples, 0.11%)</title><rect x="43.5349%" y="197" width="0.1139%" height="15" fill="rgb(247,138,52)"/><text x="43.7849%" y="207.50"></text></g><g><title>codegen_crate (1,265,014 samples, 2.03%)</title><rect x="41.7469%" y="229" width="2.0299%" height="15" fill="rgb(213,79,30)"/><text x="41.9969%" y="239.50">c..</text></g><g><title>codegen_module_optimize (4,408,479 samples, 7.07%)</title><rect x="43.7769%" y="229" width="7.0742%" height="15" fill="rgb(246,177,23)"/><text x="44.0269%" y="239.50">codegen_m..</text></g><g><title>LLVM_module_optimize (756,838 samples, 1.21%)</title><rect x="49.6366%" y="213" width="1.2145%" height="15" fill="rgb(230,62,27)"/><text x="49.8866%" y="223.50"></text></g><g><title>LLVM_lto_optimize (701,007 samples, 1.12%)</title><rect x="52.8583%" y="213" width="1.1249%" height="15" fill="rgb(216,154,8)"/><text x="53.1083%" y="223.50"></text></g><g><title>LLVM_module_codegen (4,938,324 samples, 7.92%)</title><rect x="53.9832%" y="213" width="7.9244%" height="15" fill="rgb(244,35,45)"/><text x="54.2332%" y="223.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (4,754,673 samples, 7.63%)</title><rect x="54.2779%" y="197" width="7.6297%" height="15" fill="rgb(251,115,12)"/><text x="54.5279%" y="207.50">LLVM_modul..</text></g><g><title>LLVM_thin_lto_import (89,081 samples, 0.14%)</title><rect x="61.9077%" y="213" width="0.1429%" height="15" fill="rgb(240,54,50)"/><text x="62.1577%" y="223.50"></text></g><g><title>LLVM_thin_lto_rename (185,512 samples, 0.30%)</title><rect x="62.0693%" y="213" width="0.2977%" height="15" fill="rgb(233,84,52)"/><text x="62.3193%" y="223.50"></text></g><g><title>codegen_module_perform_lto (7,330,261 samples, 11.76%)</title><rect x="50.8511%" y="229" width="11.7628%" height="15" fill="rgb(207,117,47)"/><text x="51.1011%" y="239.50">codegen_module_pe..</text></g><g><title>LLVM_thin_lto_resolve_weak (153,842 samples, 0.25%)</title><rect x="62.3670%" y="213" width="0.2469%" height="15" fill="rgb(249,43,39)"/><text x="62.6170%" y="223.50"></text></g><g><title>macro_expand_crate (5,183,808 samples, 8.32%)</title><rect x="63.0317%" y="213" width="8.3184%" height="15" fill="rgb(209,38,44)"/><text x="63.2817%" y="223.50">macro_expand..</text></g><g><title>expand_crate (5,170,188 samples, 8.30%)</title><rect x="63.0535%" y="197" width="8.2965%" height="15" fill="rgb(236,212,23)"/><text x="63.3035%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (1,293,524 samples, 2.08%)</title><rect x="69.2743%" y="181" width="2.0757%" height="15" fill="rgb(242,79,21)"/><text x="69.5243%" y="191.50">m..</text></g><g><title>metadata_register_crate (462,814 samples, 0.74%)</title><rect x="70.6074%" y="165" width="0.7427%" height="15" fill="rgb(211,96,35)"/><text x="70.8574%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (127,421 samples, 0.20%)</title><rect x="71.3553%" y="213" width="0.2045%" height="15" fill="rgb(253,215,40)"/><text x="71.6053%" y="223.50"></text></g><g><title>finalize_macro_resolutions (179,002 samples, 0.29%)</title><rect x="71.5855%" y="197" width="0.2872%" height="15" fill="rgb(211,81,21)"/><text x="71.8355%" y="207.50"></text></g><g><title>late_resolve_crate (426,484 samples, 0.68%)</title><rect x="71.8727%" y="197" width="0.6844%" height="15" fill="rgb(208,190,38)"/><text x="72.1227%" y="207.50"></text></g><g><title>metadata_register_crate (262,063 samples, 0.42%)</title><rect x="72.1366%" y="181" width="0.4205%" height="15" fill="rgb(235,213,38)"/><text x="72.3866%" y="191.50"></text></g><g><title>metadata_register_crate (167,882 samples, 0.27%)</title><rect x="72.2877%" y="165" width="0.2694%" height="15" fill="rgb(237,122,38)"/><text x="72.5377%" y="175.50"></text></g><g><title>configure_and_expand (6,230,909 samples, 10.00%)</title><rect x="62.6138%" y="229" width="9.9986%" height="15" fill="rgb(244,218,35)"/><text x="62.8638%" y="239.50">configure_and_..</text></g><g><title>resolve_crate (656,018 samples, 1.05%)</title><rect x="71.5598%" y="213" width="1.0527%" height="15" fill="rgb(240,68,47)"/><text x="71.8098%" y="223.50"></text></g><g><title>early_lint_checks (161,882 samples, 0.26%)</title><rect x="72.7263%" y="229" width="0.2598%" height="15" fill="rgb(210,16,53)"/><text x="72.9763%" y="239.50"></text></g><g><title>free_global_ctxt (1,859,880 samples, 2.98%)</title><rect x="72.9861%" y="229" width="2.9845%" height="15" fill="rgb(235,124,12)"/><text x="73.2361%" y="239.50">fre..</text></g><g><title>crate_hash (69,171 samples, 0.11%)</title><rect x="76.6306%" y="213" width="0.1110%" height="15" fill="rgb(224,169,11)"/><text x="76.8806%" y="223.50"></text></g><g><title>generate_crate_metadata (559,746 samples, 0.90%)</title><rect x="75.9706%" y="229" width="0.8982%" height="15" fill="rgb(250,166,2)"/><text x="76.2206%" y="239.50"></text></g><g><title>hir_lowering (573,586 samples, 0.92%)</title><rect x="76.8688%" y="229" width="0.9204%" height="15" fill="rgb(242,216,29)"/><text x="77.1188%" y="239.50"></text></g><g><title>finish_ongoing_codegen (10,313,325 samples, 16.55%)</title><rect x="77.8074%" y="213" width="16.5496%" height="15" fill="rgb(230,116,27)"/><text x="78.0574%" y="223.50">finish_ongoing_codegen</text></g><g><title>link_crate (695,048 samples, 1.12%)</title><rect x="94.3570%" y="213" width="1.1153%" height="15" fill="rgb(228,99,48)"/><text x="94.6070%" y="223.50"></text></g><g><title>link_binary (681,858 samples, 1.09%)</title><rect x="94.3782%" y="197" width="1.0942%" height="15" fill="rgb(253,11,6)"/><text x="94.6282%" y="207.50"></text></g><g><title>link_rlib (447,995 samples, 0.72%)</title><rect x="94.7535%" y="181" width="0.7189%" height="15" fill="rgb(247,143,39)"/><text x="95.0035%" y="191.50"></text></g><g><title>link (11,026,633 samples, 17.69%)</title><rect x="77.7892%" y="229" width="17.6943%" height="15" fill="rgb(236,97,10)"/><text x="78.0392%" y="239.50">link</text></g><g><title>parse_crate (1,961,931 samples, 3.15%)</title><rect x="95.4835%" y="229" width="3.1483%" height="15" fill="rgb(233,208,19)"/><text x="95.7335%" y="239.50">par..</text></g><g><title>prepare_outputs (177,512 samples, 0.28%)</title><rect x="98.6403%" y="229" width="0.2849%" height="15" fill="rgb(216,164,2)"/><text x="98.8903%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (301,644 samples, 0.48%)</title><rect x="98.9252%" y="229" width="0.4840%" height="15" fill="rgb(220,129,5)"/><text x="99.1752%" y="239.50"></text></g><g><title>setup_global_ctxt (79,411 samples, 0.13%)</title><rect x="99.4104%" y="229" width="0.1274%" height="15" fill="rgb(242,17,10)"/><text x="99.6604%" y="239.50"></text></g><g><title>all (62,317,570 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (62,317,570 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (288,013 samples, 0.46%)</title><rect x="99.5378%" y="229" width="0.4622%" height="15" fill="rgb(233,223,10)"/><text x="99.7878%" y="239.50"></text></g></svg></svg>