<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,507,750 samples, 11.40%)</title><rect x="1.7132%" y="245" width="11.3969%" height="15" fill="rgb(227,0,7)"/><text x="1.9632%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (129,921 samples, 0.33%)</title><rect x="12.7816%" y="229" width="0.3285%" height="15" fill="rgb(217,0,24)"/><text x="13.0316%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (112,871 samples, 0.29%)</title><rect x="12.8247%" y="213" width="0.2854%" height="15" fill="rgb(221,193,54)"/><text x="13.0747%" y="223.50"></text></g><g><title>impl_trait_ref (72,720 samples, 0.18%)</title><rect x="17.3834%" y="133" width="0.1839%" height="15" fill="rgb(248,212,6)"/><text x="17.6334%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (68,340 samples, 0.17%)</title><rect x="17.3944%" y="117" width="0.1728%" height="15" fill="rgb(208,68,35)"/><text x="17.6444%" y="127.50"></text></g><g><title>adt_destructor (150,071 samples, 0.38%)</title><rect x="17.2219%" y="197" width="0.3794%" height="15" fill="rgb(232,128,0)"/><text x="17.4719%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_destructor (148,391 samples, 0.38%)</title><rect x="17.2261%" y="181" width="0.3752%" height="15" fill="rgb(207,160,47)"/><text x="17.4761%" y="191.50"></text></g><g><title>coherent_trait (142,411 samples, 0.36%)</title><rect x="17.2413%" y="165" width="0.3601%" height="15" fill="rgb(228,23,34)"/><text x="17.4913%" y="175.50"></text></g><g><title>specialization_graph_of (138,941 samples, 0.35%)</title><rect x="17.2500%" y="149" width="0.3513%" height="15" fill="rgb(218,30,26)"/><text x="17.5000%" y="159.50"></text></g><g><title>is_sized_raw (45,421 samples, 0.11%)</title><rect x="17.6343%" y="197" width="0.1148%" height="15" fill="rgb(220,122,19)"/><text x="17.8843%" y="207.50"></text></g><g><title>diagnostic_items (41,741 samples, 0.11%)</title><rect x="18.7767%" y="165" width="0.1055%" height="15" fill="rgb(250,228,42)"/><text x="19.0267%" y="175.50"></text></g><g><title>is_copy_raw (158,892 samples, 0.40%)</title><rect x="20.4342%" y="133" width="0.4017%" height="15" fill="rgb(240,193,28)"/><text x="20.6842%" y="143.50"></text></g><g><title>evaluate_obligation (148,361 samples, 0.38%)</title><rect x="20.4608%" y="117" width="0.3751%" height="15" fill="rgb(216,20,37)"/><text x="20.7108%" y="127.50"></text></g><g><title>trait_impls_of (92,581 samples, 0.23%)</title><rect x="20.6019%" y="101" width="0.2341%" height="15" fill="rgb(206,188,39)"/><text x="20.8519%" y="111.50"></text></g><g><title>explicit_predicates_of (230,652 samples, 0.58%)</title><rect x="21.5353%" y="53" width="0.5832%" height="15" fill="rgb(217,207,13)"/><text x="21.7853%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (228,852 samples, 0.58%)</title><rect x="21.5398%" y="37" width="0.5786%" height="15" fill="rgb(231,73,38)"/><text x="21.7898%" y="47.50"></text></g><g><title>predicates_of (248,633 samples, 0.63%)</title><rect x="21.4967%" y="85" width="0.6286%" height="15" fill="rgb(225,20,46)"/><text x="21.7467%" y="95.50"></text></g><g><title>predicates_defined_on (239,503 samples, 0.61%)</title><rect x="21.5197%" y="69" width="0.6055%" height="15" fill="rgb(210,31,41)"/><text x="21.7697%" y="79.50"></text></g><g><title>needs_drop_raw (512,965 samples, 1.30%)</title><rect x="20.8359%" y="133" width="1.2969%" height="15" fill="rgb(221,200,47)"/><text x="21.0859%" y="143.50"></text></g><g><title>is_copy_raw (461,485 samples, 1.17%)</title><rect x="20.9661%" y="117" width="1.1668%" height="15" fill="rgb(226,26,5)"/><text x="21.2161%" y="127.50"></text></g><g><title>evaluate_obligation (434,245 samples, 1.10%)</title><rect x="21.0350%" y="101" width="1.0979%" height="15" fill="rgb(249,33,26)"/><text x="21.2850%" y="111.50"></text></g><g><title>thir_body (120,601 samples, 0.30%)</title><rect x="22.1831%" y="133" width="0.3049%" height="15" fill="rgb(235,183,28)"/><text x="22.4331%" y="143.50"></text></g><g><title>mir_const (1,674,608 samples, 4.23%)</title><rect x="18.2622%" y="181" width="4.2339%" height="15" fill="rgb(221,5,38)"/><text x="18.5122%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (1,409,776 samples, 3.56%)</title><rect x="18.9318%" y="165" width="3.5643%" height="15" fill="rgb(247,18,42)"/><text x="19.1818%" y="175.50">unsa..</text></g><g><title>mir_built (1,289,435 samples, 3.26%)</title><rect x="19.2361%" y="149" width="3.2601%" height="15" fill="rgb(241,131,45)"/><text x="19.4861%" y="159.50">mir..</text></g><g><title>mir_promoted (1,892,080 samples, 4.78%)</title><rect x="17.7491%" y="197" width="4.7837%" height="15" fill="rgb(249,31,29)"/><text x="17.9991%" y="207.50">mir_pr..</text></g><g><title>MIR_borrow_checking (3,693,781 samples, 9.34%)</title><rect x="13.4862%" y="229" width="9.3390%" height="15" fill="rgb(225,111,53)"/><text x="13.7362%" y="239.50">MIR_borrow_ch..</text></g><g><title>mir_borrowck (3,673,001 samples, 9.29%)</title><rect x="13.5387%" y="213" width="9.2864%" height="15" fill="rgb(238,160,17)"/><text x="13.7887%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (115,591 samples, 0.29%)</title><rect x="22.5329%" y="197" width="0.2922%" height="15" fill="rgb(214,148,48)"/><text x="22.7829%" y="207.50"></text></g><g><title>MIR_effect_checking (76,061 samples, 0.19%)</title><rect x="22.8251%" y="229" width="0.1923%" height="15" fill="rgb(232,36,49)"/><text x="23.0751%" y="239.50"></text></g><g><title>lint_levels (48,800 samples, 0.12%)</title><rect x="22.8940%" y="213" width="0.1234%" height="15" fill="rgb(209,103,24)"/><text x="23.1440%" y="223.50"></text></g><g><title>hir_module_items (129,791 samples, 0.33%)</title><rect x="23.0174%" y="229" width="0.3281%" height="15" fill="rgb(229,88,8)"/><text x="23.2674%" y="239.50"></text></g><g><title>get_lang_items (66,241 samples, 0.17%)</title><rect x="23.8466%" y="181" width="0.1675%" height="15" fill="rgb(213,181,19)"/><text x="24.0966%" y="191.50"></text></g><g><title>associated_item (44,200 samples, 0.11%)</title><rect x="24.0679%" y="165" width="0.1118%" height="15" fill="rgb(254,191,54)"/><text x="24.3179%" y="175.50"></text></g><g><title>should_inherit_track_caller (68,921 samples, 0.17%)</title><rect x="24.0141%" y="181" width="0.1743%" height="15" fill="rgb(241,83,37)"/><text x="24.2641%" y="191.50"></text></g><g><title>codegen_fn_attrs (249,373 samples, 0.63%)</title><rect x="23.6483%" y="197" width="0.6305%" height="15" fill="rgb(233,36,39)"/><text x="23.8983%" y="207.50"></text></g><g><title>check_mod_attrs (339,964 samples, 0.86%)</title><rect x="23.4198%" y="213" width="0.8595%" height="15" fill="rgb(226,3,54)"/><text x="23.6698%" y="223.50"></text></g><g><title>lookup_stability (80,971 samples, 0.20%)</title><rect x="24.6834%" y="197" width="0.2047%" height="15" fill="rgb(245,192,40)"/><text x="24.9334%" y="207.50"></text></g><g><title>stability_index (47,331 samples, 0.12%)</title><rect x="24.7684%" y="181" width="0.1197%" height="15" fill="rgb(238,167,29)"/><text x="25.0184%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (203,952 samples, 0.52%)</title><rect x="24.4271%" y="213" width="0.5156%" height="15" fill="rgb(232,182,51)"/><text x="24.6771%" y="223.50"></text></g><g><title>misc_checking_1 (666,227 samples, 1.68%)</title><rect x="23.3476%" y="229" width="1.6844%" height="15" fill="rgb(231,60,39)"/><text x="23.5976%" y="239.50"></text></g><g><title>check_mod_intrinsics (46,810 samples, 0.12%)</title><rect x="25.0539%" y="197" width="0.1183%" height="15" fill="rgb(208,69,12)"/><text x="25.3039%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (136,891 samples, 0.35%)</title><rect x="25.0398%" y="213" width="0.3461%" height="15" fill="rgb(235,93,37)"/><text x="25.2898%" y="223.50"></text></g><g><title>check_mod_liveness (84,491 samples, 0.21%)</title><rect x="25.1723%" y="197" width="0.2136%" height="15" fill="rgb(213,116,39)"/><text x="25.4223%" y="207.50"></text></g><g><title>misc_checking_2 (337,613 samples, 0.85%)</title><rect x="25.0320%" y="229" width="0.8536%" height="15" fill="rgb(222,207,29)"/><text x="25.2820%" y="239.50"></text></g><g><title>match_checking (197,642 samples, 0.50%)</title><rect x="25.3859%" y="213" width="0.4997%" height="15" fill="rgb(206,96,30)"/><text x="25.6359%" y="223.50"></text></g><g><title>check_match (188,882 samples, 0.48%)</title><rect x="25.4081%" y="197" width="0.4775%" height="15" fill="rgb(218,138,4)"/><text x="25.6581%" y="207.50"></text></g><g><title>check_private_in_public (58,470 samples, 0.15%)</title><rect x="25.9153%" y="213" width="0.1478%" height="15" fill="rgb(250,191,14)"/><text x="26.1653%" y="223.50"></text></g><g><title>death_checking (91,611 samples, 0.23%)</title><rect x="26.0631%" y="213" width="0.2316%" height="15" fill="rgb(239,60,40)"/><text x="26.3131%" y="223.50"></text></g><g><title>crate_lints (170,501 samples, 0.43%)</title><rect x="26.3019%" y="197" width="0.4311%" height="15" fill="rgb(206,27,48)"/><text x="26.5519%" y="207.50"></text></g><g><title>param_env (84,591 samples, 0.21%)</title><rect x="26.5191%" y="181" width="0.2139%" height="15" fill="rgb(225,35,8)"/><text x="26.7691%" y="191.50"></text></g><g><title>predicates_of (40,690 samples, 0.10%)</title><rect x="26.6301%" y="165" width="0.1029%" height="15" fill="rgb(250,213,24)"/><text x="26.8801%" y="175.50"></text></g><g><title>lint_checking (235,322 samples, 0.59%)</title><rect x="26.2947%" y="213" width="0.5950%" height="15" fill="rgb(247,123,22)"/><text x="26.5447%" y="223.50"></text></g><g><title>module_lints (61,971 samples, 0.16%)</title><rect x="26.7330%" y="197" width="0.1567%" height="15" fill="rgb(231,138,38)"/><text x="26.9830%" y="207.50"></text></g><g><title>lint_mod (58,561 samples, 0.15%)</title><rect x="26.7416%" y="181" width="0.1481%" height="15" fill="rgb(231,145,46)"/><text x="26.9916%" y="191.50"></text></g><g><title>privacy_access_levels (82,661 samples, 0.21%)</title><rect x="26.8897%" y="213" width="0.2090%" height="15" fill="rgb(251,118,11)"/><text x="27.1397%" y="223.50"></text></g><g><title>privacy_checking_modules (82,441 samples, 0.21%)</title><rect x="27.0987%" y="213" width="0.2084%" height="15" fill="rgb(217,147,25)"/><text x="27.3487%" y="223.50"></text></g><g><title>check_mod_privacy (80,441 samples, 0.20%)</title><rect x="27.1037%" y="197" width="0.2034%" height="15" fill="rgb(247,81,37)"/><text x="27.3537%" y="207.50"></text></g><g><title>misc_checking_3 (573,456 samples, 1.45%)</title><rect x="25.8856%" y="229" width="1.4499%" height="15" fill="rgb(209,12,38)"/><text x="26.1356%" y="239.50"></text></g><g><title>coherent_trait (108,831 samples, 0.28%)</title><rect x="27.4747%" y="197" width="0.2752%" height="15" fill="rgb(227,1,9)"/><text x="27.7247%" y="207.50"></text></g><g><title>specialization_graph_of (100,221 samples, 0.25%)</title><rect x="27.4965%" y="181" width="0.2534%" height="15" fill="rgb(248,47,43)"/><text x="27.7465%" y="191.50"></text></g><g><title>coherence_checking (171,492 samples, 0.43%)</title><rect x="27.4285%" y="213" width="0.4336%" height="15" fill="rgb(221,10,30)"/><text x="27.6785%" y="223.50"></text></g><g><title>adt_def (57,391 samples, 0.15%)</title><rect x="31.5110%" y="165" width="0.1451%" height="15" fill="rgb(210,229,1)"/><text x="31.7610%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (56,011 samples, 0.14%)</title><rect x="31.5145%" y="149" width="0.1416%" height="15" fill="rgb(222,148,37)"/><text x="31.7645%" y="159.50"></text></g><g><title>dropck_outlives (39,861 samples, 0.10%)</title><rect x="31.6746%" y="165" width="0.1008%" height="15" fill="rgb(234,67,33)"/><text x="31.9246%" y="175.50"></text></g><g><title>evaluate_obligation (109,192 samples, 0.28%)</title><rect x="31.7754%" y="165" width="0.2761%" height="15" fill="rgb(247,98,35)"/><text x="32.0254%" y="175.50"></text></g><g><title>item_attrs (123,811 samples, 0.31%)</title><rect x="32.1667%" y="165" width="0.3130%" height="15" fill="rgb(247,138,52)"/><text x="32.4167%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (121,291 samples, 0.31%)</title><rect x="32.1731%" y="149" width="0.3067%" height="15" fill="rgb(213,79,30)"/><text x="32.4231%" y="159.50"></text></g><g><title>predicates_of (44,761 samples, 0.11%)</title><rect x="32.5231%" y="165" width="0.1132%" height="15" fill="rgb(246,177,23)"/><text x="32.7731%" y="175.50"></text></g><g><title>type_of (45,800 samples, 0.12%)</title><rect x="32.7461%" y="165" width="0.1158%" height="15" fill="rgb(230,62,27)"/><text x="32.9961%" y="175.50"></text></g><g><title>item_bodies_checking (1,967,411 samples, 4.97%)</title><rect x="27.9403%" y="213" width="4.9742%" height="15" fill="rgb(216,154,8)"/><text x="28.1903%" y="223.50">item_b..</text></g><g><title>typeck_item_bodies (1,964,151 samples, 4.97%)</title><rect x="27.9485%" y="197" width="4.9659%" height="15" fill="rgb(244,35,45)"/><text x="28.1985%" y="207.50">typeck..</text></g><g><title>typeck (1,948,551 samples, 4.93%)</title><rect x="27.9879%" y="181" width="4.9265%" height="15" fill="rgb(251,115,12)"/><text x="28.2379%" y="191.50">typeck</text></g><g><title>item_types_checking (171,472 samples, 0.43%)</title><rect x="32.9145%" y="213" width="0.4335%" height="15" fill="rgb(240,54,50)"/><text x="33.1645%" y="223.50"></text></g><g><title>check_mod_item_types (168,122 samples, 0.43%)</title><rect x="32.9229%" y="197" width="0.4251%" height="15" fill="rgb(233,84,52)"/><text x="33.1729%" y="207.50"></text></g><g><title>fn_sig (169,062 samples, 0.43%)</title><rect x="33.6405%" y="181" width="0.4274%" height="15" fill="rgb(207,117,47)"/><text x="33.8905%" y="191.50"></text></g><g><title>late_bound_vars_map (110,922 samples, 0.28%)</title><rect x="33.7875%" y="165" width="0.2804%" height="15" fill="rgb(249,43,39)"/><text x="34.0375%" y="175.50"></text></g><g><title>resolve_lifetimes (86,152 samples, 0.22%)</title><rect x="33.8501%" y="149" width="0.2178%" height="15" fill="rgb(209,38,44)"/><text x="34.1001%" y="159.50"></text></g><g><title>generics_of (81,121 samples, 0.21%)</title><rect x="34.0679%" y="181" width="0.2051%" height="15" fill="rgb(236,212,23)"/><text x="34.3179%" y="191.50"></text></g><g><title>explicit_predicates_of (124,521 samples, 0.31%)</title><rect x="34.4066%" y="149" width="0.3148%" height="15" fill="rgb(242,79,21)"/><text x="34.6566%" y="159.50"></text></g><g><title>trait_explicit_predicates_and_bounds (54,501 samples, 0.14%)</title><rect x="34.5836%" y="133" width="0.1378%" height="15" fill="rgb(211,96,35)"/><text x="34.8336%" y="143.50"></text></g><g><title>predicates_of (178,371 samples, 0.45%)</title><rect x="34.2950%" y="181" width="0.4510%" height="15" fill="rgb(253,215,40)"/><text x="34.5450%" y="191.50"></text></g><g><title>predicates_defined_on (160,971 samples, 0.41%)</title><rect x="34.3390%" y="165" width="0.4070%" height="15" fill="rgb(211,81,21)"/><text x="34.5890%" y="175.50"></text></g><g><title>type_collecting (703,928 samples, 1.78%)</title><rect x="33.3515%" y="213" width="1.7797%" height="15" fill="rgb(208,190,38)"/><text x="33.6015%" y="223.50">t..</text></g><g><title>collect_mod_item_types (693,298 samples, 1.75%)</title><rect x="33.3784%" y="197" width="1.7529%" height="15" fill="rgb(235,213,38)"/><text x="33.6284%" y="207.50"></text></g><g><title>type_of (112,102 samples, 0.28%)</title><rect x="34.8478%" y="181" width="0.2834%" height="15" fill="rgb(237,122,38)"/><text x="35.0978%" y="191.50"></text></g><g><title>type_of (50,122 samples, 0.13%)</title><rect x="35.0045%" y="165" width="0.1267%" height="15" fill="rgb(244,218,35)"/><text x="35.2545%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (48,022 samples, 0.12%)</title><rect x="35.0098%" y="149" width="0.1214%" height="15" fill="rgb(240,68,47)"/><text x="35.2598%" y="159.50"></text></g><g><title>param_env (50,430 samples, 0.13%)</title><rect x="35.7220%" y="181" width="0.1275%" height="15" fill="rgb(210,16,53)"/><text x="35.9720%" y="191.50"></text></g><g><title>check_impl_item_well_formed (273,874 samples, 0.69%)</title><rect x="35.2512%" y="197" width="0.6924%" height="15" fill="rgb(235,124,12)"/><text x="35.5012%" y="207.50"></text></g><g><title>implied_outlives_bounds (113,701 samples, 0.29%)</title><rect x="37.5413%" y="181" width="0.2875%" height="15" fill="rgb(224,169,11)"/><text x="37.7913%" y="191.50"></text></g><g><title>param_env (237,253 samples, 0.60%)</title><rect x="37.8288%" y="181" width="0.5998%" height="15" fill="rgb(250,166,2)"/><text x="38.0788%" y="191.50"></text></g><g><title>predicates_of (87,780 samples, 0.22%)</title><rect x="38.4286%" y="181" width="0.2219%" height="15" fill="rgb(242,216,29)"/><text x="38.6786%" y="191.50"></text></g><g><title>predicates_defined_on (65,190 samples, 0.16%)</title><rect x="38.4857%" y="165" width="0.1648%" height="15" fill="rgb(230,116,27)"/><text x="38.7357%" y="175.50"></text></g><g><title>check_item_well_formed (1,098,621 samples, 2.78%)</title><rect x="35.9436%" y="197" width="2.7776%" height="15" fill="rgb(228,99,48)"/><text x="36.1936%" y="207.50">ch..</text></g><g><title>param_env (53,531 samples, 0.14%)</title><rect x="39.3219%" y="181" width="0.1353%" height="15" fill="rgb(253,11,6)"/><text x="39.5719%" y="191.50"></text></g><g><title>analysis (10,423,934 samples, 26.35%)</title><rect x="13.1101%" y="245" width="26.3547%" height="15" fill="rgb(247,143,39)"/><text x="13.3601%" y="255.50">analysis</text></g><g><title>type_check_crate (4,797,443 samples, 12.13%)</title><rect x="27.3355%" y="229" width="12.1293%" height="15" fill="rgb(236,97,10)"/><text x="27.5855%" y="239.50">type_check_crate</text></g><g><title>wf_checking (1,712,509 samples, 4.33%)</title><rect x="35.1351%" y="213" width="4.3297%" height="15" fill="rgb(233,208,19)"/><text x="35.3851%" y="223.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (294,094 samples, 0.74%)</title><rect x="38.7212%" y="197" width="0.7436%" height="15" fill="rgb(216,164,2)"/><text x="38.9712%" y="207.50"></text></g><g><title>codegen_module (385,765 samples, 0.98%)</title><rect x="42.8373%" y="229" width="0.9753%" height="15" fill="rgb(220,129,5)"/><text x="43.0873%" y="239.50"></text></g><g><title>collect_and_partition_mono_items (79,160 samples, 0.20%)</title><rect x="43.8144%" y="229" width="0.2001%" height="15" fill="rgb(242,17,10)"/><text x="44.0644%" y="239.50"></text></g><g><title>codegen_crate (1,819,931 samples, 4.60%)</title><rect x="39.4915%" y="245" width="4.6013%" height="15" fill="rgb(242,107,0)"/><text x="39.7415%" y="255.50">codeg..</text></g><g><title>codegen_module_optimize (835,059 samples, 2.11%)</title><rect x="44.0928%" y="245" width="2.1113%" height="15" fill="rgb(251,28,31)"/><text x="44.3428%" y="255.50">c..</text></g><g><title>LLVM_module_optimize (413,165 samples, 1.04%)</title><rect x="45.1595%" y="229" width="1.0446%" height="15" fill="rgb(233,223,10)"/><text x="45.4095%" y="239.50"></text></g><g><title>LLVM_lto_optimize (197,662 samples, 0.50%)</title><rect x="46.9951%" y="229" width="0.4997%" height="15" fill="rgb(215,21,27)"/><text x="47.2451%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,075,443 samples, 5.25%)</title><rect x="47.4948%" y="229" width="5.2473%" height="15" fill="rgb(232,23,21)"/><text x="47.7448%" y="239.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (2,044,442 samples, 5.17%)</title><rect x="47.5732%" y="213" width="5.1689%" height="15" fill="rgb(244,5,23)"/><text x="47.8232%" y="223.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (2,621,779 samples, 6.63%)</title><rect x="46.2041%" y="245" width="6.6286%" height="15" fill="rgb(226,81,46)"/><text x="46.4541%" y="255.50">codegen_m..</text></g><g><title>AST_validation (79,501 samples, 0.20%)</title><rect x="53.3998%" y="229" width="0.2010%" height="15" fill="rgb(247,70,30)"/><text x="53.6498%" y="239.50"></text></g><g><title>crate_injection (87,951 samples, 0.22%)</title><rect x="53.6493%" y="229" width="0.2224%" height="15" fill="rgb(212,68,19)"/><text x="53.8993%" y="239.50"></text></g><g><title>metadata_load_macro (42,771 samples, 0.11%)</title><rect x="69.8717%" y="197" width="0.1081%" height="15" fill="rgb(240,187,13)"/><text x="70.1217%" y="207.50"></text></g><g><title>macro_expand_crate (6,596,743 samples, 16.68%)</title><rect x="53.8716%" y="229" width="16.6785%" height="15" fill="rgb(223,113,26)"/><text x="54.1216%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (6,573,572 samples, 16.62%)</title><rect x="53.9302%" y="213" width="16.6199%" height="15" fill="rgb(206,192,2)"/><text x="54.1802%" y="223.50">expand_crate</text></g><g><title>metadata_register_crate (225,562 samples, 0.57%)</title><rect x="69.9798%" y="197" width="0.5703%" height="15" fill="rgb(241,108,4)"/><text x="70.2298%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (125,841 samples, 0.32%)</title><rect x="70.5628%" y="229" width="0.3182%" height="15" fill="rgb(247,173,49)"/><text x="70.8128%" y="239.50"></text></g><g><title>finalize_macro_resolutions (276,523 samples, 0.70%)</title><rect x="70.9492%" y="213" width="0.6991%" height="15" fill="rgb(224,114,35)"/><text x="71.1992%" y="223.50"></text></g><g><title>late_resolve_crate (475,426 samples, 1.20%)</title><rect x="71.6483%" y="213" width="1.2020%" height="15" fill="rgb(245,159,27)"/><text x="71.8983%" y="223.50"></text></g><g><title>configure_and_expand (7,967,278 samples, 20.14%)</title><rect x="52.8327%" y="245" width="20.1436%" height="15" fill="rgb(245,172,44)"/><text x="53.0827%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (828,759 samples, 2.10%)</title><rect x="70.8809%" y="229" width="2.0953%" height="15" fill="rgb(236,23,11)"/><text x="71.1309%" y="239.50">r..</text></g><g><title>drop_ast (52,731 samples, 0.13%)</title><rect x="72.9763%" y="245" width="0.1333%" height="15" fill="rgb(205,117,38)"/><text x="73.2263%" y="255.50"></text></g><g><title>early_lint_checks (120,651 samples, 0.31%)</title><rect x="73.1770%" y="245" width="0.3050%" height="15" fill="rgb(237,72,25)"/><text x="73.4270%" y="255.50"></text></g><g><title>free_global_ctxt (1,397,876 samples, 3.53%)</title><rect x="73.4821%" y="245" width="3.5342%" height="15" fill="rgb(244,70,9)"/><text x="73.7321%" y="255.50">fre..</text></g><g><title>crate_hash (147,662 samples, 0.37%)</title><rect x="78.2689%" y="229" width="0.3733%" height="15" fill="rgb(217,125,39)"/><text x="78.5189%" y="239.50"></text></g><g><title>exported_symbols (61,581 samples, 0.16%)</title><rect x="78.7061%" y="229" width="0.1557%" height="15" fill="rgb(235,36,10)"/><text x="78.9561%" y="239.50"></text></g><g><title>reachable_non_generics (39,641 samples, 0.10%)</title><rect x="78.7616%" y="213" width="0.1002%" height="15" fill="rgb(251,123,47)"/><text x="79.0116%" y="223.50"></text></g><g><title>layout_of (39,961 samples, 0.10%)</title><rect x="80.5273%" y="213" width="0.1010%" height="15" fill="rgb(221,13,13)"/><text x="80.7773%" y="223.50"></text></g><g><title>needs_drop_raw (161,232 samples, 0.41%)</title><rect x="82.4025%" y="197" width="0.4076%" height="15" fill="rgb(238,131,9)"/><text x="82.6525%" y="207.50"></text></g><g><title>is_copy_raw (143,892 samples, 0.36%)</title><rect x="82.4463%" y="181" width="0.3638%" height="15" fill="rgb(211,50,8)"/><text x="82.6963%" y="191.50"></text></g><g><title>evaluate_obligation (120,382 samples, 0.30%)</title><rect x="82.5057%" y="165" width="0.3044%" height="15" fill="rgb(245,182,24)"/><text x="82.7557%" y="175.50"></text></g><g><title>optimized_mir (1,519,458 samples, 3.84%)</title><rect x="78.9936%" y="229" width="3.8416%" height="15" fill="rgb(242,14,37)"/><text x="79.2436%" y="239.50">opti..</text></g><g><title>mir_drops_elaborated_and_const_checked (872,870 samples, 2.21%)</title><rect x="80.6284%" y="213" width="2.2069%" height="15" fill="rgb(246,228,12)"/><text x="80.8784%" y="223.50">m..</text></g><g><title>variances_of (51,920 samples, 0.13%)</title><rect x="82.8889%" y="229" width="0.1313%" height="15" fill="rgb(213,55,15)"/><text x="83.1389%" y="239.50"></text></g><g><title>crate_variances (43,920 samples, 0.11%)</title><rect x="82.9091%" y="213" width="0.1110%" height="15" fill="rgb(209,9,3)"/><text x="83.1591%" y="223.50"></text></g><g><title>generate_crate_metadata (2,375,096 samples, 6.00%)</title><rect x="77.0163%" y="245" width="6.0049%" height="15" fill="rgb(230,59,30)"/><text x="77.2663%" y="255.50">generate..</text></g><g><title>hir_lowering (660,478 samples, 1.67%)</title><rect x="83.0212%" y="245" width="1.6699%" height="15" fill="rgb(209,121,21)"/><text x="83.2712%" y="255.50"></text></g><g><title>finish_ongoing_codegen (2,510,768 samples, 6.35%)</title><rect x="84.7431%" y="229" width="6.3480%" height="15" fill="rgb(220,109,13)"/><text x="84.9931%" y="239.50">finish_o..</text></g><g><title>link_binary_remove_temps (40,311 samples, 0.10%)</title><rect x="92.1309%" y="197" width="0.1019%" height="15" fill="rgb(232,18,1)"/><text x="92.3809%" y="207.50"></text></g><g><title>link_crate (998,141 samples, 2.52%)</title><rect x="91.0910%" y="229" width="2.5236%" height="15" fill="rgb(215,41,42)"/><text x="91.3410%" y="239.50">li..</text></g><g><title>link_binary (982,181 samples, 2.48%)</title><rect x="91.1314%" y="213" width="2.4832%" height="15" fill="rgb(224,123,36)"/><text x="91.3814%" y="223.50">li..</text></g><g><title>link_rlib (546,526 samples, 1.38%)</title><rect x="92.2329%" y="197" width="1.3818%" height="15" fill="rgb(240,125,3)"/><text x="92.4829%" y="207.50"></text></g><g><title>link (3,542,749 samples, 8.96%)</title><rect x="84.6911%" y="245" width="8.9571%" height="15" fill="rgb(205,98,50)"/><text x="84.9411%" y="255.50">link</text></g><g><title>parse_crate (928,160 samples, 2.35%)</title><rect x="93.6482%" y="245" width="2.3467%" height="15" fill="rgb(205,185,37)"/><text x="93.8982%" y="255.50">p..</text></g><g><title>prepare_outputs (329,183 samples, 0.83%)</title><rect x="96.0185%" y="245" width="0.8323%" height="15" fill="rgb(238,207,15)"/><text x="96.2685%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (563,126 samples, 1.42%)</title><rect x="96.8508%" y="245" width="1.4237%" height="15" fill="rgb(213,199,42)"/><text x="97.1008%" y="255.50"></text></g><g><title>setup_global_ctxt (136,712 samples, 0.35%)</title><rect x="98.2778%" y="245" width="0.3456%" height="15" fill="rgb(235,201,11)"/><text x="98.5278%" y="255.50"></text></g><g><title>all (39,552,416 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (39,552,416 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (544,456 samples, 1.38%)</title><rect x="98.6235%" y="245" width="1.3765%" height="15" fill="rgb(243,32,47)"/><text x="98.8735%" y="255.50"></text></g></svg></svg>