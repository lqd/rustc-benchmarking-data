<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="214" onload="init(evt)" viewBox="0 0 1200 214" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="214" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="197.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="197.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (830,678,299 samples, 10.19%)</title><rect x="0.0088%" y="133" width="10.1928%" height="15" fill="rgb(227,0,7)"/><text x="0.2588%" y="143.50">LLVM_passes</text></g><g><title>mir_const (19,744,664 samples, 0.24%)</title><rect x="10.5840%" y="69" width="0.2423%" height="15" fill="rgb(217,0,24)"/><text x="10.8340%" y="79.50"></text></g><g><title>unsafety_check_result (17,300,020 samples, 0.21%)</title><rect x="10.6140%" y="53" width="0.2123%" height="15" fill="rgb(221,193,54)"/><text x="10.8640%" y="63.50"></text></g><g><title>mir_built (15,438,711 samples, 0.19%)</title><rect x="10.6368%" y="37" width="0.1894%" height="15" fill="rgb(248,212,6)"/><text x="10.8868%" y="47.50"></text></g><g><title>mir_promoted (22,369,332 samples, 0.27%)</title><rect x="10.5605%" y="85" width="0.2745%" height="15" fill="rgb(208,68,35)"/><text x="10.8105%" y="95.50"></text></g><g><title>MIR_borrow_checking (58,590,150 samples, 0.72%)</title><rect x="10.2082%" y="117" width="0.7189%" height="15" fill="rgb(232,128,0)"/><text x="10.4582%" y="127.50"></text></g><g><title>mir_borrowck (58,338,325 samples, 0.72%)</title><rect x="10.2112%" y="101" width="0.7158%" height="15" fill="rgb(207,160,47)"/><text x="10.4612%" y="111.50"></text></g><g><title>misc_checking_3 (10,595,379 samples, 0.13%)</title><rect x="10.9904%" y="117" width="0.1300%" height="15" fill="rgb(228,23,34)"/><text x="11.2404%" y="127.50"></text></g><g><title>impl_trait_ref (8,422,017 samples, 0.10%)</title><rect x="11.2590%" y="53" width="0.1033%" height="15" fill="rgb(218,30,26)"/><text x="11.5090%" y="63.50"></text></g><g><title>coherent_trait (25,990,693 samples, 0.32%)</title><rect x="11.1222%" y="85" width="0.3189%" height="15" fill="rgb(220,122,19)"/><text x="11.3722%" y="95.50"></text></g><g><title>specialization_graph_of (25,952,602 samples, 0.32%)</title><rect x="11.1226%" y="69" width="0.3185%" height="15" fill="rgb(250,228,42)"/><text x="11.3726%" y="79.50"></text></g><g><title>coherence_checking (26,177,785 samples, 0.32%)</title><rect x="11.1218%" y="101" width="0.3212%" height="15" fill="rgb(240,193,28)"/><text x="11.3718%" y="111.50"></text></g><g><title>typeck (28,518,643 samples, 0.35%)</title><rect x="12.0092%" y="53" width="0.3499%" height="15" fill="rgb(216,20,37)"/><text x="12.2592%" y="63.50"></text></g><g><title>item_bodies_checking (74,684,152 samples, 0.92%)</title><rect x="11.4437%" y="101" width="0.9164%" height="15" fill="rgb(206,188,39)"/><text x="11.6937%" y="111.50"></text></g><g><title>typeck_item_bodies (74,680,752 samples, 0.92%)</title><rect x="11.4437%" y="85" width="0.9164%" height="15" fill="rgb(217,207,13)"/><text x="11.6937%" y="95.50"></text></g><g><title>typeck (74,513,660 samples, 0.91%)</title><rect x="11.4458%" y="69" width="0.9143%" height="15" fill="rgb(231,73,38)"/><text x="11.6958%" y="79.50"></text></g><g><title>analysis (195,345,930 samples, 2.40%)</title><rect x="10.2016%" y="133" width="2.3970%" height="15" fill="rgb(225,20,46)"/><text x="10.4516%" y="143.50">an..</text></g><g><title>type_check_crate (120,464,288 samples, 1.48%)</title><rect x="11.1204%" y="117" width="1.4782%" height="15" fill="rgb(210,31,41)"/><text x="11.3704%" y="127.50"></text></g><g><title>wf_checking (12,344,689 samples, 0.15%)</title><rect x="12.4471%" y="101" width="0.1515%" height="15" fill="rgb(221,200,47)"/><text x="12.6971%" y="111.50"></text></g><g><title>is_freeze_raw (8,747,051 samples, 0.11%)</title><rect x="16.3441%" y="85" width="0.1073%" height="15" fill="rgb(226,26,5)"/><text x="16.5941%" y="95.50"></text></g><g><title>is_unpin_raw (10,116,347 samples, 0.12%)</title><rect x="16.4514%" y="85" width="0.1241%" height="15" fill="rgb(249,33,26)"/><text x="16.7014%" y="95.50"></text></g><g><title>evaluate_obligation (9,052,912 samples, 0.11%)</title><rect x="16.4645%" y="69" width="0.1111%" height="15" fill="rgb(235,183,28)"/><text x="16.7145%" y="79.50"></text></g><g><title>layout_of (10,272,486 samples, 0.13%)</title><rect x="16.5755%" y="85" width="0.1260%" height="15" fill="rgb(221,5,38)"/><text x="16.8255%" y="95.50"></text></g><g><title>param_env (18,540,736 samples, 0.23%)</title><rect x="16.7016%" y="85" width="0.2275%" height="15" fill="rgb(247,18,42)"/><text x="16.9516%" y="95.50"></text></g><g><title>fn_abi_of_instance (79,104,665 samples, 0.97%)</title><rect x="16.0149%" y="101" width="0.9707%" height="15" fill="rgb(241,131,45)"/><text x="16.2649%" y="111.50"></text></g><g><title>layout_of (9,176,666 samples, 0.11%)</title><rect x="17.0133%" y="101" width="0.1126%" height="15" fill="rgb(249,31,29)"/><text x="17.2633%" y="111.50"></text></g><g><title>codegen_module (370,296,511 samples, 4.54%)</title><rect x="12.6297%" y="117" width="4.5437%" height="15" fill="rgb(225,111,53)"/><text x="12.8797%" y="127.50">codeg..</text></g><g><title>mir_shims (13,940,578 samples, 0.17%)</title><rect x="17.4965%" y="69" width="0.1711%" height="15" fill="rgb(238,160,17)"/><text x="17.7465%" y="79.50"></text></g><g><title>metadata_decode_entry_optimized_mir (10,924,803 samples, 0.13%)</title><rect x="17.7367%" y="53" width="0.1341%" height="15" fill="rgb(214,148,48)"/><text x="17.9867%" y="63.50"></text></g><g><title>optimized_mir (21,688,668 samples, 0.27%)</title><rect x="17.6676%" y="69" width="0.2661%" height="15" fill="rgb(232,36,49)"/><text x="17.9176%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (16,280,121 samples, 0.20%)</title><rect x="18.0170%" y="53" width="0.1998%" height="15" fill="rgb(209,103,24)"/><text x="18.2670%" y="63.50"></text></g><g><title>resolve_instance (35,278,117 samples, 0.43%)</title><rect x="17.9337%" y="69" width="0.4329%" height="15" fill="rgb(229,88,8)"/><text x="18.1837%" y="79.50"></text></g><g><title>monomorphization_collector_graph_walk (105,195,505 samples, 1.29%)</title><rect x="17.1749%" y="85" width="1.2908%" height="15" fill="rgb(213,181,19)"/><text x="17.4249%" y="95.50"></text></g><g><title>monomorphization_collector (105,307,707 samples, 1.29%)</title><rect x="17.1749%" y="101" width="1.2922%" height="15" fill="rgb(254,191,54)"/><text x="17.4249%" y="111.50"></text></g><g><title>assert_symbols_are_distinct (15,527,675 samples, 0.19%)</title><rect x="18.4671%" y="85" width="0.1905%" height="15" fill="rgb(241,83,37)"/><text x="18.7171%" y="95.50"></text></g><g><title>symbol_name (13,693,841 samples, 0.17%)</title><rect x="18.4896%" y="69" width="0.1680%" height="15" fill="rgb(233,36,39)"/><text x="18.7396%" y="79.50"></text></g><g><title>collect_and_partition_mono_items (126,490,296 samples, 1.55%)</title><rect x="17.1736%" y="117" width="1.5521%" height="15" fill="rgb(226,3,54)"/><text x="17.4236%" y="127.50"></text></g><g><title>partition_and_assert_distinct_symbols (21,079,508 samples, 0.26%)</title><rect x="18.4670%" y="101" width="0.2587%" height="15" fill="rgb(245,192,40)"/><text x="18.7170%" y="111.50"></text></g><g><title>codegen_crate (499,467,708 samples, 6.13%)</title><rect x="12.5987%" y="133" width="6.1287%" height="15" fill="rgb(238,167,29)"/><text x="12.8487%" y="143.50">codegen_..</text></g><g><title>codegen_module_optimize (2,930,735,201 samples, 35.96%)</title><rect x="18.7274%" y="133" width="35.9616%" height="15" fill="rgb(232,182,51)"/><text x="18.9774%" y="143.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,836,722,949 samples, 34.81%)</title><rect x="19.8810%" y="117" width="34.8080%" height="15" fill="rgb(231,60,39)"/><text x="20.1310%" y="127.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (1,606,906,697 samples, 19.72%)</title><rect x="55.3147%" y="117" width="19.7176%" height="15" fill="rgb(208,69,12)"/><text x="55.5647%" y="127.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (1,164,871,615 samples, 14.29%)</title><rect x="75.0323%" y="117" width="14.2936%" height="15" fill="rgb(235,93,37)"/><text x="75.2823%" y="127.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (1,155,020,862 samples, 14.17%)</title><rect x="75.1531%" y="101" width="14.1727%" height="15" fill="rgb(213,116,39)"/><text x="75.4031%" y="111.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (319,405,399 samples, 3.92%)</title><rect x="89.3258%" y="117" width="3.9193%" height="15" fill="rgb(222,207,29)"/><text x="89.5758%" y="127.50">LLVM..</text></g><g><title>codegen_module_perform_lto (3,146,934,476 samples, 38.61%)</title><rect x="54.6890%" y="133" width="38.6145%" height="15" fill="rgb(206,96,30)"/><text x="54.9390%" y="143.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (25,143,904 samples, 0.31%)</title><rect x="93.3100%" y="117" width="0.3085%" height="15" fill="rgb(218,138,4)"/><text x="93.5600%" y="127.50"></text></g><g><title>expand_crate (25,126,944 samples, 0.31%)</title><rect x="93.3102%" y="101" width="0.3083%" height="15" fill="rgb(250,191,14)"/><text x="93.5602%" y="111.50"></text></g><g><title>configure_and_expand (30,364,493 samples, 0.37%)</title><rect x="93.3035%" y="133" width="0.3726%" height="15" fill="rgb(239,60,40)"/><text x="93.5535%" y="143.50"></text></g><g><title>free_global_ctxt (24,208,763 samples, 0.30%)</title><rect x="93.6895%" y="133" width="0.2971%" height="15" fill="rgb(206,27,48)"/><text x="93.9395%" y="143.50"></text></g><g><title>optimized_mir (12,647,994 samples, 0.16%)</title><rect x="94.0332%" y="117" width="0.1552%" height="15" fill="rgb(225,35,8)"/><text x="94.2832%" y="127.50"></text></g><g><title>generate_crate_metadata (16,795,470 samples, 0.21%)</title><rect x="93.9865%" y="133" width="0.2061%" height="15" fill="rgb(250,213,24)"/><text x="94.2365%" y="143.50"></text></g><g><title>finish_ongoing_codegen (458,361,754 samples, 5.62%)</title><rect x="94.2625%" y="117" width="5.6243%" height="15" fill="rgb(247,123,22)"/><text x="94.5125%" y="127.50">finish_..</text></g><g><title>link (461,111,645 samples, 5.66%)</title><rect x="94.2612%" y="133" width="5.6581%" height="15" fill="rgb(231,138,38)"/><text x="94.5112%" y="143.50">link</text></g><g><title>all (8,149,624,492 samples, 100%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(231,145,46)"/><text x="0.2500%" y="175.50"></text></g><g><title>rustc (8,149,624,492 samples, 100.00%)</title><rect x="0.0000%" y="149" width="100.0000%" height="15" fill="rgb(251,118,11)"/><text x="0.2500%" y="159.50">rustc</text></g></svg></svg>