<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (56,269,490 samples, 18.13%)</title><rect x="0.2791%" y="181" width="18.1308%" height="15" fill="rgb(227,0,7)"/><text x="0.5291%" y="191.50">LLVM_passes</text></g><g><title>needs_drop_raw (429,803 samples, 0.14%)</title><rect x="22.8545%" y="69" width="0.1385%" height="15" fill="rgb(217,0,24)"/><text x="23.1045%" y="79.50"></text></g><g><title>is_copy_raw (318,822 samples, 0.10%)</title><rect x="22.8902%" y="53" width="0.1027%" height="15" fill="rgb(221,193,54)"/><text x="23.1402%" y="63.50"></text></g><g><title>specialization_graph_of (310,873 samples, 0.10%)</title><rect x="23.0587%" y="53" width="0.1002%" height="15" fill="rgb(248,212,6)"/><text x="23.3087%" y="63.50"></text></g><g><title>resolve_instance (562,515 samples, 0.18%)</title><rect x="22.9930%" y="69" width="0.1812%" height="15" fill="rgb(208,68,35)"/><text x="23.2430%" y="79.50"></text></g><g><title>thir_body (1,166,894 samples, 0.38%)</title><rect x="23.1793%" y="69" width="0.3760%" height="15" fill="rgb(232,128,0)"/><text x="23.4293%" y="79.50"></text></g><g><title>mir_const (6,246,901 samples, 2.01%)</title><rect x="21.5448%" y="117" width="2.0128%" height="15" fill="rgb(207,160,47)"/><text x="21.7948%" y="127.50">m..</text></g><g><title>unsafety_check_result (5,491,932 samples, 1.77%)</title><rect x="21.7881%" y="101" width="1.7696%" height="15" fill="rgb(228,23,34)"/><text x="22.0381%" y="111.50"></text></g><g><title>mir_built (4,962,577 samples, 1.60%)</title><rect x="21.9587%" y="85" width="1.5990%" height="15" fill="rgb(218,30,26)"/><text x="22.2087%" y="95.50"></text></g><g><title>mir_promoted (7,810,335 samples, 2.52%)</title><rect x="21.3131%" y="133" width="2.5166%" height="15" fill="rgb(220,122,19)"/><text x="21.5631%" y="143.50">mi..</text></g><g><title>mir_const_qualif (844,180 samples, 0.27%)</title><rect x="23.5577%" y="117" width="0.2720%" height="15" fill="rgb(250,228,42)"/><text x="23.8077%" y="127.50"></text></g><g><title>mir_const (713,789 samples, 0.23%)</title><rect x="23.5997%" y="101" width="0.2300%" height="15" fill="rgb(240,193,28)"/><text x="23.8497%" y="111.50"></text></g><g><title>unsafety_check_result (587,997 samples, 0.19%)</title><rect x="23.6402%" y="85" width="0.1895%" height="15" fill="rgb(216,20,37)"/><text x="23.8902%" y="95.50"></text></g><g><title>mir_built (546,565 samples, 0.18%)</title><rect x="23.6536%" y="69" width="0.1761%" height="15" fill="rgb(206,188,39)"/><text x="23.9036%" y="79.50"></text></g><g><title>type_op_prove_predicate (506,425 samples, 0.16%)</title><rect x="23.9461%" y="133" width="0.1632%" height="15" fill="rgb(217,207,13)"/><text x="24.1961%" y="143.50"></text></g><g><title>MIR_borrow_checking (17,017,248 samples, 5.48%)</title><rect x="18.6270%" y="165" width="5.4832%" height="15" fill="rgb(231,73,38)"/><text x="18.8770%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (16,921,417 samples, 5.45%)</title><rect x="18.6578%" y="149" width="5.4523%" height="15" fill="rgb(225,20,46)"/><text x="18.9078%" y="159.50">mir_bor..</text></g><g><title>MIR_effect_checking (388,604 samples, 0.13%)</title><rect x="24.1101%" y="165" width="0.1252%" height="15" fill="rgb(210,31,41)"/><text x="24.3601%" y="175.50"></text></g><g><title>hir_module_items (332,475 samples, 0.11%)</title><rect x="24.2354%" y="165" width="0.1071%" height="15" fill="rgb(221,200,47)"/><text x="24.4854%" y="175.50"></text></g><g><title>codegen_fn_attrs (561,936 samples, 0.18%)</title><rect x="24.5409%" y="133" width="0.1811%" height="15" fill="rgb(226,26,5)"/><text x="24.7909%" y="143.50"></text></g><g><title>check_mod_attrs (1,136,173 samples, 0.37%)</title><rect x="24.3559%" y="149" width="0.3661%" height="15" fill="rgb(249,33,26)"/><text x="24.6059%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (546,707 samples, 0.18%)</title><rect x="24.8500%" y="149" width="0.1762%" height="15" fill="rgb(235,183,28)"/><text x="25.1000%" y="159.50"></text></g><g><title>misc_checking_1 (2,206,374 samples, 0.71%)</title><rect x="24.3426%" y="165" width="0.7109%" height="15" fill="rgb(221,5,38)"/><text x="24.5926%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (478,775 samples, 0.15%)</title><rect x="25.0541%" y="149" width="0.1543%" height="15" fill="rgb(247,18,42)"/><text x="25.3041%" y="159.50"></text></g><g><title>check_mod_liveness (359,463 samples, 0.12%)</title><rect x="25.0925%" y="133" width="0.1158%" height="15" fill="rgb(241,131,45)"/><text x="25.3425%" y="143.50"></text></g><g><title>misc_checking_2 (910,940 samples, 0.29%)</title><rect x="25.0535%" y="165" width="0.2935%" height="15" fill="rgb(249,31,29)"/><text x="25.3035%" y="175.50"></text></g><g><title>match_checking (430,485 samples, 0.14%)</title><rect x="25.2083%" y="149" width="0.1387%" height="15" fill="rgb(225,111,53)"/><text x="25.4583%" y="159.50"></text></g><g><title>check_match (396,415 samples, 0.13%)</title><rect x="25.2193%" y="133" width="0.1277%" height="15" fill="rgb(238,160,17)"/><text x="25.4693%" y="143.50"></text></g><g><title>crate_lints (1,482,756 samples, 0.48%)</title><rect x="25.4938%" y="133" width="0.4778%" height="15" fill="rgb(214,148,48)"/><text x="25.7438%" y="143.50"></text></g><g><title>type_of (337,674 samples, 0.11%)</title><rect x="25.8628%" y="117" width="0.1088%" height="15" fill="rgb(232,36,49)"/><text x="26.1128%" y="127.50"></text></g><g><title>lint_checking (1,942,391 samples, 0.63%)</title><rect x="25.4934%" y="149" width="0.6259%" height="15" fill="rgb(209,103,24)"/><text x="25.7434%" y="159.50"></text></g><g><title>module_lints (458,265 samples, 0.15%)</title><rect x="25.9716%" y="133" width="0.1477%" height="15" fill="rgb(229,88,8)"/><text x="26.2216%" y="143.50"></text></g><g><title>lint_mod (453,705 samples, 0.15%)</title><rect x="25.9730%" y="117" width="0.1462%" height="15" fill="rgb(213,181,19)"/><text x="26.2230%" y="127.50"></text></g><g><title>privacy_checking_modules (483,626 samples, 0.16%)</title><rect x="26.1679%" y="149" width="0.1558%" height="15" fill="rgb(254,191,54)"/><text x="26.4179%" y="159.50"></text></g><g><title>check_mod_privacy (480,816 samples, 0.15%)</title><rect x="26.1688%" y="133" width="0.1549%" height="15" fill="rgb(241,83,37)"/><text x="26.4188%" y="143.50"></text></g><g><title>misc_checking_3 (3,042,554 samples, 0.98%)</title><rect x="25.3471%" y="165" width="0.9804%" height="15" fill="rgb(233,36,39)"/><text x="25.5971%" y="175.50"></text></g><g><title>impl_parent (930,699 samples, 0.30%)</title><rect x="26.9811%" y="101" width="0.2999%" height="15" fill="rgb(226,3,54)"/><text x="27.2311%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (505,733 samples, 0.16%)</title><rect x="27.1180%" y="85" width="0.1630%" height="15" fill="rgb(245,192,40)"/><text x="27.3680%" y="95.50"></text></g><g><title>impl_trait_ref (2,296,479 samples, 0.74%)</title><rect x="27.2810%" y="101" width="0.7400%" height="15" fill="rgb(238,167,29)"/><text x="27.5310%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,880,626 samples, 0.61%)</title><rect x="27.4150%" y="85" width="0.6060%" height="15" fill="rgb(232,182,51)"/><text x="27.6650%" y="95.50"></text></g><g><title>coherent_trait (5,488,840 samples, 1.77%)</title><rect x="26.3518%" y="133" width="1.7686%" height="15" fill="rgb(231,60,39)"/><text x="26.6018%" y="143.50"></text></g><g><title>specialization_graph_of (5,083,515 samples, 1.64%)</title><rect x="26.4824%" y="117" width="1.6380%" height="15" fill="rgb(208,69,12)"/><text x="26.7324%" y="127.50"></text></g><g><title>coherence_checking (5,594,071 samples, 1.80%)</title><rect x="26.3449%" y="149" width="1.8025%" height="15" fill="rgb(235,93,37)"/><text x="26.5949%" y="159.50">c..</text></g><g><title>associated_item (590,494 samples, 0.19%)</title><rect x="35.3688%" y="85" width="0.1903%" height="15" fill="rgb(213,116,39)"/><text x="35.6188%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (469,282 samples, 0.15%)</title><rect x="35.4078%" y="69" width="0.1512%" height="15" fill="rgb(222,207,29)"/><text x="35.6578%" y="79.50"></text></g><g><title>associated_items (809,639 samples, 0.26%)</title><rect x="35.3066%" y="101" width="0.2609%" height="15" fill="rgb(206,96,30)"/><text x="35.5566%" y="111.50"></text></g><g><title>generics_of (1,244,933 samples, 0.40%)</title><rect x="37.5339%" y="85" width="0.4011%" height="15" fill="rgb(218,138,4)"/><text x="37.7839%" y="95.50"></text></g><g><title>metadata_decode_entry_generics_of (932,608 samples, 0.30%)</title><rect x="37.6346%" y="69" width="0.3005%" height="15" fill="rgb(250,191,14)"/><text x="37.8846%" y="79.50"></text></g><g><title>impl_trait_ref (1,270,289 samples, 0.41%)</title><rect x="38.0600%" y="85" width="0.4093%" height="15" fill="rgb(239,60,40)"/><text x="38.3100%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,017,042 samples, 0.33%)</title><rect x="38.1416%" y="69" width="0.3277%" height="15" fill="rgb(206,27,48)"/><text x="38.3916%" y="79.50"></text></g><g><title>predicates_of (1,276,183 samples, 0.41%)</title><rect x="38.4974%" y="85" width="0.4112%" height="15" fill="rgb(225,35,8)"/><text x="38.7474%" y="95.50"></text></g><g><title>predicates_defined_on (715,244 samples, 0.23%)</title><rect x="38.6781%" y="69" width="0.2305%" height="15" fill="rgb(250,213,24)"/><text x="38.9281%" y="79.50"></text></g><g><title>specializes (4,250,188 samples, 1.37%)</title><rect x="38.9086%" y="85" width="1.3695%" height="15" fill="rgb(247,123,22)"/><text x="39.1586%" y="95.50"></text></g><g><title>param_env (2,434,354 samples, 0.78%)</title><rect x="39.4937%" y="69" width="0.7844%" height="15" fill="rgb(231,138,38)"/><text x="39.7437%" y="79.50"></text></g><g><title>def_span (969,738 samples, 0.31%)</title><rect x="39.9656%" y="53" width="0.3125%" height="15" fill="rgb(231,145,46)"/><text x="40.2156%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (853,677 samples, 0.28%)</title><rect x="40.0030%" y="37" width="0.2751%" height="15" fill="rgb(251,118,11)"/><text x="40.2530%" y="47.50"></text></g><g><title>trait_impls_of (378,463 samples, 0.12%)</title><rect x="40.2842%" y="85" width="0.1219%" height="15" fill="rgb(217,147,25)"/><text x="40.5342%" y="95.50"></text></g><g><title>evaluate_obligation (14,887,635 samples, 4.80%)</title><rect x="35.6264%" y="101" width="4.7970%" height="15" fill="rgb(247,81,37)"/><text x="35.8764%" y="111.50">evalua..</text></g><g><title>generics_of (351,291 samples, 0.11%)</title><rect x="40.4667%" y="101" width="0.1132%" height="15" fill="rgb(209,12,38)"/><text x="40.7167%" y="111.50"></text></g><g><title>item_attrs (364,614 samples, 0.12%)</title><rect x="40.6911%" y="101" width="0.1175%" height="15" fill="rgb(227,1,9)"/><text x="40.9411%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (360,134 samples, 0.12%)</title><rect x="40.6926%" y="85" width="0.1160%" height="15" fill="rgb(248,47,43)"/><text x="40.9426%" y="95.50"></text></g><g><title>specializes (347,115 samples, 0.11%)</title><rect x="41.0610%" y="101" width="0.1118%" height="15" fill="rgb(221,10,30)"/><text x="41.3110%" y="111.50"></text></g><g><title>item_bodies_checking (40,521,397 samples, 13.06%)</title><rect x="28.1648%" y="149" width="13.0565%" height="15" fill="rgb(210,229,1)"/><text x="28.4148%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (40,518,637 samples, 13.06%)</title><rect x="28.1657%" y="133" width="13.0556%" height="15" fill="rgb(222,148,37)"/><text x="28.4157%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (40,455,477 samples, 13.04%)</title><rect x="28.1860%" y="117" width="13.0353%" height="15" fill="rgb(234,67,33)"/><text x="28.4360%" y="127.50">typeck</text></g><g><title>item_types_checking (1,203,124 samples, 0.39%)</title><rect x="41.2213%" y="149" width="0.3877%" height="15" fill="rgb(247,98,35)"/><text x="41.4713%" y="159.50"></text></g><g><title>check_mod_item_types (1,199,104 samples, 0.39%)</title><rect x="41.2226%" y="133" width="0.3864%" height="15" fill="rgb(247,138,52)"/><text x="41.4726%" y="143.50"></text></g><g><title>typeck (707,588 samples, 0.23%)</title><rect x="41.3810%" y="117" width="0.2280%" height="15" fill="rgb(213,79,30)"/><text x="41.6310%" y="127.50"></text></g><g><title>late_bound_vars_map (430,015 samples, 0.14%)</title><rect x="41.8300%" y="101" width="0.1386%" height="15" fill="rgb(246,177,23)"/><text x="42.0800%" y="111.50"></text></g><g><title>resolve_lifetimes (392,065 samples, 0.13%)</title><rect x="41.8422%" y="85" width="0.1263%" height="15" fill="rgb(230,62,27)"/><text x="42.0922%" y="95.50"></text></g><g><title>fn_sig (666,920 samples, 0.21%)</title><rect x="41.7635%" y="117" width="0.2149%" height="15" fill="rgb(216,154,8)"/><text x="42.0135%" y="127.50"></text></g><g><title>late_bound_vars_map (592,316 samples, 0.19%)</title><rect x="42.2360%" y="69" width="0.1909%" height="15" fill="rgb(244,35,45)"/><text x="42.4860%" y="79.50"></text></g><g><title>resolve_lifetimes (584,676 samples, 0.19%)</title><rect x="42.2384%" y="53" width="0.1884%" height="15" fill="rgb(251,115,12)"/><text x="42.4884%" y="63.50"></text></g><g><title>lint_levels (443,665 samples, 0.14%)</title><rect x="42.2839%" y="37" width="0.1430%" height="15" fill="rgb(240,54,50)"/><text x="42.5339%" y="47.50"></text></g><g><title>explicit_predicates_of (859,209 samples, 0.28%)</title><rect x="42.1590%" y="85" width="0.2768%" height="15" fill="rgb(233,84,52)"/><text x="42.4090%" y="95.50"></text></g><g><title>predicates_of (1,368,172 samples, 0.44%)</title><rect x="42.0907%" y="117" width="0.4408%" height="15" fill="rgb(207,117,47)"/><text x="42.3407%" y="127.50"></text></g><g><title>predicates_defined_on (1,291,792 samples, 0.42%)</title><rect x="42.1153%" y="101" width="0.4162%" height="15" fill="rgb(249,43,39)"/><text x="42.3653%" y="111.50"></text></g><g><title>type_collecting (3,227,936 samples, 1.04%)</title><rect x="41.6094%" y="149" width="1.0401%" height="15" fill="rgb(209,38,44)"/><text x="41.8594%" y="159.50"></text></g><g><title>collect_mod_item_types (3,210,055 samples, 1.03%)</title><rect x="41.6152%" y="133" width="1.0343%" height="15" fill="rgb(236,212,23)"/><text x="41.8652%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,044,024 samples, 0.34%)</title><rect x="42.6898%" y="133" width="0.3364%" height="15" fill="rgb(242,79,21)"/><text x="42.9398%" y="143.50"></text></g><g><title>evaluate_obligation (318,243 samples, 0.10%)</title><rect x="43.3276%" y="117" width="0.1025%" height="15" fill="rgb(211,96,35)"/><text x="43.5776%" y="127.50"></text></g><g><title>check_item_well_formed (1,920,470 samples, 0.62%)</title><rect x="43.0261%" y="133" width="0.6188%" height="15" fill="rgb(253,215,40)"/><text x="43.2761%" y="143.50"></text></g><g><title>analysis (78,422,415 samples, 25.27%)</title><rect x="18.4098%" y="181" width="25.2687%" height="15" fill="rgb(211,81,21)"/><text x="18.6598%" y="191.50">analysis</text></g><g><title>type_check_crate (53,849,924 samples, 17.35%)</title><rect x="26.3274%" y="165" width="17.3512%" height="15" fill="rgb(208,190,38)"/><text x="26.5774%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,187,565 samples, 1.03%)</title><rect x="42.6515%" y="149" width="1.0271%" height="15" fill="rgb(235,213,38)"/><text x="42.9015%" y="159.50"></text></g><g><title>codegen_module (1,308,505 samples, 0.42%)</title><rect x="43.8467%" y="165" width="0.4216%" height="15" fill="rgb(237,122,38)"/><text x="44.0967%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (571,716 samples, 0.18%)</title><rect x="44.5958%" y="101" width="0.1842%" height="15" fill="rgb(244,218,35)"/><text x="44.8458%" y="111.50"></text></g><g><title>optimized_mir (1,393,876 samples, 0.45%)</title><rect x="44.3388%" y="117" width="0.4491%" height="15" fill="rgb(240,68,47)"/><text x="44.5888%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,589,907 samples, 0.51%)</title><rect x="44.2843%" y="133" width="0.5123%" height="15" fill="rgb(210,16,53)"/><text x="44.5343%" y="143.50"></text></g><g><title>monomorphization_collector (1,660,068 samples, 0.53%)</title><rect x="44.2836%" y="149" width="0.5349%" height="15" fill="rgb(235,124,12)"/><text x="44.5336%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,817,830 samples, 0.59%)</title><rect x="44.2686%" y="165" width="0.5857%" height="15" fill="rgb(224,169,11)"/><text x="44.5186%" y="175.50"></text></g><g><title>codegen_crate (3,651,740 samples, 1.18%)</title><rect x="43.6827%" y="181" width="1.1766%" height="15" fill="rgb(250,166,2)"/><text x="43.9327%" y="191.50"></text></g><g><title>codegen_module_optimize (26,723,805 samples, 8.61%)</title><rect x="44.8593%" y="181" width="8.6108%" height="15" fill="rgb(242,216,29)"/><text x="45.1093%" y="191.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (24,776,313 samples, 7.98%)</title><rect x="45.4868%" y="165" width="7.9833%" height="15" fill="rgb(230,116,27)"/><text x="45.7368%" y="175.50">LLVM_module..</text></g><g><title>LLVM_lto_optimize (18,095,809 samples, 5.83%)</title><rect x="53.8218%" y="165" width="5.8307%" height="15" fill="rgb(228,99,48)"/><text x="54.0718%" y="175.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (25,075,077 samples, 8.08%)</title><rect x="59.6525%" y="165" width="8.0795%" height="15" fill="rgb(253,11,6)"/><text x="59.9025%" y="175.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (24,826,614 samples, 8.00%)</title><rect x="59.7326%" y="149" width="7.9995%" height="15" fill="rgb(247,143,39)"/><text x="59.9826%" y="159.50">LLVM_module..</text></g><g><title>codegen_module_perform_lto (44,405,800 samples, 14.31%)</title><rect x="53.4701%" y="181" width="14.3081%" height="15" fill="rgb(236,97,10)"/><text x="53.7201%" y="191.50">codegen_module_perform..</text></g><g><title>macro_expand_crate (17,973,538 samples, 5.79%)</title><rect x="68.0167%" y="165" width="5.7913%" height="15" fill="rgb(233,208,19)"/><text x="68.2667%" y="175.50">macro_e..</text></g><g><title>expand_crate (17,948,058 samples, 5.78%)</title><rect x="68.0249%" y="149" width="5.7831%" height="15" fill="rgb(216,164,2)"/><text x="68.2749%" y="159.50">expand_..</text></g><g><title>late_resolve_crate (4,080,636 samples, 1.31%)</title><rect x="73.9900%" y="149" width="1.3148%" height="15" fill="rgb(220,129,5)"/><text x="74.2400%" y="159.50"></text></g><g><title>configure_and_expand (23,618,431 samples, 7.61%)</title><rect x="67.7782%" y="181" width="7.6102%" height="15" fill="rgb(242,17,10)"/><text x="68.0282%" y="191.50">configure_..</text></g><g><title>resolve_crate (4,605,372 samples, 1.48%)</title><rect x="73.9045%" y="165" width="1.4839%" height="15" fill="rgb(242,107,0)"/><text x="74.1545%" y="175.50"></text></g><g><title>drop_ast (432,415 samples, 0.14%)</title><rect x="75.3884%" y="181" width="0.1393%" height="15" fill="rgb(251,28,31)"/><text x="75.6384%" y="191.50"></text></g><g><title>early_lint_checks (1,038,591 samples, 0.33%)</title><rect x="75.5361%" y="181" width="0.3346%" height="15" fill="rgb(233,223,10)"/><text x="75.7861%" y="191.50"></text></g><g><title>free_global_ctxt (2,672,359 samples, 0.86%)</title><rect x="75.8707%" y="181" width="0.8611%" height="15" fill="rgb(215,21,27)"/><text x="76.1207%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,393,326 samples, 0.77%)</title><rect x="78.2681%" y="149" width="0.7712%" height="15" fill="rgb(232,23,21)"/><text x="78.5181%" y="159.50"></text></g><g><title>optimized_mir (5,199,359 samples, 1.68%)</title><rect x="77.3702%" y="165" width="1.6753%" height="15" fill="rgb(244,5,23)"/><text x="77.6202%" y="175.50"></text></g><g><title>generate_crate_metadata (7,221,210 samples, 2.33%)</title><rect x="76.7318%" y="181" width="2.3268%" height="15" fill="rgb(226,81,46)"/><text x="76.9818%" y="191.50">g..</text></g><g><title>hir_lowering (6,934,066 samples, 2.23%)</title><rect x="79.0586%" y="181" width="2.2342%" height="15" fill="rgb(247,70,30)"/><text x="79.3086%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (52,223,316 samples, 16.83%)</title><rect x="81.3026%" y="165" width="16.8270%" height="15" fill="rgb(212,68,19)"/><text x="81.5526%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,483,206 samples, 0.48%)</title><rect x="98.1297%" y="165" width="0.4779%" height="15" fill="rgb(240,187,13)"/><text x="98.3797%" y="175.50"></text></g><g><title>link_binary (1,442,186 samples, 0.46%)</title><rect x="98.1429%" y="149" width="0.4647%" height="15" fill="rgb(223,113,26)"/><text x="98.3929%" y="159.50"></text></g><g><title>link_rlib (989,142 samples, 0.32%)</title><rect x="98.2889%" y="133" width="0.3187%" height="15" fill="rgb(206,192,2)"/><text x="98.5389%" y="143.50"></text></g><g><title>link (53,750,033 samples, 17.32%)</title><rect x="81.2928%" y="181" width="17.3190%" height="15" fill="rgb(241,108,4)"/><text x="81.5428%" y="191.50">link</text></g><g><title>parse_crate (2,560,808 samples, 0.83%)</title><rect x="98.6118%" y="181" width="0.8251%" height="15" fill="rgb(247,173,49)"/><text x="98.8618%" y="191.50"></text></g><g><title>prepare_outputs (361,294 samples, 0.12%)</title><rect x="99.4402%" y="181" width="0.1164%" height="15" fill="rgb(224,114,35)"/><text x="99.6902%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (877,009 samples, 0.28%)</title><rect x="99.5566%" y="181" width="0.2826%" height="15" fill="rgb(245,159,27)"/><text x="99.8066%" y="191.50"></text></g><g><title>all (310,353,602 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (310,353,602 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,23,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (342,574 samples, 0.11%)</title><rect x="99.8896%" y="181" width="0.1104%" height="15" fill="rgb(205,117,38)"/><text x="100.1396%" y="191.50"></text></g></svg></svg>