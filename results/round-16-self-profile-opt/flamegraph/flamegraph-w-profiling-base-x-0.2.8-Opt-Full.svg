<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (10,048,586 samples, 8.42%)</title><rect x="0.3606%" y="245" width="8.4156%" height="15" fill="rgb(227,0,7)"/><text x="0.6106%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (184,742 samples, 0.15%)</title><rect x="8.6215%" y="229" width="0.1547%" height="15" fill="rgb(217,0,24)"/><text x="8.8715%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (168,311 samples, 0.14%)</title><rect x="8.6352%" y="213" width="0.1410%" height="15" fill="rgb(221,193,54)"/><text x="8.8852%" y="223.50"></text></g><g><title>implied_outlives_bounds (157,161 samples, 0.13%)</title><rect x="15.7149%" y="197" width="0.1316%" height="15" fill="rgb(248,212,6)"/><text x="15.9649%" y="207.50"></text></g><g><title>param_env (363,505 samples, 0.30%)</title><rect x="16.7790%" y="165" width="0.3044%" height="15" fill="rgb(208,68,35)"/><text x="17.0290%" y="175.50"></text></g><g><title>item_attrs (446,856 samples, 0.37%)</title><rect x="17.4242%" y="133" width="0.3742%" height="15" fill="rgb(232,128,0)"/><text x="17.6742%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (434,455 samples, 0.36%)</title><rect x="17.4346%" y="117" width="0.3639%" height="15" fill="rgb(207,160,47)"/><text x="17.6846%" y="127.50"></text></g><g><title>codegen_fn_attrs (568,557 samples, 0.48%)</title><rect x="17.3374%" y="149" width="0.4762%" height="15" fill="rgb(228,23,34)"/><text x="17.5874%" y="159.50"></text></g><g><title>is_copy_raw (172,131 samples, 0.14%)</title><rect x="19.2364%" y="133" width="0.1442%" height="15" fill="rgb(218,30,26)"/><text x="19.4864%" y="143.50"></text></g><g><title>evaluate_obligation (137,080 samples, 0.11%)</title><rect x="19.2657%" y="117" width="0.1148%" height="15" fill="rgb(220,122,19)"/><text x="19.5157%" y="127.50"></text></g><g><title>param_env (252,893 samples, 0.21%)</title><rect x="19.5108%" y="85" width="0.2118%" height="15" fill="rgb(250,228,42)"/><text x="19.7608%" y="95.50"></text></g><g><title>predicates_of (244,162 samples, 0.20%)</title><rect x="19.5181%" y="69" width="0.2045%" height="15" fill="rgb(240,193,28)"/><text x="19.7681%" y="79.50"></text></g><g><title>predicates_defined_on (239,882 samples, 0.20%)</title><rect x="19.5217%" y="53" width="0.2009%" height="15" fill="rgb(216,20,37)"/><text x="19.7717%" y="63.50"></text></g><g><title>inferred_outlives_of (235,922 samples, 0.20%)</title><rect x="19.5250%" y="37" width="0.1976%" height="15" fill="rgb(206,188,39)"/><text x="19.7750%" y="47.50"></text></g><g><title>adt_drop_tys (304,873 samples, 0.26%)</title><rect x="19.4680%" y="101" width="0.2553%" height="15" fill="rgb(217,207,13)"/><text x="19.7180%" y="111.50"></text></g><g><title>adt_drop_tys (406,525 samples, 0.34%)</title><rect x="19.4529%" y="117" width="0.3405%" height="15" fill="rgb(231,73,38)"/><text x="19.7029%" y="127.50"></text></g><g><title>needs_drop_raw (1,102,165 samples, 0.92%)</title><rect x="19.3824%" y="133" width="0.9231%" height="15" fill="rgb(225,20,46)"/><text x="19.6324%" y="143.50"></text></g><g><title>is_copy_raw (611,409 samples, 0.51%)</title><rect x="19.7934%" y="117" width="0.5120%" height="15" fill="rgb(210,31,41)"/><text x="20.0434%" y="127.50"></text></g><g><title>evaluate_obligation (489,494 samples, 0.41%)</title><rect x="19.8955%" y="101" width="0.4099%" height="15" fill="rgb(221,200,47)"/><text x="20.1455%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (272,691 samples, 0.23%)</title><rect x="20.4463%" y="117" width="0.2284%" height="15" fill="rgb(226,26,5)"/><text x="20.6963%" y="127.50"></text></g><g><title>impl_parent (212,872 samples, 0.18%)</title><rect x="20.9813%" y="101" width="0.1783%" height="15" fill="rgb(249,33,26)"/><text x="21.2313%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (141,351 samples, 0.12%)</title><rect x="21.0412%" y="85" width="0.1184%" height="15" fill="rgb(235,183,28)"/><text x="21.2912%" y="95.50"></text></g><g><title>specialization_graph_of (1,020,291 samples, 0.85%)</title><rect x="20.6931%" y="117" width="0.8545%" height="15" fill="rgb(221,5,38)"/><text x="20.9431%" y="127.50"></text></g><g><title>impl_trait_ref (463,286 samples, 0.39%)</title><rect x="21.1596%" y="101" width="0.3880%" height="15" fill="rgb(247,18,42)"/><text x="21.4096%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (395,456 samples, 0.33%)</title><rect x="21.2164%" y="85" width="0.3312%" height="15" fill="rgb(241,131,45)"/><text x="21.4664%" y="95.50"></text></g><g><title>resolve_instance (1,572,595 samples, 1.32%)</title><rect x="20.3054%" y="133" width="1.3170%" height="15" fill="rgb(249,31,29)"/><text x="20.5554%" y="143.50"></text></g><g><title>thir_body (624,227 samples, 0.52%)</title><rect x="21.6369%" y="133" width="0.5228%" height="15" fill="rgb(225,111,53)"/><text x="21.8869%" y="143.50"></text></g><g><title>mir_const (6,983,988 samples, 5.85%)</title><rect x="16.3512%" y="181" width="5.8490%" height="15" fill="rgb(238,160,17)"/><text x="16.6012%" y="191.50">mir_con..</text></g><g><title>unsafety_check_result (6,109,748 samples, 5.12%)</title><rect x="17.0834%" y="165" width="5.1168%" height="15" fill="rgb(214,148,48)"/><text x="17.3334%" y="175.50">unsafe..</text></g><g><title>mir_built (5,237,849 samples, 4.39%)</title><rect x="17.8136%" y="149" width="4.3866%" height="15" fill="rgb(232,36,49)"/><text x="18.0636%" y="159.50">mir_b..</text></g><g><title>mir_promoted (7,578,395 samples, 6.35%)</title><rect x="15.9381%" y="197" width="6.3468%" height="15" fill="rgb(209,103,24)"/><text x="16.1881%" y="207.50">mir_prom..</text></g><g><title>type_op_ascribe_user_type (274,432 samples, 0.23%)</title><rect x="22.2853%" y="197" width="0.2298%" height="15" fill="rgb(229,88,8)"/><text x="22.5353%" y="207.50"></text></g><g><title>type_op_normalize_fn_sig (742,539 samples, 0.62%)</title><rect x="22.5151%" y="197" width="0.6219%" height="15" fill="rgb(213,181,19)"/><text x="22.7651%" y="207.50"></text></g><g><title>normalize_projection_ty (369,046 samples, 0.31%)</title><rect x="22.8279%" y="181" width="0.3091%" height="15" fill="rgb(254,191,54)"/><text x="23.0779%" y="191.50"></text></g><g><title>type_op_normalize_predicate (765,208 samples, 0.64%)</title><rect x="23.1370%" y="197" width="0.6409%" height="15" fill="rgb(241,83,37)"/><text x="23.3870%" y="207.50"></text></g><g><title>normalize_projection_ty (247,196 samples, 0.21%)</title><rect x="23.5708%" y="181" width="0.2070%" height="15" fill="rgb(233,36,39)"/><text x="23.8208%" y="191.50"></text></g><g><title>type_op_normalize_ty (240,215 samples, 0.20%)</title><rect x="23.7778%" y="197" width="0.2012%" height="15" fill="rgb(226,3,54)"/><text x="24.0278%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,957,122 samples, 2.48%)</title><rect x="23.9790%" y="197" width="2.4766%" height="15" fill="rgb(245,192,40)"/><text x="24.2290%" y="207.50">ty..</text></g><g><title>MIR_borrow_checking (20,940,102 samples, 17.54%)</title><rect x="8.9221%" y="229" width="17.5371%" height="15" fill="rgb(238,167,29)"/><text x="9.1721%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (20,881,772 samples, 17.49%)</title><rect x="8.9709%" y="213" width="17.4883%" height="15" fill="rgb(232,182,51)"/><text x="9.2209%" y="223.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (240,623 samples, 0.20%)</title><rect x="26.7633%" y="197" width="0.2015%" height="15" fill="rgb(231,60,39)"/><text x="27.0133%" y="207.50"></text></g><g><title>check_mod_attrs (362,733 samples, 0.30%)</title><rect x="26.6611%" y="213" width="0.3038%" height="15" fill="rgb(208,69,12)"/><text x="26.9111%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (294,793 samples, 0.25%)</title><rect x="27.0565%" y="213" width="0.2469%" height="15" fill="rgb(235,93,37)"/><text x="27.3065%" y="223.50"></text></g><g><title>misc_checking_1 (821,859 samples, 0.69%)</title><rect x="26.6414%" y="229" width="0.6883%" height="15" fill="rgb(213,116,39)"/><text x="26.8914%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (335,193 samples, 0.28%)</title><rect x="27.3309%" y="213" width="0.2807%" height="15" fill="rgb(222,207,29)"/><text x="27.5809%" y="223.50"></text></g><g><title>check_mod_liveness (275,433 samples, 0.23%)</title><rect x="27.3810%" y="197" width="0.2307%" height="15" fill="rgb(206,96,30)"/><text x="27.6310%" y="207.50"></text></g><g><title>misc_checking_2 (770,578 samples, 0.65%)</title><rect x="27.3297%" y="229" width="0.6454%" height="15" fill="rgb(218,138,4)"/><text x="27.5797%" y="239.50"></text></g><g><title>match_checking (433,965 samples, 0.36%)</title><rect x="27.6116%" y="213" width="0.3634%" height="15" fill="rgb(250,191,14)"/><text x="27.8616%" y="223.50"></text></g><g><title>check_match (414,795 samples, 0.35%)</title><rect x="27.6277%" y="197" width="0.3474%" height="15" fill="rgb(239,60,40)"/><text x="27.8777%" y="207.50"></text></g><g><title>death_checking (200,032 samples, 0.17%)</title><rect x="28.0697%" y="213" width="0.1675%" height="15" fill="rgb(206,27,48)"/><text x="28.3197%" y="223.50"></text></g><g><title>param_env (154,072 samples, 0.13%)</title><rect x="28.7837%" y="181" width="0.1290%" height="15" fill="rgb(225,35,8)"/><text x="29.0337%" y="191.50"></text></g><g><title>crate_lints (1,859,950 samples, 1.56%)</title><rect x="28.2385%" y="197" width="1.5577%" height="15" fill="rgb(250,213,24)"/><text x="28.4885%" y="207.50"></text></g><g><title>type_of (1,044,532 samples, 0.87%)</title><rect x="28.9214%" y="181" width="0.8748%" height="15" fill="rgb(247,123,22)"/><text x="29.1714%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (811,248 samples, 0.68%)</title><rect x="29.1168%" y="165" width="0.6794%" height="15" fill="rgb(231,138,38)"/><text x="29.3668%" y="175.50"></text></g><g><title>lint_checking (2,119,533 samples, 1.78%)</title><rect x="28.2372%" y="213" width="1.7751%" height="15" fill="rgb(231,145,46)"/><text x="28.4872%" y="223.50">l..</text></g><g><title>module_lints (258,063 samples, 0.22%)</title><rect x="29.7962%" y="197" width="0.2161%" height="15" fill="rgb(251,118,11)"/><text x="30.0462%" y="207.50"></text></g><g><title>lint_mod (253,223 samples, 0.21%)</title><rect x="29.8003%" y="181" width="0.2121%" height="15" fill="rgb(217,147,25)"/><text x="30.0503%" y="191.50"></text></g><g><title>privacy_checking_modules (459,985 samples, 0.39%)</title><rect x="30.0995%" y="213" width="0.3852%" height="15" fill="rgb(247,81,37)"/><text x="30.3495%" y="223.50"></text></g><g><title>check_mod_privacy (456,485 samples, 0.38%)</title><rect x="30.1025%" y="197" width="0.3823%" height="15" fill="rgb(209,12,38)"/><text x="30.3525%" y="207.50"></text></g><g><title>misc_checking_3 (3,008,103 samples, 2.52%)</title><rect x="27.9751%" y="229" width="2.5193%" height="15" fill="rgb(227,1,9)"/><text x="28.2251%" y="239.50">mi..</text></g><g><title>impl_parent (862,508 samples, 0.72%)</title><rect x="31.5485%" y="165" width="0.7223%" height="15" fill="rgb(248,47,43)"/><text x="31.7985%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (573,103 samples, 0.48%)</title><rect x="31.7908%" y="149" width="0.4800%" height="15" fill="rgb(221,10,30)"/><text x="32.0408%" y="159.50"></text></g><g><title>impl_trait_ref (2,813,374 samples, 2.36%)</title><rect x="32.2708%" y="165" width="2.3562%" height="15" fill="rgb(210,229,1)"/><text x="32.5208%" y="175.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,522,242 samples, 2.11%)</title><rect x="32.5146%" y="149" width="2.1123%" height="15" fill="rgb(222,148,37)"/><text x="32.7646%" y="159.50">m..</text></g><g><title>coherent_trait (5,136,254 samples, 4.30%)</title><rect x="30.5318%" y="197" width="4.3016%" height="15" fill="rgb(234,67,33)"/><text x="30.7818%" y="207.50">coher..</text></g><g><title>specialization_graph_of (5,128,304 samples, 4.29%)</title><rect x="30.5385%" y="181" width="4.2949%" height="15" fill="rgb(247,98,35)"/><text x="30.7885%" y="191.50">speci..</text></g><g><title>trait_impls_of (245,093 samples, 0.21%)</title><rect x="34.6281%" y="165" width="0.2053%" height="15" fill="rgb(247,138,52)"/><text x="34.8781%" y="175.50"></text></g><g><title>coherence_checking (5,176,535 samples, 4.34%)</title><rect x="30.5234%" y="213" width="4.3353%" height="15" fill="rgb(213,79,30)"/><text x="30.7734%" y="223.50">coher..</text></g><g><title>associated_item (673,577 samples, 0.56%)</title><rect x="43.4399%" y="149" width="0.5641%" height="15" fill="rgb(246,177,23)"/><text x="43.6899%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (518,027 samples, 0.43%)</title><rect x="43.5701%" y="133" width="0.4338%" height="15" fill="rgb(230,62,27)"/><text x="43.8201%" y="143.50"></text></g><g><title>associated_items (953,278 samples, 0.80%)</title><rect x="43.2326%" y="165" width="0.7984%" height="15" fill="rgb(216,154,8)"/><text x="43.4826%" y="175.50"></text></g><g><title>dropck_outlives (281,253 samples, 0.24%)</title><rect x="44.0874%" y="165" width="0.2355%" height="15" fill="rgb(244,35,45)"/><text x="44.3374%" y="175.50"></text></g><g><title>adt_dtorck_constraint (168,222 samples, 0.14%)</title><rect x="44.1821%" y="149" width="0.1409%" height="15" fill="rgb(251,115,12)"/><text x="44.4321%" y="159.50"></text></g><g><title>generics_of (351,223 samples, 0.29%)</title><rect x="46.1983%" y="149" width="0.2941%" height="15" fill="rgb(240,54,50)"/><text x="46.4483%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (263,633 samples, 0.22%)</title><rect x="46.2716%" y="133" width="0.2208%" height="15" fill="rgb(233,84,52)"/><text x="46.5216%" y="143.50"></text></g><g><title>impl_trait_ref (524,885 samples, 0.44%)</title><rect x="46.5876%" y="149" width="0.4396%" height="15" fill="rgb(207,117,47)"/><text x="46.8376%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (437,055 samples, 0.37%)</title><rect x="46.6612%" y="133" width="0.3660%" height="15" fill="rgb(249,43,39)"/><text x="46.9112%" y="143.50"></text></g><g><title>predicates_of (406,994 samples, 0.34%)</title><rect x="47.0601%" y="149" width="0.3409%" height="15" fill="rgb(209,38,44)"/><text x="47.3101%" y="159.50"></text></g><g><title>predicates_defined_on (235,523 samples, 0.20%)</title><rect x="47.2037%" y="133" width="0.1972%" height="15" fill="rgb(236,212,23)"/><text x="47.4537%" y="143.50"></text></g><g><title>specializes (936,959 samples, 0.78%)</title><rect x="47.4009%" y="149" width="0.7847%" height="15" fill="rgb(242,79,21)"/><text x="47.6509%" y="159.50"></text></g><g><title>param_env (571,706 samples, 0.48%)</title><rect x="47.7068%" y="133" width="0.4788%" height="15" fill="rgb(211,96,35)"/><text x="47.9568%" y="143.50"></text></g><g><title>def_span (240,083 samples, 0.20%)</title><rect x="47.9846%" y="117" width="0.2011%" height="15" fill="rgb(253,215,40)"/><text x="48.2346%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (212,452 samples, 0.18%)</title><rect x="48.0077%" y="101" width="0.1779%" height="15" fill="rgb(211,81,21)"/><text x="48.2577%" y="111.50"></text></g><g><title>trait_impls_of (650,910 samples, 0.55%)</title><rect x="48.2012%" y="149" width="0.5451%" height="15" fill="rgb(208,190,38)"/><text x="48.4512%" y="159.50"></text></g><g><title>implementations_of_trait (276,895 samples, 0.23%)</title><rect x="48.5145%" y="133" width="0.2319%" height="15" fill="rgb(235,213,38)"/><text x="48.7645%" y="143.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (194,573 samples, 0.16%)</title><rect x="48.5834%" y="117" width="0.1630%" height="15" fill="rgb(237,122,38)"/><text x="48.8334%" y="127.50"></text></g><g><title>evaluate_obligation (5,297,476 samples, 4.44%)</title><rect x="44.3230%" y="165" width="4.4366%" height="15" fill="rgb(244,218,35)"/><text x="44.5730%" y="175.50">evalu..</text></g><g><title>fn_sig (136,404 samples, 0.11%)</title><rect x="48.7793%" y="165" width="0.1142%" height="15" fill="rgb(240,68,47)"/><text x="49.0293%" y="175.50"></text></g><g><title>impl_item_implementor_ids (138,182 samples, 0.12%)</title><rect x="48.9908%" y="165" width="0.1157%" height="15" fill="rgb(210,16,53)"/><text x="49.2408%" y="175.50"></text></g><g><title>associated_items (122,152 samples, 0.10%)</title><rect x="49.0043%" y="149" width="0.1023%" height="15" fill="rgb(235,124,12)"/><text x="49.2543%" y="159.50"></text></g><g><title>item_attrs (146,883 samples, 0.12%)</title><rect x="49.1905%" y="165" width="0.1230%" height="15" fill="rgb(224,169,11)"/><text x="49.4405%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (141,433 samples, 0.12%)</title><rect x="49.1951%" y="149" width="0.1184%" height="15" fill="rgb(250,166,2)"/><text x="49.4451%" y="159.50"></text></g><g><title>evaluate_obligation (189,160 samples, 0.16%)</title><rect x="49.5223%" y="149" width="0.1584%" height="15" fill="rgb(242,216,29)"/><text x="49.7723%" y="159.50"></text></g><g><title>method_autoderef_steps (370,033 samples, 0.31%)</title><rect x="49.3795%" y="165" width="0.3099%" height="15" fill="rgb(230,116,27)"/><text x="49.6295%" y="175.50"></text></g><g><title>explicit_predicates_of (130,393 samples, 0.11%)</title><rect x="49.9179%" y="133" width="0.1092%" height="15" fill="rgb(228,99,48)"/><text x="50.1679%" y="143.50"></text></g><g><title>predicates_of (638,316 samples, 0.53%)</title><rect x="49.7388%" y="165" width="0.5346%" height="15" fill="rgb(253,11,6)"/><text x="49.9888%" y="175.50"></text></g><g><title>predicates_defined_on (520,555 samples, 0.44%)</title><rect x="49.8374%" y="149" width="0.4360%" height="15" fill="rgb(247,143,39)"/><text x="50.0874%" y="159.50"></text></g><g><title>inferred_outlives_of (294,042 samples, 0.25%)</title><rect x="50.0271%" y="133" width="0.2463%" height="15" fill="rgb(236,97,10)"/><text x="50.2771%" y="143.50"></text></g><g><title>dropck_outlives (256,523 samples, 0.21%)</title><rect x="55.8066%" y="149" width="0.2148%" height="15" fill="rgb(233,208,19)"/><text x="56.0566%" y="159.50"></text></g><g><title>generics_of (134,253 samples, 0.11%)</title><rect x="57.4533%" y="133" width="0.1124%" height="15" fill="rgb(216,164,2)"/><text x="57.7033%" y="143.50"></text></g><g><title>impl_trait_ref (191,320 samples, 0.16%)</title><rect x="57.5911%" y="133" width="0.1602%" height="15" fill="rgb(220,129,5)"/><text x="57.8411%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (145,040 samples, 0.12%)</title><rect x="57.6298%" y="117" width="0.1215%" height="15" fill="rgb(242,17,10)"/><text x="57.8798%" y="127.50"></text></g><g><title>specializes (208,592 samples, 0.17%)</title><rect x="57.8402%" y="133" width="0.1747%" height="15" fill="rgb(242,107,0)"/><text x="58.0902%" y="143.50"></text></g><g><title>evaluate_obligation (2,456,777 samples, 2.06%)</title><rect x="56.0215%" y="149" width="2.0575%" height="15" fill="rgb(251,28,31)"/><text x="56.2715%" y="159.50">e..</text></g><g><title>method_autoderef_steps (426,554 samples, 0.36%)</title><rect x="58.3432%" y="149" width="0.3572%" height="15" fill="rgb(233,223,10)"/><text x="58.5932%" y="159.50"></text></g><g><title>evaluate_obligation (192,522 samples, 0.16%)</title><rect x="58.5392%" y="133" width="0.1612%" height="15" fill="rgb(215,21,27)"/><text x="58.7892%" y="143.50"></text></g><g><title>typeck (10,126,208 samples, 8.48%)</title><rect x="50.3782%" y="165" width="8.4806%" height="15" fill="rgb(232,23,21)"/><text x="50.6282%" y="175.50">typeck</text></g><g><title>item_bodies_checking (28,674,385 samples, 24.01%)</title><rect x="34.8743%" y="213" width="24.0145%" height="15" fill="rgb(244,5,23)"/><text x="35.1243%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,672,235 samples, 24.01%)</title><rect x="34.8761%" y="197" width="24.0127%" height="15" fill="rgb(226,81,46)"/><text x="35.1261%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (28,633,935 samples, 23.98%)</title><rect x="34.9081%" y="181" width="23.9806%" height="15" fill="rgb(247,70,30)"/><text x="35.1581%" y="191.50">typeck</text></g><g><title>impl_trait_ref (156,663 samples, 0.13%)</title><rect x="59.4968%" y="133" width="0.1312%" height="15" fill="rgb(212,68,19)"/><text x="59.7468%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (136,882 samples, 0.11%)</title><rect x="59.5134%" y="117" width="0.1146%" height="15" fill="rgb(240,187,13)"/><text x="59.7634%" y="127.50"></text></g><g><title>adt_destructor (330,873 samples, 0.28%)</title><rect x="59.3737%" y="181" width="0.2771%" height="15" fill="rgb(223,113,26)"/><text x="59.6237%" y="191.50"></text></g><g><title>coherent_trait (327,063 samples, 0.27%)</title><rect x="59.3768%" y="165" width="0.2739%" height="15" fill="rgb(206,192,2)"/><text x="59.6268%" y="175.50"></text></g><g><title>specialization_graph_of (325,583 samples, 0.27%)</title><rect x="59.3781%" y="149" width="0.2727%" height="15" fill="rgb(241,108,4)"/><text x="59.6281%" y="159.50"></text></g><g><title>item_types_checking (1,125,131 samples, 0.94%)</title><rect x="58.8887%" y="213" width="0.9423%" height="15" fill="rgb(247,173,49)"/><text x="59.1387%" y="223.50"></text></g><g><title>check_mod_item_types (1,118,491 samples, 0.94%)</title><rect x="58.8943%" y="197" width="0.9367%" height="15" fill="rgb(224,114,35)"/><text x="59.1443%" y="207.50"></text></g><g><title>fn_sig (183,973 samples, 0.15%)</title><rect x="59.9573%" y="181" width="0.1541%" height="15" fill="rgb(245,159,27)"/><text x="60.2073%" y="191.50"></text></g><g><title>generics_of (263,971 samples, 0.22%)</title><rect x="60.1114%" y="181" width="0.2211%" height="15" fill="rgb(245,172,44)"/><text x="60.3614%" y="191.50"></text></g><g><title>explicit_predicates_of (143,974 samples, 0.12%)</title><rect x="60.4538%" y="149" width="0.1206%" height="15" fill="rgb(236,23,11)"/><text x="60.7038%" y="159.50"></text></g><g><title>predicates_of (379,745 samples, 0.32%)</title><rect x="60.4077%" y="181" width="0.3180%" height="15" fill="rgb(205,117,38)"/><text x="60.6577%" y="191.50"></text></g><g><title>predicates_defined_on (358,945 samples, 0.30%)</title><rect x="60.4251%" y="165" width="0.3006%" height="15" fill="rgb(237,72,25)"/><text x="60.6751%" y="175.50"></text></g><g><title>inferred_outlives_of (180,721 samples, 0.15%)</title><rect x="60.5744%" y="149" width="0.1514%" height="15" fill="rgb(244,70,9)"/><text x="60.8244%" y="159.50"></text></g><g><title>inferred_outlives_crate (169,301 samples, 0.14%)</title><rect x="60.5839%" y="133" width="0.1418%" height="15" fill="rgb(217,125,39)"/><text x="60.8339%" y="143.50"></text></g><g><title>type_collecting (1,140,442 samples, 0.96%)</title><rect x="59.8320%" y="213" width="0.9551%" height="15" fill="rgb(235,36,10)"/><text x="60.0820%" y="223.50"></text></g><g><title>collect_mod_item_types (1,131,712 samples, 0.95%)</title><rect x="59.8394%" y="197" width="0.9478%" height="15" fill="rgb(251,123,47)"/><text x="60.0894%" y="207.50"></text></g><g><title>evaluate_obligation (224,332 samples, 0.19%)</title><rect x="61.3745%" y="181" width="0.1879%" height="15" fill="rgb(221,13,13)"/><text x="61.6245%" y="191.50"></text></g><g><title>check_impl_item_well_formed (1,199,843 samples, 1.00%)</title><rect x="60.8659%" y="197" width="1.0049%" height="15" fill="rgb(238,131,9)"/><text x="61.1159%" y="207.50"></text></g><g><title>region_scope_tree (157,672 samples, 0.13%)</title><rect x="61.7387%" y="181" width="0.1320%" height="15" fill="rgb(211,50,8)"/><text x="61.9887%" y="191.50"></text></g><g><title>evaluate_obligation (154,542 samples, 0.13%)</title><rect x="62.4193%" y="181" width="0.1294%" height="15" fill="rgb(245,182,24)"/><text x="62.6693%" y="191.50"></text></g><g><title>param_env (206,111 samples, 0.17%)</title><rect x="62.6395%" y="181" width="0.1726%" height="15" fill="rgb(242,14,37)"/><text x="62.8895%" y="191.50"></text></g><g><title>trait_impls_of (390,495 samples, 0.33%)</title><rect x="62.8960%" y="181" width="0.3270%" height="15" fill="rgb(246,228,12)"/><text x="63.1460%" y="191.50"></text></g><g><title>check_item_well_formed (1,656,999 samples, 1.39%)</title><rect x="61.8708%" y="197" width="1.3877%" height="15" fill="rgb(213,55,15)"/><text x="62.1208%" y="207.50"></text></g><g><title>evaluate_obligation (241,963 samples, 0.20%)</title><rect x="63.6831%" y="181" width="0.2026%" height="15" fill="rgb(209,9,3)"/><text x="63.9331%" y="191.50"></text></g><g><title>implied_outlives_bounds (223,672 samples, 0.19%)</title><rect x="63.8858%" y="181" width="0.1873%" height="15" fill="rgb(230,59,30)"/><text x="64.1358%" y="191.50"></text></g><g><title>analysis (66,193,354 samples, 55.44%)</title><rect x="8.7762%" y="245" width="55.4362%" height="15" fill="rgb(209,121,21)"/><text x="9.0262%" y="255.50">analysis</text></g><g><title>type_check_crate (40,260,897 samples, 33.72%)</title><rect x="30.4943%" y="229" width="33.7181%" height="15" fill="rgb(220,109,13)"/><text x="30.7443%" y="239.50">type_check_crate</text></g><g><title>wf_checking (4,087,144 samples, 3.42%)</title><rect x="60.7895%" y="213" width="3.4229%" height="15" fill="rgb(232,18,1)"/><text x="61.0395%" y="223.50">wf_..</text></g><g><title>check_trait_item_well_formed (1,139,022 samples, 0.95%)</title><rect x="63.2585%" y="197" width="0.9539%" height="15" fill="rgb(215,41,42)"/><text x="63.5085%" y="207.50"></text></g><g><title>is_freeze_raw (135,111 samples, 0.11%)</title><rect x="65.6576%" y="197" width="0.1132%" height="15" fill="rgb(224,123,36)"/><text x="65.9076%" y="207.50"></text></g><g><title>evaluate_obligation (124,321 samples, 0.10%)</title><rect x="65.6666%" y="181" width="0.1041%" height="15" fill="rgb(240,125,3)"/><text x="65.9166%" y="191.50"></text></g><g><title>fn_abi_of_instance (431,635 samples, 0.36%)</title><rect x="65.5846%" y="213" width="0.3615%" height="15" fill="rgb(205,98,50)"/><text x="65.8346%" y="223.50"></text></g><g><title>codegen_module (1,398,825 samples, 1.17%)</title><rect x="64.9007%" y="229" width="1.1715%" height="15" fill="rgb(205,185,37)"/><text x="65.1507%" y="239.50"></text></g><g><title>layout_of (126,571 samples, 0.11%)</title><rect x="66.3037%" y="165" width="0.1060%" height="15" fill="rgb(238,207,15)"/><text x="66.5537%" y="175.50"></text></g><g><title>optimized_mir (537,315 samples, 0.45%)</title><rect x="66.1836%" y="181" width="0.4500%" height="15" fill="rgb(213,199,42)"/><text x="66.4336%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (713,138 samples, 0.60%)</title><rect x="66.0896%" y="197" width="0.5972%" height="15" fill="rgb(235,201,11)"/><text x="66.3396%" y="207.50"></text></g><g><title>monomorphization_collector (739,208 samples, 0.62%)</title><rect x="66.0881%" y="213" width="0.6191%" height="15" fill="rgb(207,46,11)"/><text x="66.3381%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (815,258 samples, 0.68%)</title><rect x="66.0726%" y="229" width="0.6828%" height="15" fill="rgb(241,35,35)"/><text x="66.3226%" y="239.50"></text></g><g><title>codegen_crate (3,098,283 samples, 2.59%)</title><rect x="64.2169%" y="245" width="2.5948%" height="15" fill="rgb(243,32,47)"/><text x="64.4669%" y="255.50">co..</text></g><g><title>codegen_module_optimize (4,812,161 samples, 4.03%)</title><rect x="66.8117%" y="245" width="4.0301%" height="15" fill="rgb(247,202,23)"/><text x="67.0617%" y="255.50">code..</text></g><g><title>LLVM_module_optimize (3,810,680 samples, 3.19%)</title><rect x="67.6504%" y="229" width="3.1914%" height="15" fill="rgb(219,102,11)"/><text x="67.9004%" y="239.50">LLV..</text></g><g><title>LLVM_lto_optimize (1,188,073 samples, 0.99%)</title><rect x="71.1152%" y="229" width="0.9950%" height="15" fill="rgb(243,110,44)"/><text x="71.3652%" y="239.50"></text></g><g><title>LLVM_module_codegen (3,212,914 samples, 2.69%)</title><rect x="72.1102%" y="229" width="2.6908%" height="15" fill="rgb(222,74,54)"/><text x="72.3602%" y="239.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (3,156,713 samples, 2.64%)</title><rect x="72.1573%" y="213" width="2.6437%" height="15" fill="rgb(216,99,12)"/><text x="72.4073%" y="223.50">LL..</text></g><g><title>codegen_module_perform_lto (4,764,971 samples, 3.99%)</title><rect x="70.8418%" y="245" width="3.9906%" height="15" fill="rgb(226,22,26)"/><text x="71.0918%" y="255.50">code..</text></g><g><title>metadata_register_crate (1,341,714 samples, 1.12%)</title><rect x="80.7406%" y="197" width="1.1237%" height="15" fill="rgb(217,163,10)"/><text x="80.9906%" y="207.50"></text></g><g><title>metadata_register_crate (487,125 samples, 0.41%)</title><rect x="81.4563%" y="181" width="0.4080%" height="15" fill="rgb(213,25,53)"/><text x="81.7063%" y="191.50"></text></g><g><title>macro_expand_crate (8,263,078 samples, 6.92%)</title><rect x="75.0362%" y="229" width="6.9202%" height="15" fill="rgb(252,105,26)"/><text x="75.2862%" y="239.50">macro_exp..</text></g><g><title>expand_crate (8,255,908 samples, 6.91%)</title><rect x="75.0422%" y="213" width="6.9142%" height="15" fill="rgb(220,39,43)"/><text x="75.2922%" y="223.50">expand_cr..</text></g><g><title>late_resolve_crate (1,401,085 samples, 1.17%)</title><rect x="82.0376%" y="213" width="1.1734%" height="15" fill="rgb(229,68,48)"/><text x="82.2876%" y="223.50"></text></g><g><title>configure_and_expand (10,062,027 samples, 8.43%)</title><rect x="74.8324%" y="245" width="8.4268%" height="15" fill="rgb(252,8,32)"/><text x="75.0824%" y="255.50">configure_an..</text></g><g><title>resolve_crate (1,508,456 samples, 1.26%)</title><rect x="81.9959%" y="229" width="1.2633%" height="15" fill="rgb(223,20,43)"/><text x="82.2459%" y="239.50"></text></g><g><title>early_lint_checks (391,844 samples, 0.33%)</title><rect x="83.3591%" y="245" width="0.3282%" height="15" fill="rgb(229,81,49)"/><text x="83.6091%" y="255.50"></text></g><g><title>free_global_ctxt (3,991,692 samples, 3.34%)</title><rect x="83.6873%" y="245" width="3.3430%" height="15" fill="rgb(236,28,36)"/><text x="83.9373%" y="255.50">fre..</text></g><g><title>exported_symbols (125,271 samples, 0.10%)</title><rect x="87.8667%" y="229" width="0.1049%" height="15" fill="rgb(249,185,26)"/><text x="88.1167%" y="239.50"></text></g><g><title>is_sized_raw (152,422 samples, 0.13%)</title><rect x="89.8963%" y="197" width="0.1277%" height="15" fill="rgb(249,174,33)"/><text x="90.1463%" y="207.50"></text></g><g><title>layout_of (176,931 samples, 0.15%)</title><rect x="90.0240%" y="197" width="0.1482%" height="15" fill="rgb(233,201,37)"/><text x="90.2740%" y="207.50"></text></g><g><title>layout_of (816,886 samples, 0.68%)</title><rect x="89.6356%" y="213" width="0.6841%" height="15" fill="rgb(221,78,26)"/><text x="89.8856%" y="223.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (133,551 samples, 0.11%)</title><rect x="90.2079%" y="197" width="0.1118%" height="15" fill="rgb(250,127,30)"/><text x="90.4579%" y="207.50"></text></g><g><title>needs_drop_raw (149,721 samples, 0.13%)</title><rect x="91.9936%" y="197" width="0.1254%" height="15" fill="rgb(230,49,44)"/><text x="92.2436%" y="207.50"></text></g><g><title>is_copy_raw (134,141 samples, 0.11%)</title><rect x="92.0067%" y="181" width="0.1123%" height="15" fill="rgb(229,67,23)"/><text x="92.2567%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,183,535 samples, 1.83%)</title><rect x="90.3198%" y="213" width="1.8287%" height="15" fill="rgb(249,83,47)"/><text x="90.5698%" y="223.50">m..</text></g><g><title>optimized_mir (4,967,643 samples, 4.16%)</title><rect x="88.0007%" y="229" width="4.1603%" height="15" fill="rgb(215,43,3)"/><text x="88.2507%" y="239.50">optim..</text></g><g><title>generate_crate_metadata (6,157,405 samples, 5.16%)</title><rect x="87.0303%" y="245" width="5.1568%" height="15" fill="rgb(238,154,13)"/><text x="87.2803%" y="255.50">genera..</text></g><g><title>hir_lowering (1,350,144 samples, 1.13%)</title><rect x="92.1871%" y="245" width="1.1307%" height="15" fill="rgb(219,56,2)"/><text x="92.4371%" y="255.50"></text></g><g><title>finish_ongoing_codegen (4,793,071 samples, 4.01%)</title><rect x="93.3332%" y="229" width="4.0141%" height="15" fill="rgb(233,0,4)"/><text x="93.5832%" y="239.50">fini..</text></g><g><title>link_crate (725,478 samples, 0.61%)</title><rect x="97.3473%" y="229" width="0.6076%" height="15" fill="rgb(235,30,7)"/><text x="97.5973%" y="239.50"></text></g><g><title>link_binary (699,817 samples, 0.59%)</title><rect x="97.3688%" y="213" width="0.5861%" height="15" fill="rgb(250,79,13)"/><text x="97.6188%" y="223.50"></text></g><g><title>link_rlib (426,775 samples, 0.36%)</title><rect x="97.5975%" y="197" width="0.3574%" height="15" fill="rgb(211,146,34)"/><text x="97.8475%" y="207.50"></text></g><g><title>link (5,544,209 samples, 4.64%)</title><rect x="93.3178%" y="245" width="4.6432%" height="15" fill="rgb(228,22,38)"/><text x="93.5678%" y="255.50">link</text></g><g><title>parse_crate (504,855 samples, 0.42%)</title><rect x="97.9610%" y="245" width="0.4228%" height="15" fill="rgb(235,168,5)"/><text x="98.2110%" y="255.50"></text></g><g><title>prepare_outputs (206,802 samples, 0.17%)</title><rect x="98.3878%" y="245" width="0.1732%" height="15" fill="rgb(221,155,16)"/><text x="98.6378%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,314,114 samples, 1.10%)</title><rect x="98.5610%" y="245" width="1.1006%" height="15" fill="rgb(215,215,53)"/><text x="98.8110%" y="255.50"></text></g><g><title>all (119,404,557 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (119,404,557 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (345,484 samples, 0.29%)</title><rect x="99.7107%" y="245" width="0.2893%" height="15" fill="rgb(227,97,0)"/><text x="99.9607%" y="255.50"></text></g></svg></svg>