<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (43,715,345 samples, 21.73%)</title><rect x="0.2659%" y="261" width="21.7256%" height="15" fill="rgb(227,0,7)"/><text x="0.5159%" y="271.50">LLVM_passes</text></g><g><title>adt_drop_tys (257,932 samples, 0.13%)</title><rect x="23.4978%" y="133" width="0.1282%" height="15" fill="rgb(217,0,24)"/><text x="23.7478%" y="143.50"></text></g><g><title>needs_drop_raw (531,534 samples, 0.26%)</title><rect x="23.4859%" y="149" width="0.2642%" height="15" fill="rgb(221,193,54)"/><text x="23.7359%" y="159.50"></text></g><g><title>is_copy_raw (246,262 samples, 0.12%)</title><rect x="23.6277%" y="133" width="0.1224%" height="15" fill="rgb(248,212,6)"/><text x="23.8777%" y="143.50"></text></g><g><title>evaluate_obligation (212,692 samples, 0.11%)</title><rect x="23.6444%" y="117" width="0.1057%" height="15" fill="rgb(208,68,35)"/><text x="23.8944%" y="127.50"></text></g><g><title>specialization_graph_of (220,643 samples, 0.11%)</title><rect x="23.7903%" y="133" width="0.1097%" height="15" fill="rgb(232,128,0)"/><text x="24.0403%" y="143.50"></text></g><g><title>resolve_instance (318,583 samples, 0.16%)</title><rect x="23.7501%" y="149" width="0.1583%" height="15" fill="rgb(207,160,47)"/><text x="24.0001%" y="159.50"></text></g><g><title>mir_const (1,748,430 samples, 0.87%)</title><rect x="23.0969%" y="197" width="0.8689%" height="15" fill="rgb(228,23,34)"/><text x="23.3469%" y="207.50"></text></g><g><title>unsafety_check_result (1,483,197 samples, 0.74%)</title><rect x="23.2288%" y="181" width="0.7371%" height="15" fill="rgb(218,30,26)"/><text x="23.4788%" y="191.50"></text></g><g><title>mir_built (1,281,064 samples, 0.64%)</title><rect x="23.3292%" y="165" width="0.6367%" height="15" fill="rgb(220,122,19)"/><text x="23.5792%" y="175.50"></text></g><g><title>has_structural_eq_impls (348,424 samples, 0.17%)</title><rect x="24.0289%" y="181" width="0.1732%" height="15" fill="rgb(250,228,42)"/><text x="24.2789%" y="191.50"></text></g><g><title>evaluate_obligation (328,194 samples, 0.16%)</title><rect x="24.0390%" y="165" width="0.1631%" height="15" fill="rgb(240,193,28)"/><text x="24.2890%" y="175.50"></text></g><g><title>trait_impls_of (295,204 samples, 0.15%)</title><rect x="24.0554%" y="149" width="0.1467%" height="15" fill="rgb(216,20,37)"/><text x="24.3054%" y="159.50"></text></g><g><title>mir_promoted (2,734,172 samples, 1.36%)</title><rect x="23.0059%" y="213" width="1.3588%" height="15" fill="rgb(206,188,39)"/><text x="23.2559%" y="223.50"></text></g><g><title>mir_const_qualif (802,549 samples, 0.40%)</title><rect x="23.9659%" y="197" width="0.3988%" height="15" fill="rgb(217,207,13)"/><text x="24.2159%" y="207.50"></text></g><g><title>type_op_prove_predicate (665,690 samples, 0.33%)</title><rect x="24.4505%" y="213" width="0.3308%" height="15" fill="rgb(231,73,38)"/><text x="24.7005%" y="223.50"></text></g><g><title>MIR_borrow_checking (5,519,281 samples, 2.74%)</title><rect x="22.0440%" y="245" width="2.7430%" height="15" fill="rgb(225,20,46)"/><text x="22.2940%" y="255.50">MI..</text></g><g><title>mir_borrowck (5,501,491 samples, 2.73%)</title><rect x="22.0528%" y="229" width="2.7341%" height="15" fill="rgb(210,31,41)"/><text x="22.3028%" y="239.50">mi..</text></g><g><title>check_mod_attrs (201,912 samples, 0.10%)</title><rect x="24.9128%" y="229" width="0.1003%" height="15" fill="rgb(221,200,47)"/><text x="25.1628%" y="239.50"></text></g><g><title>misc_checking_1 (480,126 samples, 0.24%)</title><rect x="24.9033%" y="245" width="0.2386%" height="15" fill="rgb(226,26,5)"/><text x="25.1533%" y="255.50"></text></g><g><title>misc_checking_2 (210,283 samples, 0.10%)</title><rect x="25.1419%" y="245" width="0.1045%" height="15" fill="rgb(249,33,26)"/><text x="25.3919%" y="255.50"></text></g><g><title>eval_to_allocation_raw (521,046 samples, 0.26%)</title><rect x="25.3406%" y="197" width="0.2589%" height="15" fill="rgb(235,183,28)"/><text x="25.5906%" y="207.50"></text></g><g><title>eval_to_allocation_raw (518,956 samples, 0.26%)</title><rect x="25.3417%" y="181" width="0.2579%" height="15" fill="rgb(221,5,38)"/><text x="25.5917%" y="191.50"></text></g><g><title>crate_lints (708,208 samples, 0.35%)</title><rect x="25.3016%" y="213" width="0.3520%" height="15" fill="rgb(247,18,42)"/><text x="25.5516%" y="223.50"></text></g><g><title>lint_checking (767,679 samples, 0.38%)</title><rect x="25.3002%" y="229" width="0.3815%" height="15" fill="rgb(241,131,45)"/><text x="25.5502%" y="239.50"></text></g><g><title>misc_checking_3 (1,020,502 samples, 0.51%)</title><rect x="25.2464%" y="245" width="0.5072%" height="15" fill="rgb(249,31,29)"/><text x="25.4964%" y="255.50"></text></g><g><title>adt_sized_constraint (302,623 samples, 0.15%)</title><rect x="26.8193%" y="165" width="0.1504%" height="15" fill="rgb(225,111,53)"/><text x="27.0693%" y="175.50"></text></g><g><title>evaluate_obligation (565,785 samples, 0.28%)</title><rect x="26.7717%" y="181" width="0.2812%" height="15" fill="rgb(238,160,17)"/><text x="27.0217%" y="191.50"></text></g><g><title>evaluate_obligation (473,567 samples, 0.24%)</title><rect x="27.9361%" y="165" width="0.2354%" height="15" fill="rgb(214,148,48)"/><text x="28.1861%" y="175.50"></text></g><g><title>is_copy_raw (280,833 samples, 0.14%)</title><rect x="28.2209%" y="165" width="0.1396%" height="15" fill="rgb(232,36,49)"/><text x="28.4709%" y="175.50"></text></g><g><title>evaluate_obligation (259,253 samples, 0.13%)</title><rect x="28.2316%" y="149" width="0.1288%" height="15" fill="rgb(209,103,24)"/><text x="28.4816%" y="159.50"></text></g><g><title>trait_impls_of (230,793 samples, 0.11%)</title><rect x="28.2458%" y="133" width="0.1147%" height="15" fill="rgb(229,88,8)"/><text x="28.4958%" y="143.50"></text></g><g><title>object_safety_violations (688,218 samples, 0.34%)</title><rect x="28.4225%" y="165" width="0.3420%" height="15" fill="rgb(213,181,19)"/><text x="28.6725%" y="175.50"></text></g><g><title>typeck (3,116,104 samples, 1.55%)</title><rect x="27.2837%" y="181" width="1.5486%" height="15" fill="rgb(254,191,54)"/><text x="27.5337%" y="191.50"></text></g><g><title>item_bodies_checking (6,154,658 samples, 3.06%)</title><rect x="25.7871%" y="229" width="3.0587%" height="15" fill="rgb(241,83,37)"/><text x="26.0371%" y="239.50">ite..</text></g><g><title>typeck_item_bodies (6,151,428 samples, 3.06%)</title><rect x="25.7887%" y="213" width="3.0571%" height="15" fill="rgb(233,36,39)"/><text x="26.0387%" y="223.50">typ..</text></g><g><title>typeck (6,141,848 samples, 3.05%)</title><rect x="25.7935%" y="197" width="3.0524%" height="15" fill="rgb(226,3,54)"/><text x="26.0435%" y="207.50">typ..</text></g><g><title>adt_def (231,483 samples, 0.12%)</title><rect x="29.1006%" y="133" width="0.1150%" height="15" fill="rgb(245,192,40)"/><text x="29.3506%" y="143.50"></text></g><g><title>metadata_decode_entry_adt_def (230,753 samples, 0.11%)</title><rect x="29.1009%" y="117" width="0.1147%" height="15" fill="rgb(238,167,29)"/><text x="29.3509%" y="127.50"></text></g><g><title>impl_trait_ref (558,115 samples, 0.28%)</title><rect x="29.4148%" y="53" width="0.2774%" height="15" fill="rgb(232,182,51)"/><text x="29.6648%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (513,214 samples, 0.26%)</title><rect x="29.4371%" y="37" width="0.2551%" height="15" fill="rgb(231,60,39)"/><text x="29.6871%" y="47.50"></text></g><g><title>coherent_trait (944,520 samples, 0.47%)</title><rect x="29.2504%" y="85" width="0.4694%" height="15" fill="rgb(208,69,12)"/><text x="29.5004%" y="95.50"></text></g><g><title>specialization_graph_of (939,510 samples, 0.47%)</title><rect x="29.2529%" y="69" width="0.4669%" height="15" fill="rgb(235,93,37)"/><text x="29.5029%" y="79.50"></text></g><g><title>adt_destructor (958,641 samples, 0.48%)</title><rect x="29.2473%" y="117" width="0.4764%" height="15" fill="rgb(213,116,39)"/><text x="29.4973%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (957,391 samples, 0.48%)</title><rect x="29.2479%" y="101" width="0.4758%" height="15" fill="rgb(222,207,29)"/><text x="29.4979%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,026,751 samples, 0.51%)</title><rect x="29.2176%" y="133" width="0.5103%" height="15" fill="rgb(206,96,30)"/><text x="29.4676%" y="143.50"></text></g><g><title>adt_dtorck_constraint (1,295,354 samples, 0.64%)</title><rect x="29.0948%" y="149" width="0.6438%" height="15" fill="rgb(218,138,4)"/><text x="29.3448%" y="159.50"></text></g><g><title>dropck_outlives (1,344,424 samples, 0.67%)</title><rect x="29.0780%" y="181" width="0.6681%" height="15" fill="rgb(250,191,14)"/><text x="29.3280%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,319,524 samples, 0.66%)</title><rect x="29.0904%" y="165" width="0.6558%" height="15" fill="rgb(239,60,40)"/><text x="29.3404%" y="175.50"></text></g><g><title>item_types_checking (1,919,382 samples, 0.95%)</title><rect x="28.8458%" y="229" width="0.9539%" height="15" fill="rgb(206,27,48)"/><text x="29.0958%" y="239.50"></text></g><g><title>check_mod_item_types (1,915,952 samples, 0.95%)</title><rect x="28.8475%" y="213" width="0.9522%" height="15" fill="rgb(225,35,8)"/><text x="29.0975%" y="223.50"></text></g><g><title>typeck (1,754,010 samples, 0.87%)</title><rect x="28.9280%" y="197" width="0.8717%" height="15" fill="rgb(250,213,24)"/><text x="29.1780%" y="207.50"></text></g><g><title>type_collecting (365,624 samples, 0.18%)</title><rect x="29.8006%" y="229" width="0.1817%" height="15" fill="rgb(247,123,22)"/><text x="30.0506%" y="239.50"></text></g><g><title>collect_mod_item_types (357,794 samples, 0.18%)</title><rect x="29.8045%" y="213" width="0.1778%" height="15" fill="rgb(231,138,38)"/><text x="30.0545%" y="223.50"></text></g><g><title>evaluate_obligation (250,693 samples, 0.12%)</title><rect x="30.1928%" y="197" width="0.1246%" height="15" fill="rgb(231,145,46)"/><text x="30.4428%" y="207.50"></text></g><g><title>analysis (17,085,550 samples, 8.49%)</title><rect x="21.9915%" y="261" width="8.4911%" height="15" fill="rgb(251,118,11)"/><text x="22.2415%" y="271.50">analysis</text></g><g><title>type_check_crate (9,515,615 samples, 4.73%)</title><rect x="25.7536%" y="245" width="4.7291%" height="15" fill="rgb(217,147,25)"/><text x="26.0036%" y="255.50">type_c..</text></g><g><title>wf_checking (1,005,461 samples, 0.50%)</title><rect x="29.9829%" y="229" width="0.4997%" height="15" fill="rgb(247,81,37)"/><text x="30.2329%" y="239.50"></text></g><g><title>check_item_well_formed (975,451 samples, 0.48%)</title><rect x="29.9978%" y="213" width="0.4848%" height="15" fill="rgb(209,12,38)"/><text x="30.2478%" y="223.50"></text></g><g><title>is_freeze_raw (515,614 samples, 0.26%)</title><rect x="32.4394%" y="213" width="0.2562%" height="15" fill="rgb(227,1,9)"/><text x="32.6894%" y="223.50"></text></g><g><title>evaluate_obligation (473,403 samples, 0.24%)</title><rect x="32.4604%" y="197" width="0.2353%" height="15" fill="rgb(248,47,43)"/><text x="32.7104%" y="207.50"></text></g><g><title>eval_to_const_value_raw (255,495 samples, 0.13%)</title><rect x="32.9117%" y="197" width="0.1270%" height="15" fill="rgb(221,10,30)"/><text x="33.1617%" y="207.50"></text></g><g><title>eval_to_const_value_raw (237,874 samples, 0.12%)</title><rect x="32.9205%" y="181" width="0.1182%" height="15" fill="rgb(210,229,1)"/><text x="33.1705%" y="191.50"></text></g><g><title>eval_to_allocation_raw (205,434 samples, 0.10%)</title><rect x="32.9366%" y="165" width="0.1021%" height="15" fill="rgb(222,148,37)"/><text x="33.1866%" y="175.50"></text></g><g><title>layout_of (262,665 samples, 0.13%)</title><rect x="33.0665%" y="197" width="0.1305%" height="15" fill="rgb(234,67,33)"/><text x="33.3165%" y="207.50"></text></g><g><title>param_env (312,781 samples, 0.16%)</title><rect x="33.1970%" y="197" width="0.1554%" height="15" fill="rgb(247,98,35)"/><text x="33.4470%" y="207.50"></text></g><g><title>layout_of (1,194,504 samples, 0.59%)</title><rect x="32.7660%" y="213" width="0.5936%" height="15" fill="rgb(247,138,52)"/><text x="33.0160%" y="223.50"></text></g><g><title>param_env (392,534 samples, 0.20%)</title><rect x="33.3596%" y="213" width="0.1951%" height="15" fill="rgb(213,79,30)"/><text x="33.6096%" y="223.50"></text></g><g><title>fn_abi_of_instance (2,749,279 samples, 1.37%)</title><rect x="32.1919%" y="229" width="1.3663%" height="15" fill="rgb(246,177,23)"/><text x="32.4419%" y="239.50"></text></g><g><title>is_freeze_raw (235,053 samples, 0.12%)</title><rect x="33.5632%" y="229" width="0.1168%" height="15" fill="rgb(230,62,27)"/><text x="33.8132%" y="239.50"></text></g><g><title>evaluate_obligation (215,353 samples, 0.11%)</title><rect x="33.5730%" y="213" width="0.1070%" height="15" fill="rgb(216,154,8)"/><text x="33.8230%" y="223.50"></text></g><g><title>layout_of (283,753 samples, 0.14%)</title><rect x="33.7481%" y="197" width="0.1410%" height="15" fill="rgb(244,35,45)"/><text x="33.9981%" y="207.50"></text></g><g><title>layout_of (371,364 samples, 0.18%)</title><rect x="33.7214%" y="213" width="0.1846%" height="15" fill="rgb(251,115,12)"/><text x="33.9714%" y="223.50"></text></g><g><title>layout_of (488,994 samples, 0.24%)</title><rect x="33.6800%" y="229" width="0.2430%" height="15" fill="rgb(240,54,50)"/><text x="33.9300%" y="239.50"></text></g><g><title>codegen_module (6,393,792 samples, 3.18%)</title><rect x="30.8153%" y="245" width="3.1776%" height="15" fill="rgb(233,84,52)"/><text x="31.0653%" y="255.50">cod..</text></g><g><title>item_attrs (249,104 samples, 0.12%)</title><rect x="34.2451%" y="181" width="0.1238%" height="15" fill="rgb(207,117,47)"/><text x="34.4951%" y="191.50"></text></g><g><title>metadata_decode_entry_item_attrs (241,174 samples, 0.12%)</title><rect x="34.2491%" y="165" width="0.1199%" height="15" fill="rgb(249,43,39)"/><text x="34.4991%" y="175.50"></text></g><g><title>codegen_fn_attrs (385,756 samples, 0.19%)</title><rect x="34.2198%" y="197" width="0.1917%" height="15" fill="rgb(209,38,44)"/><text x="34.4698%" y="207.50"></text></g><g><title>is_reachable_non_generic (350,943 samples, 0.17%)</title><rect x="34.4444%" y="197" width="0.1744%" height="15" fill="rgb(236,212,23)"/><text x="34.6944%" y="207.50"></text></g><g><title>reachable_non_generics (337,133 samples, 0.17%)</title><rect x="34.4513%" y="181" width="0.1675%" height="15" fill="rgb(242,79,21)"/><text x="34.7013%" y="191.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (334,343 samples, 0.17%)</title><rect x="34.4527%" y="165" width="0.1662%" height="15" fill="rgb(211,96,35)"/><text x="34.7027%" y="175.50"></text></g><g><title>mir_shims (416,186 samples, 0.21%)</title><rect x="34.6188%" y="197" width="0.2068%" height="15" fill="rgb(253,215,40)"/><text x="34.8688%" y="207.50"></text></g><g><title>layout_of (232,843 samples, 0.12%)</title><rect x="35.0737%" y="149" width="0.1157%" height="15" fill="rgb(211,81,21)"/><text x="35.3237%" y="159.50"></text></g><g><title>layout_of (331,243 samples, 0.16%)</title><rect x="35.0316%" y="165" width="0.1646%" height="15" fill="rgb(208,190,38)"/><text x="35.2816%" y="175.50"></text></g><g><title>layout_of (500,615 samples, 0.25%)</title><rect x="34.9612%" y="181" width="0.2488%" height="15" fill="rgb(235,213,38)"/><text x="35.2112%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (352,593 samples, 0.18%)</title><rect x="35.2100%" y="181" width="0.1752%" height="15" fill="rgb(237,122,38)"/><text x="35.4600%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (262,652 samples, 0.13%)</title><rect x="35.3853%" y="181" width="0.1305%" height="15" fill="rgb(244,218,35)"/><text x="35.6353%" y="191.50"></text></g><g><title>impl_parent (224,774 samples, 0.11%)</title><rect x="35.7249%" y="149" width="0.1117%" height="15" fill="rgb(240,68,47)"/><text x="35.9749%" y="159.50"></text></g><g><title>specialization_graph_of (1,180,283 samples, 0.59%)</title><rect x="35.5747%" y="165" width="0.5866%" height="15" fill="rgb(210,16,53)"/><text x="35.8247%" y="175.50"></text></g><g><title>impl_trait_ref (653,225 samples, 0.32%)</title><rect x="35.8366%" y="149" width="0.3246%" height="15" fill="rgb(235,124,12)"/><text x="36.0866%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (585,665 samples, 0.29%)</title><rect x="35.8702%" y="133" width="0.2911%" height="15" fill="rgb(224,169,11)"/><text x="36.1202%" y="143.50"></text></g><g><title>resolve_instance (1,303,505 samples, 0.65%)</title><rect x="35.5158%" y="181" width="0.6478%" height="15" fill="rgb(250,166,2)"/><text x="35.7658%" y="191.50"></text></g><g><title>optimized_mir (2,822,060 samples, 1.40%)</title><rect x="34.8257%" y="197" width="1.4025%" height="15" fill="rgb(242,216,29)"/><text x="35.0757%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (259,813 samples, 0.13%)</title><rect x="36.3182%" y="181" width="0.1291%" height="15" fill="rgb(230,116,27)"/><text x="36.5682%" y="191.50"></text></g><g><title>impl_parent (348,387 samples, 0.17%)</title><rect x="36.8485%" y="165" width="0.1731%" height="15" fill="rgb(228,99,48)"/><text x="37.0985%" y="175.50"></text></g><g><title>specialization_graph_of (1,982,522 samples, 0.99%)</title><rect x="36.5389%" y="181" width="0.9853%" height="15" fill="rgb(253,11,6)"/><text x="36.7889%" y="191.50"></text></g><g><title>impl_trait_ref (1,011,188 samples, 0.50%)</title><rect x="37.0217%" y="165" width="0.5025%" height="15" fill="rgb(247,143,39)"/><text x="37.2717%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (823,518 samples, 0.41%)</title><rect x="37.1149%" y="149" width="0.4093%" height="15" fill="rgb(236,97,10)"/><text x="37.3649%" y="159.50"></text></g><g><title>resolve_instance (2,695,629 samples, 1.34%)</title><rect x="36.2282%" y="197" width="1.3397%" height="15" fill="rgb(233,208,19)"/><text x="36.4782%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (7,269,000 samples, 3.61%)</title><rect x="34.0154%" y="213" width="3.6125%" height="15" fill="rgb(216,164,2)"/><text x="34.2654%" y="223.50">mono..</text></g><g><title>monomorphization_collector (7,300,771 samples, 3.63%)</title><rect x="34.0138%" y="229" width="3.6283%" height="15" fill="rgb(220,129,5)"/><text x="34.2638%" y="239.50">mono..</text></g><g><title>assert_symbols_are_distinct (487,865 samples, 0.24%)</title><rect x="37.6447%" y="213" width="0.2425%" height="15" fill="rgb(242,17,10)"/><text x="37.8947%" y="223.50"></text></g><g><title>symbol_name (444,535 samples, 0.22%)</title><rect x="37.6662%" y="197" width="0.2209%" height="15" fill="rgb(242,107,0)"/><text x="37.9162%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (8,026,299 samples, 3.99%)</title><rect x="33.9933%" y="245" width="3.9889%" height="15" fill="rgb(251,28,31)"/><text x="34.2433%" y="255.50">coll..</text></g><g><title>partition_and_assert_distinct_symbols (684,408 samples, 0.34%)</title><rect x="37.6421%" y="229" width="0.3401%" height="15" fill="rgb(233,223,10)"/><text x="37.8921%" y="239.50"></text></g><g><title>codegen_crate (15,193,789 samples, 7.55%)</title><rect x="30.4864%" y="261" width="7.5510%" height="15" fill="rgb(215,21,27)"/><text x="30.7364%" y="271.50">codegen_cr..</text></g><g><title>codegen_module_optimize (36,933,001 samples, 18.35%)</title><rect x="38.0374%" y="261" width="18.3549%" height="15" fill="rgb(232,23,21)"/><text x="38.2874%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (34,412,533 samples, 17.10%)</title><rect x="39.2900%" y="245" width="17.1023%" height="15" fill="rgb(244,5,23)"/><text x="39.5400%" y="255.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (7,841,938 samples, 3.90%)</title><rect x="57.2403%" y="245" width="3.8973%" height="15" fill="rgb(226,81,46)"/><text x="57.4903%" y="255.50">LLVM..</text></g><g><title>LLVM_module_codegen (17,139,800 samples, 8.52%)</title><rect x="61.1376%" y="245" width="8.5181%" height="15" fill="rgb(247,70,30)"/><text x="61.3876%" y="255.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (16,786,956 samples, 8.34%)</title><rect x="61.3130%" y="229" width="8.3428%" height="15" fill="rgb(212,68,19)"/><text x="61.5630%" y="239.50">LLVM_module_..</text></g><g><title>LLVM_thin_lto_import (309,343 samples, 0.15%)</title><rect x="69.6557%" y="245" width="0.1537%" height="15" fill="rgb(240,187,13)"/><text x="69.9057%" y="255.50"></text></g><g><title>codegen_module_perform_lto (27,082,740 samples, 13.46%)</title><rect x="56.3923%" y="261" width="13.4595%" height="15" fill="rgb(223,113,26)"/><text x="56.6423%" y="271.50">codegen_module_perfo..</text></g><g><title>macro_expand_crate (12,420,819 samples, 6.17%)</title><rect x="69.9817%" y="245" width="6.1729%" height="15" fill="rgb(206,192,2)"/><text x="70.2317%" y="255.50">macro_ex..</text></g><g><title>expand_crate (12,403,708 samples, 6.16%)</title><rect x="69.9902%" y="229" width="6.1644%" height="15" fill="rgb(241,108,4)"/><text x="70.2402%" y="239.50">expand_c..</text></g><g><title>metadata_register_crate (2,387,236 samples, 1.19%)</title><rect x="74.9682%" y="213" width="1.1864%" height="15" fill="rgb(247,173,49)"/><text x="75.2182%" y="223.50"></text></g><g><title>metadata_register_crate (875,109 samples, 0.43%)</title><rect x="75.7197%" y="197" width="0.4349%" height="15" fill="rgb(224,114,35)"/><text x="75.9697%" y="207.50"></text></g><g><title>finalize_imports (254,283 samples, 0.13%)</title><rect x="76.1934%" y="229" width="0.1264%" height="15" fill="rgb(245,159,27)"/><text x="76.4434%" y="239.50"></text></g><g><title>late_resolve_crate (634,767 samples, 0.32%)</title><rect x="76.3284%" y="229" width="0.3155%" height="15" fill="rgb(245,172,44)"/><text x="76.5784%" y="239.50"></text></g><g><title>configure_and_expand (13,708,363 samples, 6.81%)</title><rect x="69.8518%" y="261" width="6.8128%" height="15" fill="rgb(236,23,11)"/><text x="70.1018%" y="271.50">configure..</text></g><g><title>resolve_crate (956,561 samples, 0.48%)</title><rect x="76.1892%" y="245" width="0.4754%" height="15" fill="rgb(205,117,38)"/><text x="76.4392%" y="255.50"></text></g><g><title>free_global_ctxt (2,519,499 samples, 1.25%)</title><rect x="76.7313%" y="261" width="1.2521%" height="15" fill="rgb(237,72,25)"/><text x="76.9813%" y="271.50"></text></g><g><title>optimized_mir (549,236 samples, 0.27%)</title><rect x="78.3123%" y="245" width="0.2730%" height="15" fill="rgb(244,70,9)"/><text x="78.5623%" y="255.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (221,133 samples, 0.11%)</title><rect x="78.4753%" y="229" width="0.1099%" height="15" fill="rgb(217,125,39)"/><text x="78.7253%" y="239.50"></text></g><g><title>generate_crate_metadata (1,234,424 samples, 0.61%)</title><rect x="77.9834%" y="261" width="0.6135%" height="15" fill="rgb(235,36,10)"/><text x="78.2334%" y="271.50"></text></g><g><title>hir_lowering (435,765 samples, 0.22%)</title><rect x="78.5969%" y="261" width="0.2166%" height="15" fill="rgb(251,123,47)"/><text x="78.8469%" y="271.50"></text></g><g><title>finish_ongoing_codegen (40,007,064 samples, 19.88%)</title><rect x="78.8189%" y="245" width="19.8826%" height="15" fill="rgb(221,13,13)"/><text x="79.0689%" y="255.50">finish_ongoing_codegen</text></g><g><title>link_crate (604,246 samples, 0.30%)</title><rect x="98.7015%" y="245" width="0.3003%" height="15" fill="rgb(238,131,9)"/><text x="98.9515%" y="255.50"></text></g><g><title>link_binary (593,776 samples, 0.30%)</title><rect x="98.7067%" y="229" width="0.2951%" height="15" fill="rgb(211,50,8)"/><text x="98.9567%" y="239.50"></text></g><g><title>link_rlib (317,054 samples, 0.16%)</title><rect x="98.8443%" y="213" width="0.1576%" height="15" fill="rgb(245,182,24)"/><text x="99.0943%" y="223.50"></text></g><g><title>link (40,629,180 samples, 20.19%)</title><rect x="78.8134%" y="261" width="20.1918%" height="15" fill="rgb(242,14,37)"/><text x="79.0634%" y="271.50">link</text></g><g><title>parse_crate (688,778 samples, 0.34%)</title><rect x="99.0053%" y="261" width="0.3423%" height="15" fill="rgb(246,228,12)"/><text x="99.2553%" y="271.50"></text></g><g><title>prepare_outputs (312,633 samples, 0.16%)</title><rect x="99.3502%" y="261" width="0.1554%" height="15" fill="rgb(213,55,15)"/><text x="99.6002%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (422,854 samples, 0.21%)</title><rect x="99.5056%" y="261" width="0.2101%" height="15" fill="rgb(209,9,3)"/><text x="99.7556%" y="271.50"></text></g><g><title>all (201,215,984 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (201,215,984 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (478,815 samples, 0.24%)</title><rect x="99.7620%" y="261" width="0.2380%" height="15" fill="rgb(220,109,13)"/><text x="100.0120%" y="271.50"></text></g></svg></svg>