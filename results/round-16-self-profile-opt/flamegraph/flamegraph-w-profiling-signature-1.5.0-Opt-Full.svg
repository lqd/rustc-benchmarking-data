<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (39,431,532 samples, 17.98%)</title><rect x="0.3419%" y="181" width="17.9769%" height="15" fill="rgb(227,0,7)"/><text x="0.5919%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (300,163 samples, 0.14%)</title><rect x="18.1820%" y="165" width="0.1368%" height="15" fill="rgb(217,0,24)"/><text x="18.4320%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (283,353 samples, 0.13%)</title><rect x="18.1897%" y="149" width="0.1292%" height="15" fill="rgb(221,193,54)"/><text x="18.4397%" y="159.50"></text></g><g><title>needs_drop_raw (460,515 samples, 0.21%)</title><rect x="20.2316%" y="69" width="0.2099%" height="15" fill="rgb(248,212,6)"/><text x="20.4816%" y="79.50"></text></g><g><title>is_copy_raw (351,063 samples, 0.16%)</title><rect x="20.2815%" y="53" width="0.1601%" height="15" fill="rgb(208,68,35)"/><text x="20.5315%" y="63.50"></text></g><g><title>evaluate_obligation (312,492 samples, 0.14%)</title><rect x="20.2990%" y="37" width="0.1425%" height="15" fill="rgb(232,128,0)"/><text x="20.5490%" y="47.50"></text></g><g><title>resolve_instance (259,782 samples, 0.12%)</title><rect x="20.4415%" y="69" width="0.1184%" height="15" fill="rgb(207,160,47)"/><text x="20.6915%" y="79.50"></text></g><g><title>mir_const (1,955,364 samples, 0.89%)</title><rect x="19.7600%" y="117" width="0.8915%" height="15" fill="rgb(228,23,34)"/><text x="20.0100%" y="127.50"></text></g><g><title>unsafety_check_result (1,667,512 samples, 0.76%)</title><rect x="19.8912%" y="101" width="0.7602%" height="15" fill="rgb(218,30,26)"/><text x="20.1412%" y="111.50"></text></g><g><title>mir_built (1,468,339 samples, 0.67%)</title><rect x="19.9820%" y="85" width="0.6694%" height="15" fill="rgb(220,122,19)"/><text x="20.2320%" y="95.50"></text></g><g><title>mir_promoted (2,195,086 samples, 1.00%)</title><rect x="19.6558%" y="133" width="1.0007%" height="15" fill="rgb(250,228,42)"/><text x="19.9058%" y="143.50"></text></g><g><title>type_op_prove_predicate (707,699 samples, 0.32%)</title><rect x="20.7519%" y="133" width="0.3226%" height="15" fill="rgb(240,193,28)"/><text x="21.0019%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,819,465 samples, 2.65%)</title><rect x="18.4255%" y="165" width="2.6531%" height="15" fill="rgb(216,20,37)"/><text x="18.6755%" y="175.50">MI..</text></g><g><title>mir_borrowck (5,797,045 samples, 2.64%)</title><rect x="18.4357%" y="149" width="2.6429%" height="15" fill="rgb(206,188,39)"/><text x="18.6857%" y="159.50">mi..</text></g><g><title>codegen_fn_attrs (299,164 samples, 0.14%)</title><rect x="21.3405%" y="101" width="0.1364%" height="15" fill="rgb(217,207,13)"/><text x="21.5905%" y="111.50"></text></g><g><title>codegen_fn_attrs (440,345 samples, 0.20%)</title><rect x="21.2785%" y="133" width="0.2008%" height="15" fill="rgb(231,73,38)"/><text x="21.5285%" y="143.50"></text></g><g><title>should_inherit_track_caller (388,565 samples, 0.18%)</title><rect x="21.3021%" y="117" width="0.1771%" height="15" fill="rgb(225,20,46)"/><text x="21.5521%" y="127.50"></text></g><g><title>check_mod_attrs (639,346 samples, 0.29%)</title><rect x="21.1879%" y="149" width="0.2915%" height="15" fill="rgb(210,31,41)"/><text x="21.4379%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (436,404 samples, 0.20%)</title><rect x="21.5432%" y="149" width="0.1990%" height="15" fill="rgb(221,200,47)"/><text x="21.7932%" y="159.50"></text></g><g><title>misc_checking_1 (1,333,515 samples, 0.61%)</title><rect x="21.1681%" y="165" width="0.6080%" height="15" fill="rgb(226,26,5)"/><text x="21.4181%" y="175.50"></text></g><g><title>misc_checking_2 (304,193 samples, 0.14%)</title><rect x="21.7761%" y="165" width="0.1387%" height="15" fill="rgb(249,33,26)"/><text x="22.0261%" y="175.50"></text></g><g><title>crate_lints (1,860,951 samples, 0.85%)</title><rect x="22.0186%" y="133" width="0.8484%" height="15" fill="rgb(235,183,28)"/><text x="22.2686%" y="143.50"></text></g><g><title>type_of (1,013,952 samples, 0.46%)</title><rect x="22.4048%" y="117" width="0.4623%" height="15" fill="rgb(221,5,38)"/><text x="22.6548%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (785,730 samples, 0.36%)</title><rect x="22.5088%" y="101" width="0.3582%" height="15" fill="rgb(247,18,42)"/><text x="22.7588%" y="111.50"></text></g><g><title>lint_checking (2,002,142 samples, 0.91%)</title><rect x="22.0180%" y="149" width="0.9128%" height="15" fill="rgb(241,131,45)"/><text x="22.2680%" y="159.50"></text></g><g><title>privacy_checking_modules (278,453 samples, 0.13%)</title><rect x="22.9655%" y="149" width="0.1269%" height="15" fill="rgb(249,31,29)"/><text x="23.2155%" y="159.50"></text></g><g><title>check_mod_privacy (275,013 samples, 0.13%)</title><rect x="22.9671%" y="133" width="0.1254%" height="15" fill="rgb(225,111,53)"/><text x="23.2171%" y="143.50"></text></g><g><title>misc_checking_3 (2,593,829 samples, 1.18%)</title><rect x="21.9148%" y="165" width="1.1825%" height="15" fill="rgb(238,160,17)"/><text x="22.1648%" y="175.50"></text></g><g><title>impl_parent (2,336,796 samples, 1.07%)</title><rect x="25.0117%" y="101" width="1.0653%" height="15" fill="rgb(214,148,48)"/><text x="25.2617%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,334,642 samples, 0.61%)</title><rect x="25.4686%" y="85" width="0.6085%" height="15" fill="rgb(232,36,49)"/><text x="25.7186%" y="95.50"></text></g><g><title>impl_trait_ref (7,685,401 samples, 3.50%)</title><rect x="26.0771%" y="101" width="3.5038%" height="15" fill="rgb(209,103,24)"/><text x="26.3271%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,646,256 samples, 3.03%)</title><rect x="26.5508%" y="85" width="3.0300%" height="15" fill="rgb(229,88,8)"/><text x="26.8008%" y="95.50">met..</text></g><g><title>trait_impls_of (869,001 samples, 0.40%)</title><rect x="29.5992%" y="101" width="0.3962%" height="15" fill="rgb(213,181,19)"/><text x="29.8492%" y="111.50"></text></g><g><title>implementations_of_trait (262,086 samples, 0.12%)</title><rect x="29.8759%" y="85" width="0.1195%" height="15" fill="rgb(254,191,54)"/><text x="30.1259%" y="95.50"></text></g><g><title>coherent_trait (15,076,739 samples, 6.87%)</title><rect x="23.1226%" y="133" width="6.8735%" height="15" fill="rgb(241,83,37)"/><text x="23.3726%" y="143.50">coherent_..</text></g><g><title>specialization_graph_of (15,054,209 samples, 6.86%)</title><rect x="23.1328%" y="117" width="6.8632%" height="15" fill="rgb(233,36,39)"/><text x="23.3828%" y="127.50">specializ..</text></g><g><title>coherence_checking (15,142,490 samples, 6.90%)</title><rect x="23.1104%" y="149" width="6.9035%" height="15" fill="rgb(226,3,54)"/><text x="23.3604%" y="159.50">coherence..</text></g><g><title>dropck_outlives (241,282 samples, 0.11%)</title><rect x="31.8513%" y="101" width="0.1100%" height="15" fill="rgb(245,192,40)"/><text x="32.1013%" y="111.50"></text></g><g><title>evaluate_obligation (252,322 samples, 0.12%)</title><rect x="31.9613%" y="101" width="0.1150%" height="15" fill="rgb(238,167,29)"/><text x="32.2113%" y="111.50"></text></g><g><title>evaluate_obligation (278,154 samples, 0.13%)</title><rect x="32.7032%" y="85" width="0.1268%" height="15" fill="rgb(232,182,51)"/><text x="32.9532%" y="95.50"></text></g><g><title>typeck (1,333,475 samples, 0.61%)</title><rect x="32.3211%" y="101" width="0.6079%" height="15" fill="rgb(231,60,39)"/><text x="32.5711%" y="111.50"></text></g><g><title>item_bodies_checking (6,383,421 samples, 2.91%)</title><rect x="30.0294%" y="149" width="2.9102%" height="15" fill="rgb(208,69,12)"/><text x="30.2794%" y="159.50">it..</text></g><g><title>typeck_item_bodies (6,381,021 samples, 2.91%)</title><rect x="30.0305%" y="133" width="2.9091%" height="15" fill="rgb(235,93,37)"/><text x="30.2805%" y="143.50">ty..</text></g><g><title>typeck (6,364,740 samples, 2.90%)</title><rect x="30.0379%" y="117" width="2.9017%" height="15" fill="rgb(213,116,39)"/><text x="30.2879%" y="127.50">ty..</text></g><g><title>impl_trait_ref (400,624 samples, 0.18%)</title><rect x="33.0871%" y="69" width="0.1826%" height="15" fill="rgb(222,207,29)"/><text x="33.3371%" y="79.50"></text></g><g><title>adt_destructor (576,477 samples, 0.26%)</title><rect x="33.0226%" y="117" width="0.2628%" height="15" fill="rgb(206,96,30)"/><text x="33.2726%" y="127.50"></text></g><g><title>coherent_trait (573,697 samples, 0.26%)</title><rect x="33.0238%" y="101" width="0.2615%" height="15" fill="rgb(218,138,4)"/><text x="33.2738%" y="111.50"></text></g><g><title>specialization_graph_of (572,337 samples, 0.26%)</title><rect x="33.0244%" y="85" width="0.2609%" height="15" fill="rgb(250,191,14)"/><text x="33.2744%" y="95.50"></text></g><g><title>item_types_checking (784,279 samples, 0.36%)</title><rect x="32.9396%" y="149" width="0.3576%" height="15" fill="rgb(239,60,40)"/><text x="33.1896%" y="159.50"></text></g><g><title>check_mod_item_types (780,589 samples, 0.36%)</title><rect x="32.9413%" y="133" width="0.3559%" height="15" fill="rgb(206,27,48)"/><text x="33.1913%" y="143.50"></text></g><g><title>fn_sig (253,634 samples, 0.12%)</title><rect x="33.4074%" y="117" width="0.1156%" height="15" fill="rgb(225,35,8)"/><text x="33.6574%" y="127.50"></text></g><g><title>generics_of (318,963 samples, 0.15%)</title><rect x="33.5230%" y="117" width="0.1454%" height="15" fill="rgb(250,213,24)"/><text x="33.7730%" y="127.50"></text></g><g><title>explicit_predicates_of (246,092 samples, 0.11%)</title><rect x="33.7614%" y="85" width="0.1122%" height="15" fill="rgb(247,123,22)"/><text x="34.0114%" y="95.50"></text></g><g><title>predicates_of (883,419 samples, 0.40%)</title><rect x="33.7191%" y="117" width="0.4028%" height="15" fill="rgb(231,138,38)"/><text x="33.9691%" y="127.50"></text></g><g><title>predicates_defined_on (847,939 samples, 0.39%)</title><rect x="33.7353%" y="101" width="0.3866%" height="15" fill="rgb(231,145,46)"/><text x="33.9853%" y="111.50"></text></g><g><title>inferred_outlives_of (544,577 samples, 0.25%)</title><rect x="33.8736%" y="85" width="0.2483%" height="15" fill="rgb(251,118,11)"/><text x="34.1236%" y="95.50"></text></g><g><title>inferred_outlives_crate (522,506 samples, 0.24%)</title><rect x="33.8836%" y="69" width="0.2382%" height="15" fill="rgb(217,147,25)"/><text x="34.1336%" y="79.50"></text></g><g><title>type_of (413,555 samples, 0.19%)</title><rect x="33.9333%" y="53" width="0.1885%" height="15" fill="rgb(247,81,37)"/><text x="34.1833%" y="63.50"></text></g><g><title>type_collecting (2,104,844 samples, 0.96%)</title><rect x="33.2979%" y="149" width="0.9596%" height="15" fill="rgb(209,12,38)"/><text x="33.5479%" y="159.50"></text></g><g><title>collect_mod_item_types (2,078,993 samples, 0.95%)</title><rect x="33.3097%" y="133" width="0.9478%" height="15" fill="rgb(227,1,9)"/><text x="33.5597%" y="143.50"></text></g><g><title>evaluate_obligation (276,933 samples, 0.13%)</title><rect x="34.6196%" y="117" width="0.1263%" height="15" fill="rgb(248,47,43)"/><text x="34.8696%" y="127.50"></text></g><g><title>evaluate_obligation (312,534 samples, 0.14%)</title><rect x="34.8951%" y="101" width="0.1425%" height="15" fill="rgb(221,10,30)"/><text x="35.1451%" y="111.50"></text></g><g><title>object_safety_violations (880,700 samples, 0.40%)</title><rect x="34.7929%" y="117" width="0.4015%" height="15" fill="rgb(210,229,1)"/><text x="35.0429%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,206,983 samples, 1.01%)</title><rect x="34.3000%" y="133" width="1.0062%" height="15" fill="rgb(222,148,37)"/><text x="34.5500%" y="143.50"></text></g><g><title>check_item_well_formed (1,170,826 samples, 0.53%)</title><rect x="35.3061%" y="133" width="0.5338%" height="15" fill="rgb(234,67,33)"/><text x="35.5561%" y="143.50"></text></g><g><title>analysis (39,317,610 samples, 17.92%)</title><rect x="18.3188%" y="181" width="17.9250%" height="15" fill="rgb(247,98,35)"/><text x="18.5688%" y="191.50">analysis</text></g><g><title>type_check_crate (28,836,294 samples, 13.15%)</title><rect x="23.0973%" y="165" width="13.1465%" height="15" fill="rgb(247,138,52)"/><text x="23.3473%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,355,499 samples, 1.99%)</title><rect x="34.2581%" y="149" width="1.9857%" height="15" fill="rgb(213,79,30)"/><text x="34.5081%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (885,950 samples, 0.40%)</title><rect x="35.8399%" y="133" width="0.4039%" height="15" fill="rgb(246,177,23)"/><text x="36.0899%" y="143.50"></text></g><g><title>is_freeze_raw (254,866 samples, 0.12%)</title><rect x="37.7202%" y="133" width="0.1162%" height="15" fill="rgb(230,62,27)"/><text x="37.9702%" y="143.50"></text></g><g><title>evaluate_obligation (235,216 samples, 0.11%)</title><rect x="37.7292%" y="117" width="0.1072%" height="15" fill="rgb(216,154,8)"/><text x="37.9792%" y="127.50"></text></g><g><title>fn_abi_of_instance (1,011,832 samples, 0.46%)</title><rect x="37.5729%" y="149" width="0.4613%" height="15" fill="rgb(244,35,45)"/><text x="37.8229%" y="159.50"></text></g><g><title>codegen_module (3,463,189 samples, 1.58%)</title><rect x="36.5366%" y="165" width="1.5789%" height="15" fill="rgb(251,115,12)"/><text x="36.7866%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (354,605 samples, 0.16%)</title><rect x="38.6514%" y="101" width="0.1617%" height="15" fill="rgb(240,54,50)"/><text x="38.9014%" y="111.50"></text></g><g><title>optimized_mir (1,452,287 samples, 0.66%)</title><rect x="38.2907%" y="117" width="0.6621%" height="15" fill="rgb(233,84,52)"/><text x="38.5407%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (287,992 samples, 0.13%)</title><rect x="38.9928%" y="101" width="0.1313%" height="15" fill="rgb(207,117,47)"/><text x="39.2428%" y="111.50"></text></g><g><title>resolve_instance (626,897 samples, 0.29%)</title><rect x="38.9528%" y="117" width="0.2858%" height="15" fill="rgb(249,43,39)"/><text x="39.2028%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (2,498,998 samples, 1.14%)</title><rect x="38.1272%" y="133" width="1.1393%" height="15" fill="rgb(209,38,44)"/><text x="38.3772%" y="143.50"></text></g><g><title>monomorphization_collector (2,523,998 samples, 1.15%)</title><rect x="38.1263%" y="149" width="1.1507%" height="15" fill="rgb(236,212,23)"/><text x="38.3763%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,797,631 samples, 1.28%)</title><rect x="38.1158%" y="165" width="1.2754%" height="15" fill="rgb(242,79,21)"/><text x="38.3658%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (250,643 samples, 0.11%)</title><rect x="39.2770%" y="149" width="0.1143%" height="15" fill="rgb(211,96,35)"/><text x="39.5270%" y="159.50"></text></g><g><title>codegen_crate (6,954,558 samples, 3.17%)</title><rect x="36.2486%" y="181" width="3.1706%" height="15" fill="rgb(253,215,40)"/><text x="36.4986%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (28,116,364 samples, 12.82%)</title><rect x="39.4192%" y="181" width="12.8183%" height="15" fill="rgb(211,81,21)"/><text x="39.6692%" y="191.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (25,366,374 samples, 11.56%)</title><rect x="40.6729%" y="165" width="11.5646%" height="15" fill="rgb(208,190,38)"/><text x="40.9229%" y="175.50">LLVM_module_optim..</text></g><g><title>LLVM_lto_optimize (11,864,582 samples, 5.41%)</title><rect x="53.1064%" y="165" width="5.4091%" height="15" fill="rgb(235,213,38)"/><text x="53.3564%" y="175.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (25,111,082 samples, 11.45%)</title><rect x="58.5155%" y="165" width="11.4482%" height="15" fill="rgb(237,122,38)"/><text x="58.7655%" y="175.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (24,712,028 samples, 11.27%)</title><rect x="58.6975%" y="149" width="11.2663%" height="15" fill="rgb(244,218,35)"/><text x="58.9475%" y="159.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (697,019 samples, 0.32%)</title><rect x="69.9637%" y="165" width="0.3178%" height="15" fill="rgb(240,68,47)"/><text x="70.2137%" y="175.50"></text></g><g><title>codegen_module_perform_lto (39,695,215 samples, 18.10%)</title><rect x="52.2375%" y="181" width="18.0971%" height="15" fill="rgb(210,16,53)"/><text x="52.4875%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,153,954 samples, 0.98%)</title><rect x="77.5786%" y="133" width="0.9820%" height="15" fill="rgb(235,124,12)"/><text x="77.8286%" y="143.50"></text></g><g><title>metadata_register_crate (779,218 samples, 0.36%)</title><rect x="78.2054%" y="117" width="0.3552%" height="15" fill="rgb(224,169,11)"/><text x="78.4554%" y="127.50"></text></g><g><title>macro_expand_crate (17,637,327 samples, 8.04%)</title><rect x="70.5850%" y="165" width="8.0409%" height="15" fill="rgb(250,166,2)"/><text x="70.8350%" y="175.50">macro_expan..</text></g><g><title>expand_crate (17,620,137 samples, 8.03%)</title><rect x="70.5928%" y="149" width="8.0331%" height="15" fill="rgb(242,216,29)"/><text x="70.8428%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (978,101 samples, 0.45%)</title><rect x="78.7434%" y="149" width="0.4459%" height="15" fill="rgb(230,116,27)"/><text x="78.9934%" y="159.50"></text></g><g><title>configure_and_expand (19,516,728 samples, 8.90%)</title><rect x="70.3346%" y="181" width="8.8977%" height="15" fill="rgb(228,99,48)"/><text x="70.5846%" y="191.50">configure_and..</text></g><g><title>resolve_crate (1,217,674 samples, 0.56%)</title><rect x="78.6772%" y="165" width="0.5551%" height="15" fill="rgb(253,11,6)"/><text x="78.9272%" y="175.50"></text></g><g><title>early_lint_checks (249,903 samples, 0.11%)</title><rect x="79.2930%" y="181" width="0.1139%" height="15" fill="rgb(247,143,39)"/><text x="79.5430%" y="191.50"></text></g><g><title>free_global_ctxt (3,201,696 samples, 1.46%)</title><rect x="79.4069%" y="181" width="1.4597%" height="15" fill="rgb(236,97,10)"/><text x="79.6569%" y="191.50"></text></g><g><title>optimized_mir (962,602 samples, 0.44%)</title><rect x="81.2010%" y="165" width="0.4389%" height="15" fill="rgb(233,208,19)"/><text x="81.4510%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (440,568 samples, 0.20%)</title><rect x="81.4390%" y="149" width="0.2009%" height="15" fill="rgb(216,164,2)"/><text x="81.6890%" y="159.50"></text></g><g><title>generate_crate_metadata (1,712,640 samples, 0.78%)</title><rect x="80.8666%" y="181" width="0.7808%" height="15" fill="rgb(220,129,5)"/><text x="81.1166%" y="191.50"></text></g><g><title>hir_lowering (1,803,650 samples, 0.82%)</title><rect x="81.6474%" y="181" width="0.8223%" height="15" fill="rgb(242,17,10)"/><text x="81.8974%" y="191.50"></text></g><g><title>finish_ongoing_codegen (35,006,352 samples, 15.96%)</title><rect x="82.4788%" y="165" width="15.9595%" height="15" fill="rgb(242,107,0)"/><text x="82.7288%" y="175.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,339,635 samples, 0.61%)</title><rect x="98.4383%" y="165" width="0.6107%" height="15" fill="rgb(251,28,31)"/><text x="98.6883%" y="175.50"></text></g><g><title>link_binary (1,320,415 samples, 0.60%)</title><rect x="98.4471%" y="149" width="0.6020%" height="15" fill="rgb(233,223,10)"/><text x="98.6971%" y="159.50"></text></g><g><title>link_rlib (802,249 samples, 0.37%)</title><rect x="98.6833%" y="133" width="0.3657%" height="15" fill="rgb(215,21,27)"/><text x="98.9333%" y="143.50"></text></g><g><title>link (36,379,297 samples, 16.59%)</title><rect x="82.4697%" y="181" width="16.5854%" height="15" fill="rgb(232,23,21)"/><text x="82.7197%" y="191.50">link</text></g><g><title>parse_crate (690,348 samples, 0.31%)</title><rect x="99.0551%" y="181" width="0.3147%" height="15" fill="rgb(244,5,23)"/><text x="99.3051%" y="191.50"></text></g><g><title>prepare_outputs (347,474 samples, 0.16%)</title><rect x="99.3745%" y="181" width="0.1584%" height="15" fill="rgb(226,81,46)"/><text x="99.6245%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (531,556 samples, 0.24%)</title><rect x="99.5329%" y="181" width="0.2423%" height="15" fill="rgb(247,70,30)"/><text x="99.7829%" y="191.50"></text></g><g><title>all (219,345,418 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (219,345,418 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (346,184 samples, 0.16%)</title><rect x="99.8422%" y="181" width="0.1578%" height="15" fill="rgb(223,113,26)"/><text x="100.0922%" y="191.50"></text></g></svg></svg>