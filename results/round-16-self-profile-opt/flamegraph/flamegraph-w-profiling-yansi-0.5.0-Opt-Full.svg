<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (128,236,281 samples, 16.18%)</title><rect x="0.1364%" y="149" width="16.1792%" height="15" fill="rgb(227,0,7)"/><text x="0.3864%" y="159.50">LLVM_passes</text></g><g><title>thir_body (1,696,933 samples, 0.21%)</title><rect x="19.7252%" y="37" width="0.2141%" height="15" fill="rgb(217,0,24)"/><text x="19.9752%" y="47.50"></text></g><g><title>mir_const (9,714,321 samples, 1.23%)</title><rect x="18.7172%" y="85" width="1.2256%" height="15" fill="rgb(221,193,54)"/><text x="18.9672%" y="95.50"></text></g><g><title>unsafety_check_result (8,349,844 samples, 1.05%)</title><rect x="18.8894%" y="69" width="1.0535%" height="15" fill="rgb(248,212,6)"/><text x="19.1394%" y="79.50"></text></g><g><title>mir_built (7,551,968 samples, 0.95%)</title><rect x="18.9900%" y="53" width="0.9528%" height="15" fill="rgb(208,68,35)"/><text x="19.2400%" y="63.50"></text></g><g><title>mir_promoted (11,627,460 samples, 1.47%)</title><rect x="18.5583%" y="101" width="1.4670%" height="15" fill="rgb(232,128,0)"/><text x="18.8083%" y="111.50"></text></g><g><title>type_op_prove_predicate (1,587,118 samples, 0.20%)</title><rect x="20.1150%" y="101" width="0.2002%" height="15" fill="rgb(207,160,47)"/><text x="20.3650%" y="111.50"></text></g><g><title>MIR_borrow_checking (31,317,927 samples, 3.95%)</title><rect x="16.3651%" y="133" width="3.9513%" height="15" fill="rgb(228,23,34)"/><text x="16.6151%" y="143.50">MIR_..</text></g><g><title>mir_borrowck (31,101,523 samples, 3.92%)</title><rect x="16.3925%" y="117" width="3.9240%" height="15" fill="rgb(218,30,26)"/><text x="16.6425%" y="127.50">mir_..</text></g><g><title>check_mod_attrs (923,631 samples, 0.12%)</title><rect x="20.3923%" y="117" width="0.1165%" height="15" fill="rgb(220,122,19)"/><text x="20.6423%" y="127.50"></text></g><g><title>misc_checking_1 (1,797,382 samples, 0.23%)</title><rect x="20.3888%" y="133" width="0.2268%" height="15" fill="rgb(250,228,42)"/><text x="20.6388%" y="143.50"></text></g><g><title>misc_checking_2 (1,423,746 samples, 0.18%)</title><rect x="20.6156%" y="133" width="0.1796%" height="15" fill="rgb(240,193,28)"/><text x="20.8656%" y="143.50"></text></g><g><title>match_checking (925,931 samples, 0.12%)</title><rect x="20.6784%" y="117" width="0.1168%" height="15" fill="rgb(216,20,37)"/><text x="20.9284%" y="127.50"></text></g><g><title>check_match (876,050 samples, 0.11%)</title><rect x="20.6847%" y="101" width="0.1105%" height="15" fill="rgb(206,188,39)"/><text x="20.9347%" y="111.50"></text></g><g><title>crate_lints (3,197,859 samples, 0.40%)</title><rect x="20.9329%" y="101" width="0.4035%" height="15" fill="rgb(217,207,13)"/><text x="21.1829%" y="111.50"></text></g><g><title>type_of (1,254,866 samples, 0.16%)</title><rect x="21.1780%" y="85" width="0.1583%" height="15" fill="rgb(231,73,38)"/><text x="21.4280%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (1,023,964 samples, 0.13%)</title><rect x="21.2071%" y="69" width="0.1292%" height="15" fill="rgb(225,20,46)"/><text x="21.4571%" y="79.50"></text></g><g><title>lint_checking (3,795,106 samples, 0.48%)</title><rect x="20.9326%" y="117" width="0.4788%" height="15" fill="rgb(210,31,41)"/><text x="21.1826%" y="127.50"></text></g><g><title>privacy_checking_modules (1,101,813 samples, 0.14%)</title><rect x="21.4595%" y="117" width="0.1390%" height="15" fill="rgb(221,200,47)"/><text x="21.7095%" y="127.50"></text></g><g><title>check_mod_privacy (1,096,463 samples, 0.14%)</title><rect x="21.4601%" y="101" width="0.1383%" height="15" fill="rgb(226,26,5)"/><text x="21.7101%" y="111.50"></text></g><g><title>misc_checking_3 (6,388,867 samples, 0.81%)</title><rect x="20.7952%" y="133" width="0.8061%" height="15" fill="rgb(249,33,26)"/><text x="21.0452%" y="143.50"></text></g><g><title>impl_parent (3,209,587 samples, 0.40%)</title><rect x="22.3017%" y="69" width="0.4049%" height="15" fill="rgb(235,183,28)"/><text x="22.5517%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,749,138 samples, 0.22%)</title><rect x="22.4860%" y="53" width="0.2207%" height="15" fill="rgb(221,5,38)"/><text x="22.7360%" y="63.50"></text></g><g><title>impl_trait_ref (6,252,713 samples, 0.79%)</title><rect x="22.7067%" y="69" width="0.7889%" height="15" fill="rgb(247,18,42)"/><text x="22.9567%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,019,353 samples, 0.63%)</title><rect x="22.8623%" y="53" width="0.6333%" height="15" fill="rgb(241,131,45)"/><text x="23.1123%" y="63.50"></text></g><g><title>coherent_trait (15,935,322 samples, 2.01%)</title><rect x="21.6188%" y="101" width="2.0105%" height="15" fill="rgb(249,31,29)"/><text x="21.8688%" y="111.50">c..</text></g><g><title>specialization_graph_of (15,063,640 samples, 1.90%)</title><rect x="21.7287%" y="85" width="1.9005%" height="15" fill="rgb(225,111,53)"/><text x="21.9787%" y="95.50">s..</text></g><g><title>trait_impls_of (1,057,545 samples, 0.13%)</title><rect x="23.4958%" y="69" width="0.1334%" height="15" fill="rgb(238,160,17)"/><text x="23.7458%" y="79.50"></text></g><g><title>coherence_checking (16,045,122 samples, 2.02%)</title><rect x="21.6149%" y="117" width="2.0244%" height="15" fill="rgb(214,148,48)"/><text x="21.8649%" y="127.50">c..</text></g><g><title>dropck_outlives (797,251 samples, 0.10%)</title><rect x="27.3991%" y="69" width="0.1006%" height="15" fill="rgb(232,36,49)"/><text x="27.6491%" y="79.50"></text></g><g><title>impl_trait_ref (956,889 samples, 0.12%)</title><rect x="28.0730%" y="53" width="0.1207%" height="15" fill="rgb(209,103,24)"/><text x="28.3230%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (801,937 samples, 0.10%)</title><rect x="28.0925%" y="37" width="0.1012%" height="15" fill="rgb(229,88,8)"/><text x="28.3425%" y="47.50"></text></g><g><title>predicates_of (861,260 samples, 0.11%)</title><rect x="28.1992%" y="53" width="0.1087%" height="15" fill="rgb(213,181,19)"/><text x="28.4492%" y="63.50"></text></g><g><title>specializes (2,084,468 samples, 0.26%)</title><rect x="28.3078%" y="53" width="0.2630%" height="15" fill="rgb(254,191,54)"/><text x="28.5578%" y="63.50"></text></g><g><title>param_env (1,259,845 samples, 0.16%)</title><rect x="28.4119%" y="37" width="0.1590%" height="15" fill="rgb(241,83,37)"/><text x="28.6619%" y="47.50"></text></g><g><title>evaluate_obligation (8,879,071 samples, 1.12%)</title><rect x="27.5004%" y="69" width="1.1202%" height="15" fill="rgb(233,36,39)"/><text x="27.7504%" y="79.50"></text></g><g><title>item_bodies_checking (41,084,213 samples, 5.18%)</title><rect x="23.6466%" y="117" width="5.1835%" height="15" fill="rgb(226,3,54)"/><text x="23.8966%" y="127.50">item_b..</text></g><g><title>typeck_item_bodies (41,080,733 samples, 5.18%)</title><rect x="23.6470%" y="101" width="5.1830%" height="15" fill="rgb(245,192,40)"/><text x="23.8970%" y="111.50">typeck..</text></g><g><title>typeck (40,926,451 samples, 5.16%)</title><rect x="23.6665%" y="85" width="5.1636%" height="15" fill="rgb(238,167,29)"/><text x="23.9165%" y="95.50">typeck</text></g><g><title>item_types_checking (1,347,996 samples, 0.17%)</title><rect x="28.8300%" y="117" width="0.1701%" height="15" fill="rgb(232,182,51)"/><text x="29.0800%" y="127.50"></text></g><g><title>check_mod_item_types (1,341,216 samples, 0.17%)</title><rect x="28.8309%" y="101" width="0.1692%" height="15" fill="rgb(231,60,39)"/><text x="29.0809%" y="111.50"></text></g><g><title>fn_sig (1,209,786 samples, 0.15%)</title><rect x="29.0501%" y="85" width="0.1526%" height="15" fill="rgb(208,69,12)"/><text x="29.3001%" y="95.50"></text></g><g><title>predicates_of (877,178 samples, 0.11%)</title><rect x="29.2602%" y="85" width="0.1107%" height="15" fill="rgb(235,93,37)"/><text x="29.5102%" y="95.50"></text></g><g><title>predicates_defined_on (806,108 samples, 0.10%)</title><rect x="29.2692%" y="69" width="0.1017%" height="15" fill="rgb(213,116,39)"/><text x="29.5192%" y="79.50"></text></g><g><title>type_collecting (3,066,557 samples, 0.39%)</title><rect x="29.0003%" y="117" width="0.3869%" height="15" fill="rgb(222,207,29)"/><text x="29.2503%" y="127.50"></text></g><g><title>collect_mod_item_types (3,051,227 samples, 0.38%)</title><rect x="29.0023%" y="101" width="0.3850%" height="15" fill="rgb(206,96,30)"/><text x="29.2523%" y="111.50"></text></g><g><title>check_impl_item_well_formed (3,911,594 samples, 0.49%)</title><rect x="29.4525%" y="101" width="0.4935%" height="15" fill="rgb(218,138,4)"/><text x="29.7025%" y="111.50"></text></g><g><title>analysis (110,606,069 samples, 13.95%)</title><rect x="16.3157%" y="149" width="13.9549%" height="15" fill="rgb(250,191,14)"/><text x="16.5657%" y="159.50">analysis</text></g><g><title>type_check_crate (68,712,555 samples, 8.67%)</title><rect x="21.6013%" y="133" width="8.6693%" height="15" fill="rgb(239,60,40)"/><text x="21.8513%" y="143.50">type_check_c..</text></g><g><title>wf_checking (6,991,485 samples, 0.88%)</title><rect x="29.3884%" y="117" width="0.8821%" height="15" fill="rgb(206,27,48)"/><text x="29.6384%" y="127.50"></text></g><g><title>check_item_well_formed (2,572,398 samples, 0.32%)</title><rect x="29.9460%" y="101" width="0.3246%" height="15" fill="rgb(225,35,8)"/><text x="30.1960%" y="111.50"></text></g><g><title>fn_abi_of_instance (2,742,130 samples, 0.35%)</title><rect x="31.4754%" y="117" width="0.3460%" height="15" fill="rgb(250,213,24)"/><text x="31.7254%" y="127.50"></text></g><g><title>codegen_module (11,432,517 samples, 1.44%)</title><rect x="30.4547%" y="133" width="1.4424%" height="15" fill="rgb(247,123,22)"/><text x="30.7047%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,150,006 samples, 0.15%)</title><rect x="32.2097%" y="69" width="0.1451%" height="15" fill="rgb(231,138,38)"/><text x="32.4597%" y="79.50"></text></g><g><title>optimized_mir (3,399,283 samples, 0.43%)</title><rect x="32.0035%" y="85" width="0.4289%" height="15" fill="rgb(231,145,46)"/><text x="32.2535%" y="95.50"></text></g><g><title>specialization_graph_of (1,555,170 samples, 0.20%)</title><rect x="32.5267%" y="69" width="0.1962%" height="15" fill="rgb(251,118,11)"/><text x="32.7767%" y="79.50"></text></g><g><title>resolve_instance (2,362,600 samples, 0.30%)</title><rect x="32.4324%" y="85" width="0.2981%" height="15" fill="rgb(217,147,25)"/><text x="32.6824%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (7,084,496 samples, 0.89%)</title><rect x="31.9004%" y="101" width="0.8938%" height="15" fill="rgb(247,81,37)"/><text x="32.1504%" y="111.50"></text></g><g><title>monomorphization_collector (7,154,056 samples, 0.90%)</title><rect x="31.9001%" y="117" width="0.9026%" height="15" fill="rgb(209,12,38)"/><text x="32.1501%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (7,631,272 samples, 0.96%)</title><rect x="31.8975%" y="133" width="0.9628%" height="15" fill="rgb(227,1,9)"/><text x="32.1475%" y="143.50"></text></g><g><title>codegen_crate (20,583,778 samples, 2.60%)</title><rect x="30.2719%" y="149" width="2.5970%" height="15" fill="rgb(248,47,43)"/><text x="30.5219%" y="159.50">co..</text></g><g><title>codegen_module_optimize (86,894,835 samples, 10.96%)</title><rect x="32.8689%" y="149" width="10.9633%" height="15" fill="rgb(221,10,30)"/><text x="33.1189%" y="159.50">codegen_module_o..</text></g><g><title>LLVM_module_optimize (77,714,863 samples, 9.81%)</title><rect x="34.0271%" y="133" width="9.8051%" height="15" fill="rgb(210,229,1)"/><text x="34.2771%" y="143.50">LLVM_module_op..</text></g><g><title>LLVM_lto_optimize (45,601,170 samples, 5.75%)</title><rect x="44.4163%" y="133" width="5.7534%" height="15" fill="rgb(222,148,37)"/><text x="44.6663%" y="143.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (82,667,893 samples, 10.43%)</title><rect x="50.1697%" y="133" width="10.4300%" height="15" fill="rgb(234,67,33)"/><text x="50.4197%" y="143.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (81,786,673 samples, 10.32%)</title><rect x="50.2809%" y="117" width="10.3188%" height="15" fill="rgb(247,98,35)"/><text x="50.5309%" y="127.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (1,146,493 samples, 0.14%)</title><rect x="60.5997%" y="133" width="0.1446%" height="15" fill="rgb(247,138,52)"/><text x="60.8497%" y="143.50"></text></g><g><title>codegen_module_perform_lto (134,409,208 samples, 16.96%)</title><rect x="43.8322%" y="149" width="16.9581%" height="15" fill="rgb(213,79,30)"/><text x="44.0822%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,693,742 samples, 0.34%)</title><rect x="81.1391%" y="101" width="0.3399%" height="15" fill="rgb(246,177,23)"/><text x="81.3891%" y="111.50"></text></g><g><title>metadata_register_crate (977,483 samples, 0.12%)</title><rect x="81.3556%" y="85" width="0.1233%" height="15" fill="rgb(230,62,27)"/><text x="81.6056%" y="95.50"></text></g><g><title>macro_expand_crate (163,800,698 samples, 20.67%)</title><rect x="60.8651%" y="133" width="20.6663%" height="15" fill="rgb(216,154,8)"/><text x="61.1151%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (163,777,728 samples, 20.66%)</title><rect x="60.8680%" y="117" width="20.6634%" height="15" fill="rgb(244,35,45)"/><text x="61.1180%" y="127.50">expand_crate</text></g><g><title>finalize_macro_resolutions (984,462 samples, 0.12%)</title><rect x="81.5465%" y="117" width="0.1242%" height="15" fill="rgb(251,115,12)"/><text x="81.7965%" y="127.50"></text></g><g><title>late_resolve_crate (2,044,155 samples, 0.26%)</title><rect x="81.6707%" y="117" width="0.2579%" height="15" fill="rgb(240,54,50)"/><text x="81.9207%" y="127.50"></text></g><g><title>configure_and_expand (167,692,025 samples, 21.16%)</title><rect x="60.7902%" y="149" width="21.1573%" height="15" fill="rgb(233,84,52)"/><text x="61.0402%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (3,234,610 samples, 0.41%)</title><rect x="81.5394%" y="133" width="0.4081%" height="15" fill="rgb(207,117,47)"/><text x="81.7894%" y="143.50"></text></g><g><title>free_global_ctxt (6,502,708 samples, 0.82%)</title><rect x="82.1101%" y="149" width="0.8204%" height="15" fill="rgb(249,43,39)"/><text x="82.3601%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,931,979 samples, 0.50%)</title><rect x="83.9943%" y="117" width="0.4961%" height="15" fill="rgb(209,38,44)"/><text x="84.2443%" y="127.50"></text></g><g><title>optimized_mir (8,601,455 samples, 1.09%)</title><rect x="83.4084%" y="133" width="1.0852%" height="15" fill="rgb(236,212,23)"/><text x="83.6584%" y="143.50"></text></g><g><title>generate_crate_metadata (12,543,930 samples, 1.58%)</title><rect x="82.9306%" y="149" width="1.5826%" height="15" fill="rgb(242,79,21)"/><text x="83.1806%" y="159.50"></text></g><g><title>hir_lowering (4,752,277 samples, 0.60%)</title><rect x="84.5132%" y="149" width="0.5996%" height="15" fill="rgb(211,96,35)"/><text x="84.7632%" y="159.50"></text></g><g><title>finish_ongoing_codegen (111,698,102 samples, 14.09%)</title><rect x="85.1151%" y="133" width="14.0927%" height="15" fill="rgb(253,215,40)"/><text x="85.3651%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (2,097,405 samples, 0.26%)</title><rect x="99.2078%" y="133" width="0.2646%" height="15" fill="rgb(211,81,21)"/><text x="99.4578%" y="143.50"></text></g><g><title>link_binary (2,027,884 samples, 0.26%)</title><rect x="99.2165%" y="117" width="0.2559%" height="15" fill="rgb(208,190,38)"/><text x="99.4665%" y="127.50"></text></g><g><title>link_rlib (1,489,537 samples, 0.19%)</title><rect x="99.2845%" y="101" width="0.1879%" height="15" fill="rgb(235,213,38)"/><text x="99.5345%" y="111.50"></text></g><g><title>link (113,823,597 samples, 14.36%)</title><rect x="85.1128%" y="149" width="14.3608%" height="15" fill="rgb(237,122,38)"/><text x="85.3628%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (2,619,782 samples, 0.33%)</title><rect x="99.5883%" y="149" width="0.3305%" height="15" fill="rgb(244,218,35)"/><text x="99.8383%" y="159.50"></text></g><g><title>all (792,598,186 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (792,598,186 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>