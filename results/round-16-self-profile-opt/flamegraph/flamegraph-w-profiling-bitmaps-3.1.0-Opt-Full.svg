<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (255,812,376 samples, 7.75%)</title><rect x="0.0373%" y="165" width="7.7465%" height="15" fill="rgb(227,0,7)"/><text x="0.2873%" y="175.50">LLVM_passes</text></g><g><title>is_late_bound_map (7,907,638 samples, 0.24%)</title><rect x="11.9828%" y="101" width="0.2395%" height="15" fill="rgb(217,0,24)"/><text x="12.2328%" y="111.50"></text></g><g><title>is_late_bound_map (7,100,840 samples, 0.22%)</title><rect x="12.0072%" y="85" width="0.2150%" height="15" fill="rgb(221,193,54)"/><text x="12.2572%" y="95.50"></text></g><g><title>resolve_lifetimes (5,816,461 samples, 0.18%)</title><rect x="12.0461%" y="69" width="0.1761%" height="15" fill="rgb(248,212,6)"/><text x="12.2961%" y="79.50"></text></g><g><title>mir_promoted (24,359,968 samples, 0.74%)</title><rect x="12.2222%" y="101" width="0.7377%" height="15" fill="rgb(208,68,35)"/><text x="12.4722%" y="111.50"></text></g><g><title>mir_const_qualif_const_arg (20,573,120 samples, 0.62%)</title><rect x="12.3369%" y="85" width="0.6230%" height="15" fill="rgb(232,128,0)"/><text x="12.5869%" y="95.50"></text></g><g><title>mir_const (17,535,497 samples, 0.53%)</title><rect x="12.4289%" y="69" width="0.5310%" height="15" fill="rgb(207,160,47)"/><text x="12.6789%" y="79.50"></text></g><g><title>unsafety_check_result_for_const_arg (12,225,888 samples, 0.37%)</title><rect x="12.5897%" y="53" width="0.3702%" height="15" fill="rgb(228,23,34)"/><text x="12.8397%" y="63.50"></text></g><g><title>mir_built (10,620,840 samples, 0.32%)</title><rect x="12.6383%" y="37" width="0.3216%" height="15" fill="rgb(218,30,26)"/><text x="12.8883%" y="47.50"></text></g><g><title>mir_borrowck_const_arg (69,730,024 samples, 2.11%)</title><rect x="10.8542%" y="117" width="2.1116%" height="15" fill="rgb(220,122,19)"/><text x="11.1042%" y="127.50">m..</text></g><g><title>mir_const (17,335,739 samples, 0.52%)</title><rect x="13.2390%" y="101" width="0.5250%" height="15" fill="rgb(250,228,42)"/><text x="13.4890%" y="111.50"></text></g><g><title>unsafety_check_result (14,744,283 samples, 0.45%)</title><rect x="13.3175%" y="85" width="0.4465%" height="15" fill="rgb(240,193,28)"/><text x="13.5675%" y="95.50"></text></g><g><title>mir_built (13,049,564 samples, 0.40%)</title><rect x="13.3688%" y="69" width="0.3952%" height="15" fill="rgb(216,20,37)"/><text x="13.6188%" y="79.50"></text></g><g><title>mir_promoted (61,760,930 samples, 1.87%)</title><rect x="12.9658%" y="117" width="1.8702%" height="15" fill="rgb(206,188,39)"/><text x="13.2158%" y="127.50">m..</text></g><g><title>mir_const_qualif (35,401,736 samples, 1.07%)</title><rect x="13.7640%" y="101" width="1.0720%" height="15" fill="rgb(217,207,13)"/><text x="14.0140%" y="111.50"></text></g><g><title>mir_const (29,791,765 samples, 0.90%)</title><rect x="13.9339%" y="85" width="0.9022%" height="15" fill="rgb(231,73,38)"/><text x="14.1839%" y="95.50"></text></g><g><title>unsafety_check_result (21,373,333 samples, 0.65%)</title><rect x="14.1888%" y="69" width="0.6472%" height="15" fill="rgb(225,20,46)"/><text x="14.4388%" y="79.50"></text></g><g><title>mir_built (18,575,704 samples, 0.56%)</title><rect x="14.2735%" y="53" width="0.5625%" height="15" fill="rgb(210,31,41)"/><text x="14.5235%" y="63.50"></text></g><g><title>MIR_borrow_checking (236,588,562 samples, 7.16%)</title><rect x="7.8298%" y="149" width="7.1644%" height="15" fill="rgb(221,200,47)"/><text x="8.0798%" y="159.50">MIR_borrow..</text></g><g><title>mir_borrowck (232,185,035 samples, 7.03%)</title><rect x="7.9631%" y="133" width="7.0310%" height="15" fill="rgb(226,26,5)"/><text x="8.2131%" y="143.50">mir_borro..</text></g><g><title>mir_drops_elaborated_and_const_checked (10,197,865 samples, 0.31%)</title><rect x="15.6301%" y="117" width="0.3088%" height="15" fill="rgb(249,33,26)"/><text x="15.8801%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (27,625,504 samples, 0.84%)</title><rect x="15.1100%" y="133" width="0.8366%" height="15" fill="rgb(235,183,28)"/><text x="15.3600%" y="143.50"></text></g><g><title>MIR_effect_checking (31,829,648 samples, 0.96%)</title><rect x="14.9942%" y="149" width="0.9639%" height="15" fill="rgb(221,5,38)"/><text x="15.2442%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (3,360,266 samples, 0.10%)</title><rect x="16.1464%" y="133" width="0.1018%" height="15" fill="rgb(247,18,42)"/><text x="16.3964%" y="143.50"></text></g><g><title>misc_checking_1 (7,645,311 samples, 0.23%)</title><rect x="16.0267%" y="149" width="0.2315%" height="15" fill="rgb(241,131,45)"/><text x="16.2767%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (3,316,446 samples, 0.10%)</title><rect x="16.2583%" y="133" width="0.1004%" height="15" fill="rgb(249,31,29)"/><text x="16.5083%" y="143.50"></text></g><g><title>misc_checking_2 (6,131,306 samples, 0.19%)</title><rect x="16.2583%" y="149" width="0.1857%" height="15" fill="rgb(225,111,53)"/><text x="16.5083%" y="159.50"></text></g><g><title>death_checking (3,588,668 samples, 0.11%)</title><rect x="16.5039%" y="133" width="0.1087%" height="15" fill="rgb(238,160,17)"/><text x="16.7539%" y="143.50"></text></g><g><title>crate_lints (4,245,584 samples, 0.13%)</title><rect x="16.6126%" y="117" width="0.1286%" height="15" fill="rgb(214,148,48)"/><text x="16.8626%" y="127.50"></text></g><g><title>lint_checking (6,799,822 samples, 0.21%)</title><rect x="16.6126%" y="133" width="0.2059%" height="15" fill="rgb(232,36,49)"/><text x="16.8626%" y="143.50"></text></g><g><title>privacy_access_levels (4,206,075 samples, 0.13%)</title><rect x="16.8185%" y="133" width="0.1274%" height="15" fill="rgb(209,103,24)"/><text x="17.0685%" y="143.50"></text></g><g><title>privacy_checking_modules (5,915,553 samples, 0.18%)</title><rect x="16.9458%" y="133" width="0.1791%" height="15" fill="rgb(229,88,8)"/><text x="17.1958%" y="143.50"></text></g><g><title>check_mod_privacy (5,910,983 samples, 0.18%)</title><rect x="16.9460%" y="117" width="0.1790%" height="15" fill="rgb(213,181,19)"/><text x="17.1960%" y="127.50"></text></g><g><title>misc_checking_3 (22,536,320 samples, 0.68%)</title><rect x="16.4439%" y="149" width="0.6824%" height="15" fill="rgb(254,191,54)"/><text x="16.6939%" y="159.50"></text></g><g><title>impl_parent (3,568,129 samples, 0.11%)</title><rect x="31.9266%" y="85" width="0.1081%" height="15" fill="rgb(241,83,37)"/><text x="32.1766%" y="95.50"></text></g><g><title>impl_trait_ref (6,646,125 samples, 0.20%)</title><rect x="32.0346%" y="85" width="0.2013%" height="15" fill="rgb(233,36,39)"/><text x="32.2846%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,324,643 samples, 0.16%)</title><rect x="32.0746%" y="69" width="0.1612%" height="15" fill="rgb(226,3,54)"/><text x="32.3246%" y="79.50"></text></g><g><title>coherent_trait (498,970,429 samples, 15.11%)</title><rect x="17.1704%" y="117" width="15.1099%" height="15" fill="rgb(245,192,40)"/><text x="17.4204%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (497,969,279 samples, 15.08%)</title><rect x="17.2007%" y="101" width="15.0795%" height="15" fill="rgb(238,167,29)"/><text x="17.4507%" y="111.50">specialization_graph_of</text></g><g><title>coherence_checking (499,629,946 samples, 15.13%)</title><rect x="17.1695%" y="133" width="15.1298%" height="15" fill="rgb(232,182,51)"/><text x="17.4195%" y="143.50">coherence_checking</text></g><g><title>evaluate_obligation (15,067,591 samples, 0.46%)</title><rect x="34.9511%" y="85" width="0.4563%" height="15" fill="rgb(231,60,39)"/><text x="35.2011%" y="95.50"></text></g><g><title>param_env (7,342,095 samples, 0.22%)</title><rect x="35.4890%" y="85" width="0.2223%" height="15" fill="rgb(208,69,12)"/><text x="35.7390%" y="95.50"></text></g><g><title>predicates_of (3,868,063 samples, 0.12%)</title><rect x="35.5942%" y="69" width="0.1171%" height="15" fill="rgb(235,93,37)"/><text x="35.8442%" y="79.50"></text></g><g><title>typeck (3,877,910 samples, 0.12%)</title><rect x="35.7758%" y="85" width="0.1174%" height="15" fill="rgb(213,116,39)"/><text x="36.0258%" y="95.50"></text></g><g><title>param_env (7,759,654 samples, 0.23%)</title><rect x="36.3371%" y="69" width="0.2350%" height="15" fill="rgb(222,207,29)"/><text x="36.5871%" y="79.50"></text></g><g><title>predicates_of (3,777,843 samples, 0.11%)</title><rect x="36.4577%" y="53" width="0.1144%" height="15" fill="rgb(206,96,30)"/><text x="36.7077%" y="63.50"></text></g><g><title>typeck_const_arg (24,282,516 samples, 0.74%)</title><rect x="35.8933%" y="85" width="0.7353%" height="15" fill="rgb(218,138,4)"/><text x="36.1433%" y="95.50"></text></g><g><title>item_bodies_checking (142,431,442 samples, 4.31%)</title><rect x="32.3260%" y="133" width="4.3131%" height="15" fill="rgb(250,191,14)"/><text x="32.5760%" y="143.50">item_..</text></g><g><title>typeck_item_bodies (142,427,922 samples, 4.31%)</title><rect x="32.3261%" y="117" width="4.3130%" height="15" fill="rgb(239,60,40)"/><text x="32.5761%" y="127.50">typec..</text></g><g><title>typeck (139,375,025 samples, 4.22%)</title><rect x="32.4185%" y="101" width="4.2206%" height="15" fill="rgb(206,27,48)"/><text x="32.6685%" y="111.50">typeck</text></g><g><title>evaluate_obligation (3,422,318 samples, 0.10%)</title><rect x="51.5149%" y="101" width="0.1036%" height="15" fill="rgb(225,35,8)"/><text x="51.7649%" y="111.50"></text></g><g><title>item_types_checking (496,925,107 samples, 15.05%)</title><rect x="36.6391%" y="133" width="15.0479%" height="15" fill="rgb(250,213,24)"/><text x="36.8891%" y="143.50">item_types_checking</text></g><g><title>check_mod_item_types (496,916,136 samples, 15.05%)</title><rect x="36.6394%" y="117" width="15.0476%" height="15" fill="rgb(247,123,22)"/><text x="36.8894%" y="127.50">check_mod_item_types</text></g><g><title>predicates_of (4,907,169 samples, 0.15%)</title><rect x="51.9447%" y="101" width="0.1486%" height="15" fill="rgb(231,138,38)"/><text x="52.1947%" y="111.50"></text></g><g><title>predicates_defined_on (3,898,193 samples, 0.12%)</title><rect x="51.9753%" y="85" width="0.1180%" height="15" fill="rgb(231,145,46)"/><text x="52.2253%" y="95.50"></text></g><g><title>type_collecting (16,582,036 samples, 0.50%)</title><rect x="51.6871%" y="133" width="0.5021%" height="15" fill="rgb(251,118,11)"/><text x="51.9371%" y="143.50"></text></g><g><title>collect_mod_item_types (16,576,536 samples, 0.50%)</title><rect x="51.6873%" y="117" width="0.5020%" height="15" fill="rgb(217,147,25)"/><text x="51.9373%" y="127.50"></text></g><g><title>param_env (8,358,410 samples, 0.25%)</title><rect x="52.8439%" y="101" width="0.2531%" height="15" fill="rgb(247,81,37)"/><text x="53.0939%" y="111.50"></text></g><g><title>region_scope_tree (3,523,763 samples, 0.11%)</title><rect x="53.0990%" y="101" width="0.1067%" height="15" fill="rgb(209,12,38)"/><text x="53.3490%" y="111.50"></text></g><g><title>check_impl_item_well_formed (29,565,864 samples, 0.90%)</title><rect x="52.3108%" y="117" width="0.8953%" height="15" fill="rgb(227,1,9)"/><text x="52.5608%" y="127.50"></text></g><g><title>evaluate_obligation (470,633,626 samples, 14.25%)</title><rect x="53.6811%" y="101" width="14.2518%" height="15" fill="rgb(248,47,43)"/><text x="53.9311%" y="111.50">evaluate_obligation</text></g><g><title>param_env (4,328,612 samples, 0.13%)</title><rect x="68.0144%" y="101" width="0.1311%" height="15" fill="rgb(221,10,30)"/><text x="68.2644%" y="111.50"></text></g><g><title>check_item_well_formed (494,131,588 samples, 14.96%)</title><rect x="53.2061%" y="117" width="14.9633%" height="15" fill="rgb(210,229,1)"/><text x="53.4561%" y="127.50">check_item_well_formed</text></g><g><title>analysis (1,994,515,641 samples, 60.40%)</title><rect x="7.7838%" y="165" width="60.3981%" height="15" fill="rgb(222,148,37)"/><text x="8.0338%" y="175.50">analysis</text></g><g><title>type_check_crate (1,685,998,784 samples, 51.06%)</title><rect x="17.1264%" y="149" width="51.0555%" height="15" fill="rgb(234,67,33)"/><text x="17.3764%" y="159.50">type_check_crate</text></g><g><title>wf_checking (527,887,816 samples, 15.99%)</title><rect x="52.1964%" y="133" width="15.9855%" height="15" fill="rgb(247,98,35)"/><text x="52.4464%" y="143.50">wf_checking</text></g><g><title>fn_abi_of_instance (8,068,194 samples, 0.24%)</title><rect x="68.8879%" y="133" width="0.2443%" height="15" fill="rgb(247,138,52)"/><text x="69.1379%" y="143.50"></text></g><g><title>codegen_module (29,517,845 samples, 0.89%)</title><rect x="68.2643%" y="149" width="0.8939%" height="15" fill="rgb(213,79,30)"/><text x="68.5143%" y="159.50"></text></g><g><title>layout_of (4,331,853 samples, 0.13%)</title><rect x="69.3702%" y="85" width="0.1312%" height="15" fill="rgb(246,177,23)"/><text x="69.6202%" y="95.50"></text></g><g><title>layout_of (3,492,347 samples, 0.11%)</title><rect x="69.3956%" y="69" width="0.1058%" height="15" fill="rgb(230,62,27)"/><text x="69.6456%" y="79.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (3,466,577 samples, 0.10%)</title><rect x="69.3964%" y="53" width="0.1050%" height="15" fill="rgb(216,154,8)"/><text x="69.6464%" y="63.50"></text></g><g><title>normalize_projection_ty (3,434,207 samples, 0.10%)</title><rect x="69.3974%" y="37" width="0.1040%" height="15" fill="rgb(244,35,45)"/><text x="69.6474%" y="47.50"></text></g><g><title>optimized_mir (12,857,579 samples, 0.39%)</title><rect x="69.2841%" y="101" width="0.3894%" height="15" fill="rgb(251,115,12)"/><text x="69.5341%" y="111.50"></text></g><g><title>resolve_instance (3,975,826 samples, 0.12%)</title><rect x="69.6734%" y="101" width="0.1204%" height="15" fill="rgb(240,54,50)"/><text x="69.9234%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (21,498,998 samples, 0.65%)</title><rect x="69.1594%" y="117" width="0.6510%" height="15" fill="rgb(233,84,52)"/><text x="69.4094%" y="127.50"></text></g><g><title>monomorphization_collector (21,749,721 samples, 0.66%)</title><rect x="69.1593%" y="133" width="0.6586%" height="15" fill="rgb(207,117,47)"/><text x="69.4093%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (23,535,050 samples, 0.71%)</title><rect x="69.1584%" y="149" width="0.7127%" height="15" fill="rgb(249,43,39)"/><text x="69.4084%" y="159.50"></text></g><g><title>codegen_crate (55,839,623 samples, 1.69%)</title><rect x="68.1821%" y="165" width="1.6909%" height="15" fill="rgb(209,38,44)"/><text x="68.4321%" y="175.50"></text></g><g><title>codegen_module_optimize (253,217,590 samples, 7.67%)</title><rect x="69.8731%" y="165" width="7.6680%" height="15" fill="rgb(236,212,23)"/><text x="70.1231%" y="175.50">codegen_mo..</text></g><g><title>LLVM_module_optimize (239,273,070 samples, 7.25%)</title><rect x="70.2953%" y="149" width="7.2457%" height="15" fill="rgb(242,79,21)"/><text x="70.5453%" y="159.50">LLVM_modul..</text></g><g><title>LLVM_lto_optimize (143,696,245 samples, 4.35%)</title><rect x="77.9322%" y="149" width="4.3514%" height="15" fill="rgb(211,96,35)"/><text x="78.1822%" y="159.50">LLVM_..</text></g><g><title>LLVM_module_codegen (172,818,985 samples, 5.23%)</title><rect x="82.2836%" y="149" width="5.2333%" height="15" fill="rgb(253,215,40)"/><text x="82.5336%" y="159.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (170,602,371 samples, 5.17%)</title><rect x="82.3507%" y="133" width="5.1662%" height="15" fill="rgb(211,81,21)"/><text x="82.6007%" y="143.50">LLVM_m..</text></g><g><title>LLVM_thin_lto_import (9,365,802 samples, 0.28%)</title><rect x="87.5169%" y="149" width="0.2836%" height="15" fill="rgb(208,190,38)"/><text x="87.7669%" y="159.50"></text></g><g><title>codegen_module_perform_lto (339,424,940 samples, 10.28%)</title><rect x="77.5410%" y="165" width="10.2785%" height="15" fill="rgb(235,213,38)"/><text x="77.7910%" y="175.50">codegen_module_..</text></g><g><title>macro_expand_crate (68,178,604 samples, 2.06%)</title><rect x="87.8522%" y="149" width="2.0646%" height="15" fill="rgb(237,122,38)"/><text x="88.1022%" y="159.50">m..</text></g><g><title>expand_crate (68,165,804 samples, 2.06%)</title><rect x="87.8526%" y="133" width="2.0642%" height="15" fill="rgb(244,218,35)"/><text x="88.1026%" y="143.50">e..</text></g><g><title>late_resolve_crate (7,180,666 samples, 0.22%)</title><rect x="89.9424%" y="133" width="0.2174%" height="15" fill="rgb(240,68,47)"/><text x="90.1924%" y="143.50"></text></g><g><title>configure_and_expand (77,817,846 samples, 2.36%)</title><rect x="87.8195%" y="165" width="2.3565%" height="15" fill="rgb(210,16,53)"/><text x="88.0695%" y="175.50">c..</text></g><g><title>resolve_crate (8,485,640 samples, 0.26%)</title><rect x="89.9190%" y="149" width="0.2570%" height="15" fill="rgb(235,124,12)"/><text x="90.1690%" y="159.50"></text></g><g><title>free_global_ctxt (15,630,426 samples, 0.47%)</title><rect x="90.2638%" y="165" width="0.4733%" height="15" fill="rgb(224,169,11)"/><text x="90.5138%" y="175.50"></text></g><g><title>exported_symbols (3,571,248 samples, 0.11%)</title><rect x="91.4554%" y="149" width="0.1081%" height="15" fill="rgb(250,166,2)"/><text x="91.7054%" y="159.50"></text></g><g><title>mir_for_ctfe (14,389,604 samples, 0.44%)</title><rect x="91.5772%" y="149" width="0.4357%" height="15" fill="rgb(242,216,29)"/><text x="91.8272%" y="159.50"></text></g><g><title>mir_for_ctfe_of_const_arg (3,370,158 samples, 0.10%)</title><rect x="91.9109%" y="133" width="0.1021%" height="15" fill="rgb(230,116,27)"/><text x="92.1609%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,392,409 samples, 0.19%)</title><rect x="92.3430%" y="133" width="0.1936%" height="15" fill="rgb(228,99,48)"/><text x="92.5930%" y="143.50"></text></g><g><title>optimized_mir (17,273,282 samples, 0.52%)</title><rect x="92.0361%" y="149" width="0.5231%" height="15" fill="rgb(253,11,6)"/><text x="92.2861%" y="159.50"></text></g><g><title>generate_crate_metadata (62,211,840 samples, 1.88%)</title><rect x="90.7371%" y="165" width="1.8839%" height="15" fill="rgb(247,143,39)"/><text x="90.9871%" y="175.50">g..</text></g><g><title>hir_lowering (22,037,444 samples, 0.67%)</title><rect x="92.6210%" y="165" width="0.6673%" height="15" fill="rgb(236,97,10)"/><text x="92.8710%" y="175.50"></text></g><g><title>finish_ongoing_codegen (207,364,771 samples, 6.28%)</title><rect x="93.2891%" y="149" width="6.2794%" height="15" fill="rgb(233,208,19)"/><text x="93.5391%" y="159.50">finish_o..</text></g><g><title>link_crate (4,316,686 samples, 0.13%)</title><rect x="99.5686%" y="149" width="0.1307%" height="15" fill="rgb(216,164,2)"/><text x="99.8186%" y="159.50"></text></g><g><title>link_binary (3,988,053 samples, 0.12%)</title><rect x="99.5785%" y="133" width="0.1208%" height="15" fill="rgb(220,129,5)"/><text x="99.8285%" y="143.50"></text></g><g><title>link (211,717,058 samples, 6.41%)</title><rect x="93.2883%" y="165" width="6.4112%" height="15" fill="rgb(242,17,10)"/><text x="93.5383%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (7,916,524 samples, 0.24%)</title><rect x="99.7160%" y="165" width="0.2397%" height="15" fill="rgb(242,107,0)"/><text x="99.9660%" y="175.50"></text></g><g><title>all (3,302,284,494 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (3,302,284,494 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>