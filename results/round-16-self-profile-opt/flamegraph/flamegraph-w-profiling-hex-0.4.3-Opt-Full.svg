<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (50,901,768 samples, 8.61%)</title><rect x="0.1313%" y="197" width="8.6142%" height="15" fill="rgb(227,0,7)"/><text x="0.3813%" y="207.50">LLVM_passes</text></g><g><title>is_copy_raw (3,565,659 samples, 0.60%)</title><rect x="19.1961%" y="85" width="0.6034%" height="15" fill="rgb(217,0,24)"/><text x="19.4461%" y="95.50"></text></g><g><title>evaluate_obligation (3,002,941 samples, 0.51%)</title><rect x="19.2913%" y="69" width="0.5082%" height="15" fill="rgb(221,193,54)"/><text x="19.5413%" y="79.50"></text></g><g><title>needs_drop_raw (655,698 samples, 0.11%)</title><rect x="19.8000%" y="85" width="0.1110%" height="15" fill="rgb(248,212,6)"/><text x="20.0500%" y="95.50"></text></g><g><title>thir_body (3,835,798 samples, 0.65%)</title><rect x="19.9631%" y="85" width="0.6491%" height="15" fill="rgb(208,68,35)"/><text x="20.2131%" y="95.50"></text></g><g><title>mir_const (22,580,119 samples, 3.82%)</title><rect x="16.7971%" y="133" width="3.8213%" height="15" fill="rgb(232,128,0)"/><text x="17.0471%" y="143.50">mir_..</text></g><g><title>unsafety_check_result (19,846,143 samples, 3.36%)</title><rect x="17.2598%" y="117" width="3.3586%" height="15" fill="rgb(207,160,47)"/><text x="17.5098%" y="127.50">uns..</text></g><g><title>mir_built (17,855,844 samples, 3.02%)</title><rect x="17.5966%" y="101" width="3.0218%" height="15" fill="rgb(228,23,34)"/><text x="17.8466%" y="111.50">mir..</text></g><g><title>mir_const_qualif (6,364,594 samples, 1.08%)</title><rect x="20.6184%" y="133" width="1.0771%" height="15" fill="rgb(218,30,26)"/><text x="20.8684%" y="143.50"></text></g><g><title>mir_const (5,205,126 samples, 0.88%)</title><rect x="20.8146%" y="117" width="0.8809%" height="15" fill="rgb(220,122,19)"/><text x="21.0646%" y="127.50"></text></g><g><title>unsafety_check_result (3,559,430 samples, 0.60%)</title><rect x="21.0931%" y="101" width="0.6024%" height="15" fill="rgb(250,228,42)"/><text x="21.3431%" y="111.50"></text></g><g><title>mir_built (3,060,265 samples, 0.52%)</title><rect x="21.1776%" y="85" width="0.5179%" height="15" fill="rgb(240,193,28)"/><text x="21.4276%" y="95.50"></text></g><g><title>mir_promoted (32,296,790 samples, 5.47%)</title><rect x="16.2298%" y="149" width="5.4657%" height="15" fill="rgb(216,20,37)"/><text x="16.4798%" y="159.50">mir_pro..</text></g><g><title>type_op_normalize_ty (2,574,088 samples, 0.44%)</title><rect x="21.8373%" y="149" width="0.4356%" height="15" fill="rgb(206,188,39)"/><text x="22.0873%" y="159.50"></text></g><g><title>normalize_projection_ty (1,742,795 samples, 0.29%)</title><rect x="21.9780%" y="133" width="0.2949%" height="15" fill="rgb(217,207,13)"/><text x="22.2280%" y="143.50"></text></g><g><title>type_op_prove_predicate (7,088,141 samples, 1.20%)</title><rect x="22.2729%" y="149" width="1.1995%" height="15" fill="rgb(231,73,38)"/><text x="22.5229%" y="159.50"></text></g><g><title>MIR_borrow_checking (86,294,216 samples, 14.60%)</title><rect x="8.8699%" y="181" width="14.6038%" height="15" fill="rgb(225,20,46)"/><text x="9.1199%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (85,565,734 samples, 14.48%)</title><rect x="8.9931%" y="165" width="14.4805%" height="15" fill="rgb(210,31,41)"/><text x="9.2431%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (3,130,805 samples, 0.53%)</title><rect x="23.4737%" y="181" width="0.5298%" height="15" fill="rgb(221,200,47)"/><text x="23.7237%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,731,990 samples, 0.46%)</title><rect x="23.5411%" y="165" width="0.4623%" height="15" fill="rgb(226,26,5)"/><text x="23.7911%" y="175.50"></text></g><g><title>codegen_fn_attrs (672,966 samples, 0.11%)</title><rect x="24.1971%" y="149" width="0.1139%" height="15" fill="rgb(249,33,26)"/><text x="24.4471%" y="159.50"></text></g><g><title>check_mod_attrs (1,310,465 samples, 0.22%)</title><rect x="24.0892%" y="165" width="0.2218%" height="15" fill="rgb(235,183,28)"/><text x="24.3392%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (690,537 samples, 0.12%)</title><rect x="24.3919%" y="165" width="0.1169%" height="15" fill="rgb(221,5,38)"/><text x="24.6419%" y="175.50"></text></g><g><title>misc_checking_1 (2,577,709 samples, 0.44%)</title><rect x="24.0858%" y="181" width="0.4362%" height="15" fill="rgb(247,18,42)"/><text x="24.3358%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,362,685 samples, 0.23%)</title><rect x="24.5224%" y="165" width="0.2306%" height="15" fill="rgb(241,131,45)"/><text x="24.7724%" y="175.50"></text></g><g><title>check_mod_liveness (1,133,572 samples, 0.19%)</title><rect x="24.5612%" y="149" width="0.1918%" height="15" fill="rgb(249,31,29)"/><text x="24.8112%" y="159.50"></text></g><g><title>misc_checking_2 (3,125,504 samples, 0.53%)</title><rect x="24.5221%" y="181" width="0.5289%" height="15" fill="rgb(225,111,53)"/><text x="24.7721%" y="191.50"></text></g><g><title>match_checking (1,760,809 samples, 0.30%)</title><rect x="24.7530%" y="165" width="0.2980%" height="15" fill="rgb(238,160,17)"/><text x="25.0030%" y="175.50"></text></g><g><title>check_match (1,571,259 samples, 0.27%)</title><rect x="24.7851%" y="149" width="0.2659%" height="15" fill="rgb(214,148,48)"/><text x="25.0351%" y="159.50"></text></g><g><title>death_checking (901,840 samples, 0.15%)</title><rect x="25.1441%" y="165" width="0.1526%" height="15" fill="rgb(232,36,49)"/><text x="25.3941%" y="175.50"></text></g><g><title>crate_lints (2,830,631 samples, 0.48%)</title><rect x="25.2970%" y="149" width="0.4790%" height="15" fill="rgb(209,103,24)"/><text x="25.5470%" y="159.50"></text></g><g><title>type_of (1,159,785 samples, 0.20%)</title><rect x="25.5798%" y="133" width="0.1963%" height="15" fill="rgb(229,88,8)"/><text x="25.8298%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (929,903 samples, 0.16%)</title><rect x="25.6187%" y="117" width="0.1574%" height="15" fill="rgb(213,181,19)"/><text x="25.8687%" y="127.50"></text></g><g><title>lint_checking (4,187,696 samples, 0.71%)</title><rect x="25.2967%" y="165" width="0.7087%" height="15" fill="rgb(254,191,54)"/><text x="25.5467%" y="175.50"></text></g><g><title>module_lints (1,355,055 samples, 0.23%)</title><rect x="25.7761%" y="149" width="0.2293%" height="15" fill="rgb(241,83,37)"/><text x="26.0261%" y="159.50"></text></g><g><title>lint_mod (1,349,695 samples, 0.23%)</title><rect x="25.7770%" y="133" width="0.2284%" height="15" fill="rgb(233,36,39)"/><text x="26.0270%" y="143.50"></text></g><g><title>privacy_access_levels (922,170 samples, 0.16%)</title><rect x="26.0054%" y="165" width="0.1561%" height="15" fill="rgb(226,3,54)"/><text x="26.2554%" y="175.50"></text></g><g><title>privacy_checking_modules (3,023,913 samples, 0.51%)</title><rect x="26.1615%" y="165" width="0.5117%" height="15" fill="rgb(245,192,40)"/><text x="26.4115%" y="175.50"></text></g><g><title>check_mod_privacy (3,021,573 samples, 0.51%)</title><rect x="26.1619%" y="149" width="0.5113%" height="15" fill="rgb(238,167,29)"/><text x="26.4119%" y="159.50"></text></g><g><title>misc_checking_3 (9,612,635 samples, 1.63%)</title><rect x="25.0510%" y="181" width="1.6268%" height="15" fill="rgb(232,182,51)"/><text x="25.3010%" y="191.50"></text></g><g><title>impl_parent (2,412,606 samples, 0.41%)</title><rect x="29.1987%" y="117" width="0.4083%" height="15" fill="rgb(231,60,39)"/><text x="29.4487%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,318,863 samples, 0.22%)</title><rect x="29.3838%" y="101" width="0.2232%" height="15" fill="rgb(208,69,12)"/><text x="29.6338%" y="111.50"></text></g><g><title>impl_trait_ref (5,158,666 samples, 0.87%)</title><rect x="29.6070%" y="117" width="0.8730%" height="15" fill="rgb(235,93,37)"/><text x="29.8570%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,118,854 samples, 0.70%)</title><rect x="29.7829%" y="101" width="0.6970%" height="15" fill="rgb(213,116,39)"/><text x="30.0329%" y="111.50"></text></g><g><title>coherent_trait (22,951,502 samples, 3.88%)</title><rect x="26.7234%" y="149" width="3.8841%" height="15" fill="rgb(222,207,29)"/><text x="26.9734%" y="159.50">cohe..</text></g><g><title>specialization_graph_of (22,464,716 samples, 3.80%)</title><rect x="26.8058%" y="133" width="3.8018%" height="15" fill="rgb(206,96,30)"/><text x="27.0558%" y="143.50">spec..</text></g><g><title>trait_impls_of (752,199 samples, 0.13%)</title><rect x="30.4803%" y="117" width="0.1273%" height="15" fill="rgb(218,138,4)"/><text x="30.7303%" y="127.50"></text></g><g><title>coherence_checking (23,073,593 samples, 3.90%)</title><rect x="26.7200%" y="165" width="3.9048%" height="15" fill="rgb(250,191,14)"/><text x="26.9700%" y="175.50">cohe..</text></g><g><title>dropck_outlives (949,451 samples, 0.16%)</title><rect x="42.1847%" y="117" width="0.1607%" height="15" fill="rgb(239,60,40)"/><text x="42.4347%" y="127.50"></text></g><g><title>evaluate_obligation (5,424,399 samples, 0.92%)</title><rect x="42.3454%" y="117" width="0.9180%" height="15" fill="rgb(206,27,48)"/><text x="42.5954%" y="127.50"></text></g><g><title>explicit_predicates_of (838,007 samples, 0.14%)</title><rect x="43.8845%" y="69" width="0.1418%" height="15" fill="rgb(225,35,8)"/><text x="44.1345%" y="79.50"></text></g><g><title>param_env (3,603,055 samples, 0.61%)</title><rect x="43.4271%" y="117" width="0.6098%" height="15" fill="rgb(250,213,24)"/><text x="43.6771%" y="127.50"></text></g><g><title>predicates_of (1,482,827 samples, 0.25%)</title><rect x="43.7859%" y="101" width="0.2509%" height="15" fill="rgb(247,123,22)"/><text x="44.0359%" y="111.50"></text></g><g><title>predicates_defined_on (1,252,772 samples, 0.21%)</title><rect x="43.8249%" y="85" width="0.2120%" height="15" fill="rgb(231,138,38)"/><text x="44.0749%" y="95.50"></text></g><g><title>region_scope_tree (615,716 samples, 0.10%)</title><rect x="44.0656%" y="117" width="0.1042%" height="15" fill="rgb(231,145,46)"/><text x="44.3156%" y="127.50"></text></g><g><title>generics_of (617,380 samples, 0.10%)</title><rect x="45.3105%" y="85" width="0.1045%" height="15" fill="rgb(251,118,11)"/><text x="45.5605%" y="95.50"></text></g><g><title>impl_trait_ref (867,713 samples, 0.15%)</title><rect x="45.4247%" y="85" width="0.1468%" height="15" fill="rgb(217,147,25)"/><text x="45.6747%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (729,031 samples, 0.12%)</title><rect x="45.4482%" y="69" width="0.1234%" height="15" fill="rgb(247,81,37)"/><text x="45.6982%" y="79.50"></text></g><g><title>specializes (679,825 samples, 0.12%)</title><rect x="45.6215%" y="85" width="0.1150%" height="15" fill="rgb(209,12,38)"/><text x="45.8715%" y="95.50"></text></g><g><title>evaluate_obligation (5,102,766 samples, 0.86%)</title><rect x="44.9414%" y="101" width="0.8636%" height="15" fill="rgb(227,1,9)"/><text x="45.1914%" y="111.50"></text></g><g><title>typeck (10,412,303 samples, 1.76%)</title><rect x="44.1957%" y="117" width="1.7621%" height="15" fill="rgb(248,47,43)"/><text x="44.4457%" y="127.50"></text></g><g><title>item_bodies_checking (90,606,654 samples, 15.33%)</title><rect x="30.6427%" y="165" width="15.3336%" height="15" fill="rgb(221,10,30)"/><text x="30.8927%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (90,602,864 samples, 15.33%)</title><rect x="30.6434%" y="149" width="15.3330%" height="15" fill="rgb(210,229,1)"/><text x="30.8934%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (90,031,768 samples, 15.24%)</title><rect x="30.7400%" y="133" width="15.2363%" height="15" fill="rgb(222,148,37)"/><text x="30.9900%" y="143.50">typeck</text></g><g><title>mir_const (1,772,619 samples, 0.30%)</title><rect x="48.8205%" y="85" width="0.3000%" height="15" fill="rgb(234,67,33)"/><text x="49.0705%" y="95.50"></text></g><g><title>unsafety_check_result (1,685,679 samples, 0.29%)</title><rect x="48.8352%" y="69" width="0.2853%" height="15" fill="rgb(247,98,35)"/><text x="49.0852%" y="79.50"></text></g><g><title>mir_built (1,575,007 samples, 0.27%)</title><rect x="48.8540%" y="53" width="0.2665%" height="15" fill="rgb(247,138,52)"/><text x="49.1040%" y="63.50"></text></g><g><title>typeck (1,310,545 samples, 0.22%)</title><rect x="48.8987%" y="37" width="0.2218%" height="15" fill="rgb(213,79,30)"/><text x="49.1487%" y="47.50"></text></g><g><title>mir_promoted (1,846,480 samples, 0.31%)</title><rect x="48.8089%" y="101" width="0.3125%" height="15" fill="rgb(246,177,23)"/><text x="49.0589%" y="111.50"></text></g><g><title>type_of (2,351,355 samples, 0.40%)</title><rect x="48.7377%" y="133" width="0.3979%" height="15" fill="rgb(230,62,27)"/><text x="48.9877%" y="143.50"></text></g><g><title>mir_borrowck (2,340,895 samples, 0.40%)</title><rect x="48.7394%" y="117" width="0.3962%" height="15" fill="rgb(216,154,8)"/><text x="48.9894%" y="127.50"></text></g><g><title>item_types_checking (18,859,447 samples, 3.19%)</title><rect x="45.9763%" y="165" width="3.1916%" height="15" fill="rgb(244,35,45)"/><text x="46.2263%" y="175.50">ite..</text></g><g><title>check_mod_item_types (18,854,867 samples, 3.19%)</title><rect x="45.9771%" y="149" width="3.1909%" height="15" fill="rgb(251,115,12)"/><text x="46.2271%" y="159.50">che..</text></g><g><title>fn_sig (1,165,410 samples, 0.20%)</title><rect x="49.3127%" y="133" width="0.1972%" height="15" fill="rgb(240,54,50)"/><text x="49.5627%" y="143.50"></text></g><g><title>is_late_bound_map (727,558 samples, 0.12%)</title><rect x="49.5743%" y="117" width="0.1231%" height="15" fill="rgb(233,84,52)"/><text x="49.8243%" y="127.50"></text></g><g><title>resolve_lifetimes (722,328 samples, 0.12%)</title><rect x="49.5752%" y="101" width="0.1222%" height="15" fill="rgb(207,117,47)"/><text x="49.8252%" y="111.50"></text></g><g><title>lint_levels (642,087 samples, 0.11%)</title><rect x="49.5888%" y="85" width="0.1087%" height="15" fill="rgb(249,43,39)"/><text x="49.8388%" y="95.50"></text></g><g><title>generics_of (1,264,337 samples, 0.21%)</title><rect x="49.5099%" y="133" width="0.2140%" height="15" fill="rgb(209,38,44)"/><text x="49.7599%" y="143.50"></text></g><g><title>late_bound_vars_map (1,183,260 samples, 0.20%)</title><rect x="49.9564%" y="85" width="0.2002%" height="15" fill="rgb(236,212,23)"/><text x="50.2064%" y="95.50"></text></g><g><title>resolve_lifetimes (1,066,139 samples, 0.18%)</title><rect x="49.9762%" y="69" width="0.1804%" height="15" fill="rgb(242,79,21)"/><text x="50.2262%" y="79.50"></text></g><g><title>explicit_predicates_of (1,914,069 samples, 0.32%)</title><rect x="49.8422%" y="101" width="0.3239%" height="15" fill="rgb(211,96,35)"/><text x="50.0922%" y="111.50"></text></g><g><title>predicates_of (2,655,377 samples, 0.45%)</title><rect x="49.7513%" y="133" width="0.4494%" height="15" fill="rgb(253,215,40)"/><text x="50.0013%" y="143.50"></text></g><g><title>predicates_defined_on (2,451,834 samples, 0.41%)</title><rect x="49.7857%" y="117" width="0.4149%" height="15" fill="rgb(211,81,21)"/><text x="50.0357%" y="127.50"></text></g><g><title>type_collecting (6,682,532 samples, 1.13%)</title><rect x="49.1682%" y="165" width="1.1309%" height="15" fill="rgb(208,190,38)"/><text x="49.4182%" y="175.50"></text></g><g><title>collect_mod_item_types (6,674,082 samples, 1.13%)</title><rect x="49.1696%" y="149" width="1.1295%" height="15" fill="rgb(235,213,38)"/><text x="49.4196%" y="159.50"></text></g><g><title>evaluate_obligation (867,952 samples, 0.15%)</title><rect x="53.4291%" y="133" width="0.1469%" height="15" fill="rgb(237,122,38)"/><text x="53.6791%" y="143.50"></text></g><g><title>implied_outlives_bounds (964,001 samples, 0.16%)</title><rect x="53.6351%" y="133" width="0.1631%" height="15" fill="rgb(244,218,35)"/><text x="53.8851%" y="143.50"></text></g><g><title>param_env (1,544,121 samples, 0.26%)</title><rect x="53.7982%" y="133" width="0.2613%" height="15" fill="rgb(240,68,47)"/><text x="54.0482%" y="143.50"></text></g><g><title>check_impl_item_well_formed (22,774,541 samples, 3.85%)</title><rect x="50.4398%" y="149" width="3.8542%" height="15" fill="rgb(210,16,53)"/><text x="50.6898%" y="159.50">chec..</text></g><g><title>region_scope_tree (1,371,110 samples, 0.23%)</title><rect x="54.0620%" y="133" width="0.2320%" height="15" fill="rgb(235,124,12)"/><text x="54.3120%" y="143.50"></text></g><g><title>evaluate_obligation (11,464,239 samples, 1.94%)</title><rect x="54.9300%" y="133" width="1.9401%" height="15" fill="rgb(224,169,11)"/><text x="55.1800%" y="143.50">e..</text></g><g><title>param_env (812,406 samples, 0.14%)</title><rect x="56.9559%" y="133" width="0.1375%" height="15" fill="rgb(250,166,2)"/><text x="57.2059%" y="143.50"></text></g><g><title>check_item_well_formed (16,971,292 samples, 2.87%)</title><rect x="54.2940%" y="149" width="2.8721%" height="15" fill="rgb(242,216,29)"/><text x="54.5440%" y="159.50">ch..</text></g><g><title>analysis (286,405,889 samples, 48.47%)</title><rect x="8.7456%" y="197" width="48.4692%" height="15" fill="rgb(230,116,27)"/><text x="8.9956%" y="207.50">analysis</text></g><g><title>type_check_crate (180,444,057 samples, 30.54%)</title><rect x="26.6778%" y="181" width="30.5370%" height="15" fill="rgb(228,99,48)"/><text x="26.9278%" y="191.50">type_check_crate</text></g><g><title>wf_checking (40,827,547 samples, 6.91%)</title><rect x="50.3054%" y="165" width="6.9094%" height="15" fill="rgb(253,11,6)"/><text x="50.5554%" y="175.50">wf_checki..</text></g><g><title>layout_of (605,356 samples, 0.10%)</title><rect x="58.2306%" y="149" width="0.1024%" height="15" fill="rgb(247,143,39)"/><text x="58.4806%" y="159.50"></text></g><g><title>fn_abi_of_instance (2,418,077 samples, 0.41%)</title><rect x="58.0345%" y="165" width="0.4092%" height="15" fill="rgb(236,97,10)"/><text x="58.2845%" y="175.50"></text></g><g><title>codegen_module (6,829,865 samples, 1.16%)</title><rect x="57.3487%" y="181" width="1.1558%" height="15" fill="rgb(233,208,19)"/><text x="57.5987%" y="191.50"></text></g><g><title>optimized_mir (2,058,213 samples, 0.35%)</title><rect x="58.6763%" y="133" width="0.3483%" height="15" fill="rgb(216,164,2)"/><text x="58.9263%" y="143.50"></text></g><g><title>specialization_graph_of (1,181,483 samples, 0.20%)</title><rect x="59.1252%" y="117" width="0.1999%" height="15" fill="rgb(220,129,5)"/><text x="59.3752%" y="127.50"></text></g><g><title>resolve_instance (1,868,833 samples, 0.32%)</title><rect x="59.0246%" y="133" width="0.3163%" height="15" fill="rgb(242,17,10)"/><text x="59.2746%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (5,069,715 samples, 0.86%)</title><rect x="58.5097%" y="149" width="0.8580%" height="15" fill="rgb(242,107,0)"/><text x="58.7597%" y="159.50"></text></g><g><title>monomorphization_collector (5,125,026 samples, 0.87%)</title><rect x="58.5093%" y="165" width="0.8673%" height="15" fill="rgb(251,28,31)"/><text x="58.7593%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (5,595,051 samples, 0.95%)</title><rect x="58.5047%" y="181" width="0.9469%" height="15" fill="rgb(233,223,10)"/><text x="58.7547%" y="191.50"></text></g><g><title>codegen_crate (13,267,545 samples, 2.25%)</title><rect x="57.2167%" y="197" width="2.2453%" height="15" fill="rgb(215,21,27)"/><text x="57.4667%" y="207.50">c..</text></g><g><title>codegen_module_optimize (47,973,236 samples, 8.12%)</title><rect x="59.4620%" y="197" width="8.1186%" height="15" fill="rgb(232,23,21)"/><text x="59.7120%" y="207.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (44,006,552 samples, 7.45%)</title><rect x="60.1333%" y="181" width="7.4473%" height="15" fill="rgb(244,5,23)"/><text x="60.3833%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_lto_optimize (15,754,632 samples, 2.67%)</title><rect x="67.9991%" y="181" width="2.6662%" height="15" fill="rgb(226,81,46)"/><text x="68.2491%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen (34,196,195 samples, 5.79%)</title><rect x="70.6653%" y="181" width="5.7871%" height="15" fill="rgb(247,70,30)"/><text x="70.9153%" y="191.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (33,738,030 samples, 5.71%)</title><rect x="70.7429%" y="165" width="5.7096%" height="15" fill="rgb(212,68,19)"/><text x="70.9929%" y="175.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (53,101,874 samples, 8.99%)</title><rect x="67.5806%" y="197" width="8.9866%" height="15" fill="rgb(240,187,13)"/><text x="67.8306%" y="207.50">codegen_modul..</text></g><g><title>metadata_register_crate (2,346,665 samples, 0.40%)</title><rect x="81.4595%" y="149" width="0.3971%" height="15" fill="rgb(223,113,26)"/><text x="81.7095%" y="159.50"></text></g><g><title>metadata_register_crate (859,528 samples, 0.15%)</title><rect x="81.7111%" y="133" width="0.1455%" height="15" fill="rgb(206,192,2)"/><text x="81.9611%" y="143.50"></text></g><g><title>macro_expand_crate (30,387,884 samples, 5.14%)</title><rect x="76.7186%" y="181" width="5.1426%" height="15" fill="rgb(241,108,4)"/><text x="76.9686%" y="191.50">macro_..</text></g><g><title>expand_crate (30,372,504 samples, 5.14%)</title><rect x="76.7212%" y="165" width="5.1400%" height="15" fill="rgb(247,173,49)"/><text x="76.9712%" y="175.50">expand..</text></g><g><title>late_resolve_crate (6,775,044 samples, 1.15%)</title><rect x="81.9509%" y="165" width="1.1466%" height="15" fill="rgb(224,114,35)"/><text x="82.2009%" y="175.50"></text></g><g><title>configure_and_expand (38,894,096 samples, 6.58%)</title><rect x="76.5672%" y="197" width="6.5821%" height="15" fill="rgb(245,159,27)"/><text x="76.8172%" y="207.50">configure..</text></g><g><title>resolve_crate (7,374,081 samples, 1.25%)</title><rect x="81.9014%" y="181" width="1.2479%" height="15" fill="rgb(245,172,44)"/><text x="82.1514%" y="191.50"></text></g><g><title>early_lint_checks (699,928 samples, 0.12%)</title><rect x="83.2087%" y="197" width="0.1185%" height="15" fill="rgb(236,23,11)"/><text x="83.4587%" y="207.50"></text></g><g><title>free_global_ctxt (6,033,316 samples, 1.02%)</title><rect x="83.3272%" y="197" width="1.0210%" height="15" fill="rgb(205,117,38)"/><text x="83.5772%" y="207.50"></text></g><g><title>mir_for_ctfe (1,103,111 samples, 0.19%)</title><rect x="85.5610%" y="181" width="0.1867%" height="15" fill="rgb(237,72,25)"/><text x="85.8110%" y="191.50"></text></g><g><title>layout_of (1,998,976 samples, 0.34%)</title><rect x="87.5902%" y="165" width="0.3383%" height="15" fill="rgb(244,70,9)"/><text x="87.8402%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,768,650 samples, 1.82%)</title><rect x="87.9285%" y="165" width="1.8224%" height="15" fill="rgb(217,125,39)"/><text x="88.1785%" y="175.50">m..</text></g><g><title>optimized_mir (23,610,433 samples, 4.00%)</title><rect x="85.7567%" y="181" width="3.9957%" height="15" fill="rgb(235,36,10)"/><text x="86.0067%" y="191.50">opti..</text></g><g><title>generate_crate_metadata (32,194,963 samples, 5.45%)</title><rect x="84.3482%" y="197" width="5.4484%" height="15" fill="rgb(251,123,47)"/><text x="84.5982%" y="207.50">generat..</text></g><g><title>hir_lowering (10,811,849 samples, 1.83%)</title><rect x="89.7967%" y="197" width="1.8297%" height="15" fill="rgb(221,13,13)"/><text x="90.0467%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (39,920,678 samples, 6.76%)</title><rect x="91.6298%" y="181" width="6.7559%" height="15" fill="rgb(238,131,9)"/><text x="91.8798%" y="191.50">finish_on..</text></g><g><title>link_crate (3,067,934 samples, 0.52%)</title><rect x="98.3857%" y="181" width="0.5192%" height="15" fill="rgb(211,50,8)"/><text x="98.6357%" y="191.50"></text></g><g><title>link_binary (2,987,013 samples, 0.51%)</title><rect x="98.3994%" y="165" width="0.5055%" height="15" fill="rgb(245,182,24)"/><text x="98.6494%" y="175.50"></text></g><g><title>link_rlib (2,347,756 samples, 0.40%)</title><rect x="98.5076%" y="149" width="0.3973%" height="15" fill="rgb(242,14,37)"/><text x="98.7576%" y="159.50"></text></g><g><title>link (43,021,322 samples, 7.28%)</title><rect x="91.6264%" y="197" width="7.2806%" height="15" fill="rgb(246,228,12)"/><text x="91.8764%" y="207.50">link</text></g><g><title>parse_crate (3,500,728 samples, 0.59%)</title><rect x="98.9070%" y="197" width="0.5924%" height="15" fill="rgb(213,55,15)"/><text x="99.1570%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,933,641 samples, 0.33%)</title><rect x="99.5592%" y="197" width="0.3272%" height="15" fill="rgb(209,9,3)"/><text x="99.8092%" y="207.50"></text></g><g><title>all (590,902,689 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,59,30)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (590,902,689 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(209,121,21)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>