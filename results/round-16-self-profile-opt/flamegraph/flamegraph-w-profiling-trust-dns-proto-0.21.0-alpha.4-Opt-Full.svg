<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (2,064,847,715 samples, 9.17%)</title><rect x="0.0381%" y="197" width="9.1741%" height="15" fill="rgb(227,0,7)"/><text x="0.2881%" y="207.50">LLVM_passes</text></g><g><title>thir_body (30,271,353 samples, 0.13%)</title><rect x="11.4239%" y="85" width="0.1345%" height="15" fill="rgb(217,0,24)"/><text x="11.6739%" y="95.50"></text></g><g><title>mir_const (177,435,911 samples, 0.79%)</title><rect x="10.7724%" y="133" width="0.7884%" height="15" fill="rgb(221,193,54)"/><text x="11.0224%" y="143.50"></text></g><g><title>unsafety_check_result (156,623,500 samples, 0.70%)</title><rect x="10.8649%" y="117" width="0.6959%" height="15" fill="rgb(248,212,6)"/><text x="11.1149%" y="127.50"></text></g><g><title>mir_built (141,243,336 samples, 0.63%)</title><rect x="10.9332%" y="101" width="0.6275%" height="15" fill="rgb(208,68,35)"/><text x="11.1832%" y="111.50"></text></g><g><title>mir_promoted (201,846,805 samples, 0.90%)</title><rect x="10.6869%" y="149" width="0.8968%" height="15" fill="rgb(232,128,0)"/><text x="10.9369%" y="159.50"></text></g><g><title>type_op_prove_predicate (48,089,443 samples, 0.21%)</title><rect x="11.6999%" y="149" width="0.2137%" height="15" fill="rgb(207,160,47)"/><text x="11.9499%" y="159.50"></text></g><g><title>MIR_borrow_checking (603,024,467 samples, 2.68%)</title><rect x="9.2345%" y="181" width="2.6792%" height="15" fill="rgb(228,23,34)"/><text x="9.4845%" y="191.50">MI..</text></g><g><title>mir_borrowck (599,485,886 samples, 2.66%)</title><rect x="9.2502%" y="165" width="2.6635%" height="15" fill="rgb(218,30,26)"/><text x="9.5002%" y="175.50">mi..</text></g><g><title>misc_checking_1 (31,084,313 samples, 0.14%)</title><rect x="11.9462%" y="181" width="0.1381%" height="15" fill="rgb(220,122,19)"/><text x="12.1962%" y="191.50"></text></g><g><title>misc_checking_2 (35,224,149 samples, 0.16%)</title><rect x="12.0843%" y="181" width="0.1565%" height="15" fill="rgb(250,228,42)"/><text x="12.3343%" y="191.50"></text></g><g><title>crate_lints (22,745,431 samples, 0.10%)</title><rect x="12.3369%" y="149" width="0.1011%" height="15" fill="rgb(240,193,28)"/><text x="12.5869%" y="159.50"></text></g><g><title>lint_checking (39,397,245 samples, 0.18%)</title><rect x="12.3369%" y="165" width="0.1750%" height="15" fill="rgb(216,20,37)"/><text x="12.5869%" y="175.50"></text></g><g><title>privacy_checking_modules (25,995,937 samples, 0.12%)</title><rect x="12.5603%" y="165" width="0.1155%" height="15" fill="rgb(206,188,39)"/><text x="12.8103%" y="175.50"></text></g><g><title>check_mod_privacy (25,940,506 samples, 0.12%)</title><rect x="12.5606%" y="149" width="0.1153%" height="15" fill="rgb(217,207,13)"/><text x="12.8106%" y="159.50"></text></g><g><title>misc_checking_3 (98,296,395 samples, 0.44%)</title><rect x="12.2408%" y="181" width="0.4367%" height="15" fill="rgb(231,73,38)"/><text x="12.4908%" y="191.50"></text></g><g><title>coherent_trait (29,206,352 samples, 0.13%)</title><rect x="12.6881%" y="149" width="0.1298%" height="15" fill="rgb(225,20,46)"/><text x="12.9381%" y="159.50"></text></g><g><title>specialization_graph_of (27,948,199 samples, 0.12%)</title><rect x="12.6937%" y="133" width="0.1242%" height="15" fill="rgb(210,31,41)"/><text x="12.9437%" y="143.50"></text></g><g><title>coherence_checking (30,357,295 samples, 0.13%)</title><rect x="12.6878%" y="165" width="0.1349%" height="15" fill="rgb(221,200,47)"/><text x="12.9378%" y="175.50"></text></g><g><title>evaluate_obligation (40,728,438 samples, 0.18%)</title><rect x="14.9253%" y="117" width="0.1810%" height="15" fill="rgb(226,26,5)"/><text x="15.1753%" y="127.50"></text></g><g><title>typeck (178,668,872 samples, 0.79%)</title><rect x="15.1715%" y="117" width="0.7938%" height="15" fill="rgb(249,33,26)"/><text x="15.4215%" y="127.50"></text></g><g><title>item_bodies_checking (706,935,984 samples, 3.14%)</title><rect x="12.8270%" y="165" width="3.1409%" height="15" fill="rgb(235,183,28)"/><text x="13.0770%" y="175.50">ite..</text></g><g><title>typeck_item_bodies (706,931,694 samples, 3.14%)</title><rect x="12.8270%" y="149" width="3.1409%" height="15" fill="rgb(221,5,38)"/><text x="13.0770%" y="159.50">typ..</text></g><g><title>typeck (703,077,998 samples, 3.12%)</title><rect x="12.8441%" y="133" width="3.1238%" height="15" fill="rgb(247,18,42)"/><text x="13.0941%" y="143.50">typ..</text></g><g><title>mir_built (34,598,583 samples, 0.15%)</title><rect x="16.1255%" y="53" width="0.1537%" height="15" fill="rgb(241,131,45)"/><text x="16.3755%" y="63.50"></text></g><g><title>typeck (33,597,451 samples, 0.15%)</title><rect x="16.1300%" y="37" width="0.1493%" height="15" fill="rgb(249,31,29)"/><text x="16.3800%" y="47.50"></text></g><g><title>mir_const (37,870,429 samples, 0.17%)</title><rect x="16.1198%" y="85" width="0.1683%" height="15" fill="rgb(225,111,53)"/><text x="16.3698%" y="95.50"></text></g><g><title>unsafety_check_result (36,729,426 samples, 0.16%)</title><rect x="16.1249%" y="69" width="0.1632%" height="15" fill="rgb(238,160,17)"/><text x="16.3749%" y="79.50"></text></g><g><title>mir_promoted (38,034,770 samples, 0.17%)</title><rect x="16.1192%" y="101" width="0.1690%" height="15" fill="rgb(214,148,48)"/><text x="16.3692%" y="111.50"></text></g><g><title>type_of (49,680,680 samples, 0.22%)</title><rect x="16.0710%" y="133" width="0.2207%" height="15" fill="rgb(232,36,49)"/><text x="16.3210%" y="143.50"></text></g><g><title>mir_borrowck (49,595,419 samples, 0.22%)</title><rect x="16.0714%" y="117" width="0.2204%" height="15" fill="rgb(209,103,24)"/><text x="16.3214%" y="127.50"></text></g><g><title>item_types_checking (75,410,843 samples, 0.34%)</title><rect x="15.9679%" y="165" width="0.3351%" height="15" fill="rgb(229,88,8)"/><text x="16.2179%" y="175.50"></text></g><g><title>check_mod_item_types (75,342,832 samples, 0.33%)</title><rect x="15.9682%" y="149" width="0.3347%" height="15" fill="rgb(213,181,19)"/><text x="16.2182%" y="159.50"></text></g><g><title>type_collecting (34,485,621 samples, 0.15%)</title><rect x="16.3031%" y="165" width="0.1532%" height="15" fill="rgb(254,191,54)"/><text x="16.5531%" y="175.50"></text></g><g><title>collect_mod_item_types (34,416,150 samples, 0.15%)</title><rect x="16.3035%" y="149" width="0.1529%" height="15" fill="rgb(241,83,37)"/><text x="16.5535%" y="159.50"></text></g><g><title>check_impl_item_well_formed (64,601,708 samples, 0.29%)</title><rect x="16.4771%" y="149" width="0.2870%" height="15" fill="rgb(233,36,39)"/><text x="16.7271%" y="159.50"></text></g><g><title>check_item_well_formed (41,277,762 samples, 0.18%)</title><rect x="16.7641%" y="149" width="0.1834%" height="15" fill="rgb(226,3,54)"/><text x="17.0141%" y="159.50"></text></g><g><title>analysis (1,744,671,931 samples, 7.75%)</title><rect x="9.2122%" y="197" width="7.7516%" height="15" fill="rgb(245,192,40)"/><text x="9.4622%" y="207.50">analysis</text></g><g><title>type_check_crate (964,733,521 samples, 4.29%)</title><rect x="12.6775%" y="181" width="4.2863%" height="15" fill="rgb(238,167,29)"/><text x="12.9275%" y="191.50">type_..</text></g><g><title>wf_checking (113,987,629 samples, 0.51%)</title><rect x="16.4574%" y="165" width="0.5064%" height="15" fill="rgb(232,182,51)"/><text x="16.7074%" y="175.50"></text></g><g><title>param_env (25,740,377 samples, 0.11%)</title><rect x="20.5152%" y="149" width="0.1144%" height="15" fill="rgb(231,60,39)"/><text x="20.7652%" y="159.50"></text></g><g><title>fn_abi_of_instance (133,350,257 samples, 0.59%)</title><rect x="20.0869%" y="165" width="0.5925%" height="15" fill="rgb(208,69,12)"/><text x="20.3369%" y="175.50"></text></g><g><title>codegen_module (854,061,028 samples, 3.79%)</title><rect x="16.9792%" y="181" width="3.7946%" height="15" fill="rgb(235,93,37)"/><text x="17.2292%" y="191.50">code..</text></g><g><title>metadata_decode_entry_optimized_mir (27,500,204 samples, 0.12%)</title><rect x="21.4011%" y="117" width="0.1222%" height="15" fill="rgb(213,116,39)"/><text x="21.6511%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (68,945,543 samples, 0.31%)</title><rect x="21.5233%" y="117" width="0.3063%" height="15" fill="rgb(222,207,29)"/><text x="21.7733%" y="127.50"></text></g><g><title>optimized_mir (171,419,972 samples, 0.76%)</title><rect x="21.1053%" y="133" width="0.7616%" height="15" fill="rgb(206,96,30)"/><text x="21.3553%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (51,762,858 samples, 0.23%)</title><rect x="21.9407%" y="117" width="0.2300%" height="15" fill="rgb(218,138,4)"/><text x="22.1907%" y="127.50"></text></g><g><title>resolve_instance (82,076,032 samples, 0.36%)</title><rect x="21.8669%" y="133" width="0.3647%" height="15" fill="rgb(250,191,14)"/><text x="22.1169%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (350,016,324 samples, 1.56%)</title><rect x="20.7748%" y="149" width="1.5551%" height="15" fill="rgb(239,60,40)"/><text x="21.0248%" y="159.50"></text></g><g><title>monomorphization_collector (352,386,161 samples, 1.57%)</title><rect x="20.7748%" y="165" width="1.5657%" height="15" fill="rgb(206,27,48)"/><text x="21.0248%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (29,707,518 samples, 0.13%)</title><rect x="22.3405%" y="149" width="0.1320%" height="15" fill="rgb(225,35,8)"/><text x="22.5905%" y="159.50"></text></g><g><title>symbol_name (25,589,420 samples, 0.11%)</title><rect x="22.3588%" y="133" width="0.1137%" height="15" fill="rgb(250,213,24)"/><text x="22.6088%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (395,702,969 samples, 1.76%)</title><rect x="20.7739%" y="181" width="1.7581%" height="15" fill="rgb(247,123,22)"/><text x="21.0239%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (43,108,906 samples, 0.19%)</title><rect x="22.3404%" y="165" width="0.1915%" height="15" fill="rgb(231,138,38)"/><text x="22.5904%" y="175.50"></text></g><g><title>codegen_crate (1,253,403,898 samples, 5.57%)</title><rect x="16.9639%" y="197" width="5.5689%" height="15" fill="rgb(231,145,46)"/><text x="17.2139%" y="207.50">codegen..</text></g><g><title>codegen_module_optimize (6,509,884,338 samples, 28.92%)</title><rect x="22.5328%" y="197" width="28.9235%" height="15" fill="rgb(251,118,11)"/><text x="22.7828%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (6,255,787,800 samples, 27.79%)</title><rect x="23.6617%" y="181" width="27.7946%" height="15" fill="rgb(217,147,25)"/><text x="23.9117%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (4,545,598,276 samples, 20.20%)</title><rect x="52.2587%" y="181" width="20.1962%" height="15" fill="rgb(247,81,37)"/><text x="52.5087%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (3,400,730,825 samples, 15.11%)</title><rect x="72.4548%" y="181" width="15.1095%" height="15" fill="rgb(209,12,38)"/><text x="72.7048%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (3,368,148,712 samples, 14.96%)</title><rect x="72.5996%" y="165" width="14.9647%" height="15" fill="rgb(227,1,9)"/><text x="72.8496%" y="175.50">LLVM_module_codegen_emi..</text></g><g><title>LLVM_thin_lto_import (891,347,381 samples, 3.96%)</title><rect x="87.5643%" y="181" width="3.9603%" height="15" fill="rgb(248,47,43)"/><text x="87.8143%" y="191.50">LLVM..</text></g><g><title>codegen_module_perform_lto (9,034,977,829 samples, 40.14%)</title><rect x="51.4563%" y="197" width="40.1425%" height="15" fill="rgb(221,10,30)"/><text x="51.7063%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (304,566,662 samples, 1.35%)</title><rect x="91.6396%" y="181" width="1.3532%" height="15" fill="rgb(210,229,1)"/><text x="91.8896%" y="191.50"></text></g><g><title>expand_crate (304,548,082 samples, 1.35%)</title><rect x="91.6397%" y="165" width="1.3531%" height="15" fill="rgb(222,148,37)"/><text x="91.8897%" y="175.50"></text></g><g><title>late_resolve_crate (32,243,135 samples, 0.14%)</title><rect x="93.0066%" y="165" width="0.1433%" height="15" fill="rgb(234,67,33)"/><text x="93.2566%" y="175.50"></text></g><g><title>configure_and_expand (356,033,771 samples, 1.58%)</title><rect x="91.5988%" y="197" width="1.5819%" height="15" fill="rgb(247,98,35)"/><text x="91.8488%" y="207.50"></text></g><g><title>resolve_crate (42,080,645 samples, 0.19%)</title><rect x="92.9937%" y="181" width="0.1870%" height="15" fill="rgb(247,138,52)"/><text x="93.2437%" y="191.50"></text></g><g><title>free_global_ctxt (72,555,711 samples, 0.32%)</title><rect x="93.2608%" y="197" width="0.3224%" height="15" fill="rgb(213,79,30)"/><text x="93.5108%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (46,505,938 samples, 0.21%)</title><rect x="93.9924%" y="165" width="0.2066%" height="15" fill="rgb(246,177,23)"/><text x="94.2424%" y="175.50"></text></g><g><title>optimized_mir (97,355,354 samples, 0.43%)</title><rect x="93.7747%" y="181" width="0.4326%" height="15" fill="rgb(230,62,27)"/><text x="94.0247%" y="191.50"></text></g><g><title>generate_crate_metadata (143,757,827 samples, 0.64%)</title><rect x="93.5832%" y="197" width="0.6387%" height="15" fill="rgb(216,154,8)"/><text x="93.8332%" y="207.50"></text></g><g><title>hir_lowering (70,673,370 samples, 0.31%)</title><rect x="94.2219%" y="197" width="0.3140%" height="15" fill="rgb(244,35,45)"/><text x="94.4719%" y="207.50"></text></g><g><title>finish_ongoing_codegen (1,194,844,131 samples, 5.31%)</title><rect x="94.5369%" y="181" width="5.3087%" height="15" fill="rgb(251,115,12)"/><text x="94.7869%" y="191.50">finish..</text></g><g><title>link (1,211,442,184 samples, 5.38%)</title><rect x="94.5359%" y="197" width="5.3825%" height="15" fill="rgb(240,54,50)"/><text x="94.7859%" y="207.50">link</text></g><g><title>all (22,507,246,110 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,84,52)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (22,507,246,110 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,117,47)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>