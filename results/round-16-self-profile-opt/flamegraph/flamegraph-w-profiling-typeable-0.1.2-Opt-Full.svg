<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,436,420 samples, 13.65%)</title><rect x="1.6184%" y="229" width="13.6471%" height="15" fill="rgb(227,0,7)"/><text x="1.8684%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (125,651 samples, 0.32%)</title><rect x="14.9501%" y="213" width="0.3154%" height="15" fill="rgb(217,0,24)"/><text x="15.2001%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (108,401 samples, 0.27%)</title><rect x="14.9934%" y="197" width="0.2721%" height="15" fill="rgb(221,193,54)"/><text x="15.2434%" y="207.50"></text></g><g><title>mir_const (345,124 samples, 0.87%)</title><rect x="17.4066%" y="165" width="0.8664%" height="15" fill="rgb(248,212,6)"/><text x="17.6566%" y="175.50"></text></g><g><title>unsafety_check_result (202,053 samples, 0.51%)</title><rect x="17.7657%" y="149" width="0.5072%" height="15" fill="rgb(208,68,35)"/><text x="18.0157%" y="159.50"></text></g><g><title>mir_built (128,621 samples, 0.32%)</title><rect x="17.9501%" y="133" width="0.3229%" height="15" fill="rgb(232,128,0)"/><text x="18.2001%" y="143.50"></text></g><g><title>mir_promoted (459,445 samples, 1.15%)</title><rect x="17.1407%" y="181" width="1.1534%" height="15" fill="rgb(207,160,47)"/><text x="17.3907%" y="191.50"></text></g><g><title>MIR_borrow_checking (1,096,862 samples, 2.75%)</title><rect x="15.5953%" y="213" width="2.7535%" height="15" fill="rgb(228,23,34)"/><text x="15.8453%" y="223.50">MI..</text></g><g><title>mir_borrowck (1,092,472 samples, 2.74%)</title><rect x="15.6063%" y="197" width="2.7425%" height="15" fill="rgb(218,30,26)"/><text x="15.8563%" y="207.50">mi..</text></g><g><title>hir_module_items (115,511 samples, 0.29%)</title><rect x="18.3612%" y="213" width="0.2900%" height="15" fill="rgb(220,122,19)"/><text x="18.6112%" y="223.50"></text></g><g><title>get_lang_items (75,061 samples, 0.19%)</title><rect x="19.0876%" y="165" width="0.1884%" height="15" fill="rgb(250,228,42)"/><text x="19.3376%" y="175.50"></text></g><g><title>should_inherit_track_caller (47,431 samples, 0.12%)</title><rect x="19.2760%" y="165" width="0.1191%" height="15" fill="rgb(240,193,28)"/><text x="19.5260%" y="175.50"></text></g><g><title>codegen_fn_attrs (237,623 samples, 0.60%)</title><rect x="18.8879%" y="181" width="0.5965%" height="15" fill="rgb(216,20,37)"/><text x="19.1379%" y="191.50"></text></g><g><title>check_mod_attrs (305,544 samples, 0.77%)</title><rect x="18.7183%" y="197" width="0.7670%" height="15" fill="rgb(206,188,39)"/><text x="18.9683%" y="207.50"></text></g><g><title>lookup_deprecation_entry (53,871 samples, 0.14%)</title><rect x="19.6631%" y="181" width="0.1352%" height="15" fill="rgb(217,207,13)"/><text x="19.9131%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (123,111 samples, 0.31%)</title><rect x="19.5790%" y="197" width="0.3090%" height="15" fill="rgb(231,73,38)"/><text x="19.8290%" y="207.50"></text></g><g><title>misc_checking_1 (523,826 samples, 1.31%)</title><rect x="18.6529%" y="213" width="1.3150%" height="15" fill="rgb(225,20,46)"/><text x="18.9029%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (61,751 samples, 0.16%)</title><rect x="19.9736%" y="197" width="0.1550%" height="15" fill="rgb(210,31,41)"/><text x="20.2236%" y="207.50"></text></g><g><title>check_mod_liveness (49,571 samples, 0.12%)</title><rect x="20.0042%" y="181" width="0.1244%" height="15" fill="rgb(221,200,47)"/><text x="20.2542%" y="191.50"></text></g><g><title>misc_checking_2 (157,402 samples, 0.40%)</title><rect x="19.9679%" y="213" width="0.3951%" height="15" fill="rgb(226,26,5)"/><text x="20.2179%" y="223.50"></text></g><g><title>match_checking (93,351 samples, 0.23%)</title><rect x="20.1287%" y="197" width="0.2343%" height="15" fill="rgb(249,33,26)"/><text x="20.3787%" y="207.50"></text></g><g><title>check_match (90,141 samples, 0.23%)</title><rect x="20.1367%" y="181" width="0.2263%" height="15" fill="rgb(235,183,28)"/><text x="20.3867%" y="191.50"></text></g><g><title>death_checking (105,171 samples, 0.26%)</title><rect x="20.4915%" y="197" width="0.2640%" height="15" fill="rgb(221,5,38)"/><text x="20.7415%" y="207.50"></text></g><g><title>crate_lints (144,501 samples, 0.36%)</title><rect x="20.7619%" y="181" width="0.3627%" height="15" fill="rgb(247,18,42)"/><text x="21.0119%" y="191.50"></text></g><g><title>param_env (90,781 samples, 0.23%)</title><rect x="20.8968%" y="165" width="0.2279%" height="15" fill="rgb(241,131,45)"/><text x="21.1468%" y="175.50"></text></g><g><title>predicates_of (43,951 samples, 0.11%)</title><rect x="21.0143%" y="149" width="0.1103%" height="15" fill="rgb(249,31,29)"/><text x="21.2643%" y="159.50"></text></g><g><title>lint_checking (175,912 samples, 0.44%)</title><rect x="20.7555%" y="197" width="0.4416%" height="15" fill="rgb(225,111,53)"/><text x="21.0055%" y="207.50"></text></g><g><title>privacy_access_levels (66,541 samples, 0.17%)</title><rect x="21.1971%" y="197" width="0.1670%" height="15" fill="rgb(238,160,17)"/><text x="21.4471%" y="207.50"></text></g><g><title>misc_checking_3 (450,055 samples, 1.13%)</title><rect x="20.3630%" y="213" width="1.1298%" height="15" fill="rgb(214,148,48)"/><text x="20.6130%" y="223.50"></text></g><g><title>coherent_trait (83,361 samples, 0.21%)</title><rect x="21.6133%" y="181" width="0.2093%" height="15" fill="rgb(232,36,49)"/><text x="21.8633%" y="191.50"></text></g><g><title>specialization_graph_of (77,421 samples, 0.19%)</title><rect x="21.6282%" y="165" width="0.1944%" height="15" fill="rgb(209,103,24)"/><text x="21.8782%" y="175.50"></text></g><g><title>coherence_checking (140,431 samples, 0.35%)</title><rect x="21.5714%" y="197" width="0.3525%" height="15" fill="rgb(229,88,8)"/><text x="21.8214%" y="207.50"></text></g><g><title>impl_parent (169,550 samples, 0.43%)</title><rect x="23.7054%" y="53" width="0.4256%" height="15" fill="rgb(213,181,19)"/><text x="23.9554%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (120,290 samples, 0.30%)</title><rect x="23.8291%" y="37" width="0.3020%" height="15" fill="rgb(254,191,54)"/><text x="24.0791%" y="47.50"></text></g><g><title>impl_trait_ref (837,792 samples, 2.10%)</title><rect x="24.1311%" y="53" width="2.1031%" height="15" fill="rgb(241,83,37)"/><text x="24.3811%" y="63.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (789,102 samples, 1.98%)</title><rect x="24.2533%" y="37" width="1.9809%" height="15" fill="rgb(233,36,39)"/><text x="24.5033%" y="47.50">m..</text></g><g><title>adt_destructor (1,285,574 samples, 3.23%)</title><rect x="23.1632%" y="117" width="3.2272%" height="15" fill="rgb(226,3,54)"/><text x="23.4132%" y="127.50">adt..</text></g><g><title>metadata_decode_entry_adt_destructor (1,283,974 samples, 3.22%)</title><rect x="23.1672%" y="101" width="3.2232%" height="15" fill="rgb(245,192,40)"/><text x="23.4172%" y="111.50">met..</text></g><g><title>coherent_trait (1,279,104 samples, 3.21%)</title><rect x="23.1794%" y="85" width="3.2110%" height="15" fill="rgb(238,167,29)"/><text x="23.4294%" y="95.50">coh..</text></g><g><title>specialization_graph_of (1,275,734 samples, 3.20%)</title><rect x="23.1879%" y="69" width="3.2025%" height="15" fill="rgb(232,182,51)"/><text x="23.4379%" y="79.50">spe..</text></g><g><title>trait_impls_of (62,230 samples, 0.16%)</title><rect x="26.2342%" y="53" width="0.1562%" height="15" fill="rgb(231,60,39)"/><text x="26.4842%" y="63.50"></text></g><g><title>dropck_outlives (1,330,305 samples, 3.34%)</title><rect x="23.0584%" y="149" width="3.3395%" height="15" fill="rgb(208,69,12)"/><text x="23.3084%" y="159.50">dro..</text></g><g><title>adt_dtorck_constraint (1,297,604 samples, 3.26%)</title><rect x="23.1405%" y="133" width="3.2574%" height="15" fill="rgb(235,93,37)"/><text x="23.3905%" y="143.50">adt..</text></g><g><title>evaluate_obligation (60,500 samples, 0.15%)</title><rect x="26.3979%" y="149" width="0.1519%" height="15" fill="rgb(213,116,39)"/><text x="26.6479%" y="159.50"></text></g><g><title>adt_sized_constraint (45,100 samples, 0.11%)</title><rect x="26.4366%" y="133" width="0.1132%" height="15" fill="rgb(222,207,29)"/><text x="26.6866%" y="143.50"></text></g><g><title>trait_impls_of (39,861 samples, 0.10%)</title><rect x="26.7786%" y="149" width="0.1001%" height="15" fill="rgb(206,96,30)"/><text x="27.0286%" y="159.50"></text></g><g><title>item_bodies_checking (1,983,592 samples, 4.98%)</title><rect x="21.9445%" y="197" width="4.9794%" height="15" fill="rgb(218,138,4)"/><text x="22.1945%" y="207.50">item_b..</text></g><g><title>typeck_item_bodies (1,980,312 samples, 4.97%)</title><rect x="21.9528%" y="181" width="4.9712%" height="15" fill="rgb(250,191,14)"/><text x="22.2028%" y="191.50">typeck..</text></g><g><title>typeck (1,975,652 samples, 4.96%)</title><rect x="21.9645%" y="165" width="4.9595%" height="15" fill="rgb(239,60,40)"/><text x="22.2145%" y="175.50">typeck</text></g><g><title>fn_sig (49,040 samples, 0.12%)</title><rect x="27.2258%" y="165" width="0.1231%" height="15" fill="rgb(206,27,48)"/><text x="27.4758%" y="175.50"></text></g><g><title>generics_of (90,341 samples, 0.23%)</title><rect x="27.3489%" y="165" width="0.2268%" height="15" fill="rgb(225,35,8)"/><text x="27.5989%" y="175.50"></text></g><g><title>explicit_predicates_of (95,550 samples, 0.24%)</title><rect x="27.6198%" y="133" width="0.2399%" height="15" fill="rgb(250,213,24)"/><text x="27.8698%" y="143.50"></text></g><g><title>predicates_of (117,740 samples, 0.30%)</title><rect x="27.5842%" y="165" width="0.2956%" height="15" fill="rgb(247,123,22)"/><text x="27.8342%" y="175.50"></text></g><g><title>predicates_defined_on (111,920 samples, 0.28%)</title><rect x="27.5988%" y="149" width="0.2810%" height="15" fill="rgb(231,138,38)"/><text x="27.8488%" y="159.50"></text></g><g><title>super_predicates_of (173,932 samples, 0.44%)</title><rect x="27.8797%" y="165" width="0.4366%" height="15" fill="rgb(231,145,46)"/><text x="28.1297%" y="175.50"></text></g><g><title>super_predicates_that_define_assoc_type (160,071 samples, 0.40%)</title><rect x="27.9145%" y="149" width="0.4018%" height="15" fill="rgb(251,118,11)"/><text x="28.1645%" y="159.50"></text></g><g><title>type_collecting (533,676 samples, 1.34%)</title><rect x="27.0194%" y="197" width="1.3397%" height="15" fill="rgb(217,147,25)"/><text x="27.2694%" y="207.50"></text></g><g><title>collect_mod_item_types (522,806 samples, 1.31%)</title><rect x="27.0466%" y="181" width="1.3124%" height="15" fill="rgb(247,81,37)"/><text x="27.2966%" y="191.50"></text></g><g><title>param_env (252,362 samples, 0.63%)</title><rect x="29.6914%" y="165" width="0.6335%" height="15" fill="rgb(209,12,38)"/><text x="29.9414%" y="175.50"></text></g><g><title>predicates_of (59,030 samples, 0.15%)</title><rect x="30.3249%" y="165" width="0.1482%" height="15" fill="rgb(227,1,9)"/><text x="30.5749%" y="175.50"></text></g><g><title>predicates_defined_on (43,450 samples, 0.11%)</title><rect x="30.3640%" y="149" width="0.1091%" height="15" fill="rgb(248,47,43)"/><text x="30.6140%" y="159.50"></text></g><g><title>check_item_well_formed (857,380 samples, 2.15%)</title><rect x="28.4256%" y="181" width="2.1523%" height="15" fill="rgb(221,10,30)"/><text x="28.6756%" y="191.50">c..</text></g><g><title>evaluate_obligation (203,502 samples, 0.51%)</title><rect x="31.0708%" y="165" width="0.5109%" height="15" fill="rgb(210,229,1)"/><text x="31.3208%" y="175.50"></text></g><g><title>implied_outlives_bounds (73,911 samples, 0.19%)</title><rect x="31.5816%" y="165" width="0.1855%" height="15" fill="rgb(222,148,37)"/><text x="31.8316%" y="175.50"></text></g><g><title>analysis (6,623,913 samples, 16.63%)</title><rect x="15.2655%" y="229" width="16.6281%" height="15" fill="rgb(234,67,33)"/><text x="15.5155%" y="239.50">analysis</text></g><g><title>type_check_crate (4,143,245 samples, 10.40%)</title><rect x="21.4928%" y="213" width="10.4009%" height="15" fill="rgb(247,98,35)"/><text x="21.7428%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,407,366 samples, 3.53%)</title><rect x="28.3607%" y="197" width="3.5329%" height="15" fill="rgb(247,138,52)"/><text x="28.6107%" y="207.50">wf_..</text></g><g><title>check_trait_item_well_formed (524,156 samples, 1.32%)</title><rect x="30.5779%" y="181" width="1.3158%" height="15" fill="rgb(213,79,30)"/><text x="30.8279%" y="191.50"></text></g><g><title>codegen_module (373,445 samples, 0.94%)</title><rect x="33.5295%" y="213" width="0.9375%" height="15" fill="rgb(246,177,23)"/><text x="33.7795%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (80,601 samples, 0.20%)</title><rect x="34.4687%" y="213" width="0.2023%" height="15" fill="rgb(230,62,27)"/><text x="34.7187%" y="223.50"></text></g><g><title>native_libraries (46,760 samples, 0.12%)</title><rect x="34.8180%" y="213" width="0.1174%" height="15" fill="rgb(216,154,8)"/><text x="35.0680%" y="223.50"></text></g><g><title>codegen_crate (1,232,334 samples, 3.09%)</title><rect x="31.9161%" y="229" width="3.0936%" height="15" fill="rgb(244,35,45)"/><text x="32.1661%" y="239.50">cod..</text></g><g><title>codegen_module_optimize (626,957 samples, 1.57%)</title><rect x="35.0096%" y="229" width="1.5739%" height="15" fill="rgb(251,115,12)"/><text x="35.2596%" y="239.50"></text></g><g><title>LLVM_module_optimize (321,094 samples, 0.81%)</title><rect x="35.7774%" y="213" width="0.8060%" height="15" fill="rgb(240,54,50)"/><text x="36.0274%" y="223.50"></text></g><g><title>LLVM_lto_optimize (334,013 samples, 0.84%)</title><rect x="37.5678%" y="213" width="0.8385%" height="15" fill="rgb(233,84,52)"/><text x="37.8178%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,634,429 samples, 6.61%)</title><rect x="38.4062%" y="213" width="6.6133%" height="15" fill="rgb(207,117,47)"/><text x="38.6562%" y="223.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (2,591,998 samples, 6.51%)</title><rect x="38.5128%" y="197" width="6.5067%" height="15" fill="rgb(249,43,39)"/><text x="38.7628%" y="207.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (3,408,567 samples, 8.56%)</title><rect x="36.5835%" y="229" width="8.5566%" height="15" fill="rgb(209,38,44)"/><text x="36.8335%" y="239.50">codegen_modu..</text></g><g><title>AST_validation (78,820 samples, 0.20%)</title><rect x="45.6977%" y="213" width="0.1979%" height="15" fill="rgb(236,212,23)"/><text x="45.9477%" y="223.50"></text></g><g><title>crate_injection (99,421 samples, 0.25%)</title><rect x="45.9272%" y="213" width="0.2496%" height="15" fill="rgb(242,79,21)"/><text x="46.1772%" y="223.50"></text></g><g><title>metadata_load_macro (58,701 samples, 0.15%)</title><rect x="67.4948%" y="181" width="0.1474%" height="15" fill="rgb(211,96,35)"/><text x="67.7448%" y="191.50"></text></g><g><title>macro_expand_crate (11,147,904 samples, 27.98%)</title><rect x="46.1768%" y="213" width="27.9848%" height="15" fill="rgb(253,215,40)"/><text x="46.4268%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (11,124,023 samples, 27.92%)</title><rect x="46.2367%" y="197" width="27.9248%" height="15" fill="rgb(211,81,21)"/><text x="46.4867%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (2,597,068 samples, 6.52%)</title><rect x="67.6421%" y="181" width="6.5195%" height="15" fill="rgb(208,190,38)"/><text x="67.8921%" y="191.50">metadata_..</text></g><g><title>metadata_register_crate (946,489 samples, 2.38%)</title><rect x="71.7856%" y="165" width="2.3760%" height="15" fill="rgb(235,213,38)"/><text x="72.0356%" y="175.50">me..</text></g><g><title>metadata_register_crate (70,682 samples, 0.18%)</title><rect x="73.9841%" y="149" width="0.1774%" height="15" fill="rgb(237,122,38)"/><text x="74.2341%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (105,251 samples, 0.26%)</title><rect x="74.1720%" y="213" width="0.2642%" height="15" fill="rgb(244,218,35)"/><text x="74.4220%" y="223.50"></text></g><g><title>finalize_macro_resolutions (283,823 samples, 0.71%)</title><rect x="74.5109%" y="197" width="0.7125%" height="15" fill="rgb(240,68,47)"/><text x="74.7609%" y="207.50"></text></g><g><title>late_resolve_crate (344,544 samples, 0.86%)</title><rect x="75.2234%" y="197" width="0.8649%" height="15" fill="rgb(210,16,53)"/><text x="75.4734%" y="207.50"></text></g><g><title>configure_and_expand (12,364,666 samples, 31.04%)</title><rect x="45.1401%" y="229" width="31.0393%" height="15" fill="rgb(235,124,12)"/><text x="45.3901%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (694,367 samples, 1.74%)</title><rect x="74.4362%" y="213" width="1.7431%" height="15" fill="rgb(224,169,11)"/><text x="74.6862%" y="223.50"></text></g><g><title>early_lint_checks (77,421 samples, 0.19%)</title><rect x="76.3094%" y="229" width="0.1944%" height="15" fill="rgb(250,166,2)"/><text x="76.5594%" y="239.50"></text></g><g><title>free_global_ctxt (2,087,823 samples, 5.24%)</title><rect x="76.5037%" y="229" width="5.2411%" height="15" fill="rgb(242,216,29)"/><text x="76.7537%" y="239.50">free_g..</text></g><g><title>crate_hash (136,592 samples, 0.34%)</title><rect x="82.7006%" y="213" width="0.3429%" height="15" fill="rgb(230,116,27)"/><text x="82.9506%" y="223.50"></text></g><g><title>exported_symbols (50,411 samples, 0.13%)</title><rect x="83.1705%" y="213" width="0.1265%" height="15" fill="rgb(228,99,48)"/><text x="83.4205%" y="223.50"></text></g><g><title>layout_of (62,590 samples, 0.16%)</title><rect x="83.8807%" y="197" width="0.1571%" height="15" fill="rgb(253,11,6)"/><text x="84.1307%" y="207.50"></text></g><g><title>optimized_mir (419,355 samples, 1.05%)</title><rect x="83.4361%" y="213" width="1.0527%" height="15" fill="rgb(247,143,39)"/><text x="83.6861%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (179,632 samples, 0.45%)</title><rect x="84.0378%" y="197" width="0.4509%" height="15" fill="rgb(236,97,10)"/><text x="84.2878%" y="207.50"></text></g><g><title>generate_crate_metadata (1,135,673 samples, 2.85%)</title><rect x="81.7448%" y="229" width="2.8509%" height="15" fill="rgb(233,208,19)"/><text x="81.9948%" y="239.50">ge..</text></g><g><title>hir_lowering (367,004 samples, 0.92%)</title><rect x="84.5957%" y="229" width="0.9213%" height="15" fill="rgb(216,164,2)"/><text x="84.8457%" y="239.50"></text></g><g><title>finish_ongoing_codegen (2,870,712 samples, 7.21%)</title><rect x="85.5537%" y="213" width="7.2064%" height="15" fill="rgb(220,129,5)"/><text x="85.8037%" y="223.50">finish_ong..</text></g><g><title>link_crate (792,938 samples, 1.99%)</title><rect x="92.7601%" y="213" width="1.9905%" height="15" fill="rgb(242,17,10)"/><text x="93.0101%" y="223.50">l..</text></g><g><title>link_binary (774,308 samples, 1.94%)</title><rect x="92.8068%" y="197" width="1.9438%" height="15" fill="rgb(242,107,0)"/><text x="93.0568%" y="207.50">l..</text></g><g><title>link_rlib (461,225 samples, 1.16%)</title><rect x="93.5928%" y="181" width="1.1578%" height="15" fill="rgb(251,28,31)"/><text x="93.8428%" y="191.50"></text></g><g><title>link (3,687,470 samples, 9.26%)</title><rect x="85.5170%" y="229" width="9.2567%" height="15" fill="rgb(233,223,10)"/><text x="85.7670%" y="239.50">link</text></g><g><title>parse_crate (515,655 samples, 1.29%)</title><rect x="94.7738%" y="229" width="1.2945%" height="15" fill="rgb(215,21,27)"/><text x="95.0238%" y="239.50"></text></g><g><title>prepare_outputs (342,354 samples, 0.86%)</title><rect x="96.0942%" y="229" width="0.8594%" height="15" fill="rgb(232,23,21)"/><text x="96.3442%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (593,377 samples, 1.49%)</title><rect x="96.9536%" y="229" width="1.4896%" height="15" fill="rgb(244,5,23)"/><text x="97.2036%" y="239.50"></text></g><g><title>setup_global_ctxt (137,572 samples, 0.35%)</title><rect x="98.4475%" y="229" width="0.3453%" height="15" fill="rgb(226,81,46)"/><text x="98.6975%" y="239.50"></text></g><g><title>all (39,835,579 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (39,835,579 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (480,895 samples, 1.21%)</title><rect x="98.7928%" y="229" width="1.2072%" height="15" fill="rgb(240,187,13)"/><text x="99.0428%" y="239.50"></text></g></svg></svg>