<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,132,759 samples, 9.81%)</title><rect x="1.4097%" y="229" width="9.8122%" height="15" fill="rgb(227,0,7)"/><text x="1.6597%" y="239.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (114,711 samples, 0.18%)</title><rect x="11.0383%" y="213" width="0.1835%" height="15" fill="rgb(217,0,24)"/><text x="11.2883%" y="223.50"></text></g><g><title>LLVM_thin_lto_global_analysis (100,101 samples, 0.16%)</title><rect x="11.0617%" y="197" width="0.1602%" height="15" fill="rgb(221,193,54)"/><text x="11.3117%" y="207.50"></text></g><g><title>codegen_fn_attrs (67,230 samples, 0.11%)</title><rect x="14.5081%" y="133" width="0.1076%" height="15" fill="rgb(248,212,6)"/><text x="14.7581%" y="143.50"></text></g><g><title>adt_drop_tys (64,981 samples, 0.10%)</title><rect x="15.3417%" y="69" width="0.1040%" height="15" fill="rgb(208,68,35)"/><text x="15.5917%" y="79.50"></text></g><g><title>adt_drop_tys (127,703 samples, 0.20%)</title><rect x="15.3281%" y="85" width="0.2043%" height="15" fill="rgb(232,128,0)"/><text x="15.5781%" y="95.50"></text></g><g><title>adt_drop_tys (248,355 samples, 0.40%)</title><rect x="15.3016%" y="101" width="0.3974%" height="15" fill="rgb(207,160,47)"/><text x="15.5516%" y="111.50"></text></g><g><title>needs_drop_raw (701,799 samples, 1.12%)</title><rect x="15.2539%" y="117" width="1.1229%" height="15" fill="rgb(228,23,34)"/><text x="15.5039%" y="127.50"></text></g><g><title>is_copy_raw (423,633 samples, 0.68%)</title><rect x="15.6990%" y="101" width="0.6778%" height="15" fill="rgb(218,30,26)"/><text x="15.9490%" y="111.50"></text></g><g><title>evaluate_obligation (393,283 samples, 0.63%)</title><rect x="15.7475%" y="85" width="0.6292%" height="15" fill="rgb(220,122,19)"/><text x="15.9975%" y="95.50"></text></g><g><title>trait_impls_of (148,771 samples, 0.24%)</title><rect x="16.1388%" y="69" width="0.2380%" height="15" fill="rgb(250,228,42)"/><text x="16.3888%" y="79.50"></text></g><g><title>resolve_instance (103,593 samples, 0.17%)</title><rect x="16.3768%" y="117" width="0.1657%" height="15" fill="rgb(240,193,28)"/><text x="16.6268%" y="127.50"></text></g><g><title>thir_body (83,211 samples, 0.13%)</title><rect x="16.5493%" y="117" width="0.1331%" height="15" fill="rgb(216,20,37)"/><text x="16.7993%" y="127.50"></text></g><g><title>mir_const (1,656,968 samples, 2.65%)</title><rect x="14.0338%" y="165" width="2.6511%" height="15" fill="rgb(206,188,39)"/><text x="14.2838%" y="175.50">mi..</text></g><g><title>unsafety_check_result (1,436,556 samples, 2.30%)</title><rect x="14.3865%" y="149" width="2.2984%" height="15" fill="rgb(217,207,13)"/><text x="14.6365%" y="159.50">u..</text></g><g><title>mir_built (1,293,275 samples, 2.07%)</title><rect x="14.6157%" y="133" width="2.0692%" height="15" fill="rgb(231,73,38)"/><text x="14.8657%" y="143.50">m..</text></g><g><title>mir_promoted (1,856,941 samples, 2.97%)</title><rect x="13.7296%" y="181" width="2.9710%" height="15" fill="rgb(225,20,46)"/><text x="13.9796%" y="191.50">mir..</text></g><g><title>type_op_normalize_fn_sig (93,360 samples, 0.15%)</title><rect x="16.7117%" y="181" width="0.1494%" height="15" fill="rgb(210,31,41)"/><text x="16.9617%" y="191.50"></text></g><g><title>normalize_projection_ty (68,690 samples, 0.11%)</title><rect x="16.7512%" y="165" width="0.1099%" height="15" fill="rgb(221,200,47)"/><text x="17.0012%" y="175.50"></text></g><g><title>type_op_normalize_predicate (66,940 samples, 0.11%)</title><rect x="16.8611%" y="181" width="0.1071%" height="15" fill="rgb(226,26,5)"/><text x="17.1111%" y="191.50"></text></g><g><title>MIR_borrow_checking (3,642,302 samples, 5.83%)</title><rect x="11.5006%" y="213" width="5.8276%" height="15" fill="rgb(249,33,26)"/><text x="11.7506%" y="223.50">MIR_bor..</text></g><g><title>mir_borrowck (3,633,972 samples, 5.81%)</title><rect x="11.5139%" y="197" width="5.8142%" height="15" fill="rgb(235,183,28)"/><text x="11.7639%" y="207.50">mir_bor..</text></g><g><title>type_op_prove_predicate (225,013 samples, 0.36%)</title><rect x="16.9682%" y="181" width="0.3600%" height="15" fill="rgb(221,5,38)"/><text x="17.2182%" y="191.50"></text></g><g><title>hir_module_items (142,461 samples, 0.23%)</title><rect x="17.3343%" y="213" width="0.2279%" height="15" fill="rgb(247,18,42)"/><text x="17.5843%" y="223.50"></text></g><g><title>get_lang_items (81,601 samples, 0.13%)</title><rect x="17.8835%" y="165" width="0.1306%" height="15" fill="rgb(241,131,45)"/><text x="18.1335%" y="175.50"></text></g><g><title>codegen_fn_attrs (182,932 samples, 0.29%)</title><rect x="17.7908%" y="181" width="0.2927%" height="15" fill="rgb(249,31,29)"/><text x="18.0408%" y="191.50"></text></g><g><title>check_mod_attrs (290,882 samples, 0.47%)</title><rect x="17.6185%" y="197" width="0.4654%" height="15" fill="rgb(225,111,53)"/><text x="17.8685%" y="207.50"></text></g><g><title>lookup_deprecation_entry (100,320 samples, 0.16%)</title><rect x="18.4216%" y="181" width="0.1605%" height="15" fill="rgb(238,160,17)"/><text x="18.6716%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (316,313 samples, 0.51%)</title><rect x="18.2105%" y="197" width="0.5061%" height="15" fill="rgb(214,148,48)"/><text x="18.4605%" y="207.50"></text></g><g><title>misc_checking_1 (770,509 samples, 1.23%)</title><rect x="17.5631%" y="213" width="1.2328%" height="15" fill="rgb(232,36,49)"/><text x="17.8131%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (122,751 samples, 0.20%)</title><rect x="18.7979%" y="197" width="0.1964%" height="15" fill="rgb(209,103,24)"/><text x="19.0479%" y="207.50"></text></g><g><title>check_mod_liveness (97,871 samples, 0.16%)</title><rect x="18.8377%" y="181" width="0.1566%" height="15" fill="rgb(229,88,8)"/><text x="19.0877%" y="191.50"></text></g><g><title>misc_checking_2 (240,992 samples, 0.39%)</title><rect x="18.7959%" y="213" width="0.3856%" height="15" fill="rgb(213,181,19)"/><text x="19.0459%" y="223.50"></text></g><g><title>match_checking (116,961 samples, 0.19%)</title><rect x="18.9943%" y="197" width="0.1871%" height="15" fill="rgb(254,191,54)"/><text x="19.2443%" y="207.50"></text></g><g><title>check_match (113,341 samples, 0.18%)</title><rect x="19.0001%" y="181" width="0.1813%" height="15" fill="rgb(241,83,37)"/><text x="19.2501%" y="191.50"></text></g><g><title>death_checking (133,392 samples, 0.21%)</title><rect x="19.2383%" y="197" width="0.2134%" height="15" fill="rgb(233,36,39)"/><text x="19.4883%" y="207.50"></text></g><g><title>lint_levels (66,871 samples, 0.11%)</title><rect x="19.3448%" y="181" width="0.1070%" height="15" fill="rgb(226,3,54)"/><text x="19.5948%" y="191.50"></text></g><g><title>param_env (84,430 samples, 0.14%)</title><rect x="19.5420%" y="165" width="0.1351%" height="15" fill="rgb(245,192,40)"/><text x="19.7920%" y="175.50"></text></g><g><title>crate_lints (141,451 samples, 0.23%)</title><rect x="19.4540%" y="181" width="0.2263%" height="15" fill="rgb(238,167,29)"/><text x="19.7040%" y="191.50"></text></g><g><title>lint_checking (205,222 samples, 0.33%)</title><rect x="19.4518%" y="197" width="0.3283%" height="15" fill="rgb(232,182,51)"/><text x="19.7018%" y="207.50"></text></g><g><title>privacy_checking_modules (92,811 samples, 0.15%)</title><rect x="19.8408%" y="197" width="0.1485%" height="15" fill="rgb(231,60,39)"/><text x="20.0908%" y="207.50"></text></g><g><title>check_mod_privacy (91,351 samples, 0.15%)</title><rect x="19.8431%" y="181" width="0.1462%" height="15" fill="rgb(208,69,12)"/><text x="20.0931%" y="191.50"></text></g><g><title>misc_checking_3 (511,796 samples, 0.82%)</title><rect x="19.1815%" y="213" width="0.8189%" height="15" fill="rgb(235,93,37)"/><text x="19.4315%" y="223.50"></text></g><g><title>associated_items (63,741 samples, 0.10%)</title><rect x="24.0592%" y="149" width="0.1020%" height="15" fill="rgb(213,116,39)"/><text x="24.3092%" y="159.50"></text></g><g><title>impl_parent (122,412 samples, 0.20%)</title><rect x="24.7488%" y="53" width="0.1959%" height="15" fill="rgb(222,207,29)"/><text x="24.9988%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (84,002 samples, 0.13%)</title><rect x="24.8103%" y="37" width="0.1344%" height="15" fill="rgb(206,96,30)"/><text x="25.0603%" y="47.50"></text></g><g><title>impl_trait_ref (484,304 samples, 0.77%)</title><rect x="24.9447%" y="53" width="0.7749%" height="15" fill="rgb(218,138,4)"/><text x="25.1947%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (446,664 samples, 0.71%)</title><rect x="25.0049%" y="37" width="0.7146%" height="15" fill="rgb(250,191,14)"/><text x="25.2549%" y="47.50"></text></g><g><title>coherent_trait (809,419 samples, 1.30%)</title><rect x="24.4951%" y="85" width="1.2950%" height="15" fill="rgb(239,60,40)"/><text x="24.7451%" y="95.50"></text></g><g><title>specialization_graph_of (803,959 samples, 1.29%)</title><rect x="24.5038%" y="69" width="1.2863%" height="15" fill="rgb(206,27,48)"/><text x="24.7538%" y="79.50"></text></g><g><title>adt_destructor (835,539 samples, 1.34%)</title><rect x="24.4709%" y="117" width="1.3368%" height="15" fill="rgb(225,35,8)"/><text x="24.7209%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (832,129 samples, 1.33%)</title><rect x="24.4763%" y="101" width="1.3314%" height="15" fill="rgb(250,213,24)"/><text x="24.7263%" y="111.50"></text></g><g><title>adt_def (89,071 samples, 0.14%)</title><rect x="25.8350%" y="101" width="0.1425%" height="15" fill="rgb(247,123,22)"/><text x="26.0850%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (88,611 samples, 0.14%)</title><rect x="25.8357%" y="85" width="0.1418%" height="15" fill="rgb(231,138,38)"/><text x="26.0857%" y="95.50"></text></g><g><title>adt_def (91,822 samples, 0.15%)</title><rect x="26.0334%" y="85" width="0.1469%" height="15" fill="rgb(231,145,46)"/><text x="26.2834%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (89,642 samples, 0.14%)</title><rect x="26.0369%" y="69" width="0.1434%" height="15" fill="rgb(251,118,11)"/><text x="26.2869%" y="79.50"></text></g><g><title>adt_dtorck_constraint (94,241 samples, 0.15%)</title><rect x="26.3309%" y="69" width="0.1508%" height="15" fill="rgb(217,147,25)"/><text x="26.5809%" y="79.50"></text></g><g><title>adt_dtorck_constraint (168,101 samples, 0.27%)</title><rect x="26.2228%" y="85" width="0.2690%" height="15" fill="rgb(247,81,37)"/><text x="26.4728%" y="95.50"></text></g><g><title>adt_dtorck_constraint (353,004 samples, 0.56%)</title><rect x="25.9901%" y="101" width="0.5648%" height="15" fill="rgb(209,12,38)"/><text x="26.2401%" y="111.50"></text></g><g><title>adt_dtorck_constraint (484,335 samples, 0.77%)</title><rect x="25.8077%" y="117" width="0.7749%" height="15" fill="rgb(227,1,9)"/><text x="26.0577%" y="127.50"></text></g><g><title>dropck_outlives (1,525,027 samples, 2.44%)</title><rect x="24.1873%" y="149" width="2.4400%" height="15" fill="rgb(248,47,43)"/><text x="24.4373%" y="159.50">dr..</text></g><g><title>adt_dtorck_constraint (1,432,755 samples, 2.29%)</title><rect x="24.3350%" y="133" width="2.2924%" height="15" fill="rgb(221,10,30)"/><text x="24.5850%" y="143.50">a..</text></g><g><title>adt_def (122,711 samples, 0.20%)</title><rect x="27.2159%" y="117" width="0.1963%" height="15" fill="rgb(210,229,1)"/><text x="27.4659%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (119,751 samples, 0.19%)</title><rect x="27.2207%" y="101" width="0.1916%" height="15" fill="rgb(222,148,37)"/><text x="27.4707%" y="111.50"></text></g><g><title>item_attrs (67,210 samples, 0.11%)</title><rect x="27.3047%" y="85" width="0.1075%" height="15" fill="rgb(234,67,33)"/><text x="27.5547%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (64,150 samples, 0.10%)</title><rect x="27.3096%" y="69" width="0.1026%" height="15" fill="rgb(247,98,35)"/><text x="27.5596%" y="79.50"></text></g><g><title>adt_def (76,530 samples, 0.12%)</title><rect x="27.4610%" y="85" width="0.1224%" height="15" fill="rgb(247,138,52)"/><text x="27.7110%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (75,840 samples, 0.12%)</title><rect x="27.4621%" y="69" width="0.1213%" height="15" fill="rgb(213,79,30)"/><text x="27.7121%" y="79.50"></text></g><g><title>item_attrs (64,870 samples, 0.10%)</title><rect x="27.4797%" y="53" width="0.1038%" height="15" fill="rgb(246,177,23)"/><text x="27.7297%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (64,120 samples, 0.10%)</title><rect x="27.4809%" y="37" width="0.1026%" height="15" fill="rgb(230,62,27)"/><text x="27.7309%" y="47.50"></text></g><g><title>adt_def (65,340 samples, 0.10%)</title><rect x="27.5854%" y="69" width="0.1045%" height="15" fill="rgb(216,154,8)"/><text x="27.8354%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (65,110 samples, 0.10%)</title><rect x="27.5858%" y="53" width="0.1042%" height="15" fill="rgb(244,35,45)"/><text x="27.8358%" y="63.50"></text></g><g><title>adt_sized_constraint (67,090 samples, 0.11%)</title><rect x="27.5835%" y="85" width="0.1073%" height="15" fill="rgb(251,115,12)"/><text x="27.8335%" y="95.50"></text></g><g><title>adt_sized_constraint (153,610 samples, 0.25%)</title><rect x="27.4543%" y="101" width="0.2458%" height="15" fill="rgb(240,54,50)"/><text x="27.7043%" y="111.50"></text></g><g><title>adt_sized_constraint (183,461 samples, 0.29%)</title><rect x="27.4123%" y="117" width="0.2935%" height="15" fill="rgb(233,84,52)"/><text x="27.6623%" y="127.50"></text></g><g><title>adt_sized_constraint (330,842 samples, 0.53%)</title><rect x="27.1900%" y="133" width="0.5293%" height="15" fill="rgb(207,117,47)"/><text x="27.4400%" y="143.50"></text></g><g><title>explicit_predicates_of (73,753 samples, 0.12%)</title><rect x="27.8950%" y="101" width="0.1180%" height="15" fill="rgb(249,43,39)"/><text x="28.1450%" y="111.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (71,103 samples, 0.11%)</title><rect x="27.8992%" y="85" width="0.1138%" height="15" fill="rgb(209,38,44)"/><text x="28.1492%" y="95.50"></text></g><g><title>predicates_of (111,153 samples, 0.18%)</title><rect x="27.8513%" y="133" width="0.1778%" height="15" fill="rgb(236,212,23)"/><text x="28.1013%" y="143.50"></text></g><g><title>predicates_defined_on (91,733 samples, 0.15%)</title><rect x="27.8823%" y="117" width="0.1468%" height="15" fill="rgb(242,79,21)"/><text x="28.1323%" y="127.50"></text></g><g><title>evaluate_obligation (1,257,624 samples, 2.01%)</title><rect x="26.6273%" y="149" width="2.0122%" height="15" fill="rgb(211,96,35)"/><text x="26.8773%" y="159.50">e..</text></g><g><title>trait_impls_of (369,533 samples, 0.59%)</title><rect x="28.0483%" y="133" width="0.5912%" height="15" fill="rgb(253,215,40)"/><text x="28.2983%" y="143.50"></text></g><g><title>implementations_of_trait (123,071 samples, 0.20%)</title><rect x="28.4426%" y="117" width="0.1969%" height="15" fill="rgb(211,81,21)"/><text x="28.6926%" y="127.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (76,001 samples, 0.12%)</title><rect x="28.5179%" y="101" width="0.1216%" height="15" fill="rgb(208,190,38)"/><text x="28.7679%" y="111.50"></text></g><g><title>fn_sig (78,521 samples, 0.13%)</title><rect x="28.6518%" y="149" width="0.1256%" height="15" fill="rgb(235,213,38)"/><text x="28.9018%" y="159.50"></text></g><g><title>metadata_decode_entry_fn_sig (70,561 samples, 0.11%)</title><rect x="28.6646%" y="133" width="0.1129%" height="15" fill="rgb(237,122,38)"/><text x="28.9146%" y="143.50"></text></g><g><title>generics_of (65,991 samples, 0.11%)</title><rect x="28.7775%" y="149" width="0.1056%" height="15" fill="rgb(244,218,35)"/><text x="29.0275%" y="159.50"></text></g><g><title>item_attrs (99,931 samples, 0.16%)</title><rect x="29.0132%" y="149" width="0.1599%" height="15" fill="rgb(240,68,47)"/><text x="29.2632%" y="159.50"></text></g><g><title>metadata_decode_entry_item_attrs (95,411 samples, 0.15%)</title><rect x="29.0204%" y="133" width="0.1527%" height="15" fill="rgb(210,16,53)"/><text x="29.2704%" y="143.50"></text></g><g><title>method_autoderef_steps (72,671 samples, 0.12%)</title><rect x="29.1996%" y="149" width="0.1163%" height="15" fill="rgb(235,124,12)"/><text x="29.4496%" y="159.50"></text></g><g><title>predicates_of (181,242 samples, 0.29%)</title><rect x="29.3492%" y="149" width="0.2900%" height="15" fill="rgb(224,169,11)"/><text x="29.5992%" y="159.50"></text></g><g><title>predicates_defined_on (121,831 samples, 0.19%)</title><rect x="29.4443%" y="133" width="0.1949%" height="15" fill="rgb(250,166,2)"/><text x="29.6943%" y="143.50"></text></g><g><title>type_of (66,000 samples, 0.11%)</title><rect x="29.6913%" y="149" width="0.1056%" height="15" fill="rgb(242,216,29)"/><text x="29.9413%" y="159.50"></text></g><g><title>item_bodies_checking (6,106,479 samples, 9.77%)</title><rect x="20.0982%" y="197" width="9.7702%" height="15" fill="rgb(230,116,27)"/><text x="20.3482%" y="207.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (6,104,519 samples, 9.77%)</title><rect x="20.1013%" y="181" width="9.7670%" height="15" fill="rgb(228,99,48)"/><text x="20.3513%" y="191.50">typeck_item_bo..</text></g><g><title>typeck (6,096,249 samples, 9.75%)</title><rect x="20.1145%" y="165" width="9.7538%" height="15" fill="rgb(253,11,6)"/><text x="20.3645%" y="175.50">typeck</text></g><g><title>fn_sig (108,141 samples, 0.17%)</title><rect x="30.0177%" y="165" width="0.1730%" height="15" fill="rgb(247,143,39)"/><text x="30.2677%" y="175.50"></text></g><g><title>late_bound_vars_map (122,172 samples, 0.20%)</title><rect x="30.5898%" y="117" width="0.1955%" height="15" fill="rgb(236,97,10)"/><text x="30.8398%" y="127.50"></text></g><g><title>resolve_lifetimes (105,921 samples, 0.17%)</title><rect x="30.6158%" y="101" width="0.1695%" height="15" fill="rgb(233,208,19)"/><text x="30.8658%" y="111.50"></text></g><g><title>explicit_predicates_of (323,315 samples, 0.52%)</title><rect x="30.3250%" y="133" width="0.5173%" height="15" fill="rgb(216,164,2)"/><text x="30.5750%" y="143.50"></text></g><g><title>predicates_of (355,105 samples, 0.57%)</title><rect x="30.2884%" y="165" width="0.5682%" height="15" fill="rgb(220,129,5)"/><text x="30.5384%" y="175.50"></text></g><g><title>predicates_defined_on (347,815 samples, 0.56%)</title><rect x="30.3000%" y="149" width="0.5565%" height="15" fill="rgb(242,17,10)"/><text x="30.5500%" y="159.50"></text></g><g><title>type_collecting (637,917 samples, 1.02%)</title><rect x="29.8791%" y="197" width="1.0206%" height="15" fill="rgb(242,107,0)"/><text x="30.1291%" y="207.50"></text></g><g><title>collect_mod_item_types (616,157 samples, 0.99%)</title><rect x="29.9139%" y="181" width="0.9858%" height="15" fill="rgb(251,28,31)"/><text x="30.1639%" y="191.50"></text></g><g><title>adt_sized_constraint (101,621 samples, 0.16%)</title><rect x="31.9000%" y="133" width="0.1626%" height="15" fill="rgb(233,223,10)"/><text x="32.1500%" y="143.50"></text></g><g><title>evaluate_obligation (207,622 samples, 0.33%)</title><rect x="31.7494%" y="165" width="0.3322%" height="15" fill="rgb(215,21,27)"/><text x="31.9994%" y="175.50"></text></g><g><title>adt_sized_constraint (150,771 samples, 0.24%)</title><rect x="31.8403%" y="149" width="0.2412%" height="15" fill="rgb(232,23,21)"/><text x="32.0903%" y="159.50"></text></g><g><title>param_env (285,423 samples, 0.46%)</title><rect x="32.1759%" y="165" width="0.4567%" height="15" fill="rgb(244,5,23)"/><text x="32.4259%" y="175.50"></text></g><g><title>predicates_of (83,950 samples, 0.13%)</title><rect x="32.6325%" y="165" width="0.1343%" height="15" fill="rgb(226,81,46)"/><text x="32.8825%" y="175.50"></text></g><g><title>predicates_defined_on (66,420 samples, 0.11%)</title><rect x="32.6606%" y="149" width="0.1063%" height="15" fill="rgb(247,70,30)"/><text x="32.9106%" y="159.50"></text></g><g><title>analysis (13,580,004 samples, 21.73%)</title><rect x="11.2219%" y="229" width="21.7275%" height="15" fill="rgb(212,68,19)"/><text x="11.4719%" y="239.50">analysis</text></g><g><title>type_check_crate (8,093,352 samples, 12.95%)</title><rect x="20.0003%" y="213" width="12.9491%" height="15" fill="rgb(240,187,13)"/><text x="20.2503%" y="223.50">type_check_crate</text></g><g><title>wf_checking (1,280,454 samples, 2.05%)</title><rect x="30.9007%" y="197" width="2.0487%" height="15" fill="rgb(223,113,26)"/><text x="31.1507%" y="207.50">w..</text></g><g><title>check_item_well_formed (1,245,014 samples, 1.99%)</title><rect x="30.9574%" y="181" width="1.9920%" height="15" fill="rgb(206,192,2)"/><text x="31.2074%" y="191.50">c..</text></g><g><title>codegen_module (227,492 samples, 0.36%)</title><rect x="33.6873%" y="213" width="0.3640%" height="15" fill="rgb(241,108,4)"/><text x="33.9373%" y="223.50"></text></g><g><title>codegen_crate (807,520 samples, 1.29%)</title><rect x="32.9662%" y="229" width="1.2920%" height="15" fill="rgb(247,173,49)"/><text x="33.2162%" y="239.50"></text></g><g><title>codegen_module_optimize (2,343,646 samples, 3.75%)</title><rect x="34.2582%" y="229" width="3.7498%" height="15" fill="rgb(224,114,35)"/><text x="34.5082%" y="239.50">code..</text></g><g><title>LLVM_module_optimize (527,766 samples, 0.84%)</title><rect x="37.1636%" y="213" width="0.8444%" height="15" fill="rgb(245,159,27)"/><text x="37.4136%" y="223.50"></text></g><g><title>LLVM_lto_optimize (248,133 samples, 0.40%)</title><rect x="38.6669%" y="213" width="0.3970%" height="15" fill="rgb(245,172,44)"/><text x="38.9169%" y="223.50"></text></g><g><title>LLVM_module_codegen (2,694,341 samples, 4.31%)</title><rect x="39.0639%" y="213" width="4.3109%" height="15" fill="rgb(236,23,11)"/><text x="39.3139%" y="223.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,655,650 samples, 4.25%)</title><rect x="39.1258%" y="197" width="4.2489%" height="15" fill="rgb(205,117,38)"/><text x="39.3758%" y="207.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (3,389,669 samples, 5.42%)</title><rect x="38.0080%" y="229" width="5.4234%" height="15" fill="rgb(237,72,25)"/><text x="38.2580%" y="239.50">codegen..</text></g><g><title>AST_validation (124,621 samples, 0.20%)</title><rect x="43.7797%" y="213" width="0.1994%" height="15" fill="rgb(244,70,9)"/><text x="44.0297%" y="223.50"></text></g><g><title>crate_injection (93,661 samples, 0.15%)</title><rect x="44.0102%" y="213" width="0.1499%" height="15" fill="rgb(217,125,39)"/><text x="44.2602%" y="223.50"></text></g><g><title>metadata_register_crate (2,666,530 samples, 4.27%)</title><rect x="61.6140%" y="181" width="4.2664%" height="15" fill="rgb(235,36,10)"/><text x="61.8640%" y="191.50">metad..</text></g><g><title>metadata_register_crate (993,912 samples, 1.59%)</title><rect x="64.2901%" y="165" width="1.5902%" height="15" fill="rgb(251,123,47)"/><text x="64.5401%" y="175.50"></text></g><g><title>metadata_register_crate (78,930 samples, 0.13%)</title><rect x="65.7540%" y="149" width="0.1263%" height="15" fill="rgb(221,13,13)"/><text x="66.0040%" y="159.50"></text></g><g><title>macro_expand_crate (13,667,386 samples, 21.87%)</title><rect x="44.1600%" y="213" width="21.8673%" height="15" fill="rgb(238,131,9)"/><text x="44.4100%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (13,642,674 samples, 21.83%)</title><rect x="44.1996%" y="197" width="21.8278%" height="15" fill="rgb(211,50,8)"/><text x="44.4496%" y="207.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (91,912 samples, 0.15%)</title><rect x="65.8803%" y="181" width="0.1471%" height="15" fill="rgb(245,182,24)"/><text x="66.1303%" y="191.50"></text></g><g><title>pre_AST_expansion_lint_checks (115,451 samples, 0.18%)</title><rect x="66.0356%" y="213" width="0.1847%" height="15" fill="rgb(242,14,37)"/><text x="66.2856%" y="223.50"></text></g><g><title>finalize_imports (366,514 samples, 0.59%)</title><rect x="66.2390%" y="197" width="0.5864%" height="15" fill="rgb(246,228,12)"/><text x="66.4890%" y="207.50"></text></g><g><title>late_resolve_crate (9,145,353 samples, 14.63%)</title><rect x="66.8504%" y="197" width="14.6322%" height="15" fill="rgb(213,55,15)"/><text x="67.1004%" y="207.50">late_resolve_crate</text></g><g><title>configure_and_expand (23,838,520 samples, 38.14%)</title><rect x="43.4313%" y="229" width="38.1408%" height="15" fill="rgb(209,9,3)"/><text x="43.6813%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (9,595,109 samples, 15.35%)</title><rect x="66.2203%" y="213" width="15.3518%" height="15" fill="rgb(230,59,30)"/><text x="66.4703%" y="223.50">resolve_crate</text></g><g><title>early_lint_checks (160,072 samples, 0.26%)</title><rect x="81.6852%" y="229" width="0.2561%" height="15" fill="rgb(209,121,21)"/><text x="81.9352%" y="239.50"></text></g><g><title>free_global_ctxt (1,936,022 samples, 3.10%)</title><rect x="81.9413%" y="229" width="3.0976%" height="15" fill="rgb(220,109,13)"/><text x="82.1913%" y="239.50">fre..</text></g><g><title>crate_hash (69,331 samples, 0.11%)</title><rect x="85.5436%" y="213" width="0.1109%" height="15" fill="rgb(232,18,1)"/><text x="85.7936%" y="223.50"></text></g><g><title>layout_of (66,872 samples, 0.11%)</title><rect x="87.0699%" y="117" width="0.1070%" height="15" fill="rgb(215,41,42)"/><text x="87.3199%" y="127.50"></text></g><g><title>layout_of (257,263 samples, 0.41%)</title><rect x="86.8352%" y="181" width="0.4116%" height="15" fill="rgb(224,123,36)"/><text x="87.0852%" y="191.50"></text></g><g><title>layout_of (238,073 samples, 0.38%)</title><rect x="86.8659%" y="165" width="0.3809%" height="15" fill="rgb(240,125,3)"/><text x="87.1159%" y="175.50"></text></g><g><title>layout_of (219,623 samples, 0.35%)</title><rect x="86.8954%" y="149" width="0.3514%" height="15" fill="rgb(205,98,50)"/><text x="87.1454%" y="159.50"></text></g><g><title>layout_of (158,862 samples, 0.25%)</title><rect x="86.9926%" y="133" width="0.2542%" height="15" fill="rgb(205,185,37)"/><text x="87.2426%" y="143.50"></text></g><g><title>layout_of (355,964 samples, 0.57%)</title><rect x="86.6819%" y="197" width="0.5695%" height="15" fill="rgb(238,207,15)"/><text x="86.9319%" y="207.50"></text></g><g><title>needs_drop_raw (166,721 samples, 0.27%)</title><rect x="88.5783%" y="181" width="0.2667%" height="15" fill="rgb(213,199,42)"/><text x="88.8283%" y="191.50"></text></g><g><title>is_copy_raw (150,861 samples, 0.24%)</title><rect x="88.6037%" y="165" width="0.2414%" height="15" fill="rgb(235,201,11)"/><text x="88.8537%" y="175.50"></text></g><g><title>evaluate_obligation (132,570 samples, 0.21%)</title><rect x="88.6329%" y="149" width="0.2121%" height="15" fill="rgb(207,46,11)"/><text x="88.8829%" y="159.50"></text></g><g><title>optimized_mir (1,888,792 samples, 3.02%)</title><rect x="85.8251%" y="213" width="3.0220%" height="15" fill="rgb(241,35,35)"/><text x="86.0751%" y="223.50">opt..</text></g><g><title>mir_drops_elaborated_and_const_checked (997,332 samples, 1.60%)</title><rect x="87.2514%" y="197" width="1.5957%" height="15" fill="rgb(243,32,47)"/><text x="87.5014%" y="207.50"></text></g><g><title>generate_crate_metadata (2,455,338 samples, 3.93%)</title><rect x="85.0388%" y="229" width="3.9285%" height="15" fill="rgb(247,202,23)"/><text x="85.2888%" y="239.50">gene..</text></g><g><title>hir_lowering (810,100 samples, 1.30%)</title><rect x="88.9673%" y="229" width="1.2961%" height="15" fill="rgb(219,102,11)"/><text x="89.2173%" y="239.50"></text></g><g><title>finish_ongoing_codegen (3,860,373 samples, 6.18%)</title><rect x="90.2921%" y="213" width="6.1765%" height="15" fill="rgb(243,110,44)"/><text x="90.5421%" y="223.50">finish_o..</text></g><g><title>link_crate (550,266 samples, 0.88%)</title><rect x="96.4686%" y="213" width="0.8804%" height="15" fill="rgb(222,74,54)"/><text x="96.7186%" y="223.50"></text></g><g><title>link_binary (537,766 samples, 0.86%)</title><rect x="96.4886%" y="197" width="0.8604%" height="15" fill="rgb(216,99,12)"/><text x="96.7386%" y="207.50"></text></g><g><title>link_rlib (345,404 samples, 0.55%)</title><rect x="96.7963%" y="181" width="0.5526%" height="15" fill="rgb(226,22,26)"/><text x="97.0463%" y="191.50"></text></g><g><title>link (4,435,290 samples, 7.10%)</title><rect x="90.2634%" y="229" width="7.0963%" height="15" fill="rgb(217,163,10)"/><text x="90.5134%" y="239.50">link</text></g><g><title>parse_crate (476,405 samples, 0.76%)</title><rect x="97.3597%" y="229" width="0.7622%" height="15" fill="rgb(213,25,53)"/><text x="97.6097%" y="239.50"></text></g><g><title>prepare_outputs (367,294 samples, 0.59%)</title><rect x="98.1361%" y="229" width="0.5877%" height="15" fill="rgb(252,105,26)"/><text x="98.3861%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (358,414 samples, 0.57%)</title><rect x="98.7238%" y="229" width="0.5734%" height="15" fill="rgb(220,39,43)"/><text x="98.9738%" y="239.50"></text></g><g><title>setup_global_ctxt (151,492 samples, 0.24%)</title><rect x="99.3064%" y="229" width="0.2424%" height="15" fill="rgb(229,68,48)"/><text x="99.5564%" y="239.50"></text></g><g><title>all (62,501,368 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(252,8,32)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (62,501,368 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,20,43)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (282,023 samples, 0.45%)</title><rect x="99.5488%" y="229" width="0.4512%" height="15" fill="rgb(229,81,49)"/><text x="99.7988%" y="239.50"></text></g></svg></svg>