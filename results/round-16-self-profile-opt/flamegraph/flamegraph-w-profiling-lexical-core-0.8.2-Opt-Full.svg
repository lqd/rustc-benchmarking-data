<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,938,165 samples, 3.34%)</title><rect x="0.9340%" y="229" width="3.3433%" height="15" fill="rgb(227,0,7)"/><text x="1.1840%" y="239.50">LLV..</text></g><g><title>codegen_generate_lto_work (162,402 samples, 0.11%)</title><rect x="4.1674%" y="213" width="0.1100%" height="15" fill="rgb(217,0,24)"/><text x="4.4174%" y="223.50"></text></g><g><title>mir_promoted (1,628,298 samples, 1.10%)</title><rect x="14.1868%" y="165" width="1.1024%" height="15" fill="rgb(221,193,54)"/><text x="14.4368%" y="175.50"></text></g><g><title>mir_const_qualif_const_arg (1,390,325 samples, 0.94%)</title><rect x="14.3479%" y="149" width="0.9413%" height="15" fill="rgb(248,212,6)"/><text x="14.5979%" y="159.50"></text></g><g><title>mir_const (1,165,703 samples, 0.79%)</title><rect x="14.5000%" y="133" width="0.7892%" height="15" fill="rgb(208,68,35)"/><text x="14.7500%" y="143.50"></text></g><g><title>unsafety_check_result_for_const_arg (786,260 samples, 0.53%)</title><rect x="14.7569%" y="117" width="0.5323%" height="15" fill="rgb(232,128,0)"/><text x="15.0069%" y="127.50"></text></g><g><title>mir_built (677,250 samples, 0.46%)</title><rect x="14.8307%" y="101" width="0.4585%" height="15" fill="rgb(207,160,47)"/><text x="15.0807%" y="111.50"></text></g><g><title>mir_borrowck_const_arg (3,898,353 samples, 2.64%)</title><rect x="12.6584%" y="181" width="2.6394%" height="15" fill="rgb(228,23,34)"/><text x="12.9084%" y="191.50">mi..</text></g><g><title>codegen_fulfill_obligation (412,614 samples, 0.28%)</title><rect x="19.2281%" y="101" width="0.2794%" height="15" fill="rgb(218,30,26)"/><text x="19.4781%" y="111.50"></text></g><g><title>impl_item_implementor_ids (201,342 samples, 0.14%)</title><rect x="19.5350%" y="101" width="0.1363%" height="15" fill="rgb(220,122,19)"/><text x="19.7850%" y="111.50"></text></g><g><title>associated_items (168,862 samples, 0.11%)</title><rect x="19.5570%" y="85" width="0.1143%" height="15" fill="rgb(250,228,42)"/><text x="19.8070%" y="95.50"></text></g><g><title>resolve_instance (1,448,834 samples, 0.98%)</title><rect x="18.8182%" y="117" width="0.9809%" height="15" fill="rgb(240,193,28)"/><text x="19.0682%" y="127.50"></text></g><g><title>thir_body (715,153 samples, 0.48%)</title><rect x="19.8290%" y="117" width="0.4842%" height="15" fill="rgb(216,20,37)"/><text x="20.0790%" y="127.50"></text></g><g><title>mir_const (6,591,485 samples, 4.46%)</title><rect x="15.8682%" y="165" width="4.4627%" height="15" fill="rgb(206,188,39)"/><text x="16.1182%" y="175.50">mir_c..</text></g><g><title>unsafety_check_result (5,632,004 samples, 3.81%)</title><rect x="16.5178%" y="149" width="3.8131%" height="15" fill="rgb(217,207,13)"/><text x="16.7678%" y="159.50">unsa..</text></g><g><title>mir_built (5,009,934 samples, 3.39%)</title><rect x="16.9390%" y="133" width="3.3919%" height="15" fill="rgb(231,73,38)"/><text x="17.1890%" y="143.50">mir..</text></g><g><title>mir_promoted (7,508,345 samples, 5.08%)</title><rect x="15.2978%" y="181" width="5.0835%" height="15" fill="rgb(225,20,46)"/><text x="15.5478%" y="191.50">mir_pr..</text></g><g><title>type_op_normalize_fn_sig (606,278 samples, 0.41%)</title><rect x="20.4162%" y="181" width="0.4105%" height="15" fill="rgb(210,31,41)"/><text x="20.6662%" y="191.50"></text></g><g><title>normalize_projection_ty (165,902 samples, 0.11%)</title><rect x="20.7144%" y="165" width="0.1123%" height="15" fill="rgb(221,200,47)"/><text x="20.9644%" y="175.50"></text></g><g><title>type_op_normalize_ty (523,725 samples, 0.35%)</title><rect x="20.8267%" y="181" width="0.3546%" height="15" fill="rgb(226,26,5)"/><text x="21.0767%" y="191.50"></text></g><g><title>normalize_projection_ty (294,032 samples, 0.20%)</title><rect x="20.9822%" y="165" width="0.1991%" height="15" fill="rgb(249,33,26)"/><text x="21.2322%" y="175.50"></text></g><g><title>MIR_borrow_checking (25,474,597 samples, 17.25%)</title><rect x="4.4892%" y="213" width="17.2474%" height="15" fill="rgb(235,183,28)"/><text x="4.7392%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,196,462 samples, 17.06%)</title><rect x="4.6776%" y="197" width="17.0591%" height="15" fill="rgb(221,5,38)"/><text x="4.9276%" y="207.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (820,244 samples, 0.56%)</title><rect x="21.1813%" y="181" width="0.5553%" height="15" fill="rgb(247,18,42)"/><text x="21.4313%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (666,339 samples, 0.45%)</title><rect x="22.0142%" y="197" width="0.4511%" height="15" fill="rgb(241,131,45)"/><text x="22.2642%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (621,478 samples, 0.42%)</title><rect x="22.0446%" y="181" width="0.4208%" height="15" fill="rgb(249,31,29)"/><text x="22.2946%" y="191.50"></text></g><g><title>MIR_effect_checking (1,090,982 samples, 0.74%)</title><rect x="21.7366%" y="213" width="0.7386%" height="15" fill="rgb(225,111,53)"/><text x="21.9866%" y="223.50"></text></g><g><title>hir_module_items (230,902 samples, 0.16%)</title><rect x="22.4753%" y="213" width="0.1563%" height="15" fill="rgb(238,160,17)"/><text x="22.7253%" y="223.50"></text></g><g><title>should_inherit_track_caller (180,721 samples, 0.12%)</title><rect x="22.9682%" y="165" width="0.1224%" height="15" fill="rgb(214,148,48)"/><text x="23.2182%" y="175.50"></text></g><g><title>codegen_fn_attrs (419,194 samples, 0.28%)</title><rect x="22.8178%" y="181" width="0.2838%" height="15" fill="rgb(232,36,49)"/><text x="23.0678%" y="191.50"></text></g><g><title>check_mod_attrs (676,177 samples, 0.46%)</title><rect x="22.6439%" y="197" width="0.4578%" height="15" fill="rgb(209,103,24)"/><text x="22.8939%" y="207.50"></text></g><g><title>check_mod_const_bodies (158,492 samples, 0.11%)</title><rect x="23.1017%" y="197" width="0.1073%" height="15" fill="rgb(229,88,8)"/><text x="23.3517%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (244,222 samples, 0.17%)</title><rect x="23.2542%" y="197" width="0.1653%" height="15" fill="rgb(213,181,19)"/><text x="23.5042%" y="207.50"></text></g><g><title>misc_checking_1 (1,218,904 samples, 0.83%)</title><rect x="22.6320%" y="213" width="0.8252%" height="15" fill="rgb(254,191,54)"/><text x="22.8820%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (384,134 samples, 0.26%)</title><rect x="23.4582%" y="197" width="0.2601%" height="15" fill="rgb(241,83,37)"/><text x="23.7082%" y="207.50"></text></g><g><title>check_mod_liveness (308,833 samples, 0.21%)</title><rect x="23.5092%" y="181" width="0.2091%" height="15" fill="rgb(233,36,39)"/><text x="23.7592%" y="191.50"></text></g><g><title>misc_checking_2 (857,099 samples, 0.58%)</title><rect x="23.4572%" y="213" width="0.5803%" height="15" fill="rgb(226,3,54)"/><text x="23.7072%" y="223.50"></text></g><g><title>match_checking (471,525 samples, 0.32%)</title><rect x="23.7183%" y="197" width="0.3192%" height="15" fill="rgb(245,192,40)"/><text x="23.9683%" y="207.50"></text></g><g><title>check_match (408,944 samples, 0.28%)</title><rect x="23.7606%" y="181" width="0.2769%" height="15" fill="rgb(238,167,29)"/><text x="24.0106%" y="191.50"></text></g><g><title>check_private_in_public (258,973 samples, 0.18%)</title><rect x="24.0444%" y="197" width="0.1753%" height="15" fill="rgb(232,182,51)"/><text x="24.2944%" y="207.50"></text></g><g><title>death_checking (350,884 samples, 0.24%)</title><rect x="24.2198%" y="197" width="0.2376%" height="15" fill="rgb(231,60,39)"/><text x="24.4698%" y="207.50"></text></g><g><title>crate_lints (982,311 samples, 0.67%)</title><rect x="24.4583%" y="181" width="0.6651%" height="15" fill="rgb(208,69,12)"/><text x="24.7083%" y="191.50"></text></g><g><title>param_env (284,763 samples, 0.19%)</title><rect x="24.9306%" y="165" width="0.1928%" height="15" fill="rgb(235,93,37)"/><text x="25.1806%" y="175.50"></text></g><g><title>lint_checking (1,271,305 samples, 0.86%)</title><rect x="24.4573%" y="197" width="0.8607%" height="15" fill="rgb(213,116,39)"/><text x="24.7073%" y="207.50"></text></g><g><title>module_lints (287,584 samples, 0.19%)</title><rect x="25.1234%" y="181" width="0.1947%" height="15" fill="rgb(222,207,29)"/><text x="25.3734%" y="191.50"></text></g><g><title>lint_mod (285,744 samples, 0.19%)</title><rect x="25.1246%" y="165" width="0.1935%" height="15" fill="rgb(206,96,30)"/><text x="25.3746%" y="175.50"></text></g><g><title>privacy_access_levels (364,224 samples, 0.25%)</title><rect x="25.3181%" y="197" width="0.2466%" height="15" fill="rgb(218,138,4)"/><text x="25.5681%" y="207.50"></text></g><g><title>privacy_checking_modules (2,060,463 samples, 1.40%)</title><rect x="25.5647%" y="197" width="1.3950%" height="15" fill="rgb(250,191,14)"/><text x="25.8147%" y="207.50"></text></g><g><title>check_mod_privacy (2,058,883 samples, 1.39%)</title><rect x="25.5657%" y="181" width="1.3940%" height="15" fill="rgb(239,60,40)"/><text x="25.8157%" y="191.50"></text></g><g><title>misc_checking_3 (4,340,339 samples, 2.94%)</title><rect x="24.0375%" y="213" width="2.9386%" height="15" fill="rgb(206,27,48)"/><text x="24.2875%" y="223.50">mi..</text></g><g><title>coherence_checking (159,122 samples, 0.11%)</title><rect x="27.0356%" y="197" width="0.1077%" height="15" fill="rgb(225,35,8)"/><text x="27.2856%" y="207.50"></text></g><g><title>impl_trait_ref (299,433 samples, 0.20%)</title><rect x="32.2519%" y="53" width="0.2027%" height="15" fill="rgb(250,213,24)"/><text x="32.5019%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (280,522 samples, 0.19%)</title><rect x="32.2647%" y="37" width="0.1899%" height="15" fill="rgb(247,123,22)"/><text x="32.5147%" y="47.50"></text></g><g><title>coherent_trait (503,606 samples, 0.34%)</title><rect x="32.1339%" y="85" width="0.3410%" height="15" fill="rgb(231,138,38)"/><text x="32.3839%" y="95.50"></text></g><g><title>specialization_graph_of (500,636 samples, 0.34%)</title><rect x="32.1359%" y="69" width="0.3390%" height="15" fill="rgb(231,145,46)"/><text x="32.3859%" y="79.50"></text></g><g><title>adt_destructor (511,256 samples, 0.35%)</title><rect x="32.1305%" y="117" width="0.3461%" height="15" fill="rgb(251,118,11)"/><text x="32.3805%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (510,356 samples, 0.35%)</title><rect x="32.1311%" y="101" width="0.3455%" height="15" fill="rgb(217,147,25)"/><text x="32.3811%" y="111.50"></text></g><g><title>dropck_outlives (681,509 samples, 0.46%)</title><rect x="32.0167%" y="149" width="0.4614%" height="15" fill="rgb(247,81,37)"/><text x="32.2667%" y="159.50"></text></g><g><title>adt_dtorck_constraint (524,056 samples, 0.35%)</title><rect x="32.1233%" y="133" width="0.3548%" height="15" fill="rgb(209,12,38)"/><text x="32.3733%" y="143.50"></text></g><g><title>evaluate_obligation (684,519 samples, 0.46%)</title><rect x="32.4781%" y="149" width="0.4634%" height="15" fill="rgb(227,1,9)"/><text x="32.7281%" y="159.50"></text></g><g><title>impl_item_implementor_ids (215,623 samples, 0.15%)</title><rect x="39.5384%" y="117" width="0.1460%" height="15" fill="rgb(248,47,43)"/><text x="39.7884%" y="127.50"></text></g><g><title>associated_items (184,062 samples, 0.12%)</title><rect x="39.5598%" y="101" width="0.1246%" height="15" fill="rgb(221,10,30)"/><text x="39.8098%" y="111.50"></text></g><g><title>predicates_of (156,351 samples, 0.11%)</title><rect x="39.8058%" y="117" width="0.1059%" height="15" fill="rgb(210,229,1)"/><text x="40.0558%" y="127.50"></text></g><g><title>opt_const_param_of (10,249,277 samples, 6.94%)</title><rect x="33.0655%" y="149" width="6.9392%" height="15" fill="rgb(222,148,37)"/><text x="33.3155%" y="159.50">opt_const..</text></g><g><title>typeck (10,111,734 samples, 6.85%)</title><rect x="33.1587%" y="133" width="6.8461%" height="15" fill="rgb(234,67,33)"/><text x="33.4087%" y="143.50">typeck</text></g><g><title>explicit_predicates_of (178,891 samples, 0.12%)</title><rect x="41.3213%" y="85" width="0.1211%" height="15" fill="rgb(247,98,35)"/><text x="41.5713%" y="95.50"></text></g><g><title>param_env (645,924 samples, 0.44%)</title><rect x="41.0159%" y="133" width="0.4373%" height="15" fill="rgb(247,138,52)"/><text x="41.2659%" y="143.50"></text></g><g><title>predicates_of (301,711 samples, 0.20%)</title><rect x="41.2490%" y="117" width="0.2043%" height="15" fill="rgb(213,79,30)"/><text x="41.4990%" y="127.50"></text></g><g><title>predicates_defined_on (261,011 samples, 0.18%)</title><rect x="41.2765%" y="101" width="0.1767%" height="15" fill="rgb(246,177,23)"/><text x="41.5265%" y="111.50"></text></g><g><title>typeck_const_arg (2,297,274 samples, 1.56%)</title><rect x="40.0698%" y="149" width="1.5554%" height="15" fill="rgb(230,62,27)"/><text x="40.3198%" y="159.50"></text></g><g><title>item_bodies_checking (21,371,811 samples, 14.47%)</title><rect x="27.1740%" y="197" width="14.4696%" height="15" fill="rgb(216,154,8)"/><text x="27.4240%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (21,368,451 samples, 14.47%)</title><rect x="27.1762%" y="181" width="14.4673%" height="15" fill="rgb(244,35,45)"/><text x="27.4262%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (21,212,619 samples, 14.36%)</title><rect x="27.2818%" y="165" width="14.3618%" height="15" fill="rgb(251,115,12)"/><text x="27.5318%" y="175.50">typeck</text></g><g><title>evaluate_obligation (218,652 samples, 0.15%)</title><rect x="43.4694%" y="165" width="0.1480%" height="15" fill="rgb(240,54,50)"/><text x="43.7194%" y="175.50"></text></g><g><title>item_types_checking (2,978,663 samples, 2.02%)</title><rect x="41.6436%" y="197" width="2.0167%" height="15" fill="rgb(233,84,52)"/><text x="41.8936%" y="207.50">i..</text></g><g><title>check_mod_item_types (2,976,363 samples, 2.02%)</title><rect x="41.6452%" y="181" width="2.0151%" height="15" fill="rgb(207,117,47)"/><text x="41.8952%" y="191.50">c..</text></g><g><title>super_predicates_that_define_assoc_type (163,243 samples, 0.11%)</title><rect x="44.9021%" y="149" width="0.1105%" height="15" fill="rgb(249,43,39)"/><text x="45.1521%" y="159.50"></text></g><g><title>fn_sig (1,664,519 samples, 1.13%)</title><rect x="43.9429%" y="165" width="1.1269%" height="15" fill="rgb(209,38,44)"/><text x="44.1929%" y="175.50"></text></g><g><title>is_late_bound_map (417,645 samples, 0.28%)</title><rect x="45.2227%" y="149" width="0.2828%" height="15" fill="rgb(236,212,23)"/><text x="45.4727%" y="159.50"></text></g><g><title>resolve_lifetimes (384,444 samples, 0.26%)</title><rect x="45.2452%" y="133" width="0.2603%" height="15" fill="rgb(242,79,21)"/><text x="45.4952%" y="143.50"></text></g><g><title>named_region_map (366,559 samples, 0.25%)</title><rect x="45.5055%" y="149" width="0.2482%" height="15" fill="rgb(211,96,35)"/><text x="45.7555%" y="159.50"></text></g><g><title>resolve_lifetimes (334,728 samples, 0.23%)</title><rect x="45.5270%" y="133" width="0.2266%" height="15" fill="rgb(253,215,40)"/><text x="45.7770%" y="143.50"></text></g><g><title>generics_of (1,037,966 samples, 0.70%)</title><rect x="45.0698%" y="165" width="0.7027%" height="15" fill="rgb(211,81,21)"/><text x="45.3198%" y="175.50"></text></g><g><title>explicit_predicates_of (167,992 samples, 0.11%)</title><rect x="46.0003%" y="133" width="0.1137%" height="15" fill="rgb(208,190,38)"/><text x="46.2503%" y="143.50"></text></g><g><title>predicates_of (400,573 samples, 0.27%)</title><rect x="45.8592%" y="165" width="0.2712%" height="15" fill="rgb(235,213,38)"/><text x="46.1092%" y="175.50"></text></g><g><title>predicates_defined_on (320,913 samples, 0.22%)</title><rect x="45.9131%" y="149" width="0.2173%" height="15" fill="rgb(237,122,38)"/><text x="46.1631%" y="159.50"></text></g><g><title>type_collecting (3,950,745 samples, 2.67%)</title><rect x="43.6617%" y="197" width="2.6748%" height="15" fill="rgb(244,218,35)"/><text x="43.9117%" y="207.50">ty..</text></g><g><title>collect_mod_item_types (3,943,925 samples, 2.67%)</title><rect x="43.6663%" y="181" width="2.6702%" height="15" fill="rgb(240,68,47)"/><text x="43.9163%" y="191.50">co..</text></g><g><title>type_of (158,932 samples, 0.11%)</title><rect x="46.2289%" y="165" width="0.1076%" height="15" fill="rgb(210,16,53)"/><text x="46.4789%" y="175.50"></text></g><g><title>param_env (515,926 samples, 0.35%)</title><rect x="48.9387%" y="165" width="0.3493%" height="15" fill="rgb(235,124,12)"/><text x="49.1887%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,320,795 samples, 2.93%)</title><rect x="46.6159%" y="181" width="2.9254%" height="15" fill="rgb(224,169,11)"/><text x="46.8659%" y="191.50">ch..</text></g><g><title>region_scope_tree (356,586 samples, 0.24%)</title><rect x="49.2998%" y="165" width="0.2414%" height="15" fill="rgb(250,166,2)"/><text x="49.5498%" y="175.50"></text></g><g><title>generics_of (231,611 samples, 0.16%)</title><rect x="53.9143%" y="149" width="0.1568%" height="15" fill="rgb(242,216,29)"/><text x="54.1643%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (149,940 samples, 0.10%)</title><rect x="53.9696%" y="133" width="0.1015%" height="15" fill="rgb(230,116,27)"/><text x="54.2196%" y="143.50"></text></g><g><title>associated_item (269,046 samples, 0.18%)</title><rect x="54.1573%" y="117" width="0.1822%" height="15" fill="rgb(228,99,48)"/><text x="54.4073%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (240,676 samples, 0.16%)</title><rect x="54.1765%" y="101" width="0.1629%" height="15" fill="rgb(253,11,6)"/><text x="54.4265%" y="111.50"></text></g><g><title>impl_item_implementor_ids (436,826 samples, 0.30%)</title><rect x="54.0712%" y="149" width="0.2957%" height="15" fill="rgb(247,143,39)"/><text x="54.3212%" y="159.50"></text></g><g><title>associated_items (387,636 samples, 0.26%)</title><rect x="54.1045%" y="133" width="0.2624%" height="15" fill="rgb(236,97,10)"/><text x="54.3545%" y="143.50"></text></g><g><title>impl_trait_ref (703,942 samples, 0.48%)</title><rect x="54.4639%" y="149" width="0.4766%" height="15" fill="rgb(233,208,19)"/><text x="54.7139%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (357,606 samples, 0.24%)</title><rect x="54.6984%" y="133" width="0.2421%" height="15" fill="rgb(216,164,2)"/><text x="54.9484%" y="143.50"></text></g><g><title>predicates_of (768,446 samples, 0.52%)</title><rect x="54.9448%" y="149" width="0.5203%" height="15" fill="rgb(220,129,5)"/><text x="55.1948%" y="159.50"></text></g><g><title>predicates_defined_on (416,904 samples, 0.28%)</title><rect x="55.1828%" y="133" width="0.2823%" height="15" fill="rgb(242,17,10)"/><text x="55.4328%" y="143.50"></text></g><g><title>trait_impls_of (661,637 samples, 0.45%)</title><rect x="55.4727%" y="149" width="0.4480%" height="15" fill="rgb(242,107,0)"/><text x="55.7227%" y="159.50"></text></g><g><title>implementations_of_trait (183,741 samples, 0.12%)</title><rect x="55.7963%" y="133" width="0.1244%" height="15" fill="rgb(251,28,31)"/><text x="56.0463%" y="143.50"></text></g><g><title>evaluate_obligation (5,721,854 samples, 3.87%)</title><rect x="52.0693%" y="165" width="3.8739%" height="15" fill="rgb(233,223,10)"/><text x="52.3193%" y="175.50">eval..</text></g><g><title>implied_outlives_bounds (194,122 samples, 0.13%)</title><rect x="55.9616%" y="165" width="0.1314%" height="15" fill="rgb(215,21,27)"/><text x="56.2116%" y="175.50"></text></g><g><title>param_env (500,305 samples, 0.34%)</title><rect x="56.0981%" y="165" width="0.3387%" height="15" fill="rgb(232,23,21)"/><text x="56.3481%" y="175.50"></text></g><g><title>check_item_well_formed (10,678,200 samples, 7.23%)</title><rect x="49.5413%" y="181" width="7.2296%" height="15" fill="rgb(244,5,23)"/><text x="49.7913%" y="191.50">check_item..</text></g><g><title>trait_impls_of (349,875 samples, 0.24%)</title><rect x="56.5340%" y="165" width="0.2369%" height="15" fill="rgb(226,81,46)"/><text x="56.7840%" y="175.50"></text></g><g><title>implementations_of_trait (162,013 samples, 0.11%)</title><rect x="56.6612%" y="149" width="0.1097%" height="15" fill="rgb(247,70,30)"/><text x="56.9112%" y="159.50"></text></g><g><title>param_env (187,341 samples, 0.13%)</title><rect x="57.3461%" y="165" width="0.1268%" height="15" fill="rgb(212,68,19)"/><text x="57.5961%" y="175.50"></text></g><g><title>analysis (78,614,965 samples, 53.23%)</title><rect x="4.2773%" y="229" width="53.2257%" height="15" fill="rgb(240,187,13)"/><text x="4.5273%" y="239.50">analysis</text></g><g><title>type_check_crate (45,088,558 samples, 30.53%)</title><rect x="26.9761%" y="213" width="30.5269%" height="15" fill="rgb(223,113,26)"/><text x="27.2261%" y="223.50">type_check_crate</text></g><g><title>wf_checking (16,478,866 samples, 11.16%)</title><rect x="46.3461%" y="197" width="11.1569%" height="15" fill="rgb(206,192,2)"/><text x="46.5961%" y="207.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,081,351 samples, 0.73%)</title><rect x="56.7708%" y="181" width="0.7321%" height="15" fill="rgb(241,108,4)"/><text x="57.0208%" y="191.50"></text></g><g><title>codegen_module (226,163 samples, 0.15%)</title><rect x="58.1045%" y="213" width="0.1531%" height="15" fill="rgb(247,173,49)"/><text x="58.3545%" y="223.50"></text></g><g><title>codegen_crate (1,269,054 samples, 0.86%)</title><rect x="57.5112%" y="229" width="0.8592%" height="15" fill="rgb(224,114,35)"/><text x="57.7612%" y="239.50"></text></g><g><title>codegen_module_optimize (618,887 samples, 0.42%)</title><rect x="58.3704%" y="229" width="0.4190%" height="15" fill="rgb(245,159,27)"/><text x="58.6204%" y="239.50"></text></g><g><title>LLVM_module_optimize (307,183 samples, 0.21%)</title><rect x="58.5814%" y="213" width="0.2080%" height="15" fill="rgb(245,172,44)"/><text x="58.8314%" y="223.50"></text></g><g><title>LLVM_module_codegen (3,358,377 samples, 2.27%)</title><rect x="59.0067%" y="213" width="2.2738%" height="15" fill="rgb(236,23,11)"/><text x="59.2567%" y="223.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (3,339,087 samples, 2.26%)</title><rect x="59.0197%" y="197" width="2.2607%" height="15" fill="rgb(205,117,38)"/><text x="59.2697%" y="207.50">L..</text></g><g><title>codegen_module_perform_lto (3,701,461 samples, 2.51%)</title><rect x="58.7894%" y="229" width="2.5060%" height="15" fill="rgb(237,72,25)"/><text x="59.0394%" y="239.50">co..</text></g><g><title>AST_validation (239,233 samples, 0.16%)</title><rect x="61.4416%" y="213" width="0.1620%" height="15" fill="rgb(244,70,9)"/><text x="61.6916%" y="223.50"></text></g><g><title>metadata_load_macro (247,052 samples, 0.17%)</title><rect x="79.1547%" y="181" width="0.1673%" height="15" fill="rgb(217,125,39)"/><text x="79.4047%" y="191.50"></text></g><g><title>macro_expand_crate (29,283,500 samples, 19.83%)</title><rect x="61.6969%" y="213" width="19.8262%" height="15" fill="rgb(235,36,10)"/><text x="61.9469%" y="223.50">macro_expand_crate</text></g><g><title>expand_crate (29,267,730 samples, 19.82%)</title><rect x="61.7076%" y="197" width="19.8155%" height="15" fill="rgb(251,123,47)"/><text x="61.9576%" y="207.50">expand_crate</text></g><g><title>metadata_register_crate (3,251,087 samples, 2.20%)</title><rect x="79.3220%" y="181" width="2.2011%" height="15" fill="rgb(221,13,13)"/><text x="79.5720%" y="191.50">m..</text></g><g><title>metadata_register_crate (1,141,251 samples, 0.77%)</title><rect x="80.7504%" y="165" width="0.7727%" height="15" fill="rgb(238,131,9)"/><text x="81.0004%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (175,272 samples, 0.12%)</title><rect x="81.5267%" y="213" width="0.1187%" height="15" fill="rgb(211,50,8)"/><text x="81.7767%" y="223.50"></text></g><g><title>finalize_imports (250,113 samples, 0.17%)</title><rect x="81.6485%" y="197" width="0.1693%" height="15" fill="rgb(245,182,24)"/><text x="81.8985%" y="207.50"></text></g><g><title>late_resolve_crate (1,451,226 samples, 0.98%)</title><rect x="81.8743%" y="197" width="0.9825%" height="15" fill="rgb(242,14,37)"/><text x="82.1243%" y="207.50"></text></g><g><title>configure_and_expand (31,955,450 samples, 21.64%)</title><rect x="61.2955%" y="229" width="21.6352%" height="15" fill="rgb(246,228,12)"/><text x="61.5455%" y="239.50">configure_and_expand</text></g><g><title>resolve_crate (1,898,441 samples, 1.29%)</title><rect x="81.6453%" y="213" width="1.2853%" height="15" fill="rgb(213,55,15)"/><text x="81.8953%" y="223.50"></text></g><g><title>drop_ast (377,364 samples, 0.26%)</title><rect x="82.9307%" y="229" width="0.2555%" height="15" fill="rgb(209,9,3)"/><text x="83.1807%" y="239.50"></text></g><g><title>early_lint_checks (336,054 samples, 0.23%)</title><rect x="83.2003%" y="229" width="0.2275%" height="15" fill="rgb(230,59,30)"/><text x="83.4503%" y="239.50"></text></g><g><title>free_global_ctxt (3,884,204 samples, 2.63%)</title><rect x="83.4278%" y="229" width="2.6298%" height="15" fill="rgb(209,121,21)"/><text x="83.6778%" y="239.50">fr..</text></g><g><title>exported_symbols (175,922 samples, 0.12%)</title><rect x="87.8243%" y="213" width="0.1191%" height="15" fill="rgb(220,109,13)"/><text x="88.0743%" y="223.50"></text></g><g><title>reachable_non_generics (167,871 samples, 0.11%)</title><rect x="87.8298%" y="197" width="0.1137%" height="15" fill="rgb(232,18,1)"/><text x="88.0798%" y="207.50"></text></g><g><title>mir_for_ctfe (255,943 samples, 0.17%)</title><rect x="87.9707%" y="213" width="0.1733%" height="15" fill="rgb(215,41,42)"/><text x="88.2207%" y="223.50"></text></g><g><title>mir_for_ctfe_of_const_arg (208,463 samples, 0.14%)</title><rect x="88.0029%" y="197" width="0.1411%" height="15" fill="rgb(224,123,36)"/><text x="88.2529%" y="207.50"></text></g><g><title>layout_of (541,299 samples, 0.37%)</title><rect x="90.4813%" y="197" width="0.3665%" height="15" fill="rgb(240,125,3)"/><text x="90.7313%" y="207.50"></text></g><g><title>optimized_mir (6,623,395 samples, 4.48%)</title><rect x="88.1962%" y="213" width="4.4843%" height="15" fill="rgb(205,98,50)"/><text x="88.4462%" y="223.50">optim..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,706,931 samples, 1.83%)</title><rect x="90.8478%" y="197" width="1.8327%" height="15" fill="rgb(205,185,37)"/><text x="91.0978%" y="207.50">m..</text></g><g><title>generate_crate_metadata (10,020,473 samples, 6.78%)</title><rect x="86.0576%" y="229" width="6.7843%" height="15" fill="rgb(238,207,15)"/><text x="86.3076%" y="239.50">generate_..</text></g><g><title>hir_lowering (3,807,483 samples, 2.58%)</title><rect x="92.8418%" y="229" width="2.5778%" height="15" fill="rgb(213,199,42)"/><text x="93.0918%" y="239.50">hi..</text></g><g><title>link_crate (1,057,992 samples, 0.72%)</title><rect x="95.4367%" y="213" width="0.7163%" height="15" fill="rgb(235,201,11)"/><text x="95.6867%" y="223.50"></text></g><g><title>link_binary (1,028,322 samples, 0.70%)</title><rect x="95.4568%" y="197" width="0.6962%" height="15" fill="rgb(207,46,11)"/><text x="95.7068%" y="207.50"></text></g><g><title>link_rlib (749,359 samples, 0.51%)</title><rect x="95.6456%" y="181" width="0.5073%" height="15" fill="rgb(241,35,35)"/><text x="95.8956%" y="191.50"></text></g><g><title>link (1,091,062 samples, 0.74%)</title><rect x="95.4197%" y="229" width="0.7387%" height="15" fill="rgb(243,32,47)"/><text x="95.6697%" y="239.50"></text></g><g><title>parse_crate (3,148,465 samples, 2.13%)</title><rect x="96.1584%" y="229" width="2.1316%" height="15" fill="rgb(247,202,23)"/><text x="96.4084%" y="239.50">p..</text></g><g><title>prepare_outputs (184,812 samples, 0.13%)</title><rect x="98.2973%" y="229" width="0.1251%" height="15" fill="rgb(219,102,11)"/><text x="98.5473%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (1,825,820 samples, 1.24%)</title><rect x="98.4225%" y="229" width="1.2362%" height="15" fill="rgb(243,110,44)"/><text x="98.6725%" y="239.50"></text></g><g><title>all (147,701,251 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (147,701,251 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (424,975 samples, 0.29%)</title><rect x="99.7123%" y="229" width="0.2877%" height="15" fill="rgb(226,22,26)"/><text x="99.9623%" y="239.50"></text></g></svg></svg>