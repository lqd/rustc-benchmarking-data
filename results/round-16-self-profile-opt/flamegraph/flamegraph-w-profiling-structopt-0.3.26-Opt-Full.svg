<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="373.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="373.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,621,943 samples, 10.78%)</title><rect x="0.9906%" y="309" width="10.7813%" height="15" fill="rgb(227,0,7)"/><text x="1.2406%" y="319.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (215,673 samples, 0.41%)</title><rect x="11.3583%" y="293" width="0.4136%" height="15" fill="rgb(217,0,24)"/><text x="11.6083%" y="303.50"></text></g><g><title>LLVM_thin_lto_global_analysis (200,532 samples, 0.38%)</title><rect x="11.3873%" y="277" width="0.3846%" height="15" fill="rgb(221,193,54)"/><text x="11.6373%" y="287.50"></text></g><g><title>param_env (68,281 samples, 0.13%)</title><rect x="16.3514%" y="229" width="0.1309%" height="15" fill="rgb(248,212,6)"/><text x="16.6014%" y="239.50"></text></g><g><title>item_attrs (55,500 samples, 0.11%)</title><rect x="16.6916%" y="197" width="0.1064%" height="15" fill="rgb(208,68,35)"/><text x="16.9416%" y="207.50"></text></g><g><title>metadata_decode_entry_item_attrs (53,310 samples, 0.10%)</title><rect x="16.6958%" y="181" width="0.1022%" height="15" fill="rgb(232,128,0)"/><text x="16.9458%" y="191.50"></text></g><g><title>codegen_fn_attrs (77,750 samples, 0.15%)</title><rect x="16.6588%" y="213" width="0.1491%" height="15" fill="rgb(207,160,47)"/><text x="16.9088%" y="223.50"></text></g><g><title>adt_drop_tys (73,760 samples, 0.14%)</title><rect x="17.7144%" y="165" width="0.1415%" height="15" fill="rgb(228,23,34)"/><text x="17.9644%" y="175.50"></text></g><g><title>adt_drop_tys (163,003 samples, 0.31%)</title><rect x="17.6923%" y="181" width="0.3126%" height="15" fill="rgb(218,30,26)"/><text x="17.9423%" y="191.50"></text></g><g><title>explicit_predicates_of (84,630 samples, 0.16%)</title><rect x="18.5518%" y="117" width="0.1623%" height="15" fill="rgb(220,122,19)"/><text x="18.8018%" y="127.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (83,290 samples, 0.16%)</title><rect x="18.5544%" y="101" width="0.1597%" height="15" fill="rgb(250,228,42)"/><text x="18.8044%" y="111.50"></text></g><g><title>needs_drop_raw (570,508 samples, 1.09%)</title><rect x="17.6243%" y="197" width="1.0941%" height="15" fill="rgb(240,193,28)"/><text x="17.8743%" y="207.50"></text></g><g><title>is_copy_raw (372,055 samples, 0.71%)</title><rect x="18.0049%" y="181" width="0.7135%" height="15" fill="rgb(216,20,37)"/><text x="18.2549%" y="191.50"></text></g><g><title>evaluate_obligation (329,604 samples, 0.63%)</title><rect x="18.0863%" y="165" width="0.6321%" height="15" fill="rgb(206,188,39)"/><text x="18.3363%" y="175.50"></text></g><g><title>predicates_of (98,890 samples, 0.19%)</title><rect x="18.5287%" y="149" width="0.1896%" height="15" fill="rgb(217,207,13)"/><text x="18.7787%" y="159.50"></text></g><g><title>predicates_defined_on (91,310 samples, 0.18%)</title><rect x="18.5433%" y="133" width="0.1751%" height="15" fill="rgb(231,73,38)"/><text x="18.7933%" y="143.50"></text></g><g><title>resolve_instance (151,092 samples, 0.29%)</title><rect x="18.7184%" y="197" width="0.2898%" height="15" fill="rgb(225,20,46)"/><text x="18.9684%" y="207.50"></text></g><g><title>thir_body (108,561 samples, 0.21%)</title><rect x="19.0193%" y="197" width="0.2082%" height="15" fill="rgb(210,31,41)"/><text x="19.2693%" y="207.50"></text></g><g><title>mir_const (1,723,479 samples, 3.31%)</title><rect x="15.9677%" y="245" width="3.3052%" height="15" fill="rgb(221,200,47)"/><text x="16.2177%" y="255.50">mir..</text></g><g><title>unsafety_check_result (1,455,166 samples, 2.79%)</title><rect x="16.4823%" y="229" width="2.7906%" height="15" fill="rgb(226,26,5)"/><text x="16.7323%" y="239.50">un..</text></g><g><title>mir_built (1,285,375 samples, 2.46%)</title><rect x="16.8079%" y="213" width="2.4650%" height="15" fill="rgb(249,33,26)"/><text x="17.0579%" y="223.50">mi..</text></g><g><title>mir_promoted (1,923,604 samples, 3.69%)</title><rect x="15.6066%" y="261" width="3.6889%" height="15" fill="rgb(235,183,28)"/><text x="15.8566%" y="271.50">mir_..</text></g><g><title>type_op_ascribe_user_type (131,350 samples, 0.25%)</title><rect x="19.2955%" y="261" width="0.2519%" height="15" fill="rgb(221,5,38)"/><text x="19.5455%" y="271.50"></text></g><g><title>type_op_normalize_predicate (53,140 samples, 0.10%)</title><rect x="19.6100%" y="261" width="0.1019%" height="15" fill="rgb(247,18,42)"/><text x="19.8600%" y="271.50"></text></g><g><title>type_op_prove_predicate (337,994 samples, 0.65%)</title><rect x="19.7119%" y="261" width="0.6482%" height="15" fill="rgb(241,131,45)"/><text x="19.9619%" y="271.50"></text></g><g><title>MIR_borrow_checking (4,395,959 samples, 8.43%)</title><rect x="11.9763%" y="293" width="8.4302%" height="15" fill="rgb(249,31,29)"/><text x="12.2263%" y="303.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (4,372,069 samples, 8.38%)</title><rect x="12.0221%" y="277" width="8.3844%" height="15" fill="rgb(225,111,53)"/><text x="12.2721%" y="287.50">mir_borrowck</text></g><g><title>hir_module_items (88,141 samples, 0.17%)</title><rect x="20.4169%" y="293" width="0.1690%" height="15" fill="rgb(238,160,17)"/><text x="20.6669%" y="303.50"></text></g><g><title>get_lang_items (54,701 samples, 0.10%)</title><rect x="20.9009%" y="245" width="0.1049%" height="15" fill="rgb(214,148,48)"/><text x="21.1509%" y="255.50"></text></g><g><title>should_inherit_track_caller (56,351 samples, 0.11%)</title><rect x="21.0058%" y="245" width="0.1081%" height="15" fill="rgb(232,36,49)"/><text x="21.2558%" y="255.50"></text></g><g><title>codegen_fn_attrs (181,952 samples, 0.35%)</title><rect x="20.8060%" y="261" width="0.3489%" height="15" fill="rgb(209,103,24)"/><text x="21.0560%" y="271.50"></text></g><g><title>check_mod_attrs (279,804 samples, 0.54%)</title><rect x="20.6187%" y="277" width="0.5366%" height="15" fill="rgb(229,88,8)"/><text x="20.8687%" y="287.50"></text></g><g><title>lookup_deprecation_entry (71,431 samples, 0.14%)</title><rect x="21.3268%" y="261" width="0.1370%" height="15" fill="rgb(213,181,19)"/><text x="21.5768%" y="271.50"></text></g><g><title>check_mod_unstable_api_usage (142,351 samples, 0.27%)</title><rect x="21.2485%" y="277" width="0.2730%" height="15" fill="rgb(254,191,54)"/><text x="21.4985%" y="287.50"></text></g><g><title>misc_checking_1 (512,946 samples, 0.98%)</title><rect x="20.5868%" y="293" width="0.9837%" height="15" fill="rgb(241,83,37)"/><text x="20.8368%" y="303.50"></text></g><g><title>liveness_and_intrinsic_checking (311,453 samples, 0.60%)</title><rect x="21.5732%" y="277" width="0.5973%" height="15" fill="rgb(233,36,39)"/><text x="21.8232%" y="287.50"></text></g><g><title>check_mod_liveness (292,213 samples, 0.56%)</title><rect x="21.6101%" y="261" width="0.5604%" height="15" fill="rgb(226,3,54)"/><text x="21.8601%" y="271.50"></text></g><g><title>type_uninhabited_from (233,721 samples, 0.45%)</title><rect x="21.7223%" y="245" width="0.4482%" height="15" fill="rgb(245,192,40)"/><text x="21.9723%" y="255.50"></text></g><g><title>type_uninhabited_from (213,741 samples, 0.41%)</title><rect x="21.7606%" y="229" width="0.4099%" height="15" fill="rgb(238,167,29)"/><text x="22.0106%" y="239.50"></text></g><g><title>type_uninhabited_from (170,901 samples, 0.33%)</title><rect x="21.8427%" y="213" width="0.3277%" height="15" fill="rgb(232,182,51)"/><text x="22.0927%" y="223.50"></text></g><g><title>type_uninhabited_from (104,641 samples, 0.20%)</title><rect x="21.9698%" y="197" width="0.2007%" height="15" fill="rgb(231,60,39)"/><text x="22.2198%" y="207.50"></text></g><g><title>type_uninhabited_from (65,931 samples, 0.13%)</title><rect x="22.0441%" y="181" width="0.1264%" height="15" fill="rgb(208,69,12)"/><text x="22.2941%" y="191.50"></text></g><g><title>misc_checking_2 (428,115 samples, 0.82%)</title><rect x="21.5704%" y="293" width="0.8210%" height="15" fill="rgb(235,93,37)"/><text x="21.8204%" y="303.50"></text></g><g><title>match_checking (115,222 samples, 0.22%)</title><rect x="22.1705%" y="277" width="0.2210%" height="15" fill="rgb(213,116,39)"/><text x="22.4205%" y="287.50"></text></g><g><title>check_match (108,091 samples, 0.21%)</title><rect x="22.1842%" y="261" width="0.2073%" height="15" fill="rgb(222,207,29)"/><text x="22.4342%" y="271.50"></text></g><g><title>death_checking (64,940 samples, 0.12%)</title><rect x="22.5024%" y="277" width="0.1245%" height="15" fill="rgb(206,96,30)"/><text x="22.7524%" y="287.50"></text></g><g><title>crate_lints (1,032,011 samples, 1.98%)</title><rect x="22.6293%" y="261" width="1.9791%" height="15" fill="rgb(218,138,4)"/><text x="22.8793%" y="271.50">c..</text></g><g><title>lint_checking (1,096,902 samples, 2.10%)</title><rect x="22.6270%" y="277" width="2.1036%" height="15" fill="rgb(250,191,14)"/><text x="22.8770%" y="287.50">l..</text></g><g><title>module_lints (63,671 samples, 0.12%)</title><rect x="24.6084%" y="261" width="0.1221%" height="15" fill="rgb(239,60,40)"/><text x="24.8584%" y="271.50"></text></g><g><title>lint_mod (61,991 samples, 0.12%)</title><rect x="24.6116%" y="245" width="0.1189%" height="15" fill="rgb(206,27,48)"/><text x="24.8616%" y="255.50"></text></g><g><title>privacy_access_levels (63,461 samples, 0.12%)</title><rect x="24.7305%" y="277" width="0.1217%" height="15" fill="rgb(225,35,8)"/><text x="24.9805%" y="287.50"></text></g><g><title>privacy_checking_modules (122,361 samples, 0.23%)</title><rect x="24.8522%" y="277" width="0.2347%" height="15" fill="rgb(250,213,24)"/><text x="25.1022%" y="287.50"></text></g><g><title>check_mod_privacy (121,241 samples, 0.23%)</title><rect x="24.8544%" y="261" width="0.2325%" height="15" fill="rgb(247,123,22)"/><text x="25.1044%" y="271.50"></text></g><g><title>misc_checking_3 (1,423,766 samples, 2.73%)</title><rect x="22.3915%" y="293" width="2.7304%" height="15" fill="rgb(231,138,38)"/><text x="22.6415%" y="303.50">mi..</text></g><g><title>coherent_trait (72,671 samples, 0.14%)</title><rect x="25.1884%" y="261" width="0.1394%" height="15" fill="rgb(231,145,46)"/><text x="25.4384%" y="271.50"></text></g><g><title>specialization_graph_of (68,041 samples, 0.13%)</title><rect x="25.1973%" y="245" width="0.1305%" height="15" fill="rgb(251,118,11)"/><text x="25.4473%" y="255.50"></text></g><g><title>coherence_checking (109,661 samples, 0.21%)</title><rect x="25.1686%" y="277" width="0.2103%" height="15" fill="rgb(217,147,25)"/><text x="25.4186%" y="287.50"></text></g><g><title>adt_sized_constraint (57,981 samples, 0.11%)</title><rect x="29.4933%" y="197" width="0.1112%" height="15" fill="rgb(247,81,37)"/><text x="29.7433%" y="207.50"></text></g><g><title>adt_sized_constraint (70,711 samples, 0.14%)</title><rect x="29.4760%" y="213" width="0.1356%" height="15" fill="rgb(209,12,38)"/><text x="29.7260%" y="223.50"></text></g><g><title>adt_sized_constraint (93,861 samples, 0.18%)</title><rect x="29.4397%" y="229" width="0.1800%" height="15" fill="rgb(227,1,9)"/><text x="29.6897%" y="239.50"></text></g><g><title>associated_item (119,501 samples, 0.23%)</title><rect x="29.7378%" y="213" width="0.2292%" height="15" fill="rgb(248,47,43)"/><text x="29.9878%" y="223.50"></text></g><g><title>metadata_decode_entry_associated_item (89,631 samples, 0.17%)</title><rect x="29.7951%" y="197" width="0.1719%" height="15" fill="rgb(221,10,30)"/><text x="30.0451%" y="207.50"></text></g><g><title>associated_items (185,311 samples, 0.36%)</title><rect x="29.6263%" y="229" width="0.3554%" height="15" fill="rgb(210,229,1)"/><text x="29.8763%" y="239.50"></text></g><g><title>adt_def (175,322 samples, 0.34%)</title><rect x="30.6036%" y="197" width="0.3362%" height="15" fill="rgb(222,148,37)"/><text x="30.8536%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (172,062 samples, 0.33%)</title><rect x="30.6099%" y="181" width="0.3300%" height="15" fill="rgb(234,67,33)"/><text x="30.8599%" y="191.50"></text></g><g><title>item_attrs (134,872 samples, 0.26%)</title><rect x="30.6812%" y="165" width="0.2586%" height="15" fill="rgb(247,98,35)"/><text x="30.9312%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (131,492 samples, 0.25%)</title><rect x="30.6877%" y="149" width="0.2522%" height="15" fill="rgb(247,138,52)"/><text x="30.9377%" y="159.50"></text></g><g><title>adt_def (52,310 samples, 0.10%)</title><rect x="31.0791%" y="181" width="0.1003%" height="15" fill="rgb(213,79,30)"/><text x="31.3291%" y="191.50"></text></g><g><title>adt_def (159,562 samples, 0.31%)</title><rect x="31.2585%" y="165" width="0.3060%" height="15" fill="rgb(246,177,23)"/><text x="31.5085%" y="175.50"></text></g><g><title>metadata_decode_entry_adt_def (158,222 samples, 0.30%)</title><rect x="31.2611%" y="149" width="0.3034%" height="15" fill="rgb(230,62,27)"/><text x="31.5111%" y="159.50"></text></g><g><title>impl_parent (78,191 samples, 0.15%)</title><rect x="32.0437%" y="53" width="0.1499%" height="15" fill="rgb(216,154,8)"/><text x="32.2937%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (59,001 samples, 0.11%)</title><rect x="32.0805%" y="37" width="0.1131%" height="15" fill="rgb(244,35,45)"/><text x="32.3305%" y="47.50"></text></g><g><title>impl_trait_ref (301,524 samples, 0.58%)</title><rect x="32.1937%" y="53" width="0.5782%" height="15" fill="rgb(251,115,12)"/><text x="32.4437%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (282,044 samples, 0.54%)</title><rect x="32.2310%" y="37" width="0.5409%" height="15" fill="rgb(240,54,50)"/><text x="32.4810%" y="47.50"></text></g><g><title>coherent_trait (506,635 samples, 0.97%)</title><rect x="31.8575%" y="85" width="0.9716%" height="15" fill="rgb(233,84,52)"/><text x="32.1075%" y="95.50"></text></g><g><title>specialization_graph_of (505,115 samples, 0.97%)</title><rect x="31.8604%" y="69" width="0.9687%" height="15" fill="rgb(207,117,47)"/><text x="32.1104%" y="79.50"></text></g><g><title>adt_destructor (512,275 samples, 0.98%)</title><rect x="31.8491%" y="117" width="0.9824%" height="15" fill="rgb(249,43,39)"/><text x="32.0991%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (511,595 samples, 0.98%)</title><rect x="31.8504%" y="101" width="0.9811%" height="15" fill="rgb(209,38,44)"/><text x="32.1004%" y="111.50"></text></g><g><title>adt_dtorck_constraint (532,006 samples, 1.02%)</title><rect x="31.8142%" y="133" width="1.0202%" height="15" fill="rgb(236,212,23)"/><text x="32.0642%" y="143.50"></text></g><g><title>adt_dtorck_constraint (587,577 samples, 1.13%)</title><rect x="31.7197%" y="149" width="1.1268%" height="15" fill="rgb(242,79,21)"/><text x="31.9697%" y="159.50"></text></g><g><title>adt_dtorck_constraint (665,117 samples, 1.28%)</title><rect x="31.5975%" y="165" width="1.2755%" height="15" fill="rgb(211,96,35)"/><text x="31.8475%" y="175.50"></text></g><g><title>adt_dtorck_constraint (908,979 samples, 1.74%)</title><rect x="31.2071%" y="181" width="1.7432%" height="15" fill="rgb(253,215,40)"/><text x="31.4571%" y="191.50"></text></g><g><title>adt_dtorck_constraint (1,101,912 samples, 2.11%)</title><rect x="30.9960%" y="197" width="2.1132%" height="15" fill="rgb(211,81,21)"/><text x="31.2460%" y="207.50">a..</text></g><g><title>type_of (71,962 samples, 0.14%)</title><rect x="32.9711%" y="181" width="0.1380%" height="15" fill="rgb(208,190,38)"/><text x="33.2211%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (62,922 samples, 0.12%)</title><rect x="32.9885%" y="165" width="0.1207%" height="15" fill="rgb(235,213,38)"/><text x="33.2385%" y="175.50"></text></g><g><title>dropck_outlives (1,846,420 samples, 3.54%)</title><rect x="30.0172%" y="229" width="3.5409%" height="15" fill="rgb(237,122,38)"/><text x="30.2672%" y="239.50">drop..</text></g><g><title>adt_dtorck_constraint (1,610,878 samples, 3.09%)</title><rect x="30.4689%" y="213" width="3.0892%" height="15" fill="rgb(244,218,35)"/><text x="30.7189%" y="223.50">adt..</text></g><g><title>type_of (219,103 samples, 0.42%)</title><rect x="33.1379%" y="197" width="0.4202%" height="15" fill="rgb(240,68,47)"/><text x="33.3879%" y="207.50"></text></g><g><title>metadata_decode_entry_type_of (211,222 samples, 0.41%)</title><rect x="33.1530%" y="181" width="0.4051%" height="15" fill="rgb(210,16,53)"/><text x="33.4030%" y="191.50"></text></g><g><title>evaluate_obligation (189,213 samples, 0.36%)</title><rect x="33.5581%" y="229" width="0.3629%" height="15" fill="rgb(235,124,12)"/><text x="33.8081%" y="239.50"></text></g><g><title>method_autoderef_steps (74,961 samples, 0.14%)</title><rect x="34.1935%" y="229" width="0.1438%" height="15" fill="rgb(224,169,11)"/><text x="34.4435%" y="239.50"></text></g><g><title>predicates_of (112,890 samples, 0.22%)</title><rect x="34.3666%" y="229" width="0.2165%" height="15" fill="rgb(250,166,2)"/><text x="34.6166%" y="239.50"></text></g><g><title>predicates_defined_on (77,660 samples, 0.15%)</title><rect x="34.4341%" y="213" width="0.1489%" height="15" fill="rgb(242,216,29)"/><text x="34.6841%" y="223.50"></text></g><g><title>associated_item (75,222 samples, 0.14%)</title><rect x="35.7279%" y="197" width="0.1443%" height="15" fill="rgb(230,116,27)"/><text x="35.9779%" y="207.50"></text></g><g><title>associated_items (112,502 samples, 0.22%)</title><rect x="35.6662%" y="213" width="0.2157%" height="15" fill="rgb(228,99,48)"/><text x="35.9162%" y="223.50"></text></g><g><title>evaluate_obligation (245,663 samples, 0.47%)</title><rect x="35.9792%" y="213" width="0.4711%" height="15" fill="rgb(253,11,6)"/><text x="36.2292%" y="223.50"></text></g><g><title>trait_impls_of (187,432 samples, 0.36%)</title><rect x="36.0909%" y="197" width="0.3594%" height="15" fill="rgb(247,143,39)"/><text x="36.3409%" y="207.50"></text></g><g><title>typeck (1,016,781 samples, 1.95%)</title><rect x="34.7340%" y="229" width="1.9499%" height="15" fill="rgb(236,97,10)"/><text x="34.9840%" y="239.50">t..</text></g><g><title>item_bodies_checking (5,905,916 samples, 11.33%)</title><rect x="25.4056%" y="277" width="11.3259%" height="15" fill="rgb(233,208,19)"/><text x="25.6556%" y="287.50">item_bodies_check..</text></g><g><title>typeck_item_bodies (5,904,226 samples, 11.32%)</title><rect x="25.4089%" y="261" width="11.3227%" height="15" fill="rgb(216,164,2)"/><text x="25.6589%" y="271.50">typeck_item_bodies</text></g><g><title>typeck (5,888,065 samples, 11.29%)</title><rect x="25.4398%" y="245" width="11.2917%" height="15" fill="rgb(220,129,5)"/><text x="25.6898%" y="255.50">typeck</text></g><g><title>item_types_checking (165,932 samples, 0.32%)</title><rect x="36.7315%" y="277" width="0.3182%" height="15" fill="rgb(242,17,10)"/><text x="36.9815%" y="287.50"></text></g><g><title>check_mod_item_types (164,282 samples, 0.32%)</title><rect x="36.7347%" y="261" width="0.3150%" height="15" fill="rgb(242,107,0)"/><text x="36.9847%" y="271.50"></text></g><g><title>fn_sig (115,320 samples, 0.22%)</title><rect x="37.2159%" y="245" width="0.2212%" height="15" fill="rgb(251,28,31)"/><text x="37.4659%" y="255.50"></text></g><g><title>is_late_bound_map (61,541 samples, 0.12%)</title><rect x="37.5406%" y="229" width="0.1180%" height="15" fill="rgb(233,223,10)"/><text x="37.7906%" y="239.50"></text></g><g><title>resolve_lifetimes (57,681 samples, 0.11%)</title><rect x="37.5480%" y="213" width="0.1106%" height="15" fill="rgb(215,21,27)"/><text x="37.7980%" y="223.50"></text></g><g><title>generics_of (124,771 samples, 0.24%)</title><rect x="37.4370%" y="245" width="0.2393%" height="15" fill="rgb(232,23,21)"/><text x="37.6870%" y="255.50"></text></g><g><title>late_bound_vars_map (121,601 samples, 0.23%)</title><rect x="37.9622%" y="197" width="0.2332%" height="15" fill="rgb(244,5,23)"/><text x="38.2122%" y="207.50"></text></g><g><title>resolve_lifetimes (119,391 samples, 0.23%)</title><rect x="37.9665%" y="181" width="0.2290%" height="15" fill="rgb(226,81,46)"/><text x="38.2165%" y="191.50"></text></g><g><title>type_param_predicates (77,281 samples, 0.15%)</title><rect x="38.2834%" y="197" width="0.1482%" height="15" fill="rgb(247,70,30)"/><text x="38.5334%" y="207.50"></text></g><g><title>explicit_predicates_of (359,273 samples, 0.69%)</title><rect x="37.7434%" y="213" width="0.6890%" height="15" fill="rgb(212,68,19)"/><text x="37.9934%" y="223.50"></text></g><g><title>predicates_of (394,195 samples, 0.76%)</title><rect x="37.6811%" y="245" width="0.7560%" height="15" fill="rgb(240,187,13)"/><text x="37.9311%" y="255.50"></text></g><g><title>predicates_defined_on (383,303 samples, 0.74%)</title><rect x="37.7020%" y="229" width="0.7351%" height="15" fill="rgb(223,113,26)"/><text x="37.9520%" y="239.50"></text></g><g><title>super_predicates_of (84,432 samples, 0.16%)</title><rect x="38.4371%" y="245" width="0.1619%" height="15" fill="rgb(206,192,2)"/><text x="38.6871%" y="255.50"></text></g><g><title>super_predicates_that_define_assoc_type (74,541 samples, 0.14%)</title><rect x="38.4561%" y="229" width="0.1429%" height="15" fill="rgb(241,108,4)"/><text x="38.7061%" y="239.50"></text></g><g><title>type_collecting (856,599 samples, 1.64%)</title><rect x="37.0511%" y="277" width="1.6427%" height="15" fill="rgb(247,173,49)"/><text x="37.3011%" y="287.50"></text></g><g><title>collect_mod_item_types (849,489 samples, 1.63%)</title><rect x="37.0648%" y="261" width="1.6291%" height="15" fill="rgb(224,114,35)"/><text x="37.3148%" y="271.50"></text></g><g><title>check_impl_item_well_formed (255,603 samples, 0.49%)</title><rect x="38.7693%" y="261" width="0.4902%" height="15" fill="rgb(245,159,27)"/><text x="39.0193%" y="271.50"></text></g><g><title>evaluate_obligation (72,221 samples, 0.14%)</title><rect x="39.7883%" y="245" width="0.1385%" height="15" fill="rgb(245,172,44)"/><text x="40.0383%" y="255.50"></text></g><g><title>param_env (150,751 samples, 0.29%)</title><rect x="39.9453%" y="245" width="0.2891%" height="15" fill="rgb(236,23,11)"/><text x="40.1953%" y="255.50"></text></g><g><title>check_item_well_formed (531,835 samples, 1.02%)</title><rect x="39.2594%" y="261" width="1.0199%" height="15" fill="rgb(205,117,38)"/><text x="39.5094%" y="271.50"></text></g><g><title>adt_def (53,061 samples, 0.10%)</title><rect x="41.3609%" y="181" width="0.1018%" height="15" fill="rgb(237,72,25)"/><text x="41.6109%" y="191.50"></text></g><g><title>metadata_decode_entry_adt_def (52,831 samples, 0.10%)</title><rect x="41.3614%" y="165" width="0.1013%" height="15" fill="rgb(244,70,9)"/><text x="41.6114%" y="175.50"></text></g><g><title>adt_sized_constraint (55,281 samples, 0.11%)</title><rect x="41.3580%" y="197" width="0.1060%" height="15" fill="rgb(217,125,39)"/><text x="41.6080%" y="207.50"></text></g><g><title>adt_sized_constraint (100,901 samples, 0.19%)</title><rect x="41.2884%" y="213" width="0.1935%" height="15" fill="rgb(235,36,10)"/><text x="41.5384%" y="223.50"></text></g><g><title>evaluate_obligation (201,642 samples, 0.39%)</title><rect x="41.1224%" y="245" width="0.3867%" height="15" fill="rgb(251,123,47)"/><text x="41.3724%" y="255.50"></text></g><g><title>adt_sized_constraint (159,901 samples, 0.31%)</title><rect x="41.2024%" y="229" width="0.3066%" height="15" fill="rgb(221,13,13)"/><text x="41.4524%" y="239.50"></text></g><g><title>implied_outlives_bounds (128,722 samples, 0.25%)</title><rect x="41.5583%" y="245" width="0.2469%" height="15" fill="rgb(238,131,9)"/><text x="41.8083%" y="255.50"></text></g><g><title>param_env (229,512 samples, 0.44%)</title><rect x="41.8244%" y="245" width="0.4401%" height="15" fill="rgb(211,50,8)"/><text x="42.0744%" y="255.50"></text></g><g><title>trait_impls_of (90,761 samples, 0.17%)</title><rect x="42.0905%" y="229" width="0.1741%" height="15" fill="rgb(245,182,24)"/><text x="42.3405%" y="239.50"></text></g><g><title>predicates_of (79,121 samples, 0.15%)</title><rect x="42.2645%" y="245" width="0.1517%" height="15" fill="rgb(242,14,37)"/><text x="42.5145%" y="255.50"></text></g><g><title>predicates_defined_on (64,861 samples, 0.12%)</title><rect x="42.2919%" y="229" width="0.1244%" height="15" fill="rgb(246,228,12)"/><text x="42.5419%" y="239.50"></text></g><g><title>analysis (16,289,182 samples, 31.24%)</title><rect x="11.7719%" y="309" width="31.2381%" height="15" fill="rgb(213,55,15)"/><text x="12.0219%" y="319.50">analysis</text></g><g><title>type_check_crate (9,327,824 samples, 17.89%)</title><rect x="25.1218%" y="293" width="17.8882%" height="15" fill="rgb(209,9,3)"/><text x="25.3718%" y="303.50">type_check_crate</text></g><g><title>wf_checking (2,249,035 samples, 4.31%)</title><rect x="38.6970%" y="277" width="4.3130%" height="15" fill="rgb(230,59,30)"/><text x="38.9470%" y="287.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (1,423,906 samples, 2.73%)</title><rect x="40.2794%" y="261" width="2.7307%" height="15" fill="rgb(209,121,21)"/><text x="40.5294%" y="271.50">ch..</text></g><g><title>trait_impls_of (278,893 samples, 0.53%)</title><rect x="42.4752%" y="245" width="0.5348%" height="15" fill="rgb(220,109,13)"/><text x="42.7252%" y="255.50"></text></g><g><title>implementations_of_trait (77,970 samples, 0.15%)</title><rect x="42.8605%" y="229" width="0.1495%" height="15" fill="rgb(232,18,1)"/><text x="43.1105%" y="239.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (58,460 samples, 0.11%)</title><rect x="42.8979%" y="213" width="0.1121%" height="15" fill="rgb(215,41,42)"/><text x="43.1479%" y="223.50"></text></g><g><title>codegen_module (216,762 samples, 0.42%)</title><rect x="43.9051%" y="293" width="0.4157%" height="15" fill="rgb(224,123,36)"/><text x="44.1551%" y="303.50"></text></g><g><title>codegen_crate (822,349 samples, 1.58%)</title><rect x="43.0249%" y="309" width="1.5770%" height="15" fill="rgb(240,125,3)"/><text x="43.2749%" y="319.50"></text></g><g><title>codegen_module_optimize (2,118,434 samples, 4.06%)</title><rect x="44.6019%" y="309" width="4.0626%" height="15" fill="rgb(205,98,50)"/><text x="44.8519%" y="319.50">code..</text></g><g><title>LLVM_module_optimize (291,863 samples, 0.56%)</title><rect x="48.1048%" y="293" width="0.5597%" height="15" fill="rgb(205,185,37)"/><text x="48.3548%" y="303.50"></text></g><g><title>LLVM_lto_optimize (225,363 samples, 0.43%)</title><rect x="49.3800%" y="293" width="0.4322%" height="15" fill="rgb(238,207,15)"/><text x="49.6300%" y="303.50"></text></g><g><title>LLVM_module_codegen (2,353,926 samples, 4.51%)</title><rect x="49.8122%" y="293" width="4.5142%" height="15" fill="rgb(213,199,42)"/><text x="50.0622%" y="303.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (2,318,536 samples, 4.45%)</title><rect x="49.8801%" y="277" width="4.4463%" height="15" fill="rgb(235,201,11)"/><text x="50.1301%" y="287.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (2,990,233 samples, 5.73%)</title><rect x="48.6645%" y="309" width="5.7344%" height="15" fill="rgb(207,46,11)"/><text x="48.9145%" y="319.50">codegen..</text></g><g><title>AST_validation (79,510 samples, 0.15%)</title><rect x="54.6866%" y="293" width="0.1525%" height="15" fill="rgb(241,35,35)"/><text x="54.9366%" y="303.50"></text></g><g><title>crate_injection (52,351 samples, 0.10%)</title><rect x="54.8937%" y="293" width="0.1004%" height="15" fill="rgb(243,32,47)"/><text x="55.1437%" y="303.50"></text></g><g><title>macro_expand_crate (10,686,368 samples, 20.49%)</title><rect x="54.9941%" y="293" width="20.4935%" height="15" fill="rgb(247,202,23)"/><text x="55.2441%" y="303.50">macro_expand_crate</text></g><g><title>expand_crate (10,674,058 samples, 20.47%)</title><rect x="55.0177%" y="277" width="20.4699%" height="15" fill="rgb(219,102,11)"/><text x="55.2677%" y="287.50">expand_crate</text></g><g><title>metadata_register_crate (5,875,135 samples, 11.27%)</title><rect x="64.2207%" y="261" width="11.2669%" height="15" fill="rgb(243,110,44)"/><text x="64.4707%" y="271.50">metadata_register..</text></g><g><title>metadata_register_crate (574,097 samples, 1.10%)</title><rect x="74.3867%" y="245" width="1.1010%" height="15" fill="rgb(222,74,54)"/><text x="74.6367%" y="255.50"></text></g><g><title>pre_AST_expansion_lint_checks (89,751 samples, 0.17%)</title><rect x="75.4975%" y="293" width="0.1721%" height="15" fill="rgb(216,99,12)"/><text x="75.7475%" y="303.50"></text></g><g><title>late_resolve_crate (587,697 samples, 1.13%)</title><rect x="75.7384%" y="277" width="1.1270%" height="15" fill="rgb(226,22,26)"/><text x="75.9884%" y="287.50"></text></g><g><title>configure_and_expand (11,759,630 samples, 22.55%)</title><rect x="54.3989%" y="309" width="22.5517%" height="15" fill="rgb(217,163,10)"/><text x="54.6489%" y="319.50">configure_and_expand</text></g><g><title>resolve_crate (668,017 samples, 1.28%)</title><rect x="75.6696%" y="293" width="1.2811%" height="15" fill="rgb(213,25,53)"/><text x="75.9196%" y="303.50"></text></g><g><title>drop_ast (65,301 samples, 0.13%)</title><rect x="76.9506%" y="309" width="0.1252%" height="15" fill="rgb(252,105,26)"/><text x="77.2006%" y="319.50"></text></g><g><title>early_lint_checks (162,472 samples, 0.31%)</title><rect x="77.1119%" y="309" width="0.3116%" height="15" fill="rgb(220,39,43)"/><text x="77.3619%" y="319.50"></text></g><g><title>free_global_ctxt (2,115,984 samples, 4.06%)</title><rect x="77.4234%" y="309" width="4.0579%" height="15" fill="rgb(229,68,48)"/><text x="77.6734%" y="319.50">free..</text></g><g><title>crate_hash (70,012 samples, 0.13%)</title><rect x="82.4706%" y="293" width="0.1343%" height="15" fill="rgb(252,8,32)"/><text x="82.7206%" y="303.50"></text></g><g><title>layout_of (71,042 samples, 0.14%)</title><rect x="84.7351%" y="197" width="0.1362%" height="15" fill="rgb(223,20,43)"/><text x="84.9851%" y="207.50"></text></g><g><title>layout_of (168,372 samples, 0.32%)</title><rect x="84.5932%" y="213" width="0.3229%" height="15" fill="rgb(229,81,49)"/><text x="84.8432%" y="223.50"></text></g><g><title>layout_of (304,343 samples, 0.58%)</title><rect x="84.4081%" y="229" width="0.5836%" height="15" fill="rgb(236,28,36)"/><text x="84.6581%" y="239.50"></text></g><g><title>layout_of (518,777 samples, 0.99%)</title><rect x="84.0365%" y="261" width="0.9949%" height="15" fill="rgb(249,185,26)"/><text x="84.2865%" y="271.50"></text></g><g><title>layout_of (437,976 samples, 0.84%)</title><rect x="84.1914%" y="245" width="0.8399%" height="15" fill="rgb(249,174,33)"/><text x="84.4414%" y="255.50"></text></g><g><title>layout_of (591,778 samples, 1.13%)</title><rect x="83.9094%" y="277" width="1.1349%" height="15" fill="rgb(233,201,37)"/><text x="84.1594%" y="287.50"></text></g><g><title>needs_drop_raw (156,903 samples, 0.30%)</title><rect x="86.2250%" y="261" width="0.3009%" height="15" fill="rgb(221,78,26)"/><text x="86.4750%" y="271.50"></text></g><g><title>is_copy_raw (142,453 samples, 0.27%)</title><rect x="86.2527%" y="245" width="0.2732%" height="15" fill="rgb(250,127,30)"/><text x="86.5027%" y="255.50"></text></g><g><title>evaluate_obligation (117,593 samples, 0.23%)</title><rect x="86.3004%" y="229" width="0.2255%" height="15" fill="rgb(230,49,44)"/><text x="86.5504%" y="239.50"></text></g><g><title>optimized_mir (1,925,991 samples, 3.69%)</title><rect x="82.8519%" y="293" width="3.6935%" height="15" fill="rgb(229,67,23)"/><text x="83.1019%" y="303.50">opti..</text></g><g><title>mir_drops_elaborated_and_const_checked (782,789 samples, 1.50%)</title><rect x="85.0443%" y="277" width="1.5012%" height="15" fill="rgb(249,83,47)"/><text x="85.2943%" y="287.50"></text></g><g><title>generate_crate_metadata (2,660,999 samples, 5.10%)</title><rect x="81.4813%" y="309" width="5.1031%" height="15" fill="rgb(215,43,3)"/><text x="81.7313%" y="319.50">genera..</text></g><g><title>hir_lowering (679,537 samples, 1.30%)</title><rect x="86.5844%" y="309" width="1.3032%" height="15" fill="rgb(238,154,13)"/><text x="86.8344%" y="319.50"></text></g><g><title>finish_ongoing_codegen (3,300,647 samples, 6.33%)</title><rect x="87.9096%" y="293" width="6.3297%" height="15" fill="rgb(219,56,2)"/><text x="88.1596%" y="303.50">finish_o..</text></g><g><title>link_crate (717,178 samples, 1.38%)</title><rect x="94.2393%" y="293" width="1.3753%" height="15" fill="rgb(233,0,4)"/><text x="94.4893%" y="303.50"></text></g><g><title>link_binary (699,908 samples, 1.34%)</title><rect x="94.2725%" y="277" width="1.3422%" height="15" fill="rgb(235,30,7)"/><text x="94.5225%" y="287.50"></text></g><g><title>link_rlib (458,916 samples, 0.88%)</title><rect x="94.7346%" y="261" width="0.8801%" height="15" fill="rgb(250,79,13)"/><text x="94.9846%" y="271.50"></text></g><g><title>link (4,035,635 samples, 7.74%)</title><rect x="87.8875%" y="309" width="7.7392%" height="15" fill="rgb(211,146,34)"/><text x="88.1375%" y="319.50">link</text></g><g><title>parse_crate (1,222,264 samples, 2.34%)</title><rect x="95.6268%" y="309" width="2.3440%" height="15" fill="rgb(228,22,38)"/><text x="95.8768%" y="319.50">p..</text></g><g><title>prepare_outputs (197,323 samples, 0.38%)</title><rect x="97.9855%" y="309" width="0.3784%" height="15" fill="rgb(235,168,5)"/><text x="98.2355%" y="319.50"></text></g><g><title>self_profile_alloc_query_strings (391,554 samples, 0.75%)</title><rect x="98.3640%" y="309" width="0.7509%" height="15" fill="rgb(221,155,16)"/><text x="98.6140%" y="319.50"></text></g><g><title>setup_global_ctxt (84,311 samples, 0.16%)</title><rect x="99.1270%" y="309" width="0.1617%" height="15" fill="rgb(215,215,53)"/><text x="99.3770%" y="319.50"></text></g><g><title>all (52,145,213 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(223,4,10)"/><text x="0.2500%" y="351.50"></text></g><g><title>rustc (52,145,213 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(234,103,6)"/><text x="0.2500%" y="335.50">rustc</text></g><g><title>write_crate_metadata (370,934 samples, 0.71%)</title><rect x="99.2887%" y="309" width="0.7113%" height="15" fill="rgb(227,97,0)"/><text x="99.5387%" y="319.50"></text></g></svg></svg>