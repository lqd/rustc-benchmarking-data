<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,805,859 samples, 15.33%)</title><rect x="0.7026%" y="165" width="15.3265%" height="15" fill="rgb(227,0,7)"/><text x="0.9526%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (163,302 samples, 0.14%)</title><rect x="15.8885%" y="149" width="0.1406%" height="15" fill="rgb(217,0,24)"/><text x="16.1385%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (149,542 samples, 0.13%)</title><rect x="15.9003%" y="133" width="0.1287%" height="15" fill="rgb(221,193,54)"/><text x="16.1503%" y="143.50"></text></g><g><title>mir_const (611,226 samples, 0.53%)</title><rect x="17.2854%" y="101" width="0.5261%" height="15" fill="rgb(248,212,6)"/><text x="17.5354%" y="111.50"></text></g><g><title>unsafety_check_result (480,504 samples, 0.41%)</title><rect x="17.3979%" y="85" width="0.4136%" height="15" fill="rgb(208,68,35)"/><text x="17.6479%" y="95.50"></text></g><g><title>mir_built (395,213 samples, 0.34%)</title><rect x="17.4713%" y="69" width="0.3402%" height="15" fill="rgb(232,128,0)"/><text x="17.7213%" y="79.50"></text></g><g><title>mir_promoted (769,140 samples, 0.66%)</title><rect x="17.1576%" y="117" width="0.6620%" height="15" fill="rgb(207,160,47)"/><text x="17.4076%" y="127.50"></text></g><g><title>MIR_borrow_checking (2,039,653 samples, 1.76%)</title><rect x="16.1967%" y="149" width="1.7556%" height="15" fill="rgb(228,23,34)"/><text x="16.4467%" y="159.50"></text></g><g><title>mir_borrowck (2,026,033 samples, 1.74%)</title><rect x="16.2084%" y="133" width="1.7439%" height="15" fill="rgb(218,30,26)"/><text x="16.4584%" y="143.50"></text></g><g><title>hir_module_items (166,002 samples, 0.14%)</title><rect x="17.9560%" y="149" width="0.1429%" height="15" fill="rgb(220,122,19)"/><text x="18.2060%" y="159.50"></text></g><g><title>codegen_fn_attrs (143,273 samples, 0.12%)</title><rect x="18.5208%" y="85" width="0.1233%" height="15" fill="rgb(250,228,42)"/><text x="18.7708%" y="95.50"></text></g><g><title>should_inherit_track_caller (270,895 samples, 0.23%)</title><rect x="18.4157%" y="101" width="0.2332%" height="15" fill="rgb(240,193,28)"/><text x="18.6657%" y="111.50"></text></g><g><title>codegen_fn_attrs (483,186 samples, 0.42%)</title><rect x="18.2526%" y="117" width="0.4159%" height="15" fill="rgb(216,20,37)"/><text x="18.5026%" y="127.50"></text></g><g><title>check_mod_attrs (629,317 samples, 0.54%)</title><rect x="18.1273%" y="133" width="0.5417%" height="15" fill="rgb(206,188,39)"/><text x="18.3773%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (314,563 samples, 0.27%)</title><rect x="18.7469%" y="133" width="0.2708%" height="15" fill="rgb(217,207,13)"/><text x="18.9969%" y="143.50"></text></g><g><title>misc_checking_1 (1,119,112 samples, 0.96%)</title><rect x="18.0992%" y="149" width="0.9633%" height="15" fill="rgb(231,73,38)"/><text x="18.3492%" y="159.50"></text></g><g><title>misc_checking_2 (181,062 samples, 0.16%)</title><rect x="19.0625%" y="149" width="0.1559%" height="15" fill="rgb(225,20,46)"/><text x="19.3125%" y="159.50"></text></g><g><title>death_checking (238,733 samples, 0.21%)</title><rect x="19.2634%" y="133" width="0.2055%" height="15" fill="rgb(210,31,41)"/><text x="19.5134%" y="143.50"></text></g><g><title>item_attrs (157,742 samples, 0.14%)</title><rect x="19.3331%" y="117" width="0.1358%" height="15" fill="rgb(221,200,47)"/><text x="19.5831%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (156,282 samples, 0.13%)</title><rect x="19.3344%" y="101" width="0.1345%" height="15" fill="rgb(226,26,5)"/><text x="19.5844%" y="111.50"></text></g><g><title>crate_lints (1,513,857 samples, 1.30%)</title><rect x="19.4703%" y="117" width="1.3031%" height="15" fill="rgb(249,33,26)"/><text x="19.7203%" y="127.50"></text></g><g><title>type_of (1,016,624 samples, 0.88%)</title><rect x="19.8983%" y="101" width="0.8751%" height="15" fill="rgb(235,183,28)"/><text x="20.1483%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (784,869 samples, 0.68%)</title><rect x="20.0978%" y="85" width="0.6756%" height="15" fill="rgb(221,5,38)"/><text x="20.3478%" y="95.50"></text></g><g><title>lint_checking (1,574,478 samples, 1.36%)</title><rect x="19.4689%" y="133" width="1.3552%" height="15" fill="rgb(247,18,42)"/><text x="19.7189%" y="143.50"></text></g><g><title>privacy_checking_modules (125,751 samples, 0.11%)</title><rect x="20.8923%" y="133" width="0.1082%" height="15" fill="rgb(241,131,45)"/><text x="21.1423%" y="143.50"></text></g><g><title>check_mod_privacy (124,261 samples, 0.11%)</title><rect x="20.8936%" y="117" width="0.1070%" height="15" fill="rgb(249,31,29)"/><text x="21.1436%" y="127.50"></text></g><g><title>misc_checking_3 (2,084,753 samples, 1.79%)</title><rect x="19.2184%" y="149" width="1.7945%" height="15" fill="rgb(225,111,53)"/><text x="19.4684%" y="159.50">m..</text></g><g><title>impl_trait_ref (249,421 samples, 0.21%)</title><rect x="21.5963%" y="53" width="0.2147%" height="15" fill="rgb(238,160,17)"/><text x="21.8463%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (213,821 samples, 0.18%)</title><rect x="21.6269%" y="37" width="0.1840%" height="15" fill="rgb(214,148,48)"/><text x="21.8769%" y="47.50"></text></g><g><title>adt_destructor (860,130 samples, 0.74%)</title><rect x="21.1083%" y="101" width="0.7404%" height="15" fill="rgb(232,36,49)"/><text x="21.3583%" y="111.50"></text></g><g><title>coherent_trait (848,860 samples, 0.73%)</title><rect x="21.1180%" y="85" width="0.7307%" height="15" fill="rgb(209,103,24)"/><text x="21.3680%" y="95.50"></text></g><g><title>specialization_graph_of (845,690 samples, 0.73%)</title><rect x="21.1207%" y="69" width="0.7279%" height="15" fill="rgb(229,88,8)"/><text x="21.3707%" y="79.50"></text></g><g><title>param_env (125,201 samples, 0.11%)</title><rect x="21.8486%" y="101" width="0.1078%" height="15" fill="rgb(213,181,19)"/><text x="22.0986%" y="111.50"></text></g><g><title>impl_parent (4,242,588 samples, 3.65%)</title><rect x="28.9166%" y="85" width="3.6518%" height="15" fill="rgb(254,191,54)"/><text x="29.1666%" y="95.50">impl..</text></g><g><title>metadata_decode_entry_impl_parent (2,272,080 samples, 1.96%)</title><rect x="30.6127%" y="69" width="1.9557%" height="15" fill="rgb(241,83,37)"/><text x="30.8627%" y="79.50">m..</text></g><g><title>impl_trait_ref (10,004,870 samples, 8.61%)</title><rect x="32.5684%" y="85" width="8.6117%" height="15" fill="rgb(233,36,39)"/><text x="32.8184%" y="95.50">impl_trait_r..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,987,525 samples, 6.88%)</title><rect x="34.3048%" y="69" width="6.8753%" height="15" fill="rgb(226,3,54)"/><text x="34.5548%" y="79.50">metadata_..</text></g><g><title>coherent_trait (25,232,452 samples, 21.72%)</title><rect x="21.0589%" y="117" width="21.7190%" height="15" fill="rgb(245,192,40)"/><text x="21.3089%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (24,189,741 samples, 20.82%)</title><rect x="21.9564%" y="101" width="20.8214%" height="15" fill="rgb(238,167,29)"/><text x="22.2064%" y="111.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,854,322 samples, 1.60%)</title><rect x="41.1817%" y="85" width="1.5961%" height="15" fill="rgb(232,182,51)"/><text x="41.4317%" y="95.50"></text></g><g><title>implementations_of_trait (454,766 samples, 0.39%)</title><rect x="42.3864%" y="69" width="0.3914%" height="15" fill="rgb(231,60,39)"/><text x="42.6364%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (372,545 samples, 0.32%)</title><rect x="42.4572%" y="53" width="0.3207%" height="15" fill="rgb(208,69,12)"/><text x="42.7072%" y="63.50"></text></g><g><title>coherence_checking (25,314,552 samples, 21.79%)</title><rect x="21.0320%" y="133" width="21.7896%" height="15" fill="rgb(235,93,37)"/><text x="21.2820%" y="143.50">coherence_checking</text></g><g><title>item_bodies_checking (1,627,769 samples, 1.40%)</title><rect x="42.8466%" y="133" width="1.4011%" height="15" fill="rgb(213,116,39)"/><text x="43.0966%" y="143.50"></text></g><g><title>typeck_item_bodies (1,626,169 samples, 1.40%)</title><rect x="42.8480%" y="117" width="1.3997%" height="15" fill="rgb(222,207,29)"/><text x="43.0980%" y="127.50"></text></g><g><title>typeck (1,614,919 samples, 1.39%)</title><rect x="42.8577%" y="101" width="1.3901%" height="15" fill="rgb(206,96,30)"/><text x="43.1077%" y="111.50"></text></g><g><title>item_types_checking (317,663 samples, 0.27%)</title><rect x="44.2477%" y="133" width="0.2734%" height="15" fill="rgb(218,138,4)"/><text x="44.4977%" y="143.50"></text></g><g><title>check_mod_item_types (314,843 samples, 0.27%)</title><rect x="44.2502%" y="117" width="0.2710%" height="15" fill="rgb(250,191,14)"/><text x="44.5002%" y="127.50"></text></g><g><title>fn_sig (293,464 samples, 0.25%)</title><rect x="44.7400%" y="101" width="0.2526%" height="15" fill="rgb(239,60,40)"/><text x="44.9900%" y="111.50"></text></g><g><title>named_region_map (304,461 samples, 0.26%)</title><rect x="45.0764%" y="85" width="0.2621%" height="15" fill="rgb(206,27,48)"/><text x="45.3264%" y="95.50"></text></g><g><title>resolve_lifetimes (281,701 samples, 0.24%)</title><rect x="45.0960%" y="69" width="0.2425%" height="15" fill="rgb(225,35,8)"/><text x="45.3460%" y="79.50"></text></g><g><title>generics_of (428,652 samples, 0.37%)</title><rect x="44.9926%" y="101" width="0.3690%" height="15" fill="rgb(250,213,24)"/><text x="45.2426%" y="111.50"></text></g><g><title>associated_items (138,402 samples, 0.12%)</title><rect x="45.5959%" y="37" width="0.1191%" height="15" fill="rgb(247,123,22)"/><text x="45.8459%" y="47.50"></text></g><g><title>late_bound_vars_map (190,762 samples, 0.16%)</title><rect x="45.5549%" y="69" width="0.1642%" height="15" fill="rgb(231,138,38)"/><text x="45.8049%" y="79.50"></text></g><g><title>resolve_lifetimes (184,972 samples, 0.16%)</title><rect x="45.5599%" y="53" width="0.1592%" height="15" fill="rgb(231,145,46)"/><text x="45.8099%" y="63.50"></text></g><g><title>explicit_item_bounds (254,003 samples, 0.22%)</title><rect x="45.5072%" y="85" width="0.2186%" height="15" fill="rgb(251,118,11)"/><text x="45.7572%" y="95.50"></text></g><g><title>item_bounds (342,624 samples, 0.29%)</title><rect x="45.4383%" y="101" width="0.2949%" height="15" fill="rgb(217,147,25)"/><text x="45.6883%" y="111.50"></text></g><g><title>explicit_predicates_of (138,352 samples, 0.12%)</title><rect x="45.8209%" y="69" width="0.1191%" height="15" fill="rgb(247,81,37)"/><text x="46.0709%" y="79.50"></text></g><g><title>predicates_of (288,623 samples, 0.25%)</title><rect x="45.7332%" y="101" width="0.2484%" height="15" fill="rgb(209,12,38)"/><text x="45.9832%" y="111.50"></text></g><g><title>predicates_defined_on (248,633 samples, 0.21%)</title><rect x="45.7676%" y="85" width="0.2140%" height="15" fill="rgb(227,1,9)"/><text x="46.0176%" y="95.50"></text></g><g><title>super_predicates_of (125,111 samples, 0.11%)</title><rect x="45.9817%" y="101" width="0.1077%" height="15" fill="rgb(248,47,43)"/><text x="46.2317%" y="111.50"></text></g><g><title>type_collecting (1,968,242 samples, 1.69%)</title><rect x="44.5217%" y="133" width="1.6942%" height="15" fill="rgb(221,10,30)"/><text x="44.7717%" y="143.50"></text></g><g><title>collect_mod_item_types (1,939,231 samples, 1.67%)</title><rect x="44.5467%" y="117" width="1.6692%" height="15" fill="rgb(210,229,1)"/><text x="44.7967%" y="127.50"></text></g><g><title>type_of (140,662 samples, 0.12%)</title><rect x="46.0948%" y="101" width="0.1211%" height="15" fill="rgb(222,148,37)"/><text x="46.3448%" y="111.50"></text></g><g><title>evaluate_obligation (155,722 samples, 0.13%)</title><rect x="46.5001%" y="101" width="0.1340%" height="15" fill="rgb(234,67,33)"/><text x="46.7501%" y="111.50"></text></g><g><title>check_impl_item_well_formed (586,678 samples, 0.50%)</title><rect x="46.2605%" y="117" width="0.5050%" height="15" fill="rgb(247,98,35)"/><text x="46.5105%" y="127.50"></text></g><g><title>evaluate_obligation (127,520 samples, 0.11%)</title><rect x="47.0910%" y="101" width="0.1098%" height="15" fill="rgb(247,138,52)"/><text x="47.3410%" y="111.50"></text></g><g><title>check_item_well_formed (751,207 samples, 0.65%)</title><rect x="46.7655%" y="117" width="0.6466%" height="15" fill="rgb(213,79,30)"/><text x="47.0155%" y="127.50"></text></g><g><title>analysis (37,070,284 samples, 31.91%)</title><rect x="16.0291%" y="165" width="31.9084%" height="15" fill="rgb(246,177,23)"/><text x="16.2791%" y="175.50">analysis</text></g><g><title>type_check_crate (31,280,300 samples, 26.92%)</title><rect x="21.0128%" y="149" width="26.9247%" height="15" fill="rgb(230,62,27)"/><text x="21.2628%" y="159.50">type_check_crate</text></g><g><title>wf_checking (1,999,423 samples, 1.72%)</title><rect x="46.2165%" y="133" width="1.7210%" height="15" fill="rgb(216,154,8)"/><text x="46.4665%" y="143.50"></text></g><g><title>check_trait_item_well_formed (610,428 samples, 0.53%)</title><rect x="47.4121%" y="117" width="0.5254%" height="15" fill="rgb(244,35,45)"/><text x="47.6621%" y="127.50"></text></g><g><title>is_freeze_raw (147,792 samples, 0.13%)</title><rect x="49.4724%" y="117" width="0.1272%" height="15" fill="rgb(251,115,12)"/><text x="49.7224%" y="127.50"></text></g><g><title>evaluate_obligation (137,102 samples, 0.12%)</title><rect x="49.4816%" y="101" width="0.1180%" height="15" fill="rgb(240,54,50)"/><text x="49.7316%" y="111.50"></text></g><g><title>fn_abi_of_instance (480,666 samples, 0.41%)</title><rect x="49.3859%" y="133" width="0.4137%" height="15" fill="rgb(233,84,52)"/><text x="49.6359%" y="143.50"></text></g><g><title>codegen_module (1,602,038 samples, 1.38%)</title><rect x="48.5525%" y="149" width="1.3790%" height="15" fill="rgb(207,117,47)"/><text x="48.8025%" y="159.50"></text></g><g><title>layout_of (129,560 samples, 0.11%)</title><rect x="50.2084%" y="85" width="0.1115%" height="15" fill="rgb(249,43,39)"/><text x="50.4584%" y="95.50"></text></g><g><title>metadata_decode_entry_optimized_mir (137,162 samples, 0.12%)</title><rect x="50.3199%" y="85" width="0.1181%" height="15" fill="rgb(209,38,44)"/><text x="50.5699%" y="95.50"></text></g><g><title>eval_to_const_value_raw (141,751 samples, 0.12%)</title><rect x="50.5491%" y="69" width="0.1220%" height="15" fill="rgb(236,212,23)"/><text x="50.7991%" y="79.50"></text></g><g><title>eval_to_const_value_raw (138,741 samples, 0.12%)</title><rect x="50.5516%" y="53" width="0.1194%" height="15" fill="rgb(242,79,21)"/><text x="50.8016%" y="63.50"></text></g><g><title>eval_to_allocation_raw (132,871 samples, 0.11%)</title><rect x="50.5567%" y="37" width="0.1144%" height="15" fill="rgb(211,96,35)"/><text x="50.8067%" y="47.50"></text></g><g><title>optimized_mir (696,387 samples, 0.60%)</title><rect x="50.0746%" y="101" width="0.5994%" height="15" fill="rgb(253,215,40)"/><text x="50.3246%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (159,661 samples, 0.14%)</title><rect x="50.5365%" y="85" width="0.1374%" height="15" fill="rgb(211,81,21)"/><text x="50.7865%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (905,029 samples, 0.78%)</title><rect x="49.9510%" y="117" width="0.7790%" height="15" fill="rgb(208,190,38)"/><text x="50.2010%" y="127.50"></text></g><g><title>monomorphization_collector (930,770 samples, 0.80%)</title><rect x="49.9494%" y="133" width="0.8012%" height="15" fill="rgb(235,213,38)"/><text x="50.1994%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,013,041 samples, 0.87%)</title><rect x="49.9319%" y="149" width="0.8720%" height="15" fill="rgb(237,122,38)"/><text x="50.1819%" y="159.50"></text></g><g><title>codegen_crate (3,394,217 samples, 2.92%)</title><rect x="47.9476%" y="165" width="2.9216%" height="15" fill="rgb(244,218,35)"/><text x="48.1976%" y="175.50">co..</text></g><g><title>codegen_module_optimize (6,883,928 samples, 5.93%)</title><rect x="50.8692%" y="165" width="5.9254%" height="15" fill="rgb(240,68,47)"/><text x="51.1192%" y="175.50">codegen_..</text></g><g><title>LLVM_module_optimize (5,963,667 samples, 5.13%)</title><rect x="51.6613%" y="149" width="5.1333%" height="15" fill="rgb(210,16,53)"/><text x="51.9113%" y="159.50">LLVM_m..</text></g><g><title>LLVM_lto_optimize (2,610,129 samples, 2.25%)</title><rect x="57.3728%" y="149" width="2.2467%" height="15" fill="rgb(235,124,12)"/><text x="57.6228%" y="159.50">L..</text></g><g><title>LLVM_module_codegen (6,832,777 samples, 5.88%)</title><rect x="59.6194%" y="149" width="5.8813%" height="15" fill="rgb(224,169,11)"/><text x="59.8694%" y="159.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (6,715,416 samples, 5.78%)</title><rect x="59.7205%" y="133" width="5.7803%" height="15" fill="rgb(250,166,2)"/><text x="59.9705%" y="143.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (10,199,064 samples, 8.78%)</title><rect x="56.7946%" y="165" width="8.7789%" height="15" fill="rgb(242,216,29)"/><text x="57.0446%" y="175.50">codegen_modu..</text></g><g><title>metadata_load_macro (410,645 samples, 0.35%)</title><rect x="75.8279%" y="117" width="0.3535%" height="15" fill="rgb(230,116,27)"/><text x="76.0779%" y="127.50"></text></g><g><title>metadata_register_crate (2,679,200 samples, 2.31%)</title><rect x="76.1814%" y="117" width="2.3061%" height="15" fill="rgb(228,99,48)"/><text x="76.4314%" y="127.50">m..</text></g><g><title>metadata_register_crate (972,730 samples, 0.84%)</title><rect x="77.6503%" y="101" width="0.8373%" height="15" fill="rgb(253,11,6)"/><text x="77.9003%" y="111.50"></text></g><g><title>macro_expand_crate (14,565,642 samples, 12.54%)</title><rect x="65.9592%" y="149" width="12.5375%" height="15" fill="rgb(247,143,39)"/><text x="66.2092%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (14,549,012 samples, 12.52%)</title><rect x="65.9735%" y="133" width="12.5231%" height="15" fill="rgb(236,97,10)"/><text x="66.2235%" y="143.50">expand_crate</text></g><g><title>finalize_macro_resolutions (340,883 samples, 0.29%)</title><rect x="78.6134%" y="133" width="0.2934%" height="15" fill="rgb(233,208,19)"/><text x="78.8634%" y="143.50"></text></g><g><title>late_resolve_crate (1,118,783 samples, 0.96%)</title><rect x="78.9068%" y="133" width="0.9630%" height="15" fill="rgb(216,164,2)"/><text x="79.1568%" y="143.50"></text></g><g><title>configure_and_expand (16,673,616 samples, 14.35%)</title><rect x="65.5735%" y="165" width="14.3519%" height="15" fill="rgb(220,129,5)"/><text x="65.8235%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (1,551,508 samples, 1.34%)</title><rect x="78.5899%" y="149" width="1.3355%" height="15" fill="rgb(242,17,10)"/><text x="78.8399%" y="159.50"></text></g><g><title>early_lint_checks (240,683 samples, 0.21%)</title><rect x="80.0000%" y="165" width="0.2072%" height="15" fill="rgb(242,107,0)"/><text x="80.2500%" y="175.50"></text></g><g><title>free_global_ctxt (2,841,462 samples, 2.45%)</title><rect x="80.2071%" y="165" width="2.4458%" height="15" fill="rgb(251,28,31)"/><text x="80.4571%" y="175.50">fr..</text></g><g><title>optimized_mir (522,166 samples, 0.45%)</title><rect x="83.2074%" y="149" width="0.4495%" height="15" fill="rgb(233,223,10)"/><text x="83.4574%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (197,592 samples, 0.17%)</title><rect x="83.4868%" y="133" width="0.1701%" height="15" fill="rgb(215,21,27)"/><text x="83.7368%" y="143.50"></text></g><g><title>generate_crate_metadata (1,195,913 samples, 1.03%)</title><rect x="82.6529%" y="165" width="1.0294%" height="15" fill="rgb(232,23,21)"/><text x="82.9029%" y="175.50"></text></g><g><title>hir_lowering (1,198,114 samples, 1.03%)</title><rect x="83.6823%" y="165" width="1.0313%" height="15" fill="rgb(244,5,23)"/><text x="83.9323%" y="175.50"></text></g><g><title>finish_ongoing_codegen (14,579,514 samples, 12.55%)</title><rect x="84.7254%" y="149" width="12.5494%" height="15" fill="rgb(226,81,46)"/><text x="84.9754%" y="159.50">finish_ongoing_code..</text></g><g><title>link_crate (647,177 samples, 0.56%)</title><rect x="97.2748%" y="149" width="0.5571%" height="15" fill="rgb(247,70,30)"/><text x="97.5248%" y="159.50"></text></g><g><title>link_binary (638,847 samples, 0.55%)</title><rect x="97.2820%" y="133" width="0.5499%" height="15" fill="rgb(212,68,19)"/><text x="97.5320%" y="143.50"></text></g><g><title>link_rlib (374,555 samples, 0.32%)</title><rect x="97.5095%" y="117" width="0.3224%" height="15" fill="rgb(240,187,13)"/><text x="97.7595%" y="127.50"></text></g><g><title>link (15,248,861 samples, 13.13%)</title><rect x="84.7136%" y="165" width="13.1255%" height="15" fill="rgb(223,113,26)"/><text x="84.9636%" y="175.50">link</text></g><g><title>parse_crate (1,166,313 samples, 1.00%)</title><rect x="97.8391%" y="165" width="1.0039%" height="15" fill="rgb(206,192,2)"/><text x="98.0891%" y="175.50"></text></g><g><title>prepare_outputs (362,474 samples, 0.31%)</title><rect x="98.8522%" y="165" width="0.3120%" height="15" fill="rgb(241,108,4)"/><text x="99.1022%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (516,585 samples, 0.44%)</title><rect x="99.1642%" y="165" width="0.4447%" height="15" fill="rgb(247,173,49)"/><text x="99.4142%" y="175.50"></text></g><g><title>setup_global_ctxt (129,001 samples, 0.11%)</title><rect x="99.6100%" y="165" width="0.1110%" height="15" fill="rgb(224,114,35)"/><text x="99.8600%" y="175.50"></text></g><g><title>all (116,177,039 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (116,177,039 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,172,44)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (324,074 samples, 0.28%)</title><rect x="99.7211%" y="165" width="0.2789%" height="15" fill="rgb(236,23,11)"/><text x="99.9711%" y="175.50"></text></g></svg></svg>