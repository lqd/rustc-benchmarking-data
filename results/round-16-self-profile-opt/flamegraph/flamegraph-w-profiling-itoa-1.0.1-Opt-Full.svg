<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,426,532 samples, 4.43%)</title><rect x="0.5091%" y="245" width="4.4337%" height="15" fill="rgb(227,0,7)"/><text x="0.7591%" y="255.50">LLVM_..</text></g><g><title>codegen_fn_attrs (150,351 samples, 0.12%)</title><rect x="12.4846%" y="149" width="0.1228%" height="15" fill="rgb(217,0,24)"/><text x="12.7346%" y="159.50"></text></g><g><title>is_copy_raw (165,183 samples, 0.13%)</title><rect x="14.8015%" y="133" width="0.1350%" height="15" fill="rgb(221,193,54)"/><text x="15.0515%" y="143.50"></text></g><g><title>evaluate_obligation (128,662 samples, 0.11%)</title><rect x="14.8314%" y="117" width="0.1051%" height="15" fill="rgb(248,212,6)"/><text x="15.0814%" y="127.50"></text></g><g><title>thir_body (1,276,493 samples, 1.04%)</title><rect x="15.1207%" y="133" width="1.0430%" height="15" fill="rgb(208,68,35)"/><text x="15.3707%" y="143.50"></text></g><g><title>mir_const (5,397,190 samples, 4.41%)</title><rect x="11.7575%" y="181" width="4.4097%" height="15" fill="rgb(232,128,0)"/><text x="12.0075%" y="191.50">mir_c..</text></g><g><title>unsafety_check_result (4,829,193 samples, 3.95%)</title><rect x="12.2215%" y="165" width="3.9457%" height="15" fill="rgb(207,160,47)"/><text x="12.4715%" y="175.50">unsa..</text></g><g><title>mir_built (4,356,877 samples, 3.56%)</title><rect x="12.6075%" y="149" width="3.5598%" height="15" fill="rgb(228,23,34)"/><text x="12.8575%" y="159.50">mir_..</text></g><g><title>mir_promoted (5,977,817 samples, 4.88%)</title><rect x="11.3241%" y="197" width="4.8841%" height="15" fill="rgb(218,30,26)"/><text x="11.5741%" y="207.50">mir_pr..</text></g><g><title>type_op_normalize_ty (124,941 samples, 0.10%)</title><rect x="16.2619%" y="197" width="0.1021%" height="15" fill="rgb(220,122,19)"/><text x="16.5119%" y="207.50"></text></g><g><title>MIR_borrow_checking (14,473,724 samples, 11.83%)</title><rect x="5.1803%" y="229" width="11.8257%" height="15" fill="rgb(250,228,42)"/><text x="5.4303%" y="239.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (14,421,524 samples, 11.78%)</title><rect x="5.2230%" y="213" width="11.7830%" height="15" fill="rgb(240,193,28)"/><text x="5.4730%" y="223.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (785,837 samples, 0.64%)</title><rect x="16.3639%" y="197" width="0.6421%" height="15" fill="rgb(216,20,37)"/><text x="16.6139%" y="207.50"></text></g><g><title>hir_module_items (141,991 samples, 0.12%)</title><rect x="17.0667%" y="229" width="0.1160%" height="15" fill="rgb(206,188,39)"/><text x="17.3167%" y="239.50"></text></g><g><title>codegen_fn_attrs (215,232 samples, 0.18%)</title><rect x="17.3823%" y="197" width="0.1759%" height="15" fill="rgb(217,207,13)"/><text x="17.6323%" y="207.50"></text></g><g><title>should_inherit_track_caller (182,142 samples, 0.15%)</title><rect x="17.4093%" y="181" width="0.1488%" height="15" fill="rgb(231,73,38)"/><text x="17.6593%" y="191.50"></text></g><g><title>check_mod_attrs (436,026 samples, 0.36%)</title><rect x="17.2020%" y="213" width="0.3563%" height="15" fill="rgb(225,20,46)"/><text x="17.4520%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (220,562 samples, 0.18%)</title><rect x="17.6729%" y="213" width="0.1802%" height="15" fill="rgb(210,31,41)"/><text x="17.9229%" y="223.50"></text></g><g><title>misc_checking_1 (855,150 samples, 0.70%)</title><rect x="17.1832%" y="229" width="0.6987%" height="15" fill="rgb(221,200,47)"/><text x="17.4332%" y="239.50"></text></g><g><title>liveness_and_intrinsic_checking (475,196 samples, 0.39%)</title><rect x="17.8830%" y="213" width="0.3883%" height="15" fill="rgb(226,26,5)"/><text x="18.1330%" y="223.50"></text></g><g><title>check_mod_liveness (377,535 samples, 0.31%)</title><rect x="17.9628%" y="197" width="0.3085%" height="15" fill="rgb(249,33,26)"/><text x="18.2128%" y="207.50"></text></g><g><title>misc_checking_2 (834,610 samples, 0.68%)</title><rect x="17.8819%" y="229" width="0.6819%" height="15" fill="rgb(235,183,28)"/><text x="18.1319%" y="239.50"></text></g><g><title>match_checking (358,134 samples, 0.29%)</title><rect x="18.2712%" y="213" width="0.2926%" height="15" fill="rgb(221,5,38)"/><text x="18.5212%" y="223.50"></text></g><g><title>check_match (334,033 samples, 0.27%)</title><rect x="18.2909%" y="197" width="0.2729%" height="15" fill="rgb(247,18,42)"/><text x="18.5409%" y="207.50"></text></g><g><title>check_private_in_public (138,171 samples, 0.11%)</title><rect x="18.5720%" y="213" width="0.1129%" height="15" fill="rgb(241,131,45)"/><text x="18.8220%" y="223.50"></text></g><g><title>death_checking (216,473 samples, 0.18%)</title><rect x="18.6849%" y="213" width="0.1769%" height="15" fill="rgb(249,31,29)"/><text x="18.9349%" y="223.50"></text></g><g><title>crate_lints (1,212,683 samples, 0.99%)</title><rect x="18.8630%" y="197" width="0.9908%" height="15" fill="rgb(225,111,53)"/><text x="19.1130%" y="207.50"></text></g><g><title>type_of (522,996 samples, 0.43%)</title><rect x="19.4265%" y="181" width="0.4273%" height="15" fill="rgb(238,160,17)"/><text x="19.6765%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (441,826 samples, 0.36%)</title><rect x="19.4928%" y="165" width="0.3610%" height="15" fill="rgb(214,148,48)"/><text x="19.7428%" y="175.50"></text></g><g><title>lint_checking (1,684,059 samples, 1.38%)</title><rect x="18.8618%" y="213" width="1.3759%" height="15" fill="rgb(232,36,49)"/><text x="19.1118%" y="223.50"></text></g><g><title>module_lints (469,886 samples, 0.38%)</title><rect x="19.8538%" y="197" width="0.3839%" height="15" fill="rgb(209,103,24)"/><text x="20.1038%" y="207.50"></text></g><g><title>lint_mod (466,556 samples, 0.38%)</title><rect x="19.8566%" y="181" width="0.3812%" height="15" fill="rgb(229,88,8)"/><text x="20.1066%" y="191.50"></text></g><g><title>privacy_access_levels (183,153 samples, 0.15%)</title><rect x="20.2378%" y="213" width="0.1496%" height="15" fill="rgb(213,181,19)"/><text x="20.4878%" y="223.50"></text></g><g><title>privacy_checking_modules (580,976 samples, 0.47%)</title><rect x="20.3874%" y="213" width="0.4747%" height="15" fill="rgb(254,191,54)"/><text x="20.6374%" y="223.50"></text></g><g><title>check_mod_privacy (578,526 samples, 0.47%)</title><rect x="20.3894%" y="197" width="0.4727%" height="15" fill="rgb(241,83,37)"/><text x="20.6394%" y="207.50"></text></g><g><title>misc_checking_3 (2,823,182 samples, 2.31%)</title><rect x="18.5639%" y="229" width="2.3067%" height="15" fill="rgb(233,36,39)"/><text x="18.8139%" y="239.50">m..</text></g><g><title>impl_parent (230,723 samples, 0.19%)</title><rect x="21.2215%" y="165" width="0.1885%" height="15" fill="rgb(226,3,54)"/><text x="21.4715%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (148,811 samples, 0.12%)</title><rect x="21.2884%" y="149" width="0.1216%" height="15" fill="rgb(245,192,40)"/><text x="21.5384%" y="159.50"></text></g><g><title>impl_trait_ref (748,846 samples, 0.61%)</title><rect x="21.4100%" y="165" width="0.6118%" height="15" fill="rgb(238,167,29)"/><text x="21.6600%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (669,434 samples, 0.55%)</title><rect x="21.4749%" y="149" width="0.5470%" height="15" fill="rgb(232,182,51)"/><text x="21.7249%" y="159.50"></text></g><g><title>coherent_trait (1,423,596 samples, 1.16%)</title><rect x="20.9227%" y="197" width="1.1631%" height="15" fill="rgb(231,60,39)"/><text x="21.1727%" y="207.50"></text></g><g><title>specialization_graph_of (1,414,186 samples, 1.16%)</title><rect x="20.9304%" y="181" width="1.1555%" height="15" fill="rgb(208,69,12)"/><text x="21.1804%" y="191.50"></text></g><g><title>coherence_checking (1,475,766 samples, 1.21%)</title><rect x="20.9133%" y="213" width="1.2058%" height="15" fill="rgb(235,93,37)"/><text x="21.1633%" y="223.50"></text></g><g><title>associated_item (675,238 samples, 0.55%)</title><rect x="40.4286%" y="149" width="0.5517%" height="15" fill="rgb(213,116,39)"/><text x="40.6786%" y="159.50"></text></g><g><title>metadata_decode_entry_associated_item (543,267 samples, 0.44%)</title><rect x="40.5364%" y="133" width="0.4439%" height="15" fill="rgb(222,207,29)"/><text x="40.7864%" y="143.50"></text></g><g><title>associated_items (902,493 samples, 0.74%)</title><rect x="40.2618%" y="165" width="0.7374%" height="15" fill="rgb(206,96,30)"/><text x="40.5118%" y="175.50"></text></g><g><title>mir_for_ctfe (172,202 samples, 0.14%)</title><rect x="41.1498%" y="133" width="0.1407%" height="15" fill="rgb(218,138,4)"/><text x="41.3998%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (156,422 samples, 0.13%)</title><rect x="41.1627%" y="117" width="0.1278%" height="15" fill="rgb(250,191,14)"/><text x="41.4127%" y="127.50"></text></g><g><title>eval_to_allocation_raw (262,403 samples, 0.21%)</title><rect x="41.0764%" y="149" width="0.2144%" height="15" fill="rgb(239,60,40)"/><text x="41.3264%" y="159.50"></text></g><g><title>mir_const_qualif (136,282 samples, 0.11%)</title><rect x="41.3680%" y="117" width="0.1113%" height="15" fill="rgb(206,27,48)"/><text x="41.6180%" y="127.50"></text></g><g><title>mir_borrowck (285,364 samples, 0.23%)</title><rect x="41.6053%" y="85" width="0.2332%" height="15" fill="rgb(225,35,8)"/><text x="41.8553%" y="95.50"></text></g><g><title>mir_for_ctfe (441,176 samples, 0.36%)</title><rect x="41.4794%" y="117" width="0.3605%" height="15" fill="rgb(250,213,24)"/><text x="41.7294%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (403,255 samples, 0.33%)</title><rect x="41.5103%" y="101" width="0.3295%" height="15" fill="rgb(247,123,22)"/><text x="41.7603%" y="111.50"></text></g><g><title>eval_to_const_value_raw (944,301 samples, 0.77%)</title><rect x="41.0693%" y="165" width="0.7715%" height="15" fill="rgb(231,138,38)"/><text x="41.3193%" y="175.50"></text></g><g><title>eval_to_const_value_raw (673,178 samples, 0.55%)</title><rect x="41.2908%" y="149" width="0.5500%" height="15" fill="rgb(231,145,46)"/><text x="41.5408%" y="159.50"></text></g><g><title>eval_to_allocation_raw (663,228 samples, 0.54%)</title><rect x="41.2989%" y="133" width="0.5419%" height="15" fill="rgb(251,118,11)"/><text x="41.5489%" y="143.50"></text></g><g><title>generics_of (609,508 samples, 0.50%)</title><rect x="44.9509%" y="149" width="0.4980%" height="15" fill="rgb(217,147,25)"/><text x="45.2009%" y="159.50"></text></g><g><title>metadata_decode_entry_generics_of (441,286 samples, 0.36%)</title><rect x="45.0883%" y="133" width="0.3605%" height="15" fill="rgb(247,81,37)"/><text x="45.3383%" y="143.50"></text></g><g><title>impl_polarity (161,272 samples, 0.13%)</title><rect x="45.5281%" y="149" width="0.1318%" height="15" fill="rgb(209,12,38)"/><text x="45.7781%" y="159.50"></text></g><g><title>impl_trait_ref (871,415 samples, 0.71%)</title><rect x="45.6598%" y="149" width="0.7120%" height="15" fill="rgb(227,1,9)"/><text x="45.9098%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (706,242 samples, 0.58%)</title><rect x="45.7948%" y="133" width="0.5770%" height="15" fill="rgb(248,47,43)"/><text x="46.0448%" y="143.50"></text></g><g><title>opt_def_kind (184,552 samples, 0.15%)</title><rect x="46.6311%" y="133" width="0.1508%" height="15" fill="rgb(221,10,30)"/><text x="46.8811%" y="143.50"></text></g><g><title>explicit_predicates_of (155,942 samples, 0.13%)</title><rect x="46.9871%" y="117" width="0.1274%" height="15" fill="rgb(210,229,1)"/><text x="47.2371%" y="127.50"></text></g><g><title>predicates_of (989,221 samples, 0.81%)</title><rect x="46.4232%" y="149" width="0.8082%" height="15" fill="rgb(222,148,37)"/><text x="46.6732%" y="159.50"></text></g><g><title>predicates_defined_on (550,188 samples, 0.45%)</title><rect x="46.7819%" y="133" width="0.4495%" height="15" fill="rgb(234,67,33)"/><text x="47.0319%" y="143.50"></text></g><g><title>inferred_outlives_of (143,083 samples, 0.12%)</title><rect x="47.1145%" y="117" width="0.1169%" height="15" fill="rgb(247,98,35)"/><text x="47.3645%" y="127.50"></text></g><g><title>specializes (2,707,389 samples, 2.21%)</title><rect x="47.2315%" y="149" width="2.2121%" height="15" fill="rgb(247,138,52)"/><text x="47.4815%" y="159.50">s..</text></g><g><title>param_env (1,607,667 samples, 1.31%)</title><rect x="48.1300%" y="133" width="1.3135%" height="15" fill="rgb(213,79,30)"/><text x="48.3800%" y="143.50"></text></g><g><title>def_span (731,086 samples, 0.60%)</title><rect x="48.8462%" y="117" width="0.5973%" height="15" fill="rgb(246,177,23)"/><text x="49.0962%" y="127.50"></text></g><g><title>metadata_decode_entry_def_span (646,895 samples, 0.53%)</title><rect x="48.9150%" y="101" width="0.5285%" height="15" fill="rgb(230,62,27)"/><text x="49.1650%" y="111.50"></text></g><g><title>trait_impls_of (348,424 samples, 0.28%)</title><rect x="49.4543%" y="149" width="0.2847%" height="15" fill="rgb(216,154,8)"/><text x="49.7043%" y="159.50"></text></g><g><title>implementations_of_trait (124,680 samples, 0.10%)</title><rect x="49.6371%" y="133" width="0.1019%" height="15" fill="rgb(244,35,45)"/><text x="49.8871%" y="143.50"></text></g><g><title>evaluate_obligation (9,688,103 samples, 7.92%)</title><rect x="41.8408%" y="165" width="7.9156%" height="15" fill="rgb(251,115,12)"/><text x="42.0908%" y="175.50">evaluate_ob..</text></g><g><title>lint_levels (235,532 samples, 0.19%)</title><rect x="50.1030%" y="165" width="0.1924%" height="15" fill="rgb(240,54,50)"/><text x="50.3530%" y="175.50"></text></g><g><title>method_autoderef_steps (187,742 samples, 0.15%)</title><rect x="50.3114%" y="165" width="0.1534%" height="15" fill="rgb(233,84,52)"/><text x="50.5614%" y="175.50"></text></g><g><title>predicates_of (235,944 samples, 0.19%)</title><rect x="50.5431%" y="165" width="0.1928%" height="15" fill="rgb(207,117,47)"/><text x="50.7931%" y="175.50"></text></g><g><title>predicates_defined_on (158,654 samples, 0.13%)</title><rect x="50.6062%" y="149" width="0.1296%" height="15" fill="rgb(249,43,39)"/><text x="50.8562%" y="159.50"></text></g><g><title>specializes (177,723 samples, 0.15%)</title><rect x="50.7622%" y="165" width="0.1452%" height="15" fill="rgb(209,38,44)"/><text x="51.0122%" y="175.50"></text></g><g><title>item_bodies_checking (35,319,269 samples, 28.86%)</title><rect x="22.1377%" y="213" width="28.8574%" height="15" fill="rgb(236,212,23)"/><text x="22.3877%" y="223.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (35,315,989 samples, 28.85%)</title><rect x="22.1404%" y="197" width="28.8547%" height="15" fill="rgb(242,79,21)"/><text x="22.3904%" y="207.50">typeck_item_bodies</text></g><g><title>typeck (35,275,479 samples, 28.82%)</title><rect x="22.1735%" y="181" width="28.8216%" height="15" fill="rgb(211,96,35)"/><text x="22.4235%" y="191.50">typeck</text></g><g><title>item_types_checking (996,111 samples, 0.81%)</title><rect x="50.9950%" y="213" width="0.8139%" height="15" fill="rgb(253,215,40)"/><text x="51.2450%" y="223.50"></text></g><g><title>check_mod_item_types (992,991 samples, 0.81%)</title><rect x="50.9976%" y="197" width="0.8113%" height="15" fill="rgb(211,81,21)"/><text x="51.2476%" y="207.50"></text></g><g><title>fn_sig (181,851 samples, 0.15%)</title><rect x="51.9611%" y="181" width="0.1486%" height="15" fill="rgb(208,190,38)"/><text x="52.2111%" y="191.50"></text></g><g><title>named_region_map (178,633 samples, 0.15%)</title><rect x="52.1680%" y="165" width="0.1460%" height="15" fill="rgb(235,213,38)"/><text x="52.4180%" y="175.50"></text></g><g><title>resolve_lifetimes (169,392 samples, 0.14%)</title><rect x="52.1755%" y="149" width="0.1384%" height="15" fill="rgb(237,122,38)"/><text x="52.4255%" y="159.50"></text></g><g><title>generics_of (261,415 samples, 0.21%)</title><rect x="52.1097%" y="181" width="0.2136%" height="15" fill="rgb(244,218,35)"/><text x="52.3597%" y="191.50"></text></g><g><title>predicates_of (286,053 samples, 0.23%)</title><rect x="52.4080%" y="181" width="0.2337%" height="15" fill="rgb(240,68,47)"/><text x="52.6580%" y="191.50"></text></g><g><title>predicates_defined_on (257,063 samples, 0.21%)</title><rect x="52.4317%" y="165" width="0.2100%" height="15" fill="rgb(210,16,53)"/><text x="52.6817%" y="175.50"></text></g><g><title>inferred_outlives_of (130,362 samples, 0.11%)</title><rect x="52.5352%" y="149" width="0.1065%" height="15" fill="rgb(235,124,12)"/><text x="52.7852%" y="159.50"></text></g><g><title>type_collecting (1,186,603 samples, 0.97%)</title><rect x="51.8098%" y="213" width="0.9695%" height="15" fill="rgb(224,169,11)"/><text x="52.0598%" y="223.50"></text></g><g><title>collect_mod_item_types (1,178,323 samples, 0.96%)</title><rect x="51.8166%" y="197" width="0.9627%" height="15" fill="rgb(250,166,2)"/><text x="52.0666%" y="207.50"></text></g><g><title>mir_const_qualif (507,885 samples, 0.41%)</title><rect x="53.9515%" y="133" width="0.4150%" height="15" fill="rgb(242,216,29)"/><text x="54.2015%" y="143.50"></text></g><g><title>mir_const (422,635 samples, 0.35%)</title><rect x="54.0212%" y="117" width="0.3453%" height="15" fill="rgb(230,116,27)"/><text x="54.2712%" y="127.50"></text></g><g><title>unsafety_check_result (279,035 samples, 0.23%)</title><rect x="54.1385%" y="101" width="0.2280%" height="15" fill="rgb(228,99,48)"/><text x="54.3885%" y="111.50"></text></g><g><title>mir_built (238,753 samples, 0.20%)</title><rect x="54.1714%" y="85" width="0.1951%" height="15" fill="rgb(253,11,6)"/><text x="54.4214%" y="95.50"></text></g><g><title>mir_borrowck (1,198,523 samples, 0.98%)</title><rect x="54.8797%" y="101" width="0.9792%" height="15" fill="rgb(247,143,39)"/><text x="55.1297%" y="111.50"></text></g><g><title>mir_for_ctfe (1,833,791 samples, 1.50%)</title><rect x="54.3665%" y="133" width="1.4983%" height="15" fill="rgb(236,97,10)"/><text x="54.6165%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,678,239 samples, 1.37%)</title><rect x="54.4936%" y="117" width="1.3712%" height="15" fill="rgb(233,208,19)"/><text x="54.7436%" y="127.50"></text></g><g><title>mir_const_qualif (188,392 samples, 0.15%)</title><rect x="56.0229%" y="69" width="0.1539%" height="15" fill="rgb(216,164,2)"/><text x="56.2729%" y="79.50"></text></g><g><title>mir_const (156,362 samples, 0.13%)</title><rect x="56.0490%" y="53" width="0.1278%" height="15" fill="rgb(220,129,5)"/><text x="56.2990%" y="63.50"></text></g><g><title>mir_borrowck (422,325 samples, 0.35%)</title><rect x="56.3614%" y="37" width="0.3451%" height="15" fill="rgb(242,17,10)"/><text x="56.6114%" y="47.50"></text></g><g><title>mir_for_ctfe (651,207 samples, 0.53%)</title><rect x="56.1768%" y="69" width="0.5321%" height="15" fill="rgb(242,107,0)"/><text x="56.4268%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (597,027 samples, 0.49%)</title><rect x="56.2211%" y="53" width="0.4878%" height="15" fill="rgb(251,28,31)"/><text x="56.4711%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,198,603 samples, 0.98%)</title><rect x="55.9031%" y="117" width="0.9793%" height="15" fill="rgb(233,223,10)"/><text x="56.1531%" y="127.50"></text></g><g><title>eval_to_const_value_raw (1,187,583 samples, 0.97%)</title><rect x="55.9121%" y="101" width="0.9703%" height="15" fill="rgb(215,21,27)"/><text x="56.1621%" y="111.50"></text></g><g><title>eval_to_allocation_raw (1,170,383 samples, 0.96%)</title><rect x="55.9261%" y="85" width="0.9563%" height="15" fill="rgb(232,23,21)"/><text x="56.1761%" y="95.50"></text></g><g><title>typeck (212,372 samples, 0.17%)</title><rect x="56.7089%" y="69" width="0.1735%" height="15" fill="rgb(244,5,23)"/><text x="56.9589%" y="79.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,265,475 samples, 1.03%)</title><rect x="55.8689%" y="133" width="1.0339%" height="15" fill="rgb(226,81,46)"/><text x="56.1189%" y="143.50"></text></g><g><title>param_env (139,900 samples, 0.11%)</title><rect x="57.3562%" y="117" width="0.1143%" height="15" fill="rgb(247,70,30)"/><text x="57.6062%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,757,492 samples, 3.89%)</title><rect x="53.6313%" y="181" width="3.8871%" height="15" fill="rgb(212,68,19)"/><text x="53.8813%" y="191.50">eval..</text></g><g><title>eval_to_const_value_raw (4,737,272 samples, 3.87%)</title><rect x="53.6478%" y="165" width="3.8706%" height="15" fill="rgb(240,187,13)"/><text x="53.8978%" y="175.50">eval..</text></g><g><title>eval_to_allocation_raw (4,700,832 samples, 3.84%)</title><rect x="53.6776%" y="149" width="3.8408%" height="15" fill="rgb(223,113,26)"/><text x="53.9276%" y="159.50">eval..</text></g><g><title>typeck (753,356 samples, 0.62%)</title><rect x="56.9028%" y="133" width="0.6155%" height="15" fill="rgb(206,192,2)"/><text x="57.1528%" y="143.50"></text></g><g><title>param_env (126,660 samples, 0.10%)</title><rect x="57.6596%" y="181" width="0.1035%" height="15" fill="rgb(241,108,4)"/><text x="57.9096%" y="191.50"></text></g><g><title>region_scope_tree (390,425 samples, 0.32%)</title><rect x="57.7675%" y="181" width="0.3190%" height="15" fill="rgb(247,173,49)"/><text x="58.0175%" y="191.50"></text></g><g><title>check_impl_item_well_formed (6,395,722 samples, 5.23%)</title><rect x="52.9021%" y="197" width="5.2256%" height="15" fill="rgb(224,114,35)"/><text x="53.1521%" y="207.50">check_..</text></g><g><title>mir_const_qualif (157,821 samples, 0.13%)</title><rect x="58.8932%" y="133" width="0.1289%" height="15" fill="rgb(245,159,27)"/><text x="59.1432%" y="143.50"></text></g><g><title>mir_const (125,641 samples, 0.10%)</title><rect x="58.9195%" y="117" width="0.1027%" height="15" fill="rgb(245,172,44)"/><text x="59.1695%" y="127.50"></text></g><g><title>mir_borrowck (368,814 samples, 0.30%)</title><rect x="59.1247%" y="101" width="0.3013%" height="15" fill="rgb(236,23,11)"/><text x="59.3747%" y="111.50"></text></g><g><title>mir_for_ctfe (494,645 samples, 0.40%)</title><rect x="59.0222%" y="133" width="0.4041%" height="15" fill="rgb(205,117,38)"/><text x="59.2722%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (449,045 samples, 0.37%)</title><rect x="59.0594%" y="117" width="0.3669%" height="15" fill="rgb(237,72,25)"/><text x="59.3094%" y="127.50"></text></g><g><title>eval_to_const_value_raw (229,503 samples, 0.19%)</title><rect x="59.4328%" y="117" width="0.1875%" height="15" fill="rgb(244,70,9)"/><text x="59.6828%" y="127.50"></text></g><g><title>eval_to_const_value_raw (227,743 samples, 0.19%)</title><rect x="59.4343%" y="101" width="0.1861%" height="15" fill="rgb(217,125,39)"/><text x="59.6843%" y="111.50"></text></g><g><title>eval_to_allocation_raw (223,603 samples, 0.18%)</title><rect x="59.4377%" y="85" width="0.1827%" height="15" fill="rgb(235,36,10)"/><text x="59.6877%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (239,783 samples, 0.20%)</title><rect x="59.4266%" y="133" width="0.1959%" height="15" fill="rgb(251,123,47)"/><text x="59.6766%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,114,992 samples, 0.91%)</title><rect x="58.7947%" y="181" width="0.9110%" height="15" fill="rgb(221,13,13)"/><text x="59.0447%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,101,702 samples, 0.90%)</title><rect x="58.8056%" y="165" width="0.9001%" height="15" fill="rgb(238,131,9)"/><text x="59.0556%" y="175.50"></text></g><g><title>eval_to_allocation_raw (1,099,842 samples, 0.90%)</title><rect x="58.8071%" y="149" width="0.8986%" height="15" fill="rgb(211,50,8)"/><text x="59.0571%" y="159.50"></text></g><g><title>evaluate_obligation (634,207 samples, 0.52%)</title><rect x="59.7057%" y="181" width="0.5182%" height="15" fill="rgb(245,182,24)"/><text x="59.9557%" y="191.50"></text></g><g><title>param_env (234,523 samples, 0.19%)</title><rect x="60.2966%" y="181" width="0.1916%" height="15" fill="rgb(242,14,37)"/><text x="60.5466%" y="191.50"></text></g><g><title>check_item_well_formed (3,024,446 samples, 2.47%)</title><rect x="58.1277%" y="197" width="2.4711%" height="15" fill="rgb(246,228,12)"/><text x="58.3777%" y="207.50">ch..</text></g><g><title>analysis (68,241,621 samples, 55.76%)</title><rect x="4.9428%" y="245" width="55.7564%" height="15" fill="rgb(213,55,15)"/><text x="5.1928%" y="255.50">analysis</text></g><g><title>type_check_crate (48,747,320 samples, 39.83%)</title><rect x="20.8705%" y="229" width="39.8287%" height="15" fill="rgb(209,9,3)"/><text x="21.1205%" y="239.50">type_check_crate</text></g><g><title>wf_checking (9,685,070 samples, 7.91%)</title><rect x="52.7861%" y="213" width="7.9131%" height="15" fill="rgb(230,59,30)"/><text x="53.0361%" y="223.50">wf_checking</text></g><g><title>check_trait_item_well_formed (122,842 samples, 0.10%)</title><rect x="60.5988%" y="197" width="0.1004%" height="15" fill="rgb(209,121,21)"/><text x="60.8488%" y="207.50"></text></g><g><title>codegen_module (214,463 samples, 0.18%)</title><rect x="61.0628%" y="229" width="0.1752%" height="15" fill="rgb(220,109,13)"/><text x="61.3128%" y="239.50"></text></g><g><title>codegen_crate (725,368 samples, 0.59%)</title><rect x="60.7082%" y="245" width="0.5927%" height="15" fill="rgb(232,18,1)"/><text x="60.9582%" y="255.50"></text></g><g><title>codegen_module_optimize (2,055,124 samples, 1.68%)</title><rect x="61.3009%" y="245" width="1.6791%" height="15" fill="rgb(215,41,42)"/><text x="61.5509%" y="255.50"></text></g><g><title>LLVM_module_optimize (433,445 samples, 0.35%)</title><rect x="62.6259%" y="229" width="0.3541%" height="15" fill="rgb(224,123,36)"/><text x="62.8759%" y="239.50"></text></g><g><title>LLVM_lto_optimize (218,592 samples, 0.18%)</title><rect x="63.2735%" y="229" width="0.1786%" height="15" fill="rgb(240,125,3)"/><text x="63.5235%" y="239.50"></text></g><g><title>LLVM_module_codegen (2,353,057 samples, 1.92%)</title><rect x="63.4521%" y="229" width="1.9225%" height="15" fill="rgb(205,98,50)"/><text x="63.7021%" y="239.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,323,326 samples, 1.90%)</title><rect x="63.4764%" y="213" width="1.8983%" height="15" fill="rgb(205,185,37)"/><text x="63.7264%" y="223.50">L..</text></g><g><title>codegen_module_perform_lto (2,967,673 samples, 2.42%)</title><rect x="62.9800%" y="245" width="2.4247%" height="15" fill="rgb(238,207,15)"/><text x="63.2300%" y="255.50">co..</text></g><g><title>AST_validation (205,432 samples, 0.17%)</title><rect x="65.5798%" y="229" width="0.1678%" height="15" fill="rgb(213,199,42)"/><text x="65.8298%" y="239.50"></text></g><g><title>metadata_load_macro (132,973 samples, 0.11%)</title><rect x="79.5014%" y="197" width="0.1086%" height="15" fill="rgb(235,201,11)"/><text x="79.7514%" y="207.50"></text></g><g><title>metadata_register_crate (220,073 samples, 0.18%)</title><rect x="79.6101%" y="197" width="0.1798%" height="15" fill="rgb(207,46,11)"/><text x="79.8601%" y="207.50"></text></g><g><title>macro_expand_crate (17,067,833 samples, 13.95%)</title><rect x="65.8753%" y="229" width="13.9452%" height="15" fill="rgb(241,35,35)"/><text x="66.1253%" y="239.50">macro_expand_crate</text></g><g><title>expand_crate (17,044,483 samples, 13.93%)</title><rect x="65.8943%" y="213" width="13.9261%" height="15" fill="rgb(243,32,47)"/><text x="66.1443%" y="223.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (218,183 samples, 0.18%)</title><rect x="79.8241%" y="229" width="0.1783%" height="15" fill="rgb(247,202,23)"/><text x="80.0741%" y="239.50"></text></g><g><title>finalize_imports (247,482 samples, 0.20%)</title><rect x="80.0072%" y="213" width="0.2022%" height="15" fill="rgb(219,102,11)"/><text x="80.2572%" y="223.50"></text></g><g><title>late_resolve_crate (3,237,937 samples, 2.65%)</title><rect x="80.2432%" y="213" width="2.6455%" height="15" fill="rgb(243,110,44)"/><text x="80.4932%" y="223.50">la..</text></g><g><title>configure_and_expand (21,508,533 samples, 17.57%)</title><rect x="65.4047%" y="245" width="17.5734%" height="15" fill="rgb(222,74,54)"/><text x="65.6547%" y="255.50">configure_and_expand</text></g><g><title>resolve_crate (3,642,091 samples, 2.98%)</title><rect x="80.0024%" y="229" width="2.9757%" height="15" fill="rgb(216,99,12)"/><text x="80.2524%" y="239.50">res..</text></g><g><title>drop_ast (189,932 samples, 0.16%)</title><rect x="82.9781%" y="245" width="0.1552%" height="15" fill="rgb(226,22,26)"/><text x="83.2281%" y="255.50"></text></g><g><title>early_lint_checks (423,895 samples, 0.35%)</title><rect x="83.1434%" y="245" width="0.3463%" height="15" fill="rgb(217,163,10)"/><text x="83.3934%" y="255.50"></text></g><g><title>free_global_ctxt (2,046,963 samples, 1.67%)</title><rect x="83.4898%" y="245" width="1.6725%" height="15" fill="rgb(213,25,53)"/><text x="83.7398%" y="255.50"></text></g><g><title>layout_of (285,013 samples, 0.23%)</title><rect x="89.1007%" y="213" width="0.2329%" height="15" fill="rgb(252,105,26)"/><text x="89.3507%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,822,101 samples, 2.31%)</title><rect x="89.3336%" y="213" width="2.3058%" height="15" fill="rgb(220,39,43)"/><text x="89.5836%" y="223.50">m..</text></g><g><title>optimized_mir (6,311,349 samples, 5.16%)</title><rect x="86.4937%" y="229" width="5.1566%" height="15" fill="rgb(229,68,48)"/><text x="86.7437%" y="239.50">optimi..</text></g><g><title>generate_crate_metadata (7,975,901 samples, 6.52%)</title><rect x="85.1622%" y="245" width="6.5167%" height="15" fill="rgb(252,8,32)"/><text x="85.4122%" y="255.50">generate_..</text></g><g><title>hir_lowering (3,229,536 samples, 2.64%)</title><rect x="91.6789%" y="245" width="2.6387%" height="15" fill="rgb(223,20,43)"/><text x="91.9289%" y="255.50">hi..</text></g><g><title>finish_ongoing_codegen (2,878,353 samples, 2.35%)</title><rect x="94.3275%" y="229" width="2.3517%" height="15" fill="rgb(229,81,49)"/><text x="94.5775%" y="239.50">f..</text></g><g><title>link_crate (835,749 samples, 0.68%)</title><rect x="96.6793%" y="229" width="0.6828%" height="15" fill="rgb(236,28,36)"/><text x="96.9293%" y="239.50"></text></g><g><title>link_binary (813,849 samples, 0.66%)</title><rect x="96.6971%" y="213" width="0.6649%" height="15" fill="rgb(249,185,26)"/><text x="96.9471%" y="223.50"></text></g><g><title>link_rlib (565,607 samples, 0.46%)</title><rect x="96.9000%" y="197" width="0.4621%" height="15" fill="rgb(249,174,33)"/><text x="97.1500%" y="207.50"></text></g><g><title>link (3,733,352 samples, 3.05%)</title><rect x="94.3176%" y="245" width="3.0503%" height="15" fill="rgb(233,201,37)"/><text x="94.5676%" y="255.50">link</text></g><g><title>parse_crate (1,890,442 samples, 1.54%)</title><rect x="97.3679%" y="245" width="1.5446%" height="15" fill="rgb(221,78,26)"/><text x="97.6179%" y="255.50"></text></g><g><title>prepare_outputs (197,483 samples, 0.16%)</title><rect x="98.9206%" y="245" width="0.1614%" height="15" fill="rgb(250,127,30)"/><text x="99.1706%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (653,168 samples, 0.53%)</title><rect x="99.0819%" y="245" width="0.5337%" height="15" fill="rgb(230,49,44)"/><text x="99.3319%" y="255.50"></text></g><g><title>all (122,392,525 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (122,392,525 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="271.50">rustc</text></g><g><title>write_crate_metadata (390,894 samples, 0.32%)</title><rect x="99.6806%" y="245" width="0.3194%" height="15" fill="rgb(215,43,3)"/><text x="99.9306%" y="255.50"></text></g></svg></svg>