<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,616,353 samples, 4.30%)</title><rect x="0.5297%" y="181" width="4.3038%" height="15" fill="rgb(227,0,7)"/><text x="0.7797%" y="191.50">LLVM_..</text></g><g><title>codegen_generate_lto_work (494,816 samples, 0.32%)</title><rect x="4.5117%" y="165" width="0.3219%" height="15" fill="rgb(217,0,24)"/><text x="4.7617%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (478,816 samples, 0.31%)</title><rect x="4.5221%" y="149" width="0.3115%" height="15" fill="rgb(221,193,54)"/><text x="4.7721%" y="159.50"></text></g><g><title>is_sized_raw (211,761 samples, 0.14%)</title><rect x="12.9731%" y="133" width="0.1377%" height="15" fill="rgb(248,212,6)"/><text x="13.2231%" y="143.50"></text></g><g><title>param_env (299,004 samples, 0.19%)</title><rect x="14.4616%" y="101" width="0.1945%" height="15" fill="rgb(208,68,35)"/><text x="14.7116%" y="111.50"></text></g><g><title>needs_drop_raw (1,118,043 samples, 0.73%)</title><rect x="17.2614%" y="69" width="0.7273%" height="15" fill="rgb(232,128,0)"/><text x="17.5114%" y="79.50"></text></g><g><title>is_copy_raw (951,759 samples, 0.62%)</title><rect x="17.3695%" y="53" width="0.6191%" height="15" fill="rgb(207,160,47)"/><text x="17.6195%" y="63.50"></text></g><g><title>evaluate_obligation (794,926 samples, 0.52%)</title><rect x="17.4716%" y="37" width="0.5171%" height="15" fill="rgb(228,23,34)"/><text x="17.7216%" y="47.50"></text></g><g><title>thir_body (1,057,825 samples, 0.69%)</title><rect x="18.0524%" y="69" width="0.6881%" height="15" fill="rgb(218,30,26)"/><text x="18.3024%" y="79.50"></text></g><g><title>mir_const (7,625,658 samples, 4.96%)</title><rect x="13.7971%" y="117" width="4.9604%" height="15" fill="rgb(220,122,19)"/><text x="14.0471%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (6,305,086 samples, 4.10%)</title><rect x="14.6561%" y="101" width="4.1014%" height="15" fill="rgb(250,228,42)"/><text x="14.9061%" y="111.50">unsa..</text></g><g><title>mir_built (5,708,910 samples, 3.71%)</title><rect x="15.0439%" y="85" width="3.7136%" height="15" fill="rgb(240,193,28)"/><text x="15.2939%" y="95.50">mir_..</text></g><g><title>mir_promoted (8,741,427 samples, 5.69%)</title><rect x="13.1108%" y="133" width="5.6862%" height="15" fill="rgb(216,20,37)"/><text x="13.3608%" y="143.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (328,904 samples, 0.21%)</title><rect x="18.7970%" y="133" width="0.2139%" height="15" fill="rgb(206,188,39)"/><text x="19.0470%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (294,876 samples, 0.19%)</title><rect x="19.0109%" y="133" width="0.1918%" height="15" fill="rgb(217,207,13)"/><text x="19.2609%" y="143.50"></text></g><g><title>type_op_normalize_ty (191,001 samples, 0.12%)</title><rect x="19.2510%" y="133" width="0.1242%" height="15" fill="rgb(231,73,38)"/><text x="19.5010%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,194,510 samples, 1.43%)</title><rect x="19.3752%" y="133" width="1.4275%" height="15" fill="rgb(225,20,46)"/><text x="19.6252%" y="143.50"></text></g><g><title>MIR_borrow_checking (24,219,637 samples, 15.75%)</title><rect x="5.0510%" y="165" width="15.7545%" height="15" fill="rgb(210,31,41)"/><text x="5.3010%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (24,072,727 samples, 15.66%)</title><rect x="5.1465%" y="149" width="15.6589%" height="15" fill="rgb(221,200,47)"/><text x="5.3965%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (193,292 samples, 0.13%)</title><rect x="20.8292%" y="165" width="0.1257%" height="15" fill="rgb(226,26,5)"/><text x="21.0792%" y="175.50"></text></g><g><title>item_attrs (214,412 samples, 0.14%)</title><rect x="21.3510%" y="85" width="0.1395%" height="15" fill="rgb(249,33,26)"/><text x="21.6010%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (206,632 samples, 0.13%)</title><rect x="21.3560%" y="69" width="0.1344%" height="15" fill="rgb(235,183,28)"/><text x="21.6060%" y="79.50"></text></g><g><title>codegen_fn_attrs (321,923 samples, 0.21%)</title><rect x="21.3272%" y="101" width="0.2094%" height="15" fill="rgb(221,5,38)"/><text x="21.5772%" y="111.50"></text></g><g><title>should_inherit_track_caller (469,664 samples, 0.31%)</title><rect x="21.2372%" y="117" width="0.3055%" height="15" fill="rgb(247,18,42)"/><text x="21.4872%" y="127.50"></text></g><g><title>codegen_fn_attrs (661,206 samples, 0.43%)</title><rect x="21.1205%" y="133" width="0.4301%" height="15" fill="rgb(241,131,45)"/><text x="21.3705%" y="143.50"></text></g><g><title>check_mod_attrs (896,959 samples, 0.58%)</title><rect x="20.9672%" y="149" width="0.5835%" height="15" fill="rgb(249,31,29)"/><text x="21.2172%" y="159.50"></text></g><g><title>lookup_deprecation_entry (167,763 samples, 0.11%)</title><rect x="21.8230%" y="133" width="0.1091%" height="15" fill="rgb(225,111,53)"/><text x="22.0730%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (503,585 samples, 0.33%)</title><rect x="21.6852%" y="149" width="0.3276%" height="15" fill="rgb(238,160,17)"/><text x="21.9352%" y="159.50"></text></g><g><title>misc_checking_1 (1,674,829 samples, 1.09%)</title><rect x="20.9555%" y="165" width="1.0895%" height="15" fill="rgb(214,148,48)"/><text x="21.2055%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (422,055 samples, 0.27%)</title><rect x="22.0460%" y="149" width="0.2745%" height="15" fill="rgb(232,36,49)"/><text x="22.2960%" y="159.50"></text></g><g><title>check_mod_liveness (335,954 samples, 0.22%)</title><rect x="22.1020%" y="133" width="0.2185%" height="15" fill="rgb(209,103,24)"/><text x="22.3520%" y="143.50"></text></g><g><title>misc_checking_2 (1,084,252 samples, 0.71%)</title><rect x="22.0450%" y="165" width="0.7053%" height="15" fill="rgb(229,88,8)"/><text x="22.2950%" y="175.50"></text></g><g><title>match_checking (660,577 samples, 0.43%)</title><rect x="22.3206%" y="149" width="0.4297%" height="15" fill="rgb(213,181,19)"/><text x="22.5706%" y="159.50"></text></g><g><title>check_match (626,657 samples, 0.41%)</title><rect x="22.3426%" y="133" width="0.4076%" height="15" fill="rgb(254,191,54)"/><text x="22.5926%" y="143.50"></text></g><g><title>check_private_in_public (232,193 samples, 0.15%)</title><rect x="22.7567%" y="149" width="0.1510%" height="15" fill="rgb(241,83,37)"/><text x="23.0067%" y="159.50"></text></g><g><title>death_checking (531,076 samples, 0.35%)</title><rect x="22.9077%" y="149" width="0.3455%" height="15" fill="rgb(233,36,39)"/><text x="23.1577%" y="159.50"></text></g><g><title>item_attrs (215,962 samples, 0.14%)</title><rect x="23.1127%" y="133" width="0.1405%" height="15" fill="rgb(226,3,54)"/><text x="23.3627%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (213,752 samples, 0.14%)</title><rect x="23.1142%" y="117" width="0.1390%" height="15" fill="rgb(245,192,40)"/><text x="23.3642%" y="127.50"></text></g><g><title>crate_lints (1,937,351 samples, 1.26%)</title><rect x="23.2542%" y="133" width="1.2602%" height="15" fill="rgb(238,167,29)"/><text x="23.5042%" y="143.50"></text></g><g><title>type_of (1,081,724 samples, 0.70%)</title><rect x="23.8107%" y="117" width="0.7036%" height="15" fill="rgb(232,182,51)"/><text x="24.0607%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (846,412 samples, 0.55%)</title><rect x="23.9638%" y="101" width="0.5506%" height="15" fill="rgb(231,60,39)"/><text x="24.2138%" y="111.50"></text></g><g><title>lint_checking (2,258,355 samples, 1.47%)</title><rect x="23.2532%" y="149" width="1.4690%" height="15" fill="rgb(208,69,12)"/><text x="23.5032%" y="159.50"></text></g><g><title>module_lints (319,524 samples, 0.21%)</title><rect x="24.5144%" y="133" width="0.2078%" height="15" fill="rgb(235,93,37)"/><text x="24.7644%" y="143.50"></text></g><g><title>lint_mod (316,454 samples, 0.21%)</title><rect x="24.5164%" y="117" width="0.2058%" height="15" fill="rgb(213,116,39)"/><text x="24.7664%" y="127.50"></text></g><g><title>privacy_access_levels (316,963 samples, 0.21%)</title><rect x="24.7222%" y="149" width="0.2062%" height="15" fill="rgb(222,207,29)"/><text x="24.9722%" y="159.50"></text></g><g><title>privacy_checking_modules (1,160,272 samples, 0.75%)</title><rect x="24.9284%" y="149" width="0.7547%" height="15" fill="rgb(206,96,30)"/><text x="25.1784%" y="159.50"></text></g><g><title>check_mod_privacy (1,158,252 samples, 0.75%)</title><rect x="24.9297%" y="133" width="0.7534%" height="15" fill="rgb(218,138,4)"/><text x="25.1797%" y="143.50"></text></g><g><title>misc_checking_3 (4,529,699 samples, 2.95%)</title><rect x="22.7502%" y="165" width="2.9465%" height="15" fill="rgb(250,191,14)"/><text x="23.0002%" y="175.50">mi..</text></g><g><title>impl_trait_ref (186,663 samples, 0.12%)</title><rect x="25.8789%" y="69" width="0.1214%" height="15" fill="rgb(239,60,40)"/><text x="26.1289%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (167,403 samples, 0.11%)</title><rect x="25.8915%" y="53" width="0.1089%" height="15" fill="rgb(206,27,48)"/><text x="26.1415%" y="63.50"></text></g><g><title>adt_destructor (342,244 samples, 0.22%)</title><rect x="25.7938%" y="117" width="0.2226%" height="15" fill="rgb(225,35,8)"/><text x="26.0438%" y="127.50"></text></g><g><title>coherent_trait (339,454 samples, 0.22%)</title><rect x="25.7956%" y="101" width="0.2208%" height="15" fill="rgb(250,213,24)"/><text x="26.0456%" y="111.50"></text></g><g><title>specialization_graph_of (338,254 samples, 0.22%)</title><rect x="25.7964%" y="85" width="0.2200%" height="15" fill="rgb(247,123,22)"/><text x="26.0464%" y="95.50"></text></g><g><title>impl_parent (3,354,968 samples, 2.18%)</title><rect x="29.5961%" y="101" width="2.1824%" height="15" fill="rgb(231,138,38)"/><text x="29.8461%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,848,664 samples, 1.20%)</title><rect x="30.5759%" y="85" width="1.2025%" height="15" fill="rgb(231,145,46)"/><text x="30.8259%" y="95.50"></text></g><g><title>impl_trait_ref (6,860,072 samples, 4.46%)</title><rect x="31.7784%" y="101" width="4.4624%" height="15" fill="rgb(251,118,11)"/><text x="32.0284%" y="111.50">impl_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,100,727 samples, 3.32%)</title><rect x="32.9228%" y="85" width="3.3179%" height="15" fill="rgb(217,147,25)"/><text x="33.1728%" y="95.50">met..</text></g><g><title>trait_impls_of (1,233,602 samples, 0.80%)</title><rect x="36.2895%" y="101" width="0.8024%" height="15" fill="rgb(247,81,37)"/><text x="36.5395%" y="111.50"></text></g><g><title>implementations_of_trait (347,142 samples, 0.23%)</title><rect x="36.8661%" y="85" width="0.2258%" height="15" fill="rgb(209,12,38)"/><text x="37.1161%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (252,012 samples, 0.16%)</title><rect x="36.9280%" y="69" width="0.1639%" height="15" fill="rgb(227,1,9)"/><text x="37.1780%" y="79.50"></text></g><g><title>coherent_trait (17,427,222 samples, 11.34%)</title><rect x="25.7565%" y="133" width="11.3361%" height="15" fill="rgb(248,47,43)"/><text x="26.0065%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (16,926,876 samples, 11.01%)</title><rect x="26.0820%" y="117" width="11.0107%" height="15" fill="rgb(221,10,30)"/><text x="26.3320%" y="127.50">specialization_g..</text></g><g><title>coherence_checking (17,519,773 samples, 11.40%)</title><rect x="25.7371%" y="149" width="11.3963%" height="15" fill="rgb(210,229,1)"/><text x="25.9871%" y="159.50">coherence_checking</text></g><g><title>adt_dtorck_constraint (203,622 samples, 0.13%)</title><rect x="50.2177%" y="85" width="0.1325%" height="15" fill="rgb(222,148,37)"/><text x="50.4677%" y="95.50"></text></g><g><title>dropck_outlives (489,875 samples, 0.32%)</title><rect x="50.0449%" y="101" width="0.3187%" height="15" fill="rgb(234,67,33)"/><text x="50.2949%" y="111.50"></text></g><g><title>evaluate_obligation (844,518 samples, 0.55%)</title><rect x="50.3636%" y="101" width="0.5493%" height="15" fill="rgb(247,98,35)"/><text x="50.6136%" y="111.50"></text></g><g><title>impl_trait_ref (216,843 samples, 0.14%)</title><rect x="50.9902%" y="101" width="0.1411%" height="15" fill="rgb(247,138,52)"/><text x="51.2402%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (214,573 samples, 0.14%)</title><rect x="50.9917%" y="85" width="0.1396%" height="15" fill="rgb(213,79,30)"/><text x="51.2417%" y="95.50"></text></g><g><title>method_autoderef_steps (549,897 samples, 0.36%)</title><rect x="51.2291%" y="101" width="0.3577%" height="15" fill="rgb(246,177,23)"/><text x="51.4791%" y="111.50"></text></g><g><title>evaluate_obligation (262,894 samples, 0.17%)</title><rect x="51.4158%" y="85" width="0.1710%" height="15" fill="rgb(230,62,27)"/><text x="51.6658%" y="95.50"></text></g><g><title>item_bodies_checking (22,519,588 samples, 14.65%)</title><rect x="37.1599%" y="149" width="14.6486%" height="15" fill="rgb(216,154,8)"/><text x="37.4099%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,516,528 samples, 14.65%)</title><rect x="37.1619%" y="133" width="14.6467%" height="15" fill="rgb(244,35,45)"/><text x="37.4119%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (22,407,017 samples, 14.58%)</title><rect x="37.2331%" y="117" width="14.5754%" height="15" fill="rgb(251,115,12)"/><text x="37.4831%" y="127.50">typeck</text></g><g><title>item_types_checking (1,877,880 samples, 1.22%)</title><rect x="51.8086%" y="149" width="1.2215%" height="15" fill="rgb(240,54,50)"/><text x="52.0586%" y="159.50"></text></g><g><title>check_mod_item_types (1,875,300 samples, 1.22%)</title><rect x="51.8102%" y="133" width="1.2199%" height="15" fill="rgb(233,84,52)"/><text x="52.0602%" y="143.50"></text></g><g><title>fn_sig (406,923 samples, 0.26%)</title><rect x="53.2351%" y="117" width="0.2647%" height="15" fill="rgb(207,117,47)"/><text x="53.4851%" y="127.50"></text></g><g><title>generics_of (262,094 samples, 0.17%)</title><rect x="53.4998%" y="117" width="0.1705%" height="15" fill="rgb(249,43,39)"/><text x="53.7498%" y="127.50"></text></g><g><title>impl_trait_ref (155,512 samples, 0.10%)</title><rect x="53.6703%" y="117" width="0.1012%" height="15" fill="rgb(209,38,44)"/><text x="53.9203%" y="127.50"></text></g><g><title>late_bound_vars_map (671,979 samples, 0.44%)</title><rect x="54.2843%" y="69" width="0.4371%" height="15" fill="rgb(236,212,23)"/><text x="54.5343%" y="79.50"></text></g><g><title>resolve_lifetimes (632,909 samples, 0.41%)</title><rect x="54.3097%" y="53" width="0.4117%" height="15" fill="rgb(242,79,21)"/><text x="54.5597%" y="63.50"></text></g><g><title>explicit_predicates_of (1,394,326 samples, 0.91%)</title><rect x="53.8735%" y="85" width="0.9070%" height="15" fill="rgb(211,96,35)"/><text x="54.1235%" y="95.50"></text></g><g><title>predicates_of (1,606,740 samples, 1.05%)</title><rect x="53.7715%" y="117" width="1.0452%" height="15" fill="rgb(253,215,40)"/><text x="54.0215%" y="127.50"></text></g><g><title>predicates_defined_on (1,549,650 samples, 1.01%)</title><rect x="53.8086%" y="101" width="1.0080%" height="15" fill="rgb(211,81,21)"/><text x="54.0586%" y="111.50"></text></g><g><title>type_collecting (2,912,282 samples, 1.89%)</title><rect x="53.0311%" y="149" width="1.8944%" height="15" fill="rgb(208,190,38)"/><text x="53.2811%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,904,402 samples, 1.89%)</title><rect x="53.0362%" y="133" width="1.8893%" height="15" fill="rgb(235,213,38)"/><text x="53.2862%" y="143.50">c..</text></g><g><title>type_of (167,261 samples, 0.11%)</title><rect x="54.8166%" y="117" width="0.1088%" height="15" fill="rgb(237,122,38)"/><text x="55.0666%" y="127.50"></text></g><g><title>evaluate_obligation (862,243 samples, 0.56%)</title><rect x="57.4686%" y="117" width="0.5609%" height="15" fill="rgb(244,218,35)"/><text x="57.7186%" y="127.50"></text></g><g><title>implied_outlives_bounds (552,816 samples, 0.36%)</title><rect x="58.0343%" y="117" width="0.3596%" height="15" fill="rgb(240,68,47)"/><text x="58.2843%" y="127.50"></text></g><g><title>object_safety_violations (432,295 samples, 0.28%)</title><rect x="58.4123%" y="117" width="0.2812%" height="15" fill="rgb(210,16,53)"/><text x="58.6623%" y="127.50"></text></g><g><title>param_env (768,384 samples, 0.50%)</title><rect x="58.6935%" y="117" width="0.4998%" height="15" fill="rgb(235,124,12)"/><text x="58.9435%" y="127.50"></text></g><g><title>region_scope_tree (423,056 samples, 0.28%)</title><rect x="59.2525%" y="117" width="0.2752%" height="15" fill="rgb(224,169,11)"/><text x="59.5025%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,909,901 samples, 4.49%)</title><rect x="55.1026%" y="133" width="4.4948%" height="15" fill="rgb(250,166,2)"/><text x="55.3526%" y="143.50">check..</text></g><g><title>implied_outlives_bounds (243,950 samples, 0.16%)</title><rect x="61.5532%" y="117" width="0.1587%" height="15" fill="rgb(242,216,29)"/><text x="61.8032%" y="127.50"></text></g><g><title>param_env (504,847 samples, 0.33%)</title><rect x="61.7119%" y="117" width="0.3284%" height="15" fill="rgb(230,116,27)"/><text x="61.9619%" y="127.50"></text></g><g><title>analysis (88,267,732 samples, 57.42%)</title><rect x="4.8335%" y="181" width="57.4168%" height="15" fill="rgb(228,99,48)"/><text x="5.0835%" y="191.50">analysis</text></g><g><title>type_check_crate (56,194,409 samples, 36.55%)</title><rect x="25.6967%" y="165" width="36.5536%" height="15" fill="rgb(253,11,6)"/><text x="25.9467%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,254,375 samples, 7.32%)</title><rect x="54.9295%" y="149" width="7.3208%" height="15" fill="rgb(247,143,39)"/><text x="55.1795%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (4,078,443 samples, 2.65%)</title><rect x="59.5974%" y="133" width="2.6530%" height="15" fill="rgb(236,97,10)"/><text x="59.8474%" y="143.50">ch..</text></g><g><title>codegen_module (216,242 samples, 0.14%)</title><rect x="62.6073%" y="165" width="0.1407%" height="15" fill="rgb(233,208,19)"/><text x="62.8573%" y="175.50"></text></g><g><title>codegen_crate (889,750 samples, 0.58%)</title><rect x="62.2591%" y="181" width="0.5788%" height="15" fill="rgb(216,164,2)"/><text x="62.5091%" y="191.50"></text></g><g><title>codegen_module_optimize (882,130 samples, 0.57%)</title><rect x="62.8378%" y="181" width="0.5738%" height="15" fill="rgb(220,129,5)"/><text x="63.0878%" y="191.50"></text></g><g><title>LLVM_module_optimize (455,835 samples, 0.30%)</title><rect x="63.1151%" y="165" width="0.2965%" height="15" fill="rgb(242,17,10)"/><text x="63.3651%" y="175.50"></text></g><g><title>LLVM_lto_optimize (319,383 samples, 0.21%)</title><rect x="63.7162%" y="165" width="0.2078%" height="15" fill="rgb(242,107,0)"/><text x="63.9662%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,810,162 samples, 1.83%)</title><rect x="63.9240%" y="165" width="1.8280%" height="15" fill="rgb(251,28,31)"/><text x="64.1740%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,764,370 samples, 1.80%)</title><rect x="63.9538%" y="149" width="1.7982%" height="15" fill="rgb(233,223,10)"/><text x="64.2038%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (3,652,701 samples, 2.38%)</title><rect x="63.4117%" y="181" width="2.3760%" height="15" fill="rgb(215,21,27)"/><text x="63.6617%" y="191.50">co..</text></g><g><title>macro_expand_crate (14,167,736 samples, 9.22%)</title><rect x="66.1324%" y="165" width="9.2159%" height="15" fill="rgb(232,23,21)"/><text x="66.3824%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (14,153,126 samples, 9.21%)</title><rect x="66.1419%" y="149" width="9.2064%" height="15" fill="rgb(244,5,23)"/><text x="66.3919%" y="159.50">expand_crate</text></g><g><title>metadata_register_crate (2,847,831 samples, 1.85%)</title><rect x="73.4958%" y="133" width="1.8525%" height="15" fill="rgb(226,81,46)"/><text x="73.7458%" y="143.50">m..</text></g><g><title>metadata_register_crate (1,159,193 samples, 0.75%)</title><rect x="74.5942%" y="117" width="0.7540%" height="15" fill="rgb(247,70,30)"/><text x="74.8442%" y="127.50"></text></g><g><title>pre_AST_expansion_lint_checks (442,005 samples, 0.29%)</title><rect x="75.3505%" y="165" width="0.2875%" height="15" fill="rgb(212,68,19)"/><text x="75.6005%" y="175.50"></text></g><g><title>finalize_macro_resolutions (155,912 samples, 0.10%)</title><rect x="75.6568%" y="149" width="0.1014%" height="15" fill="rgb(240,187,13)"/><text x="75.9068%" y="159.50"></text></g><g><title>late_resolve_crate (2,490,647 samples, 1.62%)</title><rect x="75.7583%" y="149" width="1.6201%" height="15" fill="rgb(223,113,26)"/><text x="76.0083%" y="159.50"></text></g><g><title>configure_and_expand (17,924,907 samples, 11.66%)</title><rect x="65.7877%" y="181" width="11.6599%" height="15" fill="rgb(206,192,2)"/><text x="66.0377%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (2,781,800 samples, 1.81%)</title><rect x="75.6380%" y="165" width="1.8095%" height="15" fill="rgb(241,108,4)"/><text x="75.8880%" y="175.50">r..</text></g><g><title>drop_ast (211,142 samples, 0.14%)</title><rect x="77.4476%" y="181" width="0.1373%" height="15" fill="rgb(247,173,49)"/><text x="77.6976%" y="191.50"></text></g><g><title>early_lint_checks (400,565 samples, 0.26%)</title><rect x="77.5946%" y="181" width="0.2606%" height="15" fill="rgb(224,114,35)"/><text x="77.8446%" y="191.50"></text></g><g><title>free_global_ctxt (3,842,122 samples, 2.50%)</title><rect x="77.8552%" y="181" width="2.4992%" height="15" fill="rgb(245,159,27)"/><text x="78.1052%" y="191.50">fr..</text></g><g><title>adt_sized_constraint (444,805 samples, 0.29%)</title><rect x="85.1633%" y="133" width="0.2893%" height="15" fill="rgb(245,172,44)"/><text x="85.4133%" y="143.50"></text></g><g><title>adt_def (441,315 samples, 0.29%)</title><rect x="85.1656%" y="117" width="0.2871%" height="15" fill="rgb(236,23,11)"/><text x="85.4156%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_def (440,135 samples, 0.29%)</title><rect x="85.1664%" y="101" width="0.2863%" height="15" fill="rgb(205,117,38)"/><text x="85.4164%" y="111.50"></text></g><g><title>item_attrs (425,265 samples, 0.28%)</title><rect x="85.1761%" y="85" width="0.2766%" height="15" fill="rgb(237,72,25)"/><text x="85.4261%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (424,145 samples, 0.28%)</title><rect x="85.1768%" y="69" width="0.2759%" height="15" fill="rgb(244,70,9)"/><text x="85.4268%" y="79.50"></text></g><g><title>is_sized_raw (441,887 samples, 0.29%)</title><rect x="85.4675%" y="133" width="0.2874%" height="15" fill="rgb(217,125,39)"/><text x="85.7175%" y="143.50"></text></g><g><title>evaluate_obligation (327,746 samples, 0.21%)</title><rect x="85.5417%" y="117" width="0.2132%" height="15" fill="rgb(235,36,10)"/><text x="85.7917%" y="127.50"></text></g><g><title>layout_of (200,882 samples, 0.13%)</title><rect x="85.7549%" y="133" width="0.1307%" height="15" fill="rgb(251,123,47)"/><text x="86.0049%" y="143.50"></text></g><g><title>layout_of (1,562,521 samples, 1.02%)</title><rect x="84.9273%" y="149" width="1.0164%" height="15" fill="rgb(221,13,13)"/><text x="85.1773%" y="159.50"></text></g><g><title>needs_drop_raw (932,670 samples, 0.61%)</title><rect x="89.2538%" y="133" width="0.6067%" height="15" fill="rgb(238,131,9)"/><text x="89.5038%" y="143.50"></text></g><g><title>is_copy_raw (827,847 samples, 0.54%)</title><rect x="89.3220%" y="117" width="0.5385%" height="15" fill="rgb(211,50,8)"/><text x="89.5720%" y="127.50"></text></g><g><title>evaluate_obligation (661,756 samples, 0.43%)</title><rect x="89.4300%" y="101" width="0.4305%" height="15" fill="rgb(245,182,24)"/><text x="89.6800%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,184,075 samples, 4.02%)</title><rect x="85.9437%" y="149" width="4.0226%" height="15" fill="rgb(242,14,37)"/><text x="86.1937%" y="159.50">mir_..</text></g><g><title>optimized_mir (12,203,810 samples, 7.94%)</title><rect x="82.0950%" y="165" width="7.9384%" height="15" fill="rgb(246,228,12)"/><text x="82.3450%" y="175.50">optimized_m..</text></g><g><title>generate_crate_metadata (15,037,276 samples, 9.78%)</title><rect x="80.3544%" y="181" width="9.7815%" height="15" fill="rgb(213,55,15)"/><text x="80.6044%" y="191.50">generate_crate..</text></g><g><title>hir_lowering (3,430,357 samples, 2.23%)</title><rect x="90.1359%" y="181" width="2.2314%" height="15" fill="rgb(209,9,3)"/><text x="90.3859%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (2,090,684 samples, 1.36%)</title><rect x="92.3787%" y="165" width="1.3600%" height="15" fill="rgb(230,59,30)"/><text x="92.6287%" y="175.50"></text></g><g><title>link_crate (1,127,582 samples, 0.73%)</title><rect x="93.7387%" y="165" width="0.7335%" height="15" fill="rgb(209,121,21)"/><text x="93.9887%" y="175.50"></text></g><g><title>link_binary (948,780 samples, 0.62%)</title><rect x="93.8550%" y="149" width="0.6172%" height="15" fill="rgb(220,109,13)"/><text x="94.1050%" y="159.50"></text></g><g><title>link_rlib (662,398 samples, 0.43%)</title><rect x="94.0413%" y="133" width="0.4309%" height="15" fill="rgb(232,18,1)"/><text x="94.2913%" y="143.50"></text></g><g><title>link (3,244,866 samples, 2.11%)</title><rect x="92.3673%" y="181" width="2.1107%" height="15" fill="rgb(215,41,42)"/><text x="92.6173%" y="191.50">l..</text></g><g><title>parse_crate (6,956,047 samples, 4.52%)</title><rect x="94.4780%" y="181" width="4.5248%" height="15" fill="rgb(224,123,36)"/><text x="94.7280%" y="191.50">parse..</text></g><g><title>prepare_outputs (217,293 samples, 0.14%)</title><rect x="99.0093%" y="181" width="0.1413%" height="15" fill="rgb(240,125,3)"/><text x="99.2593%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (804,249 samples, 0.52%)</title><rect x="99.1507%" y="181" width="0.5232%" height="15" fill="rgb(205,98,50)"/><text x="99.4007%" y="191.50"></text></g><g><title>all (153,731,536 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (153,731,536 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (419,914 samples, 0.27%)</title><rect x="99.7269%" y="181" width="0.2731%" height="15" fill="rgb(213,199,42)"/><text x="99.9769%" y="191.50"></text></g></svg></svg>