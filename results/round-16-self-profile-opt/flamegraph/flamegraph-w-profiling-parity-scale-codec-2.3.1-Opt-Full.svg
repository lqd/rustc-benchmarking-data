<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (186,351,791 samples, 8.74%)</title><rect x="0.0471%" y="181" width="8.7410%" height="15" fill="rgb(227,0,7)"/><text x="0.2971%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (2,231,635 samples, 0.10%)</title><rect x="8.6834%" y="165" width="0.1047%" height="15" fill="rgb(217,0,24)"/><text x="8.9334%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (2,161,714 samples, 0.10%)</title><rect x="8.6867%" y="149" width="0.1014%" height="15" fill="rgb(221,193,54)"/><text x="8.9367%" y="159.50"></text></g><g><title>is_copy_raw (8,591,432 samples, 0.40%)</title><rect x="14.9041%" y="53" width="0.4030%" height="15" fill="rgb(248,212,6)"/><text x="15.1541%" y="63.50"></text></g><g><title>evaluate_obligation (7,199,866 samples, 0.34%)</title><rect x="14.9693%" y="37" width="0.3377%" height="15" fill="rgb(208,68,35)"/><text x="15.2193%" y="47.50"></text></g><g><title>needs_drop_raw (10,597,905 samples, 0.50%)</title><rect x="14.8157%" y="69" width="0.4971%" height="15" fill="rgb(232,128,0)"/><text x="15.0657%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,829,930 samples, 0.13%)</title><rect x="15.3811%" y="53" width="0.1327%" height="15" fill="rgb(207,160,47)"/><text x="15.6311%" y="63.50"></text></g><g><title>specialization_graph_of (2,556,967 samples, 0.12%)</title><rect x="15.5233%" y="53" width="0.1199%" height="15" fill="rgb(228,23,34)"/><text x="15.7733%" y="63.50"></text></g><g><title>resolve_instance (7,276,192 samples, 0.34%)</title><rect x="15.3145%" y="69" width="0.3413%" height="15" fill="rgb(218,30,26)"/><text x="15.5645%" y="79.50"></text></g><g><title>thir_body (7,534,634 samples, 0.35%)</title><rect x="15.6640%" y="69" width="0.3534%" height="15" fill="rgb(220,122,19)"/><text x="15.9140%" y="79.50"></text></g><g><title>mir_const (59,128,812 samples, 2.77%)</title><rect x="13.2519%" y="117" width="2.7735%" height="15" fill="rgb(250,228,42)"/><text x="13.5019%" y="127.50">mi..</text></g><g><title>unsafety_check_result (52,712,657 samples, 2.47%)</title><rect x="13.5529%" y="101" width="2.4725%" height="15" fill="rgb(240,193,28)"/><text x="13.8029%" y="111.50">un..</text></g><g><title>mir_built (48,054,956 samples, 2.25%)</title><rect x="13.7713%" y="85" width="2.2541%" height="15" fill="rgb(216,20,37)"/><text x="14.0213%" y="95.50">m..</text></g><g><title>mir_promoted (66,188,913 samples, 3.10%)</title><rect x="12.9858%" y="133" width="3.1047%" height="15" fill="rgb(206,188,39)"/><text x="13.2358%" y="143.50">mir..</text></g><g><title>type_op_ascribe_user_type (5,528,028 samples, 0.26%)</title><rect x="16.0907%" y="133" width="0.2593%" height="15" fill="rgb(217,207,13)"/><text x="16.3407%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (3,026,058 samples, 0.14%)</title><rect x="16.3500%" y="133" width="0.1419%" height="15" fill="rgb(231,73,38)"/><text x="16.6000%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,462,945 samples, 0.73%)</title><rect x="16.5621%" y="133" width="0.7253%" height="15" fill="rgb(225,20,46)"/><text x="16.8121%" y="143.50"></text></g><g><title>MIR_borrow_checking (179,657,077 samples, 8.43%)</title><rect x="8.8613%" y="165" width="8.4270%" height="15" fill="rgb(210,31,41)"/><text x="9.1113%" y="175.50">MIR_borrow_c..</text></g><g><title>mir_borrowck (178,820,878 samples, 8.39%)</title><rect x="8.9006%" y="149" width="8.3878%" height="15" fill="rgb(221,200,47)"/><text x="9.1506%" y="159.50">mir_borrowck</text></g><g><title>check_mod_attrs (2,292,737 samples, 0.11%)</title><rect x="17.3926%" y="149" width="0.1075%" height="15" fill="rgb(226,26,5)"/><text x="17.6426%" y="159.50"></text></g><g><title>misc_checking_1 (5,635,503 samples, 0.26%)</title><rect x="17.3906%" y="165" width="0.2643%" height="15" fill="rgb(249,33,26)"/><text x="17.6406%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (4,031,975 samples, 0.19%)</title><rect x="17.6551%" y="149" width="0.1891%" height="15" fill="rgb(235,183,28)"/><text x="17.9051%" y="159.50"></text></g><g><title>check_mod_liveness (3,204,777 samples, 0.15%)</title><rect x="17.6939%" y="133" width="0.1503%" height="15" fill="rgb(221,5,38)"/><text x="17.9439%" y="143.50"></text></g><g><title>misc_checking_2 (8,701,557 samples, 0.41%)</title><rect x="17.6549%" y="165" width="0.4082%" height="15" fill="rgb(247,18,42)"/><text x="17.9049%" y="175.50"></text></g><g><title>match_checking (4,667,182 samples, 0.22%)</title><rect x="17.8442%" y="149" width="0.2189%" height="15" fill="rgb(241,131,45)"/><text x="18.0942%" y="159.50"></text></g><g><title>check_match (4,426,458 samples, 0.21%)</title><rect x="17.8555%" y="133" width="0.2076%" height="15" fill="rgb(249,31,29)"/><text x="18.1055%" y="143.50"></text></g><g><title>death_checking (2,283,695 samples, 0.11%)</title><rect x="18.1198%" y="149" width="0.1071%" height="15" fill="rgb(225,111,53)"/><text x="18.3698%" y="159.50"></text></g><g><title>crate_lints (4,965,326 samples, 0.23%)</title><rect x="18.2271%" y="133" width="0.2329%" height="15" fill="rgb(238,160,17)"/><text x="18.4771%" y="143.50"></text></g><g><title>lint_checking (8,007,839 samples, 0.38%)</title><rect x="18.2269%" y="149" width="0.3756%" height="15" fill="rgb(214,148,48)"/><text x="18.4769%" y="159.50"></text></g><g><title>module_lints (3,039,463 samples, 0.14%)</title><rect x="18.4600%" y="133" width="0.1426%" height="15" fill="rgb(232,36,49)"/><text x="18.7100%" y="143.50"></text></g><g><title>lint_mod (3,025,813 samples, 0.14%)</title><rect x="18.4606%" y="117" width="0.1419%" height="15" fill="rgb(209,103,24)"/><text x="18.7106%" y="127.50"></text></g><g><title>privacy_access_levels (2,694,120 samples, 0.13%)</title><rect x="18.6025%" y="149" width="0.1264%" height="15" fill="rgb(229,88,8)"/><text x="18.8525%" y="159.50"></text></g><g><title>privacy_checking_modules (6,468,922 samples, 0.30%)</title><rect x="18.7289%" y="149" width="0.3034%" height="15" fill="rgb(213,181,19)"/><text x="18.9789%" y="159.50"></text></g><g><title>check_mod_privacy (6,458,652 samples, 0.30%)</title><rect x="18.7294%" y="133" width="0.3029%" height="15" fill="rgb(254,191,54)"/><text x="18.9794%" y="143.50"></text></g><g><title>misc_checking_3 (20,714,541 samples, 0.97%)</title><rect x="18.0631%" y="165" width="0.9716%" height="15" fill="rgb(241,83,37)"/><text x="18.3131%" y="175.50"></text></g><g><title>impl_parent (3,033,685 samples, 0.14%)</title><rect x="19.4408%" y="101" width="0.1423%" height="15" fill="rgb(233,36,39)"/><text x="19.6908%" y="111.50"></text></g><g><title>impl_trait_ref (5,872,837 samples, 0.28%)</title><rect x="19.5832%" y="101" width="0.2755%" height="15" fill="rgb(226,3,54)"/><text x="19.8332%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,662,798 samples, 0.22%)</title><rect x="19.6400%" y="85" width="0.2187%" height="15" fill="rgb(245,192,40)"/><text x="19.8900%" y="95.50"></text></g><g><title>coherent_trait (18,310,765 samples, 0.86%)</title><rect x="19.0535%" y="133" width="0.8589%" height="15" fill="rgb(238,167,29)"/><text x="19.3035%" y="143.50"></text></g><g><title>specialization_graph_of (17,653,987 samples, 0.83%)</title><rect x="19.0843%" y="117" width="0.8281%" height="15" fill="rgb(232,182,51)"/><text x="19.3343%" y="127.50"></text></g><g><title>coherence_checking (18,591,008 samples, 0.87%)</title><rect x="19.0517%" y="149" width="0.8720%" height="15" fill="rgb(231,60,39)"/><text x="19.3017%" y="159.50"></text></g><g><title>associated_items (2,969,315 samples, 0.14%)</title><rect x="27.1994%" y="101" width="0.1393%" height="15" fill="rgb(208,69,12)"/><text x="27.4494%" y="111.50"></text></g><g><title>dropck_outlives (3,172,088 samples, 0.15%)</title><rect x="27.3474%" y="101" width="0.1488%" height="15" fill="rgb(235,93,37)"/><text x="27.5974%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,282,384 samples, 0.11%)</title><rect x="27.4996%" y="85" width="0.1071%" height="15" fill="rgb(213,116,39)"/><text x="27.7496%" y="95.50"></text></g><g><title>eval_to_const_value_raw (3,049,962 samples, 0.14%)</title><rect x="27.4963%" y="101" width="0.1431%" height="15" fill="rgb(222,207,29)"/><text x="27.7463%" y="111.50"></text></g><g><title>specializes (3,714,833 samples, 0.17%)</title><rect x="28.5585%" y="85" width="0.1742%" height="15" fill="rgb(206,96,30)"/><text x="28.8085%" y="95.50"></text></g><g><title>evaluate_obligation (24,134,772 samples, 1.13%)</title><rect x="27.6394%" y="101" width="1.1321%" height="15" fill="rgb(218,138,4)"/><text x="27.8894%" y="111.50"></text></g><g><title>method_autoderef_steps (4,379,280 samples, 0.21%)</title><rect x="28.8914%" y="101" width="0.2054%" height="15" fill="rgb(250,191,14)"/><text x="29.1414%" y="111.50"></text></g><g><title>evaluate_obligation (4,491,059 samples, 0.21%)</title><rect x="30.5867%" y="85" width="0.2107%" height="15" fill="rgb(239,60,40)"/><text x="30.8367%" y="95.50"></text></g><g><title>typeck (36,762,238 samples, 1.72%)</title><rect x="29.1912%" y="101" width="1.7244%" height="15" fill="rgb(206,27,48)"/><text x="29.4412%" y="111.50"></text></g><g><title>item_bodies_checking (234,553,860 samples, 11.00%)</title><rect x="19.9362%" y="149" width="11.0020%" height="15" fill="rgb(225,35,8)"/><text x="20.1862%" y="159.50">item_bodies_chec..</text></g><g><title>typeck_item_bodies (234,549,720 samples, 11.00%)</title><rect x="19.9364%" y="133" width="11.0018%" height="15" fill="rgb(250,213,24)"/><text x="20.1864%" y="143.50">typeck_item_bodi..</text></g><g><title>typeck (233,979,951 samples, 10.98%)</title><rect x="19.9631%" y="117" width="10.9750%" height="15" fill="rgb(247,123,22)"/><text x="20.2131%" y="127.50">typeck</text></g><g><title>item_types_checking (10,545,757 samples, 0.49%)</title><rect x="30.9382%" y="149" width="0.4947%" height="15" fill="rgb(231,138,38)"/><text x="31.1882%" y="159.50"></text></g><g><title>check_mod_item_types (10,532,437 samples, 0.49%)</title><rect x="30.9388%" y="133" width="0.4940%" height="15" fill="rgb(231,145,46)"/><text x="31.1888%" y="143.50"></text></g><g><title>generics_of (3,404,674 samples, 0.16%)</title><rect x="31.5741%" y="117" width="0.1597%" height="15" fill="rgb(251,118,11)"/><text x="31.8241%" y="127.50"></text></g><g><title>explicit_predicates_of (4,327,602 samples, 0.20%)</title><rect x="31.7945%" y="85" width="0.2030%" height="15" fill="rgb(217,147,25)"/><text x="32.0445%" y="95.50"></text></g><g><title>predicates_of (5,578,867 samples, 0.26%)</title><rect x="31.7560%" y="117" width="0.2617%" height="15" fill="rgb(247,81,37)"/><text x="32.0060%" y="127.50"></text></g><g><title>predicates_defined_on (5,260,554 samples, 0.25%)</title><rect x="31.7709%" y="101" width="0.2468%" height="15" fill="rgb(209,12,38)"/><text x="32.0209%" y="111.50"></text></g><g><title>type_collecting (13,499,951 samples, 0.63%)</title><rect x="31.4332%" y="149" width="0.6332%" height="15" fill="rgb(227,1,9)"/><text x="31.6832%" y="159.50"></text></g><g><title>collect_mod_item_types (13,472,491 samples, 0.63%)</title><rect x="31.4344%" y="133" width="0.6319%" height="15" fill="rgb(248,47,43)"/><text x="31.6844%" y="143.50"></text></g><g><title>evaluate_obligation (4,911,173 samples, 0.23%)</title><rect x="33.1926%" y="117" width="0.2304%" height="15" fill="rgb(221,10,30)"/><text x="33.4426%" y="127.50"></text></g><g><title>implied_outlives_bounds (2,665,520 samples, 0.13%)</title><rect x="33.4231%" y="117" width="0.1250%" height="15" fill="rgb(210,229,1)"/><text x="33.6731%" y="127.50"></text></g><g><title>param_env (2,655,526 samples, 0.12%)</title><rect x="33.5711%" y="117" width="0.1246%" height="15" fill="rgb(222,148,37)"/><text x="33.8211%" y="127.50"></text></g><g><title>region_scope_tree (2,308,262 samples, 0.11%)</title><rect x="33.6973%" y="117" width="0.1083%" height="15" fill="rgb(234,67,33)"/><text x="33.9473%" y="127.50"></text></g><g><title>check_impl_item_well_formed (35,382,564 samples, 1.66%)</title><rect x="32.1478%" y="133" width="1.6597%" height="15" fill="rgb(247,98,35)"/><text x="32.3978%" y="143.50"></text></g><g><title>evaluate_obligation (2,392,998 samples, 0.11%)</title><rect x="35.8276%" y="117" width="0.1122%" height="15" fill="rgb(247,138,52)"/><text x="36.0776%" y="127.50"></text></g><g><title>param_env (2,738,209 samples, 0.13%)</title><rect x="36.0118%" y="117" width="0.1284%" height="15" fill="rgb(213,79,30)"/><text x="36.2618%" y="127.50"></text></g><g><title>check_item_well_formed (50,929,033 samples, 2.39%)</title><rect x="33.8075%" y="133" width="2.3889%" height="15" fill="rgb(246,177,23)"/><text x="34.0575%" y="143.50">ch..</text></g><g><title>analysis (587,550,892 samples, 27.56%)</title><rect x="8.7881%" y="181" width="27.5596%" height="15" fill="rgb(230,62,27)"/><text x="9.0381%" y="191.50">analysis</text></g><g><title>type_check_crate (369,099,213 samples, 17.31%)</title><rect x="19.0347%" y="165" width="17.3129%" height="15" fill="rgb(216,154,8)"/><text x="19.2847%" y="175.50">type_check_crate</text></g><g><title>wf_checking (91,239,269 samples, 4.28%)</title><rect x="32.0680%" y="149" width="4.2797%" height="15" fill="rgb(244,35,45)"/><text x="32.3180%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (3,225,867 samples, 0.15%)</title><rect x="36.1964%" y="133" width="0.1513%" height="15" fill="rgb(251,115,12)"/><text x="36.4464%" y="143.50"></text></g><g><title>param_env (4,111,110 samples, 0.19%)</title><rect x="39.0663%" y="133" width="0.1928%" height="15" fill="rgb(240,54,50)"/><text x="39.3163%" y="143.50"></text></g><g><title>fn_abi_of_instance (13,181,631 samples, 0.62%)</title><rect x="38.6787%" y="149" width="0.6183%" height="15" fill="rgb(233,84,52)"/><text x="38.9287%" y="159.50"></text></g><g><title>codegen_module (62,089,733 samples, 2.91%)</title><rect x="36.4770%" y="165" width="2.9124%" height="15" fill="rgb(207,117,47)"/><text x="36.7270%" y="175.50">co..</text></g><g><title>codegen_fn_attrs (2,140,534 samples, 0.10%)</title><rect x="39.5415%" y="117" width="0.1004%" height="15" fill="rgb(249,43,39)"/><text x="39.7915%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,688,875 samples, 0.13%)</title><rect x="39.8376%" y="101" width="0.1261%" height="15" fill="rgb(209,38,44)"/><text x="40.0876%" y="111.50"></text></g><g><title>optimized_mir (8,264,148 samples, 0.39%)</title><rect x="39.6945%" y="117" width="0.3876%" height="15" fill="rgb(236,212,23)"/><text x="39.9445%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,523,969 samples, 0.12%)</title><rect x="39.9638%" y="101" width="0.1184%" height="15" fill="rgb(242,79,21)"/><text x="40.2138%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,432,036 samples, 0.25%)</title><rect x="40.1477%" y="101" width="0.2548%" height="15" fill="rgb(211,96,35)"/><text x="40.3977%" y="111.50"></text></g><g><title>resolve_instance (10,405,271 samples, 0.49%)</title><rect x="40.0822%" y="117" width="0.4881%" height="15" fill="rgb(253,215,40)"/><text x="40.3322%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (27,500,967 samples, 1.29%)</title><rect x="39.3922%" y="133" width="1.2900%" height="15" fill="rgb(211,81,21)"/><text x="39.6422%" y="143.50"></text></g><g><title>monomorphization_collector (27,718,000 samples, 1.30%)</title><rect x="39.3921%" y="149" width="1.3001%" height="15" fill="rgb(208,190,38)"/><text x="39.6421%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (2,689,500 samples, 0.13%)</title><rect x="40.6924%" y="133" width="0.1262%" height="15" fill="rgb(235,213,38)"/><text x="40.9424%" y="143.50"></text></g><g><title>symbol_name (2,400,555 samples, 0.11%)</title><rect x="40.7060%" y="117" width="0.1126%" height="15" fill="rgb(237,122,38)"/><text x="40.9560%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (31,498,052 samples, 1.48%)</title><rect x="39.3898%" y="165" width="1.4774%" height="15" fill="rgb(244,218,35)"/><text x="39.6398%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,732,352 samples, 0.18%)</title><rect x="40.6922%" y="149" width="0.1751%" height="15" fill="rgb(240,68,47)"/><text x="40.9422%" y="159.50"></text></g><g><title>codegen_crate (96,422,047 samples, 4.52%)</title><rect x="36.3480%" y="181" width="4.5228%" height="15" fill="rgb(210,16,53)"/><text x="36.5980%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (513,284,483 samples, 24.08%)</title><rect x="40.8708%" y="181" width="24.0761%" height="15" fill="rgb(235,124,12)"/><text x="41.1208%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (489,329,645 samples, 22.95%)</title><rect x="41.9944%" y="165" width="22.9525%" height="15" fill="rgb(224,169,11)"/><text x="42.2444%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (213,935,558 samples, 10.03%)</title><rect x="65.6747%" y="165" width="10.0348%" height="15" fill="rgb(250,166,2)"/><text x="65.9247%" y="175.50">LLVM_lto_optimi..</text></g><g><title>LLVM_module_codegen (169,938,565 samples, 7.97%)</title><rect x="75.7095%" y="165" width="7.9711%" height="15" fill="rgb(242,216,29)"/><text x="75.9595%" y="175.50">LLVM_module..</text></g><g><title>LLVM_module_codegen_emit_obj (167,223,633 samples, 7.84%)</title><rect x="75.8369%" y="149" width="7.8438%" height="15" fill="rgb(230,116,27)"/><text x="76.0869%" y="159.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (31,830,300 samples, 1.49%)</title><rect x="83.6807%" y="165" width="1.4930%" height="15" fill="rgb(228,99,48)"/><text x="83.9307%" y="175.50"></text></g><g><title>codegen_module_perform_lto (433,255,000 samples, 20.32%)</title><rect x="64.9468%" y="181" width="20.3222%" height="15" fill="rgb(253,11,6)"/><text x="65.1968%" y="191.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (43,145,792 samples, 2.02%)</title><rect x="85.3223%" y="165" width="2.0238%" height="15" fill="rgb(247,143,39)"/><text x="85.5723%" y="175.50">m..</text></g><g><title>expand_crate (43,135,002 samples, 2.02%)</title><rect x="85.3228%" y="149" width="2.0233%" height="15" fill="rgb(236,97,10)"/><text x="85.5728%" y="159.50">e..</text></g><g><title>late_resolve_crate (14,123,598 samples, 0.66%)</title><rect x="87.3655%" y="149" width="0.6625%" height="15" fill="rgb(233,208,19)"/><text x="87.6155%" y="159.50"></text></g><g><title>metadata_register_crate (4,416,080 samples, 0.21%)</title><rect x="87.8209%" y="133" width="0.2071%" height="15" fill="rgb(216,164,2)"/><text x="88.0709%" y="143.50"></text></g><g><title>metadata_register_crate (4,028,095 samples, 0.19%)</title><rect x="87.8391%" y="117" width="0.1889%" height="15" fill="rgb(220,129,5)"/><text x="88.0891%" y="127.50"></text></g><g><title>configure_and_expand (59,792,927 samples, 2.80%)</title><rect x="85.2691%" y="181" width="2.8046%" height="15" fill="rgb(242,17,10)"/><text x="85.5191%" y="191.50">co..</text></g><g><title>resolve_crate (15,460,963 samples, 0.73%)</title><rect x="87.3485%" y="165" width="0.7252%" height="15" fill="rgb(242,107,0)"/><text x="87.5985%" y="175.50"></text></g><g><title>early_lint_checks (2,320,386 samples, 0.11%)</title><rect x="88.1311%" y="181" width="0.1088%" height="15" fill="rgb(251,28,31)"/><text x="88.3811%" y="191.50"></text></g><g><title>free_global_ctxt (12,917,224 samples, 0.61%)</title><rect x="88.2399%" y="181" width="0.6059%" height="15" fill="rgb(233,223,10)"/><text x="88.4899%" y="191.50"></text></g><g><title>is_sized_raw (3,489,246 samples, 0.16%)</title><rect x="90.8371%" y="133" width="0.1637%" height="15" fill="rgb(215,21,27)"/><text x="91.0871%" y="143.50"></text></g><g><title>evaluate_obligation (2,836,166 samples, 0.13%)</title><rect x="90.8677%" y="117" width="0.1330%" height="15" fill="rgb(232,23,21)"/><text x="91.1177%" y="127.50"></text></g><g><title>layout_of (7,159,448 samples, 0.34%)</title><rect x="90.7167%" y="149" width="0.3358%" height="15" fill="rgb(244,5,23)"/><text x="90.9667%" y="159.50"></text></g><g><title>is_copy_raw (5,926,546 samples, 0.28%)</title><rect x="92.8198%" y="117" width="0.2780%" height="15" fill="rgb(226,81,46)"/><text x="93.0698%" y="127.50"></text></g><g><title>evaluate_obligation (5,137,770 samples, 0.24%)</title><rect x="92.8568%" y="101" width="0.2410%" height="15" fill="rgb(247,70,30)"/><text x="93.1068%" y="111.50"></text></g><g><title>needs_drop_raw (6,772,777 samples, 0.32%)</title><rect x="92.7815%" y="133" width="0.3177%" height="15" fill="rgb(212,68,19)"/><text x="93.0315%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,993,861 samples, 2.06%)</title><rect x="91.0526%" y="149" width="2.0636%" height="15" fill="rgb(240,187,13)"/><text x="91.3026%" y="159.50">m..</text></g><g><title>optimized_mir (74,772,412 samples, 3.51%)</title><rect x="89.6156%" y="165" width="3.5073%" height="15" fill="rgb(223,113,26)"/><text x="89.8656%" y="175.50">opt..</text></g><g><title>generate_crate_metadata (91,639,004 samples, 4.30%)</title><rect x="88.8458%" y="181" width="4.2984%" height="15" fill="rgb(206,192,2)"/><text x="89.0958%" y="191.50">gener..</text></g><g><title>hir_lowering (20,280,177 samples, 0.95%)</title><rect x="93.1442%" y="181" width="0.9513%" height="15" fill="rgb(241,108,4)"/><text x="93.3942%" y="191.50"></text></g><g><title>finish_ongoing_codegen (115,625,162 samples, 5.42%)</title><rect x="94.0964%" y="165" width="5.4235%" height="15" fill="rgb(247,173,49)"/><text x="94.3464%" y="175.50">finish_..</text></g><g><title>link_crate (3,404,749 samples, 0.16%)</title><rect x="99.5199%" y="165" width="0.1597%" height="15" fill="rgb(224,114,35)"/><text x="99.7699%" y="175.50"></text></g><g><title>link_binary (3,266,737 samples, 0.15%)</title><rect x="99.5263%" y="149" width="0.1532%" height="15" fill="rgb(245,159,27)"/><text x="99.7763%" y="159.50"></text></g><g><title>link_rlib (2,458,368 samples, 0.12%)</title><rect x="99.5643%" y="133" width="0.1153%" height="15" fill="rgb(245,172,44)"/><text x="99.8143%" y="143.50"></text></g><g><title>link (119,058,241 samples, 5.58%)</title><rect x="94.0955%" y="181" width="5.5845%" height="15" fill="rgb(236,23,11)"/><text x="94.3455%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (5,002,036 samples, 0.23%)</title><rect x="99.7116%" y="181" width="0.2346%" height="15" fill="rgb(205,117,38)"/><text x="99.9616%" y="191.50"></text></g><g><title>all (2,131,926,373 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (2,131,926,373 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>