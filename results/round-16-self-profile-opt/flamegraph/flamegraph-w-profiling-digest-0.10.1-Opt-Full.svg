<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,951,586 samples, 7.46%)</title><rect x="0.3728%" y="181" width="7.4554%" height="15" fill="rgb(227,0,7)"/><text x="0.6228%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (240,633 samples, 0.11%)</title><rect x="7.7158%" y="165" width="0.1125%" height="15" fill="rgb(217,0,24)"/><text x="7.9658%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (223,423 samples, 0.10%)</title><rect x="7.7238%" y="149" width="0.1044%" height="15" fill="rgb(221,193,54)"/><text x="7.9738%" y="159.50"></text></g><g><title>implied_outlives_bounds (280,474 samples, 0.13%)</title><rect x="13.4154%" y="133" width="0.1311%" height="15" fill="rgb(248,212,6)"/><text x="13.6654%" y="143.50"></text></g><g><title>param_env (341,625 samples, 0.16%)</title><rect x="14.4251%" y="101" width="0.1597%" height="15" fill="rgb(208,68,35)"/><text x="14.6751%" y="111.50"></text></g><g><title>adt_drop_tys (290,185 samples, 0.14%)</title><rect x="16.1592%" y="53" width="0.1356%" height="15" fill="rgb(232,128,0)"/><text x="16.4092%" y="63.50"></text></g><g><title>is_copy_raw (1,297,143 samples, 0.61%)</title><rect x="16.2948%" y="53" width="0.6063%" height="15" fill="rgb(207,160,47)"/><text x="16.5448%" y="63.50"></text></g><g><title>evaluate_obligation (1,071,711 samples, 0.50%)</title><rect x="16.4002%" y="37" width="0.5009%" height="15" fill="rgb(228,23,34)"/><text x="16.6502%" y="47.50"></text></g><g><title>needs_drop_raw (1,831,302 samples, 0.86%)</title><rect x="16.0712%" y="69" width="0.8559%" height="15" fill="rgb(218,30,26)"/><text x="16.3212%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (937,034 samples, 0.44%)</title><rect x="17.0752%" y="53" width="0.4380%" height="15" fill="rgb(220,122,19)"/><text x="17.3252%" y="63.50"></text></g><g><title>resolve_instance (1,473,179 samples, 0.69%)</title><rect x="16.9271%" y="69" width="0.6885%" height="15" fill="rgb(250,228,42)"/><text x="17.1771%" y="79.50"></text></g><g><title>thir_body (824,318 samples, 0.39%)</title><rect x="17.6321%" y="69" width="0.3853%" height="15" fill="rgb(240,193,28)"/><text x="17.8821%" y="79.50"></text></g><g><title>mir_const (8,669,472 samples, 4.05%)</title><rect x="14.0326%" y="117" width="4.0519%" height="15" fill="rgb(216,20,37)"/><text x="14.2826%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (7,488,080 samples, 3.50%)</title><rect x="14.5848%" y="101" width="3.4998%" height="15" fill="rgb(206,188,39)"/><text x="14.8348%" y="111.50">uns..</text></g><g><title>mir_built (6,857,116 samples, 3.20%)</title><rect x="14.8797%" y="85" width="3.2049%" height="15" fill="rgb(217,207,13)"/><text x="15.1297%" y="95.50">mir..</text></g><g><title>mir_promoted (9,524,652 samples, 4.45%)</title><rect x="13.6695%" y="133" width="4.4516%" height="15" fill="rgb(231,73,38)"/><text x="13.9195%" y="143.50">mir_p..</text></g><g><title>type_op_ascribe_user_type (365,465 samples, 0.17%)</title><rect x="18.1214%" y="133" width="0.1708%" height="15" fill="rgb(225,20,46)"/><text x="18.3714%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (719,877 samples, 0.34%)</title><rect x="18.2922%" y="133" width="0.3365%" height="15" fill="rgb(210,31,41)"/><text x="18.5422%" y="143.50"></text></g><g><title>normalize_projection_ty (331,374 samples, 0.15%)</title><rect x="18.4737%" y="117" width="0.1549%" height="15" fill="rgb(221,200,47)"/><text x="18.7237%" y="127.50"></text></g><g><title>type_op_normalize_predicate (648,187 samples, 0.30%)</title><rect x="18.6286%" y="133" width="0.3029%" height="15" fill="rgb(226,26,5)"/><text x="18.8786%" y="143.50"></text></g><g><title>normalize_projection_ty (243,674 samples, 0.11%)</title><rect x="18.8177%" y="117" width="0.1139%" height="15" fill="rgb(249,33,26)"/><text x="19.0677%" y="127.50"></text></g><g><title>type_op_normalize_ty (748,230 samples, 0.35%)</title><rect x="18.9316%" y="133" width="0.3497%" height="15" fill="rgb(235,183,28)"/><text x="19.1816%" y="143.50"></text></g><g><title>normalize_projection_ty (322,513 samples, 0.15%)</title><rect x="19.1305%" y="117" width="0.1507%" height="15" fill="rgb(221,5,38)"/><text x="19.3805%" y="127.50"></text></g><g><title>type_op_prove_predicate (4,374,697 samples, 2.04%)</title><rect x="19.2813%" y="133" width="2.0446%" height="15" fill="rgb(247,18,42)"/><text x="19.5313%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (28,533,675 samples, 13.34%)</title><rect x="7.9916%" y="165" width="13.3361%" height="15" fill="rgb(241,131,45)"/><text x="8.2416%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (28,394,904 samples, 13.27%)</title><rect x="8.0564%" y="149" width="13.2712%" height="15" fill="rgb(249,31,29)"/><text x="8.3064%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (256,412 samples, 0.12%)</title><rect x="21.3922%" y="165" width="0.1198%" height="15" fill="rgb(225,111,53)"/><text x="21.6422%" y="175.50"></text></g><g><title>should_inherit_track_caller (253,313 samples, 0.12%)</title><rect x="21.7446%" y="117" width="0.1184%" height="15" fill="rgb(238,160,17)"/><text x="21.9946%" y="127.50"></text></g><g><title>codegen_fn_attrs (480,176 samples, 0.22%)</title><rect x="21.6474%" y="133" width="0.2244%" height="15" fill="rgb(214,148,48)"/><text x="21.8974%" y="143.50"></text></g><g><title>check_mod_attrs (737,509 samples, 0.34%)</title><rect x="21.5272%" y="149" width="0.3447%" height="15" fill="rgb(232,36,49)"/><text x="21.7772%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (396,585 samples, 0.19%)</title><rect x="21.9868%" y="149" width="0.1854%" height="15" fill="rgb(209,103,24)"/><text x="22.2368%" y="159.50"></text></g><g><title>misc_checking_1 (1,498,017 samples, 0.70%)</title><rect x="21.5123%" y="165" width="0.7001%" height="15" fill="rgb(229,88,8)"/><text x="21.7623%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (483,886 samples, 0.23%)</title><rect x="22.2133%" y="149" width="0.2262%" height="15" fill="rgb(213,181,19)"/><text x="22.4633%" y="159.50"></text></g><g><title>check_mod_liveness (384,365 samples, 0.18%)</title><rect x="22.2598%" y="133" width="0.1796%" height="15" fill="rgb(254,191,54)"/><text x="22.5098%" y="143.50"></text></g><g><title>misc_checking_2 (1,077,882 samples, 0.50%)</title><rect x="22.2124%" y="165" width="0.5038%" height="15" fill="rgb(241,83,37)"/><text x="22.4624%" y="175.50"></text></g><g><title>match_checking (592,206 samples, 0.28%)</title><rect x="22.4394%" y="149" width="0.2768%" height="15" fill="rgb(233,36,39)"/><text x="22.6894%" y="159.50"></text></g><g><title>check_match (556,386 samples, 0.26%)</title><rect x="22.4562%" y="133" width="0.2600%" height="15" fill="rgb(226,3,54)"/><text x="22.7062%" y="143.50"></text></g><g><title>check_private_in_public (353,474 samples, 0.17%)</title><rect x="22.7216%" y="149" width="0.1652%" height="15" fill="rgb(245,192,40)"/><text x="22.9716%" y="159.50"></text></g><g><title>death_checking (743,128 samples, 0.35%)</title><rect x="22.8868%" y="149" width="0.3473%" height="15" fill="rgb(238,167,29)"/><text x="23.1368%" y="159.50"></text></g><g><title>param_env (732,918 samples, 0.34%)</title><rect x="23.4730%" y="117" width="0.3426%" height="15" fill="rgb(232,182,51)"/><text x="23.7230%" y="127.50"></text></g><g><title>predicates_of (342,034 samples, 0.16%)</title><rect x="23.6557%" y="101" width="0.1599%" height="15" fill="rgb(231,60,39)"/><text x="23.9057%" y="111.50"></text></g><g><title>predicates_defined_on (277,174 samples, 0.13%)</title><rect x="23.6860%" y="85" width="0.1295%" height="15" fill="rgb(208,69,12)"/><text x="23.9360%" y="95.50"></text></g><g><title>crate_lints (1,593,797 samples, 0.74%)</title><rect x="23.2348%" y="133" width="0.7449%" height="15" fill="rgb(235,93,37)"/><text x="23.4848%" y="143.50"></text></g><g><title>type_of (347,024 samples, 0.16%)</title><rect x="23.8176%" y="117" width="0.1622%" height="15" fill="rgb(213,116,39)"/><text x="24.0676%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (266,322 samples, 0.12%)</title><rect x="23.8553%" y="101" width="0.1245%" height="15" fill="rgb(222,207,29)"/><text x="24.1053%" y="111.50"></text></g><g><title>lint_checking (1,957,411 samples, 0.91%)</title><rect x="23.2341%" y="149" width="0.9149%" height="15" fill="rgb(206,96,30)"/><text x="23.4841%" y="159.50"></text></g><g><title>module_lints (362,054 samples, 0.17%)</title><rect x="23.9797%" y="133" width="0.1692%" height="15" fill="rgb(218,138,4)"/><text x="24.2297%" y="143.50"></text></g><g><title>lint_mod (355,624 samples, 0.17%)</title><rect x="23.9828%" y="117" width="0.1662%" height="15" fill="rgb(250,191,14)"/><text x="24.2328%" y="127.50"></text></g><g><title>privacy_access_levels (566,236 samples, 0.26%)</title><rect x="24.1490%" y="149" width="0.2646%" height="15" fill="rgb(239,60,40)"/><text x="24.3990%" y="159.50"></text></g><g><title>privacy_checking_modules (1,700,989 samples, 0.80%)</title><rect x="24.4136%" y="149" width="0.7950%" height="15" fill="rgb(206,27,48)"/><text x="24.6636%" y="159.50"></text></g><g><title>check_mod_privacy (1,694,649 samples, 0.79%)</title><rect x="24.4166%" y="133" width="0.7920%" height="15" fill="rgb(225,35,8)"/><text x="24.6666%" y="143.50"></text></g><g><title>misc_checking_3 (5,357,189 samples, 2.50%)</title><rect x="22.7162%" y="165" width="2.5038%" height="15" fill="rgb(250,213,24)"/><text x="22.9662%" y="175.50">mi..</text></g><g><title>impl_parent (854,598 samples, 0.40%)</title><rect x="26.2098%" y="101" width="0.3994%" height="15" fill="rgb(247,123,22)"/><text x="26.4598%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (503,416 samples, 0.24%)</title><rect x="26.3739%" y="85" width="0.2353%" height="15" fill="rgb(231,138,38)"/><text x="26.6239%" y="95.50"></text></g><g><title>impl_trait_ref (1,574,196 samples, 0.74%)</title><rect x="26.6092%" y="101" width="0.7357%" height="15" fill="rgb(231,145,46)"/><text x="26.8592%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,219,429 samples, 0.57%)</title><rect x="26.7750%" y="85" width="0.5699%" height="15" fill="rgb(251,118,11)"/><text x="27.0250%" y="95.50"></text></g><g><title>trait_impls_of (339,523 samples, 0.16%)</title><rect x="27.3618%" y="101" width="0.1587%" height="15" fill="rgb(217,147,25)"/><text x="27.6118%" y="111.50"></text></g><g><title>coherent_trait (4,791,993 samples, 2.24%)</title><rect x="25.2812%" y="133" width="2.2397%" height="15" fill="rgb(247,81,37)"/><text x="25.5312%" y="143.50">c..</text></g><g><title>specialization_graph_of (4,675,512 samples, 2.19%)</title><rect x="25.3356%" y="117" width="2.1852%" height="15" fill="rgb(209,12,38)"/><text x="25.5856%" y="127.50">s..</text></g><g><title>coherence_checking (4,891,614 samples, 2.29%)</title><rect x="25.2693%" y="149" width="2.2862%" height="15" fill="rgb(227,1,9)"/><text x="25.5193%" y="159.50">c..</text></g><g><title>associated_items (299,714 samples, 0.14%)</title><rect x="35.9443%" y="101" width="0.1401%" height="15" fill="rgb(248,47,43)"/><text x="36.1943%" y="111.50"></text></g><g><title>dropck_outlives (740,677 samples, 0.35%)</title><rect x="36.1082%" y="101" width="0.3462%" height="15" fill="rgb(221,10,30)"/><text x="36.3582%" y="111.50"></text></g><g><title>normalize_projection_ty (260,051 samples, 0.12%)</title><rect x="36.3328%" y="85" width="0.1215%" height="15" fill="rgb(210,229,1)"/><text x="36.5828%" y="95.50"></text></g><g><title>evaluate_obligation (2,097,565 samples, 0.98%)</title><rect x="36.4544%" y="101" width="0.9804%" height="15" fill="rgb(222,148,37)"/><text x="36.7044%" y="111.50"></text></g><g><title>evaluate_obligation (323,673 samples, 0.15%)</title><rect x="37.7478%" y="85" width="0.1513%" height="15" fill="rgb(234,67,33)"/><text x="37.9978%" y="95.50"></text></g><g><title>method_autoderef_steps (654,587 samples, 0.31%)</title><rect x="37.5985%" y="101" width="0.3059%" height="15" fill="rgb(247,98,35)"/><text x="37.8485%" y="111.50"></text></g><g><title>evaluate_obligation (284,161 samples, 0.13%)</title><rect x="39.5910%" y="85" width="0.1328%" height="15" fill="rgb(247,138,52)"/><text x="39.8410%" y="95.50"></text></g><g><title>is_copy_raw (240,263 samples, 0.11%)</title><rect x="39.8057%" y="85" width="0.1123%" height="15" fill="rgb(213,79,30)"/><text x="40.0557%" y="95.50"></text></g><g><title>typeck (4,326,308 samples, 2.02%)</title><rect x="38.0625%" y="101" width="2.0220%" height="15" fill="rgb(246,177,23)"/><text x="38.3125%" y="111.50">t..</text></g><g><title>item_bodies_checking (26,800,035 samples, 12.53%)</title><rect x="27.5776%" y="149" width="12.5258%" height="15" fill="rgb(230,62,27)"/><text x="27.8276%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (26,797,405 samples, 12.52%)</title><rect x="27.5788%" y="133" width="12.5246%" height="15" fill="rgb(216,154,8)"/><text x="27.8288%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (26,706,815 samples, 12.48%)</title><rect x="27.6211%" y="117" width="12.4822%" height="15" fill="rgb(244,35,45)"/><text x="27.8711%" y="127.50">typeck</text></g><g><title>item_types_checking (3,038,324 samples, 1.42%)</title><rect x="40.1034%" y="149" width="1.4201%" height="15" fill="rgb(251,115,12)"/><text x="40.3534%" y="159.50"></text></g><g><title>check_mod_item_types (3,030,003 samples, 1.42%)</title><rect x="40.1072%" y="133" width="1.4162%" height="15" fill="rgb(240,54,50)"/><text x="40.3572%" y="143.50"></text></g><g><title>fn_sig (453,885 samples, 0.21%)</title><rect x="41.7411%" y="117" width="0.2121%" height="15" fill="rgb(233,84,52)"/><text x="41.9911%" y="127.50"></text></g><g><title>named_region_map (359,024 samples, 0.17%)</title><rect x="42.0399%" y="101" width="0.1678%" height="15" fill="rgb(207,117,47)"/><text x="42.2899%" y="111.50"></text></g><g><title>resolve_lifetimes (322,624 samples, 0.15%)</title><rect x="42.0569%" y="85" width="0.1508%" height="15" fill="rgb(249,43,39)"/><text x="42.3069%" y="95.50"></text></g><g><title>generics_of (573,846 samples, 0.27%)</title><rect x="41.9532%" y="117" width="0.2682%" height="15" fill="rgb(209,38,44)"/><text x="42.2032%" y="127.50"></text></g><g><title>late_bound_vars_map (509,319 samples, 0.24%)</title><rect x="42.7954%" y="69" width="0.2380%" height="15" fill="rgb(236,212,23)"/><text x="43.0454%" y="79.50"></text></g><g><title>resolve_lifetimes (476,758 samples, 0.22%)</title><rect x="42.8106%" y="53" width="0.2228%" height="15" fill="rgb(242,79,21)"/><text x="43.0606%" y="63.50"></text></g><g><title>explicit_predicates_of (1,776,249 samples, 0.83%)</title><rect x="42.4093%" y="85" width="0.8302%" height="15" fill="rgb(211,96,35)"/><text x="42.6593%" y="95.50"></text></g><g><title>type_param_predicates (291,452 samples, 0.14%)</title><rect x="43.1033%" y="69" width="0.1362%" height="15" fill="rgb(253,215,40)"/><text x="43.3533%" y="79.50"></text></g><g><title>predicates_of (2,427,875 samples, 1.13%)</title><rect x="42.3014%" y="117" width="1.1347%" height="15" fill="rgb(211,81,21)"/><text x="42.5514%" y="127.50"></text></g><g><title>predicates_defined_on (2,340,365 samples, 1.09%)</title><rect x="42.3423%" y="101" width="1.0938%" height="15" fill="rgb(208,190,38)"/><text x="42.5923%" y="111.50"></text></g><g><title>inferred_outlives_of (420,764 samples, 0.20%)</title><rect x="43.2395%" y="85" width="0.1967%" height="15" fill="rgb(235,213,38)"/><text x="43.4895%" y="95.50"></text></g><g><title>inferred_outlives_crate (385,444 samples, 0.18%)</title><rect x="43.2560%" y="69" width="0.1801%" height="15" fill="rgb(237,122,38)"/><text x="43.5060%" y="79.50"></text></g><g><title>type_of (274,624 samples, 0.13%)</title><rect x="43.3078%" y="53" width="0.1284%" height="15" fill="rgb(244,218,35)"/><text x="43.5578%" y="63.50"></text></g><g><title>type_collecting (4,424,119 samples, 2.07%)</title><rect x="41.5274%" y="149" width="2.0677%" height="15" fill="rgb(240,68,47)"/><text x="41.7774%" y="159.50">t..</text></g><g><title>collect_mod_item_types (4,410,938 samples, 2.06%)</title><rect x="41.5336%" y="133" width="2.0616%" height="15" fill="rgb(210,16,53)"/><text x="41.7836%" y="143.50">c..</text></g><g><title>evaluate_obligation (610,737 samples, 0.29%)</title><rect x="45.8044%" y="117" width="0.2854%" height="15" fill="rgb(235,124,12)"/><text x="46.0544%" y="127.50"></text></g><g><title>implied_outlives_bounds (862,135 samples, 0.40%)</title><rect x="46.0980%" y="117" width="0.4029%" height="15" fill="rgb(224,169,11)"/><text x="46.3480%" y="127.50"></text></g><g><title>param_env (904,018 samples, 0.42%)</title><rect x="46.5085%" y="117" width="0.4225%" height="15" fill="rgb(250,166,2)"/><text x="46.7585%" y="127.50"></text></g><g><title>region_scope_tree (309,053 samples, 0.14%)</title><rect x="46.9490%" y="117" width="0.1444%" height="15" fill="rgb(242,216,29)"/><text x="47.1990%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,118,596 samples, 3.33%)</title><rect x="43.7690%" y="133" width="3.3271%" height="15" fill="rgb(230,116,27)"/><text x="44.0190%" y="143.50">che..</text></g><g><title>evaluate_obligation (956,292 samples, 0.45%)</title><rect x="50.1009%" y="117" width="0.4470%" height="15" fill="rgb(228,99,48)"/><text x="50.3509%" y="127.50"></text></g><g><title>implied_outlives_bounds (650,456 samples, 0.30%)</title><rect x="50.5611%" y="117" width="0.3040%" height="15" fill="rgb(253,11,6)"/><text x="50.8111%" y="127.50"></text></g><g><title>param_env (2,709,349 samples, 1.27%)</title><rect x="50.8747%" y="117" width="1.2663%" height="15" fill="rgb(247,143,39)"/><text x="51.1247%" y="127.50"></text></g><g><title>check_item_well_formed (11,077,095 samples, 5.18%)</title><rect x="47.0961%" y="133" width="5.1772%" height="15" fill="rgb(236,97,10)"/><text x="47.3461%" y="143.50">check_..</text></g><g><title>evaluate_obligation (355,217 samples, 0.17%)</title><rect x="53.2113%" y="117" width="0.1660%" height="15" fill="rgb(233,208,19)"/><text x="53.4613%" y="127.50"></text></g><g><title>implied_outlives_bounds (377,206 samples, 0.18%)</title><rect x="53.3773%" y="117" width="0.1763%" height="15" fill="rgb(216,164,2)"/><text x="53.6273%" y="127.50"></text></g><g><title>param_env (339,230 samples, 0.16%)</title><rect x="53.5541%" y="117" width="0.1585%" height="15" fill="rgb(220,129,5)"/><text x="53.8041%" y="127.50"></text></g><g><title>analysis (98,251,553 samples, 45.92%)</title><rect x="7.8283%" y="181" width="45.9208%" height="15" fill="rgb(242,17,10)"/><text x="8.0783%" y="191.50">analysis</text></g><g><title>type_check_crate (61,040,303 samples, 28.53%)</title><rect x="25.2200%" y="165" width="28.5290%" height="15" fill="rgb(242,107,0)"/><text x="25.4700%" y="175.50">type_check_crate</text></g><g><title>wf_checking (21,720,279 samples, 10.15%)</title><rect x="43.5974%" y="149" width="10.1516%" height="15" fill="rgb(251,28,31)"/><text x="43.8474%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (3,157,415 samples, 1.48%)</title><rect x="52.2733%" y="133" width="1.4757%" height="15" fill="rgb(233,223,10)"/><text x="52.5233%" y="143.50"></text></g><g><title>fn_abi_of_instance (317,484 samples, 0.15%)</title><rect x="54.4949%" y="149" width="0.1484%" height="15" fill="rgb(215,21,27)"/><text x="54.7449%" y="159.50"></text></g><g><title>codegen_module (1,233,523 samples, 0.58%)</title><rect x="54.0804%" y="165" width="0.5765%" height="15" fill="rgb(232,23,21)"/><text x="54.3304%" y="175.50"></text></g><g><title>optimized_mir (357,513 samples, 0.17%)</title><rect x="54.7082%" y="117" width="0.1671%" height="15" fill="rgb(244,5,23)"/><text x="54.9582%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (451,165 samples, 0.21%)</title><rect x="54.6656%" y="133" width="0.2109%" height="15" fill="rgb(226,81,46)"/><text x="54.9156%" y="143.50"></text></g><g><title>monomorphization_collector (495,426 samples, 0.23%)</title><rect x="54.6646%" y="149" width="0.2316%" height="15" fill="rgb(247,70,30)"/><text x="54.9146%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (560,907 samples, 0.26%)</title><rect x="54.6572%" y="165" width="0.2622%" height="15" fill="rgb(212,68,19)"/><text x="54.9072%" y="175.50"></text></g><g><title>codegen_crate (2,521,869 samples, 1.18%)</title><rect x="53.7548%" y="181" width="1.1787%" height="15" fill="rgb(240,187,13)"/><text x="54.0048%" y="191.50"></text></g><g><title>codegen_module_optimize (10,287,723 samples, 4.81%)</title><rect x="54.9334%" y="181" width="4.8083%" height="15" fill="rgb(223,113,26)"/><text x="55.1834%" y="191.50">codege..</text></g><g><title>LLVM_module_optimize (8,691,246 samples, 4.06%)</title><rect x="55.6796%" y="165" width="4.0621%" height="15" fill="rgb(206,192,2)"/><text x="55.9296%" y="175.50">LLVM..</text></g><g><title>LLVM_lto_optimize (4,043,014 samples, 1.89%)</title><rect x="60.2111%" y="165" width="1.8896%" height="15" fill="rgb(241,108,4)"/><text x="60.4611%" y="175.50">L..</text></g><g><title>LLVM_module_codegen (12,311,637 samples, 5.75%)</title><rect x="62.1007%" y="165" width="5.7542%" height="15" fill="rgb(247,173,49)"/><text x="62.3507%" y="175.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (12,101,175 samples, 5.66%)</title><rect x="62.1991%" y="149" width="5.6558%" height="15" fill="rgb(224,114,35)"/><text x="62.4491%" y="159.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (17,466,643 samples, 8.16%)</title><rect x="59.7417%" y="181" width="8.1636%" height="15" fill="rgb(245,159,27)"/><text x="59.9917%" y="191.50">codegen_mod..</text></g><g><title>AST_validation (293,334 samples, 0.14%)</title><rect x="68.0086%" y="165" width="0.1371%" height="15" fill="rgb(245,172,44)"/><text x="68.2586%" y="175.50"></text></g><g><title>metadata_load_macro (215,454 samples, 0.10%)</title><rect x="80.4502%" y="133" width="0.1007%" height="15" fill="rgb(236,23,11)"/><text x="80.7002%" y="143.50"></text></g><g><title>metadata_register_crate (405,134 samples, 0.19%)</title><rect x="80.5509%" y="133" width="0.1894%" height="15" fill="rgb(205,117,38)"/><text x="80.8009%" y="143.50"></text></g><g><title>macro_expand_crate (27,171,129 samples, 12.70%)</title><rect x="68.2481%" y="165" width="12.6992%" height="15" fill="rgb(237,72,25)"/><text x="68.4981%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (27,153,909 samples, 12.69%)</title><rect x="68.2562%" y="149" width="12.6912%" height="15" fill="rgb(244,70,9)"/><text x="68.5062%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (443,207 samples, 0.21%)</title><rect x="80.7402%" y="133" width="0.2071%" height="15" fill="rgb(217,125,39)"/><text x="80.9902%" y="143.50"></text></g><g><title>finalize_imports (305,353 samples, 0.14%)</title><rect x="81.0412%" y="149" width="0.1427%" height="15" fill="rgb(235,36,10)"/><text x="81.2912%" y="159.50"></text></g><g><title>late_resolve_crate (3,070,204 samples, 1.43%)</title><rect x="81.2780%" y="149" width="1.4350%" height="15" fill="rgb(251,123,47)"/><text x="81.5280%" y="159.50"></text></g><g><title>configure_and_expand (31,939,472 samples, 14.93%)</title><rect x="67.9053%" y="181" width="14.9279%" height="15" fill="rgb(221,13,13)"/><text x="68.1553%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,842,192 samples, 1.80%)</title><rect x="81.0374%" y="165" width="1.7958%" height="15" fill="rgb(238,131,9)"/><text x="81.2874%" y="175.50">r..</text></g><g><title>drop_ast (231,933 samples, 0.11%)</title><rect x="82.8331%" y="181" width="0.1084%" height="15" fill="rgb(211,50,8)"/><text x="83.0831%" y="191.50"></text></g><g><title>early_lint_checks (365,394 samples, 0.17%)</title><rect x="82.9506%" y="181" width="0.1708%" height="15" fill="rgb(245,182,24)"/><text x="83.2006%" y="191.50"></text></g><g><title>free_global_ctxt (2,453,777 samples, 1.15%)</title><rect x="83.1214%" y="181" width="1.1468%" height="15" fill="rgb(242,14,37)"/><text x="83.3714%" y="191.50"></text></g><g><title>exported_symbols (239,693 samples, 0.11%)</title><rect x="85.3368%" y="165" width="0.1120%" height="15" fill="rgb(246,228,12)"/><text x="85.5868%" y="175.50"></text></g><g><title>is_sized_raw (513,736 samples, 0.24%)</title><rect x="87.1452%" y="133" width="0.2401%" height="15" fill="rgb(213,55,15)"/><text x="87.3952%" y="143.50"></text></g><g><title>evaluate_obligation (415,315 samples, 0.19%)</title><rect x="87.1912%" y="117" width="0.1941%" height="15" fill="rgb(209,9,3)"/><text x="87.4412%" y="127.50"></text></g><g><title>layout_of (1,560,129 samples, 0.73%)</title><rect x="86.9303%" y="149" width="0.7292%" height="15" fill="rgb(230,59,30)"/><text x="87.1803%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (357,664 samples, 0.17%)</title><rect x="87.4923%" y="133" width="0.1672%" height="15" fill="rgb(209,121,21)"/><text x="87.7423%" y="143.50"></text></g><g><title>is_copy_raw (748,391 samples, 0.35%)</title><rect x="89.1784%" y="117" width="0.3498%" height="15" fill="rgb(220,109,13)"/><text x="89.4284%" y="127.50"></text></g><g><title>evaluate_obligation (596,398 samples, 0.28%)</title><rect x="89.2494%" y="101" width="0.2787%" height="15" fill="rgb(232,18,1)"/><text x="89.4994%" y="111.50"></text></g><g><title>needs_drop_raw (1,149,386 samples, 0.54%)</title><rect x="89.1122%" y="133" width="0.5372%" height="15" fill="rgb(215,41,42)"/><text x="89.3622%" y="143.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (259,454 samples, 0.12%)</title><rect x="89.5282%" y="117" width="0.1213%" height="15" fill="rgb(224,123,36)"/><text x="89.7782%" y="127.50"></text></g><g><title>normalize_projection_ty (220,174 samples, 0.10%)</title><rect x="89.5465%" y="101" width="0.1029%" height="15" fill="rgb(240,125,3)"/><text x="89.7965%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,594,128 samples, 2.15%)</title><rect x="87.6595%" y="149" width="2.1472%" height="15" fill="rgb(205,98,50)"/><text x="87.9095%" y="159.50">m..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (288,413 samples, 0.13%)</title><rect x="89.6719%" y="133" width="0.1348%" height="15" fill="rgb(205,185,37)"/><text x="89.9219%" y="143.50"></text></g><g><title>normalize_projection_ty (219,933 samples, 0.10%)</title><rect x="89.7039%" y="117" width="0.1028%" height="15" fill="rgb(238,207,15)"/><text x="89.9539%" y="127.50"></text></g><g><title>optimized_mir (9,367,267 samples, 4.38%)</title><rect x="85.5429%" y="165" width="4.3781%" height="15" fill="rgb(213,199,42)"/><text x="85.7929%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (12,200,425 samples, 5.70%)</title><rect x="84.2682%" y="181" width="5.7022%" height="15" fill="rgb(235,201,11)"/><text x="84.5182%" y="191.50">generat..</text></g><g><title>hir_lowering (4,207,116 samples, 1.97%)</title><rect x="89.9704%" y="181" width="1.9663%" height="15" fill="rgb(207,46,11)"/><text x="90.2204%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (12,316,136 samples, 5.76%)</title><rect x="91.9434%" y="165" width="5.7563%" height="15" fill="rgb(241,35,35)"/><text x="92.1934%" y="175.50">finish_..</text></g><g><title>link_crate (985,551 samples, 0.46%)</title><rect x="97.6997%" y="165" width="0.4606%" height="15" fill="rgb(243,32,47)"/><text x="97.9497%" y="175.50"></text></g><g><title>link_binary (978,521 samples, 0.46%)</title><rect x="97.7030%" y="149" width="0.4573%" height="15" fill="rgb(247,202,23)"/><text x="97.9530%" y="159.50"></text></g><g><title>link_rlib (692,467 samples, 0.32%)</title><rect x="97.8367%" y="133" width="0.3236%" height="15" fill="rgb(219,102,11)"/><text x="98.0867%" y="143.50"></text></g><g><title>link (13,323,867 samples, 6.23%)</title><rect x="91.9367%" y="181" width="6.2273%" height="15" fill="rgb(243,110,44)"/><text x="92.1867%" y="191.50">link</text></g><g><title>parse_crate (2,328,386 samples, 1.09%)</title><rect x="98.1641%" y="181" width="1.0882%" height="15" fill="rgb(222,74,54)"/><text x="98.4141%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (854,829 samples, 0.40%)</title><rect x="99.3486%" y="181" width="0.3995%" height="15" fill="rgb(216,99,12)"/><text x="99.5986%" y="191.50"></text></g><g><title>all (213,958,880 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (213,958,880 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (459,235 samples, 0.21%)</title><rect x="99.7854%" y="181" width="0.2146%" height="15" fill="rgb(213,25,53)"/><text x="100.0354%" y="191.50"></text></g></svg></svg>