<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (241,127,688 samples, 10.07%)</title><rect x="0.0578%" y="149" width="10.0664%" height="15" fill="rgb(227,0,7)"/><text x="0.3078%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (2,762,020 samples, 0.12%)</title><rect x="10.0090%" y="133" width="0.1153%" height="15" fill="rgb(217,0,24)"/><text x="10.2590%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (2,663,879 samples, 0.11%)</title><rect x="10.0131%" y="117" width="0.1112%" height="15" fill="rgb(221,193,54)"/><text x="10.2631%" y="127.50"></text></g><g><title>needs_drop_raw (2,923,414 samples, 0.12%)</title><rect x="13.5460%" y="37" width="0.1220%" height="15" fill="rgb(248,212,6)"/><text x="13.7960%" y="47.50"></text></g><g><title>resolve_instance (4,139,647 samples, 0.17%)</title><rect x="13.6698%" y="37" width="0.1728%" height="15" fill="rgb(208,68,35)"/><text x="13.9198%" y="47.50"></text></g><g><title>thir_body (5,360,930 samples, 0.22%)</title><rect x="13.8497%" y="37" width="0.2238%" height="15" fill="rgb(232,128,0)"/><text x="14.0997%" y="47.50"></text></g><g><title>mir_const (34,225,542 samples, 1.43%)</title><rect x="12.6539%" y="85" width="1.4288%" height="15" fill="rgb(207,160,47)"/><text x="12.9039%" y="95.50"></text></g><g><title>unsafety_check_result (29,545,267 samples, 1.23%)</title><rect x="12.8493%" y="69" width="1.2334%" height="15" fill="rgb(228,23,34)"/><text x="13.0993%" y="79.50"></text></g><g><title>mir_built (26,371,062 samples, 1.10%)</title><rect x="12.9818%" y="53" width="1.1009%" height="15" fill="rgb(218,30,26)"/><text x="13.2318%" y="63.50"></text></g><g><title>mir_promoted (39,045,346 samples, 1.63%)</title><rect x="12.4910%" y="101" width="1.6300%" height="15" fill="rgb(220,122,19)"/><text x="12.7410%" y="111.50"></text></g><g><title>type_op_prove_predicate (7,984,573 samples, 0.33%)</title><rect x="14.3010%" y="101" width="0.3333%" height="15" fill="rgb(250,228,42)"/><text x="14.5510%" y="111.50"></text></g><g><title>MIR_borrow_checking (106,999,229 samples, 4.47%)</title><rect x="10.1683%" y="133" width="4.4669%" height="15" fill="rgb(240,193,28)"/><text x="10.4183%" y="143.50">MIR_b..</text></g><g><title>mir_borrowck (106,251,485 samples, 4.44%)</title><rect x="10.1995%" y="117" width="4.4357%" height="15" fill="rgb(216,20,37)"/><text x="10.4495%" y="127.50">mir_b..</text></g><g><title>misc_checking_1 (5,128,996 samples, 0.21%)</title><rect x="14.6985%" y="133" width="0.2141%" height="15" fill="rgb(206,188,39)"/><text x="14.9485%" y="143.50"></text></g><g><title>misc_checking_2 (6,029,656 samples, 0.25%)</title><rect x="14.9126%" y="133" width="0.2517%" height="15" fill="rgb(217,207,13)"/><text x="15.1626%" y="143.50"></text></g><g><title>match_checking (4,132,875 samples, 0.17%)</title><rect x="14.9918%" y="117" width="0.1725%" height="15" fill="rgb(231,73,38)"/><text x="15.2418%" y="127.50"></text></g><g><title>check_match (3,945,172 samples, 0.16%)</title><rect x="14.9996%" y="101" width="0.1647%" height="15" fill="rgb(225,20,46)"/><text x="15.2496%" y="111.50"></text></g><g><title>crate_lints (4,230,607 samples, 0.18%)</title><rect x="15.2866%" y="101" width="0.1766%" height="15" fill="rgb(210,31,41)"/><text x="15.5366%" y="111.50"></text></g><g><title>lint_checking (6,041,867 samples, 0.25%)</title><rect x="15.2865%" y="117" width="0.2522%" height="15" fill="rgb(221,200,47)"/><text x="15.5365%" y="127.50"></text></g><g><title>privacy_checking_modules (3,805,612 samples, 0.16%)</title><rect x="15.6240%" y="117" width="0.1589%" height="15" fill="rgb(226,26,5)"/><text x="15.8740%" y="127.50"></text></g><g><title>check_mod_privacy (3,797,671 samples, 0.16%)</title><rect x="15.6243%" y="101" width="0.1585%" height="15" fill="rgb(249,33,26)"/><text x="15.8743%" y="111.50"></text></g><g><title>misc_checking_3 (14,855,124 samples, 0.62%)</title><rect x="15.1643%" y="133" width="0.6202%" height="15" fill="rgb(235,183,28)"/><text x="15.4143%" y="143.50"></text></g><g><title>impl_parent (3,308,400 samples, 0.14%)</title><rect x="16.1089%" y="69" width="0.1381%" height="15" fill="rgb(221,5,38)"/><text x="16.3589%" y="79.50"></text></g><g><title>impl_trait_ref (6,810,027 samples, 0.28%)</title><rect x="16.2473%" y="69" width="0.2843%" height="15" fill="rgb(247,18,42)"/><text x="16.4973%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,241,710 samples, 0.22%)</title><rect x="16.3127%" y="53" width="0.2188%" height="15" fill="rgb(241,131,45)"/><text x="16.5627%" y="63.50"></text></g><g><title>coherent_trait (23,291,156 samples, 0.97%)</title><rect x="15.8003%" y="101" width="0.9723%" height="15" fill="rgb(249,31,29)"/><text x="16.0503%" y="111.50"></text></g><g><title>specialization_graph_of (22,586,479 samples, 0.94%)</title><rect x="15.8297%" y="85" width="0.9429%" height="15" fill="rgb(225,111,53)"/><text x="16.0797%" y="95.50"></text></g><g><title>visible_parent_map (4,315,907 samples, 0.18%)</title><rect x="16.5925%" y="69" width="0.1802%" height="15" fill="rgb(238,160,17)"/><text x="16.8425%" y="79.50"></text></g><g><title>module_children (3,896,804 samples, 0.16%)</title><rect x="16.6100%" y="53" width="0.1627%" height="15" fill="rgb(214,148,48)"/><text x="16.8600%" y="63.50"></text></g><g><title>metadata_decode_entry_module_children (3,828,013 samples, 0.16%)</title><rect x="16.6128%" y="37" width="0.1598%" height="15" fill="rgb(232,36,49)"/><text x="16.8628%" y="47.50"></text></g><g><title>coherence_checking (23,555,959 samples, 0.98%)</title><rect x="15.7987%" y="117" width="0.9834%" height="15" fill="rgb(209,103,24)"/><text x="16.0487%" y="127.50"></text></g><g><title>specializes (4,084,413 samples, 0.17%)</title><rect x="21.3270%" y="53" width="0.1705%" height="15" fill="rgb(229,88,8)"/><text x="21.5770%" y="63.50"></text></g><g><title>evaluate_obligation (25,466,536 samples, 1.06%)</title><rect x="20.4639%" y="69" width="1.0632%" height="15" fill="rgb(213,181,19)"/><text x="20.7139%" y="79.50"></text></g><g><title>evaluate_obligation (2,784,403 samples, 0.12%)</title><rect x="22.8160%" y="53" width="0.1162%" height="15" fill="rgb(254,191,54)"/><text x="23.0660%" y="63.50"></text></g><g><title>typeck (29,841,769 samples, 1.25%)</title><rect x="21.7749%" y="69" width="1.2458%" height="15" fill="rgb(241,83,37)"/><text x="22.0249%" y="79.50"></text></g><g><title>item_bodies_checking (149,431,577 samples, 6.24%)</title><rect x="16.7897%" y="117" width="6.2384%" height="15" fill="rgb(233,36,39)"/><text x="17.0397%" y="127.50">item_bod..</text></g><g><title>typeck_item_bodies (149,427,707 samples, 6.24%)</title><rect x="16.7898%" y="101" width="6.2382%" height="15" fill="rgb(226,3,54)"/><text x="17.0398%" y="111.50">typeck_i..</text></g><g><title>typeck (148,925,182 samples, 6.22%)</title><rect x="16.8108%" y="85" width="6.2172%" height="15" fill="rgb(245,192,40)"/><text x="17.0608%" y="95.50">typeck</text></g><g><title>item_types_checking (6,102,118 samples, 0.25%)</title><rect x="23.0280%" y="117" width="0.2547%" height="15" fill="rgb(238,167,29)"/><text x="23.2780%" y="127.50"></text></g><g><title>check_mod_item_types (6,091,298 samples, 0.25%)</title><rect x="23.0285%" y="101" width="0.2543%" height="15" fill="rgb(232,182,51)"/><text x="23.2785%" y="111.50"></text></g><g><title>fn_sig (2,788,370 samples, 0.12%)</title><rect x="23.3397%" y="85" width="0.1164%" height="15" fill="rgb(231,60,39)"/><text x="23.5897%" y="95.50"></text></g><g><title>predicates_of (2,399,871 samples, 0.10%)</title><rect x="23.5660%" y="85" width="0.1002%" height="15" fill="rgb(208,69,12)"/><text x="23.8160%" y="95.50"></text></g><g><title>type_collecting (9,679,287 samples, 0.40%)</title><rect x="23.2832%" y="117" width="0.4041%" height="15" fill="rgb(235,93,37)"/><text x="23.5332%" y="127.50"></text></g><g><title>collect_mod_item_types (9,655,366 samples, 0.40%)</title><rect x="23.2842%" y="101" width="0.4031%" height="15" fill="rgb(213,116,39)"/><text x="23.5342%" y="111.50"></text></g><g><title>check_impl_item_well_formed (15,223,436 samples, 0.64%)</title><rect x="23.7322%" y="101" width="0.6355%" height="15" fill="rgb(222,207,29)"/><text x="23.9822%" y="111.50"></text></g><g><title>check_item_well_formed (10,694,281 samples, 0.45%)</title><rect x="24.3677%" y="101" width="0.4465%" height="15" fill="rgb(206,96,30)"/><text x="24.6177%" y="111.50"></text></g><g><title>analysis (353,483,116 samples, 14.76%)</title><rect x="10.1243%" y="149" width="14.7570%" height="15" fill="rgb(218,138,4)"/><text x="10.3743%" y="159.50">analysis</text></g><g><title>type_check_crate (217,900,132 samples, 9.10%)</title><rect x="15.7845%" y="133" width="9.0968%" height="15" fill="rgb(250,191,14)"/><text x="16.0345%" y="143.50">type_check_cr..</text></g><g><title>wf_checking (28,570,655 samples, 1.19%)</title><rect x="23.6885%" y="117" width="1.1927%" height="15" fill="rgb(239,60,40)"/><text x="23.9385%" y="127.50"></text></g><g><title>layout_of (2,528,098 samples, 0.11%)</title><rect x="27.9935%" y="101" width="0.1055%" height="15" fill="rgb(206,27,48)"/><text x="28.2435%" y="111.50"></text></g><g><title>param_env (4,573,512 samples, 0.19%)</title><rect x="28.0991%" y="101" width="0.1909%" height="15" fill="rgb(225,35,8)"/><text x="28.3491%" y="111.50"></text></g><g><title>fn_abi_of_instance (18,017,280 samples, 0.75%)</title><rect x="27.5888%" y="117" width="0.7522%" height="15" fill="rgb(250,213,24)"/><text x="27.8388%" y="127.50"></text></g><g><title>codegen_module (82,566,020 samples, 3.45%)</title><rect x="25.0018%" y="133" width="3.4469%" height="15" fill="rgb(247,123,22)"/><text x="25.2518%" y="143.50">cod..</text></g><g><title>mir_drops_elaborated_and_const_checked (8,555,048 samples, 0.36%)</title><rect x="29.2741%" y="69" width="0.3572%" height="15" fill="rgb(231,138,38)"/><text x="29.5241%" y="79.50"></text></g><g><title>optimized_mir (23,689,173 samples, 0.99%)</title><rect x="28.7113%" y="85" width="0.9890%" height="15" fill="rgb(231,145,46)"/><text x="28.9613%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (4,074,653 samples, 0.17%)</title><rect x="29.7609%" y="69" width="0.1701%" height="15" fill="rgb(251,118,11)"/><text x="30.0109%" y="79.50"></text></g><g><title>resolve_instance (7,332,081 samples, 0.31%)</title><rect x="29.7003%" y="85" width="0.3061%" height="15" fill="rgb(217,147,25)"/><text x="29.9503%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (39,461,495 samples, 1.65%)</title><rect x="28.4517%" y="101" width="1.6474%" height="15" fill="rgb(247,81,37)"/><text x="28.7017%" y="111.50"></text></g><g><title>monomorphization_collector (39,819,039 samples, 1.66%)</title><rect x="28.4516%" y="117" width="1.6623%" height="15" fill="rgb(209,12,38)"/><text x="28.7016%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (2,509,458 samples, 0.10%)</title><rect x="30.1142%" y="101" width="0.1048%" height="15" fill="rgb(227,1,9)"/><text x="30.3642%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (43,558,820 samples, 1.82%)</title><rect x="28.4493%" y="133" width="1.8185%" height="15" fill="rgb(248,47,43)"/><text x="28.6993%" y="143.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (3,684,281 samples, 0.15%)</title><rect x="30.1139%" y="117" width="0.1538%" height="15" fill="rgb(221,10,30)"/><text x="30.3639%" y="127.50"></text></g><g><title>codegen_crate (129,081,923 samples, 5.39%)</title><rect x="24.8817%" y="149" width="5.3888%" height="15" fill="rgb(210,229,1)"/><text x="25.1317%" y="159.50">codegen..</text></g><g><title>codegen_module_optimize (637,435,054 samples, 26.61%)</title><rect x="30.2705%" y="149" width="26.6112%" height="15" fill="rgb(222,148,37)"/><text x="30.5205%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (597,887,555 samples, 24.96%)</title><rect x="31.9215%" y="133" width="24.9602%" height="15" fill="rgb(234,67,33)"/><text x="32.1715%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (371,266,377 samples, 15.50%)</title><rect x="57.7285%" y="133" width="15.4994%" height="15" fill="rgb(247,98,35)"/><text x="57.9785%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (324,092,913 samples, 13.53%)</title><rect x="73.2279%" y="133" width="13.5300%" height="15" fill="rgb(247,138,52)"/><text x="73.4779%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (321,247,575 samples, 13.41%)</title><rect x="73.3467%" y="117" width="13.4112%" height="15" fill="rgb(213,79,30)"/><text x="73.5967%" y="127.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (34,075,708 samples, 1.42%)</title><rect x="86.7579%" y="133" width="1.4226%" height="15" fill="rgb(246,177,23)"/><text x="87.0079%" y="143.50"></text></g><g><title>codegen_module_perform_lto (751,332,386 samples, 31.37%)</title><rect x="56.8817%" y="149" width="31.3662%" height="15" fill="rgb(230,62,27)"/><text x="57.1317%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,674,949 samples, 0.11%)</title><rect x="90.5705%" y="101" width="0.1117%" height="15" fill="rgb(216,154,8)"/><text x="90.8205%" y="111.50"></text></g><g><title>macro_expand_crate (58,709,546 samples, 2.45%)</title><rect x="88.2907%" y="133" width="2.4510%" height="15" fill="rgb(244,35,45)"/><text x="88.5407%" y="143.50">ma..</text></g><g><title>expand_crate (58,695,196 samples, 2.45%)</title><rect x="88.2913%" y="117" width="2.4504%" height="15" fill="rgb(251,115,12)"/><text x="88.5413%" y="127.50">ex..</text></g><g><title>late_resolve_crate (6,315,319 samples, 0.26%)</title><rect x="90.7713%" y="117" width="0.2636%" height="15" fill="rgb(240,54,50)"/><text x="91.0213%" y="127.50"></text></g><g><title>configure_and_expand (67,261,851 samples, 2.81%)</title><rect x="88.2479%" y="149" width="2.8080%" height="15" fill="rgb(233,84,52)"/><text x="88.4979%" y="159.50">co..</text></g><g><title>resolve_crate (7,453,422 samples, 0.31%)</title><rect x="90.7447%" y="133" width="0.3112%" height="15" fill="rgb(207,117,47)"/><text x="90.9947%" y="143.50"></text></g><g><title>early_lint_checks (3,798,303 samples, 0.16%)</title><rect x="91.1019%" y="149" width="0.1586%" height="15" fill="rgb(249,43,39)"/><text x="91.3519%" y="159.50"></text></g><g><title>free_global_ctxt (13,210,265 samples, 0.55%)</title><rect x="91.2605%" y="149" width="0.5515%" height="15" fill="rgb(209,38,44)"/><text x="91.5105%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,134,727 samples, 0.34%)</title><rect x="92.5718%" y="117" width="0.3396%" height="15" fill="rgb(236,212,23)"/><text x="92.8218%" y="127.50"></text></g><g><title>optimized_mir (18,060,462 samples, 0.75%)</title><rect x="92.1688%" y="133" width="0.7540%" height="15" fill="rgb(242,79,21)"/><text x="92.4188%" y="143.50"></text></g><g><title>generate_crate_metadata (26,937,807 samples, 1.12%)</title><rect x="91.8120%" y="149" width="1.1246%" height="15" fill="rgb(211,96,35)"/><text x="92.0620%" y="159.50"></text></g><g><title>hir_lowering (13,249,546 samples, 0.55%)</title><rect x="92.9365%" y="149" width="0.5531%" height="15" fill="rgb(253,215,40)"/><text x="93.1865%" y="159.50"></text></g><g><title>finish_ongoing_codegen (147,698,969 samples, 6.17%)</title><rect x="93.4969%" y="133" width="6.1660%" height="15" fill="rgb(211,81,21)"/><text x="93.7469%" y="143.50">finish_o..</text></g><g><title>link_crate (2,514,167 samples, 0.10%)</title><rect x="99.6629%" y="133" width="0.1050%" height="15" fill="rgb(208,190,38)"/><text x="99.9129%" y="143.50"></text></g><g><title>link_binary (2,431,266 samples, 0.10%)</title><rect x="99.6664%" y="117" width="0.1015%" height="15" fill="rgb(235,213,38)"/><text x="99.9164%" y="127.50"></text></g><g><title>link (150,398,178 samples, 6.28%)</title><rect x="93.4897%" y="149" width="6.2787%" height="15" fill="rgb(237,122,38)"/><text x="93.7397%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (3,976,794 samples, 0.17%)</title><rect x="99.8033%" y="149" width="0.1660%" height="15" fill="rgb(244,218,35)"/><text x="100.0533%" y="159.50"></text></g><g><title>all (2,395,360,324 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,395,360,324 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>