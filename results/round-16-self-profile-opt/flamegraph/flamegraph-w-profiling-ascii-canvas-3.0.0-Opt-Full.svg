<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (197,006,415 samples, 13.14%)</title><rect x="0.0294%" y="165" width="13.1374%" height="15" fill="rgb(227,0,7)"/><text x="0.2794%" y="175.50">LLVM_passes</text></g><g><title>specialization_graph_of (1,557,056 samples, 0.10%)</title><rect x="14.7702%" y="37" width="0.1038%" height="15" fill="rgb(217,0,24)"/><text x="15.0202%" y="47.50"></text></g><g><title>resolve_instance (2,218,413 samples, 0.15%)</title><rect x="14.7300%" y="53" width="0.1479%" height="15" fill="rgb(221,193,54)"/><text x="14.9800%" y="63.50"></text></g><g><title>mir_const (10,321,765 samples, 0.69%)</title><rect x="14.2719%" y="101" width="0.6883%" height="15" fill="rgb(248,212,6)"/><text x="14.5219%" y="111.50"></text></g><g><title>unsafety_check_result (9,145,894 samples, 0.61%)</title><rect x="14.3503%" y="85" width="0.6099%" height="15" fill="rgb(208,68,35)"/><text x="14.6003%" y="95.50"></text></g><g><title>mir_built (8,005,509 samples, 0.53%)</title><rect x="14.4264%" y="69" width="0.5338%" height="15" fill="rgb(232,128,0)"/><text x="14.6764%" y="79.50"></text></g><g><title>mir_const_qualif (1,727,216 samples, 0.12%)</title><rect x="14.9602%" y="101" width="0.1152%" height="15" fill="rgb(207,160,47)"/><text x="15.2102%" y="111.50"></text></g><g><title>mir_promoted (13,174,092 samples, 0.88%)</title><rect x="14.1969%" y="117" width="0.8785%" height="15" fill="rgb(228,23,34)"/><text x="14.4469%" y="127.50"></text></g><g><title>type_op_prove_predicate (1,825,956 samples, 0.12%)</title><rect x="15.1559%" y="117" width="0.1218%" height="15" fill="rgb(218,30,26)"/><text x="15.4059%" y="127.50"></text></g><g><title>MIR_borrow_checking (31,342,204 samples, 2.09%)</title><rect x="13.1880%" y="149" width="2.0901%" height="15" fill="rgb(220,122,19)"/><text x="13.4380%" y="159.50">M..</text></g><g><title>mir_borrowck (31,184,053 samples, 2.08%)</title><rect x="13.1986%" y="133" width="2.0795%" height="15" fill="rgb(250,228,42)"/><text x="13.4486%" y="143.50">m..</text></g><g><title>crate_lints (3,157,433 samples, 0.21%)</title><rect x="15.5469%" y="117" width="0.2106%" height="15" fill="rgb(240,193,28)"/><text x="15.7969%" y="127.50"></text></g><g><title>lint_checking (3,738,679 samples, 0.25%)</title><rect x="15.5468%" y="133" width="0.2493%" height="15" fill="rgb(216,20,37)"/><text x="15.7968%" y="143.50"></text></g><g><title>misc_checking_3 (5,624,310 samples, 0.38%)</title><rect x="15.4981%" y="149" width="0.3751%" height="15" fill="rgb(206,188,39)"/><text x="15.7481%" y="159.50"></text></g><g><title>impl_parent (2,506,388 samples, 0.17%)</title><rect x="16.1813%" y="85" width="0.1671%" height="15" fill="rgb(217,207,13)"/><text x="16.4313%" y="95.50"></text></g><g><title>impl_trait_ref (5,732,016 samples, 0.38%)</title><rect x="16.3485%" y="85" width="0.3822%" height="15" fill="rgb(231,73,38)"/><text x="16.5985%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,267,552 samples, 0.28%)</title><rect x="16.4461%" y="69" width="0.2846%" height="15" fill="rgb(225,20,46)"/><text x="16.6961%" y="79.50"></text></g><g><title>coherent_trait (13,670,546 samples, 0.91%)</title><rect x="15.8789%" y="117" width="0.9116%" height="15" fill="rgb(210,31,41)"/><text x="16.1289%" y="127.50"></text></g><g><title>specialization_graph_of (13,107,309 samples, 0.87%)</title><rect x="15.9164%" y="101" width="0.8741%" height="15" fill="rgb(221,200,47)"/><text x="16.1664%" y="111.50"></text></g><g><title>coherence_checking (13,733,146 samples, 0.92%)</title><rect x="15.8776%" y="133" width="0.9158%" height="15" fill="rgb(226,26,5)"/><text x="16.1276%" y="143.50"></text></g><g><title>evaluate_obligation (2,108,066 samples, 0.14%)</title><rect x="18.3782%" y="85" width="0.1406%" height="15" fill="rgb(249,33,26)"/><text x="18.6282%" y="95.50"></text></g><g><title>typeck (2,913,871 samples, 0.19%)</title><rect x="18.6235%" y="85" width="0.1943%" height="15" fill="rgb(235,183,28)"/><text x="18.8735%" y="95.50"></text></g><g><title>item_bodies_checking (30,382,873 samples, 2.03%)</title><rect x="16.7951%" y="133" width="2.0261%" height="15" fill="rgb(221,5,38)"/><text x="17.0451%" y="143.50">i..</text></g><g><title>typeck_item_bodies (30,380,223 samples, 2.03%)</title><rect x="16.7952%" y="117" width="2.0259%" height="15" fill="rgb(247,18,42)"/><text x="17.0452%" y="127.50">t..</text></g><g><title>typeck (30,309,063 samples, 2.02%)</title><rect x="16.8000%" y="101" width="2.0212%" height="15" fill="rgb(241,131,45)"/><text x="17.0500%" y="111.50">t..</text></g><g><title>specializes (1,950,798 samples, 0.13%)</title><rect x="19.3667%" y="69" width="0.1301%" height="15" fill="rgb(249,31,29)"/><text x="19.6167%" y="79.50"></text></g><g><title>evaluate_obligation (6,283,056 samples, 0.42%)</title><rect x="19.0874%" y="85" width="0.4190%" height="15" fill="rgb(225,111,53)"/><text x="19.3374%" y="95.50"></text></g><g><title>item_types_checking (10,423,331 samples, 0.70%)</title><rect x="18.8212%" y="133" width="0.6951%" height="15" fill="rgb(238,160,17)"/><text x="19.0712%" y="143.50"></text></g><g><title>check_mod_item_types (10,419,111 samples, 0.69%)</title><rect x="18.8214%" y="117" width="0.6948%" height="15" fill="rgb(214,148,48)"/><text x="19.0714%" y="127.50"></text></g><g><title>typeck (9,861,664 samples, 0.66%)</title><rect x="18.8586%" y="101" width="0.6576%" height="15" fill="rgb(232,36,49)"/><text x="19.1086%" y="111.50"></text></g><g><title>type_collecting (2,089,093 samples, 0.14%)</title><rect x="19.5164%" y="133" width="0.1393%" height="15" fill="rgb(209,103,24)"/><text x="19.7664%" y="143.50"></text></g><g><title>collect_mod_item_types (2,082,723 samples, 0.14%)</title><rect x="19.5168%" y="117" width="0.1389%" height="15" fill="rgb(229,88,8)"/><text x="19.7668%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,866,302 samples, 0.19%)</title><rect x="19.6678%" y="117" width="0.1911%" height="15" fill="rgb(213,181,19)"/><text x="19.9178%" y="127.50"></text></g><g><title>check_item_well_formed (1,967,320 samples, 0.13%)</title><rect x="19.8589%" y="117" width="0.1312%" height="15" fill="rgb(254,191,54)"/><text x="20.1089%" y="127.50"></text></g><g><title>analysis (102,491,250 samples, 6.83%)</title><rect x="13.1668%" y="165" width="6.8347%" height="15" fill="rgb(241,83,37)"/><text x="13.4168%" y="175.50">analysis</text></g><g><title>type_check_crate (61,907,199 samples, 4.13%)</title><rect x="15.8732%" y="149" width="4.1283%" height="15" fill="rgb(233,36,39)"/><text x="16.1232%" y="159.50">type..</text></g><g><title>wf_checking (5,178,115 samples, 0.35%)</title><rect x="19.6562%" y="133" width="0.3453%" height="15" fill="rgb(226,3,54)"/><text x="19.9062%" y="143.50"></text></g><g><title>is_unpin_raw (1,606,366 samples, 0.11%)</title><rect x="23.4035%" y="117" width="0.1071%" height="15" fill="rgb(245,192,40)"/><text x="23.6535%" y="127.50"></text></g><g><title>layout_of (2,043,262 samples, 0.14%)</title><rect x="23.5106%" y="117" width="0.1363%" height="15" fill="rgb(238,167,29)"/><text x="23.7606%" y="127.50"></text></g><g><title>param_env (4,493,908 samples, 0.30%)</title><rect x="23.6469%" y="117" width="0.2997%" height="15" fill="rgb(232,182,51)"/><text x="23.8969%" y="127.50"></text></g><g><title>fn_abi_of_instance (15,261,369 samples, 1.02%)</title><rect x="22.9858%" y="133" width="1.0177%" height="15" fill="rgb(231,60,39)"/><text x="23.2358%" y="143.50"></text></g><g><title>codegen_module (59,572,441 samples, 3.97%)</title><rect x="20.1654%" y="149" width="3.9726%" height="15" fill="rgb(208,69,12)"/><text x="20.4154%" y="159.50">code..</text></g><g><title>codegen_fn_attrs (2,151,885 samples, 0.14%)</title><rect x="24.3663%" y="101" width="0.1435%" height="15" fill="rgb(235,93,37)"/><text x="24.6163%" y="111.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,614,939 samples, 0.17%)</title><rect x="24.7240%" y="85" width="0.1744%" height="15" fill="rgb(213,116,39)"/><text x="24.9740%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,615,808 samples, 0.11%)</title><rect x="24.8984%" y="85" width="0.1078%" height="15" fill="rgb(222,207,29)"/><text x="25.1484%" y="95.50"></text></g><g><title>optimized_mir (6,654,541 samples, 0.44%)</title><rect x="24.5789%" y="101" width="0.4438%" height="15" fill="rgb(206,96,30)"/><text x="24.8289%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,398,263 samples, 0.36%)</title><rect x="25.1216%" y="85" width="0.3600%" height="15" fill="rgb(218,138,4)"/><text x="25.3716%" y="95.50"></text></g><g><title>specialization_graph_of (3,139,841 samples, 0.21%)</title><rect x="25.5693%" y="85" width="0.2094%" height="15" fill="rgb(250,191,14)"/><text x="25.8193%" y="95.50"></text></g><g><title>resolve_instance (11,741,641 samples, 0.78%)</title><rect x="25.0227%" y="101" width="0.7830%" height="15" fill="rgb(239,60,40)"/><text x="25.2727%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (27,182,859 samples, 1.81%)</title><rect x="24.1413%" y="117" width="1.8127%" height="15" fill="rgb(206,27,48)"/><text x="24.3913%" y="127.50">m..</text></g><g><title>monomorphization_collector (27,254,680 samples, 1.82%)</title><rect x="24.1411%" y="133" width="1.8175%" height="15" fill="rgb(225,35,8)"/><text x="24.3911%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (2,703,549 samples, 0.18%)</title><rect x="25.9589%" y="117" width="0.1803%" height="15" fill="rgb(250,213,24)"/><text x="26.2089%" y="127.50"></text></g><g><title>symbol_name (2,427,346 samples, 0.16%)</title><rect x="25.9773%" y="101" width="0.1619%" height="15" fill="rgb(247,123,22)"/><text x="26.2273%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (30,887,709 samples, 2.06%)</title><rect x="24.1388%" y="149" width="2.0598%" height="15" fill="rgb(231,138,38)"/><text x="24.3888%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (3,597,258 samples, 0.24%)</title><rect x="25.9586%" y="133" width="0.2399%" height="15" fill="rgb(231,145,46)"/><text x="26.2086%" y="143.50"></text></g><g><title>codegen_crate (92,992,929 samples, 6.20%)</title><rect x="20.0018%" y="165" width="6.2013%" height="15" fill="rgb(251,118,11)"/><text x="20.2518%" y="175.50">codegen_..</text></g><g><title>codegen_module_optimize (445,204,342 samples, 29.69%)</title><rect x="26.2031%" y="165" width="29.6886%" height="15" fill="rgb(217,147,25)"/><text x="26.4531%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (424,641,865 samples, 28.32%)</title><rect x="27.5743%" y="149" width="28.3174%" height="15" fill="rgb(247,81,37)"/><text x="27.8243%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (240,328,720 samples, 16.03%)</title><rect x="56.6864%" y="149" width="16.0264%" height="15" fill="rgb(209,12,38)"/><text x="56.9364%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (204,505,203 samples, 13.64%)</title><rect x="72.7128%" y="149" width="13.6375%" height="15" fill="rgb(227,1,9)"/><text x="72.9628%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (202,256,947 samples, 13.49%)</title><rect x="72.8627%" y="133" width="13.4876%" height="15" fill="rgb(248,47,43)"/><text x="73.1127%" y="143.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (28,708,922 samples, 1.91%)</title><rect x="86.3503%" y="149" width="1.9145%" height="15" fill="rgb(221,10,30)"/><text x="86.6003%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (486,146,299 samples, 32.42%)</title><rect x="55.8917%" y="165" width="32.4188%" height="15" fill="rgb(210,229,1)"/><text x="56.1417%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,552,348 samples, 0.10%)</title><rect x="88.9478%" y="117" width="0.1035%" height="15" fill="rgb(222,148,37)"/><text x="89.1978%" y="127.50"></text></g><g><title>macro_expand_crate (10,866,395 samples, 0.72%)</title><rect x="88.3298%" y="149" width="0.7246%" height="15" fill="rgb(234,67,33)"/><text x="88.5798%" y="159.50"></text></g><g><title>expand_crate (10,855,285 samples, 0.72%)</title><rect x="88.3306%" y="133" width="0.7239%" height="15" fill="rgb(247,98,35)"/><text x="88.5806%" y="143.50"></text></g><g><title>configure_and_expand (13,008,999 samples, 0.87%)</title><rect x="88.3105%" y="165" width="0.8675%" height="15" fill="rgb(247,138,52)"/><text x="88.5605%" y="175.50"></text></g><g><title>resolve_crate (1,755,239 samples, 0.12%)</title><rect x="89.0609%" y="149" width="0.1170%" height="15" fill="rgb(213,79,30)"/><text x="89.3109%" y="159.50"></text></g><g><title>free_global_ctxt (9,098,846 samples, 0.61%)</title><rect x="89.2133%" y="165" width="0.6068%" height="15" fill="rgb(246,177,23)"/><text x="89.4633%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,221,968 samples, 0.28%)</title><rect x="90.1472%" y="133" width="0.2815%" height="15" fill="rgb(230,62,27)"/><text x="90.3972%" y="143.50"></text></g><g><title>optimized_mir (7,047,677 samples, 0.47%)</title><rect x="89.9638%" y="149" width="0.4700%" height="15" fill="rgb(216,154,8)"/><text x="90.2138%" y="159.50"></text></g><g><title>generate_crate_metadata (9,315,729 samples, 0.62%)</title><rect x="89.8200%" y="165" width="0.6212%" height="15" fill="rgb(244,35,45)"/><text x="90.0700%" y="175.50"></text></g><g><title>hir_lowering (3,066,942 samples, 0.20%)</title><rect x="90.4413%" y="165" width="0.2045%" height="15" fill="rgb(251,115,12)"/><text x="90.6913%" y="175.50"></text></g><g><title>finish_ongoing_codegen (134,016,495 samples, 8.94%)</title><rect x="90.6468%" y="149" width="8.9369%" height="15" fill="rgb(240,54,50)"/><text x="90.8968%" y="159.50">finish_ongoin..</text></g><g><title>link_crate (1,661,338 samples, 0.11%)</title><rect x="99.5837%" y="149" width="0.1108%" height="15" fill="rgb(233,84,52)"/><text x="99.8337%" y="159.50"></text></g><g><title>link_binary (1,643,248 samples, 0.11%)</title><rect x="99.5849%" y="133" width="0.1096%" height="15" fill="rgb(207,117,47)"/><text x="99.8349%" y="143.50"></text></g><g><title>link (135,703,703 samples, 9.05%)</title><rect x="90.6458%" y="165" width="9.0494%" height="15" fill="rgb(249,43,39)"/><text x="90.8958%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (2,422,185 samples, 0.16%)</title><rect x="99.8077%" y="165" width="0.1615%" height="15" fill="rgb(209,38,44)"/><text x="100.0577%" y="175.50"></text></g><g><title>all (1,499,581,483 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(236,212,23)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,499,581,483 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,79,21)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>