<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (411,051,022 samples, 7.92%)</title><rect x="0.0651%" y="165" width="7.9248%" height="15" fill="rgb(227,0,7)"/><text x="0.3151%" y="175.50">LLVM_passes</text></g><g><title>is_copy_raw (6,275,365 samples, 0.12%)</title><rect x="13.1341%" y="37" width="0.1210%" height="15" fill="rgb(217,0,24)"/><text x="13.3841%" y="47.50"></text></g><g><title>needs_drop_raw (8,072,817 samples, 0.16%)</title><rect x="13.1031%" y="53" width="0.1556%" height="15" fill="rgb(221,193,54)"/><text x="13.3531%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (7,528,733 samples, 0.15%)</title><rect x="13.3301%" y="37" width="0.1451%" height="15" fill="rgb(248,212,6)"/><text x="13.5801%" y="47.50"></text></g><g><title>resolve_instance (12,345,581 samples, 0.24%)</title><rect x="13.2593%" y="53" width="0.2380%" height="15" fill="rgb(208,68,35)"/><text x="13.5093%" y="63.50"></text></g><g><title>thir_body (14,252,105 samples, 0.27%)</title><rect x="13.5090%" y="53" width="0.2748%" height="15" fill="rgb(232,128,0)"/><text x="13.7590%" y="63.50"></text></g><g><title>mir_const (100,269,990 samples, 1.93%)</title><rect x="11.8614%" y="101" width="1.9331%" height="15" fill="rgb(207,160,47)"/><text x="12.1114%" y="111.50">m..</text></g><g><title>unsafety_check_result (86,157,285 samples, 1.66%)</title><rect x="12.1335%" y="85" width="1.6611%" height="15" fill="rgb(228,23,34)"/><text x="12.3835%" y="95.50"></text></g><g><title>mir_built (76,455,324 samples, 1.47%)</title><rect x="12.3206%" y="69" width="1.4740%" height="15" fill="rgb(218,30,26)"/><text x="12.5706%" y="79.50"></text></g><g><title>mir_promoted (116,946,740 samples, 2.25%)</title><rect x="11.6251%" y="117" width="2.2547%" height="15" fill="rgb(220,122,19)"/><text x="11.8751%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (26,814,597 samples, 0.52%)</title><rect x="14.1735%" y="117" width="0.5170%" height="15" fill="rgb(250,228,42)"/><text x="14.4235%" y="127.50"></text></g><g><title>MIR_borrow_checking (344,725,164 samples, 6.65%)</title><rect x="8.0456%" y="149" width="6.6461%" height="15" fill="rgb(240,193,28)"/><text x="8.2956%" y="159.50">MIR_borro..</text></g><g><title>mir_borrowck (341,566,789 samples, 6.59%)</title><rect x="8.1065%" y="133" width="6.5852%" height="15" fill="rgb(216,20,37)"/><text x="8.3565%" y="143.50">mir_borro..</text></g><g><title>check_mod_attrs (10,064,835 samples, 0.19%)</title><rect x="14.8131%" y="133" width="0.1940%" height="15" fill="rgb(206,188,39)"/><text x="15.0631%" y="143.50"></text></g><g><title>misc_checking_1 (17,138,356 samples, 0.33%)</title><rect x="14.8121%" y="149" width="0.3304%" height="15" fill="rgb(217,207,13)"/><text x="15.0621%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (6,866,233 samples, 0.13%)</title><rect x="15.1425%" y="133" width="0.1324%" height="15" fill="rgb(231,73,38)"/><text x="15.3925%" y="143.50"></text></g><g><title>check_mod_liveness (5,586,678 samples, 0.11%)</title><rect x="15.1672%" y="117" width="0.1077%" height="15" fill="rgb(225,20,46)"/><text x="15.4172%" y="127.50"></text></g><g><title>misc_checking_2 (14,101,900 samples, 0.27%)</title><rect x="15.1425%" y="149" width="0.2719%" height="15" fill="rgb(210,31,41)"/><text x="15.3925%" y="159.50"></text></g><g><title>match_checking (7,233,137 samples, 0.14%)</title><rect x="15.2749%" y="133" width="0.1394%" height="15" fill="rgb(221,200,47)"/><text x="15.5249%" y="143.50"></text></g><g><title>check_match (6,502,854 samples, 0.13%)</title><rect x="15.2890%" y="117" width="0.1254%" height="15" fill="rgb(226,26,5)"/><text x="15.5390%" y="127.50"></text></g><g><title>death_checking (6,528,709 samples, 0.13%)</title><rect x="15.4851%" y="133" width="0.1259%" height="15" fill="rgb(249,33,26)"/><text x="15.7351%" y="143.50"></text></g><g><title>crate_lints (17,034,715 samples, 0.33%)</title><rect x="15.6110%" y="117" width="0.3284%" height="15" fill="rgb(235,183,28)"/><text x="15.8610%" y="127.50"></text></g><g><title>lint_checking (23,509,653 samples, 0.45%)</title><rect x="15.6110%" y="133" width="0.4532%" height="15" fill="rgb(221,5,38)"/><text x="15.8610%" y="143.50"></text></g><g><title>module_lints (6,472,058 samples, 0.12%)</title><rect x="15.9394%" y="117" width="0.1248%" height="15" fill="rgb(247,18,42)"/><text x="16.1894%" y="127.50"></text></g><g><title>lint_mod (6,450,448 samples, 0.12%)</title><rect x="15.9399%" y="101" width="0.1244%" height="15" fill="rgb(241,131,45)"/><text x="16.1899%" y="111.50"></text></g><g><title>privacy_access_levels (5,987,232 samples, 0.12%)</title><rect x="16.0642%" y="133" width="0.1154%" height="15" fill="rgb(249,31,29)"/><text x="16.3142%" y="143.50"></text></g><g><title>privacy_checking_modules (13,748,575 samples, 0.27%)</title><rect x="16.1796%" y="133" width="0.2651%" height="15" fill="rgb(225,111,53)"/><text x="16.4296%" y="143.50"></text></g><g><title>check_mod_privacy (13,730,475 samples, 0.26%)</title><rect x="16.1800%" y="117" width="0.2647%" height="15" fill="rgb(238,160,17)"/><text x="16.4300%" y="127.50"></text></g><g><title>misc_checking_3 (53,688,946 samples, 1.04%)</title><rect x="15.4143%" y="149" width="1.0351%" height="15" fill="rgb(214,148,48)"/><text x="15.6643%" y="159.50"></text></g><g><title>impl_trait_ref (7,284,855 samples, 0.14%)</title><rect x="16.7129%" y="85" width="0.1404%" height="15" fill="rgb(232,36,49)"/><text x="16.9629%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,903,665 samples, 0.11%)</title><rect x="16.7395%" y="69" width="0.1138%" height="15" fill="rgb(209,103,24)"/><text x="16.9895%" y="79.50"></text></g><g><title>coherent_trait (21,753,928 samples, 0.42%)</title><rect x="16.4702%" y="117" width="0.4194%" height="15" fill="rgb(229,88,8)"/><text x="16.7202%" y="127.50"></text></g><g><title>specialization_graph_of (21,644,698 samples, 0.42%)</title><rect x="16.4723%" y="101" width="0.4173%" height="15" fill="rgb(213,181,19)"/><text x="16.7223%" y="111.50"></text></g><g><title>coherence_checking (22,567,971 samples, 0.44%)</title><rect x="16.4694%" y="133" width="0.4351%" height="15" fill="rgb(254,191,54)"/><text x="16.7194%" y="143.50"></text></g><g><title>evaluate_obligation (18,691,089 samples, 0.36%)</title><rect x="21.7250%" y="85" width="0.3604%" height="15" fill="rgb(241,83,37)"/><text x="21.9750%" y="95.50"></text></g><g><title>typeck (63,899,516 samples, 1.23%)</title><rect x="22.2556%" y="85" width="1.2319%" height="15" fill="rgb(233,36,39)"/><text x="22.5056%" y="95.50"></text></g><g><title>item_bodies_checking (341,226,463 samples, 6.58%)</title><rect x="16.9195%" y="133" width="6.5786%" height="15" fill="rgb(226,3,54)"/><text x="17.1695%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (341,223,913 samples, 6.58%)</title><rect x="16.9196%" y="117" width="6.5786%" height="15" fill="rgb(245,192,40)"/><text x="17.1696%" y="127.50">typeck_it..</text></g><g><title>typeck (339,223,949 samples, 6.54%)</title><rect x="16.9582%" y="101" width="6.5400%" height="15" fill="rgb(238,167,29)"/><text x="17.2082%" y="111.50">typeck</text></g><g><title>item_types_checking (20,827,210 samples, 0.40%)</title><rect x="23.4982%" y="133" width="0.4015%" height="15" fill="rgb(232,182,51)"/><text x="23.7482%" y="143.50"></text></g><g><title>check_mod_item_types (20,810,240 samples, 0.40%)</title><rect x="23.4985%" y="117" width="0.4012%" height="15" fill="rgb(231,60,39)"/><text x="23.7485%" y="127.50"></text></g><g><title>generics_of (8,680,233 samples, 0.17%)</title><rect x="24.0685%" y="101" width="0.1673%" height="15" fill="rgb(208,69,12)"/><text x="24.3185%" y="111.50"></text></g><g><title>predicates_of (7,640,819 samples, 0.15%)</title><rect x="24.2551%" y="101" width="0.1473%" height="15" fill="rgb(235,93,37)"/><text x="24.5051%" y="111.50"></text></g><g><title>predicates_defined_on (6,789,209 samples, 0.13%)</title><rect x="24.2715%" y="85" width="0.1309%" height="15" fill="rgb(213,116,39)"/><text x="24.5215%" y="95.50"></text></g><g><title>type_collecting (27,360,559 samples, 0.53%)</title><rect x="23.9000%" y="133" width="0.5275%" height="15" fill="rgb(222,207,29)"/><text x="24.1500%" y="143.50"></text></g><g><title>collect_mod_item_types (27,338,659 samples, 0.53%)</title><rect x="23.9004%" y="117" width="0.5271%" height="15" fill="rgb(206,96,30)"/><text x="24.1504%" y="127.50"></text></g><g><title>param_env (5,950,047 samples, 0.11%)</title><rect x="25.3771%" y="101" width="0.1147%" height="15" fill="rgb(218,138,4)"/><text x="25.6271%" y="111.50"></text></g><g><title>region_scope_tree (5,443,962 samples, 0.10%)</title><rect x="25.4936%" y="101" width="0.1050%" height="15" fill="rgb(250,191,14)"/><text x="25.7436%" y="111.50"></text></g><g><title>check_impl_item_well_formed (57,295,518 samples, 1.10%)</title><rect x="24.4957%" y="117" width="1.1046%" height="15" fill="rgb(239,60,40)"/><text x="24.7457%" y="127.50"></text></g><g><title>analysis (951,318,439 samples, 18.34%)</title><rect x="7.9899%" y="165" width="18.3408%" height="15" fill="rgb(206,27,48)"/><text x="8.2399%" y="175.50">analysis</text></g><g><title>type_check_crate (512,529,543 samples, 9.88%)</title><rect x="16.4494%" y="149" width="9.8812%" height="15" fill="rgb(225,35,8)"/><text x="16.6994%" y="159.50">type_check_cra..</text></g><g><title>wf_checking (98,590,086 samples, 1.90%)</title><rect x="24.4299%" y="133" width="1.9007%" height="15" fill="rgb(250,213,24)"/><text x="24.6799%" y="143.50">w..</text></g><g><title>check_item_well_formed (37,883,840 samples, 0.73%)</title><rect x="25.6003%" y="117" width="0.7304%" height="15" fill="rgb(247,123,22)"/><text x="25.8503%" y="127.50"></text></g><g><title>is_unpin_raw (5,414,797 samples, 0.10%)</title><rect x="29.8965%" y="117" width="0.1044%" height="15" fill="rgb(231,138,38)"/><text x="30.1465%" y="127.50"></text></g><g><title>param_env (7,247,965 samples, 0.14%)</title><rect x="30.0619%" y="117" width="0.1397%" height="15" fill="rgb(231,145,46)"/><text x="30.3119%" y="127.50"></text></g><g><title>fn_abi_of_instance (34,220,116 samples, 0.66%)</title><rect x="29.5846%" y="133" width="0.6597%" height="15" fill="rgb(251,118,11)"/><text x="29.8346%" y="143.50"></text></g><g><title>codegen_module (205,071,893 samples, 3.95%)</title><rect x="26.3779%" y="149" width="3.9536%" height="15" fill="rgb(217,147,25)"/><text x="26.6279%" y="159.50">code..</text></g><g><title>metadata_decode_entry_optimized_mir (6,425,801 samples, 0.12%)</title><rect x="30.8226%" y="85" width="0.1239%" height="15" fill="rgb(247,81,37)"/><text x="31.0726%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,861,054 samples, 0.19%)</title><rect x="30.9465%" y="85" width="0.1901%" height="15" fill="rgb(209,12,38)"/><text x="31.1965%" y="95.50"></text></g><g><title>optimized_mir (27,840,047 samples, 0.54%)</title><rect x="30.6184%" y="101" width="0.5367%" height="15" fill="rgb(227,1,9)"/><text x="30.8684%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (13,426,211 samples, 0.26%)</title><rect x="31.2281%" y="85" width="0.2588%" height="15" fill="rgb(248,47,43)"/><text x="31.4781%" y="95.50"></text></g><g><title>resolve_instance (20,724,960 samples, 0.40%)</title><rect x="31.1551%" y="101" width="0.3996%" height="15" fill="rgb(221,10,30)"/><text x="31.4051%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (68,401,192 samples, 1.32%)</title><rect x="30.3330%" y="117" width="1.3187%" height="15" fill="rgb(210,229,1)"/><text x="30.5830%" y="127.50"></text></g><g><title>monomorphization_collector (69,295,603 samples, 1.34%)</title><rect x="30.3329%" y="133" width="1.3360%" height="15" fill="rgb(222,148,37)"/><text x="30.5829%" y="143.50"></text></g><g><title>assert_symbols_are_distinct (7,166,906 samples, 0.14%)</title><rect x="31.6690%" y="117" width="0.1382%" height="15" fill="rgb(234,67,33)"/><text x="31.9190%" y="127.50"></text></g><g><title>symbol_name (6,379,355 samples, 0.12%)</title><rect x="31.6842%" y="101" width="0.1230%" height="15" fill="rgb(247,98,35)"/><text x="31.9342%" y="111.50"></text></g><g><title>collect_and_partition_mono_items (79,322,633 samples, 1.53%)</title><rect x="30.3317%" y="149" width="1.5293%" height="15" fill="rgb(247,138,52)"/><text x="30.5817%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (9,964,320 samples, 0.19%)</title><rect x="31.6689%" y="133" width="0.1921%" height="15" fill="rgb(213,79,30)"/><text x="31.9189%" y="143.50"></text></g><g><title>codegen_crate (286,913,260 samples, 5.53%)</title><rect x="26.3307%" y="165" width="5.5315%" height="15" fill="rgb(246,177,23)"/><text x="26.5807%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (1,535,203,638 samples, 29.60%)</title><rect x="31.8622%" y="165" width="29.5977%" height="15" fill="rgb(230,62,27)"/><text x="32.1122%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,483,205,839 samples, 28.60%)</title><rect x="32.8647%" y="149" width="28.5952%" height="15" fill="rgb(216,154,8)"/><text x="33.1147%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (790,775,285 samples, 15.25%)</title><rect x="62.0143%" y="149" width="15.2456%" height="15" fill="rgb(244,35,45)"/><text x="62.2643%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (537,176,972 samples, 10.36%)</title><rect x="77.2599%" y="149" width="10.3564%" height="15" fill="rgb(251,115,12)"/><text x="77.5099%" y="159.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (532,675,365 samples, 10.27%)</title><rect x="77.3467%" y="133" width="10.2696%" height="15" fill="rgb(240,54,50)"/><text x="77.5967%" y="143.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (112,225,419 samples, 2.16%)</title><rect x="87.6163%" y="149" width="2.1636%" height="15" fill="rgb(233,84,52)"/><text x="87.8663%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (1,471,010,657 samples, 28.36%)</title><rect x="61.4599%" y="165" width="28.3601%" height="15" fill="rgb(207,117,47)"/><text x="61.7099%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (84,119,392 samples, 1.62%)</title><rect x="89.9041%" y="149" width="1.6218%" height="15" fill="rgb(249,43,39)"/><text x="90.1541%" y="159.50"></text></g><g><title>expand_crate (84,108,482 samples, 1.62%)</title><rect x="89.9043%" y="133" width="1.6216%" height="15" fill="rgb(209,38,44)"/><text x="90.1543%" y="143.50"></text></g><g><title>late_resolve_crate (16,991,464 samples, 0.33%)</title><rect x="91.5626%" y="133" width="0.3276%" height="15" fill="rgb(236,212,23)"/><text x="91.8126%" y="143.50"></text></g><g><title>configure_and_expand (110,139,545 samples, 2.12%)</title><rect x="89.8200%" y="165" width="2.1234%" height="15" fill="rgb(242,79,21)"/><text x="90.0700%" y="175.50">c..</text></g><g><title>resolve_crate (21,532,938 samples, 0.42%)</title><rect x="91.5282%" y="149" width="0.4151%" height="15" fill="rgb(211,96,35)"/><text x="91.7782%" y="159.50"></text></g><g><title>drop_ast (5,323,734 samples, 0.10%)</title><rect x="91.9434%" y="165" width="0.1026%" height="15" fill="rgb(253,215,40)"/><text x="92.1934%" y="175.50"></text></g><g><title>early_lint_checks (5,200,662 samples, 0.10%)</title><rect x="92.0469%" y="165" width="0.1003%" height="15" fill="rgb(211,81,21)"/><text x="92.2969%" y="175.50"></text></g><g><title>free_global_ctxt (38,018,018 samples, 0.73%)</title><rect x="92.1472%" y="165" width="0.7330%" height="15" fill="rgb(208,190,38)"/><text x="92.3972%" y="175.50"></text></g><g><title>layout_of (5,423,684 samples, 0.10%)</title><rect x="94.3063%" y="133" width="0.1046%" height="15" fill="rgb(235,213,38)"/><text x="94.5563%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (43,908,289 samples, 0.85%)</title><rect x="94.4109%" y="133" width="0.8465%" height="15" fill="rgb(237,122,38)"/><text x="94.6609%" y="143.50"></text></g><g><title>optimized_mir (93,657,575 samples, 1.81%)</title><rect x="93.4652%" y="149" width="1.8057%" height="15" fill="rgb(244,218,35)"/><text x="93.7152%" y="159.50">o..</text></g><g><title>generate_crate_metadata (125,164,315 samples, 2.41%)</title><rect x="92.8802%" y="165" width="2.4131%" height="15" fill="rgb(240,68,47)"/><text x="93.1302%" y="175.50">ge..</text></g><g><title>hir_lowering (51,422,489 samples, 0.99%)</title><rect x="95.2932%" y="165" width="0.9914%" height="15" fill="rgb(210,16,53)"/><text x="95.5432%" y="175.50"></text></g><g><title>finish_ongoing_codegen (170,154,956 samples, 3.28%)</title><rect x="96.2851%" y="149" width="3.2805%" height="15" fill="rgb(235,124,12)"/><text x="96.5351%" y="159.50">fin..</text></g><g><title>link_crate (7,244,307 samples, 0.14%)</title><rect x="99.5656%" y="149" width="0.1397%" height="15" fill="rgb(224,169,11)"/><text x="99.8156%" y="159.50"></text></g><g><title>link_binary (7,013,434 samples, 0.14%)</title><rect x="99.5700%" y="133" width="0.1352%" height="15" fill="rgb(250,166,2)"/><text x="99.8200%" y="143.50"></text></g><g><title>link_rlib (5,954,842 samples, 0.11%)</title><rect x="99.5904%" y="117" width="0.1148%" height="15" fill="rgb(242,216,29)"/><text x="99.8404%" y="127.50"></text></g><g><title>link (177,437,923 samples, 3.42%)</title><rect x="96.2846%" y="165" width="3.4209%" height="15" fill="rgb(230,116,27)"/><text x="96.5346%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (11,015,272 samples, 0.21%)</title><rect x="99.7505%" y="165" width="0.2124%" height="15" fill="rgb(228,99,48)"/><text x="100.0005%" y="175.50"></text></g><g><title>all (5,186,907,575 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(253,11,6)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (5,186,907,575 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(247,143,39)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>