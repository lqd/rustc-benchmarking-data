<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,422,082 samples, 10.56%)</title><rect x="1.2331%" y="213" width="10.5622%" height="15" fill="rgb(227,0,7)"/><text x="1.4831%" y="223.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (119,712 samples, 0.20%)</title><rect x="11.5984%" y="197" width="0.1969%" height="15" fill="rgb(217,0,24)"/><text x="11.8484%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (106,182 samples, 0.17%)</title><rect x="11.6206%" y="181" width="0.1746%" height="15" fill="rgb(221,193,54)"/><text x="11.8706%" y="191.50"></text></g><g><title>thir_body (78,723 samples, 0.13%)</title><rect x="14.6525%" y="101" width="0.1295%" height="15" fill="rgb(248,212,6)"/><text x="14.9025%" y="111.50"></text></g><g><title>mir_const (514,187 samples, 0.85%)</title><rect x="13.9411%" y="149" width="0.8457%" height="15" fill="rgb(208,68,35)"/><text x="14.1911%" y="159.50"></text></g><g><title>unsafety_check_result (420,935 samples, 0.69%)</title><rect x="14.0945%" y="133" width="0.6923%" height="15" fill="rgb(232,128,0)"/><text x="14.3445%" y="143.50"></text></g><g><title>mir_built (341,445 samples, 0.56%)</title><rect x="14.2252%" y="117" width="0.5616%" height="15" fill="rgb(207,160,47)"/><text x="14.4752%" y="127.50"></text></g><g><title>has_structural_eq_impls (384,094 samples, 0.63%)</title><rect x="15.2423%" y="133" width="0.6317%" height="15" fill="rgb(228,23,34)"/><text x="15.4923%" y="143.50"></text></g><g><title>trait_impls_of (260,722 samples, 0.43%)</title><rect x="15.4452%" y="117" width="0.4288%" height="15" fill="rgb(218,30,26)"/><text x="15.6952%" y="127.50"></text></g><g><title>is_freeze_raw (78,631 samples, 0.13%)</title><rect x="15.8766%" y="133" width="0.1293%" height="15" fill="rgb(220,122,19)"/><text x="16.1266%" y="143.50"></text></g><g><title>evaluate_obligation (73,311 samples, 0.12%)</title><rect x="15.8854%" y="117" width="0.1206%" height="15" fill="rgb(250,228,42)"/><text x="16.1354%" y="127.50"></text></g><g><title>needs_drop_raw (102,221 samples, 0.17%)</title><rect x="16.4370%" y="85" width="0.1681%" height="15" fill="rgb(240,193,28)"/><text x="16.6870%" y="95.50"></text></g><g><title>is_copy_raw (60,821 samples, 0.10%)</title><rect x="16.5051%" y="69" width="0.1000%" height="15" fill="rgb(216,20,37)"/><text x="16.7551%" y="79.50"></text></g><g><title>mir_const (386,245 samples, 0.64%)</title><rect x="16.0112%" y="133" width="0.6352%" height="15" fill="rgb(206,188,39)"/><text x="16.2612%" y="143.50"></text></g><g><title>unsafety_check_result (265,753 samples, 0.44%)</title><rect x="16.2094%" y="117" width="0.4371%" height="15" fill="rgb(217,207,13)"/><text x="16.4594%" y="127.50"></text></g><g><title>mir_built (204,533 samples, 0.34%)</title><rect x="16.3101%" y="101" width="0.3364%" height="15" fill="rgb(231,73,38)"/><text x="16.5601%" y="111.50"></text></g><g><title>adt_drop_tys (84,401 samples, 0.14%)</title><rect x="16.6711%" y="101" width="0.1388%" height="15" fill="rgb(225,20,46)"/><text x="16.9211%" y="111.50"></text></g><g><title>adt_drop_tys (115,432 samples, 0.19%)</title><rect x="16.6574%" y="117" width="0.1898%" height="15" fill="rgb(210,31,41)"/><text x="16.9074%" y="127.50"></text></g><g><title>needs_drop_raw (133,292 samples, 0.22%)</title><rect x="16.6465%" y="133" width="0.2192%" height="15" fill="rgb(221,200,47)"/><text x="16.8965%" y="143.50"></text></g><g><title>mir_promoted (1,882,432 samples, 3.10%)</title><rect x="13.7792%" y="165" width="3.0960%" height="15" fill="rgb(226,26,5)"/><text x="14.0292%" y="175.50">mir..</text></g><g><title>mir_const_qualif (1,269,784 samples, 2.09%)</title><rect x="14.7868%" y="149" width="2.0884%" height="15" fill="rgb(249,33,26)"/><text x="15.0368%" y="159.50">m..</text></g><g><title>MIR_borrow_checking (3,154,075 samples, 5.19%)</title><rect x="12.0589%" y="197" width="5.1874%" height="15" fill="rgb(235,183,28)"/><text x="12.3089%" y="207.50">MIR_bo..</text></g><g><title>mir_borrowck (3,143,585 samples, 5.17%)</title><rect x="12.0762%" y="181" width="5.1701%" height="15" fill="rgb(221,5,38)"/><text x="12.3262%" y="191.50">mir_bo..</text></g><g><title>type_op_prove_predicate (144,934 samples, 0.24%)</title><rect x="17.0080%" y="165" width="0.2384%" height="15" fill="rgb(247,18,42)"/><text x="17.2580%" y="175.50"></text></g><g><title>MIR_effect_checking (188,392 samples, 0.31%)</title><rect x="17.2463%" y="197" width="0.3098%" height="15" fill="rgb(241,131,45)"/><text x="17.4963%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (170,322 samples, 0.28%)</title><rect x="17.2760%" y="181" width="0.2801%" height="15" fill="rgb(249,31,29)"/><text x="17.5260%" y="191.50"></text></g><g><title>hir_module_items (125,411 samples, 0.21%)</title><rect x="17.5562%" y="197" width="0.2063%" height="15" fill="rgb(225,111,53)"/><text x="17.8062%" y="207.50"></text></g><g><title>get_lang_items (73,311 samples, 0.12%)</title><rect x="18.1670%" y="149" width="0.1206%" height="15" fill="rgb(238,160,17)"/><text x="18.4170%" y="159.50"></text></g><g><title>codegen_fn_attrs (248,373 samples, 0.41%)</title><rect x="18.0163%" y="165" width="0.4085%" height="15" fill="rgb(214,148,48)"/><text x="18.2663%" y="175.50"></text></g><g><title>check_mod_attrs (364,244 samples, 0.60%)</title><rect x="17.8261%" y="181" width="0.5991%" height="15" fill="rgb(232,36,49)"/><text x="18.0761%" y="191.50"></text></g><g><title>lookup_deprecation_entry (101,033 samples, 0.17%)</title><rect x="18.7993%" y="165" width="0.1662%" height="15" fill="rgb(209,103,24)"/><text x="19.0493%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (328,674 samples, 0.54%)</title><rect x="18.5479%" y="181" width="0.5406%" height="15" fill="rgb(229,88,8)"/><text x="18.7979%" y="191.50"></text></g><g><title>misc_checking_1 (848,270 samples, 1.40%)</title><rect x="17.7631%" y="197" width="1.3951%" height="15" fill="rgb(213,181,19)"/><text x="18.0131%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (110,741 samples, 0.18%)</title><rect x="19.1617%" y="181" width="0.1821%" height="15" fill="rgb(254,191,54)"/><text x="19.4117%" y="191.50"></text></g><g><title>check_mod_liveness (87,681 samples, 0.14%)</title><rect x="19.1997%" y="165" width="0.1442%" height="15" fill="rgb(241,83,37)"/><text x="19.4497%" y="175.50"></text></g><g><title>misc_checking_2 (255,883 samples, 0.42%)</title><rect x="19.1582%" y="197" width="0.4208%" height="15" fill="rgb(233,36,39)"/><text x="19.4082%" y="207.50"></text></g><g><title>match_checking (143,012 samples, 0.24%)</title><rect x="19.3439%" y="181" width="0.2352%" height="15" fill="rgb(226,3,54)"/><text x="19.5939%" y="191.50"></text></g><g><title>check_match (136,462 samples, 0.22%)</title><rect x="19.3547%" y="165" width="0.2244%" height="15" fill="rgb(245,192,40)"/><text x="19.6047%" y="175.50"></text></g><g><title>death_checking (72,641 samples, 0.12%)</title><rect x="19.6490%" y="181" width="0.1195%" height="15" fill="rgb(238,167,29)"/><text x="19.8990%" y="191.50"></text></g><g><title>param_env (105,342 samples, 0.17%)</title><rect x="20.4895%" y="149" width="0.1733%" height="15" fill="rgb(232,182,51)"/><text x="20.7395%" y="159.50"></text></g><g><title>trait_impls_of (216,112 samples, 0.36%)</title><rect x="20.6628%" y="149" width="0.3554%" height="15" fill="rgb(231,60,39)"/><text x="20.9128%" y="159.50"></text></g><g><title>crate_lints (3,561,111 samples, 5.86%)</title><rect x="19.7715%" y="165" width="5.8568%" height="15" fill="rgb(208,69,12)"/><text x="20.0215%" y="175.50">crate_l..</text></g><g><title>type_of (2,801,500 samples, 4.61%)</title><rect x="21.0208%" y="149" width="4.6075%" height="15" fill="rgb(235,93,37)"/><text x="21.2708%" y="159.50">type_..</text></g><g><title>metadata_decode_entry_type_of (2,546,998 samples, 4.19%)</title><rect x="21.4394%" y="133" width="4.1890%" height="15" fill="rgb(213,116,39)"/><text x="21.6894%" y="143.50">metad..</text></g><g><title>lint_checking (3,607,901 samples, 5.93%)</title><rect x="19.7685%" y="181" width="5.9338%" height="15" fill="rgb(222,207,29)"/><text x="20.0185%" y="191.50">lint_che..</text></g><g><title>privacy_checking_modules (71,601 samples, 0.12%)</title><rect x="25.7908%" y="181" width="0.1178%" height="15" fill="rgb(206,96,30)"/><text x="26.0408%" y="191.50"></text></g><g><title>check_mod_privacy (70,171 samples, 0.12%)</title><rect x="25.7932%" y="165" width="0.1154%" height="15" fill="rgb(218,138,4)"/><text x="26.0432%" y="175.50"></text></g><g><title>misc_checking_3 (3,859,774 samples, 6.35%)</title><rect x="19.5791%" y="197" width="6.3480%" height="15" fill="rgb(250,191,14)"/><text x="19.8291%" y="207.50">misc_che..</text></g><g><title>impl_parent (153,302 samples, 0.25%)</title><rect x="26.4902%" y="133" width="0.2521%" height="15" fill="rgb(239,60,40)"/><text x="26.7402%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (107,230 samples, 0.18%)</title><rect x="26.5660%" y="117" width="0.1764%" height="15" fill="rgb(206,27,48)"/><text x="26.8160%" y="127.50"></text></g><g><title>impl_trait_ref (518,004 samples, 0.85%)</title><rect x="26.7423%" y="133" width="0.8519%" height="15" fill="rgb(225,35,8)"/><text x="26.9923%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (476,753 samples, 0.78%)</title><rect x="26.8102%" y="117" width="0.7841%" height="15" fill="rgb(250,213,24)"/><text x="27.0602%" y="127.50"></text></g><g><title>coherent_trait (1,028,322 samples, 1.69%)</title><rect x="26.0338%" y="165" width="1.6912%" height="15" fill="rgb(247,123,22)"/><text x="26.2838%" y="175.50"></text></g><g><title>specialization_graph_of (1,019,722 samples, 1.68%)</title><rect x="26.0479%" y="149" width="1.6771%" height="15" fill="rgb(231,138,38)"/><text x="26.2979%" y="159.50"></text></g><g><title>trait_impls_of (79,501 samples, 0.13%)</title><rect x="27.5943%" y="133" width="0.1308%" height="15" fill="rgb(231,145,46)"/><text x="27.8443%" y="143.50"></text></g><g><title>coherence_checking (1,107,582 samples, 1.82%)</title><rect x="26.0049%" y="181" width="1.8216%" height="15" fill="rgb(251,118,11)"/><text x="26.2549%" y="191.50">c..</text></g><g><title>adt_sized_constraint (103,711 samples, 0.17%)</title><rect x="29.3880%" y="133" width="0.1706%" height="15" fill="rgb(217,147,25)"/><text x="29.6380%" y="143.50"></text></g><g><title>adt_sized_constraint (101,631 samples, 0.17%)</title><rect x="29.3914%" y="117" width="0.1671%" height="15" fill="rgb(247,81,37)"/><text x="29.6414%" y="127.50"></text></g><g><title>adt_sized_constraint (72,661 samples, 0.12%)</title><rect x="29.4391%" y="101" width="0.1195%" height="15" fill="rgb(209,12,38)"/><text x="29.6891%" y="111.50"></text></g><g><title>adt_def (71,361 samples, 0.12%)</title><rect x="29.4412%" y="85" width="0.1174%" height="15" fill="rgb(227,1,9)"/><text x="29.6912%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (70,851 samples, 0.12%)</title><rect x="29.4421%" y="69" width="0.1165%" height="15" fill="rgb(248,47,43)"/><text x="29.6921%" y="79.50"></text></g><g><title>item_attrs (66,541 samples, 0.11%)</title><rect x="29.4492%" y="53" width="0.1094%" height="15" fill="rgb(221,10,30)"/><text x="29.6992%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,941 samples, 0.11%)</title><rect x="29.4501%" y="37" width="0.1085%" height="15" fill="rgb(210,229,1)"/><text x="29.7001%" y="47.50"></text></g><g><title>adt_def (339,184 samples, 0.56%)</title><rect x="29.7788%" y="69" width="0.5578%" height="15" fill="rgb(222,148,37)"/><text x="30.0288%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (338,424 samples, 0.56%)</title><rect x="29.7801%" y="53" width="0.5566%" height="15" fill="rgb(234,67,33)"/><text x="30.0301%" y="63.50"></text></g><g><title>adt_dtorck_constraint (372,034 samples, 0.61%)</title><rect x="29.7481%" y="85" width="0.6119%" height="15" fill="rgb(247,98,35)"/><text x="29.9981%" y="95.50"></text></g><g><title>adt_dtorck_constraint (390,345 samples, 0.64%)</title><rect x="29.7241%" y="101" width="0.6420%" height="15" fill="rgb(247,138,52)"/><text x="29.9741%" y="111.50"></text></g><g><title>dropck_outlives (439,615 samples, 0.72%)</title><rect x="29.6450%" y="133" width="0.7230%" height="15" fill="rgb(213,79,30)"/><text x="29.8950%" y="143.50"></text></g><g><title>adt_dtorck_constraint (400,325 samples, 0.66%)</title><rect x="29.7097%" y="117" width="0.6584%" height="15" fill="rgb(246,177,23)"/><text x="29.9597%" y="127.50"></text></g><g><title>evaluate_obligation (77,381 samples, 0.13%)</title><rect x="30.3681%" y="133" width="0.1273%" height="15" fill="rgb(230,62,27)"/><text x="30.6181%" y="143.50"></text></g><g><title>evaluate_obligation (306,465 samples, 0.50%)</title><rect x="33.2882%" y="117" width="0.5040%" height="15" fill="rgb(216,154,8)"/><text x="33.5382%" y="127.50"></text></g><g><title>trait_impls_of (93,710 samples, 0.15%)</title><rect x="33.6381%" y="101" width="0.1541%" height="15" fill="rgb(244,35,45)"/><text x="33.8881%" y="111.50"></text></g><g><title>is_copy_raw (321,893 samples, 0.53%)</title><rect x="34.0492%" y="117" width="0.5294%" height="15" fill="rgb(251,115,12)"/><text x="34.2992%" y="127.50"></text></g><g><title>evaluate_obligation (302,973 samples, 0.50%)</title><rect x="34.0803%" y="101" width="0.4983%" height="15" fill="rgb(240,54,50)"/><text x="34.3303%" y="111.50"></text></g><g><title>trait_impls_of (220,653 samples, 0.36%)</title><rect x="34.2157%" y="85" width="0.3629%" height="15" fill="rgb(233,84,52)"/><text x="34.4657%" y="95.50"></text></g><g><title>method_autoderef_steps (111,261 samples, 0.18%)</title><rect x="34.6785%" y="117" width="0.1830%" height="15" fill="rgb(207,117,47)"/><text x="34.9285%" y="127.50"></text></g><g><title>evaluate_obligation (92,681 samples, 0.15%)</title><rect x="34.7091%" y="101" width="0.1524%" height="15" fill="rgb(249,43,39)"/><text x="34.9591%" y="111.50"></text></g><g><title>predicates_of (103,923 samples, 0.17%)</title><rect x="34.8684%" y="117" width="0.1709%" height="15" fill="rgb(209,38,44)"/><text x="35.1184%" y="127.50"></text></g><g><title>predicates_defined_on (68,703 samples, 0.11%)</title><rect x="34.9263%" y="101" width="0.1130%" height="15" fill="rgb(236,212,23)"/><text x="35.1763%" y="111.50"></text></g><g><title>typeck (2,625,830 samples, 4.32%)</title><rect x="30.7857%" y="133" width="4.3186%" height="15" fill="rgb(242,79,21)"/><text x="31.0357%" y="143.50">typeck</text></g><g><title>item_bodies_checking (4,407,930 samples, 7.25%)</title><rect x="27.8749%" y="181" width="7.2496%" height="15" fill="rgb(211,96,35)"/><text x="28.1249%" y="191.50">item_bodie..</text></g><g><title>typeck_item_bodies (4,405,000 samples, 7.24%)</title><rect x="27.8797%" y="165" width="7.2447%" height="15" fill="rgb(253,215,40)"/><text x="28.1297%" y="175.50">typeck_ite..</text></g><g><title>typeck (4,393,850 samples, 7.23%)</title><rect x="27.8981%" y="149" width="7.2264%" height="15" fill="rgb(211,81,21)"/><text x="28.1481%" y="159.50">typeck</text></g><g><title>impl_parent (132,260 samples, 0.22%)</title><rect x="35.5213%" y="101" width="0.2175%" height="15" fill="rgb(208,190,38)"/><text x="35.7713%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (81,920 samples, 0.13%)</title><rect x="35.6041%" y="85" width="0.1347%" height="15" fill="rgb(235,213,38)"/><text x="35.8541%" y="95.50"></text></g><g><title>impl_trait_ref (440,315 samples, 0.72%)</title><rect x="35.7388%" y="101" width="0.7242%" height="15" fill="rgb(237,122,38)"/><text x="35.9888%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (376,474 samples, 0.62%)</title><rect x="35.8438%" y="85" width="0.6192%" height="15" fill="rgb(244,218,35)"/><text x="36.0938%" y="95.50"></text></g><g><title>adt_destructor (827,830 samples, 1.36%)</title><rect x="35.2018%" y="149" width="1.3615%" height="15" fill="rgb(240,68,47)"/><text x="35.4518%" y="159.50"></text></g><g><title>coherent_trait (821,910 samples, 1.35%)</title><rect x="35.2116%" y="133" width="1.3518%" height="15" fill="rgb(210,16,53)"/><text x="35.4616%" y="143.50"></text></g><g><title>specialization_graph_of (818,350 samples, 1.35%)</title><rect x="35.2174%" y="117" width="1.3459%" height="15" fill="rgb(235,124,12)"/><text x="35.4674%" y="127.50"></text></g><g><title>trait_impls_of (61,031 samples, 0.10%)</title><rect x="36.4630%" y="101" width="0.1004%" height="15" fill="rgb(224,169,11)"/><text x="36.7130%" y="111.50"></text></g><g><title>item_types_checking (888,800 samples, 1.46%)</title><rect x="35.1245%" y="181" width="1.4618%" height="15" fill="rgb(250,166,2)"/><text x="35.3745%" y="191.50"></text></g><g><title>check_mod_item_types (884,590 samples, 1.45%)</title><rect x="35.1314%" y="165" width="1.4549%" height="15" fill="rgb(242,216,29)"/><text x="35.3814%" y="175.50"></text></g><g><title>named_region_map (89,852 samples, 0.15%)</title><rect x="36.9706%" y="133" width="0.1478%" height="15" fill="rgb(230,116,27)"/><text x="37.2206%" y="143.50"></text></g><g><title>resolve_lifetimes (67,172 samples, 0.11%)</title><rect x="37.0079%" y="117" width="0.1105%" height="15" fill="rgb(228,99,48)"/><text x="37.2579%" y="127.50"></text></g><g><title>generics_of (173,153 samples, 0.28%)</title><rect x="36.8529%" y="149" width="0.2848%" height="15" fill="rgb(253,11,6)"/><text x="37.1029%" y="159.50"></text></g><g><title>late_bound_vars_map (70,892 samples, 0.12%)</title><rect x="37.5424%" y="101" width="0.1166%" height="15" fill="rgb(247,143,39)"/><text x="37.7924%" y="111.50"></text></g><g><title>resolve_lifetimes (63,392 samples, 0.10%)</title><rect x="37.5547%" y="85" width="0.1043%" height="15" fill="rgb(236,97,10)"/><text x="37.8047%" y="95.50"></text></g><g><title>explicit_predicates_of (327,595 samples, 0.54%)</title><rect x="37.2082%" y="117" width="0.5388%" height="15" fill="rgb(233,208,19)"/><text x="37.4582%" y="127.50"></text></g><g><title>predicates_of (554,317 samples, 0.91%)</title><rect x="37.1438%" y="149" width="0.9117%" height="15" fill="rgb(216,164,2)"/><text x="37.3938%" y="159.50"></text></g><g><title>predicates_defined_on (538,067 samples, 0.88%)</title><rect x="37.1705%" y="133" width="0.8849%" height="15" fill="rgb(220,129,5)"/><text x="37.4205%" y="143.50"></text></g><g><title>inferred_outlives_of (187,572 samples, 0.31%)</title><rect x="37.7469%" y="117" width="0.3085%" height="15" fill="rgb(242,17,10)"/><text x="37.9969%" y="127.50"></text></g><g><title>inferred_outlives_crate (176,752 samples, 0.29%)</title><rect x="37.7647%" y="101" width="0.2907%" height="15" fill="rgb(242,107,0)"/><text x="38.0147%" y="111.50"></text></g><g><title>type_of (86,002 samples, 0.14%)</title><rect x="37.9140%" y="85" width="0.1414%" height="15" fill="rgb(251,28,31)"/><text x="38.1640%" y="95.50"></text></g><g><title>type_of (64,391 samples, 0.11%)</title><rect x="37.9495%" y="69" width="0.1059%" height="15" fill="rgb(233,223,10)"/><text x="38.1995%" y="79.50"></text></g><g><title>metadata_decode_entry_type_of (61,511 samples, 0.10%)</title><rect x="37.9543%" y="53" width="0.1012%" height="15" fill="rgb(215,21,27)"/><text x="38.2043%" y="63.50"></text></g><g><title>type_collecting (1,003,281 samples, 1.65%)</title><rect x="36.5882%" y="181" width="1.6501%" height="15" fill="rgb(232,23,21)"/><text x="36.8382%" y="191.50"></text></g><g><title>collect_mod_item_types (990,731 samples, 1.63%)</title><rect x="36.6088%" y="165" width="1.6294%" height="15" fill="rgb(244,5,23)"/><text x="36.8588%" y="175.50"></text></g><g><title>evaluate_obligation (164,202 samples, 0.27%)</title><rect x="38.7342%" y="149" width="0.2701%" height="15" fill="rgb(226,81,46)"/><text x="38.9842%" y="159.50"></text></g><g><title>implied_outlives_bounds (73,811 samples, 0.12%)</title><rect x="39.0042%" y="149" width="0.1214%" height="15" fill="rgb(247,70,30)"/><text x="39.2542%" y="159.50"></text></g><g><title>check_impl_item_well_formed (615,617 samples, 1.01%)</title><rect x="38.3190%" y="165" width="1.0125%" height="15" fill="rgb(212,68,19)"/><text x="38.5690%" y="175.50"></text></g><g><title>adt_def (60,840 samples, 0.10%)</title><rect x="40.2942%" y="133" width="0.1001%" height="15" fill="rgb(240,187,13)"/><text x="40.5442%" y="143.50"></text></g><g><title>adt_sized_constraint (68,161 samples, 0.11%)</title><rect x="40.3943%" y="133" width="0.1121%" height="15" fill="rgb(223,113,26)"/><text x="40.6443%" y="143.50"></text></g><g><title>adt_sized_constraint (145,281 samples, 0.24%)</title><rect x="40.2718%" y="149" width="0.2389%" height="15" fill="rgb(206,192,2)"/><text x="40.5218%" y="159.50"></text></g><g><title>implied_outlives_bounds (102,851 samples, 0.17%)</title><rect x="40.5138%" y="149" width="0.1692%" height="15" fill="rgb(241,108,4)"/><text x="40.7638%" y="159.50"></text></g><g><title>param_env (284,923 samples, 0.47%)</title><rect x="40.6830%" y="149" width="0.4686%" height="15" fill="rgb(247,173,49)"/><text x="40.9330%" y="159.50"></text></g><g><title>check_item_well_formed (1,213,374 samples, 2.00%)</title><rect x="39.3315%" y="165" width="1.9956%" height="15" fill="rgb(224,114,35)"/><text x="39.5815%" y="175.50">c..</text></g><g><title>variances_of (66,211 samples, 0.11%)</title><rect x="41.2182%" y="149" width="0.1089%" height="15" fill="rgb(245,159,27)"/><text x="41.4682%" y="159.50"></text></g><g><title>crate_variances (61,121 samples, 0.10%)</title><rect x="41.2266%" y="133" width="0.1005%" height="15" fill="rgb(245,172,44)"/><text x="41.4766%" y="143.50"></text></g><g><title>analysis (18,051,333 samples, 29.69%)</title><rect x="11.7952%" y="213" width="29.6884%" height="15" fill="rgb(236,23,11)"/><text x="12.0452%" y="223.50">analysis</text></g><g><title>type_check_crate (9,458,766 samples, 15.56%)</title><rect x="25.9271%" y="197" width="15.5565%" height="15" fill="rgb(205,117,38)"/><text x="26.1771%" y="207.50">type_check_crate</text></g><g><title>wf_checking (1,972,322 samples, 3.24%)</title><rect x="38.2398%" y="181" width="3.2438%" height="15" fill="rgb(237,72,25)"/><text x="38.4898%" y="191.50">wf_..</text></g><g><title>check_trait_item_well_formed (95,141 samples, 0.16%)</title><rect x="41.3271%" y="165" width="0.1565%" height="15" fill="rgb(244,70,9)"/><text x="41.5771%" y="175.50"></text></g><g><title>codegen_module (218,502 samples, 0.36%)</title><rect x="42.3503%" y="197" width="0.3594%" height="15" fill="rgb(217,125,39)"/><text x="42.6003%" y="207.50"></text></g><g><title>codegen_crate (854,929 samples, 1.41%)</title><rect x="41.5014%" y="213" width="1.4061%" height="15" fill="rgb(235,36,10)"/><text x="41.7514%" y="223.50"></text></g><g><title>codegen_module_optimize (2,618,179 samples, 4.31%)</title><rect x="42.9075%" y="213" width="4.3060%" height="15" fill="rgb(251,123,47)"/><text x="43.1575%" y="223.50">codeg..</text></g><g><title>LLVM_module_optimize (474,235 samples, 0.78%)</title><rect x="46.4336%" y="197" width="0.7800%" height="15" fill="rgb(221,13,13)"/><text x="46.6836%" y="207.50"></text></g><g><title>LLVM_lto_optimize (301,753 samples, 0.50%)</title><rect x="47.8368%" y="197" width="0.4963%" height="15" fill="rgb(238,131,9)"/><text x="48.0868%" y="207.50"></text></g><g><title>LLVM_module_codegen (2,460,928 samples, 4.05%)</title><rect x="48.3331%" y="197" width="4.0474%" height="15" fill="rgb(211,50,8)"/><text x="48.5831%" y="207.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,415,867 samples, 3.97%)</title><rect x="48.4072%" y="181" width="3.9733%" height="15" fill="rgb(245,182,24)"/><text x="48.6572%" y="191.50">LLVM..</text></g><g><title>codegen_module_perform_lto (3,186,636 samples, 5.24%)</title><rect x="47.2135%" y="213" width="5.2409%" height="15" fill="rgb(242,14,37)"/><text x="47.4635%" y="223.50">codege..</text></g><g><title>AST_validation (130,502 samples, 0.21%)</title><rect x="52.8372%" y="197" width="0.2146%" height="15" fill="rgb(246,228,12)"/><text x="53.0872%" y="207.50"></text></g><g><title>crate_injection (86,971 samples, 0.14%)</title><rect x="53.1141%" y="197" width="0.1430%" height="15" fill="rgb(213,55,15)"/><text x="53.3641%" y="207.50"></text></g><g><title>metadata_load_macro (408,037 samples, 0.67%)</title><rect x="74.0422%" y="165" width="0.6711%" height="15" fill="rgb(209,9,3)"/><text x="74.2922%" y="175.50"></text></g><g><title>metadata_register_crate (2,179,474 samples, 3.58%)</title><rect x="74.7133%" y="165" width="3.5845%" height="15" fill="rgb(230,59,30)"/><text x="74.9633%" y="175.50">meta..</text></g><g><title>metadata_register_crate (783,689 samples, 1.29%)</title><rect x="77.0089%" y="149" width="1.2889%" height="15" fill="rgb(209,121,21)"/><text x="77.2589%" y="159.50"></text></g><g><title>metadata_register_crate (67,212 samples, 0.11%)</title><rect x="78.1872%" y="133" width="0.1105%" height="15" fill="rgb(220,109,13)"/><text x="78.4372%" y="143.50"></text></g><g><title>macro_expand_crate (15,279,681 samples, 25.13%)</title><rect x="53.2571%" y="197" width="25.1299%" height="15" fill="rgb(232,18,1)"/><text x="53.5071%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (15,255,161 samples, 25.09%)</title><rect x="53.2974%" y="181" width="25.0896%" height="15" fill="rgb(215,41,42)"/><text x="53.5474%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (101,632 samples, 0.17%)</title><rect x="78.3958%" y="197" width="0.1672%" height="15" fill="rgb(224,123,36)"/><text x="78.6458%" y="207.50"></text></g><g><title>finalize_macro_resolutions (118,951 samples, 0.20%)</title><rect x="78.6522%" y="181" width="0.1956%" height="15" fill="rgb(240,125,3)"/><text x="78.9022%" y="191.50"></text></g><g><title>late_resolve_crate (606,607 samples, 1.00%)</title><rect x="78.8478%" y="181" width="0.9977%" height="15" fill="rgb(205,98,50)"/><text x="79.0978%" y="191.50"></text></g><g><title>configure_and_expand (16,714,958 samples, 27.49%)</title><rect x="52.4545%" y="213" width="27.4905%" height="15" fill="rgb(205,185,37)"/><text x="52.7045%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (840,250 samples, 1.38%)</title><rect x="78.5630%" y="197" width="1.3819%" height="15" fill="rgb(238,207,15)"/><text x="78.8130%" y="207.50"></text></g><g><title>drop_ast (68,540 samples, 0.11%)</title><rect x="79.9449%" y="213" width="0.1127%" height="15" fill="rgb(213,199,42)"/><text x="80.1949%" y="223.50"></text></g><g><title>early_lint_checks (144,692 samples, 0.24%)</title><rect x="80.0812%" y="213" width="0.2380%" height="15" fill="rgb(235,201,11)"/><text x="80.3312%" y="223.50"></text></g><g><title>free_global_ctxt (3,144,526 samples, 5.17%)</title><rect x="80.3192%" y="213" width="5.1717%" height="15" fill="rgb(207,46,11)"/><text x="80.5692%" y="223.50">free_g..</text></g><g><title>crate_hash (68,110 samples, 0.11%)</title><rect x="86.2063%" y="197" width="0.1120%" height="15" fill="rgb(241,35,35)"/><text x="86.4563%" y="207.50"></text></g><g><title>fn_abi_of_instance (136,082 samples, 0.22%)</title><rect x="86.7266%" y="149" width="0.2238%" height="15" fill="rgb(243,32,47)"/><text x="86.9766%" y="159.50"></text></g><g><title>eval_to_allocation_raw (412,744 samples, 0.68%)</title><rect x="86.5517%" y="181" width="0.6788%" height="15" fill="rgb(247,202,23)"/><text x="86.8017%" y="191.50"></text></g><g><title>eval_to_allocation_raw (410,654 samples, 0.68%)</title><rect x="86.5551%" y="165" width="0.6754%" height="15" fill="rgb(219,102,11)"/><text x="86.8051%" y="175.50"></text></g><g><title>mir_for_ctfe (496,706 samples, 0.82%)</title><rect x="86.4379%" y="197" width="0.8169%" height="15" fill="rgb(243,110,44)"/><text x="86.6879%" y="207.50"></text></g><g><title>needs_drop_raw (78,381 samples, 0.13%)</title><rect x="88.0616%" y="165" width="0.1289%" height="15" fill="rgb(222,74,54)"/><text x="88.3116%" y="175.50"></text></g><g><title>is_copy_raw (71,401 samples, 0.12%)</title><rect x="88.0731%" y="149" width="0.1174%" height="15" fill="rgb(216,99,12)"/><text x="88.3231%" y="159.50"></text></g><g><title>evaluate_obligation (64,411 samples, 0.11%)</title><rect x="88.0846%" y="133" width="0.1059%" height="15" fill="rgb(226,22,26)"/><text x="88.3346%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (297,933 samples, 0.49%)</title><rect x="87.7109%" y="181" width="0.4900%" height="15" fill="rgb(217,163,10)"/><text x="87.9609%" y="191.50"></text></g><g><title>optimized_mir (568,557 samples, 0.94%)</title><rect x="87.2834%" y="197" width="0.9351%" height="15" fill="rgb(213,25,53)"/><text x="87.5334%" y="207.50"></text></g><g><title>generate_crate_metadata (1,672,669 samples, 2.75%)</title><rect x="85.4909%" y="213" width="2.7510%" height="15" fill="rgb(252,105,26)"/><text x="85.7409%" y="223.50">ge..</text></g><g><title>hir_lowering (1,143,493 samples, 1.88%)</title><rect x="88.2418%" y="213" width="1.8807%" height="15" fill="rgb(220,39,43)"/><text x="88.4918%" y="223.50">h..</text></g><g><title>finish_ongoing_codegen (2,914,762 samples, 4.79%)</title><rect x="90.1531%" y="197" width="4.7938%" height="15" fill="rgb(229,68,48)"/><text x="90.4031%" y="207.50">finish..</text></g><g><title>link_crate (746,468 samples, 1.23%)</title><rect x="94.9469%" y="197" width="1.2277%" height="15" fill="rgb(252,8,32)"/><text x="95.1969%" y="207.50"></text></g><g><title>link_binary (734,498 samples, 1.21%)</title><rect x="94.9666%" y="181" width="1.2080%" height="15" fill="rgb(223,20,43)"/><text x="95.2166%" y="191.50"></text></g><g><title>link_rlib (455,725 samples, 0.75%)</title><rect x="95.4251%" y="165" width="0.7495%" height="15" fill="rgb(229,81,49)"/><text x="95.6751%" y="175.50"></text></g><g><title>link (3,691,951 samples, 6.07%)</title><rect x="90.1225%" y="213" width="6.0720%" height="15" fill="rgb(236,28,36)"/><text x="90.3725%" y="223.50">link</text></g><g><title>parse_crate (1,139,363 samples, 1.87%)</title><rect x="96.1945%" y="213" width="1.8739%" height="15" fill="rgb(249,185,26)"/><text x="96.4445%" y="223.50">p..</text></g><g><title>prepare_outputs (377,995 samples, 0.62%)</title><rect x="98.0853%" y="213" width="0.6217%" height="15" fill="rgb(249,174,33)"/><text x="98.3353%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (352,804 samples, 0.58%)</title><rect x="98.7070%" y="213" width="0.5802%" height="15" fill="rgb(233,201,37)"/><text x="98.9570%" y="223.50"></text></g><g><title>setup_global_ctxt (145,902 samples, 0.24%)</title><rect x="99.2888%" y="213" width="0.2400%" height="15" fill="rgb(221,78,26)"/><text x="99.5388%" y="223.50"></text></g><g><title>all (60,802,743 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (60,802,743 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (286,514 samples, 0.47%)</title><rect x="99.5288%" y="213" width="0.4712%" height="15" fill="rgb(229,67,23)"/><text x="99.7788%" y="223.50"></text></g></svg></svg>