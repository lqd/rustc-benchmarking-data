<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,160,979 samples, 7.21%)</title><rect x="0.3680%" y="229" width="7.2137%" height="15" fill="rgb(227,0,7)"/><text x="0.6180%" y="239.50">LLVM_passes</text></g><g><title>implied_outlives_bounds (190,701 samples, 0.11%)</title><rect x="14.4928%" y="181" width="0.1131%" height="15" fill="rgb(217,0,24)"/><text x="14.7428%" y="191.50"></text></g><g><title>param_env (789,830 samples, 0.47%)</title><rect x="15.6606%" y="149" width="0.4685%" height="15" fill="rgb(221,193,54)"/><text x="15.9106%" y="159.50"></text></g><g><title>item_attrs (397,269 samples, 0.24%)</title><rect x="16.4740%" y="117" width="0.2357%" height="15" fill="rgb(248,212,6)"/><text x="16.7240%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (383,279 samples, 0.23%)</title><rect x="16.4823%" y="101" width="0.2274%" height="15" fill="rgb(208,68,35)"/><text x="16.7323%" y="111.50"></text></g><g><title>codegen_fn_attrs (510,069 samples, 0.30%)</title><rect x="16.4154%" y="133" width="0.3026%" height="15" fill="rgb(232,128,0)"/><text x="16.6654%" y="143.50"></text></g><g><title>opt_def_kind (235,473 samples, 0.14%)</title><rect x="18.3695%" y="37" width="0.1397%" height="15" fill="rgb(207,160,47)"/><text x="18.6195%" y="47.50"></text></g><g><title>param_env (255,083 samples, 0.15%)</title><rect x="18.3605%" y="69" width="0.1513%" height="15" fill="rgb(228,23,34)"/><text x="18.6105%" y="79.50"></text></g><g><title>predicates_of (242,193 samples, 0.14%)</title><rect x="18.3682%" y="53" width="0.1437%" height="15" fill="rgb(218,30,26)"/><text x="18.6182%" y="63.50"></text></g><g><title>adt_drop_tys (357,223 samples, 0.21%)</title><rect x="18.3004%" y="85" width="0.2119%" height="15" fill="rgb(220,122,19)"/><text x="18.5504%" y="95.50"></text></g><g><title>adt_drop_tys (612,427 samples, 0.36%)</title><rect x="18.2813%" y="101" width="0.3633%" height="15" fill="rgb(250,228,42)"/><text x="18.5313%" y="111.50"></text></g><g><title>needs_drop_raw (1,364,941 samples, 0.81%)</title><rect x="18.2025%" y="117" width="0.8097%" height="15" fill="rgb(240,193,28)"/><text x="18.4525%" y="127.50"></text></g><g><title>is_copy_raw (619,684 samples, 0.37%)</title><rect x="18.6446%" y="101" width="0.3676%" height="15" fill="rgb(216,20,37)"/><text x="18.8946%" y="111.50"></text></g><g><title>evaluate_obligation (454,552 samples, 0.27%)</title><rect x="18.7426%" y="85" width="0.2696%" height="15" fill="rgb(206,188,39)"/><text x="18.9926%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (910,900 samples, 0.54%)</title><rect x="19.2039%" y="101" width="0.5403%" height="15" fill="rgb(217,207,13)"/><text x="19.4539%" y="111.50"></text></g><g><title>resolve_instance (1,513,786 samples, 0.90%)</title><rect x="19.0122%" y="117" width="0.8980%" height="15" fill="rgb(231,73,38)"/><text x="19.2622%" y="127.50"></text></g><g><title>thir_body (896,257 samples, 0.53%)</title><rect x="19.9269%" y="117" width="0.5316%" height="15" fill="rgb(225,20,46)"/><text x="20.1769%" y="127.50"></text></g><g><title>mir_const (9,030,876 samples, 5.36%)</title><rect x="15.1165%" y="165" width="5.3570%" height="15" fill="rgb(210,31,41)"/><text x="15.3665%" y="175.50">mir_con..</text></g><g><title>unsafety_check_result (7,323,751 samples, 4.34%)</title><rect x="16.1291%" y="149" width="4.3443%" height="15" fill="rgb(221,200,47)"/><text x="16.3791%" y="159.50">unsaf..</text></g><g><title>mir_built (6,331,067 samples, 3.76%)</title><rect x="16.7179%" y="133" width="3.7555%" height="15" fill="rgb(226,26,5)"/><text x="16.9679%" y="143.50">mir_..</text></g><g><title>mir_promoted (9,846,534 samples, 5.84%)</title><rect x="14.6628%" y="181" width="5.8408%" height="15" fill="rgb(249,33,26)"/><text x="14.9128%" y="191.50">mir_pro..</text></g><g><title>type_op_normalize_fn_sig (892,558 samples, 0.53%)</title><rect x="20.5978%" y="181" width="0.5295%" height="15" fill="rgb(235,183,28)"/><text x="20.8478%" y="191.50"></text></g><g><title>normalize_projection_ty (594,397 samples, 0.35%)</title><rect x="20.7746%" y="165" width="0.3526%" height="15" fill="rgb(221,5,38)"/><text x="21.0246%" y="175.50"></text></g><g><title>type_op_normalize_predicate (482,946 samples, 0.29%)</title><rect x="21.1272%" y="181" width="0.2865%" height="15" fill="rgb(247,18,42)"/><text x="21.3772%" y="191.50"></text></g><g><title>normalize_projection_ty (211,922 samples, 0.13%)</title><rect x="21.2880%" y="165" width="0.1257%" height="15" fill="rgb(241,131,45)"/><text x="21.5380%" y="175.50"></text></g><g><title>type_op_prove_predicate (3,013,553 samples, 1.79%)</title><rect x="21.4187%" y="181" width="1.7876%" height="15" fill="rgb(249,31,29)"/><text x="21.6687%" y="191.50">t..</text></g><g><title>MIR_borrow_checking (26,116,887 samples, 15.49%)</title><rect x="7.7161%" y="213" width="15.4922%" height="15" fill="rgb(225,111,53)"/><text x="7.9661%" y="223.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,976,183 samples, 15.41%)</title><rect x="7.7995%" y="197" width="15.4087%" height="15" fill="rgb(238,160,17)"/><text x="8.0495%" y="207.50">mir_borrowck</text></g><g><title>should_inherit_track_caller (226,984 samples, 0.13%)</title><rect x="23.5079%" y="165" width="0.1346%" height="15" fill="rgb(214,148,48)"/><text x="23.7579%" y="175.50"></text></g><g><title>codegen_fn_attrs (384,345 samples, 0.23%)</title><rect x="23.4235%" y="181" width="0.2280%" height="15" fill="rgb(232,36,49)"/><text x="23.6735%" y="191.50"></text></g><g><title>check_mod_attrs (564,636 samples, 0.33%)</title><rect x="23.3166%" y="197" width="0.3349%" height="15" fill="rgb(209,103,24)"/><text x="23.5666%" y="207.50"></text></g><g><title>check_mod_unstable_api_usage (292,653 samples, 0.17%)</title><rect x="23.7472%" y="197" width="0.1736%" height="15" fill="rgb(229,88,8)"/><text x="23.9972%" y="207.50"></text></g><g><title>misc_checking_1 (1,065,761 samples, 0.63%)</title><rect x="23.3074%" y="213" width="0.6322%" height="15" fill="rgb(213,181,19)"/><text x="23.5574%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (397,365 samples, 0.24%)</title><rect x="23.9404%" y="197" width="0.2357%" height="15" fill="rgb(254,191,54)"/><text x="24.1904%" y="207.50"></text></g><g><title>check_mod_liveness (327,714 samples, 0.19%)</title><rect x="23.9817%" y="181" width="0.1944%" height="15" fill="rgb(241,83,37)"/><text x="24.2317%" y="191.50"></text></g><g><title>misc_checking_2 (927,180 samples, 0.55%)</title><rect x="23.9396%" y="213" width="0.5500%" height="15" fill="rgb(233,36,39)"/><text x="24.1896%" y="223.50"></text></g><g><title>match_checking (528,465 samples, 0.31%)</title><rect x="24.1761%" y="197" width="0.3135%" height="15" fill="rgb(226,3,54)"/><text x="24.4261%" y="207.50"></text></g><g><title>check_match (496,665 samples, 0.29%)</title><rect x="24.1950%" y="181" width="0.2946%" height="15" fill="rgb(245,192,40)"/><text x="24.4450%" y="191.50"></text></g><g><title>check_private_in_public (170,362 samples, 0.10%)</title><rect x="24.4941%" y="197" width="0.1011%" height="15" fill="rgb(238,167,29)"/><text x="24.7441%" y="207.50"></text></g><g><title>death_checking (280,553 samples, 0.17%)</title><rect x="24.5952%" y="197" width="0.1664%" height="15" fill="rgb(232,182,51)"/><text x="24.8452%" y="207.50"></text></g><g><title>crate_lints (1,811,259 samples, 1.07%)</title><rect x="24.7625%" y="181" width="1.0744%" height="15" fill="rgb(231,60,39)"/><text x="25.0125%" y="191.50"></text></g><g><title>type_of (1,064,790 samples, 0.63%)</title><rect x="25.2053%" y="165" width="0.6316%" height="15" fill="rgb(208,69,12)"/><text x="25.4553%" y="175.50"></text></g><g><title>metadata_decode_entry_type_of (829,747 samples, 0.49%)</title><rect x="25.3447%" y="149" width="0.4922%" height="15" fill="rgb(235,93,37)"/><text x="25.5947%" y="159.50"></text></g><g><title>lint_checking (2,113,502 samples, 1.25%)</title><rect x="24.7616%" y="197" width="1.2537%" height="15" fill="rgb(213,116,39)"/><text x="25.0116%" y="207.50"></text></g><g><title>module_lints (300,793 samples, 0.18%)</title><rect x="25.8369%" y="181" width="0.1784%" height="15" fill="rgb(222,207,29)"/><text x="26.0869%" y="191.50"></text></g><g><title>lint_mod (298,473 samples, 0.18%)</title><rect x="25.8383%" y="165" width="0.1771%" height="15" fill="rgb(206,96,30)"/><text x="26.0883%" y="175.50"></text></g><g><title>privacy_access_levels (217,282 samples, 0.13%)</title><rect x="26.0153%" y="197" width="0.1289%" height="15" fill="rgb(218,138,4)"/><text x="26.2653%" y="207.50"></text></g><g><title>privacy_checking_modules (670,338 samples, 0.40%)</title><rect x="26.1442%" y="197" width="0.3976%" height="15" fill="rgb(250,191,14)"/><text x="26.3942%" y="207.50"></text></g><g><title>check_mod_privacy (668,878 samples, 0.40%)</title><rect x="26.1451%" y="181" width="0.3968%" height="15" fill="rgb(239,60,40)"/><text x="26.3951%" y="191.50"></text></g><g><title>misc_checking_3 (3,470,907 samples, 2.06%)</title><rect x="24.4896%" y="213" width="2.0589%" height="15" fill="rgb(206,27,48)"/><text x="24.7396%" y="223.50">m..</text></g><g><title>impl_parent (2,340,436 samples, 1.39%)</title><rect x="28.8807%" y="149" width="1.3883%" height="15" fill="rgb(225,35,8)"/><text x="29.1307%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,427,853 samples, 0.85%)</title><rect x="29.4220%" y="133" width="0.8470%" height="15" fill="rgb(250,213,24)"/><text x="29.6720%" y="143.50"></text></g><g><title>impl_trait_ref (5,658,323 samples, 3.36%)</title><rect x="30.2690%" y="149" width="3.3564%" height="15" fill="rgb(247,123,22)"/><text x="30.5190%" y="159.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,291,840 samples, 2.55%)</title><rect x="31.0796%" y="133" width="2.5459%" height="15" fill="rgb(231,138,38)"/><text x="31.3296%" y="143.50">me..</text></g><g><title>predicates_of (210,382 samples, 0.12%)</title><rect x="33.7063%" y="149" width="0.1248%" height="15" fill="rgb(231,145,46)"/><text x="33.9563%" y="159.50"></text></g><g><title>predicates_defined_on (186,992 samples, 0.11%)</title><rect x="33.7202%" y="133" width="0.1109%" height="15" fill="rgb(251,118,11)"/><text x="33.9702%" y="143.50"></text></g><g><title>trait_impls_of (797,789 samples, 0.47%)</title><rect x="33.8340%" y="149" width="0.4732%" height="15" fill="rgb(217,147,25)"/><text x="34.0840%" y="159.50"></text></g><g><title>implementations_of_trait (215,722 samples, 0.13%)</title><rect x="34.1793%" y="133" width="0.1280%" height="15" fill="rgb(247,81,37)"/><text x="34.4293%" y="143.50"></text></g><g><title>coherent_trait (13,030,519 samples, 7.73%)</title><rect x="26.5924%" y="181" width="7.7295%" height="15" fill="rgb(209,12,38)"/><text x="26.8424%" y="191.50">coherent_tr..</text></g><g><title>specialization_graph_of (13,011,019 samples, 7.72%)</title><rect x="26.6040%" y="165" width="7.7180%" height="15" fill="rgb(227,1,9)"/><text x="26.8540%" y="175.50">specializat..</text></g><g><title>coherence_checking (13,110,439 samples, 7.78%)</title><rect x="26.5821%" y="197" width="7.7769%" height="15" fill="rgb(248,47,43)"/><text x="26.8321%" y="207.50">coherence_c..</text></g><g><title>associated_item (320,165 samples, 0.19%)</title><rect x="45.9597%" y="133" width="0.1899%" height="15" fill="rgb(221,10,30)"/><text x="46.2097%" y="143.50"></text></g><g><title>metadata_decode_entry_associated_item (251,535 samples, 0.15%)</title><rect x="46.0004%" y="117" width="0.1492%" height="15" fill="rgb(210,229,1)"/><text x="46.2504%" y="127.50"></text></g><g><title>associated_items (460,115 samples, 0.27%)</title><rect x="45.8905%" y="149" width="0.2729%" height="15" fill="rgb(222,148,37)"/><text x="46.1405%" y="159.50"></text></g><g><title>adt_dtorck_constraint (178,492 samples, 0.11%)</title><rect x="46.4432%" y="101" width="0.1059%" height="15" fill="rgb(234,67,33)"/><text x="46.6932%" y="111.50"></text></g><g><title>adt_dtorck_constraint (203,283 samples, 0.12%)</title><rect x="46.4318%" y="117" width="0.1206%" height="15" fill="rgb(247,98,35)"/><text x="46.6818%" y="127.50"></text></g><g><title>adt_dtorck_constraint (284,293 samples, 0.17%)</title><rect x="46.3909%" y="133" width="0.1686%" height="15" fill="rgb(247,138,52)"/><text x="46.6409%" y="143.50"></text></g><g><title>dropck_outlives (594,378 samples, 0.35%)</title><rect x="46.2109%" y="149" width="0.3526%" height="15" fill="rgb(213,79,30)"/><text x="46.4609%" y="159.50"></text></g><g><title>generics_of (260,720 samples, 0.15%)</title><rect x="47.6716%" y="133" width="0.1547%" height="15" fill="rgb(246,177,23)"/><text x="47.9216%" y="143.50"></text></g><g><title>metadata_decode_entry_generics_of (204,720 samples, 0.12%)</title><rect x="47.7048%" y="117" width="0.1214%" height="15" fill="rgb(230,62,27)"/><text x="47.9548%" y="127.50"></text></g><g><title>impl_trait_ref (297,994 samples, 0.18%)</title><rect x="47.8605%" y="133" width="0.1768%" height="15" fill="rgb(216,154,8)"/><text x="48.1105%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (241,124 samples, 0.14%)</title><rect x="47.8942%" y="117" width="0.1430%" height="15" fill="rgb(244,35,45)"/><text x="48.1442%" y="127.50"></text></g><g><title>predicates_of (179,302 samples, 0.11%)</title><rect x="48.0486%" y="133" width="0.1064%" height="15" fill="rgb(251,115,12)"/><text x="48.2986%" y="143.50"></text></g><g><title>specializes (348,812 samples, 0.21%)</title><rect x="48.1549%" y="133" width="0.2069%" height="15" fill="rgb(240,54,50)"/><text x="48.4049%" y="143.50"></text></g><g><title>param_env (245,051 samples, 0.15%)</title><rect x="48.2165%" y="117" width="0.1454%" height="15" fill="rgb(233,84,52)"/><text x="48.4665%" y="127.50"></text></g><g><title>evaluate_obligation (3,215,972 samples, 1.91%)</title><rect x="46.5635%" y="149" width="1.9077%" height="15" fill="rgb(207,117,47)"/><text x="46.8135%" y="159.50">e..</text></g><g><title>method_autoderef_steps (399,614 samples, 0.24%)</title><rect x="48.7631%" y="149" width="0.2370%" height="15" fill="rgb(249,43,39)"/><text x="49.0131%" y="159.50"></text></g><g><title>evaluate_obligation (197,832 samples, 0.12%)</title><rect x="48.8828%" y="133" width="0.1174%" height="15" fill="rgb(209,38,44)"/><text x="49.1328%" y="143.50"></text></g><g><title>predicates_of (329,764 samples, 0.20%)</title><rect x="49.0268%" y="149" width="0.1956%" height="15" fill="rgb(236,212,23)"/><text x="49.2768%" y="159.50"></text></g><g><title>predicates_defined_on (226,432 samples, 0.13%)</title><rect x="49.0881%" y="133" width="0.1343%" height="15" fill="rgb(242,79,21)"/><text x="49.3381%" y="143.50"></text></g><g><title>evaluate_obligation (458,736 samples, 0.27%)</title><rect x="51.7897%" y="133" width="0.2721%" height="15" fill="rgb(211,96,35)"/><text x="52.0397%" y="143.50"></text></g><g><title>method_autoderef_steps (189,892 samples, 0.11%)</title><rect x="52.1793%" y="133" width="0.1126%" height="15" fill="rgb(253,215,40)"/><text x="52.4293%" y="143.50"></text></g><g><title>typeck (5,258,644 samples, 3.12%)</title><rect x="49.2664%" y="149" width="3.1194%" height="15" fill="rgb(211,81,21)"/><text x="49.5164%" y="159.50">typ..</text></g><g><title>item_bodies_checking (30,392,303 samples, 18.03%)</title><rect x="34.3786%" y="197" width="18.0283%" height="15" fill="rgb(208,190,38)"/><text x="34.6286%" y="207.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (30,390,082 samples, 18.03%)</title><rect x="34.3799%" y="181" width="18.0270%" height="15" fill="rgb(235,213,38)"/><text x="34.6299%" y="191.50">typeck_item_bodies</text></g><g><title>typeck (30,297,461 samples, 17.97%)</title><rect x="34.4348%" y="165" width="17.9720%" height="15" fill="rgb(237,122,38)"/><text x="34.6848%" y="175.50">typeck</text></g><g><title>adt_destructor (328,234 samples, 0.19%)</title><rect x="53.5199%" y="165" width="0.1947%" height="15" fill="rgb(244,218,35)"/><text x="53.7699%" y="175.50"></text></g><g><title>coherent_trait (323,064 samples, 0.19%)</title><rect x="53.5230%" y="149" width="0.1916%" height="15" fill="rgb(240,68,47)"/><text x="53.7730%" y="159.50"></text></g><g><title>specialization_graph_of (321,514 samples, 0.19%)</title><rect x="53.5239%" y="133" width="0.1907%" height="15" fill="rgb(210,16,53)"/><text x="53.7739%" y="143.50"></text></g><g><title>item_types_checking (2,393,225 samples, 1.42%)</title><rect x="52.4069%" y="197" width="1.4196%" height="15" fill="rgb(235,124,12)"/><text x="52.6569%" y="207.50"></text></g><g><title>check_mod_item_types (2,391,215 samples, 1.42%)</title><rect x="52.4081%" y="181" width="1.4184%" height="15" fill="rgb(224,169,11)"/><text x="52.6581%" y="191.50"></text></g><g><title>fn_sig (211,291 samples, 0.13%)</title><rect x="53.9679%" y="165" width="0.1253%" height="15" fill="rgb(250,166,2)"/><text x="54.2179%" y="175.50"></text></g><g><title>is_late_bound_map (226,293 samples, 0.13%)</title><rect x="54.1730%" y="149" width="0.1342%" height="15" fill="rgb(242,216,29)"/><text x="54.4230%" y="159.50"></text></g><g><title>resolve_lifetimes (201,342 samples, 0.12%)</title><rect x="54.1878%" y="133" width="0.1194%" height="15" fill="rgb(230,116,27)"/><text x="54.4378%" y="143.50"></text></g><g><title>generics_of (381,254 samples, 0.23%)</title><rect x="54.0933%" y="165" width="0.2262%" height="15" fill="rgb(228,99,48)"/><text x="54.3433%" y="175.50"></text></g><g><title>late_bound_vars_map (399,154 samples, 0.24%)</title><rect x="54.5971%" y="117" width="0.2368%" height="15" fill="rgb(253,11,6)"/><text x="54.8471%" y="127.50"></text></g><g><title>resolve_lifetimes (382,004 samples, 0.23%)</title><rect x="54.6073%" y="101" width="0.2266%" height="15" fill="rgb(247,143,39)"/><text x="54.8573%" y="111.50"></text></g><g><title>explicit_predicates_of (697,536 samples, 0.41%)</title><rect x="54.4336%" y="133" width="0.4138%" height="15" fill="rgb(236,97,10)"/><text x="54.6836%" y="143.50"></text></g><g><title>predicates_of (1,043,068 samples, 0.62%)</title><rect x="54.3509%" y="165" width="0.6187%" height="15" fill="rgb(233,208,19)"/><text x="54.6009%" y="175.50"></text></g><g><title>predicates_defined_on (994,328 samples, 0.59%)</title><rect x="54.3799%" y="149" width="0.5898%" height="15" fill="rgb(216,164,2)"/><text x="54.6299%" y="159.50"></text></g><g><title>inferred_outlives_of (206,242 samples, 0.12%)</title><rect x="54.8473%" y="133" width="0.1223%" height="15" fill="rgb(220,129,5)"/><text x="55.0973%" y="143.50"></text></g><g><title>inferred_outlives_crate (187,152 samples, 0.11%)</title><rect x="54.8587%" y="117" width="0.1110%" height="15" fill="rgb(242,17,10)"/><text x="55.1087%" y="127.50"></text></g><g><title>type_collecting (2,122,092 samples, 1.26%)</title><rect x="53.8274%" y="197" width="1.2588%" height="15" fill="rgb(242,107,0)"/><text x="54.0774%" y="207.50"></text></g><g><title>collect_mod_item_types (2,117,332 samples, 1.26%)</title><rect x="53.8302%" y="181" width="1.2560%" height="15" fill="rgb(251,28,31)"/><text x="54.0802%" y="191.50"></text></g><g><title>type_of (196,381 samples, 0.12%)</title><rect x="54.9697%" y="165" width="0.1165%" height="15" fill="rgb(233,223,10)"/><text x="55.2197%" y="175.50"></text></g><g><title>evaluate_obligation (638,359 samples, 0.38%)</title><rect x="58.1721%" y="165" width="0.3787%" height="15" fill="rgb(215,21,27)"/><text x="58.4221%" y="175.50"></text></g><g><title>implied_outlives_bounds (381,112 samples, 0.23%)</title><rect x="58.5514%" y="165" width="0.2261%" height="15" fill="rgb(232,23,21)"/><text x="58.8014%" y="175.50"></text></g><g><title>param_env (1,179,198 samples, 0.70%)</title><rect x="58.7775%" y="165" width="0.6995%" height="15" fill="rgb(244,5,23)"/><text x="59.0275%" y="175.50"></text></g><g><title>region_scope_tree (361,792 samples, 0.21%)</title><rect x="59.5031%" y="165" width="0.2146%" height="15" fill="rgb(226,81,46)"/><text x="59.7531%" y="175.50"></text></g><g><title>check_impl_item_well_formed (7,617,760 samples, 4.52%)</title><rect x="55.2220%" y="181" width="4.5188%" height="15" fill="rgb(247,70,30)"/><text x="55.4720%" y="191.50">check..</text></g><g><title>implied_outlives_bounds (212,481 samples, 0.13%)</title><rect x="61.7912%" y="165" width="0.1260%" height="15" fill="rgb(212,68,19)"/><text x="62.0412%" y="175.50"></text></g><g><title>param_env (678,297 samples, 0.40%)</title><rect x="61.9199%" y="165" width="0.4024%" height="15" fill="rgb(240,187,13)"/><text x="62.1699%" y="175.50"></text></g><g><title>trait_impls_of (446,345 samples, 0.26%)</title><rect x="62.4186%" y="165" width="0.2648%" height="15" fill="rgb(223,113,26)"/><text x="62.6686%" y="175.50"></text></g><g><title>implementations_of_trait (170,384 samples, 0.10%)</title><rect x="62.5823%" y="149" width="0.1011%" height="15" fill="rgb(206,192,2)"/><text x="62.8323%" y="159.50"></text></g><g><title>analysis (92,999,358 samples, 55.17%)</title><rect x="7.5817%" y="229" width="55.1660%" height="15" fill="rgb(241,108,4)"/><text x="7.8317%" y="239.50">analysis</text></g><g><title>type_check_crate (61,024,948 samples, 36.20%)</title><rect x="26.5485%" y="213" width="36.1992%" height="15" fill="rgb(247,173,49)"/><text x="26.7985%" y="223.50">type_check_crate</text></g><g><title>wf_checking (12,910,427 samples, 7.66%)</title><rect x="55.0894%" y="197" width="7.6583%" height="15" fill="rgb(224,114,35)"/><text x="55.3394%" y="207.50">wf_checking</text></g><g><title>check_item_well_formed (5,069,095 samples, 3.01%)</title><rect x="59.7407%" y="181" width="3.0069%" height="15" fill="rgb(245,159,27)"/><text x="59.9907%" y="191.50">che..</text></g><g><title>codegen_module (486,175 samples, 0.29%)</title><rect x="62.9913%" y="213" width="0.2884%" height="15" fill="rgb(245,172,44)"/><text x="63.2413%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (239,213 samples, 0.14%)</title><rect x="63.2800%" y="213" width="0.1419%" height="15" fill="rgb(236,23,11)"/><text x="63.5300%" y="223.50"></text></g><g><title>codegen_crate (1,283,434 samples, 0.76%)</title><rect x="62.7524%" y="229" width="0.7613%" height="15" fill="rgb(205,117,38)"/><text x="63.0024%" y="239.50"></text></g><g><title>codegen_module_optimize (5,120,194 samples, 3.04%)</title><rect x="63.5137%" y="229" width="3.0372%" height="15" fill="rgb(237,72,25)"/><text x="63.7637%" y="239.50">cod..</text></g><g><title>LLVM_module_optimize (4,502,668 samples, 2.67%)</title><rect x="63.8800%" y="213" width="2.6709%" height="15" fill="rgb(244,70,9)"/><text x="64.1300%" y="223.50">LL..</text></g><g><title>LLVM_lto_optimize (1,474,976 samples, 0.87%)</title><rect x="66.8705%" y="213" width="0.8749%" height="15" fill="rgb(217,125,39)"/><text x="67.1205%" y="223.50"></text></g><g><title>LLVM_module_codegen (4,559,728 samples, 2.70%)</title><rect x="67.7454%" y="213" width="2.7048%" height="15" fill="rgb(235,36,10)"/><text x="67.9954%" y="223.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (4,470,737 samples, 2.65%)</title><rect x="67.7982%" y="197" width="2.6520%" height="15" fill="rgb(251,123,47)"/><text x="68.0482%" y="207.50">LL..</text></g><g><title>codegen_module_perform_lto (6,610,250 samples, 3.92%)</title><rect x="66.5509%" y="229" width="3.9211%" height="15" fill="rgb(221,13,13)"/><text x="66.8009%" y="239.50">code..</text></g><g><title>macro_expand_crate (10,920,256 samples, 6.48%)</title><rect x="70.7331%" y="213" width="6.4777%" height="15" fill="rgb(238,131,9)"/><text x="70.9831%" y="223.50">macro_ex..</text></g><g><title>expand_crate (10,909,486 samples, 6.47%)</title><rect x="70.7395%" y="197" width="6.4714%" height="15" fill="rgb(211,50,8)"/><text x="70.9895%" y="207.50">expand_c..</text></g><g><title>metadata_register_crate (1,956,912 samples, 1.16%)</title><rect x="76.0500%" y="181" width="1.1608%" height="15" fill="rgb(245,182,24)"/><text x="76.3000%" y="191.50"></text></g><g><title>metadata_register_crate (1,579,218 samples, 0.94%)</title><rect x="76.2741%" y="165" width="0.9368%" height="15" fill="rgb(242,14,37)"/><text x="76.5241%" y="175.50"></text></g><g><title>metadata_register_crate (631,726 samples, 0.37%)</title><rect x="76.8361%" y="149" width="0.3747%" height="15" fill="rgb(246,228,12)"/><text x="77.0861%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (405,164 samples, 0.24%)</title><rect x="77.2127%" y="213" width="0.2403%" height="15" fill="rgb(213,55,15)"/><text x="77.4627%" y="223.50"></text></g><g><title>late_resolve_crate (2,092,062 samples, 1.24%)</title><rect x="77.5302%" y="197" width="1.2410%" height="15" fill="rgb(209,9,3)"/><text x="77.7802%" y="207.50"></text></g><g><title>configure_and_expand (14,141,461 samples, 8.39%)</title><rect x="70.4720%" y="229" width="8.3885%" height="15" fill="rgb(230,59,30)"/><text x="70.7220%" y="239.50">configure_an..</text></g><g><title>resolve_crate (2,372,725 samples, 1.41%)</title><rect x="77.4531%" y="213" width="1.4075%" height="15" fill="rgb(209,121,21)"/><text x="77.7031%" y="223.50"></text></g><g><title>drop_ast (315,333 samples, 0.19%)</title><rect x="78.8605%" y="229" width="0.1871%" height="15" fill="rgb(220,109,13)"/><text x="79.1105%" y="239.50"></text></g><g><title>early_lint_checks (496,606 samples, 0.29%)</title><rect x="79.0555%" y="229" width="0.2946%" height="15" fill="rgb(232,18,1)"/><text x="79.3055%" y="239.50"></text></g><g><title>free_global_ctxt (3,641,428 samples, 2.16%)</title><rect x="79.3501%" y="229" width="2.1600%" height="15" fill="rgb(215,41,42)"/><text x="79.6001%" y="239.50">f..</text></g><g><title>layout_of (201,512 samples, 0.12%)</title><rect x="84.7443%" y="165" width="0.1195%" height="15" fill="rgb(224,123,36)"/><text x="84.9943%" y="175.50"></text></g><g><title>layout_of (379,485 samples, 0.23%)</title><rect x="84.6543%" y="181" width="0.2251%" height="15" fill="rgb(240,125,3)"/><text x="84.9043%" y="191.50"></text></g><g><title>layout_of (816,771 samples, 0.48%)</title><rect x="84.4142%" y="197" width="0.4845%" height="15" fill="rgb(205,98,50)"/><text x="84.6642%" y="207.50"></text></g><g><title>needs_drop_raw (174,770 samples, 0.10%)</title><rect x="86.5702%" y="181" width="0.1037%" height="15" fill="rgb(205,185,37)"/><text x="86.8202%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,067,705 samples, 1.82%)</title><rect x="84.8987%" y="197" width="1.8197%" height="15" fill="rgb(238,207,15)"/><text x="85.1487%" y="207.50">m..</text></g><g><title>optimized_mir (6,904,965 samples, 4.10%)</title><rect x="82.6411%" y="213" width="4.0959%" height="15" fill="rgb(213,199,42)"/><text x="82.8911%" y="223.50">opti..</text></g><g><title>generate_crate_metadata (8,875,774 samples, 5.26%)</title><rect x="81.5101%" y="229" width="5.2650%" height="15" fill="rgb(235,201,11)"/><text x="81.7601%" y="239.50">genera..</text></g><g><title>hir_lowering (4,160,484 samples, 2.47%)</title><rect x="86.7751%" y="229" width="2.4679%" height="15" fill="rgb(207,46,11)"/><text x="87.0251%" y="239.50">hi..</text></g><g><title>finish_ongoing_codegen (7,877,234 samples, 4.67%)</title><rect x="89.2526%" y="213" width="4.6727%" height="15" fill="rgb(241,35,35)"/><text x="89.5026%" y="223.50">finis..</text></g><g><title>link_crate (796,748 samples, 0.47%)</title><rect x="93.9252%" y="213" width="0.4726%" height="15" fill="rgb(243,32,47)"/><text x="94.1752%" y="223.50"></text></g><g><title>link_binary (783,638 samples, 0.46%)</title><rect x="93.9330%" y="197" width="0.4648%" height="15" fill="rgb(247,202,23)"/><text x="94.1830%" y="207.50"></text></g><g><title>link_rlib (517,386 samples, 0.31%)</title><rect x="94.0909%" y="181" width="0.3069%" height="15" fill="rgb(219,102,11)"/><text x="94.3409%" y="191.50"></text></g><g><title>link (8,696,413 samples, 5.16%)</title><rect x="89.2431%" y="229" width="5.1586%" height="15" fill="rgb(243,110,44)"/><text x="89.4931%" y="239.50">link</text></g><g><title>parse_crate (7,832,973 samples, 4.65%)</title><rect x="94.4017%" y="229" width="4.6464%" height="15" fill="rgb(222,74,54)"/><text x="94.6517%" y="239.50">parse..</text></g><g><title>prepare_outputs (288,193 samples, 0.17%)</title><rect x="99.0521%" y="229" width="0.1710%" height="15" fill="rgb(216,99,12)"/><text x="99.3021%" y="239.50"></text></g><g><title>self_profile_alloc_query_strings (829,099 samples, 0.49%)</title><rect x="99.2231%" y="229" width="0.4918%" height="15" fill="rgb(226,22,26)"/><text x="99.4731%" y="239.50"></text></g><g><title>all (168,581,080 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (168,581,080 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="255.50">rustc</text></g><g><title>write_crate_metadata (391,214 samples, 0.23%)</title><rect x="99.7679%" y="229" width="0.2321%" height="15" fill="rgb(252,105,26)"/><text x="100.0179%" y="239.50"></text></g></svg></svg>