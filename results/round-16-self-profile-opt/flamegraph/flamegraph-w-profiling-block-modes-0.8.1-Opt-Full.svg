<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (8,980,545 samples, 4.58%)</title><rect x="0.3101%" y="197" width="4.5846%" height="15" fill="rgb(227,0,7)"/><text x="0.5601%" y="207.50">LLVM_..</text></g><g><title>implied_outlives_bounds (317,643 samples, 0.16%)</title><rect x="14.5280%" y="149" width="0.1622%" height="15" fill="rgb(217,0,24)"/><text x="14.7780%" y="159.50"></text></g><g><title>param_env (351,204 samples, 0.18%)</title><rect x="15.8867%" y="117" width="0.1793%" height="15" fill="rgb(221,193,54)"/><text x="16.1367%" y="127.50"></text></g><g><title>item_attrs (206,863 samples, 0.11%)</title><rect x="16.4699%" y="85" width="0.1056%" height="15" fill="rgb(248,212,6)"/><text x="16.7199%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (197,752 samples, 0.10%)</title><rect x="16.4746%" y="69" width="0.1010%" height="15" fill="rgb(208,68,35)"/><text x="16.7246%" y="79.50"></text></g><g><title>codegen_fn_attrs (308,784 samples, 0.16%)</title><rect x="16.4280%" y="101" width="0.1576%" height="15" fill="rgb(232,128,0)"/><text x="16.6780%" y="111.50"></text></g><g><title>is_copy_raw (312,804 samples, 0.16%)</title><rect x="18.3472%" y="85" width="0.1597%" height="15" fill="rgb(207,160,47)"/><text x="18.5972%" y="95.50"></text></g><g><title>evaluate_obligation (250,444 samples, 0.13%)</title><rect x="18.3791%" y="69" width="0.1279%" height="15" fill="rgb(228,23,34)"/><text x="18.6291%" y="79.50"></text></g><g><title>is_copy_raw (1,355,267 samples, 0.69%)</title><rect x="18.6627%" y="69" width="0.6919%" height="15" fill="rgb(218,30,26)"/><text x="18.9127%" y="79.50"></text></g><g><title>evaluate_obligation (1,157,533 samples, 0.59%)</title><rect x="18.7636%" y="53" width="0.5909%" height="15" fill="rgb(220,122,19)"/><text x="19.0136%" y="63.50"></text></g><g><title>needs_drop_raw (1,693,081 samples, 0.86%)</title><rect x="18.5078%" y="85" width="0.8643%" height="15" fill="rgb(250,228,42)"/><text x="18.7578%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (1,098,311 samples, 0.56%)</title><rect x="19.5417%" y="69" width="0.5607%" height="15" fill="rgb(240,193,28)"/><text x="19.7917%" y="79.50"></text></g><g><title>impl_parent (349,275 samples, 0.18%)</title><rect x="20.4415%" y="53" width="0.1783%" height="15" fill="rgb(216,20,37)"/><text x="20.6915%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (230,494 samples, 0.12%)</title><rect x="20.5021%" y="37" width="0.1177%" height="15" fill="rgb(206,188,39)"/><text x="20.7521%" y="47.50"></text></g><g><title>specialization_graph_of (1,645,198 samples, 0.84%)</title><rect x="20.1353%" y="69" width="0.8399%" height="15" fill="rgb(217,207,13)"/><text x="20.3853%" y="79.50"></text></g><g><title>impl_trait_ref (696,094 samples, 0.36%)</title><rect x="20.6198%" y="53" width="0.3554%" height="15" fill="rgb(231,73,38)"/><text x="20.8698%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (583,243 samples, 0.30%)</title><rect x="20.6774%" y="37" width="0.2977%" height="15" fill="rgb(225,20,46)"/><text x="20.9274%" y="47.50"></text></g><g><title>resolve_instance (3,252,326 samples, 1.66%)</title><rect x="19.3721%" y="85" width="1.6603%" height="15" fill="rgb(210,31,41)"/><text x="19.6221%" y="95.50"></text></g><g><title>thir_body (1,302,236 samples, 0.66%)</title><rect x="21.0502%" y="85" width="0.6648%" height="15" fill="rgb(221,200,47)"/><text x="21.3002%" y="95.50"></text></g><g><title>mir_const (12,809,837 samples, 6.54%)</title><rect x="15.2370%" y="133" width="6.5395%" height="15" fill="rgb(226,26,5)"/><text x="15.4870%" y="143.50">mir_const</text></g><g><title>unsafety_check_result (11,186,057 samples, 5.71%)</title><rect x="16.0660%" y="117" width="5.7105%" height="15" fill="rgb(249,33,26)"/><text x="16.3160%" y="127.50">unsafet..</text></g><g><title>mir_built (10,168,103 samples, 5.19%)</title><rect x="16.5857%" y="101" width="5.1909%" height="15" fill="rgb(235,183,28)"/><text x="16.8357%" y="111.50">mir_bu..</text></g><g><title>mir_promoted (13,765,662 samples, 7.03%)</title><rect x="14.7718%" y="149" width="7.0274%" height="15" fill="rgb(221,5,38)"/><text x="15.0218%" y="159.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (415,574 samples, 0.21%)</title><rect x="21.7992%" y="149" width="0.2122%" height="15" fill="rgb(247,18,42)"/><text x="22.0492%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,271,698 samples, 1.16%)</title><rect x="22.0114%" y="149" width="1.1597%" height="15" fill="rgb(241,131,45)"/><text x="22.2614%" y="159.50"></text></g><g><title>normalize_projection_ty (1,280,511 samples, 0.65%)</title><rect x="22.5174%" y="133" width="0.6537%" height="15" fill="rgb(249,31,29)"/><text x="22.7674%" y="143.50"></text></g><g><title>type_op_normalize_predicate (682,127 samples, 0.35%)</title><rect x="23.1711%" y="149" width="0.3482%" height="15" fill="rgb(225,111,53)"/><text x="23.4211%" y="159.50"></text></g><g><title>type_op_normalize_ty (724,037 samples, 0.37%)</title><rect x="23.5193%" y="149" width="0.3696%" height="15" fill="rgb(238,160,17)"/><text x="23.7693%" y="159.50"></text></g><g><title>normalize_projection_ty (199,532 samples, 0.10%)</title><rect x="23.7871%" y="133" width="0.1019%" height="15" fill="rgb(214,148,48)"/><text x="24.0371%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,955,168 samples, 2.53%)</title><rect x="23.8889%" y="149" width="2.5296%" height="15" fill="rgb(232,36,49)"/><text x="24.1389%" y="159.50">ty..</text></g><g><title>MIR_borrow_checking (41,812,354 samples, 21.35%)</title><rect x="5.0739%" y="181" width="21.3454%" height="15" fill="rgb(209,103,24)"/><text x="5.3239%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (41,674,853 samples, 21.28%)</title><rect x="5.1441%" y="165" width="21.2752%" height="15" fill="rgb(229,88,8)"/><text x="5.3941%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (211,163 samples, 0.11%)</title><rect x="26.4382%" y="181" width="0.1078%" height="15" fill="rgb(213,181,19)"/><text x="26.6882%" y="191.50"></text></g><g><title>codegen_fn_attrs (280,262 samples, 0.14%)</title><rect x="26.6872%" y="149" width="0.1431%" height="15" fill="rgb(254,191,54)"/><text x="26.9372%" y="159.50"></text></g><g><title>should_inherit_track_caller (229,192 samples, 0.12%)</title><rect x="26.7133%" y="133" width="0.1170%" height="15" fill="rgb(241,83,37)"/><text x="26.9633%" y="143.50"></text></g><g><title>check_mod_attrs (527,505 samples, 0.27%)</title><rect x="26.5610%" y="165" width="0.2693%" height="15" fill="rgb(233,36,39)"/><text x="26.8110%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (415,197 samples, 0.21%)</title><rect x="26.9519%" y="165" width="0.2120%" height="15" fill="rgb(226,3,54)"/><text x="27.2019%" y="175.50"></text></g><g><title>misc_checking_1 (1,290,954 samples, 0.66%)</title><rect x="26.5462%" y="181" width="0.6590%" height="15" fill="rgb(245,192,40)"/><text x="26.7962%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (591,456 samples, 0.30%)</title><rect x="27.2060%" y="165" width="0.3019%" height="15" fill="rgb(238,167,29)"/><text x="27.4560%" y="175.50"></text></g><g><title>check_mod_liveness (473,166 samples, 0.24%)</title><rect x="27.2664%" y="149" width="0.2416%" height="15" fill="rgb(232,182,51)"/><text x="27.5164%" y="159.50"></text></g><g><title>misc_checking_2 (1,236,913 samples, 0.63%)</title><rect x="27.2053%" y="181" width="0.6315%" height="15" fill="rgb(231,60,39)"/><text x="27.4553%" y="191.50"></text></g><g><title>match_checking (643,927 samples, 0.33%)</title><rect x="27.5080%" y="165" width="0.3287%" height="15" fill="rgb(208,69,12)"/><text x="27.7580%" y="175.50"></text></g><g><title>check_match (608,117 samples, 0.31%)</title><rect x="27.5263%" y="149" width="0.3104%" height="15" fill="rgb(235,93,37)"/><text x="27.7763%" y="159.50"></text></g><g><title>check_private_in_public (318,344 samples, 0.16%)</title><rect x="27.8411%" y="165" width="0.1625%" height="15" fill="rgb(213,116,39)"/><text x="28.0911%" y="175.50"></text></g><g><title>death_checking (637,526 samples, 0.33%)</title><rect x="28.0037%" y="165" width="0.3255%" height="15" fill="rgb(222,207,29)"/><text x="28.2537%" y="175.50"></text></g><g><title>param_env (854,537 samples, 0.44%)</title><rect x="28.7814%" y="133" width="0.4362%" height="15" fill="rgb(206,96,30)"/><text x="29.0314%" y="143.50"></text></g><g><title>predicates_of (378,513 samples, 0.19%)</title><rect x="29.0244%" y="117" width="0.1932%" height="15" fill="rgb(218,138,4)"/><text x="29.2744%" y="127.50"></text></g><g><title>predicates_defined_on (305,632 samples, 0.16%)</title><rect x="29.0617%" y="101" width="0.1560%" height="15" fill="rgb(250,191,14)"/><text x="29.3117%" y="111.50"></text></g><g><title>crate_lints (2,860,380 samples, 1.46%)</title><rect x="28.3299%" y="149" width="1.4602%" height="15" fill="rgb(239,60,40)"/><text x="28.5799%" y="159.50"></text></g><g><title>type_of (1,115,302 samples, 0.57%)</title><rect x="29.2208%" y="133" width="0.5694%" height="15" fill="rgb(206,27,48)"/><text x="29.4708%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (879,598 samples, 0.45%)</title><rect x="29.3411%" y="117" width="0.4490%" height="15" fill="rgb(225,35,8)"/><text x="29.5911%" y="127.50"></text></g><g><title>lint_checking (3,380,476 samples, 1.73%)</title><rect x="28.3291%" y="165" width="1.7258%" height="15" fill="rgb(250,213,24)"/><text x="28.5791%" y="175.50"></text></g><g><title>module_lints (518,586 samples, 0.26%)</title><rect x="29.7901%" y="149" width="0.2647%" height="15" fill="rgb(247,123,22)"/><text x="30.0401%" y="159.50"></text></g><g><title>lint_mod (509,756 samples, 0.26%)</title><rect x="29.7946%" y="133" width="0.2602%" height="15" fill="rgb(231,138,38)"/><text x="30.0446%" y="143.50"></text></g><g><title>privacy_access_levels (311,693 samples, 0.16%)</title><rect x="30.0549%" y="165" width="0.1591%" height="15" fill="rgb(231,145,46)"/><text x="30.3049%" y="175.50"></text></g><g><title>privacy_checking_modules (1,319,274 samples, 0.67%)</title><rect x="30.2140%" y="165" width="0.6735%" height="15" fill="rgb(251,118,11)"/><text x="30.4640%" y="175.50"></text></g><g><title>check_mod_privacy (1,310,114 samples, 0.67%)</title><rect x="30.2187%" y="149" width="0.6688%" height="15" fill="rgb(217,147,25)"/><text x="30.4687%" y="159.50"></text></g><g><title>misc_checking_3 (5,988,684 samples, 3.06%)</title><rect x="27.8367%" y="181" width="3.0573%" height="15" fill="rgb(247,81,37)"/><text x="28.0867%" y="191.50">mis..</text></g><g><title>adt_destructor (302,383 samples, 0.15%)</title><rect x="30.9729%" y="133" width="0.1544%" height="15" fill="rgb(209,12,38)"/><text x="31.2229%" y="143.50"></text></g><g><title>coherent_trait (299,483 samples, 0.15%)</title><rect x="30.9743%" y="117" width="0.1529%" height="15" fill="rgb(227,1,9)"/><text x="31.2243%" y="127.50"></text></g><g><title>specialization_graph_of (298,543 samples, 0.15%)</title><rect x="30.9748%" y="101" width="0.1524%" height="15" fill="rgb(248,47,43)"/><text x="31.2248%" y="111.50"></text></g><g><title>impl_parent (1,879,259 samples, 0.96%)</title><rect x="32.3917%" y="117" width="0.9594%" height="15" fill="rgb(221,10,30)"/><text x="32.6417%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,000,426 samples, 0.51%)</title><rect x="32.8403%" y="101" width="0.5107%" height="15" fill="rgb(210,229,1)"/><text x="33.0903%" y="111.50"></text></g><g><title>impl_trait_ref (4,337,891 samples, 2.21%)</title><rect x="33.3510%" y="117" width="2.2145%" height="15" fill="rgb(222,148,37)"/><text x="33.6010%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,679,929 samples, 1.88%)</title><rect x="33.6869%" y="101" width="1.8786%" height="15" fill="rgb(234,67,33)"/><text x="33.9369%" y="111.50">m..</text></g><g><title>coherent_trait (9,530,552 samples, 4.87%)</title><rect x="30.9586%" y="149" width="4.8654%" height="15" fill="rgb(247,98,35)"/><text x="31.2086%" y="159.50">cohere..</text></g><g><title>specialization_graph_of (9,143,008 samples, 4.67%)</title><rect x="31.1564%" y="133" width="4.6676%" height="15" fill="rgb(247,138,52)"/><text x="31.4064%" y="143.50">speci..</text></g><g><title>trait_impls_of (504,724 samples, 0.26%)</title><rect x="35.5663%" y="117" width="0.2577%" height="15" fill="rgb(213,79,30)"/><text x="35.8163%" y="127.50"></text></g><g><title>coherence_checking (9,604,813 samples, 4.90%)</title><rect x="30.9516%" y="165" width="4.9033%" height="15" fill="rgb(246,177,23)"/><text x="31.2016%" y="175.50">cohere..</text></g><g><title>associated_items (245,771 samples, 0.13%)</title><rect x="49.6762%" y="117" width="0.1255%" height="15" fill="rgb(230,62,27)"/><text x="49.9262%" y="127.50"></text></g><g><title>dropck_outlives (604,435 samples, 0.31%)</title><rect x="49.8338%" y="117" width="0.3086%" height="15" fill="rgb(216,154,8)"/><text x="50.0838%" y="127.50"></text></g><g><title>generics_of (238,803 samples, 0.12%)</title><rect x="51.2949%" y="101" width="0.1219%" height="15" fill="rgb(244,35,45)"/><text x="51.5449%" y="111.50"></text></g><g><title>impl_trait_ref (299,683 samples, 0.15%)</title><rect x="51.4479%" y="101" width="0.1530%" height="15" fill="rgb(251,115,12)"/><text x="51.6979%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (243,142 samples, 0.12%)</title><rect x="51.4767%" y="85" width="0.1241%" height="15" fill="rgb(240,54,50)"/><text x="51.7267%" y="95.50"></text></g><g><title>specializes (313,923 samples, 0.16%)</title><rect x="51.6952%" y="101" width="0.1603%" height="15" fill="rgb(233,84,52)"/><text x="51.9452%" y="111.50"></text></g><g><title>param_env (207,842 samples, 0.11%)</title><rect x="51.7494%" y="85" width="0.1061%" height="15" fill="rgb(207,117,47)"/><text x="51.9994%" y="95.50"></text></g><g><title>trait_impls_of (376,115 samples, 0.19%)</title><rect x="51.8603%" y="101" width="0.1920%" height="15" fill="rgb(249,43,39)"/><text x="52.1103%" y="111.50"></text></g><g><title>evaluate_obligation (3,752,308 samples, 1.92%)</title><rect x="50.1424%" y="117" width="1.9156%" height="15" fill="rgb(209,38,44)"/><text x="50.3924%" y="127.50">e..</text></g><g><title>impl_trait_ref (213,083 samples, 0.11%)</title><rect x="52.3194%" y="117" width="0.1088%" height="15" fill="rgb(236,212,23)"/><text x="52.5694%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (199,942 samples, 0.10%)</title><rect x="52.3261%" y="101" width="0.1021%" height="15" fill="rgb(242,79,21)"/><text x="52.5761%" y="111.50"></text></g><g><title>evaluate_obligation (304,244 samples, 0.16%)</title><rect x="52.7690%" y="101" width="0.1553%" height="15" fill="rgb(211,96,35)"/><text x="53.0190%" y="111.50"></text></g><g><title>method_autoderef_steps (800,819 samples, 0.41%)</title><rect x="52.5202%" y="117" width="0.4088%" height="15" fill="rgb(253,215,40)"/><text x="52.7702%" y="127.50"></text></g><g><title>predicates_of (350,291 samples, 0.18%)</title><rect x="52.9502%" y="117" width="0.1788%" height="15" fill="rgb(211,81,21)"/><text x="53.2002%" y="127.50"></text></g><g><title>predicates_defined_on (236,791 samples, 0.12%)</title><rect x="53.0082%" y="101" width="0.1209%" height="15" fill="rgb(208,190,38)"/><text x="53.2582%" y="111.50"></text></g><g><title>associated_items (237,943 samples, 0.12%)</title><rect x="58.7364%" y="101" width="0.1215%" height="15" fill="rgb(235,213,38)"/><text x="58.9864%" y="111.50"></text></g><g><title>trait_impls_of (363,643 samples, 0.19%)</title><rect x="59.5315%" y="85" width="0.1856%" height="15" fill="rgb(237,122,38)"/><text x="59.7815%" y="95.50"></text></g><g><title>evaluate_obligation (1,472,213 samples, 0.75%)</title><rect x="58.9660%" y="101" width="0.7516%" height="15" fill="rgb(244,218,35)"/><text x="59.2160%" y="111.50"></text></g><g><title>method_autoderef_steps (234,893 samples, 0.12%)</title><rect x="59.8955%" y="101" width="0.1199%" height="15" fill="rgb(240,68,47)"/><text x="60.1455%" y="111.50"></text></g><g><title>typeck (13,608,825 samples, 6.95%)</title><rect x="53.1905%" y="117" width="6.9474%" height="15" fill="rgb(210,16,53)"/><text x="53.4405%" y="127.50">typeck</text></g><g><title>item_bodies_checking (47,566,646 samples, 24.28%)</title><rect x="35.8758%" y="165" width="24.2830%" height="15" fill="rgb(235,124,12)"/><text x="36.1258%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (47,564,576 samples, 24.28%)</title><rect x="35.8768%" y="149" width="24.2820%" height="15" fill="rgb(224,169,11)"/><text x="36.1268%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (47,479,306 samples, 24.24%)</title><rect x="35.9203%" y="133" width="24.2384%" height="15" fill="rgb(250,166,2)"/><text x="36.1703%" y="143.50">typeck</text></g><g><title>item_types_checking (2,132,462 samples, 1.09%)</title><rect x="60.1588%" y="165" width="1.0886%" height="15" fill="rgb(242,216,29)"/><text x="60.4088%" y="175.50"></text></g><g><title>check_mod_item_types (2,121,972 samples, 1.08%)</title><rect x="60.1641%" y="149" width="1.0833%" height="15" fill="rgb(230,116,27)"/><text x="60.4141%" y="159.50"></text></g><g><title>fn_sig (334,342 samples, 0.17%)</title><rect x="61.4169%" y="133" width="0.1707%" height="15" fill="rgb(228,99,48)"/><text x="61.6669%" y="143.50"></text></g><g><title>named_region_map (300,343 samples, 0.15%)</title><rect x="61.6520%" y="117" width="0.1533%" height="15" fill="rgb(253,11,6)"/><text x="61.9020%" y="127.50"></text></g><g><title>resolve_lifetimes (278,303 samples, 0.14%)</title><rect x="61.6633%" y="101" width="0.1421%" height="15" fill="rgb(247,143,39)"/><text x="61.9133%" y="111.50"></text></g><g><title>generics_of (441,557 samples, 0.23%)</title><rect x="61.5875%" y="133" width="0.2254%" height="15" fill="rgb(236,97,10)"/><text x="61.8375%" y="143.50"></text></g><g><title>late_bound_vars_map (302,165 samples, 0.15%)</title><rect x="62.1099%" y="85" width="0.1543%" height="15" fill="rgb(233,208,19)"/><text x="62.3599%" y="95.50"></text></g><g><title>resolve_lifetimes (283,213 samples, 0.14%)</title><rect x="62.1196%" y="69" width="0.1446%" height="15" fill="rgb(216,164,2)"/><text x="62.3696%" y="79.50"></text></g><g><title>explicit_predicates_of (657,270 samples, 0.34%)</title><rect x="61.9624%" y="101" width="0.3355%" height="15" fill="rgb(220,129,5)"/><text x="62.2124%" y="111.50"></text></g><g><title>predicates_of (1,243,255 samples, 0.63%)</title><rect x="61.8893%" y="133" width="0.6347%" height="15" fill="rgb(242,17,10)"/><text x="62.1393%" y="143.50"></text></g><g><title>predicates_defined_on (1,188,565 samples, 0.61%)</title><rect x="61.9173%" y="117" width="0.6068%" height="15" fill="rgb(242,107,0)"/><text x="62.1673%" y="127.50"></text></g><g><title>inferred_outlives_of (442,985 samples, 0.23%)</title><rect x="62.2979%" y="101" width="0.2261%" height="15" fill="rgb(251,28,31)"/><text x="62.5479%" y="111.50"></text></g><g><title>inferred_outlives_crate (423,374 samples, 0.22%)</title><rect x="62.3079%" y="85" width="0.2161%" height="15" fill="rgb(233,223,10)"/><text x="62.5579%" y="95.50"></text></g><g><title>type_of (336,034 samples, 0.17%)</title><rect x="62.3525%" y="69" width="0.1715%" height="15" fill="rgb(215,21,27)"/><text x="62.6025%" y="79.50"></text></g><g><title>type_param_predicates (217,583 samples, 0.11%)</title><rect x="62.4130%" y="53" width="0.1111%" height="15" fill="rgb(232,23,21)"/><text x="62.6630%" y="63.50"></text></g><g><title>type_param_predicates (204,603 samples, 0.10%)</title><rect x="62.4196%" y="37" width="0.1045%" height="15" fill="rgb(244,5,23)"/><text x="62.6696%" y="47.50"></text></g><g><title>type_collecting (2,681,438 samples, 1.37%)</title><rect x="61.2523%" y="165" width="1.3689%" height="15" fill="rgb(226,81,46)"/><text x="61.5023%" y="175.50"></text></g><g><title>collect_mod_item_types (2,662,318 samples, 1.36%)</title><rect x="61.2621%" y="149" width="1.3591%" height="15" fill="rgb(247,70,30)"/><text x="61.5121%" y="159.50"></text></g><g><title>evaluate_obligation (558,334 samples, 0.29%)</title><rect x="64.2897%" y="133" width="0.2850%" height="15" fill="rgb(212,68,19)"/><text x="64.5397%" y="143.50"></text></g><g><title>implied_outlives_bounds (398,628 samples, 0.20%)</title><rect x="64.5841%" y="133" width="0.2035%" height="15" fill="rgb(240,187,13)"/><text x="64.8341%" y="143.50"></text></g><g><title>param_env (464,246 samples, 0.24%)</title><rect x="64.7876%" y="133" width="0.2370%" height="15" fill="rgb(223,113,26)"/><text x="65.0376%" y="143.50"></text></g><g><title>check_impl_item_well_formed (4,810,103 samples, 2.46%)</title><rect x="62.7719%" y="149" width="2.4556%" height="15" fill="rgb(206,192,2)"/><text x="63.0219%" y="159.50">ch..</text></g><g><title>region_scope_tree (376,454 samples, 0.19%)</title><rect x="65.0353%" y="133" width="0.1922%" height="15" fill="rgb(241,108,4)"/><text x="65.2853%" y="143.50"></text></g><g><title>param_env (462,014 samples, 0.24%)</title><rect x="66.7032%" y="133" width="0.2359%" height="15" fill="rgb(247,173,49)"/><text x="66.9532%" y="143.50"></text></g><g><title>check_item_well_formed (3,652,978 samples, 1.86%)</title><rect x="65.2275%" y="149" width="1.8649%" height="15" fill="rgb(224,114,35)"/><text x="65.4775%" y="159.50">c..</text></g><g><title>evaluate_obligation (206,553 samples, 0.11%)</title><rect x="67.4887%" y="133" width="0.1054%" height="15" fill="rgb(245,159,27)"/><text x="67.7387%" y="143.50"></text></g><g><title>analysis (123,223,829 samples, 62.91%)</title><rect x="4.8947%" y="197" width="62.9064%" height="15" fill="rgb(245,172,44)"/><text x="5.1447%" y="207.50">analysis</text></g><g><title>type_check_crate (72,295,388 samples, 36.91%)</title><rect x="30.8940%" y="181" width="36.9072%" height="15" fill="rgb(236,23,11)"/><text x="31.1440%" y="191.50">type_check_crate</text></g><g><title>wf_checking (10,141,797 samples, 5.18%)</title><rect x="62.6237%" y="165" width="5.1774%" height="15" fill="rgb(205,117,38)"/><text x="62.8737%" y="175.50">wf_che..</text></g><g><title>check_trait_item_well_formed (1,388,383 samples, 0.71%)</title><rect x="67.0924%" y="149" width="0.7088%" height="15" fill="rgb(237,72,25)"/><text x="67.3424%" y="159.50"></text></g><g><title>fn_abi_of_instance (290,533 samples, 0.15%)</title><rect x="68.3278%" y="165" width="0.1483%" height="15" fill="rgb(244,70,9)"/><text x="68.5778%" y="175.50"></text></g><g><title>codegen_module (848,459 samples, 0.43%)</title><rect x="68.0557%" y="181" width="0.4331%" height="15" fill="rgb(217,125,39)"/><text x="68.3057%" y="191.50"></text></g><g><title>optimized_mir (342,292 samples, 0.17%)</title><rect x="68.5380%" y="133" width="0.1747%" height="15" fill="rgb(235,36,10)"/><text x="68.7880%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (428,355 samples, 0.22%)</title><rect x="68.4954%" y="149" width="0.2187%" height="15" fill="rgb(251,123,47)"/><text x="68.7454%" y="159.50"></text></g><g><title>monomorphization_collector (460,755 samples, 0.24%)</title><rect x="68.4945%" y="165" width="0.2352%" height="15" fill="rgb(221,13,13)"/><text x="68.7445%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (509,506 samples, 0.26%)</title><rect x="68.4891%" y="181" width="0.2601%" height="15" fill="rgb(238,131,9)"/><text x="68.7391%" y="191.50"></text></g><g><title>codegen_crate (1,947,171 samples, 0.99%)</title><rect x="67.8047%" y="197" width="0.9940%" height="15" fill="rgb(211,50,8)"/><text x="68.0547%" y="207.50"></text></g><g><title>codegen_module_optimize (4,033,363 samples, 2.06%)</title><rect x="68.7987%" y="197" width="2.0591%" height="15" fill="rgb(245,182,24)"/><text x="69.0487%" y="207.50">c..</text></g><g><title>LLVM_module_optimize (1,623,807 samples, 0.83%)</title><rect x="70.0288%" y="181" width="0.8290%" height="15" fill="rgb(242,14,37)"/><text x="70.2788%" y="191.50"></text></g><g><title>LLVM_lto_optimize (1,186,633 samples, 0.61%)</title><rect x="70.9895%" y="181" width="0.6058%" height="15" fill="rgb(246,228,12)"/><text x="71.2395%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,873,941 samples, 1.47%)</title><rect x="71.5953%" y="181" width="1.4672%" height="15" fill="rgb(213,55,15)"/><text x="71.8453%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,826,350 samples, 1.44%)</title><rect x="71.6196%" y="165" width="1.4429%" height="15" fill="rgb(209,9,3)"/><text x="71.8696%" y="175.50"></text></g><g><title>codegen_module_perform_lto (4,354,306 samples, 2.22%)</title><rect x="70.8578%" y="197" width="2.2229%" height="15" fill="rgb(230,59,30)"/><text x="71.1078%" y="207.50">c..</text></g><g><title>metadata_register_crate (1,673,137 samples, 0.85%)</title><rect x="82.7434%" y="149" width="0.8541%" height="15" fill="rgb(209,121,21)"/><text x="82.9934%" y="159.50"></text></g><g><title>metadata_register_crate (670,828 samples, 0.34%)</title><rect x="83.2551%" y="133" width="0.3425%" height="15" fill="rgb(220,109,13)"/><text x="83.5051%" y="143.50"></text></g><g><title>macro_expand_crate (20,617,629 samples, 10.53%)</title><rect x="73.2895%" y="181" width="10.5254%" height="15" fill="rgb(232,18,1)"/><text x="73.5395%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (20,608,179 samples, 10.52%)</title><rect x="73.2943%" y="165" width="10.5206%" height="15" fill="rgb(215,41,42)"/><text x="73.5443%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (425,725 samples, 0.22%)</title><rect x="83.5975%" y="149" width="0.2173%" height="15" fill="rgb(224,123,36)"/><text x="83.8475%" y="159.50"></text></g><g><title>late_resolve_crate (1,924,781 samples, 0.98%)</title><rect x="83.9680%" y="165" width="0.9826%" height="15" fill="rgb(240,125,3)"/><text x="84.2180%" y="175.50"></text></g><g><title>configure_and_expand (23,380,078 samples, 11.94%)</title><rect x="73.0807%" y="197" width="11.9356%" height="15" fill="rgb(205,98,50)"/><text x="73.3307%" y="207.50">configure_and_expa..</text></g><g><title>resolve_crate (2,285,434 samples, 1.17%)</title><rect x="83.8496%" y="181" width="1.1667%" height="15" fill="rgb(205,185,37)"/><text x="84.0996%" y="191.50"></text></g><g><title>early_lint_checks (347,114 samples, 0.18%)</title><rect x="85.1234%" y="197" width="0.1772%" height="15" fill="rgb(238,207,15)"/><text x="85.3734%" y="207.50"></text></g><g><title>free_global_ctxt (5,412,567 samples, 2.76%)</title><rect x="85.3006%" y="197" width="2.7631%" height="15" fill="rgb(213,199,42)"/><text x="85.5506%" y="207.50">fr..</text></g><g><title>exported_symbols (217,453 samples, 0.11%)</title><rect x="89.1882%" y="181" width="0.1110%" height="15" fill="rgb(235,201,11)"/><text x="89.4382%" y="191.50"></text></g><g><title>is_sized_raw (442,272 samples, 0.23%)</title><rect x="91.7494%" y="149" width="0.2258%" height="15" fill="rgb(207,46,11)"/><text x="91.9994%" y="159.50"></text></g><g><title>evaluate_obligation (381,202 samples, 0.19%)</title><rect x="91.7806%" y="133" width="0.1946%" height="15" fill="rgb(241,35,35)"/><text x="92.0306%" y="143.50"></text></g><g><title>layout_of (353,754 samples, 0.18%)</title><rect x="91.9752%" y="149" width="0.1806%" height="15" fill="rgb(243,32,47)"/><text x="92.2252%" y="159.50"></text></g><g><title>layout_of (1,597,463 samples, 0.82%)</title><rect x="91.4577%" y="165" width="0.8155%" height="15" fill="rgb(247,202,23)"/><text x="91.7077%" y="175.50"></text></g><g><title>is_copy_raw (619,058 samples, 0.32%)</title><rect x="94.7318%" y="133" width="0.3160%" height="15" fill="rgb(219,102,11)"/><text x="94.9818%" y="143.50"></text></g><g><title>evaluate_obligation (541,348 samples, 0.28%)</title><rect x="94.7715%" y="117" width="0.2764%" height="15" fill="rgb(243,110,44)"/><text x="95.0215%" y="127.50"></text></g><g><title>needs_drop_raw (756,100 samples, 0.39%)</title><rect x="94.7034%" y="149" width="0.3860%" height="15" fill="rgb(222,74,54)"/><text x="94.9534%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,642,845 samples, 2.88%)</title><rect x="92.2732%" y="165" width="2.8807%" height="15" fill="rgb(216,99,12)"/><text x="92.5232%" y="175.50">mi..</text></g><g><title>optimized_mir (11,309,294 samples, 5.77%)</title><rect x="89.3960%" y="181" width="5.7735%" height="15" fill="rgb(226,22,26)"/><text x="89.6460%" y="191.50">optimiz..</text></g><g><title>generate_crate_metadata (13,979,638 samples, 7.14%)</title><rect x="88.0637%" y="197" width="7.1367%" height="15" fill="rgb(217,163,10)"/><text x="88.3137%" y="207.50">generate_c..</text></g><g><title>hir_lowering (3,527,637 samples, 1.80%)</title><rect x="95.2004%" y="197" width="1.8009%" height="15" fill="rgb(213,25,53)"/><text x="95.4504%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (2,432,996 samples, 1.24%)</title><rect x="97.0075%" y="181" width="1.2421%" height="15" fill="rgb(252,105,26)"/><text x="97.2575%" y="191.50"></text></g><g><title>link_crate (989,851 samples, 0.51%)</title><rect x="98.2495%" y="181" width="0.5053%" height="15" fill="rgb(220,39,43)"/><text x="98.4995%" y="191.50"></text></g><g><title>link_binary (975,981 samples, 0.50%)</title><rect x="98.2566%" y="165" width="0.4982%" height="15" fill="rgb(229,68,48)"/><text x="98.5066%" y="175.50"></text></g><g><title>link_rlib (675,917 samples, 0.35%)</title><rect x="98.4098%" y="149" width="0.3451%" height="15" fill="rgb(252,8,32)"/><text x="98.6598%" y="159.50"></text></g><g><title>link (3,441,477 samples, 1.76%)</title><rect x="97.0013%" y="197" width="1.7569%" height="15" fill="rgb(223,20,43)"/><text x="97.2513%" y="207.50"></text></g><g><title>parse_crate (336,773 samples, 0.17%)</title><rect x="98.7582%" y="197" width="0.1719%" height="15" fill="rgb(229,81,49)"/><text x="99.0082%" y="207.50"></text></g><g><title>prepare_outputs (211,322 samples, 0.11%)</title><rect x="98.9336%" y="197" width="0.1079%" height="15" fill="rgb(236,28,36)"/><text x="99.1836%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,355,565 samples, 0.69%)</title><rect x="99.0415%" y="197" width="0.6920%" height="15" fill="rgb(249,185,26)"/><text x="99.2915%" y="207.50"></text></g><g><title>all (195,884,429 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (195,884,429 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (448,195 samples, 0.23%)</title><rect x="99.7712%" y="197" width="0.2288%" height="15" fill="rgb(221,78,26)"/><text x="100.0212%" y="207.50"></text></g></svg></svg>