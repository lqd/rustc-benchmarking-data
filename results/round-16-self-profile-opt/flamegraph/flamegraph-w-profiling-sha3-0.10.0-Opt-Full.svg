<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (44,225,956 samples, 14.02%)</title><rect x="0.2312%" y="197" width="14.0249%" height="15" fill="rgb(227,0,7)"/><text x="0.4812%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (339,264 samples, 0.11%)</title><rect x="14.1485%" y="181" width="0.1076%" height="15" fill="rgb(217,0,24)"/><text x="14.3985%" y="191.50"></text></g><g><title>needs_drop_raw (949,168 samples, 0.30%)</title><rect x="21.8833%" y="85" width="0.3010%" height="15" fill="rgb(221,193,54)"/><text x="22.1333%" y="95.50"></text></g><g><title>is_copy_raw (685,344 samples, 0.22%)</title><rect x="21.9670%" y="69" width="0.2173%" height="15" fill="rgb(248,212,6)"/><text x="22.2170%" y="79.50"></text></g><g><title>evaluate_obligation (577,183 samples, 0.18%)</title><rect x="22.0013%" y="53" width="0.1830%" height="15" fill="rgb(208,68,35)"/><text x="22.2513%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (537,514 samples, 0.17%)</title><rect x="22.2721%" y="69" width="0.1705%" height="15" fill="rgb(232,128,0)"/><text x="22.5221%" y="79.50"></text></g><g><title>specialization_graph_of (1,054,530 samples, 0.33%)</title><rect x="22.4587%" y="69" width="0.3344%" height="15" fill="rgb(207,160,47)"/><text x="22.7087%" y="79.50"></text></g><g><title>impl_trait_ref (437,735 samples, 0.14%)</title><rect x="22.6543%" y="53" width="0.1388%" height="15" fill="rgb(228,23,34)"/><text x="22.9043%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (375,005 samples, 0.12%)</title><rect x="22.6742%" y="37" width="0.1189%" height="15" fill="rgb(218,30,26)"/><text x="22.9242%" y="47.50"></text></g><g><title>resolve_instance (1,970,148 samples, 0.62%)</title><rect x="22.1843%" y="85" width="0.6248%" height="15" fill="rgb(220,122,19)"/><text x="22.4343%" y="95.50"></text></g><g><title>thir_body (1,259,811 samples, 0.40%)</title><rect x="22.8278%" y="85" width="0.3995%" height="15" fill="rgb(250,228,42)"/><text x="23.0778%" y="95.50"></text></g><g><title>mir_const (9,867,703 samples, 3.13%)</title><rect x="20.1077%" y="133" width="3.1292%" height="15" fill="rgb(240,193,28)"/><text x="20.3577%" y="143.50">mir..</text></g><g><title>unsafety_check_result (8,738,802 samples, 2.77%)</title><rect x="20.4657%" y="117" width="2.7712%" height="15" fill="rgb(216,20,37)"/><text x="20.7157%" y="127.50">un..</text></g><g><title>mir_built (7,838,885 samples, 2.49%)</title><rect x="20.7511%" y="101" width="2.4859%" height="15" fill="rgb(206,188,39)"/><text x="21.0011%" y="111.50">mi..</text></g><g><title>mir_promoted (11,023,085 samples, 3.50%)</title><rect x="19.7990%" y="149" width="3.4956%" height="15" fill="rgb(217,207,13)"/><text x="20.0490%" y="159.50">mir..</text></g><g><title>type_op_normalize_fn_sig (1,498,730 samples, 0.48%)</title><rect x="23.3009%" y="149" width="0.4753%" height="15" fill="rgb(231,73,38)"/><text x="23.5509%" y="159.50"></text></g><g><title>normalize_projection_ty (982,066 samples, 0.31%)</title><rect x="23.4647%" y="133" width="0.3114%" height="15" fill="rgb(225,20,46)"/><text x="23.7147%" y="143.50"></text></g><g><title>type_op_normalize_predicate (1,172,426 samples, 0.37%)</title><rect x="23.7761%" y="149" width="0.3718%" height="15" fill="rgb(210,31,41)"/><text x="24.0261%" y="159.50"></text></g><g><title>normalize_projection_ty (962,050 samples, 0.31%)</title><rect x="23.8429%" y="133" width="0.3051%" height="15" fill="rgb(221,200,47)"/><text x="24.0929%" y="143.50"></text></g><g><title>type_op_normalize_ty (555,697 samples, 0.18%)</title><rect x="24.1479%" y="149" width="0.1762%" height="15" fill="rgb(226,26,5)"/><text x="24.3979%" y="159.50"></text></g><g><title>normalize_projection_ty (315,354 samples, 0.10%)</title><rect x="24.2242%" y="133" width="0.1000%" height="15" fill="rgb(249,33,26)"/><text x="24.4742%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,091,919 samples, 1.61%)</title><rect x="24.3242%" y="149" width="1.6147%" height="15" fill="rgb(235,183,28)"/><text x="24.5742%" y="159.50"></text></g><g><title>MIR_borrow_checking (36,531,139 samples, 11.58%)</title><rect x="14.3547%" y="181" width="11.5847%" height="15" fill="rgb(221,5,38)"/><text x="14.6047%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (36,343,238 samples, 11.53%)</title><rect x="14.4143%" y="165" width="11.5251%" height="15" fill="rgb(247,18,42)"/><text x="14.6643%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (435,865 samples, 0.14%)</title><rect x="26.1472%" y="149" width="0.1382%" height="15" fill="rgb(241,131,45)"/><text x="26.3972%" y="159.50"></text></g><g><title>should_inherit_track_caller (360,944 samples, 0.11%)</title><rect x="26.1710%" y="133" width="0.1145%" height="15" fill="rgb(249,31,29)"/><text x="26.4210%" y="143.50"></text></g><g><title>check_mod_attrs (702,049 samples, 0.22%)</title><rect x="26.0629%" y="165" width="0.2226%" height="15" fill="rgb(225,111,53)"/><text x="26.3129%" y="175.50"></text></g><g><title>misc_checking_1 (1,310,075 samples, 0.42%)</title><rect x="26.0567%" y="181" width="0.4154%" height="15" fill="rgb(238,160,17)"/><text x="26.3067%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (495,196 samples, 0.16%)</title><rect x="26.4728%" y="165" width="0.1570%" height="15" fill="rgb(214,148,48)"/><text x="26.7228%" y="175.50"></text></g><g><title>check_mod_liveness (405,095 samples, 0.13%)</title><rect x="26.5013%" y="149" width="0.1285%" height="15" fill="rgb(232,36,49)"/><text x="26.7513%" y="159.50"></text></g><g><title>misc_checking_2 (1,044,752 samples, 0.33%)</title><rect x="26.4722%" y="181" width="0.3313%" height="15" fill="rgb(209,103,24)"/><text x="26.7222%" y="191.50"></text></g><g><title>match_checking (547,706 samples, 0.17%)</title><rect x="26.6298%" y="165" width="0.1737%" height="15" fill="rgb(229,88,8)"/><text x="26.8798%" y="175.50"></text></g><g><title>check_match (505,576 samples, 0.16%)</title><rect x="26.6432%" y="149" width="0.1603%" height="15" fill="rgb(213,181,19)"/><text x="26.8932%" y="159.50"></text></g><g><title>check_private_in_public (322,923 samples, 0.10%)</title><rect x="26.8069%" y="165" width="0.1024%" height="15" fill="rgb(254,191,54)"/><text x="27.0569%" y="175.50"></text></g><g><title>death_checking (548,657 samples, 0.17%)</title><rect x="26.9093%" y="165" width="0.1740%" height="15" fill="rgb(241,83,37)"/><text x="27.1593%" y="175.50"></text></g><g><title>crate_lints (2,461,987 samples, 0.78%)</title><rect x="27.0837%" y="149" width="0.7807%" height="15" fill="rgb(233,36,39)"/><text x="27.3337%" y="159.50"></text></g><g><title>type_of (1,143,344 samples, 0.36%)</title><rect x="27.5019%" y="133" width="0.3626%" height="15" fill="rgb(226,3,54)"/><text x="27.7519%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (905,321 samples, 0.29%)</title><rect x="27.5774%" y="117" width="0.2871%" height="15" fill="rgb(245,192,40)"/><text x="27.8274%" y="127.50"></text></g><g><title>lint_checking (3,084,224 samples, 0.98%)</title><rect x="27.0833%" y="165" width="0.9781%" height="15" fill="rgb(238,167,29)"/><text x="27.3333%" y="175.50"></text></g><g><title>module_lints (620,737 samples, 0.20%)</title><rect x="27.8645%" y="149" width="0.1968%" height="15" fill="rgb(232,182,51)"/><text x="28.1145%" y="159.50"></text></g><g><title>lint_mod (616,827 samples, 0.20%)</title><rect x="27.8657%" y="133" width="0.1956%" height="15" fill="rgb(231,60,39)"/><text x="28.1157%" y="143.50"></text></g><g><title>privacy_access_levels (419,755 samples, 0.13%)</title><rect x="28.0613%" y="165" width="0.1331%" height="15" fill="rgb(208,69,12)"/><text x="28.3113%" y="175.50"></text></g><g><title>privacy_checking_modules (1,535,257 samples, 0.49%)</title><rect x="28.1944%" y="165" width="0.4869%" height="15" fill="rgb(235,93,37)"/><text x="28.4444%" y="175.50"></text></g><g><title>check_mod_privacy (1,532,467 samples, 0.49%)</title><rect x="28.1953%" y="149" width="0.4860%" height="15" fill="rgb(213,116,39)"/><text x="28.4453%" y="159.50"></text></g><g><title>misc_checking_3 (5,935,966 samples, 1.88%)</title><rect x="26.8035%" y="181" width="1.8824%" height="15" fill="rgb(222,207,29)"/><text x="27.0535%" y="191.50">m..</text></g><g><title>impl_parent (1,453,563 samples, 0.46%)</title><rect x="29.3579%" y="117" width="0.4610%" height="15" fill="rgb(206,96,30)"/><text x="29.6079%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (952,197 samples, 0.30%)</title><rect x="29.5169%" y="101" width="0.3020%" height="15" fill="rgb(218,138,4)"/><text x="29.7669%" y="111.50"></text></g><g><title>impl_trait_ref (4,391,234 samples, 1.39%)</title><rect x="29.8189%" y="117" width="1.3925%" height="15" fill="rgb(250,191,14)"/><text x="30.0689%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,670,345 samples, 1.16%)</title><rect x="30.0475%" y="101" width="1.1639%" height="15" fill="rgb(239,60,40)"/><text x="30.2975%" y="111.50"></text></g><g><title>coherent_trait (8,433,743 samples, 2.67%)</title><rect x="28.7186%" y="149" width="2.6745%" height="15" fill="rgb(206,27,48)"/><text x="28.9686%" y="159.50">co..</text></g><g><title>specialization_graph_of (8,407,033 samples, 2.67%)</title><rect x="28.7271%" y="133" width="2.6660%" height="15" fill="rgb(225,35,8)"/><text x="28.9771%" y="143.50">sp..</text></g><g><title>trait_impls_of (571,216 samples, 0.18%)</title><rect x="31.2120%" y="117" width="0.1811%" height="15" fill="rgb(250,213,24)"/><text x="31.4620%" y="127.50"></text></g><g><title>coherence_checking (8,544,515 samples, 2.71%)</title><rect x="28.7132%" y="165" width="2.7096%" height="15" fill="rgb(247,123,22)"/><text x="28.9632%" y="175.50">co..</text></g><g><title>associated_item (438,916 samples, 0.14%)</title><rect x="37.4697%" y="101" width="0.1392%" height="15" fill="rgb(231,138,38)"/><text x="37.7197%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (363,995 samples, 0.12%)</title><rect x="37.4934%" y="85" width="0.1154%" height="15" fill="rgb(231,145,46)"/><text x="37.7434%" y="95.50"></text></g><g><title>associated_items (582,379 samples, 0.18%)</title><rect x="37.4319%" y="117" width="0.1847%" height="15" fill="rgb(251,118,11)"/><text x="37.6819%" y="127.50"></text></g><g><title>dropck_outlives (322,133 samples, 0.10%)</title><rect x="37.6315%" y="117" width="0.1022%" height="15" fill="rgb(217,147,25)"/><text x="37.8815%" y="127.50"></text></g><g><title>mir_borrowck (331,665 samples, 0.11%)</title><rect x="37.9937%" y="37" width="0.1052%" height="15" fill="rgb(247,81,37)"/><text x="38.2437%" y="47.50"></text></g><g><title>mir_for_ctfe (513,287 samples, 0.16%)</title><rect x="37.9365%" y="69" width="0.1628%" height="15" fill="rgb(209,12,38)"/><text x="38.1865%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (445,745 samples, 0.14%)</title><rect x="37.9579%" y="53" width="0.1414%" height="15" fill="rgb(227,1,9)"/><text x="38.2079%" y="63.50"></text></g><g><title>eval_to_const_value_raw (1,184,965 samples, 0.38%)</title><rect x="37.7337%" y="117" width="0.3758%" height="15" fill="rgb(248,47,43)"/><text x="37.9837%" y="127.50"></text></g><g><title>eval_to_const_value_raw (997,053 samples, 0.32%)</title><rect x="37.7933%" y="101" width="0.3162%" height="15" fill="rgb(221,10,30)"/><text x="38.0433%" y="111.50"></text></g><g><title>eval_to_allocation_raw (980,983 samples, 0.31%)</title><rect x="37.7984%" y="85" width="0.3111%" height="15" fill="rgb(210,229,1)"/><text x="38.0484%" y="95.50"></text></g><g><title>mir_for_ctfe (902,912 samples, 0.29%)</title><rect x="38.7697%" y="53" width="0.2863%" height="15" fill="rgb(222,148,37)"/><text x="39.0197%" y="63.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (893,831 samples, 0.28%)</title><rect x="38.7726%" y="37" width="0.2834%" height="15" fill="rgb(234,67,33)"/><text x="39.0226%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,682,657 samples, 0.53%)</title><rect x="38.5318%" y="101" width="0.5336%" height="15" fill="rgb(247,98,35)"/><text x="38.7818%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,655,337 samples, 0.52%)</title><rect x="38.5404%" y="85" width="0.5249%" height="15" fill="rgb(247,138,52)"/><text x="38.7904%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,618,697 samples, 0.51%)</title><rect x="38.5520%" y="69" width="0.5133%" height="15" fill="rgb(213,79,30)"/><text x="38.8020%" y="79.50"></text></g><g><title>trait_impls_of (562,748 samples, 0.18%)</title><rect x="39.2410%" y="101" width="0.1785%" height="15" fill="rgb(246,177,23)"/><text x="39.4910%" y="111.50"></text></g><g><title>evaluate_obligation (4,132,982 samples, 1.31%)</title><rect x="38.1094%" y="117" width="1.3106%" height="15" fill="rgb(230,62,27)"/><text x="38.3594%" y="127.50"></text></g><g><title>evaluate_obligation (922,760 samples, 0.29%)</title><rect x="45.0134%" y="101" width="0.2926%" height="15" fill="rgb(216,154,8)"/><text x="45.2634%" y="111.50"></text></g><g><title>is_copy_raw (1,168,505 samples, 0.37%)</title><rect x="45.3276%" y="101" width="0.3706%" height="15" fill="rgb(244,35,45)"/><text x="45.5776%" y="111.50"></text></g><g><title>evaluate_obligation (1,110,783 samples, 0.35%)</title><rect x="45.3459%" y="85" width="0.3522%" height="15" fill="rgb(251,115,12)"/><text x="45.5959%" y="95.50"></text></g><g><title>method_autoderef_steps (369,756 samples, 0.12%)</title><rect x="45.7859%" y="101" width="0.1173%" height="15" fill="rgb(240,54,50)"/><text x="46.0359%" y="111.50"></text></g><g><title>typeck (18,952,883 samples, 6.01%)</title><rect x="39.9260%" y="117" width="6.0103%" height="15" fill="rgb(233,84,52)"/><text x="40.1760%" y="127.50">typeck</text></g><g><title>item_bodies_checking (45,758,473 samples, 14.51%)</title><rect x="31.4440%" y="165" width="14.5108%" height="15" fill="rgb(207,117,47)"/><text x="31.6940%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (45,754,943 samples, 14.51%)</title><rect x="31.4452%" y="149" width="14.5097%" height="15" fill="rgb(249,43,39)"/><text x="31.6952%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (45,636,661 samples, 14.47%)</title><rect x="31.4827%" y="133" width="14.4722%" height="15" fill="rgb(209,38,44)"/><text x="31.7327%" y="143.50">typeck</text></g><g><title>adt_destructor (364,234 samples, 0.12%)</title><rect x="46.8866%" y="133" width="0.1155%" height="15" fill="rgb(236,212,23)"/><text x="47.1366%" y="143.50"></text></g><g><title>coherent_trait (353,264 samples, 0.11%)</title><rect x="46.8901%" y="117" width="0.1120%" height="15" fill="rgb(242,79,21)"/><text x="47.1401%" y="127.50"></text></g><g><title>specialization_graph_of (350,324 samples, 0.11%)</title><rect x="46.8911%" y="101" width="0.1111%" height="15" fill="rgb(211,96,35)"/><text x="47.1411%" y="111.50"></text></g><g><title>evaluate_obligation (1,706,330 samples, 0.54%)</title><rect x="47.0054%" y="133" width="0.5411%" height="15" fill="rgb(253,215,40)"/><text x="47.2554%" y="143.50"></text></g><g><title>item_types_checking (5,500,281 samples, 1.74%)</title><rect x="45.9549%" y="165" width="1.7442%" height="15" fill="rgb(211,81,21)"/><text x="46.2049%" y="175.50"></text></g><g><title>check_mod_item_types (5,495,521 samples, 1.74%)</title><rect x="45.9564%" y="149" width="1.7427%" height="15" fill="rgb(208,190,38)"/><text x="46.2064%" y="159.50"></text></g><g><title>fn_sig (434,983 samples, 0.14%)</title><rect x="47.8435%" y="133" width="0.1379%" height="15" fill="rgb(235,213,38)"/><text x="48.0935%" y="143.50"></text></g><g><title>named_region_map (440,286 samples, 0.14%)</title><rect x="48.0412%" y="117" width="0.1396%" height="15" fill="rgb(237,122,38)"/><text x="48.2912%" y="127.50"></text></g><g><title>resolve_lifetimes (399,424 samples, 0.13%)</title><rect x="48.0541%" y="101" width="0.1267%" height="15" fill="rgb(244,218,35)"/><text x="48.3041%" y="111.50"></text></g><g><title>generics_of (658,999 samples, 0.21%)</title><rect x="47.9814%" y="133" width="0.2090%" height="15" fill="rgb(240,68,47)"/><text x="48.2314%" y="143.50"></text></g><g><title>predicates_of (566,108 samples, 0.18%)</title><rect x="48.2212%" y="133" width="0.1795%" height="15" fill="rgb(210,16,53)"/><text x="48.4712%" y="143.50"></text></g><g><title>predicates_defined_on (468,846 samples, 0.15%)</title><rect x="48.2521%" y="117" width="0.1487%" height="15" fill="rgb(235,124,12)"/><text x="48.5021%" y="127.50"></text></g><g><title>type_collecting (2,434,657 samples, 0.77%)</title><rect x="47.7001%" y="165" width="0.7721%" height="15" fill="rgb(224,169,11)"/><text x="47.9501%" y="175.50"></text></g><g><title>collect_mod_item_types (2,427,197 samples, 0.77%)</title><rect x="47.7024%" y="149" width="0.7697%" height="15" fill="rgb(250,166,2)"/><text x="47.9524%" y="159.50"></text></g><g><title>evaluate_obligation (1,918,241 samples, 0.61%)</title><rect x="50.3573%" y="133" width="0.6083%" height="15" fill="rgb(242,216,29)"/><text x="50.6073%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,252,273 samples, 0.40%)</title><rect x="50.9863%" y="133" width="0.3971%" height="15" fill="rgb(230,116,27)"/><text x="51.2363%" y="143.50"></text></g><g><title>mir_borrowck (376,824 samples, 0.12%)</title><rect x="51.7096%" y="37" width="0.1195%" height="15" fill="rgb(228,99,48)"/><text x="51.9596%" y="47.50"></text></g><g><title>mir_for_ctfe (513,895 samples, 0.16%)</title><rect x="51.6666%" y="69" width="0.1630%" height="15" fill="rgb(253,11,6)"/><text x="51.9166%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (475,615 samples, 0.15%)</title><rect x="51.6788%" y="53" width="0.1508%" height="15" fill="rgb(247,143,39)"/><text x="51.9288%" y="63.50"></text></g><g><title>evaluate_obligation (1,457,567 samples, 0.46%)</title><rect x="51.9465%" y="53" width="0.4622%" height="15" fill="rgb(236,97,10)"/><text x="52.1965%" y="63.50"></text></g><g><title>eval_to_const_value_raw (2,779,881 samples, 0.88%)</title><rect x="51.5434%" y="117" width="0.8816%" height="15" fill="rgb(233,208,19)"/><text x="51.7934%" y="127.50"></text></g><g><title>eval_to_const_value_raw (2,766,301 samples, 0.88%)</title><rect x="51.5477%" y="101" width="0.8772%" height="15" fill="rgb(216,164,2)"/><text x="51.7977%" y="111.50"></text></g><g><title>eval_to_allocation_raw (2,764,071 samples, 0.88%)</title><rect x="51.5485%" y="85" width="0.8765%" height="15" fill="rgb(220,129,5)"/><text x="51.7985%" y="95.50"></text></g><g><title>typeck (1,674,379 samples, 0.53%)</title><rect x="51.8940%" y="69" width="0.5310%" height="15" fill="rgb(242,17,10)"/><text x="52.1440%" y="79.50"></text></g><g><title>param_env (3,306,459 samples, 1.05%)</title><rect x="51.3836%" y="133" width="1.0485%" height="15" fill="rgb(242,107,0)"/><text x="51.6336%" y="143.50"></text></g><g><title>check_impl_item_well_formed (12,737,546 samples, 4.04%)</title><rect x="48.5815%" y="149" width="4.0393%" height="15" fill="rgb(251,28,31)"/><text x="48.8315%" y="159.50">chec..</text></g><g><title>region_scope_tree (498,875 samples, 0.16%)</title><rect x="52.4626%" y="133" width="0.1582%" height="15" fill="rgb(233,223,10)"/><text x="52.7126%" y="143.50"></text></g><g><title>evaluate_obligation (2,571,669 samples, 0.82%)</title><rect x="54.1938%" y="133" width="0.8155%" height="15" fill="rgb(215,21,27)"/><text x="54.4438%" y="143.50"></text></g><g><title>param_env (569,099 samples, 0.18%)</title><rect x="55.0710%" y="133" width="0.1805%" height="15" fill="rgb(232,23,21)"/><text x="55.3210%" y="143.50"></text></g><g><title>analysis (129,608,281 samples, 41.10%)</title><rect x="14.2561%" y="197" width="41.1011%" height="15" fill="rgb(244,5,23)"/><text x="14.5061%" y="207.50">analysis</text></g><g><title>type_check_crate (84,105,241 samples, 26.67%)</title><rect x="28.6859%" y="181" width="26.6713%" height="15" fill="rgb(226,81,46)"/><text x="28.9359%" y="191.50">type_check_crate</text></g><g><title>wf_checking (21,703,403 samples, 6.88%)</title><rect x="48.4747%" y="165" width="6.8825%" height="15" fill="rgb(247,70,30)"/><text x="48.7247%" y="175.50">wf_checki..</text></g><g><title>check_item_well_formed (8,628,994 samples, 2.74%)</title><rect x="52.6208%" y="149" width="2.7364%" height="15" fill="rgb(212,68,19)"/><text x="52.8708%" y="159.50">ch..</text></g><g><title>fn_abi_of_instance (516,285 samples, 0.16%)</title><rect x="55.8506%" y="165" width="0.1637%" height="15" fill="rgb(240,187,13)"/><text x="56.1006%" y="175.50"></text></g><g><title>codegen_module (1,557,028 samples, 0.49%)</title><rect x="55.5302%" y="181" width="0.4938%" height="15" fill="rgb(223,113,26)"/><text x="55.7802%" y="191.50"></text></g><g><title>optimized_mir (1,217,404 samples, 0.39%)</title><rect x="56.0833%" y="133" width="0.3861%" height="15" fill="rgb(206,192,2)"/><text x="56.3333%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (516,886 samples, 0.16%)</title><rect x="56.3055%" y="117" width="0.1639%" height="15" fill="rgb(241,108,4)"/><text x="56.5555%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,389,175 samples, 0.44%)</title><rect x="56.0296%" y="149" width="0.4405%" height="15" fill="rgb(247,173,49)"/><text x="56.2796%" y="159.50"></text></g><g><title>monomorphization_collector (1,474,996 samples, 0.47%)</title><rect x="56.0289%" y="165" width="0.4677%" height="15" fill="rgb(224,114,35)"/><text x="56.2789%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,569,548 samples, 0.50%)</title><rect x="56.0241%" y="181" width="0.4977%" height="15" fill="rgb(245,159,27)"/><text x="56.2741%" y="191.50"></text></g><g><title>codegen_crate (3,827,653 samples, 1.21%)</title><rect x="55.3604%" y="197" width="1.2138%" height="15" fill="rgb(245,172,44)"/><text x="55.6104%" y="207.50"></text></g><g><title>codegen_module_optimize (12,395,939 samples, 3.93%)</title><rect x="56.5743%" y="197" width="3.9310%" height="15" fill="rgb(236,23,11)"/><text x="56.8243%" y="207.50">code..</text></g><g><title>LLVM_module_optimize (10,300,385 samples, 3.27%)</title><rect x="57.2388%" y="181" width="3.2664%" height="15" fill="rgb(205,117,38)"/><text x="57.4888%" y="191.50">LLV..</text></g><g><title>LLVM_lto_optimize (7,783,667 samples, 2.47%)</title><rect x="60.7544%" y="181" width="2.4683%" height="15" fill="rgb(237,72,25)"/><text x="61.0044%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen (22,375,901 samples, 7.10%)</title><rect x="63.2228%" y="181" width="7.0958%" height="15" fill="rgb(244,70,9)"/><text x="63.4728%" y="191.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (22,301,010 samples, 7.07%)</title><rect x="63.2465%" y="165" width="7.0721%" height="15" fill="rgb(217,125,39)"/><text x="63.4965%" y="175.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (31,134,459 samples, 9.87%)</title><rect x="60.5052%" y="197" width="9.8733%" height="15" fill="rgb(235,36,10)"/><text x="60.7552%" y="207.50">codegen_module..</text></g><g><title>metadata_register_crate (3,133,206 samples, 0.99%)</title><rect x="78.1435%" y="149" width="0.9936%" height="15" fill="rgb(251,123,47)"/><text x="78.3935%" y="159.50"></text></g><g><title>metadata_register_crate (2,064,865 samples, 0.65%)</title><rect x="78.4823%" y="133" width="0.6548%" height="15" fill="rgb(221,13,13)"/><text x="78.7323%" y="143.50"></text></g><g><title>metadata_register_crate (807,600 samples, 0.26%)</title><rect x="78.8810%" y="117" width="0.2561%" height="15" fill="rgb(238,131,9)"/><text x="79.1310%" y="127.50"></text></g><g><title>macro_expand_crate (27,228,565 samples, 8.63%)</title><rect x="70.5483%" y="181" width="8.6347%" height="15" fill="rgb(211,50,8)"/><text x="70.7983%" y="191.50">macro_expand..</text></g><g><title>expand_crate (27,215,355 samples, 8.63%)</title><rect x="70.5525%" y="165" width="8.6305%" height="15" fill="rgb(245,182,24)"/><text x="70.8025%" y="175.50">expand_crate</text></g><g><title>late_resolve_crate (1,599,817 samples, 0.51%)</title><rect x="79.2859%" y="165" width="0.5073%" height="15" fill="rgb(242,14,37)"/><text x="79.5359%" y="175.50"></text></g><g><title>configure_and_expand (29,793,394 samples, 9.45%)</title><rect x="70.3785%" y="197" width="9.4480%" height="15" fill="rgb(246,228,12)"/><text x="70.6285%" y="207.50">configure_and_..</text></g><g><title>resolve_crate (1,914,592 samples, 0.61%)</title><rect x="79.2194%" y="181" width="0.6072%" height="15" fill="rgb(213,55,15)"/><text x="79.4694%" y="191.50"></text></g><g><title>early_lint_checks (374,234 samples, 0.12%)</title><rect x="79.9013%" y="197" width="0.1187%" height="15" fill="rgb(209,9,3)"/><text x="80.1513%" y="207.50"></text></g><g><title>free_global_ctxt (4,031,805 samples, 1.28%)</title><rect x="80.0200%" y="197" width="1.2786%" height="15" fill="rgb(230,59,30)"/><text x="80.2700%" y="207.50"></text></g><g><title>exported_symbols (358,164 samples, 0.11%)</title><rect x="82.0090%" y="181" width="0.1136%" height="15" fill="rgb(209,121,21)"/><text x="82.2590%" y="191.50"></text></g><g><title>is_sized_raw (637,667 samples, 0.20%)</title><rect x="83.4618%" y="149" width="0.2022%" height="15" fill="rgb(220,109,13)"/><text x="83.7118%" y="159.50"></text></g><g><title>evaluate_obligation (602,756 samples, 0.19%)</title><rect x="83.4728%" y="133" width="0.1911%" height="15" fill="rgb(232,18,1)"/><text x="83.7228%" y="143.50"></text></g><g><title>is_sized_raw (840,159 samples, 0.27%)</title><rect x="83.6977%" y="133" width="0.2664%" height="15" fill="rgb(215,41,42)"/><text x="83.9477%" y="143.50"></text></g><g><title>evaluate_obligation (823,129 samples, 0.26%)</title><rect x="83.7031%" y="117" width="0.2610%" height="15" fill="rgb(224,123,36)"/><text x="83.9531%" y="127.50"></text></g><g><title>layout_of (1,348,778 samples, 0.43%)</title><rect x="83.6640%" y="149" width="0.4277%" height="15" fill="rgb(240,125,3)"/><text x="83.9140%" y="159.50"></text></g><g><title>layout_of (2,551,371 samples, 0.81%)</title><rect x="83.2919%" y="165" width="0.8091%" height="15" fill="rgb(205,98,50)"/><text x="83.5419%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,355,794 samples, 1.06%)</title><rect x="84.1010%" y="165" width="1.0642%" height="15" fill="rgb(205,185,37)"/><text x="84.3510%" y="175.50"></text></g><g><title>optimized_mir (9,579,176 samples, 3.04%)</title><rect x="82.1502%" y="181" width="3.0377%" height="15" fill="rgb(238,207,15)"/><text x="82.4002%" y="191.50">opt..</text></g><g><title>generate_crate_metadata (12,340,118 samples, 3.91%)</title><rect x="81.2985%" y="197" width="3.9133%" height="15" fill="rgb(213,199,42)"/><text x="81.5485%" y="207.50">gene..</text></g><g><title>hir_lowering (3,836,403 samples, 1.22%)</title><rect x="85.2118%" y="197" width="1.2166%" height="15" fill="rgb(235,201,11)"/><text x="85.4618%" y="207.50"></text></g><g><title>finish_ongoing_codegen (39,492,703 samples, 12.52%)</title><rect x="86.4356%" y="181" width="12.5239%" height="15" fill="rgb(207,46,11)"/><text x="86.6856%" y="191.50">finish_ongoing_code..</text></g><g><title>link_crate (961,661 samples, 0.30%)</title><rect x="98.9594%" y="181" width="0.3050%" height="15" fill="rgb(241,35,35)"/><text x="99.2094%" y="191.50"></text></g><g><title>link_binary (945,521 samples, 0.30%)</title><rect x="98.9646%" y="165" width="0.2998%" height="15" fill="rgb(243,32,47)"/><text x="99.2146%" y="175.50"></text></g><g><title>link_rlib (653,337 samples, 0.21%)</title><rect x="99.0572%" y="149" width="0.2072%" height="15" fill="rgb(247,202,23)"/><text x="99.3072%" y="159.50"></text></g><g><title>link (40,485,634 samples, 12.84%)</title><rect x="86.4284%" y="197" width="12.8387%" height="15" fill="rgb(219,102,11)"/><text x="86.6784%" y="207.50">link</text></g><g><title>parse_crate (698,898 samples, 0.22%)</title><rect x="99.2671%" y="197" width="0.2216%" height="15" fill="rgb(243,110,44)"/><text x="99.5171%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (920,810 samples, 0.29%)</title><rect x="99.5515%" y="197" width="0.2920%" height="15" fill="rgb(222,74,54)"/><text x="99.8015%" y="207.50"></text></g><g><title>all (315,339,923 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (315,339,923 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (401,744 samples, 0.13%)</title><rect x="99.8726%" y="197" width="0.1274%" height="15" fill="rgb(217,163,10)"/><text x="100.1226%" y="207.50"></text></g></svg></svg>