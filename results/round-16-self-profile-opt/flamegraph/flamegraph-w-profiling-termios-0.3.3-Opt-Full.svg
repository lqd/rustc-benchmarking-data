<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (79,765,349 samples, 17.79%)</title><rect x="0.2276%" y="165" width="17.7912%" height="15" fill="rgb(227,0,7)"/><text x="0.4776%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (559,557 samples, 0.12%)</title><rect x="17.8940%" y="149" width="0.1248%" height="15" fill="rgb(217,0,24)"/><text x="18.1440%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (527,235 samples, 0.12%)</title><rect x="17.9012%" y="133" width="0.1176%" height="15" fill="rgb(221,193,54)"/><text x="18.1512%" y="143.50"></text></g><g><title>mir_const (2,198,223 samples, 0.49%)</title><rect x="20.1711%" y="101" width="0.4903%" height="15" fill="rgb(248,212,6)"/><text x="20.4211%" y="111.50"></text></g><g><title>unsafety_check_result (1,869,380 samples, 0.42%)</title><rect x="20.2444%" y="85" width="0.4170%" height="15" fill="rgb(208,68,35)"/><text x="20.4944%" y="95.50"></text></g><g><title>mir_built (1,714,729 samples, 0.38%)</title><rect x="20.2789%" y="69" width="0.3825%" height="15" fill="rgb(232,128,0)"/><text x="20.5289%" y="79.50"></text></g><g><title>mir_promoted (5,386,853 samples, 1.20%)</title><rect x="20.0130%" y="117" width="1.2015%" height="15" fill="rgb(207,160,47)"/><text x="20.2630%" y="127.50"></text></g><g><title>mir_const_qualif (2,479,901 samples, 0.55%)</title><rect x="20.6614%" y="101" width="0.5531%" height="15" fill="rgb(228,23,34)"/><text x="20.9114%" y="111.50"></text></g><g><title>mir_const (2,055,936 samples, 0.46%)</title><rect x="20.7560%" y="85" width="0.4586%" height="15" fill="rgb(218,30,26)"/><text x="21.0060%" y="95.50"></text></g><g><title>unsafety_check_result (1,481,513 samples, 0.33%)</title><rect x="20.8841%" y="69" width="0.3304%" height="15" fill="rgb(220,122,19)"/><text x="21.1341%" y="79.50"></text></g><g><title>mir_built (1,290,352 samples, 0.29%)</title><rect x="20.9267%" y="53" width="0.2878%" height="15" fill="rgb(250,228,42)"/><text x="21.1767%" y="63.50"></text></g><g><title>MIR_borrow_checking (14,261,509 samples, 3.18%)</title><rect x="18.1278%" y="149" width="3.1809%" height="15" fill="rgb(240,193,28)"/><text x="18.3778%" y="159.50">MIR..</text></g><g><title>mir_borrowck (14,041,548 samples, 3.13%)</title><rect x="18.1769%" y="133" width="3.1319%" height="15" fill="rgb(216,20,37)"/><text x="18.4269%" y="143.50">mir..</text></g><g><title>MIR_effect_checking (1,273,554 samples, 0.28%)</title><rect x="21.3087%" y="149" width="0.2841%" height="15" fill="rgb(206,188,39)"/><text x="21.5587%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,142,282 samples, 0.25%)</title><rect x="21.3380%" y="133" width="0.2548%" height="15" fill="rgb(217,207,13)"/><text x="21.5880%" y="143.50"></text></g><g><title>hir_module_items (485,294 samples, 0.11%)</title><rect x="21.5928%" y="149" width="0.1082%" height="15" fill="rgb(231,73,38)"/><text x="21.8428%" y="159.50"></text></g><g><title>codegen_fn_attrs (575,897 samples, 0.13%)</title><rect x="21.7850%" y="117" width="0.1285%" height="15" fill="rgb(225,20,46)"/><text x="22.0350%" y="127.50"></text></g><g><title>check_mod_attrs (915,431 samples, 0.20%)</title><rect x="21.7093%" y="133" width="0.2042%" height="15" fill="rgb(210,31,41)"/><text x="21.9593%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (802,100 samples, 0.18%)</title><rect x="21.9834%" y="133" width="0.1789%" height="15" fill="rgb(221,200,47)"/><text x="22.2334%" y="143.50"></text></g><g><title>misc_checking_1 (2,296,106 samples, 0.51%)</title><rect x="21.7011%" y="149" width="0.5121%" height="15" fill="rgb(226,26,5)"/><text x="21.9511%" y="159.50"></text></g><g><title>misc_checking_2 (525,186 samples, 0.12%)</title><rect x="22.2133%" y="149" width="0.1171%" height="15" fill="rgb(249,33,26)"/><text x="22.4633%" y="159.50"></text></g><g><title>death_checking (683,047 samples, 0.15%)</title><rect x="22.3778%" y="133" width="0.1523%" height="15" fill="rgb(235,183,28)"/><text x="22.6278%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,334,105 samples, 0.30%)</title><rect x="22.7397%" y="101" width="0.2976%" height="15" fill="rgb(221,5,38)"/><text x="22.9897%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,238,643 samples, 0.28%)</title><rect x="22.7610%" y="85" width="0.2763%" height="15" fill="rgb(247,18,42)"/><text x="23.0110%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,113,182 samples, 0.25%)</title><rect x="22.7890%" y="69" width="0.2483%" height="15" fill="rgb(241,131,45)"/><text x="23.0390%" y="79.50"></text></g><g><title>param_env (696,286 samples, 0.16%)</title><rect x="23.0373%" y="101" width="0.1553%" height="15" fill="rgb(249,31,29)"/><text x="23.2873%" y="111.50"></text></g><g><title>crate_lints (4,057,504 samples, 0.91%)</title><rect x="22.5306%" y="117" width="0.9050%" height="15" fill="rgb(225,111,53)"/><text x="22.7806%" y="127.50"></text></g><g><title>type_of (1,067,842 samples, 0.24%)</title><rect x="23.1975%" y="101" width="0.2382%" height="15" fill="rgb(238,160,17)"/><text x="23.4475%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (836,368 samples, 0.19%)</title><rect x="23.2491%" y="85" width="0.1865%" height="15" fill="rgb(214,148,48)"/><text x="23.4991%" y="95.50"></text></g><g><title>lint_checking (4,299,077 samples, 0.96%)</title><rect x="22.5302%" y="133" width="0.9589%" height="15" fill="rgb(232,36,49)"/><text x="22.7802%" y="143.50"></text></g><g><title>misc_checking_3 (5,760,244 samples, 1.28%)</title><rect x="22.3304%" y="149" width="1.2848%" height="15" fill="rgb(209,103,24)"/><text x="22.5804%" y="159.50"></text></g><g><title>mir_for_ctfe (527,966 samples, 0.12%)</title><rect x="23.8146%" y="53" width="0.1178%" height="15" fill="rgb(229,88,8)"/><text x="24.0646%" y="63.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (488,836 samples, 0.11%)</title><rect x="23.8234%" y="37" width="0.1090%" height="15" fill="rgb(213,181,19)"/><text x="24.0734%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,250,344 samples, 0.28%)</title><rect x="23.7431%" y="101" width="0.2789%" height="15" fill="rgb(254,191,54)"/><text x="23.9931%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,240,844 samples, 0.28%)</title><rect x="23.7452%" y="85" width="0.2768%" height="15" fill="rgb(241,83,37)"/><text x="23.9952%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,238,874 samples, 0.28%)</title><rect x="23.7457%" y="69" width="0.2763%" height="15" fill="rgb(233,36,39)"/><text x="23.9957%" y="79.50"></text></g><g><title>impl_parent (2,748,135 samples, 0.61%)</title><rect x="25.0659%" y="85" width="0.6130%" height="15" fill="rgb(226,3,54)"/><text x="25.3159%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,492,974 samples, 0.33%)</title><rect x="25.3459%" y="69" width="0.3330%" height="15" fill="rgb(245,192,40)"/><text x="25.5959%" y="79.50"></text></g><g><title>impl_trait_ref (5,424,458 samples, 1.21%)</title><rect x="25.6789%" y="85" width="1.2099%" height="15" fill="rgb(238,167,29)"/><text x="25.9289%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,384,537 samples, 0.98%)</title><rect x="25.9108%" y="69" width="0.9779%" height="15" fill="rgb(232,182,51)"/><text x="26.1608%" y="79.50"></text></g><g><title>coherent_trait (15,559,363 samples, 3.47%)</title><rect x="23.6415%" y="117" width="3.4704%" height="15" fill="rgb(231,60,39)"/><text x="23.8915%" y="127.50">coh..</text></g><g><title>specialization_graph_of (13,502,230 samples, 3.01%)</title><rect x="24.1003%" y="101" width="3.0116%" height="15" fill="rgb(208,69,12)"/><text x="24.3503%" y="111.50">spe..</text></g><g><title>trait_impls_of (998,702 samples, 0.22%)</title><rect x="26.8891%" y="85" width="0.2228%" height="15" fill="rgb(235,93,37)"/><text x="27.1391%" y="95.50"></text></g><g><title>coherence_checking (15,661,094 samples, 3.49%)</title><rect x="23.6359%" y="133" width="3.4931%" height="15" fill="rgb(213,116,39)"/><text x="23.8859%" y="143.50">coh..</text></g><g><title>item_bodies_checking (7,169,910 samples, 1.60%)</title><rect x="27.1382%" y="133" width="1.5992%" height="15" fill="rgb(222,207,29)"/><text x="27.3882%" y="143.50"></text></g><g><title>typeck_item_bodies (7,167,330 samples, 1.60%)</title><rect x="27.1387%" y="117" width="1.5986%" height="15" fill="rgb(206,96,30)"/><text x="27.3887%" y="127.50"></text></g><g><title>typeck (7,125,469 samples, 1.59%)</title><rect x="27.1481%" y="101" width="1.5893%" height="15" fill="rgb(218,138,4)"/><text x="27.3981%" y="111.50"></text></g><g><title>item_types_checking (1,604,688 samples, 0.36%)</title><rect x="28.7374%" y="133" width="0.3579%" height="15" fill="rgb(250,191,14)"/><text x="28.9874%" y="143.50"></text></g><g><title>check_mod_item_types (1,600,558 samples, 0.36%)</title><rect x="28.7383%" y="117" width="0.3570%" height="15" fill="rgb(239,60,40)"/><text x="28.9883%" y="127.50"></text></g><g><title>typeck (1,134,523 samples, 0.25%)</title><rect x="28.8422%" y="101" width="0.2530%" height="15" fill="rgb(206,27,48)"/><text x="29.0922%" y="111.50"></text></g><g><title>generics_of (554,348 samples, 0.12%)</title><rect x="29.3074%" y="101" width="0.1236%" height="15" fill="rgb(225,35,8)"/><text x="29.5574%" y="111.50"></text></g><g><title>predicates_of (802,398 samples, 0.18%)</title><rect x="29.4494%" y="101" width="0.1790%" height="15" fill="rgb(250,213,24)"/><text x="29.6994%" y="111.50"></text></g><g><title>predicates_defined_on (667,977 samples, 0.15%)</title><rect x="29.4794%" y="85" width="0.1490%" height="15" fill="rgb(247,123,22)"/><text x="29.7294%" y="95.50"></text></g><g><title>type_collecting (2,579,079 samples, 0.58%)</title><rect x="29.0958%" y="133" width="0.5752%" height="15" fill="rgb(231,138,38)"/><text x="29.3458%" y="143.50"></text></g><g><title>collect_mod_item_types (2,565,219 samples, 0.57%)</title><rect x="29.0989%" y="117" width="0.5722%" height="15" fill="rgb(231,145,46)"/><text x="29.3489%" y="127.50"></text></g><g><title>check_impl_item_well_formed (911,503 samples, 0.20%)</title><rect x="29.7132%" y="117" width="0.2033%" height="15" fill="rgb(251,118,11)"/><text x="29.9632%" y="127.50"></text></g><g><title>param_env (456,277 samples, 0.10%)</title><rect x="30.2317%" y="101" width="0.1018%" height="15" fill="rgb(217,147,25)"/><text x="30.4817%" y="111.50"></text></g><g><title>analysis (55,537,919 samples, 12.39%)</title><rect x="18.0188%" y="165" width="12.3874%" height="15" fill="rgb(247,81,37)"/><text x="18.2688%" y="175.50">analysis</text></g><g><title>type_check_crate (30,446,929 samples, 6.79%)</title><rect x="23.6152%" y="149" width="6.7910%" height="15" fill="rgb(209,12,38)"/><text x="23.8652%" y="159.50">type_chec..</text></g><g><title>wf_checking (3,283,977 samples, 0.73%)</title><rect x="29.6737%" y="133" width="0.7325%" height="15" fill="rgb(227,1,9)"/><text x="29.9237%" y="143.50"></text></g><g><title>check_item_well_formed (2,195,514 samples, 0.49%)</title><rect x="29.9165%" y="117" width="0.4897%" height="15" fill="rgb(248,47,43)"/><text x="30.1665%" y="127.50"></text></g><g><title>layout_of (1,148,243 samples, 0.26%)</title><rect x="32.2183%" y="117" width="0.2561%" height="15" fill="rgb(221,10,30)"/><text x="32.4683%" y="127.50"></text></g><g><title>predicates_of (503,444 samples, 0.11%)</title><rect x="32.5814%" y="101" width="0.1123%" height="15" fill="rgb(210,229,1)"/><text x="32.8314%" y="111.50"></text></g><g><title>param_env (989,078 samples, 0.22%)</title><rect x="32.4744%" y="117" width="0.2206%" height="15" fill="rgb(222,148,37)"/><text x="32.7244%" y="127.50"></text></g><g><title>fn_abi_of_instance (3,628,542 samples, 0.81%)</title><rect x="31.9289%" y="133" width="0.8093%" height="15" fill="rgb(234,67,33)"/><text x="32.1789%" y="143.50"></text></g><g><title>codegen_module (9,296,583 samples, 2.07%)</title><rect x="30.7760%" y="149" width="2.0735%" height="15" fill="rgb(247,98,35)"/><text x="31.0260%" y="159.50">c..</text></g><g><title>codegen_fn_attrs (479,727 samples, 0.11%)</title><rect x="32.9529%" y="101" width="0.1070%" height="15" fill="rgb(247,138,52)"/><text x="33.2029%" y="111.50"></text></g><g><title>optimized_mir (1,955,172 samples, 0.44%)</title><rect x="33.1155%" y="101" width="0.4361%" height="15" fill="rgb(213,79,30)"/><text x="33.3655%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (713,649 samples, 0.16%)</title><rect x="33.3924%" y="85" width="0.1592%" height="15" fill="rgb(246,177,23)"/><text x="33.6424%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (607,037 samples, 0.14%)</title><rect x="33.5911%" y="85" width="0.1354%" height="15" fill="rgb(230,62,27)"/><text x="33.8411%" y="95.50"></text></g><g><title>specialization_graph_of (1,418,667 samples, 0.32%)</title><rect x="33.7871%" y="85" width="0.3164%" height="15" fill="rgb(216,154,8)"/><text x="34.0371%" y="95.50"></text></g><g><title>impl_trait_ref (621,489 samples, 0.14%)</title><rect x="33.9650%" y="69" width="0.1386%" height="15" fill="rgb(244,35,45)"/><text x="34.2150%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (514,396 samples, 0.11%)</title><rect x="33.9888%" y="53" width="0.1147%" height="15" fill="rgb(251,115,12)"/><text x="34.2388%" y="63.50"></text></g><g><title>resolve_instance (2,572,770 samples, 0.57%)</title><rect x="33.5516%" y="101" width="0.5738%" height="15" fill="rgb(240,54,50)"/><text x="33.8016%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (5,980,047 samples, 1.33%)</title><rect x="32.8581%" y="117" width="1.3338%" height="15" fill="rgb(233,84,52)"/><text x="33.1081%" y="127.50"></text></g><g><title>monomorphization_collector (6,050,968 samples, 1.35%)</title><rect x="32.8576%" y="133" width="1.3496%" height="15" fill="rgb(207,117,47)"/><text x="33.1076%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (6,581,943 samples, 1.47%)</title><rect x="32.8500%" y="149" width="1.4681%" height="15" fill="rgb(249,43,39)"/><text x="33.1000%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (496,685 samples, 0.11%)</title><rect x="34.2073%" y="133" width="0.1108%" height="15" fill="rgb(209,38,44)"/><text x="34.4573%" y="143.50"></text></g><g><title>codegen_crate (17,590,036 samples, 3.92%)</title><rect x="30.4087%" y="165" width="3.9234%" height="15" fill="rgb(236,212,23)"/><text x="30.6587%" y="175.50">code..</text></g><g><title>codegen_module_optimize (57,561,321 samples, 12.84%)</title><rect x="34.3320%" y="165" width="12.8387%" height="15" fill="rgb(242,79,21)"/><text x="34.5820%" y="175.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (52,163,001 samples, 11.63%)</title><rect x="35.5361%" y="149" width="11.6346%" height="15" fill="rgb(211,96,35)"/><text x="35.7861%" y="159.50">LLVM_module_optim..</text></g><g><title>LLVM_lto_optimize (43,221,761 samples, 9.64%)</title><rect x="47.9561%" y="149" width="9.6404%" height="15" fill="rgb(253,215,40)"/><text x="48.2061%" y="159.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (72,858,121 samples, 16.25%)</title><rect x="57.5964%" y="149" width="16.2506%" height="15" fill="rgb(211,81,21)"/><text x="57.8464%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (72,160,753 samples, 16.10%)</title><rect x="57.7520%" y="133" width="16.0950%" height="15" fill="rgb(208,190,38)"/><text x="58.0020%" y="143.50">LLVM_module_codegen_emit_..</text></g><g><title>LLVM_thin_lto_import (2,019,502 samples, 0.45%)</title><rect x="73.8470%" y="149" width="0.4504%" height="15" fill="rgb(235,213,38)"/><text x="74.0970%" y="159.50"></text></g><g><title>codegen_module_perform_lto (121,878,705 samples, 27.18%)</title><rect x="47.1707%" y="165" width="27.1843%" height="15" fill="rgb(237,122,38)"/><text x="47.4207%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,681,160 samples, 0.60%)</title><rect x="79.7320%" y="117" width="0.5980%" height="15" fill="rgb(244,218,35)"/><text x="79.9820%" y="127.50"></text></g><g><title>metadata_register_crate (954,492 samples, 0.21%)</title><rect x="80.1172%" y="101" width="0.2129%" height="15" fill="rgb(240,68,47)"/><text x="80.3672%" y="111.50"></text></g><g><title>macro_expand_crate (26,320,614 samples, 5.87%)</title><rect x="74.4923%" y="149" width="5.8707%" height="15" fill="rgb(210,16,53)"/><text x="74.7423%" y="159.50">macro_e..</text></g><g><title>expand_crate (26,292,504 samples, 5.86%)</title><rect x="74.4986%" y="133" width="5.8644%" height="15" fill="rgb(235,124,12)"/><text x="74.7486%" y="143.50">expand_..</text></g><g><title>late_resolve_crate (2,441,777 samples, 0.54%)</title><rect x="80.5396%" y="133" width="0.5446%" height="15" fill="rgb(224,169,11)"/><text x="80.7896%" y="143.50"></text></g><g><title>configure_and_expand (30,393,489 samples, 6.78%)</title><rect x="74.3551%" y="165" width="6.7791%" height="15" fill="rgb(250,166,2)"/><text x="74.6051%" y="175.50">configure..</text></g><g><title>resolve_crate (3,322,877 samples, 0.74%)</title><rect x="80.3930%" y="149" width="0.7411%" height="15" fill="rgb(242,216,29)"/><text x="80.6430%" y="159.50"></text></g><g><title>early_lint_checks (613,547 samples, 0.14%)</title><rect x="81.1924%" y="165" width="0.1368%" height="15" fill="rgb(230,116,27)"/><text x="81.4424%" y="175.50"></text></g><g><title>free_global_ctxt (3,731,011 samples, 0.83%)</title><rect x="81.3292%" y="165" width="0.8322%" height="15" fill="rgb(228,99,48)"/><text x="81.5792%" y="175.50"></text></g><g><title>optimized_mir (1,058,281 samples, 0.24%)</title><rect x="82.5127%" y="149" width="0.2360%" height="15" fill="rgb(253,11,6)"/><text x="82.7627%" y="159.50"></text></g><g><title>generate_crate_metadata (2,684,260 samples, 0.60%)</title><rect x="82.1614%" y="165" width="0.5987%" height="15" fill="rgb(247,143,39)"/><text x="82.4114%" y="175.50"></text></g><g><title>hir_lowering (4,557,431 samples, 1.02%)</title><rect x="82.7601%" y="165" width="1.0165%" height="15" fill="rgb(236,97,10)"/><text x="83.0101%" y="175.50"></text></g><g><title>finish_ongoing_codegen (67,049,037 samples, 14.95%)</title><rect x="83.7799%" y="149" width="14.9549%" height="15" fill="rgb(233,208,19)"/><text x="84.0299%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,043,602 samples, 0.23%)</title><rect x="98.7348%" y="149" width="0.2328%" height="15" fill="rgb(216,164,2)"/><text x="98.9848%" y="159.50"></text></g><g><title>link_binary (1,031,942 samples, 0.23%)</title><rect x="98.7374%" y="133" width="0.2302%" height="15" fill="rgb(220,129,5)"/><text x="98.9874%" y="143.50"></text></g><g><title>link_rlib (719,688 samples, 0.16%)</title><rect x="98.8070%" y="117" width="0.1605%" height="15" fill="rgb(242,17,10)"/><text x="99.0570%" y="127.50"></text></g><g><title>link (68,116,989 samples, 15.19%)</title><rect x="83.7766%" y="165" width="15.1931%" height="15" fill="rgb(242,107,0)"/><text x="84.0266%" y="175.50">link</text></g><g><title>parse_crate (2,450,457 samples, 0.55%)</title><rect x="98.9697%" y="165" width="0.5466%" height="15" fill="rgb(251,28,31)"/><text x="99.2197%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (1,264,924 samples, 0.28%)</title><rect x="99.6064%" y="165" width="0.2821%" height="15" fill="rgb(233,223,10)"/><text x="99.8564%" y="175.50"></text></g><g><title>all (448,341,882 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(215,21,27)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (448,341,882 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(232,23,21)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>