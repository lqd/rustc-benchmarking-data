<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (100,010,867 samples, 10.38%)</title><rect x="0.1072%" y="181" width="10.3758%" height="15" fill="rgb(227,0,7)"/><text x="0.3572%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,471,166 samples, 0.15%)</title><rect x="10.3304%" y="165" width="0.1526%" height="15" fill="rgb(217,0,24)"/><text x="10.5804%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,442,956 samples, 0.15%)</title><rect x="10.3333%" y="149" width="0.1497%" height="15" fill="rgb(221,193,54)"/><text x="10.5833%" y="159.50"></text></g><g><title>is_copy_raw (1,639,218 samples, 0.17%)</title><rect x="15.0665%" y="53" width="0.1701%" height="15" fill="rgb(248,212,6)"/><text x="15.3165%" y="63.50"></text></g><g><title>evaluate_obligation (1,302,053 samples, 0.14%)</title><rect x="15.1014%" y="37" width="0.1351%" height="15" fill="rgb(208,68,35)"/><text x="15.3514%" y="47.50"></text></g><g><title>needs_drop_raw (2,433,920 samples, 0.25%)</title><rect x="14.9845%" y="69" width="0.2525%" height="15" fill="rgb(232,128,0)"/><text x="15.2345%" y="79.50"></text></g><g><title>specialization_graph_of (2,039,083 samples, 0.21%)</title><rect x="15.3009%" y="53" width="0.2115%" height="15" fill="rgb(207,160,47)"/><text x="15.5509%" y="63.50"></text></g><g><title>resolve_instance (2,812,102 samples, 0.29%)</title><rect x="15.2370%" y="69" width="0.2917%" height="15" fill="rgb(228,23,34)"/><text x="15.4870%" y="79.50"></text></g><g><title>thir_body (2,548,208 samples, 0.26%)</title><rect x="15.5308%" y="69" width="0.2644%" height="15" fill="rgb(218,30,26)"/><text x="15.7808%" y="79.50"></text></g><g><title>mir_const (16,332,373 samples, 1.69%)</title><rect x="14.1100%" y="117" width="1.6944%" height="15" fill="rgb(220,122,19)"/><text x="14.3600%" y="127.50"></text></g><g><title>unsafety_check_result (14,809,615 samples, 1.54%)</title><rect x="14.2680%" y="101" width="1.5364%" height="15" fill="rgb(250,228,42)"/><text x="14.5180%" y="111.50"></text></g><g><title>mir_built (13,503,459 samples, 1.40%)</title><rect x="14.4035%" y="85" width="1.4009%" height="15" fill="rgb(240,193,28)"/><text x="14.6535%" y="95.50"></text></g><g><title>mir_const (1,310,165 samples, 0.14%)</title><rect x="15.9088%" y="101" width="0.1359%" height="15" fill="rgb(216,20,37)"/><text x="16.1588%" y="111.50"></text></g><g><title>unsafety_check_result (1,100,391 samples, 0.11%)</title><rect x="15.9306%" y="85" width="0.1142%" height="15" fill="rgb(206,188,39)"/><text x="16.1806%" y="95.50"></text></g><g><title>mir_const_qualif (2,399,586 samples, 0.25%)</title><rect x="15.8044%" y="117" width="0.2489%" height="15" fill="rgb(217,207,13)"/><text x="16.0544%" y="127.50"></text></g><g><title>mir_promoted (20,405,757 samples, 2.12%)</title><rect x="13.9366%" y="133" width="2.1170%" height="15" fill="rgb(231,73,38)"/><text x="14.1866%" y="143.50">m..</text></g><g><title>type_op_ascribe_user_type (1,211,111 samples, 0.13%)</title><rect x="16.0536%" y="133" width="0.1256%" height="15" fill="rgb(225,20,46)"/><text x="16.3036%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,297,765 samples, 0.55%)</title><rect x="16.2896%" y="133" width="0.5496%" height="15" fill="rgb(210,31,41)"/><text x="16.5396%" y="143.50"></text></g><g><title>MIR_borrow_checking (60,727,102 samples, 6.30%)</title><rect x="10.5410%" y="165" width="6.3002%" height="15" fill="rgb(221,200,47)"/><text x="10.7910%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (60,564,092 samples, 6.28%)</title><rect x="10.5579%" y="149" width="6.2833%" height="15" fill="rgb(226,26,5)"/><text x="10.8079%" y="159.50">mir_borr..</text></g><g><title>misc_checking_1 (1,973,822 samples, 0.20%)</title><rect x="16.9527%" y="165" width="0.2048%" height="15" fill="rgb(249,33,26)"/><text x="17.2027%" y="175.50"></text></g><g><title>misc_checking_2 (2,836,882 samples, 0.29%)</title><rect x="17.1575%" y="165" width="0.2943%" height="15" fill="rgb(235,183,28)"/><text x="17.4075%" y="175.50"></text></g><g><title>match_checking (1,877,751 samples, 0.19%)</title><rect x="17.2570%" y="149" width="0.1948%" height="15" fill="rgb(221,5,38)"/><text x="17.5070%" y="159.50"></text></g><g><title>check_match (1,832,991 samples, 0.19%)</title><rect x="17.2616%" y="133" width="0.1902%" height="15" fill="rgb(247,18,42)"/><text x="17.5116%" y="143.50"></text></g><g><title>eval_to_allocation_raw (2,845,693 samples, 0.30%)</title><rect x="17.7394%" y="117" width="0.2952%" height="15" fill="rgb(241,131,45)"/><text x="17.9894%" y="127.50"></text></g><g><title>eval_to_allocation_raw (2,822,733 samples, 0.29%)</title><rect x="17.7418%" y="101" width="0.2928%" height="15" fill="rgb(249,31,29)"/><text x="17.9918%" y="111.50"></text></g><g><title>param_env (1,067,812 samples, 0.11%)</title><rect x="18.0522%" y="117" width="0.1108%" height="15" fill="rgb(225,111,53)"/><text x="18.3022%" y="127.50"></text></g><g><title>crate_lints (6,932,706 samples, 0.72%)</title><rect x="17.5881%" y="133" width="0.7192%" height="15" fill="rgb(238,160,17)"/><text x="17.8381%" y="143.50"></text></g><g><title>type_of (1,277,123 samples, 0.13%)</title><rect x="18.1749%" y="117" width="0.1325%" height="15" fill="rgb(214,148,48)"/><text x="18.4249%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (997,500 samples, 0.10%)</title><rect x="18.2039%" y="101" width="0.1035%" height="15" fill="rgb(232,36,49)"/><text x="18.4539%" y="111.50"></text></g><g><title>lint_checking (8,383,922 samples, 0.87%)</title><rect x="17.5879%" y="149" width="0.8698%" height="15" fill="rgb(209,103,24)"/><text x="17.8379%" y="159.50"></text></g><g><title>module_lints (1,448,816 samples, 0.15%)</title><rect x="18.3074%" y="133" width="0.1503%" height="15" fill="rgb(229,88,8)"/><text x="18.5574%" y="143.50"></text></g><g><title>lint_mod (1,205,884 samples, 0.13%)</title><rect x="18.3326%" y="117" width="0.1251%" height="15" fill="rgb(213,181,19)"/><text x="18.5826%" y="127.50"></text></g><g><title>privacy_checking_modules (2,080,633 samples, 0.22%)</title><rect x="18.5019%" y="149" width="0.2159%" height="15" fill="rgb(254,191,54)"/><text x="18.7519%" y="159.50"></text></g><g><title>check_mod_privacy (2,075,253 samples, 0.22%)</title><rect x="18.5024%" y="133" width="0.2153%" height="15" fill="rgb(241,83,37)"/><text x="18.7524%" y="143.50"></text></g><g><title>misc_checking_3 (12,219,935 samples, 1.27%)</title><rect x="17.4518%" y="165" width="1.2678%" height="15" fill="rgb(233,36,39)"/><text x="17.7018%" y="175.50"></text></g><g><title>impl_parent (1,870,417 samples, 0.19%)</title><rect x="19.0230%" y="101" width="0.1940%" height="15" fill="rgb(226,3,54)"/><text x="19.2730%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,058,823 samples, 0.11%)</title><rect x="19.1072%" y="85" width="0.1098%" height="15" fill="rgb(245,192,40)"/><text x="19.3572%" y="95.50"></text></g><g><title>impl_trait_ref (4,467,396 samples, 0.46%)</title><rect x="19.2171%" y="101" width="0.4635%" height="15" fill="rgb(238,167,29)"/><text x="19.4671%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,865,319 samples, 0.40%)</title><rect x="19.2795%" y="85" width="0.4010%" height="15" fill="rgb(232,182,51)"/><text x="19.5295%" y="95.50"></text></g><g><title>coherent_trait (9,796,119 samples, 1.02%)</title><rect x="18.7363%" y="133" width="1.0163%" height="15" fill="rgb(231,60,39)"/><text x="18.9863%" y="143.50"></text></g><g><title>specialization_graph_of (9,774,769 samples, 1.01%)</title><rect x="18.7385%" y="117" width="1.0141%" height="15" fill="rgb(208,69,12)"/><text x="18.9885%" y="127.50"></text></g><g><title>coherence_checking (9,913,409 samples, 1.03%)</title><rect x="18.7340%" y="149" width="1.0285%" height="15" fill="rgb(235,93,37)"/><text x="18.9840%" y="159.50"></text></g><g><title>dropck_outlives (2,326,587 samples, 0.24%)</title><rect x="25.4548%" y="101" width="0.2414%" height="15" fill="rgb(213,116,39)"/><text x="25.7048%" y="111.50"></text></g><g><title>evaluate_obligation (2,826,698 samples, 0.29%)</title><rect x="25.6962%" y="101" width="0.2933%" height="15" fill="rgb(222,207,29)"/><text x="25.9462%" y="111.50"></text></g><g><title>method_autoderef_steps (1,458,386 samples, 0.15%)</title><rect x="26.1052%" y="101" width="0.1513%" height="15" fill="rgb(206,96,30)"/><text x="26.3552%" y="111.50"></text></g><g><title>typeck (1,661,128 samples, 0.17%)</title><rect x="26.4053%" y="101" width="0.1723%" height="15" fill="rgb(218,138,4)"/><text x="26.6553%" y="111.50"></text></g><g><title>item_bodies_checking (65,700,018 samples, 6.82%)</title><rect x="19.7679%" y="149" width="6.8161%" height="15" fill="rgb(250,191,14)"/><text x="20.0179%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (65,696,218 samples, 6.82%)</title><rect x="19.7683%" y="133" width="6.8157%" height="15" fill="rgb(239,60,40)"/><text x="20.0183%" y="143.50">typeck_it..</text></g><g><title>typeck (65,607,376 samples, 6.81%)</title><rect x="19.7775%" y="117" width="6.8065%" height="15" fill="rgb(206,27,48)"/><text x="20.0275%" y="127.50">typeck</text></g><g><title>item_types_checking (9,348,113 samples, 0.97%)</title><rect x="26.5840%" y="149" width="0.9698%" height="15" fill="rgb(225,35,8)"/><text x="26.8340%" y="159.50"></text></g><g><title>check_mod_item_types (9,339,603 samples, 0.97%)</title><rect x="26.5849%" y="133" width="0.9689%" height="15" fill="rgb(250,213,24)"/><text x="26.8349%" y="143.50"></text></g><g><title>typeck (6,834,216 samples, 0.71%)</title><rect x="26.8448%" y="117" width="0.7090%" height="15" fill="rgb(247,123,22)"/><text x="27.0948%" y="127.50"></text></g><g><title>predicates_of (2,260,794 samples, 0.23%)</title><rect x="27.7160%" y="117" width="0.2345%" height="15" fill="rgb(231,138,38)"/><text x="27.9660%" y="127.50"></text></g><g><title>predicates_defined_on (2,179,172 samples, 0.23%)</title><rect x="27.7245%" y="101" width="0.2261%" height="15" fill="rgb(231,145,46)"/><text x="27.9745%" y="111.50"></text></g><g><title>inferred_outlives_of (1,140,154 samples, 0.12%)</title><rect x="27.8323%" y="85" width="0.1183%" height="15" fill="rgb(251,118,11)"/><text x="28.0823%" y="95.50"></text></g><g><title>inferred_outlives_crate (1,108,033 samples, 0.11%)</title><rect x="27.8356%" y="69" width="0.1150%" height="15" fill="rgb(217,147,25)"/><text x="28.0856%" y="79.50"></text></g><g><title>type_collecting (4,037,805 samples, 0.42%)</title><rect x="27.5550%" y="149" width="0.4189%" height="15" fill="rgb(247,81,37)"/><text x="27.8050%" y="159.50"></text></g><g><title>collect_mod_item_types (4,022,165 samples, 0.42%)</title><rect x="27.5567%" y="133" width="0.4173%" height="15" fill="rgb(209,12,38)"/><text x="27.8067%" y="143.50"></text></g><g><title>evaluate_obligation (970,908 samples, 0.10%)</title><rect x="28.3357%" y="117" width="0.1007%" height="15" fill="rgb(227,1,9)"/><text x="28.5857%" y="127.50"></text></g><g><title>check_impl_item_well_formed (6,237,683 samples, 0.65%)</title><rect x="28.0105%" y="133" width="0.6471%" height="15" fill="rgb(248,47,43)"/><text x="28.2605%" y="143.50"></text></g><g><title>analysis (180,860,281 samples, 18.76%)</title><rect x="10.4830%" y="181" width="18.7636%" height="15" fill="rgb(221,10,30)"/><text x="10.7330%" y="191.50">analysis</text></g><g><title>type_check_crate (101,468,913 samples, 10.53%)</title><rect x="18.7195%" y="165" width="10.5270%" height="15" fill="rgb(210,229,1)"/><text x="18.9695%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,260,126 samples, 1.27%)</title><rect x="27.9746%" y="149" width="1.2719%" height="15" fill="rgb(222,148,37)"/><text x="28.2246%" y="159.50"></text></g><g><title>check_item_well_formed (5,677,070 samples, 0.59%)</title><rect x="28.6576%" y="133" width="0.5890%" height="15" fill="rgb(234,67,33)"/><text x="28.9076%" y="143.50"></text></g><g><title>layout_of (1,595,790 samples, 0.17%)</title><rect x="32.2849%" y="133" width="0.1656%" height="15" fill="rgb(247,98,35)"/><text x="32.5349%" y="143.50"></text></g><g><title>param_env (2,178,596 samples, 0.23%)</title><rect x="32.4505%" y="133" width="0.2260%" height="15" fill="rgb(247,138,52)"/><text x="32.7005%" y="143.50"></text></g><g><title>fn_abi_of_instance (7,629,971 samples, 0.79%)</title><rect x="31.8976%" y="149" width="0.7916%" height="15" fill="rgb(213,79,30)"/><text x="32.1476%" y="159.50"></text></g><g><title>codegen_module (32,639,278 samples, 3.39%)</title><rect x="29.4308%" y="165" width="3.3862%" height="15" fill="rgb(246,177,23)"/><text x="29.6808%" y="175.50">cod..</text></g><g><title>metadata_decode_entry_optimized_mir (1,160,224 samples, 0.12%)</title><rect x="33.1624%" y="101" width="0.1204%" height="15" fill="rgb(230,62,27)"/><text x="33.4124%" y="111.50"></text></g><g><title>optimized_mir (2,555,750 samples, 0.27%)</title><rect x="33.0905%" y="117" width="0.2651%" height="15" fill="rgb(216,154,8)"/><text x="33.3405%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (2,009,551 samples, 0.21%)</title><rect x="33.4063%" y="101" width="0.2085%" height="15" fill="rgb(244,35,45)"/><text x="33.6563%" y="111.50"></text></g><g><title>specialization_graph_of (990,012 samples, 0.10%)</title><rect x="33.6581%" y="101" width="0.1027%" height="15" fill="rgb(251,115,12)"/><text x="33.9081%" y="111.50"></text></g><g><title>resolve_instance (4,149,081 samples, 0.43%)</title><rect x="33.3557%" y="117" width="0.4305%" height="15" fill="rgb(240,54,50)"/><text x="33.6057%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (10,401,605 samples, 1.08%)</title><rect x="32.8219%" y="133" width="1.0791%" height="15" fill="rgb(233,84,52)"/><text x="33.0719%" y="143.50"></text></g><g><title>monomorphization_collector (10,485,936 samples, 1.09%)</title><rect x="32.8216%" y="149" width="1.0879%" height="15" fill="rgb(207,117,47)"/><text x="33.0716%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (1,082,392 samples, 0.11%)</title><rect x="33.9099%" y="133" width="0.1123%" height="15" fill="rgb(249,43,39)"/><text x="34.1599%" y="143.50"></text></g><g><title>symbol_name (980,601 samples, 0.10%)</title><rect x="33.9205%" y="117" width="0.1017%" height="15" fill="rgb(209,38,44)"/><text x="34.1705%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (12,005,133 samples, 1.25%)</title><rect x="32.8179%" y="165" width="1.2455%" height="15" fill="rgb(236,212,23)"/><text x="33.0679%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,484,026 samples, 0.15%)</title><rect x="33.9095%" y="149" width="0.1540%" height="15" fill="rgb(242,79,21)"/><text x="34.1595%" y="159.50"></text></g><g><title>codegen_crate (46,760,307 samples, 4.85%)</title><rect x="29.2474%" y="181" width="4.8512%" height="15" fill="rgb(211,96,35)"/><text x="29.4974%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (184,762,584 samples, 19.17%)</title><rect x="34.0986%" y="181" width="19.1684%" height="15" fill="rgb(253,215,40)"/><text x="34.3486%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (168,159,020 samples, 17.45%)</title><rect x="35.8212%" y="165" width="17.4459%" height="15" fill="rgb(211,81,21)"/><text x="36.0712%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (89,477,547 samples, 9.28%)</title><rect x="54.5649%" y="165" width="9.2830%" height="15" fill="rgb(208,190,38)"/><text x="54.8149%" y="175.50">LLVM_lto_opti..</text></g><g><title>LLVM_module_codegen (134,435,465 samples, 13.95%)</title><rect x="63.8479%" y="165" width="13.9472%" height="15" fill="rgb(235,213,38)"/><text x="64.0979%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (132,609,338 samples, 13.76%)</title><rect x="64.0373%" y="149" width="13.7577%" height="15" fill="rgb(237,122,38)"/><text x="64.2873%" y="159.50">LLVM_module_codegen_e..</text></g><g><title>LLVM_thin_lto_import (11,792,519 samples, 1.22%)</title><rect x="77.7950%" y="165" width="1.2234%" height="15" fill="rgb(244,218,35)"/><text x="78.0450%" y="175.50"></text></g><g><title>codegen_module_perform_lto (249,150,323 samples, 25.85%)</title><rect x="53.2671%" y="181" width="25.8484%" height="15" fill="rgb(240,68,47)"/><text x="53.5171%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_load_macro (1,263,299 samples, 0.13%)</title><rect x="85.7400%" y="133" width="0.1311%" height="15" fill="rgb(210,16,53)"/><text x="85.9900%" y="143.50"></text></g><g><title>metadata_register_crate (25,144,389 samples, 2.61%)</title><rect x="85.8710%" y="133" width="2.6086%" height="15" fill="rgb(235,124,12)"/><text x="86.1210%" y="143.50">me..</text></g><g><title>metadata_register_crate (21,283,185 samples, 2.21%)</title><rect x="86.2716%" y="117" width="2.2081%" height="15" fill="rgb(224,169,11)"/><text x="86.5216%" y="127.50">m..</text></g><g><title>macro_expand_crate (89,740,314 samples, 9.31%)</title><rect x="79.1964%" y="165" width="9.3102%" height="15" fill="rgb(250,166,2)"/><text x="79.4464%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (89,725,184 samples, 9.31%)</title><rect x="79.1979%" y="149" width="9.3087%" height="15" fill="rgb(242,216,29)"/><text x="79.4479%" y="159.50">expand_crate</text></g><g><title>late_resolve_crate (4,227,027 samples, 0.44%)</title><rect x="88.5850%" y="149" width="0.4385%" height="15" fill="rgb(230,116,27)"/><text x="88.8350%" y="159.50"></text></g><g><title>configure_and_expand (95,843,561 samples, 9.94%)</title><rect x="79.1155%" y="181" width="9.9434%" height="15" fill="rgb(228,99,48)"/><text x="79.3655%" y="191.50">configure_and_..</text></g><g><title>resolve_crate (5,239,167 samples, 0.54%)</title><rect x="88.5154%" y="165" width="0.5435%" height="15" fill="rgb(253,11,6)"/><text x="88.7654%" y="175.50"></text></g><g><title>free_global_ctxt (8,661,335 samples, 0.90%)</title><rect x="89.2133%" y="181" width="0.8986%" height="15" fill="rgb(247,143,39)"/><text x="89.4633%" y="191.50"></text></g><g><title>layout_of (1,117,641 samples, 0.12%)</title><rect x="91.2233%" y="133" width="0.1160%" height="15" fill="rgb(236,97,10)"/><text x="91.4733%" y="143.50"></text></g><g><title>layout_of (2,036,440 samples, 0.21%)</title><rect x="91.1454%" y="149" width="0.2113%" height="15" fill="rgb(233,208,19)"/><text x="91.3954%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,818,511 samples, 0.81%)</title><rect x="91.3566%" y="149" width="0.8111%" height="15" fill="rgb(216,164,2)"/><text x="91.6066%" y="159.50"></text></g><g><title>optimized_mir (15,384,458 samples, 1.60%)</title><rect x="90.6023%" y="165" width="1.5961%" height="15" fill="rgb(220,129,5)"/><text x="90.8523%" y="175.50"></text></g><g><title>generate_crate_metadata (21,023,633 samples, 2.18%)</title><rect x="90.1119%" y="181" width="2.1811%" height="15" fill="rgb(242,17,10)"/><text x="90.3619%" y="191.50">g..</text></g><g><title>hir_lowering (6,367,291 samples, 0.66%)</title><rect x="92.2930%" y="181" width="0.6606%" height="15" fill="rgb(242,107,0)"/><text x="92.5430%" y="191.50"></text></g><g><title>finish_ongoing_codegen (62,181,319 samples, 6.45%)</title><rect x="92.9552%" y="165" width="6.4511%" height="15" fill="rgb(251,28,31)"/><text x="93.2052%" y="175.50">finish_o..</text></g><g><title>link_crate (2,042,223 samples, 0.21%)</title><rect x="99.4063%" y="165" width="0.2119%" height="15" fill="rgb(233,223,10)"/><text x="99.6563%" y="175.50"></text></g><g><title>link_binary (1,962,082 samples, 0.20%)</title><rect x="99.4146%" y="149" width="0.2036%" height="15" fill="rgb(215,21,27)"/><text x="99.6646%" y="159.50"></text></g><g><title>link_rlib (1,436,436 samples, 0.15%)</title><rect x="99.4692%" y="133" width="0.1490%" height="15" fill="rgb(232,23,21)"/><text x="99.7192%" y="143.50"></text></g><g><title>link (64,250,142 samples, 6.67%)</title><rect x="92.9536%" y="181" width="6.6657%" height="15" fill="rgb(244,5,23)"/><text x="93.2036%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (2,516,848 samples, 0.26%)</title><rect x="99.6650%" y="181" width="0.2611%" height="15" fill="rgb(226,81,46)"/><text x="99.9150%" y="191.50"></text></g><g><title>all (963,890,082 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,70,30)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (963,890,082 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(212,68,19)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>