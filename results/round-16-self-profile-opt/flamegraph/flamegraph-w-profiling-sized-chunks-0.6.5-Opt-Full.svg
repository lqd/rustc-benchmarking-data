<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (16,870,399 samples, 4.79%)</title><rect x="0.3039%" y="197" width="4.7882%" height="15" fill="rgb(227,0,7)"/><text x="0.5539%" y="207.50">LLVM_p..</text></g><g><title>implied_outlives_bounds (1,054,085 samples, 0.30%)</title><rect x="13.3550%" y="149" width="0.2992%" height="15" fill="rgb(217,0,24)"/><text x="13.6050%" y="159.50"></text></g><g><title>param_env (659,895 samples, 0.19%)</title><rect x="14.9588%" y="117" width="0.1873%" height="15" fill="rgb(221,193,54)"/><text x="15.2088%" y="127.50"></text></g><g><title>item_attrs (446,736 samples, 0.13%)</title><rect x="15.5203%" y="85" width="0.1268%" height="15" fill="rgb(248,212,6)"/><text x="15.7703%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (430,756 samples, 0.12%)</title><rect x="15.5249%" y="69" width="0.1223%" height="15" fill="rgb(208,68,35)"/><text x="15.7749%" y="79.50"></text></g><g><title>codegen_fn_attrs (627,739 samples, 0.18%)</title><rect x="15.4756%" y="101" width="0.1782%" height="15" fill="rgb(232,128,0)"/><text x="15.7256%" y="111.50"></text></g><g><title>is_copy_raw (494,195 samples, 0.14%)</title><rect x="17.5925%" y="85" width="0.1403%" height="15" fill="rgb(207,160,47)"/><text x="17.8425%" y="95.50"></text></g><g><title>evaluate_obligation (387,461 samples, 0.11%)</title><rect x="17.6228%" y="69" width="0.1100%" height="15" fill="rgb(228,23,34)"/><text x="17.8728%" y="79.50"></text></g><g><title>needs_drop_raw (2,342,742 samples, 0.66%)</title><rect x="17.7328%" y="85" width="0.6649%" height="15" fill="rgb(218,30,26)"/><text x="17.9828%" y="95.50"></text></g><g><title>is_copy_raw (1,847,194 samples, 0.52%)</title><rect x="17.8734%" y="69" width="0.5243%" height="15" fill="rgb(220,122,19)"/><text x="18.1234%" y="79.50"></text></g><g><title>evaluate_obligation (1,473,737 samples, 0.42%)</title><rect x="17.9794%" y="53" width="0.4183%" height="15" fill="rgb(250,228,42)"/><text x="18.2294%" y="63.50"></text></g><g><title>codegen_fulfill_obligation (1,409,874 samples, 0.40%)</title><rect x="18.5593%" y="69" width="0.4002%" height="15" fill="rgb(240,193,28)"/><text x="18.8093%" y="79.50"></text></g><g><title>resolve_instance (2,289,548 samples, 0.65%)</title><rect x="18.3977%" y="85" width="0.6498%" height="15" fill="rgb(216,20,37)"/><text x="18.6477%" y="95.50"></text></g><g><title>thir_body (2,670,061 samples, 0.76%)</title><rect x="19.0673%" y="85" width="0.7578%" height="15" fill="rgb(206,188,39)"/><text x="19.3173%" y="95.50"></text></g><g><title>mir_const (19,320,964 samples, 5.48%)</title><rect x="14.3762%" y="133" width="5.4837%" height="15" fill="rgb(217,207,13)"/><text x="14.6262%" y="143.50">mir_con..</text></g><g><title>unsafety_check_result (16,608,172 samples, 4.71%)</title><rect x="15.1461%" y="117" width="4.7138%" height="15" fill="rgb(231,73,38)"/><text x="15.3961%" y="127.50">unsaf..</text></g><g><title>mir_built (14,819,432 samples, 4.21%)</title><rect x="15.6538%" y="101" width="4.2061%" height="15" fill="rgb(225,20,46)"/><text x="15.9038%" y="111.50">mir_b..</text></g><g><title>mir_const (374,186 samples, 0.11%)</title><rect x="19.9148%" y="117" width="0.1062%" height="15" fill="rgb(210,31,41)"/><text x="20.1648%" y="127.50"></text></g><g><title>mir_promoted (22,040,526 samples, 6.26%)</title><rect x="13.7665%" y="149" width="6.2556%" height="15" fill="rgb(221,200,47)"/><text x="14.0165%" y="159.50">mir_prom..</text></g><g><title>mir_const_qualif (571,359 samples, 0.16%)</title><rect x="19.8599%" y="133" width="0.1622%" height="15" fill="rgb(226,26,5)"/><text x="20.1099%" y="143.50"></text></g><g><title>type_op_ascribe_user_type (1,221,612 samples, 0.35%)</title><rect x="20.0229%" y="149" width="0.3467%" height="15" fill="rgb(249,33,26)"/><text x="20.2729%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (1,457,867 samples, 0.41%)</title><rect x="20.3697%" y="149" width="0.4138%" height="15" fill="rgb(235,183,28)"/><text x="20.6197%" y="159.50"></text></g><g><title>normalize_projection_ty (921,258 samples, 0.26%)</title><rect x="20.5220%" y="133" width="0.2615%" height="15" fill="rgb(221,5,38)"/><text x="20.7720%" y="143.50"></text></g><g><title>type_op_normalize_predicate (354,382 samples, 0.10%)</title><rect x="20.7834%" y="149" width="0.1006%" height="15" fill="rgb(247,18,42)"/><text x="21.0334%" y="159.50"></text></g><g><title>type_op_normalize_ty (920,355 samples, 0.26%)</title><rect x="20.8840%" y="149" width="0.2612%" height="15" fill="rgb(241,131,45)"/><text x="21.1340%" y="159.50"></text></g><g><title>normalize_projection_ty (565,051 samples, 0.16%)</title><rect x="20.9849%" y="133" width="0.1604%" height="15" fill="rgb(249,31,29)"/><text x="21.2349%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,438,758 samples, 1.54%)</title><rect x="21.1452%" y="149" width="1.5436%" height="15" fill="rgb(225,111,53)"/><text x="21.3952%" y="159.50"></text></g><g><title>MIR_borrow_checking (61,392,757 samples, 17.42%)</title><rect x="5.2661%" y="181" width="17.4246%" height="15" fill="rgb(238,160,17)"/><text x="5.5161%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (61,056,594 samples, 17.33%)</title><rect x="5.3616%" y="165" width="17.3292%" height="15" fill="rgb(214,148,48)"/><text x="5.6116%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (424,275 samples, 0.12%)</title><rect x="22.6907%" y="181" width="0.1204%" height="15" fill="rgb(232,36,49)"/><text x="22.9407%" y="191.50"></text></g><g><title>hir_module_items (423,834 samples, 0.12%)</title><rect x="22.8111%" y="181" width="0.1203%" height="15" fill="rgb(209,103,24)"/><text x="23.0611%" y="191.50"></text></g><g><title>should_inherit_track_caller (539,926 samples, 0.15%)</title><rect x="23.1367%" y="133" width="0.1532%" height="15" fill="rgb(229,88,8)"/><text x="23.3867%" y="143.50"></text></g><g><title>codegen_fn_attrs (776,268 samples, 0.22%)</title><rect x="23.0752%" y="149" width="0.2203%" height="15" fill="rgb(213,181,19)"/><text x="23.3252%" y="159.50"></text></g><g><title>check_mod_attrs (1,247,315 samples, 0.35%)</title><rect x="22.9415%" y="165" width="0.3540%" height="15" fill="rgb(254,191,54)"/><text x="23.1915%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (892,728 samples, 0.25%)</title><rect x="23.4253%" y="165" width="0.2534%" height="15" fill="rgb(241,83,37)"/><text x="23.6753%" y="175.50"></text></g><g><title>misc_checking_1 (2,722,280 samples, 0.77%)</title><rect x="22.9315%" y="181" width="0.7726%" height="15" fill="rgb(233,36,39)"/><text x="23.1815%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (1,108,062 samples, 0.31%)</title><rect x="23.7047%" y="165" width="0.3145%" height="15" fill="rgb(226,3,54)"/><text x="23.9547%" y="175.50"></text></g><g><title>check_mod_liveness (897,309 samples, 0.25%)</title><rect x="23.7645%" y="149" width="0.2547%" height="15" fill="rgb(245,192,40)"/><text x="24.0145%" y="159.50"></text></g><g><title>misc_checking_2 (1,983,282 samples, 0.56%)</title><rect x="23.7042%" y="181" width="0.5629%" height="15" fill="rgb(238,167,29)"/><text x="23.9542%" y="191.50"></text></g><g><title>match_checking (873,400 samples, 0.25%)</title><rect x="24.0192%" y="165" width="0.2479%" height="15" fill="rgb(232,182,51)"/><text x="24.2692%" y="175.50"></text></g><g><title>check_match (798,149 samples, 0.23%)</title><rect x="24.0406%" y="149" width="0.2265%" height="15" fill="rgb(231,60,39)"/><text x="24.2906%" y="159.50"></text></g><g><title>check_private_in_public (561,717 samples, 0.16%)</title><rect x="24.2700%" y="165" width="0.1594%" height="15" fill="rgb(208,69,12)"/><text x="24.5200%" y="175.50"></text></g><g><title>death_checking (929,100 samples, 0.26%)</title><rect x="24.4294%" y="165" width="0.2637%" height="15" fill="rgb(235,93,37)"/><text x="24.6794%" y="175.50"></text></g><g><title>param_env (609,807 samples, 0.17%)</title><rect x="25.0310%" y="133" width="0.1731%" height="15" fill="rgb(213,116,39)"/><text x="25.2810%" y="143.50"></text></g><g><title>crate_lints (2,989,144 samples, 0.85%)</title><rect x="24.6935%" y="149" width="0.8484%" height="15" fill="rgb(222,207,29)"/><text x="24.9435%" y="159.50"></text></g><g><title>type_of (1,177,934 samples, 0.33%)</title><rect x="25.2076%" y="133" width="0.3343%" height="15" fill="rgb(206,96,30)"/><text x="25.4576%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (944,143 samples, 0.27%)</title><rect x="25.2739%" y="117" width="0.2680%" height="15" fill="rgb(218,138,4)"/><text x="25.5239%" y="127.50"></text></g><g><title>lint_checking (3,846,333 samples, 1.09%)</title><rect x="24.6931%" y="165" width="1.0917%" height="15" fill="rgb(250,191,14)"/><text x="24.9431%" y="175.50"></text></g><g><title>module_lints (855,649 samples, 0.24%)</title><rect x="25.5419%" y="149" width="0.2429%" height="15" fill="rgb(239,60,40)"/><text x="25.7919%" y="159.50"></text></g><g><title>lint_mod (847,669 samples, 0.24%)</title><rect x="25.5442%" y="133" width="0.2406%" height="15" fill="rgb(206,27,48)"/><text x="25.7942%" y="143.50"></text></g><g><title>privacy_access_levels (755,988 samples, 0.21%)</title><rect x="25.7848%" y="165" width="0.2146%" height="15" fill="rgb(225,35,8)"/><text x="26.0348%" y="175.50"></text></g><g><title>privacy_checking_modules (1,980,753 samples, 0.56%)</title><rect x="25.9993%" y="165" width="0.5622%" height="15" fill="rgb(250,213,24)"/><text x="26.2493%" y="175.50"></text></g><g><title>check_mod_privacy (1,973,572 samples, 0.56%)</title><rect x="26.0014%" y="149" width="0.5601%" height="15" fill="rgb(247,123,22)"/><text x="26.2514%" y="159.50"></text></g><g><title>misc_checking_3 (8,104,471 samples, 2.30%)</title><rect x="24.2671%" y="181" width="2.3002%" height="15" fill="rgb(231,138,38)"/><text x="24.5171%" y="191.50">m..</text></g><g><title>impl_parent (2,829,488 samples, 0.80%)</title><rect x="28.2653%" y="117" width="0.8031%" height="15" fill="rgb(231,145,46)"/><text x="28.5153%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,683,489 samples, 0.48%)</title><rect x="28.5905%" y="101" width="0.4778%" height="15" fill="rgb(251,118,11)"/><text x="28.8405%" y="111.50"></text></g><g><title>impl_trait_ref (6,551,482 samples, 1.86%)</title><rect x="29.0687%" y="117" width="1.8595%" height="15" fill="rgb(217,147,25)"/><text x="29.3187%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,216,457 samples, 1.48%)</title><rect x="29.4476%" y="101" width="1.4805%" height="15" fill="rgb(247,81,37)"/><text x="29.6976%" y="111.50"></text></g><g><title>trait_impls_of (1,080,110 samples, 0.31%)</title><rect x="31.0249%" y="117" width="0.3066%" height="15" fill="rgb(209,12,38)"/><text x="31.2749%" y="127.50"></text></g><g><title>coherent_trait (16,608,596 samples, 4.71%)</title><rect x="26.6244%" y="149" width="4.7139%" height="15" fill="rgb(227,1,9)"/><text x="26.8744%" y="159.50">coher..</text></g><g><title>specialization_graph_of (16,566,356 samples, 4.70%)</title><rect x="26.6363%" y="133" width="4.7019%" height="15" fill="rgb(248,47,43)"/><text x="26.8863%" y="143.50">speci..</text></g><g><title>coherence_checking (16,753,528 samples, 4.76%)</title><rect x="26.6156%" y="165" width="4.7550%" height="15" fill="rgb(221,10,30)"/><text x="26.8656%" y="175.50">cohere..</text></g><g><title>associated_item (548,194 samples, 0.16%)</title><rect x="48.9235%" y="101" width="0.1556%" height="15" fill="rgb(210,229,1)"/><text x="49.1735%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (443,794 samples, 0.13%)</title><rect x="48.9531%" y="85" width="0.1260%" height="15" fill="rgb(222,148,37)"/><text x="49.2031%" y="95.50"></text></g><g><title>associated_items (790,086 samples, 0.22%)</title><rect x="48.8674%" y="117" width="0.2242%" height="15" fill="rgb(234,67,33)"/><text x="49.1174%" y="127.50"></text></g><g><title>dropck_outlives (1,168,661 samples, 0.33%)</title><rect x="49.1386%" y="117" width="0.3317%" height="15" fill="rgb(247,98,35)"/><text x="49.3886%" y="127.50"></text></g><g><title>generics_of (1,045,021 samples, 0.30%)</title><rect x="51.0478%" y="101" width="0.2966%" height="15" fill="rgb(247,138,52)"/><text x="51.2978%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (856,510 samples, 0.24%)</title><rect x="51.1013%" y="85" width="0.2431%" height="15" fill="rgb(213,79,30)"/><text x="51.3513%" y="95.50"></text></g><g><title>impl_trait_ref (462,136 samples, 0.13%)</title><rect x="51.3688%" y="101" width="0.1312%" height="15" fill="rgb(246,177,23)"/><text x="51.6188%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (400,836 samples, 0.11%)</title><rect x="51.3862%" y="85" width="0.1138%" height="15" fill="rgb(230,62,27)"/><text x="51.6362%" y="95.50"></text></g><g><title>specializes (413,255 samples, 0.12%)</title><rect x="51.6040%" y="101" width="0.1173%" height="15" fill="rgb(216,154,8)"/><text x="51.8540%" y="111.50"></text></g><g><title>trait_impls_of (476,327 samples, 0.14%)</title><rect x="51.7257%" y="101" width="0.1352%" height="15" fill="rgb(244,35,45)"/><text x="51.9757%" y="111.50"></text></g><g><title>evaluate_obligation (8,443,994 samples, 2.40%)</title><rect x="49.4703%" y="117" width="2.3966%" height="15" fill="rgb(251,115,12)"/><text x="49.7203%" y="127.50">ev..</text></g><g><title>item_attrs (386,345 samples, 0.11%)</title><rect x="52.0867%" y="117" width="0.1097%" height="15" fill="rgb(240,54,50)"/><text x="52.3367%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (375,995 samples, 0.11%)</title><rect x="52.0896%" y="101" width="0.1067%" height="15" fill="rgb(233,84,52)"/><text x="52.3396%" y="111.50"></text></g><g><title>method_autoderef_steps (2,470,686 samples, 0.70%)</title><rect x="52.2338%" y="117" width="0.7012%" height="15" fill="rgb(207,117,47)"/><text x="52.4838%" y="127.50"></text></g><g><title>evaluate_obligation (987,808 samples, 0.28%)</title><rect x="52.6547%" y="101" width="0.2804%" height="15" fill="rgb(249,43,39)"/><text x="52.9047%" y="111.50"></text></g><g><title>predicates_of (564,123 samples, 0.16%)</title><rect x="52.9771%" y="117" width="0.1601%" height="15" fill="rgb(209,38,44)"/><text x="53.2271%" y="127.50"></text></g><g><title>predicates_defined_on (397,871 samples, 0.11%)</title><rect x="53.0243%" y="101" width="0.1129%" height="15" fill="rgb(236,212,23)"/><text x="53.2743%" y="111.50"></text></g><g><title>typeck (1,385,525 samples, 0.39%)</title><rect x="53.1706%" y="117" width="0.3932%" height="15" fill="rgb(242,79,21)"/><text x="53.4206%" y="127.50"></text></g><g><title>item_bodies_checking (78,211,796 samples, 22.20%)</title><rect x="31.3989%" y="165" width="22.1982%" height="15" fill="rgb(211,96,35)"/><text x="31.6489%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (78,208,326 samples, 22.20%)</title><rect x="31.3999%" y="149" width="22.1972%" height="15" fill="rgb(253,215,40)"/><text x="31.6499%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (77,959,871 samples, 22.13%)</title><rect x="31.4704%" y="133" width="22.1267%" height="15" fill="rgb(211,81,21)"/><text x="31.7204%" y="143.50">typeck</text></g><g><title>mir_const (1,411,926 samples, 0.40%)</title><rect x="55.3526%" y="85" width="0.4007%" height="15" fill="rgb(208,190,38)"/><text x="55.6026%" y="95.50"></text></g><g><title>unsafety_check_result (1,243,294 samples, 0.35%)</title><rect x="55.4005%" y="69" width="0.3529%" height="15" fill="rgb(235,213,38)"/><text x="55.6505%" y="79.50"></text></g><g><title>mir_built (1,164,223 samples, 0.33%)</title><rect x="55.4229%" y="53" width="0.3304%" height="15" fill="rgb(237,122,38)"/><text x="55.6729%" y="63.50"></text></g><g><title>typeck (902,040 samples, 0.26%)</title><rect x="55.4974%" y="37" width="0.2560%" height="15" fill="rgb(244,218,35)"/><text x="55.7474%" y="47.50"></text></g><g><title>mir_promoted (1,484,766 samples, 0.42%)</title><rect x="55.3338%" y="101" width="0.4214%" height="15" fill="rgb(240,68,47)"/><text x="55.5838%" y="111.50"></text></g><g><title>item_types_checking (7,785,167 samples, 2.21%)</title><rect x="53.5971%" y="165" width="2.2096%" height="15" fill="rgb(210,16,53)"/><text x="53.8471%" y="175.50">i..</text></g><g><title>check_mod_item_types (7,774,737 samples, 2.21%)</title><rect x="53.6000%" y="149" width="2.2066%" height="15" fill="rgb(235,124,12)"/><text x="53.8500%" y="159.50">c..</text></g><g><title>type_of (2,300,516 samples, 0.65%)</title><rect x="55.1537%" y="133" width="0.6529%" height="15" fill="rgb(224,169,11)"/><text x="55.4037%" y="143.50"></text></g><g><title>mir_borrowck (2,289,526 samples, 0.65%)</title><rect x="55.1568%" y="117" width="0.6498%" height="15" fill="rgb(250,166,2)"/><text x="55.4068%" y="127.50"></text></g><g><title>fn_sig (647,418 samples, 0.18%)</title><rect x="55.9933%" y="133" width="0.1838%" height="15" fill="rgb(242,216,29)"/><text x="56.2433%" y="143.50"></text></g><g><title>is_late_bound_map (554,519 samples, 0.16%)</title><rect x="56.2595%" y="117" width="0.1574%" height="15" fill="rgb(230,116,27)"/><text x="56.5095%" y="127.50"></text></g><g><title>resolve_lifetimes (535,266 samples, 0.15%)</title><rect x="56.2650%" y="101" width="0.1519%" height="15" fill="rgb(228,99,48)"/><text x="56.5150%" y="111.50"></text></g><g><title>generics_of (1,047,887 samples, 0.30%)</title><rect x="56.1770%" y="133" width="0.2974%" height="15" fill="rgb(253,11,6)"/><text x="56.4270%" y="143.50"></text></g><g><title>late_bound_vars_map (694,465 samples, 0.20%)</title><rect x="56.7877%" y="85" width="0.1971%" height="15" fill="rgb(247,143,39)"/><text x="57.0377%" y="95.50"></text></g><g><title>resolve_lifetimes (658,605 samples, 0.19%)</title><rect x="56.7979%" y="69" width="0.1869%" height="15" fill="rgb(236,97,10)"/><text x="57.0479%" y="79.50"></text></g><g><title>explicit_predicates_of (1,319,089 samples, 0.37%)</title><rect x="56.6185%" y="101" width="0.3744%" height="15" fill="rgb(233,208,19)"/><text x="56.8685%" y="111.50"></text></g><g><title>predicates_of (2,374,650 samples, 0.67%)</title><rect x="56.5215%" y="133" width="0.6740%" height="15" fill="rgb(216,164,2)"/><text x="56.7715%" y="143.50"></text></g><g><title>predicates_defined_on (2,241,858 samples, 0.64%)</title><rect x="56.5592%" y="117" width="0.6363%" height="15" fill="rgb(220,129,5)"/><text x="56.8092%" y="127.50"></text></g><g><title>inferred_outlives_of (713,768 samples, 0.20%)</title><rect x="56.9929%" y="101" width="0.2026%" height="15" fill="rgb(242,17,10)"/><text x="57.2429%" y="111.50"></text></g><g><title>inferred_outlives_crate (670,258 samples, 0.19%)</title><rect x="57.0053%" y="85" width="0.1902%" height="15" fill="rgb(242,107,0)"/><text x="57.2553%" y="95.50"></text></g><g><title>type_of (428,475 samples, 0.12%)</title><rect x="57.0739%" y="69" width="0.1216%" height="15" fill="rgb(251,28,31)"/><text x="57.3239%" y="79.50"></text></g><g><title>type_collecting (5,283,579 samples, 1.50%)</title><rect x="55.8086%" y="165" width="1.4996%" height="15" fill="rgb(233,223,10)"/><text x="56.0586%" y="175.50"></text></g><g><title>collect_mod_item_types (5,267,339 samples, 1.49%)</title><rect x="55.8132%" y="149" width="1.4950%" height="15" fill="rgb(215,21,27)"/><text x="56.0632%" y="159.50"></text></g><g><title>type_of (397,134 samples, 0.11%)</title><rect x="57.1955%" y="133" width="0.1127%" height="15" fill="rgb(232,23,21)"/><text x="57.4455%" y="143.50"></text></g><g><title>evaluate_obligation (1,344,921 samples, 0.38%)</title><rect x="59.8992%" y="133" width="0.3817%" height="15" fill="rgb(244,5,23)"/><text x="60.1492%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,031,771 samples, 0.29%)</title><rect x="60.2973%" y="133" width="0.2928%" height="15" fill="rgb(226,81,46)"/><text x="60.5473%" y="143.50"></text></g><g><title>param_env (1,914,487 samples, 0.54%)</title><rect x="60.5930%" y="133" width="0.5434%" height="15" fill="rgb(247,70,30)"/><text x="60.8430%" y="143.50"></text></g><g><title>region_scope_tree (1,174,885 samples, 0.33%)</title><rect x="61.1567%" y="133" width="0.3335%" height="15" fill="rgb(212,68,19)"/><text x="61.4067%" y="143.50"></text></g><g><title>check_impl_item_well_formed (14,145,879 samples, 4.01%)</title><rect x="57.4813%" y="149" width="4.0149%" height="15" fill="rgb(240,187,13)"/><text x="57.7313%" y="159.50">chec..</text></g><g><title>generics_of (421,596 samples, 0.12%)</title><rect x="63.8484%" y="117" width="0.1197%" height="15" fill="rgb(223,113,26)"/><text x="64.0984%" y="127.50"></text></g><g><title>impl_trait_ref (1,547,645 samples, 0.44%)</title><rect x="63.9703%" y="117" width="0.4393%" height="15" fill="rgb(206,192,2)"/><text x="64.2203%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,338,325 samples, 0.38%)</title><rect x="64.0297%" y="101" width="0.3798%" height="15" fill="rgb(241,108,4)"/><text x="64.2797%" y="111.50"></text></g><g><title>evaluate_obligation (4,109,357 samples, 1.17%)</title><rect x="63.2619%" y="133" width="1.1663%" height="15" fill="rgb(247,173,49)"/><text x="63.5119%" y="143.50"></text></g><g><title>implied_outlives_bounds (394,743 samples, 0.11%)</title><rect x="64.4433%" y="133" width="0.1120%" height="15" fill="rgb(224,114,35)"/><text x="64.6933%" y="143.50"></text></g><g><title>param_env (1,092,032 samples, 0.31%)</title><rect x="64.5590%" y="133" width="0.3099%" height="15" fill="rgb(245,159,27)"/><text x="64.8090%" y="143.50"></text></g><g><title>check_item_well_formed (12,738,293 samples, 3.62%)</title><rect x="61.4962%" y="149" width="3.6154%" height="15" fill="rgb(245,172,44)"/><text x="61.7462%" y="159.50">chec..</text></g><g><title>analysis (211,511,358 samples, 60.03%)</title><rect x="5.0920%" y="197" width="60.0314%" height="15" fill="rgb(236,23,11)"/><text x="5.3420%" y="207.50">analysis</text></g><g><title>type_check_crate (135,846,601 samples, 38.56%)</title><rect x="26.5673%" y="181" width="38.5562%" height="15" fill="rgb(205,117,38)"/><text x="26.8173%" y="191.50">type_check_crate</text></g><g><title>wf_checking (27,520,967 samples, 7.81%)</title><rect x="57.3124%" y="165" width="7.8110%" height="15" fill="rgb(237,72,25)"/><text x="57.5624%" y="175.50">wf_checking</text></g><g><title>codegen_module (951,201 samples, 0.27%)</title><rect x="65.2819%" y="181" width="0.2700%" height="15" fill="rgb(244,70,9)"/><text x="65.5319%" y="191.50"></text></g><g><title>monomorphization_collector (362,764 samples, 0.10%)</title><rect x="65.5559%" y="165" width="0.1030%" height="15" fill="rgb(217,125,39)"/><text x="65.8059%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (458,585 samples, 0.13%)</title><rect x="65.5520%" y="181" width="0.1302%" height="15" fill="rgb(235,36,10)"/><text x="65.8020%" y="191.50"></text></g><g><title>codegen_crate (2,037,422 samples, 0.58%)</title><rect x="65.1263%" y="197" width="0.5783%" height="15" fill="rgb(251,123,47)"/><text x="65.3763%" y="207.50"></text></g><g><title>codegen_module_optimize (7,082,439 samples, 2.01%)</title><rect x="65.7046%" y="197" width="2.0101%" height="15" fill="rgb(221,13,13)"/><text x="65.9546%" y="207.50">c..</text></g><g><title>LLVM_module_optimize (6,374,951 samples, 1.81%)</title><rect x="65.9054%" y="181" width="1.8093%" height="15" fill="rgb(238,131,9)"/><text x="66.1554%" y="191.50">L..</text></g><g><title>LLVM_lto_optimize (1,967,662 samples, 0.56%)</title><rect x="67.8458%" y="181" width="0.5585%" height="15" fill="rgb(211,50,8)"/><text x="68.0958%" y="191.50"></text></g><g><title>LLVM_module_codegen (6,597,544 samples, 1.87%)</title><rect x="68.4043%" y="181" width="1.8725%" height="15" fill="rgb(245,182,24)"/><text x="68.6543%" y="191.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (6,486,693 samples, 1.84%)</title><rect x="68.4358%" y="165" width="1.8411%" height="15" fill="rgb(242,14,37)"/><text x="68.6858%" y="175.50">L..</text></g><g><title>codegen_module_perform_lto (9,066,002 samples, 2.57%)</title><rect x="67.7147%" y="197" width="2.5731%" height="15" fill="rgb(246,228,12)"/><text x="67.9647%" y="207.50">co..</text></g><g><title>metadata_register_crate (1,887,381 samples, 0.54%)</title><rect x="81.5267%" y="149" width="0.5357%" height="15" fill="rgb(213,55,15)"/><text x="81.7767%" y="159.50"></text></g><g><title>metadata_register_crate (660,737 samples, 0.19%)</title><rect x="81.8748%" y="133" width="0.1875%" height="15" fill="rgb(209,9,3)"/><text x="82.1248%" y="143.50"></text></g><g><title>macro_expand_crate (42,067,511 samples, 11.94%)</title><rect x="70.4896%" y="181" width="11.9397%" height="15" fill="rgb(230,59,30)"/><text x="70.7396%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (42,053,100 samples, 11.94%)</title><rect x="70.4937%" y="165" width="11.9356%" height="15" fill="rgb(209,121,21)"/><text x="70.7437%" y="175.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,292,774 samples, 0.37%)</title><rect x="82.0623%" y="149" width="0.3669%" height="15" fill="rgb(220,109,13)"/><text x="82.3123%" y="159.50"></text></g><g><title>finalize_imports (354,764 samples, 0.10%)</title><rect x="82.4595%" y="165" width="0.1007%" height="15" fill="rgb(232,18,1)"/><text x="82.7095%" y="175.50"></text></g><g><title>late_resolve_crate (3,461,079 samples, 0.98%)</title><rect x="82.5788%" y="165" width="0.9823%" height="15" fill="rgb(215,41,42)"/><text x="82.8288%" y="175.50"></text></g><g><title>configure_and_expand (47,005,136 samples, 13.34%)</title><rect x="70.2878%" y="197" width="13.3411%" height="15" fill="rgb(224,123,36)"/><text x="70.5378%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (4,125,206 samples, 1.17%)</title><rect x="82.4581%" y="181" width="1.1708%" height="15" fill="rgb(240,125,3)"/><text x="82.7081%" y="191.50"></text></g><g><title>drop_ast (449,575 samples, 0.13%)</title><rect x="83.6289%" y="197" width="0.1276%" height="15" fill="rgb(205,98,50)"/><text x="83.8789%" y="207.50"></text></g><g><title>early_lint_checks (762,179 samples, 0.22%)</title><rect x="83.7652%" y="197" width="0.2163%" height="15" fill="rgb(205,185,37)"/><text x="84.0152%" y="207.50"></text></g><g><title>free_global_ctxt (5,323,090 samples, 1.51%)</title><rect x="83.9815%" y="197" width="1.5108%" height="15" fill="rgb(238,207,15)"/><text x="84.2315%" y="207.50"></text></g><g><title>exported_symbols (402,804 samples, 0.11%)</title><rect x="86.9575%" y="181" width="0.1143%" height="15" fill="rgb(213,199,42)"/><text x="87.2075%" y="191.50"></text></g><g><title>reachable_non_generics (389,364 samples, 0.11%)</title><rect x="86.9614%" y="165" width="0.1105%" height="15" fill="rgb(235,201,11)"/><text x="87.2114%" y="175.50"></text></g><g><title>is_sized_raw (491,395 samples, 0.14%)</title><rect x="89.9963%" y="149" width="0.1395%" height="15" fill="rgb(207,46,11)"/><text x="90.2463%" y="159.50"></text></g><g><title>layout_of (855,767 samples, 0.24%)</title><rect x="90.1357%" y="149" width="0.2429%" height="15" fill="rgb(241,35,35)"/><text x="90.3857%" y="159.50"></text></g><g><title>layout_of (2,586,294 samples, 0.73%)</title><rect x="89.6902%" y="165" width="0.7340%" height="15" fill="rgb(243,32,47)"/><text x="89.9402%" y="175.50"></text></g><g><title>is_copy_raw (575,431 samples, 0.16%)</title><rect x="92.9017%" y="133" width="0.1633%" height="15" fill="rgb(247,202,23)"/><text x="93.1517%" y="143.50"></text></g><g><title>evaluate_obligation (408,687 samples, 0.12%)</title><rect x="92.9490%" y="117" width="0.1160%" height="15" fill="rgb(219,102,11)"/><text x="93.1990%" y="127.50"></text></g><g><title>needs_drop_raw (675,631 samples, 0.19%)</title><rect x="92.8737%" y="149" width="0.1918%" height="15" fill="rgb(243,110,44)"/><text x="93.1237%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,569,153 samples, 2.72%)</title><rect x="90.4242%" y="165" width="2.7159%" height="15" fill="rgb(222,74,54)"/><text x="90.6742%" y="175.50">mi..</text></g><g><title>specialization_graph_of (372,744 samples, 0.11%)</title><rect x="93.1739%" y="149" width="0.1058%" height="15" fill="rgb(216,99,12)"/><text x="93.4239%" y="159.50"></text></g><g><title>resolve_instance (495,775 samples, 0.14%)</title><rect x="93.1402%" y="165" width="0.1407%" height="15" fill="rgb(226,22,26)"/><text x="93.3902%" y="175.50"></text></g><g><title>optimized_mir (21,603,748 samples, 6.13%)</title><rect x="87.2430%" y="181" width="6.1316%" height="15" fill="rgb(217,163,10)"/><text x="87.4930%" y="191.50">optimize..</text></g><g><title>generate_crate_metadata (28,047,764 samples, 7.96%)</title><rect x="85.4923%" y="197" width="7.9606%" height="15" fill="rgb(213,25,53)"/><text x="85.7423%" y="207.50">generate_cr..</text></g><g><title>hir_lowering (7,325,232 samples, 2.08%)</title><rect x="93.4529%" y="197" width="2.0791%" height="15" fill="rgb(252,105,26)"/><text x="93.7029%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (10,233,834 samples, 2.90%)</title><rect x="95.5378%" y="181" width="2.9046%" height="15" fill="rgb(220,39,43)"/><text x="95.7878%" y="191.50">fi..</text></g><g><title>link_crate (2,613,369 samples, 0.74%)</title><rect x="98.4424%" y="181" width="0.7417%" height="15" fill="rgb(229,68,48)"/><text x="98.6924%" y="191.50"></text></g><g><title>link_binary (2,589,089 samples, 0.73%)</title><rect x="98.4493%" y="165" width="0.7348%" height="15" fill="rgb(252,8,32)"/><text x="98.6993%" y="175.50"></text></g><g><title>link_rlib (2,070,693 samples, 0.59%)</title><rect x="98.5964%" y="149" width="0.5877%" height="15" fill="rgb(223,20,43)"/><text x="98.8464%" y="159.50"></text></g><g><title>link (12,883,204 samples, 3.66%)</title><rect x="95.5320%" y="197" width="3.6565%" height="15" fill="rgb(229,81,49)"/><text x="95.7820%" y="207.50">link</text></g><g><title>parse_crate (507,946 samples, 0.14%)</title><rect x="99.1885%" y="197" width="0.1442%" height="15" fill="rgb(236,28,36)"/><text x="99.4385%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,452,826 samples, 0.41%)</title><rect x="99.3963%" y="197" width="0.4123%" height="15" fill="rgb(249,185,26)"/><text x="99.6463%" y="207.50"></text></g><g><title>all (352,334,364 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (352,334,364 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (584,767 samples, 0.17%)</title><rect x="99.8340%" y="197" width="0.1660%" height="15" fill="rgb(221,78,26)"/><text x="100.0840%" y="207.50"></text></g></svg></svg>