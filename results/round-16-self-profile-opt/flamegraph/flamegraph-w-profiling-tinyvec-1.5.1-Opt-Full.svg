<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (14,725,695 samples, 1.43%)</title><rect x="0.0908%" y="181" width="1.4292%" height="15" fill="rgb(227,0,7)"/><text x="0.3408%" y="191.50"></text></g><g><title>is_copy_raw (3,741,798 samples, 0.36%)</title><rect x="38.0510%" y="53" width="0.3632%" height="15" fill="rgb(217,0,24)"/><text x="38.3010%" y="63.50"></text></g><g><title>evaluate_obligation (3,230,393 samples, 0.31%)</title><rect x="38.1006%" y="37" width="0.3135%" height="15" fill="rgb(221,193,54)"/><text x="38.3506%" y="47.50"></text></g><g><title>needs_drop_raw (4,429,694 samples, 0.43%)</title><rect x="37.9856%" y="69" width="0.4299%" height="15" fill="rgb(248,212,6)"/><text x="38.2356%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,811,931 samples, 0.18%)</title><rect x="38.4942%" y="53" width="0.1759%" height="15" fill="rgb(208,68,35)"/><text x="38.7442%" y="63.50"></text></g><g><title>resolve_instance (2,982,371 samples, 0.29%)</title><rect x="38.4155%" y="69" width="0.2894%" height="15" fill="rgb(232,128,0)"/><text x="38.6655%" y="79.50"></text></g><g><title>thir_body (11,777,383 samples, 1.14%)</title><rect x="38.7152%" y="69" width="1.1430%" height="15" fill="rgb(207,160,47)"/><text x="38.9652%" y="79.50"></text></g><g><title>mir_const (259,095,596 samples, 25.15%)</title><rect x="14.7373%" y="117" width="25.1461%" height="15" fill="rgb(228,23,34)"/><text x="14.9873%" y="127.50">mir_const</text></g><g><title>unsafety_check_result (251,545,770 samples, 24.41%)</title><rect x="15.4700%" y="101" width="24.4134%" height="15" fill="rgb(218,30,26)"/><text x="15.7200%" y="111.50">unsafety_check_result</text></g><g><title>mir_built (247,166,188 samples, 23.99%)</title><rect x="15.8951%" y="85" width="23.9883%" height="15" fill="rgb(220,122,19)"/><text x="16.1451%" y="95.50">mir_built</text></g><g><title>mir_const (1,534,007 samples, 0.15%)</title><rect x="39.9519%" y="101" width="0.1489%" height="15" fill="rgb(250,228,42)"/><text x="40.2019%" y="111.50"></text></g><g><title>unsafety_check_result (1,092,000 samples, 0.11%)</title><rect x="39.9948%" y="85" width="0.1060%" height="15" fill="rgb(240,193,28)"/><text x="40.2448%" y="95.50"></text></g><g><title>mir_const_qualif (2,242,193 samples, 0.22%)</title><rect x="39.8834%" y="117" width="0.2176%" height="15" fill="rgb(216,20,37)"/><text x="40.1334%" y="127.50"></text></g><g><title>mir_promoted (270,166,366 samples, 26.22%)</title><rect x="13.8805%" y="133" width="26.2206%" height="15" fill="rgb(206,188,39)"/><text x="14.1305%" y="143.50">mir_promoted</text></g><g><title>type_op_ascribe_user_type (1,347,936 samples, 0.13%)</title><rect x="40.1028%" y="133" width="0.1308%" height="15" fill="rgb(217,207,13)"/><text x="40.3528%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (5,435,802 samples, 0.53%)</title><rect x="40.2336%" y="133" width="0.5276%" height="15" fill="rgb(231,73,38)"/><text x="40.4836%" y="143.50"></text></g><g><title>normalize_projection_ty (3,463,569 samples, 0.34%)</title><rect x="40.4250%" y="117" width="0.3362%" height="15" fill="rgb(225,20,46)"/><text x="40.6750%" y="127.50"></text></g><g><title>type_op_normalize_predicate (1,305,162 samples, 0.13%)</title><rect x="40.7611%" y="133" width="0.1267%" height="15" fill="rgb(210,31,41)"/><text x="41.0111%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,092,950 samples, 0.11%)</title><rect x="40.8878%" y="133" width="0.1061%" height="15" fill="rgb(221,200,47)"/><text x="41.1378%" y="143.50"></text></g><g><title>type_op_prove_predicate (15,219,112 samples, 1.48%)</title><rect x="40.9939%" y="133" width="1.4771%" height="15" fill="rgb(226,26,5)"/><text x="41.2439%" y="143.50"></text></g><g><title>MIR_borrow_checking (419,388,366 samples, 40.70%)</title><rect x="1.7689%" y="165" width="40.7031%" height="15" fill="rgb(249,33,26)"/><text x="2.0189%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (418,733,577 samples, 40.64%)</title><rect x="1.8324%" y="149" width="40.6395%" height="15" fill="rgb(235,183,28)"/><text x="2.0824%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (1,127,282 samples, 0.11%)</title><rect x="42.4719%" y="165" width="0.1094%" height="15" fill="rgb(221,5,38)"/><text x="42.7219%" y="175.50"></text></g><g><title>codegen_fn_attrs (1,243,946 samples, 0.12%)</title><rect x="42.8481%" y="133" width="0.1207%" height="15" fill="rgb(247,18,42)"/><text x="43.0981%" y="143.50"></text></g><g><title>check_mod_attrs (3,002,604 samples, 0.29%)</title><rect x="42.6774%" y="149" width="0.2914%" height="15" fill="rgb(241,131,45)"/><text x="42.9274%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (1,584,907 samples, 0.15%)</title><rect x="43.0743%" y="149" width="0.1538%" height="15" fill="rgb(249,31,29)"/><text x="43.3243%" y="159.50"></text></g><g><title>misc_checking_1 (5,826,845 samples, 0.57%)</title><rect x="42.6742%" y="165" width="0.5655%" height="15" fill="rgb(225,111,53)"/><text x="42.9242%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (3,642,090 samples, 0.35%)</title><rect x="43.2400%" y="149" width="0.3535%" height="15" fill="rgb(238,160,17)"/><text x="43.4900%" y="159.50"></text></g><g><title>check_mod_liveness (2,667,049 samples, 0.26%)</title><rect x="43.3346%" y="133" width="0.2588%" height="15" fill="rgb(214,148,48)"/><text x="43.5846%" y="143.50"></text></g><g><title>misc_checking_2 (5,785,294 samples, 0.56%)</title><rect x="43.2397%" y="165" width="0.5615%" height="15" fill="rgb(232,36,49)"/><text x="43.4897%" y="175.50"></text></g><g><title>match_checking (2,140,914 samples, 0.21%)</title><rect x="43.5934%" y="149" width="0.2078%" height="15" fill="rgb(209,103,24)"/><text x="43.8434%" y="159.50"></text></g><g><title>check_match (1,998,522 samples, 0.19%)</title><rect x="43.6073%" y="133" width="0.1940%" height="15" fill="rgb(229,88,8)"/><text x="43.8573%" y="143.50"></text></g><g><title>death_checking (2,189,475 samples, 0.21%)</title><rect x="43.8935%" y="149" width="0.2125%" height="15" fill="rgb(213,181,19)"/><text x="44.1435%" y="159.50"></text></g><g><title>crate_lints (3,922,604 samples, 0.38%)</title><rect x="44.1062%" y="133" width="0.3807%" height="15" fill="rgb(254,191,54)"/><text x="44.3562%" y="143.50"></text></g><g><title>lint_checking (8,600,236 samples, 0.83%)</title><rect x="44.1060%" y="149" width="0.8347%" height="15" fill="rgb(241,83,37)"/><text x="44.3560%" y="159.50"></text></g><g><title>module_lints (4,675,012 samples, 0.45%)</title><rect x="44.4869%" y="133" width="0.4537%" height="15" fill="rgb(233,36,39)"/><text x="44.7369%" y="143.50"></text></g><g><title>lint_mod (4,667,902 samples, 0.45%)</title><rect x="44.4876%" y="117" width="0.4530%" height="15" fill="rgb(226,3,54)"/><text x="44.7376%" y="127.50"></text></g><g><title>privacy_access_levels (1,517,957 samples, 0.15%)</title><rect x="44.9406%" y="149" width="0.1473%" height="15" fill="rgb(245,192,40)"/><text x="45.1906%" y="159.50"></text></g><g><title>privacy_checking_modules (6,824,606 samples, 0.66%)</title><rect x="45.0880%" y="149" width="0.6624%" height="15" fill="rgb(238,167,29)"/><text x="45.3380%" y="159.50"></text></g><g><title>check_mod_privacy (6,817,965 samples, 0.66%)</title><rect x="45.0886%" y="133" width="0.6617%" height="15" fill="rgb(232,182,51)"/><text x="45.3386%" y="143.50"></text></g><g><title>misc_checking_3 (20,127,355 samples, 1.95%)</title><rect x="43.8012%" y="165" width="1.9534%" height="15" fill="rgb(231,60,39)"/><text x="44.0512%" y="175.50">m..</text></g><g><title>impl_parent (1,286,683 samples, 0.12%)</title><rect x="46.3441%" y="101" width="0.1249%" height="15" fill="rgb(208,69,12)"/><text x="46.5941%" y="111.50"></text></g><g><title>impl_trait_ref (2,567,598 samples, 0.25%)</title><rect x="46.4692%" y="101" width="0.2492%" height="15" fill="rgb(235,93,37)"/><text x="46.7192%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,785,152 samples, 0.17%)</title><rect x="46.5451%" y="85" width="0.1733%" height="15" fill="rgb(213,116,39)"/><text x="46.7951%" y="95.50"></text></g><g><title>coherent_trait (10,334,544 samples, 1.00%)</title><rect x="45.7847%" y="133" width="1.0030%" height="15" fill="rgb(222,207,29)"/><text x="46.0347%" y="143.50"></text></g><g><title>specialization_graph_of (9,949,380 samples, 0.97%)</title><rect x="45.8221%" y="117" width="0.9656%" height="15" fill="rgb(206,96,30)"/><text x="46.0721%" y="127.50"></text></g><g><title>coherence_checking (10,570,937 samples, 1.03%)</title><rect x="45.7805%" y="149" width="1.0259%" height="15" fill="rgb(218,138,4)"/><text x="46.0305%" y="159.50"></text></g><g><title>dropck_outlives (1,394,202 samples, 0.14%)</title><rect x="65.2305%" y="101" width="0.1353%" height="15" fill="rgb(250,191,14)"/><text x="65.4805%" y="111.50"></text></g><g><title>evaluate_obligation (7,978,805 samples, 0.77%)</title><rect x="65.3658%" y="101" width="0.7744%" height="15" fill="rgb(239,60,40)"/><text x="65.6158%" y="111.50"></text></g><g><title>method_autoderef_steps (3,139,464 samples, 0.30%)</title><rect x="66.2240%" y="101" width="0.3047%" height="15" fill="rgb(206,27,48)"/><text x="66.4740%" y="111.50"></text></g><g><title>evaluate_obligation (1,381,448 samples, 0.13%)</title><rect x="66.3946%" y="85" width="0.1341%" height="15" fill="rgb(225,35,8)"/><text x="66.6446%" y="95.50"></text></g><g><title>typeck (3,696,932 samples, 0.36%)</title><rect x="66.6824%" y="101" width="0.3588%" height="15" fill="rgb(250,213,24)"/><text x="66.9324%" y="111.50"></text></g><g><title>item_bodies_checking (208,473,400 samples, 20.23%)</title><rect x="46.8235%" y="149" width="20.2330%" height="15" fill="rgb(247,123,22)"/><text x="47.0735%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (208,469,250 samples, 20.23%)</title><rect x="46.8239%" y="133" width="20.2326%" height="15" fill="rgb(231,138,38)"/><text x="47.0739%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (208,051,887 samples, 20.19%)</title><rect x="46.8644%" y="117" width="20.1921%" height="15" fill="rgb(231,145,46)"/><text x="47.1144%" y="127.50">typeck</text></g><g><title>item_types_checking (10,740,140 samples, 1.04%)</title><rect x="67.0565%" y="149" width="1.0424%" height="15" fill="rgb(251,118,11)"/><text x="67.3065%" y="159.50"></text></g><g><title>check_mod_item_types (10,733,260 samples, 1.04%)</title><rect x="67.0572%" y="133" width="1.0417%" height="15" fill="rgb(217,147,25)"/><text x="67.3072%" y="143.50"></text></g><g><title>is_late_bound_map (2,171,295 samples, 0.21%)</title><rect x="68.3494%" y="101" width="0.2107%" height="15" fill="rgb(247,81,37)"/><text x="68.5994%" y="111.50"></text></g><g><title>resolve_lifetimes (2,116,644 samples, 0.21%)</title><rect x="68.3547%" y="85" width="0.2054%" height="15" fill="rgb(209,12,38)"/><text x="68.6047%" y="95.50"></text></g><g><title>lint_levels (1,451,697 samples, 0.14%)</title><rect x="68.4193%" y="69" width="0.1409%" height="15" fill="rgb(227,1,9)"/><text x="68.6693%" y="79.50"></text></g><g><title>generics_of (2,810,517 samples, 0.27%)</title><rect x="68.3039%" y="117" width="0.2728%" height="15" fill="rgb(248,47,43)"/><text x="68.5539%" y="127.50"></text></g><g><title>late_bound_vars_map (1,294,711 samples, 0.13%)</title><rect x="68.7889%" y="69" width="0.1257%" height="15" fill="rgb(221,10,30)"/><text x="69.0389%" y="79.50"></text></g><g><title>resolve_lifetimes (1,240,191 samples, 0.12%)</title><rect x="68.7942%" y="53" width="0.1204%" height="15" fill="rgb(210,229,1)"/><text x="69.0442%" y="63.50"></text></g><g><title>explicit_predicates_of (2,522,420 samples, 0.24%)</title><rect x="68.6945%" y="85" width="0.2448%" height="15" fill="rgb(222,148,37)"/><text x="68.9445%" y="95.50"></text></g><g><title>predicates_of (3,721,186 samples, 0.36%)</title><rect x="68.6167%" y="117" width="0.3612%" height="15" fill="rgb(234,67,33)"/><text x="68.8667%" y="127.50"></text></g><g><title>predicates_defined_on (3,260,461 samples, 0.32%)</title><rect x="68.6614%" y="101" width="0.3164%" height="15" fill="rgb(247,98,35)"/><text x="68.9114%" y="111.50"></text></g><g><title>type_collecting (9,654,048 samples, 0.94%)</title><rect x="68.0993%" y="149" width="0.9370%" height="15" fill="rgb(247,138,52)"/><text x="68.3493%" y="159.50"></text></g><g><title>collect_mod_item_types (9,639,228 samples, 0.94%)</title><rect x="68.1007%" y="133" width="0.9355%" height="15" fill="rgb(213,79,30)"/><text x="68.3507%" y="143.50"></text></g><g><title>evaluate_obligation (2,737,374 samples, 0.27%)</title><rect x="70.2642%" y="117" width="0.2657%" height="15" fill="rgb(246,177,23)"/><text x="70.5142%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,521,161 samples, 0.15%)</title><rect x="70.5353%" y="117" width="0.1476%" height="15" fill="rgb(230,62,27)"/><text x="70.7853%" y="127.50"></text></g><g><title>param_env (2,418,825 samples, 0.23%)</title><rect x="70.6846%" y="117" width="0.2348%" height="15" fill="rgb(216,154,8)"/><text x="70.9346%" y="127.50"></text></g><g><title>region_scope_tree (2,830,860 samples, 0.27%)</title><rect x="70.9290%" y="117" width="0.2747%" height="15" fill="rgb(244,35,45)"/><text x="71.1790%" y="127.50"></text></g><g><title>check_impl_item_well_formed (21,340,733 samples, 2.07%)</title><rect x="69.1347%" y="133" width="2.0712%" height="15" fill="rgb(251,115,12)"/><text x="69.3847%" y="143.50">c..</text></g><g><title>param_env (1,068,821 samples, 0.10%)</title><rect x="72.0359%" y="117" width="0.1037%" height="15" fill="rgb(240,54,50)"/><text x="72.2859%" y="127.50"></text></g><g><title>check_item_well_formed (10,153,202 samples, 0.99%)</title><rect x="71.2059%" y="133" width="0.9854%" height="15" fill="rgb(233,84,52)"/><text x="71.4559%" y="143.50"></text></g><g><title>analysis (728,589,317 samples, 70.71%)</title><rect x="1.5200%" y="181" width="70.7120%" height="15" fill="rgb(207,117,47)"/><text x="1.7700%" y="191.50">analysis</text></g><g><title>type_check_crate (272,812,426 samples, 26.48%)</title><rect x="45.7546%" y="165" width="26.4774%" height="15" fill="rgb(249,43,39)"/><text x="46.0046%" y="175.50">type_check_crate</text></g><g><title>wf_checking (32,897,726 samples, 3.19%)</title><rect x="69.0392%" y="149" width="3.1928%" height="15" fill="rgb(209,38,44)"/><text x="69.2892%" y="159.50">wf_..</text></g><g><title>codegen_module (1,414,855 samples, 0.14%)</title><rect x="72.2894%" y="165" width="0.1373%" height="15" fill="rgb(236,212,23)"/><text x="72.5394%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,045,022 samples, 0.10%)</title><rect x="72.4269%" y="165" width="0.1014%" height="15" fill="rgb(242,79,21)"/><text x="72.6769%" y="175.50"></text></g><g><title>codegen_crate (3,057,014 samples, 0.30%)</title><rect x="72.2330%" y="181" width="0.2967%" height="15" fill="rgb(211,96,35)"/><text x="72.4830%" y="191.50"></text></g><g><title>codegen_module_optimize (9,810,460 samples, 0.95%)</title><rect x="72.5297%" y="181" width="0.9521%" height="15" fill="rgb(253,215,40)"/><text x="72.7797%" y="191.50"></text></g><g><title>LLVM_module_optimize (8,061,609 samples, 0.78%)</title><rect x="72.6994%" y="165" width="0.7824%" height="15" fill="rgb(211,81,21)"/><text x="72.9494%" y="175.50"></text></g><g><title>LLVM_lto_optimize (3,465,149 samples, 0.34%)</title><rect x="73.5881%" y="165" width="0.3363%" height="15" fill="rgb(208,190,38)"/><text x="73.8381%" y="175.50"></text></g><g><title>LLVM_module_codegen (10,646,719 samples, 1.03%)</title><rect x="73.9244%" y="165" width="1.0333%" height="15" fill="rgb(235,213,38)"/><text x="74.1744%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (10,421,786 samples, 1.01%)</title><rect x="73.9463%" y="149" width="1.0115%" height="15" fill="rgb(237,122,38)"/><text x="74.1963%" y="159.50"></text></g><g><title>codegen_module_perform_lto (15,301,811 samples, 1.49%)</title><rect x="73.4818%" y="181" width="1.4851%" height="15" fill="rgb(244,218,35)"/><text x="73.7318%" y="191.50"></text></g><g><title>macro_expand_crate (73,086,513 samples, 7.09%)</title><rect x="75.1089%" y="165" width="7.0933%" height="15" fill="rgb(240,68,47)"/><text x="75.3589%" y="175.50">macro_expa..</text></g><g><title>expand_crate (73,071,923 samples, 7.09%)</title><rect x="75.1103%" y="149" width="7.0919%" height="15" fill="rgb(210,16,53)"/><text x="75.3603%" y="159.50">expand_cra..</text></g><g><title>pre_AST_expansion_lint_checks (1,829,811 samples, 0.18%)</title><rect x="82.0246%" y="133" width="0.1776%" height="15" fill="rgb(235,124,12)"/><text x="82.2746%" y="143.50"></text></g><g><title>late_resolve_crate (16,200,000 samples, 1.57%)</title><rect x="82.2530%" y="149" width="1.5723%" height="15" fill="rgb(224,169,11)"/><text x="82.5030%" y="159.50"></text></g><g><title>configure_and_expand (92,091,515 samples, 8.94%)</title><rect x="74.9669%" y="181" width="8.9378%" height="15" fill="rgb(250,166,2)"/><text x="75.2169%" y="191.50">configure_and..</text></g><g><title>resolve_crate (17,430,664 samples, 1.69%)</title><rect x="82.2130%" y="165" width="1.6917%" height="15" fill="rgb(242,216,29)"/><text x="82.4630%" y="175.50"></text></g><g><title>drop_ast (1,905,731 samples, 0.18%)</title><rect x="83.9047%" y="181" width="0.1850%" height="15" fill="rgb(230,116,27)"/><text x="84.1547%" y="191.50"></text></g><g><title>early_lint_checks (3,407,888 samples, 0.33%)</title><rect x="84.0913%" y="181" width="0.3307%" height="15" fill="rgb(228,99,48)"/><text x="84.3413%" y="191.50"></text></g><g><title>free_global_ctxt (6,446,941 samples, 0.63%)</title><rect x="84.4220%" y="181" width="0.6257%" height="15" fill="rgb(253,11,6)"/><text x="84.6720%" y="191.50"></text></g><g><title>exported_symbols (1,105,003 samples, 0.11%)</title><rect x="86.1640%" y="165" width="0.1072%" height="15" fill="rgb(247,143,39)"/><text x="86.4140%" y="175.50"></text></g><g><title>reachable_non_generics (1,079,931 samples, 0.10%)</title><rect x="86.1664%" y="149" width="0.1048%" height="15" fill="rgb(236,97,10)"/><text x="86.4164%" y="159.50"></text></g><g><title>layout_of (1,260,259 samples, 0.12%)</title><rect x="89.3912%" y="133" width="0.1223%" height="15" fill="rgb(233,208,19)"/><text x="89.6412%" y="143.50"></text></g><g><title>layout_of (3,889,356 samples, 0.38%)</title><rect x="89.1867%" y="149" width="0.3775%" height="15" fill="rgb(216,164,2)"/><text x="89.4367%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (66,487,720 samples, 6.45%)</title><rect x="89.5641%" y="149" width="6.4529%" height="15" fill="rgb(220,129,5)"/><text x="89.8141%" y="159.50">mir_drop..</text></g><g><title>optimized_mir (99,651,410 samples, 9.67%)</title><rect x="86.3673%" y="165" width="9.6715%" height="15" fill="rgb(242,17,10)"/><text x="86.6173%" y="175.50">optimized_mir</text></g><g><title>promoted_mir (1,877,121 samples, 0.18%)</title><rect x="96.0388%" y="165" width="0.1822%" height="15" fill="rgb(242,107,0)"/><text x="96.2888%" y="175.50"></text></g><g><title>generate_crate_metadata (115,243,042 samples, 11.18%)</title><rect x="85.0477%" y="181" width="11.1847%" height="15" fill="rgb(251,28,31)"/><text x="85.2977%" y="191.50">generate_crate_m..</text></g><g><title>hir_lowering (24,567,693 samples, 2.38%)</title><rect x="96.2325%" y="181" width="2.3844%" height="15" fill="rgb(233,223,10)"/><text x="96.4825%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (6,454,102 samples, 0.63%)</title><rect x="98.6183%" y="165" width="0.6264%" height="15" fill="rgb(215,21,27)"/><text x="98.8683%" y="175.50"></text></g><g><title>link_crate (3,874,722 samples, 0.38%)</title><rect x="99.2447%" y="165" width="0.3761%" height="15" fill="rgb(232,23,21)"/><text x="99.4947%" y="175.50"></text></g><g><title>link_binary (3,865,172 samples, 0.38%)</title><rect x="99.2456%" y="149" width="0.3751%" height="15" fill="rgb(244,5,23)"/><text x="99.4956%" y="159.50"></text></g><g><title>link_rlib (3,358,597 samples, 0.33%)</title><rect x="99.2947%" y="133" width="0.3260%" height="15" fill="rgb(226,81,46)"/><text x="99.5447%" y="143.50"></text></g><g><title>link (10,355,915 samples, 1.01%)</title><rect x="98.6168%" y="181" width="1.0051%" height="15" fill="rgb(247,70,30)"/><text x="98.8668%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,451,907 samples, 0.14%)</title><rect x="99.7133%" y="181" width="0.1409%" height="15" fill="rgb(212,68,19)"/><text x="99.9633%" y="191.50"></text></g><g><title>all (1,030,360,908 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,187,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (1,030,360,908 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,411,096 samples, 0.14%)</title><rect x="99.8630%" y="181" width="0.1370%" height="15" fill="rgb(206,192,2)"/><text x="100.1130%" y="191.50"></text></g></svg></svg>