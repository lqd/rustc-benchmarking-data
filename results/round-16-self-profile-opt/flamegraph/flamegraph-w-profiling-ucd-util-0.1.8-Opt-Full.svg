<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (119,708,721 samples, 13.46%)</title><rect x="0.0826%" y="197" width="13.4560%" height="15" fill="rgb(227,0,7)"/><text x="0.3326%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,232,414 samples, 0.14%)</title><rect x="13.4001%" y="181" width="0.1385%" height="15" fill="rgb(217,0,24)"/><text x="13.6501%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,209,334 samples, 0.14%)</title><rect x="13.4027%" y="165" width="0.1359%" height="15" fill="rgb(221,193,54)"/><text x="13.6527%" y="175.50"></text></g><g><title>specialization_graph_of (1,783,878 samples, 0.20%)</title><rect x="14.6580%" y="69" width="0.2005%" height="15" fill="rgb(248,212,6)"/><text x="14.9080%" y="79.50"></text></g><g><title>resolve_instance (2,065,594 samples, 0.23%)</title><rect x="14.6323%" y="85" width="0.2322%" height="15" fill="rgb(208,68,35)"/><text x="14.8823%" y="95.50"></text></g><g><title>mir_const (5,190,039 samples, 0.58%)</title><rect x="14.3353%" y="133" width="0.5834%" height="15" fill="rgb(232,128,0)"/><text x="14.5853%" y="143.50"></text></g><g><title>unsafety_check_result (4,697,073 samples, 0.53%)</title><rect x="14.3907%" y="117" width="0.5280%" height="15" fill="rgb(207,160,47)"/><text x="14.6407%" y="127.50"></text></g><g><title>mir_built (4,299,140 samples, 0.48%)</title><rect x="14.4354%" y="101" width="0.4833%" height="15" fill="rgb(228,23,34)"/><text x="14.6854%" y="111.50"></text></g><g><title>mir_promoted (6,301,772 samples, 0.71%)</title><rect x="14.2795%" y="149" width="0.7084%" height="15" fill="rgb(218,30,26)"/><text x="14.5295%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,113,261 samples, 0.13%)</title><rect x="15.0319%" y="149" width="0.1251%" height="15" fill="rgb(220,122,19)"/><text x="15.2819%" y="159.50"></text></g><g><title>MIR_borrow_checking (14,055,205 samples, 1.58%)</title><rect x="13.5776%" y="181" width="1.5799%" height="15" fill="rgb(250,228,42)"/><text x="13.8276%" y="191.50"></text></g><g><title>mir_borrowck (14,008,414 samples, 1.57%)</title><rect x="13.5828%" y="165" width="1.5746%" height="15" fill="rgb(240,193,28)"/><text x="13.8328%" y="175.50"></text></g><g><title>misc_checking_1 (1,127,922 samples, 0.13%)</title><rect x="15.2029%" y="181" width="0.1268%" height="15" fill="rgb(216,20,37)"/><text x="15.4529%" y="191.50"></text></g><g><title>eval_to_const_value_raw (1,001,171 samples, 0.11%)</title><rect x="15.4370%" y="133" width="0.1125%" height="15" fill="rgb(206,188,39)"/><text x="15.6870%" y="143.50"></text></g><g><title>eval_to_const_value_raw (995,091 samples, 0.11%)</title><rect x="15.4376%" y="117" width="0.1119%" height="15" fill="rgb(217,207,13)"/><text x="15.6876%" y="127.50"></text></g><g><title>eval_to_allocation_raw (985,141 samples, 0.11%)</title><rect x="15.4388%" y="101" width="0.1107%" height="15" fill="rgb(231,73,38)"/><text x="15.6888%" y="111.50"></text></g><g><title>crate_lints (1,351,704 samples, 0.15%)</title><rect x="15.4177%" y="149" width="0.1519%" height="15" fill="rgb(225,20,46)"/><text x="15.6677%" y="159.50"></text></g><g><title>lint_checking (1,573,837 samples, 0.18%)</title><rect x="15.4175%" y="165" width="0.1769%" height="15" fill="rgb(210,31,41)"/><text x="15.6675%" y="175.50"></text></g><g><title>misc_checking_3 (2,137,644 samples, 0.24%)</title><rect x="15.3938%" y="181" width="0.2403%" height="15" fill="rgb(221,200,47)"/><text x="15.6438%" y="191.50"></text></g><g><title>coherent_trait (1,082,182 samples, 0.12%)</title><rect x="17.4088%" y="53" width="0.1216%" height="15" fill="rgb(226,26,5)"/><text x="17.6588%" y="63.50"></text></g><g><title>specialization_graph_of (1,075,112 samples, 0.12%)</title><rect x="17.4096%" y="37" width="0.1208%" height="15" fill="rgb(249,33,26)"/><text x="17.6596%" y="47.50"></text></g><g><title>adt_destructor (1,100,432 samples, 0.12%)</title><rect x="17.4068%" y="85" width="0.1237%" height="15" fill="rgb(235,183,28)"/><text x="17.6568%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,095,522 samples, 0.12%)</title><rect x="17.4074%" y="69" width="0.1231%" height="15" fill="rgb(221,5,38)"/><text x="17.6574%" y="79.50"></text></g><g><title>dropck_outlives (1,575,048 samples, 0.18%)</title><rect x="17.3886%" y="117" width="0.1770%" height="15" fill="rgb(247,18,42)"/><text x="17.6386%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,466,956 samples, 0.16%)</title><rect x="17.4007%" y="101" width="0.1649%" height="15" fill="rgb(241,131,45)"/><text x="17.6507%" y="111.50"></text></g><g><title>generics_of (958,630 samples, 0.11%)</title><rect x="17.8630%" y="101" width="0.1078%" height="15" fill="rgb(249,31,29)"/><text x="18.1130%" y="111.50"></text></g><g><title>impl_trait_ref (1,446,077 samples, 0.16%)</title><rect x="17.9833%" y="101" width="0.1625%" height="15" fill="rgb(225,111,53)"/><text x="18.2333%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,283,477 samples, 0.14%)</title><rect x="18.0016%" y="85" width="0.1443%" height="15" fill="rgb(238,160,17)"/><text x="18.2516%" y="95.50"></text></g><g><title>evaluate_obligation (6,929,036 samples, 0.78%)</title><rect x="17.5656%" y="117" width="0.7789%" height="15" fill="rgb(214,148,48)"/><text x="17.8156%" y="127.50"></text></g><g><title>generics_of (1,354,277 samples, 0.15%)</title><rect x="18.3680%" y="117" width="0.1522%" height="15" fill="rgb(232,36,49)"/><text x="18.6180%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (1,000,584 samples, 0.11%)</title><rect x="18.4077%" y="101" width="0.1125%" height="15" fill="rgb(209,103,24)"/><text x="18.6577%" y="111.50"></text></g><g><title>impl_trait_ref (2,698,785 samples, 0.30%)</title><rect x="18.5381%" y="117" width="0.3034%" height="15" fill="rgb(229,88,8)"/><text x="18.7881%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,399,513 samples, 0.27%)</title><rect x="18.5718%" y="101" width="0.2697%" height="15" fill="rgb(213,181,19)"/><text x="18.8218%" y="111.50"></text></g><g><title>associated_items (951,201 samples, 0.11%)</title><rect x="20.0866%" y="101" width="0.1069%" height="15" fill="rgb(254,191,54)"/><text x="20.3366%" y="111.50"></text></g><g><title>trait_impls_of (1,345,813 samples, 0.15%)</title><rect x="20.5085%" y="85" width="0.1513%" height="15" fill="rgb(241,83,37)"/><text x="20.7585%" y="95.50"></text></g><g><title>evaluate_obligation (3,906,048 samples, 0.44%)</title><rect x="20.2211%" y="101" width="0.4391%" height="15" fill="rgb(233,36,39)"/><text x="20.4711%" y="111.50"></text></g><g><title>typeck (16,235,328 samples, 1.82%)</title><rect x="19.0256%" y="117" width="1.8250%" height="15" fill="rgb(226,3,54)"/><text x="19.2756%" y="127.50">t..</text></g><g><title>item_bodies_checking (46,399,191 samples, 5.22%)</title><rect x="15.6433%" y="165" width="5.2156%" height="15" fill="rgb(245,192,40)"/><text x="15.8933%" y="175.50">item_b..</text></g><g><title>typeck_item_bodies (46,395,331 samples, 5.22%)</title><rect x="15.6438%" y="149" width="5.2151%" height="15" fill="rgb(238,167,29)"/><text x="15.8938%" y="159.50">typeck..</text></g><g><title>typeck (46,362,551 samples, 5.21%)</title><rect x="15.6475%" y="133" width="5.2115%" height="15" fill="rgb(232,182,51)"/><text x="15.8975%" y="143.50">typeck</text></g><g><title>item_types_checking (2,666,420 samples, 0.30%)</title><rect x="20.8589%" y="165" width="0.2997%" height="15" fill="rgb(231,60,39)"/><text x="21.1089%" y="175.50"></text></g><g><title>check_mod_item_types (2,655,900 samples, 0.30%)</title><rect x="20.8601%" y="149" width="0.2985%" height="15" fill="rgb(208,69,12)"/><text x="21.1101%" y="159.50"></text></g><g><title>typeck (2,631,030 samples, 0.30%)</title><rect x="20.8629%" y="133" width="0.2957%" height="15" fill="rgb(235,93,37)"/><text x="21.1129%" y="143.50"></text></g><g><title>type_collecting (1,048,602 samples, 0.12%)</title><rect x="21.1587%" y="165" width="0.1179%" height="15" fill="rgb(213,116,39)"/><text x="21.4087%" y="175.50"></text></g><g><title>collect_mod_item_types (1,021,481 samples, 0.11%)</title><rect x="21.1618%" y="149" width="0.1148%" height="15" fill="rgb(222,207,29)"/><text x="21.4118%" y="159.50"></text></g><g><title>analysis (71,510,119 samples, 8.04%)</title><rect x="13.5387%" y="197" width="8.0382%" height="15" fill="rgb(206,96,30)"/><text x="13.7887%" y="207.50">analysis</text></g><g><title>type_check_crate (52,868,814 samples, 5.94%)</title><rect x="15.6341%" y="181" width="5.9428%" height="15" fill="rgb(218,138,4)"/><text x="15.8841%" y="191.50">type_che..</text></g><g><title>wf_checking (2,668,420 samples, 0.30%)</title><rect x="21.2769%" y="165" width="0.2999%" height="15" fill="rgb(250,191,14)"/><text x="21.5269%" y="175.50"></text></g><g><title>check_item_well_formed (2,549,848 samples, 0.29%)</title><rect x="21.2903%" y="149" width="0.2866%" height="15" fill="rgb(239,60,40)"/><text x="21.5403%" y="159.50"></text></g><g><title>layout_of (1,045,733 samples, 0.12%)</title><rect x="24.9985%" y="149" width="0.1175%" height="15" fill="rgb(206,27,48)"/><text x="25.2485%" y="159.50"></text></g><g><title>predicates_of (943,258 samples, 0.11%)</title><rect x="25.3288%" y="133" width="0.1060%" height="15" fill="rgb(225,35,8)"/><text x="25.5788%" y="143.50"></text></g><g><title>param_env (2,839,627 samples, 0.32%)</title><rect x="25.1160%" y="149" width="0.3192%" height="15" fill="rgb(250,213,24)"/><text x="25.3660%" y="159.50"></text></g><g><title>fn_abi_of_instance (8,246,519 samples, 0.93%)</title><rect x="24.5802%" y="165" width="0.9270%" height="15" fill="rgb(247,123,22)"/><text x="24.8302%" y="175.50"></text></g><g><title>codegen_module (34,224,036 samples, 3.85%)</title><rect x="21.7946%" y="181" width="3.8470%" height="15" fill="rgb(231,138,38)"/><text x="22.0446%" y="191.50">code..</text></g><g><title>item_attrs (1,037,359 samples, 0.12%)</title><rect x="25.8585%" y="117" width="0.1166%" height="15" fill="rgb(231,145,46)"/><text x="26.1085%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (994,269 samples, 0.11%)</title><rect x="25.8633%" y="101" width="0.1118%" height="15" fill="rgb(251,118,11)"/><text x="26.1133%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,715,217 samples, 0.19%)</title><rect x="25.8272%" y="133" width="0.1928%" height="15" fill="rgb(217,147,25)"/><text x="26.0772%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,733,254 samples, 0.19%)</title><rect x="26.2960%" y="117" width="0.1948%" height="15" fill="rgb(247,81,37)"/><text x="26.5460%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,304,574 samples, 0.15%)</title><rect x="26.4909%" y="117" width="0.1466%" height="15" fill="rgb(209,12,38)"/><text x="26.7409%" y="127.50"></text></g><g><title>optimized_mir (5,257,515 samples, 0.59%)</title><rect x="26.0855%" y="133" width="0.5910%" height="15" fill="rgb(227,1,9)"/><text x="26.3355%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (2,632,805 samples, 0.30%)</title><rect x="26.7701%" y="117" width="0.2959%" height="15" fill="rgb(248,47,43)"/><text x="27.0201%" y="127.50"></text></g><g><title>impl_parent (1,315,236 samples, 0.15%)</title><rect x="27.3932%" y="101" width="0.1478%" height="15" fill="rgb(221,10,30)"/><text x="27.6432%" y="111.50"></text></g><g><title>specialization_graph_of (5,960,959 samples, 0.67%)</title><rect x="27.1534%" y="117" width="0.6701%" height="15" fill="rgb(210,229,1)"/><text x="27.4034%" y="127.50"></text></g><g><title>impl_trait_ref (2,512,768 samples, 0.28%)</title><rect x="27.5410%" y="101" width="0.2825%" height="15" fill="rgb(222,148,37)"/><text x="27.7910%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (2,125,436 samples, 0.24%)</title><rect x="27.5845%" y="85" width="0.2389%" height="15" fill="rgb(234,67,33)"/><text x="27.8345%" y="95.50"></text></g><g><title>resolve_instance (10,556,939 samples, 1.19%)</title><rect x="26.6765%" y="133" width="1.1867%" height="15" fill="rgb(247,98,35)"/><text x="26.9265%" y="143.50"></text></g><g><title>impl_trait_ref (1,560,244 samples, 0.18%)</title><rect x="28.1243%" y="85" width="0.1754%" height="15" fill="rgb(247,138,52)"/><text x="28.3743%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,316,613 samples, 0.15%)</title><rect x="28.1517%" y="69" width="0.1480%" height="15" fill="rgb(213,79,30)"/><text x="28.4017%" y="79.50"></text></g><g><title>specialization_graph_of (3,135,165 samples, 0.35%)</title><rect x="27.9474%" y="101" width="0.3524%" height="15" fill="rgb(246,177,23)"/><text x="28.1974%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (23,596,301 samples, 2.65%)</title><rect x="25.6478%" y="149" width="2.6524%" height="15" fill="rgb(230,62,27)"/><text x="25.8978%" y="159.50">mo..</text></g><g><title>vtable_entries (3,356,837 samples, 0.38%)</title><rect x="27.9229%" y="133" width="0.3773%" height="15" fill="rgb(216,154,8)"/><text x="28.1729%" y="143.50"></text></g><g><title>resolve_instance (3,162,155 samples, 0.36%)</title><rect x="27.9447%" y="117" width="0.3554%" height="15" fill="rgb(244,35,45)"/><text x="28.1947%" y="127.50"></text></g><g><title>monomorphization_collector (23,631,581 samples, 2.66%)</title><rect x="25.6476%" y="165" width="2.6563%" height="15" fill="rgb(251,115,12)"/><text x="25.8976%" y="175.50">mo..</text></g><g><title>assert_symbols_are_distinct (1,453,936 samples, 0.16%)</title><rect x="28.3044%" y="149" width="0.1634%" height="15" fill="rgb(240,54,50)"/><text x="28.5544%" y="159.50"></text></g><g><title>symbol_name (1,322,706 samples, 0.15%)</title><rect x="28.3192%" y="133" width="0.1487%" height="15" fill="rgb(233,84,52)"/><text x="28.5692%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (25,603,403 samples, 2.88%)</title><rect x="25.6425%" y="181" width="2.8780%" height="15" fill="rgb(207,117,47)"/><text x="25.8925%" y="191.50">co..</text></g><g><title>partition_and_assert_distinct_symbols (1,926,711 samples, 0.22%)</title><rect x="28.3039%" y="165" width="0.2166%" height="15" fill="rgb(249,43,39)"/><text x="28.5539%" y="175.50"></text></g><g><title>codegen_crate (61,821,322 samples, 6.95%)</title><rect x="21.5780%" y="197" width="6.9491%" height="15" fill="rgb(209,38,44)"/><text x="21.8280%" y="207.50">codegen_c..</text></g><g><title>codegen_module_optimize (285,720,109 samples, 32.12%)</title><rect x="28.5271%" y="197" width="32.1168%" height="15" fill="rgb(236,212,23)"/><text x="28.7771%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (269,471,539 samples, 30.29%)</title><rect x="30.3536%" y="181" width="30.2903%" height="15" fill="rgb(242,79,21)"/><text x="30.6036%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (93,946,862 samples, 10.56%)</title><rect x="61.6812%" y="181" width="10.5602%" height="15" fill="rgb(211,96,35)"/><text x="61.9312%" y="191.50">LLVM_lto_optimi..</text></g><g><title>LLVM_module_codegen (120,725,440 samples, 13.57%)</title><rect x="72.2414%" y="181" width="13.5703%" height="15" fill="rgb(253,215,40)"/><text x="72.4914%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (118,841,300 samples, 13.36%)</title><rect x="72.4532%" y="165" width="13.3585%" height="15" fill="rgb(211,81,21)"/><text x="72.7032%" y="175.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (6,810,775 samples, 0.77%)</title><rect x="85.8118%" y="181" width="0.7656%" height="15" fill="rgb(208,190,38)"/><text x="86.0618%" y="191.50"></text></g><g><title>codegen_module_perform_lto (231,199,580 samples, 25.99%)</title><rect x="60.6439%" y="197" width="25.9883%" height="15" fill="rgb(235,213,38)"/><text x="60.8939%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,682,109 samples, 0.30%)</title><rect x="88.3590%" y="149" width="0.3015%" height="15" fill="rgb(237,122,38)"/><text x="88.6090%" y="159.50"></text></g><g><title>metadata_register_crate (966,421 samples, 0.11%)</title><rect x="88.5518%" y="133" width="0.1086%" height="15" fill="rgb(244,218,35)"/><text x="88.8018%" y="143.50"></text></g><g><title>macro_expand_crate (17,818,477 samples, 2.00%)</title><rect x="86.6890%" y="181" width="2.0029%" height="15" fill="rgb(240,68,47)"/><text x="86.9390%" y="191.50">m..</text></g><g><title>expand_crate (17,792,876 samples, 2.00%)</title><rect x="86.6919%" y="165" width="2.0000%" height="15" fill="rgb(210,16,53)"/><text x="86.9419%" y="175.50">e..</text></g><g><title>late_resolve_crate (1,792,040 samples, 0.20%)</title><rect x="88.7510%" y="165" width="0.2014%" height="15" fill="rgb(235,124,12)"/><text x="89.0010%" y="175.50"></text></g><g><title>configure_and_expand (20,771,509 samples, 2.33%)</title><rect x="86.6322%" y="197" width="2.3349%" height="15" fill="rgb(224,169,11)"/><text x="86.8822%" y="207.50">c..</text></g><g><title>resolve_crate (2,345,926 samples, 0.26%)</title><rect x="88.7034%" y="181" width="0.2637%" height="15" fill="rgb(250,166,2)"/><text x="88.9534%" y="191.50"></text></g><g><title>free_global_ctxt (6,936,317 samples, 0.78%)</title><rect x="89.0314%" y="197" width="0.7797%" height="15" fill="rgb(242,216,29)"/><text x="89.2814%" y="207.50"></text></g><g><title>generate_crate_metadata (1,316,434 samples, 0.15%)</title><rect x="89.8111%" y="197" width="0.1480%" height="15" fill="rgb(230,116,27)"/><text x="90.0611%" y="207.50"></text></g><g><title>hir_lowering (2,259,554 samples, 0.25%)</title><rect x="89.9591%" y="197" width="0.2540%" height="15" fill="rgb(228,99,48)"/><text x="90.2091%" y="207.50"></text></g><g><title>finish_ongoing_codegen (83,166,357 samples, 9.35%)</title><rect x="90.2148%" y="181" width="9.3484%" height="15" fill="rgb(253,11,6)"/><text x="90.4648%" y="191.50">finish_ongoin..</text></g><g><title>link_crate (1,144,503 samples, 0.13%)</title><rect x="99.5633%" y="181" width="0.1286%" height="15" fill="rgb(247,143,39)"/><text x="99.8133%" y="191.50"></text></g><g><title>link_binary (1,131,203 samples, 0.13%)</title><rect x="99.5648%" y="165" width="0.1272%" height="15" fill="rgb(236,97,10)"/><text x="99.8148%" y="175.50"></text></g><g><title>link (84,336,730 samples, 9.48%)</title><rect x="90.2130%" y="197" width="9.4800%" height="15" fill="rgb(233,208,19)"/><text x="90.4630%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (1,559,577 samples, 0.18%)</title><rect x="99.7755%" y="197" width="0.1753%" height="15" fill="rgb(216,164,2)"/><text x="100.0255%" y="207.50"></text></g><g><title>all (889,628,530 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (889,628,530 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>