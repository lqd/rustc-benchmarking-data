<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,842,306 samples, 4.23%)</title><rect x="0.4651%" y="181" width="4.2333%" height="15" fill="rgb(227,0,7)"/><text x="0.7151%" y="191.50">LLVM_..</text></g><g><title>implied_outlives_bounds (231,741 samples, 0.14%)</title><rect x="14.3688%" y="133" width="0.1434%" height="15" fill="rgb(217,0,24)"/><text x="14.6188%" y="143.50"></text></g><g><title>param_env (235,434 samples, 0.15%)</title><rect x="15.6879%" y="101" width="0.1457%" height="15" fill="rgb(221,193,54)"/><text x="15.9379%" y="111.50"></text></g><g><title>item_attrs (185,041 samples, 0.11%)</title><rect x="16.1729%" y="69" width="0.1145%" height="15" fill="rgb(248,212,6)"/><text x="16.4229%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (178,811 samples, 0.11%)</title><rect x="16.1767%" y="53" width="0.1106%" height="15" fill="rgb(208,68,35)"/><text x="16.4267%" y="63.50"></text></g><g><title>codegen_fn_attrs (237,212 samples, 0.15%)</title><rect x="16.1444%" y="85" width="0.1468%" height="15" fill="rgb(232,128,0)"/><text x="16.3944%" y="95.50"></text></g><g><title>adt_drop_tys (255,344 samples, 0.16%)</title><rect x="17.8753%" y="53" width="0.1580%" height="15" fill="rgb(207,160,47)"/><text x="18.1253%" y="63.50"></text></g><g><title>needs_drop_raw (1,203,660 samples, 0.74%)</title><rect x="17.7951%" y="69" width="0.7447%" height="15" fill="rgb(228,23,34)"/><text x="18.0451%" y="79.50"></text></g><g><title>is_copy_raw (818,636 samples, 0.51%)</title><rect x="18.0333%" y="53" width="0.5065%" height="15" fill="rgb(218,30,26)"/><text x="18.2833%" y="63.50"></text></g><g><title>evaluate_obligation (640,944 samples, 0.40%)</title><rect x="18.1432%" y="37" width="0.3965%" height="15" fill="rgb(220,122,19)"/><text x="18.3932%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (460,672 samples, 0.29%)</title><rect x="18.7537%" y="53" width="0.2850%" height="15" fill="rgb(250,228,42)"/><text x="19.0037%" y="63.50"></text></g><g><title>resolve_instance (899,698 samples, 0.56%)</title><rect x="18.5398%" y="69" width="0.5566%" height="15" fill="rgb(240,193,28)"/><text x="18.7898%" y="79.50"></text></g><g><title>thir_body (760,355 samples, 0.47%)</title><rect x="19.1255%" y="69" width="0.4704%" height="15" fill="rgb(216,20,37)"/><text x="19.3755%" y="79.50"></text></g><g><title>mir_const (7,289,586 samples, 4.51%)</title><rect x="15.1106%" y="117" width="4.5100%" height="15" fill="rgb(206,188,39)"/><text x="15.3606%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (6,120,992 samples, 3.79%)</title><rect x="15.8336%" y="101" width="3.7870%" height="15" fill="rgb(217,207,13)"/><text x="16.0836%" y="111.50">unsa..</text></g><g><title>mir_built (5,381,375 samples, 3.33%)</title><rect x="16.2912%" y="85" width="3.3294%" height="15" fill="rgb(231,73,38)"/><text x="16.5412%" y="95.50">mir..</text></g><g><title>mir_promoted (8,785,982 samples, 5.44%)</title><rect x="14.5652%" y="133" width="5.4358%" height="15" fill="rgb(225,20,46)"/><text x="14.8152%" y="143.50">mir_pro..</text></g><g><title>mir_const_qualif (614,897 samples, 0.38%)</title><rect x="19.6206%" y="117" width="0.3804%" height="15" fill="rgb(210,31,41)"/><text x="19.8706%" y="127.50"></text></g><g><title>mir_const (346,823 samples, 0.21%)</title><rect x="19.7865%" y="101" width="0.2146%" height="15" fill="rgb(221,200,47)"/><text x="20.0365%" y="111.50"></text></g><g><title>unsafety_check_result (279,621 samples, 0.17%)</title><rect x="19.8280%" y="85" width="0.1730%" height="15" fill="rgb(226,26,5)"/><text x="20.0780%" y="95.50"></text></g><g><title>mir_built (234,661 samples, 0.15%)</title><rect x="19.8558%" y="69" width="0.1452%" height="15" fill="rgb(249,33,26)"/><text x="20.1058%" y="79.50"></text></g><g><title>type_op_ascribe_user_type (197,382 samples, 0.12%)</title><rect x="20.0010%" y="133" width="0.1221%" height="15" fill="rgb(235,183,28)"/><text x="20.2510%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (220,291 samples, 0.14%)</title><rect x="20.1231%" y="133" width="0.1363%" height="15" fill="rgb(221,5,38)"/><text x="20.3731%" y="143.50"></text></g><g><title>type_op_normalize_predicate (291,553 samples, 0.18%)</title><rect x="20.2594%" y="133" width="0.1804%" height="15" fill="rgb(247,18,42)"/><text x="20.5094%" y="143.50"></text></g><g><title>type_op_prove_predicate (4,479,806 samples, 2.77%)</title><rect x="20.4398%" y="133" width="2.7716%" height="15" fill="rgb(241,131,45)"/><text x="20.6898%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (29,639,531 samples, 18.34%)</title><rect x="4.8762%" y="165" width="18.3377%" height="15" fill="rgb(249,31,29)"/><text x="5.1262%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (29,428,309 samples, 18.21%)</title><rect x="5.0069%" y="149" width="18.2070%" height="15" fill="rgb(225,111,53)"/><text x="5.2569%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (272,883 samples, 0.17%)</title><rect x="23.2139%" y="165" width="0.1688%" height="15" fill="rgb(238,160,17)"/><text x="23.4639%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (204,952 samples, 0.13%)</title><rect x="23.2560%" y="149" width="0.1268%" height="15" fill="rgb(214,148,48)"/><text x="23.5060%" y="159.50"></text></g><g><title>hir_module_items (190,622 samples, 0.12%)</title><rect x="23.3828%" y="165" width="0.1179%" height="15" fill="rgb(232,36,49)"/><text x="23.6328%" y="175.50"></text></g><g><title>codegen_fn_attrs (244,582 samples, 0.15%)</title><rect x="23.7709%" y="101" width="0.1513%" height="15" fill="rgb(209,103,24)"/><text x="24.0209%" y="111.50"></text></g><g><title>codegen_fn_attrs (448,504 samples, 0.28%)</title><rect x="23.6512%" y="133" width="0.2775%" height="15" fill="rgb(229,88,8)"/><text x="23.9012%" y="143.50"></text></g><g><title>should_inherit_track_caller (382,304 samples, 0.24%)</title><rect x="23.6922%" y="117" width="0.2365%" height="15" fill="rgb(213,181,19)"/><text x="23.9422%" y="127.50"></text></g><g><title>check_mod_attrs (667,159 samples, 0.41%)</title><rect x="23.5160%" y="149" width="0.4128%" height="15" fill="rgb(254,191,54)"/><text x="23.7660%" y="159.50"></text></g><g><title>lookup_deprecation_entry (195,652 samples, 0.12%)</title><rect x="24.1760%" y="133" width="0.1210%" height="15" fill="rgb(241,83,37)"/><text x="24.4260%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (448,225 samples, 0.28%)</title><rect x="24.0556%" y="149" width="0.2773%" height="15" fill="rgb(233,36,39)"/><text x="24.3056%" y="159.50"></text></g><g><title>misc_checking_1 (1,407,765 samples, 0.87%)</title><rect x="23.5009%" y="165" width="0.8710%" height="15" fill="rgb(226,3,54)"/><text x="23.7509%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (453,425 samples, 0.28%)</title><rect x="24.3729%" y="149" width="0.2805%" height="15" fill="rgb(245,192,40)"/><text x="24.6229%" y="159.50"></text></g><g><title>check_mod_liveness (377,833 samples, 0.23%)</title><rect x="24.4196%" y="133" width="0.2338%" height="15" fill="rgb(238,167,29)"/><text x="24.6696%" y="143.50"></text></g><g><title>misc_checking_2 (972,361 samples, 0.60%)</title><rect x="24.3719%" y="165" width="0.6016%" height="15" fill="rgb(232,182,51)"/><text x="24.6219%" y="175.50"></text></g><g><title>match_checking (517,356 samples, 0.32%)</title><rect x="24.6534%" y="149" width="0.3201%" height="15" fill="rgb(231,60,39)"/><text x="24.9034%" y="159.50"></text></g><g><title>check_match (469,826 samples, 0.29%)</title><rect x="24.6828%" y="133" width="0.2907%" height="15" fill="rgb(208,69,12)"/><text x="24.9328%" y="143.50"></text></g><g><title>param_env (162,183 samples, 0.10%)</title><rect x="24.8731%" y="117" width="0.1003%" height="15" fill="rgb(235,93,37)"/><text x="25.1231%" y="127.50"></text></g><g><title>check_private_in_public (262,393 samples, 0.16%)</title><rect x="24.9795%" y="149" width="0.1623%" height="15" fill="rgb(213,116,39)"/><text x="25.2295%" y="159.50"></text></g><g><title>death_checking (394,454 samples, 0.24%)</title><rect x="25.1418%" y="149" width="0.2440%" height="15" fill="rgb(222,207,29)"/><text x="25.3918%" y="159.50"></text></g><g><title>param_env (239,882 samples, 0.15%)</title><rect x="25.8205%" y="117" width="0.1484%" height="15" fill="rgb(206,96,30)"/><text x="26.0705%" y="127.50"></text></g><g><title>crate_lints (2,032,793 samples, 1.26%)</title><rect x="25.3869%" y="133" width="1.2577%" height="15" fill="rgb(218,138,4)"/><text x="25.6369%" y="143.50"></text></g><g><title>type_of (1,089,882 samples, 0.67%)</title><rect x="25.9703%" y="117" width="0.6743%" height="15" fill="rgb(250,191,14)"/><text x="26.2203%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (856,981 samples, 0.53%)</title><rect x="26.1144%" y="101" width="0.5302%" height="15" fill="rgb(239,60,40)"/><text x="26.3644%" y="111.50"></text></g><g><title>lint_checking (2,351,206 samples, 1.45%)</title><rect x="25.3859%" y="149" width="1.4547%" height="15" fill="rgb(206,27,48)"/><text x="25.6359%" y="159.50"></text></g><g><title>module_lints (316,733 samples, 0.20%)</title><rect x="26.6446%" y="133" width="0.1960%" height="15" fill="rgb(225,35,8)"/><text x="26.8946%" y="143.50"></text></g><g><title>lint_mod (311,423 samples, 0.19%)</title><rect x="26.6479%" y="117" width="0.1927%" height="15" fill="rgb(250,213,24)"/><text x="26.8979%" y="127.50"></text></g><g><title>privacy_access_levels (342,234 samples, 0.21%)</title><rect x="26.8405%" y="149" width="0.2117%" height="15" fill="rgb(247,123,22)"/><text x="27.0905%" y="159.50"></text></g><g><title>privacy_checking_modules (903,260 samples, 0.56%)</title><rect x="27.0523%" y="149" width="0.5588%" height="15" fill="rgb(231,138,38)"/><text x="27.3023%" y="159.50"></text></g><g><title>check_mod_privacy (899,280 samples, 0.56%)</title><rect x="27.0547%" y="133" width="0.5564%" height="15" fill="rgb(231,145,46)"/><text x="27.3047%" y="143.50"></text></g><g><title>misc_checking_3 (4,284,317 samples, 2.65%)</title><rect x="24.9735%" y="165" width="2.6507%" height="15" fill="rgb(251,118,11)"/><text x="25.2235%" y="175.50">mi..</text></g><g><title>impl_parent (1,914,738 samples, 1.18%)</title><rect x="29.6165%" y="101" width="1.1846%" height="15" fill="rgb(217,147,25)"/><text x="29.8665%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,079,148 samples, 0.67%)</title><rect x="30.1335%" y="85" width="0.6677%" height="15" fill="rgb(247,81,37)"/><text x="30.3835%" y="95.50"></text></g><g><title>impl_trait_ref (4,432,140 samples, 2.74%)</title><rect x="30.8011%" y="101" width="2.7421%" height="15" fill="rgb(209,12,38)"/><text x="31.0511%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,843,497 samples, 2.38%)</title><rect x="31.1653%" y="85" width="2.3779%" height="15" fill="rgb(227,1,9)"/><text x="31.4153%" y="95.50">me..</text></g><g><title>predicates_of (174,932 samples, 0.11%)</title><rect x="33.6140%" y="101" width="0.1082%" height="15" fill="rgb(248,47,43)"/><text x="33.8640%" y="111.50"></text></g><g><title>trait_impls_of (569,288 samples, 0.35%)</title><rect x="33.7235%" y="101" width="0.3522%" height="15" fill="rgb(221,10,30)"/><text x="33.9735%" y="111.50"></text></g><g><title>coherent_trait (10,336,425 samples, 6.40%)</title><rect x="27.6927%" y="133" width="6.3951%" height="15" fill="rgb(210,229,1)"/><text x="27.9427%" y="143.50">coherent..</text></g><g><title>specialization_graph_of (10,317,744 samples, 6.38%)</title><rect x="27.7043%" y="117" width="6.3835%" height="15" fill="rgb(222,148,37)"/><text x="27.9543%" y="127.50">speciali..</text></g><g><title>coherence_checking (10,452,677 samples, 6.47%)</title><rect x="27.6787%" y="149" width="6.4670%" height="15" fill="rgb(234,67,33)"/><text x="27.9287%" y="159.50">coherenc..</text></g><g><title>associated_item (257,052 samples, 0.16%)</title><rect x="43.3173%" y="85" width="0.1590%" height="15" fill="rgb(247,98,35)"/><text x="43.5673%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (216,522 samples, 0.13%)</title><rect x="43.3424%" y="69" width="0.1340%" height="15" fill="rgb(247,138,52)"/><text x="43.5924%" y="79.50"></text></g><g><title>associated_items (346,472 samples, 0.21%)</title><rect x="43.2711%" y="101" width="0.2144%" height="15" fill="rgb(213,79,30)"/><text x="43.5211%" y="111.50"></text></g><g><title>def_ident_span (246,812 samples, 0.15%)</title><rect x="43.4855%" y="101" width="0.1527%" height="15" fill="rgb(246,177,23)"/><text x="43.7355%" y="111.50"></text></g><g><title>dropck_outlives (502,108 samples, 0.31%)</title><rect x="43.6416%" y="101" width="0.3106%" height="15" fill="rgb(230,62,27)"/><text x="43.8916%" y="111.50"></text></g><g><title>adt_dtorck_constraint (195,042 samples, 0.12%)</title><rect x="43.8316%" y="85" width="0.1207%" height="15" fill="rgb(216,154,8)"/><text x="44.0816%" y="95.50"></text></g><g><title>evaluate_obligation (1,077,771 samples, 0.67%)</title><rect x="43.9523%" y="101" width="0.6668%" height="15" fill="rgb(244,35,45)"/><text x="44.2023%" y="111.50"></text></g><g><title>method_autoderef_steps (712,619 samples, 0.44%)</title><rect x="44.7712%" y="101" width="0.4409%" height="15" fill="rgb(251,115,12)"/><text x="45.0212%" y="111.50"></text></g><g><title>evaluate_obligation (331,933 samples, 0.21%)</title><rect x="45.0067%" y="85" width="0.2054%" height="15" fill="rgb(240,54,50)"/><text x="45.2567%" y="95.50"></text></g><g><title>explicit_predicates_of (163,604 samples, 0.10%)</title><rect x="45.2915%" y="69" width="0.1012%" height="15" fill="rgb(233,84,52)"/><text x="45.5415%" y="79.50"></text></g><g><title>predicates_of (252,466 samples, 0.16%)</title><rect x="45.2485%" y="101" width="0.1562%" height="15" fill="rgb(207,117,47)"/><text x="45.4985%" y="111.50"></text></g><g><title>predicates_defined_on (213,215 samples, 0.13%)</title><rect x="45.2728%" y="85" width="0.1319%" height="15" fill="rgb(249,43,39)"/><text x="45.5228%" y="95.50"></text></g><g><title>evaluate_obligation (721,592 samples, 0.45%)</title><rect x="51.0019%" y="85" width="0.4464%" height="15" fill="rgb(209,38,44)"/><text x="51.2519%" y="95.50"></text></g><g><title>trait_impls_of (201,782 samples, 0.12%)</title><rect x="51.3235%" y="69" width="0.1248%" height="15" fill="rgb(236,212,23)"/><text x="51.5735%" y="79.50"></text></g><g><title>method_autoderef_steps (166,532 samples, 0.10%)</title><rect x="51.5938%" y="85" width="0.1030%" height="15" fill="rgb(242,79,21)"/><text x="51.8438%" y="95.50"></text></g><g><title>typeck (10,259,117 samples, 6.35%)</title><rect x="45.4320%" y="101" width="6.3472%" height="15" fill="rgb(211,96,35)"/><text x="45.6820%" y="111.50">typeck</text></g><g><title>item_bodies_checking (28,482,188 samples, 17.62%)</title><rect x="34.1843%" y="149" width="17.6217%" height="15" fill="rgb(253,215,40)"/><text x="34.4343%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,478,698 samples, 17.62%)</title><rect x="34.1864%" y="133" width="17.6195%" height="15" fill="rgb(211,81,21)"/><text x="34.4364%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,344,767 samples, 17.54%)</title><rect x="34.2693%" y="117" width="17.5366%" height="15" fill="rgb(208,190,38)"/><text x="34.5193%" y="127.50">typeck</text></g><g><title>impl_trait_ref (172,743 samples, 0.11%)</title><rect x="53.7367%" y="69" width="0.1069%" height="15" fill="rgb(235,213,38)"/><text x="53.9867%" y="79.50"></text></g><g><title>adt_destructor (350,743 samples, 0.22%)</title><rect x="53.6471%" y="117" width="0.2170%" height="15" fill="rgb(237,122,38)"/><text x="53.8971%" y="127.50"></text></g><g><title>coherent_trait (341,043 samples, 0.21%)</title><rect x="53.6531%" y="101" width="0.2110%" height="15" fill="rgb(244,218,35)"/><text x="53.9031%" y="111.50"></text></g><g><title>specialization_graph_of (339,143 samples, 0.21%)</title><rect x="53.6543%" y="85" width="0.2098%" height="15" fill="rgb(240,68,47)"/><text x="53.9043%" y="95.50"></text></g><g><title>item_types_checking (3,568,070 samples, 2.21%)</title><rect x="51.8059%" y="149" width="2.2075%" height="15" fill="rgb(210,16,53)"/><text x="52.0559%" y="159.50">i..</text></g><g><title>check_mod_item_types (3,562,220 samples, 2.20%)</title><rect x="51.8096%" y="133" width="2.2039%" height="15" fill="rgb(235,124,12)"/><text x="52.0596%" y="143.50">c..</text></g><g><title>fn_sig (266,984 samples, 0.17%)</title><rect x="54.2581%" y="117" width="0.1652%" height="15" fill="rgb(224,169,11)"/><text x="54.5081%" y="127.50"></text></g><g><title>is_late_bound_map (590,805 samples, 0.37%)</title><rect x="54.5577%" y="101" width="0.3655%" height="15" fill="rgb(250,166,2)"/><text x="54.8077%" y="111.50"></text></g><g><title>resolve_lifetimes (535,835 samples, 0.33%)</title><rect x="54.5917%" y="85" width="0.3315%" height="15" fill="rgb(242,216,29)"/><text x="54.8417%" y="95.50"></text></g><g><title>named_region_map (162,621 samples, 0.10%)</title><rect x="54.9232%" y="101" width="0.1006%" height="15" fill="rgb(230,116,27)"/><text x="55.1732%" y="111.50"></text></g><g><title>generics_of (995,207 samples, 0.62%)</title><rect x="54.4233%" y="117" width="0.6157%" height="15" fill="rgb(228,99,48)"/><text x="54.6733%" y="127.50"></text></g><g><title>explicit_predicates_of (467,434 samples, 0.29%)</title><rect x="55.1966%" y="85" width="0.2892%" height="15" fill="rgb(253,11,6)"/><text x="55.4466%" y="95.50"></text></g><g><title>predicates_of (995,501 samples, 0.62%)</title><rect x="55.0779%" y="117" width="0.6159%" height="15" fill="rgb(247,143,39)"/><text x="55.3279%" y="127.50"></text></g><g><title>predicates_defined_on (923,529 samples, 0.57%)</title><rect x="55.1224%" y="101" width="0.5714%" height="15" fill="rgb(236,97,10)"/><text x="55.3724%" y="111.50"></text></g><g><title>inferred_outlives_of (336,154 samples, 0.21%)</title><rect x="55.4858%" y="85" width="0.2080%" height="15" fill="rgb(233,208,19)"/><text x="55.7358%" y="95.50"></text></g><g><title>inferred_outlives_crate (305,684 samples, 0.19%)</title><rect x="55.5046%" y="69" width="0.1891%" height="15" fill="rgb(216,164,2)"/><text x="55.7546%" y="79.50"></text></g><g><title>type_collecting (2,969,794 samples, 1.84%)</title><rect x="54.0154%" y="149" width="1.8374%" height="15" fill="rgb(220,129,5)"/><text x="54.2654%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,956,414 samples, 1.83%)</title><rect x="54.0237%" y="133" width="1.8291%" height="15" fill="rgb(242,17,10)"/><text x="54.2737%" y="143.50">c..</text></g><g><title>type_of (257,005 samples, 0.16%)</title><rect x="55.6938%" y="117" width="0.1590%" height="15" fill="rgb(242,107,0)"/><text x="55.9438%" y="127.50"></text></g><g><title>evaluate_obligation (865,204 samples, 0.54%)</title><rect x="58.9846%" y="117" width="0.5353%" height="15" fill="rgb(251,28,31)"/><text x="59.2346%" y="127.50"></text></g><g><title>implied_outlives_bounds (602,289 samples, 0.37%)</title><rect x="59.5199%" y="117" width="0.3726%" height="15" fill="rgb(233,223,10)"/><text x="59.7699%" y="127.50"></text></g><g><title>param_env (679,595 samples, 0.42%)</title><rect x="59.8926%" y="117" width="0.4205%" height="15" fill="rgb(215,21,27)"/><text x="60.1426%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,297,869 samples, 4.52%)</title><rect x="56.0604%" y="133" width="4.5151%" height="15" fill="rgb(232,23,21)"/><text x="56.3104%" y="143.50">check..</text></g><g><title>region_scope_tree (365,746 samples, 0.23%)</title><rect x="60.3492%" y="117" width="0.2263%" height="15" fill="rgb(244,5,23)"/><text x="60.5992%" y="127.50"></text></g><g><title>implied_outlives_bounds (227,893 samples, 0.14%)</title><rect x="62.9758%" y="117" width="0.1410%" height="15" fill="rgb(226,81,46)"/><text x="63.2258%" y="127.50"></text></g><g><title>param_env (544,653 samples, 0.34%)</title><rect x="63.1174%" y="117" width="0.3370%" height="15" fill="rgb(247,70,30)"/><text x="63.3674%" y="127.50"></text></g><g><title>trait_impls_of (196,783 samples, 0.12%)</title><rect x="63.5278%" y="117" width="0.1217%" height="15" fill="rgb(212,68,19)"/><text x="63.7778%" y="127.50"></text></g><g><title>analysis (95,428,664 samples, 59.04%)</title><rect x="4.6983%" y="181" width="59.0408%" height="15" fill="rgb(240,187,13)"/><text x="4.9483%" y="191.50">analysis</text></g><g><title>type_check_crate (58,373,281 samples, 36.12%)</title><rect x="27.6242%" y="165" width="36.1150%" height="15" fill="rgb(223,113,26)"/><text x="27.8742%" y="175.50">type_check_crate</text></g><g><title>wf_checking (12,739,751 samples, 7.88%)</title><rect x="55.8572%" y="149" width="7.8820%" height="15" fill="rgb(206,192,2)"/><text x="56.1072%" y="159.50">wf_checking</text></g><g><title>check_item_well_formed (5,113,444 samples, 3.16%)</title><rect x="60.5755%" y="133" width="3.1636%" height="15" fill="rgb(241,108,4)"/><text x="60.8255%" y="143.50">che..</text></g><g><title>codegen_module (212,933 samples, 0.13%)</title><rect x="64.0355%" y="165" width="0.1317%" height="15" fill="rgb(247,173,49)"/><text x="64.2855%" y="175.50"></text></g><g><title>codegen_crate (830,370 samples, 0.51%)</title><rect x="63.7453%" y="181" width="0.5137%" height="15" fill="rgb(224,114,35)"/><text x="63.9953%" y="191.50"></text></g><g><title>codegen_module_optimize (2,652,250 samples, 1.64%)</title><rect x="64.2591%" y="181" width="1.6409%" height="15" fill="rgb(245,159,27)"/><text x="64.5091%" y="191.50"></text></g><g><title>LLVM_module_optimize (525,976 samples, 0.33%)</title><rect x="65.5746%" y="165" width="0.3254%" height="15" fill="rgb(245,172,44)"/><text x="65.8246%" y="175.50"></text></g><g><title>LLVM_lto_optimize (250,573 samples, 0.16%)</title><rect x="66.1555%" y="165" width="0.1550%" height="15" fill="rgb(236,23,11)"/><text x="66.4055%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,747,170 samples, 1.70%)</title><rect x="66.3105%" y="165" width="1.6996%" height="15" fill="rgb(205,117,38)"/><text x="66.5605%" y="175.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,712,620 samples, 1.68%)</title><rect x="66.3319%" y="149" width="1.6783%" height="15" fill="rgb(237,72,25)"/><text x="66.5819%" y="159.50"></text></g><g><title>codegen_module_perform_lto (3,459,098 samples, 2.14%)</title><rect x="65.9000%" y="181" width="2.1401%" height="15" fill="rgb(244,70,9)"/><text x="66.1500%" y="191.50">c..</text></g><g><title>AST_validation (362,834 samples, 0.22%)</title><rect x="68.1749%" y="165" width="0.2245%" height="15" fill="rgb(217,125,39)"/><text x="68.4249%" y="175.50"></text></g><g><title>metadata_register_crate (2,837,112 samples, 1.76%)</title><rect x="80.6735%" y="133" width="1.7553%" height="15" fill="rgb(235,36,10)"/><text x="80.9235%" y="143.50"></text></g><g><title>metadata_register_crate (979,230 samples, 0.61%)</title><rect x="81.8229%" y="117" width="0.6058%" height="15" fill="rgb(251,123,47)"/><text x="82.0729%" y="127.50"></text></g><g><title>macro_expand_crate (22,876,174 samples, 14.15%)</title><rect x="68.5263%" y="165" width="14.1533%" height="15" fill="rgb(221,13,13)"/><text x="68.7763%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (22,858,524 samples, 14.14%)</title><rect x="68.5372%" y="149" width="14.1424%" height="15" fill="rgb(238,131,9)"/><text x="68.7872%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (405,395 samples, 0.25%)</title><rect x="82.4288%" y="133" width="0.2508%" height="15" fill="rgb(211,50,8)"/><text x="82.6788%" y="143.50"></text></g><g><title>finalize_imports (405,045 samples, 0.25%)</title><rect x="82.7425%" y="149" width="0.2506%" height="15" fill="rgb(245,182,24)"/><text x="82.9925%" y="159.50"></text></g><g><title>late_resolve_crate (3,066,984 samples, 1.90%)</title><rect x="83.0243%" y="149" width="1.8975%" height="15" fill="rgb(242,14,37)"/><text x="83.2743%" y="159.50">l..</text></g><g><title>configure_and_expand (27,478,236 samples, 17.00%)</title><rect x="68.0401%" y="181" width="17.0005%" height="15" fill="rgb(246,228,12)"/><text x="68.2901%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,724,062 samples, 2.30%)</title><rect x="82.7366%" y="165" width="2.3040%" height="15" fill="rgb(213,55,15)"/><text x="82.9866%" y="175.50">r..</text></g><g><title>drop_ast (176,302 samples, 0.11%)</title><rect x="85.0406%" y="181" width="0.1091%" height="15" fill="rgb(209,9,3)"/><text x="85.2906%" y="191.50"></text></g><g><title>early_lint_checks (279,804 samples, 0.17%)</title><rect x="85.1596%" y="181" width="0.1731%" height="15" fill="rgb(230,59,30)"/><text x="85.4096%" y="191.50"></text></g><g><title>free_global_ctxt (3,597,710 samples, 2.23%)</title><rect x="85.3327%" y="181" width="2.2259%" height="15" fill="rgb(209,121,21)"/><text x="85.5827%" y="191.50">f..</text></g><g><title>exported_symbols (163,842 samples, 0.10%)</title><rect x="89.1982%" y="165" width="0.1014%" height="15" fill="rgb(220,109,13)"/><text x="89.4482%" y="175.50"></text></g><g><title>layout_of (440,366 samples, 0.27%)</title><rect x="91.8881%" y="133" width="0.2725%" height="15" fill="rgb(232,18,1)"/><text x="92.1381%" y="143.50"></text></g><g><title>layout_of (279,814 samples, 0.17%)</title><rect x="91.9875%" y="117" width="0.1731%" height="15" fill="rgb(215,41,42)"/><text x="92.2375%" y="127.50"></text></g><g><title>layout_of (204,962 samples, 0.13%)</title><rect x="92.0338%" y="101" width="0.1268%" height="15" fill="rgb(224,123,36)"/><text x="92.2838%" y="111.50"></text></g><g><title>layout_of (1,087,032 samples, 0.67%)</title><rect x="91.5179%" y="149" width="0.6725%" height="15" fill="rgb(240,125,3)"/><text x="91.7679%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,694,709 samples, 1.67%)</title><rect x="92.1905%" y="149" width="1.6672%" height="15" fill="rgb(205,98,50)"/><text x="92.4405%" y="159.50"></text></g><g><title>optimized_mir (7,212,291 samples, 4.46%)</title><rect x="89.4032%" y="165" width="4.4622%" height="15" fill="rgb(205,185,37)"/><text x="89.6532%" y="175.50">optim..</text></g><g><title>generate_crate_metadata (10,286,455 samples, 6.36%)</title><rect x="87.5586%" y="181" width="6.3641%" height="15" fill="rgb(238,207,15)"/><text x="87.8086%" y="191.50">generate..</text></g><g><title>hir_lowering (4,101,535 samples, 2.54%)</title><rect x="93.9227%" y="181" width="2.5376%" height="15" fill="rgb(213,199,42)"/><text x="94.1727%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (2,626,199 samples, 1.62%)</title><rect x="96.4684%" y="165" width="1.6248%" height="15" fill="rgb(235,201,11)"/><text x="96.7184%" y="175.50"></text></g><g><title>link_crate (968,481 samples, 0.60%)</title><rect x="98.0933%" y="165" width="0.5992%" height="15" fill="rgb(207,46,11)"/><text x="98.3433%" y="175.50"></text></g><g><title>link_binary (944,021 samples, 0.58%)</title><rect x="98.1084%" y="149" width="0.5841%" height="15" fill="rgb(241,35,35)"/><text x="98.3584%" y="159.50"></text></g><g><title>link_rlib (676,907 samples, 0.42%)</title><rect x="98.2736%" y="133" width="0.4188%" height="15" fill="rgb(243,32,47)"/><text x="98.5236%" y="143.50"></text></g><g><title>link (3,615,030 samples, 2.24%)</title><rect x="96.4603%" y="181" width="2.2366%" height="15" fill="rgb(247,202,23)"/><text x="96.7103%" y="191.50">l..</text></g><g><title>parse_crate (568,496 samples, 0.35%)</title><rect x="98.6969%" y="181" width="0.3517%" height="15" fill="rgb(219,102,11)"/><text x="98.9469%" y="191.50"></text></g><g><title>prepare_outputs (274,673 samples, 0.17%)</title><rect x="99.0546%" y="181" width="0.1699%" height="15" fill="rgb(243,110,44)"/><text x="99.3046%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (797,879 samples, 0.49%)</title><rect x="99.2245%" y="181" width="0.4936%" height="15" fill="rgb(222,74,54)"/><text x="99.4745%" y="191.50"></text></g><g><title>all (161,631,651 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (161,631,651 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (371,914 samples, 0.23%)</title><rect x="99.7699%" y="181" width="0.2301%" height="15" fill="rgb(217,163,10)"/><text x="100.0199%" y="191.50"></text></g></svg></svg>