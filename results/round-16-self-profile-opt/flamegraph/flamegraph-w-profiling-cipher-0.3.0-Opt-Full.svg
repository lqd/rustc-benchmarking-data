<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (20,115,433 samples, 10.31%)</title><rect x="0.5106%" y="181" width="10.3148%" height="15" fill="rgb(227,0,7)"/><text x="0.7606%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (262,570 samples, 0.13%)</title><rect x="17.2539%" y="85" width="0.1346%" height="15" fill="rgb(217,0,24)"/><text x="17.5039%" y="95.50"></text></g><g><title>is_copy_raw (261,232 samples, 0.13%)</title><rect x="18.7879%" y="69" width="0.1340%" height="15" fill="rgb(221,193,54)"/><text x="19.0379%" y="79.50"></text></g><g><title>evaluate_obligation (203,232 samples, 0.10%)</title><rect x="18.8176%" y="53" width="0.1042%" height="15" fill="rgb(248,212,6)"/><text x="19.0676%" y="63.50"></text></g><g><title>is_copy_raw (1,666,522 samples, 0.85%)</title><rect x="19.0960%" y="53" width="0.8546%" height="15" fill="rgb(208,68,35)"/><text x="19.3460%" y="63.50"></text></g><g><title>evaluate_obligation (1,442,139 samples, 0.74%)</title><rect x="19.2110%" y="37" width="0.7395%" height="15" fill="rgb(232,128,0)"/><text x="19.4610%" y="47.50"></text></g><g><title>needs_drop_raw (1,997,473 samples, 1.02%)</title><rect x="18.9299%" y="69" width="1.0243%" height="15" fill="rgb(207,160,47)"/><text x="19.1799%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (459,684 samples, 0.24%)</title><rect x="20.0641%" y="53" width="0.2357%" height="15" fill="rgb(228,23,34)"/><text x="20.3141%" y="63.50"></text></g><g><title>specialization_graph_of (394,445 samples, 0.20%)</title><rect x="20.3113%" y="53" width="0.2023%" height="15" fill="rgb(218,30,26)"/><text x="20.5613%" y="63.50"></text></g><g><title>resolve_instance (1,150,541 samples, 0.59%)</title><rect x="19.9542%" y="69" width="0.5900%" height="15" fill="rgb(220,122,19)"/><text x="20.2042%" y="79.50"></text></g><g><title>thir_body (906,832 samples, 0.47%)</title><rect x="20.5582%" y="69" width="0.4650%" height="15" fill="rgb(250,228,42)"/><text x="20.8082%" y="79.50"></text></g><g><title>mir_const (8,916,991 samples, 4.57%)</title><rect x="16.5557%" y="117" width="4.5725%" height="15" fill="rgb(240,193,28)"/><text x="16.8057%" y="127.50">mir_c..</text></g><g><title>unsafety_check_result (7,982,716 samples, 4.09%)</title><rect x="17.0348%" y="101" width="4.0934%" height="15" fill="rgb(216,20,37)"/><text x="17.2848%" y="111.50">unsa..</text></g><g><title>mir_built (7,292,752 samples, 3.74%)</title><rect x="17.3886%" y="85" width="3.7396%" height="15" fill="rgb(206,188,39)"/><text x="17.6386%" y="95.50">mir_..</text></g><g><title>mir_promoted (9,664,609 samples, 4.96%)</title><rect x="16.1925%" y="133" width="4.9558%" height="15" fill="rgb(217,207,13)"/><text x="16.4425%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (517,756 samples, 0.27%)</title><rect x="21.1484%" y="133" width="0.2655%" height="15" fill="rgb(231,73,38)"/><text x="21.3984%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,274,844 samples, 0.65%)</title><rect x="21.4139%" y="133" width="0.6537%" height="15" fill="rgb(225,20,46)"/><text x="21.6639%" y="143.50"></text></g><g><title>normalize_projection_ty (779,788 samples, 0.40%)</title><rect x="21.6677%" y="117" width="0.3999%" height="15" fill="rgb(210,31,41)"/><text x="21.9177%" y="127.50"></text></g><g><title>type_op_normalize_predicate (538,867 samples, 0.28%)</title><rect x="22.0676%" y="133" width="0.2763%" height="15" fill="rgb(221,200,47)"/><text x="22.3176%" y="143.50"></text></g><g><title>normalize_projection_ty (218,134 samples, 0.11%)</title><rect x="22.2320%" y="117" width="0.1119%" height="15" fill="rgb(226,26,5)"/><text x="22.4820%" y="127.50"></text></g><g><title>type_op_normalize_ty (613,897 samples, 0.31%)</title><rect x="22.3439%" y="133" width="0.3148%" height="15" fill="rgb(249,33,26)"/><text x="22.5939%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,466,453 samples, 1.78%)</title><rect x="22.6587%" y="133" width="1.7775%" height="15" fill="rgb(235,183,28)"/><text x="22.9087%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (26,067,840 samples, 13.37%)</title><rect x="11.0698%" y="165" width="13.3671%" height="15" fill="rgb(221,5,38)"/><text x="11.3198%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (25,955,680 samples, 13.31%)</title><rect x="11.1273%" y="149" width="13.3096%" height="15" fill="rgb(247,18,42)"/><text x="11.3773%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (298,835 samples, 0.15%)</title><rect x="24.4499%" y="165" width="0.1532%" height="15" fill="rgb(241,131,45)"/><text x="24.6999%" y="175.50"></text></g><g><title>should_inherit_track_caller (253,451 samples, 0.13%)</title><rect x="24.9065%" y="117" width="0.1300%" height="15" fill="rgb(249,31,29)"/><text x="25.1565%" y="127.50"></text></g><g><title>codegen_fn_attrs (466,044 samples, 0.24%)</title><rect x="24.8124%" y="133" width="0.2390%" height="15" fill="rgb(225,111,53)"/><text x="25.0624%" y="143.50"></text></g><g><title>check_mod_attrs (836,220 samples, 0.43%)</title><rect x="24.6226%" y="149" width="0.4288%" height="15" fill="rgb(238,160,17)"/><text x="24.8726%" y="159.50"></text></g><g><title>lookup_deprecation_entry (211,912 samples, 0.11%)</title><rect x="25.3041%" y="133" width="0.1087%" height="15" fill="rgb(214,148,48)"/><text x="25.5541%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (486,985 samples, 0.25%)</title><rect x="25.1992%" y="149" width="0.2497%" height="15" fill="rgb(232,36,49)"/><text x="25.4492%" y="159.50"></text></g><g><title>misc_checking_1 (1,732,209 samples, 0.89%)</title><rect x="24.6034%" y="165" width="0.8882%" height="15" fill="rgb(209,103,24)"/><text x="24.8534%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (453,085 samples, 0.23%)</title><rect x="25.4924%" y="149" width="0.2323%" height="15" fill="rgb(229,88,8)"/><text x="25.7424%" y="159.50"></text></g><g><title>check_mod_liveness (376,155 samples, 0.19%)</title><rect x="25.5318%" y="133" width="0.1929%" height="15" fill="rgb(213,181,19)"/><text x="25.7818%" y="143.50"></text></g><g><title>misc_checking_2 (1,071,522 samples, 0.55%)</title><rect x="25.4916%" y="165" width="0.5495%" height="15" fill="rgb(254,191,54)"/><text x="25.7416%" y="175.50"></text></g><g><title>match_checking (616,937 samples, 0.32%)</title><rect x="25.7247%" y="149" width="0.3164%" height="15" fill="rgb(241,83,37)"/><text x="25.9747%" y="159.50"></text></g><g><title>check_match (583,367 samples, 0.30%)</title><rect x="25.7419%" y="133" width="0.2991%" height="15" fill="rgb(233,36,39)"/><text x="25.9919%" y="143.50"></text></g><g><title>codegen_fn_attrs (299,034 samples, 0.15%)</title><rect x="26.2520%" y="133" width="0.1533%" height="15" fill="rgb(226,3,54)"/><text x="26.5020%" y="143.50"></text></g><g><title>should_inherit_track_caller (257,513 samples, 0.13%)</title><rect x="26.2733%" y="117" width="0.1320%" height="15" fill="rgb(245,192,40)"/><text x="26.5233%" y="127.50"></text></g><g><title>death_checking (609,167 samples, 0.31%)</title><rect x="26.1320%" y="149" width="0.3124%" height="15" fill="rgb(238,167,29)"/><text x="26.3820%" y="159.50"></text></g><g><title>param_env (271,774 samples, 0.14%)</title><rect x="26.6700%" y="117" width="0.1394%" height="15" fill="rgb(232,182,51)"/><text x="26.9200%" y="127.50"></text></g><g><title>crate_lints (1,079,422 samples, 0.55%)</title><rect x="26.4451%" y="133" width="0.5535%" height="15" fill="rgb(231,60,39)"/><text x="26.6951%" y="143.50"></text></g><g><title>type_of (360,385 samples, 0.18%)</title><rect x="26.8139%" y="117" width="0.1848%" height="15" fill="rgb(208,69,12)"/><text x="27.0639%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (280,544 samples, 0.14%)</title><rect x="26.8548%" y="101" width="0.1439%" height="15" fill="rgb(235,93,37)"/><text x="27.1048%" y="111.50"></text></g><g><title>lint_checking (1,395,115 samples, 0.72%)</title><rect x="26.4443%" y="149" width="0.7154%" height="15" fill="rgb(213,116,39)"/><text x="26.6943%" y="159.50"></text></g><g><title>module_lints (314,113 samples, 0.16%)</title><rect x="26.9986%" y="133" width="0.1611%" height="15" fill="rgb(222,207,29)"/><text x="27.2486%" y="143.50"></text></g><g><title>lint_mod (309,433 samples, 0.16%)</title><rect x="27.0010%" y="117" width="0.1587%" height="15" fill="rgb(206,96,30)"/><text x="27.2510%" y="127.50"></text></g><g><title>privacy_access_levels (232,922 samples, 0.12%)</title><rect x="27.1597%" y="149" width="0.1194%" height="15" fill="rgb(218,138,4)"/><text x="27.4097%" y="159.50"></text></g><g><title>privacy_checking_modules (756,429 samples, 0.39%)</title><rect x="27.2792%" y="149" width="0.3879%" height="15" fill="rgb(250,191,14)"/><text x="27.5292%" y="159.50"></text></g><g><title>check_mod_privacy (752,699 samples, 0.39%)</title><rect x="27.2811%" y="133" width="0.3860%" height="15" fill="rgb(239,60,40)"/><text x="27.5311%" y="143.50"></text></g><g><title>misc_checking_3 (3,185,765 samples, 1.63%)</title><rect x="26.0411%" y="165" width="1.6336%" height="15" fill="rgb(206,27,48)"/><text x="26.2911%" y="175.50"></text></g><g><title>impl_parent (647,520 samples, 0.33%)</title><rect x="28.3542%" y="101" width="0.3320%" height="15" fill="rgb(225,35,8)"/><text x="28.6042%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (379,773 samples, 0.19%)</title><rect x="28.4915%" y="85" width="0.1947%" height="15" fill="rgb(250,213,24)"/><text x="28.7415%" y="95.50"></text></g><g><title>impl_trait_ref (1,601,499 samples, 0.82%)</title><rect x="28.6862%" y="101" width="0.8212%" height="15" fill="rgb(247,123,22)"/><text x="28.9362%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,335,107 samples, 0.68%)</title><rect x="28.8228%" y="85" width="0.6846%" height="15" fill="rgb(231,138,38)"/><text x="29.0728%" y="95.50"></text></g><g><title>trait_impls_of (199,901 samples, 0.10%)</title><rect x="29.5180%" y="101" width="0.1025%" height="15" fill="rgb(231,145,46)"/><text x="29.7680%" y="111.50"></text></g><g><title>coherent_trait (3,709,152 samples, 1.90%)</title><rect x="27.7189%" y="133" width="1.9020%" height="15" fill="rgb(251,118,11)"/><text x="27.9689%" y="143.50">c..</text></g><g><title>specialization_graph_of (3,557,670 samples, 1.82%)</title><rect x="27.7966%" y="117" width="1.8243%" height="15" fill="rgb(217,147,25)"/><text x="28.0466%" y="127.50">s..</text></g><g><title>coherence_checking (3,776,132 samples, 1.94%)</title><rect x="27.7094%" y="149" width="1.9363%" height="15" fill="rgb(247,81,37)"/><text x="27.9594%" y="159.50">c..</text></g><g><title>associated_items (276,374 samples, 0.14%)</title><rect x="34.6971%" y="101" width="0.1417%" height="15" fill="rgb(209,12,38)"/><text x="34.9471%" y="111.50"></text></g><g><title>dropck_outlives (256,403 samples, 0.13%)</title><rect x="34.8503%" y="101" width="0.1315%" height="15" fill="rgb(227,1,9)"/><text x="35.1003%" y="111.50"></text></g><g><title>evaluate_obligation (655,680 samples, 0.34%)</title><rect x="34.9818%" y="101" width="0.3362%" height="15" fill="rgb(248,47,43)"/><text x="35.2318%" y="111.50"></text></g><g><title>method_autoderef_steps (399,493 samples, 0.20%)</title><rect x="35.5100%" y="101" width="0.2049%" height="15" fill="rgb(221,10,30)"/><text x="35.7600%" y="111.50"></text></g><g><title>predicates_of (214,412 samples, 0.11%)</title><rect x="35.7309%" y="101" width="0.1099%" height="15" fill="rgb(210,229,1)"/><text x="35.9809%" y="111.50"></text></g><g><title>associated_item (714,826 samples, 0.37%)</title><rect x="41.7111%" y="69" width="0.3665%" height="15" fill="rgb(222,148,37)"/><text x="41.9611%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (562,215 samples, 0.29%)</title><rect x="41.7893%" y="53" width="0.2883%" height="15" fill="rgb(234,67,33)"/><text x="42.0393%" y="63.50"></text></g><g><title>associated_items (956,849 samples, 0.49%)</title><rect x="41.5998%" y="85" width="0.4907%" height="15" fill="rgb(247,98,35)"/><text x="41.8498%" y="95.50"></text></g><g><title>dropck_outlives (329,674 samples, 0.17%)</title><rect x="42.1017%" y="85" width="0.1691%" height="15" fill="rgb(247,138,52)"/><text x="42.3517%" y="95.50"></text></g><g><title>specializes (502,844 samples, 0.26%)</title><rect x="43.5421%" y="69" width="0.2578%" height="15" fill="rgb(213,79,30)"/><text x="43.7921%" y="79.50"></text></g><g><title>param_env (354,140 samples, 0.18%)</title><rect x="43.6183%" y="53" width="0.1816%" height="15" fill="rgb(246,177,23)"/><text x="43.8683%" y="63.50"></text></g><g><title>evaluate_obligation (3,134,818 samples, 1.61%)</title><rect x="42.2708%" y="85" width="1.6075%" height="15" fill="rgb(230,62,27)"/><text x="42.5208%" y="95.50"></text></g><g><title>method_autoderef_steps (475,095 samples, 0.24%)</title><rect x="44.1480%" y="85" width="0.2436%" height="15" fill="rgb(216,154,8)"/><text x="44.3980%" y="95.50"></text></g><g><title>evaluate_obligation (343,055 samples, 0.18%)</title><rect x="44.2157%" y="69" width="0.1759%" height="15" fill="rgb(244,35,45)"/><text x="44.4657%" y="79.50"></text></g><g><title>typeck (16,806,887 samples, 8.62%)</title><rect x="35.8820%" y="101" width="8.6183%" height="15" fill="rgb(251,115,12)"/><text x="36.1320%" y="111.50">typeck</text></g><g><title>item_bodies_checking (28,973,052 samples, 14.86%)</title><rect x="29.6617%" y="149" width="14.8568%" height="15" fill="rgb(240,54,50)"/><text x="29.9117%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (28,970,022 samples, 14.86%)</title><rect x="29.6633%" y="133" width="14.8553%" height="15" fill="rgb(233,84,52)"/><text x="29.9133%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (28,905,442 samples, 14.82%)</title><rect x="29.6964%" y="117" width="14.8222%" height="15" fill="rgb(207,117,47)"/><text x="29.9464%" y="127.50">typeck</text></g><g><title>item_types_checking (2,135,993 samples, 1.10%)</title><rect x="44.5186%" y="149" width="1.0953%" height="15" fill="rgb(249,43,39)"/><text x="44.7686%" y="159.50"></text></g><g><title>check_mod_item_types (2,129,963 samples, 1.09%)</title><rect x="44.5217%" y="133" width="1.0922%" height="15" fill="rgb(209,38,44)"/><text x="44.7717%" y="143.50"></text></g><g><title>fn_sig (351,844 samples, 0.18%)</title><rect x="45.8064%" y="117" width="0.1804%" height="15" fill="rgb(236,212,23)"/><text x="46.0564%" y="127.50"></text></g><g><title>named_region_map (333,053 samples, 0.17%)</title><rect x="46.1138%" y="101" width="0.1708%" height="15" fill="rgb(242,79,21)"/><text x="46.3638%" y="111.50"></text></g><g><title>resolve_lifetimes (306,043 samples, 0.16%)</title><rect x="46.1277%" y="85" width="0.1569%" height="15" fill="rgb(211,96,35)"/><text x="46.3777%" y="95.50"></text></g><g><title>generics_of (612,119 samples, 0.31%)</title><rect x="45.9868%" y="117" width="0.3139%" height="15" fill="rgb(253,215,40)"/><text x="46.2368%" y="127.50"></text></g><g><title>item_bounds (376,664 samples, 0.19%)</title><rect x="46.3180%" y="117" width="0.1931%" height="15" fill="rgb(211,81,21)"/><text x="46.5680%" y="127.50"></text></g><g><title>explicit_predicates_of (436,903 samples, 0.22%)</title><rect x="46.6020%" y="85" width="0.2240%" height="15" fill="rgb(208,190,38)"/><text x="46.8520%" y="95.50"></text></g><g><title>predicates_of (644,726 samples, 0.33%)</title><rect x="46.5112%" y="117" width="0.3306%" height="15" fill="rgb(235,213,38)"/><text x="46.7612%" y="127.50"></text></g><g><title>predicates_defined_on (575,796 samples, 0.30%)</title><rect x="46.5465%" y="101" width="0.2953%" height="15" fill="rgb(237,122,38)"/><text x="46.7965%" y="111.50"></text></g><g><title>type_collecting (2,885,723 samples, 1.48%)</title><rect x="45.6152%" y="149" width="1.4797%" height="15" fill="rgb(244,218,35)"/><text x="45.8652%" y="159.50"></text></g><g><title>collect_mod_item_types (2,861,742 samples, 1.47%)</title><rect x="45.6275%" y="133" width="1.4674%" height="15" fill="rgb(240,68,47)"/><text x="45.8775%" y="143.50"></text></g><g><title>type_of (307,433 samples, 0.16%)</title><rect x="46.9373%" y="117" width="0.1576%" height="15" fill="rgb(210,16,53)"/><text x="47.1873%" y="127.50"></text></g><g><title>evaluate_obligation (287,112 samples, 0.15%)</title><rect x="48.3348%" y="117" width="0.1472%" height="15" fill="rgb(235,124,12)"/><text x="48.5848%" y="127.50"></text></g><g><title>implied_outlives_bounds (316,008 samples, 0.16%)</title><rect x="48.4853%" y="117" width="0.1620%" height="15" fill="rgb(224,169,11)"/><text x="48.7353%" y="127.50"></text></g><g><title>param_env (272,544 samples, 0.14%)</title><rect x="48.6474%" y="117" width="0.1398%" height="15" fill="rgb(250,166,2)"/><text x="48.8974%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,339,727 samples, 1.71%)</title><rect x="47.1994%" y="133" width="1.7125%" height="15" fill="rgb(242,216,29)"/><text x="47.4494%" y="143.50"></text></g><g><title>region_scope_tree (237,121 samples, 0.12%)</title><rect x="48.7904%" y="117" width="0.1216%" height="15" fill="rgb(230,116,27)"/><text x="49.0404%" y="127.50"></text></g><g><title>evaluate_obligation (3,976,873 samples, 2.04%)</title><rect x="49.9503%" y="117" width="2.0393%" height="15" fill="rgb(228,99,48)"/><text x="50.2003%" y="127.50">e..</text></g><g><title>predicates_of (293,243 samples, 0.15%)</title><rect x="51.8392%" y="101" width="0.1504%" height="15" fill="rgb(253,11,6)"/><text x="52.0892%" y="111.50"></text></g><g><title>param_env (236,695 samples, 0.12%)</title><rect x="52.0238%" y="117" width="0.1214%" height="15" fill="rgb(247,143,39)"/><text x="52.2738%" y="127.50"></text></g><g><title>check_item_well_formed (6,427,990 samples, 3.30%)</title><rect x="48.9120%" y="133" width="3.2962%" height="15" fill="rgb(236,97,10)"/><text x="49.1620%" y="143.50">che..</text></g><g><title>evaluate_obligation (314,222 samples, 0.16%)</title><rect x="54.2761%" y="117" width="0.1611%" height="15" fill="rgb(233,208,19)"/><text x="54.5261%" y="127.50"></text></g><g><title>implied_outlives_bounds (317,623 samples, 0.16%)</title><rect x="54.4711%" y="117" width="0.1629%" height="15" fill="rgb(216,164,2)"/><text x="54.7211%" y="127.50"></text></g><g><title>param_env (291,744 samples, 0.15%)</title><rect x="54.6371%" y="117" width="0.1496%" height="15" fill="rgb(220,129,5)"/><text x="54.8871%" y="127.50"></text></g><g><title>analysis (85,914,025 samples, 44.06%)</title><rect x="10.8254%" y="181" width="44.0551%" height="15" fill="rgb(242,17,10)"/><text x="11.0754%" y="191.50">analysis</text></g><g><title>type_check_crate (53,055,520 samples, 27.21%)</title><rect x="27.6747%" y="165" width="27.2059%" height="15" fill="rgb(242,107,0)"/><text x="27.9247%" y="175.50">type_check_crate</text></g><g><title>wf_checking (15,178,518 samples, 7.78%)</title><rect x="47.0973%" y="149" width="7.7833%" height="15" fill="rgb(251,28,31)"/><text x="47.3473%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (5,211,565 samples, 2.67%)</title><rect x="52.2081%" y="133" width="2.6724%" height="15" fill="rgb(233,223,10)"/><text x="52.4581%" y="143.50">ch..</text></g><g><title>fn_abi_of_instance (267,444 samples, 0.14%)</title><rect x="55.4615%" y="149" width="0.1371%" height="15" fill="rgb(215,21,27)"/><text x="55.7115%" y="159.50"></text></g><g><title>codegen_module (947,280 samples, 0.49%)</title><rect x="55.1275%" y="165" width="0.4857%" height="15" fill="rgb(232,23,21)"/><text x="55.3775%" y="175.50"></text></g><g><title>optimized_mir (412,364 samples, 0.21%)</title><rect x="55.6737%" y="117" width="0.2115%" height="15" fill="rgb(244,5,23)"/><text x="55.9237%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (509,575 samples, 0.26%)</title><rect x="55.6252%" y="133" width="0.2613%" height="15" fill="rgb(226,81,46)"/><text x="55.8752%" y="143.50"></text></g><g><title>monomorphization_collector (542,456 samples, 0.28%)</title><rect x="55.6240%" y="149" width="0.2782%" height="15" fill="rgb(247,70,30)"/><text x="55.8740%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (605,277 samples, 0.31%)</title><rect x="55.6135%" y="165" width="0.3104%" height="15" fill="rgb(212,68,19)"/><text x="55.8635%" y="175.50"></text></g><g><title>codegen_crate (2,057,153 samples, 1.05%)</title><rect x="54.8861%" y="181" width="1.0549%" height="15" fill="rgb(240,187,13)"/><text x="55.1361%" y="191.50"></text></g><g><title>codegen_module_optimize (5,809,074 samples, 2.98%)</title><rect x="55.9409%" y="181" width="2.9788%" height="15" fill="rgb(223,113,26)"/><text x="56.1909%" y="191.50">cod..</text></g><g><title>LLVM_module_optimize (4,814,353 samples, 2.47%)</title><rect x="56.4510%" y="165" width="2.4687%" height="15" fill="rgb(206,192,2)"/><text x="56.7010%" y="175.50">LL..</text></g><g><title>LLVM_lto_optimize (3,567,430 samples, 1.83%)</title><rect x="59.2408%" y="165" width="1.8293%" height="15" fill="rgb(241,108,4)"/><text x="59.4908%" y="175.50">L..</text></g><g><title>LLVM_module_codegen (9,603,917 samples, 4.92%)</title><rect x="61.0702%" y="165" width="4.9247%" height="15" fill="rgb(247,173,49)"/><text x="61.3202%" y="175.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (9,485,356 samples, 4.86%)</title><rect x="61.1309%" y="149" width="4.8639%" height="15" fill="rgb(224,114,35)"/><text x="61.3809%" y="159.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (13,893,474 samples, 7.12%)</title><rect x="58.9197%" y="181" width="7.1243%" height="15" fill="rgb(245,159,27)"/><text x="59.1697%" y="191.50">codegen_mo..</text></g><g><title>AST_validation (202,122 samples, 0.10%)</title><rect x="66.1589%" y="165" width="0.1036%" height="15" fill="rgb(245,172,44)"/><text x="66.4089%" y="175.50"></text></g><g><title>metadata_register_crate (412,675 samples, 0.21%)</title><rect x="76.7948%" y="133" width="0.2116%" height="15" fill="rgb(236,23,11)"/><text x="77.0448%" y="143.50"></text></g><g><title>macro_expand_crate (20,952,803 samples, 10.74%)</title><rect x="66.3686%" y="165" width="10.7442%" height="15" fill="rgb(205,117,38)"/><text x="66.6186%" y="175.50">macro_expand_cra..</text></g><g><title>expand_crate (20,922,193 samples, 10.73%)</title><rect x="66.3843%" y="149" width="10.7285%" height="15" fill="rgb(237,72,25)"/><text x="66.6343%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (207,351 samples, 0.11%)</title><rect x="77.0064%" y="133" width="0.1063%" height="15" fill="rgb(244,70,9)"/><text x="77.2564%" y="143.50"></text></g><g><title>finalize_macro_resolutions (228,553 samples, 0.12%)</title><rect x="77.2390%" y="149" width="0.1172%" height="15" fill="rgb(217,125,39)"/><text x="77.4890%" y="159.50"></text></g><g><title>late_resolve_crate (2,605,409 samples, 1.34%)</title><rect x="77.3562%" y="149" width="1.3360%" height="15" fill="rgb(235,36,10)"/><text x="77.6062%" y="159.50"></text></g><g><title>configure_and_expand (24,874,907 samples, 12.76%)</title><rect x="66.0440%" y="181" width="12.7554%" height="15" fill="rgb(251,123,47)"/><text x="66.2940%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (3,160,646 samples, 1.62%)</title><rect x="77.1787%" y="165" width="1.6207%" height="15" fill="rgb(221,13,13)"/><text x="77.4287%" y="175.50"></text></g><g><title>drop_ast (304,883 samples, 0.16%)</title><rect x="78.7994%" y="181" width="0.1563%" height="15" fill="rgb(238,131,9)"/><text x="79.0494%" y="191.50"></text></g><g><title>early_lint_checks (606,657 samples, 0.31%)</title><rect x="78.9677%" y="181" width="0.3111%" height="15" fill="rgb(211,50,8)"/><text x="79.2177%" y="191.50"></text></g><g><title>free_global_ctxt (2,059,973 samples, 1.06%)</title><rect x="79.2787%" y="181" width="1.0563%" height="15" fill="rgb(245,182,24)"/><text x="79.5287%" y="191.50"></text></g><g><title>exported_symbols (209,663 samples, 0.11%)</title><rect x="81.1299%" y="165" width="0.1075%" height="15" fill="rgb(242,14,37)"/><text x="81.3799%" y="175.50"></text></g><g><title>is_sized_raw (459,834 samples, 0.24%)</title><rect x="83.0537%" y="133" width="0.2358%" height="15" fill="rgb(246,228,12)"/><text x="83.3037%" y="143.50"></text></g><g><title>evaluate_obligation (362,793 samples, 0.19%)</title><rect x="83.1035%" y="117" width="0.1860%" height="15" fill="rgb(213,55,15)"/><text x="83.3535%" y="127.50"></text></g><g><title>layout_of (1,359,456 samples, 0.70%)</title><rect x="82.7970%" y="149" width="0.6971%" height="15" fill="rgb(209,9,3)"/><text x="83.0470%" y="159.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (275,945 samples, 0.14%)</title><rect x="83.3526%" y="133" width="0.1415%" height="15" fill="rgb(230,59,30)"/><text x="83.6026%" y="143.50"></text></g><g><title>needs_drop_raw (983,020 samples, 0.50%)</title><rect x="85.2380%" y="133" width="0.5041%" height="15" fill="rgb(209,121,21)"/><text x="85.4880%" y="143.50"></text></g><g><title>is_copy_raw (873,520 samples, 0.45%)</title><rect x="85.2941%" y="117" width="0.4479%" height="15" fill="rgb(220,109,13)"/><text x="85.5441%" y="127.50"></text></g><g><title>evaluate_obligation (739,849 samples, 0.38%)</title><rect x="85.3627%" y="101" width="0.3794%" height="15" fill="rgb(232,18,1)"/><text x="85.6127%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,103,287 samples, 2.62%)</title><rect x="83.4941%" y="149" width="2.6169%" height="15" fill="rgb(215,41,42)"/><text x="83.7441%" y="159.50">mi..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (679,937 samples, 0.35%)</title><rect x="85.7623%" y="133" width="0.3487%" height="15" fill="rgb(224,123,36)"/><text x="86.0123%" y="143.50"></text></g><g><title>normalize_projection_ty (591,266 samples, 0.30%)</title><rect x="85.8078%" y="117" width="0.3032%" height="15" fill="rgb(240,125,3)"/><text x="86.0578%" y="127.50"></text></g><g><title>optimized_mir (9,450,737 samples, 4.85%)</title><rect x="81.2822%" y="165" width="4.8462%" height="15" fill="rgb(205,98,50)"/><text x="81.5322%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (11,361,766 samples, 5.83%)</title><rect x="80.3351%" y="181" width="5.8261%" height="15" fill="rgb(205,185,37)"/><text x="80.5851%" y="191.50">generat..</text></g><g><title>hir_lowering (6,002,587 samples, 3.08%)</title><rect x="86.1612%" y="181" width="3.0780%" height="15" fill="rgb(238,207,15)"/><text x="86.4112%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (17,432,794 samples, 8.94%)</title><rect x="89.2520%" y="165" width="8.9392%" height="15" fill="rgb(213,199,42)"/><text x="89.5020%" y="175.50">finish_ongoin..</text></g><g><title>link_crate (1,375,845 samples, 0.71%)</title><rect x="98.1912%" y="165" width="0.7055%" height="15" fill="rgb(235,201,11)"/><text x="98.4412%" y="175.50"></text></g><g><title>link_binary (1,365,765 samples, 0.70%)</title><rect x="98.1964%" y="149" width="0.7003%" height="15" fill="rgb(207,46,11)"/><text x="98.4464%" y="159.50"></text></g><g><title>link_rlib (901,780 samples, 0.46%)</title><rect x="98.4343%" y="133" width="0.4624%" height="15" fill="rgb(241,35,35)"/><text x="98.6843%" y="143.50"></text></g><g><title>link (18,845,819 samples, 9.66%)</title><rect x="89.2392%" y="181" width="9.6638%" height="15" fill="rgb(243,32,47)"/><text x="89.4892%" y="191.50">link</text></g><g><title>parse_crate (446,825 samples, 0.23%)</title><rect x="98.9030%" y="181" width="0.2291%" height="15" fill="rgb(247,202,23)"/><text x="99.1530%" y="191.50"></text></g><g><title>prepare_outputs (373,664 samples, 0.19%)</title><rect x="99.1371%" y="181" width="0.1916%" height="15" fill="rgb(219,102,11)"/><text x="99.3871%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (791,979 samples, 0.41%)</title><rect x="99.3287%" y="181" width="0.4061%" height="15" fill="rgb(243,110,44)"/><text x="99.5787%" y="191.50"></text></g><g><title>all (195,014,956 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (195,014,956 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (365,064 samples, 0.19%)</title><rect x="99.8128%" y="181" width="0.1872%" height="15" fill="rgb(226,22,26)"/><text x="100.0628%" y="191.50"></text></g></svg></svg>