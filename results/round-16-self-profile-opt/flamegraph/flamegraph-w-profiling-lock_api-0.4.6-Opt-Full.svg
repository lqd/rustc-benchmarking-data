<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,235,518 samples, 4.40%)</title><rect x="0.1757%" y="181" width="4.4020%" height="15" fill="rgb(227,0,7)"/><text x="0.4257%" y="191.50">LLVM_..</text></g><g><title>implied_outlives_bounds (1,675,629 samples, 0.60%)</title><rect x="14.7274%" y="133" width="0.6029%" height="15" fill="rgb(217,0,24)"/><text x="14.9774%" y="143.50"></text></g><g><title>is_sized_raw (445,882 samples, 0.16%)</title><rect x="15.3973%" y="133" width="0.1604%" height="15" fill="rgb(221,193,54)"/><text x="15.6473%" y="143.50"></text></g><g><title>evaluate_obligation (285,991 samples, 0.10%)</title><rect x="15.4548%" y="117" width="0.1029%" height="15" fill="rgb(248,212,6)"/><text x="15.7048%" y="127.50"></text></g><g><title>is_copy_raw (414,906 samples, 0.15%)</title><rect x="19.4793%" y="69" width="0.1493%" height="15" fill="rgb(208,68,35)"/><text x="19.7293%" y="79.50"></text></g><g><title>evaluate_obligation (328,044 samples, 0.12%)</title><rect x="19.5105%" y="53" width="0.1180%" height="15" fill="rgb(232,128,0)"/><text x="19.7605%" y="63.50"></text></g><g><title>is_copy_raw (318,654 samples, 0.11%)</title><rect x="19.7258%" y="37" width="0.1146%" height="15" fill="rgb(207,160,47)"/><text x="19.9758%" y="47.50"></text></g><g><title>adt_drop_tys (351,194 samples, 0.13%)</title><rect x="19.7193%" y="53" width="0.1264%" height="15" fill="rgb(228,23,34)"/><text x="19.9693%" y="63.50"></text></g><g><title>needs_drop_raw (2,753,914 samples, 0.99%)</title><rect x="19.6285%" y="69" width="0.9908%" height="15" fill="rgb(218,30,26)"/><text x="19.8785%" y="79.50"></text></g><g><title>is_copy_raw (2,150,477 samples, 0.77%)</title><rect x="19.8456%" y="53" width="0.7737%" height="15" fill="rgb(220,122,19)"/><text x="20.0956%" y="63.50"></text></g><g><title>evaluate_obligation (1,555,341 samples, 0.56%)</title><rect x="20.0598%" y="37" width="0.5596%" height="15" fill="rgb(250,228,42)"/><text x="20.3098%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (947,334 samples, 0.34%)</title><rect x="20.8027%" y="53" width="0.3408%" height="15" fill="rgb(240,193,28)"/><text x="21.0527%" y="63.50"></text></g><g><title>resolve_instance (1,531,463 samples, 0.55%)</title><rect x="20.6193%" y="69" width="0.5510%" height="15" fill="rgb(216,20,37)"/><text x="20.8693%" y="79.50"></text></g><g><title>thir_body (2,070,864 samples, 0.75%)</title><rect x="21.2037%" y="69" width="0.7450%" height="15" fill="rgb(206,188,39)"/><text x="21.4537%" y="79.50"></text></g><g><title>mir_const (16,226,804 samples, 5.84%)</title><rect x="16.1944%" y="117" width="5.8380%" height="15" fill="rgb(217,207,13)"/><text x="16.4444%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (14,237,948 samples, 5.12%)</title><rect x="16.9099%" y="101" width="5.1225%" height="15" fill="rgb(231,73,38)"/><text x="17.1599%" y="111.50">unsafe..</text></g><g><title>mir_built (12,926,104 samples, 4.65%)</title><rect x="17.3819%" y="85" width="4.6505%" height="15" fill="rgb(225,20,46)"/><text x="17.6319%" y="95.50">mir_b..</text></g><g><title>mir_const (303,515 samples, 0.11%)</title><rect x="22.3003%" y="101" width="0.1092%" height="15" fill="rgb(210,31,41)"/><text x="22.5503%" y="111.50"></text></g><g><title>mir_promoted (19,099,834 samples, 6.87%)</title><rect x="15.5577%" y="133" width="6.8716%" height="15" fill="rgb(221,200,47)"/><text x="15.8077%" y="143.50">mir_promo..</text></g><g><title>mir_const_qualif (1,103,381 samples, 0.40%)</title><rect x="22.0324%" y="117" width="0.3970%" height="15" fill="rgb(226,26,5)"/><text x="22.2824%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (328,885 samples, 0.12%)</title><rect x="22.4295%" y="133" width="0.1183%" height="15" fill="rgb(249,33,26)"/><text x="22.6795%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (1,654,219 samples, 0.60%)</title><rect x="22.5478%" y="133" width="0.5951%" height="15" fill="rgb(235,183,28)"/><text x="22.7978%" y="143.50"></text></g><g><title>normalize_projection_ty (976,411 samples, 0.35%)</title><rect x="22.7917%" y="117" width="0.3513%" height="15" fill="rgb(221,5,38)"/><text x="23.0417%" y="127.50"></text></g><g><title>type_op_prove_predicate (7,237,841 samples, 2.60%)</title><rect x="23.2087%" y="133" width="2.6040%" height="15" fill="rgb(247,18,42)"/><text x="23.4587%" y="143.50">ty..</text></g><g><title>MIR_borrow_checking (58,480,398 samples, 21.04%)</title><rect x="4.7734%" y="165" width="21.0398%" height="15" fill="rgb(241,131,45)"/><text x="5.0234%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (58,127,775 samples, 20.91%)</title><rect x="4.9003%" y="149" width="20.9129%" height="15" fill="rgb(249,31,29)"/><text x="5.1503%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (508,606 samples, 0.18%)</title><rect x="25.8132%" y="165" width="0.1830%" height="15" fill="rgb(225,111,53)"/><text x="26.0632%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (341,294 samples, 0.12%)</title><rect x="25.8734%" y="149" width="0.1228%" height="15" fill="rgb(238,160,17)"/><text x="26.1234%" y="159.50"></text></g><g><title>hir_module_items (416,513 samples, 0.15%)</title><rect x="25.9962%" y="165" width="0.1499%" height="15" fill="rgb(214,148,48)"/><text x="26.2462%" y="175.50"></text></g><g><title>should_inherit_track_caller (341,774 samples, 0.12%)</title><rect x="26.4091%" y="117" width="0.1230%" height="15" fill="rgb(232,36,49)"/><text x="26.6591%" y="127.50"></text></g><g><title>codegen_fn_attrs (610,687 samples, 0.22%)</title><rect x="26.3179%" y="133" width="0.2197%" height="15" fill="rgb(209,103,24)"/><text x="26.5679%" y="143.50"></text></g><g><title>check_mod_attrs (1,061,761 samples, 0.38%)</title><rect x="26.1557%" y="149" width="0.3820%" height="15" fill="rgb(229,88,8)"/><text x="26.4057%" y="159.50"></text></g><g><title>lookup_deprecation_entry (332,503 samples, 0.12%)</title><rect x="26.8136%" y="133" width="0.1196%" height="15" fill="rgb(213,181,19)"/><text x="27.0636%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (751,029 samples, 0.27%)</title><rect x="26.6885%" y="149" width="0.2702%" height="15" fill="rgb(254,191,54)"/><text x="26.9385%" y="159.50"></text></g><g><title>misc_checking_1 (2,339,446 samples, 0.84%)</title><rect x="26.1462%" y="165" width="0.8417%" height="15" fill="rgb(241,83,37)"/><text x="26.3962%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (950,340 samples, 0.34%)</title><rect x="26.9886%" y="149" width="0.3419%" height="15" fill="rgb(233,36,39)"/><text x="27.2386%" y="159.50"></text></g><g><title>check_mod_liveness (791,359 samples, 0.28%)</title><rect x="27.0458%" y="133" width="0.2847%" height="15" fill="rgb(226,3,54)"/><text x="27.2958%" y="143.50"></text></g><g><title>misc_checking_2 (1,823,360 samples, 0.66%)</title><rect x="26.9879%" y="165" width="0.6560%" height="15" fill="rgb(245,192,40)"/><text x="27.2379%" y="175.50"></text></g><g><title>match_checking (871,040 samples, 0.31%)</title><rect x="27.3305%" y="149" width="0.3134%" height="15" fill="rgb(238,167,29)"/><text x="27.5805%" y="159.50"></text></g><g><title>check_match (792,428 samples, 0.29%)</title><rect x="27.3588%" y="133" width="0.2851%" height="15" fill="rgb(232,182,51)"/><text x="27.6088%" y="143.50"></text></g><g><title>check_private_in_public (537,066 samples, 0.19%)</title><rect x="27.6477%" y="149" width="0.1932%" height="15" fill="rgb(231,60,39)"/><text x="27.8977%" y="159.50"></text></g><g><title>death_checking (785,879 samples, 0.28%)</title><rect x="27.8410%" y="149" width="0.2827%" height="15" fill="rgb(208,69,12)"/><text x="28.0910%" y="159.50"></text></g><g><title>crate_lints (1,322,825 samples, 0.48%)</title><rect x="28.1242%" y="133" width="0.4759%" height="15" fill="rgb(235,93,37)"/><text x="28.3742%" y="143.50"></text></g><g><title>type_of (350,975 samples, 0.13%)</title><rect x="28.4738%" y="117" width="0.1263%" height="15" fill="rgb(213,116,39)"/><text x="28.7238%" y="127.50"></text></g><g><title>lint_checking (2,098,144 samples, 0.75%)</title><rect x="28.1237%" y="149" width="0.7549%" height="15" fill="rgb(222,207,29)"/><text x="28.3737%" y="159.50"></text></g><g><title>module_lints (773,929 samples, 0.28%)</title><rect x="28.6001%" y="133" width="0.2784%" height="15" fill="rgb(206,96,30)"/><text x="28.8501%" y="143.50"></text></g><g><title>lint_mod (769,099 samples, 0.28%)</title><rect x="28.6019%" y="117" width="0.2767%" height="15" fill="rgb(218,138,4)"/><text x="28.8519%" y="127.50"></text></g><g><title>privacy_access_levels (776,969 samples, 0.28%)</title><rect x="28.8786%" y="149" width="0.2795%" height="15" fill="rgb(250,191,14)"/><text x="29.1286%" y="159.50"></text></g><g><title>privacy_checking_modules (1,862,491 samples, 0.67%)</title><rect x="29.1581%" y="149" width="0.6701%" height="15" fill="rgb(239,60,40)"/><text x="29.4081%" y="159.50"></text></g><g><title>check_mod_privacy (1,858,691 samples, 0.67%)</title><rect x="29.1595%" y="133" width="0.6687%" height="15" fill="rgb(206,27,48)"/><text x="29.4095%" y="143.50"></text></g><g><title>misc_checking_3 (6,106,069 samples, 2.20%)</title><rect x="27.6439%" y="165" width="2.1968%" height="15" fill="rgb(225,35,8)"/><text x="27.8939%" y="175.50">m..</text></g><g><title>impl_parent (449,486 samples, 0.16%)</title><rect x="30.3381%" y="101" width="0.1617%" height="15" fill="rgb(250,213,24)"/><text x="30.5881%" y="111.50"></text></g><g><title>impl_trait_ref (1,190,782 samples, 0.43%)</title><rect x="30.5005%" y="101" width="0.4284%" height="15" fill="rgb(247,123,22)"/><text x="30.7505%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,007,251 samples, 0.36%)</title><rect x="30.5665%" y="85" width="0.3624%" height="15" fill="rgb(231,138,38)"/><text x="30.8165%" y="95.50"></text></g><g><title>coherent_trait (3,086,505 samples, 1.11%)</title><rect x="29.8920%" y="133" width="1.1104%" height="15" fill="rgb(231,145,46)"/><text x="30.1420%" y="143.50"></text></g><g><title>specialization_graph_of (3,068,665 samples, 1.10%)</title><rect x="29.8984%" y="117" width="1.1040%" height="15" fill="rgb(251,118,11)"/><text x="30.1484%" y="127.50"></text></g><g><title>coherence_checking (3,236,037 samples, 1.16%)</title><rect x="29.8867%" y="149" width="1.1642%" height="15" fill="rgb(217,147,25)"/><text x="30.1367%" y="159.50"></text></g><g><title>associated_item (458,294 samples, 0.16%)</title><rect x="44.6013%" y="85" width="0.1649%" height="15" fill="rgb(247,81,37)"/><text x="44.8513%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (414,364 samples, 0.15%)</title><rect x="44.6171%" y="69" width="0.1491%" height="15" fill="rgb(209,12,38)"/><text x="44.8671%" y="79.50"></text></g><g><title>associated_items (570,576 samples, 0.21%)</title><rect x="44.5695%" y="101" width="0.2053%" height="15" fill="rgb(227,1,9)"/><text x="44.8195%" y="111.50"></text></g><g><title>dropck_outlives (1,139,282 samples, 0.41%)</title><rect x="44.7880%" y="101" width="0.4099%" height="15" fill="rgb(248,47,43)"/><text x="45.0380%" y="111.50"></text></g><g><title>evaluate_obligation (1,998,366 samples, 0.72%)</title><rect x="45.1979%" y="101" width="0.7190%" height="15" fill="rgb(221,10,30)"/><text x="45.4479%" y="111.50"></text></g><g><title>method_autoderef_steps (1,015,414 samples, 0.37%)</title><rect x="46.0640%" y="101" width="0.3653%" height="15" fill="rgb(210,229,1)"/><text x="46.3140%" y="111.50"></text></g><g><title>evaluate_obligation (499,926 samples, 0.18%)</title><rect x="46.2495%" y="85" width="0.1799%" height="15" fill="rgb(222,148,37)"/><text x="46.4995%" y="95.50"></text></g><g><title>evaluate_obligation (557,407 samples, 0.20%)</title><rect x="48.8086%" y="85" width="0.2005%" height="15" fill="rgb(234,67,33)"/><text x="49.0586%" y="95.50"></text></g><g><title>lint_levels (369,294 samples, 0.13%)</title><rect x="49.1124%" y="85" width="0.1329%" height="15" fill="rgb(247,98,35)"/><text x="49.3624%" y="95.50"></text></g><g><title>typeck (7,540,804 samples, 2.71%)</title><rect x="46.6151%" y="101" width="2.7130%" height="15" fill="rgb(247,138,52)"/><text x="46.8651%" y="111.50">ty..</text></g><g><title>item_bodies_checking (50,774,461 samples, 18.27%)</title><rect x="31.0859%" y="149" width="18.2674%" height="15" fill="rgb(213,79,30)"/><text x="31.3359%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,771,431 samples, 18.27%)</title><rect x="31.0869%" y="133" width="18.2663%" height="15" fill="rgb(246,177,23)"/><text x="31.3369%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (50,531,041 samples, 18.18%)</title><rect x="31.1734%" y="117" width="18.1798%" height="15" fill="rgb(230,62,27)"/><text x="31.4234%" y="127.50">typeck</text></g><g><title>item_types_checking (2,266,856 samples, 0.82%)</title><rect x="49.3533%" y="149" width="0.8156%" height="15" fill="rgb(216,154,8)"/><text x="49.6033%" y="159.50"></text></g><g><title>check_mod_item_types (2,262,376 samples, 0.81%)</title><rect x="49.3549%" y="133" width="0.8139%" height="15" fill="rgb(244,35,45)"/><text x="49.6049%" y="143.50"></text></g><g><title>fn_sig (740,310 samples, 0.27%)</title><rect x="50.4357%" y="117" width="0.2663%" height="15" fill="rgb(251,115,12)"/><text x="50.6857%" y="127.50"></text></g><g><title>is_late_bound_map (837,042 samples, 0.30%)</title><rect x="50.8434%" y="101" width="0.3011%" height="15" fill="rgb(240,54,50)"/><text x="51.0934%" y="111.50"></text></g><g><title>resolve_lifetimes (755,951 samples, 0.27%)</title><rect x="50.8726%" y="85" width="0.2720%" height="15" fill="rgb(233,84,52)"/><text x="51.1226%" y="95.50"></text></g><g><title>generics_of (1,467,697 samples, 0.53%)</title><rect x="50.7021%" y="117" width="0.5280%" height="15" fill="rgb(207,117,47)"/><text x="50.9521%" y="127.50"></text></g><g><title>late_bound_vars_map (362,547 samples, 0.13%)</title><rect x="51.7372%" y="69" width="0.1304%" height="15" fill="rgb(249,43,39)"/><text x="51.9872%" y="79.50"></text></g><g><title>resolve_lifetimes (326,637 samples, 0.12%)</title><rect x="51.7501%" y="53" width="0.1175%" height="15" fill="rgb(209,38,44)"/><text x="52.0001%" y="63.50"></text></g><g><title>explicit_predicates_of (1,262,506 samples, 0.45%)</title><rect x="51.4338%" y="85" width="0.4542%" height="15" fill="rgb(236,212,23)"/><text x="51.6838%" y="95.50"></text></g><g><title>predicates_of (2,408,569 samples, 0.87%)</title><rect x="51.2817%" y="117" width="0.8665%" height="15" fill="rgb(242,79,21)"/><text x="51.5317%" y="127.50"></text></g><g><title>predicates_defined_on (2,237,427 samples, 0.80%)</title><rect x="51.3433%" y="101" width="0.8050%" height="15" fill="rgb(211,96,35)"/><text x="51.5933%" y="111.50"></text></g><g><title>inferred_outlives_of (723,178 samples, 0.26%)</title><rect x="51.8880%" y="85" width="0.2602%" height="15" fill="rgb(253,215,40)"/><text x="52.1380%" y="95.50"></text></g><g><title>inferred_outlives_crate (667,738 samples, 0.24%)</title><rect x="51.9080%" y="69" width="0.2402%" height="15" fill="rgb(211,81,21)"/><text x="52.1580%" y="79.50"></text></g><g><title>type_of (421,326 samples, 0.15%)</title><rect x="51.9966%" y="53" width="0.1516%" height="15" fill="rgb(208,190,38)"/><text x="52.2466%" y="63.50"></text></g><g><title>type_collecting (5,961,457 samples, 2.14%)</title><rect x="50.1699%" y="149" width="2.1448%" height="15" fill="rgb(235,213,38)"/><text x="50.4199%" y="159.50">t..</text></g><g><title>collect_mod_item_types (5,951,267 samples, 2.14%)</title><rect x="50.1736%" y="133" width="2.1411%" height="15" fill="rgb(237,122,38)"/><text x="50.4236%" y="143.50">c..</text></g><g><title>type_of (408,551 samples, 0.15%)</title><rect x="52.1677%" y="117" width="0.1470%" height="15" fill="rgb(244,218,35)"/><text x="52.4177%" y="127.50"></text></g><g><title>evaluate_obligation (1,382,309 samples, 0.50%)</title><rect x="55.5208%" y="117" width="0.4973%" height="15" fill="rgb(240,68,47)"/><text x="55.7708%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,517,873 samples, 0.55%)</title><rect x="56.0181%" y="117" width="0.5461%" height="15" fill="rgb(210,16,53)"/><text x="56.2681%" y="127.50"></text></g><g><title>param_env (1,399,674 samples, 0.50%)</title><rect x="56.5642%" y="117" width="0.5036%" height="15" fill="rgb(235,124,12)"/><text x="56.8142%" y="127.50"></text></g><g><title>region_scope_tree (792,570 samples, 0.29%)</title><rect x="57.0790%" y="117" width="0.2851%" height="15" fill="rgb(224,169,11)"/><text x="57.3290%" y="127.50"></text></g><g><title>check_impl_item_well_formed (13,414,094 samples, 4.83%)</title><rect x="52.5406%" y="133" width="4.8261%" height="15" fill="rgb(250,166,2)"/><text x="52.7906%" y="143.50">check_..</text></g><g><title>implied_outlives_bounds (560,414 samples, 0.20%)</title><rect x="59.6179%" y="117" width="0.2016%" height="15" fill="rgb(242,216,29)"/><text x="59.8679%" y="127.50"></text></g><g><title>param_env (1,168,134 samples, 0.42%)</title><rect x="59.8196%" y="117" width="0.4203%" height="15" fill="rgb(230,116,27)"/><text x="60.0696%" y="127.50"></text></g><g><title>check_item_well_formed (8,330,454 samples, 3.00%)</title><rect x="57.3666%" y="133" width="2.9971%" height="15" fill="rgb(228,99,48)"/><text x="57.6166%" y="143.50">che..</text></g><g><title>param_env (291,993 samples, 0.11%)</title><rect x="61.0787%" y="117" width="0.1051%" height="15" fill="rgb(253,11,6)"/><text x="61.3287%" y="127.50"></text></g><g><title>analysis (157,410,302 samples, 56.63%)</title><rect x="4.5778%" y="181" width="56.6324%" height="15" fill="rgb(247,143,39)"/><text x="4.8278%" y="191.50">analysis</text></g><g><title>type_check_crate (87,191,652 samples, 31.37%)</title><rect x="29.8407%" y="165" width="31.3694%" height="15" fill="rgb(236,97,10)"/><text x="30.0907%" y="175.50">type_check_crate</text></g><g><title>wf_checking (24,711,858 samples, 8.89%)</title><rect x="52.3194%" y="149" width="8.8907%" height="15" fill="rgb(233,208,19)"/><text x="52.5694%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (2,352,507 samples, 0.85%)</title><rect x="60.3637%" y="133" width="0.8464%" height="15" fill="rgb(216,164,2)"/><text x="60.6137%" y="143.50"></text></g><g><title>fn_abi_of_instance (359,055 samples, 0.13%)</title><rect x="61.8204%" y="149" width="0.1292%" height="15" fill="rgb(220,129,5)"/><text x="62.0704%" y="159.50"></text></g><g><title>codegen_module (1,257,474 samples, 0.45%)</title><rect x="61.5103%" y="165" width="0.4524%" height="15" fill="rgb(242,17,10)"/><text x="61.7603%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (349,474 samples, 0.13%)</title><rect x="61.9749%" y="133" width="0.1257%" height="15" fill="rgb(242,107,0)"/><text x="62.2249%" y="143.50"></text></g><g><title>monomorphization_collector (402,344 samples, 0.14%)</title><rect x="61.9740%" y="149" width="0.1448%" height="15" fill="rgb(251,28,31)"/><text x="62.2240%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (477,186 samples, 0.17%)</title><rect x="61.9631%" y="165" width="0.1717%" height="15" fill="rgb(233,223,10)"/><text x="62.2131%" y="175.50"></text></g><g><title>codegen_crate (2,583,819 samples, 0.93%)</title><rect x="61.2122%" y="181" width="0.9296%" height="15" fill="rgb(215,21,27)"/><text x="61.4622%" y="191.50"></text></g><g><title>codegen_module_optimize (13,865,956 samples, 4.99%)</title><rect x="62.1418%" y="181" width="4.9886%" height="15" fill="rgb(232,23,21)"/><text x="62.3918%" y="191.50">codege..</text></g><g><title>LLVM_module_optimize (11,143,596 samples, 4.01%)</title><rect x="63.1212%" y="165" width="4.0092%" height="15" fill="rgb(244,5,23)"/><text x="63.3712%" y="175.50">LLVM..</text></g><g><title>LLVM_lto_optimize (4,582,421 samples, 1.65%)</title><rect x="67.6172%" y="165" width="1.6486%" height="15" fill="rgb(226,81,46)"/><text x="67.8672%" y="175.50"></text></g><g><title>LLVM_module_codegen (13,733,105 samples, 4.94%)</title><rect x="69.2659%" y="165" width="4.9408%" height="15" fill="rgb(247,70,30)"/><text x="69.5159%" y="175.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (13,425,410 samples, 4.83%)</title><rect x="69.3766%" y="149" width="4.8301%" height="15" fill="rgb(212,68,19)"/><text x="69.6266%" y="159.50">LLVM_m..</text></g><g><title>codegen_module_perform_lto (19,797,202 samples, 7.12%)</title><rect x="67.1304%" y="181" width="7.1225%" height="15" fill="rgb(240,187,13)"/><text x="67.3804%" y="191.50">codegen_mo..</text></g><g><title>AST_validation (282,713 samples, 0.10%)</title><rect x="74.2973%" y="165" width="0.1017%" height="15" fill="rgb(223,113,26)"/><text x="74.5473%" y="175.50"></text></g><g><title>macro_expand_crate (19,050,575 samples, 6.85%)</title><rect x="74.4611%" y="165" width="6.8539%" height="15" fill="rgb(206,192,2)"/><text x="74.7111%" y="175.50">macro_exp..</text></g><g><title>expand_crate (19,035,595 samples, 6.85%)</title><rect x="74.4665%" y="149" width="6.8485%" height="15" fill="rgb(241,108,4)"/><text x="74.7165%" y="159.50">expand_cr..</text></g><g><title>pre_AST_expansion_lint_checks (545,358 samples, 0.20%)</title><rect x="81.1188%" y="133" width="0.1962%" height="15" fill="rgb(247,173,49)"/><text x="81.3688%" y="143.50"></text></g><g><title>late_resolve_crate (3,195,947 samples, 1.15%)</title><rect x="81.4126%" y="149" width="1.1498%" height="15" fill="rgb(224,114,35)"/><text x="81.6626%" y="159.50"></text></g><g><title>configure_and_expand (23,306,832 samples, 8.39%)</title><rect x="74.2530%" y="181" width="8.3852%" height="15" fill="rgb(245,159,27)"/><text x="74.5030%" y="191.50">configure_an..</text></g><g><title>resolve_crate (3,612,501 samples, 1.30%)</title><rect x="81.3385%" y="165" width="1.2997%" height="15" fill="rgb(245,172,44)"/><text x="81.5885%" y="175.50"></text></g><g><title>drop_ast (640,367 samples, 0.23%)</title><rect x="82.6382%" y="181" width="0.2304%" height="15" fill="rgb(236,23,11)"/><text x="82.8882%" y="191.50"></text></g><g><title>early_lint_checks (768,759 samples, 0.28%)</title><rect x="82.8743%" y="181" width="0.2766%" height="15" fill="rgb(205,117,38)"/><text x="83.1243%" y="191.50"></text></g><g><title>free_global_ctxt (2,980,714 samples, 1.07%)</title><rect x="83.1508%" y="181" width="1.0724%" height="15" fill="rgb(237,72,25)"/><text x="83.4008%" y="191.50"></text></g><g><title>reachable_non_generics (299,323 samples, 0.11%)</title><rect x="86.0269%" y="149" width="0.1077%" height="15" fill="rgb(244,70,9)"/><text x="86.2769%" y="159.50"></text></g><g><title>exported_symbols (399,274 samples, 0.14%)</title><rect x="86.0214%" y="165" width="0.1436%" height="15" fill="rgb(217,125,39)"/><text x="86.2714%" y="175.50"></text></g><g><title>is_sized_raw (898,482 samples, 0.32%)</title><rect x="89.3462%" y="133" width="0.3233%" height="15" fill="rgb(235,36,10)"/><text x="89.5962%" y="143.50"></text></g><g><title>evaluate_obligation (541,736 samples, 0.19%)</title><rect x="89.4745%" y="117" width="0.1949%" height="15" fill="rgb(251,123,47)"/><text x="89.7245%" y="127.50"></text></g><g><title>is_sized_raw (569,134 samples, 0.20%)</title><rect x="89.7314%" y="117" width="0.2048%" height="15" fill="rgb(221,13,13)"/><text x="89.9814%" y="127.50"></text></g><g><title>evaluate_obligation (386,242 samples, 0.14%)</title><rect x="89.7972%" y="101" width="0.1390%" height="15" fill="rgb(238,131,9)"/><text x="90.0472%" y="111.50"></text></g><g><title>layout_of (844,305 samples, 0.30%)</title><rect x="89.6694%" y="133" width="0.3038%" height="15" fill="rgb(211,50,8)"/><text x="89.9194%" y="143.50"></text></g><g><title>layout_of (2,686,207 samples, 0.97%)</title><rect x="89.0642%" y="149" width="0.9664%" height="15" fill="rgb(245,182,24)"/><text x="89.3142%" y="159.50"></text></g><g><title>needs_drop_raw (1,253,118 samples, 0.45%)</title><rect x="92.7033%" y="133" width="0.4508%" height="15" fill="rgb(242,14,37)"/><text x="92.9533%" y="143.50"></text></g><g><title>is_copy_raw (1,103,786 samples, 0.40%)</title><rect x="92.7570%" y="117" width="0.3971%" height="15" fill="rgb(246,228,12)"/><text x="93.0070%" y="127.50"></text></g><g><title>evaluate_obligation (729,101 samples, 0.26%)</title><rect x="92.8918%" y="101" width="0.2623%" height="15" fill="rgb(213,55,15)"/><text x="93.1418%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (9,026,554 samples, 3.25%)</title><rect x="90.0306%" y="149" width="3.2475%" height="15" fill="rgb(209,9,3)"/><text x="90.2806%" y="159.50">mir..</text></g><g><title>optimized_mir (19,407,531 samples, 6.98%)</title><rect x="86.3035%" y="165" width="6.9824%" height="15" fill="rgb(230,59,30)"/><text x="86.5535%" y="175.50">optimized..</text></g><g><title>generate_crate_metadata (25,446,116 samples, 9.15%)</title><rect x="84.2232%" y="181" width="9.1549%" height="15" fill="rgb(209,121,21)"/><text x="84.4732%" y="191.50">generate_crat..</text></g><g><title>hir_lowering (6,850,457 samples, 2.46%)</title><rect x="93.3781%" y="181" width="2.4646%" height="15" fill="rgb(220,109,13)"/><text x="93.6281%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (7,777,238 samples, 2.80%)</title><rect x="95.8484%" y="165" width="2.7981%" height="15" fill="rgb(232,18,1)"/><text x="96.0984%" y="175.50">fi..</text></g><g><title>link_crate (1,550,087 samples, 0.56%)</title><rect x="98.6464%" y="165" width="0.5577%" height="15" fill="rgb(215,41,42)"/><text x="98.8964%" y="175.50"></text></g><g><title>link_binary (1,445,256 samples, 0.52%)</title><rect x="98.6842%" y="149" width="0.5200%" height="15" fill="rgb(224,123,36)"/><text x="98.9342%" y="159.50"></text></g><g><title>link_rlib (1,089,152 samples, 0.39%)</title><rect x="98.8123%" y="133" width="0.3919%" height="15" fill="rgb(240,125,3)"/><text x="99.0623%" y="143.50"></text></g><g><title>link (9,350,876 samples, 3.36%)</title><rect x="95.8427%" y="181" width="3.3642%" height="15" fill="rgb(205,98,50)"/><text x="96.0927%" y="191.50">link</text></g><g><title>parse_crate (303,193 samples, 0.11%)</title><rect x="99.2070%" y="181" width="0.1091%" height="15" fill="rgb(205,185,37)"/><text x="99.4570%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,048,881 samples, 0.38%)</title><rect x="99.3921%" y="181" width="0.3774%" height="15" fill="rgb(238,207,15)"/><text x="99.6421%" y="191.50"></text></g><g><title>all (277,951,208 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (277,951,208 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (551,616 samples, 0.20%)</title><rect x="99.8015%" y="181" width="0.1985%" height="15" fill="rgb(207,46,11)"/><text x="100.0515%" y="191.50"></text></g></svg></svg>