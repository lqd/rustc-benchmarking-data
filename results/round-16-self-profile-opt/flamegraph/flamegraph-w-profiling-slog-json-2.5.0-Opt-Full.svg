<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (34,876,850 samples, 11.91%)</title><rect x="0.1737%" y="197" width="11.9127%" height="15" fill="rgb(227,0,7)"/><text x="0.4237%" y="207.50">LLVM_passes</text></g><g><title>adt_drop_tys (345,704 samples, 0.12%)</title><rect x="19.9014%" y="69" width="0.1181%" height="15" fill="rgb(217,0,24)"/><text x="20.1514%" y="79.50"></text></g><g><title>is_copy_raw (897,758 samples, 0.31%)</title><rect x="20.0202%" y="69" width="0.3066%" height="15" fill="rgb(221,193,54)"/><text x="20.2702%" y="79.50"></text></g><g><title>evaluate_obligation (715,497 samples, 0.24%)</title><rect x="20.0824%" y="53" width="0.2444%" height="15" fill="rgb(248,212,6)"/><text x="20.3324%" y="63.50"></text></g><g><title>needs_drop_raw (1,454,956 samples, 0.50%)</title><rect x="19.8427%" y="85" width="0.4970%" height="15" fill="rgb(208,68,35)"/><text x="20.0927%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (438,914 samples, 0.15%)</title><rect x="20.4109%" y="69" width="0.1499%" height="15" fill="rgb(232,128,0)"/><text x="20.6609%" y="79.50"></text></g><g><title>specialization_graph_of (1,405,855 samples, 0.48%)</title><rect x="20.5746%" y="69" width="0.4802%" height="15" fill="rgb(207,160,47)"/><text x="20.8246%" y="79.50"></text></g><g><title>impl_trait_ref (727,369 samples, 0.25%)</title><rect x="20.8063%" y="53" width="0.2484%" height="15" fill="rgb(228,23,34)"/><text x="21.0563%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (629,599 samples, 0.22%)</title><rect x="20.8397%" y="37" width="0.2150%" height="15" fill="rgb(218,30,26)"/><text x="21.0897%" y="47.50"></text></g><g><title>resolve_instance (2,214,762 samples, 0.76%)</title><rect x="20.3396%" y="85" width="0.7565%" height="15" fill="rgb(220,122,19)"/><text x="20.5896%" y="95.50"></text></g><g><title>thir_body (1,155,977 samples, 0.39%)</title><rect x="21.1066%" y="85" width="0.3948%" height="15" fill="rgb(250,228,42)"/><text x="21.3566%" y="95.50"></text></g><g><title>mir_const (10,327,827 samples, 3.53%)</title><rect x="18.0268%" y="133" width="3.5276%" height="15" fill="rgb(240,193,28)"/><text x="18.2768%" y="143.50">mir..</text></g><g><title>unsafety_check_result (9,155,254 samples, 3.13%)</title><rect x="18.4273%" y="117" width="3.1271%" height="15" fill="rgb(216,20,37)"/><text x="18.6773%" y="127.50">uns..</text></g><g><title>mir_built (8,294,211 samples, 2.83%)</title><rect x="18.7214%" y="101" width="2.8330%" height="15" fill="rgb(206,188,39)"/><text x="18.9714%" y="111.50">mi..</text></g><g><title>mir_const_qualif (637,298 samples, 0.22%)</title><rect x="21.5544%" y="133" width="0.2177%" height="15" fill="rgb(217,207,13)"/><text x="21.8044%" y="143.50"></text></g><g><title>mir_promoted (12,043,365 samples, 4.11%)</title><rect x="17.6586%" y="149" width="4.1136%" height="15" fill="rgb(231,73,38)"/><text x="17.9086%" y="159.50">mir_..</text></g><g><title>type_op_ascribe_user_type (880,791 samples, 0.30%)</title><rect x="21.7722%" y="149" width="0.3008%" height="15" fill="rgb(225,20,46)"/><text x="22.0222%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (673,815 samples, 0.23%)</title><rect x="22.0730%" y="149" width="0.2302%" height="15" fill="rgb(210,31,41)"/><text x="22.3230%" y="159.50"></text></g><g><title>type_op_normalize_predicate (366,115 samples, 0.13%)</title><rect x="22.3046%" y="149" width="0.1251%" height="15" fill="rgb(221,200,47)"/><text x="22.5546%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,015,350 samples, 1.37%)</title><rect x="22.4826%" y="149" width="1.3715%" height="15" fill="rgb(226,26,5)"/><text x="22.7326%" y="159.50"></text></g><g><title>MIR_borrow_checking (34,206,343 samples, 11.68%)</title><rect x="12.1743%" y="181" width="11.6836%" height="15" fill="rgb(249,33,26)"/><text x="12.4243%" y="191.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (34,069,911 samples, 11.64%)</title><rect x="12.2209%" y="165" width="11.6370%" height="15" fill="rgb(235,183,28)"/><text x="12.4709%" y="175.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (326,551 samples, 0.11%)</title><rect x="24.0691%" y="149" width="0.1115%" height="15" fill="rgb(221,5,38)"/><text x="24.3191%" y="159.50"></text></g><g><title>check_mod_attrs (524,715 samples, 0.18%)</title><rect x="24.0014%" y="165" width="0.1792%" height="15" fill="rgb(247,18,42)"/><text x="24.2514%" y="175.50"></text></g><g><title>misc_checking_1 (968,530 samples, 0.33%)</title><rect x="23.9959%" y="181" width="0.3308%" height="15" fill="rgb(241,131,45)"/><text x="24.2459%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (464,665 samples, 0.16%)</title><rect x="24.3273%" y="165" width="0.1587%" height="15" fill="rgb(249,31,29)"/><text x="24.5773%" y="175.50"></text></g><g><title>check_mod_liveness (392,264 samples, 0.13%)</title><rect x="24.3521%" y="149" width="0.1340%" height="15" fill="rgb(225,111,53)"/><text x="24.6021%" y="159.50"></text></g><g><title>misc_checking_2 (1,174,273 samples, 0.40%)</title><rect x="24.3268%" y="181" width="0.4011%" height="15" fill="rgb(238,160,17)"/><text x="24.5768%" y="191.50"></text></g><g><title>match_checking (707,918 samples, 0.24%)</title><rect x="24.4861%" y="165" width="0.2418%" height="15" fill="rgb(214,148,48)"/><text x="24.7361%" y="175.50"></text></g><g><title>check_match (673,938 samples, 0.23%)</title><rect x="24.4977%" y="149" width="0.2302%" height="15" fill="rgb(232,36,49)"/><text x="24.7477%" y="159.50"></text></g><g><title>eval_to_allocation_raw (317,984 samples, 0.11%)</title><rect x="25.0757%" y="133" width="0.1086%" height="15" fill="rgb(209,103,24)"/><text x="25.3257%" y="143.50"></text></g><g><title>eval_to_allocation_raw (317,094 samples, 0.11%)</title><rect x="25.0760%" y="117" width="0.1083%" height="15" fill="rgb(229,88,8)"/><text x="25.3260%" y="127.50"></text></g><g><title>crate_lints (3,860,673 samples, 1.32%)</title><rect x="24.8429%" y="149" width="1.3187%" height="15" fill="rgb(213,181,19)"/><text x="25.0929%" y="159.50"></text></g><g><title>type_of (2,498,649 samples, 0.85%)</title><rect x="25.3081%" y="133" width="0.8534%" height="15" fill="rgb(254,191,54)"/><text x="25.5581%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (2,237,526 samples, 0.76%)</title><rect x="25.3973%" y="117" width="0.7643%" height="15" fill="rgb(241,83,37)"/><text x="25.6473%" y="127.50"></text></g><g><title>lint_checking (4,280,888 samples, 1.46%)</title><rect x="24.8422%" y="165" width="1.4622%" height="15" fill="rgb(233,36,39)"/><text x="25.0922%" y="175.50"></text></g><g><title>module_lints (418,125 samples, 0.14%)</title><rect x="26.1616%" y="149" width="0.1428%" height="15" fill="rgb(226,3,54)"/><text x="26.4116%" y="159.50"></text></g><g><title>lint_mod (414,565 samples, 0.14%)</title><rect x="26.1628%" y="133" width="0.1416%" height="15" fill="rgb(245,192,40)"/><text x="26.4128%" y="143.50"></text></g><g><title>privacy_checking_modules (813,779 samples, 0.28%)</title><rect x="26.3486%" y="165" width="0.2780%" height="15" fill="rgb(238,167,29)"/><text x="26.5986%" y="175.50"></text></g><g><title>check_mod_privacy (812,149 samples, 0.28%)</title><rect x="26.3492%" y="149" width="0.2774%" height="15" fill="rgb(232,182,51)"/><text x="26.5992%" y="159.50"></text></g><g><title>misc_checking_3 (5,570,893 samples, 1.90%)</title><rect x="24.7279%" y="181" width="1.9028%" height="15" fill="rgb(231,60,39)"/><text x="24.9779%" y="191.50">m..</text></g><g><title>associated_items (341,965 samples, 0.12%)</title><rect x="37.6957%" y="101" width="0.1168%" height="15" fill="rgb(208,69,12)"/><text x="37.9457%" y="111.50"></text></g><g><title>dropck_outlives (580,617 samples, 0.20%)</title><rect x="37.8265%" y="101" width="0.1983%" height="15" fill="rgb(235,93,37)"/><text x="38.0765%" y="111.50"></text></g><g><title>trait_impls_of (689,539 samples, 0.24%)</title><rect x="38.8352%" y="85" width="0.2355%" height="15" fill="rgb(213,116,39)"/><text x="39.0852%" y="95.50"></text></g><g><title>evaluate_obligation (3,071,523 samples, 1.05%)</title><rect x="38.0248%" y="101" width="1.0491%" height="15" fill="rgb(222,207,29)"/><text x="38.2748%" y="111.50"></text></g><g><title>is_copy_raw (481,277 samples, 0.16%)</title><rect x="39.2896%" y="101" width="0.1644%" height="15" fill="rgb(206,96,30)"/><text x="39.5396%" y="111.50"></text></g><g><title>evaluate_obligation (411,426 samples, 0.14%)</title><rect x="39.3135%" y="85" width="0.1405%" height="15" fill="rgb(218,138,4)"/><text x="39.5635%" y="95.50"></text></g><g><title>method_autoderef_steps (320,723 samples, 0.11%)</title><rect x="39.5590%" y="101" width="0.1095%" height="15" fill="rgb(250,191,14)"/><text x="39.8090%" y="111.50"></text></g><g><title>object_safety_violations (345,134 samples, 0.12%)</title><rect x="39.6698%" y="101" width="0.1179%" height="15" fill="rgb(239,60,40)"/><text x="39.9198%" y="111.50"></text></g><g><title>predicates_of (419,125 samples, 0.14%)</title><rect x="39.7960%" y="101" width="0.1432%" height="15" fill="rgb(206,27,48)"/><text x="40.0460%" y="111.50"></text></g><g><title>predicates_defined_on (294,572 samples, 0.10%)</title><rect x="39.8385%" y="85" width="0.1006%" height="15" fill="rgb(225,35,8)"/><text x="40.0885%" y="95.50"></text></g><g><title>typeck (34,287,653 samples, 11.71%)</title><rect x="28.3151%" y="117" width="11.7114%" height="15" fill="rgb(250,213,24)"/><text x="28.5651%" y="127.50">typeck</text></g><g><title>item_bodies_checking (38,959,336 samples, 13.31%)</title><rect x="26.7229%" y="165" width="13.3071%" height="15" fill="rgb(247,123,22)"/><text x="26.9729%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,956,226 samples, 13.31%)</title><rect x="26.7239%" y="149" width="13.3060%" height="15" fill="rgb(231,138,38)"/><text x="26.9739%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (38,899,013 samples, 13.29%)</title><rect x="26.7435%" y="133" width="13.2865%" height="15" fill="rgb(231,145,46)"/><text x="26.9935%" y="143.50">typeck</text></g><g><title>coherent_trait (469,565 samples, 0.16%)</title><rect x="40.4764%" y="53" width="0.1604%" height="15" fill="rgb(251,118,11)"/><text x="40.7264%" y="63.50"></text></g><g><title>specialization_graph_of (467,815 samples, 0.16%)</title><rect x="40.4770%" y="37" width="0.1598%" height="15" fill="rgb(217,147,25)"/><text x="40.7270%" y="47.50"></text></g><g><title>adt_destructor (476,605 samples, 0.16%)</title><rect x="40.4743%" y="85" width="0.1628%" height="15" fill="rgb(247,81,37)"/><text x="40.7243%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (474,895 samples, 0.16%)</title><rect x="40.4748%" y="69" width="0.1622%" height="15" fill="rgb(209,12,38)"/><text x="40.7248%" y="79.50"></text></g><g><title>dropck_outlives (618,227 samples, 0.21%)</title><rect x="40.4590%" y="117" width="0.2112%" height="15" fill="rgb(227,1,9)"/><text x="40.7090%" y="127.50"></text></g><g><title>adt_dtorck_constraint (592,127 samples, 0.20%)</title><rect x="40.4679%" y="101" width="0.2022%" height="15" fill="rgb(248,47,43)"/><text x="40.7179%" y="111.50"></text></g><g><title>item_types_checking (1,990,772 samples, 0.68%)</title><rect x="40.0299%" y="165" width="0.6800%" height="15" fill="rgb(221,10,30)"/><text x="40.2799%" y="175.50"></text></g><g><title>check_mod_item_types (1,988,172 samples, 0.68%)</title><rect x="40.0308%" y="149" width="0.6791%" height="15" fill="rgb(210,229,1)"/><text x="40.2808%" y="159.50"></text></g><g><title>typeck (1,112,393 samples, 0.38%)</title><rect x="40.3300%" y="133" width="0.3800%" height="15" fill="rgb(222,148,37)"/><text x="40.5800%" y="143.50"></text></g><g><title>late_bound_vars_map (363,883 samples, 0.12%)</title><rect x="40.9440%" y="85" width="0.1243%" height="15" fill="rgb(234,67,33)"/><text x="41.1940%" y="95.50"></text></g><g><title>resolve_lifetimes (357,813 samples, 0.12%)</title><rect x="40.9460%" y="69" width="0.1222%" height="15" fill="rgb(247,98,35)"/><text x="41.1960%" y="79.50"></text></g><g><title>explicit_predicates_of (473,455 samples, 0.16%)</title><rect x="40.9097%" y="101" width="0.1617%" height="15" fill="rgb(247,138,52)"/><text x="41.1597%" y="111.50"></text></g><g><title>predicates_of (790,608 samples, 0.27%)</title><rect x="40.8874%" y="133" width="0.2700%" height="15" fill="rgb(213,79,30)"/><text x="41.1374%" y="143.50"></text></g><g><title>predicates_defined_on (766,178 samples, 0.26%)</title><rect x="40.8958%" y="117" width="0.2617%" height="15" fill="rgb(246,177,23)"/><text x="41.1458%" y="127.50"></text></g><g><title>type_collecting (1,437,126 samples, 0.49%)</title><rect x="40.7106%" y="165" width="0.4909%" height="15" fill="rgb(230,62,27)"/><text x="40.9606%" y="175.50"></text></g><g><title>collect_mod_item_types (1,426,876 samples, 0.49%)</title><rect x="40.7141%" y="149" width="0.4874%" height="15" fill="rgb(216,154,8)"/><text x="40.9641%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,487,418 samples, 0.85%)</title><rect x="41.2384%" y="149" width="0.8496%" height="15" fill="rgb(244,35,45)"/><text x="41.4884%" y="159.50"></text></g><g><title>evaluate_obligation (330,424 samples, 0.11%)</title><rect x="42.2600%" y="133" width="0.1129%" height="15" fill="rgb(251,115,12)"/><text x="42.5100%" y="143.50"></text></g><g><title>analysis (89,093,638 samples, 30.43%)</title><rect x="12.0864%" y="197" width="30.4311%" height="15" fill="rgb(240,54,50)"/><text x="12.3364%" y="207.50">analysis</text></g><g><title>type_check_crate (46,512,181 samples, 15.89%)</title><rect x="26.6307%" y="181" width="15.8869%" height="15" fill="rgb(233,84,52)"/><text x="26.8807%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,848,383 samples, 1.31%)</title><rect x="41.2031%" y="165" width="1.3145%" height="15" fill="rgb(207,117,47)"/><text x="41.4531%" y="175.50"></text></g><g><title>check_item_well_formed (1,257,584 samples, 0.43%)</title><rect x="42.0880%" y="149" width="0.4295%" height="15" fill="rgb(249,43,39)"/><text x="42.3380%" y="159.50"></text></g><g><title>layout_of (870,350 samples, 0.30%)</title><rect x="46.5031%" y="149" width="0.2973%" height="15" fill="rgb(209,38,44)"/><text x="46.7531%" y="159.50"></text></g><g><title>predicates_of (406,694 samples, 0.14%)</title><rect x="47.0193%" y="133" width="0.1389%" height="15" fill="rgb(236,212,23)"/><text x="47.2693%" y="143.50"></text></g><g><title>predicates_defined_on (296,703 samples, 0.10%)</title><rect x="47.0568%" y="117" width="0.1013%" height="15" fill="rgb(242,79,21)"/><text x="47.3068%" y="127.50"></text></g><g><title>param_env (1,050,151 samples, 0.36%)</title><rect x="46.8004%" y="149" width="0.3587%" height="15" fill="rgb(211,96,35)"/><text x="47.0504%" y="159.50"></text></g><g><title>fn_abi_of_instance (3,442,411 samples, 1.18%)</title><rect x="46.0258%" y="165" width="1.1758%" height="15" fill="rgb(253,215,40)"/><text x="46.2758%" y="175.50"></text></g><g><title>codegen_module (12,757,022 samples, 4.36%)</title><rect x="42.9888%" y="181" width="4.3573%" height="15" fill="rgb(211,81,21)"/><text x="43.2388%" y="191.50">codeg..</text></g><g><title>item_attrs (877,401 samples, 0.30%)</title><rect x="47.5843%" y="117" width="0.2997%" height="15" fill="rgb(208,190,38)"/><text x="47.8343%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (858,470 samples, 0.29%)</title><rect x="47.5908%" y="101" width="0.2932%" height="15" fill="rgb(235,213,38)"/><text x="47.8408%" y="111.50"></text></g><g><title>codegen_fn_attrs (1,130,832 samples, 0.39%)</title><rect x="47.5435%" y="133" width="0.3863%" height="15" fill="rgb(237,122,38)"/><text x="47.7935%" y="143.50"></text></g><g><title>mir_shims (366,435 samples, 0.13%)</title><rect x="48.0210%" y="133" width="0.1252%" height="15" fill="rgb(244,218,35)"/><text x="48.2710%" y="143.50"></text></g><g><title>optimized_mir (721,171 samples, 0.25%)</title><rect x="48.1463%" y="133" width="0.2463%" height="15" fill="rgb(240,68,47)"/><text x="48.3963%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (700,100 samples, 0.24%)</title><rect x="48.1535%" y="117" width="0.2391%" height="15" fill="rgb(210,16,53)"/><text x="48.4035%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (439,024 samples, 0.15%)</title><rect x="48.4803%" y="117" width="0.1500%" height="15" fill="rgb(235,124,12)"/><text x="48.7303%" y="127.50"></text></g><g><title>resolve_instance (1,116,632 samples, 0.38%)</title><rect x="48.3926%" y="133" width="0.3814%" height="15" fill="rgb(224,169,11)"/><text x="48.6426%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (4,327,358 samples, 1.48%)</title><rect x="47.3564%" y="149" width="1.4781%" height="15" fill="rgb(250,166,2)"/><text x="47.6064%" y="159.50"></text></g><g><title>monomorphization_collector (4,354,539 samples, 1.49%)</title><rect x="47.3556%" y="165" width="1.4874%" height="15" fill="rgb(242,216,29)"/><text x="47.6056%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (651,147 samples, 0.22%)</title><rect x="48.8442%" y="149" width="0.2224%" height="15" fill="rgb(230,116,27)"/><text x="49.0942%" y="159.50"></text></g><g><title>symbol_name (598,657 samples, 0.20%)</title><rect x="48.8621%" y="133" width="0.2045%" height="15" fill="rgb(228,99,48)"/><text x="49.1121%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (5,267,419 samples, 1.80%)</title><rect x="47.3478%" y="181" width="1.7992%" height="15" fill="rgb(253,11,6)"/><text x="47.5978%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (890,150 samples, 0.30%)</title><rect x="48.8429%" y="165" width="0.3040%" height="15" fill="rgb(247,143,39)"/><text x="49.0929%" y="175.50"></text></g><g><title>codegen_crate (19,483,588 samples, 6.65%)</title><rect x="42.5199%" y="197" width="6.6549%" height="15" fill="rgb(236,97,10)"/><text x="42.7699%" y="207.50">codegen_c..</text></g><g><title>codegen_module_optimize (57,633,047 samples, 19.69%)</title><rect x="49.1748%" y="197" width="19.6853%" height="15" fill="rgb(233,208,19)"/><text x="49.4248%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (52,611,178 samples, 17.97%)</title><rect x="50.8900%" y="181" width="17.9701%" height="15" fill="rgb(216,164,2)"/><text x="51.1400%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (7,294,342 samples, 2.49%)</title><rect x="70.0136%" y="181" width="2.4915%" height="15" fill="rgb(220,129,5)"/><text x="70.2636%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen (20,190,508 samples, 6.90%)</title><rect x="72.5051%" y="181" width="6.8963%" height="15" fill="rgb(242,17,10)"/><text x="72.7551%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (19,475,539 samples, 6.65%)</title><rect x="72.7493%" y="165" width="6.6521%" height="15" fill="rgb(242,107,0)"/><text x="72.9993%" y="175.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (31,091,088 samples, 10.62%)</title><rect x="68.8601%" y="197" width="10.6196%" height="15" fill="rgb(251,28,31)"/><text x="69.1101%" y="207.50">codegen_module_..</text></g><g><title>macro_expand_crate (11,238,176 samples, 3.84%)</title><rect x="79.5880%" y="181" width="3.8385%" height="15" fill="rgb(233,223,10)"/><text x="79.8380%" y="191.50">macr..</text></g><g><title>expand_crate (11,228,725 samples, 3.84%)</title><rect x="79.5913%" y="165" width="3.8353%" height="15" fill="rgb(215,21,27)"/><text x="79.8413%" y="175.50">expa..</text></g><g><title>metadata_register_crate (1,320,164 samples, 0.45%)</title><rect x="82.9757%" y="149" width="0.4509%" height="15" fill="rgb(232,23,21)"/><text x="83.2257%" y="159.50"></text></g><g><title>metadata_register_crate (444,127 samples, 0.15%)</title><rect x="83.2749%" y="133" width="0.1517%" height="15" fill="rgb(244,5,23)"/><text x="83.5249%" y="143.50"></text></g><g><title>late_resolve_crate (2,760,151 samples, 0.94%)</title><rect x="83.5269%" y="165" width="0.9428%" height="15" fill="rgb(226,81,46)"/><text x="83.7769%" y="175.50"></text></g><g><title>configure_and_expand (14,677,695 samples, 5.01%)</title><rect x="79.4797%" y="197" width="5.0134%" height="15" fill="rgb(247,70,30)"/><text x="79.7297%" y="207.50">config..</text></g><g><title>resolve_crate (2,995,993 samples, 1.02%)</title><rect x="83.4697%" y="181" width="1.0233%" height="15" fill="rgb(212,68,19)"/><text x="83.7197%" y="191.50"></text></g><g><title>free_global_ctxt (4,280,688 samples, 1.46%)</title><rect x="84.6347%" y="197" width="1.4621%" height="15" fill="rgb(240,187,13)"/><text x="84.8847%" y="207.50"></text></g><g><title>layout_of (385,864 samples, 0.13%)</title><rect x="88.3030%" y="149" width="0.1318%" height="15" fill="rgb(223,113,26)"/><text x="88.5530%" y="159.50"></text></g><g><title>layout_of (1,225,373 samples, 0.42%)</title><rect x="88.0848%" y="165" width="0.4185%" height="15" fill="rgb(206,192,2)"/><text x="88.3348%" y="175.50"></text></g><g><title>is_copy_raw (455,946 samples, 0.16%)</title><rect x="90.2604%" y="133" width="0.1557%" height="15" fill="rgb(241,108,4)"/><text x="90.5104%" y="143.50"></text></g><g><title>evaluate_obligation (378,346 samples, 0.13%)</title><rect x="90.2869%" y="117" width="0.1292%" height="15" fill="rgb(247,173,49)"/><text x="90.5369%" y="127.50"></text></g><g><title>needs_drop_raw (597,297 samples, 0.20%)</title><rect x="90.2386%" y="149" width="0.2040%" height="15" fill="rgb(224,114,35)"/><text x="90.4886%" y="159.50"></text></g><g><title>optimized_mir (10,935,071 samples, 3.74%)</title><rect x="86.7324%" y="181" width="3.7350%" height="15" fill="rgb(245,159,27)"/><text x="86.9824%" y="191.50">opti..</text></g><g><title>mir_drops_elaborated_and_const_checked (5,750,326 samples, 1.96%)</title><rect x="88.5034%" y="165" width="1.9641%" height="15" fill="rgb(245,172,44)"/><text x="88.7534%" y="175.50">m..</text></g><g><title>promoted_mir (389,356 samples, 0.13%)</title><rect x="90.4675%" y="181" width="0.1330%" height="15" fill="rgb(236,23,11)"/><text x="90.7175%" y="191.50"></text></g><g><title>generate_crate_metadata (13,206,468 samples, 4.51%)</title><rect x="86.0968%" y="197" width="4.5108%" height="15" fill="rgb(205,117,38)"/><text x="86.3468%" y="207.50">gener..</text></g><g><title>hir_lowering (2,305,216 samples, 0.79%)</title><rect x="90.6077%" y="197" width="0.7874%" height="15" fill="rgb(237,72,25)"/><text x="90.8577%" y="207.50"></text></g><g><title>finish_ongoing_codegen (20,650,241 samples, 7.05%)</title><rect x="91.4019%" y="181" width="7.0534%" height="15" fill="rgb(244,70,9)"/><text x="91.6519%" y="191.50">finish_on..</text></g><g><title>link_crate (1,555,048 samples, 0.53%)</title><rect x="98.4553%" y="181" width="0.5311%" height="15" fill="rgb(217,125,39)"/><text x="98.7053%" y="191.50"></text></g><g><title>link_binary (1,535,697 samples, 0.52%)</title><rect x="98.4619%" y="165" width="0.5245%" height="15" fill="rgb(235,36,10)"/><text x="98.7119%" y="175.50"></text></g><g><title>link_rlib (1,043,292 samples, 0.36%)</title><rect x="98.6301%" y="149" width="0.3564%" height="15" fill="rgb(251,123,47)"/><text x="98.8801%" y="159.50"></text></g><g><title>link (22,237,629 samples, 7.60%)</title><rect x="91.3951%" y="197" width="7.5956%" height="15" fill="rgb(221,13,13)"/><text x="91.6451%" y="207.50">link</text></g><g><title>parse_crate (1,247,484 samples, 0.43%)</title><rect x="98.9906%" y="197" width="0.4261%" height="15" fill="rgb(238,131,9)"/><text x="99.2406%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,024,621 samples, 0.35%)</title><rect x="99.4904%" y="197" width="0.3500%" height="15" fill="rgb(211,50,8)"/><text x="99.7404%" y="207.50"></text></g><g><title>all (292,771,429 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(245,182,24)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (292,771,429 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (372,504 samples, 0.13%)</title><rect x="99.8728%" y="197" width="0.1272%" height="15" fill="rgb(246,228,12)"/><text x="100.1228%" y="207.50"></text></g></svg></svg>