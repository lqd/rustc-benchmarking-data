<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (172,943,378 samples, 21.94%)</title><rect x="0.1214%" y="197" width="21.9420%" height="15" fill="rgb(227,0,7)"/><text x="0.3714%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,098,483 samples, 0.14%)</title><rect x="21.9240%" y="181" width="0.1394%" height="15" fill="rgb(217,0,24)"/><text x="22.1740%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,045,971 samples, 0.13%)</title><rect x="21.9307%" y="165" width="0.1327%" height="15" fill="rgb(221,193,54)"/><text x="22.1807%" y="175.50"></text></g><g><title>impl_parent (865,387 samples, 0.11%)</title><rect x="25.8910%" y="53" width="0.1098%" height="15" fill="rgb(248,212,6)"/><text x="26.1410%" y="63.50"></text></g><g><title>specialization_graph_of (3,457,449 samples, 0.44%)</title><rect x="25.7878%" y="69" width="0.4387%" height="15" fill="rgb(208,68,35)"/><text x="26.0378%" y="79.50"></text></g><g><title>impl_trait_ref (1,778,863 samples, 0.23%)</title><rect x="26.0008%" y="53" width="0.2257%" height="15" fill="rgb(232,128,0)"/><text x="26.2508%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,584,470 samples, 0.20%)</title><rect x="26.0254%" y="37" width="0.2010%" height="15" fill="rgb(207,160,47)"/><text x="26.2754%" y="47.50"></text></g><g><title>resolve_instance (4,054,745 samples, 0.51%)</title><rect x="25.7212%" y="85" width="0.5144%" height="15" fill="rgb(228,23,34)"/><text x="25.9712%" y="95.50"></text></g><g><title>thir_body (928,255 samples, 0.12%)</title><rect x="26.2418%" y="85" width="0.1178%" height="15" fill="rgb(218,30,26)"/><text x="26.4918%" y="95.50"></text></g><g><title>mir_const (11,102,980 samples, 1.41%)</title><rect x="24.9549%" y="133" width="1.4087%" height="15" fill="rgb(220,122,19)"/><text x="25.2049%" y="143.50"></text></g><g><title>unsafety_check_result (9,890,881 samples, 1.25%)</title><rect x="25.1087%" y="117" width="1.2549%" height="15" fill="rgb(250,228,42)"/><text x="25.3587%" y="127.50"></text></g><g><title>mir_built (9,025,772 samples, 1.15%)</title><rect x="25.2184%" y="101" width="1.1451%" height="15" fill="rgb(240,193,28)"/><text x="25.4684%" y="111.50"></text></g><g><title>mir_promoted (14,664,609 samples, 1.86%)</title><rect x="24.7658%" y="149" width="1.8606%" height="15" fill="rgb(216,20,37)"/><text x="25.0158%" y="159.50">m..</text></g><g><title>mir_const_qualif (2,071,784 samples, 0.26%)</title><rect x="26.3636%" y="133" width="0.2629%" height="15" fill="rgb(206,188,39)"/><text x="26.6136%" y="143.50"></text></g><g><title>mir_const (1,627,957 samples, 0.21%)</title><rect x="26.4199%" y="117" width="0.2065%" height="15" fill="rgb(217,207,13)"/><text x="26.6699%" y="127.50"></text></g><g><title>unsafety_check_result (1,126,911 samples, 0.14%)</title><rect x="26.4834%" y="101" width="0.1430%" height="15" fill="rgb(231,73,38)"/><text x="26.7334%" y="111.50"></text></g><g><title>mir_built (970,830 samples, 0.12%)</title><rect x="26.5032%" y="85" width="0.1232%" height="15" fill="rgb(225,20,46)"/><text x="26.7532%" y="95.50"></text></g><g><title>type_op_prove_predicate (3,294,096 samples, 0.42%)</title><rect x="26.7093%" y="149" width="0.4179%" height="15" fill="rgb(210,31,41)"/><text x="26.9593%" y="159.50"></text></g><g><title>MIR_borrow_checking (39,242,748 samples, 4.98%)</title><rect x="22.1486%" y="181" width="4.9789%" height="15" fill="rgb(221,200,47)"/><text x="22.3986%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (38,852,842 samples, 4.93%)</title><rect x="22.1981%" y="165" width="4.9294%" height="15" fill="rgb(226,26,5)"/><text x="22.4481%" y="175.50">mir_bo..</text></g><g><title>MIR_effect_checking (1,016,051 samples, 0.13%)</title><rect x="27.1275%" y="181" width="0.1289%" height="15" fill="rgb(249,33,26)"/><text x="27.3775%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (876,099 samples, 0.11%)</title><rect x="27.1453%" y="165" width="0.1112%" height="15" fill="rgb(235,183,28)"/><text x="27.3953%" y="175.50"></text></g><g><title>codegen_fn_attrs (848,762 samples, 0.11%)</title><rect x="27.3877%" y="149" width="0.1077%" height="15" fill="rgb(221,5,38)"/><text x="27.6377%" y="159.50"></text></g><g><title>check_mod_attrs (1,343,065 samples, 0.17%)</title><rect x="27.3250%" y="165" width="0.1704%" height="15" fill="rgb(247,18,42)"/><text x="27.5750%" y="175.50"></text></g><g><title>misc_checking_1 (2,631,689 samples, 0.33%)</title><rect x="27.3218%" y="181" width="0.3339%" height="15" fill="rgb(241,131,45)"/><text x="27.5718%" y="191.50"></text></g><g><title>misc_checking_2 (1,031,951 samples, 0.13%)</title><rect x="27.6557%" y="181" width="0.1309%" height="15" fill="rgb(249,31,29)"/><text x="27.9057%" y="191.50"></text></g><g><title>crate_lints (3,031,434 samples, 0.38%)</title><rect x="27.8793%" y="149" width="0.3846%" height="15" fill="rgb(225,111,53)"/><text x="28.1293%" y="159.50"></text></g><g><title>type_of (2,190,676 samples, 0.28%)</title><rect x="27.9860%" y="133" width="0.2779%" height="15" fill="rgb(238,160,17)"/><text x="28.2360%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,939,041 samples, 0.25%)</title><rect x="28.0179%" y="117" width="0.2460%" height="15" fill="rgb(214,148,48)"/><text x="28.2679%" y="127.50"></text></g><g><title>lint_checking (3,455,579 samples, 0.44%)</title><rect x="27.8791%" y="165" width="0.4384%" height="15" fill="rgb(232,36,49)"/><text x="28.1291%" y="175.50"></text></g><g><title>privacy_checking_modules (995,151 samples, 0.13%)</title><rect x="28.3710%" y="165" width="0.1263%" height="15" fill="rgb(209,103,24)"/><text x="28.6210%" y="175.50"></text></g><g><title>check_mod_privacy (993,541 samples, 0.13%)</title><rect x="28.3712%" y="149" width="0.1261%" height="15" fill="rgb(229,88,8)"/><text x="28.6212%" y="159.50"></text></g><g><title>misc_checking_3 (5,620,513 samples, 0.71%)</title><rect x="27.7866%" y="181" width="0.7131%" height="15" fill="rgb(213,181,19)"/><text x="28.0366%" y="191.50"></text></g><g><title>coherent_trait (1,524,667 samples, 0.19%)</title><rect x="28.5156%" y="149" width="0.1934%" height="15" fill="rgb(254,191,54)"/><text x="28.7656%" y="159.50"></text></g><g><title>specialization_graph_of (1,508,727 samples, 0.19%)</title><rect x="28.5176%" y="133" width="0.1914%" height="15" fill="rgb(241,83,37)"/><text x="28.7676%" y="143.50"></text></g><g><title>coherence_checking (1,603,288 samples, 0.20%)</title><rect x="28.5143%" y="165" width="0.2034%" height="15" fill="rgb(233,36,39)"/><text x="28.7643%" y="175.50"></text></g><g><title>associated_item (1,071,014 samples, 0.14%)</title><rect x="31.9081%" y="101" width="0.1359%" height="15" fill="rgb(226,3,54)"/><text x="32.1581%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (833,660 samples, 0.11%)</title><rect x="31.9382%" y="85" width="0.1058%" height="15" fill="rgb(245,192,40)"/><text x="32.1882%" y="95.50"></text></g><g><title>associated_items (1,707,999 samples, 0.22%)</title><rect x="31.8325%" y="117" width="0.2167%" height="15" fill="rgb(238,167,29)"/><text x="32.0825%" y="127.50"></text></g><g><title>evaluate_obligation (2,379,956 samples, 0.30%)</title><rect x="32.0800%" y="117" width="0.3020%" height="15" fill="rgb(232,182,51)"/><text x="32.3300%" y="127.50"></text></g><g><title>param_env (973,331 samples, 0.12%)</title><rect x="32.5015%" y="117" width="0.1235%" height="15" fill="rgb(231,60,39)"/><text x="32.7515%" y="127.50"></text></g><g><title>item_bodies_checking (31,480,260 samples, 3.99%)</title><rect x="28.7261%" y="165" width="3.9940%" height="15" fill="rgb(208,69,12)"/><text x="28.9761%" y="175.50">item..</text></g><g><title>typeck_item_bodies (31,477,100 samples, 3.99%)</title><rect x="28.7265%" y="149" width="3.9936%" height="15" fill="rgb(235,93,37)"/><text x="28.9765%" y="159.50">type..</text></g><g><title>typeck (31,195,560 samples, 3.96%)</title><rect x="28.7622%" y="133" width="3.9579%" height="15" fill="rgb(213,116,39)"/><text x="29.0122%" y="143.50">type..</text></g><g><title>item_types_checking (3,507,550 samples, 0.45%)</title><rect x="32.7201%" y="165" width="0.4450%" height="15" fill="rgb(222,207,29)"/><text x="32.9701%" y="175.50"></text></g><g><title>check_mod_item_types (3,505,850 samples, 0.44%)</title><rect x="32.7204%" y="149" width="0.4448%" height="15" fill="rgb(206,96,30)"/><text x="32.9704%" y="159.50"></text></g><g><title>named_region_map (1,123,516 samples, 0.14%)</title><rect x="33.4474%" y="117" width="0.1425%" height="15" fill="rgb(218,138,4)"/><text x="33.6974%" y="127.50"></text></g><g><title>resolve_lifetimes (1,006,416 samples, 0.13%)</title><rect x="33.4623%" y="101" width="0.1277%" height="15" fill="rgb(250,191,14)"/><text x="33.7123%" y="111.50"></text></g><g><title>generics_of (1,884,978 samples, 0.24%)</title><rect x="33.3583%" y="133" width="0.2392%" height="15" fill="rgb(239,60,40)"/><text x="33.6083%" y="143.50"></text></g><g><title>predicates_of (1,169,202 samples, 0.15%)</title><rect x="33.6186%" y="133" width="0.1483%" height="15" fill="rgb(206,27,48)"/><text x="33.8686%" y="143.50"></text></g><g><title>predicates_defined_on (970,520 samples, 0.12%)</title><rect x="33.6438%" y="117" width="0.1231%" height="15" fill="rgb(225,35,8)"/><text x="33.8938%" y="127.50"></text></g><g><title>type_collecting (5,316,279 samples, 0.67%)</title><rect x="33.1654%" y="165" width="0.6745%" height="15" fill="rgb(250,213,24)"/><text x="33.4154%" y="175.50"></text></g><g><title>collect_mod_item_types (5,306,059 samples, 0.67%)</title><rect x="33.1667%" y="149" width="0.6732%" height="15" fill="rgb(247,123,22)"/><text x="33.4167%" y="159.50"></text></g><g><title>evaluate_obligation (1,654,845 samples, 0.21%)</title><rect x="34.5273%" y="133" width="0.2100%" height="15" fill="rgb(231,138,38)"/><text x="34.7773%" y="143.50"></text></g><g><title>check_impl_item_well_formed (8,358,453 samples, 1.06%)</title><rect x="33.8968%" y="149" width="1.0605%" height="15" fill="rgb(231,145,46)"/><text x="34.1468%" y="159.50"></text></g><g><title>evaluate_obligation (2,455,524 samples, 0.31%)</title><rect x="35.3006%" y="133" width="0.3115%" height="15" fill="rgb(251,118,11)"/><text x="35.5506%" y="143.50"></text></g><g><title>check_item_well_formed (6,277,856 samples, 0.80%)</title><rect x="34.9573%" y="149" width="0.7965%" height="15" fill="rgb(217,147,25)"/><text x="35.2073%" y="159.50"></text></g><g><title>analysis (108,414,228 samples, 13.75%)</title><rect x="22.0634%" y="197" width="13.7549%" height="15" fill="rgb(247,81,37)"/><text x="22.3134%" y="207.50">analysis</text></g><g><title>type_check_crate (57,684,413 samples, 7.32%)</title><rect x="28.4997%" y="181" width="7.3187%" height="15" fill="rgb(209,12,38)"/><text x="28.7497%" y="191.50">type_check..</text></g><g><title>wf_checking (15,577,703 samples, 1.98%)</title><rect x="33.8419%" y="165" width="1.9764%" height="15" fill="rgb(227,1,9)"/><text x="34.0919%" y="175.50">w..</text></g><g><title>param_env (1,092,873 samples, 0.14%)</title><rect x="37.7053%" y="149" width="0.1387%" height="15" fill="rgb(248,47,43)"/><text x="37.9553%" y="159.50"></text></g><g><title>fn_abi_of_instance (4,519,048 samples, 0.57%)</title><rect x="37.2826%" y="165" width="0.5733%" height="15" fill="rgb(221,10,30)"/><text x="37.5326%" y="175.50"></text></g><g><title>codegen_module (15,605,443 samples, 1.98%)</title><rect x="36.0165%" y="181" width="1.9799%" height="15" fill="rgb(210,229,1)"/><text x="36.2665%" y="191.50">c..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,032,151 samples, 0.26%)</title><rect x="38.6345%" y="117" width="0.2578%" height="15" fill="rgb(222,148,37)"/><text x="38.8845%" y="127.50"></text></g><g><title>optimized_mir (6,726,403 samples, 0.85%)</title><rect x="38.1977%" y="133" width="0.8534%" height="15" fill="rgb(234,67,33)"/><text x="38.4477%" y="143.50"></text></g><g><title>resolve_instance (1,844,016 samples, 0.23%)</title><rect x="39.0511%" y="133" width="0.2340%" height="15" fill="rgb(247,98,35)"/><text x="39.3011%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (10,471,197 samples, 1.33%)</title><rect x="38.0004%" y="149" width="1.3285%" height="15" fill="rgb(247,138,52)"/><text x="38.2504%" y="159.50"></text></g><g><title>monomorphization_collector (10,626,439 samples, 1.35%)</title><rect x="38.0001%" y="165" width="1.3482%" height="15" fill="rgb(213,79,30)"/><text x="38.2501%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (11,496,639 samples, 1.46%)</title><rect x="37.9968%" y="181" width="1.4586%" height="15" fill="rgb(246,177,23)"/><text x="38.2468%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (843,760 samples, 0.11%)</title><rect x="39.3484%" y="165" width="0.1071%" height="15" fill="rgb(230,62,27)"/><text x="39.5984%" y="175.50"></text></g><g><title>codegen_crate (28,720,071 samples, 3.64%)</title><rect x="35.8196%" y="197" width="3.6438%" height="15" fill="rgb(216,154,8)"/><text x="36.0696%" y="207.50">code..</text></g><g><title>codegen_module_optimize (96,832,359 samples, 12.29%)</title><rect x="39.4634%" y="197" width="12.2855%" height="15" fill="rgb(244,35,45)"/><text x="39.7134%" y="207.50">codegen_module_opt..</text></g><g><title>LLVM_module_optimize (86,291,001 samples, 10.95%)</title><rect x="40.8009%" y="181" width="10.9481%" height="15" fill="rgb(251,115,12)"/><text x="41.0509%" y="191.50">LLVM_module_opti..</text></g><g><title>LLVM_lto_optimize (75,787,704 samples, 9.62%)</title><rect x="52.5336%" y="181" width="9.6155%" height="15" fill="rgb(240,54,50)"/><text x="52.7836%" y="191.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (81,312,257 samples, 10.32%)</title><rect x="62.1491%" y="181" width="10.3164%" height="15" fill="rgb(233,84,52)"/><text x="62.3991%" y="191.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (80,528,437 samples, 10.22%)</title><rect x="62.2486%" y="165" width="10.2170%" height="15" fill="rgb(207,117,47)"/><text x="62.4986%" y="175.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (3,359,818 samples, 0.43%)</title><rect x="72.4655%" y="181" width="0.4263%" height="15" fill="rgb(249,43,39)"/><text x="72.7155%" y="191.50"></text></g><g><title>codegen_module_perform_lto (167,136,221 samples, 21.21%)</title><rect x="51.7489%" y="197" width="21.2052%" height="15" fill="rgb(209,38,44)"/><text x="51.9989%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (23,752,385 samples, 3.01%)</title><rect x="73.0289%" y="181" width="3.0136%" height="15" fill="rgb(236,212,23)"/><text x="73.2789%" y="191.50">mac..</text></g><g><title>expand_crate (23,738,495 samples, 3.01%)</title><rect x="73.0307%" y="165" width="3.0118%" height="15" fill="rgb(242,79,21)"/><text x="73.2807%" y="175.50">exp..</text></g><g><title>metadata_register_crate (2,329,276 samples, 0.30%)</title><rect x="75.7469%" y="149" width="0.2955%" height="15" fill="rgb(211,96,35)"/><text x="75.9969%" y="159.50"></text></g><g><title>metadata_register_crate (823,241 samples, 0.10%)</title><rect x="75.9380%" y="133" width="0.1044%" height="15" fill="rgb(253,215,40)"/><text x="76.1880%" y="143.50"></text></g><g><title>late_resolve_crate (3,306,276 samples, 0.42%)</title><rect x="76.1217%" y="165" width="0.4195%" height="15" fill="rgb(211,81,21)"/><text x="76.3717%" y="175.50"></text></g><g><title>configure_and_expand (28,443,207 samples, 3.61%)</title><rect x="72.9542%" y="197" width="3.6087%" height="15" fill="rgb(208,190,38)"/><text x="73.2042%" y="207.50">conf..</text></g><g><title>resolve_crate (3,924,763 samples, 0.50%)</title><rect x="76.0649%" y="181" width="0.4980%" height="15" fill="rgb(235,213,38)"/><text x="76.3149%" y="191.50"></text></g><g><title>free_global_ctxt (5,248,908 samples, 0.67%)</title><rect x="76.7002%" y="197" width="0.6659%" height="15" fill="rgb(237,122,38)"/><text x="76.9502%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,478,154 samples, 0.19%)</title><rect x="78.0996%" y="165" width="0.1875%" height="15" fill="rgb(244,218,35)"/><text x="78.3496%" y="175.50"></text></g><g><title>impl_trait_ref (1,154,482 samples, 0.15%)</title><rect x="78.5025%" y="133" width="0.1465%" height="15" fill="rgb(240,68,47)"/><text x="78.7525%" y="143.50"></text></g><g><title>specialization_graph_of (2,759,991 samples, 0.35%)</title><rect x="78.2990%" y="149" width="0.3502%" height="15" fill="rgb(210,16,53)"/><text x="78.5490%" y="159.50"></text></g><g><title>resolve_instance (2,857,432 samples, 0.36%)</title><rect x="78.2871%" y="165" width="0.3625%" height="15" fill="rgb(235,124,12)"/><text x="78.5371%" y="175.50"></text></g><g><title>optimized_mir (6,966,906 samples, 0.88%)</title><rect x="77.7807%" y="181" width="0.8839%" height="15" fill="rgb(224,169,11)"/><text x="78.0307%" y="191.50"></text></g><g><title>generate_crate_metadata (10,334,315 samples, 1.31%)</title><rect x="77.3662%" y="197" width="1.3112%" height="15" fill="rgb(250,166,2)"/><text x="77.6162%" y="207.50"></text></g><g><title>hir_lowering (7,789,407 samples, 0.99%)</title><rect x="78.6773%" y="197" width="0.9883%" height="15" fill="rgb(242,216,29)"/><text x="78.9273%" y="207.50"></text></g><g><title>finish_ongoing_codegen (152,814,984 samples, 19.39%)</title><rect x="79.6673%" y="181" width="19.3882%" height="15" fill="rgb(230,116,27)"/><text x="79.9173%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,164,533 samples, 0.15%)</title><rect x="99.0556%" y="181" width="0.1477%" height="15" fill="rgb(228,99,48)"/><text x="99.3056%" y="191.50"></text></g><g><title>link_binary (1,128,583 samples, 0.14%)</title><rect x="99.0602%" y="165" width="0.1432%" height="15" fill="rgb(253,11,6)"/><text x="99.3102%" y="175.50"></text></g><g><title>link (154,003,007 samples, 19.54%)</title><rect x="79.6656%" y="197" width="19.5390%" height="15" fill="rgb(247,143,39)"/><text x="79.9156%" y="207.50">link</text></g><g><title>parse_crate (2,814,942 samples, 0.36%)</title><rect x="99.2046%" y="197" width="0.3571%" height="15" fill="rgb(236,97,10)"/><text x="99.4546%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,672,899 samples, 0.34%)</title><rect x="99.5989%" y="197" width="0.3391%" height="15" fill="rgb(233,208,19)"/><text x="99.8489%" y="207.50"></text></g><g><title>all (788,183,504 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (788,183,504 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>