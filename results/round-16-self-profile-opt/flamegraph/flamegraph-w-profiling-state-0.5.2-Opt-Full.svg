<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (57,515,133 samples, 16.90%)</title><rect x="0.1918%" y="181" width="16.8954%" height="15" fill="rgb(227,0,7)"/><text x="0.4418%" y="191.50">LLVM_passes</text></g><g><title>codegen_fn_attrs (386,692 samples, 0.11%)</title><rect x="20.2052%" y="85" width="0.1136%" height="15" fill="rgb(217,0,24)"/><text x="20.4552%" y="95.50"></text></g><g><title>needs_drop_raw (845,477 samples, 0.25%)</title><rect x="20.9006%" y="69" width="0.2484%" height="15" fill="rgb(221,193,54)"/><text x="21.1506%" y="79.50"></text></g><g><title>is_copy_raw (639,976 samples, 0.19%)</title><rect x="20.9609%" y="53" width="0.1880%" height="15" fill="rgb(248,212,6)"/><text x="21.2109%" y="63.50"></text></g><g><title>evaluate_obligation (501,655 samples, 0.15%)</title><rect x="21.0016%" y="37" width="0.1474%" height="15" fill="rgb(208,68,35)"/><text x="21.2516%" y="47.50"></text></g><g><title>specialization_graph_of (1,022,262 samples, 0.30%)</title><rect x="21.2106%" y="53" width="0.3003%" height="15" fill="rgb(232,128,0)"/><text x="21.4606%" y="63.50"></text></g><g><title>impl_trait_ref (385,837 samples, 0.11%)</title><rect x="21.3976%" y="37" width="0.1133%" height="15" fill="rgb(207,160,47)"/><text x="21.6476%" y="47.50"></text></g><g><title>resolve_instance (1,296,635 samples, 0.38%)</title><rect x="21.1489%" y="69" width="0.3809%" height="15" fill="rgb(228,23,34)"/><text x="21.3989%" y="79.50"></text></g><g><title>thir_body (657,268 samples, 0.19%)</title><rect x="21.5377%" y="69" width="0.1931%" height="15" fill="rgb(218,30,26)"/><text x="21.7877%" y="79.50"></text></g><g><title>mir_const (6,531,741 samples, 1.92%)</title><rect x="19.8176%" y="117" width="1.9187%" height="15" fill="rgb(220,122,19)"/><text x="20.0676%" y="127.50">m..</text></g><g><title>unsafety_check_result (5,564,369 samples, 1.63%)</title><rect x="20.1017%" y="101" width="1.6346%" height="15" fill="rgb(250,228,42)"/><text x="20.3517%" y="111.50"></text></g><g><title>mir_built (4,825,354 samples, 1.42%)</title><rect x="20.3188%" y="85" width="1.4175%" height="15" fill="rgb(240,193,28)"/><text x="20.5688%" y="95.50"></text></g><g><title>mir_const (430,105 samples, 0.13%)</title><rect x="21.8949%" y="101" width="0.1263%" height="15" fill="rgb(216,20,37)"/><text x="22.1449%" y="111.50"></text></g><g><title>unsafety_check_result (355,755 samples, 0.10%)</title><rect x="21.9168%" y="85" width="0.1045%" height="15" fill="rgb(206,188,39)"/><text x="22.1668%" y="95.50"></text></g><g><title>mir_promoted (8,194,791 samples, 2.41%)</title><rect x="19.6233%" y="133" width="2.4073%" height="15" fill="rgb(217,207,13)"/><text x="19.8733%" y="143.50">mi..</text></g><g><title>mir_const_qualif (1,001,661 samples, 0.29%)</title><rect x="21.7363%" y="117" width="0.2942%" height="15" fill="rgb(231,73,38)"/><text x="21.9863%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (423,494 samples, 0.12%)</title><rect x="22.0305%" y="133" width="0.1244%" height="15" fill="rgb(225,20,46)"/><text x="22.2805%" y="143.50"></text></g><g><title>type_op_prove_predicate (2,100,884 samples, 0.62%)</title><rect x="22.2025%" y="133" width="0.6171%" height="15" fill="rgb(210,31,41)"/><text x="22.4525%" y="143.50"></text></g><g><title>MIR_borrow_checking (19,307,566 samples, 5.67%)</title><rect x="17.1502%" y="165" width="5.6717%" height="15" fill="rgb(221,200,47)"/><text x="17.4002%" y="175.50">MIR_bor..</text></g><g><title>mir_borrowck (19,198,393 samples, 5.64%)</title><rect x="17.1823%" y="149" width="5.6396%" height="15" fill="rgb(226,26,5)"/><text x="17.4323%" y="159.50">mir_bor..</text></g><g><title>MIR_effect_checking (357,584 samples, 0.11%)</title><rect x="22.8219%" y="165" width="0.1050%" height="15" fill="rgb(249,33,26)"/><text x="23.0719%" y="175.50"></text></g><g><title>codegen_fn_attrs (348,183 samples, 0.10%)</title><rect x="23.0365%" y="133" width="0.1023%" height="15" fill="rgb(235,183,28)"/><text x="23.2865%" y="143.50"></text></g><g><title>check_mod_attrs (529,086 samples, 0.16%)</title><rect x="22.9834%" y="149" width="0.1554%" height="15" fill="rgb(221,5,38)"/><text x="23.2334%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (385,164 samples, 0.11%)</title><rect x="23.1844%" y="149" width="0.1131%" height="15" fill="rgb(247,18,42)"/><text x="23.4344%" y="159.50"></text></g><g><title>misc_checking_1 (1,150,853 samples, 0.34%)</title><rect x="22.9742%" y="165" width="0.3381%" height="15" fill="rgb(241,131,45)"/><text x="23.2242%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (387,894 samples, 0.11%)</title><rect x="23.3127%" y="149" width="0.1139%" height="15" fill="rgb(249,31,29)"/><text x="23.5627%" y="159.50"></text></g><g><title>misc_checking_2 (740,158 samples, 0.22%)</title><rect x="23.3123%" y="165" width="0.2174%" height="15" fill="rgb(225,111,53)"/><text x="23.5623%" y="175.50"></text></g><g><title>match_checking (350,794 samples, 0.10%)</title><rect x="23.4266%" y="149" width="0.1030%" height="15" fill="rgb(238,160,17)"/><text x="23.6766%" y="159.50"></text></g><g><title>crate_lints (2,103,694 samples, 0.62%)</title><rect x="23.6762%" y="133" width="0.6180%" height="15" fill="rgb(214,148,48)"/><text x="23.9262%" y="143.50"></text></g><g><title>type_of (1,079,402 samples, 0.32%)</title><rect x="23.9771%" y="117" width="0.3171%" height="15" fill="rgb(232,36,49)"/><text x="24.2271%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (839,481 samples, 0.25%)</title><rect x="24.0476%" y="101" width="0.2466%" height="15" fill="rgb(209,103,24)"/><text x="24.2976%" y="111.50"></text></g><g><title>lint_checking (2,397,357 samples, 0.70%)</title><rect x="23.6758%" y="149" width="0.7042%" height="15" fill="rgb(229,88,8)"/><text x="23.9258%" y="159.50"></text></g><g><title>privacy_checking_modules (535,966 samples, 0.16%)</title><rect x="24.4431%" y="149" width="0.1574%" height="15" fill="rgb(213,181,19)"/><text x="24.6931%" y="159.50"></text></g><g><title>check_mod_privacy (531,076 samples, 0.16%)</title><rect x="24.4445%" y="133" width="0.1560%" height="15" fill="rgb(254,191,54)"/><text x="24.6945%" y="143.50"></text></g><g><title>misc_checking_3 (3,660,281 samples, 1.08%)</title><rect x="23.5297%" y="165" width="1.0752%" height="15" fill="rgb(241,83,37)"/><text x="23.7797%" y="175.50"></text></g><g><title>impl_parent (1,867,902 samples, 0.55%)</title><rect x="25.4185%" y="101" width="0.5487%" height="15" fill="rgb(233,36,39)"/><text x="25.6685%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,044,977 samples, 0.31%)</title><rect x="25.6602%" y="85" width="0.3070%" height="15" fill="rgb(226,3,54)"/><text x="25.9102%" y="95.50"></text></g><g><title>impl_trait_ref (4,385,755 samples, 1.29%)</title><rect x="25.9676%" y="101" width="1.2883%" height="15" fill="rgb(245,192,40)"/><text x="26.2176%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,766,417 samples, 1.11%)</title><rect x="26.1495%" y="85" width="1.1064%" height="15" fill="rgb(238,167,29)"/><text x="26.3995%" y="95.50"></text></g><g><title>trait_impls_of (532,266 samples, 0.16%)</title><rect x="27.2729%" y="101" width="0.1564%" height="15" fill="rgb(232,182,51)"/><text x="27.5229%" y="111.50"></text></g><g><title>coherent_trait (9,538,056 samples, 2.80%)</title><rect x="24.6277%" y="133" width="2.8019%" height="15" fill="rgb(231,60,39)"/><text x="24.8777%" y="143.50">co..</text></g><g><title>specialization_graph_of (9,520,006 samples, 2.80%)</title><rect x="24.6330%" y="117" width="2.7966%" height="15" fill="rgb(208,69,12)"/><text x="24.8830%" y="127.50">sp..</text></g><g><title>coherence_checking (9,636,487 samples, 2.83%)</title><rect x="24.6226%" y="149" width="2.8308%" height="15" fill="rgb(235,93,37)"/><text x="24.8726%" y="159.50">co..</text></g><g><title>dropck_outlives (471,066 samples, 0.14%)</title><rect x="30.5866%" y="101" width="0.1384%" height="15" fill="rgb(213,116,39)"/><text x="30.8366%" y="111.50"></text></g><g><title>trait_impls_of (363,254 samples, 0.11%)</title><rect x="31.0900%" y="85" width="0.1067%" height="15" fill="rgb(222,207,29)"/><text x="31.3400%" y="95.50"></text></g><g><title>evaluate_obligation (1,607,606 samples, 0.47%)</title><rect x="30.7249%" y="101" width="0.4722%" height="15" fill="rgb(206,96,30)"/><text x="30.9749%" y="111.50"></text></g><g><title>item_attrs (575,237 samples, 0.17%)</title><rect x="31.3279%" y="101" width="0.1690%" height="15" fill="rgb(218,138,4)"/><text x="31.5779%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (568,667 samples, 0.17%)</title><rect x="31.3298%" y="85" width="0.1670%" height="15" fill="rgb(250,191,14)"/><text x="31.5798%" y="95.50"></text></g><g><title>method_autoderef_steps (398,192 samples, 0.12%)</title><rect x="31.5196%" y="101" width="0.1170%" height="15" fill="rgb(239,60,40)"/><text x="31.7696%" y="111.50"></text></g><g><title>evaluate_obligation (463,645 samples, 0.14%)</title><rect x="33.1225%" y="85" width="0.1362%" height="15" fill="rgb(206,27,48)"/><text x="33.3725%" y="95.50"></text></g><g><title>typeck (5,550,822 samples, 1.63%)</title><rect x="31.8481%" y="101" width="1.6306%" height="15" fill="rgb(225,35,8)"/><text x="32.0981%" y="111.50"></text></g><g><title>item_bodies_checking (20,521,840 samples, 6.03%)</title><rect x="27.4626%" y="149" width="6.0284%" height="15" fill="rgb(250,213,24)"/><text x="27.7126%" y="159.50">item_bod..</text></g><g><title>typeck_item_bodies (20,518,340 samples, 6.03%)</title><rect x="27.4636%" y="133" width="6.0274%" height="15" fill="rgb(247,123,22)"/><text x="27.7136%" y="143.50">typeck_i..</text></g><g><title>typeck (20,449,290 samples, 6.01%)</title><rect x="27.4839%" y="117" width="6.0071%" height="15" fill="rgb(231,138,38)"/><text x="27.7339%" y="127.50">typeck</text></g><g><title>item_types_checking (461,885 samples, 0.14%)</title><rect x="33.4910%" y="149" width="0.1357%" height="15" fill="rgb(231,145,46)"/><text x="33.7410%" y="159.50"></text></g><g><title>check_mod_item_types (455,335 samples, 0.13%)</title><rect x="33.4929%" y="133" width="0.1338%" height="15" fill="rgb(251,118,11)"/><text x="33.7429%" y="143.50"></text></g><g><title>explicit_predicates_of (479,493 samples, 0.14%)</title><rect x="33.8487%" y="85" width="0.1409%" height="15" fill="rgb(217,147,25)"/><text x="34.0987%" y="95.50"></text></g><g><title>predicates_of (897,158 samples, 0.26%)</title><rect x="33.8158%" y="117" width="0.2635%" height="15" fill="rgb(247,81,37)"/><text x="34.0658%" y="127.50"></text></g><g><title>predicates_defined_on (854,678 samples, 0.25%)</title><rect x="33.8283%" y="101" width="0.2511%" height="15" fill="rgb(209,12,38)"/><text x="34.0783%" y="111.50"></text></g><g><title>type_collecting (1,659,709 samples, 0.49%)</title><rect x="33.6274%" y="149" width="0.4875%" height="15" fill="rgb(227,1,9)"/><text x="33.8774%" y="159.50"></text></g><g><title>collect_mod_item_types (1,642,199 samples, 0.48%)</title><rect x="33.6326%" y="133" width="0.4824%" height="15" fill="rgb(248,47,43)"/><text x="33.8826%" y="143.50"></text></g><g><title>evaluate_obligation (523,006 samples, 0.15%)</title><rect x="34.6966%" y="117" width="0.1536%" height="15" fill="rgb(221,10,30)"/><text x="34.9466%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,239,195 samples, 0.95%)</title><rect x="34.1621%" y="133" width="0.9515%" height="15" fill="rgb(210,229,1)"/><text x="34.4121%" y="143.50"></text></g><g><title>evaluate_obligation (473,985 samples, 0.14%)</title><rect x="35.3652%" y="117" width="0.1392%" height="15" fill="rgb(222,148,37)"/><text x="35.6152%" y="127.50"></text></g><g><title>analysis (63,136,396 samples, 18.55%)</title><rect x="17.0872%" y="181" width="18.5467%" height="15" fill="rgb(234,67,33)"/><text x="17.3372%" y="191.50">analysis</text></g><g><title>type_check_crate (37,544,600 samples, 11.03%)</title><rect x="24.6049%" y="165" width="11.0290%" height="15" fill="rgb(247,98,35)"/><text x="24.8549%" y="175.50">type_check_crate</text></g><g><title>wf_checking (5,165,018 samples, 1.52%)</title><rect x="34.1166%" y="149" width="1.5173%" height="15" fill="rgb(247,138,52)"/><text x="34.3666%" y="159.50"></text></g><g><title>check_item_well_formed (1,771,009 samples, 0.52%)</title><rect x="35.1136%" y="133" width="0.5202%" height="15" fill="rgb(213,79,30)"/><text x="35.3636%" y="143.50"></text></g><g><title>layout_of (827,267 samples, 0.24%)</title><rect x="38.5221%" y="133" width="0.2430%" height="15" fill="rgb(246,177,23)"/><text x="38.7721%" y="143.50"></text></g><g><title>predicates_of (463,767 samples, 0.14%)</title><rect x="38.9864%" y="117" width="0.1362%" height="15" fill="rgb(230,62,27)"/><text x="39.2364%" y="127.50"></text></g><g><title>predicates_defined_on (340,452 samples, 0.10%)</title><rect x="39.0226%" y="101" width="0.1000%" height="15" fill="rgb(216,154,8)"/><text x="39.2726%" y="111.50"></text></g><g><title>param_env (1,222,356 samples, 0.36%)</title><rect x="38.7651%" y="133" width="0.3591%" height="15" fill="rgb(244,35,45)"/><text x="39.0151%" y="143.50"></text></g><g><title>fn_abi_of_instance (3,688,299 samples, 1.08%)</title><rect x="38.0752%" y="149" width="1.0835%" height="15" fill="rgb(251,115,12)"/><text x="38.3252%" y="159.50"></text></g><g><title>codegen_module (11,095,485 samples, 3.26%)</title><rect x="35.9731%" y="165" width="3.2594%" height="15" fill="rgb(240,54,50)"/><text x="36.2231%" y="175.50">cod..</text></g><g><title>item_attrs (554,383 samples, 0.16%)</title><rect x="39.5339%" y="101" width="0.1629%" height="15" fill="rgb(233,84,52)"/><text x="39.7839%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (534,143 samples, 0.16%)</title><rect x="39.5399%" y="85" width="0.1569%" height="15" fill="rgb(207,117,47)"/><text x="39.7899%" y="95.50"></text></g><g><title>codegen_fn_attrs (867,206 samples, 0.25%)</title><rect x="39.4935%" y="117" width="0.2547%" height="15" fill="rgb(249,43,39)"/><text x="39.7435%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (802,292 samples, 0.24%)</title><rect x="40.0921%" y="101" width="0.2357%" height="15" fill="rgb(209,38,44)"/><text x="40.3421%" y="111.50"></text></g><g><title>optimized_mir (1,846,534 samples, 0.54%)</title><rect x="39.8943%" y="117" width="0.5424%" height="15" fill="rgb(236,212,23)"/><text x="40.1443%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (370,962 samples, 0.11%)</title><rect x="40.3277%" y="101" width="0.1090%" height="15" fill="rgb(242,79,21)"/><text x="40.5777%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (603,886 samples, 0.18%)</title><rect x="40.5192%" y="101" width="0.1774%" height="15" fill="rgb(211,96,35)"/><text x="40.7692%" y="111.50"></text></g><g><title>specialization_graph_of (509,646 samples, 0.15%)</title><rect x="40.7746%" y="101" width="0.1497%" height="15" fill="rgb(253,215,40)"/><text x="41.0246%" y="111.50"></text></g><g><title>resolve_instance (1,856,929 samples, 0.55%)</title><rect x="40.4367%" y="117" width="0.5455%" height="15" fill="rgb(211,81,21)"/><text x="40.6867%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (6,161,929 samples, 1.81%)</title><rect x="39.2448%" y="133" width="1.8101%" height="15" fill="rgb(208,190,38)"/><text x="39.4948%" y="143.50">m..</text></g><g><title>monomorphization_collector (6,204,120 samples, 1.82%)</title><rect x="39.2442%" y="149" width="1.8225%" height="15" fill="rgb(235,213,38)"/><text x="39.4942%" y="159.50">m..</text></g><g><title>assert_symbols_are_distinct (691,318 samples, 0.20%)</title><rect x="41.0679%" y="133" width="0.2031%" height="15" fill="rgb(237,122,38)"/><text x="41.3179%" y="143.50"></text></g><g><title>symbol_name (624,747 samples, 0.18%)</title><rect x="41.0875%" y="117" width="0.1835%" height="15" fill="rgb(244,218,35)"/><text x="41.3375%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (7,205,291 samples, 2.12%)</title><rect x="39.2333%" y="165" width="2.1166%" height="15" fill="rgb(240,68,47)"/><text x="39.4833%" y="175.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (963,921 samples, 0.28%)</title><rect x="41.0667%" y="149" width="0.2832%" height="15" fill="rgb(210,16,53)"/><text x="41.3167%" y="159.50"></text></g><g><title>codegen_crate (19,508,169 samples, 5.73%)</title><rect x="35.6371%" y="181" width="5.7306%" height="15" fill="rgb(235,124,12)"/><text x="35.8871%" y="191.50">codegen..</text></g><g><title>LLVM_module_codegen (5,589,392 samples, 1.64%)</title><rect x="41.3959%" y="165" width="1.6419%" height="15" fill="rgb(224,169,11)"/><text x="41.6459%" y="175.50"></text></g><g><title>LLVM_module_codegen_make_bitcode (4,275,247 samples, 1.26%)</title><rect x="41.7819%" y="149" width="1.2559%" height="15" fill="rgb(250,166,2)"/><text x="42.0319%" y="159.50"></text></g><g><title>LLVM_module_codegen_emit_bitcode (810,278 samples, 0.24%)</title><rect x="42.7998%" y="133" width="0.2380%" height="15" fill="rgb(242,216,29)"/><text x="43.0498%" y="143.50"></text></g><g><title>codegen_module_optimize (109,258,180 samples, 32.10%)</title><rect x="41.3677%" y="181" width="32.0952%" height="15" fill="rgb(230,116,27)"/><text x="41.6177%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (103,573,008 samples, 30.43%)</title><rect x="43.0378%" y="165" width="30.4252%" height="15" fill="rgb(228,99,48)"/><text x="43.2878%" y="175.50">LLVM_module_optimize</text></g><g><title>metadata_register_crate (2,722,061 samples, 0.80%)</title><rect x="79.5964%" y="133" width="0.7996%" height="15" fill="rgb(253,11,6)"/><text x="79.8464%" y="143.50"></text></g><g><title>metadata_register_crate (982,801 samples, 0.29%)</title><rect x="80.1074%" y="117" width="0.2887%" height="15" fill="rgb(247,143,39)"/><text x="80.3574%" y="127.50"></text></g><g><title>macro_expand_crate (23,275,281 samples, 6.84%)</title><rect x="73.6526%" y="165" width="6.8373%" height="15" fill="rgb(236,97,10)"/><text x="73.9026%" y="175.50">macro_exp..</text></g><g><title>expand_crate (23,250,551 samples, 6.83%)</title><rect x="73.6599%" y="149" width="6.8300%" height="15" fill="rgb(233,208,19)"/><text x="73.9099%" y="159.50">expand_cr..</text></g><g><title>late_resolve_crate (2,003,872 samples, 0.59%)</title><rect x="80.5664%" y="149" width="0.5886%" height="15" fill="rgb(216,164,2)"/><text x="80.8164%" y="159.50"></text></g><g><title>configure_and_expand (26,323,085 samples, 7.73%)</title><rect x="73.4630%" y="181" width="7.7326%" height="15" fill="rgb(220,129,5)"/><text x="73.7130%" y="191.50">configure_a..</text></g><g><title>resolve_crate (2,298,766 samples, 0.68%)</title><rect x="80.5203%" y="165" width="0.6753%" height="15" fill="rgb(242,17,10)"/><text x="80.7703%" y="175.50"></text></g><g><title>free_global_ctxt (4,173,487 samples, 1.23%)</title><rect x="81.3172%" y="181" width="1.2260%" height="15" fill="rgb(242,107,0)"/><text x="81.5672%" y="191.50"></text></g><g><title>layout_of (730,057 samples, 0.21%)</title><rect x="83.6781%" y="149" width="0.2145%" height="15" fill="rgb(251,28,31)"/><text x="83.9281%" y="159.50"></text></g><g><title>needs_drop_raw (341,706 samples, 0.10%)</title><rect x="84.4731%" y="133" width="0.1004%" height="15" fill="rgb(233,223,10)"/><text x="84.7231%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,349,995 samples, 0.69%)</title><rect x="83.8926%" y="149" width="0.6903%" height="15" fill="rgb(215,21,27)"/><text x="84.1426%" y="159.50"></text></g><g><title>optimized_mir (5,246,083 samples, 1.54%)</title><rect x="83.0480%" y="165" width="1.5411%" height="15" fill="rgb(232,23,21)"/><text x="83.2980%" y="175.50"></text></g><g><title>generate_crate_metadata (7,044,479 samples, 2.07%)</title><rect x="82.5431%" y="181" width="2.0694%" height="15" fill="rgb(244,5,23)"/><text x="82.7931%" y="191.50">g..</text></g><g><title>hir_lowering (1,958,472 samples, 0.58%)</title><rect x="84.6125%" y="181" width="0.5753%" height="15" fill="rgb(226,81,46)"/><text x="84.8625%" y="191.50"></text></g><g><title>finish_ongoing_codegen (46,137,296 samples, 13.55%)</title><rect x="85.1939%" y="165" width="13.5531%" height="15" fill="rgb(247,70,30)"/><text x="85.4439%" y="175.50">finish_ongoing_codeg..</text></g><g><title>link_crate (1,562,237 samples, 0.46%)</title><rect x="98.7470%" y="165" width="0.4589%" height="15" fill="rgb(212,68,19)"/><text x="98.9970%" y="175.50"></text></g><g><title>link_binary (1,550,497 samples, 0.46%)</title><rect x="98.7505%" y="149" width="0.4555%" height="15" fill="rgb(240,187,13)"/><text x="99.0005%" y="159.50"></text></g><g><title>link_rlib (1,181,583 samples, 0.35%)</title><rect x="98.8588%" y="133" width="0.3471%" height="15" fill="rgb(223,113,26)"/><text x="99.1088%" y="143.50"></text></g><g><title>link (47,729,413 samples, 14.02%)</title><rect x="85.1878%" y="181" width="14.0208%" height="15" fill="rgb(206,192,2)"/><text x="85.4378%" y="191.50">link</text></g><g><title>parse_crate (816,099 samples, 0.24%)</title><rect x="99.2086%" y="181" width="0.2397%" height="15" fill="rgb(241,108,4)"/><text x="99.4586%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,100,762 samples, 0.32%)</title><rect x="99.5400%" y="181" width="0.3234%" height="15" fill="rgb(247,173,49)"/><text x="99.7900%" y="191.50"></text></g><g><title>all (340,418,556 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (340,418,556 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(245,159,27)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (364,794 samples, 0.11%)</title><rect x="99.8928%" y="181" width="0.1072%" height="15" fill="rgb(245,172,44)"/><text x="100.1428%" y="191.50"></text></g></svg></svg>