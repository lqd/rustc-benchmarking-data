<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (1,359,064,410 samples, 16.85%)</title><rect x="0.0092%" y="149" width="16.8513%" height="15" fill="rgb(227,0,7)"/><text x="0.2592%" y="159.50">LLVM_passes</text></g><g><title>thir_body (10,177,023 samples, 0.13%)</title><rect x="18.6993%" y="37" width="0.1262%" height="15" fill="rgb(217,0,24)"/><text x="18.9493%" y="47.50"></text></g><g><title>mir_const (53,810,136 samples, 0.67%)</title><rect x="18.1596%" y="85" width="0.6672%" height="15" fill="rgb(221,193,54)"/><text x="18.4096%" y="95.50"></text></g><g><title>unsafety_check_result (47,147,582 samples, 0.58%)</title><rect x="18.2422%" y="69" width="0.5846%" height="15" fill="rgb(248,212,6)"/><text x="18.4922%" y="79.50"></text></g><g><title>mir_built (42,315,664 samples, 0.52%)</title><rect x="18.3021%" y="53" width="0.5247%" height="15" fill="rgb(208,68,35)"/><text x="18.5521%" y="63.50"></text></g><g><title>mir_promoted (60,447,567 samples, 0.75%)</title><rect x="18.0887%" y="101" width="0.7495%" height="15" fill="rgb(232,128,0)"/><text x="18.3387%" y="111.50"></text></g><g><title>type_op_prove_predicate (9,278,100 samples, 0.12%)</title><rect x="18.9041%" y="101" width="0.1150%" height="15" fill="rgb(207,160,47)"/><text x="19.1541%" y="111.50"></text></g><g><title>MIR_borrow_checking (172,648,513 samples, 2.14%)</title><rect x="16.8791%" y="133" width="2.1407%" height="15" fill="rgb(228,23,34)"/><text x="17.1291%" y="143.50">M..</text></g><g><title>mir_borrowck (172,033,379 samples, 2.13%)</title><rect x="16.8867%" y="117" width="2.1331%" height="15" fill="rgb(218,30,26)"/><text x="17.1367%" y="127.50">m..</text></g><g><title>misc_checking_2 (8,812,536 samples, 0.11%)</title><rect x="19.1117%" y="133" width="0.1093%" height="15" fill="rgb(220,122,19)"/><text x="19.3617%" y="143.50"></text></g><g><title>lint_checking (10,749,529 samples, 0.13%)</title><rect x="19.2581%" y="117" width="0.1333%" height="15" fill="rgb(250,228,42)"/><text x="19.5081%" y="127.50"></text></g><g><title>misc_checking_3 (21,387,865 samples, 0.27%)</title><rect x="19.2209%" y="133" width="0.2652%" height="15" fill="rgb(240,193,28)"/><text x="19.4709%" y="143.50"></text></g><g><title>coherent_trait (18,074,899 samples, 0.22%)</title><rect x="19.4902%" y="101" width="0.2241%" height="15" fill="rgb(216,20,37)"/><text x="19.7402%" y="111.50"></text></g><g><title>specialization_graph_of (17,291,740 samples, 0.21%)</title><rect x="19.4999%" y="85" width="0.2144%" height="15" fill="rgb(206,188,39)"/><text x="19.7499%" y="95.50"></text></g><g><title>coherence_checking (18,259,071 samples, 0.23%)</title><rect x="19.4898%" y="117" width="0.2264%" height="15" fill="rgb(217,207,13)"/><text x="19.7398%" y="127.50"></text></g><g><title>evaluate_obligation (10,091,298 samples, 0.13%)</title><rect x="21.0609%" y="69" width="0.1251%" height="15" fill="rgb(231,73,38)"/><text x="21.3109%" y="79.50"></text></g><g><title>typeck (97,578,215 samples, 1.21%)</title><rect x="21.2392%" y="69" width="1.2099%" height="15" fill="rgb(225,20,46)"/><text x="21.4892%" y="79.50"></text></g><g><title>item_bodies_checking (220,762,294 samples, 2.74%)</title><rect x="19.7173%" y="117" width="2.7373%" height="15" fill="rgb(210,31,41)"/><text x="19.9673%" y="127.50">it..</text></g><g><title>typeck_item_bodies (220,757,854 samples, 2.74%)</title><rect x="19.7174%" y="101" width="2.7372%" height="15" fill="rgb(221,200,47)"/><text x="19.9674%" y="111.50">ty..</text></g><g><title>typeck (220,358,161 samples, 2.73%)</title><rect x="19.7223%" y="85" width="2.7323%" height="15" fill="rgb(226,26,5)"/><text x="19.9723%" y="95.50">ty..</text></g><g><title>check_impl_item_well_formed (11,553,047 samples, 0.14%)</title><rect x="22.5901%" y="101" width="0.1432%" height="15" fill="rgb(249,33,26)"/><text x="22.8401%" y="111.50"></text></g><g><title>analysis (480,177,572 samples, 5.95%)</title><rect x="16.8605%" y="149" width="5.9538%" height="15" fill="rgb(235,183,28)"/><text x="17.1105%" y="159.50">analysis</text></g><g><title>type_check_crate (268,416,259 samples, 3.33%)</title><rect x="19.4861%" y="133" width="3.3281%" height="15" fill="rgb(221,5,38)"/><text x="19.7361%" y="143.50">typ..</text></g><g><title>wf_checking (18,846,589 samples, 0.23%)</title><rect x="22.5806%" y="117" width="0.2337%" height="15" fill="rgb(247,18,42)"/><text x="22.8306%" y="127.50"></text></g><g><title>param_env (8,895,526 samples, 0.11%)</title><rect x="25.3002%" y="101" width="0.1103%" height="15" fill="rgb(241,131,45)"/><text x="25.5502%" y="111.50"></text></g><g><title>fn_abi_of_instance (30,561,612 samples, 0.38%)</title><rect x="25.0547%" y="117" width="0.3789%" height="15" fill="rgb(249,31,29)"/><text x="25.3047%" y="127.50"></text></g><g><title>codegen_module (214,343,692 samples, 2.66%)</title><rect x="22.8412%" y="133" width="2.6577%" height="15" fill="rgb(225,111,53)"/><text x="23.0912%" y="143.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (21,446,201 samples, 0.27%)</title><rect x="26.0339%" y="69" width="0.2659%" height="15" fill="rgb(238,160,17)"/><text x="26.2839%" y="79.50"></text></g><g><title>optimized_mir (53,469,962 samples, 0.66%)</title><rect x="25.6990%" y="85" width="0.6630%" height="15" fill="rgb(214,148,48)"/><text x="25.9490%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (10,570,749 samples, 0.13%)</title><rect x="26.4074%" y="69" width="0.1311%" height="15" fill="rgb(232,36,49)"/><text x="26.6574%" y="79.50"></text></g><g><title>resolve_instance (21,410,548 samples, 0.27%)</title><rect x="26.3620%" y="85" width="0.2655%" height="15" fill="rgb(209,103,24)"/><text x="26.6120%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (96,371,581 samples, 1.19%)</title><rect x="25.5000%" y="101" width="1.1949%" height="15" fill="rgb(229,88,8)"/><text x="25.7500%" y="111.50"></text></g><g><title>monomorphization_collector (96,603,644 samples, 1.20%)</title><rect x="25.4999%" y="117" width="1.1978%" height="15" fill="rgb(213,181,19)"/><text x="25.7499%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (105,879,497 samples, 1.31%)</title><rect x="25.4991%" y="133" width="1.3128%" height="15" fill="rgb(254,191,54)"/><text x="25.7491%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (9,204,811 samples, 0.11%)</title><rect x="26.6977%" y="117" width="0.1141%" height="15" fill="rgb(241,83,37)"/><text x="26.9477%" y="127.50"></text></g><g><title>codegen_crate (322,490,524 samples, 4.00%)</title><rect x="22.8144%" y="149" width="3.9986%" height="15" fill="rgb(233,36,39)"/><text x="23.0644%" y="159.50">code..</text></g><g><title>codegen_module_optimize (2,105,642,460 samples, 26.11%)</title><rect x="26.8130%" y="149" width="26.1083%" height="15" fill="rgb(226,3,54)"/><text x="27.0630%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (2,033,559,626 samples, 25.21%)</title><rect x="27.7068%" y="133" width="25.2145%" height="15" fill="rgb(245,192,40)"/><text x="27.9568%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (1,287,401,761 samples, 15.96%)</title><rect x="53.6430%" y="133" width="15.9627%" height="15" fill="rgb(238,167,29)"/><text x="53.8930%" y="143.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (1,000,902,590 samples, 12.41%)</title><rect x="69.6058%" y="133" width="12.4104%" height="15" fill="rgb(232,182,51)"/><text x="69.8558%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (991,450,095 samples, 12.29%)</title><rect x="69.7230%" y="117" width="12.2932%" height="15" fill="rgb(231,60,39)"/><text x="69.9730%" y="127.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (143,005,395 samples, 1.77%)</title><rect x="82.0162%" y="133" width="1.7732%" height="15" fill="rgb(208,69,12)"/><text x="82.2662%" y="143.50">L..</text></g><g><title>codegen_module_perform_lto (2,493,238,440 samples, 30.91%)</title><rect x="52.9213%" y="149" width="30.9141%" height="15" fill="rgb(235,93,37)"/><text x="53.1713%" y="159.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (39,938,960 samples, 0.50%)</title><rect x="83.8506%" y="133" width="0.4952%" height="15" fill="rgb(213,116,39)"/><text x="84.1006%" y="143.50"></text></g><g><title>expand_crate (39,919,120 samples, 0.49%)</title><rect x="83.8509%" y="117" width="0.4950%" height="15" fill="rgb(222,207,29)"/><text x="84.1009%" y="127.50"></text></g><g><title>late_resolve_crate (8,541,384 samples, 0.11%)</title><rect x="84.3653%" y="117" width="0.1059%" height="15" fill="rgb(206,96,30)"/><text x="84.6153%" y="127.50"></text></g><g><title>configure_and_expand (52,057,294 samples, 0.65%)</title><rect x="83.8354%" y="149" width="0.6455%" height="15" fill="rgb(218,138,4)"/><text x="84.0854%" y="159.50"></text></g><g><title>resolve_crate (10,002,820 samples, 0.12%)</title><rect x="84.3569%" y="133" width="0.1240%" height="15" fill="rgb(250,191,14)"/><text x="84.6069%" y="143.50"></text></g><g><title>free_global_ctxt (26,311,379 samples, 0.33%)</title><rect x="84.5356%" y="149" width="0.3262%" height="15" fill="rgb(239,60,40)"/><text x="84.7856%" y="159.50"></text></g><g><title>optimized_mir (16,634,879 samples, 0.21%)</title><rect x="84.9461%" y="133" width="0.2063%" height="15" fill="rgb(206,27,48)"/><text x="85.1961%" y="143.50"></text></g><g><title>generate_crate_metadata (23,796,723 samples, 0.30%)</title><rect x="84.8619%" y="149" width="0.2951%" height="15" fill="rgb(225,35,8)"/><text x="85.1119%" y="159.50"></text></g><g><title>hir_lowering (16,930,377 samples, 0.21%)</title><rect x="85.1569%" y="149" width="0.2099%" height="15" fill="rgb(250,213,24)"/><text x="85.4069%" y="159.50"></text></g><g><title>finish_ongoing_codegen (1,153,241,141 samples, 14.30%)</title><rect x="85.3673%" y="133" width="14.2993%" height="15" fill="rgb(247,123,22)"/><text x="85.6173%" y="143.50">finish_ongoing_codegen</text></g><g><title>link (1,158,026,224 samples, 14.36%)</title><rect x="85.3669%" y="149" width="14.3586%" height="15" fill="rgb(231,138,38)"/><text x="85.6169%" y="159.50">link</text></g><g><title>parse_crate (15,103,646 samples, 0.19%)</title><rect x="99.7255%" y="149" width="0.1873%" height="15" fill="rgb(231,145,46)"/><text x="99.9755%" y="159.50"></text></g><g><title>all (8,065,044,145 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(251,118,11)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (8,065,044,145 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(217,147,25)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>