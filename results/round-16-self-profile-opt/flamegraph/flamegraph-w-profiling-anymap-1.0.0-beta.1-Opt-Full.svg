<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (4,969,423 samples, 3.81%)</title><rect x="0.5044%" y="213" width="3.8123%" height="15" fill="rgb(227,0,7)"/><text x="0.7544%" y="223.50">LLVM..</text></g><g><title>implied_outlives_bounds (774,849 samples, 0.59%)</title><rect x="11.8974%" y="165" width="0.5944%" height="15" fill="rgb(217,0,24)"/><text x="12.1474%" y="175.50"></text></g><g><title>param_env (309,653 samples, 0.24%)</title><rect x="13.6358%" y="133" width="0.2375%" height="15" fill="rgb(221,193,54)"/><text x="13.8858%" y="143.50"></text></g><g><title>item_attrs (237,563 samples, 0.18%)</title><rect x="14.2384%" y="101" width="0.1822%" height="15" fill="rgb(248,212,6)"/><text x="14.4884%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (228,873 samples, 0.18%)</title><rect x="14.2451%" y="85" width="0.1756%" height="15" fill="rgb(208,68,35)"/><text x="14.4951%" y="95.50"></text></g><g><title>codegen_fn_attrs (342,755 samples, 0.26%)</title><rect x="14.1665%" y="117" width="0.2629%" height="15" fill="rgb(232,128,0)"/><text x="14.4165%" y="127.50"></text></g><g><title>is_copy_raw (381,124 samples, 0.29%)</title><rect x="16.0177%" y="101" width="0.2924%" height="15" fill="rgb(207,160,47)"/><text x="16.2677%" y="111.50"></text></g><g><title>evaluate_obligation (309,103 samples, 0.24%)</title><rect x="16.0730%" y="85" width="0.2371%" height="15" fill="rgb(228,23,34)"/><text x="16.3230%" y="95.50"></text></g><g><title>adt_drop_tys (176,632 samples, 0.14%)</title><rect x="16.6060%" y="69" width="0.1355%" height="15" fill="rgb(218,30,26)"/><text x="16.8560%" y="79.50"></text></g><g><title>adt_drop_tys (638,845 samples, 0.49%)</title><rect x="16.4067%" y="85" width="0.4901%" height="15" fill="rgb(220,122,19)"/><text x="16.6567%" y="95.50"></text></g><g><title>needs_drop_raw (1,544,110 samples, 1.18%)</title><rect x="16.3101%" y="101" width="1.1846%" height="15" fill="rgb(250,228,42)"/><text x="16.5601%" y="111.50"></text></g><g><title>is_copy_raw (779,373 samples, 0.60%)</title><rect x="16.8967%" y="85" width="0.5979%" height="15" fill="rgb(240,193,28)"/><text x="17.1467%" y="95.50"></text></g><g><title>evaluate_obligation (548,598 samples, 0.42%)</title><rect x="17.0738%" y="69" width="0.4209%" height="15" fill="rgb(216,20,37)"/><text x="17.3238%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (191,811 samples, 0.15%)</title><rect x="17.6309%" y="85" width="0.1471%" height="15" fill="rgb(206,188,39)"/><text x="17.8809%" y="95.50"></text></g><g><title>resolve_instance (502,865 samples, 0.39%)</title><rect x="17.4946%" y="101" width="0.3858%" height="15" fill="rgb(217,207,13)"/><text x="17.7446%" y="111.50"></text></g><g><title>thir_body (622,424 samples, 0.48%)</title><rect x="17.9032%" y="101" width="0.4775%" height="15" fill="rgb(231,73,38)"/><text x="18.1532%" y="111.50"></text></g><g><title>mir_const (6,927,334 samples, 5.31%)</title><rect x="13.0934%" y="149" width="5.3143%" height="15" fill="rgb(225,20,46)"/><text x="13.3434%" y="159.50">mir_con..</text></g><g><title>unsafety_check_result (5,910,636 samples, 4.53%)</title><rect x="13.8733%" y="133" width="4.5343%" height="15" fill="rgb(210,31,41)"/><text x="14.1233%" y="143.50">unsaf..</text></g><g><title>mir_built (5,185,688 samples, 3.98%)</title><rect x="14.4295%" y="117" width="3.9782%" height="15" fill="rgb(221,200,47)"/><text x="14.6795%" y="127.50">mir_..</text></g><g><title>mir_promoted (7,623,340 samples, 5.85%)</title><rect x="12.5946%" y="165" width="5.8482%" height="15" fill="rgb(226,26,5)"/><text x="12.8446%" y="175.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (695,997 samples, 0.53%)</title><rect x="18.4428%" y="165" width="0.5339%" height="15" fill="rgb(249,33,26)"/><text x="18.6928%" y="175.50"></text></g><g><title>type_op_normalize_fn_sig (134,391 samples, 0.10%)</title><rect x="18.9767%" y="165" width="0.1031%" height="15" fill="rgb(235,183,28)"/><text x="19.2267%" y="175.50"></text></g><g><title>type_op_prove_predicate (2,533,754 samples, 1.94%)</title><rect x="19.0943%" y="165" width="1.9438%" height="15" fill="rgb(221,5,38)"/><text x="19.3443%" y="175.50">t..</text></g><g><title>MIR_borrow_checking (21,437,717 samples, 16.45%)</title><rect x="4.5967%" y="197" width="16.4459%" height="15" fill="rgb(247,18,42)"/><text x="4.8467%" y="207.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (21,305,745 samples, 16.34%)</title><rect x="4.6980%" y="181" width="16.3446%" height="15" fill="rgb(241,131,45)"/><text x="4.9480%" y="191.50">mir_borrowck</text></g><g><title>hir_module_items (230,023 samples, 0.18%)</title><rect x="21.0723%" y="197" width="0.1765%" height="15" fill="rgb(249,31,29)"/><text x="21.3223%" y="207.50"></text></g><g><title>codegen_fn_attrs (296,613 samples, 0.23%)</title><rect x="21.7004%" y="133" width="0.2275%" height="15" fill="rgb(225,111,53)"/><text x="21.9504%" y="143.50"></text></g><g><title>codegen_fn_attrs (587,838 samples, 0.45%)</title><rect x="21.4870%" y="165" width="0.4510%" height="15" fill="rgb(238,160,17)"/><text x="21.7370%" y="175.50"></text></g><g><title>should_inherit_track_caller (493,925 samples, 0.38%)</title><rect x="21.5590%" y="149" width="0.3789%" height="15" fill="rgb(214,148,48)"/><text x="21.8090%" y="159.50"></text></g><g><title>check_mod_attrs (879,830 samples, 0.67%)</title><rect x="21.2633%" y="181" width="0.6750%" height="15" fill="rgb(232,36,49)"/><text x="21.5133%" y="191.50"></text></g><g><title>check_mod_const_bodies (183,803 samples, 0.14%)</title><rect x="21.9382%" y="181" width="0.1410%" height="15" fill="rgb(209,103,24)"/><text x="22.1882%" y="191.50"></text></g><g><title>lookup_deprecation_entry (185,192 samples, 0.14%)</title><rect x="22.3351%" y="165" width="0.1421%" height="15" fill="rgb(229,88,8)"/><text x="22.5851%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (521,345 samples, 0.40%)</title><rect x="22.1521%" y="181" width="0.3999%" height="15" fill="rgb(213,181,19)"/><text x="22.4021%" y="191.50"></text></g><g><title>misc_checking_1 (1,766,599 samples, 1.36%)</title><rect x="21.2490%" y="197" width="1.3552%" height="15" fill="rgb(254,191,54)"/><text x="21.4990%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (324,524 samples, 0.25%)</title><rect x="22.6052%" y="181" width="0.2490%" height="15" fill="rgb(241,83,37)"/><text x="22.8552%" y="191.50"></text></g><g><title>check_mod_liveness (269,352 samples, 0.21%)</title><rect x="22.6475%" y="165" width="0.2066%" height="15" fill="rgb(233,36,39)"/><text x="22.8975%" y="175.50"></text></g><g><title>misc_checking_2 (653,377 samples, 0.50%)</title><rect x="22.6043%" y="197" width="0.5012%" height="15" fill="rgb(226,3,54)"/><text x="22.8543%" y="207.50"></text></g><g><title>match_checking (327,633 samples, 0.25%)</title><rect x="22.8542%" y="181" width="0.2513%" height="15" fill="rgb(245,192,40)"/><text x="23.1042%" y="191.50"></text></g><g><title>check_match (299,163 samples, 0.23%)</title><rect x="22.8760%" y="165" width="0.2295%" height="15" fill="rgb(238,167,29)"/><text x="23.1260%" y="175.50"></text></g><g><title>check_private_in_public (166,402 samples, 0.13%)</title><rect x="23.1115%" y="181" width="0.1277%" height="15" fill="rgb(232,182,51)"/><text x="23.3615%" y="191.50"></text></g><g><title>death_checking (317,633 samples, 0.24%)</title><rect x="23.2392%" y="181" width="0.2437%" height="15" fill="rgb(231,60,39)"/><text x="23.4892%" y="191.50"></text></g><g><title>crate_lints (1,751,209 samples, 1.34%)</title><rect x="23.4838%" y="165" width="1.3434%" height="15" fill="rgb(208,69,12)"/><text x="23.7338%" y="175.50"></text></g><g><title>type_of (1,039,592 samples, 0.80%)</title><rect x="24.0297%" y="149" width="0.7975%" height="15" fill="rgb(235,93,37)"/><text x="24.2797%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (807,201 samples, 0.62%)</title><rect x="24.2080%" y="133" width="0.6192%" height="15" fill="rgb(213,116,39)"/><text x="24.4580%" y="143.50"></text></g><g><title>lint_checking (2,128,483 samples, 1.63%)</title><rect x="23.4829%" y="181" width="1.6329%" height="15" fill="rgb(222,207,29)"/><text x="23.7329%" y="191.50"></text></g><g><title>module_lints (376,024 samples, 0.29%)</title><rect x="24.8272%" y="165" width="0.2885%" height="15" fill="rgb(206,96,30)"/><text x="25.0772%" y="175.50"></text></g><g><title>lint_mod (373,114 samples, 0.29%)</title><rect x="24.8295%" y="149" width="0.2862%" height="15" fill="rgb(218,138,4)"/><text x="25.0795%" y="159.50"></text></g><g><title>privacy_access_levels (294,123 samples, 0.23%)</title><rect x="25.1157%" y="181" width="0.2256%" height="15" fill="rgb(250,191,14)"/><text x="25.3657%" y="191.50"></text></g><g><title>privacy_checking_modules (925,360 samples, 0.71%)</title><rect x="25.3413%" y="181" width="0.7099%" height="15" fill="rgb(239,60,40)"/><text x="25.5913%" y="191.50"></text></g><g><title>check_mod_privacy (922,980 samples, 0.71%)</title><rect x="25.3432%" y="165" width="0.7081%" height="15" fill="rgb(206,27,48)"/><text x="25.5932%" y="175.50"></text></g><g><title>misc_checking_3 (3,850,551 samples, 2.95%)</title><rect x="23.1055%" y="197" width="2.9539%" height="15" fill="rgb(225,35,8)"/><text x="23.3555%" y="207.50">mis..</text></g><g><title>evaluate_obligation (152,252 samples, 0.12%)</title><rect x="26.2040%" y="133" width="0.1168%" height="15" fill="rgb(250,213,24)"/><text x="26.4540%" y="143.50"></text></g><g><title>object_safety_violations (336,013 samples, 0.26%)</title><rect x="26.1363%" y="149" width="0.2578%" height="15" fill="rgb(247,123,22)"/><text x="26.3863%" y="159.50"></text></g><g><title>impl_parent (1,433,412 samples, 1.10%)</title><rect x="28.2470%" y="133" width="1.0996%" height="15" fill="rgb(231,138,38)"/><text x="28.4970%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (922,636 samples, 0.71%)</title><rect x="28.6388%" y="117" width="0.7078%" height="15" fill="rgb(231,145,46)"/><text x="28.8888%" y="127.50"></text></g><g><title>impl_trait_ref (3,954,920 samples, 3.03%)</title><rect x="29.3466%" y="133" width="3.0340%" height="15" fill="rgb(251,118,11)"/><text x="29.5966%" y="143.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,420,106 samples, 2.62%)</title><rect x="29.7569%" y="117" width="2.6237%" height="15" fill="rgb(217,147,25)"/><text x="30.0069%" y="127.50">me..</text></g><g><title>trait_impls_of (432,574 samples, 0.33%)</title><rect x="32.4239%" y="133" width="0.3318%" height="15" fill="rgb(247,81,37)"/><text x="32.6739%" y="143.50"></text></g><g><title>coherent_trait (8,661,802 samples, 6.64%)</title><rect x="26.1172%" y="165" width="6.6449%" height="15" fill="rgb(209,12,38)"/><text x="26.3672%" y="175.50">coherent_..</text></g><g><title>specialization_graph_of (8,300,838 samples, 6.37%)</title><rect x="26.3941%" y="149" width="6.3680%" height="15" fill="rgb(227,1,9)"/><text x="26.6441%" y="159.50">speciali..</text></g><g><title>coherence_checking (8,723,433 samples, 6.69%)</title><rect x="26.1033%" y="181" width="6.6921%" height="15" fill="rgb(248,47,43)"/><text x="26.3533%" y="191.50">coherence..</text></g><g><title>associated_items (177,370 samples, 0.14%)</title><rect x="43.5498%" y="133" width="0.1361%" height="15" fill="rgb(221,10,30)"/><text x="43.7998%" y="143.50"></text></g><g><title>adt_dtorck_constraint (161,383 samples, 0.12%)</title><rect x="43.9533%" y="117" width="0.1238%" height="15" fill="rgb(210,229,1)"/><text x="44.2033%" y="127.50"></text></g><g><title>dropck_outlives (491,597 samples, 0.38%)</title><rect x="43.7208%" y="133" width="0.3771%" height="15" fill="rgb(222,148,37)"/><text x="43.9708%" y="143.50"></text></g><g><title>evaluate_obligation (1,141,451 samples, 0.88%)</title><rect x="44.0979%" y="133" width="0.8757%" height="15" fill="rgb(234,67,33)"/><text x="44.3479%" y="143.50"></text></g><g><title>trait_impls_of (189,502 samples, 0.15%)</title><rect x="44.8282%" y="117" width="0.1454%" height="15" fill="rgb(247,98,35)"/><text x="45.0782%" y="127.50"></text></g><g><title>method_autoderef_steps (356,953 samples, 0.27%)</title><rect x="45.2685%" y="133" width="0.2738%" height="15" fill="rgb(247,138,52)"/><text x="45.5185%" y="143.50"></text></g><g><title>evaluate_obligation (190,312 samples, 0.15%)</title><rect x="45.3964%" y="117" width="0.1460%" height="15" fill="rgb(213,79,30)"/><text x="45.6464%" y="127.50"></text></g><g><title>predicates_of (223,344 samples, 0.17%)</title><rect x="45.6405%" y="133" width="0.1713%" height="15" fill="rgb(246,177,23)"/><text x="45.8905%" y="143.50"></text></g><g><title>predicates_defined_on (173,213 samples, 0.13%)</title><rect x="45.6790%" y="117" width="0.1329%" height="15" fill="rgb(230,62,27)"/><text x="45.9290%" y="127.50"></text></g><g><title>associated_item (322,445 samples, 0.25%)</title><rect x="48.4200%" y="101" width="0.2474%" height="15" fill="rgb(216,154,8)"/><text x="48.6700%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (250,714 samples, 0.19%)</title><rect x="48.4751%" y="85" width="0.1923%" height="15" fill="rgb(244,35,45)"/><text x="48.7251%" y="95.50"></text></g><g><title>associated_items (458,956 samples, 0.35%)</title><rect x="48.3292%" y="117" width="0.3521%" height="15" fill="rgb(251,115,12)"/><text x="48.5792%" y="127.50"></text></g><g><title>eval_to_const_value_raw (210,262 samples, 0.16%)</title><rect x="48.7695%" y="117" width="0.1613%" height="15" fill="rgb(240,54,50)"/><text x="49.0195%" y="127.50"></text></g><g><title>eval_to_const_value_raw (201,802 samples, 0.15%)</title><rect x="48.7759%" y="101" width="0.1548%" height="15" fill="rgb(233,84,52)"/><text x="49.0259%" y="111.50"></text></g><g><title>eval_to_allocation_raw (198,462 samples, 0.15%)</title><rect x="48.7785%" y="85" width="0.1522%" height="15" fill="rgb(207,117,47)"/><text x="49.0285%" y="95.50"></text></g><g><title>evaluate_obligation (774,460 samples, 0.59%)</title><rect x="48.9308%" y="117" width="0.5941%" height="15" fill="rgb(249,43,39)"/><text x="49.1808%" y="127.50"></text></g><g><title>trait_impls_of (361,883 samples, 0.28%)</title><rect x="49.2473%" y="101" width="0.2776%" height="15" fill="rgb(209,38,44)"/><text x="49.4973%" y="111.50"></text></g><g><title>method_autoderef_steps (131,121 samples, 0.10%)</title><rect x="49.8532%" y="117" width="0.1006%" height="15" fill="rgb(236,212,23)"/><text x="50.1032%" y="127.50"></text></g><g><title>predicates_of (147,292 samples, 0.11%)</title><rect x="49.9608%" y="117" width="0.1130%" height="15" fill="rgb(242,79,21)"/><text x="50.2108%" y="127.50"></text></g><g><title>typeck (5,549,068 samples, 4.26%)</title><rect x="45.8694%" y="133" width="4.2569%" height="15" fill="rgb(211,96,35)"/><text x="46.1194%" y="143.50">typeck</text></g><g><title>item_bodies_checking (22,598,520 samples, 17.34%)</title><rect x="32.8190%" y="181" width="17.3364%" height="15" fill="rgb(253,215,40)"/><text x="33.0690%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (22,596,370 samples, 17.33%)</title><rect x="32.8207%" y="165" width="17.3347%" height="15" fill="rgb(211,81,21)"/><text x="33.0707%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (22,510,090 samples, 17.27%)</title><rect x="32.8869%" y="149" width="17.2685%" height="15" fill="rgb(208,190,38)"/><text x="33.1369%" y="159.50">typeck</text></g><g><title>impl_trait_ref (143,911 samples, 0.11%)</title><rect x="51.0322%" y="101" width="0.1104%" height="15" fill="rgb(235,213,38)"/><text x="51.2822%" y="111.50"></text></g><g><title>adt_destructor (302,843 samples, 0.23%)</title><rect x="50.9299%" y="149" width="0.2323%" height="15" fill="rgb(237,122,38)"/><text x="51.1799%" y="159.50"></text></g><g><title>coherent_trait (298,513 samples, 0.23%)</title><rect x="50.9332%" y="133" width="0.2290%" height="15" fill="rgb(244,218,35)"/><text x="51.1832%" y="143.50"></text></g><g><title>specialization_graph_of (296,943 samples, 0.23%)</title><rect x="50.9344%" y="117" width="0.2278%" height="15" fill="rgb(240,68,47)"/><text x="51.1844%" y="127.50"></text></g><g><title>implied_outlives_bounds (188,952 samples, 0.14%)</title><rect x="51.2254%" y="149" width="0.1450%" height="15" fill="rgb(210,16,53)"/><text x="51.4754%" y="159.50"></text></g><g><title>item_types_checking (1,617,777 samples, 1.24%)</title><rect x="50.1554%" y="181" width="1.2411%" height="15" fill="rgb(235,124,12)"/><text x="50.4054%" y="191.50"></text></g><g><title>check_mod_item_types (1,614,917 samples, 1.24%)</title><rect x="50.1576%" y="165" width="1.2389%" height="15" fill="rgb(224,169,11)"/><text x="50.4076%" y="175.50"></text></g><g><title>fn_sig (287,353 samples, 0.22%)</title><rect x="51.6111%" y="149" width="0.2204%" height="15" fill="rgb(250,166,2)"/><text x="51.8611%" y="159.50"></text></g><g><title>generics_of (244,853 samples, 0.19%)</title><rect x="51.8316%" y="149" width="0.1878%" height="15" fill="rgb(242,216,29)"/><text x="52.0816%" y="159.50"></text></g><g><title>impl_trait_ref (141,662 samples, 0.11%)</title><rect x="52.0194%" y="149" width="0.1087%" height="15" fill="rgb(230,116,27)"/><text x="52.2694%" y="159.50"></text></g><g><title>late_bound_vars_map (267,812 samples, 0.21%)</title><rect x="52.4067%" y="101" width="0.2055%" height="15" fill="rgb(228,99,48)"/><text x="52.6567%" y="111.50"></text></g><g><title>resolve_lifetimes (251,212 samples, 0.19%)</title><rect x="52.4194%" y="85" width="0.1927%" height="15" fill="rgb(253,11,6)"/><text x="52.6694%" y="95.50"></text></g><g><title>explicit_predicates_of (523,764 samples, 0.40%)</title><rect x="52.2285%" y="117" width="0.4018%" height="15" fill="rgb(247,143,39)"/><text x="52.4785%" y="127.50"></text></g><g><title>predicates_of (212,971 samples, 0.16%)</title><rect x="52.7512%" y="85" width="0.1634%" height="15" fill="rgb(236,97,10)"/><text x="53.0012%" y="95.50"></text></g><g><title>predicates_defined_on (204,291 samples, 0.16%)</title><rect x="52.7579%" y="69" width="0.1567%" height="15" fill="rgb(233,208,19)"/><text x="53.0079%" y="79.50"></text></g><g><title>inferred_outlives_of (152,651 samples, 0.12%)</title><rect x="52.7975%" y="53" width="0.1171%" height="15" fill="rgb(216,164,2)"/><text x="53.0475%" y="63.50"></text></g><g><title>metadata_decode_entry_inferred_outlives_of (148,521 samples, 0.11%)</title><rect x="52.8007%" y="37" width="0.1139%" height="15" fill="rgb(220,129,5)"/><text x="53.0507%" y="47.50"></text></g><g><title>predicates_of (1,154,569 samples, 0.89%)</title><rect x="52.1281%" y="149" width="0.8857%" height="15" fill="rgb(242,17,10)"/><text x="52.3781%" y="159.50"></text></g><g><title>predicates_defined_on (1,104,759 samples, 0.85%)</title><rect x="52.1663%" y="133" width="0.8475%" height="15" fill="rgb(242,107,0)"/><text x="52.4163%" y="143.50"></text></g><g><title>inferred_outlives_of (499,915 samples, 0.38%)</title><rect x="52.6303%" y="117" width="0.3835%" height="15" fill="rgb(251,28,31)"/><text x="52.8803%" y="127.50"></text></g><g><title>inferred_outlives_crate (476,845 samples, 0.37%)</title><rect x="52.6480%" y="101" width="0.3658%" height="15" fill="rgb(233,223,10)"/><text x="52.8980%" y="111.50"></text></g><g><title>late_bound_vars_map (138,052 samples, 0.11%)</title><rect x="53.3455%" y="133" width="0.1059%" height="15" fill="rgb(215,21,27)"/><text x="53.5955%" y="143.50"></text></g><g><title>resolve_lifetimes (131,062 samples, 0.10%)</title><rect x="53.3508%" y="117" width="0.1005%" height="15" fill="rgb(232,23,21)"/><text x="53.6008%" y="127.50"></text></g><g><title>type_collecting (2,786,370 samples, 2.14%)</title><rect x="51.3976%" y="181" width="2.1376%" height="15" fill="rgb(244,5,23)"/><text x="51.6476%" y="191.50">t..</text></g><g><title>collect_mod_item_types (2,778,950 samples, 2.13%)</title><rect x="51.4033%" y="165" width="2.1319%" height="15" fill="rgb(226,81,46)"/><text x="51.6533%" y="175.50">c..</text></g><g><title>type_of (639,958 samples, 0.49%)</title><rect x="53.0442%" y="149" width="0.4909%" height="15" fill="rgb(247,70,30)"/><text x="53.2942%" y="159.50"></text></g><g><title>evaluate_obligation (892,272 samples, 0.68%)</title><rect x="55.9813%" y="149" width="0.6845%" height="15" fill="rgb(212,68,19)"/><text x="56.2313%" y="159.50"></text></g><g><title>implied_outlives_bounds (638,253 samples, 0.49%)</title><rect x="56.6685%" y="149" width="0.4896%" height="15" fill="rgb(240,187,13)"/><text x="56.9185%" y="159.50"></text></g><g><title>param_env (519,995 samples, 0.40%)</title><rect x="57.1585%" y="149" width="0.3989%" height="15" fill="rgb(223,113,26)"/><text x="57.4085%" y="159.50"></text></g><g><title>region_scope_tree (274,264 samples, 0.21%)</title><rect x="57.5904%" y="149" width="0.2104%" height="15" fill="rgb(206,192,2)"/><text x="57.8404%" y="159.50"></text></g><g><title>check_impl_item_well_formed (5,449,695 samples, 4.18%)</title><rect x="53.6965%" y="165" width="4.1807%" height="15" fill="rgb(241,108,4)"/><text x="53.9465%" y="175.50">check..</text></g><g><title>adt_sized_constraint (182,082 samples, 0.14%)</title><rect x="59.2464%" y="133" width="0.1397%" height="15" fill="rgb(247,173,49)"/><text x="59.4964%" y="143.50"></text></g><g><title>adt_sized_constraint (218,862 samples, 0.17%)</title><rect x="59.2230%" y="149" width="0.1679%" height="15" fill="rgb(224,114,35)"/><text x="59.4730%" y="159.50"></text></g><g><title>evaluate_obligation (638,137 samples, 0.49%)</title><rect x="59.3911%" y="149" width="0.4895%" height="15" fill="rgb(245,159,27)"/><text x="59.6411%" y="159.50"></text></g><g><title>implied_outlives_bounds (202,745 samples, 0.16%)</title><rect x="59.8933%" y="149" width="0.1555%" height="15" fill="rgb(245,172,44)"/><text x="60.1433%" y="159.50"></text></g><g><title>param_env (293,492 samples, 0.23%)</title><rect x="60.0488%" y="149" width="0.2252%" height="15" fill="rgb(236,23,11)"/><text x="60.2988%" y="159.50"></text></g><g><title>check_item_well_formed (3,379,288 samples, 2.59%)</title><rect x="57.8772%" y="165" width="2.5924%" height="15" fill="rgb(205,117,38)"/><text x="58.1272%" y="175.50">ch..</text></g><g><title>evaluate_obligation (182,612 samples, 0.14%)</title><rect x="60.6926%" y="149" width="0.1401%" height="15" fill="rgb(237,72,25)"/><text x="60.9426%" y="159.50"></text></g><g><title>analysis (73,799,445 samples, 56.61%)</title><rect x="4.3166%" y="213" width="56.6150%" height="15" fill="rgb(244,70,9)"/><text x="4.5666%" y="223.50">analysis</text></g><g><title>type_check_crate (45,456,994 samples, 34.87%)</title><rect x="26.0594%" y="197" width="34.8722%" height="15" fill="rgb(217,125,39)"/><text x="26.3094%" y="207.50">type_check_crate</text></g><g><title>wf_checking (9,636,623 samples, 7.39%)</title><rect x="53.5389%" y="181" width="7.3927%" height="15" fill="rgb(235,36,10)"/><text x="53.7889%" y="191.50">wf_checking</text></g><g><title>check_trait_item_well_formed (602,236 samples, 0.46%)</title><rect x="60.4696%" y="165" width="0.4620%" height="15" fill="rgb(251,123,47)"/><text x="60.7196%" y="175.50"></text></g><g><title>codegen_module (178,292 samples, 0.14%)</title><rect x="61.2790%" y="197" width="0.1368%" height="15" fill="rgb(221,13,13)"/><text x="61.5290%" y="207.50"></text></g><g><title>codegen_crate (743,948 samples, 0.57%)</title><rect x="60.9381%" y="213" width="0.5707%" height="15" fill="rgb(238,131,9)"/><text x="61.1881%" y="223.50"></text></g><g><title>codegen_module_optimize (534,415 samples, 0.41%)</title><rect x="61.5088%" y="213" width="0.4100%" height="15" fill="rgb(211,50,8)"/><text x="61.7588%" y="223.50"></text></g><g><title>LLVM_module_optimize (219,332 samples, 0.17%)</title><rect x="61.7505%" y="197" width="0.1683%" height="15" fill="rgb(245,182,24)"/><text x="62.0005%" y="207.50"></text></g><g><title>LLVM_lto_optimize (259,393 samples, 0.20%)</title><rect x="62.2040%" y="197" width="0.1990%" height="15" fill="rgb(242,14,37)"/><text x="62.4540%" y="207.50"></text></g><g><title>LLVM_module_codegen (3,411,176 samples, 2.62%)</title><rect x="62.4030%" y="197" width="2.6169%" height="15" fill="rgb(246,228,12)"/><text x="62.6530%" y="207.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (3,374,095 samples, 2.59%)</title><rect x="62.4315%" y="181" width="2.5884%" height="15" fill="rgb(213,55,15)"/><text x="62.6815%" y="191.50">LL..</text></g><g><title>codegen_module_perform_lto (4,070,683 samples, 3.12%)</title><rect x="61.9188%" y="213" width="3.1228%" height="15" fill="rgb(209,9,3)"/><text x="62.1688%" y="223.50">cod..</text></g><g><title>AST_validation (264,232 samples, 0.20%)</title><rect x="65.1654%" y="197" width="0.2027%" height="15" fill="rgb(230,59,30)"/><text x="65.4154%" y="207.50"></text></g><g><title>metadata_load_macro (193,071 samples, 0.15%)</title><rect x="76.3934%" y="165" width="0.1481%" height="15" fill="rgb(209,121,21)"/><text x="76.6434%" y="175.50"></text></g><g><title>metadata_register_crate (2,290,324 samples, 1.76%)</title><rect x="76.5416%" y="165" width="1.7570%" height="15" fill="rgb(220,109,13)"/><text x="76.7916%" y="175.50"></text></g><g><title>metadata_register_crate (851,420 samples, 0.65%)</title><rect x="77.6454%" y="149" width="0.6532%" height="15" fill="rgb(232,18,1)"/><text x="77.8954%" y="159.50"></text></g><g><title>macro_expand_crate (16,761,918 samples, 12.86%)</title><rect x="65.4851%" y="197" width="12.8588%" height="15" fill="rgb(215,41,42)"/><text x="65.7351%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (16,750,007 samples, 12.85%)</title><rect x="65.4943%" y="181" width="12.8497%" height="15" fill="rgb(224,123,36)"/><text x="65.7443%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (256,363 samples, 0.20%)</title><rect x="78.3468%" y="197" width="0.1967%" height="15" fill="rgb(240,125,3)"/><text x="78.5968%" y="207.50"></text></g><g><title>late_resolve_crate (2,126,783 samples, 1.63%)</title><rect x="78.6987%" y="181" width="1.6316%" height="15" fill="rgb(205,98,50)"/><text x="78.9487%" y="191.50"></text></g><g><title>configure_and_expand (20,078,453 samples, 15.40%)</title><rect x="65.0416%" y="213" width="15.4031%" height="15" fill="rgb(205,185,37)"/><text x="65.2916%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (2,478,266 samples, 1.90%)</title><rect x="78.5435%" y="197" width="1.9012%" height="15" fill="rgb(238,207,15)"/><text x="78.7935%" y="207.50">r..</text></g><g><title>drop_ast (275,373 samples, 0.21%)</title><rect x="80.4447%" y="213" width="0.2113%" height="15" fill="rgb(213,199,42)"/><text x="80.6947%" y="223.50"></text></g><g><title>early_lint_checks (509,986 samples, 0.39%)</title><rect x="80.6645%" y="213" width="0.3912%" height="15" fill="rgb(235,201,11)"/><text x="80.9145%" y="223.50"></text></g><g><title>free_global_ctxt (3,208,155 samples, 2.46%)</title><rect x="81.0557%" y="213" width="2.4611%" height="15" fill="rgb(207,46,11)"/><text x="81.3057%" y="223.50">fr..</text></g><g><title>is_sized_raw (145,540 samples, 0.11%)</title><rect x="87.1766%" y="165" width="0.1117%" height="15" fill="rgb(241,35,35)"/><text x="87.4266%" y="175.50"></text></g><g><title>layout_of (289,583 samples, 0.22%)</title><rect x="87.3966%" y="149" width="0.2222%" height="15" fill="rgb(243,32,47)"/><text x="87.6466%" y="159.50"></text></g><g><title>layout_of (461,887 samples, 0.35%)</title><rect x="87.2883%" y="165" width="0.3543%" height="15" fill="rgb(247,202,23)"/><text x="87.5383%" y="175.50"></text></g><g><title>layout_of (1,032,668 samples, 0.79%)</title><rect x="86.8605%" y="181" width="0.7922%" height="15" fill="rgb(219,102,11)"/><text x="87.1105%" y="191.50"></text></g><g><title>needs_drop_raw (474,486 samples, 0.36%)</title><rect x="89.7273%" y="165" width="0.3640%" height="15" fill="rgb(243,110,44)"/><text x="89.9773%" y="175.50"></text></g><g><title>is_copy_raw (427,196 samples, 0.33%)</title><rect x="89.7636%" y="149" width="0.3277%" height="15" fill="rgb(222,74,54)"/><text x="90.0136%" y="159.50"></text></g><g><title>evaluate_obligation (313,345 samples, 0.24%)</title><rect x="89.8509%" y="133" width="0.2404%" height="15" fill="rgb(216,99,12)"/><text x="90.1009%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,257,017 samples, 2.50%)</title><rect x="87.6527%" y="181" width="2.4986%" height="15" fill="rgb(226,22,26)"/><text x="87.9027%" y="191.50">mi..</text></g><g><title>optimized_mir (7,009,289 samples, 5.38%)</title><rect x="84.8449%" y="197" width="5.3772%" height="15" fill="rgb(217,163,10)"/><text x="85.0949%" y="207.50">optimiz..</text></g><g><title>generate_crate_metadata (8,810,964 samples, 6.76%)</title><rect x="83.5168%" y="213" width="6.7593%" height="15" fill="rgb(213,25,53)"/><text x="83.7668%" y="223.50">generate_..</text></g><g><title>hir_lowering (4,602,308 samples, 3.53%)</title><rect x="90.2761%" y="213" width="3.5306%" height="15" fill="rgb(252,105,26)"/><text x="90.5261%" y="223.50">hir..</text></g><g><title>finish_ongoing_codegen (1,126,591 samples, 0.86%)</title><rect x="93.8148%" y="197" width="0.8643%" height="15" fill="rgb(220,39,43)"/><text x="94.0648%" y="207.50"></text></g><g><title>link_crate (739,257 samples, 0.57%)</title><rect x="94.6791%" y="197" width="0.5671%" height="15" fill="rgb(229,68,48)"/><text x="94.9291%" y="207.50"></text></g><g><title>link_binary (729,177 samples, 0.56%)</title><rect x="94.6868%" y="181" width="0.5594%" height="15" fill="rgb(252,8,32)"/><text x="94.9368%" y="191.50"></text></g><g><title>link_rlib (473,145 samples, 0.36%)</title><rect x="94.8832%" y="165" width="0.3630%" height="15" fill="rgb(223,20,43)"/><text x="95.1332%" y="175.50"></text></g><g><title>link (1,882,569 samples, 1.44%)</title><rect x="93.8068%" y="213" width="1.4442%" height="15" fill="rgb(229,81,49)"/><text x="94.0568%" y="223.50"></text></g><g><title>parse_crate (4,589,929 samples, 3.52%)</title><rect x="95.2510%" y="213" width="3.5211%" height="15" fill="rgb(236,28,36)"/><text x="95.5010%" y="223.50">par..</text></g><g><title>prepare_outputs (327,184 samples, 0.25%)</title><rect x="98.7773%" y="213" width="0.2510%" height="15" fill="rgb(249,185,26)"/><text x="99.0273%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (807,468 samples, 0.62%)</title><rect x="99.0283%" y="213" width="0.6194%" height="15" fill="rgb(249,174,33)"/><text x="99.2783%" y="223.50"></text></g><g><title>all (130,353,226 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (130,353,226 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (365,994 samples, 0.28%)</title><rect x="99.7192%" y="213" width="0.2808%" height="15" fill="rgb(250,127,30)"/><text x="99.9692%" y="223.50"></text></g></svg></svg>