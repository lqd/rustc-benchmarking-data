<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (23,395,939 samples, 2.99%)</title><rect x="0.1290%" y="181" width="2.9916%" height="15" fill="rgb(227,0,7)"/><text x="0.3790%" y="191.50">LLV..</text></g><g><title>is_late_bound_map (816,580 samples, 0.10%)</title><rect x="13.7446%" y="133" width="0.1044%" height="15" fill="rgb(217,0,24)"/><text x="13.9946%" y="143.50"></text></g><g><title>is_copy_raw (1,694,803 samples, 0.22%)</title><rect x="18.6194%" y="53" width="0.2167%" height="15" fill="rgb(221,193,54)"/><text x="18.8694%" y="63.50"></text></g><g><title>evaluate_obligation (1,269,711 samples, 0.16%)</title><rect x="18.6738%" y="37" width="0.1624%" height="15" fill="rgb(248,212,6)"/><text x="18.9238%" y="47.50"></text></g><g><title>needs_drop_raw (2,048,496 samples, 0.26%)</title><rect x="18.5768%" y="69" width="0.2619%" height="15" fill="rgb(208,68,35)"/><text x="18.8268%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (2,316,522 samples, 0.30%)</title><rect x="19.0225%" y="53" width="0.2962%" height="15" fill="rgb(232,128,0)"/><text x="19.2725%" y="63.50"></text></g><g><title>specialization_graph_of (1,749,137 samples, 0.22%)</title><rect x="19.3546%" y="53" width="0.2237%" height="15" fill="rgb(207,160,47)"/><text x="19.6046%" y="63.50"></text></g><g><title>resolve_instance (6,055,744 samples, 0.77%)</title><rect x="18.8426%" y="69" width="0.7743%" height="15" fill="rgb(228,23,34)"/><text x="19.0926%" y="79.50"></text></g><g><title>thir_body (6,323,290 samples, 0.81%)</title><rect x="19.6574%" y="69" width="0.8085%" height="15" fill="rgb(218,30,26)"/><text x="19.9074%" y="79.50"></text></g><g><title>mir_const (45,815,168 samples, 5.86%)</title><rect x="14.6485%" y="117" width="5.8583%" height="15" fill="rgb(220,122,19)"/><text x="14.8985%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (38,515,682 samples, 4.92%)</title><rect x="15.5818%" y="101" width="4.9249%" height="15" fill="rgb(250,228,42)"/><text x="15.8318%" y="111.50">unsafe..</text></g><g><title>mir_built (35,144,704 samples, 4.49%)</title><rect x="16.0129%" y="85" width="4.4939%" height="15" fill="rgb(240,193,28)"/><text x="16.2629%" y="95.50">mir_b..</text></g><g><title>mir_promoted (52,157,905 samples, 6.67%)</title><rect x="13.9163%" y="133" width="6.6693%" height="15" fill="rgb(216,20,37)"/><text x="14.1663%" y="143.50">mir_promo..</text></g><g><title>type_op_ascribe_user_type (2,286,674 samples, 0.29%)</title><rect x="20.5855%" y="133" width="0.2924%" height="15" fill="rgb(206,188,39)"/><text x="20.8355%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (2,735,305 samples, 0.35%)</title><rect x="20.8779%" y="133" width="0.3498%" height="15" fill="rgb(217,207,13)"/><text x="21.1279%" y="143.50"></text></g><g><title>normalize_projection_ty (1,424,404 samples, 0.18%)</title><rect x="21.0456%" y="117" width="0.1821%" height="15" fill="rgb(231,73,38)"/><text x="21.2956%" y="127.50"></text></g><g><title>type_op_normalize_ty (1,091,504 samples, 0.14%)</title><rect x="21.2937%" y="133" width="0.1396%" height="15" fill="rgb(225,20,46)"/><text x="21.5437%" y="143.50"></text></g><g><title>type_op_prove_predicate (8,280,989 samples, 1.06%)</title><rect x="21.4332%" y="133" width="1.0589%" height="15" fill="rgb(210,31,41)"/><text x="21.6832%" y="143.50"></text></g><g><title>MIR_borrow_checking (150,020,585 samples, 19.18%)</title><rect x="3.3100%" y="165" width="19.1827%" height="15" fill="rgb(221,200,47)"/><text x="3.5600%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (148,535,609 samples, 18.99%)</title><rect x="3.4998%" y="149" width="18.9928%" height="15" fill="rgb(226,26,5)"/><text x="3.7498%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (1,698,401 samples, 0.22%)</title><rect x="22.5681%" y="165" width="0.2172%" height="15" fill="rgb(249,33,26)"/><text x="22.8181%" y="175.50"></text></g><g><title>should_inherit_track_caller (1,587,477 samples, 0.20%)</title><rect x="23.1027%" y="117" width="0.2030%" height="15" fill="rgb(235,183,28)"/><text x="23.3527%" y="127.50"></text></g><g><title>codegen_fn_attrs (2,429,195 samples, 0.31%)</title><rect x="22.9979%" y="133" width="0.3106%" height="15" fill="rgb(221,5,38)"/><text x="23.2479%" y="143.50"></text></g><g><title>check_mod_attrs (4,033,977 samples, 0.52%)</title><rect x="22.7929%" y="149" width="0.5158%" height="15" fill="rgb(247,18,42)"/><text x="23.0429%" y="159.50"></text></g><g><title>check_mod_const_bodies (1,060,542 samples, 0.14%)</title><rect x="23.3087%" y="149" width="0.1356%" height="15" fill="rgb(241,131,45)"/><text x="23.5587%" y="159.50"></text></g><g><title>lookup_deprecation_entry (976,119 samples, 0.12%)</title><rect x="23.6700%" y="133" width="0.1248%" height="15" fill="rgb(249,31,29)"/><text x="23.9200%" y="143.50"></text></g><g><title>stability_index (864,509 samples, 0.11%)</title><rect x="23.6843%" y="117" width="0.1105%" height="15" fill="rgb(225,111,53)"/><text x="23.9343%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (2,356,455 samples, 0.30%)</title><rect x="23.5121%" y="149" width="0.3013%" height="15" fill="rgb(238,160,17)"/><text x="23.7621%" y="159.50"></text></g><g><title>misc_checking_1 (8,349,348 samples, 1.07%)</title><rect x="22.7853%" y="165" width="1.0676%" height="15" fill="rgb(214,148,48)"/><text x="23.0353%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (2,339,905 samples, 0.30%)</title><rect x="23.8532%" y="149" width="0.2992%" height="15" fill="rgb(232,36,49)"/><text x="24.1032%" y="159.50"></text></g><g><title>check_mod_liveness (1,887,871 samples, 0.24%)</title><rect x="23.9110%" y="133" width="0.2414%" height="15" fill="rgb(209,103,24)"/><text x="24.1610%" y="143.50"></text></g><g><title>misc_checking_2 (5,226,726 samples, 0.67%)</title><rect x="23.8530%" y="165" width="0.6683%" height="15" fill="rgb(229,88,8)"/><text x="24.1030%" y="175.50"></text></g><g><title>match_checking (2,884,681 samples, 0.37%)</title><rect x="24.1524%" y="149" width="0.3689%" height="15" fill="rgb(213,181,19)"/><text x="24.4024%" y="159.50"></text></g><g><title>check_match (2,509,753 samples, 0.32%)</title><rect x="24.2004%" y="133" width="0.3209%" height="15" fill="rgb(254,191,54)"/><text x="24.4504%" y="143.50"></text></g><g><title>check_private_in_public (1,626,798 samples, 0.21%)</title><rect x="24.5229%" y="149" width="0.2080%" height="15" fill="rgb(241,83,37)"/><text x="24.7729%" y="159.50"></text></g><g><title>death_checking (2,828,789 samples, 0.36%)</title><rect x="24.7309%" y="149" width="0.3617%" height="15" fill="rgb(233,36,39)"/><text x="24.9809%" y="159.50"></text></g><g><title>param_env (1,975,244 samples, 0.25%)</title><rect x="25.4143%" y="117" width="0.2526%" height="15" fill="rgb(226,3,54)"/><text x="25.6643%" y="127.50"></text></g><g><title>predicates_of (1,020,587 samples, 0.13%)</title><rect x="25.5364%" y="101" width="0.1305%" height="15" fill="rgb(245,192,40)"/><text x="25.7864%" y="111.50"></text></g><g><title>predicates_defined_on (864,603 samples, 0.11%)</title><rect x="25.5563%" y="85" width="0.1106%" height="15" fill="rgb(238,167,29)"/><text x="25.8063%" y="95.50"></text></g><g><title>crate_lints (5,759,832 samples, 0.74%)</title><rect x="25.0930%" y="133" width="0.7365%" height="15" fill="rgb(232,182,51)"/><text x="25.3430%" y="143.50"></text></g><g><title>type_of (1,172,113 samples, 0.15%)</title><rect x="25.6796%" y="117" width="0.1499%" height="15" fill="rgb(231,60,39)"/><text x="25.9296%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (936,679 samples, 0.12%)</title><rect x="25.7097%" y="101" width="0.1198%" height="15" fill="rgb(208,69,12)"/><text x="25.9597%" y="111.50"></text></g><g><title>lint_checking (7,815,314 samples, 1.00%)</title><rect x="25.0927%" y="149" width="0.9993%" height="15" fill="rgb(235,93,37)"/><text x="25.3427%" y="159.50"></text></g><g><title>module_lints (2,052,722 samples, 0.26%)</title><rect x="25.8295%" y="133" width="0.2625%" height="15" fill="rgb(213,116,39)"/><text x="26.0795%" y="143.50"></text></g><g><title>lint_mod (2,036,072 samples, 0.26%)</title><rect x="25.8316%" y="117" width="0.2603%" height="15" fill="rgb(222,207,29)"/><text x="26.0816%" y="127.50"></text></g><g><title>privacy_access_levels (2,711,419 samples, 0.35%)</title><rect x="26.0920%" y="149" width="0.3467%" height="15" fill="rgb(206,96,30)"/><text x="26.3420%" y="159.50"></text></g><g><title>privacy_checking_modules (7,268,497 samples, 0.93%)</title><rect x="26.4387%" y="149" width="0.9294%" height="15" fill="rgb(218,138,4)"/><text x="26.6887%" y="159.50"></text></g><g><title>check_mod_privacy (7,253,197 samples, 0.93%)</title><rect x="26.4406%" y="133" width="0.9274%" height="15" fill="rgb(250,191,14)"/><text x="26.6906%" y="143.50"></text></g><g><title>misc_checking_3 (22,341,948 samples, 2.86%)</title><rect x="24.5213%" y="165" width="2.8568%" height="15" fill="rgb(239,60,40)"/><text x="24.7713%" y="175.50">mi..</text></g><g><title>impl_parent (2,721,092 samples, 0.35%)</title><rect x="28.1591%" y="101" width="0.3479%" height="15" fill="rgb(206,27,48)"/><text x="28.4091%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,546,917 samples, 0.20%)</title><rect x="28.3093%" y="85" width="0.1978%" height="15" fill="rgb(225,35,8)"/><text x="28.5593%" y="95.50"></text></g><g><title>impl_trait_ref (6,101,648 samples, 0.78%)</title><rect x="28.5071%" y="101" width="0.7802%" height="15" fill="rgb(250,213,24)"/><text x="28.7571%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,746,394 samples, 0.61%)</title><rect x="28.6804%" y="85" width="0.6069%" height="15" fill="rgb(247,123,22)"/><text x="28.9304%" y="95.50"></text></g><g><title>coherent_trait (15,457,504 samples, 1.98%)</title><rect x="27.4686%" y="133" width="1.9765%" height="15" fill="rgb(231,138,38)"/><text x="27.7186%" y="143.50">c..</text></g><g><title>specialization_graph_of (14,821,566 samples, 1.90%)</title><rect x="27.5499%" y="117" width="1.8952%" height="15" fill="rgb(231,145,46)"/><text x="27.7999%" y="127.50">s..</text></g><g><title>trait_impls_of (1,234,480 samples, 0.16%)</title><rect x="29.2873%" y="101" width="0.1578%" height="15" fill="rgb(251,118,11)"/><text x="29.5373%" y="111.50"></text></g><g><title>coherence_checking (15,880,669 samples, 2.03%)</title><rect x="27.4630%" y="149" width="2.0306%" height="15" fill="rgb(217,147,25)"/><text x="27.7130%" y="159.50">c..</text></g><g><title>associated_item (1,278,595 samples, 0.16%)</title><rect x="45.2700%" y="85" width="0.1635%" height="15" fill="rgb(247,81,37)"/><text x="45.5200%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (1,000,342 samples, 0.13%)</title><rect x="45.3056%" y="69" width="0.1279%" height="15" fill="rgb(209,12,38)"/><text x="45.5556%" y="79.50"></text></g><g><title>associated_items (1,742,439 samples, 0.22%)</title><rect x="45.2175%" y="101" width="0.2228%" height="15" fill="rgb(227,1,9)"/><text x="45.4675%" y="111.50"></text></g><g><title>dropck_outlives (947,696 samples, 0.12%)</title><rect x="45.4647%" y="101" width="0.1212%" height="15" fill="rgb(248,47,43)"/><text x="45.7147%" y="111.50"></text></g><g><title>specializes (2,019,401 samples, 0.26%)</title><rect x="47.1556%" y="85" width="0.2582%" height="15" fill="rgb(221,10,30)"/><text x="47.4056%" y="95.50"></text></g><g><title>param_env (1,099,892 samples, 0.14%)</title><rect x="47.2732%" y="69" width="0.1406%" height="15" fill="rgb(210,229,1)"/><text x="47.5232%" y="79.50"></text></g><g><title>evaluate_obligation (14,710,736 samples, 1.88%)</title><rect x="45.5859%" y="101" width="1.8810%" height="15" fill="rgb(222,148,37)"/><text x="45.8359%" y="111.50">e..</text></g><g><title>item_attrs (933,171 samples, 0.12%)</title><rect x="47.6151%" y="101" width="0.1193%" height="15" fill="rgb(234,67,33)"/><text x="47.8651%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (902,871 samples, 0.12%)</title><rect x="47.6190%" y="85" width="0.1154%" height="15" fill="rgb(247,98,35)"/><text x="47.8690%" y="95.50"></text></g><g><title>method_autoderef_steps (1,466,132 samples, 0.19%)</title><rect x="47.7576%" y="101" width="0.1875%" height="15" fill="rgb(247,138,52)"/><text x="48.0076%" y="111.50"></text></g><g><title>evaluate_obligation (788,567 samples, 0.10%)</title><rect x="47.8442%" y="85" width="0.1008%" height="15" fill="rgb(213,79,30)"/><text x="48.0942%" y="95.50"></text></g><g><title>typeck (6,550,000 samples, 0.84%)</title><rect x="48.1464%" y="101" width="0.8375%" height="15" fill="rgb(246,177,23)"/><text x="48.3964%" y="111.50"></text></g><g><title>item_bodies_checking (152,369,301 samples, 19.48%)</title><rect x="29.5431%" y="149" width="19.4830%" height="15" fill="rgb(230,62,27)"/><text x="29.7931%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (152,364,391 samples, 19.48%)</title><rect x="29.5438%" y="133" width="19.4824%" height="15" fill="rgb(216,154,8)"/><text x="29.7938%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (151,363,351 samples, 19.35%)</title><rect x="29.6718%" y="117" width="19.3544%" height="15" fill="rgb(244,35,45)"/><text x="29.9218%" y="127.50">typeck</text></g><g><title>item_types_checking (23,276,558 samples, 2.98%)</title><rect x="49.0262%" y="149" width="2.9763%" height="15" fill="rgb(251,115,12)"/><text x="49.2762%" y="159.50">ite..</text></g><g><title>check_mod_item_types (23,258,068 samples, 2.97%)</title><rect x="49.0285%" y="133" width="2.9739%" height="15" fill="rgb(240,54,50)"/><text x="49.2785%" y="143.50">che..</text></g><g><title>fn_sig (4,813,082 samples, 0.62%)</title><rect x="52.3233%" y="117" width="0.6154%" height="15" fill="rgb(233,84,52)"/><text x="52.5733%" y="127.50"></text></g><g><title>named_region_map (1,897,959 samples, 0.24%)</title><rect x="53.1040%" y="101" width="0.2427%" height="15" fill="rgb(207,117,47)"/><text x="53.3540%" y="111.50"></text></g><g><title>resolve_lifetimes (1,666,965 samples, 0.21%)</title><rect x="53.1336%" y="85" width="0.2132%" height="15" fill="rgb(249,43,39)"/><text x="53.3836%" y="95.50"></text></g><g><title>generics_of (3,332,522 samples, 0.43%)</title><rect x="52.9387%" y="117" width="0.4261%" height="15" fill="rgb(209,38,44)"/><text x="53.1887%" y="127.50"></text></g><g><title>item_bounds (1,204,872 samples, 0.15%)</title><rect x="53.4161%" y="117" width="0.1541%" height="15" fill="rgb(236,212,23)"/><text x="53.6661%" y="127.50"></text></g><g><title>late_bound_vars_map (1,018,987 samples, 0.13%)</title><rect x="53.9027%" y="69" width="0.1303%" height="15" fill="rgb(242,79,21)"/><text x="54.1527%" y="79.50"></text></g><g><title>resolve_lifetimes (955,256 samples, 0.12%)</title><rect x="53.9109%" y="53" width="0.1221%" height="15" fill="rgb(211,96,35)"/><text x="54.1609%" y="63.50"></text></g><g><title>explicit_predicates_of (2,474,206 samples, 0.32%)</title><rect x="53.7530%" y="85" width="0.3164%" height="15" fill="rgb(253,215,40)"/><text x="54.0030%" y="95.50"></text></g><g><title>predicates_of (4,170,744 samples, 0.53%)</title><rect x="53.5702%" y="117" width="0.5333%" height="15" fill="rgb(211,81,21)"/><text x="53.8202%" y="127.50"></text></g><g><title>predicates_defined_on (3,608,265 samples, 0.46%)</title><rect x="53.6421%" y="101" width="0.4614%" height="15" fill="rgb(208,190,38)"/><text x="53.8921%" y="111.50"></text></g><g><title>super_predicates_of (1,216,103 samples, 0.16%)</title><rect x="54.1035%" y="117" width="0.1555%" height="15" fill="rgb(235,213,38)"/><text x="54.3535%" y="127.50"></text></g><g><title>super_predicates_that_define_assoc_type (1,199,353 samples, 0.15%)</title><rect x="54.1056%" y="101" width="0.1534%" height="15" fill="rgb(237,122,38)"/><text x="54.3556%" y="111.50"></text></g><g><title>type_collecting (18,244,723 samples, 2.33%)</title><rect x="52.0044%" y="149" width="2.3329%" height="15" fill="rgb(244,218,35)"/><text x="52.2544%" y="159.50">t..</text></g><g><title>collect_mod_item_types (18,217,492 samples, 2.33%)</title><rect x="52.0079%" y="133" width="2.3294%" height="15" fill="rgb(240,68,47)"/><text x="52.2579%" y="143.50">c..</text></g><g><title>evaluate_obligation (1,237,824 samples, 0.16%)</title><rect x="57.5460%" y="117" width="0.1583%" height="15" fill="rgb(210,16,53)"/><text x="57.7960%" y="127.50"></text></g><g><title>implied_outlives_bounds (956,688 samples, 0.12%)</title><rect x="57.7088%" y="117" width="0.1223%" height="15" fill="rgb(235,124,12)"/><text x="57.9588%" y="127.50"></text></g><g><title>param_env (9,077,678 samples, 1.16%)</title><rect x="57.8311%" y="117" width="1.1607%" height="15" fill="rgb(224,169,11)"/><text x="58.0811%" y="127.50"></text></g><g><title>check_impl_item_well_formed (36,528,019 samples, 4.67%)</title><rect x="54.6246%" y="133" width="4.6707%" height="15" fill="rgb(250,166,2)"/><text x="54.8746%" y="143.50">check..</text></g><g><title>region_scope_tree (2,358,804 samples, 0.30%)</title><rect x="58.9937%" y="117" width="0.3016%" height="15" fill="rgb(242,216,29)"/><text x="59.2437%" y="127.50"></text></g><g><title>evaluate_obligation (7,125,423 samples, 0.91%)</title><rect x="63.8099%" y="117" width="0.9111%" height="15" fill="rgb(230,116,27)"/><text x="64.0599%" y="127.50"></text></g><g><title>param_env (5,240,785 samples, 0.67%)</title><rect x="64.8181%" y="117" width="0.6701%" height="15" fill="rgb(228,99,48)"/><text x="65.0681%" y="127.50"></text></g><g><title>check_item_well_formed (49,737,307 samples, 6.36%)</title><rect x="59.2954%" y="133" width="6.3598%" height="15" fill="rgb(253,11,6)"/><text x="59.5454%" y="143.50">check_it..</text></g><g><title>implied_outlives_bounds (1,062,173 samples, 0.14%)</title><rect x="68.3215%" y="117" width="0.1358%" height="15" fill="rgb(247,143,39)"/><text x="68.5715%" y="127.50"></text></g><g><title>param_env (6,971,155 samples, 0.89%)</title><rect x="68.4575%" y="117" width="0.8914%" height="15" fill="rgb(236,97,10)"/><text x="68.7075%" y="127.50"></text></g><g><title>analysis (518,488,634 samples, 66.30%)</title><rect x="3.1206%" y="181" width="66.2977%" height="15" fill="rgb(233,208,19)"/><text x="3.3706%" y="191.50">analysis</text></g><g><title>type_check_crate (328,780,187 samples, 42.04%)</title><rect x="27.3781%" y="165" width="42.0402%" height="15" fill="rgb(216,164,2)"/><text x="27.6281%" y="175.50">type_check_crate</text></g><g><title>wf_checking (117,873,803 samples, 15.07%)</title><rect x="54.3461%" y="149" width="15.0722%" height="15" fill="rgb(220,129,5)"/><text x="54.5961%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (29,430,225 samples, 3.76%)</title><rect x="65.6551%" y="133" width="3.7632%" height="15" fill="rgb(242,17,10)"/><text x="65.9051%" y="143.50">chec..</text></g><g><title>codegen_module (860,619 samples, 0.11%)</title><rect x="69.5339%" y="165" width="0.1100%" height="15" fill="rgb(242,107,0)"/><text x="69.7839%" y="175.50"></text></g><g><title>monomorphization_collector (1,017,031 samples, 0.13%)</title><rect x="69.6461%" y="149" width="0.1300%" height="15" fill="rgb(251,28,31)"/><text x="69.8961%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,112,282 samples, 0.14%)</title><rect x="69.6441%" y="165" width="0.1422%" height="15" fill="rgb(233,223,10)"/><text x="69.8941%" y="175.50"></text></g><g><title>codegen_crate (2,962,821 samples, 0.38%)</title><rect x="69.4194%" y="181" width="0.3788%" height="15" fill="rgb(215,21,27)"/><text x="69.6694%" y="191.50"></text></g><g><title>codegen_module_optimize (13,174,180 samples, 1.68%)</title><rect x="69.7982%" y="181" width="1.6845%" height="15" fill="rgb(232,23,21)"/><text x="70.0482%" y="191.50"></text></g><g><title>LLVM_module_optimize (9,005,997 samples, 1.15%)</title><rect x="70.3312%" y="165" width="1.1516%" height="15" fill="rgb(244,5,23)"/><text x="70.5812%" y="175.50"></text></g><g><title>LLVM_lto_optimize (6,479,378 samples, 0.83%)</title><rect x="71.6075%" y="165" width="0.8285%" height="15" fill="rgb(226,81,46)"/><text x="71.8575%" y="175.50"></text></g><g><title>LLVM_module_codegen (15,900,160 samples, 2.03%)</title><rect x="72.4360%" y="165" width="2.0331%" height="15" fill="rgb(247,70,30)"/><text x="72.6860%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (15,671,638 samples, 2.00%)</title><rect x="72.4653%" y="149" width="2.0039%" height="15" fill="rgb(212,68,19)"/><text x="72.7153%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (23,475,269 samples, 3.00%)</title><rect x="71.4828%" y="181" width="3.0017%" height="15" fill="rgb(240,187,13)"/><text x="71.7328%" y="191.50">cod..</text></g><g><title>metadata_register_crate (1,553,397 samples, 0.20%)</title><rect x="83.1971%" y="133" width="0.1986%" height="15" fill="rgb(223,113,26)"/><text x="83.4471%" y="143.50"></text></g><g><title>macro_expand_crate (69,729,512 samples, 8.92%)</title><rect x="74.6480%" y="165" width="8.9161%" height="15" fill="rgb(206,192,2)"/><text x="74.8980%" y="175.50">macro_expand_..</text></g><g><title>expand_crate (69,701,081 samples, 8.91%)</title><rect x="74.6516%" y="149" width="8.9125%" height="15" fill="rgb(241,108,4)"/><text x="74.9016%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (1,317,193 samples, 0.17%)</title><rect x="83.3957%" y="133" width="0.1684%" height="15" fill="rgb(247,173,49)"/><text x="83.6457%" y="143.50"></text></g><g><title>late_resolve_crate (7,797,393 samples, 1.00%)</title><rect x="83.7062%" y="149" width="0.9970%" height="15" fill="rgb(224,114,35)"/><text x="83.9562%" y="159.50"></text></g><g><title>configure_and_expand (80,721,528 samples, 10.32%)</title><rect x="74.4845%" y="181" width="10.3216%" height="15" fill="rgb(245,159,27)"/><text x="74.7345%" y="191.50">configure_and_e..</text></g><g><title>resolve_crate (9,641,702 samples, 1.23%)</title><rect x="83.5733%" y="165" width="1.2329%" height="15" fill="rgb(245,172,44)"/><text x="83.8233%" y="175.50"></text></g><g><title>drop_ast (1,875,370 samples, 0.24%)</title><rect x="84.8061%" y="181" width="0.2398%" height="15" fill="rgb(236,23,11)"/><text x="85.0561%" y="191.50"></text></g><g><title>early_lint_checks (2,458,776 samples, 0.31%)</title><rect x="85.0485%" y="181" width="0.3144%" height="15" fill="rgb(205,117,38)"/><text x="85.2985%" y="191.50"></text></g><g><title>free_global_ctxt (7,243,167 samples, 0.93%)</title><rect x="85.3629%" y="181" width="0.9262%" height="15" fill="rgb(237,72,25)"/><text x="85.6129%" y="191.50"></text></g><g><title>reachable_non_generics (1,173,593 samples, 0.15%)</title><rect x="88.0329%" y="149" width="0.1501%" height="15" fill="rgb(244,70,9)"/><text x="88.2829%" y="159.50"></text></g><g><title>reachable_set (1,006,091 samples, 0.13%)</title><rect x="88.0543%" y="133" width="0.1286%" height="15" fill="rgb(217,125,39)"/><text x="88.3043%" y="143.50"></text></g><g><title>exported_symbols (1,353,925 samples, 0.17%)</title><rect x="88.0281%" y="165" width="0.1731%" height="15" fill="rgb(235,36,10)"/><text x="88.2781%" y="175.50"></text></g><g><title>is_sized_raw (1,336,724 samples, 0.17%)</title><rect x="91.3836%" y="133" width="0.1709%" height="15" fill="rgb(251,123,47)"/><text x="91.6336%" y="143.50"></text></g><g><title>evaluate_obligation (1,085,059 samples, 0.14%)</title><rect x="91.4158%" y="117" width="0.1387%" height="15" fill="rgb(221,13,13)"/><text x="91.6658%" y="127.50"></text></g><g><title>layout_of (2,648,305 samples, 0.34%)</title><rect x="91.2713%" y="149" width="0.3386%" height="15" fill="rgb(238,131,9)"/><text x="91.5213%" y="159.50"></text></g><g><title>is_copy_raw (1,052,469 samples, 0.13%)</title><rect x="94.2730%" y="117" width="0.1346%" height="15" fill="rgb(211,50,8)"/><text x="94.5230%" y="127.50"></text></g><g><title>evaluate_obligation (810,199 samples, 0.10%)</title><rect x="94.3040%" y="101" width="0.1036%" height="15" fill="rgb(245,182,24)"/><text x="94.5540%" y="111.50"></text></g><g><title>needs_drop_raw (1,357,053 samples, 0.17%)</title><rect x="94.2534%" y="133" width="0.1735%" height="15" fill="rgb(242,14,37)"/><text x="94.5034%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (22,547,577 samples, 2.88%)</title><rect x="91.6100%" y="149" width="2.8831%" height="15" fill="rgb(246,228,12)"/><text x="91.8600%" y="159.50">mi..</text></g><g><title>optimized_mir (49,011,275 samples, 6.27%)</title><rect x="88.3108%" y="165" width="6.2669%" height="15" fill="rgb(213,55,15)"/><text x="88.5608%" y="175.50">optimize..</text></g><g><title>generate_crate_metadata (65,609,108 samples, 8.39%)</title><rect x="86.2890%" y="181" width="8.3893%" height="15" fill="rgb(209,9,3)"/><text x="86.5390%" y="191.50">generate_cra..</text></g><g><title>hir_lowering (21,634,400 samples, 2.77%)</title><rect x="94.6783%" y="181" width="2.7663%" height="15" fill="rgb(230,59,30)"/><text x="94.9283%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (12,671,935 samples, 1.62%)</title><rect x="97.4467%" y="165" width="1.6203%" height="15" fill="rgb(209,121,21)"/><text x="97.6967%" y="175.50"></text></g><g><title>link_crate (2,718,578 samples, 0.35%)</title><rect x="99.0670%" y="165" width="0.3476%" height="15" fill="rgb(220,109,13)"/><text x="99.3170%" y="175.50"></text></g><g><title>link_binary (2,628,537 samples, 0.34%)</title><rect x="99.0785%" y="149" width="0.3361%" height="15" fill="rgb(232,18,1)"/><text x="99.3285%" y="159.50"></text></g><g><title>link_rlib (2,164,293 samples, 0.28%)</title><rect x="99.1379%" y="133" width="0.2767%" height="15" fill="rgb(215,41,42)"/><text x="99.3879%" y="143.50"></text></g><g><title>link (15,417,374 samples, 1.97%)</title><rect x="97.4446%" y="181" width="1.9714%" height="15" fill="rgb(224,123,36)"/><text x="97.6946%" y="191.50">l..</text></g><g><title>self_profile_alloc_query_strings (2,915,831 samples, 0.37%)</title><rect x="99.4871%" y="181" width="0.3728%" height="15" fill="rgb(240,125,3)"/><text x="99.7371%" y="191.50"></text></g><g><title>all (782,061,376 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (782,061,376 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (1,006,001 samples, 0.13%)</title><rect x="99.8714%" y="181" width="0.1286%" height="15" fill="rgb(238,207,15)"/><text x="100.1214%" y="191.50"></text></g></svg></svg>