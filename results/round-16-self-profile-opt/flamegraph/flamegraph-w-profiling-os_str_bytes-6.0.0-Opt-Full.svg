<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (74,029,197 samples, 11.87%)</title><rect x="0.1387%" y="181" width="11.8743%" height="15" fill="rgb(227,0,7)"/><text x="0.3887%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (1,180,423 samples, 0.19%)</title><rect x="16.8108%" y="53" width="0.1893%" height="15" fill="rgb(217,0,24)"/><text x="17.0608%" y="63.50"></text></g><g><title>evaluate_obligation (995,650 samples, 0.16%)</title><rect x="16.8404%" y="37" width="0.1597%" height="15" fill="rgb(221,193,54)"/><text x="17.0904%" y="47.50"></text></g><g><title>needs_drop_raw (1,836,059 samples, 0.29%)</title><rect x="16.7078%" y="69" width="0.2945%" height="15" fill="rgb(248,212,6)"/><text x="16.9578%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (959,974 samples, 0.15%)</title><rect x="17.0906%" y="53" width="0.1540%" height="15" fill="rgb(208,68,35)"/><text x="17.3406%" y="63.50"></text></g><g><title>resolve_instance (1,961,270 samples, 0.31%)</title><rect x="17.0064%" y="69" width="0.3146%" height="15" fill="rgb(232,128,0)"/><text x="17.2564%" y="79.50"></text></g><g><title>thir_body (1,568,988 samples, 0.25%)</title><rect x="17.3307%" y="69" width="0.2517%" height="15" fill="rgb(207,160,47)"/><text x="17.5807%" y="79.50"></text></g><g><title>mir_const (13,268,085 samples, 2.13%)</title><rect x="15.4617%" y="117" width="2.1282%" height="15" fill="rgb(228,23,34)"/><text x="15.7117%" y="127.50">m..</text></g><g><title>unsafety_check_result (11,356,303 samples, 1.82%)</title><rect x="15.7684%" y="101" width="1.8216%" height="15" fill="rgb(218,30,26)"/><text x="16.0184%" y="111.50">u..</text></g><g><title>mir_built (9,942,795 samples, 1.59%)</title><rect x="15.9951%" y="85" width="1.5948%" height="15" fill="rgb(220,122,19)"/><text x="16.2451%" y="95.50"></text></g><g><title>mir_promoted (14,981,075 samples, 2.40%)</title><rect x="15.2372%" y="133" width="2.4030%" height="15" fill="rgb(250,228,42)"/><text x="15.4872%" y="143.50">mi..</text></g><g><title>type_op_normalize_fn_sig (694,015 samples, 0.11%)</title><rect x="17.7048%" y="133" width="0.1113%" height="15" fill="rgb(240,193,28)"/><text x="17.9548%" y="143.50"></text></g><g><title>type_op_prove_predicate (3,934,299 samples, 0.63%)</title><rect x="17.8974%" y="133" width="0.6311%" height="15" fill="rgb(216,20,37)"/><text x="18.1474%" y="143.50"></text></g><g><title>MIR_borrow_checking (40,225,829 samples, 6.45%)</title><rect x="12.0776%" y="165" width="6.4522%" height="15" fill="rgb(206,188,39)"/><text x="12.3276%" y="175.50">MIR_borr..</text></g><g><title>mir_borrowck (39,963,926 samples, 6.41%)</title><rect x="12.1196%" y="149" width="6.4102%" height="15" fill="rgb(217,207,13)"/><text x="12.3696%" y="159.50">mir_borr..</text></g><g><title>codegen_fn_attrs (958,371 samples, 0.15%)</title><rect x="18.6806%" y="133" width="0.1537%" height="15" fill="rgb(231,73,38)"/><text x="18.9306%" y="143.50"></text></g><g><title>check_mod_attrs (1,326,884 samples, 0.21%)</title><rect x="18.6215%" y="149" width="0.2128%" height="15" fill="rgb(225,20,46)"/><text x="18.8715%" y="159.50"></text></g><g><title>misc_checking_1 (2,351,296 samples, 0.38%)</title><rect x="18.6172%" y="165" width="0.3771%" height="15" fill="rgb(210,31,41)"/><text x="18.8672%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (718,868 samples, 0.12%)</title><rect x="18.9946%" y="149" width="0.1153%" height="15" fill="rgb(221,200,47)"/><text x="19.2446%" y="159.50"></text></g><g><title>misc_checking_2 (1,811,460 samples, 0.29%)</title><rect x="18.9943%" y="165" width="0.2906%" height="15" fill="rgb(226,26,5)"/><text x="19.2443%" y="175.50"></text></g><g><title>match_checking (1,090,692 samples, 0.17%)</title><rect x="19.1099%" y="149" width="0.1749%" height="15" fill="rgb(249,33,26)"/><text x="19.3599%" y="159.50"></text></g><g><title>check_match (1,031,431 samples, 0.17%)</title><rect x="19.1194%" y="133" width="0.1654%" height="15" fill="rgb(235,183,28)"/><text x="19.3694%" y="143.50"></text></g><g><title>death_checking (804,719 samples, 0.13%)</title><rect x="19.3454%" y="149" width="0.1291%" height="15" fill="rgb(221,5,38)"/><text x="19.5954%" y="159.50"></text></g><g><title>crate_lints (2,704,050 samples, 0.43%)</title><rect x="19.4747%" y="133" width="0.4337%" height="15" fill="rgb(247,18,42)"/><text x="19.7247%" y="143.50"></text></g><g><title>type_of (1,129,403 samples, 0.18%)</title><rect x="19.7273%" y="117" width="0.1812%" height="15" fill="rgb(241,131,45)"/><text x="19.9773%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (891,808 samples, 0.14%)</title><rect x="19.7654%" y="101" width="0.1430%" height="15" fill="rgb(249,31,29)"/><text x="20.0154%" y="111.50"></text></g><g><title>lint_checking (3,320,937 samples, 0.53%)</title><rect x="19.4745%" y="149" width="0.5327%" height="15" fill="rgb(225,111,53)"/><text x="19.7245%" y="159.50"></text></g><g><title>privacy_access_levels (627,537 samples, 0.10%)</title><rect x="20.0071%" y="149" width="0.1007%" height="15" fill="rgb(238,160,17)"/><text x="20.2571%" y="159.50"></text></g><g><title>privacy_checking_modules (1,308,074 samples, 0.21%)</title><rect x="20.1078%" y="149" width="0.2098%" height="15" fill="rgb(214,148,48)"/><text x="20.3578%" y="159.50"></text></g><g><title>check_mod_privacy (1,302,344 samples, 0.21%)</title><rect x="20.1087%" y="133" width="0.2089%" height="15" fill="rgb(232,36,49)"/><text x="20.3587%" y="143.50"></text></g><g><title>misc_checking_3 (6,460,142 samples, 1.04%)</title><rect x="19.2849%" y="165" width="1.0362%" height="15" fill="rgb(209,103,24)"/><text x="19.5349%" y="175.50"></text></g><g><title>impl_parent (3,002,395 samples, 0.48%)</title><rect x="21.2061%" y="101" width="0.4816%" height="15" fill="rgb(229,88,8)"/><text x="21.4561%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,775,315 samples, 0.28%)</title><rect x="21.4030%" y="85" width="0.2848%" height="15" fill="rgb(213,181,19)"/><text x="21.6530%" y="95.50"></text></g><g><title>impl_trait_ref (6,685,419 samples, 1.07%)</title><rect x="21.6877%" y="101" width="1.0723%" height="15" fill="rgb(254,191,54)"/><text x="21.9377%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,036,836 samples, 0.81%)</title><rect x="21.9521%" y="85" width="0.8079%" height="15" fill="rgb(241,83,37)"/><text x="22.2021%" y="95.50"></text></g><g><title>trait_impls_of (1,107,751 samples, 0.18%)</title><rect x="22.7862%" y="101" width="0.1777%" height="15" fill="rgb(233,36,39)"/><text x="23.0362%" y="111.50"></text></g><g><title>coherent_trait (16,341,473 samples, 2.62%)</title><rect x="20.3459%" y="133" width="2.6212%" height="15" fill="rgb(226,3,54)"/><text x="20.5959%" y="143.50">co..</text></g><g><title>specialization_graph_of (16,297,492 samples, 2.61%)</title><rect x="20.3530%" y="117" width="2.6141%" height="15" fill="rgb(245,192,40)"/><text x="20.6030%" y="127.50">sp..</text></g><g><title>coherence_checking (16,497,265 samples, 2.65%)</title><rect x="20.3403%" y="149" width="2.6462%" height="15" fill="rgb(238,167,29)"/><text x="20.5903%" y="159.50">co..</text></g><g><title>associated_items (671,574 samples, 0.11%)</title><rect x="26.8514%" y="101" width="0.1077%" height="15" fill="rgb(232,182,51)"/><text x="27.1014%" y="111.50"></text></g><g><title>adt_dtorck_constraint (696,948 samples, 0.11%)</title><rect x="27.0234%" y="85" width="0.1118%" height="15" fill="rgb(231,60,39)"/><text x="27.2734%" y="95.50"></text></g><g><title>dropck_outlives (1,095,219 samples, 0.18%)</title><rect x="26.9761%" y="101" width="0.1757%" height="15" fill="rgb(208,69,12)"/><text x="27.2261%" y="111.50"></text></g><g><title>evaluate_obligation (3,232,078 samples, 0.52%)</title><rect x="27.1518%" y="101" width="0.5184%" height="15" fill="rgb(235,93,37)"/><text x="27.4018%" y="111.50"></text></g><g><title>evaluate_obligation (1,285,897 samples, 0.21%)</title><rect x="29.3986%" y="85" width="0.2063%" height="15" fill="rgb(213,116,39)"/><text x="29.6486%" y="95.50"></text></g><g><title>typeck (10,536,766 samples, 1.69%)</title><rect x="28.0480%" y="101" width="1.6901%" height="15" fill="rgb(222,207,29)"/><text x="28.2980%" y="111.50"></text></g><g><title>item_bodies_checking (42,128,651 samples, 6.76%)</title><rect x="22.9969%" y="149" width="6.7574%" height="15" fill="rgb(206,96,30)"/><text x="23.2469%" y="159.50">item_bodi..</text></g><g><title>typeck_item_bodies (42,125,221 samples, 6.76%)</title><rect x="22.9974%" y="133" width="6.7569%" height="15" fill="rgb(218,138,4)"/><text x="23.2474%" y="143.50">typeck_it..</text></g><g><title>typeck (41,950,380 samples, 6.73%)</title><rect x="23.0255%" y="117" width="6.7288%" height="15" fill="rgb(250,191,14)"/><text x="23.2755%" y="127.50">typeck</text></g><g><title>generics_of (691,109 samples, 0.11%)</title><rect x="30.7475%" y="85" width="0.1109%" height="15" fill="rgb(239,60,40)"/><text x="30.9975%" y="95.50"></text></g><g><title>impl_trait_ref (908,118 samples, 0.15%)</title><rect x="30.8799%" y="85" width="0.1457%" height="15" fill="rgb(206,27,48)"/><text x="31.1299%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (728,727 samples, 0.12%)</title><rect x="30.9086%" y="69" width="0.1169%" height="15" fill="rgb(225,35,8)"/><text x="31.1586%" y="79.50"></text></g><g><title>predicates_of (681,019 samples, 0.11%)</title><rect x="31.0317%" y="85" width="0.1092%" height="15" fill="rgb(250,213,24)"/><text x="31.2817%" y="95.50"></text></g><g><title>specializes (2,091,042 samples, 0.34%)</title><rect x="31.1410%" y="85" width="0.3354%" height="15" fill="rgb(247,123,22)"/><text x="31.3910%" y="95.50"></text></g><g><title>param_env (1,236,203 samples, 0.20%)</title><rect x="31.2781%" y="69" width="0.1983%" height="15" fill="rgb(231,138,38)"/><text x="31.5281%" y="79.50"></text></g><g><title>evaluate_obligation (7,500,873 samples, 1.20%)</title><rect x="30.2906%" y="101" width="1.2031%" height="15" fill="rgb(231,145,46)"/><text x="30.5406%" y="111.50"></text></g><g><title>item_types_checking (10,962,782 samples, 1.76%)</title><rect x="29.7543%" y="149" width="1.7584%" height="15" fill="rgb(251,118,11)"/><text x="30.0043%" y="159.50"></text></g><g><title>check_mod_item_types (10,953,122 samples, 1.76%)</title><rect x="29.7559%" y="133" width="1.7569%" height="15" fill="rgb(217,147,25)"/><text x="30.0059%" y="143.50"></text></g><g><title>typeck (8,203,222 samples, 1.32%)</title><rect x="30.1969%" y="117" width="1.3158%" height="15" fill="rgb(247,81,37)"/><text x="30.4469%" y="127.50"></text></g><g><title>fn_sig (635,125 samples, 0.10%)</title><rect x="31.5876%" y="117" width="0.1019%" height="15" fill="rgb(209,12,38)"/><text x="31.8376%" y="127.50"></text></g><g><title>generics_of (1,027,136 samples, 0.16%)</title><rect x="31.6895%" y="117" width="0.1648%" height="15" fill="rgb(227,1,9)"/><text x="31.9395%" y="127.50"></text></g><g><title>predicates_of (858,077 samples, 0.14%)</title><rect x="31.8806%" y="117" width="0.1376%" height="15" fill="rgb(248,47,43)"/><text x="32.1306%" y="127.50"></text></g><g><title>predicates_defined_on (758,237 samples, 0.12%)</title><rect x="31.8966%" y="101" width="0.1216%" height="15" fill="rgb(221,10,30)"/><text x="32.1466%" y="111.50"></text></g><g><title>type_collecting (3,360,977 samples, 0.54%)</title><rect x="31.5135%" y="149" width="0.5391%" height="15" fill="rgb(210,229,1)"/><text x="31.7635%" y="159.50"></text></g><g><title>collect_mod_item_types (3,349,707 samples, 0.54%)</title><rect x="31.5153%" y="133" width="0.5373%" height="15" fill="rgb(222,148,37)"/><text x="31.7653%" y="143.50"></text></g><g><title>evaluate_obligation (646,418 samples, 0.10%)</title><rect x="32.6863%" y="117" width="0.1037%" height="15" fill="rgb(234,67,33)"/><text x="32.9363%" y="127.50"></text></g><g><title>check_impl_item_well_formed (5,715,237 samples, 0.92%)</title><rect x="32.1126%" y="133" width="0.9167%" height="15" fill="rgb(247,98,35)"/><text x="32.3626%" y="143.50"></text></g><g><title>evaluate_obligation (882,451 samples, 0.14%)</title><rect x="33.4361%" y="117" width="0.1415%" height="15" fill="rgb(247,138,52)"/><text x="33.6861%" y="127.50"></text></g><g><title>check_item_well_formed (4,501,850 samples, 0.72%)</title><rect x="33.0293%" y="133" width="0.7221%" height="15" fill="rgb(213,79,30)"/><text x="33.2793%" y="143.50"></text></g><g><title>analysis (136,179,411 samples, 21.84%)</title><rect x="12.0130%" y="181" width="21.8432%" height="15" fill="rgb(246,177,23)"/><text x="12.2630%" y="191.50">analysis</text></g><g><title>type_check_crate (84,383,553 samples, 13.54%)</title><rect x="20.3211%" y="165" width="13.5351%" height="15" fill="rgb(230,62,27)"/><text x="20.5711%" y="175.50">type_check_crate</text></g><g><title>wf_checking (11,233,315 samples, 1.80%)</title><rect x="32.0544%" y="149" width="1.8018%" height="15" fill="rgb(216,154,8)"/><text x="32.3044%" y="159.50">w..</text></g><g><title>check_trait_item_well_formed (653,147 samples, 0.10%)</title><rect x="33.7514%" y="133" width="0.1048%" height="15" fill="rgb(244,35,45)"/><text x="34.0014%" y="143.50"></text></g><g><title>param_env (1,355,189 samples, 0.22%)</title><rect x="36.7744%" y="133" width="0.2174%" height="15" fill="rgb(251,115,12)"/><text x="37.0244%" y="143.50"></text></g><g><title>fn_abi_of_instance (4,478,449 samples, 0.72%)</title><rect x="36.3285%" y="149" width="0.7183%" height="15" fill="rgb(240,54,50)"/><text x="36.5785%" y="159.50"></text></g><g><title>codegen_module (18,973,854 samples, 3.04%)</title><rect x="34.1091%" y="165" width="3.0434%" height="15" fill="rgb(233,84,52)"/><text x="34.3591%" y="175.50">cod..</text></g><g><title>codegen_fn_attrs (804,201 samples, 0.13%)</title><rect x="37.2910%" y="117" width="0.1290%" height="15" fill="rgb(207,117,47)"/><text x="37.5410%" y="127.50"></text></g><g><title>metadata_decode_entry_optimized_mir (911,013 samples, 0.15%)</title><rect x="37.7258%" y="101" width="0.1461%" height="15" fill="rgb(249,43,39)"/><text x="37.9758%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,010,692 samples, 0.16%)</title><rect x="37.8719%" y="101" width="0.1621%" height="15" fill="rgb(209,38,44)"/><text x="38.1219%" y="111.50"></text></g><g><title>optimized_mir (3,905,854 samples, 0.63%)</title><rect x="37.4768%" y="117" width="0.6265%" height="15" fill="rgb(236,212,23)"/><text x="37.7268%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (994,052 samples, 0.16%)</title><rect x="38.1635%" y="101" width="0.1594%" height="15" fill="rgb(242,79,21)"/><text x="38.4135%" y="111.50"></text></g><g><title>resolve_instance (2,229,506 samples, 0.36%)</title><rect x="38.1033%" y="117" width="0.3576%" height="15" fill="rgb(211,96,35)"/><text x="38.3533%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (8,558,424 samples, 1.37%)</title><rect x="37.1587%" y="133" width="1.3728%" height="15" fill="rgb(253,215,40)"/><text x="37.4087%" y="143.50"></text></g><g><title>monomorphization_collector (8,639,025 samples, 1.39%)</title><rect x="37.1583%" y="149" width="1.3857%" height="15" fill="rgb(211,81,21)"/><text x="37.4083%" y="159.50"></text></g><g><title>assert_symbols_are_distinct (796,289 samples, 0.13%)</title><rect x="38.5447%" y="133" width="0.1277%" height="15" fill="rgb(208,190,38)"/><text x="38.7947%" y="143.50"></text></g><g><title>symbol_name (731,518 samples, 0.12%)</title><rect x="38.5551%" y="117" width="0.1173%" height="15" fill="rgb(235,213,38)"/><text x="38.8051%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (9,761,318 samples, 1.57%)</title><rect x="37.1537%" y="165" width="1.5657%" height="15" fill="rgb(237,122,38)"/><text x="37.4037%" y="175.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,093,672 samples, 0.18%)</title><rect x="38.5440%" y="149" width="0.1754%" height="15" fill="rgb(244,218,35)"/><text x="38.7940%" y="159.50"></text></g><g><title>codegen_crate (30,372,700 samples, 4.87%)</title><rect x="33.8578%" y="181" width="4.8718%" height="15" fill="rgb(240,68,47)"/><text x="34.1078%" y="191.50">codege..</text></g><g><title>codegen_module_optimize (95,358,232 samples, 15.30%)</title><rect x="38.7296%" y="181" width="15.2955%" height="15" fill="rgb(210,16,53)"/><text x="38.9796%" y="191.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (86,749,647 samples, 13.91%)</title><rect x="40.1104%" y="165" width="13.9146%" height="15" fill="rgb(235,124,12)"/><text x="40.3604%" y="175.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (59,137,162 samples, 9.49%)</title><rect x="55.1705%" y="165" width="9.4856%" height="15" fill="rgb(224,169,11)"/><text x="55.4205%" y="175.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (89,701,816 samples, 14.39%)</title><rect x="64.6561%" y="165" width="14.3882%" height="15" fill="rgb(250,166,2)"/><text x="64.9061%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (88,227,678 samples, 14.15%)</title><rect x="64.8925%" y="149" width="14.1517%" height="15" fill="rgb(242,216,29)"/><text x="65.1425%" y="159.50">LLVM_module_codegen_e..</text></g><g><title>LLVM_thin_lto_import (4,156,996 samples, 0.67%)</title><rect x="79.0442%" y="165" width="0.6668%" height="15" fill="rgb(230,116,27)"/><text x="79.2942%" y="175.50"></text></g><g><title>codegen_module_perform_lto (160,516,987 samples, 25.75%)</title><rect x="54.0250%" y="181" width="25.7469%" height="15" fill="rgb(228,99,48)"/><text x="54.2750%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,432,436 samples, 0.39%)</title><rect x="84.5153%" y="133" width="0.3902%" height="15" fill="rgb(253,11,6)"/><text x="84.7653%" y="143.50"></text></g><g><title>metadata_register_crate (877,840 samples, 0.14%)</title><rect x="84.7647%" y="117" width="0.1408%" height="15" fill="rgb(247,143,39)"/><text x="85.0147%" y="127.50"></text></g><g><title>macro_expand_crate (31,515,322 samples, 5.06%)</title><rect x="79.9146%" y="165" width="5.0551%" height="15" fill="rgb(236,97,10)"/><text x="80.1646%" y="175.50">macro_..</text></g><g><title>expand_crate (31,501,002 samples, 5.05%)</title><rect x="79.9169%" y="149" width="5.0528%" height="15" fill="rgb(233,208,19)"/><text x="80.1669%" y="159.50">expand..</text></g><g><title>late_resolve_crate (4,932,185 samples, 0.79%)</title><rect x="85.0989%" y="149" width="0.7911%" height="15" fill="rgb(216,164,2)"/><text x="85.3489%" y="159.50"></text></g><g><title>configure_and_expand (38,451,500 samples, 6.17%)</title><rect x="79.7720%" y="181" width="6.1676%" height="15" fill="rgb(220,129,5)"/><text x="80.0220%" y="191.50">configur..</text></g><g><title>resolve_crate (5,916,126 samples, 0.95%)</title><rect x="84.9906%" y="165" width="0.9489%" height="15" fill="rgb(242,17,10)"/><text x="85.2406%" y="175.50"></text></g><g><title>free_global_ctxt (5,694,174 samples, 0.91%)</title><rect x="86.0713%" y="181" width="0.9133%" height="15" fill="rgb(242,107,0)"/><text x="86.3213%" y="191.50"></text></g><g><title>layout_of (939,701 samples, 0.15%)</title><rect x="88.2608%" y="149" width="0.1507%" height="15" fill="rgb(251,28,31)"/><text x="88.5108%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,604,370 samples, 0.74%)</title><rect x="88.4115%" y="149" width="0.7385%" height="15" fill="rgb(233,223,10)"/><text x="88.6615%" y="159.50"></text></g><g><title>optimized_mir (9,947,327 samples, 1.60%)</title><rect x="87.5583%" y="165" width="1.5956%" height="15" fill="rgb(215,21,27)"/><text x="87.8083%" y="175.50"></text></g><g><title>generate_crate_metadata (13,668,404 samples, 2.19%)</title><rect x="86.9846%" y="181" width="2.1924%" height="15" fill="rgb(232,23,21)"/><text x="87.2346%" y="191.50">g..</text></g><g><title>hir_lowering (7,655,766 samples, 1.23%)</title><rect x="89.1771%" y="181" width="1.2280%" height="15" fill="rgb(244,5,23)"/><text x="89.4271%" y="191.50"></text></g><g><title>finish_ongoing_codegen (53,467,977 samples, 8.58%)</title><rect x="90.4075%" y="165" width="8.5763%" height="15" fill="rgb(226,81,46)"/><text x="90.6575%" y="175.50">finish_ongoi..</text></g><g><title>link_crate (1,526,366 samples, 0.24%)</title><rect x="98.9838%" y="165" width="0.2448%" height="15" fill="rgb(247,70,30)"/><text x="99.2338%" y="175.50"></text></g><g><title>link_binary (1,508,716 samples, 0.24%)</title><rect x="98.9866%" y="149" width="0.2420%" height="15" fill="rgb(212,68,19)"/><text x="99.2366%" y="159.50"></text></g><g><title>link_rlib (994,421 samples, 0.16%)</title><rect x="99.0691%" y="133" width="0.1595%" height="15" fill="rgb(240,187,13)"/><text x="99.3191%" y="143.50"></text></g><g><title>link (55,019,314 samples, 8.83%)</title><rect x="90.4050%" y="181" width="8.8251%" height="15" fill="rgb(223,113,26)"/><text x="90.6550%" y="191.50">link</text></g><g><title>parse_crate (1,767,650 samples, 0.28%)</title><rect x="99.2301%" y="181" width="0.2835%" height="15" fill="rgb(206,192,2)"/><text x="99.4801%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (2,171,374 samples, 0.35%)</title><rect x="99.5694%" y="181" width="0.3483%" height="15" fill="rgb(241,108,4)"/><text x="99.8194%" y="191.50"></text></g><g><title>all (623,441,386 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(247,173,49)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (623,441,386 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,114,35)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>