<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (21,089,546 samples, 8.03%)</title><rect x="0.2486%" y="245" width="8.0341%" height="15" fill="rgb(227,0,7)"/><text x="0.4986%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (303,243 samples, 0.12%)</title><rect x="8.1672%" y="229" width="0.1155%" height="15" fill="rgb(217,0,24)"/><text x="8.4172%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (283,873 samples, 0.11%)</title><rect x="8.1746%" y="213" width="0.1081%" height="15" fill="rgb(221,193,54)"/><text x="8.4246%" y="223.50"></text></g><g><title>needs_drop_raw (421,064 samples, 0.16%)</title><rect x="8.8920%" y="133" width="0.1604%" height="15" fill="rgb(248,212,6)"/><text x="9.1420%" y="143.50"></text></g><g><title>is_copy_raw (414,754 samples, 0.16%)</title><rect x="8.8944%" y="117" width="0.1580%" height="15" fill="rgb(208,68,35)"/><text x="9.1444%" y="127.50"></text></g><g><title>evaluate_obligation (404,554 samples, 0.15%)</title><rect x="8.8983%" y="101" width="0.1541%" height="15" fill="rgb(232,128,0)"/><text x="9.1483%" y="111.50"></text></g><g><title>trait_impls_of (326,674 samples, 0.12%)</title><rect x="8.9280%" y="85" width="0.1244%" height="15" fill="rgb(207,160,47)"/><text x="9.1780%" y="95.50"></text></g><g><title>mir_const (920,931 samples, 0.35%)</title><rect x="8.7486%" y="181" width="0.3508%" height="15" fill="rgb(228,23,34)"/><text x="8.9986%" y="191.50"></text></g><g><title>unsafety_check_result (779,989 samples, 0.30%)</title><rect x="8.8023%" y="165" width="0.2971%" height="15" fill="rgb(218,30,26)"/><text x="9.0523%" y="175.50"></text></g><g><title>mir_built (706,718 samples, 0.27%)</title><rect x="8.8302%" y="149" width="0.2692%" height="15" fill="rgb(220,122,19)"/><text x="9.0802%" y="159.50"></text></g><g><title>mir_promoted (1,090,312 samples, 0.42%)</title><rect x="8.6874%" y="197" width="0.4154%" height="15" fill="rgb(250,228,42)"/><text x="8.9374%" y="207.50"></text></g><g><title>MIR_borrow_checking (2,329,416 samples, 0.89%)</title><rect x="8.3303%" y="229" width="0.8874%" height="15" fill="rgb(240,193,28)"/><text x="8.5803%" y="239.50"></text></g><g><title>mir_borrowck (2,324,496 samples, 0.89%)</title><rect x="8.3322%" y="213" width="0.8855%" height="15" fill="rgb(216,20,37)"/><text x="8.5822%" y="223.50"></text></g><g><title>misc_checking_1 (470,165 samples, 0.18%)</title><rect x="9.2553%" y="229" width="0.1791%" height="15" fill="rgb(206,188,39)"/><text x="9.5053%" y="239.50"></text></g><g><title>misc_checking_3 (330,904 samples, 0.13%)</title><rect x="9.4697%" y="229" width="0.1261%" height="15" fill="rgb(217,207,13)"/><text x="9.7197%" y="239.50"></text></g><g><title>impl_trait_ref (658,699 samples, 0.25%)</title><rect x="10.3349%" y="53" width="0.2509%" height="15" fill="rgb(231,73,38)"/><text x="10.5849%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (609,508 samples, 0.23%)</title><rect x="10.3536%" y="37" width="0.2322%" height="15" fill="rgb(225,20,46)"/><text x="10.6036%" y="47.50"></text></g><g><title>coherent_trait (1,108,532 samples, 0.42%)</title><rect x="10.1903%" y="85" width="0.4223%" height="15" fill="rgb(210,31,41)"/><text x="10.4403%" y="95.50"></text></g><g><title>specialization_graph_of (1,101,732 samples, 0.42%)</title><rect x="10.1928%" y="69" width="0.4197%" height="15" fill="rgb(221,200,47)"/><text x="10.4428%" y="79.50"></text></g><g><title>adt_destructor (1,127,353 samples, 0.43%)</title><rect x="10.1870%" y="117" width="0.4295%" height="15" fill="rgb(226,26,5)"/><text x="10.4370%" y="127.50"></text></g><g><title>metadata_decode_entry_adt_destructor (1,126,083 samples, 0.43%)</title><rect x="10.1875%" y="101" width="0.4290%" height="15" fill="rgb(249,33,26)"/><text x="10.4375%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,168,613 samples, 0.45%)</title><rect x="10.1724%" y="133" width="0.4452%" height="15" fill="rgb(235,183,28)"/><text x="10.4224%" y="143.50"></text></g><g><title>dropck_outlives (1,296,964 samples, 0.49%)</title><rect x="10.1346%" y="165" width="0.4941%" height="15" fill="rgb(221,5,38)"/><text x="10.3846%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,228,363 samples, 0.47%)</title><rect x="10.1608%" y="149" width="0.4679%" height="15" fill="rgb(247,18,42)"/><text x="10.4108%" y="159.50"></text></g><g><title>item_bodies_checking (3,020,253 samples, 1.15%)</title><rect x="9.6720%" y="213" width="1.1506%" height="15" fill="rgb(241,131,45)"/><text x="9.9220%" y="223.50"></text></g><g><title>typeck_item_bodies (3,016,833 samples, 1.15%)</title><rect x="9.6733%" y="197" width="1.1493%" height="15" fill="rgb(249,31,29)"/><text x="9.9233%" y="207.50"></text></g><g><title>typeck (3,012,183 samples, 1.15%)</title><rect x="9.6750%" y="181" width="1.1475%" height="15" fill="rgb(225,111,53)"/><text x="9.9250%" y="191.50"></text></g><g><title>analysis (7,498,583 samples, 2.86%)</title><rect x="8.2828%" y="245" width="2.8566%" height="15" fill="rgb(238,160,17)"/><text x="8.5328%" y="255.50">an..</text></g><g><title>type_check_crate (4,051,875 samples, 1.54%)</title><rect x="9.5958%" y="229" width="1.5436%" height="15" fill="rgb(214,148,48)"/><text x="9.8458%" y="239.50"></text></g><g><title>wf_checking (606,887 samples, 0.23%)</title><rect x="10.9082%" y="213" width="0.2312%" height="15" fill="rgb(232,36,49)"/><text x="11.1582%" y="223.50"></text></g><g><title>check_item_well_formed (591,077 samples, 0.23%)</title><rect x="10.9142%" y="197" width="0.2252%" height="15" fill="rgb(209,103,24)"/><text x="11.1642%" y="207.50"></text></g><g><title>is_freeze_raw (323,613 samples, 0.12%)</title><rect x="12.8478%" y="197" width="0.1233%" height="15" fill="rgb(229,88,8)"/><text x="13.0978%" y="207.50"></text></g><g><title>evaluate_obligation (294,123 samples, 0.11%)</title><rect x="12.8591%" y="181" width="0.1120%" height="15" fill="rgb(213,181,19)"/><text x="13.1091%" y="191.50"></text></g><g><title>eval_to_const_value_raw (419,338 samples, 0.16%)</title><rect x="13.0628%" y="181" width="0.1597%" height="15" fill="rgb(254,191,54)"/><text x="13.3128%" y="191.50"></text></g><g><title>eval_to_const_value_raw (372,718 samples, 0.14%)</title><rect x="13.0805%" y="165" width="0.1420%" height="15" fill="rgb(241,83,37)"/><text x="13.3305%" y="175.50"></text></g><g><title>eval_to_allocation_raw (333,127 samples, 0.13%)</title><rect x="13.0956%" y="149" width="0.1269%" height="15" fill="rgb(233,36,39)"/><text x="13.3456%" y="159.50"></text></g><g><title>param_env (268,871 samples, 0.10%)</title><rect x="13.2768%" y="181" width="0.1024%" height="15" fill="rgb(226,3,54)"/><text x="13.5268%" y="191.50"></text></g><g><title>layout_of (1,080,502 samples, 0.41%)</title><rect x="12.9711%" y="197" width="0.4116%" height="15" fill="rgb(245,192,40)"/><text x="13.2211%" y="207.50"></text></g><g><title>param_env (304,694 samples, 0.12%)</title><rect x="13.3827%" y="197" width="0.1161%" height="15" fill="rgb(238,167,29)"/><text x="13.6327%" y="207.50"></text></g><g><title>fn_abi_of_instance (2,159,682 samples, 0.82%)</title><rect x="12.7326%" y="213" width="0.8227%" height="15" fill="rgb(232,182,51)"/><text x="12.9826%" y="223.50"></text></g><g><title>codegen_module (5,040,518 samples, 1.92%)</title><rect x="11.8211%" y="229" width="1.9202%" height="15" fill="rgb(231,60,39)"/><text x="12.0711%" y="239.50">c..</text></g><g><title>is_reachable_non_generic (388,165 samples, 0.15%)</title><rect x="13.9218%" y="181" width="0.1479%" height="15" fill="rgb(208,69,12)"/><text x="14.1718%" y="191.50"></text></g><g><title>reachable_non_generics (376,625 samples, 0.14%)</title><rect x="13.9262%" y="165" width="0.1435%" height="15" fill="rgb(235,93,37)"/><text x="14.1762%" y="175.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (374,045 samples, 0.14%)</title><rect x="13.9272%" y="149" width="0.1425%" height="15" fill="rgb(213,116,39)"/><text x="14.1772%" y="159.50"></text></g><g><title>metadata_decode_entry_optimized_mir (362,967 samples, 0.14%)</title><rect x="14.3246%" y="165" width="0.1383%" height="15" fill="rgb(222,207,29)"/><text x="14.5746%" y="175.50"></text></g><g><title>eval_to_const_value_raw (305,533 samples, 0.12%)</title><rect x="14.5585%" y="149" width="0.1164%" height="15" fill="rgb(206,96,30)"/><text x="14.8085%" y="159.50"></text></g><g><title>eval_to_const_value_raw (293,073 samples, 0.11%)</title><rect x="14.5633%" y="133" width="0.1116%" height="15" fill="rgb(218,138,4)"/><text x="14.8133%" y="143.50"></text></g><g><title>eval_to_allocation_raw (283,062 samples, 0.11%)</title><rect x="14.5671%" y="117" width="0.1078%" height="15" fill="rgb(250,191,14)"/><text x="14.8171%" y="127.50"></text></g><g><title>optimized_mir (1,430,349 samples, 0.54%)</title><rect x="14.1320%" y="181" width="0.5449%" height="15" fill="rgb(239,60,40)"/><text x="14.3820%" y="191.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (334,944 samples, 0.13%)</title><rect x="14.5493%" y="165" width="0.1276%" height="15" fill="rgb(206,27,48)"/><text x="14.7993%" y="175.50"></text></g><g><title>resolve_instance (343,004 samples, 0.13%)</title><rect x="14.6769%" y="181" width="0.1307%" height="15" fill="rgb(225,35,8)"/><text x="14.9269%" y="191.50"></text></g><g><title>eval_to_const_value_raw (359,824 samples, 0.14%)</title><rect x="14.8139%" y="165" width="0.1371%" height="15" fill="rgb(250,213,24)"/><text x="15.0639%" y="175.50"></text></g><g><title>eval_to_const_value_raw (356,684 samples, 0.14%)</title><rect x="14.8150%" y="149" width="0.1359%" height="15" fill="rgb(247,123,22)"/><text x="15.0650%" y="159.50"></text></g><g><title>eval_to_allocation_raw (350,254 samples, 0.13%)</title><rect x="14.8175%" y="133" width="0.1334%" height="15" fill="rgb(231,138,38)"/><text x="15.0675%" y="143.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (381,454 samples, 0.15%)</title><rect x="14.8076%" y="181" width="0.1453%" height="15" fill="rgb(231,145,46)"/><text x="15.0576%" y="191.50"></text></g><g><title>own_existential_vtable_entries (603,048 samples, 0.23%)</title><rect x="14.9907%" y="165" width="0.2297%" height="15" fill="rgb(251,118,11)"/><text x="15.2407%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (3,948,084 samples, 1.50%)</title><rect x="13.7610%" y="197" width="1.5040%" height="15" fill="rgb(217,147,25)"/><text x="14.0110%" y="207.50"></text></g><g><title>vtable_entries (819,449 samples, 0.31%)</title><rect x="14.9529%" y="181" width="0.3122%" height="15" fill="rgb(247,81,37)"/><text x="15.2029%" y="191.50"></text></g><g><title>monomorphization_collector (4,079,416 samples, 1.55%)</title><rect x="13.7595%" y="213" width="1.5541%" height="15" fill="rgb(209,12,38)"/><text x="14.0095%" y="223.50"></text></g><g><title>collect_and_partition_mono_items (4,491,690 samples, 1.71%)</title><rect x="13.7422%" y="229" width="1.7111%" height="15" fill="rgb(227,1,9)"/><text x="13.9922%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (366,984 samples, 0.14%)</title><rect x="15.3135%" y="213" width="0.1398%" height="15" fill="rgb(248,47,43)"/><text x="15.5635%" y="223.50"></text></g><g><title>codegen_crate (11,779,212 samples, 4.49%)</title><rect x="11.1429%" y="245" width="4.4873%" height="15" fill="rgb(221,10,30)"/><text x="11.3929%" y="255.50">codeg..</text></g><g><title>LLVM_module_codegen (2,576,229 samples, 0.98%)</title><rect x="16.7950%" y="229" width="0.9814%" height="15" fill="rgb(210,229,1)"/><text x="17.0450%" y="239.50"></text></g><g><title>LLVM_module_codegen_emit_obj (2,484,698 samples, 0.95%)</title><rect x="16.8299%" y="213" width="0.9466%" height="15" fill="rgb(222,148,37)"/><text x="17.0799%" y="223.50"></text></g><g><title>codegen_module_optimize (16,364,333 samples, 6.23%)</title><rect x="15.6303%" y="245" width="6.2340%" height="15" fill="rgb(234,67,33)"/><text x="15.8803%" y="255.50">codegen_..</text></g><g><title>LLVM_module_optimize (10,730,620 samples, 4.09%)</title><rect x="17.7764%" y="229" width="4.0879%" height="15" fill="rgb(247,98,35)"/><text x="18.0264%" y="239.50">LLVM..</text></g><g><title>LLVM_lto_optimize (6,054,517 samples, 2.31%)</title><rect x="22.3910%" y="229" width="2.3065%" height="15" fill="rgb(247,138,52)"/><text x="22.6410%" y="239.50">L..</text></g><g><title>LLVM_module_codegen (15,314,691 samples, 5.83%)</title><rect x="24.6974%" y="229" width="5.8342%" height="15" fill="rgb(213,79,30)"/><text x="24.9474%" y="239.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (15,027,978 samples, 5.72%)</title><rect x="24.8067%" y="213" width="5.7250%" height="15" fill="rgb(246,177,23)"/><text x="25.0567%" y="223.50">LLVM_mo..</text></g><g><title>LLVM_thin_lto_import (531,227 samples, 0.20%)</title><rect x="30.5316%" y="229" width="0.2024%" height="15" fill="rgb(230,62,27)"/><text x="30.7816%" y="239.50"></text></g><g><title>codegen_module_perform_lto (23,384,480 samples, 8.91%)</title><rect x="21.8643%" y="245" width="8.9084%" height="15" fill="rgb(216,154,8)"/><text x="22.1143%" y="255.50">codegen_modul..</text></g><g><title>macro_expand_crate (11,694,181 samples, 4.45%)</title><rect x="30.9123%" y="229" width="4.4549%" height="15" fill="rgb(244,35,45)"/><text x="31.1623%" y="239.50">macro..</text></g><g><title>expand_crate (11,671,621 samples, 4.45%)</title><rect x="30.9209%" y="213" width="4.4463%" height="15" fill="rgb(251,115,12)"/><text x="31.1709%" y="223.50">expan..</text></g><g><title>metadata_register_crate (2,670,590 samples, 1.02%)</title><rect x="34.3498%" y="197" width="1.0174%" height="15" fill="rgb(240,54,50)"/><text x="34.5998%" y="207.50"></text></g><g><title>metadata_register_crate (956,579 samples, 0.36%)</title><rect x="35.0028%" y="181" width="0.3644%" height="15" fill="rgb(233,84,52)"/><text x="35.2528%" y="191.50"></text></g><g><title>finalize_macro_resolutions (358,215 samples, 0.14%)</title><rect x="35.3992%" y="213" width="0.1365%" height="15" fill="rgb(207,117,47)"/><text x="35.6492%" y="223.50"></text></g><g><title>late_resolve_crate (1,436,296 samples, 0.55%)</title><rect x="35.5357%" y="213" width="0.5472%" height="15" fill="rgb(249,43,39)"/><text x="35.7857%" y="223.50"></text></g><g><title>configure_and_expand (13,992,827 samples, 5.33%)</title><rect x="30.7727%" y="245" width="5.3306%" height="15" fill="rgb(209,38,44)"/><text x="31.0227%" y="255.50">configu..</text></g><g><title>resolve_crate (1,880,301 samples, 0.72%)</title><rect x="35.3870%" y="229" width="0.7163%" height="15" fill="rgb(236,212,23)"/><text x="35.6370%" y="239.50"></text></g><g><title>free_global_ctxt (2,056,023 samples, 0.78%)</title><rect x="36.1802%" y="245" width="0.7832%" height="15" fill="rgb(242,79,21)"/><text x="36.4302%" y="255.50"></text></g><g><title>hir_lowering (311,934 samples, 0.12%)</title><rect x="36.9634%" y="245" width="0.1188%" height="15" fill="rgb(211,96,35)"/><text x="37.2134%" y="255.50"></text></g><g><title>finish_ongoing_codegen (15,335,631 samples, 5.84%)</title><rect x="37.0903%" y="229" width="5.8422%" height="15" fill="rgb(253,215,40)"/><text x="37.3403%" y="239.50">finish_..</text></g><g><title>link_crate (148,626,911 samples, 56.62%)</title><rect x="42.9324%" y="229" width="56.6199%" height="15" fill="rgb(211,81,21)"/><text x="43.1824%" y="239.50">link_crate</text></g><g><title>link_binary (148,586,401 samples, 56.60%)</title><rect x="42.9478%" y="213" width="56.6044%" height="15" fill="rgb(208,190,38)"/><text x="43.1978%" y="223.50">link_binary</text></g><g><title>run_linker (147,611,780 samples, 56.23%)</title><rect x="43.3191%" y="197" width="56.2332%" height="15" fill="rgb(235,213,38)"/><text x="43.5691%" y="207.50">run_linker</text></g><g><title>link (163,993,153 samples, 62.47%)</title><rect x="37.0823%" y="245" width="62.4737%" height="15" fill="rgb(237,122,38)"/><text x="37.3323%" y="255.50">link</text></g><g><title>parse_crate (293,473 samples, 0.11%)</title><rect x="99.5560%" y="245" width="0.1118%" height="15" fill="rgb(244,218,35)"/><text x="99.8060%" y="255.50"></text></g><g><title>prepare_outputs (340,154 samples, 0.13%)</title><rect x="99.6711%" y="245" width="0.1296%" height="15" fill="rgb(240,68,47)"/><text x="99.9211%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (373,454 samples, 0.14%)</title><rect x="99.8006%" y="245" width="0.1423%" height="15" fill="rgb(210,16,53)"/><text x="100.0506%" y="255.50"></text></g><g><title>all (262,499,513 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (262,499,513 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>