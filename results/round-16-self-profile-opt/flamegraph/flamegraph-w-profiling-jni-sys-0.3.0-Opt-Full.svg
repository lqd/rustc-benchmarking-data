<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (24,703,850 samples, 17.70%)</title><rect x="0.4147%" y="197" width="17.7002%" height="15" fill="rgb(227,0,7)"/><text x="0.6647%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (144,231 samples, 0.10%)</title><rect x="18.0115%" y="181" width="0.1033%" height="15" fill="rgb(217,0,24)"/><text x="18.2615%" y="191.50"></text></g><g><title>mir_const (276,006 samples, 0.20%)</title><rect x="19.1702%" y="133" width="0.1978%" height="15" fill="rgb(221,193,54)"/><text x="19.4202%" y="143.50"></text></g><g><title>unsafety_check_result (222,946 samples, 0.16%)</title><rect x="19.2082%" y="117" width="0.1597%" height="15" fill="rgb(248,212,6)"/><text x="19.4582%" y="127.50"></text></g><g><title>mir_built (199,655 samples, 0.14%)</title><rect x="19.2249%" y="101" width="0.1431%" height="15" fill="rgb(208,68,35)"/><text x="19.4749%" y="111.50"></text></g><g><title>mir_promoted (696,581 samples, 0.50%)</title><rect x="19.0895%" y="149" width="0.4991%" height="15" fill="rgb(232,128,0)"/><text x="19.3395%" y="159.50"></text></g><g><title>mir_const_qualif (307,952 samples, 0.22%)</title><rect x="19.3679%" y="133" width="0.2206%" height="15" fill="rgb(207,160,47)"/><text x="19.6179%" y="143.50"></text></g><g><title>mir_const (255,142 samples, 0.18%)</title><rect x="19.4057%" y="117" width="0.1828%" height="15" fill="rgb(228,23,34)"/><text x="19.6557%" y="127.50"></text></g><g><title>unsafety_check_result (185,381 samples, 0.13%)</title><rect x="19.4557%" y="101" width="0.1328%" height="15" fill="rgb(218,30,26)"/><text x="19.7057%" y="111.50"></text></g><g><title>mir_built (162,501 samples, 0.12%)</title><rect x="19.4721%" y="85" width="0.1164%" height="15" fill="rgb(220,122,19)"/><text x="19.7221%" y="95.50"></text></g><g><title>MIR_borrow_checking (1,798,640 samples, 1.29%)</title><rect x="18.3363%" y="181" width="1.2887%" height="15" fill="rgb(250,228,42)"/><text x="18.5863%" y="191.50"></text></g><g><title>mir_borrowck (1,762,958 samples, 1.26%)</title><rect x="18.3619%" y="165" width="1.2631%" height="15" fill="rgb(240,193,28)"/><text x="18.6119%" y="175.50"></text></g><g><title>MIR_effect_checking (183,572 samples, 0.13%)</title><rect x="19.6251%" y="181" width="0.1315%" height="15" fill="rgb(216,20,37)"/><text x="19.8751%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (157,092 samples, 0.11%)</title><rect x="19.6440%" y="165" width="0.1126%" height="15" fill="rgb(206,188,39)"/><text x="19.8940%" y="175.50"></text></g><g><title>hir_module_items (185,452 samples, 0.13%)</title><rect x="19.7566%" y="181" width="0.1329%" height="15" fill="rgb(217,207,13)"/><text x="20.0066%" y="191.50"></text></g><g><title>codegen_fn_attrs (170,862 samples, 0.12%)</title><rect x="19.9666%" y="149" width="0.1224%" height="15" fill="rgb(231,73,38)"/><text x="20.2166%" y="159.50"></text></g><g><title>should_inherit_track_caller (147,262 samples, 0.11%)</title><rect x="19.9835%" y="133" width="0.1055%" height="15" fill="rgb(225,20,46)"/><text x="20.2335%" y="143.50"></text></g><g><title>check_mod_attrs (267,423 samples, 0.19%)</title><rect x="19.8976%" y="165" width="0.1916%" height="15" fill="rgb(210,31,41)"/><text x="20.1476%" y="175.50"></text></g><g><title>is_copy_raw (348,844 samples, 0.25%)</title><rect x="20.2551%" y="149" width="0.2499%" height="15" fill="rgb(221,200,47)"/><text x="20.5051%" y="159.50"></text></g><g><title>evaluate_obligation (318,723 samples, 0.23%)</title><rect x="20.2767%" y="133" width="0.2284%" height="15" fill="rgb(226,26,5)"/><text x="20.5267%" y="143.50"></text></g><g><title>late_bound_vars_map (178,502 samples, 0.13%)</title><rect x="21.3706%" y="53" width="0.1279%" height="15" fill="rgb(249,33,26)"/><text x="21.6206%" y="63.50"></text></g><g><title>resolve_lifetimes (172,152 samples, 0.12%)</title><rect x="21.3751%" y="37" width="0.1233%" height="15" fill="rgb(235,183,28)"/><text x="21.6251%" y="47.50"></text></g><g><title>param_env (1,314,655 samples, 0.94%)</title><rect x="20.5888%" y="149" width="0.9419%" height="15" fill="rgb(221,5,38)"/><text x="20.8388%" y="159.50"></text></g><g><title>predicates_of (1,219,444 samples, 0.87%)</title><rect x="20.6570%" y="133" width="0.8737%" height="15" fill="rgb(247,18,42)"/><text x="20.9070%" y="143.50"></text></g><g><title>predicates_defined_on (1,217,934 samples, 0.87%)</title><rect x="20.6581%" y="117" width="0.8726%" height="15" fill="rgb(241,131,45)"/><text x="20.9081%" y="127.50"></text></g><g><title>inferred_outlives_of (1,204,564 samples, 0.86%)</title><rect x="20.6677%" y="101" width="0.8631%" height="15" fill="rgb(249,31,29)"/><text x="20.9177%" y="111.50"></text></g><g><title>inferred_outlives_crate (1,199,133 samples, 0.86%)</title><rect x="20.6715%" y="85" width="0.8592%" height="15" fill="rgb(225,111,53)"/><text x="20.9215%" y="95.50"></text></g><g><title>type_of (724,916 samples, 0.52%)</title><rect x="21.0113%" y="69" width="0.5194%" height="15" fill="rgb(238,160,17)"/><text x="21.2613%" y="79.50"></text></g><g><title>check_mod_unstable_api_usage (1,961,603 samples, 1.41%)</title><rect x="20.1644%" y="165" width="1.4055%" height="15" fill="rgb(214,148,48)"/><text x="20.4144%" y="175.50"></text></g><g><title>misc_checking_1 (2,377,987 samples, 1.70%)</title><rect x="19.8897%" y="181" width="1.7038%" height="15" fill="rgb(232,36,49)"/><text x="20.1397%" y="191.50"></text></g><g><title>misc_checking_2 (146,672 samples, 0.11%)</title><rect x="21.5935%" y="181" width="0.1051%" height="15" fill="rgb(209,103,24)"/><text x="21.8435%" y="191.50"></text></g><g><title>check_private_in_public (221,933 samples, 0.16%)</title><rect x="21.7028%" y="165" width="0.1590%" height="15" fill="rgb(229,88,8)"/><text x="21.9528%" y="175.50"></text></g><g><title>death_checking (410,515 samples, 0.29%)</title><rect x="21.8618%" y="165" width="0.2941%" height="15" fill="rgb(213,181,19)"/><text x="22.1118%" y="175.50"></text></g><g><title>eval_to_const_value_raw (211,363 samples, 0.15%)</title><rect x="22.6646%" y="133" width="0.1514%" height="15" fill="rgb(254,191,54)"/><text x="22.9146%" y="143.50"></text></g><g><title>eval_to_const_value_raw (196,523 samples, 0.14%)</title><rect x="22.6753%" y="117" width="0.1408%" height="15" fill="rgb(241,83,37)"/><text x="22.9253%" y="127.50"></text></g><g><title>eval_to_allocation_raw (176,163 samples, 0.13%)</title><rect x="22.6898%" y="101" width="0.1262%" height="15" fill="rgb(233,36,39)"/><text x="22.9398%" y="111.50"></text></g><g><title>trait_impls_of (203,082 samples, 0.15%)</title><rect x="22.8981%" y="133" width="0.1455%" height="15" fill="rgb(226,3,54)"/><text x="23.1481%" y="143.50"></text></g><g><title>crate_lints (2,618,890 samples, 1.88%)</title><rect x="22.1569%" y="149" width="1.8764%" height="15" fill="rgb(245,192,40)"/><text x="22.4069%" y="159.50">c..</text></g><g><title>type_of (1,381,322 samples, 0.99%)</title><rect x="23.0436%" y="133" width="0.9897%" height="15" fill="rgb(238,167,29)"/><text x="23.2936%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,139,401 samples, 0.82%)</title><rect x="23.2169%" y="117" width="0.8164%" height="15" fill="rgb(232,182,51)"/><text x="23.4669%" y="127.50"></text></g><g><title>lint_checking (2,966,644 samples, 2.13%)</title><rect x="22.1560%" y="165" width="2.1256%" height="15" fill="rgb(231,60,39)"/><text x="22.4060%" y="175.50">l..</text></g><g><title>module_lints (346,504 samples, 0.25%)</title><rect x="24.0333%" y="149" width="0.2483%" height="15" fill="rgb(208,69,12)"/><text x="24.2833%" y="159.50"></text></g><g><title>lint_mod (344,594 samples, 0.25%)</title><rect x="24.0347%" y="133" width="0.2469%" height="15" fill="rgb(235,93,37)"/><text x="24.2847%" y="143.50"></text></g><g><title>privacy_access_levels (341,654 samples, 0.24%)</title><rect x="24.2816%" y="165" width="0.2448%" height="15" fill="rgb(213,116,39)"/><text x="24.5316%" y="175.50"></text></g><g><title>privacy_checking_modules (1,174,593 samples, 0.84%)</title><rect x="24.5264%" y="165" width="0.8416%" height="15" fill="rgb(222,207,29)"/><text x="24.7764%" y="175.50"></text></g><g><title>check_mod_privacy (1,173,053 samples, 0.84%)</title><rect x="24.5275%" y="149" width="0.8405%" height="15" fill="rgb(206,96,30)"/><text x="24.7775%" y="159.50"></text></g><g><title>misc_checking_3 (5,127,959 samples, 3.67%)</title><rect x="21.6986%" y="181" width="3.6742%" height="15" fill="rgb(218,138,4)"/><text x="21.9486%" y="191.50">misc..</text></g><g><title>impl_trait_ref (146,362 samples, 0.10%)</title><rect x="25.6316%" y="85" width="0.1049%" height="15" fill="rgb(250,191,14)"/><text x="25.8816%" y="95.50"></text></g><g><title>adt_destructor (298,644 samples, 0.21%)</title><rect x="25.5406%" y="133" width="0.2140%" height="15" fill="rgb(239,60,40)"/><text x="25.7906%" y="143.50"></text></g><g><title>coherent_trait (294,094 samples, 0.21%)</title><rect x="25.5439%" y="117" width="0.2107%" height="15" fill="rgb(206,27,48)"/><text x="25.7939%" y="127.50"></text></g><g><title>specialization_graph_of (293,094 samples, 0.21%)</title><rect x="25.5446%" y="101" width="0.2100%" height="15" fill="rgb(225,35,8)"/><text x="25.7946%" y="111.50"></text></g><g><title>is_copy_raw (2,053,752 samples, 1.47%)</title><rect x="25.7546%" y="133" width="1.4715%" height="15" fill="rgb(250,213,24)"/><text x="26.0046%" y="143.50"></text></g><g><title>evaluate_obligation (1,806,220 samples, 1.29%)</title><rect x="25.9320%" y="117" width="1.2941%" height="15" fill="rgb(247,123,22)"/><text x="26.1820%" y="127.50"></text></g><g><title>impl_parent (968,201 samples, 0.69%)</title><rect x="28.4366%" y="117" width="0.6937%" height="15" fill="rgb(231,138,38)"/><text x="28.6866%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (610,496 samples, 0.44%)</title><rect x="28.6929%" y="101" width="0.4374%" height="15" fill="rgb(231,145,46)"/><text x="28.9429%" y="111.50"></text></g><g><title>impl_trait_ref (2,685,692 samples, 1.92%)</title><rect x="29.1303%" y="117" width="1.9243%" height="15" fill="rgb(251,118,11)"/><text x="29.3803%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,315,220 samples, 1.66%)</title><rect x="29.3957%" y="101" width="1.6588%" height="15" fill="rgb(217,147,25)"/><text x="29.6457%" y="111.50"></text></g><g><title>coherent_trait (8,035,211 samples, 5.76%)</title><rect x="25.3996%" y="149" width="5.7572%" height="15" fill="rgb(247,81,37)"/><text x="25.6496%" y="159.50">coheren..</text></g><g><title>specialization_graph_of (5,448,541 samples, 3.90%)</title><rect x="27.2529%" y="133" width="3.9038%" height="15" fill="rgb(209,12,38)"/><text x="27.5029%" y="143.50">spec..</text></g><g><title>trait_impls_of (142,702 samples, 0.10%)</title><rect x="31.0545%" y="117" width="0.1022%" height="15" fill="rgb(227,1,9)"/><text x="31.3045%" y="127.50"></text></g><g><title>coherence_checking (8,074,041 samples, 5.78%)</title><rect x="25.3933%" y="165" width="5.7850%" height="15" fill="rgb(248,47,43)"/><text x="25.6433%" y="175.50">coheren..</text></g><g><title>item_bodies_checking (509,846 samples, 0.37%)</title><rect x="31.1859%" y="165" width="0.3653%" height="15" fill="rgb(221,10,30)"/><text x="31.4359%" y="175.50"></text></g><g><title>typeck_item_bodies (508,496 samples, 0.36%)</title><rect x="31.1868%" y="149" width="0.3643%" height="15" fill="rgb(210,229,1)"/><text x="31.4368%" y="159.50"></text></g><g><title>typeck (496,696 samples, 0.36%)</title><rect x="31.1953%" y="133" width="0.3559%" height="15" fill="rgb(222,148,37)"/><text x="31.4453%" y="143.50"></text></g><g><title>item_types_checking (668,087 samples, 0.48%)</title><rect x="31.5512%" y="165" width="0.4787%" height="15" fill="rgb(234,67,33)"/><text x="31.8012%" y="175.50"></text></g><g><title>check_mod_item_types (666,307 samples, 0.48%)</title><rect x="31.5525%" y="149" width="0.4774%" height="15" fill="rgb(247,98,35)"/><text x="31.8025%" y="159.50"></text></g><g><title>typeck (364,964 samples, 0.26%)</title><rect x="31.7684%" y="133" width="0.2615%" height="15" fill="rgb(247,138,52)"/><text x="32.0184%" y="143.50"></text></g><g><title>mir_const_qualif (191,273 samples, 0.14%)</title><rect x="32.3741%" y="85" width="0.1370%" height="15" fill="rgb(213,79,30)"/><text x="32.6241%" y="95.50"></text></g><g><title>mir_const (157,852 samples, 0.11%)</title><rect x="32.3981%" y="69" width="0.1131%" height="15" fill="rgb(246,177,23)"/><text x="32.6481%" y="79.50"></text></g><g><title>mir_borrowck (403,744 samples, 0.29%)</title><rect x="32.6301%" y="53" width="0.2893%" height="15" fill="rgb(230,62,27)"/><text x="32.8801%" y="63.50"></text></g><g><title>mir_for_ctfe (571,396 samples, 0.41%)</title><rect x="32.5112%" y="85" width="0.4094%" height="15" fill="rgb(216,154,8)"/><text x="32.7612%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (522,485 samples, 0.37%)</title><rect x="32.5462%" y="69" width="0.3744%" height="15" fill="rgb(244,35,45)"/><text x="32.7962%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,148,144 samples, 0.82%)</title><rect x="32.2485%" y="133" width="0.8226%" height="15" fill="rgb(251,115,12)"/><text x="32.4985%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,135,854 samples, 0.81%)</title><rect x="32.2573%" y="117" width="0.8138%" height="15" fill="rgb(240,54,50)"/><text x="32.5073%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,126,553 samples, 0.81%)</title><rect x="32.2640%" y="101" width="0.8072%" height="15" fill="rgb(233,84,52)"/><text x="32.5140%" y="111.50"></text></g><g><title>typeck (209,233 samples, 0.15%)</title><rect x="32.9213%" y="85" width="0.1499%" height="15" fill="rgb(207,117,47)"/><text x="33.1713%" y="95.50"></text></g><g><title>explicit_predicates_of (158,094 samples, 0.11%)</title><rect x="33.4363%" y="101" width="0.1133%" height="15" fill="rgb(249,43,39)"/><text x="33.6863%" y="111.50"></text></g><g><title>predicates_of (469,059 samples, 0.34%)</title><rect x="33.2365%" y="133" width="0.3361%" height="15" fill="rgb(209,38,44)"/><text x="33.4865%" y="143.50"></text></g><g><title>predicates_defined_on (366,636 samples, 0.26%)</title><rect x="33.3099%" y="117" width="0.2627%" height="15" fill="rgb(236,212,23)"/><text x="33.5599%" y="127.50"></text></g><g><title>type_collecting (2,171,045 samples, 1.56%)</title><rect x="32.0305%" y="165" width="1.5555%" height="15" fill="rgb(242,79,21)"/><text x="32.2805%" y="175.50"></text></g><g><title>collect_mod_item_types (2,169,245 samples, 1.55%)</title><rect x="32.0318%" y="149" width="1.5543%" height="15" fill="rgb(211,96,35)"/><text x="32.2818%" y="159.50"></text></g><g><title>evaluate_obligation (177,560 samples, 0.13%)</title><rect x="33.8503%" y="133" width="0.1272%" height="15" fill="rgb(253,215,40)"/><text x="34.1003%" y="143.50"></text></g><g><title>check_impl_item_well_formed (540,990 samples, 0.39%)</title><rect x="33.6698%" y="149" width="0.3876%" height="15" fill="rgb(211,81,21)"/><text x="33.9198%" y="159.50"></text></g><g><title>evaluate_obligation (480,074 samples, 0.34%)</title><rect x="34.8533%" y="133" width="0.3440%" height="15" fill="rgb(208,190,38)"/><text x="35.1033%" y="143.50"></text></g><g><title>analysis (24,066,653 samples, 17.24%)</title><rect x="18.1149%" y="197" width="17.2436%" height="15" fill="rgb(235,213,38)"/><text x="18.3649%" y="207.50">analysis</text></g><g><title>type_check_crate (13,936,987 samples, 9.99%)</title><rect x="25.3727%" y="181" width="9.9858%" height="15" fill="rgb(237,122,38)"/><text x="25.6227%" y="191.50">type_check_cra..</text></g><g><title>wf_checking (2,471,378 samples, 1.77%)</title><rect x="33.5878%" y="165" width="1.7707%" height="15" fill="rgb(244,218,35)"/><text x="33.8378%" y="175.50">w..</text></g><g><title>check_item_well_formed (1,815,907 samples, 1.30%)</title><rect x="34.0574%" y="149" width="1.3011%" height="15" fill="rgb(240,68,47)"/><text x="34.3074%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,160,493 samples, 0.83%)</title><rect x="36.1055%" y="165" width="0.8315%" height="15" fill="rgb(210,16,53)"/><text x="36.3555%" y="175.50"></text></g><g><title>is_freeze_raw (1,094,541 samples, 0.78%)</title><rect x="36.1528%" y="149" width="0.7842%" height="15" fill="rgb(235,124,12)"/><text x="36.4028%" y="159.50"></text></g><g><title>evaluate_obligation (1,073,591 samples, 0.77%)</title><rect x="36.1678%" y="133" width="0.7692%" height="15" fill="rgb(224,169,11)"/><text x="36.4178%" y="143.50"></text></g><g><title>codegen_module (1,721,930 samples, 1.23%)</title><rect x="35.7099%" y="181" width="1.2338%" height="15" fill="rgb(250,166,2)"/><text x="35.9599%" y="191.50"></text></g><g><title>layout_of (779,307 samples, 0.56%)</title><rect x="37.1169%" y="117" width="0.5584%" height="15" fill="rgb(242,216,29)"/><text x="37.3669%" y="127.50"></text></g><g><title>layout_of (658,085 samples, 0.47%)</title><rect x="37.2038%" y="101" width="0.4715%" height="15" fill="rgb(230,116,27)"/><text x="37.4538%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,141,173 samples, 0.82%)</title><rect x="36.9586%" y="149" width="0.8176%" height="15" fill="rgb(228,99,48)"/><text x="37.2086%" y="159.50"></text></g><g><title>optimized_mir (1,112,732 samples, 0.80%)</title><rect x="36.9790%" y="133" width="0.7973%" height="15" fill="rgb(253,11,6)"/><text x="37.2290%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (140,914 samples, 0.10%)</title><rect x="37.6753%" y="117" width="0.1010%" height="15" fill="rgb(247,143,39)"/><text x="37.9253%" y="127.50"></text></g><g><title>monomorphization_collector (1,171,223 samples, 0.84%)</title><rect x="36.9572%" y="165" width="0.8392%" height="15" fill="rgb(236,97,10)"/><text x="37.2072%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (1,228,774 samples, 0.88%)</title><rect x="36.9442%" y="181" width="0.8804%" height="15" fill="rgb(233,208,19)"/><text x="37.1942%" y="191.50"></text></g><g><title>codegen_crate (3,509,969 samples, 2.51%)</title><rect x="35.3640%" y="197" width="2.5149%" height="15" fill="rgb(216,164,2)"/><text x="35.6140%" y="207.50">co..</text></g><g><title>codegen_module_optimize (6,993,269 samples, 5.01%)</title><rect x="37.8789%" y="197" width="5.0106%" height="15" fill="rgb(220,129,5)"/><text x="38.1289%" y="207.50">codege..</text></g><g><title>LLVM_module_optimize (5,970,858 samples, 4.28%)</title><rect x="38.6114%" y="181" width="4.2781%" height="15" fill="rgb(242,17,10)"/><text x="38.8614%" y="191.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (3,891,633 samples, 2.79%)</title><rect x="43.3816%" y="181" width="2.7883%" height="15" fill="rgb(242,107,0)"/><text x="43.6316%" y="191.50">LL..</text></g><g><title>LLVM_module_codegen (12,401,571 samples, 8.89%)</title><rect x="46.1700%" y="181" width="8.8856%" height="15" fill="rgb(251,28,31)"/><text x="46.4200%" y="191.50">LLVM_module_c..</text></g><g><title>LLVM_module_codegen_emit_obj (12,288,489 samples, 8.80%)</title><rect x="46.2510%" y="165" width="8.8046%" height="15" fill="rgb(233,223,10)"/><text x="46.5010%" y="175.50">LLVM_module_..</text></g><g><title>codegen_module_perform_lto (17,050,332 samples, 12.22%)</title><rect x="42.8895%" y="197" width="12.2165%" height="15" fill="rgb(215,21,27)"/><text x="43.1395%" y="207.50">codegen_module_per..</text></g><g><title>AST_validation (188,052 samples, 0.13%)</title><rect x="55.2342%" y="181" width="0.1347%" height="15" fill="rgb(232,23,21)"/><text x="55.4842%" y="191.50"></text></g><g><title>macro_expand_crate (14,975,020 samples, 10.73%)</title><rect x="55.5085%" y="181" width="10.7295%" height="15" fill="rgb(244,5,23)"/><text x="55.7585%" y="191.50">macro_expand_cra..</text></g><g><title>expand_crate (14,954,830 samples, 10.72%)</title><rect x="55.5230%" y="165" width="10.7150%" height="15" fill="rgb(226,81,46)"/><text x="55.7730%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,334,157 samples, 1.67%)</title><rect x="64.5656%" y="149" width="1.6724%" height="15" fill="rgb(247,70,30)"/><text x="64.8156%" y="159.50"></text></g><g><title>metadata_register_crate (837,420 samples, 0.60%)</title><rect x="65.6380%" y="133" width="0.6000%" height="15" fill="rgb(212,68,19)"/><text x="65.8880%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (407,264 samples, 0.29%)</title><rect x="66.2410%" y="181" width="0.2918%" height="15" fill="rgb(240,187,13)"/><text x="66.4910%" y="191.50"></text></g><g><title>finalize_macro_resolutions (208,552 samples, 0.15%)</title><rect x="66.5527%" y="165" width="0.1494%" height="15" fill="rgb(223,113,26)"/><text x="66.8027%" y="175.50"></text></g><g><title>late_resolve_crate (1,684,229 samples, 1.21%)</title><rect x="66.7021%" y="165" width="1.2067%" height="15" fill="rgb(206,192,2)"/><text x="66.9521%" y="175.50"></text></g><g><title>configure_and_expand (18,089,585 samples, 12.96%)</title><rect x="55.1059%" y="197" width="12.9611%" height="15" fill="rgb(241,108,4)"/><text x="55.3559%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,141,304 samples, 1.53%)</title><rect x="66.5328%" y="181" width="1.5342%" height="15" fill="rgb(247,173,49)"/><text x="66.7828%" y="191.50"></text></g><g><title>drop_ast (347,434 samples, 0.25%)</title><rect x="68.0670%" y="197" width="0.2489%" height="15" fill="rgb(224,114,35)"/><text x="68.3170%" y="207.50"></text></g><g><title>early_lint_checks (526,366 samples, 0.38%)</title><rect x="68.3242%" y="197" width="0.3771%" height="15" fill="rgb(245,159,27)"/><text x="68.5742%" y="207.50"></text></g><g><title>free_global_ctxt (2,550,099 samples, 1.83%)</title><rect x="68.7013%" y="197" width="1.8271%" height="15" fill="rgb(245,172,44)"/><text x="68.9513%" y="207.50">f..</text></g><g><title>exported_symbols (158,242 samples, 0.11%)</title><rect x="71.2641%" y="181" width="0.1134%" height="15" fill="rgb(236,23,11)"/><text x="71.5141%" y="191.50"></text></g><g><title>generate_crate_metadata (1,333,585 samples, 0.96%)</title><rect x="70.5285%" y="197" width="0.9555%" height="15" fill="rgb(205,117,38)"/><text x="70.7785%" y="207.50"></text></g><g><title>hir_lowering (5,304,529 samples, 3.80%)</title><rect x="71.4840%" y="197" width="3.8007%" height="15" fill="rgb(237,72,25)"/><text x="71.7340%" y="207.50">hir_..</text></g><g><title>finish_ongoing_codegen (21,975,498 samples, 15.75%)</title><rect x="75.2942%" y="181" width="15.7453%" height="15" fill="rgb(244,70,9)"/><text x="75.5442%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (787,159 samples, 0.56%)</title><rect x="91.0395%" y="181" width="0.5640%" height="15" fill="rgb(217,125,39)"/><text x="91.2895%" y="191.50"></text></g><g><title>link_binary (777,538 samples, 0.56%)</title><rect x="91.0464%" y="165" width="0.5571%" height="15" fill="rgb(235,36,10)"/><text x="91.2964%" y="175.50"></text></g><g><title>link_rlib (489,686 samples, 0.35%)</title><rect x="91.2526%" y="149" width="0.3509%" height="15" fill="rgb(251,123,47)"/><text x="91.5026%" y="159.50"></text></g><g><title>link (22,782,228 samples, 16.32%)</title><rect x="75.2846%" y="197" width="16.3233%" height="15" fill="rgb(221,13,13)"/><text x="75.5346%" y="207.50">link</text></g><g><title>parse_crate (10,439,308 samples, 7.48%)</title><rect x="91.6080%" y="197" width="7.4797%" height="15" fill="rgb(238,131,9)"/><text x="91.8580%" y="207.50">parse_crate</text></g><g><title>prepare_outputs (328,643 samples, 0.24%)</title><rect x="99.0926%" y="197" width="0.2355%" height="15" fill="rgb(211,50,8)"/><text x="99.3426%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (484,706 samples, 0.35%)</title><rect x="99.3281%" y="197" width="0.3473%" height="15" fill="rgb(245,182,24)"/><text x="99.5781%" y="207.50"></text></g><g><title>all (139,568,578 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(242,14,37)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (139,568,578 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (367,354 samples, 0.26%)</title><rect x="99.7368%" y="197" width="0.2632%" height="15" fill="rgb(213,55,15)"/><text x="99.9868%" y="207.50"></text></g></svg></svg>