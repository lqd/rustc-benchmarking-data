<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (131,729,715 samples, 16.48%)</title><rect x="0.0988%" y="197" width="16.4808%" height="15" fill="rgb(227,0,7)"/><text x="0.3488%" y="207.50">LLVM_passes</text></g><g><title>specialization_graph_of (2,425,538 samples, 0.30%)</title><rect x="17.2911%" y="69" width="0.3035%" height="15" fill="rgb(217,0,24)"/><text x="17.5411%" y="79.50"></text></g><g><title>impl_trait_ref (1,495,219 samples, 0.19%)</title><rect x="17.4075%" y="53" width="0.1871%" height="15" fill="rgb(221,193,54)"/><text x="17.6575%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,368,918 samples, 0.17%)</title><rect x="17.4233%" y="37" width="0.1713%" height="15" fill="rgb(248,212,6)"/><text x="17.6733%" y="47.50"></text></g><g><title>resolve_instance (2,843,522 samples, 0.36%)</title><rect x="17.2435%" y="85" width="0.3558%" height="15" fill="rgb(208,68,35)"/><text x="17.4935%" y="95.50"></text></g><g><title>mir_const (5,027,506 samples, 0.63%)</title><rect x="17.0125%" y="133" width="0.6290%" height="15" fill="rgb(232,128,0)"/><text x="17.2625%" y="143.50"></text></g><g><title>unsafety_check_result (4,600,378 samples, 0.58%)</title><rect x="17.0659%" y="117" width="0.5756%" height="15" fill="rgb(207,160,47)"/><text x="17.3159%" y="127.50"></text></g><g><title>mir_built (4,312,146 samples, 0.54%)</title><rect x="17.1020%" y="101" width="0.5395%" height="15" fill="rgb(228,23,34)"/><text x="17.3520%" y="111.50"></text></g><g><title>mir_promoted (5,309,967 samples, 0.66%)</title><rect x="16.9785%" y="149" width="0.6643%" height="15" fill="rgb(218,30,26)"/><text x="17.2285%" y="159.50"></text></g><g><title>MIR_borrow_checking (9,739,540 samples, 1.22%)</title><rect x="16.6096%" y="181" width="1.2185%" height="15" fill="rgb(220,122,19)"/><text x="16.8596%" y="191.50"></text></g><g><title>mir_borrowck (9,719,940 samples, 1.22%)</title><rect x="16.6121%" y="165" width="1.2161%" height="15" fill="rgb(250,228,42)"/><text x="16.8621%" y="175.50"></text></g><g><title>misc_checking_1 (963,791 samples, 0.12%)</title><rect x="17.8460%" y="181" width="0.1206%" height="15" fill="rgb(240,193,28)"/><text x="18.0960%" y="191.50"></text></g><g><title>crate_lints (2,565,809 samples, 0.32%)</title><rect x="18.0436%" y="149" width="0.3210%" height="15" fill="rgb(216,20,37)"/><text x="18.2936%" y="159.50"></text></g><g><title>type_of (1,868,409 samples, 0.23%)</title><rect x="18.1309%" y="133" width="0.2338%" height="15" fill="rgb(206,188,39)"/><text x="18.3809%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,387,865 samples, 0.17%)</title><rect x="18.1910%" y="117" width="0.1736%" height="15" fill="rgb(217,207,13)"/><text x="18.4410%" y="127.50"></text></g><g><title>lint_checking (2,672,660 samples, 0.33%)</title><rect x="18.0434%" y="165" width="0.3344%" height="15" fill="rgb(231,73,38)"/><text x="18.2934%" y="175.50"></text></g><g><title>misc_checking_3 (3,059,504 samples, 0.38%)</title><rect x="18.0267%" y="181" width="0.3828%" height="15" fill="rgb(225,20,46)"/><text x="18.2767%" y="191.50"></text></g><g><title>impl_trait_ref (1,349,656 samples, 0.17%)</title><rect x="18.5455%" y="117" width="0.1689%" height="15" fill="rgb(210,31,41)"/><text x="18.7955%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,221,064 samples, 0.15%)</title><rect x="18.5615%" y="101" width="0.1528%" height="15" fill="rgb(221,200,47)"/><text x="18.8115%" y="111.50"></text></g><g><title>coherent_trait (2,527,258 samples, 0.32%)</title><rect x="18.4165%" y="149" width="0.3162%" height="15" fill="rgb(226,26,5)"/><text x="18.6665%" y="159.50"></text></g><g><title>specialization_graph_of (2,519,118 samples, 0.32%)</title><rect x="18.4176%" y="133" width="0.3152%" height="15" fill="rgb(249,33,26)"/><text x="18.6676%" y="143.50"></text></g><g><title>coherence_checking (2,600,429 samples, 0.33%)</title><rect x="18.4143%" y="165" width="0.3253%" height="15" fill="rgb(235,183,28)"/><text x="18.6643%" y="175.50"></text></g><g><title>associated_items (855,518 samples, 0.11%)</title><rect x="19.8708%" y="117" width="0.1070%" height="15" fill="rgb(221,5,38)"/><text x="20.1208%" y="127.50"></text></g><g><title>evaluate_obligation (1,639,549 samples, 0.21%)</title><rect x="20.0626%" y="117" width="0.2051%" height="15" fill="rgb(247,18,42)"/><text x="20.3126%" y="127.50"></text></g><g><title>typeck (4,432,840 samples, 0.55%)</title><rect x="20.4760%" y="117" width="0.5546%" height="15" fill="rgb(241,131,45)"/><text x="20.7260%" y="127.50"></text></g><g><title>item_bodies_checking (18,311,595 samples, 2.29%)</title><rect x="18.7427%" y="165" width="2.2910%" height="15" fill="rgb(249,31,29)"/><text x="18.9927%" y="175.50">i..</text></g><g><title>typeck_item_bodies (18,307,885 samples, 2.29%)</title><rect x="18.7432%" y="149" width="2.2905%" height="15" fill="rgb(225,111,53)"/><text x="18.9932%" y="159.50">t..</text></g><g><title>typeck (18,277,645 samples, 2.29%)</title><rect x="18.7469%" y="133" width="2.2867%" height="15" fill="rgb(238,160,17)"/><text x="18.9969%" y="143.50">t..</text></g><g><title>adt_destructor (868,290 samples, 0.11%)</title><rect x="21.0787%" y="133" width="0.1086%" height="15" fill="rgb(214,148,48)"/><text x="21.3287%" y="143.50"></text></g><g><title>coherent_trait (863,180 samples, 0.11%)</title><rect x="21.0794%" y="117" width="0.1080%" height="15" fill="rgb(232,36,49)"/><text x="21.3294%" y="127.50"></text></g><g><title>specialization_graph_of (859,800 samples, 0.11%)</title><rect x="21.0798%" y="101" width="0.1076%" height="15" fill="rgb(209,103,24)"/><text x="21.3298%" y="111.50"></text></g><g><title>item_types_checking (1,402,556 samples, 0.18%)</title><rect x="21.0337%" y="165" width="0.1755%" height="15" fill="rgb(229,88,8)"/><text x="21.2837%" y="175.50"></text></g><g><title>check_mod_item_types (1,398,056 samples, 0.17%)</title><rect x="21.0342%" y="149" width="0.1749%" height="15" fill="rgb(213,181,19)"/><text x="21.2842%" y="159.50"></text></g><g><title>type_collecting (1,322,475 samples, 0.17%)</title><rect x="21.2093%" y="165" width="0.1655%" height="15" fill="rgb(254,191,54)"/><text x="21.4593%" y="175.50"></text></g><g><title>collect_mod_item_types (1,311,725 samples, 0.16%)</title><rect x="21.2106%" y="149" width="0.1641%" height="15" fill="rgb(241,83,37)"/><text x="21.4606%" y="159.50"></text></g><g><title>check_impl_item_well_formed (1,548,298 samples, 0.19%)</title><rect x="21.3854%" y="149" width="0.1937%" height="15" fill="rgb(233,36,39)"/><text x="21.6354%" y="159.50"></text></g><g><title>analysis (41,575,446 samples, 5.20%)</title><rect x="16.5796%" y="197" width="5.2015%" height="15" fill="rgb(226,3,54)"/><text x="16.8296%" y="207.50">analys..</text></g><g><title>type_check_crate (26,949,662 samples, 3.37%)</title><rect x="18.4095%" y="181" width="3.3717%" height="15" fill="rgb(245,192,40)"/><text x="18.6595%" y="191.50">typ..</text></g><g><title>wf_checking (3,247,807 samples, 0.41%)</title><rect x="21.3748%" y="165" width="0.4063%" height="15" fill="rgb(238,167,29)"/><text x="21.6248%" y="175.50"></text></g><g><title>check_item_well_formed (1,614,918 samples, 0.20%)</title><rect x="21.5791%" y="149" width="0.2020%" height="15" fill="rgb(232,182,51)"/><text x="21.8291%" y="159.50"></text></g><g><title>layout_of (924,391 samples, 0.12%)</title><rect x="24.1548%" y="149" width="0.1157%" height="15" fill="rgb(231,60,39)"/><text x="24.4048%" y="159.50"></text></g><g><title>param_env (1,912,378 samples, 0.24%)</title><rect x="24.2705%" y="149" width="0.2393%" height="15" fill="rgb(208,69,12)"/><text x="24.5205%" y="159.50"></text></g><g><title>fn_abi_of_instance (5,122,468 samples, 0.64%)</title><rect x="23.9075%" y="165" width="0.6409%" height="15" fill="rgb(235,93,37)"/><text x="24.1575%" y="175.50"></text></g><g><title>codegen_module (21,376,850 samples, 2.67%)</title><rect x="21.9457%" y="181" width="2.6745%" height="15" fill="rgb(213,116,39)"/><text x="22.1957%" y="191.50">co..</text></g><g><title>item_attrs (815,521 samples, 0.10%)</title><rect x="24.8082%" y="117" width="0.1020%" height="15" fill="rgb(222,207,29)"/><text x="25.0582%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,369,188 samples, 0.17%)</title><rect x="24.7823%" y="133" width="0.1713%" height="15" fill="rgb(206,96,30)"/><text x="25.0323%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,417,512 samples, 0.18%)</title><rect x="25.1679%" y="117" width="0.1773%" height="15" fill="rgb(218,138,4)"/><text x="25.4179%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (914,469 samples, 0.11%)</title><rect x="25.3453%" y="117" width="0.1144%" height="15" fill="rgb(250,191,14)"/><text x="25.5953%" y="127.50"></text></g><g><title>optimized_mir (3,534,697 samples, 0.44%)</title><rect x="25.0334%" y="133" width="0.4422%" height="15" fill="rgb(239,60,40)"/><text x="25.2834%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (2,326,977 samples, 0.29%)</title><rect x="25.5494%" y="117" width="0.2911%" height="15" fill="rgb(206,27,48)"/><text x="25.7994%" y="127.50"></text></g><g><title>impl_parent (904,131 samples, 0.11%)</title><rect x="26.1150%" y="101" width="0.1131%" height="15" fill="rgb(225,35,8)"/><text x="26.3650%" y="111.50"></text></g><g><title>specialization_graph_of (4,606,484 samples, 0.58%)</title><rect x="25.9154%" y="117" width="0.5763%" height="15" fill="rgb(250,213,24)"/><text x="26.1654%" y="127.50"></text></g><g><title>impl_trait_ref (2,107,108 samples, 0.26%)</title><rect x="26.2281%" y="101" width="0.2636%" height="15" fill="rgb(247,123,22)"/><text x="26.4781%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,763,685 samples, 0.22%)</title><rect x="26.2711%" y="85" width="0.2207%" height="15" fill="rgb(231,138,38)"/><text x="26.5211%" y="95.50"></text></g><g><title>resolve_instance (8,366,468 samples, 1.05%)</title><rect x="25.4756%" y="133" width="1.0467%" height="15" fill="rgb(231,145,46)"/><text x="25.7256%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (16,281,432 samples, 2.04%)</title><rect x="24.6248%" y="149" width="2.0370%" height="15" fill="rgb(251,118,11)"/><text x="24.8748%" y="159.50">m..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (883,299 samples, 0.11%)</title><rect x="26.5512%" y="133" width="0.1105%" height="15" fill="rgb(217,147,25)"/><text x="26.8012%" y="143.50"></text></g><g><title>monomorphization_collector (16,304,482 samples, 2.04%)</title><rect x="24.6245%" y="165" width="2.0399%" height="15" fill="rgb(247,81,37)"/><text x="24.8745%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (1,171,013 samples, 0.15%)</title><rect x="26.6649%" y="149" width="0.1465%" height="15" fill="rgb(209,12,38)"/><text x="26.9149%" y="159.50"></text></g><g><title>symbol_name (1,063,819 samples, 0.13%)</title><rect x="26.6783%" y="133" width="0.1331%" height="15" fill="rgb(227,1,9)"/><text x="26.9283%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (17,894,201 samples, 2.24%)</title><rect x="24.6211%" y="181" width="2.2388%" height="15" fill="rgb(248,47,43)"/><text x="24.8711%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,562,128 samples, 0.20%)</title><rect x="26.6644%" y="165" width="0.1954%" height="15" fill="rgb(221,10,30)"/><text x="26.9144%" y="175.50"></text></g><g><title>codegen_crate (40,641,635 samples, 5.08%)</title><rect x="21.7826%" y="197" width="5.0847%" height="15" fill="rgb(210,229,1)"/><text x="22.0326%" y="207.50">codege..</text></g><g><title>codegen_module_optimize (255,017,783 samples, 31.91%)</title><rect x="26.8673%" y="197" width="31.9055%" height="15" fill="rgb(222,148,37)"/><text x="27.1173%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (240,640,923 samples, 30.11%)</title><rect x="28.6660%" y="181" width="30.1068%" height="15" fill="rgb(234,67,33)"/><text x="28.9160%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (79,277,566 samples, 9.92%)</title><rect x="59.7962%" y="181" width="9.9185%" height="15" fill="rgb(247,98,35)"/><text x="60.0462%" y="191.50">LLVM_lto_optim..</text></g><g><title>LLVM_module_codegen (93,593,531 samples, 11.71%)</title><rect x="69.7147%" y="181" width="11.7096%" height="15" fill="rgb(247,138,52)"/><text x="69.9647%" y="191.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (92,160,212 samples, 11.53%)</title><rect x="69.8940%" y="165" width="11.5302%" height="15" fill="rgb(213,79,30)"/><text x="70.1440%" y="175.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (6,566,673 samples, 0.82%)</title><rect x="81.4242%" y="181" width="0.8216%" height="15" fill="rgb(246,177,23)"/><text x="81.6742%" y="191.50"></text></g><g><title>codegen_module_perform_lto (188,000,627 samples, 23.52%)</title><rect x="58.7727%" y="197" width="23.5209%" height="15" fill="rgb(230,62,27)"/><text x="59.0227%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (12,911,004 samples, 1.62%)</title><rect x="82.3478%" y="181" width="1.6153%" height="15" fill="rgb(216,154,8)"/><text x="82.5978%" y="191.50"></text></g><g><title>expand_crate (12,895,824 samples, 1.61%)</title><rect x="82.3497%" y="165" width="1.6134%" height="15" fill="rgb(244,35,45)"/><text x="82.5997%" y="175.50"></text></g><g><title>metadata_register_crate (2,636,509 samples, 0.33%)</title><rect x="83.6333%" y="149" width="0.3299%" height="15" fill="rgb(251,115,12)"/><text x="83.8833%" y="159.50"></text></g><g><title>metadata_register_crate (943,330 samples, 0.12%)</title><rect x="83.8451%" y="133" width="0.1180%" height="15" fill="rgb(240,54,50)"/><text x="84.0951%" y="143.50"></text></g><g><title>late_resolve_crate (1,498,917 samples, 0.19%)</title><rect x="83.9926%" y="165" width="0.1875%" height="15" fill="rgb(233,84,52)"/><text x="84.2426%" y="175.50"></text></g><g><title>configure_and_expand (15,163,529 samples, 1.90%)</title><rect x="82.2937%" y="197" width="1.8971%" height="15" fill="rgb(207,117,47)"/><text x="82.5437%" y="207.50">c..</text></g><g><title>resolve_crate (1,641,519 samples, 0.21%)</title><rect x="83.9854%" y="181" width="0.2054%" height="15" fill="rgb(249,43,39)"/><text x="84.2354%" y="191.50"></text></g><g><title>free_global_ctxt (5,028,456 samples, 0.63%)</title><rect x="84.2360%" y="197" width="0.6291%" height="15" fill="rgb(209,38,44)"/><text x="84.4860%" y="207.50"></text></g><g><title>generate_crate_metadata (1,244,794 samples, 0.16%)</title><rect x="84.8651%" y="197" width="0.1557%" height="15" fill="rgb(236,212,23)"/><text x="85.1151%" y="207.50"></text></g><g><title>hir_lowering (1,360,565 samples, 0.17%)</title><rect x="85.0208%" y="197" width="0.1702%" height="15" fill="rgb(242,79,21)"/><text x="85.2708%" y="207.50"></text></g><g><title>finish_ongoing_codegen (111,347,918 samples, 13.93%)</title><rect x="85.1935%" y="181" width="13.9308%" height="15" fill="rgb(211,96,35)"/><text x="85.4435%" y="191.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,706,609 samples, 0.21%)</title><rect x="99.1243%" y="181" width="0.2135%" height="15" fill="rgb(253,215,40)"/><text x="99.3743%" y="191.50"></text></g><g><title>link_binary (1,686,069 samples, 0.21%)</title><rect x="99.1269%" y="165" width="0.2109%" height="15" fill="rgb(211,81,21)"/><text x="99.3769%" y="175.50"></text></g><g><title>link_rlib (954,701 samples, 0.12%)</title><rect x="99.2184%" y="149" width="0.1194%" height="15" fill="rgb(208,190,38)"/><text x="99.4684%" y="159.50"></text></g><g><title>link (113,088,517 samples, 14.15%)</title><rect x="85.1910%" y="197" width="14.1486%" height="15" fill="rgb(235,213,38)"/><text x="85.4410%" y="207.50">link</text></g><g><title>parse_crate (2,913,423 samples, 0.36%)</title><rect x="99.3396%" y="197" width="0.3645%" height="15" fill="rgb(237,122,38)"/><text x="99.5896%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (1,545,457 samples, 0.19%)</title><rect x="99.7506%" y="197" width="0.1934%" height="15" fill="rgb(244,218,35)"/><text x="100.0006%" y="207.50"></text></g><g><title>all (799,291,620 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,68,47)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (799,291,620 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>