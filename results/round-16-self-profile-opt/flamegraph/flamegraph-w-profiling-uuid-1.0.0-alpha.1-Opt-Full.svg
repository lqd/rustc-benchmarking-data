<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (163,120,997 samples, 13.95%)</title><rect x="0.0660%" y="165" width="13.9548%" height="15" fill="rgb(227,0,7)"/><text x="0.3160%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,361,845 samples, 0.12%)</title><rect x="13.9043%" y="149" width="0.1165%" height="15" fill="rgb(217,0,24)"/><text x="14.1543%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,315,615 samples, 0.11%)</title><rect x="13.9083%" y="133" width="0.1125%" height="15" fill="rgb(221,193,54)"/><text x="14.1583%" y="143.50"></text></g><g><title>specialization_graph_of (1,390,956 samples, 0.12%)</title><rect x="17.4615%" y="37" width="0.1190%" height="15" fill="rgb(248,212,6)"/><text x="17.7115%" y="47.50"></text></g><g><title>resolve_instance (2,347,498 samples, 0.20%)</title><rect x="17.3886%" y="53" width="0.2008%" height="15" fill="rgb(208,68,35)"/><text x="17.6386%" y="63.50"></text></g><g><title>thir_body (2,117,051 samples, 0.18%)</title><rect x="17.5933%" y="53" width="0.1811%" height="15" fill="rgb(232,128,0)"/><text x="17.8433%" y="63.50"></text></g><g><title>mir_const (13,044,049 samples, 1.12%)</title><rect x="16.6607%" y="101" width="1.1159%" height="15" fill="rgb(207,160,47)"/><text x="16.9107%" y="111.50"></text></g><g><title>unsafety_check_result (11,567,582 samples, 0.99%)</title><rect x="16.7870%" y="85" width="0.9896%" height="15" fill="rgb(228,23,34)"/><text x="17.0370%" y="95.50"></text></g><g><title>mir_built (10,434,853 samples, 0.89%)</title><rect x="16.8839%" y="69" width="0.8927%" height="15" fill="rgb(218,30,26)"/><text x="17.1339%" y="79.50"></text></g><g><title>thir_body (1,317,263 samples, 0.11%)</title><rect x="18.2239%" y="37" width="0.1127%" height="15" fill="rgb(220,122,19)"/><text x="18.4739%" y="47.50"></text></g><g><title>mir_const (5,331,487 samples, 0.46%)</title><rect x="17.8821%" y="85" width="0.4561%" height="15" fill="rgb(250,228,42)"/><text x="18.1321%" y="95.50"></text></g><g><title>unsafety_check_result (4,497,727 samples, 0.38%)</title><rect x="17.9534%" y="69" width="0.3848%" height="15" fill="rgb(240,193,28)"/><text x="18.2034%" y="79.50"></text></g><g><title>mir_built (4,117,553 samples, 0.35%)</title><rect x="17.9860%" y="53" width="0.3523%" height="15" fill="rgb(216,20,37)"/><text x="18.2360%" y="63.50"></text></g><g><title>mir_const_qualif (6,625,117 samples, 0.57%)</title><rect x="17.7766%" y="101" width="0.5668%" height="15" fill="rgb(206,188,39)"/><text x="18.0266%" y="111.50"></text></g><g><title>mir_promoted (21,708,643 samples, 1.86%)</title><rect x="16.4863%" y="117" width="1.8572%" height="15" fill="rgb(217,207,13)"/><text x="16.7363%" y="127.50">m..</text></g><g><title>type_op_prove_predicate (1,897,984 samples, 0.16%)</title><rect x="18.4123%" y="117" width="0.1624%" height="15" fill="rgb(231,73,38)"/><text x="18.6623%" y="127.50"></text></g><g><title>MIR_borrow_checking (52,624,570 samples, 4.50%)</title><rect x="14.0743%" y="149" width="4.5020%" height="15" fill="rgb(225,20,46)"/><text x="14.3243%" y="159.50">MIR_b..</text></g><g><title>mir_borrowck (52,185,612 samples, 4.46%)</title><rect x="14.1119%" y="133" width="4.4644%" height="15" fill="rgb(210,31,41)"/><text x="14.3619%" y="143.50">mir_b..</text></g><g><title>MIR_effect_checking (2,826,641 samples, 0.24%)</title><rect x="18.5763%" y="149" width="0.2418%" height="15" fill="rgb(221,200,47)"/><text x="18.8263%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,581,049 samples, 0.22%)</title><rect x="18.5973%" y="133" width="0.2208%" height="15" fill="rgb(226,26,5)"/><text x="18.8473%" y="143.50"></text></g><g><title>check_mod_attrs (1,322,976 samples, 0.11%)</title><rect x="18.8611%" y="133" width="0.1132%" height="15" fill="rgb(249,33,26)"/><text x="19.1111%" y="143.50"></text></g><g><title>misc_checking_1 (2,561,228 samples, 0.22%)</title><rect x="18.8588%" y="149" width="0.2191%" height="15" fill="rgb(235,183,28)"/><text x="19.1088%" y="159.50"></text></g><g><title>misc_checking_2 (2,457,558 samples, 0.21%)</title><rect x="19.0779%" y="149" width="0.2102%" height="15" fill="rgb(221,5,38)"/><text x="19.3279%" y="159.50"></text></g><g><title>match_checking (1,565,888 samples, 0.13%)</title><rect x="19.1542%" y="133" width="0.1340%" height="15" fill="rgb(247,18,42)"/><text x="19.4042%" y="143.50"></text></g><g><title>check_match (1,463,707 samples, 0.13%)</title><rect x="19.1629%" y="117" width="0.1252%" height="15" fill="rgb(241,131,45)"/><text x="19.4129%" y="127.50"></text></g><g><title>eval_to_const_value_raw (3,606,460 samples, 0.31%)</title><rect x="19.5882%" y="101" width="0.3085%" height="15" fill="rgb(249,31,29)"/><text x="19.8382%" y="111.50"></text></g><g><title>eval_to_const_value_raw (3,601,360 samples, 0.31%)</title><rect x="19.5886%" y="85" width="0.3081%" height="15" fill="rgb(225,111,53)"/><text x="19.8386%" y="95.50"></text></g><g><title>eval_to_allocation_raw (3,591,080 samples, 0.31%)</title><rect x="19.5895%" y="69" width="0.3072%" height="15" fill="rgb(238,160,17)"/><text x="19.8395%" y="79.50"></text></g><g><title>crate_lints (7,307,010 samples, 0.63%)</title><rect x="19.4273%" y="117" width="0.6251%" height="15" fill="rgb(214,148,48)"/><text x="19.6773%" y="127.50"></text></g><g><title>type_of (1,538,057 samples, 0.13%)</title><rect x="19.9209%" y="101" width="0.1316%" height="15" fill="rgb(232,36,49)"/><text x="20.1709%" y="111.50"></text></g><g><title>lint_checking (8,401,932 samples, 0.72%)</title><rect x="19.4272%" y="133" width="0.7188%" height="15" fill="rgb(209,103,24)"/><text x="19.6772%" y="143.50"></text></g><g><title>privacy_checking_modules (1,761,619 samples, 0.15%)</title><rect x="20.2155%" y="133" width="0.1507%" height="15" fill="rgb(229,88,8)"/><text x="20.4655%" y="143.50"></text></g><g><title>check_mod_privacy (1,754,979 samples, 0.15%)</title><rect x="20.2161%" y="117" width="0.1501%" height="15" fill="rgb(213,181,19)"/><text x="20.4661%" y="127.50"></text></g><g><title>misc_checking_3 (12,631,728 samples, 1.08%)</title><rect x="19.2881%" y="149" width="1.0806%" height="15" fill="rgb(254,191,54)"/><text x="19.5381%" y="159.50"></text></g><g><title>impl_parent (3,196,644 samples, 0.27%)</title><rect x="20.9012%" y="85" width="0.2735%" height="15" fill="rgb(241,83,37)"/><text x="21.1512%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,722,793 samples, 0.15%)</title><rect x="21.0273%" y="69" width="0.1474%" height="15" fill="rgb(233,36,39)"/><text x="21.2773%" y="79.50"></text></g><g><title>impl_trait_ref (6,157,416 samples, 0.53%)</title><rect x="21.1748%" y="85" width="0.5268%" height="15" fill="rgb(226,3,54)"/><text x="21.4248%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (4,881,200 samples, 0.42%)</title><rect x="21.2840%" y="69" width="0.4176%" height="15" fill="rgb(245,192,40)"/><text x="21.5340%" y="79.50"></text></g><g><title>coherent_trait (16,530,623 samples, 1.41%)</title><rect x="20.3911%" y="117" width="1.4142%" height="15" fill="rgb(238,167,29)"/><text x="20.6411%" y="127.50"></text></g><g><title>specialization_graph_of (16,027,618 samples, 1.37%)</title><rect x="20.4342%" y="101" width="1.3711%" height="15" fill="rgb(232,182,51)"/><text x="20.6842%" y="111.50"></text></g><g><title>coherence_checking (16,703,984 samples, 1.43%)</title><rect x="20.3882%" y="133" width="1.4290%" height="15" fill="rgb(231,60,39)"/><text x="20.6382%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,558,188 samples, 0.13%)</title><rect x="27.2165%" y="69" width="0.1333%" height="15" fill="rgb(208,69,12)"/><text x="27.4665%" y="79.50"></text></g><g><title>eval_to_const_value_raw (1,933,483 samples, 0.17%)</title><rect x="27.2140%" y="85" width="0.1654%" height="15" fill="rgb(235,93,37)"/><text x="27.4640%" y="95.50"></text></g><g><title>specializes (2,124,292 samples, 0.18%)</title><rect x="28.0878%" y="69" width="0.1817%" height="15" fill="rgb(213,116,39)"/><text x="28.3378%" y="79.50"></text></g><g><title>param_env (1,261,153 samples, 0.11%)</title><rect x="28.1616%" y="53" width="0.1079%" height="15" fill="rgb(222,207,29)"/><text x="28.4116%" y="63.50"></text></g><g><title>evaluate_obligation (10,856,394 samples, 0.93%)</title><rect x="27.3794%" y="85" width="0.9288%" height="15" fill="rgb(206,96,30)"/><text x="27.6294%" y="95.50"></text></g><g><title>item_bodies_checking (79,556,617 samples, 6.81%)</title><rect x="21.8247%" y="133" width="6.8060%" height="15" fill="rgb(218,138,4)"/><text x="22.0747%" y="143.50">item_bodi..</text></g><g><title>typeck_item_bodies (79,552,887 samples, 6.81%)</title><rect x="21.8250%" y="117" width="6.8057%" height="15" fill="rgb(250,191,14)"/><text x="22.0750%" y="127.50">typeck_it..</text></g><g><title>typeck (79,230,993 samples, 6.78%)</title><rect x="21.8525%" y="101" width="6.7781%" height="15" fill="rgb(239,60,40)"/><text x="22.1025%" y="111.50">typeck</text></g><g><title>item_types_checking (5,148,616 samples, 0.44%)</title><rect x="28.6307%" y="133" width="0.4405%" height="15" fill="rgb(206,27,48)"/><text x="28.8807%" y="143.50"></text></g><g><title>check_mod_item_types (5,140,176 samples, 0.44%)</title><rect x="28.6314%" y="117" width="0.4397%" height="15" fill="rgb(225,35,8)"/><text x="28.8814%" y="127.50"></text></g><g><title>typeck (2,373,107 samples, 0.20%)</title><rect x="28.8681%" y="101" width="0.2030%" height="15" fill="rgb(250,213,24)"/><text x="29.1181%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,340,455 samples, 0.11%)</title><rect x="29.1322%" y="101" width="0.1147%" height="15" fill="rgb(247,123,22)"/><text x="29.3822%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,329,155 samples, 0.11%)</title><rect x="29.1332%" y="85" width="0.1137%" height="15" fill="rgb(231,138,38)"/><text x="29.3832%" y="95.50"></text></g><g><title>eval_to_allocation_raw (1,322,205 samples, 0.11%)</title><rect x="29.1338%" y="69" width="0.1131%" height="15" fill="rgb(231,145,46)"/><text x="29.3838%" y="79.50"></text></g><g><title>generics_of (1,529,882 samples, 0.13%)</title><rect x="29.3182%" y="101" width="0.1309%" height="15" fill="rgb(251,118,11)"/><text x="29.5682%" y="111.50"></text></g><g><title>type_collecting (5,717,003 samples, 0.49%)</title><rect x="29.0713%" y="133" width="0.4891%" height="15" fill="rgb(217,147,25)"/><text x="29.3213%" y="143.50"></text></g><g><title>collect_mod_item_types (5,705,273 samples, 0.49%)</title><rect x="29.0723%" y="117" width="0.4881%" height="15" fill="rgb(247,81,37)"/><text x="29.3223%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,594,779 samples, 0.65%)</title><rect x="29.6032%" y="117" width="0.6497%" height="15" fill="rgb(209,12,38)"/><text x="29.8532%" y="127.50"></text></g><g><title>analysis (194,330,480 samples, 16.62%)</title><rect x="14.0208%" y="165" width="16.6248%" height="15" fill="rgb(227,1,9)"/><text x="14.2708%" y="175.50">analysis</text></g><g><title>type_check_crate (120,127,803 samples, 10.28%)</title><rect x="20.3688%" y="149" width="10.2768%" height="15" fill="rgb(248,47,43)"/><text x="20.6188%" y="159.50">type_check_crate</text></g><g><title>wf_checking (12,664,970 samples, 1.08%)</title><rect x="29.5621%" y="133" width="1.0835%" height="15" fill="rgb(221,10,30)"/><text x="29.8121%" y="143.50"></text></g><g><title>check_item_well_formed (4,589,995 samples, 0.39%)</title><rect x="30.2529%" y="117" width="0.3927%" height="15" fill="rgb(210,229,1)"/><text x="30.5029%" y="127.50"></text></g><g><title>param_env (1,503,873 samples, 0.13%)</title><rect x="33.1362%" y="117" width="0.1287%" height="15" fill="rgb(222,148,37)"/><text x="33.3862%" y="127.50"></text></g><g><title>fn_abi_of_instance (6,102,508 samples, 0.52%)</title><rect x="32.8056%" y="133" width="0.5221%" height="15" fill="rgb(234,67,33)"/><text x="33.0556%" y="143.50"></text></g><g><title>codegen_module (30,385,455 samples, 2.60%)</title><rect x="30.8137%" y="149" width="2.5994%" height="15" fill="rgb(247,98,35)"/><text x="31.0637%" y="159.50">co..</text></g><g><title>mir_drops_elaborated_and_const_checked (2,223,423 samples, 0.19%)</title><rect x="34.1377%" y="85" width="0.1902%" height="15" fill="rgb(247,138,52)"/><text x="34.3877%" y="95.50"></text></g><g><title>optimized_mir (8,754,732 samples, 0.75%)</title><rect x="33.6224%" y="101" width="0.7490%" height="15" fill="rgb(213,79,30)"/><text x="33.8724%" y="111.50"></text></g><g><title>resolve_instance (2,375,242 samples, 0.20%)</title><rect x="34.3714%" y="101" width="0.2032%" height="15" fill="rgb(246,177,23)"/><text x="34.6214%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (13,901,724 samples, 1.19%)</title><rect x="33.4179%" y="117" width="1.1893%" height="15" fill="rgb(230,62,27)"/><text x="33.6679%" y="127.50"></text></g><g><title>monomorphization_collector (14,079,116 samples, 1.20%)</title><rect x="33.4177%" y="133" width="1.2045%" height="15" fill="rgb(216,154,8)"/><text x="33.6677%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (15,398,760 samples, 1.32%)</title><rect x="33.4136%" y="149" width="1.3173%" height="15" fill="rgb(244,35,45)"/><text x="33.6636%" y="159.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,271,894 samples, 0.11%)</title><rect x="34.6221%" y="133" width="0.1088%" height="15" fill="rgb(251,115,12)"/><text x="34.8721%" y="143.50"></text></g><g><title>codegen_crate (47,818,597 samples, 4.09%)</title><rect x="30.6462%" y="165" width="4.0908%" height="15" fill="rgb(240,54,50)"/><text x="30.8962%" y="175.50">code..</text></g><g><title>codegen_module_optimize (284,979,382 samples, 24.38%)</title><rect x="34.7370%" y="165" width="24.3797%" height="15" fill="rgb(233,84,52)"/><text x="34.9870%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (273,318,113 samples, 23.38%)</title><rect x="35.7346%" y="149" width="23.3821%" height="15" fill="rgb(207,117,47)"/><text x="35.9846%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (138,644,399 samples, 11.86%)</title><rect x="59.7493%" y="149" width="11.8609%" height="15" fill="rgb(249,43,39)"/><text x="59.9993%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (136,798,928 samples, 11.70%)</title><rect x="71.6102%" y="149" width="11.7030%" height="15" fill="rgb(209,38,44)"/><text x="71.8602%" y="159.50">LLVM_module_codeg..</text></g><g><title>LLVM_module_codegen_emit_obj (135,354,302 samples, 11.58%)</title><rect x="71.7338%" y="133" width="11.5794%" height="15" fill="rgb(236,212,23)"/><text x="71.9838%" y="143.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (4,328,138 samples, 0.37%)</title><rect x="83.3132%" y="149" width="0.3703%" height="15" fill="rgb(242,79,21)"/><text x="83.5632%" y="159.50"></text></g><g><title>codegen_module_perform_lto (287,629,033 samples, 24.61%)</title><rect x="59.1167%" y="165" width="24.6064%" height="15" fill="rgb(211,96,35)"/><text x="59.3667%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (18,322,262 samples, 1.57%)</title><rect x="83.7771%" y="149" width="1.5675%" height="15" fill="rgb(253,215,40)"/><text x="84.0271%" y="159.50"></text></g><g><title>expand_crate (18,311,092 samples, 1.57%)</title><rect x="83.7781%" y="133" width="1.5665%" height="15" fill="rgb(211,81,21)"/><text x="84.0281%" y="143.50"></text></g><g><title>late_resolve_crate (3,793,671 samples, 0.32%)</title><rect x="85.3947%" y="133" width="0.3245%" height="15" fill="rgb(208,190,38)"/><text x="85.6447%" y="143.50"></text></g><g><title>configure_and_expand (23,588,950 samples, 2.02%)</title><rect x="83.7231%" y="165" width="2.0180%" height="15" fill="rgb(235,213,38)"/><text x="83.9731%" y="175.50">c..</text></g><g><title>resolve_crate (4,412,389 samples, 0.38%)</title><rect x="85.3637%" y="149" width="0.3775%" height="15" fill="rgb(237,122,38)"/><text x="85.6137%" y="159.50"></text></g><g><title>free_global_ctxt (9,653,646 samples, 0.83%)</title><rect x="85.8753%" y="165" width="0.8259%" height="15" fill="rgb(244,218,35)"/><text x="86.1253%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,932,362 samples, 0.25%)</title><rect x="87.5982%" y="133" width="0.2509%" height="15" fill="rgb(240,68,47)"/><text x="87.8482%" y="143.50"></text></g><g><title>optimized_mir (7,947,680 samples, 0.68%)</title><rect x="87.1965%" y="149" width="0.6799%" height="15" fill="rgb(210,16,53)"/><text x="87.4465%" y="159.50"></text></g><g><title>generate_crate_metadata (13,897,883 samples, 1.19%)</title><rect x="86.7011%" y="165" width="1.1890%" height="15" fill="rgb(235,124,12)"/><text x="86.9511%" y="175.50"></text></g><g><title>hir_lowering (6,925,657 samples, 0.59%)</title><rect x="87.8901%" y="165" width="0.5925%" height="15" fill="rgb(224,169,11)"/><text x="88.1401%" y="175.50"></text></g><g><title>finish_ongoing_codegen (125,383,391 samples, 10.73%)</title><rect x="88.4842%" y="149" width="10.7264%" height="15" fill="rgb(250,166,2)"/><text x="88.7342%" y="159.50">finish_ongoing_c..</text></g><g><title>link_crate (1,865,381 samples, 0.16%)</title><rect x="99.2107%" y="149" width="0.1596%" height="15" fill="rgb(242,216,29)"/><text x="99.4607%" y="159.50"></text></g><g><title>link_binary (1,784,910 samples, 0.15%)</title><rect x="99.2176%" y="133" width="0.1527%" height="15" fill="rgb(230,116,27)"/><text x="99.4676%" y="143.50"></text></g><g><title>link_rlib (1,339,045 samples, 0.11%)</title><rect x="99.2557%" y="117" width="0.1146%" height="15" fill="rgb(228,99,48)"/><text x="99.5057%" y="127.50"></text></g><g><title>link (127,279,773 samples, 10.89%)</title><rect x="88.4826%" y="165" width="10.8887%" height="15" fill="rgb(253,11,6)"/><text x="88.7326%" y="175.50">link</text></g><g><title>parse_crate (3,357,837 samples, 0.29%)</title><rect x="99.3712%" y="165" width="0.2873%" height="15" fill="rgb(247,143,39)"/><text x="99.6212%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (3,095,514 samples, 0.26%)</title><rect x="99.6786%" y="165" width="0.2648%" height="15" fill="rgb(236,97,10)"/><text x="99.9286%" y="175.50"></text></g><g><title>all (1,168,919,945 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(233,208,19)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (1,168,919,945 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>