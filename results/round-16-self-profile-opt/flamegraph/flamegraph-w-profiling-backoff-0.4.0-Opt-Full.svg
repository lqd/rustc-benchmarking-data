<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,038,945 samples, 12.97%)</title><rect x="0.2065%" y="181" width="12.9738%" height="15" fill="rgb(227,0,7)"/><text x="0.4565%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (398,424 samples, 0.21%)</title><rect x="12.9739%" y="165" width="0.2064%" height="15" fill="rgb(217,0,24)"/><text x="13.2239%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (380,324 samples, 0.20%)</title><rect x="12.9832%" y="149" width="0.1971%" height="15" fill="rgb(221,193,54)"/><text x="13.2332%" y="159.50"></text></g><g><title>needs_drop_raw (524,908 samples, 0.27%)</title><rect x="18.9687%" y="69" width="0.2720%" height="15" fill="rgb(248,212,6)"/><text x="19.2187%" y="79.50"></text></g><g><title>is_copy_raw (344,806 samples, 0.18%)</title><rect x="19.0621%" y="53" width="0.1787%" height="15" fill="rgb(208,68,35)"/><text x="19.3121%" y="63.50"></text></g><g><title>evaluate_obligation (270,085 samples, 0.14%)</title><rect x="19.1008%" y="37" width="0.1399%" height="15" fill="rgb(232,128,0)"/><text x="19.3508%" y="47.50"></text></g><g><title>resolve_instance (238,894 samples, 0.12%)</title><rect x="19.2407%" y="69" width="0.1238%" height="15" fill="rgb(207,160,47)"/><text x="19.4907%" y="79.50"></text></g><g><title>thir_body (580,189 samples, 0.30%)</title><rect x="19.3754%" y="69" width="0.3006%" height="15" fill="rgb(228,23,34)"/><text x="19.6254%" y="79.50"></text></g><g><title>mir_const (4,407,122 samples, 2.28%)</title><rect x="17.3986%" y="117" width="2.2835%" height="15" fill="rgb(218,30,26)"/><text x="17.6486%" y="127.50">m..</text></g><g><title>unsafety_check_result (3,679,802 samples, 1.91%)</title><rect x="17.7755%" y="101" width="1.9067%" height="15" fill="rgb(220,122,19)"/><text x="18.0255%" y="111.50">u..</text></g><g><title>mir_built (3,234,768 samples, 1.68%)</title><rect x="18.0060%" y="85" width="1.6761%" height="15" fill="rgb(250,228,42)"/><text x="18.2560%" y="95.50"></text></g><g><title>mir_promoted (5,102,330 samples, 2.64%)</title><rect x="17.1202%" y="133" width="2.6438%" height="15" fill="rgb(240,193,28)"/><text x="17.3702%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (230,335 samples, 0.12%)</title><rect x="19.7640%" y="133" width="0.1193%" height="15" fill="rgb(216,20,37)"/><text x="20.0140%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,221,732 samples, 0.63%)</title><rect x="19.9102%" y="133" width="0.6330%" height="15" fill="rgb(206,188,39)"/><text x="20.1602%" y="143.50"></text></g><g><title>MIR_borrow_checking (14,003,578 samples, 7.26%)</title><rect x="13.2899%" y="165" width="7.2559%" height="15" fill="rgb(217,207,13)"/><text x="13.5399%" y="175.50">MIR_borrow..</text></g><g><title>mir_borrowck (13,907,758 samples, 7.21%)</title><rect x="13.3395%" y="149" width="7.2063%" height="15" fill="rgb(231,73,38)"/><text x="13.5895%" y="159.50">mir_borrow..</text></g><g><title>codegen_fn_attrs (306,212 samples, 0.16%)</title><rect x="20.7853%" y="133" width="0.1587%" height="15" fill="rgb(225,20,46)"/><text x="21.0353%" y="143.50"></text></g><g><title>check_mod_attrs (460,044 samples, 0.24%)</title><rect x="20.7057%" y="149" width="0.2384%" height="15" fill="rgb(210,31,41)"/><text x="20.9557%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (330,983 samples, 0.17%)</title><rect x="21.0210%" y="149" width="0.1715%" height="15" fill="rgb(221,200,47)"/><text x="21.2710%" y="159.50"></text></g><g><title>misc_checking_1 (1,012,011 samples, 0.52%)</title><rect x="20.6935%" y="165" width="0.5244%" height="15" fill="rgb(226,26,5)"/><text x="20.9435%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (285,833 samples, 0.15%)</title><rect x="21.2186%" y="149" width="0.1481%" height="15" fill="rgb(249,33,26)"/><text x="21.4686%" y="159.50"></text></g><g><title>check_mod_liveness (220,263 samples, 0.11%)</title><rect x="21.2526%" y="133" width="0.1141%" height="15" fill="rgb(235,183,28)"/><text x="21.5026%" y="143.50"></text></g><g><title>misc_checking_2 (684,487 samples, 0.35%)</title><rect x="21.2179%" y="165" width="0.3547%" height="15" fill="rgb(221,5,38)"/><text x="21.4679%" y="175.50"></text></g><g><title>match_checking (397,324 samples, 0.21%)</title><rect x="21.3667%" y="149" width="0.2059%" height="15" fill="rgb(247,18,42)"/><text x="21.6167%" y="159.50"></text></g><g><title>check_match (372,454 samples, 0.19%)</title><rect x="21.3796%" y="133" width="0.1930%" height="15" fill="rgb(241,131,45)"/><text x="21.6296%" y="143.50"></text></g><g><title>death_checking (341,974 samples, 0.18%)</title><rect x="21.6615%" y="149" width="0.1772%" height="15" fill="rgb(249,31,29)"/><text x="21.9115%" y="159.50"></text></g><g><title>crate_lints (2,351,895 samples, 1.22%)</title><rect x="21.8394%" y="133" width="1.2186%" height="15" fill="rgb(225,111,53)"/><text x="22.0894%" y="143.50"></text></g><g><title>type_of (1,080,829 samples, 0.56%)</title><rect x="22.4980%" y="117" width="0.5600%" height="15" fill="rgb(238,160,17)"/><text x="22.7480%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (839,326 samples, 0.43%)</title><rect x="22.6232%" y="101" width="0.4349%" height="15" fill="rgb(214,148,48)"/><text x="22.8732%" y="111.50"></text></g><g><title>lint_checking (2,645,468 samples, 1.37%)</title><rect x="21.8386%" y="149" width="1.3707%" height="15" fill="rgb(232,36,49)"/><text x="22.0886%" y="159.50"></text></g><g><title>module_lints (292,033 samples, 0.15%)</title><rect x="23.0581%" y="133" width="0.1513%" height="15" fill="rgb(209,103,24)"/><text x="23.3081%" y="143.50"></text></g><g><title>lint_mod (286,553 samples, 0.15%)</title><rect x="23.0609%" y="117" width="0.1485%" height="15" fill="rgb(229,88,8)"/><text x="23.3109%" y="127.50"></text></g><g><title>privacy_access_levels (200,762 samples, 0.10%)</title><rect x="23.2094%" y="149" width="0.1040%" height="15" fill="rgb(213,181,19)"/><text x="23.4594%" y="159.50"></text></g><g><title>privacy_checking_modules (562,976 samples, 0.29%)</title><rect x="23.3134%" y="149" width="0.2917%" height="15" fill="rgb(254,191,54)"/><text x="23.5634%" y="159.50"></text></g><g><title>check_mod_privacy (558,696 samples, 0.29%)</title><rect x="23.3156%" y="133" width="0.2895%" height="15" fill="rgb(241,83,37)"/><text x="23.5656%" y="143.50"></text></g><g><title>misc_checking_3 (3,933,722 samples, 2.04%)</title><rect x="21.5726%" y="165" width="2.0382%" height="15" fill="rgb(233,36,39)"/><text x="21.8226%" y="175.50">m..</text></g><g><title>adt_destructor (305,753 samples, 0.16%)</title><rect x="23.6585%" y="117" width="0.1584%" height="15" fill="rgb(226,3,54)"/><text x="23.9085%" y="127.50"></text></g><g><title>coherent_trait (303,613 samples, 0.16%)</title><rect x="23.6596%" y="101" width="0.1573%" height="15" fill="rgb(245,192,40)"/><text x="23.9096%" y="111.50"></text></g><g><title>specialization_graph_of (302,533 samples, 0.16%)</title><rect x="23.6602%" y="85" width="0.1568%" height="15" fill="rgb(238,167,29)"/><text x="23.9102%" y="95.50"></text></g><g><title>impl_parent (2,447,445 samples, 1.27%)</title><rect x="26.0102%" y="101" width="1.2681%" height="15" fill="rgb(232,182,51)"/><text x="26.2602%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,453,873 samples, 0.75%)</title><rect x="26.5251%" y="85" width="0.7533%" height="15" fill="rgb(231,60,39)"/><text x="26.7751%" y="95.50"></text></g><g><title>impl_trait_ref (5,778,638 samples, 2.99%)</title><rect x="27.2791%" y="101" width="2.9942%" height="15" fill="rgb(208,69,12)"/><text x="27.5291%" y="111.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,567,990 samples, 2.37%)</title><rect x="27.9064%" y="85" width="2.3669%" height="15" fill="rgb(235,93,37)"/><text x="28.1564%" y="95.50">me..</text></g><g><title>trait_impls_of (905,582 samples, 0.47%)</title><rect x="30.3036%" y="101" width="0.4692%" height="15" fill="rgb(213,116,39)"/><text x="30.5536%" y="111.50"></text></g><g><title>implementations_of_trait (239,827 samples, 0.12%)</title><rect x="30.6485%" y="85" width="0.1243%" height="15" fill="rgb(222,207,29)"/><text x="30.8985%" y="95.50"></text></g><g><title>coherent_trait (13,756,477 samples, 7.13%)</title><rect x="23.6456%" y="133" width="7.1279%" height="15" fill="rgb(206,96,30)"/><text x="23.8956%" y="143.50">coherent_t..</text></g><g><title>specialization_graph_of (13,402,473 samples, 6.94%)</title><rect x="23.8290%" y="117" width="6.9444%" height="15" fill="rgb(218,138,4)"/><text x="24.0790%" y="127.50">specializ..</text></g><g><title>coherence_checking (13,814,787 samples, 7.16%)</title><rect x="23.6370%" y="149" width="7.1581%" height="15" fill="rgb(250,191,14)"/><text x="23.8870%" y="159.50">coherence_..</text></g><g><title>associated_items (238,731 samples, 0.12%)</title><rect x="36.6089%" y="101" width="0.1237%" height="15" fill="rgb(239,60,40)"/><text x="36.8589%" y="111.50"></text></g><g><title>dropck_outlives (218,081 samples, 0.11%)</title><rect x="36.7517%" y="101" width="0.1130%" height="15" fill="rgb(206,27,48)"/><text x="37.0017%" y="111.50"></text></g><g><title>predicates_of (212,721 samples, 0.11%)</title><rect x="37.4536%" y="85" width="0.1102%" height="15" fill="rgb(225,35,8)"/><text x="37.7036%" y="95.50"></text></g><g><title>specializes (232,170 samples, 0.12%)</title><rect x="37.5639%" y="85" width="0.1203%" height="15" fill="rgb(250,213,24)"/><text x="37.8139%" y="95.50"></text></g><g><title>trait_impls_of (273,894 samples, 0.14%)</title><rect x="37.6874%" y="85" width="0.1419%" height="15" fill="rgb(247,123,22)"/><text x="37.9374%" y="95.50"></text></g><g><title>evaluate_obligation (1,865,959 samples, 0.97%)</title><rect x="36.8647%" y="101" width="0.9668%" height="15" fill="rgb(231,138,38)"/><text x="37.1147%" y="111.50"></text></g><g><title>predicates_of (202,401 samples, 0.10%)</title><rect x="38.1263%" y="101" width="0.1049%" height="15" fill="rgb(231,145,46)"/><text x="38.3763%" y="111.50"></text></g><g><title>typeck (1,217,533 samples, 0.63%)</title><rect x="38.2537%" y="101" width="0.6309%" height="15" fill="rgb(251,118,11)"/><text x="38.5037%" y="111.50"></text></g><g><title>item_bodies_checking (15,615,565 samples, 8.09%)</title><rect x="30.8118%" y="149" width="8.0911%" height="15" fill="rgb(217,147,25)"/><text x="31.0618%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (15,613,355 samples, 8.09%)</title><rect x="30.8129%" y="133" width="8.0900%" height="15" fill="rgb(247,81,37)"/><text x="31.0629%" y="143.50">typeck_item..</text></g><g><title>typeck (15,549,014 samples, 8.06%)</title><rect x="30.8463%" y="117" width="8.0567%" height="15" fill="rgb(209,12,38)"/><text x="31.0963%" y="127.50">typeck</text></g><g><title>item_types_checking (844,109 samples, 0.44%)</title><rect x="38.9029%" y="149" width="0.4374%" height="15" fill="rgb(227,1,9)"/><text x="39.1529%" y="159.50"></text></g><g><title>check_mod_item_types (837,669 samples, 0.43%)</title><rect x="38.9063%" y="133" width="0.4340%" height="15" fill="rgb(248,47,43)"/><text x="39.1563%" y="143.50"></text></g><g><title>fn_sig (337,672 samples, 0.17%)</title><rect x="39.4747%" y="117" width="0.1750%" height="15" fill="rgb(221,10,30)"/><text x="39.7247%" y="127.50"></text></g><g><title>named_region_map (233,251 samples, 0.12%)</title><rect x="39.7005%" y="101" width="0.1209%" height="15" fill="rgb(210,229,1)"/><text x="39.9505%" y="111.50"></text></g><g><title>resolve_lifetimes (210,871 samples, 0.11%)</title><rect x="39.7121%" y="85" width="0.1093%" height="15" fill="rgb(222,148,37)"/><text x="39.9621%" y="95.50"></text></g><g><title>generics_of (345,733 samples, 0.18%)</title><rect x="39.6497%" y="117" width="0.1791%" height="15" fill="rgb(234,67,33)"/><text x="39.8997%" y="127.50"></text></g><g><title>late_bound_vars_map (198,632 samples, 0.10%)</title><rect x="40.0402%" y="69" width="0.1029%" height="15" fill="rgb(247,98,35)"/><text x="40.2902%" y="79.50"></text></g><g><title>explicit_predicates_of (451,446 samples, 0.23%)</title><rect x="39.9239%" y="85" width="0.2339%" height="15" fill="rgb(247,138,52)"/><text x="40.1739%" y="95.50"></text></g><g><title>predicates_of (751,980 samples, 0.39%)</title><rect x="39.8504%" y="117" width="0.3896%" height="15" fill="rgb(213,79,30)"/><text x="40.1004%" y="127.50"></text></g><g><title>predicates_defined_on (693,159 samples, 0.36%)</title><rect x="39.8809%" y="101" width="0.3592%" height="15" fill="rgb(246,177,23)"/><text x="40.1309%" y="111.50"></text></g><g><title>type_collecting (1,912,750 samples, 0.99%)</title><rect x="39.3411%" y="149" width="0.9911%" height="15" fill="rgb(230,62,27)"/><text x="39.5911%" y="159.50"></text></g><g><title>collect_mod_item_types (1,902,030 samples, 0.99%)</title><rect x="39.3466%" y="133" width="0.9855%" height="15" fill="rgb(216,154,8)"/><text x="39.5966%" y="143.50"></text></g><g><title>evaluate_obligation (483,912 samples, 0.25%)</title><rect x="41.2480%" y="117" width="0.2507%" height="15" fill="rgb(244,35,45)"/><text x="41.4980%" y="127.50"></text></g><g><title>implied_outlives_bounds (244,965 samples, 0.13%)</title><rect x="41.4987%" y="117" width="0.1269%" height="15" fill="rgb(251,115,12)"/><text x="41.7487%" y="127.50"></text></g><g><title>object_safety_violations (438,664 samples, 0.23%)</title><rect x="41.6256%" y="117" width="0.2273%" height="15" fill="rgb(240,54,50)"/><text x="41.8756%" y="127.50"></text></g><g><title>param_env (255,422 samples, 0.13%)</title><rect x="41.8529%" y="117" width="0.1323%" height="15" fill="rgb(233,84,52)"/><text x="42.1029%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,274,663 samples, 1.70%)</title><rect x="40.4276%" y="133" width="1.6968%" height="15" fill="rgb(207,117,47)"/><text x="40.6776%" y="143.50"></text></g><g><title>region_scope_tree (257,724 samples, 0.13%)</title><rect x="41.9908%" y="117" width="0.1335%" height="15" fill="rgb(249,43,39)"/><text x="42.2408%" y="127.50"></text></g><g><title>evaluate_obligation (305,684 samples, 0.16%)</title><rect x="42.8796%" y="117" width="0.1584%" height="15" fill="rgb(209,38,44)"/><text x="43.1296%" y="127.50"></text></g><g><title>param_env (300,143 samples, 0.16%)</title><rect x="43.0901%" y="117" width="0.1555%" height="15" fill="rgb(236,212,23)"/><text x="43.3401%" y="127.50"></text></g><g><title>check_item_well_formed (2,410,946 samples, 1.25%)</title><rect x="42.1244%" y="133" width="1.2492%" height="15" fill="rgb(242,79,21)"/><text x="42.3744%" y="143.50"></text></g><g><title>evaluate_obligation (195,452 samples, 0.10%)</title><rect x="43.4965%" y="117" width="0.1013%" height="15" fill="rgb(211,96,35)"/><text x="43.7465%" y="127.50"></text></g><g><title>analysis (58,800,145 samples, 30.47%)</title><rect x="13.1803%" y="181" width="30.4671%" height="15" fill="rgb(253,215,40)"/><text x="13.4303%" y="191.50">analysis</text></g><g><title>type_check_crate (38,669,691 samples, 20.04%)</title><rect x="23.6108%" y="165" width="20.0366%" height="15" fill="rgb(211,81,21)"/><text x="23.8608%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,392,948 samples, 3.31%)</title><rect x="40.3349%" y="149" width="3.3125%" height="15" fill="rgb(208,190,38)"/><text x="40.5849%" y="159.50">wf_..</text></g><g><title>check_trait_item_well_formed (528,385 samples, 0.27%)</title><rect x="43.3736%" y="133" width="0.2738%" height="15" fill="rgb(235,213,38)"/><text x="43.6236%" y="143.50"></text></g><g><title>is_freeze_raw (232,191 samples, 0.12%)</title><rect x="46.2465%" y="133" width="0.1203%" height="15" fill="rgb(237,122,38)"/><text x="46.4965%" y="143.50"></text></g><g><title>evaluate_obligation (197,621 samples, 0.10%)</title><rect x="46.2644%" y="117" width="0.1024%" height="15" fill="rgb(244,218,35)"/><text x="46.5144%" y="127.50"></text></g><g><title>is_unpin_raw (417,044 samples, 0.22%)</title><rect x="46.3668%" y="133" width="0.2161%" height="15" fill="rgb(240,68,47)"/><text x="46.6168%" y="143.50"></text></g><g><title>evaluate_obligation (376,464 samples, 0.20%)</title><rect x="46.3878%" y="117" width="0.1951%" height="15" fill="rgb(210,16,53)"/><text x="46.6378%" y="127.50"></text></g><g><title>layout_of (237,283 samples, 0.12%)</title><rect x="46.5829%" y="133" width="0.1229%" height="15" fill="rgb(235,124,12)"/><text x="46.8329%" y="143.50"></text></g><g><title>param_env (265,024 samples, 0.14%)</title><rect x="46.7058%" y="133" width="0.1373%" height="15" fill="rgb(224,169,11)"/><text x="46.9558%" y="143.50"></text></g><g><title>fn_abi_of_instance (1,580,260 samples, 0.82%)</title><rect x="46.0277%" y="149" width="0.8188%" height="15" fill="rgb(250,166,2)"/><text x="46.2777%" y="159.50"></text></g><g><title>codegen_module (5,242,876 samples, 2.72%)</title><rect x="44.2976%" y="165" width="2.7166%" height="15" fill="rgb(242,216,29)"/><text x="44.5476%" y="175.50">co..</text></g><g><title>optimized_mir (1,102,635 samples, 0.57%)</title><rect x="47.3072%" y="117" width="0.5713%" height="15" fill="rgb(230,116,27)"/><text x="47.5572%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (394,695 samples, 0.20%)</title><rect x="47.6740%" y="101" width="0.2045%" height="15" fill="rgb(228,99,48)"/><text x="47.9240%" y="111.50"></text></g><g><title>resolve_instance (195,651 samples, 0.10%)</title><rect x="47.8786%" y="117" width="0.1014%" height="15" fill="rgb(253,11,6)"/><text x="48.1286%" y="127.50"></text></g><g><title>eval_to_const_value_raw (201,392 samples, 0.10%)</title><rect x="47.9883%" y="101" width="0.1044%" height="15" fill="rgb(247,143,39)"/><text x="48.2383%" y="111.50"></text></g><g><title>eval_to_const_value_raw (196,642 samples, 0.10%)</title><rect x="47.9908%" y="85" width="0.1019%" height="15" fill="rgb(236,97,10)"/><text x="48.2408%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (222,262 samples, 0.12%)</title><rect x="47.9799%" y="117" width="0.1152%" height="15" fill="rgb(233,208,19)"/><text x="48.2299%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (2,145,643 samples, 1.11%)</title><rect x="47.0274%" y="133" width="1.1118%" height="15" fill="rgb(216,164,2)"/><text x="47.2774%" y="143.50"></text></g><g><title>monomorphization_collector (2,185,034 samples, 1.13%)</title><rect x="47.0265%" y="149" width="1.1322%" height="15" fill="rgb(220,129,5)"/><text x="47.2765%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (2,398,646 samples, 1.24%)</title><rect x="47.0155%" y="165" width="1.2428%" height="15" fill="rgb(242,17,10)"/><text x="47.2655%" y="175.50"></text></g><g><title>codegen_crate (8,978,805 samples, 4.65%)</title><rect x="43.6501%" y="181" width="4.6523%" height="15" fill="rgb(242,107,0)"/><text x="43.9001%" y="191.50">codeg..</text></g><g><title>codegen_module_optimize (19,932,062 samples, 10.33%)</title><rect x="48.3025%" y="181" width="10.3277%" height="15" fill="rgb(251,28,31)"/><text x="48.5525%" y="191.50">codegen_module_..</text></g><g><title>LLVM_module_optimize (15,597,437 samples, 8.08%)</title><rect x="50.5484%" y="165" width="8.0818%" height="15" fill="rgb(233,223,10)"/><text x="50.7984%" y="175.50">LLVM_module..</text></g><g><title>LLVM_lto_optimize (8,500,710 samples, 4.40%)</title><rect x="59.6137%" y="165" width="4.4046%" height="15" fill="rgb(215,21,27)"/><text x="59.8637%" y="175.50">LLVM_..</text></g><g><title>LLVM_module_codegen (26,340,711 samples, 13.65%)</title><rect x="64.0183%" y="165" width="13.6483%" height="15" fill="rgb(232,23,21)"/><text x="64.2683%" y="175.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (25,927,507 samples, 13.43%)</title><rect x="64.2324%" y="149" width="13.4342%" height="15" fill="rgb(244,5,23)"/><text x="64.4824%" y="159.50">LLVM_module_codegen_..</text></g><g><title>codegen_module_perform_lto (36,920,144 samples, 19.13%)</title><rect x="58.6302%" y="181" width="19.1300%" height="15" fill="rgb(226,81,46)"/><text x="58.8802%" y="191.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,396,434 samples, 0.72%)</title><rect x="81.9624%" y="133" width="0.7236%" height="15" fill="rgb(247,70,30)"/><text x="82.2124%" y="143.50"></text></g><g><title>metadata_register_crate (478,744 samples, 0.25%)</title><rect x="82.4379%" y="117" width="0.2481%" height="15" fill="rgb(212,68,19)"/><text x="82.6879%" y="127.50"></text></g><g><title>macro_expand_crate (9,341,970 samples, 4.84%)</title><rect x="77.9091%" y="165" width="4.8405%" height="15" fill="rgb(240,187,13)"/><text x="78.1591%" y="175.50">macro_..</text></g><g><title>expand_crate (9,333,560 samples, 4.84%)</title><rect x="77.9134%" y="149" width="4.8361%" height="15" fill="rgb(223,113,26)"/><text x="78.1634%" y="159.50">expand..</text></g><g><title>late_resolve_crate (1,782,579 samples, 0.92%)</title><rect x="82.8189%" y="149" width="0.9236%" height="15" fill="rgb(206,192,2)"/><text x="83.0689%" y="159.50"></text></g><g><title>metadata_register_crate (269,753 samples, 0.14%)</title><rect x="83.6027%" y="133" width="0.1398%" height="15" fill="rgb(241,108,4)"/><text x="83.8527%" y="143.50"></text></g><g><title>configure_and_expand (11,641,944 samples, 6.03%)</title><rect x="77.7602%" y="181" width="6.0322%" height="15" fill="rgb(247,173,49)"/><text x="78.0102%" y="191.50">configur..</text></g><g><title>resolve_crate (1,976,691 samples, 1.02%)</title><rect x="82.7682%" y="165" width="1.0242%" height="15" fill="rgb(224,114,35)"/><text x="83.0182%" y="175.50"></text></g><g><title>early_lint_checks (260,373 samples, 0.13%)</title><rect x="83.8619%" y="181" width="0.1349%" height="15" fill="rgb(245,159,27)"/><text x="84.1119%" y="191.50"></text></g><g><title>free_global_ctxt (3,770,340 samples, 1.95%)</title><rect x="83.9968%" y="181" width="1.9536%" height="15" fill="rgb(245,172,44)"/><text x="84.2468%" y="191.50">f..</text></g><g><title>layout_of (503,252 samples, 0.26%)</title><rect x="87.6476%" y="149" width="0.2608%" height="15" fill="rgb(236,23,11)"/><text x="87.8976%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,008,593 samples, 1.04%)</title><rect x="87.9084%" y="149" width="1.0407%" height="15" fill="rgb(205,117,38)"/><text x="88.1584%" y="159.50"></text></g><g><title>optimized_mir (4,291,208 samples, 2.22%)</title><rect x="86.7348%" y="165" width="2.2235%" height="15" fill="rgb(237,72,25)"/><text x="86.9848%" y="175.50">o..</text></g><g><title>generate_crate_metadata (5,856,072 samples, 3.03%)</title><rect x="85.9504%" y="181" width="3.0343%" height="15" fill="rgb(244,70,9)"/><text x="86.2004%" y="191.50">gen..</text></g><g><title>hir_lowering (2,033,032 samples, 1.05%)</title><rect x="88.9847%" y="181" width="1.0534%" height="15" fill="rgb(217,125,39)"/><text x="89.2347%" y="191.50"></text></g><g><title>finish_ongoing_codegen (16,496,695 samples, 8.55%)</title><rect x="90.0453%" y="165" width="8.5477%" height="15" fill="rgb(235,36,10)"/><text x="90.2953%" y="175.50">finish_ongoi..</text></g><g><title>link_crate (948,590 samples, 0.49%)</title><rect x="98.5930%" y="165" width="0.4915%" height="15" fill="rgb(251,123,47)"/><text x="98.8430%" y="175.50"></text></g><g><title>link_binary (933,340 samples, 0.48%)</title><rect x="98.6009%" y="149" width="0.4836%" height="15" fill="rgb(221,13,13)"/><text x="98.8509%" y="159.50"></text></g><g><title>link_rlib (589,136 samples, 0.31%)</title><rect x="98.7793%" y="133" width="0.3053%" height="15" fill="rgb(238,131,9)"/><text x="99.0293%" y="143.50"></text></g><g><title>link (17,467,905 samples, 9.05%)</title><rect x="90.0381%" y="181" width="9.0509%" height="15" fill="rgb(211,50,8)"/><text x="90.2881%" y="191.50">link</text></g><g><title>parse_crate (259,182 samples, 0.13%)</title><rect x="99.0890%" y="181" width="0.1343%" height="15" fill="rgb(245,182,24)"/><text x="99.3390%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (867,239 samples, 0.45%)</title><rect x="99.3223%" y="181" width="0.4494%" height="15" fill="rgb(242,14,37)"/><text x="99.5723%" y="191.50"></text></g><g><title>all (192,995,741 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(246,228,12)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (192,995,741 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(213,55,15)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (364,574 samples, 0.19%)</title><rect x="99.8111%" y="181" width="0.1889%" height="15" fill="rgb(209,9,3)"/><text x="100.0611%" y="191.50"></text></g></svg></svg>