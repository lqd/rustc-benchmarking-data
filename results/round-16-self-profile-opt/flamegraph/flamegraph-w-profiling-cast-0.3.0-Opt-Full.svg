<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (22,959,335 samples, 8.71%)</title><rect x="0.3960%" y="181" width="8.7142%" height="15" fill="rgb(227,0,7)"/><text x="0.6460%" y="191.50">LLVM_passes</text></g><g><title>is_copy_raw (328,382 samples, 0.12%)</title><rect x="19.9160%" y="69" width="0.1246%" height="15" fill="rgb(217,0,24)"/><text x="20.1660%" y="79.50"></text></g><g><title>evaluate_obligation (280,641 samples, 0.11%)</title><rect x="19.9341%" y="53" width="0.1065%" height="15" fill="rgb(221,193,54)"/><text x="20.1841%" y="63.50"></text></g><g><title>thir_body (2,680,428 samples, 1.02%)</title><rect x="20.1960%" y="69" width="1.0174%" height="15" fill="rgb(248,212,6)"/><text x="20.4460%" y="79.50"></text></g><g><title>mir_const (12,732,616 samples, 4.83%)</title><rect x="16.3967%" y="117" width="4.8327%" height="15" fill="rgb(208,68,35)"/><text x="16.6467%" y="127.50">mir_co..</text></g><g><title>unsafety_check_result (10,720,644 samples, 4.07%)</title><rect x="17.1604%" y="101" width="4.0690%" height="15" fill="rgb(232,128,0)"/><text x="17.4104%" y="111.50">unsa..</text></g><g><title>mir_built (9,801,165 samples, 3.72%)</title><rect x="17.5094%" y="85" width="3.7200%" height="15" fill="rgb(207,160,47)"/><text x="17.7594%" y="95.50">mir_..</text></g><g><title>mir_promoted (14,547,021 samples, 5.52%)</title><rect x="15.7573%" y="133" width="5.5213%" height="15" fill="rgb(228,23,34)"/><text x="16.0073%" y="143.50">mir_pro..</text></g><g><title>type_op_normalize_ty (1,826,309 samples, 0.69%)</title><rect x="21.3811%" y="133" width="0.6932%" height="15" fill="rgb(218,30,26)"/><text x="21.6311%" y="143.50"></text></g><g><title>normalize_projection_ty (1,258,303 samples, 0.48%)</title><rect x="21.5967%" y="117" width="0.4776%" height="15" fill="rgb(220,122,19)"/><text x="21.8467%" y="127.50"></text></g><g><title>type_op_prove_predicate (473,315 samples, 0.18%)</title><rect x="22.0743%" y="133" width="0.1796%" height="15" fill="rgb(250,228,42)"/><text x="22.3243%" y="143.50"></text></g><g><title>MIR_borrow_checking (33,962,608 samples, 12.89%)</title><rect x="9.3645%" y="165" width="12.8905%" height="15" fill="rgb(240,193,28)"/><text x="9.6145%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (33,620,446 samples, 12.76%)</title><rect x="9.4944%" y="149" width="12.7606%" height="15" fill="rgb(216,20,37)"/><text x="9.7444%" y="159.50">mir_borrowck</text></g><g><title>hir_module_items (544,397 samples, 0.21%)</title><rect x="22.2880%" y="165" width="0.2066%" height="15" fill="rgb(206,188,39)"/><text x="22.5380%" y="175.50"></text></g><g><title>should_inherit_track_caller (325,483 samples, 0.12%)</title><rect x="22.8480%" y="117" width="0.1235%" height="15" fill="rgb(217,207,13)"/><text x="23.0980%" y="127.50"></text></g><g><title>codegen_fn_attrs (713,889 samples, 0.27%)</title><rect x="22.7092%" y="133" width="0.2710%" height="15" fill="rgb(231,73,38)"/><text x="22.9592%" y="143.50"></text></g><g><title>check_mod_attrs (1,253,624 samples, 0.48%)</title><rect x="22.5044%" y="149" width="0.4758%" height="15" fill="rgb(225,20,46)"/><text x="22.7544%" y="159.50"></text></g><g><title>check_mod_const_bodies (278,604 samples, 0.11%)</title><rect x="22.9802%" y="149" width="0.1057%" height="15" fill="rgb(210,31,41)"/><text x="23.2302%" y="159.50"></text></g><g><title>lint_levels (269,143 samples, 0.10%)</title><rect x="23.4070%" y="133" width="0.1022%" height="15" fill="rgb(221,200,47)"/><text x="23.6570%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (1,278,404 samples, 0.49%)</title><rect x="23.1478%" y="149" width="0.4852%" height="15" fill="rgb(226,26,5)"/><text x="23.3978%" y="159.50"></text></g><g><title>misc_checking_1 (3,120,585 samples, 1.18%)</title><rect x="22.4949%" y="165" width="1.1844%" height="15" fill="rgb(249,33,26)"/><text x="22.7449%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (825,579 samples, 0.31%)</title><rect x="23.6799%" y="149" width="0.3133%" height="15" fill="rgb(235,183,28)"/><text x="23.9299%" y="159.50"></text></g><g><title>check_mod_liveness (639,126 samples, 0.24%)</title><rect x="23.7506%" y="133" width="0.2426%" height="15" fill="rgb(221,5,38)"/><text x="24.0006%" y="143.50"></text></g><g><title>misc_checking_2 (1,542,337 samples, 0.59%)</title><rect x="23.6793%" y="165" width="0.5854%" height="15" fill="rgb(247,18,42)"/><text x="23.9293%" y="175.50"></text></g><g><title>match_checking (715,248 samples, 0.27%)</title><rect x="23.9932%" y="149" width="0.2715%" height="15" fill="rgb(241,131,45)"/><text x="24.2432%" y="159.50"></text></g><g><title>check_match (642,187 samples, 0.24%)</title><rect x="24.0209%" y="133" width="0.2437%" height="15" fill="rgb(249,31,29)"/><text x="24.2709%" y="143.50"></text></g><g><title>check_private_in_public (548,937 samples, 0.21%)</title><rect x="24.2688%" y="149" width="0.2083%" height="15" fill="rgb(225,111,53)"/><text x="24.5188%" y="159.50"></text></g><g><title>death_checking (1,019,711 samples, 0.39%)</title><rect x="24.4771%" y="149" width="0.3870%" height="15" fill="rgb(238,160,17)"/><text x="24.7271%" y="159.50"></text></g><g><title>param_env (837,820 samples, 0.32%)</title><rect x="25.2418%" y="117" width="0.3180%" height="15" fill="rgb(214,148,48)"/><text x="25.4918%" y="127.50"></text></g><g><title>predicates_of (404,486 samples, 0.15%)</title><rect x="25.4063%" y="101" width="0.1535%" height="15" fill="rgb(232,36,49)"/><text x="25.6563%" y="111.50"></text></g><g><title>predicates_defined_on (319,695 samples, 0.12%)</title><rect x="25.4385%" y="85" width="0.1213%" height="15" fill="rgb(209,103,24)"/><text x="25.6885%" y="95.50"></text></g><g><title>crate_lints (2,173,004 samples, 0.82%)</title><rect x="24.8648%" y="133" width="0.8248%" height="15" fill="rgb(229,88,8)"/><text x="25.1148%" y="143.50"></text></g><g><title>type_of (338,895 samples, 0.13%)</title><rect x="25.5609%" y="117" width="0.1286%" height="15" fill="rgb(213,181,19)"/><text x="25.8109%" y="127.50"></text></g><g><title>lint_checking (3,015,684 samples, 1.14%)</title><rect x="24.8641%" y="149" width="1.1446%" height="15" fill="rgb(254,191,54)"/><text x="25.1141%" y="159.50"></text></g><g><title>module_lints (840,909 samples, 0.32%)</title><rect x="25.6896%" y="133" width="0.3192%" height="15" fill="rgb(241,83,37)"/><text x="25.9396%" y="143.50"></text></g><g><title>lint_mod (836,859 samples, 0.32%)</title><rect x="25.6911%" y="117" width="0.3176%" height="15" fill="rgb(233,36,39)"/><text x="25.9411%" y="127.50"></text></g><g><title>privacy_access_levels (783,168 samples, 0.30%)</title><rect x="26.0087%" y="149" width="0.2973%" height="15" fill="rgb(226,3,54)"/><text x="26.2587%" y="159.50"></text></g><g><title>privacy_checking_modules (1,487,486 samples, 0.56%)</title><rect x="26.3060%" y="149" width="0.5646%" height="15" fill="rgb(245,192,40)"/><text x="26.5560%" y="159.50"></text></g><g><title>check_mod_privacy (1,485,126 samples, 0.56%)</title><rect x="26.3069%" y="133" width="0.5637%" height="15" fill="rgb(238,167,29)"/><text x="26.5569%" y="143.50"></text></g><g><title>misc_checking_3 (6,894,476 samples, 2.62%)</title><rect x="24.2647%" y="165" width="2.6168%" height="15" fill="rgb(232,182,51)"/><text x="24.5147%" y="175.50">mi..</text></g><g><title>impl_parent (962,641 samples, 0.37%)</title><rect x="27.4886%" y="101" width="0.3654%" height="15" fill="rgb(231,60,39)"/><text x="27.7386%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (443,265 samples, 0.17%)</title><rect x="27.6857%" y="85" width="0.1682%" height="15" fill="rgb(208,69,12)"/><text x="27.9357%" y="95.50"></text></g><g><title>impl_trait_ref (1,412,696 samples, 0.54%)</title><rect x="27.8540%" y="101" width="0.5362%" height="15" fill="rgb(235,93,37)"/><text x="28.1040%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,115,624 samples, 0.42%)</title><rect x="27.9667%" y="85" width="0.4234%" height="15" fill="rgb(213,116,39)"/><text x="28.2167%" y="95.50"></text></g><g><title>coherent_trait (4,066,774 samples, 1.54%)</title><rect x="26.9471%" y="133" width="1.5435%" height="15" fill="rgb(222,207,29)"/><text x="27.1971%" y="143.50"></text></g><g><title>specialization_graph_of (3,894,542 samples, 1.48%)</title><rect x="27.0125%" y="117" width="1.4782%" height="15" fill="rgb(206,96,30)"/><text x="27.2625%" y="127.50"></text></g><g><title>coherence_checking (4,189,407 samples, 1.59%)</title><rect x="26.9407%" y="149" width="1.5901%" height="15" fill="rgb(218,138,4)"/><text x="27.1907%" y="159.50"></text></g><g><title>dropck_outlives (479,916 samples, 0.18%)</title><rect x="41.0171%" y="101" width="0.1822%" height="15" fill="rgb(250,191,14)"/><text x="41.2671%" y="111.50"></text></g><g><title>evaluate_obligation (886,062 samples, 0.34%)</title><rect x="41.1993%" y="101" width="0.3363%" height="15" fill="rgb(239,60,40)"/><text x="41.4493%" y="111.50"></text></g><g><title>item_bodies_checking (34,983,029 samples, 13.28%)</title><rect x="28.5804%" y="149" width="13.2778%" height="15" fill="rgb(206,27,48)"/><text x="28.8304%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (34,979,489 samples, 13.28%)</title><rect x="28.5817%" y="133" width="13.2765%" height="15" fill="rgb(225,35,8)"/><text x="28.8317%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (34,751,587 samples, 13.19%)</title><rect x="28.6682%" y="117" width="13.1900%" height="15" fill="rgb(250,213,24)"/><text x="28.9182%" y="127.50">typeck</text></g><g><title>item_types_checking (6,085,367 samples, 2.31%)</title><rect x="41.8582%" y="149" width="2.3097%" height="15" fill="rgb(247,123,22)"/><text x="42.1082%" y="159.50">i..</text></g><g><title>check_mod_item_types (6,081,167 samples, 2.31%)</title><rect x="41.8598%" y="133" width="2.3081%" height="15" fill="rgb(231,138,38)"/><text x="42.1098%" y="143.50">c..</text></g><g><title>late_bound_vars_map (928,116 samples, 0.35%)</title><rect x="44.7131%" y="101" width="0.3523%" height="15" fill="rgb(231,145,46)"/><text x="44.9631%" y="111.50"></text></g><g><title>resolve_lifetimes (830,296 samples, 0.32%)</title><rect x="44.7502%" y="85" width="0.3151%" height="15" fill="rgb(251,118,11)"/><text x="45.0002%" y="95.50"></text></g><g><title>fn_sig (1,518,460 samples, 0.58%)</title><rect x="44.5040%" y="117" width="0.5763%" height="15" fill="rgb(217,147,25)"/><text x="44.7540%" y="127.50"></text></g><g><title>generics_of (416,563 samples, 0.16%)</title><rect x="45.0803%" y="117" width="0.1581%" height="15" fill="rgb(247,81,37)"/><text x="45.3303%" y="127.50"></text></g><g><title>explicit_predicates_of (464,907 samples, 0.18%)</title><rect x="45.5450%" y="85" width="0.1765%" height="15" fill="rgb(209,12,38)"/><text x="45.7950%" y="95.50"></text></g><g><title>predicates_of (1,122,655 samples, 0.43%)</title><rect x="45.3286%" y="117" width="0.4261%" height="15" fill="rgb(227,1,9)"/><text x="45.5786%" y="127.50"></text></g><g><title>predicates_defined_on (907,923 samples, 0.34%)</title><rect x="45.4101%" y="101" width="0.3446%" height="15" fill="rgb(248,47,43)"/><text x="45.6601%" y="111.50"></text></g><g><title>type_collecting (4,543,590 samples, 1.72%)</title><rect x="44.1714%" y="149" width="1.7245%" height="15" fill="rgb(221,10,30)"/><text x="44.4214%" y="159.50"></text></g><g><title>collect_mod_item_types (4,534,650 samples, 1.72%)</title><rect x="44.1748%" y="133" width="1.7211%" height="15" fill="rgb(210,229,1)"/><text x="44.4248%" y="143.50"></text></g><g><title>type_of (345,525 samples, 0.13%)</title><rect x="45.7648%" y="117" width="0.1311%" height="15" fill="rgb(222,148,37)"/><text x="46.0148%" y="127.50"></text></g><g><title>param_env (1,260,883 samples, 0.48%)</title><rect x="47.9647%" y="117" width="0.4786%" height="15" fill="rgb(234,67,33)"/><text x="48.2147%" y="127.50"></text></g><g><title>check_impl_item_well_formed (7,291,036 samples, 2.77%)</title><rect x="46.1335%" y="133" width="2.7673%" height="15" fill="rgb(247,98,35)"/><text x="46.3835%" y="143.50">ch..</text></g><g><title>region_scope_tree (1,183,326 samples, 0.45%)</title><rect x="48.4517%" y="117" width="0.4491%" height="15" fill="rgb(247,138,52)"/><text x="48.7017%" y="127.50"></text></g><g><title>evaluate_obligation (1,657,625 samples, 0.63%)</title><rect x="50.0819%" y="117" width="0.6292%" height="15" fill="rgb(213,79,30)"/><text x="50.3319%" y="127.50"></text></g><g><title>param_env (687,188 samples, 0.26%)</title><rect x="50.7913%" y="117" width="0.2608%" height="15" fill="rgb(246,177,23)"/><text x="51.0413%" y="127.50"></text></g><g><title>check_item_well_formed (5,871,273 samples, 2.23%)</title><rect x="48.9008%" y="133" width="2.2284%" height="15" fill="rgb(230,62,27)"/><text x="49.1508%" y="143.50">c..</text></g><g><title>analysis (110,791,651 samples, 42.05%)</title><rect x="9.1103%" y="181" width="42.0510%" height="15" fill="rgb(216,154,8)"/><text x="9.3603%" y="191.50">analysis</text></g><g><title>type_check_crate (63,969,841 samples, 24.28%)</title><rect x="26.8815%" y="165" width="24.2798%" height="15" fill="rgb(244,35,45)"/><text x="27.1315%" y="175.50">type_check_crate</text></g><g><title>wf_checking (13,857,854 samples, 5.26%)</title><rect x="45.9015%" y="149" width="5.2598%" height="15" fill="rgb(251,115,12)"/><text x="46.1515%" y="159.50">wf_che..</text></g><g><title>fn_abi_of_instance (598,328 samples, 0.23%)</title><rect x="51.8885%" y="149" width="0.2271%" height="15" fill="rgb(240,54,50)"/><text x="52.1385%" y="159.50"></text></g><g><title>codegen_module (2,110,803 samples, 0.80%)</title><rect x="51.3740%" y="165" width="0.8012%" height="15" fill="rgb(233,84,52)"/><text x="51.6240%" y="175.50"></text></g><g><title>layout_of (282,133 samples, 0.11%)</title><rect x="52.3784%" y="69" width="0.1071%" height="15" fill="rgb(207,117,47)"/><text x="52.6284%" y="79.50"></text></g><g><title>layout_of (337,433 samples, 0.13%)</title><rect x="52.3646%" y="85" width="0.1281%" height="15" fill="rgb(249,43,39)"/><text x="52.6146%" y="95.50"></text></g><g><title>layout_of (426,443 samples, 0.16%)</title><rect x="52.3369%" y="101" width="0.1619%" height="15" fill="rgb(209,38,44)"/><text x="52.5869%" y="111.50"></text></g><g><title>optimized_mir (1,220,273 samples, 0.46%)</title><rect x="52.2389%" y="117" width="0.4632%" height="15" fill="rgb(236,212,23)"/><text x="52.4889%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (1,463,226 samples, 0.56%)</title><rect x="52.1869%" y="133" width="0.5554%" height="15" fill="rgb(242,79,21)"/><text x="52.4369%" y="143.50"></text></g><g><title>monomorphization_collector (1,573,517 samples, 0.60%)</title><rect x="52.1860%" y="149" width="0.5972%" height="15" fill="rgb(211,96,35)"/><text x="52.4360%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (1,726,899 samples, 0.66%)</title><rect x="52.1754%" y="165" width="0.6554%" height="15" fill="rgb(253,215,40)"/><text x="52.4254%" y="175.50"></text></g><g><title>codegen_crate (4,400,589 samples, 1.67%)</title><rect x="51.1659%" y="181" width="1.6702%" height="15" fill="rgb(211,81,21)"/><text x="51.4159%" y="191.50"></text></g><g><title>codegen_module_optimize (13,508,670 samples, 5.13%)</title><rect x="52.8361%" y="181" width="5.1272%" height="15" fill="rgb(208,190,38)"/><text x="53.0861%" y="191.50">codege..</text></g><g><title>LLVM_module_optimize (11,735,631 samples, 4.45%)</title><rect x="53.5091%" y="165" width="4.4543%" height="15" fill="rgb(235,213,38)"/><text x="53.7591%" y="175.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (5,553,182 samples, 2.11%)</title><rect x="58.4071%" y="165" width="2.1077%" height="15" fill="rgb(237,122,38)"/><text x="58.6571%" y="175.50">L..</text></g><g><title>LLVM_module_codegen (13,486,509 samples, 5.12%)</title><rect x="60.5148%" y="165" width="5.1188%" height="15" fill="rgb(244,218,35)"/><text x="60.7648%" y="175.50">LLVM_m..</text></g><g><title>LLVM_module_codegen_emit_obj (13,258,027 samples, 5.03%)</title><rect x="60.6015%" y="149" width="5.0321%" height="15" fill="rgb(240,68,47)"/><text x="60.8515%" y="159.50">LLVM_m..</text></g><g><title>LLVM_thin_lto_import (331,424 samples, 0.13%)</title><rect x="65.6336%" y="165" width="0.1258%" height="15" fill="rgb(210,16,53)"/><text x="65.8836%" y="175.50"></text></g><g><title>codegen_module_perform_lto (20,631,830 samples, 7.83%)</title><rect x="57.9634%" y="181" width="7.8308%" height="15" fill="rgb(235,124,12)"/><text x="58.2134%" y="191.50">codegen_mod..</text></g><g><title>macro_expand_crate (22,513,351 samples, 8.54%)</title><rect x="66.0380%" y="165" width="8.5449%" height="15" fill="rgb(224,169,11)"/><text x="66.2880%" y="175.50">macro_expand..</text></g><g><title>expand_crate (22,492,341 samples, 8.54%)</title><rect x="66.0460%" y="149" width="8.5370%" height="15" fill="rgb(250,166,2)"/><text x="66.2960%" y="159.50">expand_crate</text></g><g><title>finalize_macro_resolutions (267,293 samples, 0.10%)</title><rect x="74.7504%" y="149" width="0.1015%" height="15" fill="rgb(242,216,29)"/><text x="75.0004%" y="159.50"></text></g><g><title>late_resolve_crate (4,563,541 samples, 1.73%)</title><rect x="74.8518%" y="149" width="1.7321%" height="15" fill="rgb(230,116,27)"/><text x="75.1018%" y="159.50"></text></g><g><title>configure_and_expand (28,630,419 samples, 10.87%)</title><rect x="65.7942%" y="181" width="10.8667%" height="15" fill="rgb(228,99,48)"/><text x="66.0442%" y="191.50">configure_and_ex..</text></g><g><title>resolve_crate (5,220,788 samples, 1.98%)</title><rect x="74.6793%" y="165" width="1.9816%" height="15" fill="rgb(253,11,6)"/><text x="74.9293%" y="175.50">r..</text></g><g><title>drop_ast (548,786 samples, 0.21%)</title><rect x="76.6608%" y="181" width="0.2083%" height="15" fill="rgb(247,143,39)"/><text x="76.9108%" y="191.50"></text></g><g><title>early_lint_checks (754,778 samples, 0.29%)</title><rect x="76.8750%" y="181" width="0.2865%" height="15" fill="rgb(236,97,10)"/><text x="77.1250%" y="191.50"></text></g><g><title>free_global_ctxt (2,875,102 samples, 1.09%)</title><rect x="77.1614%" y="181" width="1.0912%" height="15" fill="rgb(233,208,19)"/><text x="77.4114%" y="191.50"></text></g><g><title>reachable_non_generics (482,565 samples, 0.18%)</title><rect x="79.9134%" y="149" width="0.1832%" height="15" fill="rgb(216,164,2)"/><text x="80.1634%" y="159.50"></text></g><g><title>reachable_set (422,214 samples, 0.16%)</title><rect x="79.9363%" y="133" width="0.1603%" height="15" fill="rgb(220,129,5)"/><text x="80.1863%" y="143.50"></text></g><g><title>exported_symbols (564,376 samples, 0.21%)</title><rect x="79.9075%" y="165" width="0.2142%" height="15" fill="rgb(242,17,10)"/><text x="80.1575%" y="175.50"></text></g><g><title>layout_of (364,631 samples, 0.14%)</title><rect x="83.7601%" y="149" width="0.1384%" height="15" fill="rgb(242,107,0)"/><text x="84.0101%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,381,691 samples, 2.80%)</title><rect x="83.8985%" y="149" width="2.8017%" height="15" fill="rgb(251,28,31)"/><text x="84.1485%" y="159.50">mi..</text></g><g><title>eval_to_const_value_raw (695,376 samples, 0.26%)</title><rect x="87.0341%" y="69" width="0.2639%" height="15" fill="rgb(233,223,10)"/><text x="87.2841%" y="79.50"></text></g><g><title>eval_to_const_value_raw (676,286 samples, 0.26%)</title><rect x="87.0414%" y="53" width="0.2567%" height="15" fill="rgb(215,21,27)"/><text x="87.2914%" y="63.50"></text></g><g><title>eval_to_allocation_raw (637,755 samples, 0.24%)</title><rect x="87.0560%" y="37" width="0.2421%" height="15" fill="rgb(232,23,21)"/><text x="87.3060%" y="47.50"></text></g><g><title>eval_to_const_value_raw (1,551,456 samples, 0.59%)</title><rect x="86.7391%" y="133" width="0.5889%" height="15" fill="rgb(244,5,23)"/><text x="86.9891%" y="143.50"></text></g><g><title>eval_to_const_value_raw (1,531,846 samples, 0.58%)</title><rect x="86.7465%" y="117" width="0.5814%" height="15" fill="rgb(226,81,46)"/><text x="86.9965%" y="127.50"></text></g><g><title>eval_to_allocation_raw (1,497,096 samples, 0.57%)</title><rect x="86.7597%" y="101" width="0.5682%" height="15" fill="rgb(247,70,30)"/><text x="87.0097%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (838,669 samples, 0.32%)</title><rect x="87.0096%" y="85" width="0.3183%" height="15" fill="rgb(212,68,19)"/><text x="87.2596%" y="95.50"></text></g><g><title>optimized_mir (18,793,467 samples, 7.13%)</title><rect x="80.2191%" y="165" width="7.1331%" height="15" fill="rgb(240,187,13)"/><text x="80.4691%" y="175.50">optimized_..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (1,717,658 samples, 0.65%)</title><rect x="86.7002%" y="149" width="0.6519%" height="15" fill="rgb(223,113,26)"/><text x="86.9502%" y="159.50"></text></g><g><title>generate_crate_metadata (24,154,428 samples, 9.17%)</title><rect x="78.2527%" y="181" width="9.1678%" height="15" fill="rgb(206,192,2)"/><text x="78.5027%" y="191.50">generate_crat..</text></g><g><title>hir_lowering (8,702,217 samples, 3.30%)</title><rect x="87.4205%" y="181" width="3.3029%" height="15" fill="rgb(241,108,4)"/><text x="87.6705%" y="191.50">hir..</text></g><g><title>finish_ongoing_codegen (18,551,355 samples, 7.04%)</title><rect x="90.7298%" y="165" width="7.0412%" height="15" fill="rgb(247,173,49)"/><text x="90.9798%" y="175.50">finish_on..</text></g><g><title>link_crate (1,379,705 samples, 0.52%)</title><rect x="97.7709%" y="165" width="0.5237%" height="15" fill="rgb(224,114,35)"/><text x="98.0209%" y="175.50"></text></g><g><title>link_binary (1,161,583 samples, 0.44%)</title><rect x="97.8537%" y="149" width="0.4409%" height="15" fill="rgb(245,159,27)"/><text x="98.1037%" y="159.50"></text></g><g><title>link_rlib (893,830 samples, 0.34%)</title><rect x="97.9553%" y="133" width="0.3393%" height="15" fill="rgb(245,172,44)"/><text x="98.2053%" y="143.50"></text></g><g><title>link (19,956,072 samples, 7.57%)</title><rect x="90.7234%" y="181" width="7.5743%" height="15" fill="rgb(236,23,11)"/><text x="90.9734%" y="191.50">link</text></g><g><title>parse_crate (2,595,649 samples, 0.99%)</title><rect x="98.2978%" y="181" width="0.9852%" height="15" fill="rgb(205,117,38)"/><text x="98.5478%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,092,082 samples, 0.41%)</title><rect x="99.3581%" y="181" width="0.4145%" height="15" fill="rgb(237,72,25)"/><text x="99.6081%" y="191.50"></text></g><g><title>all (263,469,789 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(244,70,9)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (263,469,789 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(217,125,39)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (513,926 samples, 0.20%)</title><rect x="99.8049%" y="181" width="0.1951%" height="15" fill="rgb(235,36,10)"/><text x="100.0549%" y="191.50"></text></g></svg></svg>