<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,398,376 samples, 5.91%)</title><rect x="0.5480%" y="197" width="5.9121%" height="15" fill="rgb(227,0,7)"/><text x="0.7980%" y="207.50">LLVM_pas..</text></g><g><title>param_env (197,732 samples, 0.34%)</title><rect x="13.9021%" y="117" width="0.3440%" height="15" fill="rgb(217,0,24)"/><text x="14.1521%" y="127.50"></text></g><g><title>item_attrs (119,032 samples, 0.21%)</title><rect x="14.5504%" y="85" width="0.2071%" height="15" fill="rgb(221,193,54)"/><text x="14.8004%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (115,192 samples, 0.20%)</title><rect x="14.5571%" y="69" width="0.2004%" height="15" fill="rgb(248,212,6)"/><text x="14.8071%" y="79.50"></text></g><g><title>codegen_fn_attrs (161,152 samples, 0.28%)</title><rect x="14.4861%" y="101" width="0.2804%" height="15" fill="rgb(208,68,35)"/><text x="14.7361%" y="111.50"></text></g><g><title>is_copy_raw (73,450 samples, 0.13%)</title><rect x="16.2889%" y="53" width="0.1278%" height="15" fill="rgb(232,128,0)"/><text x="16.5389%" y="63.50"></text></g><g><title>adt_drop_tys (192,342 samples, 0.33%)</title><rect x="16.1758%" y="69" width="0.3346%" height="15" fill="rgb(207,160,47)"/><text x="16.4258%" y="79.50"></text></g><g><title>needs_drop_raw (647,727 samples, 1.13%)</title><rect x="16.1026%" y="85" width="1.1268%" height="15" fill="rgb(228,23,34)"/><text x="16.3526%" y="95.50"></text></g><g><title>is_copy_raw (413,264 samples, 0.72%)</title><rect x="16.5104%" y="69" width="0.7189%" height="15" fill="rgb(218,30,26)"/><text x="16.7604%" y="79.50"></text></g><g><title>evaluate_obligation (370,053 samples, 0.64%)</title><rect x="16.5856%" y="53" width="0.6438%" height="15" fill="rgb(220,122,19)"/><text x="16.8356%" y="63.50"></text></g><g><title>trait_impls_of (133,291 samples, 0.23%)</title><rect x="16.9975%" y="37" width="0.2319%" height="15" fill="rgb(250,228,42)"/><text x="17.2475%" y="47.50"></text></g><g><title>codegen_fulfill_obligation (93,601 samples, 0.16%)</title><rect x="17.4483%" y="69" width="0.1628%" height="15" fill="rgb(240,193,28)"/><text x="17.6983%" y="79.50"></text></g><g><title>resolve_instance (319,122 samples, 0.56%)</title><rect x="17.2294%" y="85" width="0.5552%" height="15" fill="rgb(216,20,37)"/><text x="17.4794%" y="95.50"></text></g><g><title>thir_body (234,695 samples, 0.41%)</title><rect x="17.7986%" y="85" width="0.4083%" height="15" fill="rgb(206,188,39)"/><text x="18.0486%" y="95.50"></text></g><g><title>mir_const (2,763,272 samples, 4.81%)</title><rect x="13.4087%" y="133" width="4.8072%" height="15" fill="rgb(217,207,13)"/><text x="13.6587%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (2,281,973 samples, 3.97%)</title><rect x="14.2461%" y="117" width="3.9699%" height="15" fill="rgb(231,73,38)"/><text x="14.4961%" y="127.50">unsa..</text></g><g><title>mir_built (1,982,839 samples, 3.45%)</title><rect x="14.7665%" y="101" width="3.4495%" height="15" fill="rgb(225,20,46)"/><text x="15.0165%" y="111.50">mir..</text></g><g><title>mir_promoted (3,197,664 samples, 5.56%)</title><rect x="12.9231%" y="149" width="5.5629%" height="15" fill="rgb(210,31,41)"/><text x="13.1731%" y="159.50">mir_pro..</text></g><g><title>mir_const_qualif (155,241 samples, 0.27%)</title><rect x="18.2160%" y="133" width="0.2701%" height="15" fill="rgb(221,200,47)"/><text x="18.4660%" y="143.50"></text></g><g><title>mir_const (111,521 samples, 0.19%)</title><rect x="18.2920%" y="117" width="0.1940%" height="15" fill="rgb(226,26,5)"/><text x="18.5420%" y="127.50"></text></g><g><title>unsafety_check_result (78,451 samples, 0.14%)</title><rect x="18.3496%" y="101" width="0.1365%" height="15" fill="rgb(249,33,26)"/><text x="18.5996%" y="111.50"></text></g><g><title>type_op_ascribe_user_type (209,243 samples, 0.36%)</title><rect x="18.4860%" y="149" width="0.3640%" height="15" fill="rgb(235,183,28)"/><text x="18.7360%" y="159.50"></text></g><g><title>type_op_prove_predicate (768,976 samples, 1.34%)</title><rect x="18.8501%" y="149" width="1.3378%" height="15" fill="rgb(221,5,38)"/><text x="19.1001%" y="159.50"></text></g><g><title>MIR_borrow_checking (7,788,183 samples, 13.55%)</title><rect x="6.6453%" y="181" width="13.5490%" height="15" fill="rgb(247,18,42)"/><text x="6.8953%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (7,747,862 samples, 13.48%)</title><rect x="6.7154%" y="165" width="13.4788%" height="15" fill="rgb(241,131,45)"/><text x="6.9654%" y="175.50">mir_borrowck</text></g><g><title>MIR_effect_checking (87,131 samples, 0.15%)</title><rect x="20.1943%" y="181" width="0.1516%" height="15" fill="rgb(249,31,29)"/><text x="20.4443%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (68,141 samples, 0.12%)</title><rect x="20.2273%" y="165" width="0.1185%" height="15" fill="rgb(225,111,53)"/><text x="20.4773%" y="175.50"></text></g><g><title>hir_module_items (79,461 samples, 0.14%)</title><rect x="20.3459%" y="181" width="0.1382%" height="15" fill="rgb(238,160,17)"/><text x="20.5959%" y="191.50"></text></g><g><title>item_attrs (84,331 samples, 0.15%)</title><rect x="20.9152%" y="101" width="0.1467%" height="15" fill="rgb(214,148,48)"/><text x="21.1652%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (81,551 samples, 0.14%)</title><rect x="20.9200%" y="85" width="0.1419%" height="15" fill="rgb(232,36,49)"/><text x="21.1700%" y="95.50"></text></g><g><title>codegen_fn_attrs (201,431 samples, 0.35%)</title><rect x="20.7899%" y="117" width="0.3504%" height="15" fill="rgb(209,103,24)"/><text x="21.0399%" y="127.50"></text></g><g><title>codegen_fn_attrs (290,142 samples, 0.50%)</title><rect x="20.6402%" y="149" width="0.5048%" height="15" fill="rgb(229,88,8)"/><text x="20.8902%" y="159.50"></text></g><g><title>should_inherit_track_caller (263,191 samples, 0.46%)</title><rect x="20.6871%" y="133" width="0.4579%" height="15" fill="rgb(213,181,19)"/><text x="20.9371%" y="143.50"></text></g><g><title>check_mod_attrs (364,364 samples, 0.63%)</title><rect x="20.5114%" y="165" width="0.6339%" height="15" fill="rgb(254,191,54)"/><text x="20.7614%" y="175.50"></text></g><g><title>lookup_deprecation_entry (68,231 samples, 0.12%)</title><rect x="21.4434%" y="149" width="0.1187%" height="15" fill="rgb(241,83,37)"/><text x="21.6934%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (236,222 samples, 0.41%)</title><rect x="21.2468%" y="165" width="0.4110%" height="15" fill="rgb(233,36,39)"/><text x="21.4968%" y="175.50"></text></g><g><title>misc_checking_1 (693,858 samples, 1.21%)</title><rect x="20.4847%" y="181" width="1.2071%" height="15" fill="rgb(226,3,54)"/><text x="20.7347%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (132,991 samples, 0.23%)</title><rect x="21.6938%" y="165" width="0.2314%" height="15" fill="rgb(245,192,40)"/><text x="21.9438%" y="175.50"></text></g><g><title>check_mod_liveness (106,991 samples, 0.19%)</title><rect x="21.7390%" y="149" width="0.1861%" height="15" fill="rgb(238,167,29)"/><text x="21.9890%" y="159.50"></text></g><g><title>misc_checking_2 (286,483 samples, 0.50%)</title><rect x="21.6918%" y="181" width="0.4984%" height="15" fill="rgb(232,182,51)"/><text x="21.9418%" y="191.50"></text></g><g><title>match_checking (152,382 samples, 0.27%)</title><rect x="21.9251%" y="165" width="0.2651%" height="15" fill="rgb(231,60,39)"/><text x="22.1751%" y="175.50"></text></g><g><title>check_match (141,411 samples, 0.25%)</title><rect x="21.9442%" y="149" width="0.2460%" height="15" fill="rgb(208,69,12)"/><text x="22.1942%" y="159.50"></text></g><g><title>check_private_in_public (74,461 samples, 0.13%)</title><rect x="22.2016%" y="165" width="0.1295%" height="15" fill="rgb(235,93,37)"/><text x="22.4516%" y="175.50"></text></g><g><title>death_checking (137,111 samples, 0.24%)</title><rect x="22.3311%" y="165" width="0.2385%" height="15" fill="rgb(213,116,39)"/><text x="22.5811%" y="175.50"></text></g><g><title>eval_to_const_value_raw (112,771 samples, 0.20%)</title><rect x="23.3583%" y="133" width="0.1962%" height="15" fill="rgb(222,207,29)"/><text x="23.6083%" y="143.50"></text></g><g><title>eval_to_const_value_raw (105,961 samples, 0.18%)</title><rect x="23.3701%" y="117" width="0.1843%" height="15" fill="rgb(206,96,30)"/><text x="23.6201%" y="127.50"></text></g><g><title>eval_to_allocation_raw (102,131 samples, 0.18%)</title><rect x="23.3768%" y="101" width="0.1777%" height="15" fill="rgb(218,138,4)"/><text x="23.6268%" y="111.50"></text></g><g><title>crate_lints (1,638,618 samples, 2.85%)</title><rect x="22.5720%" y="149" width="2.8507%" height="15" fill="rgb(250,191,14)"/><text x="22.8220%" y="159.50">cr..</text></g><g><title>type_of (1,017,639 samples, 1.77%)</title><rect x="23.6523%" y="133" width="1.7704%" height="15" fill="rgb(239,60,40)"/><text x="23.9023%" y="143.50">t..</text></g><g><title>metadata_decode_entry_type_of (782,958 samples, 1.36%)</title><rect x="24.0606%" y="117" width="1.3621%" height="15" fill="rgb(206,27,48)"/><text x="24.3106%" y="127.50"></text></g><g><title>lint_checking (1,728,039 samples, 3.01%)</title><rect x="22.5697%" y="165" width="3.0062%" height="15" fill="rgb(225,35,8)"/><text x="22.8197%" y="175.50">lin..</text></g><g><title>module_lints (88,061 samples, 0.15%)</title><rect x="25.4227%" y="149" width="0.1532%" height="15" fill="rgb(250,213,24)"/><text x="25.6727%" y="159.50"></text></g><g><title>lint_mod (85,801 samples, 0.15%)</title><rect x="25.4266%" y="133" width="0.1493%" height="15" fill="rgb(247,123,22)"/><text x="25.6766%" y="143.50"></text></g><g><title>privacy_access_levels (89,891 samples, 0.16%)</title><rect x="25.5759%" y="165" width="0.1564%" height="15" fill="rgb(231,138,38)"/><text x="25.8259%" y="175.50"></text></g><g><title>privacy_checking_modules (237,362 samples, 0.41%)</title><rect x="25.7323%" y="165" width="0.4129%" height="15" fill="rgb(231,145,46)"/><text x="25.9823%" y="175.50"></text></g><g><title>check_mod_privacy (235,972 samples, 0.41%)</title><rect x="25.7347%" y="149" width="0.4105%" height="15" fill="rgb(251,118,11)"/><text x="25.9847%" y="159.50"></text></g><g><title>misc_checking_3 (2,281,284 samples, 3.97%)</title><rect x="22.1902%" y="181" width="3.9687%" height="15" fill="rgb(217,147,25)"/><text x="22.4402%" y="191.50">misc..</text></g><g><title>impl_parent (1,064,466 samples, 1.85%)</title><rect x="29.1008%" y="117" width="1.8518%" height="15" fill="rgb(247,81,37)"/><text x="29.3508%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (685,019 samples, 1.19%)</title><rect x="29.7609%" y="101" width="1.1917%" height="15" fill="rgb(209,12,38)"/><text x="30.0109%" y="111.50"></text></g><g><title>impl_trait_ref (3,311,970 samples, 5.76%)</title><rect x="30.9526%" y="117" width="5.7618%" height="15" fill="rgb(227,1,9)"/><text x="31.2026%" y="127.50">impl_tr..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,929,936 samples, 5.10%)</title><rect x="31.6172%" y="101" width="5.0972%" height="15" fill="rgb(248,47,43)"/><text x="31.8672%" y="111.50">metada..</text></g><g><title>trait_impls_of (343,003 samples, 0.60%)</title><rect x="36.7446%" y="117" width="0.5967%" height="15" fill="rgb(221,10,30)"/><text x="36.9946%" y="127.50"></text></g><g><title>implementations_of_trait (98,731 samples, 0.17%)</title><rect x="37.1696%" y="101" width="0.1718%" height="15" fill="rgb(210,229,1)"/><text x="37.4196%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (68,200 samples, 0.12%)</title><rect x="37.2227%" y="85" width="0.1186%" height="15" fill="rgb(222,148,37)"/><text x="37.4727%" y="95.50"></text></g><g><title>coherent_trait (6,391,418 samples, 11.12%)</title><rect x="26.2234%" y="149" width="11.1191%" height="15" fill="rgb(234,67,33)"/><text x="26.4734%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (6,380,127 samples, 11.10%)</title><rect x="26.2430%" y="133" width="11.0994%" height="15" fill="rgb(247,98,35)"/><text x="26.4930%" y="143.50">specialization_g..</text></g><g><title>coherence_checking (6,441,369 samples, 11.21%)</title><rect x="26.2040%" y="165" width="11.2060%" height="15" fill="rgb(247,138,52)"/><text x="26.4540%" y="175.50">coherence_checki..</text></g><g><title>associated_item (163,422 samples, 0.28%)</title><rect x="48.2054%" y="101" width="0.2843%" height="15" fill="rgb(213,79,30)"/><text x="48.4554%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (125,522 samples, 0.22%)</title><rect x="48.2713%" y="85" width="0.2184%" height="15" fill="rgb(246,177,23)"/><text x="48.5213%" y="95.50"></text></g><g><title>associated_items (255,444 samples, 0.44%)</title><rect x="48.0687%" y="117" width="0.4444%" height="15" fill="rgb(230,62,27)"/><text x="48.3187%" y="127.50"></text></g><g><title>adt_def (85,411 samples, 0.15%)</title><rect x="48.9132%" y="85" width="0.1486%" height="15" fill="rgb(216,154,8)"/><text x="49.1632%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (84,831 samples, 0.15%)</title><rect x="48.9142%" y="69" width="0.1476%" height="15" fill="rgb(244,35,45)"/><text x="49.1642%" y="79.50"></text></g><g><title>item_attrs (65,941 samples, 0.11%)</title><rect x="48.9470%" y="53" width="0.1147%" height="15" fill="rgb(251,115,12)"/><text x="49.1970%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (65,391 samples, 0.11%)</title><rect x="48.9480%" y="37" width="0.1138%" height="15" fill="rgb(240,54,50)"/><text x="49.1980%" y="47.50"></text></g><g><title>adt_def (59,721 samples, 0.10%)</title><rect x="49.1035%" y="69" width="0.1039%" height="15" fill="rgb(233,84,52)"/><text x="49.3535%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (59,491 samples, 0.10%)</title><rect x="49.1039%" y="53" width="0.1035%" height="15" fill="rgb(207,117,47)"/><text x="49.3539%" y="63.50"></text></g><g><title>adt_dtorck_constraint (71,581 samples, 0.12%)</title><rect x="49.2662%" y="53" width="0.1245%" height="15" fill="rgb(249,43,39)"/><text x="49.5162%" y="63.50"></text></g><g><title>adt_dtorck_constraint (111,401 samples, 0.19%)</title><rect x="49.2130%" y="69" width="0.1938%" height="15" fill="rgb(209,38,44)"/><text x="49.4630%" y="79.50"></text></g><g><title>adt_dtorck_constraint (196,332 samples, 0.34%)</title><rect x="49.0845%" y="85" width="0.3416%" height="15" fill="rgb(236,212,23)"/><text x="49.3345%" y="95.50"></text></g><g><title>dropck_outlives (492,267 samples, 0.86%)</title><rect x="48.5971%" y="117" width="0.8564%" height="15" fill="rgb(242,79,21)"/><text x="48.8471%" y="127.50"></text></g><g><title>adt_dtorck_constraint (342,623 samples, 0.60%)</title><rect x="48.8574%" y="101" width="0.5961%" height="15" fill="rgb(211,96,35)"/><text x="49.1074%" y="111.50"></text></g><g><title>adt_def (70,211 samples, 0.12%)</title><rect x="50.1497%" y="85" width="0.1221%" height="15" fill="rgb(253,215,40)"/><text x="50.3997%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (69,311 samples, 0.12%)</title><rect x="50.1513%" y="69" width="0.1206%" height="15" fill="rgb(211,81,21)"/><text x="50.4013%" y="79.50"></text></g><g><title>item_attrs (58,531 samples, 0.10%)</title><rect x="50.1701%" y="53" width="0.1018%" height="15" fill="rgb(208,190,38)"/><text x="50.4201%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (57,611 samples, 0.10%)</title><rect x="50.1717%" y="37" width="0.1002%" height="15" fill="rgb(235,213,38)"/><text x="50.4217%" y="47.50"></text></g><g><title>adt_sized_constraint (78,751 samples, 0.14%)</title><rect x="50.1392%" y="101" width="0.1370%" height="15" fill="rgb(237,122,38)"/><text x="50.3892%" y="111.50"></text></g><g><title>predicates_of (87,991 samples, 0.15%)</title><rect x="50.3226%" y="101" width="0.1531%" height="15" fill="rgb(244,218,35)"/><text x="50.5726%" y="111.50"></text></g><g><title>predicates_defined_on (65,621 samples, 0.11%)</title><rect x="50.3615%" y="85" width="0.1142%" height="15" fill="rgb(240,68,47)"/><text x="50.6115%" y="95.50"></text></g><g><title>evaluate_obligation (613,355 samples, 1.07%)</title><rect x="49.4535%" y="117" width="1.0670%" height="15" fill="rgb(210,16,53)"/><text x="49.7035%" y="127.50"></text></g><g><title>fn_sig (74,410 samples, 0.13%)</title><rect x="50.5466%" y="117" width="0.1294%" height="15" fill="rgb(235,124,12)"/><text x="50.7966%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (65,350 samples, 0.11%)</title><rect x="50.5624%" y="101" width="0.1137%" height="15" fill="rgb(224,169,11)"/><text x="50.8124%" y="111.50"></text></g><g><title>item_attrs (110,493 samples, 0.19%)</title><rect x="50.8278%" y="117" width="0.1922%" height="15" fill="rgb(250,166,2)"/><text x="51.0778%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (105,272 samples, 0.18%)</title><rect x="50.8369%" y="101" width="0.1831%" height="15" fill="rgb(242,216,29)"/><text x="51.0869%" y="111.50"></text></g><g><title>method_autoderef_steps (232,773 samples, 0.40%)</title><rect x="51.0964%" y="117" width="0.4050%" height="15" fill="rgb(230,116,27)"/><text x="51.3464%" y="127.50"></text></g><g><title>evaluate_obligation (117,220 samples, 0.20%)</title><rect x="51.2974%" y="101" width="0.2039%" height="15" fill="rgb(228,99,48)"/><text x="51.5474%" y="111.50"></text></g><g><title>object_safety_violations (123,541 samples, 0.21%)</title><rect x="51.5013%" y="117" width="0.2149%" height="15" fill="rgb(253,11,6)"/><text x="51.7513%" y="127.50"></text></g><g><title>explicit_predicates_of (65,860 samples, 0.11%)</title><rect x="51.8978%" y="85" width="0.1146%" height="15" fill="rgb(247,143,39)"/><text x="52.1478%" y="95.50"></text></g><g><title>predicates_of (168,070 samples, 0.29%)</title><rect x="51.7646%" y="117" width="0.2924%" height="15" fill="rgb(236,97,10)"/><text x="52.0146%" y="127.50"></text></g><g><title>predicates_defined_on (128,170 samples, 0.22%)</title><rect x="51.8340%" y="101" width="0.2230%" height="15" fill="rgb(233,208,19)"/><text x="52.0840%" y="111.50"></text></g><g><title>item_bodies_checking (8,480,040 samples, 14.75%)</title><rect x="37.4386%" y="165" width="14.7526%" height="15" fill="rgb(216,164,2)"/><text x="37.6886%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (8,477,620 samples, 14.75%)</title><rect x="37.4429%" y="149" width="14.7484%" height="15" fill="rgb(220,129,5)"/><text x="37.6929%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (8,447,859 samples, 14.70%)</title><rect x="37.4946%" y="133" width="14.6966%" height="15" fill="rgb(242,17,10)"/><text x="37.7446%" y="143.50">typeck</text></g><g><title>impl_trait_ref (143,652 samples, 0.25%)</title><rect x="53.1177%" y="85" width="0.2499%" height="15" fill="rgb(242,107,0)"/><text x="53.3677%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (125,442 samples, 0.22%)</title><rect x="53.1494%" y="69" width="0.2182%" height="15" fill="rgb(251,28,31)"/><text x="53.3994%" y="79.50"></text></g><g><title>adt_destructor (303,303 samples, 0.53%)</title><rect x="52.8868%" y="133" width="0.5277%" height="15" fill="rgb(233,223,10)"/><text x="53.1368%" y="143.50"></text></g><g><title>coherent_trait (298,653 samples, 0.52%)</title><rect x="52.8949%" y="117" width="0.5196%" height="15" fill="rgb(215,21,27)"/><text x="53.1449%" y="127.50"></text></g><g><title>specialization_graph_of (296,563 samples, 0.52%)</title><rect x="52.8985%" y="101" width="0.5159%" height="15" fill="rgb(232,23,21)"/><text x="53.1485%" y="111.50"></text></g><g><title>generics_of (175,592 samples, 0.31%)</title><rect x="54.9632%" y="101" width="0.3055%" height="15" fill="rgb(244,5,23)"/><text x="55.2132%" y="111.50"></text></g><g><title>metadata_decode_entry_generics_of (132,792 samples, 0.23%)</title><rect x="55.0377%" y="85" width="0.2310%" height="15" fill="rgb(226,81,46)"/><text x="55.2877%" y="95.50"></text></g><g><title>impl_trait_ref (498,786 samples, 0.87%)</title><rect x="55.3085%" y="101" width="0.8677%" height="15" fill="rgb(247,70,30)"/><text x="55.5585%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (225,903 samples, 0.39%)</title><rect x="55.7833%" y="85" width="0.3930%" height="15" fill="rgb(212,68,19)"/><text x="56.0333%" y="95.50"></text></g><g><title>predicates_of (63,611 samples, 0.11%)</title><rect x="56.1870%" y="101" width="0.1107%" height="15" fill="rgb(240,187,13)"/><text x="56.4370%" y="111.50"></text></g><g><title>specializes (281,593 samples, 0.49%)</title><rect x="56.2977%" y="101" width="0.4899%" height="15" fill="rgb(223,113,26)"/><text x="56.5477%" y="111.50"></text></g><g><title>param_env (208,563 samples, 0.36%)</title><rect x="56.4247%" y="85" width="0.3628%" height="15" fill="rgb(206,192,2)"/><text x="56.6747%" y="95.50"></text></g><g><title>def_span (150,202 samples, 0.26%)</title><rect x="56.5263%" y="69" width="0.2613%" height="15" fill="rgb(241,108,4)"/><text x="56.7763%" y="79.50"></text></g><g><title>metadata_decode_entry_def_span (143,982 samples, 0.25%)</title><rect x="56.5371%" y="53" width="0.2505%" height="15" fill="rgb(247,173,49)"/><text x="56.7871%" y="63.50"></text></g><g><title>evaluate_obligation (1,549,916 samples, 2.70%)</title><rect x="54.1701%" y="117" width="2.6964%" height="15" fill="rgb(224,114,35)"/><text x="54.4201%" y="127.50">ev..</text></g><g><title>item_types_checking (2,780,099 samples, 4.84%)</title><rect x="52.1912%" y="165" width="4.8365%" height="15" fill="rgb(245,159,27)"/><text x="52.4412%" y="175.50">item_t..</text></g><g><title>check_mod_item_types (2,777,679 samples, 4.83%)</title><rect x="52.1954%" y="149" width="4.8323%" height="15" fill="rgb(245,172,44)"/><text x="52.4454%" y="159.50">check_..</text></g><g><title>typeck (1,957,680 samples, 3.41%)</title><rect x="53.6220%" y="133" width="3.4057%" height="15" fill="rgb(236,23,11)"/><text x="53.8720%" y="143.50">typ..</text></g><g><title>fn_sig (119,562 samples, 0.21%)</title><rect x="57.2197%" y="133" width="0.2080%" height="15" fill="rgb(205,117,38)"/><text x="57.4697%" y="143.50"></text></g><g><title>generics_of (78,590 samples, 0.14%)</title><rect x="57.4277%" y="133" width="0.1367%" height="15" fill="rgb(237,72,25)"/><text x="57.6777%" y="143.50"></text></g><g><title>late_bound_vars_map (138,861 samples, 0.24%)</title><rect x="57.8582%" y="85" width="0.2416%" height="15" fill="rgb(244,70,9)"/><text x="58.1082%" y="95.50"></text></g><g><title>resolve_lifetimes (127,600 samples, 0.22%)</title><rect x="57.8778%" y="69" width="0.2220%" height="15" fill="rgb(217,125,39)"/><text x="58.1278%" y="79.50"></text></g><g><title>explicit_predicates_of (241,682 samples, 0.42%)</title><rect x="57.6888%" y="101" width="0.4205%" height="15" fill="rgb(235,36,10)"/><text x="57.9388%" y="111.50"></text></g><g><title>predicates_of (412,975 samples, 0.72%)</title><rect x="57.6061%" y="133" width="0.7184%" height="15" fill="rgb(251,123,47)"/><text x="57.8561%" y="143.50"></text></g><g><title>predicates_defined_on (395,565 samples, 0.69%)</title><rect x="57.6363%" y="117" width="0.6882%" height="15" fill="rgb(221,13,13)"/><text x="57.8863%" y="127.50"></text></g><g><title>inferred_outlives_of (123,711 samples, 0.22%)</title><rect x="58.1093%" y="101" width="0.2152%" height="15" fill="rgb(238,131,9)"/><text x="58.3593%" y="111.50"></text></g><g><title>inferred_outlives_crate (113,191 samples, 0.20%)</title><rect x="58.1276%" y="85" width="0.1969%" height="15" fill="rgb(211,50,8)"/><text x="58.3776%" y="95.50"></text></g><g><title>type_collecting (809,818 samples, 1.41%)</title><rect x="57.0303%" y="165" width="1.4088%" height="15" fill="rgb(245,182,24)"/><text x="57.2803%" y="175.50"></text></g><g><title>collect_mod_item_types (804,528 samples, 1.40%)</title><rect x="57.0395%" y="149" width="1.3996%" height="15" fill="rgb(242,14,37)"/><text x="57.2895%" y="159.50"></text></g><g><title>type_of (65,861 samples, 0.11%)</title><rect x="58.3245%" y="133" width="0.1146%" height="15" fill="rgb(246,228,12)"/><text x="58.5745%" y="143.50"></text></g><g><title>evaluate_obligation (329,034 samples, 0.57%)</title><rect x="60.4401%" y="133" width="0.5724%" height="15" fill="rgb(213,55,15)"/><text x="60.6901%" y="143.50"></text></g><g><title>implied_outlives_bounds (196,433 samples, 0.34%)</title><rect x="61.0125%" y="133" width="0.3417%" height="15" fill="rgb(209,9,3)"/><text x="61.2625%" y="143.50"></text></g><g><title>param_env (138,493 samples, 0.24%)</title><rect x="61.3543%" y="133" width="0.2409%" height="15" fill="rgb(230,59,30)"/><text x="61.6043%" y="143.50"></text></g><g><title>check_impl_item_well_formed (1,873,191 samples, 3.26%)</title><rect x="58.5734%" y="149" width="3.2588%" height="15" fill="rgb(209,121,21)"/><text x="58.8234%" y="159.50">che..</text></g><g><title>region_scope_tree (100,541 samples, 0.17%)</title><rect x="61.6572%" y="133" width="0.1749%" height="15" fill="rgb(220,109,13)"/><text x="61.9072%" y="143.50"></text></g><g><title>adt_sized_constraint (84,550 samples, 0.15%)</title><rect x="63.0764%" y="117" width="0.1471%" height="15" fill="rgb(232,18,1)"/><text x="63.3264%" y="127.50"></text></g><g><title>adt_sized_constraint (117,760 samples, 0.20%)</title><rect x="63.0199%" y="133" width="0.2049%" height="15" fill="rgb(215,41,42)"/><text x="63.2699%" y="143.50"></text></g><g><title>param_env (152,331 samples, 0.27%)</title><rect x="63.3940%" y="133" width="0.2650%" height="15" fill="rgb(224,123,36)"/><text x="63.6440%" y="143.50"></text></g><g><title>analysis (33,003,510 samples, 57.42%)</title><rect x="6.4601%" y="197" width="57.4157%" height="15" fill="rgb(240,125,3)"/><text x="6.7101%" y="207.50">analysis</text></g><g><title>type_check_crate (21,680,269 samples, 37.72%)</title><rect x="26.1589%" y="181" width="37.7168%" height="15" fill="rgb(205,98,50)"/><text x="26.4089%" y="191.50">type_check_crate</text></g><g><title>wf_checking (3,122,933 samples, 5.43%)</title><rect x="58.4428%" y="165" width="5.4329%" height="15" fill="rgb(205,185,37)"/><text x="58.6928%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (1,174,722 samples, 2.04%)</title><rect x="61.8321%" y="149" width="2.0436%" height="15" fill="rgb(238,207,15)"/><text x="62.0821%" y="159.50">c..</text></g><g><title>codegen_module (171,542 samples, 0.30%)</title><rect x="64.4714%" y="181" width="0.2984%" height="15" fill="rgb(213,199,42)"/><text x="64.7214%" y="191.50"></text></g><g><title>codegen_crate (615,617 samples, 1.07%)</title><rect x="63.8844%" y="197" width="1.0710%" height="15" fill="rgb(235,201,11)"/><text x="64.1344%" y="207.50"></text></g><g><title>codegen_module_optimize (473,645 samples, 0.82%)</title><rect x="64.9554%" y="197" width="0.8240%" height="15" fill="rgb(207,46,11)"/><text x="65.2054%" y="207.50"></text></g><g><title>LLVM_module_optimize (232,762 samples, 0.40%)</title><rect x="65.3744%" y="181" width="0.4049%" height="15" fill="rgb(241,35,35)"/><text x="65.6244%" y="191.50"></text></g><g><title>LLVM_lto_optimize (120,232 samples, 0.21%)</title><rect x="66.0691%" y="181" width="0.2092%" height="15" fill="rgb(243,32,47)"/><text x="66.3191%" y="191.50"></text></g><g><title>LLVM_module_codegen (2,090,712 samples, 3.64%)</title><rect x="66.2782%" y="181" width="3.6372%" height="15" fill="rgb(247,202,23)"/><text x="66.5282%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (2,072,222 samples, 3.61%)</title><rect x="66.3104%" y="165" width="3.6050%" height="15" fill="rgb(219,102,11)"/><text x="66.5604%" y="175.50">LLVM..</text></g><g><title>codegen_module_perform_lto (2,394,005 samples, 4.16%)</title><rect x="65.7794%" y="197" width="4.1648%" height="15" fill="rgb(243,110,44)"/><text x="66.0294%" y="207.50">codeg..</text></g><g><title>macro_expand_crate (5,934,793 samples, 10.32%)</title><rect x="70.2684%" y="181" width="10.3247%" height="15" fill="rgb(222,74,54)"/><text x="70.5184%" y="191.50">macro_expand_cr..</text></g><g><title>expand_crate (5,927,493 samples, 10.31%)</title><rect x="70.2811%" y="165" width="10.3120%" height="15" fill="rgb(216,99,12)"/><text x="70.5311%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (1,301,514 samples, 2.26%)</title><rect x="78.3289%" y="149" width="2.2642%" height="15" fill="rgb(226,22,26)"/><text x="78.5789%" y="159.50">m..</text></g><g><title>metadata_register_crate (464,896 samples, 0.81%)</title><rect x="79.7843%" y="133" width="0.8088%" height="15" fill="rgb(217,163,10)"/><text x="80.0343%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (62,770 samples, 0.11%)</title><rect x="80.5973%" y="181" width="0.1092%" height="15" fill="rgb(213,25,53)"/><text x="80.8473%" y="191.50"></text></g><g><title>late_resolve_crate (866,619 samples, 1.51%)</title><rect x="80.7718%" y="165" width="1.5076%" height="15" fill="rgb(252,105,26)"/><text x="81.0218%" y="175.50"></text></g><g><title>configure_and_expand (7,129,645 samples, 12.40%)</title><rect x="69.9442%" y="197" width="12.4033%" height="15" fill="rgb(220,39,43)"/><text x="70.1942%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (943,260 samples, 1.64%)</title><rect x="80.7065%" y="181" width="1.6410%" height="15" fill="rgb(229,68,48)"/><text x="80.9565%" y="191.50"></text></g><g><title>early_lint_checks (105,511 samples, 0.18%)</title><rect x="82.4666%" y="197" width="0.1836%" height="15" fill="rgb(252,8,32)"/><text x="82.7166%" y="207.50"></text></g><g><title>free_global_ctxt (2,711,339 samples, 4.72%)</title><rect x="82.6502%" y="197" width="4.7169%" height="15" fill="rgb(223,20,43)"/><text x="82.9002%" y="207.50">free_..</text></g><g><title>crate_hash (59,421 samples, 0.10%)</title><rect x="88.4107%" y="181" width="0.1034%" height="15" fill="rgb(229,81,49)"/><text x="88.6607%" y="191.50"></text></g><g><title>layout_of (159,562 samples, 0.28%)</title><rect x="90.7304%" y="149" width="0.2776%" height="15" fill="rgb(236,28,36)"/><text x="90.9804%" y="159.50"></text></g><g><title>layout_of (137,562 samples, 0.24%)</title><rect x="90.7686%" y="133" width="0.2393%" height="15" fill="rgb(249,185,26)"/><text x="91.0186%" y="143.50"></text></g><g><title>layout_of (411,704 samples, 0.72%)</title><rect x="90.3306%" y="165" width="0.7162%" height="15" fill="rgb(249,174,33)"/><text x="90.5806%" y="175.50"></text></g><g><title>needs_drop_raw (115,202 samples, 0.20%)</title><rect x="92.8451%" y="149" width="0.2004%" height="15" fill="rgb(233,201,37)"/><text x="93.0951%" y="159.50"></text></g><g><title>is_copy_raw (98,231 samples, 0.17%)</title><rect x="92.8746%" y="133" width="0.1709%" height="15" fill="rgb(221,78,26)"/><text x="93.1246%" y="143.50"></text></g><g><title>evaluate_obligation (76,361 samples, 0.13%)</title><rect x="92.9127%" y="117" width="0.1328%" height="15" fill="rgb(250,127,30)"/><text x="93.1627%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,159,577 samples, 2.02%)</title><rect x="91.0469%" y="165" width="2.0173%" height="15" fill="rgb(230,49,44)"/><text x="91.2969%" y="175.50">m..</text></g><g><title>optimized_mir (2,525,058 samples, 4.39%)</title><rect x="88.6962%" y="181" width="4.3928%" height="15" fill="rgb(229,67,23)"/><text x="88.9462%" y="191.50">optim..</text></g><g><title>generate_crate_metadata (3,319,345 samples, 5.77%)</title><rect x="87.3671%" y="197" width="5.7746%" height="15" fill="rgb(249,83,47)"/><text x="87.6171%" y="207.50">generat..</text></g><g><title>hir_lowering (795,638 samples, 1.38%)</title><rect x="93.1417%" y="197" width="1.3842%" height="15" fill="rgb(215,43,3)"/><text x="93.3917%" y="207.50"></text></g><g><title>finish_ongoing_codegen (391,294 samples, 0.68%)</title><rect x="94.5461%" y="181" width="0.6807%" height="15" fill="rgb(238,154,13)"/><text x="94.7961%" y="191.50"></text></g><g><title>link_crate (591,036 samples, 1.03%)</title><rect x="95.2268%" y="181" width="1.0282%" height="15" fill="rgb(219,56,2)"/><text x="95.4768%" y="191.50"></text></g><g><title>link_binary (575,966 samples, 1.00%)</title><rect x="95.2530%" y="165" width="1.0020%" height="15" fill="rgb(233,0,4)"/><text x="95.5030%" y="175.50"></text></g><g><title>link_rlib (342,694 samples, 0.60%)</title><rect x="95.6588%" y="149" width="0.5962%" height="15" fill="rgb(235,30,7)"/><text x="95.9088%" y="159.50"></text></g><g><title>link (1,000,490 samples, 1.74%)</title><rect x="94.5259%" y="197" width="1.7405%" height="15" fill="rgb(250,79,13)"/><text x="94.7759%" y="207.50"></text></g><g><title>parse_crate (1,080,241 samples, 1.88%)</title><rect x="96.2664%" y="197" width="1.8793%" height="15" fill="rgb(211,146,34)"/><text x="96.5164%" y="207.50">p..</text></g><g><title>prepare_outputs (202,612 samples, 0.35%)</title><rect x="98.1539%" y="197" width="0.3525%" height="15" fill="rgb(228,22,38)"/><text x="98.4039%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (462,995 samples, 0.81%)</title><rect x="98.5064%" y="197" width="0.8055%" height="15" fill="rgb(235,168,5)"/><text x="98.7564%" y="207.50"></text></g><g><title>all (57,481,680 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,155,16)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (57,481,680 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,215,53)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (337,983 samples, 0.59%)</title><rect x="99.4120%" y="197" width="0.5880%" height="15" fill="rgb(223,4,10)"/><text x="99.6620%" y="207.50"></text></g></svg></svg>