<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (3,446,358 samples, 11.01%)</title><rect x="1.9562%" y="197" width="11.0054%" height="15" fill="rgb(227,0,7)"/><text x="2.2062%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (134,011 samples, 0.43%)</title><rect x="12.5336%" y="181" width="0.4279%" height="15" fill="rgb(217,0,24)"/><text x="12.7836%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (118,521 samples, 0.38%)</title><rect x="12.5831%" y="165" width="0.3785%" height="15" fill="rgb(221,193,54)"/><text x="12.8331%" y="175.50"></text></g><g><title>is_copy_raw (80,202 samples, 0.26%)</title><rect x="17.3781%" y="85" width="0.2561%" height="15" fill="rgb(248,212,6)"/><text x="17.6281%" y="95.50"></text></g><g><title>evaluate_obligation (65,242 samples, 0.21%)</title><rect x="17.4259%" y="69" width="0.2083%" height="15" fill="rgb(208,68,35)"/><text x="17.6759%" y="79.50"></text></g><g><title>needs_drop_raw (53,361 samples, 0.17%)</title><rect x="17.6342%" y="85" width="0.1704%" height="15" fill="rgb(232,128,0)"/><text x="17.8842%" y="95.50"></text></g><g><title>is_copy_raw (49,781 samples, 0.16%)</title><rect x="17.6456%" y="69" width="0.1590%" height="15" fill="rgb(207,160,47)"/><text x="17.8956%" y="79.50"></text></g><g><title>evaluate_obligation (45,111 samples, 0.14%)</title><rect x="17.6605%" y="53" width="0.1441%" height="15" fill="rgb(228,23,34)"/><text x="17.9105%" y="63.50"></text></g><g><title>trait_impls_of (33,570 samples, 0.11%)</title><rect x="17.6974%" y="37" width="0.1072%" height="15" fill="rgb(218,30,26)"/><text x="17.9474%" y="47.50"></text></g><g><title>thir_body (72,980 samples, 0.23%)</title><rect x="17.9046%" y="85" width="0.2330%" height="15" fill="rgb(220,122,19)"/><text x="18.1546%" y="95.50"></text></g><g><title>mir_const (659,987 samples, 2.11%)</title><rect x="16.0697%" y="133" width="2.1076%" height="15" fill="rgb(250,228,42)"/><text x="16.3197%" y="143.50">m..</text></g><g><title>unsafety_check_result (530,285 samples, 1.69%)</title><rect x="16.4839%" y="117" width="1.6934%" height="15" fill="rgb(240,193,28)"/><text x="16.7339%" y="127.50"></text></g><g><title>mir_built (448,524 samples, 1.43%)</title><rect x="16.7450%" y="101" width="1.4323%" height="15" fill="rgb(216,20,37)"/><text x="16.9950%" y="111.50"></text></g><g><title>mir_promoted (761,218 samples, 2.43%)</title><rect x="15.7686%" y="149" width="2.4308%" height="15" fill="rgb(206,188,39)"/><text x="16.0186%" y="159.50">mi..</text></g><g><title>MIR_borrow_checking (1,647,888 samples, 5.26%)</title><rect x="13.3541%" y="181" width="5.2622%" height="15" fill="rgb(217,207,13)"/><text x="13.6041%" y="191.50">MIR_bo..</text></g><g><title>mir_borrowck (1,640,048 samples, 5.24%)</title><rect x="13.3792%" y="165" width="5.2372%" height="15" fill="rgb(231,73,38)"/><text x="13.6292%" y="175.50">mir_bo..</text></g><g><title>type_op_prove_predicate (76,352 samples, 0.24%)</title><rect x="18.3726%" y="149" width="0.2438%" height="15" fill="rgb(225,20,46)"/><text x="18.6226%" y="159.50"></text></g><g><title>hir_module_items (108,052 samples, 0.35%)</title><rect x="18.6335%" y="181" width="0.3450%" height="15" fill="rgb(210,31,41)"/><text x="18.8835%" y="191.50"></text></g><g><title>get_lang_items (52,151 samples, 0.17%)</title><rect x="19.4777%" y="133" width="0.1665%" height="15" fill="rgb(221,200,47)"/><text x="19.7277%" y="143.50"></text></g><g><title>should_inherit_track_caller (67,021 samples, 0.21%)</title><rect x="19.6442%" y="133" width="0.2140%" height="15" fill="rgb(226,26,5)"/><text x="19.8942%" y="143.50"></text></g><g><title>codegen_fn_attrs (207,572 samples, 0.66%)</title><rect x="19.2905%" y="149" width="0.6628%" height="15" fill="rgb(249,33,26)"/><text x="19.5405%" y="159.50"></text></g><g><title>check_mod_attrs (283,293 samples, 0.90%)</title><rect x="19.0504%" y="165" width="0.9046%" height="15" fill="rgb(235,183,28)"/><text x="19.3004%" y="175.50"></text></g><g><title>lookup_deprecation_entry (44,140 samples, 0.14%)</title><rect x="20.2357%" y="149" width="0.1410%" height="15" fill="rgb(221,5,38)"/><text x="20.4857%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (117,092 samples, 0.37%)</title><rect x="20.1058%" y="165" width="0.3739%" height="15" fill="rgb(247,18,42)"/><text x="20.3558%" y="175.50"></text></g><g><title>looking_for_derive_registrar (33,850 samples, 0.11%)</title><rect x="20.4823%" y="165" width="0.1081%" height="15" fill="rgb(241,131,45)"/><text x="20.7323%" y="175.50"></text></g><g><title>misc_checking_1 (508,235 samples, 1.62%)</title><rect x="18.9797%" y="181" width="1.6230%" height="15" fill="rgb(249,31,29)"/><text x="19.2297%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (53,971 samples, 0.17%)</title><rect x="20.6063%" y="165" width="0.1723%" height="15" fill="rgb(225,111,53)"/><text x="20.8563%" y="175.50"></text></g><g><title>check_mod_liveness (43,050 samples, 0.14%)</title><rect x="20.6412%" y="149" width="0.1375%" height="15" fill="rgb(238,160,17)"/><text x="20.8912%" y="159.50"></text></g><g><title>misc_checking_2 (128,562 samples, 0.41%)</title><rect x="20.6027%" y="181" width="0.4105%" height="15" fill="rgb(214,148,48)"/><text x="20.8527%" y="191.50"></text></g><g><title>match_checking (73,451 samples, 0.23%)</title><rect x="20.7786%" y="165" width="0.2346%" height="15" fill="rgb(232,36,49)"/><text x="21.0286%" y="175.50"></text></g><g><title>check_match (70,451 samples, 0.22%)</title><rect x="20.7882%" y="149" width="0.2250%" height="15" fill="rgb(209,103,24)"/><text x="21.0382%" y="159.50"></text></g><g><title>death_checking (41,970 samples, 0.13%)</title><rect x="21.1348%" y="165" width="0.1340%" height="15" fill="rgb(229,88,8)"/><text x="21.3848%" y="175.50"></text></g><g><title>param_env (42,711 samples, 0.14%)</title><rect x="21.8257%" y="133" width="0.1364%" height="15" fill="rgb(213,181,19)"/><text x="22.0757%" y="143.50"></text></g><g><title>trait_impls_of (73,561 samples, 0.23%)</title><rect x="21.9621%" y="133" width="0.2349%" height="15" fill="rgb(254,191,54)"/><text x="22.2121%" y="143.50"></text></g><g><title>crate_lints (1,239,524 samples, 3.96%)</title><rect x="21.2741%" y="149" width="3.9582%" height="15" fill="rgb(241,83,37)"/><text x="21.5241%" y="159.50">crat..</text></g><g><title>type_of (950,529 samples, 3.04%)</title><rect x="22.1970%" y="133" width="3.0354%" height="15" fill="rgb(233,36,39)"/><text x="22.4470%" y="143.50">typ..</text></g><g><title>metadata_decode_entry_type_of (865,028 samples, 2.76%)</title><rect x="22.4700%" y="117" width="2.7623%" height="15" fill="rgb(226,3,54)"/><text x="22.7200%" y="127.50">me..</text></g><g><title>lint_checking (1,325,255 samples, 4.23%)</title><rect x="21.2688%" y="165" width="4.2320%" height="15" fill="rgb(245,192,40)"/><text x="21.5188%" y="175.50">lint_..</text></g><g><title>module_lints (84,061 samples, 0.27%)</title><rect x="25.2323%" y="149" width="0.2684%" height="15" fill="rgb(238,167,29)"/><text x="25.4823%" y="159.50"></text></g><g><title>lint_mod (82,401 samples, 0.26%)</title><rect x="25.2376%" y="133" width="0.2631%" height="15" fill="rgb(232,182,51)"/><text x="25.4876%" y="143.50"></text></g><g><title>is_copy_raw (41,330 samples, 0.13%)</title><rect x="25.3688%" y="117" width="0.1320%" height="15" fill="rgb(231,60,39)"/><text x="25.6188%" y="127.50"></text></g><g><title>evaluate_obligation (33,730 samples, 0.11%)</title><rect x="25.3931%" y="101" width="0.1077%" height="15" fill="rgb(208,69,12)"/><text x="25.6431%" y="111.50"></text></g><g><title>privacy_access_levels (44,880 samples, 0.14%)</title><rect x="25.5008%" y="165" width="0.1433%" height="15" fill="rgb(235,93,37)"/><text x="25.7508%" y="175.50"></text></g><g><title>privacy_checking_modules (61,950 samples, 0.20%)</title><rect x="25.6441%" y="165" width="0.1978%" height="15" fill="rgb(213,116,39)"/><text x="25.8941%" y="175.50"></text></g><g><title>check_mod_privacy (60,700 samples, 0.19%)</title><rect x="25.6481%" y="149" width="0.1938%" height="15" fill="rgb(222,207,29)"/><text x="25.8981%" y="159.50"></text></g><g><title>misc_checking_3 (1,528,276 samples, 4.88%)</title><rect x="21.0132%" y="181" width="4.8803%" height="15" fill="rgb(206,96,30)"/><text x="21.2632%" y="191.50">misc_c..</text></g><g><title>associated_item (46,860 samples, 0.15%)</title><rect x="29.0948%" y="101" width="0.1496%" height="15" fill="rgb(218,138,4)"/><text x="29.3448%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (38,430 samples, 0.12%)</title><rect x="29.1217%" y="85" width="0.1227%" height="15" fill="rgb(250,191,14)"/><text x="29.3717%" y="95.50"></text></g><g><title>associated_items (65,480 samples, 0.21%)</title><rect x="29.0443%" y="117" width="0.2091%" height="15" fill="rgb(239,60,40)"/><text x="29.2943%" y="127.50"></text></g><g><title>evaluate_obligation (98,252 samples, 0.31%)</title><rect x="29.2630%" y="117" width="0.3138%" height="15" fill="rgb(206,27,48)"/><text x="29.5130%" y="127.50"></text></g><g><title>associated_item (62,061 samples, 0.20%)</title><rect x="29.7062%" y="85" width="0.1982%" height="15" fill="rgb(225,35,8)"/><text x="29.9562%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (61,551 samples, 0.20%)</title><rect x="29.7078%" y="69" width="0.1966%" height="15" fill="rgb(250,213,24)"/><text x="29.9578%" y="79.50"></text></g><g><title>impl_item_implementor_ids (66,021 samples, 0.21%)</title><rect x="29.6951%" y="117" width="0.2108%" height="15" fill="rgb(247,123,22)"/><text x="29.9451%" y="127.50"></text></g><g><title>associated_items (63,731 samples, 0.20%)</title><rect x="29.7024%" y="101" width="0.2035%" height="15" fill="rgb(231,138,38)"/><text x="29.9524%" y="111.50"></text></g><g><title>item_attrs (36,870 samples, 0.12%)</title><rect x="29.9953%" y="117" width="0.1177%" height="15" fill="rgb(231,145,46)"/><text x="30.2453%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (34,810 samples, 0.11%)</title><rect x="30.0019%" y="101" width="0.1112%" height="15" fill="rgb(251,118,11)"/><text x="30.2519%" y="111.50"></text></g><g><title>method_autoderef_steps (34,310 samples, 0.11%)</title><rect x="30.1995%" y="117" width="0.1096%" height="15" fill="rgb(217,147,25)"/><text x="30.4495%" y="127.50"></text></g><g><title>predicates_of (58,271 samples, 0.19%)</title><rect x="30.3182%" y="117" width="0.1861%" height="15" fill="rgb(247,81,37)"/><text x="30.5682%" y="127.50"></text></g><g><title>predicates_defined_on (43,211 samples, 0.14%)</title><rect x="30.3663%" y="101" width="0.1380%" height="15" fill="rgb(209,12,38)"/><text x="30.6163%" y="111.50"></text></g><g><title>item_bodies_checking (1,437,146 samples, 4.59%)</title><rect x="26.0059%" y="165" width="4.5893%" height="15" fill="rgb(227,1,9)"/><text x="26.2559%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (1,435,716 samples, 4.58%)</title><rect x="26.0104%" y="149" width="4.5847%" height="15" fill="rgb(248,47,43)"/><text x="26.2604%" y="159.50">typec..</text></g><g><title>typeck (1,429,696 samples, 4.57%)</title><rect x="26.0296%" y="133" width="4.5655%" height="15" fill="rgb(221,10,30)"/><text x="26.2796%" y="143.50">typeck</text></g><g><title>impl_trait_ref (40,751 samples, 0.13%)</title><rect x="30.7518%" y="85" width="0.1301%" height="15" fill="rgb(210,229,1)"/><text x="31.0018%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (38,971 samples, 0.12%)</title><rect x="30.7575%" y="69" width="0.1244%" height="15" fill="rgb(222,148,37)"/><text x="31.0075%" y="79.50"></text></g><g><title>item_types_checking (95,921 samples, 0.31%)</title><rect x="30.5951%" y="165" width="0.3063%" height="15" fill="rgb(234,67,33)"/><text x="30.8451%" y="175.50"></text></g><g><title>check_mod_item_types (94,191 samples, 0.30%)</title><rect x="30.6007%" y="149" width="0.3008%" height="15" fill="rgb(247,98,35)"/><text x="30.8507%" y="159.50"></text></g><g><title>adt_destructor (82,371 samples, 0.26%)</title><rect x="30.6384%" y="133" width="0.2630%" height="15" fill="rgb(247,138,52)"/><text x="30.8884%" y="143.50"></text></g><g><title>coherent_trait (78,131 samples, 0.25%)</title><rect x="30.6519%" y="117" width="0.2495%" height="15" fill="rgb(213,79,30)"/><text x="30.9019%" y="127.50"></text></g><g><title>specialization_graph_of (69,911 samples, 0.22%)</title><rect x="30.6782%" y="101" width="0.2232%" height="15" fill="rgb(246,177,23)"/><text x="30.9282%" y="111.50"></text></g><g><title>fn_sig (40,940 samples, 0.13%)</title><rect x="31.1174%" y="133" width="0.1307%" height="15" fill="rgb(230,62,27)"/><text x="31.3674%" y="143.50"></text></g><g><title>generics_of (61,102 samples, 0.20%)</title><rect x="31.2481%" y="133" width="0.1951%" height="15" fill="rgb(216,154,8)"/><text x="31.4981%" y="143.50"></text></g><g><title>late_bound_vars_map (46,860 samples, 0.15%)</title><rect x="31.7541%" y="101" width="0.1496%" height="15" fill="rgb(244,35,45)"/><text x="32.0041%" y="111.50"></text></g><g><title>resolve_lifetimes (44,280 samples, 0.14%)</title><rect x="31.7623%" y="85" width="0.1414%" height="15" fill="rgb(251,115,12)"/><text x="32.0123%" y="95.50"></text></g><g><title>item_bounds (159,542 samples, 0.51%)</title><rect x="31.4432%" y="133" width="0.5095%" height="15" fill="rgb(240,54,50)"/><text x="31.6932%" y="143.50"></text></g><g><title>explicit_item_bounds (103,451 samples, 0.33%)</title><rect x="31.6223%" y="117" width="0.3304%" height="15" fill="rgb(233,84,52)"/><text x="31.8723%" y="127.50"></text></g><g><title>predicates_of (169,042 samples, 0.54%)</title><rect x="31.9527%" y="133" width="0.5398%" height="15" fill="rgb(207,117,47)"/><text x="32.2027%" y="143.50"></text></g><g><title>predicates_defined_on (161,752 samples, 0.52%)</title><rect x="31.9760%" y="117" width="0.5165%" height="15" fill="rgb(249,43,39)"/><text x="32.2260%" y="127.50"></text></g><g><title>inferred_outlives_of (121,492 samples, 0.39%)</title><rect x="32.1045%" y="101" width="0.3880%" height="15" fill="rgb(209,38,44)"/><text x="32.3545%" y="111.50"></text></g><g><title>inferred_outlives_crate (112,372 samples, 0.36%)</title><rect x="32.1337%" y="85" width="0.3588%" height="15" fill="rgb(236,212,23)"/><text x="32.3837%" y="95.50"></text></g><g><title>type_of (67,010 samples, 0.21%)</title><rect x="32.2785%" y="69" width="0.2140%" height="15" fill="rgb(242,79,21)"/><text x="32.5285%" y="79.50"></text></g><g><title>super_predicates_of (67,331 samples, 0.22%)</title><rect x="32.4925%" y="133" width="0.2150%" height="15" fill="rgb(211,96,35)"/><text x="32.7425%" y="143.50"></text></g><g><title>super_predicates_that_define_assoc_type (58,301 samples, 0.19%)</title><rect x="32.5213%" y="117" width="0.1862%" height="15" fill="rgb(253,215,40)"/><text x="32.7713%" y="127.50"></text></g><g><title>type_collecting (619,227 samples, 1.98%)</title><rect x="30.9045%" y="165" width="1.9774%" height="15" fill="rgb(211,81,21)"/><text x="31.1545%" y="175.50">t..</text></g><g><title>collect_mod_item_types (612,337 samples, 1.96%)</title><rect x="30.9265%" y="149" width="1.9554%" height="15" fill="rgb(208,190,38)"/><text x="31.1765%" y="159.50">c..</text></g><g><title>type_of (52,860 samples, 0.17%)</title><rect x="32.7131%" y="133" width="0.1688%" height="15" fill="rgb(235,213,38)"/><text x="32.9631%" y="143.50"></text></g><g><title>adt_def (35,640 samples, 0.11%)</title><rect x="32.7681%" y="117" width="0.1138%" height="15" fill="rgb(237,122,38)"/><text x="33.0181%" y="127.50"></text></g><g><title>param_env (109,151 samples, 0.35%)</title><rect x="33.5726%" y="133" width="0.3486%" height="15" fill="rgb(244,218,35)"/><text x="33.8226%" y="143.50"></text></g><g><title>check_item_well_formed (321,864 samples, 1.03%)</title><rect x="32.9843%" y="149" width="1.0278%" height="15" fill="rgb(240,68,47)"/><text x="33.2343%" y="159.50"></text></g><g><title>evaluate_obligation (99,901 samples, 0.32%)</title><rect x="35.2106%" y="133" width="0.3190%" height="15" fill="rgb(210,16,53)"/><text x="35.4606%" y="143.50"></text></g><g><title>implied_outlives_bounds (93,651 samples, 0.30%)</title><rect x="35.5296%" y="133" width="0.2991%" height="15" fill="rgb(235,124,12)"/><text x="35.7796%" y="143.50"></text></g><g><title>param_env (53,410 samples, 0.17%)</title><rect x="35.8286%" y="133" width="0.1706%" height="15" fill="rgb(224,169,11)"/><text x="36.0786%" y="143.50"></text></g><g><title>analysis (7,240,229 samples, 23.12%)</title><rect x="12.9615%" y="197" width="23.1204%" height="15" fill="rgb(250,166,2)"/><text x="13.2115%" y="207.50">analysis</text></g><g><title>type_check_crate (3,190,555 samples, 10.19%)</title><rect x="25.8935%" y="181" width="10.1885%" height="15" fill="rgb(242,216,29)"/><text x="26.1435%" y="191.50">type_check_crate</text></g><g><title>wf_checking (1,001,391 samples, 3.20%)</title><rect x="32.8842%" y="165" width="3.1978%" height="15" fill="rgb(230,116,27)"/><text x="33.1342%" y="175.50">wf_..</text></g><g><title>check_trait_item_well_formed (648,177 samples, 2.07%)</title><rect x="34.0121%" y="149" width="2.0698%" height="15" fill="rgb(228,99,48)"/><text x="34.2621%" y="159.50">c..</text></g><g><title>codegen_module (221,373 samples, 0.71%)</title><rect x="37.4371%" y="181" width="0.7069%" height="15" fill="rgb(253,11,6)"/><text x="37.6871%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (50,740 samples, 0.16%)</title><rect x="38.1457%" y="181" width="0.1620%" height="15" fill="rgb(247,143,39)"/><text x="38.3957%" y="191.50"></text></g><g><title>codegen_crate (699,438 samples, 2.23%)</title><rect x="36.1183%" y="197" width="2.2335%" height="15" fill="rgb(236,97,10)"/><text x="36.3683%" y="207.50">c..</text></g><g><title>codegen_module_optimize (1,385,936 samples, 4.43%)</title><rect x="38.3519%" y="197" width="4.4257%" height="15" fill="rgb(233,208,19)"/><text x="38.6019%" y="207.50">codeg..</text></g><g><title>LLVM_module_optimize (450,765 samples, 1.44%)</title><rect x="41.3382%" y="181" width="1.4394%" height="15" fill="rgb(216,164,2)"/><text x="41.5882%" y="191.50"></text></g><g><title>LLVM_lto_optimize (125,721 samples, 0.40%)</title><rect x="43.4349%" y="181" width="0.4015%" height="15" fill="rgb(220,129,5)"/><text x="43.6849%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,309,194 samples, 4.18%)</title><rect x="43.8364%" y="181" width="4.1807%" height="15" fill="rgb(242,17,10)"/><text x="44.0864%" y="191.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (1,290,734 samples, 4.12%)</title><rect x="43.8953%" y="165" width="4.1217%" height="15" fill="rgb(242,107,0)"/><text x="44.1453%" y="175.50">LLVM..</text></g><g><title>codegen_module_perform_lto (1,662,458 samples, 5.31%)</title><rect x="42.7776%" y="197" width="5.3088%" height="15" fill="rgb(251,28,31)"/><text x="43.0276%" y="207.50">codege..</text></g><g><title>AST_validation (79,891 samples, 0.26%)</title><rect x="48.8285%" y="181" width="0.2551%" height="15" fill="rgb(233,223,10)"/><text x="49.0785%" y="191.50"></text></g><g><title>crate_injection (95,811 samples, 0.31%)</title><rect x="49.1710%" y="181" width="0.3060%" height="15" fill="rgb(215,21,27)"/><text x="49.4210%" y="191.50"></text></g><g><title>metadata_load_macro (138,843 samples, 0.44%)</title><rect x="72.5232%" y="149" width="0.4434%" height="15" fill="rgb(232,23,21)"/><text x="72.7732%" y="159.50"></text></g><g><title>macro_expand_crate (7,577,194 samples, 24.20%)</title><rect x="49.4770%" y="181" width="24.1965%" height="15" fill="rgb(244,5,23)"/><text x="49.7270%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (7,552,294 samples, 24.12%)</title><rect x="49.5565%" y="165" width="24.1170%" height="15" fill="rgb(226,81,46)"/><text x="49.8065%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (221,362 samples, 0.71%)</title><rect x="72.9665%" y="149" width="0.7069%" height="15" fill="rgb(247,70,30)"/><text x="73.2165%" y="159.50"></text></g><g><title>pre_AST_expansion_lint_checks (119,222 samples, 0.38%)</title><rect x="73.6853%" y="181" width="0.3807%" height="15" fill="rgb(212,68,19)"/><text x="73.9353%" y="191.50"></text></g><g><title>finalize_imports (199,202 samples, 0.64%)</title><rect x="74.0887%" y="165" width="0.6361%" height="15" fill="rgb(240,187,13)"/><text x="74.3387%" y="175.50"></text></g><g><title>late_resolve_crate (643,987 samples, 2.06%)</title><rect x="74.7790%" y="165" width="2.0565%" height="15" fill="rgb(223,113,26)"/><text x="75.0290%" y="175.50">l..</text></g><g><title>configure_and_expand (9,043,910 samples, 28.88%)</title><rect x="48.0864%" y="197" width="28.8802%" height="15" fill="rgb(206,192,2)"/><text x="48.3364%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (908,310 samples, 2.90%)</title><rect x="74.0661%" y="181" width="2.9005%" height="15" fill="rgb(241,108,4)"/><text x="74.3161%" y="191.50">re..</text></g><g><title>drop_ast (36,960 samples, 0.12%)</title><rect x="76.9666%" y="197" width="0.1180%" height="15" fill="rgb(247,173,49)"/><text x="77.2166%" y="207.50"></text></g><g><title>early_lint_checks (101,301 samples, 0.32%)</title><rect x="77.1288%" y="197" width="0.3235%" height="15" fill="rgb(224,114,35)"/><text x="77.3788%" y="207.50"></text></g><g><title>free_global_ctxt (1,066,892 samples, 3.41%)</title><rect x="77.4523%" y="197" width="3.4069%" height="15" fill="rgb(245,159,27)"/><text x="77.7023%" y="207.50">fre..</text></g><g><title>crate_hash (75,711 samples, 0.24%)</title><rect x="81.6589%" y="181" width="0.2418%" height="15" fill="rgb(245,172,44)"/><text x="81.9089%" y="191.50"></text></g><g><title>exported_symbols (33,260 samples, 0.11%)</title><rect x="81.9290%" y="181" width="0.1062%" height="15" fill="rgb(236,23,11)"/><text x="82.1790%" y="191.50"></text></g><g><title>is_sized_raw (44,311 samples, 0.14%)</title><rect x="83.1197%" y="149" width="0.1415%" height="15" fill="rgb(205,117,38)"/><text x="83.3697%" y="159.50"></text></g><g><title>evaluate_obligation (35,360 samples, 0.11%)</title><rect x="83.1483%" y="133" width="0.1129%" height="15" fill="rgb(237,72,25)"/><text x="83.3983%" y="143.50"></text></g><g><title>layout_of (98,861 samples, 0.32%)</title><rect x="83.0310%" y="165" width="0.3157%" height="15" fill="rgb(244,70,9)"/><text x="83.2810%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (276,041 samples, 0.88%)</title><rect x="83.3467%" y="165" width="0.8815%" height="15" fill="rgb(217,125,39)"/><text x="83.5967%" y="175.50"></text></g><g><title>optimized_mir (662,516 samples, 2.12%)</title><rect x="82.1371%" y="181" width="2.1156%" height="15" fill="rgb(235,36,10)"/><text x="82.3871%" y="191.50">o..</text></g><g><title>generate_crate_metadata (1,076,631 samples, 3.44%)</title><rect x="80.8592%" y="197" width="3.4380%" height="15" fill="rgb(251,123,47)"/><text x="81.1092%" y="207.50">gen..</text></g><g><title>hir_lowering (532,346 samples, 1.70%)</title><rect x="84.2973%" y="197" width="1.7000%" height="15" fill="rgb(221,13,13)"/><text x="84.5473%" y="207.50"></text></g><g><title>finish_ongoing_codegen (2,066,272 samples, 6.60%)</title><rect x="86.0386%" y="181" width="6.5983%" height="15" fill="rgb(238,131,9)"/><text x="86.2886%" y="191.50">finish_on..</text></g><g><title>link_crate (486,456 samples, 1.55%)</title><rect x="92.6369%" y="181" width="1.5534%" height="15" fill="rgb(211,50,8)"/><text x="92.8869%" y="191.50"></text></g><g><title>link_binary (482,026 samples, 1.54%)</title><rect x="92.6510%" y="165" width="1.5393%" height="15" fill="rgb(245,182,24)"/><text x="92.9010%" y="175.50"></text></g><g><title>link_rlib (294,904 samples, 0.94%)</title><rect x="93.2485%" y="149" width="0.9417%" height="15" fill="rgb(242,14,37)"/><text x="93.4985%" y="159.50"></text></g><g><title>link (2,572,558 samples, 8.22%)</title><rect x="85.9972%" y="197" width="8.2150%" height="15" fill="rgb(246,228,12)"/><text x="86.2472%" y="207.50">link</text></g><g><title>parse_crate (863,350 samples, 2.76%)</title><rect x="94.2122%" y="197" width="2.7570%" height="15" fill="rgb(213,55,15)"/><text x="94.4622%" y="207.50">pa..</text></g><g><title>prepare_outputs (241,323 samples, 0.77%)</title><rect x="96.9997%" y="197" width="0.7706%" height="15" fill="rgb(209,9,3)"/><text x="97.2497%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (313,054 samples, 1.00%)</title><rect x="97.7703%" y="197" width="0.9997%" height="15" fill="rgb(230,59,30)"/><text x="98.0203%" y="207.50"></text></g><g><title>setup_global_ctxt (108,652 samples, 0.35%)</title><rect x="98.7725%" y="197" width="0.3470%" height="15" fill="rgb(209,121,21)"/><text x="99.0225%" y="207.50"></text></g><g><title>all (31,315,285 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (31,315,285 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (275,743 samples, 0.88%)</title><rect x="99.1195%" y="197" width="0.8805%" height="15" fill="rgb(215,41,42)"/><text x="99.3695%" y="207.50"></text></g></svg></svg>