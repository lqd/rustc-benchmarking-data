<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (25,960,798 samples, 12.11%)</title><rect x="0.2282%" y="213" width="12.1053%" height="15" fill="rgb(227,0,7)"/><text x="0.4782%" y="223.50">LLVM_passes</text></g><g><title>param_env (253,684 samples, 0.12%)</title><rect x="19.3467%" y="133" width="0.1183%" height="15" fill="rgb(217,0,24)"/><text x="19.5967%" y="143.50"></text></g><g><title>item_attrs (369,958 samples, 0.17%)</title><rect x="19.7730%" y="101" width="0.1725%" height="15" fill="rgb(221,193,54)"/><text x="20.0230%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (359,718 samples, 0.17%)</title><rect x="19.7778%" y="85" width="0.1677%" height="15" fill="rgb(248,212,6)"/><text x="20.0278%" y="95.50"></text></g><g><title>codegen_fn_attrs (504,419 samples, 0.24%)</title><rect x="19.7204%" y="117" width="0.2352%" height="15" fill="rgb(208,68,35)"/><text x="19.9704%" y="127.50"></text></g><g><title>is_copy_raw (470,168 samples, 0.22%)</title><rect x="21.6325%" y="85" width="0.2192%" height="15" fill="rgb(232,128,0)"/><text x="21.8825%" y="95.50"></text></g><g><title>evaluate_obligation (387,216 samples, 0.18%)</title><rect x="21.6712%" y="69" width="0.1806%" height="15" fill="rgb(207,160,47)"/><text x="21.9212%" y="79.50"></text></g><g><title>needs_drop_raw (650,179 samples, 0.30%)</title><rect x="21.5500%" y="101" width="0.3032%" height="15" fill="rgb(228,23,34)"/><text x="21.8000%" y="111.50"></text></g><g><title>specialization_graph_of (1,260,645 samples, 0.59%)</title><rect x="21.9320%" y="85" width="0.5878%" height="15" fill="rgb(218,30,26)"/><text x="22.1820%" y="95.50"></text></g><g><title>impl_trait_ref (763,740 samples, 0.36%)</title><rect x="22.1637%" y="69" width="0.3561%" height="15" fill="rgb(220,122,19)"/><text x="22.4137%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (697,980 samples, 0.33%)</title><rect x="22.1943%" y="53" width="0.3255%" height="15" fill="rgb(250,228,42)"/><text x="22.4443%" y="63.50"></text></g><g><title>resolve_instance (1,502,567 samples, 0.70%)</title><rect x="21.8532%" y="101" width="0.7006%" height="15" fill="rgb(240,193,28)"/><text x="22.1032%" y="111.50"></text></g><g><title>thir_body (1,464,611 samples, 0.68%)</title><rect x="22.5642%" y="101" width="0.6829%" height="15" fill="rgb(216,20,37)"/><text x="22.8142%" y="111.50"></text></g><g><title>mir_const (9,316,619 samples, 4.34%)</title><rect x="18.9123%" y="149" width="4.3443%" height="15" fill="rgb(206,188,39)"/><text x="19.1623%" y="159.50">mir_c..</text></g><g><title>unsafety_check_result (8,131,411 samples, 3.79%)</title><rect x="19.4649%" y="133" width="3.7916%" height="15" fill="rgb(217,207,13)"/><text x="19.7149%" y="143.50">unsa..</text></g><g><title>mir_built (7,079,096 samples, 3.30%)</title><rect x="19.9556%" y="117" width="3.3009%" height="15" fill="rgb(231,73,38)"/><text x="20.2056%" y="127.50">mir..</text></g><g><title>mir_promoted (10,739,495 samples, 5.01%)</title><rect x="18.4842%" y="165" width="5.0077%" height="15" fill="rgb(225,20,46)"/><text x="18.7342%" y="175.50">mir_pr..</text></g><g><title>mir_const_qualif (504,906 samples, 0.24%)</title><rect x="23.2566%" y="149" width="0.2354%" height="15" fill="rgb(210,31,41)"/><text x="23.5066%" y="159.50"></text></g><g><title>type_op_ascribe_user_type (399,855 samples, 0.19%)</title><rect x="23.4922%" y="165" width="0.1864%" height="15" fill="rgb(221,200,47)"/><text x="23.7422%" y="175.50"></text></g><g><title>type_op_prove_predicate (1,011,399 samples, 0.47%)</title><rect x="23.7637%" y="165" width="0.4716%" height="15" fill="rgb(226,26,5)"/><text x="24.0137%" y="175.50"></text></g><g><title>MIR_borrow_checking (25,194,119 samples, 11.75%)</title><rect x="12.4893%" y="197" width="11.7478%" height="15" fill="rgb(249,33,26)"/><text x="12.7393%" y="207.50">MIR_borrow_checki..</text></g><g><title>mir_borrowck (25,067,737 samples, 11.69%)</title><rect x="12.5482%" y="181" width="11.6889%" height="15" fill="rgb(235,183,28)"/><text x="12.7982%" y="191.50">mir_borrowck</text></g><g><title>codegen_fn_attrs (357,584 samples, 0.17%)</title><rect x="24.5650%" y="165" width="0.1667%" height="15" fill="rgb(221,5,38)"/><text x="24.8150%" y="175.50"></text></g><g><title>check_mod_attrs (628,916 samples, 0.29%)</title><rect x="24.4385%" y="181" width="0.2933%" height="15" fill="rgb(247,18,42)"/><text x="24.6885%" y="191.50"></text></g><g><title>check_mod_unstable_api_usage (450,035 samples, 0.21%)</title><rect x="24.8363%" y="181" width="0.2098%" height="15" fill="rgb(241,131,45)"/><text x="25.0863%" y="191.50"></text></g><g><title>misc_checking_1 (1,378,415 samples, 0.64%)</title><rect x="24.4278%" y="197" width="0.6427%" height="15" fill="rgb(249,31,29)"/><text x="24.6778%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (806,299 samples, 0.38%)</title><rect x="25.0712%" y="181" width="0.3760%" height="15" fill="rgb(225,111,53)"/><text x="25.3212%" y="191.50"></text></g><g><title>check_mod_liveness (687,918 samples, 0.32%)</title><rect x="25.1264%" y="165" width="0.3208%" height="15" fill="rgb(238,160,17)"/><text x="25.3764%" y="175.50"></text></g><g><title>type_uninhabited_from (285,244 samples, 0.13%)</title><rect x="25.3142%" y="149" width="0.1330%" height="15" fill="rgb(214,148,48)"/><text x="25.5642%" y="159.50"></text></g><g><title>type_uninhabited_from (262,933 samples, 0.12%)</title><rect x="25.3246%" y="133" width="0.1226%" height="15" fill="rgb(232,36,49)"/><text x="25.5746%" y="143.50"></text></g><g><title>misc_checking_2 (1,310,445 samples, 0.61%)</title><rect x="25.0705%" y="197" width="0.6111%" height="15" fill="rgb(209,103,24)"/><text x="25.3205%" y="207.50"></text></g><g><title>match_checking (502,706 samples, 0.23%)</title><rect x="25.4472%" y="181" width="0.2344%" height="15" fill="rgb(229,88,8)"/><text x="25.6972%" y="191.50"></text></g><g><title>check_match (472,125 samples, 0.22%)</title><rect x="25.4614%" y="165" width="0.2201%" height="15" fill="rgb(213,181,19)"/><text x="25.7114%" y="175.50"></text></g><g><title>check_private_in_public (245,563 samples, 0.11%)</title><rect x="25.6864%" y="181" width="0.1145%" height="15" fill="rgb(254,191,54)"/><text x="25.9364%" y="191.50"></text></g><g><title>death_checking (481,835 samples, 0.22%)</title><rect x="25.8009%" y="181" width="0.2247%" height="15" fill="rgb(241,83,37)"/><text x="26.0509%" y="191.50"></text></g><g><title>param_env (234,422 samples, 0.11%)</title><rect x="26.4740%" y="149" width="0.1093%" height="15" fill="rgb(233,36,39)"/><text x="26.7240%" y="159.50"></text></g><g><title>crate_lints (2,290,845 samples, 1.07%)</title><rect x="26.0263%" y="165" width="1.0682%" height="15" fill="rgb(226,3,54)"/><text x="26.2763%" y="175.50"></text></g><g><title>type_of (1,084,164 samples, 0.51%)</title><rect x="26.5890%" y="149" width="0.5055%" height="15" fill="rgb(245,192,40)"/><text x="26.8390%" y="159.50"></text></g><g><title>metadata_decode_entry_type_of (852,271 samples, 0.40%)</title><rect x="26.6971%" y="133" width="0.3974%" height="15" fill="rgb(238,167,29)"/><text x="26.9471%" y="143.50"></text></g><g><title>lint_checking (2,894,742 samples, 1.35%)</title><rect x="26.0256%" y="181" width="1.3498%" height="15" fill="rgb(232,182,51)"/><text x="26.2756%" y="191.50"></text></g><g><title>module_lints (602,417 samples, 0.28%)</title><rect x="27.0945%" y="165" width="0.2809%" height="15" fill="rgb(231,60,39)"/><text x="27.3445%" y="175.50"></text></g><g><title>lint_mod (597,507 samples, 0.28%)</title><rect x="27.0968%" y="149" width="0.2786%" height="15" fill="rgb(208,69,12)"/><text x="27.3468%" y="159.50"></text></g><g><title>privacy_access_levels (233,652 samples, 0.11%)</title><rect x="27.3754%" y="181" width="0.1090%" height="15" fill="rgb(235,93,37)"/><text x="27.6254%" y="191.50"></text></g><g><title>privacy_checking_modules (854,920 samples, 0.40%)</title><rect x="27.4844%" y="181" width="0.3986%" height="15" fill="rgb(213,116,39)"/><text x="27.7344%" y="191.50"></text></g><g><title>check_mod_privacy (851,330 samples, 0.40%)</title><rect x="27.4860%" y="165" width="0.3970%" height="15" fill="rgb(222,207,29)"/><text x="27.7360%" y="175.50"></text></g><g><title>misc_checking_3 (4,734,203 samples, 2.21%)</title><rect x="25.6816%" y="197" width="2.2075%" height="15" fill="rgb(206,96,30)"/><text x="25.9316%" y="207.50">m..</text></g><g><title>adt_destructor (288,823 samples, 0.13%)</title><rect x="27.9511%" y="149" width="0.1347%" height="15" fill="rgb(218,138,4)"/><text x="28.2011%" y="159.50"></text></g><g><title>coherent_trait (285,223 samples, 0.13%)</title><rect x="27.9528%" y="133" width="0.1330%" height="15" fill="rgb(250,191,14)"/><text x="28.2028%" y="143.50"></text></g><g><title>specialization_graph_of (283,653 samples, 0.13%)</title><rect x="27.9535%" y="117" width="0.1323%" height="15" fill="rgb(239,60,40)"/><text x="28.2035%" y="127.50"></text></g><g><title>impl_parent (2,321,725 samples, 1.08%)</title><rect x="30.0153%" y="133" width="1.0826%" height="15" fill="rgb(206,27,48)"/><text x="30.2653%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,352,293 samples, 0.63%)</title><rect x="30.4674%" y="117" width="0.6306%" height="15" fill="rgb(225,35,8)"/><text x="30.7174%" y="127.50"></text></g><g><title>impl_trait_ref (5,269,455 samples, 2.46%)</title><rect x="31.0980%" y="133" width="2.4571%" height="15" fill="rgb(250,213,24)"/><text x="31.3480%" y="143.50">im..</text></g><g><title>metadata_decode_entry_impl_trait_ref (4,117,624 samples, 1.92%)</title><rect x="31.6350%" y="117" width="1.9200%" height="15" fill="rgb(247,123,22)"/><text x="31.8850%" y="127.50">m..</text></g><g><title>coherent_trait (12,883,892 samples, 6.01%)</title><rect x="27.9331%" y="165" width="6.0077%" height="15" fill="rgb(231,138,38)"/><text x="28.1831%" y="175.50">coherent..</text></g><g><title>specialization_graph_of (12,317,186 samples, 5.74%)</title><rect x="28.1973%" y="149" width="5.7434%" height="15" fill="rgb(231,145,46)"/><text x="28.4473%" y="159.50">special..</text></g><g><title>trait_impls_of (825,486 samples, 0.38%)</title><rect x="33.5558%" y="133" width="0.3849%" height="15" fill="rgb(251,118,11)"/><text x="33.8058%" y="143.50"></text></g><g><title>implementations_of_trait (223,882 samples, 0.10%)</title><rect x="33.8364%" y="117" width="0.1044%" height="15" fill="rgb(217,147,25)"/><text x="34.0864%" y="127.50"></text></g><g><title>coherence_checking (12,961,604 samples, 6.04%)</title><rect x="27.9243%" y="181" width="6.0439%" height="15" fill="rgb(247,81,37)"/><text x="28.1743%" y="191.50">coherenc..</text></g><g><title>associated_item (921,359 samples, 0.43%)</title><rect x="46.6321%" y="117" width="0.4296%" height="15" fill="rgb(209,12,38)"/><text x="46.8821%" y="127.50"></text></g><g><title>metadata_decode_entry_associated_item (819,929 samples, 0.38%)</title><rect x="46.6794%" y="101" width="0.3823%" height="15" fill="rgb(227,1,9)"/><text x="46.9294%" y="111.50"></text></g><g><title>associated_items (1,139,373 samples, 0.53%)</title><rect x="46.5476%" y="133" width="0.5313%" height="15" fill="rgb(248,47,43)"/><text x="46.7976%" y="143.50"></text></g><g><title>dropck_outlives (470,642 samples, 0.22%)</title><rect x="47.1207%" y="133" width="0.2195%" height="15" fill="rgb(221,10,30)"/><text x="47.3707%" y="143.50"></text></g><g><title>adt_dtorck_constraint (298,401 samples, 0.14%)</title><rect x="47.2010%" y="117" width="0.1391%" height="15" fill="rgb(210,229,1)"/><text x="47.4510%" y="127.50"></text></g><g><title>mir_for_ctfe (220,252 samples, 0.10%)</title><rect x="47.3974%" y="101" width="0.1027%" height="15" fill="rgb(222,148,37)"/><text x="47.6474%" y="111.50"></text></g><g><title>eval_to_const_value_raw (348,704 samples, 0.16%)</title><rect x="47.3402%" y="133" width="0.1626%" height="15" fill="rgb(234,67,33)"/><text x="47.5902%" y="143.50"></text></g><g><title>eval_to_allocation_raw (342,864 samples, 0.16%)</title><rect x="47.3429%" y="117" width="0.1599%" height="15" fill="rgb(247,98,35)"/><text x="47.5929%" y="127.50"></text></g><g><title>generics_of (391,962 samples, 0.18%)</title><rect x="48.8947%" y="117" width="0.1828%" height="15" fill="rgb(247,138,52)"/><text x="49.1447%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (310,822 samples, 0.14%)</title><rect x="48.9325%" y="101" width="0.1449%" height="15" fill="rgb(213,79,30)"/><text x="49.1825%" y="111.50"></text></g><g><title>impl_trait_ref (381,716 samples, 0.18%)</title><rect x="49.1244%" y="117" width="0.1780%" height="15" fill="rgb(246,177,23)"/><text x="49.3744%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (304,066 samples, 0.14%)</title><rect x="49.1606%" y="101" width="0.1418%" height="15" fill="rgb(230,62,27)"/><text x="49.4106%" y="111.50"></text></g><g><title>predicates_of (329,088 samples, 0.15%)</title><rect x="49.3200%" y="117" width="0.1535%" height="15" fill="rgb(216,154,8)"/><text x="49.5700%" y="127.50"></text></g><g><title>specializes (756,728 samples, 0.35%)</title><rect x="49.4734%" y="117" width="0.3529%" height="15" fill="rgb(244,35,45)"/><text x="49.7234%" y="127.50"></text></g><g><title>param_env (439,692 samples, 0.21%)</title><rect x="49.6213%" y="101" width="0.2050%" height="15" fill="rgb(251,115,12)"/><text x="49.8713%" y="111.50"></text></g><g><title>trait_impls_of (592,335 samples, 0.28%)</title><rect x="49.8353%" y="117" width="0.2762%" height="15" fill="rgb(240,54,50)"/><text x="50.0853%" y="127.50"></text></g><g><title>implementations_of_trait (252,971 samples, 0.12%)</title><rect x="49.9936%" y="101" width="0.1180%" height="15" fill="rgb(233,84,52)"/><text x="50.2436%" y="111.50"></text></g><g><title>evaluate_obligation (5,612,790 samples, 2.62%)</title><rect x="47.5028%" y="133" width="2.6172%" height="15" fill="rgb(207,117,47)"/><text x="47.7528%" y="143.50">ev..</text></g><g><title>item_attrs (234,555 samples, 0.11%)</title><rect x="50.3731%" y="133" width="0.1094%" height="15" fill="rgb(249,43,39)"/><text x="50.6231%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (225,434 samples, 0.11%)</title><rect x="50.3774%" y="117" width="0.1051%" height="15" fill="rgb(209,38,44)"/><text x="50.6274%" y="127.50"></text></g><g><title>lint_levels (219,102 samples, 0.10%)</title><rect x="50.4825%" y="133" width="0.1022%" height="15" fill="rgb(236,212,23)"/><text x="50.7325%" y="143.50"></text></g><g><title>evaluate_obligation (234,413 samples, 0.11%)</title><rect x="50.7347%" y="117" width="0.1093%" height="15" fill="rgb(242,79,21)"/><text x="50.9847%" y="127.50"></text></g><g><title>method_autoderef_steps (478,624 samples, 0.22%)</title><rect x="50.6288%" y="133" width="0.2232%" height="15" fill="rgb(211,96,35)"/><text x="50.8788%" y="143.50"></text></g><g><title>predicates_of (458,659 samples, 0.21%)</title><rect x="50.9595%" y="133" width="0.2139%" height="15" fill="rgb(253,215,40)"/><text x="51.2095%" y="143.50"></text></g><g><title>predicates_defined_on (321,916 samples, 0.15%)</title><rect x="51.0233%" y="117" width="0.1501%" height="15" fill="rgb(211,81,21)"/><text x="51.2733%" y="127.50"></text></g><g><title>item_bodies_checking (37,115,202 samples, 17.31%)</title><rect x="33.9850%" y="181" width="17.3066%" height="15" fill="rgb(208,190,38)"/><text x="34.2350%" y="191.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (37,111,542 samples, 17.30%)</title><rect x="33.9867%" y="165" width="17.3048%" height="15" fill="rgb(235,213,38)"/><text x="34.2367%" y="175.50">typeck_item_bodies</text></g><g><title>typeck (37,027,120 samples, 17.27%)</title><rect x="34.0261%" y="149" width="17.2655%" height="15" fill="rgb(237,122,38)"/><text x="34.2761%" y="159.50">typeck</text></g><g><title>generics_of (462,337 samples, 0.22%)</title><rect x="52.9990%" y="117" width="0.2156%" height="15" fill="rgb(244,218,35)"/><text x="53.2490%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (328,205 samples, 0.15%)</title><rect x="53.0616%" y="101" width="0.1530%" height="15" fill="rgb(240,68,47)"/><text x="53.3116%" y="111.50"></text></g><g><title>impl_trait_ref (653,449 samples, 0.30%)</title><rect x="53.2667%" y="117" width="0.3047%" height="15" fill="rgb(210,16,53)"/><text x="53.5167%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (522,707 samples, 0.24%)</title><rect x="53.3277%" y="101" width="0.2437%" height="15" fill="rgb(235,124,12)"/><text x="53.5777%" y="111.50"></text></g><g><title>predicates_of (642,228 samples, 0.30%)</title><rect x="53.5856%" y="117" width="0.2995%" height="15" fill="rgb(224,169,11)"/><text x="53.8356%" y="127.50"></text></g><g><title>predicates_defined_on (359,124 samples, 0.17%)</title><rect x="53.7176%" y="101" width="0.1675%" height="15" fill="rgb(250,166,2)"/><text x="53.9676%" y="111.50"></text></g><g><title>specializes (2,095,042 samples, 0.98%)</title><rect x="53.8850%" y="117" width="0.9769%" height="15" fill="rgb(242,216,29)"/><text x="54.1350%" y="127.50"></text></g><g><title>param_env (1,313,064 samples, 0.61%)</title><rect x="54.2497%" y="101" width="0.6123%" height="15" fill="rgb(230,116,27)"/><text x="54.4997%" y="111.50"></text></g><g><title>def_span (721,318 samples, 0.34%)</title><rect x="54.5256%" y="85" width="0.3363%" height="15" fill="rgb(228,99,48)"/><text x="54.7756%" y="95.50"></text></g><g><title>metadata_decode_entry_def_span (457,765 samples, 0.21%)</title><rect x="54.6485%" y="69" width="0.2135%" height="15" fill="rgb(253,11,6)"/><text x="54.8985%" y="79.50"></text></g><g><title>evaluate_obligation (6,117,137 samples, 2.85%)</title><rect x="52.0448%" y="133" width="2.8524%" height="15" fill="rgb(247,143,39)"/><text x="52.2948%" y="143.50">ev..</text></g><g><title>item_types_checking (7,965,788 samples, 3.71%)</title><rect x="51.2916%" y="181" width="3.7144%" height="15" fill="rgb(236,97,10)"/><text x="51.5416%" y="191.50">item..</text></g><g><title>check_mod_item_types (7,959,768 samples, 3.71%)</title><rect x="51.2944%" y="165" width="3.7116%" height="15" fill="rgb(233,208,19)"/><text x="51.5444%" y="175.50">chec..</text></g><g><title>typeck (7,370,241 samples, 3.44%)</title><rect x="51.5693%" y="149" width="3.4367%" height="15" fill="rgb(216,164,2)"/><text x="51.8193%" y="159.50">typ..</text></g><g><title>fn_sig (323,662 samples, 0.15%)</title><rect x="55.1385%" y="149" width="0.1509%" height="15" fill="rgb(220,129,5)"/><text x="55.3885%" y="159.50"></text></g><g><title>explicit_predicates_of (252,123 samples, 0.12%)</title><rect x="55.4736%" y="117" width="0.1176%" height="15" fill="rgb(242,17,10)"/><text x="55.7236%" y="127.50"></text></g><g><title>predicates_of (693,118 samples, 0.32%)</title><rect x="55.4102%" y="149" width="0.3232%" height="15" fill="rgb(242,107,0)"/><text x="55.6602%" y="159.50"></text></g><g><title>predicates_defined_on (639,937 samples, 0.30%)</title><rect x="55.4350%" y="133" width="0.2984%" height="15" fill="rgb(251,28,31)"/><text x="55.6850%" y="143.50"></text></g><g><title>inferred_outlives_of (304,943 samples, 0.14%)</title><rect x="55.5912%" y="117" width="0.1422%" height="15" fill="rgb(233,223,10)"/><text x="55.8412%" y="127.50"></text></g><g><title>inferred_outlives_crate (280,793 samples, 0.13%)</title><rect x="55.6025%" y="101" width="0.1309%" height="15" fill="rgb(215,21,27)"/><text x="55.8525%" y="111.50"></text></g><g><title>type_collecting (1,661,939 samples, 0.77%)</title><rect x="55.0074%" y="181" width="0.7750%" height="15" fill="rgb(232,23,21)"/><text x="55.2574%" y="191.50"></text></g><g><title>collect_mod_item_types (1,653,139 samples, 0.77%)</title><rect x="55.0115%" y="165" width="0.7708%" height="15" fill="rgb(244,5,23)"/><text x="55.2615%" y="175.50"></text></g><g><title>evaluate_obligation (383,753 samples, 0.18%)</title><rect x="56.7242%" y="149" width="0.1789%" height="15" fill="rgb(226,81,46)"/><text x="56.9742%" y="159.50"></text></g><g><title>param_env (293,473 samples, 0.14%)</title><rect x="56.9773%" y="149" width="0.1368%" height="15" fill="rgb(247,70,30)"/><text x="57.2273%" y="159.50"></text></g><g><title>check_impl_item_well_formed (3,227,259 samples, 1.50%)</title><rect x="55.8851%" y="165" width="1.5048%" height="15" fill="rgb(212,68,19)"/><text x="56.1351%" y="175.50"></text></g><g><title>region_scope_tree (572,901 samples, 0.27%)</title><rect x="57.1228%" y="149" width="0.2671%" height="15" fill="rgb(240,187,13)"/><text x="57.3728%" y="159.50"></text></g><g><title>mir_borrowck (383,445 samples, 0.18%)</title><rect x="58.2606%" y="69" width="0.1788%" height="15" fill="rgb(223,113,26)"/><text x="58.5106%" y="79.50"></text></g><g><title>mir_for_ctfe (516,376 samples, 0.24%)</title><rect x="58.1993%" y="101" width="0.2408%" height="15" fill="rgb(206,192,2)"/><text x="58.4493%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (472,105 samples, 0.22%)</title><rect x="58.2199%" y="85" width="0.2201%" height="15" fill="rgb(241,108,4)"/><text x="58.4699%" y="95.50"></text></g><g><title>eval_to_const_value_raw (754,839 samples, 0.35%)</title><rect x="58.4433%" y="85" width="0.3520%" height="15" fill="rgb(247,173,49)"/><text x="58.6933%" y="95.50"></text></g><g><title>eval_to_const_value_raw (753,859 samples, 0.35%)</title><rect x="58.4437%" y="69" width="0.3515%" height="15" fill="rgb(224,114,35)"/><text x="58.6937%" y="79.50"></text></g><g><title>eval_to_allocation_raw (752,759 samples, 0.35%)</title><rect x="58.4442%" y="53" width="0.3510%" height="15" fill="rgb(245,159,27)"/><text x="58.6942%" y="63.50"></text></g><g><title>typeck (338,454 samples, 0.16%)</title><rect x="58.6374%" y="37" width="0.1578%" height="15" fill="rgb(245,172,44)"/><text x="58.8874%" y="47.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (765,139 samples, 0.36%)</title><rect x="58.4402%" y="101" width="0.3568%" height="15" fill="rgb(236,23,11)"/><text x="58.6902%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,684,019 samples, 0.79%)</title><rect x="58.0578%" y="149" width="0.7852%" height="15" fill="rgb(205,117,38)"/><text x="58.3078%" y="159.50"></text></g><g><title>eval_to_const_value_raw (1,668,809 samples, 0.78%)</title><rect x="58.0649%" y="133" width="0.7782%" height="15" fill="rgb(237,72,25)"/><text x="58.3149%" y="143.50"></text></g><g><title>eval_to_allocation_raw (1,667,259 samples, 0.78%)</title><rect x="58.0656%" y="117" width="0.7774%" height="15" fill="rgb(244,70,9)"/><text x="58.3156%" y="127.50"></text></g><g><title>evaluate_obligation (222,273 samples, 0.10%)</title><rect x="58.8430%" y="149" width="0.1036%" height="15" fill="rgb(217,125,39)"/><text x="59.0930%" y="159.50"></text></g><g><title>param_env (255,642 samples, 0.12%)</title><rect x="58.9942%" y="149" width="0.1192%" height="15" fill="rgb(235,36,10)"/><text x="59.2442%" y="159.50"></text></g><g><title>analysis (100,602,968 samples, 46.91%)</title><rect x="12.3336%" y="213" width="46.9104%" height="15" fill="rgb(251,123,47)"/><text x="12.5836%" y="223.50">analysis</text></g><g><title>type_check_crate (67,242,977 samples, 31.35%)</title><rect x="27.8891%" y="197" width="31.3549%" height="15" fill="rgb(221,13,13)"/><text x="28.1391%" y="207.50">type_check_crate</text></g><g><title>wf_checking (7,417,973 samples, 3.46%)</title><rect x="55.7851%" y="181" width="3.4589%" height="15" fill="rgb(238,131,9)"/><text x="56.0351%" y="191.50">wf_..</text></g><g><title>check_item_well_formed (3,976,283 samples, 1.85%)</title><rect x="57.3899%" y="165" width="1.8541%" height="15" fill="rgb(211,50,8)"/><text x="57.6399%" y="175.50">c..</text></g><g><title>fn_abi_of_instance (481,496 samples, 0.22%)</title><rect x="59.9604%" y="181" width="0.2245%" height="15" fill="rgb(245,182,24)"/><text x="60.2104%" y="191.50"></text></g><g><title>codegen_module (1,627,698 samples, 0.76%)</title><rect x="59.4895%" y="197" width="0.7590%" height="15" fill="rgb(242,14,37)"/><text x="59.7395%" y="207.50"></text></g><g><title>eval_to_const_value_raw (242,381 samples, 0.11%)</title><rect x="60.5881%" y="117" width="0.1130%" height="15" fill="rgb(246,228,12)"/><text x="60.8381%" y="127.50"></text></g><g><title>eval_to_const_value_raw (235,011 samples, 0.11%)</title><rect x="60.5915%" y="101" width="0.1096%" height="15" fill="rgb(213,55,15)"/><text x="60.8415%" y="111.50"></text></g><g><title>eval_to_allocation_raw (222,661 samples, 0.10%)</title><rect x="60.5973%" y="85" width="0.1038%" height="15" fill="rgb(209,9,3)"/><text x="60.8473%" y="95.50"></text></g><g><title>optimized_mir (822,099 samples, 0.38%)</title><rect x="60.3196%" y="149" width="0.3833%" height="15" fill="rgb(230,59,30)"/><text x="60.5696%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (269,942 samples, 0.13%)</title><rect x="60.5771%" y="133" width="0.1259%" height="15" fill="rgb(209,121,21)"/><text x="60.8271%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (1,018,971 samples, 0.48%)</title><rect x="60.2594%" y="165" width="0.4751%" height="15" fill="rgb(220,109,13)"/><text x="60.5094%" y="175.50"></text></g><g><title>monomorphization_collector (1,054,571 samples, 0.49%)</title><rect x="60.2584%" y="181" width="0.4917%" height="15" fill="rgb(232,18,1)"/><text x="60.5084%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (1,153,343 samples, 0.54%)</title><rect x="60.2486%" y="197" width="0.5378%" height="15" fill="rgb(215,41,42)"/><text x="60.4986%" y="207.50"></text></g><g><title>codegen_crate (3,372,778 samples, 1.57%)</title><rect x="59.2469%" y="213" width="1.5727%" height="15" fill="rgb(224,123,36)"/><text x="59.4969%" y="223.50"></text></g><g><title>codegen_module_optimize (11,293,096 samples, 5.27%)</title><rect x="60.8196%" y="213" width="5.2659%" height="15" fill="rgb(240,125,3)"/><text x="61.0696%" y="223.50">codege..</text></g><g><title>LLVM_module_optimize (10,066,692 samples, 4.69%)</title><rect x="61.3915%" y="197" width="4.6940%" height="15" fill="rgb(205,98,50)"/><text x="61.6415%" y="207.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (4,365,848 samples, 2.04%)</title><rect x="66.4529%" y="197" width="2.0358%" height="15" fill="rgb(205,185,37)"/><text x="66.7029%" y="207.50">L..</text></g><g><title>LLVM_module_codegen (8,879,039 samples, 4.14%)</title><rect x="68.4886%" y="197" width="4.1402%" height="15" fill="rgb(238,207,15)"/><text x="68.7386%" y="207.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (8,734,867 samples, 4.07%)</title><rect x="68.5559%" y="181" width="4.0730%" height="15" fill="rgb(213,199,42)"/><text x="68.8059%" y="191.50">LLVM..</text></g><g><title>codegen_module_perform_lto (14,130,827 samples, 6.59%)</title><rect x="66.0855%" y="213" width="6.5891%" height="15" fill="rgb(235,201,11)"/><text x="66.3355%" y="223.50">codegen_m..</text></g><g><title>metadata_register_crate (1,256,714 samples, 0.59%)</title><rect x="77.3203%" y="165" width="0.5860%" height="15" fill="rgb(207,46,11)"/><text x="77.5703%" y="175.50"></text></g><g><title>metadata_register_crate (440,986 samples, 0.21%)</title><rect x="77.7007%" y="149" width="0.2056%" height="15" fill="rgb(241,35,35)"/><text x="77.9507%" y="159.50"></text></g><g><title>macro_expand_crate (11,006,032 samples, 5.13%)</title><rect x="72.8494%" y="197" width="5.1320%" height="15" fill="rgb(243,32,47)"/><text x="73.0994%" y="207.50">macro_..</text></g><g><title>expand_crate (10,991,392 samples, 5.13%)</title><rect x="72.8563%" y="181" width="5.1252%" height="15" fill="rgb(247,202,23)"/><text x="73.1063%" y="191.50">expand..</text></g><g><title>late_resolve_crate (2,152,624 samples, 1.00%)</title><rect x="78.1206%" y="181" width="1.0038%" height="15" fill="rgb(219,102,11)"/><text x="78.3706%" y="191.50"></text></g><g><title>configure_and_expand (13,950,836 samples, 6.51%)</title><rect x="72.6746%" y="213" width="6.5052%" height="15" fill="rgb(243,110,44)"/><text x="72.9246%" y="223.50">configure..</text></g><g><title>resolve_crate (2,461,948 samples, 1.15%)</title><rect x="78.0318%" y="197" width="1.1480%" height="15" fill="rgb(222,74,54)"/><text x="78.2818%" y="207.50"></text></g><g><title>early_lint_checks (417,924 samples, 0.19%)</title><rect x="79.2646%" y="213" width="0.1949%" height="15" fill="rgb(216,99,12)"/><text x="79.5146%" y="223.50"></text></g><g><title>free_global_ctxt (4,324,778 samples, 2.02%)</title><rect x="79.4595%" y="213" width="2.0166%" height="15" fill="rgb(226,22,26)"/><text x="79.7095%" y="223.50">f..</text></g><g><title>exported_symbols (214,942 samples, 0.10%)</title><rect x="82.4186%" y="197" width="0.1002%" height="15" fill="rgb(217,163,10)"/><text x="82.6686%" y="207.50"></text></g><g><title>layout_of (594,688 samples, 0.28%)</title><rect x="84.4627%" y="181" width="0.2773%" height="15" fill="rgb(213,25,53)"/><text x="84.7127%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,414,129 samples, 2.06%)</title><rect x="84.7400%" y="181" width="2.0583%" height="15" fill="rgb(252,105,26)"/><text x="84.9900%" y="191.50">m..</text></g><g><title>optimized_mir (9,140,295 samples, 4.26%)</title><rect x="82.5690%" y="197" width="4.2621%" height="15" fill="rgb(220,39,43)"/><text x="82.8190%" y="207.50">optim..</text></g><g><title>generate_crate_metadata (11,596,158 samples, 5.41%)</title><rect x="81.4761%" y="213" width="5.4072%" height="15" fill="rgb(229,68,48)"/><text x="81.7261%" y="223.50">generat..</text></g><g><title>hir_lowering (3,121,035 samples, 1.46%)</title><rect x="86.8833%" y="213" width="1.4553%" height="15" fill="rgb(252,8,32)"/><text x="87.1333%" y="223.50"></text></g><g><title>finish_ongoing_codegen (20,854,512 samples, 9.72%)</title><rect x="88.3458%" y="197" width="9.7243%" height="15" fill="rgb(223,20,43)"/><text x="88.5958%" y="207.50">finish_ongoing..</text></g><g><title>link_crate (1,113,823 samples, 0.52%)</title><rect x="98.0701%" y="197" width="0.5194%" height="15" fill="rgb(229,81,49)"/><text x="98.3201%" y="207.50"></text></g><g><title>link_binary (1,081,102 samples, 0.50%)</title><rect x="98.0854%" y="181" width="0.5041%" height="15" fill="rgb(236,28,36)"/><text x="98.3354%" y="191.50"></text></g><g><title>link_rlib (795,499 samples, 0.37%)</title><rect x="98.2186%" y="165" width="0.3709%" height="15" fill="rgb(249,185,26)"/><text x="98.4686%" y="175.50"></text></g><g><title>link (21,993,365 samples, 10.26%)</title><rect x="88.3386%" y="213" width="10.2553%" height="15" fill="rgb(249,174,33)"/><text x="88.5886%" y="223.50">link</text></g><g><title>parse_crate (1,328,395 samples, 0.62%)</title><rect x="98.5940%" y="213" width="0.6194%" height="15" fill="rgb(233,201,37)"/><text x="98.8440%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (965,030 samples, 0.45%)</title><rect x="99.3125%" y="213" width="0.4500%" height="15" fill="rgb(221,78,26)"/><text x="99.5625%" y="223.50"></text></g><g><title>all (214,457,522 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (214,457,522 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (422,694 samples, 0.20%)</title><rect x="99.8029%" y="213" width="0.1971%" height="15" fill="rgb(229,67,23)"/><text x="100.0529%" y="223.50"></text></g></svg></svg>