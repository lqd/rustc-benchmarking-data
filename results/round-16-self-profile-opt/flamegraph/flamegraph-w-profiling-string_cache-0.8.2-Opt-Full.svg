<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (136,935,249 samples, 14.29%)</title><rect x="0.0551%" y="261" width="14.2924%" height="15" fill="rgb(227,0,7)"/><text x="0.3051%" y="271.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,016,831 samples, 0.11%)</title><rect x="14.2414%" y="245" width="0.1061%" height="15" fill="rgb(217,0,24)"/><text x="14.4914%" y="255.50"></text></g><g><title>LLVM_thin_lto_global_analysis (997,741 samples, 0.10%)</title><rect x="14.2434%" y="229" width="0.1041%" height="15" fill="rgb(221,193,54)"/><text x="14.4934%" y="239.50"></text></g><g><title>needs_drop_raw (1,098,751 samples, 0.11%)</title><rect x="16.0398%" y="149" width="0.1147%" height="15" fill="rgb(248,212,6)"/><text x="16.2898%" y="159.50"></text></g><g><title>specialization_graph_of (1,064,202 samples, 0.11%)</title><rect x="16.2454%" y="133" width="0.1111%" height="15" fill="rgb(208,68,35)"/><text x="16.4954%" y="143.50"></text></g><g><title>resolve_instance (2,052,282 samples, 0.21%)</title><rect x="16.1545%" y="149" width="0.2142%" height="15" fill="rgb(232,128,0)"/><text x="16.4045%" y="159.50"></text></g><g><title>mir_const (8,474,086 samples, 0.88%)</title><rect x="15.5850%" y="197" width="0.8845%" height="15" fill="rgb(207,160,47)"/><text x="15.8350%" y="207.50"></text></g><g><title>unsafety_check_result (7,380,448 samples, 0.77%)</title><rect x="15.6991%" y="181" width="0.7703%" height="15" fill="rgb(228,23,34)"/><text x="15.9491%" y="191.50"></text></g><g><title>mir_built (6,469,147 samples, 0.68%)</title><rect x="15.7942%" y="165" width="0.6752%" height="15" fill="rgb(218,30,26)"/><text x="16.0442%" y="175.50"></text></g><g><title>mir_promoted (10,196,469 samples, 1.06%)</title><rect x="15.5104%" y="213" width="1.0642%" height="15" fill="rgb(220,122,19)"/><text x="15.7604%" y="223.50"></text></g><g><title>mir_const_qualif (1,008,120 samples, 0.11%)</title><rect x="16.4694%" y="197" width="0.1052%" height="15" fill="rgb(250,228,42)"/><text x="16.7194%" y="207.50"></text></g><g><title>type_op_prove_predicate (2,184,384 samples, 0.23%)</title><rect x="16.7340%" y="213" width="0.2280%" height="15" fill="rgb(240,193,28)"/><text x="16.9840%" y="223.50"></text></g><g><title>MIR_borrow_checking (24,802,677 samples, 2.59%)</title><rect x="14.3739%" y="245" width="2.5887%" height="15" fill="rgb(216,20,37)"/><text x="14.6239%" y="255.50">MI..</text></g><g><title>mir_borrowck (24,683,656 samples, 2.58%)</title><rect x="14.3864%" y="229" width="2.5763%" height="15" fill="rgb(206,188,39)"/><text x="14.6364%" y="239.50">mi..</text></g><g><title>misc_checking_1 (1,347,265 samples, 0.14%)</title><rect x="17.0088%" y="245" width="0.1406%" height="15" fill="rgb(217,207,13)"/><text x="17.2588%" y="255.50"></text></g><g><title>misc_checking_2 (1,388,866 samples, 0.14%)</title><rect x="17.1495%" y="245" width="0.1450%" height="15" fill="rgb(231,73,38)"/><text x="17.3995%" y="255.50"></text></g><g><title>crate_lints (3,145,715 samples, 0.33%)</title><rect x="17.3709%" y="213" width="0.3283%" height="15" fill="rgb(225,20,46)"/><text x="17.6209%" y="223.50"></text></g><g><title>type_of (1,182,193 samples, 0.12%)</title><rect x="17.5758%" y="197" width="0.1234%" height="15" fill="rgb(210,31,41)"/><text x="17.8258%" y="207.50"></text></g><g><title>lint_checking (3,585,660 samples, 0.37%)</title><rect x="17.3707%" y="229" width="0.3742%" height="15" fill="rgb(221,200,47)"/><text x="17.6207%" y="239.50"></text></g><g><title>misc_checking_3 (5,375,570 samples, 0.56%)</title><rect x="17.2944%" y="245" width="0.5611%" height="15" fill="rgb(226,26,5)"/><text x="17.5444%" y="255.50"></text></g><g><title>impl_parent (3,025,812 samples, 0.32%)</title><rect x="18.4069%" y="181" width="0.3158%" height="15" fill="rgb(249,33,26)"/><text x="18.6569%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,720,397 samples, 0.18%)</title><rect x="18.5432%" y="165" width="0.1796%" height="15" fill="rgb(235,183,28)"/><text x="18.7932%" y="175.50"></text></g><g><title>impl_trait_ref (6,492,222 samples, 0.68%)</title><rect x="18.7227%" y="181" width="0.6776%" height="15" fill="rgb(221,5,38)"/><text x="18.9727%" y="191.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,278,786 samples, 0.55%)</title><rect x="18.8494%" y="165" width="0.5510%" height="15" fill="rgb(247,18,42)"/><text x="19.0994%" y="175.50"></text></g><g><title>trait_impls_of (1,229,895 samples, 0.13%)</title><rect x="19.4025%" y="181" width="0.1284%" height="15" fill="rgb(241,131,45)"/><text x="19.6525%" y="191.50"></text></g><g><title>coherent_trait (15,946,918 samples, 1.66%)</title><rect x="17.8666%" y="213" width="1.6644%" height="15" fill="rgb(249,31,29)"/><text x="18.1166%" y="223.50"></text></g><g><title>specialization_graph_of (15,915,728 samples, 1.66%)</title><rect x="17.8698%" y="197" width="1.6612%" height="15" fill="rgb(225,111,53)"/><text x="18.1198%" y="207.50"></text></g><g><title>coherence_checking (16,110,469 samples, 1.68%)</title><rect x="17.8637%" y="229" width="1.6815%" height="15" fill="rgb(238,160,17)"/><text x="18.1137%" y="239.50"></text></g><g><title>associated_items (1,076,424 samples, 0.11%)</title><rect x="21.1565%" y="181" width="0.1124%" height="15" fill="rgb(214,148,48)"/><text x="21.4065%" y="191.50"></text></g><g><title>evaluate_obligation (4,079,452 samples, 0.43%)</title><rect x="21.3498%" y="181" width="0.4258%" height="15" fill="rgb(232,36,49)"/><text x="21.5998%" y="191.50"></text></g><g><title>evaluate_obligation (3,144,646 samples, 0.33%)</title><rect x="22.4013%" y="165" width="0.3282%" height="15" fill="rgb(209,103,24)"/><text x="22.6513%" y="175.50"></text></g><g><title>typeck (7,931,828 samples, 0.83%)</title><rect x="21.9915%" y="181" width="0.8279%" height="15" fill="rgb(229,88,8)"/><text x="22.2415%" y="191.50"></text></g><g><title>item_bodies_checking (31,396,421 samples, 3.28%)</title><rect x="19.5489%" y="229" width="3.2770%" height="15" fill="rgb(213,181,19)"/><text x="19.7989%" y="239.50">ite..</text></g><g><title>typeck_item_bodies (31,393,121 samples, 3.28%)</title><rect x="19.5493%" y="213" width="3.2766%" height="15" fill="rgb(254,191,54)"/><text x="19.7993%" y="223.50">typ..</text></g><g><title>typeck (31,316,040 samples, 3.27%)</title><rect x="19.5573%" y="197" width="3.2686%" height="15" fill="rgb(241,83,37)"/><text x="19.8073%" y="207.50">typ..</text></g><g><title>evaluate_obligation (1,188,104 samples, 0.12%)</title><rect x="23.1164%" y="181" width="0.1240%" height="15" fill="rgb(233,36,39)"/><text x="23.3664%" y="191.50"></text></g><g><title>item_types_checking (4,034,806 samples, 0.42%)</title><rect x="22.8259%" y="229" width="0.4211%" height="15" fill="rgb(226,3,54)"/><text x="23.0759%" y="239.50"></text></g><g><title>check_mod_item_types (4,027,976 samples, 0.42%)</title><rect x="22.8266%" y="213" width="0.4204%" height="15" fill="rgb(245,192,40)"/><text x="23.0766%" y="223.50"></text></g><g><title>typeck (2,653,220 samples, 0.28%)</title><rect x="22.9701%" y="197" width="0.2769%" height="15" fill="rgb(238,167,29)"/><text x="23.2201%" y="207.50"></text></g><g><title>type_collecting (2,126,924 samples, 0.22%)</title><rect x="23.2474%" y="229" width="0.2220%" height="15" fill="rgb(232,182,51)"/><text x="23.4974%" y="239.50"></text></g><g><title>collect_mod_item_types (2,117,214 samples, 0.22%)</title><rect x="23.2484%" y="213" width="0.2210%" height="15" fill="rgb(231,60,39)"/><text x="23.4984%" y="223.50"></text></g><g><title>check_impl_item_well_formed (3,343,570 samples, 0.35%)</title><rect x="23.4928%" y="213" width="0.3490%" height="15" fill="rgb(208,69,12)"/><text x="23.7428%" y="223.50"></text></g><g><title>impl_trait_ref (1,092,665 samples, 0.11%)</title><rect x="24.5436%" y="53" width="0.1140%" height="15" fill="rgb(235,93,37)"/><text x="24.7936%" y="63.50"></text></g><g><title>specializes (1,875,204 samples, 0.20%)</title><rect x="24.7279%" y="53" width="0.1957%" height="15" fill="rgb(213,116,39)"/><text x="24.9779%" y="63.50"></text></g><g><title>param_env (1,105,814 samples, 0.12%)</title><rect x="24.8082%" y="37" width="0.1154%" height="15" fill="rgb(222,207,29)"/><text x="25.0582%" y="47.50"></text></g><g><title>evaluate_obligation (6,531,943 samples, 0.68%)</title><rect x="24.2503%" y="69" width="0.6818%" height="15" fill="rgb(206,96,30)"/><text x="24.5003%" y="79.50"></text></g><g><title>eval_to_const_value_raw (7,953,230 samples, 0.83%)</title><rect x="24.1252%" y="133" width="0.8301%" height="15" fill="rgb(218,138,4)"/><text x="24.3752%" y="143.50"></text></g><g><title>eval_to_const_value_raw (7,951,560 samples, 0.83%)</title><rect x="24.1253%" y="117" width="0.8299%" height="15" fill="rgb(250,191,14)"/><text x="24.3753%" y="127.50"></text></g><g><title>eval_to_allocation_raw (7,947,159 samples, 0.83%)</title><rect x="24.1258%" y="101" width="0.8295%" height="15" fill="rgb(239,60,40)"/><text x="24.3758%" y="111.50"></text></g><g><title>typeck (7,642,736 samples, 0.80%)</title><rect x="24.1576%" y="85" width="0.7977%" height="15" fill="rgb(206,27,48)"/><text x="24.4076%" y="95.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (7,964,590 samples, 0.83%)</title><rect x="24.1244%" y="149" width="0.8313%" height="15" fill="rgb(225,35,8)"/><text x="24.3744%" y="159.50"></text></g><g><title>eval_to_const_value_raw (8,909,370 samples, 0.93%)</title><rect x="24.0367%" y="197" width="0.9299%" height="15" fill="rgb(250,213,24)"/><text x="24.2867%" y="207.50"></text></g><g><title>eval_to_const_value_raw (8,894,510 samples, 0.93%)</title><rect x="24.0382%" y="181" width="0.9284%" height="15" fill="rgb(247,123,22)"/><text x="24.2882%" y="191.50"></text></g><g><title>eval_to_allocation_raw (8,892,370 samples, 0.93%)</title><rect x="24.0385%" y="165" width="0.9281%" height="15" fill="rgb(231,138,38)"/><text x="24.2885%" y="175.50"></text></g><g><title>check_item_well_formed (12,541,310 samples, 1.31%)</title><rect x="23.8418%" y="213" width="1.3090%" height="15" fill="rgb(231,145,46)"/><text x="24.0918%" y="223.50"></text></g><g><title>analysis (103,572,908 samples, 10.81%)</title><rect x="14.3476%" y="261" width="10.8103%" height="15" fill="rgb(251,118,11)"/><text x="14.5976%" y="271.50">analysis</text></g><g><title>type_check_crate (69,963,702 samples, 7.30%)</title><rect x="17.8555%" y="245" width="7.3024%" height="15" fill="rgb(217,147,25)"/><text x="18.1055%" y="255.50">type_check..</text></g><g><title>wf_checking (16,171,461 samples, 1.69%)</title><rect x="23.4700%" y="229" width="1.6879%" height="15" fill="rgb(247,81,37)"/><text x="23.7200%" y="239.50"></text></g><g><title>layout_of (1,506,015 samples, 0.16%)</title><rect x="28.8246%" y="213" width="0.1572%" height="15" fill="rgb(209,12,38)"/><text x="29.0746%" y="223.50"></text></g><g><title>param_env (2,366,110 samples, 0.25%)</title><rect x="28.9818%" y="213" width="0.2470%" height="15" fill="rgb(227,1,9)"/><text x="29.2318%" y="223.50"></text></g><g><title>fn_abi_of_instance (8,685,249 samples, 0.91%)</title><rect x="28.3564%" y="229" width="0.9065%" height="15" fill="rgb(248,47,43)"/><text x="28.6064%" y="239.50"></text></g><g><title>codegen_module (39,099,498 samples, 4.08%)</title><rect x="25.3072%" y="245" width="4.0810%" height="15" fill="rgb(221,10,30)"/><text x="25.5572%" y="255.50">code..</text></g><g><title>item_attrs (959,138 samples, 0.10%)</title><rect x="29.6078%" y="181" width="0.1001%" height="15" fill="rgb(210,229,1)"/><text x="29.8578%" y="191.50"></text></g><g><title>codegen_fn_attrs (1,517,253 samples, 0.16%)</title><rect x="29.5819%" y="197" width="0.1584%" height="15" fill="rgb(222,148,37)"/><text x="29.8319%" y="207.50"></text></g><g><title>mir_shims (1,417,615 samples, 0.15%)</title><rect x="29.8032%" y="197" width="0.1480%" height="15" fill="rgb(234,67,33)"/><text x="30.0532%" y="207.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,791,298 samples, 0.19%)</title><rect x="30.0221%" y="181" width="0.1870%" height="15" fill="rgb(247,98,35)"/><text x="30.2721%" y="191.50"></text></g><g><title>optimized_mir (3,094,112 samples, 0.32%)</title><rect x="29.9511%" y="197" width="0.3229%" height="15" fill="rgb(247,138,52)"/><text x="30.2011%" y="207.50"></text></g><g><title>codegen_fulfill_obligation (2,048,290 samples, 0.21%)</title><rect x="30.3575%" y="181" width="0.2138%" height="15" fill="rgb(213,79,30)"/><text x="30.6075%" y="191.50"></text></g><g><title>resolve_instance (4,129,526 samples, 0.43%)</title><rect x="30.2741%" y="197" width="0.4310%" height="15" fill="rgb(246,177,23)"/><text x="30.5241%" y="207.50"></text></g><g><title>monomorphization_collector_graph_walk (13,466,061 samples, 1.41%)</title><rect x="29.3928%" y="213" width="1.4055%" height="15" fill="rgb(230,62,27)"/><text x="29.6428%" y="223.50"></text></g><g><title>monomorphization_collector (13,519,442 samples, 1.41%)</title><rect x="29.3925%" y="229" width="1.4111%" height="15" fill="rgb(216,154,8)"/><text x="29.6425%" y="239.50"></text></g><g><title>assert_symbols_are_distinct (1,715,619 samples, 0.18%)</title><rect x="30.8040%" y="213" width="0.1791%" height="15" fill="rgb(244,35,45)"/><text x="31.0540%" y="223.50"></text></g><g><title>symbol_name (1,532,996 samples, 0.16%)</title><rect x="30.8231%" y="197" width="0.1600%" height="15" fill="rgb(251,115,12)"/><text x="31.0731%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (15,877,928 samples, 1.66%)</title><rect x="29.3891%" y="245" width="1.6572%" height="15" fill="rgb(240,54,50)"/><text x="29.6391%" y="255.50"></text></g><g><title>partition_and_assert_distinct_symbols (2,325,916 samples, 0.24%)</title><rect x="30.8036%" y="229" width="0.2428%" height="15" fill="rgb(233,84,52)"/><text x="31.0536%" y="239.50"></text></g><g><title>codegen_crate (56,501,122 samples, 5.90%)</title><rect x="25.1584%" y="261" width="5.8972%" height="15" fill="rgb(207,117,47)"/><text x="25.4084%" y="271.50">codegen..</text></g><g><title>codegen_module_optimize (332,367,359 samples, 34.69%)</title><rect x="31.0557%" y="261" width="34.6904%" height="15" fill="rgb(249,43,39)"/><text x="31.3057%" y="271.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (321,151,334 samples, 33.52%)</title><rect x="32.2263%" y="245" width="33.5198%" height="15" fill="rgb(209,38,44)"/><text x="32.4763%" y="255.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (78,408,856 samples, 8.18%)</title><rect x="66.4317%" y="245" width="8.1838%" height="15" fill="rgb(236,212,23)"/><text x="66.6817%" y="255.50">LLVM_lto_op..</text></g><g><title>LLVM_module_codegen (95,037,452 samples, 9.92%)</title><rect x="74.6155%" y="245" width="9.9194%" height="15" fill="rgb(242,79,21)"/><text x="74.8655%" y="255.50">LLVM_module_co..</text></g><g><title>LLVM_module_codegen_emit_obj (93,589,016 samples, 9.77%)</title><rect x="74.7667%" y="229" width="9.7682%" height="15" fill="rgb(211,96,35)"/><text x="75.0167%" y="239.50">LLVM_module_co..</text></g><g><title>LLVM_thin_lto_import (10,657,180 samples, 1.11%)</title><rect x="84.5349%" y="245" width="1.1123%" height="15" fill="rgb(253,215,40)"/><text x="84.7849%" y="255.50"></text></g><g><title>codegen_module_perform_lto (191,019,835 samples, 19.94%)</title><rect x="65.7461%" y="261" width="19.9375%" height="15" fill="rgb(211,81,21)"/><text x="65.9961%" y="271.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (1,723,689 samples, 0.18%)</title><rect x="86.8740%" y="213" width="0.1799%" height="15" fill="rgb(208,190,38)"/><text x="87.1240%" y="223.50"></text></g><g><title>macro_expand_crate (12,876,814 samples, 1.34%)</title><rect x="85.7230%" y="245" width="1.3440%" height="15" fill="rgb(235,213,38)"/><text x="85.9730%" y="255.50"></text></g><g><title>expand_crate (12,866,684 samples, 1.34%)</title><rect x="85.7241%" y="229" width="1.3429%" height="15" fill="rgb(237,122,38)"/><text x="85.9741%" y="239.50"></text></g><g><title>late_resolve_crate (2,077,253 samples, 0.22%)</title><rect x="87.0859%" y="229" width="0.2168%" height="15" fill="rgb(244,218,35)"/><text x="87.3359%" y="239.50"></text></g><g><title>configure_and_expand (15,608,495 samples, 1.63%)</title><rect x="85.6835%" y="261" width="1.6291%" height="15" fill="rgb(240,68,47)"/><text x="85.9335%" y="271.50"></text></g><g><title>resolve_crate (2,310,476 samples, 0.24%)</title><rect x="87.0715%" y="245" width="0.2412%" height="15" fill="rgb(210,16,53)"/><text x="87.3215%" y="255.50"></text></g><g><title>free_global_ctxt (8,408,863 samples, 0.88%)</title><rect x="87.3680%" y="261" width="0.8777%" height="15" fill="rgb(235,124,12)"/><text x="87.6180%" y="271.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,665,240 samples, 0.28%)</title><rect x="88.7985%" y="229" width="0.2782%" height="15" fill="rgb(224,169,11)"/><text x="89.0485%" y="239.50"></text></g><g><title>optimized_mir (6,071,417 samples, 0.63%)</title><rect x="88.4529%" y="245" width="0.6337%" height="15" fill="rgb(250,166,2)"/><text x="88.7029%" y="255.50"></text></g><g><title>generate_crate_metadata (8,130,590 samples, 0.85%)</title><rect x="88.2456%" y="261" width="0.8486%" height="15" fill="rgb(242,216,29)"/><text x="88.4956%" y="271.50"></text></g><g><title>hir_lowering (2,377,357 samples, 0.25%)</title><rect x="89.0942%" y="261" width="0.2481%" height="15" fill="rgb(230,116,27)"/><text x="89.3442%" y="271.50"></text></g><g><title>finish_ongoing_codegen (96,057,084 samples, 10.03%)</title><rect x="89.3458%" y="245" width="10.0258%" height="15" fill="rgb(228,99,48)"/><text x="89.5958%" y="255.50">finish_ongoing..</text></g><g><title>link_crate (2,536,879 samples, 0.26%)</title><rect x="99.3716%" y="245" width="0.2648%" height="15" fill="rgb(253,11,6)"/><text x="99.6216%" y="255.50"></text></g><g><title>link_binary (2,510,859 samples, 0.26%)</title><rect x="99.3743%" y="229" width="0.2621%" height="15" fill="rgb(247,143,39)"/><text x="99.6243%" y="239.50"></text></g><g><title>link_rlib (1,530,627 samples, 0.16%)</title><rect x="99.4767%" y="213" width="0.1598%" height="15" fill="rgb(236,97,10)"/><text x="99.7267%" y="223.50"></text></g><g><title>link (98,641,613 samples, 10.30%)</title><rect x="89.3424%" y="261" width="10.2956%" height="15" fill="rgb(233,208,19)"/><text x="89.5924%" y="271.50">link</text></g><g><title>self_profile_alloc_query_strings (2,543,889 samples, 0.27%)</title><rect x="99.6842%" y="261" width="0.2655%" height="15" fill="rgb(216,164,2)"/><text x="99.9342%" y="271.50"></text></g><g><title>all (958,095,521 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (958,095,521 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="287.50">rustc</text></g></svg></svg>