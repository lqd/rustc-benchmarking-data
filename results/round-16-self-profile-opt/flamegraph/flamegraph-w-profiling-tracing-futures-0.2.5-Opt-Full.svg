<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,744,034 samples, 5.56%)</title><rect x="0.6104%" y="181" width="5.5569%" height="15" fill="rgb(227,0,7)"/><text x="0.8604%" y="191.50">LLVM_pa..</text></g><g><title>codegen_generate_lto_work (107,001 samples, 0.10%)</title><rect x="6.0637%" y="165" width="0.1035%" height="15" fill="rgb(217,0,24)"/><text x="6.3137%" y="175.50"></text></g><g><title>codegen_fn_attrs (118,591 samples, 0.11%)</title><rect x="11.3412%" y="85" width="0.1147%" height="15" fill="rgb(221,193,54)"/><text x="11.5912%" y="95.50"></text></g><g><title>adt_drop_tys (145,002 samples, 0.14%)</title><rect x="12.4139%" y="53" width="0.1403%" height="15" fill="rgb(248,212,6)"/><text x="12.6639%" y="63.50"></text></g><g><title>needs_drop_raw (514,757 samples, 0.50%)</title><rect x="12.3539%" y="69" width="0.4980%" height="15" fill="rgb(208,68,35)"/><text x="12.6039%" y="79.50"></text></g><g><title>is_copy_raw (307,675 samples, 0.30%)</title><rect x="12.5542%" y="53" width="0.2977%" height="15" fill="rgb(232,128,0)"/><text x="12.8042%" y="63.50"></text></g><g><title>evaluate_obligation (239,765 samples, 0.23%)</title><rect x="12.6199%" y="37" width="0.2320%" height="15" fill="rgb(207,160,47)"/><text x="12.8699%" y="47.50"></text></g><g><title>resolve_instance (160,540 samples, 0.16%)</title><rect x="12.8519%" y="69" width="0.1553%" height="15" fill="rgb(228,23,34)"/><text x="13.1019%" y="79.50"></text></g><g><title>thir_body (279,463 samples, 0.27%)</title><rect x="13.0213%" y="69" width="0.2704%" height="15" fill="rgb(218,30,26)"/><text x="13.2713%" y="79.50"></text></g><g><title>mir_const (2,635,306 samples, 2.55%)</title><rect x="10.7575%" y="117" width="2.5494%" height="15" fill="rgb(220,122,19)"/><text x="11.0075%" y="127.50">mi..</text></g><g><title>unsafety_check_result (2,210,522 samples, 2.14%)</title><rect x="11.1684%" y="101" width="2.1385%" height="15" fill="rgb(250,228,42)"/><text x="11.4184%" y="111.50">u..</text></g><g><title>mir_built (1,913,279 samples, 1.85%)</title><rect x="11.4560%" y="85" width="1.8509%" height="15" fill="rgb(240,193,28)"/><text x="11.7060%" y="95.50">m..</text></g><g><title>mir_promoted (3,041,901 samples, 2.94%)</title><rect x="10.4306%" y="133" width="2.9428%" height="15" fill="rgb(216,20,37)"/><text x="10.6806%" y="143.50">mi..</text></g><g><title>type_op_ascribe_user_type (133,501 samples, 0.13%)</title><rect x="13.3734%" y="133" width="0.1292%" height="15" fill="rgb(206,188,39)"/><text x="13.6234%" y="143.50"></text></g><g><title>type_op_prove_predicate (691,166 samples, 0.67%)</title><rect x="13.6129%" y="133" width="0.6686%" height="15" fill="rgb(217,207,13)"/><text x="13.8629%" y="143.50"></text></g><g><title>MIR_borrow_checking (8,231,092 samples, 7.96%)</title><rect x="6.3219%" y="165" width="7.9629%" height="15" fill="rgb(231,73,38)"/><text x="6.5719%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (8,168,811 samples, 7.90%)</title><rect x="6.3822%" y="149" width="7.9027%" height="15" fill="rgb(225,20,46)"/><text x="6.6322%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (111,061 samples, 0.11%)</title><rect x="14.2848%" y="165" width="0.1074%" height="15" fill="rgb(210,31,41)"/><text x="14.5348%" y="175.50"></text></g><g><title>hir_module_items (121,691 samples, 0.12%)</title><rect x="14.3923%" y="165" width="0.1177%" height="15" fill="rgb(221,200,47)"/><text x="14.6423%" y="175.50"></text></g><g><title>should_inherit_track_caller (156,552 samples, 0.15%)</title><rect x="14.7882%" y="117" width="0.1515%" height="15" fill="rgb(226,26,5)"/><text x="15.0382%" y="127.50"></text></g><g><title>codegen_fn_attrs (305,943 samples, 0.30%)</title><rect x="14.6611%" y="133" width="0.2960%" height="15" fill="rgb(249,33,26)"/><text x="14.9111%" y="143.50"></text></g><g><title>check_mod_attrs (443,965 samples, 0.43%)</title><rect x="14.5276%" y="149" width="0.4295%" height="15" fill="rgb(235,183,28)"/><text x="14.7776%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (200,113 samples, 0.19%)</title><rect x="15.0440%" y="149" width="0.1936%" height="15" fill="rgb(221,5,38)"/><text x="15.2940%" y="159.50"></text></g><g><title>misc_checking_1 (786,178 samples, 0.76%)</title><rect x="14.5103%" y="165" width="0.7606%" height="15" fill="rgb(247,18,42)"/><text x="14.7603%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (156,201 samples, 0.15%)</title><rect x="15.2721%" y="149" width="0.1511%" height="15" fill="rgb(241,131,45)"/><text x="15.5221%" y="159.50"></text></g><g><title>check_mod_liveness (122,181 samples, 0.12%)</title><rect x="15.3050%" y="133" width="0.1182%" height="15" fill="rgb(249,31,29)"/><text x="15.5550%" y="143.50"></text></g><g><title>misc_checking_2 (363,954 samples, 0.35%)</title><rect x="15.2708%" y="165" width="0.3521%" height="15" fill="rgb(225,111,53)"/><text x="15.5208%" y="175.50"></text></g><g><title>match_checking (206,493 samples, 0.20%)</title><rect x="15.4232%" y="149" width="0.1998%" height="15" fill="rgb(238,160,17)"/><text x="15.6732%" y="159.50"></text></g><g><title>check_match (190,162 samples, 0.18%)</title><rect x="15.4390%" y="133" width="0.1840%" height="15" fill="rgb(214,148,48)"/><text x="15.6890%" y="143.50"></text></g><g><title>death_checking (200,473 samples, 0.19%)</title><rect x="15.7278%" y="149" width="0.1939%" height="15" fill="rgb(232,36,49)"/><text x="15.9778%" y="159.50"></text></g><g><title>eval_to_const_value_raw (150,991 samples, 0.15%)</title><rect x="16.5778%" y="117" width="0.1461%" height="15" fill="rgb(209,103,24)"/><text x="16.8278%" y="127.50"></text></g><g><title>eval_to_const_value_raw (144,111 samples, 0.14%)</title><rect x="16.5845%" y="101" width="0.1394%" height="15" fill="rgb(229,88,8)"/><text x="16.8345%" y="111.50"></text></g><g><title>eval_to_allocation_raw (139,041 samples, 0.13%)</title><rect x="16.5894%" y="85" width="0.1345%" height="15" fill="rgb(213,181,19)"/><text x="16.8394%" y="95.50"></text></g><g><title>crate_lints (2,004,172 samples, 1.94%)</title><rect x="15.9232%" y="133" width="1.9389%" height="15" fill="rgb(254,191,54)"/><text x="16.1732%" y="143.50">c..</text></g><g><title>type_of (1,061,491 samples, 1.03%)</title><rect x="16.8352%" y="117" width="1.0269%" height="15" fill="rgb(241,83,37)"/><text x="17.0852%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (821,508 samples, 0.79%)</title><rect x="17.0674%" y="101" width="0.7947%" height="15" fill="rgb(233,36,39)"/><text x="17.3174%" y="111.50"></text></g><g><title>lint_checking (2,131,073 samples, 2.06%)</title><rect x="15.9217%" y="149" width="2.0616%" height="15" fill="rgb(226,3,54)"/><text x="16.1717%" y="159.50">l..</text></g><g><title>module_lints (125,371 samples, 0.12%)</title><rect x="17.8621%" y="133" width="0.1213%" height="15" fill="rgb(245,192,40)"/><text x="18.1121%" y="143.50"></text></g><g><title>lint_mod (122,591 samples, 0.12%)</title><rect x="17.8648%" y="117" width="0.1186%" height="15" fill="rgb(238,167,29)"/><text x="18.1148%" y="127.50"></text></g><g><title>privacy_access_levels (115,861 samples, 0.11%)</title><rect x="17.9834%" y="149" width="0.1121%" height="15" fill="rgb(232,182,51)"/><text x="18.2334%" y="159.50"></text></g><g><title>privacy_checking_modules (325,174 samples, 0.31%)</title><rect x="18.0955%" y="149" width="0.3146%" height="15" fill="rgb(231,60,39)"/><text x="18.3455%" y="159.50"></text></g><g><title>check_mod_privacy (323,164 samples, 0.31%)</title><rect x="18.0974%" y="133" width="0.3126%" height="15" fill="rgb(208,69,12)"/><text x="18.3474%" y="143.50"></text></g><g><title>misc_checking_3 (2,890,172 samples, 2.80%)</title><rect x="15.6229%" y="165" width="2.7960%" height="15" fill="rgb(235,93,37)"/><text x="15.8729%" y="175.50">mi..</text></g><g><title>adt_sized_constraint (128,241 samples, 0.12%)</title><rect x="20.5313%" y="101" width="0.1241%" height="15" fill="rgb(213,116,39)"/><text x="20.7813%" y="111.50"></text></g><g><title>adt_sized_constraint (125,691 samples, 0.12%)</title><rect x="20.5337%" y="85" width="0.1216%" height="15" fill="rgb(222,207,29)"/><text x="20.7837%" y="95.50"></text></g><g><title>impl_parent (1,589,860 samples, 1.54%)</title><rect x="20.6553%" y="101" width="1.5381%" height="15" fill="rgb(206,96,30)"/><text x="20.9053%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (866,232 samples, 0.84%)</title><rect x="21.3554%" y="85" width="0.8380%" height="15" fill="rgb(218,138,4)"/><text x="21.6054%" y="95.50"></text></g><g><title>impl_trait_ref (3,786,425 samples, 3.66%)</title><rect x="22.1934%" y="101" width="3.6631%" height="15" fill="rgb(250,191,14)"/><text x="22.4434%" y="111.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (3,319,069 samples, 3.21%)</title><rect x="22.6455%" y="85" width="3.2109%" height="15" fill="rgb(239,60,40)"/><text x="22.8955%" y="95.50">met..</text></g><g><title>coherent_trait (8,114,390 samples, 7.85%)</title><rect x="18.4662%" y="133" width="7.8500%" height="15" fill="rgb(206,27,48)"/><text x="18.7162%" y="143.50">coherent_tr..</text></g><g><title>specialization_graph_of (8,100,710 samples, 7.84%)</title><rect x="18.4794%" y="117" width="7.8368%" height="15" fill="rgb(225,35,8)"/><text x="18.7294%" y="127.50">specializat..</text></g><g><title>trait_impls_of (433,493 samples, 0.42%)</title><rect x="25.8969%" y="101" width="0.4194%" height="15" fill="rgb(250,213,24)"/><text x="26.1469%" y="111.50"></text></g><g><title>implementations_of_trait (131,290 samples, 0.13%)</title><rect x="26.1892%" y="85" width="0.1270%" height="15" fill="rgb(247,123,22)"/><text x="26.4392%" y="95.50"></text></g><g><title>coherence_checking (8,176,801 samples, 7.91%)</title><rect x="18.4513%" y="149" width="7.9104%" height="15" fill="rgb(231,138,38)"/><text x="18.7013%" y="159.50">coherence_c..</text></g><g><title>associated_items (103,581 samples, 0.10%)</title><rect x="31.6308%" y="101" width="0.1002%" height="15" fill="rgb(231,145,46)"/><text x="31.8808%" y="111.50"></text></g><g><title>adt_def (116,802 samples, 0.11%)</title><rect x="31.9269%" y="53" width="0.1130%" height="15" fill="rgb(251,118,11)"/><text x="32.1769%" y="63.50"></text></g><g><title>metadata_decode_entry_adt_def (116,382 samples, 0.11%)</title><rect x="31.9273%" y="37" width="0.1126%" height="15" fill="rgb(217,147,25)"/><text x="32.1773%" y="47.50"></text></g><g><title>adt_dtorck_constraint (144,362 samples, 0.14%)</title><rect x="32.0458%" y="53" width="0.1397%" height="15" fill="rgb(247,81,37)"/><text x="32.2958%" y="63.50"></text></g><g><title>adt_dtorck_constraint (293,454 samples, 0.28%)</title><rect x="31.9118%" y="69" width="0.2839%" height="15" fill="rgb(209,12,38)"/><text x="32.1618%" y="79.50"></text></g><g><title>adt_dtorck_constraint (360,304 samples, 0.35%)</title><rect x="31.8577%" y="85" width="0.3486%" height="15" fill="rgb(227,1,9)"/><text x="32.1077%" y="95.50"></text></g><g><title>dropck_outlives (481,915 samples, 0.47%)</title><rect x="31.7484%" y="101" width="0.4662%" height="15" fill="rgb(248,47,43)"/><text x="31.9984%" y="111.50"></text></g><g><title>evaluate_obligation (154,322 samples, 0.15%)</title><rect x="32.2146%" y="101" width="0.1493%" height="15" fill="rgb(221,10,30)"/><text x="32.4646%" y="111.50"></text></g><g><title>method_autoderef_steps (276,572 samples, 0.27%)</title><rect x="32.5333%" y="101" width="0.2676%" height="15" fill="rgb(210,229,1)"/><text x="32.7833%" y="111.50"></text></g><g><title>object_safety_violations (126,401 samples, 0.12%)</title><rect x="32.8008%" y="101" width="0.1223%" height="15" fill="rgb(222,148,37)"/><text x="33.0508%" y="111.50"></text></g><g><title>is_copy_raw (241,452 samples, 0.23%)</title><rect x="33.9884%" y="85" width="0.2336%" height="15" fill="rgb(234,67,33)"/><text x="34.2384%" y="95.50"></text></g><g><title>evaluate_obligation (229,222 samples, 0.22%)</title><rect x="34.0003%" y="69" width="0.2218%" height="15" fill="rgb(247,98,35)"/><text x="34.2503%" y="79.50"></text></g><g><title>trait_impls_of (136,991 samples, 0.13%)</title><rect x="34.0895%" y="53" width="0.1325%" height="15" fill="rgb(247,138,52)"/><text x="34.3395%" y="63.50"></text></g><g><title>typeck (1,325,865 samples, 1.28%)</title><rect x="33.0624%" y="101" width="1.2827%" height="15" fill="rgb(213,79,30)"/><text x="33.3124%" y="111.50"></text></g><g><title>item_bodies_checking (8,246,441 samples, 7.98%)</title><rect x="26.3840%" y="149" width="7.9778%" height="15" fill="rgb(246,177,23)"/><text x="26.6340%" y="159.50">item_bodies..</text></g><g><title>typeck_item_bodies (8,244,551 samples, 7.98%)</title><rect x="26.3858%" y="133" width="7.9759%" height="15" fill="rgb(230,62,27)"/><text x="26.6358%" y="143.50">typeck_item..</text></g><g><title>typeck (8,202,381 samples, 7.94%)</title><rect x="26.4266%" y="117" width="7.9351%" height="15" fill="rgb(216,154,8)"/><text x="26.6766%" y="127.50">typeck</text></g><g><title>adt_destructor (297,833 samples, 0.29%)</title><rect x="34.7488%" y="117" width="0.2881%" height="15" fill="rgb(244,35,45)"/><text x="34.9988%" y="127.50"></text></g><g><title>coherent_trait (293,483 samples, 0.28%)</title><rect x="34.7530%" y="101" width="0.2839%" height="15" fill="rgb(251,115,12)"/><text x="35.0030%" y="111.50"></text></g><g><title>specialization_graph_of (291,993 samples, 0.28%)</title><rect x="34.7544%" y="85" width="0.2825%" height="15" fill="rgb(240,54,50)"/><text x="35.0044%" y="95.50"></text></g><g><title>impl_trait_ref (149,193 samples, 0.14%)</title><rect x="34.8926%" y="69" width="0.1443%" height="15" fill="rgb(233,84,52)"/><text x="35.1426%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (128,083 samples, 0.12%)</title><rect x="34.9130%" y="53" width="0.1239%" height="15" fill="rgb(207,117,47)"/><text x="35.1630%" y="63.50"></text></g><g><title>item_types_checking (877,130 samples, 0.85%)</title><rect x="34.3617%" y="149" width="0.8486%" height="15" fill="rgb(249,43,39)"/><text x="34.6117%" y="159.50"></text></g><g><title>check_mod_item_types (874,330 samples, 0.85%)</title><rect x="34.3645%" y="133" width="0.8458%" height="15" fill="rgb(209,38,44)"/><text x="34.6145%" y="143.50"></text></g><g><title>fn_sig (198,282 samples, 0.19%)</title><rect x="35.3811%" y="117" width="0.1918%" height="15" fill="rgb(236,212,23)"/><text x="35.6311%" y="127.50"></text></g><g><title>is_late_bound_map (256,093 samples, 0.25%)</title><rect x="35.6553%" y="101" width="0.2477%" height="15" fill="rgb(242,79,21)"/><text x="35.9053%" y="111.50"></text></g><g><title>resolve_lifetimes (248,963 samples, 0.24%)</title><rect x="35.6622%" y="85" width="0.2409%" height="15" fill="rgb(211,96,35)"/><text x="35.9122%" y="95.50"></text></g><g><title>lint_levels (180,762 samples, 0.17%)</title><rect x="35.7282%" y="69" width="0.1749%" height="15" fill="rgb(253,215,40)"/><text x="35.9782%" y="79.50"></text></g><g><title>generics_of (427,123 samples, 0.41%)</title><rect x="35.5729%" y="117" width="0.4132%" height="15" fill="rgb(211,81,21)"/><text x="35.8229%" y="127.50"></text></g><g><title>explicit_predicates_of (248,002 samples, 0.24%)</title><rect x="36.1106%" y="85" width="0.2399%" height="15" fill="rgb(208,190,38)"/><text x="36.3606%" y="95.50"></text></g><g><title>predicates_of (644,519 samples, 0.62%)</title><rect x="36.0150%" y="117" width="0.6235%" height="15" fill="rgb(235,213,38)"/><text x="36.2650%" y="127.50"></text></g><g><title>predicates_defined_on (608,669 samples, 0.59%)</title><rect x="36.0496%" y="101" width="0.5888%" height="15" fill="rgb(237,122,38)"/><text x="36.2996%" y="111.50"></text></g><g><title>inferred_outlives_of (297,603 samples, 0.29%)</title><rect x="36.3506%" y="85" width="0.2879%" height="15" fill="rgb(244,218,35)"/><text x="36.6006%" y="95.50"></text></g><g><title>inferred_outlives_crate (279,533 samples, 0.27%)</title><rect x="36.3681%" y="69" width="0.2704%" height="15" fill="rgb(240,68,47)"/><text x="36.6181%" y="79.50"></text></g><g><title>type_of (153,823 samples, 0.15%)</title><rect x="36.4897%" y="53" width="0.1488%" height="15" fill="rgb(210,16,53)"/><text x="36.7397%" y="63.50"></text></g><g><title>type_collecting (1,698,149 samples, 1.64%)</title><rect x="35.2113%" y="149" width="1.6428%" height="15" fill="rgb(235,124,12)"/><text x="35.4613%" y="159.50"></text></g><g><title>collect_mod_item_types (1,690,979 samples, 1.64%)</title><rect x="35.2183%" y="133" width="1.6359%" height="15" fill="rgb(224,169,11)"/><text x="35.4683%" y="143.50"></text></g><g><title>type_of (119,401 samples, 0.12%)</title><rect x="36.7386%" y="117" width="0.1155%" height="15" fill="rgb(250,166,2)"/><text x="36.9886%" y="127.50"></text></g><g><title>evaluate_obligation (541,054 samples, 0.52%)</title><rect x="38.3357%" y="117" width="0.5234%" height="15" fill="rgb(242,216,29)"/><text x="38.5857%" y="127.50"></text></g><g><title>implied_outlives_bounds (201,603 samples, 0.20%)</title><rect x="38.8826%" y="117" width="0.1950%" height="15" fill="rgb(230,116,27)"/><text x="39.1326%" y="127.50"></text></g><g><title>param_env (162,870 samples, 0.16%)</title><rect x="39.0873%" y="117" width="0.1576%" height="15" fill="rgb(228,99,48)"/><text x="39.3373%" y="127.50"></text></g><g><title>region_scope_tree (125,112 samples, 0.12%)</title><rect x="39.2700%" y="117" width="0.1210%" height="15" fill="rgb(253,11,6)"/><text x="39.5200%" y="127.50"></text></g><g><title>check_impl_item_well_formed (2,503,268 samples, 2.42%)</title><rect x="36.9727%" y="133" width="2.4217%" height="15" fill="rgb(247,143,39)"/><text x="37.2227%" y="143.50">ch..</text></g><g><title>param_env (254,383 samples, 0.25%)</title><rect x="40.6152%" y="117" width="0.2461%" height="15" fill="rgb(236,97,10)"/><text x="40.8652%" y="127.50"></text></g><g><title>check_item_well_formed (1,682,540 samples, 1.63%)</title><rect x="39.3945%" y="133" width="1.6277%" height="15" fill="rgb(233,208,19)"/><text x="39.6445%" y="143.50"></text></g><g><title>analysis (36,473,553 samples, 35.29%)</title><rect x="6.1672%" y="181" width="35.2852%" height="15" fill="rgb(216,164,2)"/><text x="6.4172%" y="191.50">analysis</text></g><g><title>type_check_crate (23,809,253 samples, 23.03%)</title><rect x="18.4189%" y="165" width="23.0335%" height="15" fill="rgb(220,129,5)"/><text x="18.6689%" y="175.50">type_check_crate</text></g><g><title>wf_checking (4,750,442 samples, 4.60%)</title><rect x="36.8568%" y="149" width="4.5957%" height="15" fill="rgb(242,17,10)"/><text x="37.1068%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (444,794 samples, 0.43%)</title><rect x="41.0222%" y="133" width="0.4303%" height="15" fill="rgb(242,107,0)"/><text x="41.2722%" y="143.50"></text></g><g><title>codegen_module (197,273 samples, 0.19%)</title><rect x="41.8729%" y="165" width="0.1908%" height="15" fill="rgb(251,28,31)"/><text x="42.1229%" y="175.50"></text></g><g><title>codegen_crate (752,669 samples, 0.73%)</title><rect x="41.4635%" y="181" width="0.7281%" height="15" fill="rgb(233,223,10)"/><text x="41.7135%" y="191.50"></text></g><g><title>codegen_module_optimize (1,876,411 samples, 1.82%)</title><rect x="42.1917%" y="181" width="1.8153%" height="15" fill="rgb(215,21,27)"/><text x="42.4417%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (409,715 samples, 0.40%)</title><rect x="43.6106%" y="165" width="0.3964%" height="15" fill="rgb(232,23,21)"/><text x="43.8606%" y="175.50"></text></g><g><title>LLVM_lto_optimize (233,183 samples, 0.23%)</title><rect x="44.3908%" y="165" width="0.2256%" height="15" fill="rgb(244,5,23)"/><text x="44.6408%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,366,946 samples, 2.29%)</title><rect x="44.6164%" y="165" width="2.2898%" height="15" fill="rgb(226,81,46)"/><text x="44.8664%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (2,326,266 samples, 2.25%)</title><rect x="44.6558%" y="149" width="2.2505%" height="15" fill="rgb(247,70,30)"/><text x="44.9058%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (3,030,833 samples, 2.93%)</title><rect x="44.0070%" y="181" width="2.9321%" height="15" fill="rgb(212,68,19)"/><text x="44.2570%" y="191.50">co..</text></g><g><title>AST_validation (195,462 samples, 0.19%)</title><rect x="47.1346%" y="165" width="0.1891%" height="15" fill="rgb(240,187,13)"/><text x="47.3846%" y="175.50"></text></g><g><title>metadata_load_macro (280,202 samples, 0.27%)</title><rect x="69.1520%" y="133" width="0.2711%" height="15" fill="rgb(223,113,26)"/><text x="69.4020%" y="143.50"></text></g><g><title>metadata_register_crate (11,400,656 samples, 11.03%)</title><rect x="69.4230%" y="133" width="11.0292%" height="15" fill="rgb(206,192,2)"/><text x="69.6730%" y="143.50">metadata_registe..</text></g><g><title>metadata_register_crate (8,491,162 samples, 8.21%)</title><rect x="72.2377%" y="117" width="8.2145%" height="15" fill="rgb(241,108,4)"/><text x="72.4877%" y="127.50">metadata_re..</text></g><g><title>macro_expand_crate (34,151,547 samples, 33.04%)</title><rect x="47.4452%" y="165" width="33.0389%" height="15" fill="rgb(247,173,49)"/><text x="47.6952%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (34,138,317 samples, 33.03%)</title><rect x="47.4580%" y="149" width="33.0261%" height="15" fill="rgb(224,114,35)"/><text x="47.7080%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (329,533 samples, 0.32%)</title><rect x="80.4868%" y="165" width="0.3188%" height="15" fill="rgb(245,159,27)"/><text x="80.7368%" y="175.50"></text></g><g><title>late_resolve_crate (899,770 samples, 0.87%)</title><rect x="80.9188%" y="149" width="0.8705%" height="15" fill="rgb(245,172,44)"/><text x="81.1688%" y="159.50"></text></g><g><title>configure_and_expand (36,082,328 samples, 34.91%)</title><rect x="46.9391%" y="181" width="34.9068%" height="15" fill="rgb(236,23,11)"/><text x="47.1891%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,075,282 samples, 1.04%)</title><rect x="80.8056%" y="165" width="1.0402%" height="15" fill="rgb(205,117,38)"/><text x="81.0556%" y="175.50"></text></g><g><title>drop_ast (129,422 samples, 0.13%)</title><rect x="81.8458%" y="181" width="0.1252%" height="15" fill="rgb(237,72,25)"/><text x="82.0958%" y="191.50"></text></g><g><title>early_lint_checks (374,094 samples, 0.36%)</title><rect x="81.9871%" y="181" width="0.3619%" height="15" fill="rgb(244,70,9)"/><text x="82.2371%" y="191.50"></text></g><g><title>free_global_ctxt (2,852,232 samples, 2.76%)</title><rect x="82.3490%" y="181" width="2.7593%" height="15" fill="rgb(217,125,39)"/><text x="82.5990%" y="191.50">fr..</text></g><g><title>layout_of (135,582 samples, 0.13%)</title><rect x="87.7571%" y="101" width="0.1312%" height="15" fill="rgb(235,36,10)"/><text x="88.0071%" y="111.50"></text></g><g><title>layout_of (156,792 samples, 0.15%)</title><rect x="87.7425%" y="117" width="0.1517%" height="15" fill="rgb(251,123,47)"/><text x="87.9925%" y="127.50"></text></g><g><title>layout_of (190,292 samples, 0.18%)</title><rect x="87.7107%" y="133" width="0.1841%" height="15" fill="rgb(221,13,13)"/><text x="87.9607%" y="143.50"></text></g><g><title>layout_of (439,414 samples, 0.43%)</title><rect x="87.5050%" y="149" width="0.4251%" height="15" fill="rgb(238,131,9)"/><text x="87.7550%" y="159.50"></text></g><g><title>optimized_mir (2,787,161 samples, 2.70%)</title><rect x="86.3960%" y="165" width="2.6964%" height="15" fill="rgb(211,50,8)"/><text x="86.6460%" y="175.50">op..</text></g><g><title>mir_drops_elaborated_and_const_checked (1,201,344 samples, 1.16%)</title><rect x="87.9301%" y="149" width="1.1622%" height="15" fill="rgb(245,182,24)"/><text x="88.1801%" y="159.50"></text></g><g><title>generate_crate_metadata (4,154,815 samples, 4.02%)</title><rect x="85.1083%" y="181" width="4.0194%" height="15" fill="rgb(242,14,37)"/><text x="85.3583%" y="191.50">gene..</text></g><g><title>hir_lowering (1,344,505 samples, 1.30%)</title><rect x="89.1278%" y="181" width="1.3007%" height="15" fill="rgb(246,228,12)"/><text x="89.3778%" y="191.50"></text></g><g><title>finish_ongoing_codegen (2,674,639 samples, 2.59%)</title><rect x="90.4427%" y="165" width="2.5875%" height="15" fill="rgb(213,55,15)"/><text x="90.6927%" y="175.50">fi..</text></g><g><title>link_crate (746,608 samples, 0.72%)</title><rect x="93.0302%" y="165" width="0.7223%" height="15" fill="rgb(209,9,3)"/><text x="93.2802%" y="175.50"></text></g><g><title>link_binary (721,428 samples, 0.70%)</title><rect x="93.0546%" y="149" width="0.6979%" height="15" fill="rgb(230,59,30)"/><text x="93.3046%" y="159.50"></text></g><g><title>link_rlib (464,485 samples, 0.45%)</title><rect x="93.3031%" y="133" width="0.4494%" height="15" fill="rgb(209,121,21)"/><text x="93.5531%" y="143.50"></text></g><g><title>link (3,443,528 samples, 3.33%)</title><rect x="90.4285%" y="181" width="3.3313%" height="15" fill="rgb(220,109,13)"/><text x="90.6785%" y="191.50">link</text></g><g><title>parse_crate (5,321,148 samples, 5.15%)</title><rect x="93.7598%" y="181" width="5.1478%" height="15" fill="rgb(232,18,1)"/><text x="94.0098%" y="191.50">parse_..</text></g><g><title>prepare_outputs (219,363 samples, 0.21%)</title><rect x="98.9161%" y="181" width="0.2122%" height="15" fill="rgb(215,41,42)"/><text x="99.1661%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (452,995 samples, 0.44%)</title><rect x="99.1283%" y="181" width="0.4382%" height="15" fill="rgb(224,123,36)"/><text x="99.3783%" y="191.50"></text></g><g><title>all (103,367,752 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (103,367,752 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (374,434 samples, 0.36%)</title><rect x="99.6378%" y="181" width="0.3622%" height="15" fill="rgb(205,185,37)"/><text x="99.8878%" y="191.50"></text></g></svg></svg>