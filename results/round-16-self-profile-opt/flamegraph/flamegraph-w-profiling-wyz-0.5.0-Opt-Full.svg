<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (17,018,265 samples, 5.50%)</title><rect x="0.2732%" y="181" width="5.5029%" height="15" fill="rgb(227,0,7)"/><text x="0.5232%" y="191.50">LLVM_pa..</text></g><g><title>implied_outlives_bounds (451,958 samples, 0.15%)</title><rect x="14.0499%" y="133" width="0.1461%" height="15" fill="rgb(217,0,24)"/><text x="14.2999%" y="143.50"></text></g><g><title>item_attrs (996,366 samples, 0.32%)</title><rect x="16.0377%" y="69" width="0.3222%" height="15" fill="rgb(221,193,54)"/><text x="16.2877%" y="79.50"></text></g><g><title>metadata_decode_entry_item_attrs (977,976 samples, 0.32%)</title><rect x="16.0437%" y="53" width="0.3162%" height="15" fill="rgb(248,212,6)"/><text x="16.2937%" y="63.50"></text></g><g><title>codegen_fn_attrs (1,181,887 samples, 0.38%)</title><rect x="15.9847%" y="85" width="0.3822%" height="15" fill="rgb(208,68,35)"/><text x="16.2347%" y="95.50"></text></g><g><title>is_copy_raw (1,546,371 samples, 0.50%)</title><rect x="18.3514%" y="53" width="0.5000%" height="15" fill="rgb(232,128,0)"/><text x="18.6014%" y="63.50"></text></g><g><title>evaluate_obligation (1,046,734 samples, 0.34%)</title><rect x="18.5130%" y="37" width="0.3385%" height="15" fill="rgb(207,160,47)"/><text x="18.7630%" y="47.50"></text></g><g><title>needs_drop_raw (1,826,565 samples, 0.59%)</title><rect x="18.2644%" y="69" width="0.5906%" height="15" fill="rgb(228,23,34)"/><text x="18.5144%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (1,294,758 samples, 0.42%)</title><rect x="19.0407%" y="53" width="0.4187%" height="15" fill="rgb(218,30,26)"/><text x="19.2907%" y="63.50"></text></g><g><title>resolve_instance (2,187,698 samples, 0.71%)</title><rect x="18.8652%" y="69" width="0.7074%" height="15" fill="rgb(220,122,19)"/><text x="19.1152%" y="79.50"></text></g><g><title>thir_body (1,828,336 samples, 0.59%)</title><rect x="19.6035%" y="69" width="0.5912%" height="15" fill="rgb(250,228,42)"/><text x="19.8535%" y="79.50"></text></g><g><title>mir_const (16,548,816 samples, 5.35%)</title><rect x="14.9220%" y="117" width="5.3511%" height="15" fill="rgb(240,193,28)"/><text x="15.1720%" y="127.50">mir_con..</text></g><g><title>unsafety_check_result (14,302,501 samples, 4.62%)</title><rect x="15.6483%" y="101" width="4.6248%" height="15" fill="rgb(216,20,37)"/><text x="15.8983%" y="111.50">unsaf..</text></g><g><title>mir_built (12,080,401 samples, 3.91%)</title><rect x="16.3669%" y="85" width="3.9062%" height="15" fill="rgb(206,188,39)"/><text x="16.6169%" y="95.50">mir_..</text></g><g><title>mir_const (317,597 samples, 0.10%)</title><rect x="20.4558%" y="101" width="0.1027%" height="15" fill="rgb(217,207,13)"/><text x="20.7058%" y="111.50"></text></g><g><title>mir_promoted (19,205,504 samples, 6.21%)</title><rect x="14.3569%" y="133" width="6.2102%" height="15" fill="rgb(231,73,38)"/><text x="14.6069%" y="143.50">mir_prom..</text></g><g><title>mir_const_qualif (909,202 samples, 0.29%)</title><rect x="20.2731%" y="117" width="0.2940%" height="15" fill="rgb(225,20,46)"/><text x="20.5231%" y="127.50"></text></g><g><title>type_op_ascribe_user_type (532,916 samples, 0.17%)</title><rect x="20.5681%" y="133" width="0.1723%" height="15" fill="rgb(210,31,41)"/><text x="20.8181%" y="143.50"></text></g><g><title>type_op_normalize_predicate (792,359 samples, 0.26%)</title><rect x="20.8213%" y="133" width="0.2562%" height="15" fill="rgb(221,200,47)"/><text x="21.0713%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,034,608 samples, 0.33%)</title><rect x="21.0775%" y="133" width="0.3345%" height="15" fill="rgb(226,26,5)"/><text x="21.3275%" y="143.50"></text></g><g><title>normalize_projection_ty (605,356 samples, 0.20%)</title><rect x="21.2163%" y="117" width="0.1957%" height="15" fill="rgb(249,33,26)"/><text x="21.4663%" y="127.50"></text></g><g><title>type_op_prove_predicate (6,921,487 samples, 2.24%)</title><rect x="21.4121%" y="133" width="2.2381%" height="15" fill="rgb(235,183,28)"/><text x="21.6621%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (54,738,088 samples, 17.70%)</title><rect x="5.9529%" y="165" width="17.6997%" height="15" fill="rgb(221,5,38)"/><text x="6.2029%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,287,068 samples, 17.55%)</title><rect x="6.0987%" y="149" width="17.5539%" height="15" fill="rgb(247,18,42)"/><text x="6.3487%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (409,045 samples, 0.13%)</title><rect x="23.6526%" y="165" width="0.1323%" height="15" fill="rgb(241,131,45)"/><text x="23.9026%" y="175.50"></text></g><g><title>hir_module_items (504,127 samples, 0.16%)</title><rect x="23.7849%" y="165" width="0.1630%" height="15" fill="rgb(249,31,29)"/><text x="24.0349%" y="175.50"></text></g><g><title>should_inherit_track_caller (582,757 samples, 0.19%)</title><rect x="24.2995%" y="117" width="0.1884%" height="15" fill="rgb(225,111,53)"/><text x="24.5495%" y="127.50"></text></g><g><title>codegen_fn_attrs (1,147,762 samples, 0.37%)</title><rect x="24.1233%" y="133" width="0.3711%" height="15" fill="rgb(238,160,17)"/><text x="24.3733%" y="143.50"></text></g><g><title>check_mod_attrs (1,657,439 samples, 0.54%)</title><rect x="23.9585%" y="149" width="0.5359%" height="15" fill="rgb(214,148,48)"/><text x="24.2085%" y="159.50"></text></g><g><title>check_mod_const_bodies (312,053 samples, 0.10%)</title><rect x="24.4945%" y="149" width="0.1009%" height="15" fill="rgb(232,36,49)"/><text x="24.7445%" y="159.50"></text></g><g><title>lookup_deprecation_entry (387,414 samples, 0.13%)</title><rect x="24.7734%" y="133" width="0.1253%" height="15" fill="rgb(209,103,24)"/><text x="25.0234%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (906,561 samples, 0.29%)</title><rect x="24.6475%" y="149" width="0.2931%" height="15" fill="rgb(229,88,8)"/><text x="24.8975%" y="159.50"></text></g><g><title>misc_checking_1 (3,192,548 samples, 1.03%)</title><rect x="23.9481%" y="165" width="1.0323%" height="15" fill="rgb(213,181,19)"/><text x="24.1981%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (926,801 samples, 0.30%)</title><rect x="24.9810%" y="149" width="0.2997%" height="15" fill="rgb(254,191,54)"/><text x="25.2310%" y="159.50"></text></g><g><title>check_mod_liveness (774,539 samples, 0.25%)</title><rect x="25.0302%" y="133" width="0.2504%" height="15" fill="rgb(241,83,37)"/><text x="25.2802%" y="143.50"></text></g><g><title>misc_checking_2 (1,966,344 samples, 0.64%)</title><rect x="24.9804%" y="165" width="0.6358%" height="15" fill="rgb(233,36,39)"/><text x="25.2304%" y="175.50"></text></g><g><title>match_checking (1,037,653 samples, 0.34%)</title><rect x="25.2807%" y="149" width="0.3355%" height="15" fill="rgb(226,3,54)"/><text x="25.5307%" y="159.50"></text></g><g><title>check_match (933,290 samples, 0.30%)</title><rect x="25.3144%" y="133" width="0.3018%" height="15" fill="rgb(245,192,40)"/><text x="25.5644%" y="143.50"></text></g><g><title>check_private_in_public (605,728 samples, 0.20%)</title><rect x="25.6197%" y="149" width="0.1959%" height="15" fill="rgb(238,167,29)"/><text x="25.8697%" y="159.50"></text></g><g><title>death_checking (1,191,794 samples, 0.39%)</title><rect x="25.8156%" y="149" width="0.3854%" height="15" fill="rgb(232,182,51)"/><text x="26.0656%" y="159.50"></text></g><g><title>explicit_predicates_of (326,986 samples, 0.11%)</title><rect x="26.6619%" y="69" width="0.1057%" height="15" fill="rgb(231,60,39)"/><text x="26.9119%" y="79.50"></text></g><g><title>param_env (596,928 samples, 0.19%)</title><rect x="26.5767%" y="117" width="0.1930%" height="15" fill="rgb(208,69,12)"/><text x="26.8267%" y="127.50"></text></g><g><title>predicates_of (404,236 samples, 0.13%)</title><rect x="26.6390%" y="101" width="0.1307%" height="15" fill="rgb(235,93,37)"/><text x="26.8890%" y="111.50"></text></g><g><title>predicates_defined_on (371,516 samples, 0.12%)</title><rect x="26.6496%" y="85" width="0.1201%" height="15" fill="rgb(213,116,39)"/><text x="26.8996%" y="95.50"></text></g><g><title>crate_lints (3,021,916 samples, 0.98%)</title><rect x="26.2016%" y="133" width="0.9771%" height="15" fill="rgb(222,207,29)"/><text x="26.4516%" y="143.50"></text></g><g><title>type_of (1,255,086 samples, 0.41%)</title><rect x="26.7729%" y="117" width="0.4058%" height="15" fill="rgb(206,96,30)"/><text x="27.0229%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (1,024,915 samples, 0.33%)</title><rect x="26.8473%" y="101" width="0.3314%" height="15" fill="rgb(218,138,4)"/><text x="27.0973%" y="111.50"></text></g><g><title>lint_checking (3,683,794 samples, 1.19%)</title><rect x="26.2010%" y="149" width="1.1912%" height="15" fill="rgb(250,191,14)"/><text x="26.4510%" y="159.50"></text></g><g><title>module_lints (660,038 samples, 0.21%)</title><rect x="27.1787%" y="133" width="0.2134%" height="15" fill="rgb(239,60,40)"/><text x="27.4287%" y="143.50"></text></g><g><title>lint_mod (651,448 samples, 0.21%)</title><rect x="27.1815%" y="117" width="0.2106%" height="15" fill="rgb(206,27,48)"/><text x="27.4315%" y="127.50"></text></g><g><title>privacy_access_levels (1,033,472 samples, 0.33%)</title><rect x="27.3921%" y="149" width="0.3342%" height="15" fill="rgb(225,35,8)"/><text x="27.6421%" y="159.50"></text></g><g><title>privacy_checking_modules (2,143,346 samples, 0.69%)</title><rect x="27.7263%" y="149" width="0.6931%" height="15" fill="rgb(250,213,24)"/><text x="27.9763%" y="159.50"></text></g><g><title>check_mod_privacy (2,138,246 samples, 0.69%)</title><rect x="27.7280%" y="133" width="0.6914%" height="15" fill="rgb(247,123,22)"/><text x="27.9780%" y="143.50"></text></g><g><title>misc_checking_3 (8,696,825 samples, 2.81%)</title><rect x="25.6162%" y="165" width="2.8121%" height="15" fill="rgb(231,138,38)"/><text x="25.8662%" y="175.50">mi..</text></g><g><title>adt_destructor (429,875 samples, 0.14%)</title><rect x="28.5374%" y="117" width="0.1390%" height="15" fill="rgb(231,145,46)"/><text x="28.7874%" y="127.50"></text></g><g><title>coherent_trait (424,715 samples, 0.14%)</title><rect x="28.5390%" y="101" width="0.1373%" height="15" fill="rgb(251,118,11)"/><text x="28.7890%" y="111.50"></text></g><g><title>specialization_graph_of (423,755 samples, 0.14%)</title><rect x="28.5393%" y="85" width="0.1370%" height="15" fill="rgb(217,147,25)"/><text x="28.7893%" y="95.50"></text></g><g><title>impl_parent (3,434,193 samples, 1.11%)</title><rect x="30.8555%" y="101" width="1.1105%" height="15" fill="rgb(247,81,37)"/><text x="31.1055%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,999,778 samples, 0.65%)</title><rect x="31.3193%" y="85" width="0.6466%" height="15" fill="rgb(209,12,38)"/><text x="31.5693%" y="95.50"></text></g><g><title>impl_trait_ref (6,806,824 samples, 2.20%)</title><rect x="31.9665%" y="101" width="2.2010%" height="15" fill="rgb(227,1,9)"/><text x="32.2165%" y="111.50">i..</text></g><g><title>metadata_decode_entry_impl_trait_ref (5,375,305 samples, 1.74%)</title><rect x="32.4294%" y="85" width="1.7381%" height="15" fill="rgb(248,47,43)"/><text x="32.6794%" y="95.50"></text></g><g><title>trait_impls_of (1,648,862 samples, 0.53%)</title><rect x="34.1967%" y="101" width="0.5332%" height="15" fill="rgb(221,10,30)"/><text x="34.4467%" y="111.50"></text></g><g><title>implementations_of_trait (450,098 samples, 0.15%)</title><rect x="34.5843%" y="85" width="0.1455%" height="15" fill="rgb(210,229,1)"/><text x="34.8343%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (331,975 samples, 0.11%)</title><rect x="34.6225%" y="69" width="0.1073%" height="15" fill="rgb(222,148,37)"/><text x="34.8725%" y="79.50"></text></g><g><title>coherent_trait (19,236,991 samples, 6.22%)</title><rect x="28.5101%" y="133" width="6.2203%" height="15" fill="rgb(234,67,33)"/><text x="28.7601%" y="143.50">coherent..</text></g><g><title>specialization_graph_of (18,564,904 samples, 6.00%)</title><rect x="28.7274%" y="117" width="6.0030%" height="15" fill="rgb(247,98,35)"/><text x="28.9774%" y="127.50">speciali..</text></g><g><title>coherence_checking (19,461,224 samples, 6.29%)</title><rect x="28.4970%" y="149" width="6.2928%" height="15" fill="rgb(247,138,52)"/><text x="28.7470%" y="159.50">coherenc..</text></g><g><title>associated_item (352,705 samples, 0.11%)</title><rect x="47.4803%" y="85" width="0.1140%" height="15" fill="rgb(213,79,30)"/><text x="47.7303%" y="95.50"></text></g><g><title>associated_items (498,287 samples, 0.16%)</title><rect x="47.4401%" y="101" width="0.1611%" height="15" fill="rgb(246,177,23)"/><text x="47.6901%" y="111.50"></text></g><g><title>dropck_outlives (1,056,946 samples, 0.34%)</title><rect x="47.6523%" y="101" width="0.3418%" height="15" fill="rgb(230,62,27)"/><text x="47.9023%" y="111.50"></text></g><g><title>impl_trait_ref (321,976 samples, 0.10%)</title><rect x="48.9480%" y="85" width="0.1041%" height="15" fill="rgb(216,154,8)"/><text x="49.1980%" y="95.50"></text></g><g><title>evaluate_obligation (3,807,150 samples, 1.23%)</title><rect x="47.9940%" y="101" width="1.2311%" height="15" fill="rgb(244,35,45)"/><text x="48.2440%" y="111.50"></text></g><g><title>method_autoderef_steps (990,414 samples, 0.32%)</title><rect x="49.4488%" y="101" width="0.3203%" height="15" fill="rgb(251,115,12)"/><text x="49.6988%" y="111.50"></text></g><g><title>evaluate_obligation (470,334 samples, 0.15%)</title><rect x="49.6170%" y="85" width="0.1521%" height="15" fill="rgb(240,54,50)"/><text x="49.8670%" y="95.50"></text></g><g><title>predicates_of (566,627 samples, 0.18%)</title><rect x="49.8650%" y="101" width="0.1832%" height="15" fill="rgb(233,84,52)"/><text x="50.1150%" y="111.50"></text></g><g><title>predicates_defined_on (449,626 samples, 0.15%)</title><rect x="49.9028%" y="85" width="0.1454%" height="15" fill="rgb(207,117,47)"/><text x="50.1528%" y="95.50"></text></g><g><title>typeck (2,611,971 samples, 0.84%)</title><rect x="50.1008%" y="101" width="0.8446%" height="15" fill="rgb(249,43,39)"/><text x="50.3508%" y="111.50"></text></g><g><title>item_bodies_checking (49,954,290 samples, 16.15%)</title><rect x="34.8331%" y="149" width="16.1529%" height="15" fill="rgb(209,38,44)"/><text x="35.0831%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (49,950,310 samples, 16.15%)</title><rect x="34.8344%" y="133" width="16.1516%" height="15" fill="rgb(236,212,23)"/><text x="35.0844%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (49,613,543 samples, 16.04%)</title><rect x="34.9433%" y="117" width="16.0427%" height="15" fill="rgb(242,79,21)"/><text x="35.1933%" y="127.50">typeck</text></g><g><title>item_types_checking (5,661,858 samples, 1.83%)</title><rect x="50.9860%" y="149" width="1.8308%" height="15" fill="rgb(211,96,35)"/><text x="51.2360%" y="159.50">i..</text></g><g><title>check_mod_item_types (5,655,008 samples, 1.83%)</title><rect x="50.9882%" y="133" width="1.8286%" height="15" fill="rgb(253,215,40)"/><text x="51.2382%" y="143.50">c..</text></g><g><title>fn_sig (987,132 samples, 0.32%)</title><rect x="53.1063%" y="117" width="0.3192%" height="15" fill="rgb(211,81,21)"/><text x="53.3563%" y="127.50"></text></g><g><title>generics_of (678,189 samples, 0.22%)</title><rect x="53.4255%" y="117" width="0.2193%" height="15" fill="rgb(208,190,38)"/><text x="53.6755%" y="127.50"></text></g><g><title>late_bound_vars_map (1,408,739 samples, 0.46%)</title><rect x="54.1754%" y="69" width="0.4555%" height="15" fill="rgb(235,213,38)"/><text x="54.4254%" y="79.50"></text></g><g><title>resolve_lifetimes (1,319,108 samples, 0.43%)</title><rect x="54.2044%" y="53" width="0.4265%" height="15" fill="rgb(237,122,38)"/><text x="54.4544%" y="63.50"></text></g><g><title>explicit_predicates_of (2,487,517 samples, 0.80%)</title><rect x="53.8952%" y="85" width="0.8043%" height="15" fill="rgb(244,218,35)"/><text x="54.1452%" y="95.50"></text></g><g><title>predicates_of (3,280,363 samples, 1.06%)</title><rect x="53.7181%" y="117" width="1.0607%" height="15" fill="rgb(240,68,47)"/><text x="53.9681%" y="127.50"></text></g><g><title>predicates_defined_on (3,079,067 samples, 1.00%)</title><rect x="53.7832%" y="101" width="0.9956%" height="15" fill="rgb(210,16,53)"/><text x="54.0332%" y="111.50"></text></g><g><title>type_collecting (6,513,959 samples, 2.11%)</title><rect x="52.8178%" y="149" width="2.1063%" height="15" fill="rgb(235,124,12)"/><text x="53.0678%" y="159.50">t..</text></g><g><title>collect_mod_item_types (6,499,929 samples, 2.10%)</title><rect x="52.8223%" y="133" width="2.1018%" height="15" fill="rgb(224,169,11)"/><text x="53.0723%" y="143.50">c..</text></g><g><title>type_of (347,961 samples, 0.11%)</title><rect x="54.8116%" y="117" width="0.1125%" height="15" fill="rgb(250,166,2)"/><text x="55.0616%" y="127.50"></text></g><g><title>evaluate_obligation (2,347,093 samples, 0.76%)</title><rect x="58.5526%" y="117" width="0.7589%" height="15" fill="rgb(242,216,29)"/><text x="58.8026%" y="127.50"></text></g><g><title>implied_outlives_bounds (1,619,382 samples, 0.52%)</title><rect x="59.3286%" y="117" width="0.5236%" height="15" fill="rgb(230,116,27)"/><text x="59.5786%" y="127.50"></text></g><g><title>param_env (1,610,790 samples, 0.52%)</title><rect x="59.8523%" y="117" width="0.5209%" height="15" fill="rgb(228,99,48)"/><text x="60.1023%" y="127.50"></text></g><g><title>region_scope_tree (968,965 samples, 0.31%)</title><rect x="60.3926%" y="117" width="0.3133%" height="15" fill="rgb(253,11,6)"/><text x="60.6426%" y="127.50"></text></g><g><title>check_impl_item_well_formed (16,840,572 samples, 5.45%)</title><rect x="55.2775%" y="133" width="5.4454%" height="15" fill="rgb(247,143,39)"/><text x="55.5275%" y="143.50">check_i..</text></g><g><title>evaluate_obligation (357,572 samples, 0.12%)</title><rect x="63.8807%" y="117" width="0.1156%" height="15" fill="rgb(236,97,10)"/><text x="64.1307%" y="127.50"></text></g><g><title>implied_outlives_bounds (510,798 samples, 0.17%)</title><rect x="64.0395%" y="117" width="0.1652%" height="15" fill="rgb(233,208,19)"/><text x="64.2895%" y="127.50"></text></g><g><title>param_env (2,036,065 samples, 0.66%)</title><rect x="64.2135%" y="117" width="0.6584%" height="15" fill="rgb(216,164,2)"/><text x="64.4635%" y="127.50"></text></g><g><title>check_item_well_formed (13,456,413 samples, 4.35%)</title><rect x="60.7230%" y="133" width="4.3512%" height="15" fill="rgb(220,129,5)"/><text x="60.9730%" y="143.50">check..</text></g><g><title>variances_of (317,294 samples, 0.10%)</title><rect x="64.9715%" y="117" width="0.1026%" height="15" fill="rgb(242,17,10)"/><text x="65.2215%" y="127.50"></text></g><g><title>crate_variances (310,243 samples, 0.10%)</title><rect x="64.9738%" y="101" width="0.1003%" height="15" fill="rgb(242,107,0)"/><text x="65.2238%" y="111.50"></text></g><g><title>analysis (184,919,394 samples, 59.79%)</title><rect x="5.7761%" y="181" width="59.7942%" height="15" fill="rgb(251,28,31)"/><text x="6.0261%" y="191.50">analysis</text></g><g><title>type_check_crate (114,865,241 samples, 37.14%)</title><rect x="28.4283%" y="165" width="37.1420%" height="15" fill="rgb(233,223,10)"/><text x="28.6783%" y="175.50">type_check_crate</text></g><g><title>wf_checking (32,907,635 samples, 10.64%)</title><rect x="54.9296%" y="149" width="10.6408%" height="15" fill="rgb(215,21,27)"/><text x="55.1796%" y="159.50">wf_checking</text></g><g><title>check_trait_item_well_formed (1,534,608 samples, 0.50%)</title><rect x="65.0741%" y="133" width="0.4962%" height="15" fill="rgb(232,23,21)"/><text x="65.3241%" y="143.50"></text></g><g><title>fn_abi_of_instance (385,825 samples, 0.12%)</title><rect x="65.9531%" y="149" width="0.1248%" height="15" fill="rgb(244,5,23)"/><text x="66.2031%" y="159.50"></text></g><g><title>codegen_module (1,037,793 samples, 0.34%)</title><rect x="65.7532%" y="165" width="0.3356%" height="15" fill="rgb(226,81,46)"/><text x="66.0032%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (365,835 samples, 0.12%)</title><rect x="66.0943%" y="133" width="0.1183%" height="15" fill="rgb(247,70,30)"/><text x="66.3443%" y="143.50"></text></g><g><title>monomorphization_collector (428,645 samples, 0.14%)</title><rect x="66.0936%" y="149" width="0.1386%" height="15" fill="rgb(212,68,19)"/><text x="66.3436%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (498,326 samples, 0.16%)</title><rect x="66.0890%" y="165" width="0.1611%" height="15" fill="rgb(240,187,13)"/><text x="66.3390%" y="175.50"></text></g><g><title>codegen_crate (2,179,416 samples, 0.70%)</title><rect x="65.5737%" y="181" width="0.7047%" height="15" fill="rgb(223,113,26)"/><text x="65.8237%" y="191.50"></text></g><g><title>codegen_module_optimize (5,987,742 samples, 1.94%)</title><rect x="66.2784%" y="181" width="1.9362%" height="15" fill="rgb(206,192,2)"/><text x="66.5284%" y="191.50">c..</text></g><g><title>LLVM_module_optimize (5,085,582 samples, 1.64%)</title><rect x="66.5701%" y="165" width="1.6444%" height="15" fill="rgb(241,108,4)"/><text x="66.8201%" y="175.50"></text></g><g><title>LLVM_lto_optimize (2,469,739 samples, 0.80%)</title><rect x="68.4207%" y="165" width="0.7986%" height="15" fill="rgb(247,173,49)"/><text x="68.6707%" y="175.50"></text></g><g><title>LLVM_module_codegen (6,978,834 samples, 2.26%)</title><rect x="69.2192%" y="165" width="2.2566%" height="15" fill="rgb(224,114,35)"/><text x="69.4692%" y="175.50">L..</text></g><g><title>LLVM_module_codegen_emit_obj (6,858,083 samples, 2.22%)</title><rect x="69.2583%" y="149" width="2.2176%" height="15" fill="rgb(245,159,27)"/><text x="69.5083%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (10,168,053 samples, 3.29%)</title><rect x="68.2146%" y="181" width="3.2879%" height="15" fill="rgb(245,172,44)"/><text x="68.4646%" y="191.50">cod..</text></g><g><title>AST_validation (496,946 samples, 0.16%)</title><rect x="71.5662%" y="165" width="0.1607%" height="15" fill="rgb(236,23,11)"/><text x="71.8162%" y="175.50"></text></g><g><title>metadata_register_crate (1,551,498 samples, 0.50%)</title><rect x="81.0586%" y="133" width="0.5017%" height="15" fill="rgb(205,117,38)"/><text x="81.3086%" y="143.50"></text></g><g><title>metadata_register_crate (568,527 samples, 0.18%)</title><rect x="81.3765%" y="117" width="0.1838%" height="15" fill="rgb(237,72,25)"/><text x="81.6265%" y="127.50"></text></g><g><title>macro_expand_crate (30,804,960 samples, 9.96%)</title><rect x="71.7940%" y="165" width="9.9609%" height="15" fill="rgb(244,70,9)"/><text x="72.0440%" y="175.50">macro_expand_c..</text></g><g><title>expand_crate (30,790,430 samples, 9.96%)</title><rect x="71.7987%" y="149" width="9.9562%" height="15" fill="rgb(217,125,39)"/><text x="72.0487%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (601,827 samples, 0.19%)</title><rect x="81.5603%" y="133" width="0.1946%" height="15" fill="rgb(235,36,10)"/><text x="81.8103%" y="143.50"></text></g><g><title>finalize_macro_resolutions (328,514 samples, 0.11%)</title><rect x="81.8030%" y="149" width="0.1062%" height="15" fill="rgb(251,123,47)"/><text x="82.0530%" y="159.50"></text></g><g><title>late_resolve_crate (3,672,345 samples, 1.19%)</title><rect x="81.9093%" y="149" width="1.1875%" height="15" fill="rgb(221,13,13)"/><text x="82.1593%" y="159.50"></text></g><g><title>configure_and_expand (36,069,144 samples, 11.66%)</title><rect x="71.5025%" y="181" width="11.6631%" height="15" fill="rgb(238,131,9)"/><text x="71.7525%" y="191.50">configure_and_exp..</text></g><g><title>resolve_crate (4,293,552 samples, 1.39%)</title><rect x="81.7772%" y="165" width="1.3883%" height="15" fill="rgb(211,50,8)"/><text x="82.0272%" y="175.50"></text></g><g><title>drop_ast (654,888 samples, 0.21%)</title><rect x="83.1655%" y="181" width="0.2118%" height="15" fill="rgb(245,182,24)"/><text x="83.4155%" y="191.50"></text></g><g><title>early_lint_checks (695,139 samples, 0.22%)</title><rect x="83.3839%" y="181" width="0.2248%" height="15" fill="rgb(242,14,37)"/><text x="83.6339%" y="191.50"></text></g><g><title>free_global_ctxt (5,668,978 samples, 1.83%)</title><rect x="83.6087%" y="181" width="1.8331%" height="15" fill="rgb(246,228,12)"/><text x="83.8587%" y="191.50">f..</text></g><g><title>reachable_non_generics (382,005 samples, 0.12%)</title><rect x="87.1723%" y="149" width="0.1235%" height="15" fill="rgb(213,55,15)"/><text x="87.4223%" y="159.50"></text></g><g><title>reachable_set (338,874 samples, 0.11%)</title><rect x="87.1862%" y="133" width="0.1096%" height="15" fill="rgb(209,9,3)"/><text x="87.4362%" y="143.50"></text></g><g><title>exported_symbols (474,316 samples, 0.15%)</title><rect x="87.1656%" y="165" width="0.1534%" height="15" fill="rgb(230,59,30)"/><text x="87.4156%" y="175.50"></text></g><g><title>is_sized_raw (865,872 samples, 0.28%)</title><rect x="89.9818%" y="133" width="0.2800%" height="15" fill="rgb(209,121,21)"/><text x="90.2318%" y="143.50"></text></g><g><title>evaluate_obligation (612,240 samples, 0.20%)</title><rect x="90.0638%" y="117" width="0.1980%" height="15" fill="rgb(220,109,13)"/><text x="90.3138%" y="127.50"></text></g><g><title>layout_of (1,964,263 samples, 0.64%)</title><rect x="89.7696%" y="149" width="0.6352%" height="15" fill="rgb(232,18,1)"/><text x="90.0196%" y="159.50"></text></g><g><title>needs_drop_raw (337,553 samples, 0.11%)</title><rect x="92.3155%" y="133" width="0.1091%" height="15" fill="rgb(215,41,42)"/><text x="92.5655%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (7,043,623 samples, 2.28%)</title><rect x="90.4047%" y="149" width="2.2776%" height="15" fill="rgb(224,123,36)"/><text x="90.6547%" y="159.50">m..</text></g><g><title>try_normalize_generic_arg_after_erasing_regions (609,987 samples, 0.20%)</title><rect x="92.4850%" y="133" width="0.1972%" height="15" fill="rgb(240,125,3)"/><text x="92.7350%" y="143.50"></text></g><g><title>normalize_projection_ty (570,017 samples, 0.18%)</title><rect x="92.4980%" y="117" width="0.1843%" height="15" fill="rgb(205,98,50)"/><text x="92.7480%" y="127.50"></text></g><g><title>optimized_mir (16,179,988 samples, 5.23%)</title><rect x="87.5081%" y="165" width="5.2318%" height="15" fill="rgb(205,185,37)"/><text x="87.7581%" y="175.50">optimi..</text></g><g><title>generate_crate_metadata (22,792,724 samples, 7.37%)</title><rect x="85.4418%" y="181" width="7.3701%" height="15" fill="rgb(238,207,15)"/><text x="85.6918%" y="191.50">generate_c..</text></g><g><title>hir_lowering (8,087,757 samples, 2.62%)</title><rect x="92.8119%" y="181" width="2.6152%" height="15" fill="rgb(213,199,42)"/><text x="93.0619%" y="191.50">hi..</text></g><g><title>finish_ongoing_codegen (9,640,176 samples, 3.12%)</title><rect x="95.4321%" y="165" width="3.1172%" height="15" fill="rgb(235,201,11)"/><text x="95.6821%" y="175.50">fin..</text></g><g><title>link_crate (1,432,808 samples, 0.46%)</title><rect x="98.5493%" y="165" width="0.4633%" height="15" fill="rgb(207,46,11)"/><text x="98.7993%" y="175.50"></text></g><g><title>link_binary (1,393,427 samples, 0.45%)</title><rect x="98.5620%" y="149" width="0.4506%" height="15" fill="rgb(241,35,35)"/><text x="98.8120%" y="159.50"></text></g><g><title>link_rlib (1,068,123 samples, 0.35%)</title><rect x="98.6672%" y="133" width="0.3454%" height="15" fill="rgb(243,32,47)"/><text x="98.9172%" y="143.50"></text></g><g><title>link (11,097,604 samples, 3.59%)</title><rect x="95.4271%" y="181" width="3.5884%" height="15" fill="rgb(247,202,23)"/><text x="95.6771%" y="191.50">link</text></g><g><title>parse_crate (378,144 samples, 0.12%)</title><rect x="99.0155%" y="181" width="0.1223%" height="15" fill="rgb(219,102,11)"/><text x="99.2655%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (1,759,481 samples, 0.57%)</title><rect x="99.2176%" y="181" width="0.5689%" height="15" fill="rgb(243,110,44)"/><text x="99.4676%" y="191.50"></text></g><g><title>all (309,259,529 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (309,259,529 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (566,696 samples, 0.18%)</title><rect x="99.8168%" y="181" width="0.1832%" height="15" fill="rgb(226,22,26)"/><text x="100.0668%" y="191.50"></text></g></svg></svg>