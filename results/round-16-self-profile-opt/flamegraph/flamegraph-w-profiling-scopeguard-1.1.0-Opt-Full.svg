<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (11,779,182 samples, 11.99%)</title><rect x="0.8635%" y="197" width="11.9875%" height="15" fill="rgb(227,0,7)"/><text x="1.1135%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (142,912 samples, 0.15%)</title><rect x="12.7056%" y="181" width="0.1454%" height="15" fill="rgb(217,0,24)"/><text x="12.9556%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (126,551 samples, 0.13%)</title><rect x="12.7222%" y="165" width="0.1288%" height="15" fill="rgb(221,193,54)"/><text x="12.9722%" y="175.50"></text></g><g><title>needs_drop_raw (380,424 samples, 0.39%)</title><rect x="16.2600%" y="85" width="0.3872%" height="15" fill="rgb(248,212,6)"/><text x="16.5100%" y="95.50"></text></g><g><title>is_copy_raw (291,483 samples, 0.30%)</title><rect x="16.3506%" y="69" width="0.2966%" height="15" fill="rgb(208,68,35)"/><text x="16.6006%" y="79.50"></text></g><g><title>evaluate_obligation (269,182 samples, 0.27%)</title><rect x="16.3732%" y="53" width="0.2739%" height="15" fill="rgb(232,128,0)"/><text x="16.6232%" y="63.50"></text></g><g><title>trait_impls_of (150,531 samples, 0.15%)</title><rect x="16.4940%" y="37" width="0.1532%" height="15" fill="rgb(207,160,47)"/><text x="16.7440%" y="47.50"></text></g><g><title>resolve_instance (131,852 samples, 0.13%)</title><rect x="16.6472%" y="85" width="0.1342%" height="15" fill="rgb(228,23,34)"/><text x="16.8972%" y="95.50"></text></g><g><title>thir_body (170,841 samples, 0.17%)</title><rect x="16.7887%" y="85" width="0.1739%" height="15" fill="rgb(218,30,26)"/><text x="17.0387%" y="95.50"></text></g><g><title>mir_const (1,623,489 samples, 1.65%)</title><rect x="15.3142%" y="133" width="1.6522%" height="15" fill="rgb(220,122,19)"/><text x="15.5642%" y="143.50"></text></g><g><title>unsafety_check_result (1,324,185 samples, 1.35%)</title><rect x="15.6188%" y="117" width="1.3476%" height="15" fill="rgb(250,228,42)"/><text x="15.8688%" y="127.50"></text></g><g><title>mir_built (1,146,634 samples, 1.17%)</title><rect x="15.7995%" y="101" width="1.1669%" height="15" fill="rgb(240,193,28)"/><text x="16.0495%" y="111.50"></text></g><g><title>mir_promoted (1,846,041 samples, 1.88%)</title><rect x="15.1009%" y="149" width="1.8787%" height="15" fill="rgb(216,20,37)"/><text x="15.3509%" y="159.50">m..</text></g><g><title>type_op_ascribe_user_type (168,131 samples, 0.17%)</title><rect x="16.9796%" y="149" width="0.1711%" height="15" fill="rgb(206,188,39)"/><text x="17.2296%" y="159.50"></text></g><g><title>type_op_prove_predicate (320,804 samples, 0.33%)</title><rect x="17.2475%" y="149" width="0.3265%" height="15" fill="rgb(217,207,13)"/><text x="17.4975%" y="159.50"></text></g><g><title>MIR_borrow_checking (4,423,619 samples, 4.50%)</title><rect x="13.0734%" y="181" width="4.5019%" height="15" fill="rgb(231,73,38)"/><text x="13.3234%" y="191.50">MIR_b..</text></g><g><title>mir_borrowck (4,398,108 samples, 4.48%)</title><rect x="13.0993%" y="165" width="4.4759%" height="15" fill="rgb(225,20,46)"/><text x="13.3493%" y="175.50">mir_b..</text></g><g><title>hir_module_items (176,491 samples, 0.18%)</title><rect x="17.5830%" y="181" width="0.1796%" height="15" fill="rgb(210,31,41)"/><text x="17.8330%" y="191.50"></text></g><g><title>get_lang_items (106,691 samples, 0.11%)</title><rect x="18.0812%" y="133" width="0.1086%" height="15" fill="rgb(221,200,47)"/><text x="18.3312%" y="143.50"></text></g><g><title>should_inherit_track_caller (195,712 samples, 0.20%)</title><rect x="18.1898%" y="133" width="0.1992%" height="15" fill="rgb(226,26,5)"/><text x="18.4398%" y="143.50"></text></g><g><title>codegen_fn_attrs (444,966 samples, 0.45%)</title><rect x="17.9723%" y="149" width="0.4528%" height="15" fill="rgb(249,33,26)"/><text x="18.2223%" y="159.50"></text></g><g><title>check_mod_attrs (622,497 samples, 0.63%)</title><rect x="17.7918%" y="165" width="0.6335%" height="15" fill="rgb(235,183,28)"/><text x="18.0418%" y="175.50"></text></g><g><title>lookup_deprecation_entry (129,863 samples, 0.13%)</title><rect x="18.6882%" y="149" width="0.1322%" height="15" fill="rgb(221,5,38)"/><text x="18.9382%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (359,014 samples, 0.37%)</title><rect x="18.5519%" y="165" width="0.3654%" height="15" fill="rgb(247,18,42)"/><text x="18.8019%" y="175.50"></text></g><g><title>misc_checking_1 (1,189,834 samples, 1.21%)</title><rect x="17.7631%" y="181" width="1.2109%" height="15" fill="rgb(241,131,45)"/><text x="18.0131%" y="191.50"></text></g><g><title>misc_checking_2 (198,623 samples, 0.20%)</title><rect x="18.9740%" y="181" width="0.2021%" height="15" fill="rgb(249,31,29)"/><text x="19.2240%" y="191.50"></text></g><g><title>match_checking (102,752 samples, 0.10%)</title><rect x="19.0716%" y="165" width="0.1046%" height="15" fill="rgb(225,111,53)"/><text x="19.3216%" y="175.50"></text></g><g><title>death_checking (160,712 samples, 0.16%)</title><rect x="19.2560%" y="165" width="0.1636%" height="15" fill="rgb(238,160,17)"/><text x="19.5060%" y="175.50"></text></g><g><title>crate_lints (1,971,022 samples, 2.01%)</title><rect x="19.4212%" y="149" width="2.0059%" height="15" fill="rgb(214,148,48)"/><text x="19.6712%" y="159.50">c..</text></g><g><title>type_of (1,305,056 samples, 1.33%)</title><rect x="20.0989%" y="133" width="1.3281%" height="15" fill="rgb(232,36,49)"/><text x="20.3489%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (789,110 samples, 0.80%)</title><rect x="20.6240%" y="117" width="0.8031%" height="15" fill="rgb(209,103,24)"/><text x="20.8740%" y="127.50"></text></g><g><title>lint_checking (2,087,654 samples, 2.12%)</title><rect x="19.4195%" y="165" width="2.1246%" height="15" fill="rgb(229,88,8)"/><text x="19.6695%" y="175.50">l..</text></g><g><title>module_lints (115,032 samples, 0.12%)</title><rect x="21.4270%" y="149" width="0.1171%" height="15" fill="rgb(213,181,19)"/><text x="21.6770%" y="159.50"></text></g><g><title>lint_mod (112,832 samples, 0.11%)</title><rect x="21.4293%" y="133" width="0.1148%" height="15" fill="rgb(254,191,54)"/><text x="21.6793%" y="143.50"></text></g><g><title>privacy_checking_modules (168,331 samples, 0.17%)</title><rect x="21.6364%" y="165" width="0.1713%" height="15" fill="rgb(241,83,37)"/><text x="21.8864%" y="175.50"></text></g><g><title>check_mod_privacy (166,811 samples, 0.17%)</title><rect x="21.6379%" y="149" width="0.1698%" height="15" fill="rgb(233,36,39)"/><text x="21.8879%" y="159.50"></text></g><g><title>misc_checking_3 (2,595,659 samples, 2.64%)</title><rect x="19.1761%" y="181" width="2.6416%" height="15" fill="rgb(226,3,54)"/><text x="19.4261%" y="191.50">mi..</text></g><g><title>impl_parent (1,809,604 samples, 1.84%)</title><rect x="24.8092%" y="117" width="1.8416%" height="15" fill="rgb(245,192,40)"/><text x="25.0592%" y="127.50">i..</text></g><g><title>metadata_decode_entry_impl_parent (1,073,125 samples, 1.09%)</title><rect x="25.5587%" y="101" width="1.0921%" height="15" fill="rgb(238,167,29)"/><text x="25.8087%" y="111.50"></text></g><g><title>impl_trait_ref (6,851,434 samples, 6.97%)</title><rect x="26.6509%" y="117" width="6.9726%" height="15" fill="rgb(232,182,51)"/><text x="26.9009%" y="127.50">impl_trai..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,111,546 samples, 6.22%)</title><rect x="27.4038%" y="101" width="6.2196%" height="15" fill="rgb(231,60,39)"/><text x="27.6538%" y="111.50">metadata..</text></g><g><title>coherent_trait (12,170,908 samples, 12.39%)</title><rect x="21.8861%" y="149" width="12.3862%" height="15" fill="rgb(208,69,12)"/><text x="22.1361%" y="159.50">coherent_trait</text></g><g><title>specialization_graph_of (12,147,348 samples, 12.36%)</title><rect x="21.9101%" y="133" width="12.3622%" height="15" fill="rgb(235,93,37)"/><text x="22.1601%" y="143.50">specialization_gra..</text></g><g><title>trait_impls_of (634,587 samples, 0.65%)</title><rect x="33.6264%" y="117" width="0.6458%" height="15" fill="rgb(213,116,39)"/><text x="33.8764%" y="127.50"></text></g><g><title>implementations_of_trait (157,392 samples, 0.16%)</title><rect x="34.1121%" y="101" width="0.1602%" height="15" fill="rgb(222,207,29)"/><text x="34.3621%" y="111.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (110,752 samples, 0.11%)</title><rect x="34.1595%" y="85" width="0.1127%" height="15" fill="rgb(206,96,30)"/><text x="34.4095%" y="95.50"></text></g><g><title>coherence_checking (12,266,498 samples, 12.48%)</title><rect x="21.8601%" y="165" width="12.4834%" height="15" fill="rgb(218,138,4)"/><text x="22.1101%" y="175.50">coherence_checking</text></g><g><title>dropck_outlives (124,041 samples, 0.13%)</title><rect x="37.8007%" y="117" width="0.1262%" height="15" fill="rgb(250,191,14)"/><text x="38.0507%" y="127.50"></text></g><g><title>evaluate_obligation (346,094 samples, 0.35%)</title><rect x="37.9269%" y="117" width="0.3522%" height="15" fill="rgb(239,60,40)"/><text x="38.1769%" y="127.50"></text></g><g><title>item_attrs (111,783 samples, 0.11%)</title><rect x="38.4308%" y="117" width="0.1138%" height="15" fill="rgb(206,27,48)"/><text x="38.6808%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (108,843 samples, 0.11%)</title><rect x="38.4338%" y="101" width="0.1108%" height="15" fill="rgb(225,35,8)"/><text x="38.6838%" y="111.50"></text></g><g><title>object_safety_violations (155,642 samples, 0.16%)</title><rect x="38.6029%" y="117" width="0.1584%" height="15" fill="rgb(250,213,24)"/><text x="38.8529%" y="127.50"></text></g><g><title>predicates_of (103,061 samples, 0.10%)</title><rect x="38.7731%" y="117" width="0.1049%" height="15" fill="rgb(247,123,22)"/><text x="39.0231%" y="127.50"></text></g><g><title>item_bodies_checking (4,486,590 samples, 4.57%)</title><rect x="34.3860%" y="165" width="4.5659%" height="15" fill="rgb(231,138,38)"/><text x="34.6360%" y="175.50">item_..</text></g><g><title>typeck_item_bodies (4,484,100 samples, 4.56%)</title><rect x="34.3885%" y="149" width="4.5634%" height="15" fill="rgb(231,145,46)"/><text x="34.6385%" y="159.50">typec..</text></g><g><title>typeck (4,461,329 samples, 4.54%)</title><rect x="34.4117%" y="133" width="4.5402%" height="15" fill="rgb(251,118,11)"/><text x="34.6617%" y="143.50">typeck</text></g><g><title>item_types_checking (800,909 samples, 0.82%)</title><rect x="38.9519%" y="165" width="0.8151%" height="15" fill="rgb(217,147,25)"/><text x="39.2019%" y="175.50"></text></g><g><title>check_mod_item_types (797,239 samples, 0.81%)</title><rect x="38.9556%" y="149" width="0.8113%" height="15" fill="rgb(247,81,37)"/><text x="39.2056%" y="159.50"></text></g><g><title>fn_sig (195,781 samples, 0.20%)</title><rect x="40.0126%" y="133" width="0.1992%" height="15" fill="rgb(209,12,38)"/><text x="40.2626%" y="143.50"></text></g><g><title>generics_of (178,523 samples, 0.18%)</title><rect x="40.2118%" y="133" width="0.1817%" height="15" fill="rgb(227,1,9)"/><text x="40.4618%" y="143.50"></text></g><g><title>late_bound_vars_map (325,324 samples, 0.33%)</title><rect x="40.9237%" y="85" width="0.3311%" height="15" fill="rgb(248,47,43)"/><text x="41.1737%" y="95.50"></text></g><g><title>resolve_lifetimes (309,784 samples, 0.32%)</title><rect x="40.9395%" y="69" width="0.3153%" height="15" fill="rgb(221,10,30)"/><text x="41.1895%" y="79.50"></text></g><g><title>explicit_predicates_of (747,481 samples, 0.76%)</title><rect x="40.5572%" y="101" width="0.7607%" height="15" fill="rgb(210,229,1)"/><text x="40.8072%" y="111.50"></text></g><g><title>predicates_of (1,185,906 samples, 1.21%)</title><rect x="40.4491%" y="133" width="1.2069%" height="15" fill="rgb(222,148,37)"/><text x="40.6991%" y="143.50"></text></g><g><title>predicates_defined_on (1,145,066 samples, 1.17%)</title><rect x="40.4907%" y="117" width="1.1653%" height="15" fill="rgb(234,67,33)"/><text x="40.7407%" y="127.50"></text></g><g><title>inferred_outlives_of (332,175 samples, 0.34%)</title><rect x="41.3179%" y="101" width="0.3380%" height="15" fill="rgb(247,98,35)"/><text x="41.5679%" y="111.50"></text></g><g><title>inferred_outlives_crate (308,523 samples, 0.31%)</title><rect x="41.3420%" y="85" width="0.3140%" height="15" fill="rgb(247,138,52)"/><text x="41.5920%" y="95.50"></text></g><g><title>type_of (193,532 samples, 0.20%)</title><rect x="41.4590%" y="69" width="0.1970%" height="15" fill="rgb(213,79,30)"/><text x="41.7090%" y="79.50"></text></g><g><title>type_collecting (1,989,282 samples, 2.02%)</title><rect x="39.7681%" y="165" width="2.0245%" height="15" fill="rgb(246,177,23)"/><text x="40.0181%" y="175.50">t..</text></g><g><title>collect_mod_item_types (1,977,822 samples, 2.01%)</title><rect x="39.7797%" y="149" width="2.0128%" height="15" fill="rgb(230,62,27)"/><text x="40.0297%" y="159.50">c..</text></g><g><title>evaluate_obligation (424,976 samples, 0.43%)</title><rect x="43.0315%" y="133" width="0.4325%" height="15" fill="rgb(216,154,8)"/><text x="43.2815%" y="143.50"></text></g><g><title>implied_outlives_bounds (186,583 samples, 0.19%)</title><rect x="43.4640%" y="133" width="0.1899%" height="15" fill="rgb(244,35,45)"/><text x="43.7140%" y="143.50"></text></g><g><title>param_env (159,421 samples, 0.16%)</title><rect x="43.6539%" y="133" width="0.1622%" height="15" fill="rgb(251,115,12)"/><text x="43.9039%" y="143.50"></text></g><g><title>check_impl_item_well_formed (2,015,691 samples, 2.05%)</title><rect x="41.9228%" y="149" width="2.0513%" height="15" fill="rgb(240,54,50)"/><text x="42.1728%" y="159.50">c..</text></g><g><title>region_scope_tree (115,220 samples, 0.12%)</title><rect x="43.8569%" y="133" width="0.1173%" height="15" fill="rgb(233,84,52)"/><text x="44.1069%" y="143.50"></text></g><g><title>evaluate_obligation (242,913 samples, 0.25%)</title><rect x="45.9982%" y="133" width="0.2472%" height="15" fill="rgb(207,117,47)"/><text x="46.2482%" y="143.50"></text></g><g><title>implied_outlives_bounds (113,563 samples, 0.12%)</title><rect x="46.2556%" y="133" width="0.1156%" height="15" fill="rgb(249,43,39)"/><text x="46.5056%" y="143.50"></text></g><g><title>param_env (480,684 samples, 0.49%)</title><rect x="46.3712%" y="133" width="0.4892%" height="15" fill="rgb(209,38,44)"/><text x="46.6212%" y="143.50"></text></g><g><title>check_item_well_formed (3,111,028 samples, 3.17%)</title><rect x="43.9742%" y="149" width="3.1660%" height="15" fill="rgb(236,212,23)"/><text x="44.2242%" y="159.50">che..</text></g><g><title>variances_of (103,761 samples, 0.11%)</title><rect x="47.0346%" y="133" width="0.1056%" height="15" fill="rgb(242,79,21)"/><text x="47.2846%" y="143.50"></text></g><g><title>analysis (33,870,691 samples, 34.47%)</title><rect x="12.8510%" y="197" width="34.4697%" height="15" fill="rgb(211,96,35)"/><text x="13.1010%" y="207.50">analysis</text></g><g><title>type_check_crate (25,059,832 samples, 25.50%)</title><rect x="21.8177%" y="181" width="25.5030%" height="15" fill="rgb(253,215,40)"/><text x="22.0677%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,430,582 samples, 5.53%)</title><rect x="41.7941%" y="165" width="5.5266%" height="15" fill="rgb(211,81,21)"/><text x="42.0441%" y="175.50">wf_chec..</text></g><g><title>check_trait_item_well_formed (177,392 samples, 0.18%)</title><rect x="47.1402%" y="149" width="0.1805%" height="15" fill="rgb(208,190,38)"/><text x="47.3902%" y="159.50"></text></g><g><title>is_unpin_raw (109,522 samples, 0.11%)</title><rect x="48.4300%" y="149" width="0.1115%" height="15" fill="rgb(235,213,38)"/><text x="48.6800%" y="159.50"></text></g><g><title>evaluate_obligation (107,312 samples, 0.11%)</title><rect x="48.4323%" y="133" width="0.1092%" height="15" fill="rgb(237,122,38)"/><text x="48.6823%" y="143.50"></text></g><g><title>fn_abi_of_instance (328,074 samples, 0.33%)</title><rect x="48.2696%" y="165" width="0.3339%" height="15" fill="rgb(244,218,35)"/><text x="48.5196%" y="175.50"></text></g><g><title>codegen_module (746,128 samples, 0.76%)</title><rect x="47.8523%" y="181" width="0.7593%" height="15" fill="rgb(240,68,47)"/><text x="48.1023%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (141,221 samples, 0.14%)</title><rect x="48.6272%" y="149" width="0.1437%" height="15" fill="rgb(210,16,53)"/><text x="48.8772%" y="159.50"></text></g><g><title>optimized_mir (126,321 samples, 0.13%)</title><rect x="48.6424%" y="133" width="0.1286%" height="15" fill="rgb(235,124,12)"/><text x="48.8924%" y="143.50"></text></g><g><title>monomorphization_collector (164,072 samples, 0.17%)</title><rect x="48.6252%" y="165" width="0.1670%" height="15" fill="rgb(224,169,11)"/><text x="48.8752%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (213,753 samples, 0.22%)</title><rect x="48.6125%" y="181" width="0.2175%" height="15" fill="rgb(250,166,2)"/><text x="48.8625%" y="191.50"></text></g><g><title>codegen_crate (1,541,438 samples, 1.57%)</title><rect x="47.3320%" y="197" width="1.5687%" height="15" fill="rgb(242,216,29)"/><text x="47.5820%" y="207.50"></text></g><g><title>codegen_module_optimize (5,058,356 samples, 5.15%)</title><rect x="48.9007%" y="197" width="5.1478%" height="15" fill="rgb(230,116,27)"/><text x="49.1507%" y="207.50">codege..</text></g><g><title>LLVM_module_optimize (4,358,649 samples, 4.44%)</title><rect x="49.6128%" y="181" width="4.4357%" height="15" fill="rgb(228,99,48)"/><text x="49.8628%" y="191.50">LLVM_..</text></g><g><title>LLVM_lto_optimize (1,823,160 samples, 1.86%)</title><rect x="54.4660%" y="181" width="1.8554%" height="15" fill="rgb(253,11,6)"/><text x="54.7160%" y="191.50">L..</text></g><g><title>LLVM_module_codegen (3,690,421 samples, 3.76%)</title><rect x="56.3214%" y="181" width="3.7557%" height="15" fill="rgb(247,143,39)"/><text x="56.5714%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen_emit_obj (3,606,001 samples, 3.67%)</title><rect x="56.4073%" y="165" width="3.6698%" height="15" fill="rgb(236,97,10)"/><text x="56.6573%" y="175.50">LLVM..</text></g><g><title>codegen_module_perform_lto (5,974,157 samples, 6.08%)</title><rect x="54.0485%" y="197" width="6.0798%" height="15" fill="rgb(233,208,19)"/><text x="54.2985%" y="207.50">codegen_..</text></g><g><title>AST_validation (135,002 samples, 0.14%)</title><rect x="60.3506%" y="181" width="0.1374%" height="15" fill="rgb(216,164,2)"/><text x="60.6006%" y="191.50"></text></g><g><title>metadata_load_macro (108,631 samples, 0.11%)</title><rect x="71.6774%" y="149" width="0.1106%" height="15" fill="rgb(220,129,5)"/><text x="71.9274%" y="159.50"></text></g><g><title>macro_expand_crate (13,646,344 samples, 13.89%)</title><rect x="60.6306%" y="181" width="13.8877%" height="15" fill="rgb(242,17,10)"/><text x="60.8806%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (13,629,844 samples, 13.87%)</title><rect x="60.6474%" y="165" width="13.8709%" height="15" fill="rgb(242,107,0)"/><text x="60.8974%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (2,682,870 samples, 2.73%)</title><rect x="71.7880%" y="149" width="2.7303%" height="15" fill="rgb(251,28,31)"/><text x="72.0380%" y="159.50">me..</text></g><g><title>metadata_register_crate (985,702 samples, 1.00%)</title><rect x="73.5152%" y="133" width="1.0031%" height="15" fill="rgb(233,223,10)"/><text x="73.7652%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (179,472 samples, 0.18%)</title><rect x="74.5237%" y="181" width="0.1826%" height="15" fill="rgb(215,21,27)"/><text x="74.7737%" y="191.50"></text></g><g><title>late_resolve_crate (2,823,802 samples, 2.87%)</title><rect x="74.8155%" y="165" width="2.8737%" height="15" fill="rgb(232,23,21)"/><text x="75.0655%" y="175.50">la..</text></g><g><title>configure_and_expand (17,333,845 samples, 17.64%)</title><rect x="60.1283%" y="197" width="17.6404%" height="15" fill="rgb(244,5,23)"/><text x="60.3783%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (3,009,184 samples, 3.06%)</title><rect x="74.7064%" y="181" width="3.0624%" height="15" fill="rgb(226,81,46)"/><text x="74.9564%" y="191.50">res..</text></g><g><title>drop_ast (133,572 samples, 0.14%)</title><rect x="77.7688%" y="197" width="0.1359%" height="15" fill="rgb(247,70,30)"/><text x="78.0188%" y="207.50"></text></g><g><title>early_lint_checks (260,393 samples, 0.26%)</title><rect x="77.9251%" y="197" width="0.2650%" height="15" fill="rgb(212,68,19)"/><text x="78.1751%" y="207.50"></text></g><g><title>free_global_ctxt (2,827,592 samples, 2.88%)</title><rect x="78.1901%" y="197" width="2.8776%" height="15" fill="rgb(240,187,13)"/><text x="78.4401%" y="207.50">fr..</text></g><g><title>exported_symbols (127,881 samples, 0.13%)</title><rect x="81.7527%" y="181" width="0.1301%" height="15" fill="rgb(223,113,26)"/><text x="82.0027%" y="191.50"></text></g><g><title>layout_of (160,502 samples, 0.16%)</title><rect x="82.5353%" y="165" width="0.1633%" height="15" fill="rgb(206,192,2)"/><text x="82.7853%" y="175.50"></text></g><g><title>optimized_mir (1,422,725 samples, 1.45%)</title><rect x="81.9395%" y="181" width="1.4479%" height="15" fill="rgb(241,108,4)"/><text x="82.1895%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (676,806 samples, 0.69%)</title><rect x="82.6986%" y="165" width="0.6888%" height="15" fill="rgb(247,173,49)"/><text x="82.9486%" y="175.50"></text></g><g><title>generate_crate_metadata (2,299,656 samples, 2.34%)</title><rect x="81.0677%" y="197" width="2.3403%" height="15" fill="rgb(224,114,35)"/><text x="81.3177%" y="207.50">g..</text></g><g><title>hir_lowering (2,011,652 samples, 2.05%)</title><rect x="83.4081%" y="197" width="2.0472%" height="15" fill="rgb(245,159,27)"/><text x="83.6581%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (8,675,077 samples, 8.83%)</title><rect x="85.4741%" y="181" width="8.8285%" height="15" fill="rgb(245,172,44)"/><text x="85.7241%" y="191.50">finish_ongoi..</text></g><g><title>link_crate (1,105,943 samples, 1.13%)</title><rect x="94.3026%" y="181" width="1.1255%" height="15" fill="rgb(236,23,11)"/><text x="94.5526%" y="191.50"></text></g><g><title>link_binary (1,089,013 samples, 1.11%)</title><rect x="94.3198%" y="165" width="1.1083%" height="15" fill="rgb(205,117,38)"/><text x="94.5698%" y="175.50"></text></g><g><title>link_rlib (675,598 samples, 0.69%)</title><rect x="94.7405%" y="149" width="0.6875%" height="15" fill="rgb(237,72,25)"/><text x="94.9905%" y="159.50"></text></g><g><title>link (9,811,530 samples, 9.99%)</title><rect x="85.4553%" y="197" width="9.9851%" height="15" fill="rgb(244,70,9)"/><text x="85.7053%" y="207.50">link</text></g><g><title>parse_crate (3,203,367 samples, 3.26%)</title><rect x="95.4404%" y="197" width="3.2600%" height="15" fill="rgb(217,125,39)"/><text x="95.6904%" y="207.50">par..</text></g><g><title>prepare_outputs (371,834 samples, 0.38%)</title><rect x="98.7103%" y="197" width="0.3784%" height="15" fill="rgb(235,36,10)"/><text x="98.9603%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (442,015 samples, 0.45%)</title><rect x="99.0887%" y="197" width="0.4498%" height="15" fill="rgb(251,123,47)"/><text x="99.3387%" y="207.50"></text></g><g><title>setup_global_ctxt (144,861 samples, 0.15%)</title><rect x="99.5392%" y="197" width="0.1474%" height="15" fill="rgb(221,13,13)"/><text x="99.7892%" y="207.50"></text></g><g><title>all (98,262,145 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(238,131,9)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (98,262,145 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(211,50,8)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (307,883 samples, 0.31%)</title><rect x="99.6867%" y="197" width="0.3133%" height="15" fill="rgb(245,182,24)"/><text x="99.9367%" y="207.50"></text></g></svg></svg>