<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (12,223,539 samples, 17.30%)</title><rect x="0.9152%" y="261" width="17.3019%" height="15" fill="rgb(227,0,7)"/><text x="1.1652%" y="271.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (180,142 samples, 0.25%)</title><rect x="17.9621%" y="245" width="0.2550%" height="15" fill="rgb(217,0,24)"/><text x="18.2121%" y="255.50"></text></g><g><title>LLVM_thin_lto_global_analysis (164,742 samples, 0.23%)</title><rect x="17.9839%" y="229" width="0.2332%" height="15" fill="rgb(221,193,54)"/><text x="18.2339%" y="239.50"></text></g><g><title>needs_drop_raw (450,454 samples, 0.64%)</title><rect x="19.8971%" y="149" width="0.6376%" height="15" fill="rgb(248,212,6)"/><text x="20.1471%" y="159.50"></text></g><g><title>is_copy_raw (407,894 samples, 0.58%)</title><rect x="19.9573%" y="133" width="0.5774%" height="15" fill="rgb(208,68,35)"/><text x="20.2073%" y="143.50"></text></g><g><title>evaluate_obligation (396,014 samples, 0.56%)</title><rect x="19.9742%" y="117" width="0.5605%" height="15" fill="rgb(232,128,0)"/><text x="20.2242%" y="127.50"></text></g><g><title>trait_impls_of (255,123 samples, 0.36%)</title><rect x="20.1736%" y="101" width="0.3611%" height="15" fill="rgb(207,160,47)"/><text x="20.4236%" y="111.50"></text></g><g><title>thir_body (90,511 samples, 0.13%)</title><rect x="20.5767%" y="149" width="0.1281%" height="15" fill="rgb(228,23,34)"/><text x="20.8267%" y="159.50"></text></g><g><title>mir_const (974,321 samples, 1.38%)</title><rect x="19.3342%" y="197" width="1.3791%" height="15" fill="rgb(218,30,26)"/><text x="19.5842%" y="207.50"></text></g><g><title>unsafety_check_result (826,739 samples, 1.17%)</title><rect x="19.5431%" y="181" width="1.1702%" height="15" fill="rgb(220,122,19)"/><text x="19.7931%" y="191.50"></text></g><g><title>mir_built (701,978 samples, 0.99%)</title><rect x="19.7197%" y="165" width="0.9936%" height="15" fill="rgb(250,228,42)"/><text x="19.9697%" y="175.50"></text></g><g><title>mir_promoted (1,097,422 samples, 1.55%)</title><rect x="19.1689%" y="213" width="1.5534%" height="15" fill="rgb(240,193,28)"/><text x="19.4189%" y="223.50"></text></g><g><title>MIR_borrow_checking (1,692,819 samples, 2.40%)</title><rect x="18.3920%" y="245" width="2.3961%" height="15" fill="rgb(216,20,37)"/><text x="18.6420%" y="255.50">MI..</text></g><g><title>mir_borrowck (1,689,779 samples, 2.39%)</title><rect x="18.3963%" y="229" width="2.3918%" height="15" fill="rgb(206,188,39)"/><text x="18.6463%" y="239.50">mi..</text></g><g><title>hir_module_items (114,612 samples, 0.16%)</title><rect x="20.7924%" y="245" width="0.1622%" height="15" fill="rgb(217,207,13)"/><text x="21.0424%" y="255.50"></text></g><g><title>codegen_fn_attrs (138,582 samples, 0.20%)</title><rect x="21.0599%" y="213" width="0.1962%" height="15" fill="rgb(231,73,38)"/><text x="21.3099%" y="223.50"></text></g><g><title>check_mod_attrs (183,612 samples, 0.26%)</title><rect x="20.9965%" y="229" width="0.2599%" height="15" fill="rgb(225,20,46)"/><text x="21.2465%" y="239.50"></text></g><g><title>check_mod_unstable_api_usage (197,582 samples, 0.28%)</title><rect x="21.3195%" y="229" width="0.2797%" height="15" fill="rgb(210,31,41)"/><text x="21.5695%" y="239.50"></text></g><g><title>misc_checking_1 (490,046 samples, 0.69%)</title><rect x="20.9551%" y="245" width="0.6936%" height="15" fill="rgb(221,200,47)"/><text x="21.2051%" y="255.50"></text></g><g><title>misc_checking_2 (90,471 samples, 0.13%)</title><rect x="21.6487%" y="245" width="0.1281%" height="15" fill="rgb(226,26,5)"/><text x="21.8987%" y="255.50"></text></g><g><title>crate_lints (86,031 samples, 0.12%)</title><rect x="21.8955%" y="213" width="0.1218%" height="15" fill="rgb(249,33,26)"/><text x="22.1455%" y="223.50"></text></g><g><title>lint_checking (107,071 samples, 0.15%)</title><rect x="21.8934%" y="229" width="0.1516%" height="15" fill="rgb(235,183,28)"/><text x="22.1434%" y="239.50"></text></g><g><title>misc_checking_3 (250,712 samples, 0.35%)</title><rect x="21.7768%" y="245" width="0.3549%" height="15" fill="rgb(221,5,38)"/><text x="22.0268%" y="255.50"></text></g><g><title>associated_item (174,251 samples, 0.25%)</title><rect x="23.8761%" y="165" width="0.2466%" height="15" fill="rgb(247,18,42)"/><text x="24.1261%" y="175.50"></text></g><g><title>metadata_decode_entry_associated_item (136,370 samples, 0.19%)</title><rect x="23.9298%" y="149" width="0.1930%" height="15" fill="rgb(241,131,45)"/><text x="24.1798%" y="159.50"></text></g><g><title>associated_items (260,682 samples, 0.37%)</title><rect x="23.7711%" y="181" width="0.3690%" height="15" fill="rgb(249,31,29)"/><text x="24.0211%" y="191.50"></text></g><g><title>impl_parent (125,160 samples, 0.18%)</title><rect x="24.5137%" y="85" width="0.1772%" height="15" fill="rgb(225,111,53)"/><text x="24.7637%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (90,720 samples, 0.13%)</title><rect x="24.5624%" y="69" width="0.1284%" height="15" fill="rgb(238,160,17)"/><text x="24.8124%" y="79.50"></text></g><g><title>impl_trait_ref (478,858 samples, 0.68%)</title><rect x="24.6909%" y="85" width="0.6778%" height="15" fill="rgb(214,148,48)"/><text x="24.9409%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (441,588 samples, 0.63%)</title><rect x="24.7436%" y="69" width="0.6250%" height="15" fill="rgb(232,36,49)"/><text x="24.9936%" y="79.50"></text></g><g><title>coherent_trait (813,089 samples, 1.15%)</title><rect x="24.2854%" y="117" width="1.1509%" height="15" fill="rgb(209,103,24)"/><text x="24.5354%" y="127.50"></text></g><g><title>specialization_graph_of (802,079 samples, 1.14%)</title><rect x="24.3010%" y="101" width="1.1353%" height="15" fill="rgb(229,88,8)"/><text x="24.5510%" y="111.50"></text></g><g><title>adt_destructor (825,949 samples, 1.17%)</title><rect x="24.2703%" y="149" width="1.1691%" height="15" fill="rgb(213,181,19)"/><text x="24.5203%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (823,559 samples, 1.17%)</title><rect x="24.2737%" y="133" width="1.1657%" height="15" fill="rgb(254,191,54)"/><text x="24.5237%" y="143.50"></text></g><g><title>dropck_outlives (930,271 samples, 1.32%)</title><rect x="24.1578%" y="181" width="1.3168%" height="15" fill="rgb(241,83,37)"/><text x="24.4078%" y="191.50"></text></g><g><title>adt_dtorck_constraint (888,300 samples, 1.26%)</title><rect x="24.2172%" y="165" width="1.2573%" height="15" fill="rgb(233,36,39)"/><text x="24.4672%" y="175.50"></text></g><g><title>adt_def (303,353 samples, 0.43%)</title><rect x="25.7584%" y="149" width="0.4294%" height="15" fill="rgb(226,3,54)"/><text x="26.0084%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_def (300,233 samples, 0.42%)</title><rect x="25.7628%" y="133" width="0.4250%" height="15" fill="rgb(245,192,40)"/><text x="26.0128%" y="143.50"></text></g><g><title>item_attrs (277,273 samples, 0.39%)</title><rect x="25.7953%" y="117" width="0.3925%" height="15" fill="rgb(238,167,29)"/><text x="26.0453%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (274,573 samples, 0.39%)</title><rect x="25.7992%" y="101" width="0.3886%" height="15" fill="rgb(232,182,51)"/><text x="26.0492%" y="111.50"></text></g><g><title>adt_sized_constraint (395,434 samples, 0.56%)</title><rect x="25.7380%" y="165" width="0.5597%" height="15" fill="rgb(231,60,39)"/><text x="25.9880%" y="175.50"></text></g><g><title>specializes (208,223 samples, 0.29%)</title><rect x="26.4152%" y="165" width="0.2947%" height="15" fill="rgb(208,69,12)"/><text x="26.6652%" y="175.50"></text></g><g><title>param_env (191,292 samples, 0.27%)</title><rect x="26.4392%" y="149" width="0.2708%" height="15" fill="rgb(235,93,37)"/><text x="26.6892%" y="159.50"></text></g><g><title>def_span (171,602 samples, 0.24%)</title><rect x="26.4670%" y="133" width="0.2429%" height="15" fill="rgb(213,116,39)"/><text x="26.7170%" y="143.50"></text></g><g><title>metadata_decode_entry_def_span (170,162 samples, 0.24%)</title><rect x="26.4691%" y="117" width="0.2409%" height="15" fill="rgb(222,207,29)"/><text x="26.7191%" y="127.50"></text></g><g><title>evaluate_obligation (1,272,474 samples, 1.80%)</title><rect x="25.4745%" y="181" width="1.8011%" height="15" fill="rgb(206,96,30)"/><text x="25.7245%" y="191.50">e..</text></g><g><title>trait_impls_of (397,264 samples, 0.56%)</title><rect x="26.7134%" y="165" width="0.5623%" height="15" fill="rgb(218,138,4)"/><text x="26.9634%" y="175.50"></text></g><g><title>implementations_of_trait (92,750 samples, 0.13%)</title><rect x="27.1444%" y="149" width="0.1313%" height="15" fill="rgb(250,191,14)"/><text x="27.3944%" y="159.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (78,070 samples, 0.11%)</title><rect x="27.1652%" y="133" width="0.1105%" height="15" fill="rgb(239,60,40)"/><text x="27.4152%" y="143.50"></text></g><g><title>fn_sig (76,111 samples, 0.11%)</title><rect x="27.2851%" y="181" width="0.1077%" height="15" fill="rgb(206,27,48)"/><text x="27.5351%" y="191.50"></text></g><g><title>metadata_decode_entry_fn_sig (72,121 samples, 0.10%)</title><rect x="27.2908%" y="165" width="0.1021%" height="15" fill="rgb(225,35,8)"/><text x="27.5408%" y="175.50"></text></g><g><title>method_autoderef_steps (160,821 samples, 0.23%)</title><rect x="27.7101%" y="181" width="0.2276%" height="15" fill="rgb(250,213,24)"/><text x="27.9601%" y="191.50"></text></g><g><title>evaluate_obligation (135,301 samples, 0.19%)</title><rect x="27.7463%" y="165" width="0.1915%" height="15" fill="rgb(247,123,22)"/><text x="27.9963%" y="175.50"></text></g><g><title>explicit_predicates_of (91,802 samples, 0.13%)</title><rect x="28.0513%" y="149" width="0.1299%" height="15" fill="rgb(231,138,38)"/><text x="28.3013%" y="159.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (81,841 samples, 0.12%)</title><rect x="28.0654%" y="133" width="0.1158%" height="15" fill="rgb(231,145,46)"/><text x="28.3154%" y="143.50"></text></g><g><title>predicates_of (197,254 samples, 0.28%)</title><rect x="27.9603%" y="181" width="0.2792%" height="15" fill="rgb(251,118,11)"/><text x="28.2103%" y="191.50"></text></g><g><title>predicates_defined_on (159,583 samples, 0.23%)</title><rect x="28.0137%" y="165" width="0.2259%" height="15" fill="rgb(217,147,25)"/><text x="28.2637%" y="175.50"></text></g><g><title>type_of (75,761 samples, 0.11%)</title><rect x="28.3246%" y="181" width="0.1072%" height="15" fill="rgb(247,81,37)"/><text x="28.5746%" y="191.50"></text></g><g><title>item_bodies_checking (4,422,189 samples, 6.26%)</title><rect x="22.2101%" y="229" width="6.2594%" height="15" fill="rgb(209,12,38)"/><text x="22.4601%" y="239.50">item_bod..</text></g><g><title>typeck_item_bodies (4,419,159 samples, 6.26%)</title><rect x="22.2144%" y="213" width="6.2551%" height="15" fill="rgb(227,1,9)"/><text x="22.4644%" y="223.50">typeck_i..</text></g><g><title>typeck (4,414,849 samples, 6.25%)</title><rect x="22.2205%" y="197" width="6.2490%" height="15" fill="rgb(248,47,43)"/><text x="22.4705%" y="207.50">typeck</text></g><g><title>type_collecting (314,573 samples, 0.45%)</title><rect x="28.4799%" y="229" width="0.4453%" height="15" fill="rgb(221,10,30)"/><text x="28.7299%" y="239.50"></text></g><g><title>collect_mod_item_types (295,903 samples, 0.42%)</title><rect x="28.5064%" y="213" width="0.4188%" height="15" fill="rgb(210,229,1)"/><text x="28.7564%" y="223.50"></text></g><g><title>type_of (101,860 samples, 0.14%)</title><rect x="28.7810%" y="197" width="0.1442%" height="15" fill="rgb(222,148,37)"/><text x="29.0310%" y="207.50"></text></g><g><title>implied_outlives_bounds (81,801 samples, 0.12%)</title><rect x="29.3539%" y="197" width="0.1158%" height="15" fill="rgb(234,67,33)"/><text x="29.6039%" y="207.50"></text></g><g><title>param_env (189,413 samples, 0.27%)</title><rect x="29.4697%" y="197" width="0.2681%" height="15" fill="rgb(247,98,35)"/><text x="29.7197%" y="207.50"></text></g><g><title>analysis (8,155,322 samples, 11.54%)</title><rect x="18.2171%" y="261" width="11.5435%" height="15" fill="rgb(247,138,52)"/><text x="18.4671%" y="271.50">analysis</text></g><g><title>type_check_crate (5,389,711 samples, 7.63%)</title><rect x="22.1317%" y="245" width="7.6289%" height="15" fill="rgb(213,79,30)"/><text x="22.3817%" y="255.50">type_check..</text></g><g><title>wf_checking (589,607 samples, 0.83%)</title><rect x="28.9260%" y="229" width="0.8346%" height="15" fill="rgb(246,177,23)"/><text x="29.1760%" y="239.50"></text></g><g><title>check_item_well_formed (561,816 samples, 0.80%)</title><rect x="28.9653%" y="213" width="0.7952%" height="15" fill="rgb(230,62,27)"/><text x="29.2153%" y="223.50"></text></g><g><title>is_freeze_raw (169,002 samples, 0.24%)</title><rect x="32.0644%" y="213" width="0.2392%" height="15" fill="rgb(216,154,8)"/><text x="32.3144%" y="223.50"></text></g><g><title>evaluate_obligation (150,751 samples, 0.21%)</title><rect x="32.0902%" y="197" width="0.2134%" height="15" fill="rgb(244,35,45)"/><text x="32.3402%" y="207.50"></text></g><g><title>is_unpin_raw (91,291 samples, 0.13%)</title><rect x="32.3036%" y="213" width="0.1292%" height="15" fill="rgb(251,115,12)"/><text x="32.5536%" y="223.50"></text></g><g><title>evaluate_obligation (88,981 samples, 0.13%)</title><rect x="32.3069%" y="197" width="0.1259%" height="15" fill="rgb(240,54,50)"/><text x="32.5569%" y="207.50"></text></g><g><title>eval_to_const_value_raw (160,571 samples, 0.23%)</title><rect x="32.6244%" y="197" width="0.2273%" height="15" fill="rgb(233,84,52)"/><text x="32.8744%" y="207.50"></text></g><g><title>eval_to_const_value_raw (147,721 samples, 0.21%)</title><rect x="32.6426%" y="181" width="0.2091%" height="15" fill="rgb(207,117,47)"/><text x="32.8926%" y="191.50"></text></g><g><title>eval_to_allocation_raw (128,901 samples, 0.18%)</title><rect x="32.6693%" y="165" width="0.1825%" height="15" fill="rgb(249,43,39)"/><text x="32.9193%" y="175.50"></text></g><g><title>layout_of (120,762 samples, 0.17%)</title><rect x="32.8629%" y="197" width="0.1709%" height="15" fill="rgb(209,38,44)"/><text x="33.1129%" y="207.50"></text></g><g><title>param_env (143,541 samples, 0.20%)</title><rect x="33.0339%" y="197" width="0.2032%" height="15" fill="rgb(236,212,23)"/><text x="33.2839%" y="207.50"></text></g><g><title>layout_of (571,076 samples, 0.81%)</title><rect x="32.4328%" y="213" width="0.8083%" height="15" fill="rgb(242,79,21)"/><text x="32.6828%" y="223.50"></text></g><g><title>fn_abi_of_instance (986,440 samples, 1.40%)</title><rect x="31.8961%" y="229" width="1.3963%" height="15" fill="rgb(211,96,35)"/><text x="32.1461%" y="239.50"></text></g><g><title>symbol_name (85,321 samples, 0.12%)</title><rect x="33.3535%" y="229" width="0.1208%" height="15" fill="rgb(253,215,40)"/><text x="33.6035%" y="239.50"></text></g><g><title>codegen_module (2,160,994 samples, 3.06%)</title><rect x="30.4239%" y="245" width="3.0588%" height="15" fill="rgb(211,81,21)"/><text x="30.6739%" y="255.50">cod..</text></g><g><title>is_reachable_non_generic (160,381 samples, 0.23%)</title><rect x="33.6779%" y="197" width="0.2270%" height="15" fill="rgb(208,190,38)"/><text x="33.9279%" y="207.50"></text></g><g><title>reachable_non_generics (157,871 samples, 0.22%)</title><rect x="33.6815%" y="181" width="0.2235%" height="15" fill="rgb(235,213,38)"/><text x="33.9315%" y="191.50"></text></g><g><title>metadata_decode_entry_reachable_non_generics (156,701 samples, 0.22%)</title><rect x="33.6831%" y="165" width="0.2218%" height="15" fill="rgb(237,122,38)"/><text x="33.9331%" y="175.50"></text></g><g><title>exported_symbols (82,991 samples, 0.12%)</title><rect x="33.7874%" y="149" width="0.1175%" height="15" fill="rgb(244,218,35)"/><text x="34.0374%" y="159.50"></text></g><g><title>metadata_decode_entry_exported_symbols (81,921 samples, 0.12%)</title><rect x="33.7890%" y="133" width="0.1160%" height="15" fill="rgb(240,68,47)"/><text x="34.0390%" y="143.50"></text></g><g><title>eval_to_const_value_raw (170,932 samples, 0.24%)</title><rect x="34.2621%" y="69" width="0.2419%" height="15" fill="rgb(210,16,53)"/><text x="34.5121%" y="79.50"></text></g><g><title>eval_to_const_value_raw (169,342 samples, 0.24%)</title><rect x="34.2643%" y="53" width="0.2397%" height="15" fill="rgb(235,124,12)"/><text x="34.5143%" y="63.50"></text></g><g><title>eval_to_allocation_raw (165,302 samples, 0.23%)</title><rect x="34.2700%" y="37" width="0.2340%" height="15" fill="rgb(224,169,11)"/><text x="34.5200%" y="47.50"></text></g><g><title>eval_to_const_value_raw (197,552 samples, 0.28%)</title><rect x="34.2285%" y="133" width="0.2796%" height="15" fill="rgb(250,166,2)"/><text x="34.4785%" y="143.50"></text></g><g><title>eval_to_const_value_raw (196,552 samples, 0.28%)</title><rect x="34.2299%" y="117" width="0.2782%" height="15" fill="rgb(242,216,29)"/><text x="34.4799%" y="127.50"></text></g><g><title>eval_to_allocation_raw (195,742 samples, 0.28%)</title><rect x="34.2311%" y="101" width="0.2771%" height="15" fill="rgb(230,116,27)"/><text x="34.4811%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (176,962 samples, 0.25%)</title><rect x="34.2576%" y="85" width="0.2505%" height="15" fill="rgb(228,99,48)"/><text x="34.5076%" y="95.50"></text></g><g><title>eval_to_allocation_raw (259,673 samples, 0.37%)</title><rect x="34.1443%" y="181" width="0.3676%" height="15" fill="rgb(253,11,6)"/><text x="34.3943%" y="191.50"></text></g><g><title>eval_to_allocation_raw (257,923 samples, 0.37%)</title><rect x="34.1467%" y="165" width="0.3651%" height="15" fill="rgb(247,143,39)"/><text x="34.3967%" y="175.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (208,022 samples, 0.29%)</title><rect x="34.2174%" y="149" width="0.2944%" height="15" fill="rgb(236,97,10)"/><text x="34.4674%" y="159.50"></text></g><g><title>layout_of (99,591 samples, 0.14%)</title><rect x="34.5118%" y="181" width="0.1410%" height="15" fill="rgb(233,208,19)"/><text x="34.7618%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (121,232 samples, 0.17%)</title><rect x="34.7046%" y="181" width="0.1716%" height="15" fill="rgb(216,164,2)"/><text x="34.9546%" y="191.50"></text></g><g><title>optimized_mir (652,419 samples, 0.92%)</title><rect x="33.9581%" y="197" width="0.9235%" height="15" fill="rgb(220,129,5)"/><text x="34.2081%" y="207.50"></text></g><g><title>evaluate_obligation (77,580 samples, 0.11%)</title><rect x="35.1560%" y="165" width="0.1098%" height="15" fill="rgb(242,17,10)"/><text x="35.4060%" y="175.50"></text></g><g><title>own_existential_vtable_entries (181,752 samples, 0.26%)</title><rect x="35.0810%" y="181" width="0.2573%" height="15" fill="rgb(242,107,0)"/><text x="35.3310%" y="191.50"></text></g><g><title>impl_parent (776,838 samples, 1.10%)</title><rect x="36.8117%" y="149" width="1.0996%" height="15" fill="rgb(251,28,31)"/><text x="37.0617%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (537,896 samples, 0.76%)</title><rect x="37.1499%" y="133" width="0.7614%" height="15" fill="rgb(233,223,10)"/><text x="37.3999%" y="143.50"></text></g><g><title>impl_trait_ref (2,626,151 samples, 3.72%)</title><rect x="37.9113%" y="149" width="3.7172%" height="15" fill="rgb(215,21,27)"/><text x="38.1613%" y="159.50">impl..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,383,751 samples, 3.37%)</title><rect x="38.2544%" y="133" width="3.3741%" height="15" fill="rgb(232,23,21)"/><text x="38.5044%" y="143.50">met..</text></g><g><title>specialization_graph_of (4,402,550 samples, 6.23%)</title><rect x="35.3985%" y="165" width="6.2316%" height="15" fill="rgb(244,5,23)"/><text x="35.6485%" y="175.50">speciali..</text></g><g><title>monomorphization_collector_graph_walk (5,722,415 samples, 8.10%)</title><rect x="33.5415%" y="213" width="8.0998%" height="15" fill="rgb(226,81,46)"/><text x="33.7915%" y="223.50">monomorphiz..</text></g><g><title>vtable_entries (4,690,153 samples, 6.64%)</title><rect x="35.0026%" y="197" width="6.6387%" height="15" fill="rgb(247,70,30)"/><text x="35.2526%" y="207.50">vtable_en..</text></g><g><title>resolve_instance (4,453,031 samples, 6.30%)</title><rect x="35.3382%" y="181" width="6.3031%" height="15" fill="rgb(212,68,19)"/><text x="35.5882%" y="191.50">resolve_..</text></g><g><title>monomorphization_collector (5,747,075 samples, 8.13%)</title><rect x="33.5384%" y="229" width="8.1347%" height="15" fill="rgb(240,187,13)"/><text x="33.7884%" y="239.50">monomorphiz..</text></g><g><title>assert_symbols_are_distinct (88,441 samples, 0.13%)</title><rect x="41.6788%" y="213" width="0.1252%" height="15" fill="rgb(223,113,26)"/><text x="41.9288%" y="223.50"></text></g><g><title>symbol_name (83,171 samples, 0.12%)</title><rect x="41.6862%" y="197" width="0.1177%" height="15" fill="rgb(206,192,2)"/><text x="41.9362%" y="207.50"></text></g><g><title>collect_and_partition_mono_items (5,909,317 samples, 8.36%)</title><rect x="33.4832%" y="245" width="8.3644%" height="15" fill="rgb(241,108,4)"/><text x="33.7332%" y="255.50">collect_and_..</text></g><g><title>partition_and_assert_distinct_symbols (123,262 samples, 0.17%)</title><rect x="41.6731%" y="229" width="0.1745%" height="15" fill="rgb(247,173,49)"/><text x="41.9231%" y="239.50"></text></g><g><title>codegen_crate (8,595,257 samples, 12.17%)</title><rect x="29.7741%" y="261" width="12.1662%" height="15" fill="rgb(224,114,35)"/><text x="30.0241%" y="271.50">codegen_crate</text></g><g><title>codegen_module_optimize (5,669,225 samples, 8.02%)</title><rect x="41.9402%" y="261" width="8.0245%" height="15" fill="rgb(245,159,27)"/><text x="42.1902%" y="271.50">codegen_mod..</text></g><g><title>LLVM_module_optimize (5,131,609 samples, 7.26%)</title><rect x="42.7012%" y="245" width="7.2636%" height="15" fill="rgb(245,172,44)"/><text x="42.9512%" y="255.50">LLVM_modul..</text></g><g><title>LLVM_lto_optimize (1,381,046 samples, 1.95%)</title><rect x="50.6051%" y="245" width="1.9548%" height="15" fill="rgb(236,23,11)"/><text x="50.8551%" y="255.50">L..</text></g><g><title>LLVM_module_codegen (4,049,376 samples, 5.73%)</title><rect x="52.5599%" y="245" width="5.7317%" height="15" fill="rgb(205,117,38)"/><text x="52.8099%" y="255.50">LLVM_mo..</text></g><g><title>LLVM_module_codegen_emit_obj (3,975,955 samples, 5.63%)</title><rect x="52.6638%" y="229" width="5.6278%" height="15" fill="rgb(237,72,25)"/><text x="52.9138%" y="239.50">LLVM_mo..</text></g><g><title>codegen_module_perform_lto (5,923,917 samples, 8.39%)</title><rect x="49.9648%" y="261" width="8.3850%" height="15" fill="rgb(244,70,9)"/><text x="50.2148%" y="271.50">codegen_modu..</text></g><g><title>crate_injection (87,131 samples, 0.12%)</title><rect x="58.7289%" y="245" width="0.1233%" height="15" fill="rgb(217,125,39)"/><text x="58.9789%" y="255.50"></text></g><g><title>metadata_load_macro (143,912 samples, 0.20%)</title><rect x="73.5580%" y="213" width="0.2037%" height="15" fill="rgb(235,36,10)"/><text x="73.8080%" y="223.50"></text></g><g><title>metadata_register_crate (2,703,280 samples, 3.83%)</title><rect x="73.7617%" y="213" width="3.8264%" height="15" fill="rgb(251,123,47)"/><text x="74.0117%" y="223.50">meta..</text></g><g><title>metadata_register_crate (982,939 samples, 1.39%)</title><rect x="76.1967%" y="197" width="1.3913%" height="15" fill="rgb(221,13,13)"/><text x="76.4467%" y="207.50"></text></g><g><title>metadata_register_crate (73,472 samples, 0.10%)</title><rect x="77.4841%" y="181" width="0.1040%" height="15" fill="rgb(238,131,9)"/><text x="77.7341%" y="191.50"></text></g><g><title>macro_expand_crate (13,258,440 samples, 18.77%)</title><rect x="58.8523%" y="245" width="18.7667%" height="15" fill="rgb(211,50,8)"/><text x="59.1023%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (13,234,110 samples, 18.73%)</title><rect x="58.8867%" y="229" width="18.7323%" height="15" fill="rgb(245,182,24)"/><text x="59.1367%" y="239.50">expand_crate</text></g><g><title>finalize_imports (361,285 samples, 0.51%)</title><rect x="77.7325%" y="229" width="0.5114%" height="15" fill="rgb(242,14,37)"/><text x="77.9825%" y="239.50"></text></g><g><title>late_resolve_crate (372,244 samples, 0.53%)</title><rect x="78.2698%" y="229" width="0.5269%" height="15" fill="rgb(246,228,12)"/><text x="78.5198%" y="239.50"></text></g><g><title>configure_and_expand (14,484,794 samples, 20.50%)</title><rect x="58.3498%" y="261" width="20.5026%" height="15" fill="rgb(213,55,15)"/><text x="58.5998%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (799,249 samples, 1.13%)</title><rect x="77.7211%" y="245" width="1.1313%" height="15" fill="rgb(209,9,3)"/><text x="77.9711%" y="255.50"></text></g><g><title>free_global_ctxt (2,603,200 samples, 3.68%)</title><rect x="78.9987%" y="261" width="3.6847%" height="15" fill="rgb(230,59,30)"/><text x="79.2487%" y="271.50">free..</text></g><g><title>generate_crate_metadata (324,133 samples, 0.46%)</title><rect x="82.6834%" y="261" width="0.4588%" height="15" fill="rgb(209,121,21)"/><text x="82.9334%" y="271.50"></text></g><g><title>hir_lowering (353,204 samples, 0.50%)</title><rect x="83.1422%" y="261" width="0.4999%" height="15" fill="rgb(220,109,13)"/><text x="83.3922%" y="271.50"></text></g><g><title>finish_ongoing_codegen (9,402,857 samples, 13.31%)</title><rect x="83.6592%" y="245" width="13.3093%" height="15" fill="rgb(232,18,1)"/><text x="83.9092%" y="255.50">finish_ongoing_codeg..</text></g><g><title>link_crate (630,647 samples, 0.89%)</title><rect x="96.9685%" y="245" width="0.8927%" height="15" fill="rgb(215,41,42)"/><text x="97.2185%" y="255.50"></text></g><g><title>link_binary (620,407 samples, 0.88%)</title><rect x="96.9830%" y="229" width="0.8782%" height="15" fill="rgb(224,123,36)"/><text x="97.2330%" y="239.50"></text></g><g><title>link_rlib (343,294 samples, 0.49%)</title><rect x="97.3752%" y="213" width="0.4859%" height="15" fill="rgb(240,125,3)"/><text x="97.6252%" y="223.50"></text></g><g><title>link (10,053,524 samples, 14.23%)</title><rect x="83.6421%" y="261" width="14.2303%" height="15" fill="rgb(205,98,50)"/><text x="83.8921%" y="271.50">link</text></g><g><title>parse_crate (372,724 samples, 0.53%)</title><rect x="97.8724%" y="261" width="0.5276%" height="15" fill="rgb(205,185,37)"/><text x="98.1224%" y="271.50"></text></g><g><title>prepare_outputs (323,373 samples, 0.46%)</title><rect x="98.4137%" y="261" width="0.4577%" height="15" fill="rgb(238,207,15)"/><text x="98.6637%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (375,054 samples, 0.53%)</title><rect x="98.8715%" y="261" width="0.5309%" height="15" fill="rgb(213,199,42)"/><text x="99.1215%" y="271.50"></text></g><g><title>setup_global_ctxt (126,882 samples, 0.18%)</title><rect x="99.4036%" y="261" width="0.1796%" height="15" fill="rgb(235,201,11)"/><text x="99.6536%" y="271.50"></text></g><g><title>all (70,648,691 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(207,46,11)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (70,648,691 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(241,35,35)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (294,484 samples, 0.42%)</title><rect x="99.5832%" y="261" width="0.4168%" height="15" fill="rgb(243,32,47)"/><text x="99.8332%" y="271.50"></text></g></svg></svg>