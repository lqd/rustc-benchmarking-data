<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (33,989,542 samples, 9.52%)</title><rect x="0.2330%" y="197" width="9.5180%" height="15" fill="rgb(227,0,7)"/><text x="0.4830%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (372,464 samples, 0.10%)</title><rect x="9.6467%" y="181" width="0.1043%" height="15" fill="rgb(217,0,24)"/><text x="9.8967%" y="191.50"></text></g><g><title>implied_outlives_bounds (601,916 samples, 0.17%)</title><rect x="16.8011%" y="149" width="0.1686%" height="15" fill="rgb(221,193,54)"/><text x="17.0511%" y="159.50"></text></g><g><title>is_sized_raw (396,616 samples, 0.11%)</title><rect x="17.0034%" y="149" width="0.1111%" height="15" fill="rgb(248,212,6)"/><text x="17.2534%" y="159.50"></text></g><g><title>param_env (896,891 samples, 0.25%)</title><rect x="17.8932%" y="117" width="0.2512%" height="15" fill="rgb(208,68,35)"/><text x="18.1432%" y="127.50"></text></g><g><title>is_copy_raw (918,284 samples, 0.26%)</title><rect x="19.7122%" y="85" width="0.2571%" height="15" fill="rgb(232,128,0)"/><text x="19.9622%" y="95.50"></text></g><g><title>evaluate_obligation (715,697 samples, 0.20%)</title><rect x="19.7689%" y="69" width="0.2004%" height="15" fill="rgb(207,160,47)"/><text x="20.0189%" y="79.50"></text></g><g><title>is_copy_raw (1,137,844 samples, 0.32%)</title><rect x="20.0529%" y="69" width="0.3186%" height="15" fill="rgb(228,23,34)"/><text x="20.3029%" y="79.50"></text></g><g><title>evaluate_obligation (803,144 samples, 0.22%)</title><rect x="20.1467%" y="53" width="0.2249%" height="15" fill="rgb(218,30,26)"/><text x="20.3967%" y="63.50"></text></g><g><title>needs_drop_raw (1,446,889 samples, 0.41%)</title><rect x="19.9694%" y="85" width="0.4052%" height="15" fill="rgb(220,122,19)"/><text x="20.2194%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (551,814 samples, 0.15%)</title><rect x="20.4703%" y="69" width="0.1545%" height="15" fill="rgb(250,228,42)"/><text x="20.7203%" y="79.50"></text></g><g><title>impl_parent (664,855 samples, 0.19%)</title><rect x="20.9598%" y="53" width="0.1862%" height="15" fill="rgb(240,193,28)"/><text x="21.2098%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (451,193 samples, 0.13%)</title><rect x="21.0196%" y="37" width="0.1263%" height="15" fill="rgb(216,20,37)"/><text x="21.2696%" y="47.50"></text></g><g><title>specialization_graph_of (3,933,835 samples, 1.10%)</title><rect x="20.6386%" y="69" width="1.1016%" height="15" fill="rgb(206,188,39)"/><text x="20.8886%" y="79.50"></text></g><g><title>impl_trait_ref (2,122,020 samples, 0.59%)</title><rect x="21.1460%" y="53" width="0.5942%" height="15" fill="rgb(217,207,13)"/><text x="21.3960%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,902,649 samples, 0.53%)</title><rect x="21.2074%" y="37" width="0.5328%" height="15" fill="rgb(231,73,38)"/><text x="21.4574%" y="47.50"></text></g><g><title>resolve_instance (5,023,373 samples, 1.41%)</title><rect x="20.3745%" y="85" width="1.4067%" height="15" fill="rgb(225,20,46)"/><text x="20.6245%" y="95.50"></text></g><g><title>thir_body (1,383,491 samples, 0.39%)</title><rect x="21.7966%" y="85" width="0.3874%" height="15" fill="rgb(210,31,41)"/><text x="22.0466%" y="95.50"></text></g><g><title>mir_const (16,888,088 samples, 4.73%)</title><rect x="17.4901%" y="133" width="4.7291%" height="15" fill="rgb(221,200,47)"/><text x="17.7401%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (14,551,625 samples, 4.07%)</title><rect x="18.1444%" y="117" width="4.0749%" height="15" fill="rgb(226,26,5)"/><text x="18.3944%" y="127.50">unsa..</text></g><g><title>mir_built (13,576,374 samples, 3.80%)</title><rect x="18.4175%" y="101" width="3.8018%" height="15" fill="rgb(249,33,26)"/><text x="18.6675%" y="111.50">mir_..</text></g><g><title>mir_promoted (18,311,329 samples, 5.13%)</title><rect x="17.1144%" y="149" width="5.1277%" height="15" fill="rgb(235,183,28)"/><text x="17.3644%" y="159.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (1,008,928 samples, 0.28%)</title><rect x="22.2421%" y="149" width="0.2825%" height="15" fill="rgb(221,5,38)"/><text x="22.4921%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (2,482,769 samples, 0.70%)</title><rect x="22.5246%" y="149" width="0.6952%" height="15" fill="rgb(247,18,42)"/><text x="22.7746%" y="159.50"></text></g><g><title>normalize_projection_ty (1,170,963 samples, 0.33%)</title><rect x="22.8920%" y="133" width="0.3279%" height="15" fill="rgb(241,131,45)"/><text x="23.1420%" y="143.50"></text></g><g><title>type_op_normalize_ty (1,753,973 samples, 0.49%)</title><rect x="23.2847%" y="149" width="0.4912%" height="15" fill="rgb(249,31,29)"/><text x="23.5347%" y="159.50"></text></g><g><title>normalize_projection_ty (951,611 samples, 0.27%)</title><rect x="23.5094%" y="133" width="0.2665%" height="15" fill="rgb(225,111,53)"/><text x="23.7594%" y="143.50"></text></g><g><title>type_op_prove_predicate (5,607,350 samples, 1.57%)</title><rect x="23.7758%" y="149" width="1.5702%" height="15" fill="rgb(238,160,17)"/><text x="24.0258%" y="159.50"></text></g><g><title>MIR_borrow_checking (54,913,727 samples, 15.38%)</title><rect x="9.9732%" y="181" width="15.3774%" height="15" fill="rgb(214,148,48)"/><text x="10.2232%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (54,658,483 samples, 15.31%)</title><rect x="10.0447%" y="165" width="15.3059%" height="15" fill="rgb(232,36,49)"/><text x="10.2947%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (400,984 samples, 0.11%)</title><rect x="25.3663%" y="181" width="0.1123%" height="15" fill="rgb(209,103,24)"/><text x="25.6163%" y="191.50"></text></g><g><title>codegen_fn_attrs (587,655 samples, 0.16%)</title><rect x="25.8622%" y="117" width="0.1646%" height="15" fill="rgb(229,88,8)"/><text x="26.1122%" y="127.50"></text></g><g><title>should_inherit_track_caller (986,851 samples, 0.28%)</title><rect x="25.7584%" y="133" width="0.2763%" height="15" fill="rgb(213,181,19)"/><text x="26.0084%" y="143.50"></text></g><g><title>codegen_fn_attrs (1,429,954 samples, 0.40%)</title><rect x="25.6410%" y="149" width="0.4004%" height="15" fill="rgb(254,191,54)"/><text x="25.8910%" y="159.50"></text></g><g><title>check_mod_attrs (1,984,622 samples, 0.56%)</title><rect x="25.4858%" y="165" width="0.5557%" height="15" fill="rgb(241,83,37)"/><text x="25.7358%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (751,129 samples, 0.21%)</title><rect x="26.1818%" y="165" width="0.2103%" height="15" fill="rgb(233,36,39)"/><text x="26.4318%" y="175.50"></text></g><g><title>misc_checking_1 (3,315,998 samples, 0.93%)</title><rect x="25.4787%" y="181" width="0.9286%" height="15" fill="rgb(226,3,54)"/><text x="25.7287%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (583,267 samples, 0.16%)</title><rect x="26.4078%" y="165" width="0.1633%" height="15" fill="rgb(245,192,40)"/><text x="26.6578%" y="175.50"></text></g><g><title>check_mod_liveness (489,146 samples, 0.14%)</title><rect x="26.4341%" y="149" width="0.1370%" height="15" fill="rgb(238,167,29)"/><text x="26.6841%" y="159.50"></text></g><g><title>misc_checking_2 (1,233,614 samples, 0.35%)</title><rect x="26.4073%" y="181" width="0.3454%" height="15" fill="rgb(232,182,51)"/><text x="26.6573%" y="191.50"></text></g><g><title>match_checking (648,637 samples, 0.18%)</title><rect x="26.5711%" y="165" width="0.1816%" height="15" fill="rgb(231,60,39)"/><text x="26.8211%" y="175.50"></text></g><g><title>check_match (599,037 samples, 0.17%)</title><rect x="26.5850%" y="149" width="0.1677%" height="15" fill="rgb(208,69,12)"/><text x="26.8350%" y="159.50"></text></g><g><title>crate_lints (2,576,509 samples, 0.72%)</title><rect x="26.9293%" y="149" width="0.7215%" height="15" fill="rgb(235,93,37)"/><text x="27.1793%" y="159.50"></text></g><g><title>type_of (1,797,347 samples, 0.50%)</title><rect x="27.1475%" y="133" width="0.5033%" height="15" fill="rgb(213,116,39)"/><text x="27.3975%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,552,565 samples, 0.43%)</title><rect x="27.2161%" y="117" width="0.4348%" height="15" fill="rgb(222,207,29)"/><text x="27.4661%" y="127.50"></text></g><g><title>lint_checking (3,114,975 samples, 0.87%)</title><rect x="26.9289%" y="165" width="0.8723%" height="15" fill="rgb(206,96,30)"/><text x="27.1789%" y="175.50"></text></g><g><title>module_lints (536,816 samples, 0.15%)</title><rect x="27.6508%" y="149" width="0.1503%" height="15" fill="rgb(218,138,4)"/><text x="27.9008%" y="159.50"></text></g><g><title>lint_mod (533,886 samples, 0.15%)</title><rect x="27.6517%" y="133" width="0.1495%" height="15" fill="rgb(250,191,14)"/><text x="27.9017%" y="143.50"></text></g><g><title>privacy_checking_modules (1,912,422 samples, 0.54%)</title><rect x="27.8818%" y="165" width="0.5355%" height="15" fill="rgb(239,60,40)"/><text x="28.1318%" y="175.50"></text></g><g><title>check_mod_privacy (1,910,682 samples, 0.54%)</title><rect x="27.8823%" y="149" width="0.5350%" height="15" fill="rgb(206,27,48)"/><text x="28.1323%" y="159.50"></text></g><g><title>misc_checking_3 (5,963,517 samples, 1.67%)</title><rect x="26.7527%" y="181" width="1.6700%" height="15" fill="rgb(225,35,8)"/><text x="27.0027%" y="191.50"></text></g><g><title>impl_trait_ref (962,631 samples, 0.27%)</title><rect x="28.6296%" y="117" width="0.2696%" height="15" fill="rgb(250,213,24)"/><text x="28.8796%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (875,118 samples, 0.25%)</title><rect x="28.6542%" y="101" width="0.2451%" height="15" fill="rgb(247,123,22)"/><text x="28.9042%" y="111.50"></text></g><g><title>coherent_trait (1,776,649 samples, 0.50%)</title><rect x="28.4480%" y="149" width="0.4975%" height="15" fill="rgb(231,138,38)"/><text x="28.6980%" y="159.50"></text></g><g><title>specialization_graph_of (1,764,929 samples, 0.49%)</title><rect x="28.4513%" y="133" width="0.4942%" height="15" fill="rgb(231,145,46)"/><text x="28.7013%" y="143.50"></text></g><g><title>coherence_checking (1,833,171 samples, 0.51%)</title><rect x="28.4443%" y="165" width="0.5133%" height="15" fill="rgb(251,118,11)"/><text x="28.6943%" y="175.50"></text></g><g><title>associated_item (838,255 samples, 0.23%)</title><rect x="40.7655%" y="101" width="0.2347%" height="15" fill="rgb(217,147,25)"/><text x="41.0155%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (658,713 samples, 0.18%)</title><rect x="40.8158%" y="85" width="0.1845%" height="15" fill="rgb(247,81,37)"/><text x="41.0658%" y="95.50"></text></g><g><title>associated_items (1,147,175 samples, 0.32%)</title><rect x="40.6884%" y="117" width="0.3212%" height="15" fill="rgb(209,12,38)"/><text x="40.9384%" y="127.50"></text></g><g><title>dropck_outlives (1,465,489 samples, 0.41%)</title><rect x="41.0478%" y="117" width="0.4104%" height="15" fill="rgb(227,1,9)"/><text x="41.2978%" y="127.50"></text></g><g><title>normalize_projection_ty (545,968 samples, 0.15%)</title><rect x="41.3053%" y="101" width="0.1529%" height="15" fill="rgb(248,47,43)"/><text x="41.5553%" y="111.50"></text></g><g><title>evaluate_obligation (1,593,006 samples, 0.45%)</title><rect x="41.4582%" y="117" width="0.4461%" height="15" fill="rgb(221,10,30)"/><text x="41.7082%" y="127.50"></text></g><g><title>method_autoderef_steps (647,365 samples, 0.18%)</title><rect x="41.9971%" y="117" width="0.1813%" height="15" fill="rgb(210,229,1)"/><text x="42.2471%" y="127.50"></text></g><g><title>associated_items (371,044 samples, 0.10%)</title><rect x="42.6325%" y="101" width="0.1039%" height="15" fill="rgb(222,148,37)"/><text x="42.8825%" y="111.50"></text></g><g><title>typeck (2,471,328 samples, 0.69%)</title><rect x="42.2672%" y="117" width="0.6920%" height="15" fill="rgb(234,67,33)"/><text x="42.5172%" y="127.50"></text></g><g><title>item_bodies_checking (50,027,821 samples, 14.01%)</title><rect x="28.9699%" y="165" width="14.0092%" height="15" fill="rgb(247,98,35)"/><text x="29.2199%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (50,024,681 samples, 14.01%)</title><rect x="28.9708%" y="149" width="14.0083%" height="15" fill="rgb(247,138,52)"/><text x="29.2208%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (49,842,168 samples, 13.96%)</title><rect x="29.0219%" y="133" width="13.9572%" height="15" fill="rgb(213,79,30)"/><text x="29.2719%" y="143.50">typeck</text></g><g><title>adt_destructor (408,136 samples, 0.11%)</title><rect x="45.5123%" y="133" width="0.1143%" height="15" fill="rgb(246,177,23)"/><text x="45.7623%" y="143.50"></text></g><g><title>coherent_trait (401,305 samples, 0.11%)</title><rect x="45.5142%" y="117" width="0.1124%" height="15" fill="rgb(230,62,27)"/><text x="45.7642%" y="127.50"></text></g><g><title>specialization_graph_of (399,525 samples, 0.11%)</title><rect x="45.5147%" y="101" width="0.1119%" height="15" fill="rgb(216,154,8)"/><text x="45.7647%" y="111.50"></text></g><g><title>item_types_checking (10,525,239 samples, 2.95%)</title><rect x="42.9791%" y="165" width="2.9474%" height="15" fill="rgb(244,35,45)"/><text x="43.2291%" y="175.50">it..</text></g><g><title>check_mod_item_types (10,522,999 samples, 2.95%)</title><rect x="42.9797%" y="149" width="2.9467%" height="15" fill="rgb(251,115,12)"/><text x="43.2297%" y="159.50">ch..</text></g><g><title>fn_sig (1,216,667 samples, 0.34%)</title><rect x="46.0658%" y="133" width="0.3407%" height="15" fill="rgb(240,54,50)"/><text x="46.3158%" y="143.50"></text></g><g><title>type_param_predicates (372,689 samples, 0.10%)</title><rect x="46.3021%" y="117" width="0.1044%" height="15" fill="rgb(233,84,52)"/><text x="46.5521%" y="127.50"></text></g><g><title>is_late_bound_map (1,625,288 samples, 0.46%)</title><rect x="46.4802%" y="117" width="0.4551%" height="15" fill="rgb(207,117,47)"/><text x="46.7302%" y="127.50"></text></g><g><title>resolve_lifetimes (1,570,008 samples, 0.44%)</title><rect x="46.4957%" y="101" width="0.4396%" height="15" fill="rgb(249,43,39)"/><text x="46.7457%" y="111.50"></text></g><g><title>generics_of (1,915,848 samples, 0.54%)</title><rect x="46.4065%" y="133" width="0.5365%" height="15" fill="rgb(209,38,44)"/><text x="46.6565%" y="143.50"></text></g><g><title>explicit_predicates_of (1,140,954 samples, 0.32%)</title><rect x="47.0362%" y="101" width="0.3195%" height="15" fill="rgb(236,212,23)"/><text x="47.2862%" y="111.50"></text></g><g><title>predicates_of (1,868,631 samples, 0.52%)</title><rect x="46.9583%" y="133" width="0.5233%" height="15" fill="rgb(242,79,21)"/><text x="47.2083%" y="143.50"></text></g><g><title>predicates_defined_on (1,765,991 samples, 0.49%)</title><rect x="46.9870%" y="117" width="0.4945%" height="15" fill="rgb(211,96,35)"/><text x="47.2370%" y="127.50"></text></g><g><title>inferred_outlives_of (449,264 samples, 0.13%)</title><rect x="47.3557%" y="101" width="0.1258%" height="15" fill="rgb(253,215,40)"/><text x="47.6057%" y="111.50"></text></g><g><title>inferred_outlives_crate (408,934 samples, 0.11%)</title><rect x="47.3670%" y="85" width="0.1145%" height="15" fill="rgb(211,81,21)"/><text x="47.6170%" y="95.50"></text></g><g><title>type_collecting (5,897,766 samples, 1.65%)</title><rect x="45.9268%" y="165" width="1.6515%" height="15" fill="rgb(208,190,38)"/><text x="46.1768%" y="175.50"></text></g><g><title>collect_mod_item_types (5,888,916 samples, 1.65%)</title><rect x="45.9293%" y="149" width="1.6491%" height="15" fill="rgb(235,213,38)"/><text x="46.1793%" y="159.50"></text></g><g><title>evaluate_obligation (428,707 samples, 0.12%)</title><rect x="50.4481%" y="133" width="0.1200%" height="15" fill="rgb(237,122,38)"/><text x="50.6981%" y="143.50"></text></g><g><title>implied_outlives_bounds (1,096,287 samples, 0.31%)</title><rect x="50.5735%" y="133" width="0.3070%" height="15" fill="rgb(244,218,35)"/><text x="50.8235%" y="143.50"></text></g><g><title>param_env (1,430,268 samples, 0.40%)</title><rect x="50.8950%" y="133" width="0.4005%" height="15" fill="rgb(240,68,47)"/><text x="51.1450%" y="143.50"></text></g><g><title>region_scope_tree (534,678 samples, 0.15%)</title><rect x="51.3193%" y="133" width="0.1497%" height="15" fill="rgb(210,16,53)"/><text x="51.5693%" y="143.50"></text></g><g><title>check_impl_item_well_formed (13,565,892 samples, 3.80%)</title><rect x="47.6780%" y="149" width="3.7988%" height="15" fill="rgb(235,124,12)"/><text x="47.9280%" y="159.50">chec..</text></g><g><title>analysis (151,873,196 samples, 42.53%)</title><rect x="9.7510%" y="197" width="42.5287%" height="15" fill="rgb(224,169,11)"/><text x="10.0010%" y="207.50">analysis</text></g><g><title>type_check_crate (85,195,336 samples, 23.86%)</title><rect x="28.4227%" y="181" width="23.8571%" height="15" fill="rgb(250,166,2)"/><text x="28.6727%" y="191.50">type_check_crate</text></g><g><title>wf_checking (16,779,708 samples, 4.70%)</title><rect x="47.5810%" y="165" width="4.6988%" height="15" fill="rgb(242,216,29)"/><text x="47.8310%" y="175.50">wf_ch..</text></g><g><title>check_item_well_formed (2,867,191 samples, 0.80%)</title><rect x="51.4769%" y="149" width="0.8029%" height="15" fill="rgb(230,116,27)"/><text x="51.7269%" y="159.50"></text></g><g><title>item_attrs (496,255 samples, 0.14%)</title><rect x="53.5622%" y="133" width="0.1390%" height="15" fill="rgb(228,99,48)"/><text x="53.8122%" y="143.50"></text></g><g><title>metadata_decode_entry_item_attrs (494,105 samples, 0.14%)</title><rect x="53.5628%" y="117" width="0.1384%" height="15" fill="rgb(253,11,6)"/><text x="53.8128%" y="127.50"></text></g><g><title>codegen_fn_attrs (518,665 samples, 0.15%)</title><rect x="53.5565%" y="149" width="0.1452%" height="15" fill="rgb(247,143,39)"/><text x="53.8065%" y="159.50"></text></g><g><title>param_env (545,218 samples, 0.15%)</title><rect x="53.8143%" y="149" width="0.1527%" height="15" fill="rgb(236,97,10)"/><text x="54.0643%" y="159.50"></text></g><g><title>fn_abi_of_instance (1,791,911 samples, 0.50%)</title><rect x="53.4821%" y="165" width="0.5018%" height="15" fill="rgb(233,208,19)"/><text x="53.7321%" y="175.50"></text></g><g><title>codegen_module (5,387,700 samples, 1.51%)</title><rect x="52.5730%" y="181" width="1.5087%" height="15" fill="rgb(216,164,2)"/><text x="52.8230%" y="191.50"></text></g><g><title>optimized_mir (1,296,207 samples, 0.36%)</title><rect x="54.2235%" y="133" width="0.3630%" height="15" fill="rgb(220,129,5)"/><text x="54.4735%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (2,174,735 samples, 0.61%)</title><rect x="54.0904%" y="149" width="0.6090%" height="15" fill="rgb(242,17,10)"/><text x="54.3404%" y="159.50"></text></g><g><title>monomorphization_collector (2,215,565 samples, 0.62%)</title><rect x="54.0896%" y="165" width="0.6204%" height="15" fill="rgb(242,107,0)"/><text x="54.3396%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (2,525,538 samples, 0.71%)</title><rect x="54.0823%" y="181" width="0.7072%" height="15" fill="rgb(251,28,31)"/><text x="54.3323%" y="191.50"></text></g><g><title>codegen_crate (9,022,251 samples, 2.53%)</title><rect x="52.2825%" y="197" width="2.5265%" height="15" fill="rgb(233,223,10)"/><text x="52.5325%" y="207.50">co..</text></g><g><title>codegen_module_optimize (30,471,384 samples, 8.53%)</title><rect x="54.8090%" y="197" width="8.5328%" height="15" fill="rgb(215,21,27)"/><text x="55.0590%" y="207.50">codegen_modu..</text></g><g><title>LLVM_module_optimize (25,085,882 samples, 7.02%)</title><rect x="56.3170%" y="181" width="7.0247%" height="15" fill="rgb(232,23,21)"/><text x="56.5670%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_lto_optimize (13,669,074 samples, 3.83%)</title><rect x="63.9136%" y="181" width="3.8277%" height="15" fill="rgb(244,5,23)"/><text x="64.1636%" y="191.50">LLVM..</text></g><g><title>LLVM_module_codegen (23,340,621 samples, 6.54%)</title><rect x="67.7413%" y="181" width="6.5360%" height="15" fill="rgb(226,81,46)"/><text x="67.9913%" y="191.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (22,874,926 samples, 6.41%)</title><rect x="67.8717%" y="165" width="6.4056%" height="15" fill="rgb(247,70,30)"/><text x="68.1217%" y="175.50">LLVM_mod..</text></g><g><title>LLVM_thin_lto_import (834,889 samples, 0.23%)</title><rect x="74.2773%" y="181" width="0.2338%" height="15" fill="rgb(212,68,19)"/><text x="74.5273%" y="191.50"></text></g><g><title>codegen_module_perform_lto (40,005,247 samples, 11.20%)</title><rect x="63.3418%" y="197" width="11.2026%" height="15" fill="rgb(240,187,13)"/><text x="63.5918%" y="207.50">codegen_module_p..</text></g><g><title>macro_expand_crate (13,890,546 samples, 3.89%)</title><rect x="74.7442%" y="181" width="3.8897%" height="15" fill="rgb(223,113,26)"/><text x="74.9942%" y="191.50">macr..</text></g><g><title>expand_crate (13,868,456 samples, 3.88%)</title><rect x="74.7504%" y="165" width="3.8836%" height="15" fill="rgb(206,192,2)"/><text x="75.0004%" y="175.50">expa..</text></g><g><title>metadata_register_crate (2,338,986 samples, 0.65%)</title><rect x="77.9790%" y="149" width="0.6550%" height="15" fill="rgb(241,108,4)"/><text x="78.2290%" y="159.50"></text></g><g><title>metadata_register_crate (831,600 samples, 0.23%)</title><rect x="78.4011%" y="133" width="0.2329%" height="15" fill="rgb(247,173,49)"/><text x="78.6511%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (472,845 samples, 0.13%)</title><rect x="78.6353%" y="181" width="0.1324%" height="15" fill="rgb(224,114,35)"/><text x="78.8853%" y="191.50"></text></g><g><title>late_resolve_crate (4,367,679 samples, 1.22%)</title><rect x="78.8307%" y="165" width="1.2231%" height="15" fill="rgb(245,159,27)"/><text x="79.0807%" y="175.50"></text></g><g><title>configure_and_expand (19,894,403 samples, 5.57%)</title><rect x="74.5444%" y="197" width="5.5710%" height="15" fill="rgb(245,172,44)"/><text x="74.7944%" y="207.50">configu..</text></g><g><title>resolve_crate (4,812,633 samples, 1.35%)</title><rect x="78.7677%" y="181" width="1.3477%" height="15" fill="rgb(236,23,11)"/><text x="79.0177%" y="191.50"></text></g><g><title>drop_ast (428,805 samples, 0.12%)</title><rect x="80.1154%" y="197" width="0.1201%" height="15" fill="rgb(205,117,38)"/><text x="80.3654%" y="207.50"></text></g><g><title>early_lint_checks (793,599 samples, 0.22%)</title><rect x="80.2399%" y="197" width="0.2222%" height="15" fill="rgb(237,72,25)"/><text x="80.4899%" y="207.50"></text></g><g><title>free_global_ctxt (4,418,310 samples, 1.24%)</title><rect x="80.4621%" y="197" width="1.2373%" height="15" fill="rgb(244,70,9)"/><text x="80.7121%" y="207.50"></text></g><g><title>layout_of (1,416,597 samples, 0.40%)</title><rect x="84.1094%" y="165" width="0.3967%" height="15" fill="rgb(217,125,39)"/><text x="84.3594%" y="175.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (676,196 samples, 0.19%)</title><rect x="84.3167%" y="149" width="0.1894%" height="15" fill="rgb(235,36,10)"/><text x="84.5667%" y="159.50"></text></g><g><title>normalize_projection_ty (456,114 samples, 0.13%)</title><rect x="84.3784%" y="133" width="0.1277%" height="15" fill="rgb(251,123,47)"/><text x="84.6284%" y="143.50"></text></g><g><title>is_copy_raw (873,947 samples, 0.24%)</title><rect x="86.5720%" y="133" width="0.2447%" height="15" fill="rgb(221,13,13)"/><text x="86.8220%" y="143.50"></text></g><g><title>evaluate_obligation (601,396 samples, 0.17%)</title><rect x="86.6483%" y="117" width="0.1684%" height="15" fill="rgb(238,131,9)"/><text x="86.8983%" y="127.50"></text></g><g><title>needs_drop_raw (1,046,749 samples, 0.29%)</title><rect x="86.5270%" y="149" width="0.2931%" height="15" fill="rgb(211,50,8)"/><text x="86.7770%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,456,234 samples, 2.37%)</title><rect x="84.5061%" y="165" width="2.3680%" height="15" fill="rgb(245,182,24)"/><text x="84.7561%" y="175.50">mi..</text></g><g><title>optimized_mir (15,255,061 samples, 4.27%)</title><rect x="82.6075%" y="181" width="4.2718%" height="15" fill="rgb(242,14,37)"/><text x="82.8575%" y="191.50">optim..</text></g><g><title>generate_crate_metadata (18,617,658 samples, 5.21%)</title><rect x="81.6994%" y="197" width="5.2135%" height="15" fill="rgb(246,228,12)"/><text x="81.9494%" y="207.50">genera..</text></g><g><title>hir_lowering (8,936,131 samples, 2.50%)</title><rect x="86.9128%" y="197" width="2.5024%" height="15" fill="rgb(213,55,15)"/><text x="87.1628%" y="207.50">hi..</text></g><g><title>finish_ongoing_codegen (24,437,764 samples, 6.84%)</title><rect x="89.4192%" y="181" width="6.8433%" height="15" fill="rgb(209,9,3)"/><text x="89.6692%" y="191.50">finish_on..</text></g><g><title>link_crate (1,106,373 samples, 0.31%)</title><rect x="96.2625%" y="181" width="0.3098%" height="15" fill="rgb(230,59,30)"/><text x="96.5125%" y="191.50"></text></g><g><title>link_binary (1,095,143 samples, 0.31%)</title><rect x="96.2656%" y="165" width="0.3067%" height="15" fill="rgb(209,121,21)"/><text x="96.5156%" y="175.50"></text></g><g><title>link_rlib (761,458 samples, 0.21%)</title><rect x="96.3591%" y="149" width="0.2132%" height="15" fill="rgb(220,109,13)"/><text x="96.6091%" y="159.50"></text></g><g><title>link (25,567,827 samples, 7.16%)</title><rect x="89.4152%" y="197" width="7.1597%" height="15" fill="rgb(232,18,1)"/><text x="89.6652%" y="207.50">link</text></g><g><title>parse_crate (9,949,722 samples, 2.79%)</title><rect x="96.5749%" y="197" width="2.7862%" height="15" fill="rgb(215,41,42)"/><text x="96.8249%" y="207.50">pa..</text></g><g><title>self_profile_alloc_query_strings (1,390,776 samples, 0.39%)</title><rect x="99.4484%" y="197" width="0.3895%" height="15" fill="rgb(224,123,36)"/><text x="99.6984%" y="207.50"></text></g><g><title>all (357,107,280 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (357,107,280 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (466,505 samples, 0.13%)</title><rect x="99.8694%" y="197" width="0.1306%" height="15" fill="rgb(205,185,37)"/><text x="100.1194%" y="207.50"></text></g></svg></svg>