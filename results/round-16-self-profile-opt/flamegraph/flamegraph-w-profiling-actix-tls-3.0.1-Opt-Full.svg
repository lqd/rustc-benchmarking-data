<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (149,948,235 samples, 10.83%)</title><rect x="0.0592%" y="197" width="10.8270%" height="15" fill="rgb(227,0,7)"/><text x="0.3092%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (1,419,686 samples, 0.10%)</title><rect x="10.7837%" y="181" width="0.1025%" height="15" fill="rgb(217,0,24)"/><text x="11.0337%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (1,391,714 samples, 0.10%)</title><rect x="10.7858%" y="165" width="0.1005%" height="15" fill="rgb(221,193,54)"/><text x="11.0358%" y="175.50"></text></g><g><title>is_copy_raw (1,616,007 samples, 0.12%)</title><rect x="13.2020%" y="69" width="0.1167%" height="15" fill="rgb(248,212,6)"/><text x="13.4520%" y="79.50"></text></g><g><title>needs_drop_raw (2,359,825 samples, 0.17%)</title><rect x="13.1496%" y="85" width="0.1704%" height="15" fill="rgb(208,68,35)"/><text x="13.3996%" y="95.50"></text></g><g><title>resolve_instance (2,026,102 samples, 0.15%)</title><rect x="13.3200%" y="85" width="0.1463%" height="15" fill="rgb(232,128,0)"/><text x="13.5700%" y="95.50"></text></g><g><title>thir_body (1,625,906 samples, 0.12%)</title><rect x="13.4695%" y="85" width="0.1174%" height="15" fill="rgb(207,160,47)"/><text x="13.7195%" y="95.50"></text></g><g><title>mir_const (13,482,882 samples, 0.97%)</title><rect x="12.6160%" y="133" width="0.9735%" height="15" fill="rgb(228,23,34)"/><text x="12.8660%" y="143.50"></text></g><g><title>unsafety_check_result (11,830,438 samples, 0.85%)</title><rect x="12.7353%" y="117" width="0.8542%" height="15" fill="rgb(218,30,26)"/><text x="12.9853%" y="127.50"></text></g><g><title>mir_built (10,671,396 samples, 0.77%)</title><rect x="12.8190%" y="101" width="0.7705%" height="15" fill="rgb(220,122,19)"/><text x="13.0690%" y="111.50"></text></g><g><title>mir_promoted (15,612,799 samples, 1.13%)</title><rect x="12.5156%" y="149" width="1.1273%" height="15" fill="rgb(250,228,42)"/><text x="12.7656%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,725,645 samples, 0.34%)</title><rect x="13.8271%" y="149" width="0.3412%" height="15" fill="rgb(240,193,28)"/><text x="14.0771%" y="159.50"></text></g><g><title>MIR_borrow_checking (44,999,339 samples, 3.25%)</title><rect x="10.9208%" y="181" width="3.2492%" height="15" fill="rgb(216,20,37)"/><text x="11.1708%" y="191.50">MIR..</text></g><g><title>mir_borrowck (44,786,387 samples, 3.23%)</title><rect x="10.9362%" y="165" width="3.2338%" height="15" fill="rgb(206,188,39)"/><text x="11.1862%" y="175.50">mir..</text></g><g><title>misc_checking_1 (2,225,924 samples, 0.16%)</title><rect x="14.2170%" y="181" width="0.1607%" height="15" fill="rgb(217,207,13)"/><text x="14.4670%" y="191.50"></text></g><g><title>misc_checking_2 (1,882,110 samples, 0.14%)</title><rect x="14.3777%" y="181" width="0.1359%" height="15" fill="rgb(231,73,38)"/><text x="14.6277%" y="191.50"></text></g><g><title>crate_lints (4,426,417 samples, 0.32%)</title><rect x="14.6160%" y="149" width="0.3196%" height="15" fill="rgb(225,20,46)"/><text x="14.8660%" y="159.50"></text></g><g><title>lint_checking (5,568,489 samples, 0.40%)</title><rect x="14.6159%" y="165" width="0.4021%" height="15" fill="rgb(210,31,41)"/><text x="14.8659%" y="175.50"></text></g><g><title>privacy_checking_modules (1,778,069 samples, 0.13%)</title><rect x="15.0693%" y="165" width="0.1284%" height="15" fill="rgb(221,200,47)"/><text x="15.3193%" y="175.50"></text></g><g><title>check_mod_privacy (1,768,449 samples, 0.13%)</title><rect x="15.0700%" y="149" width="0.1277%" height="15" fill="rgb(226,26,5)"/><text x="15.3200%" y="159.50"></text></g><g><title>misc_checking_3 (9,493,891 samples, 0.69%)</title><rect x="14.5136%" y="181" width="0.6855%" height="15" fill="rgb(249,33,26)"/><text x="14.7636%" y="191.50"></text></g><g><title>impl_parent (3,699,443 samples, 0.27%)</title><rect x="15.7358%" y="117" width="0.2671%" height="15" fill="rgb(235,183,28)"/><text x="15.9858%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,173,017 samples, 0.16%)</title><rect x="15.8460%" y="101" width="0.1569%" height="15" fill="rgb(221,5,38)"/><text x="16.0960%" y="111.50"></text></g><g><title>impl_trait_ref (8,255,470 samples, 0.60%)</title><rect x="16.0029%" y="117" width="0.5961%" height="15" fill="rgb(247,18,42)"/><text x="16.2529%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (6,326,574 samples, 0.46%)</title><rect x="16.1422%" y="101" width="0.4568%" height="15" fill="rgb(241,131,45)"/><text x="16.3922%" y="111.50"></text></g><g><title>trait_impls_of (1,567,991 samples, 0.11%)</title><rect x="16.6028%" y="117" width="0.1132%" height="15" fill="rgb(249,31,29)"/><text x="16.8528%" y="127.50"></text></g><g><title>coherent_trait (20,833,362 samples, 1.50%)</title><rect x="15.2119%" y="149" width="1.5043%" height="15" fill="rgb(225,111,53)"/><text x="15.4619%" y="159.50"></text></g><g><title>specialization_graph_of (20,085,333 samples, 1.45%)</title><rect x="15.2659%" y="133" width="1.4503%" height="15" fill="rgb(238,160,17)"/><text x="15.5159%" y="143.50"></text></g><g><title>coherence_checking (20,969,353 samples, 1.51%)</title><rect x="15.2093%" y="165" width="1.5141%" height="15" fill="rgb(214,148,48)"/><text x="15.4593%" y="175.50"></text></g><g><title>evaluate_obligation (2,750,826 samples, 0.20%)</title><rect x="18.6446%" y="117" width="0.1986%" height="15" fill="rgb(232,36,49)"/><text x="18.8946%" y="127.50"></text></g><g><title>evaluate_obligation (2,056,818 samples, 0.15%)</title><rect x="19.9824%" y="101" width="0.1485%" height="15" fill="rgb(209,103,24)"/><text x="20.2324%" y="111.50"></text></g><g><title>typeck (18,145,483 samples, 1.31%)</title><rect x="18.9605%" y="117" width="1.3102%" height="15" fill="rgb(229,88,8)"/><text x="19.2105%" y="127.50"></text></g><g><title>item_bodies_checking (49,109,453 samples, 3.55%)</title><rect x="16.7284%" y="165" width="3.5459%" height="15" fill="rgb(213,181,19)"/><text x="16.9784%" y="175.50">item..</text></g><g><title>typeck_item_bodies (49,104,963 samples, 3.55%)</title><rect x="16.7287%" y="149" width="3.5456%" height="15" fill="rgb(254,191,54)"/><text x="16.9787%" y="159.50">type..</text></g><g><title>typeck (48,965,452 samples, 3.54%)</title><rect x="16.7388%" y="133" width="3.5355%" height="15" fill="rgb(241,83,37)"/><text x="16.9888%" y="143.50">typ..</text></g><g><title>mir_borrowck (1,608,677 samples, 0.12%)</title><rect x="20.6454%" y="101" width="0.1162%" height="15" fill="rgb(233,36,39)"/><text x="20.8954%" y="111.50"></text></g><g><title>mir_built (6,357,017 samples, 0.46%)</title><rect x="20.7863%" y="53" width="0.4590%" height="15" fill="rgb(226,3,54)"/><text x="21.0363%" y="63.50"></text></g><g><title>typeck (5,905,144 samples, 0.43%)</title><rect x="20.8189%" y="37" width="0.4264%" height="15" fill="rgb(245,192,40)"/><text x="21.0689%" y="47.50"></text></g><g><title>mir_const (7,404,829 samples, 0.53%)</title><rect x="20.7675%" y="85" width="0.5347%" height="15" fill="rgb(238,167,29)"/><text x="21.0175%" y="95.50"></text></g><g><title>unsafety_check_result (7,236,108 samples, 0.52%)</title><rect x="20.7797%" y="69" width="0.5225%" height="15" fill="rgb(232,182,51)"/><text x="21.0297%" y="79.50"></text></g><g><title>mir_promoted (7,494,760 samples, 0.54%)</title><rect x="20.7616%" y="101" width="0.5412%" height="15" fill="rgb(231,60,39)"/><text x="21.0116%" y="111.50"></text></g><g><title>type_of (10,407,592 samples, 0.75%)</title><rect x="20.5636%" y="133" width="0.7515%" height="15" fill="rgb(208,69,12)"/><text x="20.8136%" y="143.50"></text></g><g><title>mir_borrowck (10,322,390 samples, 0.75%)</title><rect x="20.5697%" y="117" width="0.7453%" height="15" fill="rgb(235,93,37)"/><text x="20.8197%" y="127.50"></text></g><g><title>item_types_checking (15,246,442 samples, 1.10%)</title><rect x="20.2743%" y="165" width="1.1009%" height="15" fill="rgb(213,116,39)"/><text x="20.5243%" y="175.50"></text></g><g><title>check_mod_item_types (15,233,012 samples, 1.10%)</title><rect x="20.2753%" y="149" width="1.0999%" height="15" fill="rgb(222,207,29)"/><text x="20.5253%" y="159.50"></text></g><g><title>predicates_of (1,999,731 samples, 0.14%)</title><rect x="21.5104%" y="133" width="0.1444%" height="15" fill="rgb(206,96,30)"/><text x="21.7604%" y="143.50"></text></g><g><title>predicates_defined_on (1,893,001 samples, 0.14%)</title><rect x="21.5181%" y="117" width="0.1367%" height="15" fill="rgb(218,138,4)"/><text x="21.7681%" y="127.50"></text></g><g><title>type_collecting (4,190,514 samples, 0.30%)</title><rect x="21.3758%" y="165" width="0.3026%" height="15" fill="rgb(250,191,14)"/><text x="21.6258%" y="175.50"></text></g><g><title>collect_mod_item_types (4,169,954 samples, 0.30%)</title><rect x="21.3773%" y="149" width="0.3011%" height="15" fill="rgb(239,60,40)"/><text x="21.6273%" y="159.50"></text></g><g><title>check_impl_item_well_formed (8,093,121 samples, 0.58%)</title><rect x="21.7094%" y="149" width="0.5844%" height="15" fill="rgb(206,27,48)"/><text x="21.9594%" y="159.50"></text></g><g><title>check_item_well_formed (5,324,593 samples, 0.38%)</title><rect x="22.2938%" y="149" width="0.3845%" height="15" fill="rgb(225,35,8)"/><text x="22.5438%" y="159.50"></text></g><g><title>analysis (163,931,064 samples, 11.84%)</title><rect x="10.8862%" y="197" width="11.8366%" height="15" fill="rgb(250,213,24)"/><text x="11.1362%" y="207.50">analysis</text></g><g><title>type_check_crate (104,200,469 samples, 7.52%)</title><rect x="15.1991%" y="181" width="7.5238%" height="15" fill="rgb(247,123,22)"/><text x="15.4491%" y="191.50">type_check..</text></g><g><title>wf_checking (14,456,654 samples, 1.04%)</title><rect x="21.6790%" y="165" width="1.0438%" height="15" fill="rgb(231,138,38)"/><text x="21.9290%" y="175.50"></text></g><g><title>is_freeze_raw (1,544,079 samples, 0.11%)</title><rect x="25.8957%" y="149" width="0.1115%" height="15" fill="rgb(231,145,46)"/><text x="26.1457%" y="159.50"></text></g><g><title>layout_of (1,995,839 samples, 0.14%)</title><rect x="26.0751%" y="149" width="0.1441%" height="15" fill="rgb(251,118,11)"/><text x="26.3251%" y="159.50"></text></g><g><title>param_env (3,926,842 samples, 0.28%)</title><rect x="26.2192%" y="149" width="0.2835%" height="15" fill="rgb(217,147,25)"/><text x="26.4692%" y="159.50"></text></g><g><title>fn_abi_of_instance (13,808,616 samples, 1.00%)</title><rect x="25.5648%" y="165" width="0.9970%" height="15" fill="rgb(247,81,37)"/><text x="25.8148%" y="175.50"></text></g><g><title>codegen_module (53,298,518 samples, 3.85%)</title><rect x="22.8745%" y="181" width="3.8484%" height="15" fill="rgb(209,12,38)"/><text x="23.1245%" y="191.50">code..</text></g><g><title>codegen_fn_attrs (2,223,519 samples, 0.16%)</title><rect x="26.9105%" y="133" width="0.1605%" height="15" fill="rgb(227,1,9)"/><text x="27.1605%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,593,190 samples, 0.19%)</title><rect x="27.2863%" y="117" width="0.1872%" height="15" fill="rgb(248,47,43)"/><text x="27.5363%" y="127.50"></text></g><g><title>optimized_mir (5,366,650 samples, 0.39%)</title><rect x="27.1707%" y="133" width="0.3875%" height="15" fill="rgb(221,10,30)"/><text x="27.4207%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (2,951,880 samples, 0.21%)</title><rect x="27.6923%" y="117" width="0.2131%" height="15" fill="rgb(210,229,1)"/><text x="27.9423%" y="127.50"></text></g><g><title>specialization_graph_of (1,455,256 samples, 0.11%)</title><rect x="27.9771%" y="117" width="0.1051%" height="15" fill="rgb(222,148,37)"/><text x="28.2271%" y="127.50"></text></g><g><title>resolve_instance (7,705,280 samples, 0.56%)</title><rect x="27.5582%" y="133" width="0.5564%" height="15" fill="rgb(234,67,33)"/><text x="27.8082%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (20,597,900 samples, 1.49%)</title><rect x="26.7270%" y="149" width="1.4873%" height="15" fill="rgb(247,98,35)"/><text x="26.9770%" y="159.50"></text></g><g><title>monomorphization_collector (20,680,580 samples, 1.49%)</title><rect x="26.7268%" y="165" width="1.4932%" height="15" fill="rgb(247,138,52)"/><text x="26.9768%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (2,299,184 samples, 0.17%)</title><rect x="28.2215%" y="149" width="0.1660%" height="15" fill="rgb(213,79,30)"/><text x="28.4715%" y="159.50"></text></g><g><title>symbol_name (2,086,370 samples, 0.15%)</title><rect x="28.2368%" y="133" width="0.1506%" height="15" fill="rgb(246,177,23)"/><text x="28.4868%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (23,868,524 samples, 1.72%)</title><rect x="26.7238%" y="181" width="1.7234%" height="15" fill="rgb(230,62,27)"/><text x="26.9738%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (3,145,633 samples, 0.23%)</title><rect x="28.2201%" y="165" width="0.2271%" height="15" fill="rgb(216,154,8)"/><text x="28.4701%" y="175.50"></text></g><g><title>codegen_crate (79,390,045 samples, 5.73%)</title><rect x="22.7235%" y="197" width="5.7324%" height="15" fill="rgb(244,35,45)"/><text x="22.9735%" y="207.50">codegen..</text></g><g><title>codegen_module_optimize (408,388,686 samples, 29.49%)</title><rect x="28.4559%" y="197" width="29.4877%" height="15" fill="rgb(251,115,12)"/><text x="28.7059%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (382,682,461 samples, 27.63%)</title><rect x="30.3120%" y="181" width="27.6316%" height="15" fill="rgb(240,54,50)"/><text x="30.5620%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (171,398,425 samples, 12.38%)</title><rect x="58.9558%" y="181" width="12.3758%" height="15" fill="rgb(233,84,52)"/><text x="59.2058%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (184,970,319 samples, 13.36%)</title><rect x="71.3317%" y="181" width="13.3558%" height="15" fill="rgb(207,117,47)"/><text x="71.5817%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (182,663,225 samples, 13.19%)</title><rect x="71.4982%" y="165" width="13.1892%" height="15" fill="rgb(249,43,39)"/><text x="71.7482%" y="175.50">LLVM_module_codegen_..</text></g><g><title>LLVM_thin_lto_import (20,597,677 samples, 1.49%)</title><rect x="84.6874%" y="181" width="1.4873%" height="15" fill="rgb(209,38,44)"/><text x="84.9374%" y="191.50"></text></g><g><title>codegen_module_perform_lto (391,796,509 samples, 28.29%)</title><rect x="57.9435%" y="197" width="28.2896%" height="15" fill="rgb(236,212,23)"/><text x="58.1935%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (8,226,066 samples, 0.59%)</title><rect x="89.3715%" y="149" width="0.5940%" height="15" fill="rgb(242,79,21)"/><text x="89.6215%" y="159.50"></text></g><g><title>metadata_register_crate (1,872,322 samples, 0.14%)</title><rect x="89.8303%" y="133" width="0.1352%" height="15" fill="rgb(211,96,35)"/><text x="90.0803%" y="143.50"></text></g><g><title>macro_expand_crate (51,561,659 samples, 3.72%)</title><rect x="86.2780%" y="181" width="3.7230%" height="15" fill="rgb(253,215,40)"/><text x="86.5280%" y="191.50">macr..</text></g><g><title>expand_crate (51,548,849 samples, 3.72%)</title><rect x="86.2789%" y="165" width="3.7221%" height="15" fill="rgb(211,81,21)"/><text x="86.5289%" y="175.50">expa..</text></g><g><title>late_resolve_crate (3,124,763 samples, 0.23%)</title><rect x="90.0424%" y="165" width="0.2256%" height="15" fill="rgb(208,190,38)"/><text x="90.2924%" y="175.50"></text></g><g><title>configure_and_expand (56,082,947 samples, 4.05%)</title><rect x="86.2332%" y="197" width="4.0495%" height="15" fill="rgb(235,213,38)"/><text x="86.4832%" y="207.50">conf..</text></g><g><title>resolve_crate (3,771,439 samples, 0.27%)</title><rect x="90.0103%" y="181" width="0.2723%" height="15" fill="rgb(237,122,38)"/><text x="90.2603%" y="191.50"></text></g><g><title>free_global_ctxt (10,642,234 samples, 0.77%)</title><rect x="90.3481%" y="197" width="0.7684%" height="15" fill="rgb(244,218,35)"/><text x="90.5981%" y="207.50"></text></g><g><title>optimized_mir (1,866,600 samples, 0.13%)</title><rect x="91.9550%" y="117" width="0.1348%" height="15" fill="rgb(240,68,47)"/><text x="92.2050%" y="127.50"></text></g><g><title>layout_of (2,919,893 samples, 0.21%)</title><rect x="91.8802%" y="133" width="0.2108%" height="15" fill="rgb(210,16,53)"/><text x="92.1302%" y="143.50"></text></g><g><title>layout_of (3,062,853 samples, 0.22%)</title><rect x="91.8706%" y="149" width="0.2212%" height="15" fill="rgb(235,124,12)"/><text x="92.1206%" y="159.50"></text></g><g><title>layout_of (4,135,771 samples, 0.30%)</title><rect x="91.7999%" y="165" width="0.2986%" height="15" fill="rgb(224,169,11)"/><text x="92.0499%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (6,746,551 samples, 0.49%)</title><rect x="92.0985%" y="165" width="0.4871%" height="15" fill="rgb(250,166,2)"/><text x="92.3485%" y="175.50"></text></g><g><title>optimized_mir (16,531,867 samples, 1.19%)</title><rect x="91.4327%" y="181" width="1.1937%" height="15" fill="rgb(242,216,29)"/><text x="91.6827%" y="191.50"></text></g><g><title>generate_crate_metadata (21,396,758 samples, 1.54%)</title><rect x="91.1165%" y="197" width="1.5450%" height="15" fill="rgb(230,116,27)"/><text x="91.3665%" y="207.50"></text></g><g><title>hir_lowering (5,188,406 samples, 0.37%)</title><rect x="92.6614%" y="197" width="0.3746%" height="15" fill="rgb(228,99,48)"/><text x="92.9114%" y="207.50"></text></g><g><title>finish_ongoing_codegen (89,471,532 samples, 6.46%)</title><rect x="93.0374%" y="181" width="6.4603%" height="15" fill="rgb(253,11,6)"/><text x="93.2874%" y="191.50">finish_o..</text></g><g><title>link_crate (2,107,193 samples, 0.15%)</title><rect x="99.4977%" y="181" width="0.1521%" height="15" fill="rgb(247,143,39)"/><text x="99.7477%" y="191.50"></text></g><g><title>link_binary (1,733,748 samples, 0.13%)</title><rect x="99.5246%" y="165" width="0.1252%" height="15" fill="rgb(236,97,10)"/><text x="99.7746%" y="175.50"></text></g><g><title>link (91,608,975 samples, 6.61%)</title><rect x="93.0361%" y="197" width="6.6146%" height="15" fill="rgb(233,208,19)"/><text x="93.2861%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (3,729,769 samples, 0.27%)</title><rect x="99.6887%" y="197" width="0.2693%" height="15" fill="rgb(216,164,2)"/><text x="99.9387%" y="207.50"></text></g><g><title>all (1,384,947,408 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (1,384,947,408 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(242,17,10)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>