<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (149,595,524 samples, 12.57%)</title><rect x="0.0517%" y="245" width="12.5698%" height="15" fill="rgb(227,0,7)"/><text x="0.3017%" y="255.50">LLVM_passes</text></g><g><title>is_copy_raw (1,725,342 samples, 0.14%)</title><rect x="15.1242%" y="117" width="0.1450%" height="15" fill="rgb(217,0,24)"/><text x="15.3742%" y="127.50"></text></g><g><title>evaluate_obligation (1,428,437 samples, 0.12%)</title><rect x="15.1492%" y="101" width="0.1200%" height="15" fill="rgb(221,193,54)"/><text x="15.3992%" y="111.50"></text></g><g><title>needs_drop_raw (2,686,124 samples, 0.23%)</title><rect x="15.0470%" y="133" width="0.2257%" height="15" fill="rgb(248,212,6)"/><text x="15.2970%" y="143.50"></text></g><g><title>resolve_instance (2,615,765 samples, 0.22%)</title><rect x="15.2727%" y="133" width="0.2198%" height="15" fill="rgb(208,68,35)"/><text x="15.5227%" y="143.50"></text></g><g><title>thir_body (1,488,484 samples, 0.13%)</title><rect x="15.4962%" y="133" width="0.1251%" height="15" fill="rgb(232,128,0)"/><text x="15.7462%" y="143.50"></text></g><g><title>mir_const (13,606,082 samples, 1.14%)</title><rect x="14.4812%" y="181" width="1.1433%" height="15" fill="rgb(207,160,47)"/><text x="14.7312%" y="191.50"></text></g><g><title>unsafety_check_result (12,081,489 samples, 1.02%)</title><rect x="14.6093%" y="165" width="1.0151%" height="15" fill="rgb(228,23,34)"/><text x="14.8593%" y="175.50"></text></g><g><title>mir_built (10,976,507 samples, 0.92%)</title><rect x="14.7021%" y="149" width="0.9223%" height="15" fill="rgb(218,30,26)"/><text x="14.9521%" y="159.50"></text></g><g><title>mir_promoted (14,905,743 samples, 1.25%)</title><rect x="14.3771%" y="197" width="1.2525%" height="15" fill="rgb(220,122,19)"/><text x="14.6271%" y="207.50"></text></g><g><title>type_op_prove_predicate (4,473,355 samples, 0.38%)</title><rect x="15.8309%" y="197" width="0.3759%" height="15" fill="rgb(250,228,42)"/><text x="16.0809%" y="207.50"></text></g><g><title>MIR_borrow_checking (42,238,359 samples, 3.55%)</title><rect x="12.6585%" y="229" width="3.5491%" height="15" fill="rgb(240,193,28)"/><text x="12.9085%" y="239.50">MIR_..</text></g><g><title>mir_borrowck (42,060,366 samples, 3.53%)</title><rect x="12.6734%" y="213" width="3.5341%" height="15" fill="rgb(216,20,37)"/><text x="12.9234%" y="223.50">mir..</text></g><g><title>misc_checking_1 (2,013,091 samples, 0.17%)</title><rect x="16.2389%" y="229" width="0.1692%" height="15" fill="rgb(206,188,39)"/><text x="16.4889%" y="239.50"></text></g><g><title>misc_checking_2 (1,880,130 samples, 0.16%)</title><rect x="16.4080%" y="229" width="0.1580%" height="15" fill="rgb(217,207,13)"/><text x="16.6580%" y="239.50"></text></g><g><title>crate_lints (4,071,183 samples, 0.34%)</title><rect x="16.6775%" y="197" width="0.3421%" height="15" fill="rgb(231,73,38)"/><text x="16.9275%" y="207.50"></text></g><g><title>type_of (1,637,699 samples, 0.14%)</title><rect x="16.8820%" y="181" width="0.1376%" height="15" fill="rgb(225,20,46)"/><text x="17.1320%" y="191.50"></text></g><g><title>metadata_decode_entry_type_of (1,250,435 samples, 0.11%)</title><rect x="16.9145%" y="165" width="0.1051%" height="15" fill="rgb(210,31,41)"/><text x="17.1645%" y="175.50"></text></g><g><title>lint_checking (5,247,086 samples, 0.44%)</title><rect x="16.6773%" y="213" width="0.4409%" height="15" fill="rgb(221,200,47)"/><text x="16.9273%" y="223.50"></text></g><g><title>privacy_checking_modules (1,956,090 samples, 0.16%)</title><rect x="17.1708%" y="213" width="0.1644%" height="15" fill="rgb(226,26,5)"/><text x="17.4208%" y="223.50"></text></g><g><title>check_mod_privacy (1,948,780 samples, 0.16%)</title><rect x="17.1714%" y="197" width="0.1637%" height="15" fill="rgb(249,33,26)"/><text x="17.4214%" y="207.50"></text></g><g><title>misc_checking_3 (9,170,447 samples, 0.77%)</title><rect x="16.5660%" y="229" width="0.7705%" height="15" fill="rgb(235,183,28)"/><text x="16.8160%" y="239.50"></text></g><g><title>impl_parent (4,300,692 samples, 0.36%)</title><rect x="17.9400%" y="165" width="0.3614%" height="15" fill="rgb(221,5,38)"/><text x="18.1900%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_parent (2,431,871 samples, 0.20%)</title><rect x="18.0970%" y="149" width="0.2043%" height="15" fill="rgb(247,18,42)"/><text x="18.3470%" y="159.50"></text></g><g><title>impl_trait_ref (9,568,531 samples, 0.80%)</title><rect x="18.3013%" y="165" width="0.8040%" height="15" fill="rgb(241,131,45)"/><text x="18.5513%" y="175.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (7,500,148 samples, 0.63%)</title><rect x="18.4751%" y="149" width="0.6302%" height="15" fill="rgb(249,31,29)"/><text x="18.7251%" y="159.50"></text></g><g><title>trait_impls_of (2,079,252 samples, 0.17%)</title><rect x="19.1093%" y="165" width="0.1747%" height="15" fill="rgb(225,111,53)"/><text x="19.3593%" y="175.50"></text></g><g><title>coherent_trait (23,012,045 samples, 1.93%)</title><rect x="17.3506%" y="197" width="1.9336%" height="15" fill="rgb(238,160,17)"/><text x="17.6006%" y="207.50">c..</text></g><g><title>specialization_graph_of (22,976,055 samples, 1.93%)</title><rect x="17.3536%" y="181" width="1.9306%" height="15" fill="rgb(214,148,48)"/><text x="17.6036%" y="191.50">s..</text></g><g><title>coherence_checking (23,136,156 samples, 1.94%)</title><rect x="17.3481%" y="213" width="1.9440%" height="15" fill="rgb(232,36,49)"/><text x="17.5981%" y="223.50">c..</text></g><g><title>dropck_outlives (1,408,532 samples, 0.12%)</title><rect x="21.7735%" y="165" width="0.1184%" height="15" fill="rgb(209,103,24)"/><text x="22.0235%" y="175.50"></text></g><g><title>evaluate_obligation (3,626,367 samples, 0.30%)</title><rect x="21.8918%" y="165" width="0.3047%" height="15" fill="rgb(229,88,8)"/><text x="22.1418%" y="175.50"></text></g><g><title>typeck (10,683,502 samples, 0.90%)</title><rect x="22.4071%" y="165" width="0.8977%" height="15" fill="rgb(213,181,19)"/><text x="22.6571%" y="175.50"></text></g><g><title>item_bodies_checking (47,758,948 samples, 4.01%)</title><rect x="19.2981%" y="213" width="4.0130%" height="15" fill="rgb(254,191,54)"/><text x="19.5481%" y="223.50">item..</text></g><g><title>typeck_item_bodies (47,755,258 samples, 4.01%)</title><rect x="19.2984%" y="197" width="4.0126%" height="15" fill="rgb(241,83,37)"/><text x="19.5484%" y="207.50">type..</text></g><g><title>typeck (47,624,643 samples, 4.00%)</title><rect x="19.3094%" y="181" width="4.0017%" height="15" fill="rgb(233,36,39)"/><text x="19.5594%" y="191.50">type..</text></g><g><title>mir_borrowck (3,400,985 samples, 0.29%)</title><rect x="23.9096%" y="149" width="0.2858%" height="15" fill="rgb(226,3,54)"/><text x="24.1596%" y="159.50"></text></g><g><title>adt_dtorck_constraint (1,376,816 samples, 0.12%)</title><rect x="25.0666%" y="37" width="0.1157%" height="15" fill="rgb(245,192,40)"/><text x="25.3166%" y="47.50"></text></g><g><title>adt_dtorck_constraint (2,473,766 samples, 0.21%)</title><rect x="24.9830%" y="53" width="0.2079%" height="15" fill="rgb(238,167,29)"/><text x="25.2330%" y="63.50"></text></g><g><title>dropck_outlives (2,936,200 samples, 0.25%)</title><rect x="24.9464%" y="69" width="0.2467%" height="15" fill="rgb(232,182,51)"/><text x="25.1964%" y="79.50"></text></g><g><title>evaluate_obligation (1,741,683 samples, 0.15%)</title><rect x="25.1931%" y="69" width="0.1463%" height="15" fill="rgb(231,60,39)"/><text x="25.4431%" y="79.50"></text></g><g><title>mir_built (15,045,119 samples, 1.26%)</title><rect x="24.2319%" y="101" width="1.2642%" height="15" fill="rgb(208,69,12)"/><text x="24.4819%" y="111.50"></text></g><g><title>typeck (14,302,272 samples, 1.20%)</title><rect x="24.2944%" y="85" width="1.2018%" height="15" fill="rgb(235,93,37)"/><text x="24.5444%" y="95.50"></text></g><g><title>mir_const (16,530,136 samples, 1.39%)</title><rect x="24.2064%" y="133" width="1.3889%" height="15" fill="rgb(213,116,39)"/><text x="24.4564%" y="143.50"></text></g><g><title>unsafety_check_result (16,303,154 samples, 1.37%)</title><rect x="24.2254%" y="117" width="1.3699%" height="15" fill="rgb(222,207,29)"/><text x="24.4754%" y="127.50"></text></g><g><title>mir_promoted (16,672,786 samples, 1.40%)</title><rect x="24.1954%" y="149" width="1.4009%" height="15" fill="rgb(206,96,30)"/><text x="24.4454%" y="159.50"></text></g><g><title>item_types_checking (27,837,137 samples, 2.34%)</title><rect x="23.3111%" y="213" width="2.3390%" height="15" fill="rgb(218,138,4)"/><text x="23.5611%" y="223.50">i..</text></g><g><title>check_mod_item_types (27,824,837 samples, 2.34%)</title><rect x="23.3121%" y="197" width="2.3380%" height="15" fill="rgb(250,191,14)"/><text x="23.5621%" y="207.50">c..</text></g><g><title>type_of (22,492,531 samples, 1.89%)</title><rect x="23.7602%" y="181" width="1.8899%" height="15" fill="rgb(239,60,40)"/><text x="24.0102%" y="191.50">t..</text></g><g><title>mir_borrowck (22,427,410 samples, 1.88%)</title><rect x="23.7656%" y="165" width="1.8845%" height="15" fill="rgb(206,27,48)"/><text x="24.0156%" y="175.50">m..</text></g><g><title>predicates_of (2,034,670 samples, 0.17%)</title><rect x="25.7852%" y="181" width="0.1710%" height="15" fill="rgb(225,35,8)"/><text x="26.0352%" y="191.50"></text></g><g><title>predicates_defined_on (1,927,649 samples, 0.16%)</title><rect x="25.7942%" y="165" width="0.1620%" height="15" fill="rgb(250,213,24)"/><text x="26.0442%" y="175.50"></text></g><g><title>type_collecting (3,966,102 samples, 0.33%)</title><rect x="25.6507%" y="213" width="0.3333%" height="15" fill="rgb(247,123,22)"/><text x="25.9007%" y="223.50"></text></g><g><title>collect_mod_item_types (3,953,292 samples, 0.33%)</title><rect x="25.6518%" y="197" width="0.3322%" height="15" fill="rgb(231,138,38)"/><text x="25.9018%" y="207.50"></text></g><g><title>evaluate_obligation (1,637,006 samples, 0.14%)</title><rect x="26.3857%" y="181" width="0.1375%" height="15" fill="rgb(231,145,46)"/><text x="26.6357%" y="191.50"></text></g><g><title>check_impl_item_well_formed (8,149,903 samples, 0.68%)</title><rect x="26.0203%" y="197" width="0.6848%" height="15" fill="rgb(251,118,11)"/><text x="26.2703%" y="207.50"></text></g><g><title>check_item_well_formed (6,323,083 samples, 0.53%)</title><rect x="26.7051%" y="197" width="0.5313%" height="15" fill="rgb(217,147,25)"/><text x="26.9551%" y="207.50"></text></g><g><title>analysis (174,365,426 samples, 14.65%)</title><rect x="12.6215%" y="245" width="14.6511%" height="15" fill="rgb(247,81,37)"/><text x="12.8715%" y="255.50">analysis</text></g><g><title>type_check_crate (118,250,470 samples, 9.94%)</title><rect x="17.3365%" y="229" width="9.9360%" height="15" fill="rgb(209,12,38)"/><text x="17.5865%" y="239.50">type_check_cra..</text></g><g><title>wf_checking (15,327,594 samples, 1.29%)</title><rect x="25.9846%" y="213" width="1.2879%" height="15" fill="rgb(227,1,9)"/><text x="26.2346%" y="223.50"></text></g><g><title>layout_of (1,724,198 samples, 0.14%)</title><rect x="29.7462%" y="197" width="0.1449%" height="15" fill="rgb(248,47,43)"/><text x="29.9962%" y="207.50"></text></g><g><title>param_env (2,580,845 samples, 0.22%)</title><rect x="29.8910%" y="197" width="0.2169%" height="15" fill="rgb(221,10,30)"/><text x="30.1410%" y="207.50"></text></g><g><title>fn_abi_of_instance (9,696,458 samples, 0.81%)</title><rect x="29.3540%" y="213" width="0.8147%" height="15" fill="rgb(210,229,1)"/><text x="29.6040%" y="223.50"></text></g><g><title>codegen_module (34,089,692 samples, 2.86%)</title><rect x="27.4308%" y="229" width="2.8644%" height="15" fill="rgb(222,148,37)"/><text x="27.6808%" y="239.50">co..</text></g><g><title>codegen_fn_attrs (1,455,385 samples, 0.12%)</title><rect x="30.4687%" y="181" width="0.1223%" height="15" fill="rgb(234,67,33)"/><text x="30.7187%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,640,830 samples, 0.14%)</title><rect x="30.8147%" y="165" width="0.1379%" height="15" fill="rgb(247,98,35)"/><text x="31.0647%" y="175.50"></text></g><g><title>optimized_mir (4,604,059 samples, 0.39%)</title><rect x="30.6457%" y="181" width="0.3869%" height="15" fill="rgb(247,138,52)"/><text x="30.8957%" y="191.50"></text></g><g><title>codegen_fulfill_obligation (2,299,737 samples, 0.19%)</title><rect x="31.0892%" y="165" width="0.1932%" height="15" fill="rgb(213,79,30)"/><text x="31.3392%" y="175.50"></text></g><g><title>resolve_instance (5,100,938 samples, 0.43%)</title><rect x="31.0326%" y="181" width="0.4286%" height="15" fill="rgb(246,177,23)"/><text x="31.2826%" y="191.50"></text></g><g><title>monomorphization_collector_graph_walk (14,770,597 samples, 1.24%)</title><rect x="30.2991%" y="197" width="1.2411%" height="15" fill="rgb(230,62,27)"/><text x="30.5491%" y="207.50"></text></g><g><title>monomorphization_collector (14,836,048 samples, 1.25%)</title><rect x="30.2989%" y="213" width="1.2466%" height="15" fill="rgb(216,154,8)"/><text x="30.5489%" y="223.50"></text></g><g><title>assert_symbols_are_distinct (1,441,216 samples, 0.12%)</title><rect x="31.5459%" y="197" width="0.1211%" height="15" fill="rgb(244,35,45)"/><text x="31.7959%" y="207.50"></text></g><g><title>symbol_name (1,311,636 samples, 0.11%)</title><rect x="31.5567%" y="181" width="0.1102%" height="15" fill="rgb(251,115,12)"/><text x="31.8067%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (16,779,199 samples, 1.41%)</title><rect x="30.2962%" y="229" width="1.4099%" height="15" fill="rgb(240,54,50)"/><text x="30.5462%" y="239.50"></text></g><g><title>partition_and_assert_distinct_symbols (1,911,481 samples, 0.16%)</title><rect x="31.5455%" y="213" width="0.1606%" height="15" fill="rgb(233,84,52)"/><text x="31.7955%" y="223.50"></text></g><g><title>codegen_crate (52,982,305 samples, 4.45%)</title><rect x="27.2731%" y="245" width="4.4518%" height="15" fill="rgb(207,117,47)"/><text x="27.5231%" y="255.50">codeg..</text></g><g><title>codegen_module_optimize (289,116,098 samples, 24.29%)</title><rect x="31.7249%" y="245" width="24.2930%" height="15" fill="rgb(249,43,39)"/><text x="31.9749%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (266,760,498 samples, 22.41%)</title><rect x="33.6034%" y="229" width="22.4146%" height="15" fill="rgb(209,38,44)"/><text x="33.8534%" y="239.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (122,446,555 samples, 10.29%)</title><rect x="57.0369%" y="229" width="10.2886%" height="15" fill="rgb(236,212,23)"/><text x="57.2869%" y="239.50">LLVM_lto_optimi..</text></g><g><title>LLVM_module_codegen (154,314,988 samples, 12.97%)</title><rect x="67.3255%" y="229" width="12.9663%" height="15" fill="rgb(242,79,21)"/><text x="67.5755%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (152,007,671 samples, 12.77%)</title><rect x="67.5194%" y="213" width="12.7725%" height="15" fill="rgb(211,96,35)"/><text x="67.7694%" y="223.50">LLVM_module_codegen..</text></g><g><title>LLVM_thin_lto_import (13,756,379 samples, 1.16%)</title><rect x="80.2919%" y="229" width="1.1559%" height="15" fill="rgb(253,215,40)"/><text x="80.5419%" y="239.50"></text></g><g><title>codegen_module_perform_lto (303,408,795 samples, 25.49%)</title><rect x="56.0180%" y="245" width="25.4940%" height="15" fill="rgb(211,81,21)"/><text x="56.2680%" y="255.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (32,459,076 samples, 2.73%)</title><rect x="83.5215%" y="197" width="2.7274%" height="15" fill="rgb(208,190,38)"/><text x="83.7715%" y="207.50">me..</text></g><g><title>metadata_register_crate (30,584,415 samples, 2.57%)</title><rect x="83.6790%" y="181" width="2.5699%" height="15" fill="rgb(235,213,38)"/><text x="83.9290%" y="191.50">me..</text></g><g><title>metadata_register_crate (23,555,623 samples, 1.98%)</title><rect x="84.2696%" y="165" width="1.9793%" height="15" fill="rgb(237,122,38)"/><text x="84.5196%" y="175.50">m..</text></g><g><title>metadata_register_crate (4,098,612 samples, 0.34%)</title><rect x="85.9045%" y="149" width="0.3444%" height="15" fill="rgb(244,218,35)"/><text x="86.1545%" y="159.50"></text></g><g><title>macro_expand_crate (56,120,858 samples, 4.72%)</title><rect x="81.5513%" y="229" width="4.7156%" height="15" fill="rgb(240,68,47)"/><text x="81.8013%" y="239.50">macro..</text></g><g><title>expand_crate (56,109,738 samples, 4.71%)</title><rect x="81.5522%" y="213" width="4.7146%" height="15" fill="rgb(210,16,53)"/><text x="81.8022%" y="223.50">expan..</text></g><g><title>late_resolve_crate (2,546,787 samples, 0.21%)</title><rect x="86.3063%" y="213" width="0.2140%" height="15" fill="rgb(235,124,12)"/><text x="86.5563%" y="223.50"></text></g><g><title>configure_and_expand (59,801,067 samples, 5.02%)</title><rect x="81.5120%" y="245" width="5.0248%" height="15" fill="rgb(224,169,11)"/><text x="81.7620%" y="255.50">config..</text></g><g><title>resolve_crate (3,126,883 samples, 0.26%)</title><rect x="86.2740%" y="229" width="0.2627%" height="15" fill="rgb(250,166,2)"/><text x="86.5240%" y="239.50"></text></g><g><title>free_global_ctxt (9,528,552 samples, 0.80%)</title><rect x="86.6087%" y="245" width="0.8006%" height="15" fill="rgb(242,216,29)"/><text x="86.8587%" y="255.50"></text></g><g><title>layout_of (1,212,084 samples, 0.10%)</title><rect x="88.4822%" y="101" width="0.1018%" height="15" fill="rgb(230,116,27)"/><text x="88.7322%" y="111.50"></text></g><g><title>layout_of (1,274,284 samples, 0.11%)</title><rect x="88.4786%" y="117" width="0.1071%" height="15" fill="rgb(228,99,48)"/><text x="88.7286%" y="127.50"></text></g><g><title>layout_of (1,634,019 samples, 0.14%)</title><rect x="88.4626%" y="133" width="0.1373%" height="15" fill="rgb(253,11,6)"/><text x="88.7126%" y="143.50"></text></g><g><title>layout_of (1,932,744 samples, 0.16%)</title><rect x="88.4463%" y="149" width="0.1624%" height="15" fill="rgb(247,143,39)"/><text x="88.6963%" y="159.50"></text></g><g><title>layout_of (2,165,744 samples, 0.18%)</title><rect x="88.4365%" y="165" width="0.1820%" height="15" fill="rgb(236,97,10)"/><text x="88.6865%" y="175.50"></text></g><g><title>layout_of (2,747,282 samples, 0.23%)</title><rect x="88.4103%" y="181" width="0.2308%" height="15" fill="rgb(233,208,19)"/><text x="88.6603%" y="191.50"></text></g><g><title>layout_of (2,969,034 samples, 0.25%)</title><rect x="88.3944%" y="197" width="0.2495%" height="15" fill="rgb(216,164,2)"/><text x="88.6444%" y="207.50"></text></g><g><title>layout_of (4,063,622 samples, 0.34%)</title><rect x="88.3091%" y="213" width="0.3414%" height="15" fill="rgb(220,129,5)"/><text x="88.5591%" y="223.50"></text></g><g><title>needs_drop_raw (1,395,554 samples, 0.12%)</title><rect x="89.2523%" y="197" width="0.1173%" height="15" fill="rgb(242,17,10)"/><text x="89.5023%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,848,558 samples, 0.74%)</title><rect x="88.6505%" y="213" width="0.7435%" height="15" fill="rgb(242,107,0)"/><text x="88.9005%" y="223.50"></text></g><g><title>optimized_mir (19,910,101 samples, 1.67%)</title><rect x="87.7700%" y="229" width="1.6730%" height="15" fill="rgb(251,28,31)"/><text x="88.0200%" y="239.50"></text></g><g><title>generate_crate_metadata (24,638,372 samples, 2.07%)</title><rect x="87.4094%" y="245" width="2.0702%" height="15" fill="rgb(233,223,10)"/><text x="87.6594%" y="255.50">g..</text></g><g><title>hir_lowering (4,570,249 samples, 0.38%)</title><rect x="89.4796%" y="245" width="0.3840%" height="15" fill="rgb(215,21,27)"/><text x="89.7296%" y="255.50"></text></g><g><title>finish_ongoing_codegen (113,457,668 samples, 9.53%)</title><rect x="89.8656%" y="229" width="9.5333%" height="15" fill="rgb(232,23,21)"/><text x="90.1156%" y="239.50">finish_ongoing..</text></g><g><title>link_crate (3,597,857 samples, 0.30%)</title><rect x="99.3989%" y="229" width="0.3023%" height="15" fill="rgb(244,5,23)"/><text x="99.6489%" y="239.50"></text></g><g><title>link_binary (3,386,465 samples, 0.28%)</title><rect x="99.4166%" y="213" width="0.2845%" height="15" fill="rgb(226,81,46)"/><text x="99.6666%" y="223.50"></text></g><g><title>link_rlib (2,176,302 samples, 0.18%)</title><rect x="99.5183%" y="197" width="0.1829%" height="15" fill="rgb(247,70,30)"/><text x="99.7683%" y="207.50"></text></g><g><title>link (117,095,246 samples, 9.84%)</title><rect x="89.8636%" y="245" width="9.8390%" height="15" fill="rgb(212,68,19)"/><text x="90.1136%" y="255.50">link</text></g><g><title>self_profile_alloc_query_strings (2,165,203 samples, 0.18%)</title><rect x="99.7733%" y="245" width="0.1819%" height="15" fill="rgb(240,187,13)"/><text x="100.0233%" y="255.50"></text></g><g><title>all (1,190,119,058 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(223,113,26)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (1,190,119,058 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(206,192,2)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>