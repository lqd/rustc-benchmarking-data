<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (331,625,663 samples, 14.27%)</title><rect x="0.0599%" y="149" width="14.2735%" height="15" fill="rgb(227,0,7)"/><text x="0.3099%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (2,325,296 samples, 0.10%)</title><rect x="14.2333%" y="133" width="0.1001%" height="15" fill="rgb(217,0,24)"/><text x="14.4833%" y="143.50"></text></g><g><title>needs_drop_raw (2,988,747 samples, 0.13%)</title><rect x="19.0140%" y="37" width="0.1286%" height="15" fill="rgb(221,193,54)"/><text x="19.2640%" y="47.50"></text></g><g><title>resolve_instance (3,954,193 samples, 0.17%)</title><rect x="19.1426%" y="37" width="0.1702%" height="15" fill="rgb(248,212,6)"/><text x="19.3926%" y="47.50"></text></g><g><title>thir_body (7,096,541 samples, 0.31%)</title><rect x="19.3219%" y="37" width="0.3054%" height="15" fill="rgb(208,68,35)"/><text x="19.5719%" y="47.50"></text></g><g><title>mir_const (42,406,695 samples, 1.83%)</title><rect x="17.8072%" y="85" width="1.8252%" height="15" fill="rgb(232,128,0)"/><text x="18.0572%" y="95.50">m..</text></g><g><title>unsafety_check_result (36,195,969 samples, 1.56%)</title><rect x="18.0745%" y="69" width="1.5579%" height="15" fill="rgb(207,160,47)"/><text x="18.3245%" y="79.50"></text></g><g><title>mir_built (31,736,564 samples, 1.37%)</title><rect x="18.2665%" y="53" width="1.3660%" height="15" fill="rgb(228,23,34)"/><text x="18.5165%" y="63.50"></text></g><g><title>mir_promoted (48,470,271 samples, 2.09%)</title><rect x="17.5962%" y="101" width="2.0862%" height="15" fill="rgb(218,30,26)"/><text x="17.8462%" y="111.50">m..</text></g><g><title>type_op_prove_predicate (7,017,864 samples, 0.30%)</title><rect x="19.8521%" y="101" width="0.3021%" height="15" fill="rgb(220,122,19)"/><text x="20.1021%" y="111.50"></text></g><g><title>MIR_borrow_checking (133,948,114 samples, 5.77%)</title><rect x="14.3896%" y="133" width="5.7652%" height="15" fill="rgb(250,228,42)"/><text x="14.6396%" y="143.50">MIR_bor..</text></g><g><title>mir_borrowck (133,056,093 samples, 5.73%)</title><rect x="14.4280%" y="117" width="5.7269%" height="15" fill="rgb(240,193,28)"/><text x="14.6780%" y="127.50">mir_bor..</text></g><g><title>misc_checking_1 (5,964,656 samples, 0.26%)</title><rect x="20.2303%" y="133" width="0.2567%" height="15" fill="rgb(216,20,37)"/><text x="20.4803%" y="143.50"></text></g><g><title>liveness_and_intrinsic_checking (2,697,360 samples, 0.12%)</title><rect x="20.4871%" y="117" width="0.1161%" height="15" fill="rgb(206,188,39)"/><text x="20.7371%" y="127.50"></text></g><g><title>misc_checking_2 (6,443,471 samples, 0.28%)</title><rect x="20.4870%" y="133" width="0.2773%" height="15" fill="rgb(217,207,13)"/><text x="20.7370%" y="143.50"></text></g><g><title>match_checking (3,744,041 samples, 0.16%)</title><rect x="20.6032%" y="117" width="0.1611%" height="15" fill="rgb(231,73,38)"/><text x="20.8532%" y="127.50"></text></g><g><title>check_match (3,525,218 samples, 0.15%)</title><rect x="20.6126%" y="101" width="0.1517%" height="15" fill="rgb(225,20,46)"/><text x="20.8626%" y="111.50"></text></g><g><title>crate_lints (7,364,982 samples, 0.32%)</title><rect x="20.9154%" y="101" width="0.3170%" height="15" fill="rgb(210,31,41)"/><text x="21.1654%" y="111.50"></text></g><g><title>lint_checking (10,205,833 samples, 0.44%)</title><rect x="20.9152%" y="117" width="0.4393%" height="15" fill="rgb(221,200,47)"/><text x="21.1652%" y="127.50"></text></g><g><title>module_lints (2,837,831 samples, 0.12%)</title><rect x="21.2323%" y="101" width="0.1221%" height="15" fill="rgb(226,26,5)"/><text x="21.4823%" y="111.50"></text></g><g><title>lint_mod (2,820,341 samples, 0.12%)</title><rect x="21.2331%" y="85" width="0.1214%" height="15" fill="rgb(249,33,26)"/><text x="21.4831%" y="95.50"></text></g><g><title>privacy_checking_modules (5,024,506 samples, 0.22%)</title><rect x="21.4326%" y="117" width="0.2163%" height="15" fill="rgb(235,183,28)"/><text x="21.6826%" y="127.50"></text></g><g><title>check_mod_privacy (5,011,736 samples, 0.22%)</title><rect x="21.4332%" y="101" width="0.2157%" height="15" fill="rgb(221,5,38)"/><text x="21.6832%" y="111.50"></text></g><g><title>misc_checking_3 (20,598,478 samples, 0.89%)</title><rect x="20.7644%" y="133" width="0.8866%" height="15" fill="rgb(247,18,42)"/><text x="21.0144%" y="143.50"></text></g><g><title>impl_parent (3,216,252 samples, 0.14%)</title><rect x="21.9111%" y="69" width="0.1384%" height="15" fill="rgb(241,131,45)"/><text x="22.1611%" y="79.50"></text></g><g><title>impl_trait_ref (6,474,209 samples, 0.28%)</title><rect x="22.0496%" y="69" width="0.2787%" height="15" fill="rgb(249,31,29)"/><text x="22.2996%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,055,796 samples, 0.22%)</title><rect x="22.1106%" y="53" width="0.2176%" height="15" fill="rgb(225,111,53)"/><text x="22.3606%" y="63.50"></text></g><g><title>coherent_trait (17,156,600 samples, 0.74%)</title><rect x="21.6690%" y="101" width="0.7384%" height="15" fill="rgb(238,160,17)"/><text x="21.9190%" y="111.50"></text></g><g><title>specialization_graph_of (16,576,844 samples, 0.71%)</title><rect x="21.6939%" y="85" width="0.7135%" height="15" fill="rgb(214,148,48)"/><text x="21.9439%" y="95.50"></text></g><g><title>coherence_checking (17,385,183 samples, 0.75%)</title><rect x="21.6677%" y="117" width="0.7483%" height="15" fill="rgb(232,36,49)"/><text x="21.9177%" y="127.50"></text></g><g><title>specializes (2,805,354 samples, 0.12%)</title><rect x="27.0725%" y="53" width="0.1207%" height="15" fill="rgb(209,103,24)"/><text x="27.3225%" y="63.50"></text></g><g><title>evaluate_obligation (13,380,253 samples, 0.58%)</title><rect x="26.6466%" y="69" width="0.5759%" height="15" fill="rgb(229,88,8)"/><text x="26.8966%" y="79.50"></text></g><g><title>evaluate_obligation (3,174,873 samples, 0.14%)</title><rect x="28.8729%" y="53" width="0.1366%" height="15" fill="rgb(213,181,19)"/><text x="29.1229%" y="63.50"></text></g><g><title>typeck (40,279,604 samples, 1.73%)</title><rect x="27.3977%" y="69" width="1.7337%" height="15" fill="rgb(254,191,54)"/><text x="27.6477%" y="79.50"></text></g><g><title>item_bodies_checking (156,033,258 samples, 6.72%)</title><rect x="22.4232%" y="117" width="6.7158%" height="15" fill="rgb(241,83,37)"/><text x="22.6732%" y="127.50">item_bodi..</text></g><g><title>typeck_item_bodies (156,029,468 samples, 6.72%)</title><rect x="22.4234%" y="101" width="6.7156%" height="15" fill="rgb(233,36,39)"/><text x="22.6734%" y="111.50">typeck_it..</text></g><g><title>typeck (155,216,379 samples, 6.68%)</title><rect x="22.4584%" y="85" width="6.6807%" height="15" fill="rgb(226,3,54)"/><text x="22.7084%" y="95.50">typeck</text></g><g><title>item_types_checking (6,478,042 samples, 0.28%)</title><rect x="29.1390%" y="117" width="0.2788%" height="15" fill="rgb(245,192,40)"/><text x="29.3890%" y="127.50"></text></g><g><title>check_mod_item_types (6,460,902 samples, 0.28%)</title><rect x="29.1398%" y="101" width="0.2781%" height="15" fill="rgb(238,167,29)"/><text x="29.3898%" y="111.50"></text></g><g><title>predicates_of (2,593,338 samples, 0.11%)</title><rect x="29.6598%" y="85" width="0.1116%" height="15" fill="rgb(232,182,51)"/><text x="29.9098%" y="95.50"></text></g><g><title>type_collecting (8,598,046 samples, 0.37%)</title><rect x="29.4185%" y="117" width="0.3701%" height="15" fill="rgb(231,60,39)"/><text x="29.6685%" y="127.50"></text></g><g><title>collect_mod_item_types (8,569,885 samples, 0.37%)</title><rect x="29.4197%" y="101" width="0.3689%" height="15" fill="rgb(208,69,12)"/><text x="29.6697%" y="111.50"></text></g><g><title>check_impl_item_well_formed (18,119,841 samples, 0.78%)</title><rect x="29.8386%" y="101" width="0.7799%" height="15" fill="rgb(235,93,37)"/><text x="30.0886%" y="111.50"></text></g><g><title>check_item_well_formed (12,774,333 samples, 0.55%)</title><rect x="30.6185%" y="101" width="0.5498%" height="15" fill="rgb(213,116,39)"/><text x="30.8685%" y="111.50"></text></g><g><title>analysis (391,466,356 samples, 16.85%)</title><rect x="14.3334%" y="149" width="16.8491%" height="15" fill="rgb(222,207,29)"/><text x="14.5834%" y="159.50">analysis</text></g><g><title>type_check_crate (221,452,923 samples, 9.53%)</title><rect x="21.6509%" y="133" width="9.5315%" height="15" fill="rgb(206,96,30)"/><text x="21.9009%" y="143.50">type_check_cra..</text></g><g><title>wf_checking (32,355,028 samples, 1.39%)</title><rect x="29.7899%" y="117" width="1.3926%" height="15" fill="rgb(218,138,4)"/><text x="30.0399%" y="127.50"></text></g><g><title>layout_of (2,324,726 samples, 0.10%)</title><rect x="34.3224%" y="101" width="0.1001%" height="15" fill="rgb(250,191,14)"/><text x="34.5724%" y="111.50"></text></g><g><title>param_env (4,239,814 samples, 0.18%)</title><rect x="34.4224%" y="101" width="0.1825%" height="15" fill="rgb(239,60,40)"/><text x="34.6724%" y="111.50"></text></g><g><title>fn_abi_of_instance (17,492,804 samples, 0.75%)</title><rect x="33.8792%" y="117" width="0.7529%" height="15" fill="rgb(206,27,48)"/><text x="34.1292%" y="127.50"></text></g><g><title>codegen_module (80,674,763 samples, 3.47%)</title><rect x="31.2830%" y="133" width="3.4723%" height="15" fill="rgb(225,35,8)"/><text x="31.5330%" y="143.50">cod..</text></g><g><title>metadata_decode_entry_optimized_mir (2,441,384 samples, 0.11%)</title><rect x="35.1999%" y="69" width="0.1051%" height="15" fill="rgb(250,213,24)"/><text x="35.4499%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,645,774 samples, 0.11%)</title><rect x="35.3050%" y="69" width="0.1139%" height="15" fill="rgb(247,123,22)"/><text x="35.5550%" y="79.50"></text></g><g><title>optimized_mir (8,237,385 samples, 0.35%)</title><rect x="35.0669%" y="85" width="0.3545%" height="15" fill="rgb(231,138,38)"/><text x="35.3169%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (3,337,338 samples, 0.14%)</title><rect x="35.4842%" y="69" width="0.1436%" height="15" fill="rgb(231,145,46)"/><text x="35.7342%" y="79.50"></text></g><g><title>specialization_graph_of (2,833,620 samples, 0.12%)</title><rect x="35.6893%" y="69" width="0.1220%" height="15" fill="rgb(251,118,11)"/><text x="35.9393%" y="79.50"></text></g><g><title>resolve_instance (9,456,048 samples, 0.41%)</title><rect x="35.4214%" y="85" width="0.4070%" height="15" fill="rgb(217,147,25)"/><text x="35.6714%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (27,081,440 samples, 1.17%)</title><rect x="34.7580%" y="101" width="1.1656%" height="15" fill="rgb(247,81,37)"/><text x="35.0080%" y="111.50"></text></g><g><title>monomorphization_collector (27,299,882 samples, 1.18%)</title><rect x="34.7578%" y="117" width="1.1750%" height="15" fill="rgb(209,12,38)"/><text x="35.0078%" y="127.50"></text></g><g><title>assert_symbols_are_distinct (3,317,487 samples, 0.14%)</title><rect x="35.9330%" y="101" width="0.1428%" height="15" fill="rgb(227,1,9)"/><text x="36.1830%" y="111.50"></text></g><g><title>symbol_name (2,991,663 samples, 0.13%)</title><rect x="35.9471%" y="85" width="0.1288%" height="15" fill="rgb(248,47,43)"/><text x="36.1971%" y="95.50"></text></g><g><title>collect_and_partition_mono_items (31,802,022 samples, 1.37%)</title><rect x="34.7560%" y="133" width="1.3688%" height="15" fill="rgb(221,10,30)"/><text x="35.0060%" y="143.50"></text></g><g><title>partition_and_assert_distinct_symbols (4,458,600 samples, 0.19%)</title><rect x="35.9329%" y="117" width="0.1919%" height="15" fill="rgb(210,229,1)"/><text x="36.1829%" y="127.50"></text></g><g><title>codegen_crate (114,892,662 samples, 4.95%)</title><rect x="31.1828%" y="149" width="4.9451%" height="15" fill="rgb(222,148,37)"/><text x="31.4328%" y="159.50">codege..</text></g><g><title>codegen_module_optimize (534,936,124 samples, 23.02%)</title><rect x="36.1279%" y="149" width="23.0241%" height="15" fill="rgb(234,67,33)"/><text x="36.3779%" y="159.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (507,250,317 samples, 21.83%)</title><rect x="37.3195%" y="133" width="21.8325%" height="15" fill="rgb(247,98,35)"/><text x="37.5695%" y="143.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (198,729,038 samples, 8.55%)</title><rect x="59.9111%" y="133" width="8.5535%" height="15" fill="rgb(247,138,52)"/><text x="60.1611%" y="143.50">LLVM_lto_opt..</text></g><g><title>LLVM_module_codegen (285,000,782 samples, 12.27%)</title><rect x="68.4646%" y="133" width="12.2667%" height="15" fill="rgb(213,79,30)"/><text x="68.7146%" y="143.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (282,232,412 samples, 12.15%)</title><rect x="68.5837%" y="117" width="12.1475%" height="15" fill="rgb(246,177,23)"/><text x="68.8337%" y="127.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (24,919,745 samples, 1.07%)</title><rect x="80.7313%" y="133" width="1.0726%" height="15" fill="rgb(230,62,27)"/><text x="80.9813%" y="143.50"></text></g><g><title>codegen_module_perform_lto (527,931,690 samples, 22.72%)</title><rect x="59.1521%" y="149" width="22.7227%" height="15" fill="rgb(216,154,8)"/><text x="59.4021%" y="159.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,470,187 samples, 0.11%)</title><rect x="84.2508%" y="101" width="0.1063%" height="15" fill="rgb(244,35,45)"/><text x="84.5008%" y="111.50"></text></g><g><title>macro_expand_crate (58,230,535 samples, 2.51%)</title><rect x="81.9227%" y="133" width="2.5063%" height="15" fill="rgb(251,115,12)"/><text x="82.1727%" y="143.50">ma..</text></g><g><title>expand_crate (58,216,475 samples, 2.51%)</title><rect x="81.9233%" y="117" width="2.5057%" height="15" fill="rgb(240,54,50)"/><text x="82.1733%" y="127.50">ex..</text></g><g><title>late_resolve_crate (7,961,778 samples, 0.34%)</title><rect x="84.4578%" y="117" width="0.3427%" height="15" fill="rgb(233,84,52)"/><text x="84.7078%" y="127.50"></text></g><g><title>configure_and_expand (68,637,209 samples, 2.95%)</title><rect x="81.8747%" y="149" width="2.9542%" height="15" fill="rgb(207,117,47)"/><text x="82.1247%" y="159.50">con..</text></g><g><title>resolve_crate (9,202,432 samples, 0.40%)</title><rect x="84.4328%" y="133" width="0.3961%" height="15" fill="rgb(249,43,39)"/><text x="84.6828%" y="143.50"></text></g><g><title>free_global_ctxt (12,504,459 samples, 0.54%)</title><rect x="84.9655%" y="149" width="0.5382%" height="15" fill="rgb(209,38,44)"/><text x="85.2155%" y="159.50"></text></g><g><title>layout_of (2,343,393 samples, 0.10%)</title><rect x="86.8540%" y="117" width="0.1009%" height="15" fill="rgb(236,212,23)"/><text x="87.1040%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (21,050,145 samples, 0.91%)</title><rect x="86.9549%" y="117" width="0.9060%" height="15" fill="rgb(242,79,21)"/><text x="87.2049%" y="127.50"></text></g><g><title>optimized_mir (43,678,625 samples, 1.88%)</title><rect x="86.0037%" y="133" width="1.8800%" height="15" fill="rgb(211,96,35)"/><text x="86.2537%" y="143.50">o..</text></g><g><title>generate_crate_metadata (55,801,488 samples, 2.40%)</title><rect x="85.5037%" y="149" width="2.4017%" height="15" fill="rgb(253,215,40)"/><text x="85.7537%" y="159.50">ge..</text></g><g><title>hir_lowering (17,640,376 samples, 0.76%)</title><rect x="87.9054%" y="149" width="0.7593%" height="15" fill="rgb(211,81,21)"/><text x="88.1554%" y="159.50"></text></g><g><title>finish_ongoing_codegen (253,748,350 samples, 10.92%)</title><rect x="88.6656%" y="133" width="10.9216%" height="15" fill="rgb(208,190,38)"/><text x="88.9156%" y="143.50">finish_ongoing_c..</text></g><g><title>link_crate (3,136,704 samples, 0.14%)</title><rect x="99.5872%" y="133" width="0.1350%" height="15" fill="rgb(235,213,38)"/><text x="99.8372%" y="143.50"></text></g><g><title>link_binary (3,006,403 samples, 0.13%)</title><rect x="99.5928%" y="117" width="0.1294%" height="15" fill="rgb(237,122,38)"/><text x="99.8428%" y="127.50"></text></g><g><title>link (256,918,455 samples, 11.06%)</title><rect x="88.6647%" y="149" width="11.0580%" height="15" fill="rgb(244,218,35)"/><text x="88.9147%" y="159.50">link</text></g><g><title>self_profile_alloc_query_strings (4,478,480 samples, 0.19%)</title><rect x="99.7624%" y="149" width="0.1928%" height="15" fill="rgb(240,68,47)"/><text x="100.0124%" y="159.50"></text></g><g><title>all (2,323,371,124 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(210,16,53)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (2,323,371,124 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="175.50">rustc</text></g></svg></svg>