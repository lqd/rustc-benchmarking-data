<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (475,382,589 samples, 20.04%)</title><rect x="0.0314%" y="213" width="20.0436%" height="15" fill="rgb(227,0,7)"/><text x="0.2814%" y="223.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,629,350 samples, 0.11%)</title><rect x="22.4279%" y="101" width="0.1109%" height="15" fill="rgb(217,0,24)"/><text x="22.6779%" y="111.50"></text></g><g><title>thir_body (3,836,928 samples, 0.16%)</title><rect x="22.5866%" y="101" width="0.1618%" height="15" fill="rgb(221,193,54)"/><text x="22.8366%" y="111.50"></text></g><g><title>mir_const (22,952,934 samples, 0.97%)</title><rect x="21.7825%" y="149" width="0.9678%" height="15" fill="rgb(248,212,6)"/><text x="22.0325%" y="159.50"></text></g><g><title>unsafety_check_result (20,101,751 samples, 0.85%)</title><rect x="21.9028%" y="133" width="0.8476%" height="15" fill="rgb(208,68,35)"/><text x="22.1528%" y="143.50"></text></g><g><title>mir_built (18,109,548 samples, 0.76%)</title><rect x="21.9868%" y="117" width="0.7636%" height="15" fill="rgb(232,128,0)"/><text x="22.2368%" y="127.50"></text></g><g><title>mir_promoted (25,144,182 samples, 1.06%)</title><rect x="21.6950%" y="165" width="1.0602%" height="15" fill="rgb(207,160,47)"/><text x="21.9450%" y="175.50"></text></g><g><title>type_op_prove_predicate (5,129,645 samples, 0.22%)</title><rect x="22.8488%" y="165" width="0.2163%" height="15" fill="rgb(228,23,34)"/><text x="23.0988%" y="175.50"></text></g><g><title>MIR_borrow_checking (70,259,404 samples, 2.96%)</title><rect x="20.1029%" y="197" width="2.9624%" height="15" fill="rgb(218,30,26)"/><text x="20.3529%" y="207.50">MIR..</text></g><g><title>mir_borrowck (70,062,949 samples, 2.95%)</title><rect x="20.1112%" y="181" width="2.9541%" height="15" fill="rgb(220,122,19)"/><text x="20.3612%" y="191.50">mir..</text></g><g><title>misc_checking_2 (4,335,028 samples, 0.18%)</title><rect x="23.1697%" y="197" width="0.1828%" height="15" fill="rgb(250,228,42)"/><text x="23.4197%" y="207.50"></text></g><g><title>match_checking (2,762,631 samples, 0.12%)</title><rect x="23.2360%" y="181" width="0.1165%" height="15" fill="rgb(240,193,28)"/><text x="23.4860%" y="191.50"></text></g><g><title>check_match (2,706,370 samples, 0.11%)</title><rect x="23.2383%" y="165" width="0.1141%" height="15" fill="rgb(216,20,37)"/><text x="23.4883%" y="175.50"></text></g><g><title>lint_checking (3,703,802 samples, 0.16%)</title><rect x="23.4013%" y="181" width="0.1562%" height="15" fill="rgb(206,188,39)"/><text x="23.6513%" y="191.50"></text></g><g><title>privacy_checking_modules (2,554,158 samples, 0.11%)</title><rect x="23.5752%" y="181" width="0.1077%" height="15" fill="rgb(217,207,13)"/><text x="23.8252%" y="191.50"></text></g><g><title>check_mod_privacy (2,551,238 samples, 0.11%)</title><rect x="23.5753%" y="165" width="0.1076%" height="15" fill="rgb(231,73,38)"/><text x="23.8253%" y="175.50"></text></g><g><title>misc_checking_3 (7,870,558 samples, 0.33%)</title><rect x="23.3524%" y="197" width="0.3318%" height="15" fill="rgb(225,20,46)"/><text x="23.6024%" y="207.50"></text></g><g><title>coherent_trait (3,665,961 samples, 0.15%)</title><rect x="23.6885%" y="165" width="0.1546%" height="15" fill="rgb(210,31,41)"/><text x="23.9385%" y="175.50"></text></g><g><title>specialization_graph_of (3,530,840 samples, 0.15%)</title><rect x="23.6942%" y="149" width="0.1489%" height="15" fill="rgb(221,200,47)"/><text x="23.9442%" y="159.50"></text></g><g><title>coherence_checking (3,728,962 samples, 0.16%)</title><rect x="23.6879%" y="181" width="0.1572%" height="15" fill="rgb(226,26,5)"/><text x="23.9379%" y="191.50"></text></g><g><title>evaluate_obligation (11,808,097 samples, 0.50%)</title><rect x="25.0637%" y="133" width="0.4979%" height="15" fill="rgb(249,33,26)"/><text x="25.3137%" y="143.50"></text></g><g><title>evaluate_obligation (3,824,958 samples, 0.16%)</title><rect x="28.3252%" y="117" width="0.1613%" height="15" fill="rgb(235,183,28)"/><text x="28.5752%" y="127.50"></text></g><g><title>typeck (69,849,090 samples, 2.95%)</title><rect x="25.6288%" y="133" width="2.9451%" height="15" fill="rgb(221,5,38)"/><text x="25.8788%" y="143.50">ty..</text></g><g><title>item_bodies_checking (112,156,797 samples, 4.73%)</title><rect x="23.8463%" y="181" width="4.7289%" height="15" fill="rgb(247,18,42)"/><text x="24.0963%" y="191.50">item_b..</text></g><g><title>typeck_item_bodies (112,152,607 samples, 4.73%)</title><rect x="23.8465%" y="165" width="4.7287%" height="15" fill="rgb(241,131,45)"/><text x="24.0965%" y="175.50">typeck..</text></g><g><title>typeck (112,048,845 samples, 4.72%)</title><rect x="23.8508%" y="149" width="4.7243%" height="15" fill="rgb(249,31,29)"/><text x="24.1008%" y="159.50">typeck</text></g><g><title>mir_borrowck (2,469,358 samples, 0.10%)</title><rect x="28.6928%" y="101" width="0.1041%" height="15" fill="rgb(225,111,53)"/><text x="28.9428%" y="111.50"></text></g><g><title>mir_borrowck (4,089,486 samples, 0.17%)</title><rect x="28.6575%" y="117" width="0.1724%" height="15" fill="rgb(238,160,17)"/><text x="28.9075%" y="127.50"></text></g><g><title>evaluate_obligation (2,433,339 samples, 0.10%)</title><rect x="29.1729%" y="37" width="0.1026%" height="15" fill="rgb(214,148,48)"/><text x="29.4229%" y="47.50"></text></g><g><title>mir_built (11,768,332 samples, 0.50%)</title><rect x="28.8443%" y="69" width="0.4962%" height="15" fill="rgb(232,36,49)"/><text x="29.0943%" y="79.50"></text></g><g><title>typeck (11,382,308 samples, 0.48%)</title><rect x="28.8605%" y="53" width="0.4799%" height="15" fill="rgb(209,103,24)"/><text x="29.1105%" y="63.50"></text></g><g><title>mir_const (13,099,548 samples, 0.55%)</title><rect x="28.8336%" y="101" width="0.5523%" height="15" fill="rgb(229,88,8)"/><text x="29.0836%" y="111.50"></text></g><g><title>unsafety_check_result (12,953,946 samples, 0.55%)</title><rect x="28.8397%" y="85" width="0.5462%" height="15" fill="rgb(213,181,19)"/><text x="29.0897%" y="95.50"></text></g><g><title>mir_promoted (13,192,239 samples, 0.56%)</title><rect x="28.8299%" y="117" width="0.5562%" height="15" fill="rgb(254,191,54)"/><text x="29.0799%" y="127.50"></text></g><g><title>type_of (19,537,991 samples, 0.82%)</title><rect x="28.6036%" y="149" width="0.8238%" height="15" fill="rgb(241,83,37)"/><text x="28.8536%" y="159.50"></text></g><g><title>mir_borrowck (19,533,811 samples, 0.82%)</title><rect x="28.6037%" y="133" width="0.8236%" height="15" fill="rgb(233,36,39)"/><text x="28.8537%" y="143.50"></text></g><g><title>item_types_checking (20,322,620 samples, 0.86%)</title><rect x="28.5752%" y="181" width="0.8569%" height="15" fill="rgb(226,3,54)"/><text x="28.8252%" y="191.50"></text></g><g><title>check_mod_item_types (20,317,140 samples, 0.86%)</title><rect x="28.5754%" y="165" width="0.8566%" height="15" fill="rgb(245,192,40)"/><text x="28.8254%" y="175.50"></text></g><g><title>type_collecting (3,204,347 samples, 0.14%)</title><rect x="29.4321%" y="181" width="0.1351%" height="15" fill="rgb(238,167,29)"/><text x="29.6821%" y="191.50"></text></g><g><title>collect_mod_item_types (3,194,766 samples, 0.13%)</title><rect x="29.4325%" y="165" width="0.1347%" height="15" fill="rgb(232,182,51)"/><text x="29.6825%" y="175.50"></text></g><g><title>check_impl_item_well_formed (4,029,374 samples, 0.17%)</title><rect x="29.5782%" y="165" width="0.1699%" height="15" fill="rgb(231,60,39)"/><text x="29.8282%" y="175.50"></text></g><g><title>analysis (231,179,680 samples, 9.75%)</title><rect x="20.0751%" y="213" width="9.7473%" height="15" fill="rgb(208,69,12)"/><text x="20.3251%" y="223.50">analysis</text></g><g><title>type_check_crate (145,578,445 samples, 6.14%)</title><rect x="23.6843%" y="197" width="6.1380%" height="15" fill="rgb(235,93,37)"/><text x="23.9343%" y="207.50">type_che..</text></g><g><title>wf_checking (6,041,818 samples, 0.25%)</title><rect x="29.5676%" y="181" width="0.2547%" height="15" fill="rgb(213,116,39)"/><text x="29.8176%" y="191.50"></text></g><g><title>const_caller_location (2,595,372 samples, 0.11%)</title><rect x="33.1701%" y="181" width="0.1094%" height="15" fill="rgb(222,207,29)"/><text x="33.4201%" y="191.50"></text></g><g><title>param_env (4,760,720 samples, 0.20%)</title><rect x="33.6911%" y="165" width="0.2007%" height="15" fill="rgb(206,96,30)"/><text x="33.9411%" y="175.50"></text></g><g><title>fn_abi_of_instance (15,791,791 samples, 0.67%)</title><rect x="33.2807%" y="181" width="0.6658%" height="15" fill="rgb(218,138,4)"/><text x="33.5307%" y="191.50"></text></g><g><title>codegen_module (98,657,535 samples, 4.16%)</title><rect x="29.8943%" y="197" width="4.1597%" height="15" fill="rgb(250,191,14)"/><text x="30.1443%" y="207.50">codeg..</text></g><g><title>metadata_decode_entry_optimized_mir (3,229,867 samples, 0.14%)</title><rect x="34.7363%" y="133" width="0.1362%" height="15" fill="rgb(239,60,40)"/><text x="34.9863%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,647,900 samples, 0.36%)</title><rect x="34.8725%" y="133" width="0.3646%" height="15" fill="rgb(206,27,48)"/><text x="35.1225%" y="143.50"></text></g><g><title>optimized_mir (20,290,848 samples, 0.86%)</title><rect x="34.3942%" y="149" width="0.8555%" height="15" fill="rgb(225,35,8)"/><text x="34.6442%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (5,723,820 samples, 0.24%)</title><rect x="35.3410%" y="133" width="0.2413%" height="15" fill="rgb(250,213,24)"/><text x="35.5910%" y="143.50"></text></g><g><title>resolve_instance (12,403,134 samples, 0.52%)</title><rect x="35.2497%" y="149" width="0.5230%" height="15" fill="rgb(247,123,22)"/><text x="35.4997%" y="159.50"></text></g><g><title>monomorphization_collector_graph_walk (42,980,636 samples, 1.81%)</title><rect x="34.0569%" y="165" width="1.8122%" height="15" fill="rgb(231,138,38)"/><text x="34.3069%" y="175.50">m..</text></g><g><title>monomorphization_collector (43,046,217 samples, 1.81%)</title><rect x="34.0568%" y="181" width="1.8150%" height="15" fill="rgb(231,145,46)"/><text x="34.3068%" y="191.50">m..</text></g><g><title>assert_symbols_are_distinct (3,573,590 samples, 0.15%)</title><rect x="35.8720%" y="165" width="0.1507%" height="15" fill="rgb(251,118,11)"/><text x="36.1220%" y="175.50"></text></g><g><title>symbol_name (3,238,157 samples, 0.14%)</title><rect x="35.8861%" y="149" width="0.1365%" height="15" fill="rgb(217,147,25)"/><text x="36.1361%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (47,869,091 samples, 2.02%)</title><rect x="34.0544%" y="197" width="2.0183%" height="15" fill="rgb(247,81,37)"/><text x="34.3044%" y="207.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (4,766,134 samples, 0.20%)</title><rect x="35.8718%" y="181" width="0.2010%" height="15" fill="rgb(209,12,38)"/><text x="36.1218%" y="191.50"></text></g><g><title>codegen_crate (148,245,865 samples, 6.25%)</title><rect x="29.8229%" y="213" width="6.2505%" height="15" fill="rgb(227,1,9)"/><text x="30.0729%" y="223.50">codegen_..</text></g><g><title>LLVM_module_codegen (35,149,806 samples, 1.48%)</title><rect x="36.0888%" y="197" width="1.4820%" height="15" fill="rgb(248,47,43)"/><text x="36.3388%" y="207.50"></text></g><g><title>LLVM_module_codegen_make_bitcode (28,259,770 samples, 1.19%)</title><rect x="36.3793%" y="181" width="1.1915%" height="15" fill="rgb(221,10,30)"/><text x="36.6293%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_bitcode (3,109,357 samples, 0.13%)</title><rect x="37.4397%" y="165" width="0.1311%" height="15" fill="rgb(210,229,1)"/><text x="37.6897%" y="175.50"></text></g><g><title>codegen_module_optimize (1,030,295,704 samples, 43.44%)</title><rect x="36.0734%" y="213" width="43.4405%" height="15" fill="rgb(222,148,37)"/><text x="36.3234%" y="223.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (994,779,604 samples, 41.94%)</title><rect x="37.5708%" y="197" width="41.9431%" height="15" fill="rgb(234,67,33)"/><text x="37.8208%" y="207.50">LLVM_module_optimize</text></g><g><title>macro_expand_crate (33,479,858 samples, 1.41%)</title><rect x="79.5459%" y="197" width="1.4116%" height="15" fill="rgb(247,98,35)"/><text x="79.7959%" y="207.50"></text></g><g><title>expand_crate (33,448,248 samples, 1.41%)</title><rect x="79.5473%" y="181" width="1.4103%" height="15" fill="rgb(247,138,52)"/><text x="79.7973%" y="191.50"></text></g><g><title>late_resolve_crate (4,364,728 samples, 0.18%)</title><rect x="80.9776%" y="181" width="0.1840%" height="15" fill="rgb(213,79,30)"/><text x="81.2276%" y="191.50"></text></g><g><title>configure_and_expand (39,291,803 samples, 1.66%)</title><rect x="79.5139%" y="213" width="1.6567%" height="15" fill="rgb(246,177,23)"/><text x="79.7639%" y="223.50"></text></g><g><title>resolve_crate (4,804,874 samples, 0.20%)</title><rect x="80.9680%" y="197" width="0.2026%" height="15" fill="rgb(230,62,27)"/><text x="81.2180%" y="207.50"></text></g><g><title>free_global_ctxt (9,875,191 samples, 0.42%)</title><rect x="81.2187%" y="213" width="0.4164%" height="15" fill="rgb(216,154,8)"/><text x="81.4687%" y="223.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (4,070,202 samples, 0.17%)</title><rect x="81.9371%" y="181" width="0.1716%" height="15" fill="rgb(244,35,45)"/><text x="82.1871%" y="191.50"></text></g><g><title>optimized_mir (9,121,272 samples, 0.38%)</title><rect x="81.7309%" y="197" width="0.3846%" height="15" fill="rgb(251,115,12)"/><text x="81.9809%" y="207.50"></text></g><g><title>generate_crate_metadata (11,472,949 samples, 0.48%)</title><rect x="81.6351%" y="213" width="0.4837%" height="15" fill="rgb(240,54,50)"/><text x="81.8851%" y="223.50"></text></g><g><title>hir_lowering (6,216,010 samples, 0.26%)</title><rect x="82.1188%" y="213" width="0.2621%" height="15" fill="rgb(233,84,52)"/><text x="82.3688%" y="223.50"></text></g><g><title>finish_ongoing_codegen (405,213,546 samples, 17.09%)</title><rect x="82.3816%" y="197" width="17.0851%" height="15" fill="rgb(207,117,47)"/><text x="82.6316%" y="207.50">finish_ongoing_codegen</text></g><g><title>link_crate (5,156,748 samples, 0.22%)</title><rect x="99.4667%" y="197" width="0.2174%" height="15" fill="rgb(249,43,39)"/><text x="99.7167%" y="207.50"></text></g><g><title>link_binary (5,143,508 samples, 0.22%)</title><rect x="99.4672%" y="181" width="0.2169%" height="15" fill="rgb(209,38,44)"/><text x="99.7172%" y="191.50"></text></g><g><title>link_rlib (4,628,563 samples, 0.20%)</title><rect x="99.4889%" y="165" width="0.1952%" height="15" fill="rgb(236,212,23)"/><text x="99.7389%" y="175.50"></text></g><g><title>link (410,395,715 samples, 17.30%)</title><rect x="82.3809%" y="213" width="17.3036%" height="15" fill="rgb(242,79,21)"/><text x="82.6309%" y="223.50">link</text></g><g><title>parse_crate (3,440,159 samples, 0.15%)</title><rect x="99.6845%" y="213" width="0.1450%" height="15" fill="rgb(211,96,35)"/><text x="99.9345%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (3,308,178 samples, 0.14%)</title><rect x="99.8386%" y="213" width="0.1395%" height="15" fill="rgb(253,215,40)"/><text x="100.0886%" y="223.50"></text></g><g><title>all (2,371,737,805 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(211,81,21)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (2,371,737,805 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="239.50">rustc</text></g></svg></svg>