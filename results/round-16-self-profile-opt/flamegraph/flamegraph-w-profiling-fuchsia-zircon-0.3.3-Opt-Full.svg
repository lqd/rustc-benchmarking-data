<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (207,772,034 samples, 8.48%)</title><rect x="0.0540%" y="165" width="8.4821%" height="15" fill="rgb(227,0,7)"/><text x="0.3040%" y="175.50">LLVM_passes</text></g><g><title>thir_body (7,076,118 samples, 0.29%)</title><rect x="13.4519%" y="53" width="0.2889%" height="15" fill="rgb(217,0,24)"/><text x="13.7019%" y="63.50"></text></g><g><title>mir_const (39,963,954 samples, 1.63%)</title><rect x="12.1148%" y="101" width="1.6315%" height="15" fill="rgb(221,193,54)"/><text x="12.3648%" y="111.50"></text></g><g><title>unsafety_check_result (33,703,567 samples, 1.38%)</title><rect x="12.3704%" y="85" width="1.3759%" height="15" fill="rgb(248,212,6)"/><text x="12.6204%" y="95.50"></text></g><g><title>mir_built (30,594,493 samples, 1.25%)</title><rect x="12.4973%" y="69" width="1.2490%" height="15" fill="rgb(208,68,35)"/><text x="12.7473%" y="79.50"></text></g><g><title>mir_const (7,083,001 samples, 0.29%)</title><rect x="13.8383%" y="85" width="0.2892%" height="15" fill="rgb(232,128,0)"/><text x="14.0883%" y="95.50"></text></g><g><title>unsafety_check_result (5,193,004 samples, 0.21%)</title><rect x="13.9154%" y="69" width="0.2120%" height="15" fill="rgb(207,160,47)"/><text x="14.1654%" y="79.50"></text></g><g><title>mir_built (4,571,789 samples, 0.19%)</title><rect x="13.9408%" y="53" width="0.1866%" height="15" fill="rgb(228,23,34)"/><text x="14.1908%" y="63.50"></text></g><g><title>mir_promoted (55,543,712 samples, 2.27%)</title><rect x="11.8638%" y="117" width="2.2675%" height="15" fill="rgb(218,30,26)"/><text x="12.1138%" y="127.50">m..</text></g><g><title>mir_const_qualif (9,430,306 samples, 0.38%)</title><rect x="13.7463%" y="101" width="0.3850%" height="15" fill="rgb(220,122,19)"/><text x="13.9963%" y="111.50"></text></g><g><title>type_op_prove_predicate (4,161,062 samples, 0.17%)</title><rect x="14.2383%" y="117" width="0.1699%" height="15" fill="rgb(250,228,42)"/><text x="14.4883%" y="127.50"></text></g><g><title>MIR_borrow_checking (142,235,814 samples, 5.81%)</title><rect x="8.6019%" y="149" width="5.8067%" height="15" fill="rgb(240,193,28)"/><text x="8.8519%" y="159.50">MIR_bor..</text></g><g><title>mir_borrowck (140,805,518 samples, 5.75%)</title><rect x="8.6603%" y="133" width="5.7483%" height="15" fill="rgb(216,20,37)"/><text x="8.9103%" y="143.50">mir_bor..</text></g><g><title>MIR_effect_checking (4,061,304 samples, 0.17%)</title><rect x="14.4086%" y="149" width="0.1658%" height="15" fill="rgb(206,188,39)"/><text x="14.6586%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (3,382,768 samples, 0.14%)</title><rect x="14.4363%" y="133" width="0.1381%" height="15" fill="rgb(217,207,13)"/><text x="14.6863%" y="143.50"></text></g><g><title>check_mod_attrs (3,712,139 samples, 0.15%)</title><rect x="14.6357%" y="133" width="0.1515%" height="15" fill="rgb(231,73,38)"/><text x="14.8857%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (3,190,615 samples, 0.13%)</title><rect x="14.8418%" y="133" width="0.1303%" height="15" fill="rgb(225,20,46)"/><text x="15.0918%" y="143.50"></text></g><g><title>misc_checking_1 (8,504,865 samples, 0.35%)</title><rect x="14.6332%" y="149" width="0.3472%" height="15" fill="rgb(210,31,41)"/><text x="14.8832%" y="159.50"></text></g><g><title>liveness_and_intrinsic_checking (3,171,665 samples, 0.13%)</title><rect x="14.9806%" y="133" width="0.1295%" height="15" fill="rgb(221,200,47)"/><text x="15.2306%" y="143.50"></text></g><g><title>check_mod_liveness (2,548,437 samples, 0.10%)</title><rect x="15.0060%" y="117" width="0.1040%" height="15" fill="rgb(226,26,5)"/><text x="15.2560%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (2,938,794 samples, 0.12%)</title><rect x="15.3581%" y="37" width="0.1200%" height="15" fill="rgb(249,33,26)"/><text x="15.6081%" y="47.50"></text></g><g><title>mir_for_ctfe (4,662,231 samples, 0.19%)</title><rect x="15.3242%" y="53" width="0.1903%" height="15" fill="rgb(235,183,28)"/><text x="15.5742%" y="63.50"></text></g><g><title>eval_to_const_value_raw (5,225,784 samples, 0.21%)</title><rect x="15.3036%" y="101" width="0.2133%" height="15" fill="rgb(221,5,38)"/><text x="15.5536%" y="111.50"></text></g><g><title>eval_to_const_value_raw (5,190,563 samples, 0.21%)</title><rect x="15.3050%" y="85" width="0.2119%" height="15" fill="rgb(247,18,42)"/><text x="15.5550%" y="95.50"></text></g><g><title>eval_to_allocation_raw (5,147,473 samples, 0.21%)</title><rect x="15.3068%" y="69" width="0.2101%" height="15" fill="rgb(241,131,45)"/><text x="15.5568%" y="79.50"></text></g><g><title>misc_checking_2 (14,529,670 samples, 0.59%)</title><rect x="14.9804%" y="149" width="0.5932%" height="15" fill="rgb(249,31,29)"/><text x="15.2304%" y="159.50"></text></g><g><title>match_checking (11,355,125 samples, 0.46%)</title><rect x="15.1100%" y="133" width="0.4636%" height="15" fill="rgb(225,111,53)"/><text x="15.3600%" y="143.50"></text></g><g><title>check_match (10,951,282 samples, 0.45%)</title><rect x="15.1265%" y="117" width="0.4471%" height="15" fill="rgb(238,160,17)"/><text x="15.3765%" y="127.50"></text></g><g><title>death_checking (2,747,780 samples, 0.11%)</title><rect x="15.6285%" y="133" width="0.1122%" height="15" fill="rgb(214,148,48)"/><text x="15.8785%" y="143.50"></text></g><g><title>crate_lints (5,222,207 samples, 0.21%)</title><rect x="15.7408%" y="117" width="0.2132%" height="15" fill="rgb(232,36,49)"/><text x="15.9908%" y="127.50"></text></g><g><title>lint_checking (8,413,012 samples, 0.34%)</title><rect x="15.7407%" y="133" width="0.3435%" height="15" fill="rgb(209,103,24)"/><text x="15.9907%" y="143.50"></text></g><g><title>module_lints (3,188,165 samples, 0.13%)</title><rect x="15.9540%" y="117" width="0.1302%" height="15" fill="rgb(229,88,8)"/><text x="16.2040%" y="127.50"></text></g><g><title>lint_mod (3,170,714 samples, 0.13%)</title><rect x="15.9547%" y="101" width="0.1294%" height="15" fill="rgb(213,181,19)"/><text x="16.2047%" y="111.50"></text></g><g><title>privacy_checking_modules (5,119,597 samples, 0.21%)</title><rect x="16.1676%" y="133" width="0.2090%" height="15" fill="rgb(254,191,54)"/><text x="16.4176%" y="143.50"></text></g><g><title>check_mod_privacy (5,107,417 samples, 0.21%)</title><rect x="16.1681%" y="117" width="0.2085%" height="15" fill="rgb(241,83,37)"/><text x="16.4181%" y="127.50"></text></g><g><title>misc_checking_3 (19,737,187 samples, 0.81%)</title><rect x="15.5736%" y="149" width="0.8058%" height="15" fill="rgb(233,36,39)"/><text x="15.8236%" y="159.50"></text></g><g><title>impl_parent (3,817,849 samples, 0.16%)</title><rect x="16.7085%" y="85" width="0.1559%" height="15" fill="rgb(226,3,54)"/><text x="16.9585%" y="95.50"></text></g><g><title>impl_trait_ref (7,607,388 samples, 0.31%)</title><rect x="16.8643%" y="85" width="0.3106%" height="15" fill="rgb(245,192,40)"/><text x="17.1143%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (5,999,239 samples, 0.24%)</title><rect x="16.9300%" y="69" width="0.2449%" height="15" fill="rgb(238,167,29)"/><text x="17.1800%" y="79.50"></text></g><g><title>coherent_trait (20,364,093 samples, 0.83%)</title><rect x="16.4031%" y="117" width="0.8313%" height="15" fill="rgb(232,182,51)"/><text x="16.6531%" y="127.50"></text></g><g><title>specialization_graph_of (19,670,946 samples, 0.80%)</title><rect x="16.4313%" y="101" width="0.8031%" height="15" fill="rgb(231,60,39)"/><text x="16.6813%" y="111.50"></text></g><g><title>coherence_checking (20,875,389 samples, 0.85%)</title><rect x="16.4015%" y="133" width="0.8522%" height="15" fill="rgb(208,69,12)"/><text x="16.6515%" y="143.50"></text></g><g><title>evaluate_obligation (3,405,245 samples, 0.14%)</title><rect x="22.3724%" y="85" width="0.1390%" height="15" fill="rgb(235,93,37)"/><text x="22.6224%" y="95.50"></text></g><g><title>typeck (13,878,405 samples, 0.57%)</title><rect x="22.6345%" y="85" width="0.5666%" height="15" fill="rgb(213,116,39)"/><text x="22.8845%" y="95.50"></text></g><g><title>item_bodies_checking (145,574,051 samples, 5.94%)</title><rect x="17.2678%" y="133" width="5.9429%" height="15" fill="rgb(222,207,29)"/><text x="17.5178%" y="143.50">item_bod..</text></g><g><title>typeck_item_bodies (145,569,680 samples, 5.94%)</title><rect x="17.2680%" y="117" width="5.9428%" height="15" fill="rgb(206,96,30)"/><text x="17.5180%" y="127.50">typeck_i..</text></g><g><title>typeck (144,638,726 samples, 5.90%)</title><rect x="17.3060%" y="101" width="5.9048%" height="15" fill="rgb(218,138,4)"/><text x="17.5560%" y="111.50">typeck</text></g><g><title>item_types_checking (6,348,229 samples, 0.26%)</title><rect x="23.2108%" y="133" width="0.2592%" height="15" fill="rgb(250,191,14)"/><text x="23.4608%" y="143.50"></text></g><g><title>check_mod_item_types (6,329,379 samples, 0.26%)</title><rect x="23.2115%" y="117" width="0.2584%" height="15" fill="rgb(239,60,40)"/><text x="23.4615%" y="127.50"></text></g><g><title>generics_of (2,906,529 samples, 0.12%)</title><rect x="23.7303%" y="101" width="0.1187%" height="15" fill="rgb(206,27,48)"/><text x="23.9803%" y="111.50"></text></g><g><title>predicates_of (2,503,184 samples, 0.10%)</title><rect x="23.8712%" y="101" width="0.1022%" height="15" fill="rgb(225,35,8)"/><text x="24.1212%" y="111.50"></text></g><g><title>type_collecting (12,873,961 samples, 0.53%)</title><rect x="23.4703%" y="133" width="0.5256%" height="15" fill="rgb(250,213,24)"/><text x="23.7203%" y="143.50"></text></g><g><title>collect_mod_item_types (12,848,491 samples, 0.52%)</title><rect x="23.4713%" y="117" width="0.5245%" height="15" fill="rgb(247,123,22)"/><text x="23.7213%" y="127.50"></text></g><g><title>region_scope_tree (3,066,430 samples, 0.13%)</title><rect x="24.6412%" y="101" width="0.1252%" height="15" fill="rgb(231,138,38)"/><text x="24.8912%" y="111.50"></text></g><g><title>check_impl_item_well_formed (17,494,392 samples, 0.71%)</title><rect x="24.0559%" y="117" width="0.7142%" height="15" fill="rgb(231,145,46)"/><text x="24.3059%" y="127.50"></text></g><g><title>evaluate_obligation (2,543,026 samples, 0.10%)</title><rect x="24.9941%" y="101" width="0.1038%" height="15" fill="rgb(251,118,11)"/><text x="25.2441%" y="111.50"></text></g><g><title>check_item_well_formed (10,065,985 samples, 0.41%)</title><rect x="24.7701%" y="117" width="0.4109%" height="15" fill="rgb(217,147,25)"/><text x="25.0201%" y="127.50"></text></g><g><title>analysis (412,679,776 samples, 16.85%)</title><rect x="8.5362%" y="165" width="16.8473%" height="15" fill="rgb(247,81,37)"/><text x="8.7862%" y="175.50">analysis</text></g><g><title>type_check_crate (220,558,973 samples, 9.00%)</title><rect x="16.3794%" y="149" width="9.0041%" height="15" fill="rgb(209,12,38)"/><text x="16.6294%" y="159.50">type_check_cr..</text></g><g><title>wf_checking (33,923,733 samples, 1.38%)</title><rect x="23.9986%" y="133" width="1.3849%" height="15" fill="rgb(227,1,9)"/><text x="24.2486%" y="143.50"></text></g><g><title>check_trait_item_well_formed (4,960,026 samples, 0.20%)</title><rect x="25.1810%" y="117" width="0.2025%" height="15" fill="rgb(248,47,43)"/><text x="25.4310%" y="127.50"></text></g><g><title>param_env (3,391,520 samples, 0.14%)</title><rect x="28.5994%" y="117" width="0.1385%" height="15" fill="rgb(221,10,30)"/><text x="28.8494%" y="127.50"></text></g><g><title>fn_abi_of_instance (15,220,336 samples, 0.62%)</title><rect x="28.1479%" y="133" width="0.6214%" height="15" fill="rgb(210,229,1)"/><text x="28.3979%" y="143.50"></text></g><g><title>codegen_module (83,354,644 samples, 3.40%)</title><rect x="25.4563%" y="149" width="3.4029%" height="15" fill="rgb(222,148,37)"/><text x="25.7063%" y="159.50">cod..</text></g><g><title>mir_drops_elaborated_and_const_checked (12,636,142 samples, 0.52%)</title><rect x="29.7347%" y="85" width="0.5159%" height="15" fill="rgb(234,67,33)"/><text x="29.9847%" y="95.50"></text></g><g><title>optimized_mir (27,510,093 samples, 1.12%)</title><rect x="29.1449%" y="101" width="1.1231%" height="15" fill="rgb(247,98,35)"/><text x="29.3949%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (5,171,357 samples, 0.21%)</title><rect x="30.3253%" y="85" width="0.2111%" height="15" fill="rgb(247,138,52)"/><text x="30.5753%" y="95.50"></text></g><g><title>resolve_instance (9,580,630 samples, 0.39%)</title><rect x="30.2680%" y="101" width="0.3911%" height="15" fill="rgb(213,79,30)"/><text x="30.5180%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (46,019,365 samples, 1.88%)</title><rect x="28.8623%" y="117" width="1.8787%" height="15" fill="rgb(246,177,23)"/><text x="29.1123%" y="127.50">m..</text></g><g><title>monomorphization_collector (46,436,690 samples, 1.90%)</title><rect x="28.8622%" y="133" width="1.8957%" height="15" fill="rgb(230,62,27)"/><text x="29.1122%" y="143.50">m..</text></g><g><title>assert_symbols_are_distinct (2,751,410 samples, 0.11%)</title><rect x="30.7583%" y="117" width="0.1123%" height="15" fill="rgb(216,154,8)"/><text x="31.0083%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (50,541,175 samples, 2.06%)</title><rect x="28.8597%" y="149" width="2.0633%" height="15" fill="rgb(244,35,45)"/><text x="29.1097%" y="159.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (4,043,754 samples, 0.17%)</title><rect x="30.7579%" y="133" width="0.1651%" height="15" fill="rgb(251,115,12)"/><text x="31.0079%" y="143.50"></text></g><g><title>codegen_crate (135,756,362 samples, 5.54%)</title><rect x="25.3838%" y="165" width="5.5421%" height="15" fill="rgb(240,54,50)"/><text x="25.6338%" y="175.50">codegen..</text></g><g><title>codegen_module_optimize (683,312,749 samples, 27.90%)</title><rect x="30.9259%" y="165" width="27.8957%" height="15" fill="rgb(233,84,52)"/><text x="31.1759%" y="175.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (638,896,921 samples, 26.08%)</title><rect x="32.7391%" y="149" width="26.0825%" height="15" fill="rgb(207,117,47)"/><text x="32.9891%" y="159.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (312,924,556 samples, 12.77%)</title><rect x="59.6274%" y="149" width="12.7749%" height="15" fill="rgb(249,43,39)"/><text x="59.8774%" y="159.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (356,648,422 samples, 14.56%)</title><rect x="72.4023%" y="149" width="14.5599%" height="15" fill="rgb(209,38,44)"/><text x="72.6523%" y="159.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (353,991,570 samples, 14.45%)</title><rect x="72.5107%" y="133" width="14.4514%" height="15" fill="rgb(236,212,23)"/><text x="72.7607%" y="143.50">LLVM_module_codegen_em..</text></g><g><title>LLVM_thin_lto_import (49,058,696 samples, 2.00%)</title><rect x="86.9622%" y="149" width="2.0028%" height="15" fill="rgb(242,79,21)"/><text x="87.2122%" y="159.50">L..</text></g><g><title>codegen_module_perform_lto (740,426,065 samples, 30.23%)</title><rect x="58.8216%" y="165" width="30.2273%" height="15" fill="rgb(211,96,35)"/><text x="59.0716%" y="175.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (47,967,608 samples, 1.96%)</title><rect x="89.1048%" y="149" width="1.9582%" height="15" fill="rgb(253,215,40)"/><text x="89.3548%" y="159.50">m..</text></g><g><title>expand_crate (47,944,537 samples, 1.96%)</title><rect x="89.1058%" y="133" width="1.9573%" height="15" fill="rgb(211,81,21)"/><text x="89.3558%" y="143.50">e..</text></g><g><title>late_resolve_crate (8,877,119 samples, 0.36%)</title><rect x="91.1080%" y="133" width="0.3624%" height="15" fill="rgb(208,190,38)"/><text x="91.3580%" y="143.50"></text></g><g><title>configure_and_expand (60,028,552 samples, 2.45%)</title><rect x="89.0489%" y="165" width="2.4506%" height="15" fill="rgb(235,213,38)"/><text x="89.2989%" y="175.50">co..</text></g><g><title>resolve_crate (10,567,427 samples, 0.43%)</title><rect x="91.0681%" y="149" width="0.4314%" height="15" fill="rgb(237,122,38)"/><text x="91.3181%" y="159.50"></text></g><g><title>early_lint_checks (2,669,010 samples, 0.11%)</title><rect x="91.5568%" y="165" width="0.1090%" height="15" fill="rgb(244,218,35)"/><text x="91.8068%" y="175.50"></text></g><g><title>free_global_ctxt (14,447,269 samples, 0.59%)</title><rect x="91.6658%" y="165" width="0.5898%" height="15" fill="rgb(240,68,47)"/><text x="91.9158%" y="175.50"></text></g><g><title>mir_for_ctfe (4,295,617 samples, 0.18%)</title><rect x="92.7581%" y="149" width="0.1754%" height="15" fill="rgb(210,16,53)"/><text x="93.0081%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (10,002,293 samples, 0.41%)</title><rect x="93.5507%" y="133" width="0.4083%" height="15" fill="rgb(235,124,12)"/><text x="93.8007%" y="143.50"></text></g><g><title>mir_for_ctfe (3,138,423 samples, 0.13%)</title><rect x="94.0146%" y="69" width="0.1281%" height="15" fill="rgb(224,169,11)"/><text x="94.2646%" y="79.50"></text></g><g><title>eval_to_const_value_raw (4,210,227 samples, 0.17%)</title><rect x="93.9751%" y="117" width="0.1719%" height="15" fill="rgb(250,166,2)"/><text x="94.2251%" y="127.50"></text></g><g><title>eval_to_const_value_raw (4,161,136 samples, 0.17%)</title><rect x="93.9771%" y="101" width="0.1699%" height="15" fill="rgb(242,216,29)"/><text x="94.2271%" y="111.50"></text></g><g><title>eval_to_allocation_raw (4,076,115 samples, 0.17%)</title><rect x="93.9806%" y="85" width="0.1664%" height="15" fill="rgb(230,116,27)"/><text x="94.2306%" y="95.50"></text></g><g><title>optimized_mir (29,963,317 samples, 1.22%)</title><rect x="92.9392%" y="149" width="1.2232%" height="15" fill="rgb(228,99,48)"/><text x="93.1892%" y="159.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (4,792,233 samples, 0.20%)</title><rect x="93.9668%" y="133" width="0.1956%" height="15" fill="rgb(253,11,6)"/><text x="94.2168%" y="143.50"></text></g><g><title>generate_crate_metadata (47,222,310 samples, 1.93%)</title><rect x="92.2556%" y="165" width="1.9278%" height="15" fill="rgb(247,143,39)"/><text x="92.5056%" y="175.50">g..</text></g><g><title>hir_lowering (21,083,031 samples, 0.86%)</title><rect x="94.1834%" y="165" width="0.8607%" height="15" fill="rgb(236,97,10)"/><text x="94.4334%" y="175.50"></text></g><g><title>finish_ongoing_codegen (111,956,181 samples, 4.57%)</title><rect x="95.0450%" y="149" width="4.5705%" height="15" fill="rgb(233,208,19)"/><text x="95.2950%" y="159.50">finis..</text></g><g><title>link_crate (3,067,424 samples, 0.13%)</title><rect x="99.6155%" y="149" width="0.1252%" height="15" fill="rgb(216,164,2)"/><text x="99.8655%" y="159.50"></text></g><g><title>link_binary (2,948,672 samples, 0.12%)</title><rect x="99.6203%" y="133" width="0.1204%" height="15" fill="rgb(220,129,5)"/><text x="99.8703%" y="143.50"></text></g><g><title>link (115,054,415 samples, 4.70%)</title><rect x="95.0441%" y="165" width="4.6970%" height="15" fill="rgb(242,17,10)"/><text x="95.2941%" y="175.50">link</text></g><g><title>self_profile_alloc_query_strings (3,956,643 samples, 0.16%)</title><rect x="99.8022%" y="165" width="0.1615%" height="15" fill="rgb(242,107,0)"/><text x="100.0522%" y="175.50"></text></g><g><title>all (2,449,526,259 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (2,449,526,259 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(233,223,10)"/><text x="0.2500%" y="191.50">rustc</text></g></svg></svg>