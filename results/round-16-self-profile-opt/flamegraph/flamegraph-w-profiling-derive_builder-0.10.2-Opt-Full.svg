<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="246" onload="init(evt)" viewBox="0 0 1200 246" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="246" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="229.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="229.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (26,114,159 samples, 16.54%)</title><rect x="0.5186%" y="165" width="16.5353%" height="15" fill="rgb(227,0,7)"/><text x="0.7686%" y="175.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (311,763 samples, 0.20%)</title><rect x="16.8564%" y="149" width="0.1974%" height="15" fill="rgb(217,0,24)"/><text x="17.1064%" y="159.50"></text></g><g><title>LLVM_thin_lto_global_analysis (292,613 samples, 0.19%)</title><rect x="16.8686%" y="133" width="0.1853%" height="15" fill="rgb(221,193,54)"/><text x="17.1186%" y="143.50"></text></g><g><title>is_copy_raw (165,202 samples, 0.10%)</title><rect x="18.2883%" y="53" width="0.1046%" height="15" fill="rgb(248,212,6)"/><text x="18.5383%" y="63.50"></text></g><g><title>evaluate_obligation (161,532 samples, 0.10%)</title><rect x="18.2906%" y="37" width="0.1023%" height="15" fill="rgb(208,68,35)"/><text x="18.5406%" y="47.50"></text></g><g><title>needs_drop_raw (171,472 samples, 0.11%)</title><rect x="18.3929%" y="53" width="0.1086%" height="15" fill="rgb(232,128,0)"/><text x="18.6429%" y="63.50"></text></g><g><title>mir_const (947,238 samples, 0.60%)</title><rect x="17.9956%" y="101" width="0.5998%" height="15" fill="rgb(207,160,47)"/><text x="18.2456%" y="111.50"></text></g><g><title>unsafety_check_result (809,928 samples, 0.51%)</title><rect x="18.0826%" y="85" width="0.5128%" height="15" fill="rgb(228,23,34)"/><text x="18.3326%" y="95.50"></text></g><g><title>mir_built (722,376 samples, 0.46%)</title><rect x="18.1380%" y="69" width="0.4574%" height="15" fill="rgb(218,30,26)"/><text x="18.3880%" y="79.50"></text></g><g><title>mir_promoted (1,084,402 samples, 0.69%)</title><rect x="17.9137%" y="117" width="0.6866%" height="15" fill="rgb(220,122,19)"/><text x="18.1637%" y="127.50"></text></g><g><title>type_op_prove_predicate (237,723 samples, 0.15%)</title><rect x="18.6668%" y="117" width="0.1505%" height="15" fill="rgb(250,228,42)"/><text x="18.9168%" y="127.50"></text></g><g><title>MIR_borrow_checking (2,641,989 samples, 1.67%)</title><rect x="17.1467%" y="149" width="1.6729%" height="15" fill="rgb(240,193,28)"/><text x="17.3967%" y="159.50"></text></g><g><title>mir_borrowck (2,630,569 samples, 1.67%)</title><rect x="17.1539%" y="133" width="1.6657%" height="15" fill="rgb(216,20,37)"/><text x="17.4039%" y="143.50"></text></g><g><title>codegen_fn_attrs (199,602 samples, 0.13%)</title><rect x="19.0424%" y="85" width="0.1264%" height="15" fill="rgb(206,188,39)"/><text x="19.2924%" y="95.50"></text></g><g><title>codegen_fn_attrs (283,294 samples, 0.18%)</title><rect x="18.9908%" y="117" width="0.1794%" height="15" fill="rgb(217,207,13)"/><text x="19.2408%" y="127.50"></text></g><g><title>should_inherit_track_caller (250,633 samples, 0.16%)</title><rect x="19.0115%" y="101" width="0.1587%" height="15" fill="rgb(231,73,38)"/><text x="19.2615%" y="111.50"></text></g><g><title>check_mod_attrs (399,584 samples, 0.25%)</title><rect x="18.9173%" y="133" width="0.2530%" height="15" fill="rgb(225,20,46)"/><text x="19.1673%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (275,284 samples, 0.17%)</title><rect x="19.2094%" y="133" width="0.1743%" height="15" fill="rgb(210,31,41)"/><text x="19.4594%" y="143.50"></text></g><g><title>misc_checking_1 (812,929 samples, 0.51%)</title><rect x="18.8956%" y="149" width="0.5147%" height="15" fill="rgb(221,200,47)"/><text x="19.1456%" y="159.50"></text></g><g><title>crate_lints (1,798,870 samples, 1.14%)</title><rect x="19.6109%" y="117" width="1.1390%" height="15" fill="rgb(226,26,5)"/><text x="19.8609%" y="127.50"></text></g><g><title>type_of (1,031,042 samples, 0.65%)</title><rect x="20.0971%" y="101" width="0.6528%" height="15" fill="rgb(249,33,26)"/><text x="20.3471%" y="111.50"></text></g><g><title>metadata_decode_entry_type_of (794,239 samples, 0.50%)</title><rect x="20.2470%" y="85" width="0.5029%" height="15" fill="rgb(235,183,28)"/><text x="20.4970%" y="95.50"></text></g><g><title>lint_checking (1,888,891 samples, 1.20%)</title><rect x="19.6100%" y="133" width="1.1960%" height="15" fill="rgb(221,5,38)"/><text x="19.8600%" y="143.50"></text></g><g><title>misc_checking_3 (2,210,185 samples, 1.40%)</title><rect x="19.5053%" y="149" width="1.3995%" height="15" fill="rgb(247,18,42)"/><text x="19.7553%" y="159.50"></text></g><g><title>impl_parent (2,791,297 samples, 1.77%)</title><rect x="24.4621%" y="85" width="1.7674%" height="15" fill="rgb(241,131,45)"/><text x="24.7121%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (1,504,641 samples, 0.95%)</title><rect x="25.2768%" y="69" width="0.9527%" height="15" fill="rgb(249,31,29)"/><text x="25.5268%" y="79.50"></text></g><g><title>impl_trait_ref (8,260,259 samples, 5.23%)</title><rect x="26.2295%" y="85" width="5.2303%" height="15" fill="rgb(225,111,53)"/><text x="26.4795%" y="95.50">impl_t..</text></g><g><title>metadata_decode_entry_impl_trait_ref (6,932,977 samples, 4.39%)</title><rect x="27.0700%" y="69" width="4.3899%" height="15" fill="rgb(238,160,17)"/><text x="27.3200%" y="79.50">metad..</text></g><g><title>trait_impls_of (1,049,932 samples, 0.66%)</title><rect x="31.4856%" y="85" width="0.6648%" height="15" fill="rgb(214,148,48)"/><text x="31.7356%" y="95.50"></text></g><g><title>implementations_of_trait (255,371 samples, 0.16%)</title><rect x="31.9887%" y="69" width="0.1617%" height="15" fill="rgb(232,36,49)"/><text x="32.2387%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (209,221 samples, 0.13%)</title><rect x="32.0180%" y="53" width="0.1325%" height="15" fill="rgb(209,103,24)"/><text x="32.2680%" y="63.50"></text></g><g><title>coherent_trait (17,715,536 samples, 11.22%)</title><rect x="20.9341%" y="117" width="11.2173%" height="15" fill="rgb(229,88,8)"/><text x="21.1841%" y="127.50">coherent_trait</text></g><g><title>specialization_graph_of (17,694,956 samples, 11.20%)</title><rect x="20.9471%" y="101" width="11.2043%" height="15" fill="rgb(213,181,19)"/><text x="21.1971%" y="111.50">specialization_g..</text></g><g><title>coherence_checking (17,798,077 samples, 11.27%)</title><rect x="20.9185%" y="133" width="11.2696%" height="15" fill="rgb(254,191,54)"/><text x="21.1685%" y="143.50">coherence_checking</text></g><g><title>item_bodies_checking (2,559,489 samples, 1.62%)</title><rect x="32.2070%" y="133" width="1.6206%" height="15" fill="rgb(241,83,37)"/><text x="32.4570%" y="143.50"></text></g><g><title>typeck_item_bodies (2,557,679 samples, 1.62%)</title><rect x="32.2082%" y="117" width="1.6195%" height="15" fill="rgb(233,36,39)"/><text x="32.4582%" y="127.50"></text></g><g><title>typeck (2,548,648 samples, 1.61%)</title><rect x="32.2139%" y="101" width="1.6138%" height="15" fill="rgb(226,3,54)"/><text x="32.4639%" y="111.50"></text></g><g><title>adt_destructor (296,603 samples, 0.19%)</title><rect x="33.9201%" y="101" width="0.1878%" height="15" fill="rgb(245,192,40)"/><text x="34.1701%" y="111.50"></text></g><g><title>coherent_trait (293,573 samples, 0.19%)</title><rect x="33.9220%" y="85" width="0.1859%" height="15" fill="rgb(238,167,29)"/><text x="34.1720%" y="95.50"></text></g><g><title>specialization_graph_of (292,273 samples, 0.19%)</title><rect x="33.9229%" y="69" width="0.1851%" height="15" fill="rgb(232,182,51)"/><text x="34.1729%" y="79.50"></text></g><g><title>item_types_checking (503,915 samples, 0.32%)</title><rect x="33.8277%" y="133" width="0.3191%" height="15" fill="rgb(231,60,39)"/><text x="34.0777%" y="143.50"></text></g><g><title>check_mod_item_types (500,085 samples, 0.32%)</title><rect x="33.8301%" y="117" width="0.3166%" height="15" fill="rgb(208,69,12)"/><text x="34.0801%" y="127.50"></text></g><g><title>generics_of (197,843 samples, 0.13%)</title><rect x="34.2889%" y="101" width="0.1253%" height="15" fill="rgb(235,93,37)"/><text x="34.5389%" y="111.50"></text></g><g><title>predicates_of (197,012 samples, 0.12%)</title><rect x="34.4600%" y="101" width="0.1247%" height="15" fill="rgb(213,116,39)"/><text x="34.7100%" y="111.50"></text></g><g><title>predicates_defined_on (182,532 samples, 0.12%)</title><rect x="34.4691%" y="85" width="0.1156%" height="15" fill="rgb(222,207,29)"/><text x="34.7191%" y="95.50"></text></g><g><title>type_collecting (779,379 samples, 0.49%)</title><rect x="34.1473%" y="133" width="0.4935%" height="15" fill="rgb(206,96,30)"/><text x="34.3973%" y="143.50"></text></g><g><title>collect_mod_item_types (760,398 samples, 0.48%)</title><rect x="34.1593%" y="117" width="0.4815%" height="15" fill="rgb(218,138,4)"/><text x="34.4093%" y="127.50"></text></g><g><title>evaluate_obligation (161,991 samples, 0.10%)</title><rect x="34.8416%" y="101" width="0.1026%" height="15" fill="rgb(250,191,14)"/><text x="35.0916%" y="111.50"></text></g><g><title>check_impl_item_well_formed (614,085 samples, 0.39%)</title><rect x="34.6628%" y="117" width="0.3888%" height="15" fill="rgb(239,60,40)"/><text x="34.9128%" y="127.50"></text></g><g><title>analysis (28,962,120 samples, 18.34%)</title><rect x="17.0538%" y="165" width="18.3386%" height="15" fill="rgb(206,27,48)"/><text x="17.3038%" y="175.50">analysis</text></g><g><title>type_check_crate (22,880,343 samples, 14.49%)</title><rect x="20.9048%" y="149" width="14.4877%" height="15" fill="rgb(225,35,8)"/><text x="21.1548%" y="159.50">type_check_crate</text></g><g><title>wf_checking (1,186,193 samples, 0.75%)</title><rect x="34.6413%" y="133" width="0.7511%" height="15" fill="rgb(250,213,24)"/><text x="34.8913%" y="143.50"></text></g><g><title>check_item_well_formed (538,237 samples, 0.34%)</title><rect x="35.0516%" y="117" width="0.3408%" height="15" fill="rgb(247,123,22)"/><text x="35.3016%" y="127.50"></text></g><g><title>fn_abi_of_instance (787,820 samples, 0.50%)</title><rect x="36.7027%" y="133" width="0.4988%" height="15" fill="rgb(231,138,38)"/><text x="36.9527%" y="143.50"></text></g><g><title>codegen_module (2,591,058 samples, 1.64%)</title><rect x="35.7034%" y="149" width="1.6406%" height="15" fill="rgb(231,145,46)"/><text x="35.9534%" y="159.50"></text></g><g><title>layout_of (166,753 samples, 0.11%)</title><rect x="37.6813%" y="85" width="0.1056%" height="15" fill="rgb(251,118,11)"/><text x="37.9313%" y="95.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (162,611 samples, 0.10%)</title><rect x="37.8785%" y="85" width="0.1030%" height="15" fill="rgb(217,147,25)"/><text x="38.1285%" y="95.50"></text></g><g><title>optimized_mir (929,519 samples, 0.59%)</title><rect x="37.5227%" y="101" width="0.5886%" height="15" fill="rgb(247,81,37)"/><text x="37.7727%" y="111.50"></text></g><g><title>monomorphization_collector_graph_walk (1,445,996 samples, 0.92%)</title><rect x="37.3611%" y="117" width="0.9156%" height="15" fill="rgb(209,12,38)"/><text x="37.6111%" y="127.50"></text></g><g><title>monomorphization_collector (1,473,487 samples, 0.93%)</title><rect x="37.3599%" y="133" width="0.9330%" height="15" fill="rgb(227,1,9)"/><text x="37.6099%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (1,631,528 samples, 1.03%)</title><rect x="37.3444%" y="149" width="1.0331%" height="15" fill="rgb(248,47,43)"/><text x="37.5944%" y="159.50"></text></g><g><title>codegen_crate (4,768,323 samples, 3.02%)</title><rect x="35.3982%" y="165" width="3.0193%" height="15" fill="rgb(221,10,30)"/><text x="35.6482%" y="175.50">cod..</text></g><g><title>codegen_module_optimize (15,511,451 samples, 9.82%)</title><rect x="38.4174%" y="165" width="9.8217%" height="15" fill="rgb(210,229,1)"/><text x="38.6674%" y="175.50">codegen_module..</text></g><g><title>LLVM_module_optimize (13,548,630 samples, 8.58%)</title><rect x="39.6603%" y="149" width="8.5789%" height="15" fill="rgb(222,148,37)"/><text x="39.9103%" y="159.50">LLVM_module_..</text></g><g><title>LLVM_lto_optimize (7,291,930 samples, 4.62%)</title><rect x="49.1537%" y="149" width="4.6172%" height="15" fill="rgb(234,67,33)"/><text x="49.4037%" y="159.50">LLVM_..</text></g><g><title>LLVM_module_codegen (16,587,454 samples, 10.50%)</title><rect x="53.7709%" y="149" width="10.5030%" height="15" fill="rgb(247,98,35)"/><text x="54.0209%" y="159.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (16,334,300 samples, 10.34%)</title><rect x="53.9312%" y="133" width="10.3427%" height="15" fill="rgb(247,138,52)"/><text x="54.1812%" y="143.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (368,764 samples, 0.23%)</title><rect x="64.2740%" y="149" width="0.2335%" height="15" fill="rgb(213,79,30)"/><text x="64.5240%" y="159.50"></text></g><g><title>codegen_module_perform_lto (25,789,824 samples, 16.33%)</title><rect x="48.2392%" y="165" width="16.3299%" height="15" fill="rgb(246,177,23)"/><text x="48.4892%" y="175.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (14,096,346 samples, 8.93%)</title><rect x="71.4342%" y="117" width="8.9257%" height="15" fill="rgb(230,62,27)"/><text x="71.6842%" y="127.50">metadata_regi..</text></g><g><title>metadata_register_crate (848,501 samples, 0.54%)</title><rect x="79.8226%" y="101" width="0.5373%" height="15" fill="rgb(216,154,8)"/><text x="80.0726%" y="111.50"></text></g><g><title>macro_expand_crate (24,594,632 samples, 15.57%)</title><rect x="64.8080%" y="149" width="15.5731%" height="15" fill="rgb(244,35,45)"/><text x="65.0580%" y="159.50">macro_expand_crate</text></g><g><title>expand_crate (24,577,572 samples, 15.56%)</title><rect x="64.8188%" y="133" width="15.5623%" height="15" fill="rgb(251,115,12)"/><text x="65.0688%" y="143.50">expand_crate</text></g><g><title>late_resolve_crate (712,337 samples, 0.45%)</title><rect x="80.5092%" y="133" width="0.4510%" height="15" fill="rgb(240,54,50)"/><text x="80.7592%" y="143.50"></text></g><g><title>configure_and_expand (25,987,576 samples, 16.46%)</title><rect x="64.5691%" y="165" width="16.4551%" height="15" fill="rgb(233,84,52)"/><text x="64.8191%" y="175.50">configure_and_expand</text></g><g><title>resolve_crate (927,650 samples, 0.59%)</title><rect x="80.4368%" y="149" width="0.5874%" height="15" fill="rgb(207,117,47)"/><text x="80.6868%" y="159.50"></text></g><g><title>early_lint_checks (213,303 samples, 0.14%)</title><rect x="81.0759%" y="165" width="0.1351%" height="15" fill="rgb(249,43,39)"/><text x="81.3259%" y="175.50"></text></g><g><title>free_global_ctxt (2,753,080 samples, 1.74%)</title><rect x="81.2110%" y="165" width="1.7432%" height="15" fill="rgb(209,38,44)"/><text x="81.4610%" y="175.50"></text></g><g><title>optimized_mir (264,663 samples, 0.17%)</title><rect x="83.3252%" y="149" width="0.1676%" height="15" fill="rgb(236,212,23)"/><text x="83.5752%" y="159.50"></text></g><g><title>generate_crate_metadata (864,170 samples, 0.55%)</title><rect x="82.9542%" y="165" width="0.5472%" height="15" fill="rgb(242,79,21)"/><text x="83.2042%" y="175.50"></text></g><g><title>hir_lowering (829,799 samples, 0.53%)</title><rect x="83.5014%" y="165" width="0.5254%" height="15" fill="rgb(211,96,35)"/><text x="83.7514%" y="175.50"></text></g><g><title>finish_ongoing_codegen (22,395,618 samples, 14.18%)</title><rect x="84.0546%" y="149" width="14.1807%" height="15" fill="rgb(253,215,40)"/><text x="84.3046%" y="159.50">finish_ongoing_codegen</text></g><g><title>link_crate (650,148 samples, 0.41%)</title><rect x="98.2353%" y="149" width="0.4117%" height="15" fill="rgb(211,81,21)"/><text x="98.4853%" y="159.50"></text></g><g><title>link_binary (639,747 samples, 0.41%)</title><rect x="98.2419%" y="133" width="0.4051%" height="15" fill="rgb(208,190,38)"/><text x="98.4919%" y="143.50"></text></g><g><title>link_rlib (393,084 samples, 0.25%)</title><rect x="98.3981%" y="117" width="0.2489%" height="15" fill="rgb(235,213,38)"/><text x="98.6481%" y="127.50"></text></g><g><title>link (23,098,376 samples, 14.63%)</title><rect x="84.0268%" y="165" width="14.6257%" height="15" fill="rgb(237,122,38)"/><text x="84.2768%" y="175.50">link</text></g><g><title>parse_crate (942,940 samples, 0.60%)</title><rect x="98.6525%" y="165" width="0.5971%" height="15" fill="rgb(244,218,35)"/><text x="98.9025%" y="175.50"></text></g><g><title>prepare_outputs (309,943 samples, 0.20%)</title><rect x="99.2560%" y="165" width="0.1963%" height="15" fill="rgb(240,68,47)"/><text x="99.5060%" y="175.50"></text></g><g><title>self_profile_alloc_query_strings (460,515 samples, 0.29%)</title><rect x="99.4522%" y="165" width="0.2916%" height="15" fill="rgb(210,16,53)"/><text x="99.7022%" y="175.50"></text></g><g><title>all (157,929,953 samples, 100%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(235,124,12)"/><text x="0.2500%" y="207.50"></text></g><g><title>rustc (157,929,953 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(224,169,11)"/><text x="0.2500%" y="191.50">rustc</text></g><g><title>write_crate_metadata (294,303 samples, 0.19%)</title><rect x="99.8136%" y="165" width="0.1864%" height="15" fill="rgb(250,166,2)"/><text x="100.0636%" y="175.50"></text></g></svg></svg>