<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (13,672,611 samples, 11.02%)</title><rect x="0.6060%" y="181" width="11.0206%" height="15" fill="rgb(227,0,7)"/><text x="0.8560%" y="191.50">LLVM_passes</text></g><g><title>adt_drop_tys (126,221 samples, 0.10%)</title><rect x="15.2207%" y="53" width="0.1017%" height="15" fill="rgb(217,0,24)"/><text x="15.4707%" y="63.50"></text></g><g><title>needs_drop_raw (475,104 samples, 0.38%)</title><rect x="15.1866%" y="69" width="0.3830%" height="15" fill="rgb(221,193,54)"/><text x="15.4366%" y="79.50"></text></g><g><title>is_copy_raw (306,601 samples, 0.25%)</title><rect x="15.3224%" y="53" width="0.2471%" height="15" fill="rgb(248,212,6)"/><text x="15.5724%" y="63.50"></text></g><g><title>evaluate_obligation (252,381 samples, 0.20%)</title><rect x="15.3661%" y="37" width="0.2034%" height="15" fill="rgb(208,68,35)"/><text x="15.6161%" y="47.50"></text></g><g><title>resolve_instance (152,812 samples, 0.12%)</title><rect x="15.5696%" y="69" width="0.1232%" height="15" fill="rgb(232,128,0)"/><text x="15.8196%" y="79.50"></text></g><g><title>thir_body (197,241 samples, 0.16%)</title><rect x="15.6984%" y="69" width="0.1590%" height="15" fill="rgb(207,160,47)"/><text x="15.9484%" y="79.50"></text></g><g><title>mir_const (1,921,550 samples, 1.55%)</title><rect x="14.3151%" y="117" width="1.5488%" height="15" fill="rgb(228,23,34)"/><text x="14.5651%" y="127.50"></text></g><g><title>unsafety_check_result (1,616,686 samples, 1.30%)</title><rect x="14.5608%" y="101" width="1.3031%" height="15" fill="rgb(218,30,26)"/><text x="14.8108%" y="111.50"></text></g><g><title>mir_built (1,406,055 samples, 1.13%)</title><rect x="14.7306%" y="85" width="1.1333%" height="15" fill="rgb(220,122,19)"/><text x="14.9806%" y="95.50"></text></g><g><title>mir_promoted (2,201,633 samples, 1.77%)</title><rect x="14.1018%" y="133" width="1.7746%" height="15" fill="rgb(250,228,42)"/><text x="14.3518%" y="143.50">m..</text></g><g><title>type_op_normalize_ty (166,162 samples, 0.13%)</title><rect x="15.9998%" y="133" width="0.1339%" height="15" fill="rgb(240,193,28)"/><text x="16.2498%" y="143.50"></text></g><g><title>normalize_projection_ty (127,822 samples, 0.10%)</title><rect x="16.0307%" y="117" width="0.1030%" height="15" fill="rgb(216,20,37)"/><text x="16.2807%" y="127.50"></text></g><g><title>type_op_prove_predicate (573,665 samples, 0.46%)</title><rect x="16.1337%" y="133" width="0.4624%" height="15" fill="rgb(206,188,39)"/><text x="16.3837%" y="143.50"></text></g><g><title>MIR_borrow_checking (5,917,995 samples, 4.77%)</title><rect x="11.8288%" y="165" width="4.7701%" height="15" fill="rgb(217,207,13)"/><text x="12.0788%" y="175.50">MIR_bo..</text></g><g><title>mir_borrowck (5,890,955 samples, 4.75%)</title><rect x="11.8506%" y="149" width="4.7483%" height="15" fill="rgb(231,73,38)"/><text x="12.1006%" y="159.50">mir_bo..</text></g><g><title>hir_module_items (189,482 samples, 0.15%)</title><rect x="16.6044%" y="165" width="0.1527%" height="15" fill="rgb(225,20,46)"/><text x="16.8544%" y="175.50"></text></g><g><title>should_inherit_track_caller (224,373 samples, 0.18%)</title><rect x="17.0927%" y="117" width="0.1809%" height="15" fill="rgb(210,31,41)"/><text x="17.3427%" y="127.50"></text></g><g><title>codegen_fn_attrs (454,745 samples, 0.37%)</title><rect x="16.9366%" y="133" width="0.3665%" height="15" fill="rgb(221,200,47)"/><text x="17.1866%" y="143.50"></text></g><g><title>check_mod_attrs (642,798 samples, 0.52%)</title><rect x="16.7854%" y="149" width="0.5181%" height="15" fill="rgb(226,26,5)"/><text x="17.0354%" y="159.50"></text></g><g><title>lookup_deprecation_entry (136,222 samples, 0.11%)</title><rect x="17.5745%" y="133" width="0.1098%" height="15" fill="rgb(249,33,26)"/><text x="17.8245%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (403,633 samples, 0.33%)</title><rect x="17.4369%" y="149" width="0.3253%" height="15" fill="rgb(235,183,28)"/><text x="17.6869%" y="159.50"></text></g><g><title>misc_checking_1 (1,319,305 samples, 1.06%)</title><rect x="16.7574%" y="165" width="1.0634%" height="15" fill="rgb(221,5,38)"/><text x="17.0074%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (185,472 samples, 0.15%)</title><rect x="17.8224%" y="149" width="0.1495%" height="15" fill="rgb(247,18,42)"/><text x="18.0724%" y="159.50"></text></g><g><title>check_mod_liveness (134,951 samples, 0.11%)</title><rect x="17.8631%" y="133" width="0.1088%" height="15" fill="rgb(241,131,45)"/><text x="18.1131%" y="143.50"></text></g><g><title>misc_checking_2 (368,394 samples, 0.30%)</title><rect x="17.8208%" y="165" width="0.2969%" height="15" fill="rgb(249,31,29)"/><text x="18.0708%" y="175.50"></text></g><g><title>match_checking (180,932 samples, 0.15%)</title><rect x="17.9719%" y="149" width="0.1458%" height="15" fill="rgb(225,111,53)"/><text x="18.2219%" y="159.50"></text></g><g><title>check_match (166,982 samples, 0.13%)</title><rect x="17.9831%" y="133" width="0.1346%" height="15" fill="rgb(238,160,17)"/><text x="18.2331%" y="143.50"></text></g><g><title>death_checking (203,792 samples, 0.16%)</title><rect x="18.1819%" y="149" width="0.1643%" height="15" fill="rgb(214,148,48)"/><text x="18.4319%" y="159.50"></text></g><g><title>crate_lints (1,618,528 samples, 1.30%)</title><rect x="18.3473%" y="133" width="1.3046%" height="15" fill="rgb(232,36,49)"/><text x="18.5973%" y="143.50"></text></g><g><title>type_of (1,022,383 samples, 0.82%)</title><rect x="18.8278%" y="117" width="0.8241%" height="15" fill="rgb(209,103,24)"/><text x="19.0778%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (793,262 samples, 0.64%)</title><rect x="19.0125%" y="101" width="0.6394%" height="15" fill="rgb(229,88,8)"/><text x="19.2625%" y="111.50"></text></g><g><title>lint_checking (1,725,950 samples, 1.39%)</title><rect x="18.3462%" y="149" width="1.3912%" height="15" fill="rgb(213,181,19)"/><text x="18.5962%" y="159.50"></text></g><g><title>privacy_checking_modules (203,612 samples, 0.16%)</title><rect x="19.8138%" y="149" width="0.1641%" height="15" fill="rgb(254,191,54)"/><text x="20.0638%" y="159.50"></text></g><g><title>check_mod_privacy (200,412 samples, 0.16%)</title><rect x="19.8163%" y="133" width="0.1615%" height="15" fill="rgb(241,83,37)"/><text x="20.0663%" y="143.50"></text></g><g><title>misc_checking_3 (2,321,936 samples, 1.87%)</title><rect x="18.1177%" y="165" width="1.8716%" height="15" fill="rgb(233,36,39)"/><text x="18.3677%" y="175.50">m..</text></g><g><title>impl_trait_ref (343,822 samples, 0.28%)</title><rect x="20.3446%" y="69" width="0.2771%" height="15" fill="rgb(226,3,54)"/><text x="20.5946%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (294,582 samples, 0.24%)</title><rect x="20.3843%" y="53" width="0.2374%" height="15" fill="rgb(245,192,40)"/><text x="20.6343%" y="63.50"></text></g><g><title>adt_destructor (698,407 samples, 0.56%)</title><rect x="20.1056%" y="117" width="0.5629%" height="15" fill="rgb(238,167,29)"/><text x="20.3556%" y="127.50"></text></g><g><title>coherent_trait (685,187 samples, 0.55%)</title><rect x="20.1162%" y="101" width="0.5523%" height="15" fill="rgb(232,182,51)"/><text x="20.3662%" y="111.50"></text></g><g><title>specialization_graph_of (682,127 samples, 0.55%)</title><rect x="20.1187%" y="85" width="0.5498%" height="15" fill="rgb(231,60,39)"/><text x="20.3687%" y="95.50"></text></g><g><title>is_copy_raw (142,222 samples, 0.11%)</title><rect x="20.6685%" y="117" width="0.1146%" height="15" fill="rgb(208,69,12)"/><text x="20.9185%" y="127.50"></text></g><g><title>param_env (169,692 samples, 0.14%)</title><rect x="20.7832%" y="117" width="0.1368%" height="15" fill="rgb(235,93,37)"/><text x="21.0332%" y="127.50"></text></g><g><title>impl_parent (3,468,735 samples, 2.80%)</title><rect x="25.8672%" y="101" width="2.7959%" height="15" fill="rgb(213,116,39)"/><text x="26.1172%" y="111.50">im..</text></g><g><title>metadata_decode_entry_impl_parent (1,898,999 samples, 1.53%)</title><rect x="27.1325%" y="85" width="1.5307%" height="15" fill="rgb(222,207,29)"/><text x="27.3825%" y="95.50"></text></g><g><title>impl_trait_ref (10,070,551 samples, 8.12%)</title><rect x="28.6631%" y="101" width="8.1172%" height="15" fill="rgb(206,96,30)"/><text x="28.9131%" y="111.50">impl_trait_..</text></g><g><title>metadata_decode_entry_impl_trait_ref (7,965,454 samples, 6.42%)</title><rect x="30.3599%" y="85" width="6.4204%" height="15" fill="rgb(218,138,4)"/><text x="30.6099%" y="95.50">metadata..</text></g><g><title>coherent_trait (22,011,913 samples, 17.74%)</title><rect x="20.0548%" y="133" width="17.7424%" height="15" fill="rgb(250,191,14)"/><text x="20.3048%" y="143.50">coherent_trait</text></g><g><title>specialization_graph_of (20,938,631 samples, 16.88%)</title><rect x="20.9199%" y="117" width="16.8773%" height="15" fill="rgb(239,60,40)"/><text x="21.1699%" y="127.50">specialization_graph_of</text></g><g><title>trait_impls_of (1,258,173 samples, 1.01%)</title><rect x="36.7831%" y="101" width="1.0141%" height="15" fill="rgb(206,27,48)"/><text x="37.0331%" y="111.50"></text></g><g><title>implementations_of_trait (315,602 samples, 0.25%)</title><rect x="37.5429%" y="85" width="0.2544%" height="15" fill="rgb(225,35,8)"/><text x="37.7929%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (273,061 samples, 0.22%)</title><rect x="37.5771%" y="69" width="0.2201%" height="15" fill="rgb(250,213,24)"/><text x="37.8271%" y="79.50"></text></g><g><title>coherence_checking (22,117,025 samples, 17.83%)</title><rect x="20.0345%" y="149" width="17.8271%" height="15" fill="rgb(247,123,22)"/><text x="20.2845%" y="159.50">coherence_checking</text></g><g><title>associated_items (132,450 samples, 0.11%)</title><rect x="45.1859%" y="101" width="0.1068%" height="15" fill="rgb(231,138,38)"/><text x="45.4359%" y="111.50"></text></g><g><title>adt_dtorck_constraint (226,472 samples, 0.18%)</title><rect x="45.5412%" y="85" width="0.1825%" height="15" fill="rgb(231,145,46)"/><text x="45.7912%" y="95.50"></text></g><g><title>dropck_outlives (487,844 samples, 0.39%)</title><rect x="45.3554%" y="101" width="0.3932%" height="15" fill="rgb(251,118,11)"/><text x="45.6054%" y="111.50"></text></g><g><title>adt_sized_constraint (130,911 samples, 0.11%)</title><rect x="45.9764%" y="85" width="0.1055%" height="15" fill="rgb(217,147,25)"/><text x="46.2264%" y="95.50"></text></g><g><title>evaluate_obligation (564,095 samples, 0.45%)</title><rect x="45.7486%" y="101" width="0.4547%" height="15" fill="rgb(247,81,37)"/><text x="45.9986%" y="111.50"></text></g><g><title>method_autoderef_steps (328,646 samples, 0.26%)</title><rect x="46.5622%" y="101" width="0.2649%" height="15" fill="rgb(209,12,38)"/><text x="46.8122%" y="111.50"></text></g><g><title>evaluate_obligation (185,862 samples, 0.15%)</title><rect x="46.6773%" y="85" width="0.1498%" height="15" fill="rgb(227,1,9)"/><text x="46.9273%" y="95.50"></text></g><g><title>evaluate_obligation (159,062 samples, 0.13%)</title><rect x="46.8823%" y="85" width="0.1282%" height="15" fill="rgb(248,47,43)"/><text x="47.1323%" y="95.50"></text></g><g><title>object_safety_violations (311,434 samples, 0.25%)</title><rect x="46.8271%" y="101" width="0.2510%" height="15" fill="rgb(221,10,30)"/><text x="47.0771%" y="111.50"></text></g><g><title>explicit_predicates_of (175,402 samples, 0.14%)</title><rect x="47.2031%" y="69" width="0.1414%" height="15" fill="rgb(210,229,1)"/><text x="47.4531%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (154,241 samples, 0.12%)</title><rect x="47.2201%" y="53" width="0.1243%" height="15" fill="rgb(222,148,37)"/><text x="47.4701%" y="63.50"></text></g><g><title>predicates_of (336,923 samples, 0.27%)</title><rect x="47.1008%" y="101" width="0.2716%" height="15" fill="rgb(234,67,33)"/><text x="47.3508%" y="111.50"></text></g><g><title>predicates_defined_on (267,703 samples, 0.22%)</title><rect x="47.1566%" y="85" width="0.2158%" height="15" fill="rgb(247,98,35)"/><text x="47.4066%" y="95.50"></text></g><g><title>item_bodies_checking (11,922,072 samples, 9.61%)</title><rect x="37.8958%" y="149" width="9.6096%" height="15" fill="rgb(247,138,52)"/><text x="38.1458%" y="159.50">item_bodies_ch..</text></g><g><title>typeck_item_bodies (11,918,592 samples, 9.61%)</title><rect x="37.8986%" y="133" width="9.6068%" height="15" fill="rgb(213,79,30)"/><text x="38.1486%" y="143.50">typeck_item_bo..</text></g><g><title>typeck (11,877,072 samples, 9.57%)</title><rect x="37.9320%" y="117" width="9.5734%" height="15" fill="rgb(246,177,23)"/><text x="38.1820%" y="127.50">typeck</text></g><g><title>item_types_checking (1,476,316 samples, 1.19%)</title><rect x="47.5054%" y="149" width="1.1900%" height="15" fill="rgb(230,62,27)"/><text x="47.7554%" y="159.50"></text></g><g><title>check_mod_item_types (1,463,706 samples, 1.18%)</title><rect x="47.5156%" y="133" width="1.1798%" height="15" fill="rgb(216,154,8)"/><text x="47.7656%" y="143.50"></text></g><g><title>fn_sig (376,623 samples, 0.30%)</title><rect x="48.9282%" y="117" width="0.3036%" height="15" fill="rgb(244,35,45)"/><text x="49.1782%" y="127.50"></text></g><g><title>is_late_bound_map (189,672 samples, 0.15%)</title><rect x="49.3255%" y="101" width="0.1529%" height="15" fill="rgb(251,115,12)"/><text x="49.5755%" y="111.50"></text></g><g><title>resolve_lifetimes (182,452 samples, 0.15%)</title><rect x="49.3313%" y="85" width="0.1471%" height="15" fill="rgb(240,54,50)"/><text x="49.5813%" y="95.50"></text></g><g><title>generics_of (455,685 samples, 0.37%)</title><rect x="49.2318%" y="117" width="0.3673%" height="15" fill="rgb(233,84,52)"/><text x="49.4818%" y="127.50"></text></g><g><title>late_bound_vars_map (130,453 samples, 0.11%)</title><rect x="50.0855%" y="69" width="0.1051%" height="15" fill="rgb(207,117,47)"/><text x="50.3355%" y="79.50"></text></g><g><title>explicit_predicates_of (537,939 samples, 0.43%)</title><rect x="49.8406%" y="85" width="0.4336%" height="15" fill="rgb(249,43,39)"/><text x="50.0906%" y="95.50"></text></g><g><title>predicates_of (733,350 samples, 0.59%)</title><rect x="49.7452%" y="117" width="0.5911%" height="15" fill="rgb(209,38,44)"/><text x="49.9952%" y="127.50"></text></g><g><title>predicates_defined_on (690,090 samples, 0.56%)</title><rect x="49.7801%" y="101" width="0.5562%" height="15" fill="rgb(236,212,23)"/><text x="50.0301%" y="111.50"></text></g><g><title>type_collecting (2,286,665 samples, 1.84%)</title><rect x="48.6968%" y="149" width="1.8431%" height="15" fill="rgb(242,79,21)"/><text x="48.9468%" y="159.50">t..</text></g><g><title>collect_mod_item_types (2,268,875 samples, 1.83%)</title><rect x="48.7111%" y="133" width="1.8288%" height="15" fill="rgb(211,96,35)"/><text x="48.9611%" y="143.50">c..</text></g><g><title>type_of (181,922 samples, 0.15%)</title><rect x="50.3933%" y="117" width="0.1466%" height="15" fill="rgb(253,215,40)"/><text x="50.6433%" y="127.50"></text></g><g><title>evaluate_obligation (636,936 samples, 0.51%)</title><rect x="52.0005%" y="117" width="0.5134%" height="15" fill="rgb(211,81,21)"/><text x="52.2505%" y="127.50"></text></g><g><title>implied_outlives_bounds (287,153 samples, 0.23%)</title><rect x="52.5374%" y="117" width="0.2315%" height="15" fill="rgb(208,190,38)"/><text x="52.7874%" y="127.50"></text></g><g><title>param_env (255,396 samples, 0.21%)</title><rect x="52.7689%" y="117" width="0.2059%" height="15" fill="rgb(235,213,38)"/><text x="53.0189%" y="127.50"></text></g><g><title>check_impl_item_well_formed (3,073,148 samples, 2.48%)</title><rect x="50.6727%" y="133" width="2.4771%" height="15" fill="rgb(237,122,38)"/><text x="50.9227%" y="143.50">ch..</text></g><g><title>region_scope_tree (169,702 samples, 0.14%)</title><rect x="53.0130%" y="117" width="0.1368%" height="15" fill="rgb(244,218,35)"/><text x="53.2630%" y="127.50"></text></g><g><title>implied_outlives_bounds (170,151 samples, 0.14%)</title><rect x="54.6310%" y="117" width="0.1371%" height="15" fill="rgb(240,68,47)"/><text x="54.8810%" y="127.50"></text></g><g><title>param_env (298,670 samples, 0.24%)</title><rect x="54.7692%" y="117" width="0.2407%" height="15" fill="rgb(210,16,53)"/><text x="55.0192%" y="127.50"></text></g><g><title>predicates_of (125,092 samples, 0.10%)</title><rect x="55.0099%" y="117" width="0.1008%" height="15" fill="rgb(235,124,12)"/><text x="55.2599%" y="127.50"></text></g><g><title>check_item_well_formed (2,640,407 samples, 2.13%)</title><rect x="53.1497%" y="133" width="2.1283%" height="15" fill="rgb(224,169,11)"/><text x="53.3997%" y="143.50">c..</text></g><g><title>analysis (54,424,363 samples, 43.87%)</title><rect x="11.6266%" y="181" width="43.8680%" height="15" fill="rgb(250,166,2)"/><text x="11.8766%" y="191.50">analysis</text></g><g><title>type_check_crate (44,049,317 samples, 35.51%)</title><rect x="19.9893%" y="165" width="35.5054%" height="15" fill="rgb(242,216,29)"/><text x="20.2393%" y="175.50">type_check_crate</text></g><g><title>wf_checking (6,145,118 samples, 4.95%)</title><rect x="50.5415%" y="149" width="4.9532%" height="15" fill="rgb(230,116,27)"/><text x="50.7915%" y="159.50">wf_che..</text></g><g><title>check_trait_item_well_formed (268,803 samples, 0.22%)</title><rect x="55.2780%" y="133" width="0.2167%" height="15" fill="rgb(228,99,48)"/><text x="55.5280%" y="143.50"></text></g><g><title>is_unpin_raw (151,761 samples, 0.12%)</title><rect x="56.6346%" y="133" width="0.1223%" height="15" fill="rgb(253,11,6)"/><text x="56.8846%" y="143.50"></text></g><g><title>evaluate_obligation (146,031 samples, 0.12%)</title><rect x="56.6392%" y="117" width="0.1177%" height="15" fill="rgb(247,143,39)"/><text x="56.8892%" y="127.50"></text></g><g><title>fn_abi_of_instance (327,413 samples, 0.26%)</title><rect x="56.5345%" y="149" width="0.2639%" height="15" fill="rgb(236,97,10)"/><text x="56.7845%" y="159.50"></text></g><g><title>codegen_module (1,042,232 samples, 0.84%)</title><rect x="55.9902%" y="165" width="0.8401%" height="15" fill="rgb(233,208,19)"/><text x="56.2402%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (203,223 samples, 0.16%)</title><rect x="56.8479%" y="133" width="0.1638%" height="15" fill="rgb(216,164,2)"/><text x="57.0979%" y="143.50"></text></g><g><title>monomorphization_collector (229,313 samples, 0.18%)</title><rect x="56.8464%" y="149" width="0.1848%" height="15" fill="rgb(220,129,5)"/><text x="57.0964%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (284,883 samples, 0.23%)</title><rect x="56.8307%" y="165" width="0.2296%" height="15" fill="rgb(242,17,10)"/><text x="57.0807%" y="175.50"></text></g><g><title>codegen_crate (2,005,332 samples, 1.62%)</title><rect x="55.5037%" y="181" width="1.6164%" height="15" fill="rgb(242,107,0)"/><text x="55.7537%" y="191.50"></text></g><g><title>codegen_module_optimize (5,132,607 samples, 4.14%)</title><rect x="57.1200%" y="181" width="4.1371%" height="15" fill="rgb(251,28,31)"/><text x="57.3700%" y="191.50">codeg..</text></g><g><title>LLVM_module_optimize (4,322,368 samples, 3.48%)</title><rect x="57.7731%" y="165" width="3.4840%" height="15" fill="rgb(233,223,10)"/><text x="58.0231%" y="175.50">LLV..</text></g><g><title>LLVM_lto_optimize (1,813,230 samples, 1.46%)</title><rect x="61.7026%" y="165" width="1.4615%" height="15" fill="rgb(215,21,27)"/><text x="61.9526%" y="175.50"></text></g><g><title>LLVM_module_codegen (5,513,571 samples, 4.44%)</title><rect x="63.1641%" y="165" width="4.4441%" height="15" fill="rgb(232,23,21)"/><text x="63.4141%" y="175.50">LLVM_..</text></g><g><title>LLVM_module_codegen_emit_obj (5,413,890 samples, 4.36%)</title><rect x="63.2445%" y="149" width="4.3638%" height="15" fill="rgb(244,5,23)"/><text x="63.4945%" y="159.50">LLVM_..</text></g><g><title>codegen_module_perform_lto (7,936,098 samples, 6.40%)</title><rect x="61.2571%" y="181" width="6.3968%" height="15" fill="rgb(226,81,46)"/><text x="61.5071%" y="191.50">codegen_..</text></g><g><title>AST_validation (131,632 samples, 0.11%)</title><rect x="67.8462%" y="165" width="0.1061%" height="15" fill="rgb(247,70,30)"/><text x="68.0962%" y="175.50"></text></g><g><title>metadata_load_macro (396,543 samples, 0.32%)</title><rect x="78.3856%" y="133" width="0.3196%" height="15" fill="rgb(212,68,19)"/><text x="78.6356%" y="143.50"></text></g><g><title>metadata_register_crate (2,665,759 samples, 2.15%)</title><rect x="78.7052%" y="133" width="2.1487%" height="15" fill="rgb(240,187,13)"/><text x="78.9552%" y="143.50">m..</text></g><g><title>metadata_register_crate (986,280 samples, 0.79%)</title><rect x="80.0590%" y="117" width="0.7950%" height="15" fill="rgb(223,113,26)"/><text x="80.3090%" y="127.50"></text></g><g><title>macro_expand_crate (15,974,037 samples, 12.88%)</title><rect x="68.0625%" y="165" width="12.8757%" height="15" fill="rgb(206,192,2)"/><text x="68.3125%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (15,946,367 samples, 12.85%)</title><rect x="68.0848%" y="149" width="12.8534%" height="15" fill="rgb(241,108,4)"/><text x="68.3348%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (139,402 samples, 0.11%)</title><rect x="80.9423%" y="165" width="0.1124%" height="15" fill="rgb(247,173,49)"/><text x="81.1923%" y="175.50"></text></g><g><title>finalize_macro_resolutions (247,462 samples, 0.20%)</title><rect x="81.1044%" y="149" width="0.1995%" height="15" fill="rgb(224,114,35)"/><text x="81.3544%" y="159.50"></text></g><g><title>late_resolve_crate (1,349,785 samples, 1.09%)</title><rect x="81.3039%" y="149" width="1.0880%" height="15" fill="rgb(245,159,27)"/><text x="81.5539%" y="159.50"></text></g><g><title>configure_and_expand (18,372,304 samples, 14.81%)</title><rect x="67.6539%" y="181" width="14.8088%" height="15" fill="rgb(245,172,44)"/><text x="67.9039%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (1,746,759 samples, 1.41%)</title><rect x="81.0547%" y="165" width="1.4080%" height="15" fill="rgb(236,23,11)"/><text x="81.3047%" y="175.50"></text></g><g><title>early_lint_checks (276,093 samples, 0.22%)</title><rect x="82.5658%" y="181" width="0.2225%" height="15" fill="rgb(205,117,38)"/><text x="82.8158%" y="191.50"></text></g><g><title>free_global_ctxt (2,607,619 samples, 2.10%)</title><rect x="82.7884%" y="181" width="2.1018%" height="15" fill="rgb(237,72,25)"/><text x="83.0384%" y="191.50">f..</text></g><g><title>layout_of (325,856 samples, 0.26%)</title><rect x="86.0842%" y="149" width="0.2627%" height="15" fill="rgb(244,70,9)"/><text x="86.3342%" y="159.50"></text></g><g><title>needs_drop_raw (327,313 samples, 0.26%)</title><rect x="86.8183%" y="133" width="0.2638%" height="15" fill="rgb(217,125,39)"/><text x="87.0683%" y="143.50"></text></g><g><title>is_copy_raw (313,823 samples, 0.25%)</title><rect x="86.8292%" y="117" width="0.2530%" height="15" fill="rgb(235,36,10)"/><text x="87.0792%" y="127.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (951,611 samples, 0.77%)</title><rect x="86.3469%" y="149" width="0.7670%" height="15" fill="rgb(251,123,47)"/><text x="86.5969%" y="159.50"></text></g><g><title>specialization_graph_of (558,787 samples, 0.45%)</title><rect x="87.1653%" y="133" width="0.4504%" height="15" fill="rgb(221,13,13)"/><text x="87.4153%" y="143.50"></text></g><g><title>optimized_mir (2,509,018 samples, 2.02%)</title><rect x="85.5952%" y="165" width="2.0224%" height="15" fill="rgb(238,131,9)"/><text x="85.8452%" y="175.50">o..</text></g><g><title>resolve_instance (624,787 samples, 0.50%)</title><rect x="87.1139%" y="149" width="0.5036%" height="15" fill="rgb(211,50,8)"/><text x="87.3639%" y="159.50"></text></g><g><title>generate_crate_metadata (3,475,168 samples, 2.80%)</title><rect x="84.8902%" y="181" width="2.8011%" height="15" fill="rgb(245,182,24)"/><text x="85.1402%" y="191.50">ge..</text></g><g><title>hir_lowering (1,905,451 samples, 1.54%)</title><rect x="87.6913%" y="181" width="1.5359%" height="15" fill="rgb(242,14,37)"/><text x="87.9413%" y="191.50"></text></g><g><title>finish_ongoing_codegen (10,766,359 samples, 8.68%)</title><rect x="89.2428%" y="165" width="8.6781%" height="15" fill="rgb(246,228,12)"/><text x="89.4928%" y="175.50">finish_ongoi..</text></g><g><title>join_worker_thread (172,462 samples, 0.14%)</title><rect x="97.7818%" y="149" width="0.1390%" height="15" fill="rgb(213,55,15)"/><text x="98.0318%" y="159.50"></text></g><g><title>link_crate (653,367 samples, 0.53%)</title><rect x="97.9208%" y="165" width="0.5266%" height="15" fill="rgb(209,9,3)"/><text x="98.1708%" y="175.50"></text></g><g><title>link_binary (641,137 samples, 0.52%)</title><rect x="97.9307%" y="149" width="0.5168%" height="15" fill="rgb(230,59,30)"/><text x="98.1807%" y="159.50"></text></g><g><title>link_rlib (388,624 samples, 0.31%)</title><rect x="98.1342%" y="133" width="0.3132%" height="15" fill="rgb(209,121,21)"/><text x="98.3842%" y="143.50"></text></g><g><title>link (11,447,396 samples, 9.23%)</title><rect x="89.2272%" y="181" width="9.2270%" height="15" fill="rgb(220,109,13)"/><text x="89.4772%" y="191.50">link</text></g><g><title>parse_crate (709,438 samples, 0.57%)</title><rect x="98.4542%" y="181" width="0.5718%" height="15" fill="rgb(232,18,1)"/><text x="98.7042%" y="191.50"></text></g><g><title>prepare_outputs (345,254 samples, 0.28%)</title><rect x="99.0339%" y="181" width="0.2783%" height="15" fill="rgb(215,41,42)"/><text x="99.2839%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (469,545 samples, 0.38%)</title><rect x="99.3122%" y="181" width="0.3785%" height="15" fill="rgb(224,123,36)"/><text x="99.5622%" y="191.50"></text></g><g><title>setup_global_ctxt (141,842 samples, 0.11%)</title><rect x="99.6914%" y="181" width="0.1143%" height="15" fill="rgb(240,125,3)"/><text x="99.9414%" y="191.50"></text></g><g><title>all (124,063,823 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (124,063,823 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (240,993 samples, 0.19%)</title><rect x="99.8058%" y="181" width="0.1942%" height="15" fill="rgb(238,207,15)"/><text x="100.0558%" y="191.50"></text></g></svg></svg>