<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="213.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (15,981,221 samples, 18.05%)</title><rect x="0.8084%" y="149" width="18.0521%" height="15" fill="rgb(227,0,7)"/><text x="1.0584%" y="159.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (128,652 samples, 0.15%)</title><rect x="18.7152%" y="133" width="0.1453%" height="15" fill="rgb(217,0,24)"/><text x="18.9652%" y="143.50"></text></g><g><title>LLVM_thin_lto_global_analysis (113,952 samples, 0.13%)</title><rect x="18.7318%" y="117" width="0.1287%" height="15" fill="rgb(221,193,54)"/><text x="18.9818%" y="127.50"></text></g><g><title>is_copy_raw (113,912 samples, 0.13%)</title><rect x="21.0789%" y="37" width="0.1287%" height="15" fill="rgb(248,212,6)"/><text x="21.3289%" y="47.50"></text></g><g><title>thir_body (123,841 samples, 0.14%)</title><rect x="21.2754%" y="37" width="0.1399%" height="15" fill="rgb(208,68,35)"/><text x="21.5254%" y="47.50"></text></g><g><title>mir_const (837,679 samples, 0.95%)</title><rect x="20.4712%" y="85" width="0.9462%" height="15" fill="rgb(232,128,0)"/><text x="20.7212%" y="95.50"></text></g><g><title>unsafety_check_result (656,746 samples, 0.74%)</title><rect x="20.6756%" y="69" width="0.7418%" height="15" fill="rgb(207,160,47)"/><text x="20.9256%" y="79.50"></text></g><g><title>mir_built (583,496 samples, 0.66%)</title><rect x="20.7583%" y="53" width="0.6591%" height="15" fill="rgb(228,23,34)"/><text x="21.0083%" y="63.50"></text></g><g><title>mir_promoted (1,075,532 samples, 1.21%)</title><rect x="20.3499%" y="101" width="1.2149%" height="15" fill="rgb(218,30,26)"/><text x="20.5999%" y="111.50"></text></g><g><title>mir_const_qualif (130,452 samples, 0.15%)</title><rect x="21.4174%" y="85" width="0.1474%" height="15" fill="rgb(220,122,19)"/><text x="21.6674%" y="95.50"></text></g><g><title>mir_const (96,932 samples, 0.11%)</title><rect x="21.4553%" y="69" width="0.1095%" height="15" fill="rgb(250,228,42)"/><text x="21.7053%" y="79.50"></text></g><g><title>MIR_borrow_checking (2,364,727 samples, 2.67%)</title><rect x="19.0180%" y="133" width="2.6712%" height="15" fill="rgb(240,193,28)"/><text x="19.2680%" y="143.50">MI..</text></g><g><title>mir_borrowck (2,348,987 samples, 2.65%)</title><rect x="19.0358%" y="117" width="2.6534%" height="15" fill="rgb(216,20,37)"/><text x="19.2858%" y="127.50">mi..</text></g><g><title>hir_module_items (101,331 samples, 0.11%)</title><rect x="21.7746%" y="133" width="0.1145%" height="15" fill="rgb(206,188,39)"/><text x="22.0246%" y="143.50"></text></g><g><title>item_attrs (105,781 samples, 0.12%)</title><rect x="22.2298%" y="53" width="0.1195%" height="15" fill="rgb(217,207,13)"/><text x="22.4798%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (96,651 samples, 0.11%)</title><rect x="22.2401%" y="37" width="0.1092%" height="15" fill="rgb(231,73,38)"/><text x="22.4901%" y="47.50"></text></g><g><title>codegen_fn_attrs (166,862 samples, 0.19%)</title><rect x="22.2029%" y="69" width="0.1885%" height="15" fill="rgb(225,20,46)"/><text x="22.4529%" y="79.50"></text></g><g><title>should_inherit_track_caller (226,903 samples, 0.26%)</title><rect x="22.1385%" y="85" width="0.2563%" height="15" fill="rgb(210,31,41)"/><text x="22.3885%" y="95.50"></text></g><g><title>codegen_fn_attrs (347,914 samples, 0.39%)</title><rect x="22.0267%" y="101" width="0.3930%" height="15" fill="rgb(221,200,47)"/><text x="22.2767%" y="111.50"></text></g><g><title>check_mod_attrs (446,295 samples, 0.50%)</title><rect x="21.9159%" y="117" width="0.5041%" height="15" fill="rgb(226,26,5)"/><text x="22.1659%" y="127.50"></text></g><g><title>check_mod_unstable_api_usage (179,972 samples, 0.20%)</title><rect x="22.5075%" y="117" width="0.2033%" height="15" fill="rgb(249,33,26)"/><text x="22.7575%" y="127.50"></text></g><g><title>misc_checking_1 (767,888 samples, 0.87%)</title><rect x="21.8894%" y="133" width="0.8674%" height="15" fill="rgb(235,183,28)"/><text x="22.1394%" y="143.50"></text></g><g><title>misc_checking_2 (148,391 samples, 0.17%)</title><rect x="22.7568%" y="133" width="0.1676%" height="15" fill="rgb(221,5,38)"/><text x="23.0068%" y="143.50"></text></g><g><title>death_checking (135,361 samples, 0.15%)</title><rect x="22.9729%" y="117" width="0.1529%" height="15" fill="rgb(247,18,42)"/><text x="23.2229%" y="127.50"></text></g><g><title>crate_lints (637,877 samples, 0.72%)</title><rect x="23.1273%" y="101" width="0.7205%" height="15" fill="rgb(241,131,45)"/><text x="23.3773%" y="111.50"></text></g><g><title>type_of (269,693 samples, 0.30%)</title><rect x="23.5432%" y="85" width="0.3046%" height="15" fill="rgb(249,31,29)"/><text x="23.7932%" y="95.50"></text></g><g><title>metadata_decode_entry_type_of (186,783 samples, 0.21%)</title><rect x="23.6368%" y="69" width="0.2110%" height="15" fill="rgb(225,111,53)"/><text x="23.8868%" y="79.50"></text></g><g><title>lint_checking (690,598 samples, 0.78%)</title><rect x="23.1258%" y="117" width="0.7801%" height="15" fill="rgb(238,160,17)"/><text x="23.3758%" y="127.50"></text></g><g><title>misc_checking_3 (993,741 samples, 1.12%)</title><rect x="22.9244%" y="133" width="1.1225%" height="15" fill="rgb(214,148,48)"/><text x="23.1744%" y="143.50"></text></g><g><title>param_env (132,921 samples, 0.15%)</title><rect x="24.2238%" y="85" width="0.1501%" height="15" fill="rgb(232,36,49)"/><text x="24.4738%" y="95.50"></text></g><g><title>impl_parent (1,116,315 samples, 1.26%)</title><rect x="26.8745%" y="69" width="1.2610%" height="15" fill="rgb(209,103,24)"/><text x="27.1245%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_parent (519,676 samples, 0.59%)</title><rect x="27.5485%" y="53" width="0.5870%" height="15" fill="rgb(229,88,8)"/><text x="27.7985%" y="63.50"></text></g><g><title>impl_trait_ref (2,927,124 samples, 3.31%)</title><rect x="28.1355%" y="69" width="3.3064%" height="15" fill="rgb(213,181,19)"/><text x="28.3855%" y="79.50">imp..</text></g><g><title>metadata_decode_entry_impl_trait_ref (2,339,385 samples, 2.64%)</title><rect x="28.7994%" y="53" width="2.6425%" height="15" fill="rgb(254,191,54)"/><text x="29.0494%" y="63.50">me..</text></g><g><title>coherent_trait (6,921,318 samples, 7.82%)</title><rect x="24.1006%" y="101" width="7.8182%" height="15" fill="rgb(241,83,37)"/><text x="24.3506%" y="111.50">coherent_tr..</text></g><g><title>specialization_graph_of (6,679,345 samples, 7.54%)</title><rect x="24.3740%" y="85" width="7.5449%" height="15" fill="rgb(233,36,39)"/><text x="24.6240%" y="95.50">specializa..</text></g><g><title>trait_impls_of (419,975 samples, 0.47%)</title><rect x="31.4444%" y="69" width="0.4744%" height="15" fill="rgb(226,3,54)"/><text x="31.6944%" y="79.50"></text></g><g><title>implementations_of_trait (90,501 samples, 0.10%)</title><rect x="31.8166%" y="53" width="0.1022%" height="15" fill="rgb(245,192,40)"/><text x="32.0666%" y="63.50"></text></g><g><title>coherence_checking (6,984,979 samples, 7.89%)</title><rect x="24.0803%" y="117" width="7.8901%" height="15" fill="rgb(238,167,29)"/><text x="24.3303%" y="127.50">coherence_c..</text></g><g><title>adt_sized_constraint (91,822 samples, 0.10%)</title><rect x="34.4663%" y="37" width="0.1037%" height="15" fill="rgb(232,182,51)"/><text x="34.7163%" y="47.50"></text></g><g><title>adt_sized_constraint (159,672 samples, 0.18%)</title><rect x="34.3918%" y="53" width="0.1804%" height="15" fill="rgb(231,60,39)"/><text x="34.6418%" y="63.50"></text></g><g><title>trait_impls_of (90,112 samples, 0.10%)</title><rect x="34.7562%" y="53" width="0.1018%" height="15" fill="rgb(208,69,12)"/><text x="35.0062%" y="63.50"></text></g><g><title>evaluate_obligation (568,346 samples, 0.64%)</title><rect x="34.2202%" y="69" width="0.6420%" height="15" fill="rgb(235,93,37)"/><text x="34.4702%" y="79.50"></text></g><g><title>predicates_of (102,601 samples, 0.12%)</title><rect x="35.1331%" y="69" width="0.1159%" height="15" fill="rgb(213,116,39)"/><text x="35.3831%" y="79.50"></text></g><g><title>item_bodies_checking (3,009,814 samples, 3.40%)</title><rect x="31.9926%" y="117" width="3.3998%" height="15" fill="rgb(222,207,29)"/><text x="32.2426%" y="127.50">ite..</text></g><g><title>typeck_item_bodies (3,007,264 samples, 3.40%)</title><rect x="31.9955%" y="101" width="3.3970%" height="15" fill="rgb(206,96,30)"/><text x="32.2455%" y="111.50">typ..</text></g><g><title>typeck (2,995,254 samples, 3.38%)</title><rect x="32.0091%" y="85" width="3.3834%" height="15" fill="rgb(218,138,4)"/><text x="32.2591%" y="95.50">typ..</text></g><g><title>item_types_checking (519,706 samples, 0.59%)</title><rect x="35.3925%" y="117" width="0.5871%" height="15" fill="rgb(250,191,14)"/><text x="35.6425%" y="127.50"></text></g><g><title>check_mod_item_types (515,366 samples, 0.58%)</title><rect x="35.3974%" y="101" width="0.5821%" height="15" fill="rgb(239,60,40)"/><text x="35.6474%" y="111.50"></text></g><g><title>typeck (100,111 samples, 0.11%)</title><rect x="35.8664%" y="85" width="0.1131%" height="15" fill="rgb(206,27,48)"/><text x="36.1164%" y="95.50"></text></g><g><title>fn_sig (197,132 samples, 0.22%)</title><rect x="36.1085%" y="85" width="0.2227%" height="15" fill="rgb(225,35,8)"/><text x="36.3585%" y="95.50"></text></g><g><title>named_region_map (146,181 samples, 0.17%)</title><rect x="36.3946%" y="69" width="0.1651%" height="15" fill="rgb(250,213,24)"/><text x="36.6446%" y="79.50"></text></g><g><title>resolve_lifetimes (140,711 samples, 0.16%)</title><rect x="36.4008%" y="53" width="0.1589%" height="15" fill="rgb(247,123,22)"/><text x="36.6508%" y="63.50"></text></g><g><title>generics_of (211,202 samples, 0.24%)</title><rect x="36.3312%" y="85" width="0.2386%" height="15" fill="rgb(231,138,38)"/><text x="36.5812%" y="95.50"></text></g><g><title>predicates_of (137,132 samples, 0.15%)</title><rect x="36.6083%" y="85" width="0.1549%" height="15" fill="rgb(231,145,46)"/><text x="36.8583%" y="95.50"></text></g><g><title>predicates_defined_on (121,152 samples, 0.14%)</title><rect x="36.6264%" y="69" width="0.1369%" height="15" fill="rgb(251,118,11)"/><text x="36.8764%" y="79.50"></text></g><g><title>type_collecting (743,838 samples, 0.84%)</title><rect x="35.9803%" y="117" width="0.8402%" height="15" fill="rgb(217,147,25)"/><text x="36.2303%" y="127.50"></text></g><g><title>collect_mod_item_types (730,668 samples, 0.83%)</title><rect x="35.9952%" y="101" width="0.8254%" height="15" fill="rgb(247,81,37)"/><text x="36.2452%" y="111.50"></text></g><g><title>evaluate_obligation (175,872 samples, 0.20%)</title><rect x="37.3144%" y="85" width="0.1987%" height="15" fill="rgb(209,12,38)"/><text x="37.5644%" y="95.50"></text></g><g><title>check_impl_item_well_formed (768,990 samples, 0.87%)</title><rect x="36.8787%" y="101" width="0.8686%" height="15" fill="rgb(227,1,9)"/><text x="37.1287%" y="111.50"></text></g><g><title>evaluate_obligation (153,251 samples, 0.17%)</title><rect x="38.1846%" y="85" width="0.1731%" height="15" fill="rgb(248,47,43)"/><text x="38.4346%" y="95.50"></text></g><g><title>analysis (17,518,858 samples, 19.79%)</title><rect x="18.8605%" y="149" width="19.7890%" height="15" fill="rgb(221,10,30)"/><text x="19.1105%" y="159.50">analysis</text></g><g><title>type_check_crate (12,927,407 samples, 14.60%)</title><rect x="24.0470%" y="133" width="14.6026%" height="15" fill="rgb(210,229,1)"/><text x="24.2970%" y="143.50">type_check_crate</text></g><g><title>wf_checking (1,618,188 samples, 1.83%)</title><rect x="36.8217%" y="117" width="1.8279%" height="15" fill="rgb(222,148,37)"/><text x="37.0717%" y="127.50">w..</text></g><g><title>check_item_well_formed (798,667 samples, 0.90%)</title><rect x="37.7474%" y="101" width="0.9022%" height="15" fill="rgb(234,67,33)"/><text x="37.9974%" y="111.50"></text></g><g><title>fn_abi_of_instance (285,082 samples, 0.32%)</title><rect x="39.8489%" y="117" width="0.3220%" height="15" fill="rgb(247,98,35)"/><text x="40.0989%" y="127.50"></text></g><g><title>codegen_module (905,890 samples, 1.02%)</title><rect x="39.1771%" y="133" width="1.0233%" height="15" fill="rgb(247,138,52)"/><text x="39.4271%" y="143.50"></text></g><g><title>optimized_mir (238,433 samples, 0.27%)</title><rect x="40.3670%" y="85" width="0.2693%" height="15" fill="rgb(213,79,30)"/><text x="40.6170%" y="95.50"></text></g><g><title>monomorphization_collector_graph_walk (394,704 samples, 0.45%)</title><rect x="40.2254%" y="101" width="0.4459%" height="15" fill="rgb(246,177,23)"/><text x="40.4754%" y="111.50"></text></g><g><title>monomorphization_collector (412,434 samples, 0.47%)</title><rect x="40.2234%" y="117" width="0.4659%" height="15" fill="rgb(230,62,27)"/><text x="40.4734%" y="127.50"></text></g><g><title>collect_and_partition_mono_items (488,255 samples, 0.55%)</title><rect x="40.2006%" y="133" width="0.5515%" height="15" fill="rgb(216,154,8)"/><text x="40.4506%" y="143.50"></text></g><g><title>codegen_crate (1,870,311 samples, 2.11%)</title><rect x="38.6590%" y="149" width="2.1127%" height="15" fill="rgb(244,35,45)"/><text x="38.9090%" y="159.50">c..</text></g><g><title>codegen_module_optimize (6,207,770 samples, 7.01%)</title><rect x="40.7717%" y="149" width="7.0122%" height="15" fill="rgb(251,115,12)"/><text x="41.0217%" y="159.50">codegen_m..</text></g><g><title>LLVM_module_optimize (5,446,201 samples, 6.15%)</title><rect x="41.6320%" y="133" width="6.1519%" height="15" fill="rgb(240,54,50)"/><text x="41.8820%" y="143.50">LLVM_mod..</text></g><g><title>LLVM_lto_optimize (2,015,583 samples, 2.28%)</title><rect x="48.3942%" y="133" width="2.2768%" height="15" fill="rgb(233,84,52)"/><text x="48.6442%" y="143.50">L..</text></g><g><title>LLVM_module_codegen (6,697,966 samples, 7.57%)</title><rect x="50.6710%" y="133" width="7.5659%" height="15" fill="rgb(207,117,47)"/><text x="50.9210%" y="143.50">LLVM_modul..</text></g><g><title>LLVM_module_codegen_emit_obj (6,580,565 samples, 7.43%)</title><rect x="50.8036%" y="117" width="7.4333%" height="15" fill="rgb(249,43,39)"/><text x="51.0536%" y="127.50">LLVM_modul..</text></g><g><title>codegen_module_perform_lto (9,297,635 samples, 10.50%)</title><rect x="47.7839%" y="149" width="10.5025%" height="15" fill="rgb(209,38,44)"/><text x="48.0339%" y="159.50">codegen_module_..</text></g><g><title>AST_validation (95,281 samples, 0.11%)</title><rect x="58.4608%" y="133" width="0.1076%" height="15" fill="rgb(236,212,23)"/><text x="58.7108%" y="143.50"></text></g><g><title>macro_expand_crate (13,373,551 samples, 15.11%)</title><rect x="58.6798%" y="133" width="15.1065%" height="15" fill="rgb(242,79,21)"/><text x="58.9298%" y="143.50">macro_expand_crate</text></g><g><title>expand_crate (13,365,801 samples, 15.10%)</title><rect x="58.6886%" y="117" width="15.0978%" height="15" fill="rgb(211,96,35)"/><text x="58.9386%" y="127.50">expand_crate</text></g><g><title>metadata_register_crate (278,543 samples, 0.31%)</title><rect x="73.4717%" y="101" width="0.3146%" height="15" fill="rgb(253,215,40)"/><text x="73.7217%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (365,204 samples, 0.41%)</title><rect x="73.7903%" y="133" width="0.4125%" height="15" fill="rgb(211,81,21)"/><text x="74.0403%" y="143.50"></text></g><g><title>finalize_macro_resolutions (162,531 samples, 0.18%)</title><rect x="74.2503%" y="117" width="0.1836%" height="15" fill="rgb(208,190,38)"/><text x="74.5003%" y="127.50"></text></g><g><title>late_resolve_crate (716,109 samples, 0.81%)</title><rect x="74.4339%" y="117" width="0.8089%" height="15" fill="rgb(235,213,38)"/><text x="74.6839%" y="127.50"></text></g><g><title>configure_and_expand (15,059,389 samples, 17.01%)</title><rect x="58.2864%" y="149" width="17.0108%" height="15" fill="rgb(237,122,38)"/><text x="58.5364%" y="159.50">configure_and_expand</text></g><g><title>resolve_crate (968,801 samples, 1.09%)</title><rect x="74.2028%" y="133" width="1.0943%" height="15" fill="rgb(244,218,35)"/><text x="74.4528%" y="143.50"></text></g><g><title>early_lint_checks (156,832 samples, 0.18%)</title><rect x="75.4059%" y="149" width="0.1772%" height="15" fill="rgb(240,68,47)"/><text x="75.6559%" y="159.50"></text></g><g><title>free_global_ctxt (1,375,386 samples, 1.55%)</title><rect x="75.5831%" y="149" width="1.5536%" height="15" fill="rgb(210,16,53)"/><text x="75.8331%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (265,812 samples, 0.30%)</title><rect x="78.1086%" y="117" width="0.3003%" height="15" fill="rgb(235,124,12)"/><text x="78.3586%" y="127.50"></text></g><g><title>optimized_mir (690,838 samples, 0.78%)</title><rect x="77.6684%" y="133" width="0.7804%" height="15" fill="rgb(224,169,11)"/><text x="77.9184%" y="143.50"></text></g><g><title>generate_crate_metadata (1,173,303 samples, 1.33%)</title><rect x="77.1367%" y="149" width="1.3253%" height="15" fill="rgb(250,166,2)"/><text x="77.3867%" y="159.50"></text></g><g><title>hir_lowering (826,969 samples, 0.93%)</title><rect x="78.4621%" y="149" width="0.9341%" height="15" fill="rgb(242,216,29)"/><text x="78.7121%" y="159.50"></text></g><g><title>finish_ongoing_codegen (14,467,073 samples, 16.34%)</title><rect x="79.4241%" y="133" width="16.3418%" height="15" fill="rgb(230,116,27)"/><text x="79.6741%" y="143.50">finish_ongoing_codegen</text></g><g><title>link_crate (587,087 samples, 0.66%)</title><rect x="95.7659%" y="133" width="0.6632%" height="15" fill="rgb(228,99,48)"/><text x="96.0159%" y="143.50"></text></g><g><title>link_binary (582,557 samples, 0.66%)</title><rect x="95.7710%" y="117" width="0.6580%" height="15" fill="rgb(253,11,6)"/><text x="96.0210%" y="127.50"></text></g><g><title>link_rlib (331,104 samples, 0.37%)</title><rect x="96.0550%" y="101" width="0.3740%" height="15" fill="rgb(247,143,39)"/><text x="96.3050%" y="111.50"></text></g><g><title>link (15,085,180 samples, 17.04%)</title><rect x="79.3962%" y="149" width="17.0400%" height="15" fill="rgb(236,97,10)"/><text x="79.6462%" y="159.50">link</text></g><g><title>parse_crate (2,124,874 samples, 2.40%)</title><rect x="96.4362%" y="149" width="2.4002%" height="15" fill="rgb(233,208,19)"/><text x="96.6862%" y="159.50">pa..</text></g><g><title>prepare_outputs (271,663 samples, 0.31%)</title><rect x="98.8442%" y="149" width="0.3069%" height="15" fill="rgb(216,164,2)"/><text x="99.0942%" y="159.50"></text></g><g><title>self_profile_alloc_query_strings (347,694 samples, 0.39%)</title><rect x="99.1511%" y="149" width="0.3927%" height="15" fill="rgb(220,129,5)"/><text x="99.4011%" y="159.50"></text></g><g><title>setup_global_ctxt (101,872 samples, 0.12%)</title><rect x="99.5445%" y="149" width="0.1151%" height="15" fill="rgb(242,17,10)"/><text x="99.7945%" y="159.50"></text></g><g><title>all (88,528,211 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(242,107,0)"/><text x="0.2500%" y="191.50"></text></g><g><title>rustc (88,528,211 samples, 100.00%)</title><rect x="0.0000%" y="165" width="100.0000%" height="15" fill="rgb(251,28,31)"/><text x="0.2500%" y="175.50">rustc</text></g><g><title>write_crate_metadata (301,394 samples, 0.34%)</title><rect x="99.6596%" y="149" width="0.3404%" height="15" fill="rgb(233,223,10)"/><text x="99.9096%" y="159.50"></text></g></svg></svg>