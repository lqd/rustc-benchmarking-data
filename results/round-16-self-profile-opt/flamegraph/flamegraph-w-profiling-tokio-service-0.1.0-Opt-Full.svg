<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="342" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="325.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="325.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,711,134 samples, 14.48%)</title><rect x="1.0247%" y="261" width="14.4765%" height="15" fill="rgb(227,0,7)"/><text x="1.2747%" y="271.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (313,744 samples, 0.80%)</title><rect x="14.7059%" y="245" width="0.7953%" height="15" fill="rgb(217,0,24)"/><text x="14.9559%" y="255.50"></text></g><g><title>LLVM_thin_lto_global_analysis (291,194 samples, 0.74%)</title><rect x="14.7631%" y="229" width="0.7381%" height="15" fill="rgb(221,193,54)"/><text x="15.0131%" y="239.50"></text></g><g><title>needs_drop_raw (168,212 samples, 0.43%)</title><rect x="19.6865%" y="149" width="0.4264%" height="15" fill="rgb(248,212,6)"/><text x="19.9365%" y="159.50"></text></g><g><title>is_copy_raw (164,872 samples, 0.42%)</title><rect x="19.6950%" y="133" width="0.4179%" height="15" fill="rgb(208,68,35)"/><text x="19.9450%" y="143.50"></text></g><g><title>evaluate_obligation (161,472 samples, 0.41%)</title><rect x="19.7036%" y="117" width="0.4093%" height="15" fill="rgb(232,128,0)"/><text x="19.9536%" y="127.50"></text></g><g><title>trait_impls_of (145,762 samples, 0.37%)</title><rect x="19.7434%" y="101" width="0.3695%" height="15" fill="rgb(207,160,47)"/><text x="19.9934%" y="111.50"></text></g><g><title>codegen_fulfill_obligation (57,002 samples, 0.14%)</title><rect x="20.2280%" y="133" width="0.1445%" height="15" fill="rgb(228,23,34)"/><text x="20.4780%" y="143.50"></text></g><g><title>specialization_graph_of (137,392 samples, 0.35%)</title><rect x="20.3838%" y="133" width="0.3483%" height="15" fill="rgb(218,30,26)"/><text x="20.6338%" y="143.50"></text></g><g><title>impl_trait_ref (75,881 samples, 0.19%)</title><rect x="20.5397%" y="117" width="0.1923%" height="15" fill="rgb(220,122,19)"/><text x="20.7897%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (68,851 samples, 0.17%)</title><rect x="20.5575%" y="101" width="0.1745%" height="15" fill="rgb(250,228,42)"/><text x="20.8075%" y="111.50"></text></g><g><title>resolve_instance (250,084 samples, 0.63%)</title><rect x="20.1129%" y="149" width="0.6339%" height="15" fill="rgb(240,193,28)"/><text x="20.3629%" y="159.50"></text></g><g><title>thir_body (47,230 samples, 0.12%)</title><rect x="20.7558%" y="149" width="0.1197%" height="15" fill="rgb(216,20,37)"/><text x="21.0058%" y="159.50"></text></g><g><title>mir_const (922,970 samples, 2.34%)</title><rect x="18.5703%" y="197" width="2.3395%" height="15" fill="rgb(206,188,39)"/><text x="18.8203%" y="207.50">m..</text></g><g><title>unsafety_check_result (771,458 samples, 1.96%)</title><rect x="18.9543%" y="181" width="1.9555%" height="15" fill="rgb(217,207,13)"/><text x="19.2043%" y="191.50">u..</text></g><g><title>mir_built (684,787 samples, 1.74%)</title><rect x="19.1740%" y="165" width="1.7358%" height="15" fill="rgb(231,73,38)"/><text x="19.4240%" y="175.50"></text></g><g><title>mir_promoted (1,036,120 samples, 2.63%)</title><rect x="18.3026%" y="213" width="2.6263%" height="15" fill="rgb(225,20,46)"/><text x="18.5526%" y="223.50">mi..</text></g><g><title>type_op_normalize_fn_sig (99,511 samples, 0.25%)</title><rect x="20.9290%" y="213" width="0.2522%" height="15" fill="rgb(210,31,41)"/><text x="21.1790%" y="223.50"></text></g><g><title>normalize_projection_ty (45,360 samples, 0.11%)</title><rect x="21.0662%" y="197" width="0.1150%" height="15" fill="rgb(221,200,47)"/><text x="21.3162%" y="207.50"></text></g><g><title>MIR_borrow_checking (2,320,286 samples, 5.88%)</title><rect x="15.7656%" y="245" width="5.8814%" height="15" fill="rgb(226,26,5)"/><text x="16.0156%" y="255.50">MIR_bor..</text></g><g><title>mir_borrowck (2,309,114 samples, 5.85%)</title><rect x="15.7940%" y="229" width="5.8531%" height="15" fill="rgb(249,33,26)"/><text x="16.0440%" y="239.50">mir_bor..</text></g><g><title>type_op_prove_predicate (169,853 samples, 0.43%)</title><rect x="21.2165%" y="213" width="0.4305%" height="15" fill="rgb(235,183,28)"/><text x="21.4665%" y="223.50"></text></g><g><title>hir_module_items (89,711 samples, 0.23%)</title><rect x="21.6585%" y="245" width="0.2274%" height="15" fill="rgb(221,5,38)"/><text x="21.9085%" y="255.50"></text></g><g><title>get_lang_items (57,441 samples, 0.15%)</title><rect x="22.1638%" y="197" width="0.1456%" height="15" fill="rgb(247,18,42)"/><text x="22.4138%" y="207.50"></text></g><g><title>should_inherit_track_caller (54,740 samples, 0.14%)</title><rect x="22.3094%" y="197" width="0.1388%" height="15" fill="rgb(241,131,45)"/><text x="22.5594%" y="207.50"></text></g><g><title>codegen_fn_attrs (165,732 samples, 0.42%)</title><rect x="22.0600%" y="213" width="0.4201%" height="15" fill="rgb(249,31,29)"/><text x="22.3100%" y="223.50"></text></g><g><title>check_mod_attrs (217,662 samples, 0.55%)</title><rect x="21.9293%" y="229" width="0.5517%" height="15" fill="rgb(225,111,53)"/><text x="22.1793%" y="239.50"></text></g><g><title>lookup_stability (41,420 samples, 0.10%)</title><rect x="22.7703%" y="213" width="0.1050%" height="15" fill="rgb(238,160,17)"/><text x="23.0203%" y="223.50"></text></g><g><title>check_mod_unstable_api_usage (121,872 samples, 0.31%)</title><rect x="22.5837%" y="229" width="0.3089%" height="15" fill="rgb(214,148,48)"/><text x="22.8337%" y="239.50"></text></g><g><title>misc_checking_1 (424,295 samples, 1.08%)</title><rect x="21.8868%" y="245" width="1.0755%" height="15" fill="rgb(232,36,49)"/><text x="22.1368%" y="255.50"></text></g><g><title>liveness_and_intrinsic_checking (64,100 samples, 0.16%)</title><rect x="22.9654%" y="229" width="0.1625%" height="15" fill="rgb(209,103,24)"/><text x="23.2154%" y="239.50"></text></g><g><title>check_mod_liveness (51,230 samples, 0.13%)</title><rect x="22.9981%" y="213" width="0.1299%" height="15" fill="rgb(229,88,8)"/><text x="23.2481%" y="223.50"></text></g><g><title>misc_checking_2 (145,451 samples, 0.37%)</title><rect x="22.9623%" y="245" width="0.3687%" height="15" fill="rgb(213,181,19)"/><text x="23.2123%" y="255.50"></text></g><g><title>match_checking (80,121 samples, 0.20%)</title><rect x="23.1279%" y="229" width="0.2031%" height="15" fill="rgb(254,191,54)"/><text x="23.3779%" y="239.50"></text></g><g><title>check_match (76,231 samples, 0.19%)</title><rect x="23.1378%" y="213" width="0.1932%" height="15" fill="rgb(241,83,37)"/><text x="23.3878%" y="223.50"></text></g><g><title>check_private_in_public (57,070 samples, 0.14%)</title><rect x="23.3477%" y="229" width="0.1447%" height="15" fill="rgb(233,36,39)"/><text x="23.5977%" y="239.50"></text></g><g><title>death_checking (102,431 samples, 0.26%)</title><rect x="23.4924%" y="229" width="0.2596%" height="15" fill="rgb(226,3,54)"/><text x="23.7424%" y="239.50"></text></g><g><title>crate_lints (101,611 samples, 0.26%)</title><rect x="23.7553%" y="213" width="0.2576%" height="15" fill="rgb(245,192,40)"/><text x="24.0053%" y="223.50"></text></g><g><title>param_env (43,360 samples, 0.11%)</title><rect x="23.9029%" y="197" width="0.1099%" height="15" fill="rgb(238,167,29)"/><text x="24.1529%" y="207.50"></text></g><g><title>lint_checking (139,191 samples, 0.35%)</title><rect x="23.7520%" y="229" width="0.3528%" height="15" fill="rgb(232,182,51)"/><text x="24.0020%" y="239.50"></text></g><g><title>privacy_access_levels (74,181 samples, 0.19%)</title><rect x="24.1048%" y="229" width="0.1880%" height="15" fill="rgb(231,60,39)"/><text x="24.3548%" y="239.50"></text></g><g><title>privacy_checking_modules (150,252 samples, 0.38%)</title><rect x="24.2929%" y="229" width="0.3809%" height="15" fill="rgb(208,69,12)"/><text x="24.5429%" y="239.50"></text></g><g><title>check_mod_privacy (149,222 samples, 0.38%)</title><rect x="24.2955%" y="213" width="0.3782%" height="15" fill="rgb(235,93,37)"/><text x="24.5455%" y="223.50"></text></g><g><title>misc_checking_3 (544,626 samples, 1.38%)</title><rect x="23.3310%" y="245" width="1.3805%" height="15" fill="rgb(213,116,39)"/><text x="23.5810%" y="255.50"></text></g><g><title>coherent_trait (292,513 samples, 0.74%)</title><rect x="24.7888%" y="213" width="0.7415%" height="15" fill="rgb(222,207,29)"/><text x="25.0388%" y="223.50"></text></g><g><title>specialization_graph_of (286,653 samples, 0.73%)</title><rect x="24.8036%" y="197" width="0.7266%" height="15" fill="rgb(206,96,30)"/><text x="25.0536%" y="207.50"></text></g><g><title>coherence_checking (328,664 samples, 0.83%)</title><rect x="24.7605%" y="229" width="0.8331%" height="15" fill="rgb(218,138,4)"/><text x="25.0105%" y="239.50"></text></g><g><title>impl_parent (103,681 samples, 0.26%)</title><rect x="28.4242%" y="85" width="0.2628%" height="15" fill="rgb(250,191,14)"/><text x="28.6742%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_parent (78,401 samples, 0.20%)</title><rect x="28.4883%" y="69" width="0.1987%" height="15" fill="rgb(239,60,40)"/><text x="28.7383%" y="79.50"></text></g><g><title>impl_trait_ref (352,545 samples, 0.89%)</title><rect x="28.6870%" y="85" width="0.8936%" height="15" fill="rgb(206,27,48)"/><text x="28.9370%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (327,885 samples, 0.83%)</title><rect x="28.7495%" y="69" width="0.8311%" height="15" fill="rgb(225,35,8)"/><text x="28.9995%" y="79.50"></text></g><g><title>coherent_trait (603,757 samples, 1.53%)</title><rect x="28.1311%" y="117" width="1.5304%" height="15" fill="rgb(250,213,24)"/><text x="28.3811%" y="127.50"></text></g><g><title>specialization_graph_of (602,047 samples, 1.53%)</title><rect x="28.1354%" y="101" width="1.5261%" height="15" fill="rgb(247,123,22)"/><text x="28.3854%" y="111.50"></text></g><g><title>adt_destructor (612,877 samples, 1.55%)</title><rect x="28.1163%" y="149" width="1.5535%" height="15" fill="rgb(231,138,38)"/><text x="28.3663%" y="159.50"></text></g><g><title>metadata_decode_entry_adt_destructor (611,617 samples, 1.55%)</title><rect x="28.1195%" y="133" width="1.5503%" height="15" fill="rgb(231,145,46)"/><text x="28.3695%" y="143.50"></text></g><g><title>adt_def (44,111 samples, 0.11%)</title><rect x="29.7977%" y="85" width="0.1118%" height="15" fill="rgb(251,118,11)"/><text x="30.0477%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (43,851 samples, 0.11%)</title><rect x="29.7984%" y="69" width="0.1112%" height="15" fill="rgb(217,147,25)"/><text x="30.0484%" y="79.50"></text></g><g><title>item_attrs (41,261 samples, 0.10%)</title><rect x="29.8050%" y="53" width="0.1046%" height="15" fill="rgb(247,81,37)"/><text x="30.0550%" y="63.50"></text></g><g><title>metadata_decode_entry_item_attrs (40,981 samples, 0.10%)</title><rect x="29.8057%" y="37" width="0.1039%" height="15" fill="rgb(209,12,38)"/><text x="30.0557%" y="47.50"></text></g><g><title>adt_dtorck_constraint (47,791 samples, 0.12%)</title><rect x="29.7927%" y="101" width="0.1211%" height="15" fill="rgb(227,1,9)"/><text x="30.0427%" y="111.50"></text></g><g><title>adt_dtorck_constraint (84,381 samples, 0.21%)</title><rect x="29.7260%" y="117" width="0.2139%" height="15" fill="rgb(248,47,43)"/><text x="29.9760%" y="127.50"></text></g><g><title>adt_dtorck_constraint (107,721 samples, 0.27%)</title><rect x="29.6802%" y="133" width="0.2730%" height="15" fill="rgb(221,10,30)"/><text x="29.9302%" y="143.50"></text></g><g><title>adt_dtorck_constraint (112,731 samples, 0.29%)</title><rect x="29.6698%" y="149" width="0.2857%" height="15" fill="rgb(210,229,1)"/><text x="29.9198%" y="159.50"></text></g><g><title>adt_dtorck_constraint (763,839 samples, 1.94%)</title><rect x="28.0564%" y="165" width="1.9362%" height="15" fill="rgb(222,148,37)"/><text x="28.3064%" y="175.50">a..</text></g><g><title>dropck_outlives (816,479 samples, 2.07%)</title><rect x="27.9620%" y="181" width="2.0696%" height="15" fill="rgb(234,67,33)"/><text x="28.2120%" y="191.50">d..</text></g><g><title>evaluate_obligation (98,812 samples, 0.25%)</title><rect x="30.0316%" y="181" width="0.2505%" height="15" fill="rgb(247,98,35)"/><text x="30.2816%" y="191.50"></text></g><g><title>item_bodies_checking (1,918,102 samples, 4.86%)</title><rect x="25.6498%" y="229" width="4.8620%" height="15" fill="rgb(247,138,52)"/><text x="25.8998%" y="239.50">item_b..</text></g><g><title>typeck_item_bodies (1,916,242 samples, 4.86%)</title><rect x="25.6545%" y="213" width="4.8573%" height="15" fill="rgb(213,79,30)"/><text x="25.9045%" y="223.50">typeck..</text></g><g><title>typeck (1,907,312 samples, 4.83%)</title><rect x="25.6772%" y="197" width="4.8346%" height="15" fill="rgb(246,177,23)"/><text x="25.9272%" y="207.50">typeck</text></g><g><title>item_types_checking (1,451,836 samples, 3.68%)</title><rect x="30.5118%" y="229" width="3.6801%" height="15" fill="rgb(230,62,27)"/><text x="30.7618%" y="239.50">item..</text></g><g><title>check_mod_item_types (1,449,546 samples, 3.67%)</title><rect x="30.5176%" y="213" width="3.6743%" height="15" fill="rgb(216,154,8)"/><text x="30.7676%" y="223.50">chec..</text></g><g><title>fn_sig (71,070 samples, 0.18%)</title><rect x="34.4870%" y="197" width="0.1801%" height="15" fill="rgb(244,35,45)"/><text x="34.7370%" y="207.50"></text></g><g><title>generics_of (72,523 samples, 0.18%)</title><rect x="34.6671%" y="197" width="0.1838%" height="15" fill="rgb(251,115,12)"/><text x="34.9171%" y="207.50"></text></g><g><title>late_bound_vars_map (60,271 samples, 0.15%)</title><rect x="35.1111%" y="165" width="0.1528%" height="15" fill="rgb(240,54,50)"/><text x="35.3611%" y="175.50"></text></g><g><title>resolve_lifetimes (56,411 samples, 0.14%)</title><rect x="35.1209%" y="149" width="0.1430%" height="15" fill="rgb(233,84,52)"/><text x="35.3709%" y="159.50"></text></g><g><title>explicit_item_bounds (145,272 samples, 0.37%)</title><rect x="34.9340%" y="181" width="0.3682%" height="15" fill="rgb(207,117,47)"/><text x="35.1840%" y="191.50"></text></g><g><title>item_bounds (172,452 samples, 0.44%)</title><rect x="34.8809%" y="197" width="0.4371%" height="15" fill="rgb(249,43,39)"/><text x="35.1309%" y="207.50"></text></g><g><title>late_bound_vars_map (99,132 samples, 0.25%)</title><rect x="35.9636%" y="149" width="0.2513%" height="15" fill="rgb(209,38,44)"/><text x="36.2136%" y="159.50"></text></g><g><title>resolve_lifetimes (91,982 samples, 0.23%)</title><rect x="35.9817%" y="133" width="0.2332%" height="15" fill="rgb(236,212,23)"/><text x="36.2317%" y="143.50"></text></g><g><title>explicit_predicates_of (354,524 samples, 0.90%)</title><rect x="35.4620%" y="165" width="0.8986%" height="15" fill="rgb(242,79,21)"/><text x="35.7120%" y="175.50"></text></g><g><title>predicates_of (421,895 samples, 1.07%)</title><rect x="35.3180%" y="197" width="1.0694%" height="15" fill="rgb(211,96,35)"/><text x="35.5680%" y="207.50"></text></g><g><title>predicates_defined_on (397,005 samples, 1.01%)</title><rect x="35.3811%" y="181" width="1.0063%" height="15" fill="rgb(253,215,40)"/><text x="35.6311%" y="191.50"></text></g><g><title>type_collecting (1,085,992 samples, 2.75%)</title><rect x="34.1949%" y="229" width="2.7528%" height="15" fill="rgb(211,81,21)"/><text x="34.4449%" y="239.50">ty..</text></g><g><title>collect_mod_item_types (1,078,792 samples, 2.73%)</title><rect x="34.2131%" y="213" width="2.7345%" height="15" fill="rgb(208,190,38)"/><text x="34.4631%" y="223.50">co..</text></g><g><title>type_of (181,032 samples, 0.46%)</title><rect x="36.4888%" y="197" width="0.4589%" height="15" fill="rgb(235,213,38)"/><text x="36.7388%" y="207.50"></text></g><g><title>type_param_predicates (74,481 samples, 0.19%)</title><rect x="36.7589%" y="181" width="0.1888%" height="15" fill="rgb(237,122,38)"/><text x="37.0089%" y="191.50"></text></g><g><title>type_param_predicates (57,481 samples, 0.15%)</title><rect x="36.8019%" y="165" width="0.1457%" height="15" fill="rgb(244,218,35)"/><text x="37.0519%" y="175.50"></text></g><g><title>evaluate_obligation (109,592 samples, 0.28%)</title><rect x="38.4138%" y="197" width="0.2778%" height="15" fill="rgb(240,68,47)"/><text x="38.6638%" y="207.50"></text></g><g><title>implied_outlives_bounds (54,600 samples, 0.14%)</title><rect x="38.6916%" y="197" width="0.1384%" height="15" fill="rgb(210,16,53)"/><text x="38.9416%" y="207.50"></text></g><g><title>param_env (150,440 samples, 0.38%)</title><rect x="38.8300%" y="197" width="0.3813%" height="15" fill="rgb(235,124,12)"/><text x="39.0800%" y="207.50"></text></g><g><title>check_impl_item_well_formed (871,118 samples, 2.21%)</title><rect x="37.0818%" y="213" width="2.2081%" height="15" fill="rgb(224,169,11)"/><text x="37.3318%" y="223.50">c..</text></g><g><title>evaluate_obligation (59,401 samples, 0.15%)</title><rect x="40.3606%" y="197" width="0.1506%" height="15" fill="rgb(250,166,2)"/><text x="40.6106%" y="207.50"></text></g><g><title>param_env (79,660 samples, 0.20%)</title><rect x="40.5683%" y="197" width="0.2019%" height="15" fill="rgb(242,216,29)"/><text x="40.8183%" y="207.50"></text></g><g><title>check_item_well_formed (645,748 samples, 1.64%)</title><rect x="39.2899%" y="213" width="1.6368%" height="15" fill="rgb(230,116,27)"/><text x="39.5399%" y="223.50"></text></g><g><title>adt_sized_constraint (61,211 samples, 0.16%)</title><rect x="42.1417%" y="165" width="0.1552%" height="15" fill="rgb(228,99,48)"/><text x="42.3917%" y="175.50"></text></g><g><title>adt_sized_constraint (87,771 samples, 0.22%)</title><rect x="42.0916%" y="181" width="0.2225%" height="15" fill="rgb(253,11,6)"/><text x="42.3416%" y="191.50"></text></g><g><title>evaluate_obligation (230,533 samples, 0.58%)</title><rect x="41.8130%" y="197" width="0.5844%" height="15" fill="rgb(247,143,39)"/><text x="42.0630%" y="207.50"></text></g><g><title>implied_outlives_bounds (67,082 samples, 0.17%)</title><rect x="42.3974%" y="197" width="0.1700%" height="15" fill="rgb(236,97,10)"/><text x="42.6474%" y="207.50"></text></g><g><title>param_env (46,620 samples, 0.12%)</title><rect x="42.5674%" y="197" width="0.1182%" height="15" fill="rgb(233,208,19)"/><text x="42.8174%" y="207.50"></text></g><g><title>predicates_of (67,910 samples, 0.17%)</title><rect x="42.6856%" y="197" width="0.1721%" height="15" fill="rgb(216,164,2)"/><text x="42.9356%" y="207.50"></text></g><g><title>predicates_defined_on (57,760 samples, 0.15%)</title><rect x="42.7113%" y="181" width="0.1464%" height="15" fill="rgb(220,129,5)"/><text x="42.9613%" y="191.50"></text></g><g><title>analysis (10,815,830 samples, 27.42%)</title><rect x="15.5012%" y="261" width="27.4158%" height="15" fill="rgb(242,17,10)"/><text x="15.7512%" y="271.50">analysis</text></g><g><title>type_check_crate (7,182,260 samples, 18.21%)</title><rect x="24.7115%" y="245" width="18.2055%" height="15" fill="rgb(242,107,0)"/><text x="24.9615%" y="255.50">type_check_crate</text></g><g><title>wf_checking (2,354,236 samples, 5.97%)</title><rect x="36.9495%" y="229" width="5.9675%" height="15" fill="rgb(251,28,31)"/><text x="37.1995%" y="239.50">wf_check..</text></g><g><title>check_trait_item_well_formed (785,179 samples, 1.99%)</title><rect x="40.9267%" y="213" width="1.9903%" height="15" fill="rgb(233,223,10)"/><text x="41.1767%" y="223.50">c..</text></g><g><title>codegen_module (231,763 samples, 0.59%)</title><rect x="44.1563%" y="245" width="0.5875%" height="15" fill="rgb(215,21,27)"/><text x="44.4063%" y="255.50"></text></g><g><title>collect_and_partition_mono_items (57,151 samples, 0.14%)</title><rect x="44.7452%" y="245" width="0.1449%" height="15" fill="rgb(232,23,21)"/><text x="44.9952%" y="255.50"></text></g><g><title>codegen_crate (840,150 samples, 2.13%)</title><rect x="42.9508%" y="261" width="2.1296%" height="15" fill="rgb(244,5,23)"/><text x="43.2008%" y="271.50">c..</text></g><g><title>codegen_module_optimize (1,321,215 samples, 3.35%)</title><rect x="45.0804%" y="261" width="3.3490%" height="15" fill="rgb(226,81,46)"/><text x="45.3304%" y="271.50">cod..</text></g><g><title>LLVM_module_optimize (449,395 samples, 1.14%)</title><rect x="47.2903%" y="245" width="1.1391%" height="15" fill="rgb(247,70,30)"/><text x="47.5403%" y="255.50"></text></g><g><title>LLVM_lto_optimize (310,283 samples, 0.79%)</title><rect x="49.5448%" y="245" width="0.7865%" height="15" fill="rgb(212,68,19)"/><text x="49.7948%" y="255.50"></text></g><g><title>LLVM_module_codegen (2,722,220 samples, 6.90%)</title><rect x="50.3313%" y="245" width="6.9002%" height="15" fill="rgb(240,187,13)"/><text x="50.5813%" y="255.50">LLVM_modu..</text></g><g><title>LLVM_module_codegen_emit_obj (2,669,360 samples, 6.77%)</title><rect x="50.4653%" y="229" width="6.7662%" height="15" fill="rgb(223,113,26)"/><text x="50.7153%" y="239.50">LLVM_modu..</text></g><g><title>codegen_module_perform_lto (3,521,138 samples, 8.93%)</title><rect x="48.4294%" y="261" width="8.9253%" height="15" fill="rgb(206,192,2)"/><text x="48.6794%" y="271.50">codegen_modul..</text></g><g><title>AST_validation (62,530 samples, 0.16%)</title><rect x="57.6809%" y="245" width="0.1585%" height="15" fill="rgb(241,108,4)"/><text x="57.9309%" y="255.50"></text></g><g><title>crate_injection (50,070 samples, 0.13%)</title><rect x="57.8890%" y="245" width="0.1269%" height="15" fill="rgb(247,173,49)"/><text x="58.1390%" y="255.50"></text></g><g><title>macro_expand_crate (6,108,799 samples, 15.48%)</title><rect x="58.0160%" y="245" width="15.4845%" height="15" fill="rgb(224,114,35)"/><text x="58.2660%" y="255.50">macro_expand_crate</text></g><g><title>expand_crate (6,094,179 samples, 15.45%)</title><rect x="58.0530%" y="229" width="15.4474%" height="15" fill="rgb(245,159,27)"/><text x="58.3030%" y="239.50">expand_crate</text></g><g><title>metadata_register_crate (1,275,044 samples, 3.23%)</title><rect x="70.2685%" y="213" width="3.2320%" height="15" fill="rgb(245,172,44)"/><text x="70.5185%" y="223.50">met..</text></g><g><title>metadata_register_crate (451,255 samples, 1.14%)</title><rect x="72.3566%" y="197" width="1.1438%" height="15" fill="rgb(236,23,11)"/><text x="72.6066%" y="207.50"></text></g><g><title>pre_AST_expansion_lint_checks (82,351 samples, 0.21%)</title><rect x="73.5080%" y="245" width="0.2087%" height="15" fill="rgb(205,117,38)"/><text x="73.7580%" y="255.50"></text></g><g><title>finalize_macro_resolutions (115,071 samples, 0.29%)</title><rect x="73.7646%" y="229" width="0.2917%" height="15" fill="rgb(237,72,25)"/><text x="74.0146%" y="239.50"></text></g><g><title>late_resolve_crate (441,545 samples, 1.12%)</title><rect x="74.0562%" y="229" width="1.1192%" height="15" fill="rgb(244,70,9)"/><text x="74.3062%" y="239.50"></text></g><g><title>configure_and_expand (7,064,269 samples, 17.91%)</title><rect x="57.3547%" y="261" width="17.9064%" height="15" fill="rgb(217,125,39)"/><text x="57.6047%" y="271.50">configure_and_expand</text></g><g><title>resolve_crate (609,247 samples, 1.54%)</title><rect x="73.7168%" y="245" width="1.5443%" height="15" fill="rgb(235,36,10)"/><text x="73.9668%" y="255.50"></text></g><g><title>early_lint_checks (84,081 samples, 0.21%)</title><rect x="75.3786%" y="261" width="0.2131%" height="15" fill="rgb(251,123,47)"/><text x="75.6286%" y="271.50"></text></g><g><title>free_global_ctxt (1,856,840 samples, 4.71%)</title><rect x="75.5917%" y="261" width="4.7067%" height="15" fill="rgb(221,13,13)"/><text x="75.8417%" y="271.50">free_..</text></g><g><title>crate_hash (70,291 samples, 0.18%)</title><rect x="81.3094%" y="245" width="0.1782%" height="15" fill="rgb(238,131,9)"/><text x="81.5594%" y="255.50"></text></g><g><title>exported_symbols (64,861 samples, 0.16%)</title><rect x="81.5642%" y="245" width="0.1644%" height="15" fill="rgb(211,50,8)"/><text x="81.8142%" y="255.50"></text></g><g><title>reachable_non_generics (55,921 samples, 0.14%)</title><rect x="81.5869%" y="229" width="0.1417%" height="15" fill="rgb(245,182,24)"/><text x="81.8369%" y="239.50"></text></g><g><title>reachable_set (40,701 samples, 0.10%)</title><rect x="81.6255%" y="213" width="0.1032%" height="15" fill="rgb(242,14,37)"/><text x="81.8755%" y="223.50"></text></g><g><title>adt_def (66,421 samples, 0.17%)</title><rect x="82.7295%" y="197" width="0.1684%" height="15" fill="rgb(246,228,12)"/><text x="82.9795%" y="207.50"></text></g><g><title>metadata_decode_entry_adt_def (65,421 samples, 0.17%)</title><rect x="82.7321%" y="181" width="0.1658%" height="15" fill="rgb(213,55,15)"/><text x="82.9821%" y="191.50"></text></g><g><title>item_attrs (55,121 samples, 0.14%)</title><rect x="82.7582%" y="165" width="0.1397%" height="15" fill="rgb(209,9,3)"/><text x="83.0082%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (54,301 samples, 0.14%)</title><rect x="82.7603%" y="149" width="0.1376%" height="15" fill="rgb(230,59,30)"/><text x="83.0103%" y="159.50"></text></g><g><title>adt_sized_constraint (79,841 samples, 0.20%)</title><rect x="82.7139%" y="213" width="0.2024%" height="15" fill="rgb(209,121,21)"/><text x="82.9639%" y="223.50"></text></g><g><title>layout_of (183,272 samples, 0.46%)</title><rect x="82.6412%" y="229" width="0.4646%" height="15" fill="rgb(220,109,13)"/><text x="82.8912%" y="239.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (44,601 samples, 0.11%)</title><rect x="82.9927%" y="213" width="0.1131%" height="15" fill="rgb(232,18,1)"/><text x="83.2427%" y="223.50"></text></g><g><title>optimized_mir (837,349 samples, 2.12%)</title><rect x="81.8547%" y="245" width="2.1225%" height="15" fill="rgb(215,41,42)"/><text x="82.1047%" y="255.50">o..</text></g><g><title>mir_drops_elaborated_and_const_checked (343,785 samples, 0.87%)</title><rect x="83.1058%" y="229" width="0.8714%" height="15" fill="rgb(224,123,36)"/><text x="83.3558%" y="239.50"></text></g><g><title>generate_crate_metadata (1,498,047 samples, 3.80%)</title><rect x="80.2984%" y="261" width="3.7972%" height="15" fill="rgb(240,125,3)"/><text x="80.5484%" y="271.50">gene..</text></g><g><title>hir_lowering (531,145 samples, 1.35%)</title><rect x="84.0956%" y="261" width="1.3463%" height="15" fill="rgb(205,98,50)"/><text x="84.3456%" y="271.50"></text></g><g><title>finish_ongoing_codegen (3,524,519 samples, 8.93%)</title><rect x="85.4766%" y="245" width="8.9339%" height="15" fill="rgb(205,185,37)"/><text x="85.7266%" y="255.50">finish_ongoin..</text></g><g><title>link_crate (629,547 samples, 1.60%)</title><rect x="94.4105%" y="245" width="1.5958%" height="15" fill="rgb(238,207,15)"/><text x="94.6605%" y="255.50"></text></g><g><title>link_binary (620,557 samples, 1.57%)</title><rect x="94.4333%" y="229" width="1.5730%" height="15" fill="rgb(213,199,42)"/><text x="94.6833%" y="239.50"></text></g><g><title>link_rlib (406,065 samples, 1.03%)</title><rect x="94.9770%" y="213" width="1.0293%" height="15" fill="rgb(235,201,11)"/><text x="95.2270%" y="223.50"></text></g><g><title>link (4,175,236 samples, 10.58%)</title><rect x="85.4420%" y="261" width="10.5833%" height="15" fill="rgb(207,46,11)"/><text x="85.6920%" y="271.50">link</text></g><g><title>parse_crate (679,417 samples, 1.72%)</title><rect x="96.0253%" y="261" width="1.7222%" height="15" fill="rgb(241,35,35)"/><text x="96.2753%" y="271.50"></text></g><g><title>prepare_outputs (176,282 samples, 0.45%)</title><rect x="97.7619%" y="261" width="0.4468%" height="15" fill="rgb(243,32,47)"/><text x="98.0119%" y="271.50"></text></g><g><title>self_profile_alloc_query_strings (340,904 samples, 0.86%)</title><rect x="98.2087%" y="261" width="0.8641%" height="15" fill="rgb(247,202,23)"/><text x="98.4587%" y="271.50"></text></g><g><title>setup_global_ctxt (74,171 samples, 0.19%)</title><rect x="99.0750%" y="261" width="0.1880%" height="15" fill="rgb(219,102,11)"/><text x="99.3250%" y="271.50"></text></g><g><title>all (39,451,148 samples, 100%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="303.50"></text></g><g><title>rustc (39,451,148 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="287.50">rustc</text></g><g><title>write_crate_metadata (290,733 samples, 0.74%)</title><rect x="99.2631%" y="261" width="0.7369%" height="15" fill="rgb(216,99,12)"/><text x="99.5131%" y="271.50"></text></g></svg></svg>