<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (253,078,037 samples, 12.27%)</title><rect x="0.0226%" y="197" width="12.2686%" height="15" fill="rgb(227,0,7)"/><text x="0.2726%" y="207.50">LLVM_passes</text></g><g><title>needs_drop_raw (2,089,272 samples, 0.10%)</title><rect x="13.4204%" y="85" width="0.1013%" height="15" fill="rgb(217,0,24)"/><text x="13.6704%" y="95.50"></text></g><g><title>mir_const (11,020,764 samples, 0.53%)</title><rect x="13.1134%" y="133" width="0.5343%" height="15" fill="rgb(221,193,54)"/><text x="13.3634%" y="143.50"></text></g><g><title>unsafety_check_result (9,606,711 samples, 0.47%)</title><rect x="13.1820%" y="117" width="0.4657%" height="15" fill="rgb(248,212,6)"/><text x="13.4320%" y="127.50"></text></g><g><title>mir_built (8,351,586 samples, 0.40%)</title><rect x="13.2428%" y="101" width="0.4049%" height="15" fill="rgb(208,68,35)"/><text x="13.4928%" y="111.50"></text></g><g><title>mir_promoted (12,732,704 samples, 0.62%)</title><rect x="13.0695%" y="149" width="0.6173%" height="15" fill="rgb(232,128,0)"/><text x="13.3195%" y="159.50"></text></g><g><title>type_op_prove_predicate (4,185,141 samples, 0.20%)</title><rect x="13.8489%" y="149" width="0.2029%" height="15" fill="rgb(207,160,47)"/><text x="14.0989%" y="159.50"></text></g><g><title>MIR_borrow_checking (36,011,243 samples, 1.75%)</title><rect x="12.3062%" y="181" width="1.7457%" height="15" fill="rgb(228,23,34)"/><text x="12.5562%" y="191.50"></text></g><g><title>mir_borrowck (35,916,081 samples, 1.74%)</title><rect x="12.3108%" y="165" width="1.7411%" height="15" fill="rgb(218,30,26)"/><text x="12.5608%" y="175.50"></text></g><g><title>specialization_graph_of (2,743,919 samples, 0.13%)</title><rect x="14.3332%" y="117" width="0.1330%" height="15" fill="rgb(220,122,19)"/><text x="14.5832%" y="127.50"></text></g><g><title>resolve_instance (2,797,970 samples, 0.14%)</title><rect x="14.3307%" y="133" width="0.1356%" height="15" fill="rgb(250,228,42)"/><text x="14.5807%" y="143.50"></text></g><g><title>crate_lints (5,818,781 samples, 0.28%)</title><rect x="14.2432%" y="149" width="0.2821%" height="15" fill="rgb(240,193,28)"/><text x="14.4932%" y="159.50"></text></g><g><title>lint_checking (6,796,652 samples, 0.33%)</title><rect x="14.2431%" y="165" width="0.3295%" height="15" fill="rgb(216,20,37)"/><text x="14.4931%" y="175.50"></text></g><g><title>misc_checking_3 (8,957,165 samples, 0.43%)</title><rect x="14.2153%" y="181" width="0.4342%" height="15" fill="rgb(206,188,39)"/><text x="14.4653%" y="191.50"></text></g><g><title>impl_trait_ref (3,414,216 samples, 0.17%)</title><rect x="14.7742%" y="117" width="0.1655%" height="15" fill="rgb(217,207,13)"/><text x="15.0242%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,043,193 samples, 0.15%)</title><rect x="14.7922%" y="101" width="0.1475%" height="15" fill="rgb(231,73,38)"/><text x="15.0422%" y="111.50"></text></g><g><title>coherent_trait (6,291,936 samples, 0.31%)</title><rect x="14.6534%" y="149" width="0.3050%" height="15" fill="rgb(225,20,46)"/><text x="14.9034%" y="159.50"></text></g><g><title>specialization_graph_of (6,279,636 samples, 0.30%)</title><rect x="14.6540%" y="133" width="0.3044%" height="15" fill="rgb(210,31,41)"/><text x="14.9040%" y="143.50"></text></g><g><title>coherence_checking (6,337,997 samples, 0.31%)</title><rect x="14.6529%" y="165" width="0.3073%" height="15" fill="rgb(221,200,47)"/><text x="14.9029%" y="175.50"></text></g><g><title>evaluate_obligation (10,600,743 samples, 0.51%)</title><rect x="16.8504%" y="101" width="0.5139%" height="15" fill="rgb(226,26,5)"/><text x="17.1004%" y="111.50"></text></g><g><title>typeck (43,391,021 samples, 2.10%)</title><rect x="15.5075%" y="117" width="2.1035%" height="15" fill="rgb(249,33,26)"/><text x="15.7575%" y="127.50">t..</text></g><g><title>item_bodies_checking (54,693,491 samples, 2.65%)</title><rect x="14.9611%" y="165" width="2.6514%" height="15" fill="rgb(235,183,28)"/><text x="15.2111%" y="175.50">it..</text></g><g><title>typeck_item_bodies (54,690,821 samples, 2.65%)</title><rect x="14.9612%" y="149" width="2.6513%" height="15" fill="rgb(221,5,38)"/><text x="15.2112%" y="159.50">ty..</text></g><g><title>typeck (54,642,661 samples, 2.65%)</title><rect x="14.9636%" y="133" width="2.6489%" height="15" fill="rgb(247,18,42)"/><text x="15.2136%" y="143.50">ty..</text></g><g><title>mir_borrowck (7,812,072 samples, 0.38%)</title><rect x="17.7320%" y="101" width="0.3787%" height="15" fill="rgb(241,131,45)"/><text x="17.9820%" y="111.50"></text></g><g><title>mir_built (14,207,201 samples, 0.69%)</title><rect x="18.1199%" y="53" width="0.6887%" height="15" fill="rgb(249,31,29)"/><text x="18.3699%" y="63.50"></text></g><g><title>typeck (13,789,078 samples, 0.67%)</title><rect x="18.1401%" y="37" width="0.6685%" height="15" fill="rgb(225,111,53)"/><text x="18.3901%" y="47.50"></text></g><g><title>mir_const (16,005,530 samples, 0.78%)</title><rect x="18.1140%" y="85" width="0.7759%" height="15" fill="rgb(238,160,17)"/><text x="18.3640%" y="95.50"></text></g><g><title>unsafety_check_result (15,909,659 samples, 0.77%)</title><rect x="18.1187%" y="69" width="0.7713%" height="15" fill="rgb(214,148,48)"/><text x="18.3687%" y="79.50"></text></g><g><title>mir_promoted (16,080,810 samples, 0.78%)</title><rect x="18.1107%" y="101" width="0.7796%" height="15" fill="rgb(232,36,49)"/><text x="18.3607%" y="111.50"></text></g><g><title>type_of (25,280,058 samples, 1.23%)</title><rect x="17.6791%" y="133" width="1.2255%" height="15" fill="rgb(209,103,24)"/><text x="17.9291%" y="143.50"></text></g><g><title>mir_borrowck (25,267,278 samples, 1.22%)</title><rect x="17.6797%" y="117" width="1.2249%" height="15" fill="rgb(229,88,8)"/><text x="17.9297%" y="127.50"></text></g><g><title>item_types_checking (28,480,302 samples, 1.38%)</title><rect x="17.6125%" y="165" width="1.3807%" height="15" fill="rgb(213,181,19)"/><text x="17.8625%" y="175.50"></text></g><g><title>check_mod_item_types (28,477,522 samples, 1.38%)</title><rect x="17.6126%" y="149" width="1.3805%" height="15" fill="rgb(254,191,54)"/><text x="17.8626%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,919,612 samples, 0.14%)</title><rect x="19.0896%" y="149" width="0.1415%" height="15" fill="rgb(241,83,37)"/><text x="19.3396%" y="159.50"></text></g><g><title>analysis (146,174,602 samples, 7.09%)</title><rect x="12.2912%" y="197" width="7.0862%" height="15" fill="rgb(233,36,39)"/><text x="12.5412%" y="207.50">analysis</text></g><g><title>type_check_crate (97,526,765 samples, 4.73%)</title><rect x="14.6495%" y="181" width="4.7279%" height="15" fill="rgb(226,3,54)"/><text x="14.8995%" y="191.50">type_c..</text></g><g><title>wf_checking (6,088,575 samples, 0.30%)</title><rect x="19.0822%" y="165" width="0.2952%" height="15" fill="rgb(245,192,40)"/><text x="19.3322%" y="175.50"></text></g><g><title>check_item_well_formed (3,017,583 samples, 0.15%)</title><rect x="19.2311%" y="149" width="0.1463%" height="15" fill="rgb(238,167,29)"/><text x="19.4811%" y="159.50"></text></g><g><title>is_freeze_raw (2,201,022 samples, 0.11%)</title><rect x="23.6289%" y="149" width="0.1067%" height="15" fill="rgb(232,182,51)"/><text x="23.8789%" y="159.50"></text></g><g><title>is_unpin_raw (2,257,244 samples, 0.11%)</title><rect x="23.7356%" y="149" width="0.1094%" height="15" fill="rgb(231,60,39)"/><text x="23.9856%" y="159.50"></text></g><g><title>layout_of (3,316,077 samples, 0.16%)</title><rect x="23.8450%" y="149" width="0.1608%" height="15" fill="rgb(208,69,12)"/><text x="24.0950%" y="159.50"></text></g><g><title>predicates_of (2,577,042 samples, 0.12%)</title><rect x="24.2231%" y="133" width="0.1249%" height="15" fill="rgb(235,93,37)"/><text x="24.4731%" y="143.50"></text></g><g><title>param_env (7,076,635 samples, 0.34%)</title><rect x="24.0058%" y="149" width="0.3431%" height="15" fill="rgb(213,116,39)"/><text x="24.2558%" y="159.50"></text></g><g><title>fn_abi_of_instance (24,198,463 samples, 1.17%)</title><rect x="23.2130%" y="165" width="1.1731%" height="15" fill="rgb(222,207,29)"/><text x="23.4630%" y="175.50"></text></g><g><title>layout_of (2,874,444 samples, 0.14%)</title><rect x="24.4182%" y="165" width="0.1393%" height="15" fill="rgb(206,96,30)"/><text x="24.6682%" y="175.50"></text></g><g><title>codegen_module (105,416,453 samples, 5.11%)</title><rect x="19.5062%" y="181" width="5.1103%" height="15" fill="rgb(218,138,4)"/><text x="19.7562%" y="191.50">codege..</text></g><g><title>codegen_fn_attrs (2,556,333 samples, 0.12%)</title><rect x="24.8061%" y="133" width="0.1239%" height="15" fill="rgb(250,191,14)"/><text x="25.0561%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (3,797,290 samples, 0.18%)</title><rect x="25.1317%" y="117" width="0.1841%" height="15" fill="rgb(239,60,40)"/><text x="25.3817%" y="127.50"></text></g><g><title>optimized_mir (7,962,043 samples, 0.39%)</title><rect x="25.0573%" y="133" width="0.3860%" height="15" fill="rgb(206,27,48)"/><text x="25.3073%" y="143.50"></text></g><g><title>codegen_fulfill_obligation (3,557,627 samples, 0.17%)</title><rect x="25.5198%" y="117" width="0.1725%" height="15" fill="rgb(225,35,8)"/><text x="25.7698%" y="127.50"></text></g><g><title>specialization_graph_of (2,772,062 samples, 0.13%)</title><rect x="25.7668%" y="117" width="0.1344%" height="15" fill="rgb(250,213,24)"/><text x="26.0168%" y="127.50"></text></g><g><title>resolve_instance (10,119,590 samples, 0.49%)</title><rect x="25.4433%" y="133" width="0.4906%" height="15" fill="rgb(247,123,22)"/><text x="25.6933%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (29,422,082 samples, 1.43%)</title><rect x="24.6195%" y="149" width="1.4263%" height="15" fill="rgb(231,138,38)"/><text x="24.8695%" y="159.50"></text></g><g><title>monomorphization_collector (29,476,363 samples, 1.43%)</title><rect x="24.6194%" y="165" width="1.4289%" height="15" fill="rgb(231,145,46)"/><text x="24.8694%" y="175.50"></text></g><g><title>assert_symbols_are_distinct (3,289,965 samples, 0.16%)</title><rect x="26.0485%" y="149" width="0.1595%" height="15" fill="rgb(251,118,11)"/><text x="26.2985%" y="159.50"></text></g><g><title>symbol_name (2,923,250 samples, 0.14%)</title><rect x="26.0663%" y="133" width="0.1417%" height="15" fill="rgb(217,147,25)"/><text x="26.3163%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (34,090,272 samples, 1.65%)</title><rect x="24.6171%" y="181" width="1.6526%" height="15" fill="rgb(247,81,37)"/><text x="24.8671%" y="191.50"></text></g><g><title>partition_and_assert_distinct_symbols (4,567,789 samples, 0.22%)</title><rect x="26.0483%" y="165" width="0.2214%" height="15" fill="rgb(209,12,38)"/><text x="26.2983%" y="175.50"></text></g><g><title>codegen_crate (142,260,190 samples, 6.90%)</title><rect x="19.3776%" y="197" width="6.8964%" height="15" fill="rgb(227,1,9)"/><text x="19.6276%" y="207.50">codegen_c..</text></g><g><title>codegen_module_optimize (774,129,567 samples, 37.53%)</title><rect x="26.2741%" y="197" width="37.5279%" height="15" fill="rgb(248,47,43)"/><text x="26.5241%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (752,503,015 samples, 36.48%)</title><rect x="27.3225%" y="181" width="36.4795%" height="15" fill="rgb(221,10,30)"/><text x="27.5725%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (236,125,136 samples, 11.45%)</title><rect x="64.5211%" y="181" width="11.4468%" height="15" fill="rgb(210,229,1)"/><text x="64.7711%" y="191.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (257,322,080 samples, 12.47%)</title><rect x="75.9678%" y="181" width="12.4744%" height="15" fill="rgb(222,148,37)"/><text x="76.2178%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (254,437,808 samples, 12.33%)</title><rect x="76.1077%" y="165" width="12.3345%" height="15" fill="rgb(234,67,33)"/><text x="76.3577%" y="175.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (32,882,301 samples, 1.59%)</title><rect x="88.4422%" y="181" width="1.5941%" height="15" fill="rgb(247,98,35)"/><text x="88.6922%" y="191.50"></text></g><g><title>codegen_module_perform_lto (542,121,194 samples, 26.28%)</title><rect x="63.8020%" y="197" width="26.2807%" height="15" fill="rgb(247,138,52)"/><text x="64.0520%" y="207.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (9,584,271 samples, 0.46%)</title><rect x="90.0973%" y="181" width="0.4646%" height="15" fill="rgb(213,79,30)"/><text x="90.3473%" y="191.50"></text></g><g><title>expand_crate (9,573,441 samples, 0.46%)</title><rect x="90.0978%" y="165" width="0.4641%" height="15" fill="rgb(246,177,23)"/><text x="90.3478%" y="175.50"></text></g><g><title>late_resolve_crate (2,406,815 samples, 0.12%)</title><rect x="90.5806%" y="165" width="0.1167%" height="15" fill="rgb(230,62,27)"/><text x="90.8306%" y="175.50"></text></g><g><title>configure_and_expand (12,789,785 samples, 0.62%)</title><rect x="90.0827%" y="197" width="0.6200%" height="15" fill="rgb(216,154,8)"/><text x="90.3327%" y="207.50"></text></g><g><title>resolve_crate (2,698,219 samples, 0.13%)</title><rect x="90.5719%" y="181" width="0.1308%" height="15" fill="rgb(244,35,45)"/><text x="90.8219%" y="191.50"></text></g><g><title>free_global_ctxt (10,853,805 samples, 0.53%)</title><rect x="90.7312%" y="197" width="0.5262%" height="15" fill="rgb(251,115,12)"/><text x="90.9812%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (8,595,619 samples, 0.42%)</title><rect x="91.7359%" y="165" width="0.4167%" height="15" fill="rgb(240,54,50)"/><text x="91.9859%" y="175.50"></text></g><g><title>optimized_mir (16,010,224 samples, 0.78%)</title><rect x="91.3788%" y="181" width="0.7761%" height="15" fill="rgb(233,84,52)"/><text x="91.6288%" y="191.50"></text></g><g><title>generate_crate_metadata (18,679,698 samples, 0.91%)</title><rect x="91.2574%" y="197" width="0.9055%" height="15" fill="rgb(207,117,47)"/><text x="91.5074%" y="207.50"></text></g><g><title>hir_lowering (2,866,220 samples, 0.14%)</title><rect x="92.1629%" y="197" width="0.1389%" height="15" fill="rgb(249,43,39)"/><text x="92.4129%" y="207.50"></text></g><g><title>finish_ongoing_codegen (148,897,531 samples, 7.22%)</title><rect x="92.3027%" y="181" width="7.2182%" height="15" fill="rgb(209,38,44)"/><text x="92.5527%" y="191.50">finish_ong..</text></g><g><title>link_crate (2,677,499 samples, 0.13%)</title><rect x="99.5209%" y="181" width="0.1298%" height="15" fill="rgb(236,212,23)"/><text x="99.7709%" y="191.50"></text></g><g><title>link_binary (2,653,458 samples, 0.13%)</title><rect x="99.5220%" y="165" width="0.1286%" height="15" fill="rgb(242,79,21)"/><text x="99.7720%" y="175.50"></text></g><g><title>link (151,602,430 samples, 7.35%)</title><rect x="92.3019%" y="197" width="7.3493%" height="15" fill="rgb(211,96,35)"/><text x="92.5519%" y="207.50">link</text></g><g><title>parse_crate (3,565,888 samples, 0.17%)</title><rect x="99.6512%" y="197" width="0.1729%" height="15" fill="rgb(253,215,40)"/><text x="99.9012%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (2,913,111 samples, 0.14%)</title><rect x="99.8340%" y="197" width="0.1412%" height="15" fill="rgb(211,81,21)"/><text x="100.0840%" y="207.50"></text></g><g><title>all (2,062,809,408 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (2,062,809,408 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>