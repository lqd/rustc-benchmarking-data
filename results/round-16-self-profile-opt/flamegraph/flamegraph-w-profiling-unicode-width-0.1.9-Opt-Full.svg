<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="294" onload="init(evt)" viewBox="0 0 1200 294" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="294" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="277.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="277.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (5,680,483 samples, 6.60%)</title><rect x="0.9218%" y="213" width="6.5964%" height="15" fill="rgb(227,0,7)"/><text x="1.1718%" y="223.50">LLVM_pass..</text></g><g><title>codegen_generate_lto_work (106,191 samples, 0.12%)</title><rect x="7.3949%" y="197" width="0.1233%" height="15" fill="rgb(217,0,24)"/><text x="7.6449%" y="207.50"></text></g><g><title>LLVM_thin_lto_global_analysis (95,121 samples, 0.11%)</title><rect x="7.4078%" y="181" width="0.1105%" height="15" fill="rgb(221,193,54)"/><text x="7.6578%" y="191.50"></text></g><g><title>codegen_fn_attrs (94,841 samples, 0.11%)</title><rect x="12.2793%" y="117" width="0.1101%" height="15" fill="rgb(248,212,6)"/><text x="12.5293%" y="127.50"></text></g><g><title>adt_drop_tys (127,401 samples, 0.15%)</title><rect x="12.8375%" y="85" width="0.1479%" height="15" fill="rgb(208,68,35)"/><text x="13.0875%" y="95.50"></text></g><g><title>needs_drop_raw (240,073 samples, 0.28%)</title><rect x="12.8188%" y="101" width="0.2788%" height="15" fill="rgb(232,128,0)"/><text x="13.0688%" y="111.50"></text></g><g><title>is_copy_raw (96,571 samples, 0.11%)</title><rect x="12.9855%" y="85" width="0.1121%" height="15" fill="rgb(207,160,47)"/><text x="13.2355%" y="95.50"></text></g><g><title>codegen_fulfill_obligation (149,722 samples, 0.17%)</title><rect x="13.1446%" y="85" width="0.1739%" height="15" fill="rgb(228,23,34)"/><text x="13.3946%" y="95.50"></text></g><g><title>specialization_graph_of (352,914 samples, 0.41%)</title><rect x="13.3207%" y="85" width="0.4098%" height="15" fill="rgb(218,30,26)"/><text x="13.5707%" y="95.50"></text></g><g><title>impl_trait_ref (203,202 samples, 0.24%)</title><rect x="13.4945%" y="69" width="0.2360%" height="15" fill="rgb(220,122,19)"/><text x="13.7445%" y="79.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (183,992 samples, 0.21%)</title><rect x="13.5168%" y="53" width="0.2137%" height="15" fill="rgb(250,228,42)"/><text x="13.7668%" y="63.50"></text></g><g><title>resolve_instance (563,417 samples, 0.65%)</title><rect x="13.0976%" y="101" width="0.6543%" height="15" fill="rgb(240,193,28)"/><text x="13.3476%" y="111.50"></text></g><g><title>thir_body (155,213 samples, 0.18%)</title><rect x="13.7583%" y="101" width="0.1802%" height="15" fill="rgb(216,20,37)"/><text x="14.0083%" y="111.50"></text></g><g><title>mir_const (1,690,400 samples, 1.96%)</title><rect x="11.9813%" y="149" width="1.9630%" height="15" fill="rgb(206,188,39)"/><text x="12.2313%" y="159.50">m..</text></g><g><title>unsafety_check_result (1,484,366 samples, 1.72%)</title><rect x="12.2205%" y="133" width="1.7237%" height="15" fill="rgb(217,207,13)"/><text x="12.4705%" y="143.50"></text></g><g><title>mir_built (1,338,925 samples, 1.55%)</title><rect x="12.3894%" y="117" width="1.5548%" height="15" fill="rgb(231,73,38)"/><text x="12.6394%" y="127.50"></text></g><g><title>thir_body (1,538,866 samples, 1.79%)</title><rect x="15.5531%" y="85" width="1.7870%" height="15" fill="rgb(225,20,46)"/><text x="15.8031%" y="95.50">t..</text></g><g><title>lit_to_const (178,230 samples, 0.21%)</title><rect x="17.1331%" y="69" width="0.2070%" height="15" fill="rgb(210,31,41)"/><text x="17.3831%" y="79.50"></text></g><g><title>mir_promoted (5,211,939 samples, 6.05%)</title><rect x="11.2890%" y="165" width="6.0523%" height="15" fill="rgb(221,200,47)"/><text x="11.5390%" y="175.50">mir_prom..</text></g><g><title>mir_const_qualif (2,925,353 samples, 3.40%)</title><rect x="13.9443%" y="149" width="3.3970%" height="15" fill="rgb(226,26,5)"/><text x="14.1943%" y="159.50">mir..</text></g><g><title>mir_const (2,836,191 samples, 3.29%)</title><rect x="14.0478%" y="133" width="3.2935%" height="15" fill="rgb(249,33,26)"/><text x="14.2978%" y="143.50">mir..</text></g><g><title>unsafety_check_result (2,739,691 samples, 3.18%)</title><rect x="14.1598%" y="117" width="3.1814%" height="15" fill="rgb(235,183,28)"/><text x="14.4098%" y="127.50">uns..</text></g><g><title>mir_built (2,671,628 samples, 3.10%)</title><rect x="14.2389%" y="101" width="3.1024%" height="15" fill="rgb(221,5,38)"/><text x="14.4889%" y="111.50">mir..</text></g><g><title>type_op_normalize_predicate (198,242 samples, 0.23%)</title><rect x="17.3647%" y="165" width="0.2302%" height="15" fill="rgb(247,18,42)"/><text x="17.6147%" y="175.50"></text></g><g><title>normalize_projection_ty (98,182 samples, 0.11%)</title><rect x="17.4808%" y="149" width="0.1140%" height="15" fill="rgb(241,131,45)"/><text x="17.7308%" y="159.50"></text></g><g><title>MIR_borrow_checking (8,536,274 samples, 9.91%)</title><rect x="8.0702%" y="197" width="9.9127%" height="15" fill="rgb(249,31,29)"/><text x="8.3202%" y="207.50">MIR_borrow_che..</text></g><g><title>mir_borrowck (8,515,584 samples, 9.89%)</title><rect x="8.0943%" y="181" width="9.8886%" height="15" fill="rgb(225,111,53)"/><text x="8.3443%" y="191.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (334,163 samples, 0.39%)</title><rect x="17.5949%" y="165" width="0.3880%" height="15" fill="rgb(238,160,17)"/><text x="17.8449%" y="175.50"></text></g><g><title>MIR_effect_checking (158,752 samples, 0.18%)</title><rect x="17.9829%" y="197" width="0.1843%" height="15" fill="rgb(214,148,48)"/><text x="18.2329%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (136,081 samples, 0.16%)</title><rect x="18.0092%" y="181" width="0.1580%" height="15" fill="rgb(232,36,49)"/><text x="18.2592%" y="191.50"></text></g><g><title>hir_module_items (196,992 samples, 0.23%)</title><rect x="18.1673%" y="197" width="0.2288%" height="15" fill="rgb(209,103,24)"/><text x="18.4173%" y="207.50"></text></g><g><title>should_inherit_track_caller (91,041 samples, 0.11%)</title><rect x="19.2167%" y="149" width="0.1057%" height="15" fill="rgb(229,88,8)"/><text x="19.4667%" y="159.50"></text></g><g><title>codegen_fn_attrs (273,722 samples, 0.32%)</title><rect x="19.0476%" y="165" width="0.3179%" height="15" fill="rgb(213,181,19)"/><text x="19.2976%" y="175.50"></text></g><g><title>check_mod_attrs (801,549 samples, 0.93%)</title><rect x="18.4353%" y="181" width="0.9308%" height="15" fill="rgb(254,191,54)"/><text x="18.6853%" y="191.50"></text></g><g><title>check_mod_const_bodies (88,291 samples, 0.10%)</title><rect x="19.3661%" y="181" width="0.1025%" height="15" fill="rgb(241,83,37)"/><text x="19.6161%" y="191.50"></text></g><g><title>lookup_deprecation_entry (127,882 samples, 0.15%)</title><rect x="19.7045%" y="165" width="0.1485%" height="15" fill="rgb(233,36,39)"/><text x="19.9545%" y="175.50"></text></g><g><title>check_mod_unstable_api_usage (318,074 samples, 0.37%)</title><rect x="19.5670%" y="181" width="0.3694%" height="15" fill="rgb(226,3,54)"/><text x="19.8170%" y="191.50"></text></g><g><title>misc_checking_1 (1,381,795 samples, 1.60%)</title><rect x="18.3965%" y="197" width="1.6046%" height="15" fill="rgb(245,192,40)"/><text x="18.6465%" y="207.50"></text></g><g><title>liveness_and_intrinsic_checking (180,652 samples, 0.21%)</title><rect x="20.0028%" y="181" width="0.2098%" height="15" fill="rgb(238,167,29)"/><text x="20.2528%" y="191.50"></text></g><g><title>check_mod_liveness (129,191 samples, 0.15%)</title><rect x="20.0625%" y="165" width="0.1500%" height="15" fill="rgb(232,182,51)"/><text x="20.3125%" y="175.50"></text></g><g><title>misc_checking_2 (384,355 samples, 0.45%)</title><rect x="20.0011%" y="197" width="0.4463%" height="15" fill="rgb(231,60,39)"/><text x="20.2511%" y="207.50"></text></g><g><title>match_checking (202,263 samples, 0.23%)</title><rect x="20.2125%" y="181" width="0.2349%" height="15" fill="rgb(208,69,12)"/><text x="20.4625%" y="191.50"></text></g><g><title>check_match (195,103 samples, 0.23%)</title><rect x="20.2208%" y="165" width="0.2266%" height="15" fill="rgb(235,93,37)"/><text x="20.4708%" y="175.50"></text></g><g><title>death_checking (131,162 samples, 0.15%)</title><rect x="20.5312%" y="181" width="0.1523%" height="15" fill="rgb(213,116,39)"/><text x="20.7812%" y="191.50"></text></g><g><title>eval_to_const_value_raw (3,122,145 samples, 3.63%)</title><rect x="22.1743%" y="85" width="3.6256%" height="15" fill="rgb(222,207,29)"/><text x="22.4243%" y="95.50">eval..</text></g><g><title>eval_to_const_value_raw (3,121,185 samples, 3.62%)</title><rect x="22.1754%" y="69" width="3.6244%" height="15" fill="rgb(206,96,30)"/><text x="22.4254%" y="79.50">eval..</text></g><g><title>eval_to_allocation_raw (3,119,405 samples, 3.62%)</title><rect x="22.1775%" y="53" width="3.6224%" height="15" fill="rgb(218,138,4)"/><text x="22.4275%" y="63.50">eval..</text></g><g><title>promoted_mir (644,737 samples, 0.75%)</title><rect x="25.0512%" y="37" width="0.7487%" height="15" fill="rgb(250,191,14)"/><text x="25.3012%" y="47.50"></text></g><g><title>eval_to_const_value_raw (4,092,494 samples, 4.75%)</title><rect x="21.0512%" y="149" width="4.7524%" height="15" fill="rgb(239,60,40)"/><text x="21.3012%" y="159.50">eval_t..</text></g><g><title>eval_to_const_value_raw (4,084,344 samples, 4.74%)</title><rect x="21.0607%" y="133" width="4.7429%" height="15" fill="rgb(206,27,48)"/><text x="21.3107%" y="143.50">eval_t..</text></g><g><title>eval_to_allocation_raw (4,076,894 samples, 4.73%)</title><rect x="21.0693%" y="117" width="4.7343%" height="15" fill="rgb(225,35,8)"/><text x="21.3193%" y="127.50">eval_t..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (3,133,285 samples, 3.64%)</title><rect x="22.1651%" y="101" width="3.6385%" height="15" fill="rgb(250,213,24)"/><text x="22.4151%" y="111.50">try_..</text></g><g><title>param_env (130,162 samples, 0.15%)</title><rect x="25.8036%" y="149" width="0.1511%" height="15" fill="rgb(247,123,22)"/><text x="26.0536%" y="159.50"></text></g><g><title>crate_lints (4,539,470 samples, 5.27%)</title><rect x="20.6851%" y="165" width="5.2714%" height="15" fill="rgb(231,138,38)"/><text x="20.9351%" y="175.50">crate_..</text></g><g><title>lint_checking (5,036,345 samples, 5.85%)</title><rect x="20.6835%" y="181" width="5.8484%" height="15" fill="rgb(231,145,46)"/><text x="20.9335%" y="191.50">lint_ch..</text></g><g><title>module_lints (495,445 samples, 0.58%)</title><rect x="25.9565%" y="165" width="0.5753%" height="15" fill="rgb(251,118,11)"/><text x="26.2065%" y="175.50"></text></g><g><title>lint_mod (492,055 samples, 0.57%)</title><rect x="25.9605%" y="149" width="0.5714%" height="15" fill="rgb(217,147,25)"/><text x="26.2105%" y="159.50"></text></g><g><title>privacy_checking_modules (296,404 samples, 0.34%)</title><rect x="26.6184%" y="181" width="0.3442%" height="15" fill="rgb(247,81,37)"/><text x="26.8684%" y="191.50"></text></g><g><title>check_mod_privacy (294,584 samples, 0.34%)</title><rect x="26.6206%" y="165" width="0.3421%" height="15" fill="rgb(209,12,38)"/><text x="26.8706%" y="175.50"></text></g><g><title>misc_checking_3 (5,621,132 samples, 6.53%)</title><rect x="20.4474%" y="197" width="6.5275%" height="15" fill="rgb(227,1,9)"/><text x="20.6974%" y="207.50">misc_chec..</text></g><g><title>coherent_trait (111,561 samples, 0.13%)</title><rect x="27.0462%" y="165" width="0.1295%" height="15" fill="rgb(248,47,43)"/><text x="27.2962%" y="175.50"></text></g><g><title>specialization_graph_of (102,591 samples, 0.12%)</title><rect x="27.0566%" y="149" width="0.1191%" height="15" fill="rgb(221,10,30)"/><text x="27.3066%" y="159.50"></text></g><g><title>coherence_checking (176,782 samples, 0.21%)</title><rect x="27.0254%" y="181" width="0.2053%" height="15" fill="rgb(210,229,1)"/><text x="27.2754%" y="191.50"></text></g><g><title>adt_sized_constraint (93,711 samples, 0.11%)</title><rect x="32.4016%" y="101" width="0.1088%" height="15" fill="rgb(222,148,37)"/><text x="32.6516%" y="111.50"></text></g><g><title>adt_sized_constraint (174,812 samples, 0.20%)</title><rect x="32.3146%" y="117" width="0.2030%" height="15" fill="rgb(234,67,33)"/><text x="32.5646%" y="127.50"></text></g><g><title>associated_item (478,955 samples, 0.56%)</title><rect x="32.7359%" y="101" width="0.5562%" height="15" fill="rgb(247,98,35)"/><text x="32.9859%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (358,063 samples, 0.42%)</title><rect x="32.8763%" y="85" width="0.4158%" height="15" fill="rgb(247,138,52)"/><text x="33.1263%" y="95.50"></text></g><g><title>associated_items (681,119 samples, 0.79%)</title><rect x="32.5271%" y="117" width="0.7909%" height="15" fill="rgb(213,79,30)"/><text x="32.7771%" y="127.50"></text></g><g><title>coherent_trait (131,122 samples, 0.15%)</title><rect x="33.4930%" y="53" width="0.1523%" height="15" fill="rgb(246,177,23)"/><text x="33.7430%" y="63.50"></text></g><g><title>specialization_graph_of (127,992 samples, 0.15%)</title><rect x="33.4966%" y="37" width="0.1486%" height="15" fill="rgb(230,62,27)"/><text x="33.7466%" y="47.50"></text></g><g><title>adt_destructor (153,092 samples, 0.18%)</title><rect x="33.4774%" y="85" width="0.1778%" height="15" fill="rgb(216,154,8)"/><text x="33.7274%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (149,772 samples, 0.17%)</title><rect x="33.4812%" y="69" width="0.1739%" height="15" fill="rgb(244,35,45)"/><text x="33.7312%" y="79.50"></text></g><g><title>dropck_outlives (315,633 samples, 0.37%)</title><rect x="33.3675%" y="117" width="0.3665%" height="15" fill="rgb(251,115,12)"/><text x="33.6175%" y="127.50"></text></g><g><title>adt_dtorck_constraint (247,003 samples, 0.29%)</title><rect x="33.4472%" y="101" width="0.2868%" height="15" fill="rgb(240,54,50)"/><text x="33.6972%" y="111.50"></text></g><g><title>associated_item (92,971 samples, 0.11%)</title><rect x="34.5297%" y="69" width="0.1080%" height="15" fill="rgb(233,84,52)"/><text x="34.7797%" y="79.50"></text></g><g><title>metadata_decode_entry_associated_item (91,951 samples, 0.11%)</title><rect x="34.5309%" y="53" width="0.1068%" height="15" fill="rgb(207,117,47)"/><text x="34.7809%" y="63.50"></text></g><g><title>impl_item_implementor_ids (99,341 samples, 0.12%)</title><rect x="34.5235%" y="101" width="0.1154%" height="15" fill="rgb(249,43,39)"/><text x="34.7735%" y="111.50"></text></g><g><title>associated_items (97,301 samples, 0.11%)</title><rect x="34.5259%" y="85" width="0.1130%" height="15" fill="rgb(209,38,44)"/><text x="34.7759%" y="95.50"></text></g><g><title>predicates_of (100,040 samples, 0.12%)</title><rect x="34.7157%" y="101" width="0.1162%" height="15" fill="rgb(236,212,23)"/><text x="34.9657%" y="111.50"></text></g><g><title>trait_impls_of (171,350 samples, 0.20%)</title><rect x="34.8434%" y="101" width="0.1990%" height="15" fill="rgb(242,79,21)"/><text x="35.0934%" y="111.50"></text></g><g><title>evaluate_obligation (1,128,052 samples, 1.31%)</title><rect x="33.7340%" y="117" width="1.3099%" height="15" fill="rgb(211,96,35)"/><text x="33.9840%" y="127.50"></text></g><g><title>fn_sig (103,861 samples, 0.12%)</title><rect x="35.0561%" y="117" width="0.1206%" height="15" fill="rgb(253,215,40)"/><text x="35.3061%" y="127.50"></text></g><g><title>metadata_decode_entry_fn_sig (95,761 samples, 0.11%)</title><rect x="35.0655%" y="101" width="0.1112%" height="15" fill="rgb(211,81,21)"/><text x="35.3155%" y="111.50"></text></g><g><title>explicit_predicates_of (105,821 samples, 0.12%)</title><rect x="35.6212%" y="53" width="0.1229%" height="15" fill="rgb(208,190,38)"/><text x="35.8712%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (102,781 samples, 0.12%)</title><rect x="35.6248%" y="37" width="0.1194%" height="15" fill="rgb(235,213,38)"/><text x="35.8748%" y="47.50"></text></g><g><title>predicates_of (130,992 samples, 0.15%)</title><rect x="35.5967%" y="85" width="0.1521%" height="15" fill="rgb(237,122,38)"/><text x="35.8467%" y="95.50"></text></g><g><title>predicates_defined_on (117,342 samples, 0.14%)</title><rect x="35.6126%" y="69" width="0.1363%" height="15" fill="rgb(244,218,35)"/><text x="35.8626%" y="79.50"></text></g><g><title>is_copy_raw (357,765 samples, 0.42%)</title><rect x="35.4119%" y="117" width="0.4155%" height="15" fill="rgb(240,68,47)"/><text x="35.6619%" y="127.50"></text></g><g><title>evaluate_obligation (332,034 samples, 0.39%)</title><rect x="35.4418%" y="101" width="0.3856%" height="15" fill="rgb(210,16,53)"/><text x="35.6918%" y="111.50"></text></g><g><title>method_autoderef_steps (180,871 samples, 0.21%)</title><rect x="35.8599%" y="117" width="0.2100%" height="15" fill="rgb(235,124,12)"/><text x="36.1099%" y="127.50"></text></g><g><title>evaluate_obligation (98,411 samples, 0.11%)</title><rect x="35.9557%" y="101" width="0.1143%" height="15" fill="rgb(224,169,11)"/><text x="36.2057%" y="111.50"></text></g><g><title>explicit_predicates_of (124,981 samples, 0.15%)</title><rect x="36.2239%" y="85" width="0.1451%" height="15" fill="rgb(250,166,2)"/><text x="36.4739%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (107,591 samples, 0.12%)</title><rect x="36.2441%" y="69" width="0.1249%" height="15" fill="rgb(242,216,29)"/><text x="36.4941%" y="79.50"></text></g><g><title>predicates_of (275,473 samples, 0.32%)</title><rect x="36.0852%" y="117" width="0.3199%" height="15" fill="rgb(230,116,27)"/><text x="36.3352%" y="127.50"></text></g><g><title>predicates_defined_on (208,172 samples, 0.24%)</title><rect x="36.1634%" y="101" width="0.2417%" height="15" fill="rgb(228,99,48)"/><text x="36.4134%" y="111.50"></text></g><g><title>trait_impls_of (94,521 samples, 0.11%)</title><rect x="36.4388%" y="117" width="0.1098%" height="15" fill="rgb(253,11,6)"/><text x="36.6888%" y="127.50"></text></g><g><title>typeck (7,138,169 samples, 8.29%)</title><rect x="28.4034%" y="133" width="8.2891%" height="15" fill="rgb(247,143,39)"/><text x="28.6534%" y="143.50">typeck</text></g><g><title>item_bodies_checking (8,125,100 samples, 9.44%)</title><rect x="27.2606%" y="181" width="9.4352%" height="15" fill="rgb(236,97,10)"/><text x="27.5106%" y="191.50">item_bodies_c..</text></g><g><title>typeck_item_bodies (8,122,270 samples, 9.43%)</title><rect x="27.2639%" y="165" width="9.4319%" height="15" fill="rgb(233,208,19)"/><text x="27.5139%" y="175.50">typeck_item_b..</text></g><g><title>typeck (8,106,370 samples, 9.41%)</title><rect x="27.2824%" y="149" width="9.4134%" height="15" fill="rgb(216,164,2)"/><text x="27.5324%" y="159.50">typeck</text></g><g><title>item_types_checking (10,744,998 samples, 12.48%)</title><rect x="36.6958%" y="181" width="12.4775%" height="15" fill="rgb(220,129,5)"/><text x="36.9458%" y="191.50">item_types_checking</text></g><g><title>check_mod_item_types (10,738,448 samples, 12.47%)</title><rect x="36.7034%" y="165" width="12.4699%" height="15" fill="rgb(242,17,10)"/><text x="36.9534%" y="175.50">check_mod_item_types</text></g><g><title>typeck (10,540,136 samples, 12.24%)</title><rect x="36.9337%" y="149" width="12.2396%" height="15" fill="rgb(242,107,0)"/><text x="37.1837%" y="159.50">typeck</text></g><g><title>late_bound_vars_map (104,411 samples, 0.12%)</title><rect x="49.5403%" y="133" width="0.1212%" height="15" fill="rgb(251,28,31)"/><text x="49.7903%" y="143.50"></text></g><g><title>fn_sig (250,983 samples, 0.29%)</title><rect x="49.4122%" y="149" width="0.2915%" height="15" fill="rgb(233,223,10)"/><text x="49.6622%" y="159.50"></text></g><g><title>is_late_bound_map (355,094 samples, 0.41%)</title><rect x="49.8093%" y="133" width="0.4123%" height="15" fill="rgb(215,21,27)"/><text x="50.0593%" y="143.50"></text></g><g><title>resolve_lifetimes (350,724 samples, 0.41%)</title><rect x="49.8143%" y="117" width="0.4073%" height="15" fill="rgb(232,23,21)"/><text x="50.0643%" y="127.50"></text></g><g><title>lint_levels (287,874 samples, 0.33%)</title><rect x="49.8873%" y="101" width="0.3343%" height="15" fill="rgb(244,5,23)"/><text x="50.1373%" y="111.50"></text></g><g><title>generics_of (510,335 samples, 0.59%)</title><rect x="49.7037%" y="149" width="0.5926%" height="15" fill="rgb(226,81,46)"/><text x="49.9537%" y="159.50"></text></g><g><title>explicit_predicates_of (95,152 samples, 0.11%)</title><rect x="50.3893%" y="117" width="0.1105%" height="15" fill="rgb(247,70,30)"/><text x="50.6393%" y="127.50"></text></g><g><title>predicates_of (157,892 samples, 0.18%)</title><rect x="50.3223%" y="149" width="0.1834%" height="15" fill="rgb(212,68,19)"/><text x="50.5723%" y="159.50"></text></g><g><title>predicates_defined_on (136,392 samples, 0.16%)</title><rect x="50.3472%" y="133" width="0.1584%" height="15" fill="rgb(240,187,13)"/><text x="50.5972%" y="143.50"></text></g><g><title>type_collecting (1,327,564 samples, 1.54%)</title><rect x="49.1755%" y="181" width="1.5416%" height="15" fill="rgb(223,113,26)"/><text x="49.4255%" y="191.50"></text></g><g><title>collect_mod_item_types (1,314,113 samples, 1.53%)</title><rect x="49.1911%" y="165" width="1.5260%" height="15" fill="rgb(206,192,2)"/><text x="49.4411%" y="175.50"></text></g><g><title>type_of (121,941 samples, 0.14%)</title><rect x="50.5755%" y="149" width="0.1416%" height="15" fill="rgb(241,108,4)"/><text x="50.8255%" y="159.50"></text></g><g><title>check_impl_item_well_formed (304,653 samples, 0.35%)</title><rect x="50.8630%" y="165" width="0.3538%" height="15" fill="rgb(247,173,49)"/><text x="51.1130%" y="175.50"></text></g><g><title>evaluate_obligation (173,812 samples, 0.20%)</title><rect x="51.9638%" y="149" width="0.2018%" height="15" fill="rgb(224,114,35)"/><text x="52.2138%" y="159.50"></text></g><g><title>implied_outlives_bounds (112,904 samples, 0.13%)</title><rect x="52.1679%" y="149" width="0.1311%" height="15" fill="rgb(245,159,27)"/><text x="52.4179%" y="159.50"></text></g><g><title>param_env (229,173 samples, 0.27%)</title><rect x="52.2990%" y="149" width="0.2661%" height="15" fill="rgb(245,172,44)"/><text x="52.5490%" y="159.50"></text></g><g><title>region_scope_tree (487,785 samples, 0.57%)</title><rect x="52.6041%" y="149" width="0.5664%" height="15" fill="rgb(236,23,11)"/><text x="52.8541%" y="159.50"></text></g><g><title>check_item_well_formed (1,683,819 samples, 1.96%)</title><rect x="51.2168%" y="165" width="1.9553%" height="15" fill="rgb(205,117,38)"/><text x="51.4668%" y="175.50">c..</text></g><g><title>evaluate_obligation (160,912 samples, 0.19%)</title><rect x="53.5301%" y="149" width="0.1869%" height="15" fill="rgb(237,72,25)"/><text x="53.7801%" y="159.50"></text></g><g><title>analysis (39,870,421 samples, 46.30%)</title><rect x="7.5182%" y="213" width="46.2992%" height="15" fill="rgb(244,70,9)"/><text x="7.7682%" y="223.50">analysis</text></g><g><title>type_check_crate (23,115,365 samples, 26.84%)</title><rect x="26.9749%" y="197" width="26.8425%" height="15" fill="rgb(217,125,39)"/><text x="27.2249%" y="207.50">type_check_crate</text></g><g><title>wf_checking (2,668,509 samples, 3.10%)</title><rect x="50.7186%" y="181" width="3.0988%" height="15" fill="rgb(235,36,10)"/><text x="50.9686%" y="191.50">wf_..</text></g><g><title>check_trait_item_well_formed (555,657 samples, 0.65%)</title><rect x="53.1721%" y="165" width="0.6453%" height="15" fill="rgb(251,123,47)"/><text x="53.4221%" y="175.50"></text></g><g><title>codegen_module (229,802 samples, 0.27%)</title><rect x="54.2782%" y="197" width="0.2669%" height="15" fill="rgb(221,13,13)"/><text x="54.5282%" y="207.50"></text></g><g><title>codegen_crate (683,807 samples, 0.79%)</title><rect x="53.8299%" y="213" width="0.7941%" height="15" fill="rgb(238,131,9)"/><text x="54.0799%" y="223.50"></text></g><g><title>codegen_module_optimize (1,812,389 samples, 2.10%)</title><rect x="54.6240%" y="213" width="2.1046%" height="15" fill="rgb(211,50,8)"/><text x="54.8740%" y="223.50">c..</text></g><g><title>LLVM_module_optimize (478,605 samples, 0.56%)</title><rect x="56.1728%" y="197" width="0.5558%" height="15" fill="rgb(245,182,24)"/><text x="56.4228%" y="207.50"></text></g><g><title>LLVM_lto_optimize (263,922 samples, 0.31%)</title><rect x="57.2260%" y="197" width="0.3065%" height="15" fill="rgb(242,14,37)"/><text x="57.4760%" y="207.50"></text></g><g><title>LLVM_module_codegen (2,682,179 samples, 3.11%)</title><rect x="57.5325%" y="197" width="3.1147%" height="15" fill="rgb(246,228,12)"/><text x="57.7825%" y="207.50">LLV..</text></g><g><title>LLVM_module_codegen_emit_obj (2,638,339 samples, 3.06%)</title><rect x="57.5834%" y="181" width="3.0637%" height="15" fill="rgb(213,55,15)"/><text x="57.8334%" y="191.50">LLV..</text></g><g><title>codegen_module_perform_lto (3,417,578 samples, 3.97%)</title><rect x="56.7286%" y="213" width="3.9686%" height="15" fill="rgb(209,9,3)"/><text x="56.9786%" y="223.50">code..</text></g><g><title>AST_validation (169,372 samples, 0.20%)</title><rect x="60.9634%" y="197" width="0.1967%" height="15" fill="rgb(230,59,30)"/><text x="61.2134%" y="207.50"></text></g><g><title>complete_gated_feature_checking (94,991 samples, 0.11%)</title><rect x="61.1601%" y="197" width="0.1103%" height="15" fill="rgb(209,121,21)"/><text x="61.4101%" y="207.50"></text></g><g><title>crate_injection (87,881 samples, 0.10%)</title><rect x="61.2704%" y="197" width="0.1021%" height="15" fill="rgb(220,109,13)"/><text x="61.5204%" y="207.50"></text></g><g><title>metadata_register_crate (209,502 samples, 0.24%)</title><rect x="79.5527%" y="165" width="0.2433%" height="15" fill="rgb(232,18,1)"/><text x="79.8027%" y="175.50"></text></g><g><title>macro_expand_crate (16,280,829 samples, 18.91%)</title><rect x="61.3724%" y="197" width="18.9060%" height="15" fill="rgb(215,41,42)"/><text x="61.6224%" y="207.50">macro_expand_crate</text></g><g><title>expand_crate (16,263,869 samples, 18.89%)</title><rect x="61.3921%" y="181" width="18.8863%" height="15" fill="rgb(224,123,36)"/><text x="61.6421%" y="191.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (415,395 samples, 0.48%)</title><rect x="79.7960%" y="165" width="0.4824%" height="15" fill="rgb(240,125,3)"/><text x="80.0460%" y="175.50"></text></g><g><title>pre_AST_expansion_lint_checks (114,382 samples, 0.13%)</title><rect x="80.2846%" y="197" width="0.1328%" height="15" fill="rgb(205,98,50)"/><text x="80.5346%" y="207.50"></text></g><g><title>finalize_imports (218,982 samples, 0.25%)</title><rect x="80.4289%" y="181" width="0.2543%" height="15" fill="rgb(205,185,37)"/><text x="80.6789%" y="191.50"></text></g><g><title>late_resolve_crate (643,627 samples, 0.75%)</title><rect x="80.7032%" y="181" width="0.7474%" height="15" fill="rgb(238,207,15)"/><text x="80.9532%" y="191.50"></text></g><g><title>configure_and_expand (18,022,279 samples, 20.93%)</title><rect x="60.6972%" y="213" width="20.9282%" height="15" fill="rgb(213,199,42)"/><text x="60.9472%" y="223.50">configure_and_expand</text></g><g><title>resolve_crate (1,040,302 samples, 1.21%)</title><rect x="80.4174%" y="197" width="1.2080%" height="15" fill="rgb(235,201,11)"/><text x="80.6674%" y="207.50"></text></g><g><title>drop_ast (348,454 samples, 0.40%)</title><rect x="81.6254%" y="213" width="0.4046%" height="15" fill="rgb(207,46,11)"/><text x="81.8754%" y="223.50"></text></g><g><title>early_lint_checks (867,920 samples, 1.01%)</title><rect x="82.0455%" y="213" width="1.0079%" height="15" fill="rgb(241,35,35)"/><text x="82.2955%" y="223.50"></text></g><g><title>free_global_ctxt (1,466,236 samples, 1.70%)</title><rect x="83.0534%" y="213" width="1.7027%" height="15" fill="rgb(243,32,47)"/><text x="83.3034%" y="223.50"></text></g><g><title>layout_of (235,961 samples, 0.27%)</title><rect x="88.0421%" y="181" width="0.2740%" height="15" fill="rgb(247,202,23)"/><text x="88.2921%" y="191.50"></text></g><g><title>optimized_mir (1,060,421 samples, 1.23%)</title><rect x="87.4942%" y="197" width="1.2314%" height="15" fill="rgb(219,102,11)"/><text x="87.7442%" y="207.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (352,614 samples, 0.41%)</title><rect x="88.3161%" y="181" width="0.4095%" height="15" fill="rgb(243,110,44)"/><text x="88.5661%" y="191.50"></text></g><g><title>generate_crate_metadata (3,454,268 samples, 4.01%)</title><rect x="84.7560%" y="213" width="4.0112%" height="15" fill="rgb(222,74,54)"/><text x="85.0060%" y="223.50">gene..</text></g><g><title>hir_lowering (2,930,812 samples, 3.40%)</title><rect x="88.7673%" y="213" width="3.4034%" height="15" fill="rgb(216,99,12)"/><text x="89.0173%" y="223.50">hir..</text></g><g><title>finish_ongoing_codegen (3,831,572 samples, 4.45%)</title><rect x="92.1839%" y="197" width="4.4494%" height="15" fill="rgb(226,22,26)"/><text x="92.4339%" y="207.50">finis..</text></g><g><title>link_crate (696,357 samples, 0.81%)</title><rect x="96.6333%" y="197" width="0.8086%" height="15" fill="rgb(217,163,10)"/><text x="96.8833%" y="207.50"></text></g><g><title>link_binary (687,507 samples, 0.80%)</title><rect x="96.6436%" y="181" width="0.7984%" height="15" fill="rgb(213,25,53)"/><text x="96.8936%" y="191.50"></text></g><g><title>link_rlib (481,365 samples, 0.56%)</title><rect x="96.8830%" y="165" width="0.5590%" height="15" fill="rgb(252,105,26)"/><text x="97.1330%" y="175.50"></text></g><g><title>link (4,546,260 samples, 5.28%)</title><rect x="92.1706%" y="213" width="5.2793%" height="15" fill="rgb(220,39,43)"/><text x="92.4206%" y="223.50">link</text></g><g><title>parse_crate (908,400 samples, 1.05%)</title><rect x="97.4499%" y="213" width="1.0549%" height="15" fill="rgb(229,68,48)"/><text x="97.6999%" y="223.50"></text></g><g><title>prepare_outputs (352,914 samples, 0.41%)</title><rect x="98.5169%" y="213" width="0.4098%" height="15" fill="rgb(252,8,32)"/><text x="98.7669%" y="223.50"></text></g><g><title>self_profile_alloc_query_strings (391,044 samples, 0.45%)</title><rect x="98.9267%" y="213" width="0.4541%" height="15" fill="rgb(223,20,43)"/><text x="99.1767%" y="223.50"></text></g><g><title>setup_global_ctxt (146,592 samples, 0.17%)</title><rect x="99.3873%" y="213" width="0.1702%" height="15" fill="rgb(229,81,49)"/><text x="99.6373%" y="223.50"></text></g><g><title>all (86,114,800 samples, 100%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(236,28,36)"/><text x="0.2500%" y="255.50"></text></g><g><title>rustc (86,114,800 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,185,26)"/><text x="0.2500%" y="239.50">rustc</text></g><g><title>write_crate_metadata (381,024 samples, 0.44%)</title><rect x="99.5575%" y="213" width="0.4425%" height="15" fill="rgb(249,174,33)"/><text x="99.8075%" y="223.50"></text></g></svg></svg>