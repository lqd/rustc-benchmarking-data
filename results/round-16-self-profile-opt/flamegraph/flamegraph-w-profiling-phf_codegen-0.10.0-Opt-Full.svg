<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (7,040,689 samples, 5.32%)</title><rect x="0.4824%" y="197" width="5.3195%" height="15" fill="rgb(227,0,7)"/><text x="0.7324%" y="207.50">LLVM_pa..</text></g><g><title>codegen_fn_attrs (136,191 samples, 0.10%)</title><rect x="13.1227%" y="101" width="0.1029%" height="15" fill="rgb(217,0,24)"/><text x="13.3727%" y="111.50"></text></g><g><title>adt_drop_tys (182,812 samples, 0.14%)</title><rect x="14.4448%" y="69" width="0.1381%" height="15" fill="rgb(221,193,54)"/><text x="14.6948%" y="79.50"></text></g><g><title>needs_drop_raw (1,002,643 samples, 0.76%)</title><rect x="14.3886%" y="85" width="0.7575%" height="15" fill="rgb(248,212,6)"/><text x="14.6386%" y="95.50"></text></g><g><title>is_copy_raw (745,449 samples, 0.56%)</title><rect x="14.5829%" y="69" width="0.5632%" height="15" fill="rgb(208,68,35)"/><text x="14.8329%" y="79.50"></text></g><g><title>evaluate_obligation (635,919 samples, 0.48%)</title><rect x="14.6657%" y="53" width="0.4805%" height="15" fill="rgb(232,128,0)"/><text x="14.9157%" y="63.50"></text></g><g><title>trait_impls_of (164,242 samples, 0.12%)</title><rect x="15.0221%" y="37" width="0.1241%" height="15" fill="rgb(207,160,47)"/><text x="15.2721%" y="47.50"></text></g><g><title>impl_parent (438,922 samples, 0.33%)</title><rect x="15.7765%" y="53" width="0.3316%" height="15" fill="rgb(228,23,34)"/><text x="16.0265%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_parent (279,812 samples, 0.21%)</title><rect x="15.8967%" y="37" width="0.2114%" height="15" fill="rgb(218,30,26)"/><text x="16.1467%" y="47.50"></text></g><g><title>specialization_graph_of (2,548,248 samples, 1.93%)</title><rect x="15.3060%" y="69" width="1.9253%" height="15" fill="rgb(220,122,19)"/><text x="15.5560%" y="79.50">s..</text></g><g><title>impl_trait_ref (1,486,645 samples, 1.12%)</title><rect x="16.1081%" y="53" width="1.1232%" height="15" fill="rgb(250,228,42)"/><text x="16.3581%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (1,103,560 samples, 0.83%)</title><rect x="16.3975%" y="37" width="0.8338%" height="15" fill="rgb(240,193,28)"/><text x="16.6475%" y="47.50"></text></g><g><title>resolve_instance (2,791,642 samples, 2.11%)</title><rect x="15.1462%" y="85" width="2.1092%" height="15" fill="rgb(216,20,37)"/><text x="15.3962%" y="95.50">r..</text></g><g><title>thir_body (586,556 samples, 0.44%)</title><rect x="17.2633%" y="85" width="0.4432%" height="15" fill="rgb(206,188,39)"/><text x="17.5133%" y="95.50"></text></g><g><title>mir_const (6,860,748 samples, 5.18%)</title><rect x="12.5283%" y="133" width="5.1836%" height="15" fill="rgb(217,207,13)"/><text x="12.7783%" y="143.50">mir_co..</text></g><g><title>unsafety_check_result (6,325,872 samples, 4.78%)</title><rect x="12.9324%" y="117" width="4.7794%" height="15" fill="rgb(231,73,38)"/><text x="13.1824%" y="127.50">unsafe..</text></g><g><title>mir_built (5,937,868 samples, 4.49%)</title><rect x="13.2256%" y="101" width="4.4863%" height="15" fill="rgb(225,20,46)"/><text x="13.4756%" y="111.50">mir_b..</text></g><g><title>mir_promoted (7,357,990 samples, 5.56%)</title><rect x="12.1670%" y="149" width="5.5593%" height="15" fill="rgb(210,31,41)"/><text x="12.4170%" y="159.50">mir_pro..</text></g><g><title>type_op_ascribe_user_type (451,637 samples, 0.34%)</title><rect x="17.7262%" y="149" width="0.3412%" height="15" fill="rgb(221,200,47)"/><text x="17.9762%" y="159.50"></text></g><g><title>type_op_normalize_fn_sig (692,927 samples, 0.52%)</title><rect x="18.0674%" y="149" width="0.5235%" height="15" fill="rgb(226,26,5)"/><text x="18.3174%" y="159.50"></text></g><g><title>normalize_projection_ty (511,364 samples, 0.39%)</title><rect x="18.2046%" y="133" width="0.3864%" height="15" fill="rgb(249,33,26)"/><text x="18.4546%" y="143.50"></text></g><g><title>type_op_prove_predicate (1,879,948 samples, 1.42%)</title><rect x="18.6203%" y="149" width="1.4204%" height="15" fill="rgb(235,183,28)"/><text x="18.8703%" y="159.50"></text></g><g><title>MIR_borrow_checking (18,535,766 samples, 14.00%)</title><rect x="6.0442%" y="181" width="14.0045%" height="15" fill="rgb(221,5,38)"/><text x="6.2942%" y="191.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (18,492,096 samples, 13.97%)</title><rect x="6.0772%" y="165" width="13.9715%" height="15" fill="rgb(247,18,42)"/><text x="6.3272%" y="175.50">mir_borrowck</text></g><g><title>hir_module_items (170,382 samples, 0.13%)</title><rect x="20.0568%" y="181" width="0.1287%" height="15" fill="rgb(241,131,45)"/><text x="20.3068%" y="191.50"></text></g><g><title>should_inherit_track_caller (133,871 samples, 0.10%)</title><rect x="20.5343%" y="133" width="0.1011%" height="15" fill="rgb(249,31,29)"/><text x="20.7843%" y="143.50"></text></g><g><title>codegen_fn_attrs (349,753 samples, 0.26%)</title><rect x="20.3932%" y="149" width="0.2643%" height="15" fill="rgb(225,111,53)"/><text x="20.6432%" y="159.50"></text></g><g><title>check_mod_attrs (600,297 samples, 0.45%)</title><rect x="20.2041%" y="165" width="0.4535%" height="15" fill="rgb(238,160,17)"/><text x="20.4541%" y="175.50"></text></g><g><title>lookup_deprecation_entry (152,723 samples, 0.12%)</title><rect x="20.9040%" y="149" width="0.1154%" height="15" fill="rgb(214,148,48)"/><text x="21.1540%" y="159.50"></text></g><g><title>check_mod_unstable_api_usage (377,595 samples, 0.29%)</title><rect x="20.7881%" y="165" width="0.2853%" height="15" fill="rgb(232,36,49)"/><text x="21.0381%" y="175.50"></text></g><g><title>misc_checking_1 (1,221,434 samples, 0.92%)</title><rect x="20.1861%" y="181" width="0.9228%" height="15" fill="rgb(209,103,24)"/><text x="20.4361%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (305,883 samples, 0.23%)</title><rect x="21.1100%" y="165" width="0.2311%" height="15" fill="rgb(229,88,8)"/><text x="21.3600%" y="175.50"></text></g><g><title>check_mod_liveness (259,623 samples, 0.20%)</title><rect x="21.1449%" y="149" width="0.1962%" height="15" fill="rgb(213,181,19)"/><text x="21.3949%" y="159.50"></text></g><g><title>misc_checking_2 (552,546 samples, 0.42%)</title><rect x="21.1090%" y="181" width="0.4175%" height="15" fill="rgb(254,191,54)"/><text x="21.3590%" y="191.50"></text></g><g><title>match_checking (245,343 samples, 0.19%)</title><rect x="21.3411%" y="165" width="0.1854%" height="15" fill="rgb(241,83,37)"/><text x="21.5911%" y="175.50"></text></g><g><title>check_match (232,243 samples, 0.18%)</title><rect x="21.3510%" y="149" width="0.1755%" height="15" fill="rgb(233,36,39)"/><text x="21.6010%" y="159.50"></text></g><g><title>death_checking (254,823 samples, 0.19%)</title><rect x="21.6059%" y="165" width="0.1925%" height="15" fill="rgb(226,3,54)"/><text x="21.8559%" y="175.50"></text></g><g><title>crate_lints (2,831,682 samples, 2.14%)</title><rect x="21.7996%" y="149" width="2.1394%" height="15" fill="rgb(245,192,40)"/><text x="22.0496%" y="159.50">c..</text></g><g><title>type_of (2,169,294 samples, 1.64%)</title><rect x="22.3001%" y="133" width="1.6390%" height="15" fill="rgb(238,167,29)"/><text x="22.5501%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (1,911,929 samples, 1.44%)</title><rect x="22.4945%" y="117" width="1.4445%" height="15" fill="rgb(232,182,51)"/><text x="22.7445%" y="127.50"></text></g><g><title>lint_checking (3,053,394 samples, 2.31%)</title><rect x="21.7985%" y="165" width="2.3070%" height="15" fill="rgb(231,60,39)"/><text x="22.0485%" y="175.50">l..</text></g><g><title>module_lints (220,162 samples, 0.17%)</title><rect x="23.9391%" y="149" width="0.1663%" height="15" fill="rgb(208,69,12)"/><text x="24.1891%" y="159.50"></text></g><g><title>lint_mod (217,202 samples, 0.16%)</title><rect x="23.9413%" y="133" width="0.1641%" height="15" fill="rgb(235,93,37)"/><text x="24.1913%" y="143.50"></text></g><g><title>privacy_checking_modules (424,275 samples, 0.32%)</title><rect x="24.2022%" y="165" width="0.3206%" height="15" fill="rgb(213,116,39)"/><text x="24.4522%" y="175.50"></text></g><g><title>check_mod_privacy (422,695 samples, 0.32%)</title><rect x="24.2034%" y="149" width="0.3194%" height="15" fill="rgb(222,207,29)"/><text x="24.4534%" y="159.50"></text></g><g><title>misc_checking_3 (3,974,855 samples, 3.00%)</title><rect x="21.5264%" y="181" width="3.0032%" height="15" fill="rgb(206,96,30)"/><text x="21.7764%" y="191.50">mis..</text></g><g><title>impl_parent (240,384 samples, 0.18%)</title><rect x="24.8440%" y="117" width="0.1816%" height="15" fill="rgb(218,138,4)"/><text x="25.0940%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (166,583 samples, 0.13%)</title><rect x="24.8998%" y="101" width="0.1259%" height="15" fill="rgb(250,191,14)"/><text x="25.1498%" y="111.50"></text></g><g><title>impl_trait_ref (807,550 samples, 0.61%)</title><rect x="25.0256%" y="117" width="0.6101%" height="15" fill="rgb(239,60,40)"/><text x="25.2756%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (733,588 samples, 0.55%)</title><rect x="25.0815%" y="101" width="0.5543%" height="15" fill="rgb(206,27,48)"/><text x="25.3315%" y="111.50"></text></g><g><title>coherent_trait (1,528,287 samples, 1.15%)</title><rect x="24.5722%" y="149" width="1.1547%" height="15" fill="rgb(225,35,8)"/><text x="24.8222%" y="159.50"></text></g><g><title>specialization_graph_of (1,520,217 samples, 1.15%)</title><rect x="24.5783%" y="133" width="1.1486%" height="15" fill="rgb(250,213,24)"/><text x="24.8283%" y="143.50"></text></g><g><title>coherence_checking (1,608,718 samples, 1.22%)</title><rect x="24.5610%" y="165" width="1.2155%" height="15" fill="rgb(247,123,22)"/><text x="24.8110%" y="175.50"></text></g><g><title>adt_def (166,592 samples, 0.13%)</title><rect x="47.9442%" y="101" width="0.1259%" height="15" fill="rgb(231,138,38)"/><text x="48.1942%" y="111.50"></text></g><g><title>metadata_decode_entry_adt_def (162,982 samples, 0.12%)</title><rect x="47.9470%" y="85" width="0.1231%" height="15" fill="rgb(231,145,46)"/><text x="48.1970%" y="95.50"></text></g><g><title>adt_def (233,883 samples, 0.18%)</title><rect x="48.0719%" y="85" width="0.1767%" height="15" fill="rgb(251,118,11)"/><text x="48.3219%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_def (233,333 samples, 0.18%)</title><rect x="48.0723%" y="69" width="0.1763%" height="15" fill="rgb(217,147,25)"/><text x="48.3223%" y="79.50"></text></g><g><title>adt_sized_constraint (349,324 samples, 0.26%)</title><rect x="48.0701%" y="101" width="0.2639%" height="15" fill="rgb(247,81,37)"/><text x="48.3201%" y="111.50"></text></g><g><title>adt_sized_constraint (569,936 samples, 0.43%)</title><rect x="47.9199%" y="117" width="0.4306%" height="15" fill="rgb(209,12,38)"/><text x="48.1699%" y="127.50"></text></g><g><title>associated_item (663,848 samples, 0.50%)</title><rect x="48.5748%" y="101" width="0.5016%" height="15" fill="rgb(227,1,9)"/><text x="48.8248%" y="111.50"></text></g><g><title>metadata_decode_entry_associated_item (490,575 samples, 0.37%)</title><rect x="48.7057%" y="85" width="0.3706%" height="15" fill="rgb(248,47,43)"/><text x="48.9557%" y="95.50"></text></g><g><title>associated_items (986,910 samples, 0.75%)</title><rect x="48.3631%" y="117" width="0.7456%" height="15" fill="rgb(221,10,30)"/><text x="48.6131%" y="127.50"></text></g><g><title>adt_dtorck_constraint (158,752 samples, 0.12%)</title><rect x="49.7157%" y="37" width="0.1199%" height="15" fill="rgb(210,229,1)"/><text x="49.9657%" y="47.50"></text></g><g><title>adt_dtorck_constraint (233,262 samples, 0.18%)</title><rect x="49.6723%" y="53" width="0.1762%" height="15" fill="rgb(222,148,37)"/><text x="49.9223%" y="63.50"></text></g><g><title>adt_dtorck_constraint (295,833 samples, 0.22%)</title><rect x="49.6320%" y="69" width="0.2235%" height="15" fill="rgb(234,67,33)"/><text x="49.8820%" y="79.50"></text></g><g><title>adt_dtorck_constraint (341,754 samples, 0.26%)</title><rect x="49.6053%" y="85" width="0.2582%" height="15" fill="rgb(247,98,35)"/><text x="49.8553%" y="95.50"></text></g><g><title>dropck_outlives (931,720 samples, 0.70%)</title><rect x="49.1840%" y="117" width="0.7040%" height="15" fill="rgb(247,138,52)"/><text x="49.4340%" y="127.50"></text></g><g><title>adt_dtorck_constraint (567,925 samples, 0.43%)</title><rect x="49.4589%" y="101" width="0.4291%" height="15" fill="rgb(213,79,30)"/><text x="49.7089%" y="111.50"></text></g><g><title>adt_sized_constraint (142,592 samples, 0.11%)</title><rect x="50.9721%" y="101" width="0.1077%" height="15" fill="rgb(246,177,23)"/><text x="51.2221%" y="111.50"></text></g><g><title>predicates_of (173,372 samples, 0.13%)</title><rect x="51.2032%" y="101" width="0.1310%" height="15" fill="rgb(230,62,27)"/><text x="51.4532%" y="111.50"></text></g><g><title>evaluate_obligation (3,177,433 samples, 2.40%)</title><rect x="49.8880%" y="117" width="2.4007%" height="15" fill="rgb(216,154,8)"/><text x="50.1380%" y="127.50">ev..</text></g><g><title>trait_impls_of (1,124,200 samples, 0.85%)</title><rect x="51.4393%" y="101" width="0.8494%" height="15" fill="rgb(244,35,45)"/><text x="51.6893%" y="111.50"></text></g><g><title>implementations_of_trait (352,144 samples, 0.27%)</title><rect x="52.0226%" y="85" width="0.2661%" height="15" fill="rgb(251,115,12)"/><text x="52.2726%" y="95.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (216,773 samples, 0.16%)</title><rect x="52.1249%" y="69" width="0.1638%" height="15" fill="rgb(240,54,50)"/><text x="52.3749%" y="79.50"></text></g><g><title>fn_sig (140,201 samples, 0.11%)</title><rect x="52.3185%" y="117" width="0.1059%" height="15" fill="rgb(233,84,52)"/><text x="52.5685%" y="127.50"></text></g><g><title>generics_of (565,488 samples, 0.43%)</title><rect x="52.4245%" y="117" width="0.4272%" height="15" fill="rgb(207,117,47)"/><text x="52.6745%" y="127.50"></text></g><g><title>metadata_decode_entry_generics_of (513,868 samples, 0.39%)</title><rect x="52.4635%" y="101" width="0.3882%" height="15" fill="rgb(249,43,39)"/><text x="52.7135%" y="111.50"></text></g><g><title>impl_item_implementor_ids (183,511 samples, 0.14%)</title><rect x="52.8517%" y="117" width="0.1386%" height="15" fill="rgb(209,38,44)"/><text x="53.1017%" y="127.50"></text></g><g><title>associated_items (157,491 samples, 0.12%)</title><rect x="52.8714%" y="101" width="0.1190%" height="15" fill="rgb(236,212,23)"/><text x="53.1214%" y="111.50"></text></g><g><title>impl_trait_ref (161,031 samples, 0.12%)</title><rect x="53.0032%" y="117" width="0.1217%" height="15" fill="rgb(242,79,21)"/><text x="53.2532%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (137,091 samples, 0.10%)</title><rect x="53.0212%" y="101" width="0.1036%" height="15" fill="rgb(211,96,35)"/><text x="53.2712%" y="111.50"></text></g><g><title>item_attrs (149,240 samples, 0.11%)</title><rect x="53.1646%" y="117" width="0.1128%" height="15" fill="rgb(253,215,40)"/><text x="53.4146%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (141,260 samples, 0.11%)</title><rect x="53.1706%" y="101" width="0.1067%" height="15" fill="rgb(211,81,21)"/><text x="53.4206%" y="111.50"></text></g><g><title>evaluate_obligation (297,092 samples, 0.22%)</title><rect x="53.5174%" y="101" width="0.2245%" height="15" fill="rgb(208,190,38)"/><text x="53.7674%" y="111.50"></text></g><g><title>method_autoderef_steps (536,803 samples, 0.41%)</title><rect x="53.3517%" y="117" width="0.4056%" height="15" fill="rgb(235,213,38)"/><text x="53.6017%" y="127.50"></text></g><g><title>explicit_predicates_of (300,062 samples, 0.23%)</title><rect x="54.0293%" y="85" width="0.2267%" height="15" fill="rgb(237,122,38)"/><text x="54.2793%" y="95.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (257,641 samples, 0.19%)</title><rect x="54.0614%" y="69" width="0.1947%" height="15" fill="rgb(244,218,35)"/><text x="54.3114%" y="79.50"></text></g><g><title>predicates_of (677,726 samples, 0.51%)</title><rect x="53.7958%" y="117" width="0.5120%" height="15" fill="rgb(240,68,47)"/><text x="54.0458%" y="127.50"></text></g><g><title>predicates_defined_on (495,795 samples, 0.37%)</title><rect x="53.9333%" y="101" width="0.3746%" height="15" fill="rgb(210,16,53)"/><text x="54.1833%" y="111.50"></text></g><g><title>type_of (170,202 samples, 0.13%)</title><rect x="54.3612%" y="117" width="0.1286%" height="15" fill="rgb(235,124,12)"/><text x="54.6112%" y="127.50"></text></g><g><title>metadata_decode_entry_type_of (141,212 samples, 0.11%)</title><rect x="54.3831%" y="101" width="0.1067%" height="15" fill="rgb(224,169,11)"/><text x="54.6331%" y="111.50"></text></g><g><title>item_bodies_checking (38,039,625 samples, 28.74%)</title><rect x="25.8010%" y="165" width="28.7404%" height="15" fill="rgb(250,166,2)"/><text x="26.0510%" y="175.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (38,036,154 samples, 28.74%)</title><rect x="25.8036%" y="149" width="28.7378%" height="15" fill="rgb(242,216,29)"/><text x="26.0536%" y="159.50">typeck_item_bodies</text></g><g><title>typeck (37,969,904 samples, 28.69%)</title><rect x="25.8537%" y="133" width="28.6878%" height="15" fill="rgb(230,116,27)"/><text x="26.1037%" y="143.50">typeck</text></g><g><title>impl_trait_ref (455,668 samples, 0.34%)</title><rect x="55.2634%" y="85" width="0.3443%" height="15" fill="rgb(228,99,48)"/><text x="55.5134%" y="95.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (412,697 samples, 0.31%)</title><rect x="55.2959%" y="69" width="0.3118%" height="15" fill="rgb(253,11,6)"/><text x="55.5459%" y="79.50"></text></g><g><title>adt_destructor (849,939 samples, 0.64%)</title><rect x="55.0190%" y="133" width="0.6422%" height="15" fill="rgb(247,143,39)"/><text x="55.2690%" y="143.50"></text></g><g><title>coherent_trait (839,219 samples, 0.63%)</title><rect x="55.0270%" y="117" width="0.6341%" height="15" fill="rgb(236,97,10)"/><text x="55.2770%" y="127.50"></text></g><g><title>specialization_graph_of (836,319 samples, 0.63%)</title><rect x="55.0292%" y="101" width="0.6319%" height="15" fill="rgb(233,208,19)"/><text x="55.2792%" y="111.50"></text></g><g><title>item_types_checking (1,564,327 samples, 1.18%)</title><rect x="54.5414%" y="165" width="1.1819%" height="15" fill="rgb(216,164,2)"/><text x="54.7914%" y="175.50"></text></g><g><title>check_mod_item_types (1,560,477 samples, 1.18%)</title><rect x="54.5443%" y="149" width="1.1790%" height="15" fill="rgb(220,129,5)"/><text x="54.7943%" y="159.50"></text></g><g><title>fn_sig (183,913 samples, 0.14%)</title><rect x="55.9112%" y="133" width="0.1390%" height="15" fill="rgb(242,17,10)"/><text x="56.1612%" y="143.50"></text></g><g><title>generics_of (262,152 samples, 0.20%)</title><rect x="56.0502%" y="133" width="0.1981%" height="15" fill="rgb(242,107,0)"/><text x="56.3002%" y="143.50"></text></g><g><title>late_bound_vars_map (213,174 samples, 0.16%)</title><rect x="56.5649%" y="85" width="0.1611%" height="15" fill="rgb(251,28,31)"/><text x="56.8149%" y="95.50"></text></g><g><title>resolve_lifetimes (204,903 samples, 0.15%)</title><rect x="56.5712%" y="69" width="0.1548%" height="15" fill="rgb(233,223,10)"/><text x="56.8212%" y="79.50"></text></g><g><title>explicit_predicates_of (459,797 samples, 0.35%)</title><rect x="56.3881%" y="101" width="0.3474%" height="15" fill="rgb(215,21,27)"/><text x="56.6381%" y="111.50"></text></g><g><title>predicates_of (1,118,165 samples, 0.84%)</title><rect x="56.2696%" y="133" width="0.8448%" height="15" fill="rgb(232,23,21)"/><text x="56.5196%" y="143.50"></text></g><g><title>predicates_defined_on (1,056,105 samples, 0.80%)</title><rect x="56.3165%" y="117" width="0.7979%" height="15" fill="rgb(244,5,23)"/><text x="56.5665%" y="127.50"></text></g><g><title>inferred_outlives_of (501,485 samples, 0.38%)</title><rect x="56.7355%" y="101" width="0.3789%" height="15" fill="rgb(226,81,46)"/><text x="56.9855%" y="111.50"></text></g><g><title>inferred_outlives_crate (476,785 samples, 0.36%)</title><rect x="56.7542%" y="85" width="0.3602%" height="15" fill="rgb(247,70,30)"/><text x="57.0042%" y="95.50"></text></g><g><title>type_of (241,742 samples, 0.18%)</title><rect x="56.9318%" y="69" width="0.1826%" height="15" fill="rgb(212,68,19)"/><text x="57.1818%" y="79.50"></text></g><g><title>type_collecting (1,965,582 samples, 1.49%)</title><rect x="55.7242%" y="165" width="1.4851%" height="15" fill="rgb(240,187,13)"/><text x="55.9742%" y="175.50"></text></g><g><title>collect_mod_item_types (1,956,432 samples, 1.48%)</title><rect x="55.7311%" y="149" width="1.4782%" height="15" fill="rgb(223,113,26)"/><text x="55.9811%" y="159.50"></text></g><g><title>evaluate_obligation (742,957 samples, 0.56%)</title><rect x="58.8925%" y="133" width="0.5613%" height="15" fill="rgb(206,192,2)"/><text x="59.1425%" y="143.50"></text></g><g><title>implied_outlives_bounds (344,515 samples, 0.26%)</title><rect x="59.4538%" y="133" width="0.2603%" height="15" fill="rgb(241,108,4)"/><text x="59.7038%" y="143.50"></text></g><g><title>param_env (341,101 samples, 0.26%)</title><rect x="59.7141%" y="133" width="0.2577%" height="15" fill="rgb(247,173,49)"/><text x="59.9641%" y="143.50"></text></g><g><title>check_impl_item_well_formed (3,859,274 samples, 2.92%)</title><rect x="57.3428%" y="149" width="2.9158%" height="15" fill="rgb(224,114,35)"/><text x="57.5928%" y="159.50">ch..</text></g><g><title>region_scope_tree (341,415 samples, 0.26%)</title><rect x="60.0007%" y="133" width="0.2580%" height="15" fill="rgb(245,159,27)"/><text x="60.2507%" y="143.50"></text></g><g><title>adt_sized_constraint (147,962 samples, 0.11%)</title><rect x="61.5619%" y="117" width="0.1118%" height="15" fill="rgb(245,172,44)"/><text x="61.8119%" y="127.50"></text></g><g><title>evaluate_obligation (270,173 samples, 0.20%)</title><rect x="61.5087%" y="133" width="0.2041%" height="15" fill="rgb(236,23,11)"/><text x="61.7587%" y="143.50"></text></g><g><title>implied_outlives_bounds (181,761 samples, 0.14%)</title><rect x="61.7186%" y="133" width="0.1373%" height="15" fill="rgb(205,117,38)"/><text x="61.9686%" y="143.50"></text></g><g><title>param_env (448,414 samples, 0.34%)</title><rect x="61.8568%" y="133" width="0.3388%" height="15" fill="rgb(237,72,25)"/><text x="62.1068%" y="143.50"></text></g><g><title>trait_impls_of (574,747 samples, 0.43%)</title><rect x="62.2670%" y="133" width="0.4342%" height="15" fill="rgb(244,70,9)"/><text x="62.5170%" y="143.50"></text></g><g><title>implementations_of_trait (175,214 samples, 0.13%)</title><rect x="62.5688%" y="117" width="0.1324%" height="15" fill="rgb(217,125,39)"/><text x="62.8188%" y="127.50"></text></g><g><title>analysis (75,408,531 samples, 56.97%)</title><rect x="5.8019%" y="197" width="56.9741%" height="15" fill="rgb(235,36,10)"/><text x="6.0519%" y="207.50">analysis</text></g><g><title>type_check_crate (50,621,335 samples, 38.25%)</title><rect x="24.5296%" y="181" width="38.2464%" height="15" fill="rgb(251,123,47)"/><text x="24.7796%" y="191.50">type_check_crate</text></g><g><title>wf_checking (7,365,943 samples, 5.57%)</title><rect x="57.2107%" y="165" width="5.5653%" height="15" fill="rgb(221,13,13)"/><text x="57.4607%" y="175.50">wf_chec..</text></g><g><title>check_item_well_formed (3,331,886 samples, 2.52%)</title><rect x="60.2586%" y="149" width="2.5174%" height="15" fill="rgb(238,131,9)"/><text x="60.5086%" y="159.50">ch..</text></g><g><title>codegen_module (337,964 samples, 0.26%)</title><rect x="63.0915%" y="181" width="0.2553%" height="15" fill="rgb(211,50,8)"/><text x="63.3415%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (194,642 samples, 0.15%)</title><rect x="63.3472%" y="181" width="0.1471%" height="15" fill="rgb(245,182,24)"/><text x="63.5972%" y="191.50"></text></g><g><title>codegen_crate (1,038,491 samples, 0.78%)</title><rect x="62.7889%" y="197" width="0.7846%" height="15" fill="rgb(242,14,37)"/><text x="63.0389%" y="207.50"></text></g><g><title>codegen_module_optimize (3,794,673 samples, 2.87%)</title><rect x="63.5735%" y="197" width="2.8670%" height="15" fill="rgb(246,228,12)"/><text x="63.8235%" y="207.50">co..</text></g><g><title>LLVM_module_optimize (3,420,687 samples, 2.58%)</title><rect x="63.8561%" y="181" width="2.5845%" height="15" fill="rgb(213,55,15)"/><text x="64.1061%" y="191.50">LL..</text></g><g><title>LLVM_lto_optimize (653,827 samples, 0.49%)</title><rect x="66.5976%" y="181" width="0.4940%" height="15" fill="rgb(209,9,3)"/><text x="66.8476%" y="191.50"></text></g><g><title>LLVM_module_codegen (1,977,682 samples, 1.49%)</title><rect x="67.0916%" y="181" width="1.4942%" height="15" fill="rgb(230,59,30)"/><text x="67.3416%" y="191.50"></text></g><g><title>LLVM_module_codegen_emit_obj (1,932,642 samples, 1.46%)</title><rect x="67.1256%" y="165" width="1.4602%" height="15" fill="rgb(209,121,21)"/><text x="67.3756%" y="175.50"></text></g><g><title>codegen_module_perform_lto (2,865,182 samples, 2.16%)</title><rect x="66.4405%" y="197" width="2.1648%" height="15" fill="rgb(220,109,13)"/><text x="66.6905%" y="207.50">c..</text></g><g><title>AST_validation (139,472 samples, 0.11%)</title><rect x="68.7530%" y="181" width="0.1054%" height="15" fill="rgb(232,18,1)"/><text x="69.0030%" y="191.50"></text></g><g><title>metadata_load_macro (267,023 samples, 0.20%)</title><rect x="78.2473%" y="149" width="0.2017%" height="15" fill="rgb(215,41,42)"/><text x="78.4973%" y="159.50"></text></g><g><title>macro_expand_crate (15,805,326 samples, 11.94%)</title><rect x="68.9534%" y="181" width="11.9416%" height="15" fill="rgb(224,123,36)"/><text x="69.2034%" y="191.50">macro_expand_crate</text></g><g><title>expand_crate (15,783,286 samples, 11.92%)</title><rect x="68.9700%" y="165" width="11.9249%" height="15" fill="rgb(240,125,3)"/><text x="69.2200%" y="175.50">expand_crate</text></g><g><title>metadata_register_crate (3,237,245 samples, 2.45%)</title><rect x="78.4490%" y="149" width="2.4459%" height="15" fill="rgb(205,98,50)"/><text x="78.6990%" y="159.50">me..</text></g><g><title>metadata_register_crate (1,472,517 samples, 1.11%)</title><rect x="79.7824%" y="133" width="1.1125%" height="15" fill="rgb(205,185,37)"/><text x="80.0324%" y="143.50"></text></g><g><title>metadata_register_crate (481,564 samples, 0.36%)</title><rect x="80.5311%" y="117" width="0.3638%" height="15" fill="rgb(238,207,15)"/><text x="80.7811%" y="127.50"></text></g><g><title>metadata_register_crate (213,882 samples, 0.16%)</title><rect x="80.7333%" y="101" width="0.1616%" height="15" fill="rgb(213,199,42)"/><text x="80.9833%" y="111.50"></text></g><g><title>pre_AST_expansion_lint_checks (142,722 samples, 0.11%)</title><rect x="80.8983%" y="181" width="0.1078%" height="15" fill="rgb(235,201,11)"/><text x="81.1483%" y="191.50"></text></g><g><title>finalize_imports (259,163 samples, 0.20%)</title><rect x="81.0129%" y="165" width="0.1958%" height="15" fill="rgb(207,46,11)"/><text x="81.2629%" y="175.50"></text></g><g><title>late_resolve_crate (1,718,380 samples, 1.30%)</title><rect x="81.2445%" y="165" width="1.2983%" height="15" fill="rgb(241,35,35)"/><text x="81.4945%" y="175.50"></text></g><g><title>configure_and_expand (18,540,166 samples, 14.01%)</title><rect x="68.6053%" y="197" width="14.0078%" height="15" fill="rgb(243,32,47)"/><text x="68.8553%" y="207.50">configure_and_expand</text></g><g><title>resolve_crate (2,126,994 samples, 1.61%)</title><rect x="81.0061%" y="181" width="1.6070%" height="15" fill="rgb(247,202,23)"/><text x="81.2561%" y="191.50"></text></g><g><title>drop_ast (164,592 samples, 0.12%)</title><rect x="82.6131%" y="197" width="0.1244%" height="15" fill="rgb(219,102,11)"/><text x="82.8631%" y="207.50"></text></g><g><title>early_lint_checks (296,803 samples, 0.22%)</title><rect x="82.7521%" y="197" width="0.2242%" height="15" fill="rgb(243,110,44)"/><text x="83.0021%" y="207.50"></text></g><g><title>free_global_ctxt (3,078,064 samples, 2.33%)</title><rect x="82.9763%" y="197" width="2.3256%" height="15" fill="rgb(222,74,54)"/><text x="83.2263%" y="207.50">f..</text></g><g><title>layout_of (172,153 samples, 0.13%)</title><rect x="87.9998%" y="133" width="0.1301%" height="15" fill="rgb(216,99,12)"/><text x="88.2498%" y="143.50"></text></g><g><title>layout_of (333,864 samples, 0.25%)</title><rect x="87.8953%" y="149" width="0.2522%" height="15" fill="rgb(226,22,26)"/><text x="88.1453%" y="159.50"></text></g><g><title>layout_of (749,720 samples, 0.57%)</title><rect x="87.6019%" y="165" width="0.5664%" height="15" fill="rgb(217,163,10)"/><text x="87.8519%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,889,281 samples, 1.43%)</title><rect x="88.1683%" y="165" width="1.4274%" height="15" fill="rgb(213,25,53)"/><text x="88.4183%" y="175.50"></text></g><g><title>impl_parent (603,335 samples, 0.46%)</title><rect x="90.5311%" y="133" width="0.4558%" height="15" fill="rgb(252,105,26)"/><text x="90.7811%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_parent (354,922 samples, 0.27%)</title><rect x="90.7188%" y="117" width="0.2682%" height="15" fill="rgb(220,39,43)"/><text x="90.9688%" y="127.50"></text></g><g><title>impl_trait_ref (887,381 samples, 0.67%)</title><rect x="90.9870%" y="133" width="0.6705%" height="15" fill="rgb(229,68,48)"/><text x="91.2370%" y="143.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (632,150 samples, 0.48%)</title><rect x="91.1798%" y="117" width="0.4776%" height="15" fill="rgb(252,8,32)"/><text x="91.4298%" y="127.50"></text></g><g><title>specialization_graph_of (2,535,189 samples, 1.92%)</title><rect x="89.7430%" y="149" width="1.9154%" height="15" fill="rgb(223,20,43)"/><text x="89.9930%" y="159.50">s..</text></g><g><title>optimized_mir (7,005,557 samples, 5.29%)</title><rect x="86.3720%" y="181" width="5.2930%" height="15" fill="rgb(229,81,49)"/><text x="86.6220%" y="191.50">optimi..</text></g><g><title>resolve_instance (2,727,201 samples, 2.06%)</title><rect x="89.6045%" y="165" width="2.0605%" height="15" fill="rgb(236,28,36)"/><text x="89.8545%" y="175.50">r..</text></g><g><title>promoted_mir (238,253 samples, 0.18%)</title><rect x="91.6650%" y="181" width="0.1800%" height="15" fill="rgb(249,185,26)"/><text x="91.9150%" y="191.50"></text></g><g><title>generate_crate_metadata (8,675,847 samples, 6.55%)</title><rect x="85.3019%" y="197" width="6.5549%" height="15" fill="rgb(249,174,33)"/><text x="85.5519%" y="207.50">generate_..</text></g><g><title>hir_lowering (2,657,069 samples, 2.01%)</title><rect x="91.8569%" y="197" width="2.0075%" height="15" fill="rgb(233,201,37)"/><text x="92.1069%" y="207.50">h..</text></g><g><title>finish_ongoing_codegen (3,649,671 samples, 2.76%)</title><rect x="93.8750%" y="181" width="2.7575%" height="15" fill="rgb(221,78,26)"/><text x="94.1250%" y="191.50">fi..</text></g><g><title>link_crate (730,089 samples, 0.55%)</title><rect x="96.6325%" y="181" width="0.5516%" height="15" fill="rgb(250,127,30)"/><text x="96.8825%" y="191.50"></text></g><g><title>link_binary (703,318 samples, 0.53%)</title><rect x="96.6527%" y="165" width="0.5314%" height="15" fill="rgb(230,49,44)"/><text x="96.9027%" y="175.50"></text></g><g><title>link_rlib (466,676 samples, 0.35%)</title><rect x="96.8315%" y="149" width="0.3526%" height="15" fill="rgb(229,67,23)"/><text x="97.0815%" y="159.50"></text></g><g><title>link (4,402,980 samples, 3.33%)</title><rect x="93.8644%" y="197" width="3.3266%" height="15" fill="rgb(249,83,47)"/><text x="94.1144%" y="207.50">link</text></g><g><title>parse_crate (2,443,937 samples, 1.85%)</title><rect x="97.1910%" y="197" width="1.8465%" height="15" fill="rgb(215,43,3)"/><text x="97.4410%" y="207.50">p..</text></g><g><title>prepare_outputs (300,594 samples, 0.23%)</title><rect x="99.0427%" y="197" width="0.2271%" height="15" fill="rgb(238,154,13)"/><text x="99.2927%" y="207.50"></text></g><g><title>self_profile_alloc_query_strings (523,216 samples, 0.40%)</title><rect x="99.2698%" y="197" width="0.3953%" height="15" fill="rgb(219,56,2)"/><text x="99.5198%" y="207.50"></text></g><g><title>all (132,355,727 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(233,0,4)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (132,355,727 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(235,30,7)"/><text x="0.2500%" y="223.50">rustc</text></g><g><title>write_crate_metadata (320,934 samples, 0.24%)</title><rect x="99.7575%" y="197" width="0.2425%" height="15" fill="rgb(250,79,13)"/><text x="100.0075%" y="207.50"></text></g></svg></svg>