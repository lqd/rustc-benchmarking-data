<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="309.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="309.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (119,214,234 samples, 18.05%)</title><rect x="0.0690%" y="245" width="18.0482%" height="15" fill="rgb(227,0,7)"/><text x="0.3190%" y="255.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (753,848 samples, 0.11%)</title><rect x="18.0030%" y="229" width="0.1141%" height="15" fill="rgb(217,0,24)"/><text x="18.2530%" y="239.50"></text></g><g><title>LLVM_thin_lto_global_analysis (740,438 samples, 0.11%)</title><rect x="18.0050%" y="213" width="0.1121%" height="15" fill="rgb(221,193,54)"/><text x="18.2550%" y="223.50"></text></g><g><title>specialization_graph_of (1,100,401 samples, 0.17%)</title><rect x="18.4890%" y="117" width="0.1666%" height="15" fill="rgb(248,212,6)"/><text x="18.7390%" y="127.50"></text></g><g><title>resolve_instance (1,178,622 samples, 0.18%)</title><rect x="18.4793%" y="133" width="0.1784%" height="15" fill="rgb(208,68,35)"/><text x="18.7293%" y="143.50"></text></g><g><title>mir_const (2,229,525 samples, 0.34%)</title><rect x="18.3373%" y="181" width="0.3375%" height="15" fill="rgb(232,128,0)"/><text x="18.5873%" y="191.50"></text></g><g><title>unsafety_check_result (1,988,532 samples, 0.30%)</title><rect x="18.3737%" y="165" width="0.3010%" height="15" fill="rgb(207,160,47)"/><text x="18.6237%" y="175.50"></text></g><g><title>mir_built (1,819,171 samples, 0.28%)</title><rect x="18.3994%" y="149" width="0.2754%" height="15" fill="rgb(228,23,34)"/><text x="18.6494%" y="159.50"></text></g><g><title>mir_promoted (2,357,027 samples, 0.36%)</title><rect x="18.3186%" y="197" width="0.3568%" height="15" fill="rgb(218,30,26)"/><text x="18.5686%" y="207.50"></text></g><g><title>MIR_borrow_checking (3,979,424 samples, 0.60%)</title><rect x="18.1329%" y="229" width="0.6025%" height="15" fill="rgb(220,122,19)"/><text x="18.3829%" y="239.50"></text></g><g><title>mir_borrowck (3,973,844 samples, 0.60%)</title><rect x="18.1337%" y="213" width="0.6016%" height="15" fill="rgb(250,228,42)"/><text x="18.3837%" y="223.50"></text></g><g><title>coherent_trait (823,480 samples, 0.12%)</title><rect x="18.9782%" y="53" width="0.1247%" height="15" fill="rgb(240,193,28)"/><text x="19.2282%" y="63.50"></text></g><g><title>specialization_graph_of (815,940 samples, 0.12%)</title><rect x="18.9793%" y="37" width="0.1235%" height="15" fill="rgb(216,20,37)"/><text x="19.2293%" y="47.50"></text></g><g><title>adt_destructor (832,130 samples, 0.13%)</title><rect x="18.9772%" y="85" width="0.1260%" height="15" fill="rgb(206,188,39)"/><text x="19.2272%" y="95.50"></text></g><g><title>metadata_decode_entry_adt_destructor (830,890 samples, 0.13%)</title><rect x="18.9774%" y="69" width="0.1258%" height="15" fill="rgb(217,207,13)"/><text x="19.2274%" y="79.50"></text></g><g><title>adt_dtorck_constraint (937,441 samples, 0.14%)</title><rect x="18.9718%" y="101" width="0.1419%" height="15" fill="rgb(231,73,38)"/><text x="19.2218%" y="111.50"></text></g><g><title>adt_dtorck_constraint (1,000,961 samples, 0.15%)</title><rect x="18.9650%" y="117" width="0.1515%" height="15" fill="rgb(225,20,46)"/><text x="19.2150%" y="127.50"></text></g><g><title>adt_dtorck_constraint (1,043,591 samples, 0.16%)</title><rect x="18.9614%" y="133" width="0.1580%" height="15" fill="rgb(210,31,41)"/><text x="19.2114%" y="143.50"></text></g><g><title>dropck_outlives (1,106,773 samples, 0.17%)</title><rect x="18.9523%" y="165" width="0.1676%" height="15" fill="rgb(221,200,47)"/><text x="19.2023%" y="175.50"></text></g><g><title>adt_dtorck_constraint (1,078,912 samples, 0.16%)</title><rect x="18.9565%" y="149" width="0.1633%" height="15" fill="rgb(226,26,5)"/><text x="19.2065%" y="159.50"></text></g><g><title>associated_items (683,959 samples, 0.10%)</title><rect x="19.5817%" y="149" width="0.1035%" height="15" fill="rgb(249,33,26)"/><text x="19.8317%" y="159.50"></text></g><g><title>evaluate_obligation (1,331,513 samples, 0.20%)</title><rect x="19.6998%" y="149" width="0.2016%" height="15" fill="rgb(235,183,28)"/><text x="19.9498%" y="159.50"></text></g><g><title>typeck (5,679,953 samples, 0.86%)</title><rect x="19.2056%" y="165" width="0.8599%" height="15" fill="rgb(221,5,38)"/><text x="19.4556%" y="175.50"></text></g><g><title>item_bodies_checking (7,808,947 samples, 1.18%)</title><rect x="18.8838%" y="213" width="1.1822%" height="15" fill="rgb(247,18,42)"/><text x="19.1338%" y="223.50"></text></g><g><title>typeck_item_bodies (7,806,797 samples, 1.18%)</title><rect x="18.8841%" y="197" width="1.1819%" height="15" fill="rgb(241,131,45)"/><text x="19.1341%" y="207.50"></text></g><g><title>typeck (7,801,467 samples, 1.18%)</title><rect x="18.8850%" y="181" width="1.1811%" height="15" fill="rgb(249,31,29)"/><text x="19.1350%" y="191.50"></text></g><g><title>analysis (13,864,026 samples, 2.10%)</title><rect x="18.1171%" y="245" width="2.0989%" height="15" fill="rgb(225,111,53)"/><text x="18.3671%" y="255.50">a..</text></g><g><title>type_check_crate (8,837,139 samples, 1.34%)</title><rect x="18.8782%" y="229" width="1.3379%" height="15" fill="rgb(238,160,17)"/><text x="19.1282%" y="239.50"></text></g><g><title>wf_checking (703,398 samples, 0.11%)</title><rect x="20.1096%" y="213" width="0.1065%" height="15" fill="rgb(214,148,48)"/><text x="20.3596%" y="223.50"></text></g><g><title>check_item_well_formed (684,138 samples, 0.10%)</title><rect x="20.1125%" y="197" width="0.1036%" height="15" fill="rgb(232,36,49)"/><text x="20.3625%" y="207.50"></text></g><g><title>layout_of (1,174,223 samples, 0.18%)</title><rect x="23.4397%" y="197" width="0.1778%" height="15" fill="rgb(209,103,24)"/><text x="23.6897%" y="207.50"></text></g><g><title>predicates_of (675,688 samples, 0.10%)</title><rect x="23.8278%" y="181" width="0.1023%" height="15" fill="rgb(229,88,8)"/><text x="24.0778%" y="191.50"></text></g><g><title>param_env (2,076,033 samples, 0.31%)</title><rect x="23.6174%" y="197" width="0.3143%" height="15" fill="rgb(213,181,19)"/><text x="23.8674%" y="207.50"></text></g><g><title>try_normalize_generic_arg_after_erasing_regions (668,268 samples, 0.10%)</title><rect x="23.9317%" y="197" width="0.1012%" height="15" fill="rgb(254,191,54)"/><text x="24.1817%" y="207.50"></text></g><g><title>fn_abi_of_instance (6,304,289 samples, 0.95%)</title><rect x="23.0796%" y="213" width="0.9544%" height="15" fill="rgb(241,83,37)"/><text x="23.3296%" y="223.50"></text></g><g><title>codegen_module (24,895,159 samples, 3.77%)</title><rect x="20.4269%" y="229" width="3.7689%" height="15" fill="rgb(233,36,39)"/><text x="20.6769%" y="239.50">code..</text></g><g><title>item_attrs (1,328,319 samples, 0.20%)</title><rect x="24.4526%" y="165" width="0.2011%" height="15" fill="rgb(226,3,54)"/><text x="24.7026%" y="175.50"></text></g><g><title>metadata_decode_entry_item_attrs (1,284,526 samples, 0.19%)</title><rect x="24.4593%" y="149" width="0.1945%" height="15" fill="rgb(245,192,40)"/><text x="24.7093%" y="159.50"></text></g><g><title>codegen_fn_attrs (2,029,156 samples, 0.31%)</title><rect x="24.4131%" y="181" width="0.3072%" height="15" fill="rgb(238,167,29)"/><text x="24.6631%" y="191.50"></text></g><g><title>metadata_decode_entry_optimized_mir (2,158,016 samples, 0.33%)</title><rect x="24.8474%" y="165" width="0.3267%" height="15" fill="rgb(232,182,51)"/><text x="25.0974%" y="175.50"></text></g><g><title>optimized_mir (2,715,301 samples, 0.41%)</title><rect x="24.8009%" y="181" width="0.4111%" height="15" fill="rgb(231,60,39)"/><text x="25.0509%" y="191.50"></text></g><g><title>trait_impls_of (750,296 samples, 0.11%)</title><rect x="25.6583%" y="149" width="0.1136%" height="15" fill="rgb(208,69,12)"/><text x="25.9083%" y="159.50"></text></g><g><title>codegen_fulfill_obligation (3,001,101 samples, 0.45%)</title><rect x="25.3180%" y="165" width="0.4543%" height="15" fill="rgb(235,93,37)"/><text x="25.5680%" y="175.50"></text></g><g><title>impl_parent (1,419,412 samples, 0.21%)</title><rect x="26.1878%" y="149" width="0.2149%" height="15" fill="rgb(213,116,39)"/><text x="26.4378%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_parent (895,659 samples, 0.14%)</title><rect x="26.2671%" y="133" width="0.1356%" height="15" fill="rgb(222,207,29)"/><text x="26.5171%" y="143.50"></text></g><g><title>specialization_graph_of (7,474,492 samples, 1.13%)</title><rect x="25.8699%" y="165" width="1.1316%" height="15" fill="rgb(206,96,30)"/><text x="26.1199%" y="175.50"></text></g><g><title>impl_trait_ref (3,955,199 samples, 0.60%)</title><rect x="26.4027%" y="149" width="0.5988%" height="15" fill="rgb(218,138,4)"/><text x="26.6527%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,225,630 samples, 0.49%)</title><rect x="26.5131%" y="133" width="0.4883%" height="15" fill="rgb(250,191,14)"/><text x="26.7631%" y="143.50"></text></g><g><title>resolve_instance (12,126,490 samples, 1.84%)</title><rect x="25.2120%" y="181" width="1.8359%" height="15" fill="rgb(239,60,40)"/><text x="25.4620%" y="191.50">r..</text></g><g><title>mir_for_ctfe (1,009,961 samples, 0.15%)</title><rect x="27.1650%" y="117" width="0.1529%" height="15" fill="rgb(206,27,48)"/><text x="27.4150%" y="127.50"></text></g><g><title>metadata_decode_entry_mir_for_ctfe (1,005,711 samples, 0.15%)</title><rect x="27.1656%" y="101" width="0.1523%" height="15" fill="rgb(225,35,8)"/><text x="27.4156%" y="111.50"></text></g><g><title>eval_to_const_value_raw (1,788,069 samples, 0.27%)</title><rect x="27.0741%" y="165" width="0.2707%" height="15" fill="rgb(250,213,24)"/><text x="27.3241%" y="175.50"></text></g><g><title>eval_to_const_value_raw (1,762,209 samples, 0.27%)</title><rect x="27.0780%" y="149" width="0.2668%" height="15" fill="rgb(247,123,22)"/><text x="27.3280%" y="159.50"></text></g><g><title>eval_to_allocation_raw (1,732,249 samples, 0.26%)</title><rect x="27.0825%" y="133" width="0.2622%" height="15" fill="rgb(231,138,38)"/><text x="27.3325%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (20,809,304 samples, 3.15%)</title><rect x="24.2012%" y="197" width="3.1504%" height="15" fill="rgb(231,145,46)"/><text x="24.4512%" y="207.50">mon..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (2,006,142 samples, 0.30%)</title><rect x="27.0478%" y="181" width="0.3037%" height="15" fill="rgb(251,118,11)"/><text x="27.2978%" y="191.50"></text></g><g><title>monomorphization_collector (20,822,444 samples, 3.15%)</title><rect x="24.2009%" y="213" width="3.1524%" height="15" fill="rgb(217,147,25)"/><text x="24.4509%" y="223.50">mon..</text></g><g><title>assert_symbols_are_distinct (1,326,155 samples, 0.20%)</title><rect x="27.3538%" y="197" width="0.2008%" height="15" fill="rgb(247,81,37)"/><text x="27.6038%" y="207.50"></text></g><g><title>symbol_name (1,200,024 samples, 0.18%)</title><rect x="27.3729%" y="181" width="0.1817%" height="15" fill="rgb(209,12,38)"/><text x="27.6229%" y="191.50"></text></g><g><title>collect_and_partition_mono_items (22,601,373 samples, 3.42%)</title><rect x="24.1967%" y="229" width="3.4217%" height="15" fill="rgb(227,1,9)"/><text x="24.4467%" y="239.50">col..</text></g><g><title>partition_and_assert_distinct_symbols (1,751,119 samples, 0.27%)</title><rect x="27.3533%" y="213" width="0.2651%" height="15" fill="rgb(248,47,43)"/><text x="27.6033%" y="223.50"></text></g><g><title>codegen_crate (48,948,368 samples, 7.41%)</title><rect x="20.2171%" y="245" width="7.4104%" height="15" fill="rgb(221,10,30)"/><text x="20.4671%" y="255.50">codegen_cr..</text></g><g><title>codegen_module_optimize (209,101,181 samples, 31.66%)</title><rect x="27.6276%" y="245" width="31.6564%" height="15" fill="rgb(210,229,1)"/><text x="27.8776%" y="255.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (192,016,732 samples, 29.07%)</title><rect x="30.2140%" y="229" width="29.0699%" height="15" fill="rgb(222,148,37)"/><text x="30.4640%" y="239.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (57,680,988 samples, 8.73%)</title><rect x="61.0830%" y="229" width="8.7325%" height="15" fill="rgb(234,67,33)"/><text x="61.3330%" y="239.50">LLVM_lto_opt..</text></g><g><title>LLVM_module_codegen (78,544,691 samples, 11.89%)</title><rect x="69.8155%" y="229" width="11.8911%" height="15" fill="rgb(247,98,35)"/><text x="70.0655%" y="239.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (77,201,235 samples, 11.69%)</title><rect x="70.0189%" y="213" width="11.6877%" height="15" fill="rgb(247,138,52)"/><text x="70.2689%" y="223.50">LLVM_module_codeg..</text></g><g><title>LLVM_thin_lto_import (3,537,748 samples, 0.54%)</title><rect x="81.7066%" y="229" width="0.5356%" height="15" fill="rgb(213,79,30)"/><text x="81.9566%" y="239.50"></text></g><g><title>codegen_module_perform_lto (151,921,012 samples, 23.00%)</title><rect x="59.2840%" y="245" width="22.9997%" height="15" fill="rgb(246,177,23)"/><text x="59.5340%" y="255.50">codegen_module_perform_lto</text></g><g><title>macro_expand_crate (8,856,339 samples, 1.34%)</title><rect x="82.3220%" y="229" width="1.3408%" height="15" fill="rgb(230,62,27)"/><text x="82.5720%" y="239.50"></text></g><g><title>expand_crate (8,841,119 samples, 1.34%)</title><rect x="82.3243%" y="213" width="1.3385%" height="15" fill="rgb(216,154,8)"/><text x="82.5743%" y="223.50"></text></g><g><title>metadata_register_crate (2,129,004 samples, 0.32%)</title><rect x="83.3405%" y="197" width="0.3223%" height="15" fill="rgb(244,35,45)"/><text x="83.5905%" y="207.50"></text></g><g><title>metadata_register_crate (746,641 samples, 0.11%)</title><rect x="83.5498%" y="181" width="0.1130%" height="15" fill="rgb(251,115,12)"/><text x="83.7998%" y="191.50"></text></g><g><title>configure_and_expand (9,819,180 samples, 1.49%)</title><rect x="82.2837%" y="245" width="1.4866%" height="15" fill="rgb(240,54,50)"/><text x="82.5337%" y="255.50"></text></g><g><title>free_global_ctxt (5,269,309 samples, 0.80%)</title><rect x="83.8482%" y="245" width="0.7977%" height="15" fill="rgb(233,84,52)"/><text x="84.0982%" y="255.50"></text></g><g><title>generate_crate_metadata (801,519 samples, 0.12%)</title><rect x="84.6460%" y="245" width="0.1213%" height="15" fill="rgb(207,117,47)"/><text x="84.8960%" y="255.50"></text></g><g><title>finish_ongoing_codegen (96,059,705 samples, 14.54%)</title><rect x="84.8310%" y="229" width="14.5427%" height="15" fill="rgb(249,43,39)"/><text x="85.0810%" y="239.50">finish_ongoing_codegen</text></g><g><title>link_crate (1,429,456 samples, 0.22%)</title><rect x="99.3737%" y="229" width="0.2164%" height="15" fill="rgb(209,38,44)"/><text x="99.6237%" y="239.50"></text></g><g><title>link_binary (1,417,636 samples, 0.21%)</title><rect x="99.3755%" y="213" width="0.2146%" height="15" fill="rgb(236,212,23)"/><text x="99.6255%" y="223.50"></text></g><g><title>link_rlib (877,930 samples, 0.13%)</title><rect x="99.4572%" y="197" width="0.1329%" height="15" fill="rgb(242,79,21)"/><text x="99.7072%" y="207.50"></text></g><g><title>link (97,514,131 samples, 14.76%)</title><rect x="84.8284%" y="245" width="14.7629%" height="15" fill="rgb(211,96,35)"/><text x="85.0784%" y="255.50">link</text></g><g><title>parse_crate (665,407 samples, 0.10%)</title><rect x="99.5913%" y="245" width="0.1007%" height="15" fill="rgb(253,215,40)"/><text x="99.8413%" y="255.50"></text></g><g><title>self_profile_alloc_query_strings (1,328,355 samples, 0.20%)</title><rect x="99.7377%" y="245" width="0.2011%" height="15" fill="rgb(211,81,21)"/><text x="99.9877%" y="255.50"></text></g><g><title>all (660,533,664 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(208,190,38)"/><text x="0.2500%" y="287.50"></text></g><g><title>rustc (660,533,664 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,213,38)"/><text x="0.2500%" y="271.50">rustc</text></g></svg></svg>