<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="310" onload="init(evt)" viewBox="0 0 1200 310" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="310" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="293.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="293.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (496,644,340 samples, 8.92%)</title><rect x="0.0297%" y="229" width="8.9199%" height="15" fill="rgb(227,0,7)"/><text x="0.2797%" y="239.50">LLVM_passes</text></g><g><title>is_copy_raw (13,068,070 samples, 0.23%)</title><rect x="14.0410%" y="101" width="0.2347%" height="15" fill="rgb(217,0,24)"/><text x="14.2910%" y="111.50"></text></g><g><title>evaluate_obligation (10,591,551 samples, 0.19%)</title><rect x="14.0855%" y="85" width="0.1902%" height="15" fill="rgb(221,193,54)"/><text x="14.3355%" y="95.50"></text></g><g><title>needs_drop_raw (17,961,959 samples, 0.32%)</title><rect x="13.9583%" y="117" width="0.3226%" height="15" fill="rgb(248,212,6)"/><text x="14.2083%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (9,873,515 samples, 0.18%)</title><rect x="14.3586%" y="101" width="0.1773%" height="15" fill="rgb(208,68,35)"/><text x="14.6086%" y="111.50"></text></g><g><title>resolve_instance (16,513,746 samples, 0.30%)</title><rect x="14.2818%" y="117" width="0.2966%" height="15" fill="rgb(232,128,0)"/><text x="14.5318%" y="127.50"></text></g><g><title>thir_body (14,976,191 samples, 0.27%)</title><rect x="14.5873%" y="117" width="0.2690%" height="15" fill="rgb(207,160,47)"/><text x="14.8373%" y="127.50"></text></g><g><title>mir_const (117,483,275 samples, 2.11%)</title><rect x="12.7626%" y="165" width="2.1101%" height="15" fill="rgb(228,23,34)"/><text x="13.0126%" y="175.50">m..</text></g><g><title>unsafety_check_result (103,059,675 samples, 1.85%)</title><rect x="13.0216%" y="149" width="1.8510%" height="15" fill="rgb(218,30,26)"/><text x="13.2716%" y="159.50">u..</text></g><g><title>mir_built (92,211,543 samples, 1.66%)</title><rect x="13.2165%" y="133" width="1.6562%" height="15" fill="rgb(220,122,19)"/><text x="13.4665%" y="143.50"></text></g><g><title>mir_const_qualif (6,927,643 samples, 0.12%)</title><rect x="14.8726%" y="165" width="0.1244%" height="15" fill="rgb(250,228,42)"/><text x="15.1226%" y="175.50"></text></g><g><title>mir_promoted (135,505,880 samples, 2.43%)</title><rect x="12.5635%" y="181" width="2.4337%" height="15" fill="rgb(240,193,28)"/><text x="12.8135%" y="191.50">mi..</text></g><g><title>type_op_ascribe_user_type (7,063,701 samples, 0.13%)</title><rect x="14.9975%" y="181" width="0.1269%" height="15" fill="rgb(216,20,37)"/><text x="15.2475%" y="191.50"></text></g><g><title>type_op_normalize_fn_sig (11,964,535 samples, 0.21%)</title><rect x="15.1244%" y="181" width="0.2149%" height="15" fill="rgb(206,188,39)"/><text x="15.3744%" y="191.50"></text></g><g><title>normalize_projection_ty (7,064,701 samples, 0.13%)</title><rect x="15.2124%" y="165" width="0.1269%" height="15" fill="rgb(217,207,13)"/><text x="15.4624%" y="175.50"></text></g><g><title>type_op_normalize_predicate (10,830,258 samples, 0.19%)</title><rect x="15.3396%" y="181" width="0.1945%" height="15" fill="rgb(231,73,38)"/><text x="15.5896%" y="191.50"></text></g><g><title>type_op_prove_predicate (53,145,043 samples, 0.95%)</title><rect x="15.6035%" y="181" width="0.9545%" height="15" fill="rgb(225,20,46)"/><text x="15.8535%" y="191.50"></text></g><g><title>MIR_borrow_checking (420,666,991 samples, 7.56%)</title><rect x="9.0036%" y="213" width="7.5554%" height="15" fill="rgb(210,31,41)"/><text x="9.2536%" y="223.50">MIR_borrow..</text></g><g><title>mir_borrowck (416,975,218 samples, 7.49%)</title><rect x="9.0699%" y="197" width="7.4891%" height="15" fill="rgb(221,200,47)"/><text x="9.3199%" y="207.50">mir_borrow..</text></g><g><title>check_mod_attrs (6,449,564 samples, 0.12%)</title><rect x="16.6600%" y="197" width="0.1158%" height="15" fill="rgb(226,26,5)"/><text x="16.9100%" y="207.50"></text></g><g><title>misc_checking_1 (13,866,046 samples, 0.25%)</title><rect x="16.6579%" y="213" width="0.2490%" height="15" fill="rgb(249,33,26)"/><text x="16.9079%" y="223.50"></text></g><g><title>liveness_and_intrinsic_checking (8,142,132 samples, 0.15%)</title><rect x="16.9070%" y="197" width="0.1462%" height="15" fill="rgb(235,183,28)"/><text x="17.1570%" y="207.50"></text></g><g><title>check_mod_liveness (6,813,297 samples, 0.12%)</title><rect x="16.9308%" y="181" width="0.1224%" height="15" fill="rgb(221,5,38)"/><text x="17.1808%" y="191.50"></text></g><g><title>misc_checking_2 (16,228,123 samples, 0.29%)</title><rect x="16.9069%" y="213" width="0.2915%" height="15" fill="rgb(247,18,42)"/><text x="17.1569%" y="223.50"></text></g><g><title>match_checking (8,083,371 samples, 0.15%)</title><rect x="17.0532%" y="197" width="0.1452%" height="15" fill="rgb(241,131,45)"/><text x="17.3032%" y="207.50"></text></g><g><title>check_match (7,428,161 samples, 0.13%)</title><rect x="17.0650%" y="181" width="0.1334%" height="15" fill="rgb(249,31,29)"/><text x="17.3150%" y="191.50"></text></g><g><title>death_checking (6,069,619 samples, 0.11%)</title><rect x="17.2647%" y="197" width="0.1090%" height="15" fill="rgb(225,111,53)"/><text x="17.5147%" y="207.50"></text></g><g><title>crate_lints (16,777,409 samples, 0.30%)</title><rect x="17.3738%" y="181" width="0.3013%" height="15" fill="rgb(238,160,17)"/><text x="17.6238%" y="191.50"></text></g><g><title>lint_checking (24,029,411 samples, 0.43%)</title><rect x="17.3737%" y="197" width="0.4316%" height="15" fill="rgb(214,148,48)"/><text x="17.6237%" y="207.50"></text></g><g><title>module_lints (7,248,262 samples, 0.13%)</title><rect x="17.6751%" y="181" width="0.1302%" height="15" fill="rgb(232,36,49)"/><text x="17.9251%" y="191.50"></text></g><g><title>lint_mod (7,204,262 samples, 0.13%)</title><rect x="17.6759%" y="165" width="0.1294%" height="15" fill="rgb(209,103,24)"/><text x="17.9259%" y="175.50"></text></g><g><title>privacy_access_levels (7,120,661 samples, 0.13%)</title><rect x="17.8053%" y="197" width="0.1279%" height="15" fill="rgb(229,88,8)"/><text x="18.0553%" y="207.50"></text></g><g><title>privacy_checking_modules (14,771,536 samples, 0.27%)</title><rect x="17.9332%" y="197" width="0.2653%" height="15" fill="rgb(213,181,19)"/><text x="18.1832%" y="207.50"></text></g><g><title>check_mod_privacy (14,729,836 samples, 0.26%)</title><rect x="17.9339%" y="181" width="0.2646%" height="15" fill="rgb(254,191,54)"/><text x="18.1839%" y="191.50"></text></g><g><title>misc_checking_3 (56,253,465 samples, 1.01%)</title><rect x="17.1984%" y="213" width="1.0103%" height="15" fill="rgb(241,83,37)"/><text x="17.4484%" y="223.50"></text></g><g><title>impl_trait_ref (10,775,422 samples, 0.19%)</title><rect x="18.5414%" y="149" width="0.1935%" height="15" fill="rgb(233,36,39)"/><text x="18.7914%" y="159.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (8,561,351 samples, 0.15%)</title><rect x="18.5812%" y="133" width="0.1538%" height="15" fill="rgb(226,3,54)"/><text x="18.8312%" y="143.50"></text></g><g><title>impl_wf_inference (36,510,973 samples, 0.66%)</title><rect x="18.2483%" y="197" width="0.6558%" height="15" fill="rgb(245,192,40)"/><text x="18.4983%" y="207.50"></text></g><g><title>check_mod_impl_wf (36,471,803 samples, 0.66%)</title><rect x="18.2490%" y="181" width="0.6550%" height="15" fill="rgb(238,167,29)"/><text x="18.4990%" y="191.50"></text></g><g><title>specialization_graph_of (35,317,100 samples, 0.63%)</title><rect x="18.2698%" y="165" width="0.6343%" height="15" fill="rgb(232,182,51)"/><text x="18.5198%" y="175.50"></text></g><g><title>visible_parent_map (5,653,524 samples, 0.10%)</title><rect x="18.8025%" y="149" width="0.1015%" height="15" fill="rgb(231,60,39)"/><text x="19.0525%" y="159.50"></text></g><g><title>evaluate_obligation (30,432,638 samples, 0.55%)</title><rect x="23.4326%" y="149" width="0.5466%" height="15" fill="rgb(208,69,12)"/><text x="23.6826%" y="159.50"></text></g><g><title>method_autoderef_steps (7,094,482 samples, 0.13%)</title><rect x="24.0885%" y="149" width="0.1274%" height="15" fill="rgb(235,93,37)"/><text x="24.3385%" y="159.50"></text></g><g><title>evaluate_obligation (11,523,685 samples, 0.21%)</title><rect x="26.1030%" y="133" width="0.2070%" height="15" fill="rgb(213,116,39)"/><text x="26.3530%" y="143.50"></text></g><g><title>typeck (124,223,810 samples, 2.23%)</title><rect x="24.2897%" y="149" width="2.2311%" height="15" fill="rgb(222,207,29)"/><text x="24.5397%" y="159.50">t..</text></g><g><title>item_bodies_checking (425,476,856 samples, 7.64%)</title><rect x="18.9041%" y="197" width="7.6417%" height="15" fill="rgb(206,96,30)"/><text x="19.1541%" y="207.50">item_bodie..</text></g><g><title>typeck_item_bodies (425,472,576 samples, 7.64%)</title><rect x="18.9041%" y="181" width="7.6417%" height="15" fill="rgb(218,138,4)"/><text x="19.1541%" y="191.50">typeck_ite..</text></g><g><title>typeck (423,844,262 samples, 7.61%)</title><rect x="18.9334%" y="165" width="7.6124%" height="15" fill="rgb(250,191,14)"/><text x="19.1834%" y="175.50">typeck</text></g><g><title>mir_built (27,426,002 samples, 0.49%)</title><rect x="27.3192%" y="85" width="0.4926%" height="15" fill="rgb(239,60,40)"/><text x="27.5692%" y="95.50"></text></g><g><title>typeck (24,157,662 samples, 0.43%)</title><rect x="27.3779%" y="69" width="0.4339%" height="15" fill="rgb(206,27,48)"/><text x="27.6279%" y="79.50"></text></g><g><title>mir_const (29,932,219 samples, 0.54%)</title><rect x="27.2936%" y="117" width="0.5376%" height="15" fill="rgb(225,35,8)"/><text x="27.5436%" y="127.50"></text></g><g><title>unsafety_check_result (28,933,450 samples, 0.52%)</title><rect x="27.3115%" y="101" width="0.5197%" height="15" fill="rgb(250,213,24)"/><text x="27.5615%" y="111.50"></text></g><g><title>mir_promoted (30,263,734 samples, 0.54%)</title><rect x="27.2881%" y="133" width="0.5435%" height="15" fill="rgb(247,123,22)"/><text x="27.5381%" y="143.50"></text></g><g><title>type_of (49,456,158 samples, 0.89%)</title><rect x="27.0401%" y="165" width="0.8883%" height="15" fill="rgb(231,138,38)"/><text x="27.2901%" y="175.50"></text></g><g><title>mir_borrowck (49,292,226 samples, 0.89%)</title><rect x="27.0431%" y="149" width="0.8853%" height="15" fill="rgb(231,145,46)"/><text x="27.2931%" y="159.50"></text></g><g><title>typeck (10,654,411 samples, 0.19%)</title><rect x="27.9284%" y="165" width="0.1914%" height="15" fill="rgb(251,118,11)"/><text x="28.1784%" y="175.50"></text></g><g><title>item_types_checking (87,633,999 samples, 1.57%)</title><rect x="26.5458%" y="197" width="1.5739%" height="15" fill="rgb(217,147,25)"/><text x="26.7958%" y="207.50"></text></g><g><title>check_mod_item_types (87,576,159 samples, 1.57%)</title><rect x="26.5469%" y="181" width="1.5729%" height="15" fill="rgb(247,81,37)"/><text x="26.7969%" y="191.50"></text></g><g><title>generics_of (6,808,910 samples, 0.12%)</title><rect x="28.2684%" y="165" width="0.1223%" height="15" fill="rgb(209,12,38)"/><text x="28.5184%" y="175.50"></text></g><g><title>explicit_predicates_of (7,038,126 samples, 0.13%)</title><rect x="28.4421%" y="133" width="0.1264%" height="15" fill="rgb(227,1,9)"/><text x="28.6921%" y="143.50"></text></g><g><title>predicates_of (11,341,213 samples, 0.20%)</title><rect x="28.4060%" y="165" width="0.2037%" height="15" fill="rgb(248,47,43)"/><text x="28.6560%" y="175.50"></text></g><g><title>predicates_defined_on (10,551,036 samples, 0.19%)</title><rect x="28.4202%" y="149" width="0.1895%" height="15" fill="rgb(221,10,30)"/><text x="28.6702%" y="159.50"></text></g><g><title>type_collecting (29,192,700 samples, 0.52%)</title><rect x="28.1202%" y="197" width="0.5243%" height="15" fill="rgb(210,229,1)"/><text x="28.3702%" y="207.50"></text></g><g><title>collect_mod_item_types (29,143,669 samples, 0.52%)</title><rect x="28.1211%" y="181" width="0.5234%" height="15" fill="rgb(222,148,37)"/><text x="28.3711%" y="191.50"></text></g><g><title>evaluate_obligation (6,805,967 samples, 0.12%)</title><rect x="29.3807%" y="165" width="0.1222%" height="15" fill="rgb(234,67,33)"/><text x="29.6307%" y="175.50"></text></g><g><title>param_env (6,651,109 samples, 0.12%)</title><rect x="29.6045%" y="165" width="0.1195%" height="15" fill="rgb(247,98,35)"/><text x="29.8545%" y="175.50"></text></g><g><title>check_impl_item_well_formed (62,062,346 samples, 1.11%)</title><rect x="28.7037%" y="181" width="1.1147%" height="15" fill="rgb(247,138,52)"/><text x="28.9537%" y="191.50"></text></g><g><title>evaluate_obligation (6,276,082 samples, 0.11%)</title><rect x="30.3591%" y="37" width="0.1127%" height="15" fill="rgb(213,79,30)"/><text x="30.6091%" y="47.50"></text></g><g><title>eval_to_const_value_raw (8,052,011 samples, 0.14%)</title><rect x="30.3293%" y="101" width="0.1446%" height="15" fill="rgb(246,177,23)"/><text x="30.5793%" y="111.50"></text></g><g><title>eval_to_const_value_raw (8,046,911 samples, 0.14%)</title><rect x="30.3294%" y="85" width="0.1445%" height="15" fill="rgb(230,62,27)"/><text x="30.5794%" y="95.50"></text></g><g><title>eval_to_allocation_raw (8,035,031 samples, 0.14%)</title><rect x="30.3296%" y="69" width="0.1443%" height="15" fill="rgb(216,154,8)"/><text x="30.5796%" y="79.50"></text></g><g><title>typeck (6,859,458 samples, 0.12%)</title><rect x="30.3507%" y="53" width="0.1232%" height="15" fill="rgb(244,35,45)"/><text x="30.6007%" y="63.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (8,100,331 samples, 0.15%)</title><rect x="30.3288%" y="117" width="0.1455%" height="15" fill="rgb(251,115,12)"/><text x="30.5788%" y="127.50"></text></g><g><title>eval_to_const_value_raw (10,980,214 samples, 0.20%)</title><rect x="30.2831%" y="165" width="0.1972%" height="15" fill="rgb(240,54,50)"/><text x="30.5331%" y="175.50"></text></g><g><title>eval_to_const_value_raw (10,959,884 samples, 0.20%)</title><rect x="30.2835%" y="149" width="0.1968%" height="15" fill="rgb(233,84,52)"/><text x="30.5335%" y="159.50"></text></g><g><title>eval_to_allocation_raw (10,952,654 samples, 0.20%)</title><rect x="30.2836%" y="133" width="0.1967%" height="15" fill="rgb(207,117,47)"/><text x="30.5336%" y="143.50"></text></g><g><title>check_item_well_formed (49,763,055 samples, 0.89%)</title><rect x="29.8183%" y="181" width="0.8938%" height="15" fill="rgb(249,43,39)"/><text x="30.0683%" y="191.50"></text></g><g><title>analysis (1,215,399,927 samples, 21.83%)</title><rect x="8.9496%" y="229" width="21.8291%" height="15" fill="rgb(209,38,44)"/><text x="9.1996%" y="239.50">analysis</text></g><g><title>type_check_crate (699,873,256 samples, 12.57%)</title><rect x="18.2087%" y="213" width="12.5700%" height="15" fill="rgb(236,212,23)"/><text x="18.4587%" y="223.50">type_check_crate</text></g><g><title>wf_checking (118,719,331 samples, 2.13%)</title><rect x="28.6465%" y="197" width="2.1323%" height="15" fill="rgb(242,79,21)"/><text x="28.8965%" y="207.50">w..</text></g><g><title>param_env (13,805,522 samples, 0.25%)</title><rect x="34.7939%" y="181" width="0.2480%" height="15" fill="rgb(211,96,35)"/><text x="35.0439%" y="191.50"></text></g><g><title>fn_abi_of_instance (53,270,527 samples, 0.96%)</title><rect x="34.1520%" y="197" width="0.9568%" height="15" fill="rgb(253,215,40)"/><text x="34.4020%" y="207.50"></text></g><g><title>codegen_module (247,197,061 samples, 4.44%)</title><rect x="30.8223%" y="213" width="4.4398%" height="15" fill="rgb(211,81,21)"/><text x="31.0723%" y="223.50">codeg..</text></g><g><title>metadata_decode_entry_optimized_mir (9,352,050 samples, 0.17%)</title><rect x="35.7440%" y="149" width="0.1680%" height="15" fill="rgb(208,190,38)"/><text x="35.9940%" y="159.50"></text></g><g><title>optimized_mir (22,633,068 samples, 0.41%)</title><rect x="35.6294%" y="165" width="0.4065%" height="15" fill="rgb(235,213,38)"/><text x="35.8794%" y="175.50"></text></g><g><title>codegen_fulfill_obligation (12,173,575 samples, 0.22%)</title><rect x="36.1124%" y="149" width="0.2186%" height="15" fill="rgb(237,122,38)"/><text x="36.3624%" y="159.50"></text></g><g><title>resolve_instance (22,459,904 samples, 0.40%)</title><rect x="36.0359%" y="165" width="0.4034%" height="15" fill="rgb(244,218,35)"/><text x="36.2859%" y="175.50"></text></g><g><title>monomorphization_collector_graph_walk (74,525,621 samples, 1.34%)</title><rect x="35.2640%" y="181" width="1.3385%" height="15" fill="rgb(240,68,47)"/><text x="35.5140%" y="191.50"></text></g><g><title>monomorphization_collector (75,182,449 samples, 1.35%)</title><rect x="35.2639%" y="197" width="1.3503%" height="15" fill="rgb(210,16,53)"/><text x="35.5139%" y="207.50"></text></g><g><title>assert_symbols_are_distinct (8,559,516 samples, 0.15%)</title><rect x="36.6143%" y="181" width="0.1537%" height="15" fill="rgb(235,124,12)"/><text x="36.8643%" y="191.50"></text></g><g><title>symbol_name (7,665,155 samples, 0.14%)</title><rect x="36.6304%" y="165" width="0.1377%" height="15" fill="rgb(224,169,11)"/><text x="36.8804%" y="175.50"></text></g><g><title>collect_and_partition_mono_items (86,941,112 samples, 1.56%)</title><rect x="35.2623%" y="213" width="1.5615%" height="15" fill="rgb(250,166,2)"/><text x="35.5123%" y="223.50"></text></g><g><title>partition_and_assert_distinct_symbols (11,672,292 samples, 0.21%)</title><rect x="36.6142%" y="197" width="0.2096%" height="15" fill="rgb(242,216,29)"/><text x="36.8642%" y="207.50"></text></g><g><title>codegen_crate (336,721,923 samples, 6.05%)</title><rect x="30.7789%" y="229" width="6.0477%" height="15" fill="rgb(230,116,27)"/><text x="31.0289%" y="239.50">codegen_..</text></g><g><title>codegen_module_optimize (1,491,587,707 samples, 26.79%)</title><rect x="36.8265%" y="229" width="26.7896%" height="15" fill="rgb(228,99,48)"/><text x="37.0765%" y="239.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (1,442,338,862 samples, 25.91%)</title><rect x="37.7111%" y="213" width="25.9050%" height="15" fill="rgb(253,11,6)"/><text x="37.9611%" y="223.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (684,936,697 samples, 12.30%)</title><rect x="64.1423%" y="213" width="12.3018%" height="15" fill="rgb(247,143,39)"/><text x="64.3923%" y="223.50">LLVM_lto_optimize</text></g><g><title>LLVM_module_codegen (566,743,119 samples, 10.18%)</title><rect x="76.4440%" y="213" width="10.1790%" height="15" fill="rgb(236,97,10)"/><text x="76.6940%" y="223.50">LLVM_module_cod..</text></g><g><title>LLVM_module_codegen_emit_obj (562,141,869 samples, 10.10%)</title><rect x="76.5267%" y="197" width="10.0963%" height="15" fill="rgb(233,208,19)"/><text x="76.7767%" y="207.50">LLVM_module_cod..</text></g><g><title>LLVM_thin_lto_import (112,593,920 samples, 2.02%)</title><rect x="86.6230%" y="213" width="2.0222%" height="15" fill="rgb(216,164,2)"/><text x="86.8730%" y="223.50">L..</text></g><g><title>codegen_module_perform_lto (1,395,672,529 samples, 25.07%)</title><rect x="63.6161%" y="229" width="25.0669%" height="15" fill="rgb(220,129,5)"/><text x="63.8661%" y="239.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (10,892,513 samples, 0.20%)</title><rect x="90.4900%" y="181" width="0.1956%" height="15" fill="rgb(242,17,10)"/><text x="90.7400%" y="191.50"></text></g><g><title>macro_expand_crate (109,963,742 samples, 1.97%)</title><rect x="88.7418%" y="213" width="1.9750%" height="15" fill="rgb(242,107,0)"/><text x="88.9918%" y="223.50">m..</text></g><g><title>expand_crate (109,937,162 samples, 1.97%)</title><rect x="88.7422%" y="197" width="1.9745%" height="15" fill="rgb(251,28,31)"/><text x="88.9922%" y="207.50">e..</text></g><g><title>late_resolve_crate (23,258,253 samples, 0.42%)</title><rect x="90.7591%" y="197" width="0.4177%" height="15" fill="rgb(233,223,10)"/><text x="91.0091%" y="207.50"></text></g><g><title>configure_and_expand (141,766,771 samples, 2.55%)</title><rect x="88.6830%" y="229" width="2.5462%" height="15" fill="rgb(215,21,27)"/><text x="88.9330%" y="239.50">co..</text></g><g><title>resolve_crate (28,434,641 samples, 0.51%)</title><rect x="90.7185%" y="213" width="0.5107%" height="15" fill="rgb(232,23,21)"/><text x="90.9685%" y="223.50"></text></g><g><title>free_global_ctxt (36,062,688 samples, 0.65%)</title><rect x="91.3894%" y="229" width="0.6477%" height="15" fill="rgb(244,5,23)"/><text x="91.6394%" y="239.50"></text></g><g><title>layout_of (6,862,176 samples, 0.12%)</title><rect x="93.5504%" y="181" width="0.1232%" height="15" fill="rgb(226,81,46)"/><text x="93.8004%" y="191.50"></text></g><g><title>layout_of (16,924,723 samples, 0.30%)</title><rect x="93.3916%" y="197" width="0.3040%" height="15" fill="rgb(247,70,30)"/><text x="93.6416%" y="207.50"></text></g><g><title>needs_drop_raw (6,271,954 samples, 0.11%)</title><rect x="94.5018%" y="181" width="0.1126%" height="15" fill="rgb(212,68,19)"/><text x="94.7518%" y="191.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (52,494,829 samples, 0.94%)</title><rect x="93.6956%" y="197" width="0.9428%" height="15" fill="rgb(240,187,13)"/><text x="93.9456%" y="207.50"></text></g><g><title>optimized_mir (114,393,640 samples, 2.05%)</title><rect x="92.6003%" y="213" width="2.0546%" height="15" fill="rgb(223,113,26)"/><text x="92.8503%" y="223.50">o..</text></g><g><title>generate_crate_metadata (147,718,368 samples, 2.65%)</title><rect x="92.0371%" y="229" width="2.6531%" height="15" fill="rgb(206,192,2)"/><text x="92.2871%" y="239.50">ge..</text></g><g><title>hir_lowering (39,232,083 samples, 0.70%)</title><rect x="94.6902%" y="229" width="0.7046%" height="15" fill="rgb(241,108,4)"/><text x="94.9402%" y="239.50"></text></g><g><title>finish_ongoing_codegen (235,750,263 samples, 4.23%)</title><rect x="95.4000%" y="213" width="4.2342%" height="15" fill="rgb(247,173,49)"/><text x="95.6500%" y="223.50">finis..</text></g><g><title>link_crate (6,283,701 samples, 0.11%)</title><rect x="99.6342%" y="213" width="0.1129%" height="15" fill="rgb(224,114,35)"/><text x="99.8842%" y="223.50"></text></g><g><title>link_binary (6,082,659 samples, 0.11%)</title><rect x="99.6378%" y="197" width="0.1092%" height="15" fill="rgb(245,159,27)"/><text x="99.8878%" y="207.50"></text></g><g><title>link (242,335,917 samples, 4.35%)</title><rect x="95.3948%" y="229" width="4.3525%" height="15" fill="rgb(245,172,44)"/><text x="95.6448%" y="239.50">link</text></g><g><title>self_profile_alloc_query_strings (11,418,499 samples, 0.21%)</title><rect x="99.7625%" y="229" width="0.2051%" height="15" fill="rgb(236,23,11)"/><text x="100.0125%" y="239.50"></text></g><g><title>all (5,567,793,803 samples, 100%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(205,117,38)"/><text x="0.2500%" y="271.50"></text></g><g><title>rustc (5,567,793,803 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(237,72,25)"/><text x="0.2500%" y="255.50">rustc</text></g></svg></svg>