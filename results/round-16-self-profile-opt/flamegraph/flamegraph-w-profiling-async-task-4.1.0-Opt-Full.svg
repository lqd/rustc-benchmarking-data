<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="278" onload="init(evt)" viewBox="0 0 1200 278" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="278" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="261.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="261.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (56,302,598 samples, 10.71%)</title><rect x="0.1198%" y="197" width="10.7079%" height="15" fill="rgb(227,0,7)"/><text x="0.3698%" y="207.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (998,801 samples, 0.19%)</title><rect x="10.6377%" y="181" width="0.1900%" height="15" fill="rgb(217,0,24)"/><text x="10.8877%" y="191.50"></text></g><g><title>LLVM_thin_lto_global_analysis (976,100 samples, 0.19%)</title><rect x="10.6420%" y="165" width="0.1856%" height="15" fill="rgb(221,193,54)"/><text x="10.8920%" y="175.50"></text></g><g><title>codegen_fn_attrs (588,446 samples, 0.11%)</title><rect x="14.0922%" y="101" width="0.1119%" height="15" fill="rgb(248,212,6)"/><text x="14.3422%" y="111.50"></text></g><g><title>needs_drop_raw (1,366,194 samples, 0.26%)</title><rect x="14.9537%" y="85" width="0.2598%" height="15" fill="rgb(208,68,35)"/><text x="15.2037%" y="95.50"></text></g><g><title>is_copy_raw (1,085,891 samples, 0.21%)</title><rect x="15.0070%" y="69" width="0.2065%" height="15" fill="rgb(232,128,0)"/><text x="15.2570%" y="79.50"></text></g><g><title>evaluate_obligation (898,768 samples, 0.17%)</title><rect x="15.0426%" y="53" width="0.1709%" height="15" fill="rgb(207,160,47)"/><text x="15.2926%" y="63.50"></text></g><g><title>specialization_graph_of (1,872,890 samples, 0.36%)</title><rect x="15.2862%" y="69" width="0.3562%" height="15" fill="rgb(228,23,34)"/><text x="15.5362%" y="79.50"></text></g><g><title>impl_trait_ref (714,722 samples, 0.14%)</title><rect x="15.5065%" y="53" width="0.1359%" height="15" fill="rgb(218,30,26)"/><text x="15.7565%" y="63.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (548,878 samples, 0.10%)</title><rect x="15.5380%" y="37" width="0.1044%" height="15" fill="rgb(220,122,19)"/><text x="15.7880%" y="47.50"></text></g><g><title>resolve_instance (2,361,194 samples, 0.45%)</title><rect x="15.2136%" y="85" width="0.4491%" height="15" fill="rgb(250,228,42)"/><text x="15.4636%" y="95.50"></text></g><g><title>thir_body (1,541,847 samples, 0.29%)</title><rect x="15.6716%" y="85" width="0.2932%" height="15" fill="rgb(240,193,28)"/><text x="15.9216%" y="95.50"></text></g><g><title>mir_const (11,853,904 samples, 2.25%)</title><rect x="13.7161%" y="133" width="2.2544%" height="15" fill="rgb(216,20,37)"/><text x="13.9661%" y="143.50">m..</text></g><g><title>unsafety_check_result (10,425,157 samples, 1.98%)</title><rect x="13.9878%" y="117" width="1.9827%" height="15" fill="rgb(206,188,39)"/><text x="14.2378%" y="127.50">u..</text></g><g><title>mir_built (9,287,624 samples, 1.77%)</title><rect x="14.2042%" y="101" width="1.7664%" height="15" fill="rgb(217,207,13)"/><text x="14.4542%" y="111.50"></text></g><g><title>mir_const_qualif (775,477 samples, 0.15%)</title><rect x="15.9705%" y="133" width="0.1475%" height="15" fill="rgb(231,73,38)"/><text x="16.2205%" y="143.50"></text></g><g><title>mir_promoted (13,982,007 samples, 2.66%)</title><rect x="13.4591%" y="149" width="2.6592%" height="15" fill="rgb(225,20,46)"/><text x="13.7091%" y="159.50">mi..</text></g><g><title>type_op_ascribe_user_type (801,548 samples, 0.15%)</title><rect x="16.1184%" y="149" width="0.1524%" height="15" fill="rgb(210,31,41)"/><text x="16.3684%" y="159.50"></text></g><g><title>type_op_prove_predicate (1,943,740 samples, 0.37%)</title><rect x="16.3346%" y="149" width="0.3697%" height="15" fill="rgb(221,200,47)"/><text x="16.5846%" y="159.50"></text></g><g><title>MIR_borrow_checking (30,567,175 samples, 5.81%)</title><rect x="10.8916%" y="181" width="5.8134%" height="15" fill="rgb(226,26,5)"/><text x="11.1416%" y="191.50">MIR_bor..</text></g><g><title>mir_borrowck (30,423,083 samples, 5.79%)</title><rect x="10.9190%" y="165" width="5.7860%" height="15" fill="rgb(249,33,26)"/><text x="11.1690%" y="175.50">mir_bor..</text></g><g><title>check_mod_attrs (596,106 samples, 0.11%)</title><rect x="16.8220%" y="165" width="0.1134%" height="15" fill="rgb(235,183,28)"/><text x="17.0720%" y="175.50"></text></g><g><title>misc_checking_1 (1,450,326 samples, 0.28%)</title><rect x="16.8174%" y="181" width="0.2758%" height="15" fill="rgb(221,5,38)"/><text x="17.0674%" y="191.50"></text></g><g><title>liveness_and_intrinsic_checking (688,367 samples, 0.13%)</title><rect x="17.0935%" y="165" width="0.1309%" height="15" fill="rgb(247,18,42)"/><text x="17.3435%" y="175.50"></text></g><g><title>check_mod_liveness (552,256 samples, 0.11%)</title><rect x="17.1194%" y="149" width="0.1050%" height="15" fill="rgb(241,131,45)"/><text x="17.3694%" y="159.50"></text></g><g><title>misc_checking_2 (1,334,454 samples, 0.25%)</title><rect x="17.0932%" y="181" width="0.2538%" height="15" fill="rgb(249,31,29)"/><text x="17.3432%" y="191.50"></text></g><g><title>match_checking (644,647 samples, 0.12%)</title><rect x="17.2244%" y="165" width="0.1226%" height="15" fill="rgb(225,111,53)"/><text x="17.4744%" y="175.50"></text></g><g><title>check_match (608,137 samples, 0.12%)</title><rect x="17.2313%" y="149" width="0.1157%" height="15" fill="rgb(238,160,17)"/><text x="17.4813%" y="159.50"></text></g><g><title>crate_lints (3,318,356 samples, 0.63%)</title><rect x="17.4955%" y="149" width="0.6311%" height="15" fill="rgb(214,148,48)"/><text x="17.7455%" y="159.50"></text></g><g><title>type_of (1,075,190 samples, 0.20%)</title><rect x="17.9221%" y="133" width="0.2045%" height="15" fill="rgb(232,36,49)"/><text x="18.1721%" y="143.50"></text></g><g><title>metadata_decode_entry_type_of (845,869 samples, 0.16%)</title><rect x="17.9658%" y="117" width="0.1609%" height="15" fill="rgb(209,103,24)"/><text x="18.2158%" y="127.50"></text></g><g><title>lint_checking (3,881,842 samples, 0.74%)</title><rect x="17.4952%" y="165" width="0.7383%" height="15" fill="rgb(229,88,8)"/><text x="17.7452%" y="175.50"></text></g><g><title>module_lints (561,856 samples, 0.11%)</title><rect x="18.1266%" y="149" width="0.1069%" height="15" fill="rgb(213,181,19)"/><text x="18.3766%" y="159.50"></text></g><g><title>lint_mod (556,086 samples, 0.11%)</title><rect x="18.1277%" y="133" width="0.1058%" height="15" fill="rgb(254,191,54)"/><text x="18.3777%" y="143.50"></text></g><g><title>privacy_checking_modules (984,930 samples, 0.19%)</title><rect x="18.2841%" y="165" width="0.1873%" height="15" fill="rgb(241,83,37)"/><text x="18.5341%" y="175.50"></text></g><g><title>check_mod_privacy (980,150 samples, 0.19%)</title><rect x="18.2850%" y="149" width="0.1864%" height="15" fill="rgb(233,36,39)"/><text x="18.5350%" y="159.50"></text></g><g><title>misc_checking_3 (5,926,203 samples, 1.13%)</title><rect x="17.3470%" y="181" width="1.1271%" height="15" fill="rgb(226,3,54)"/><text x="17.5970%" y="191.50"></text></g><g><title>impl_parent (1,599,644 samples, 0.30%)</title><rect x="19.0511%" y="117" width="0.3042%" height="15" fill="rgb(245,192,40)"/><text x="19.3011%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_parent (971,552 samples, 0.18%)</title><rect x="19.1705%" y="101" width="0.1848%" height="15" fill="rgb(238,167,29)"/><text x="19.4205%" y="111.50"></text></g><g><title>impl_trait_ref (4,356,787 samples, 0.83%)</title><rect x="19.3553%" y="117" width="0.8286%" height="15" fill="rgb(232,182,51)"/><text x="19.6053%" y="127.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (3,490,931 samples, 0.66%)</title><rect x="19.5200%" y="101" width="0.6639%" height="15" fill="rgb(231,60,39)"/><text x="19.7700%" y="111.50"></text></g><g><title>coherent_trait (9,425,139 samples, 1.79%)</title><rect x="18.4932%" y="149" width="1.7925%" height="15" fill="rgb(208,69,12)"/><text x="18.7432%" y="159.50">c..</text></g><g><title>specialization_graph_of (8,883,123 samples, 1.69%)</title><rect x="18.5963%" y="133" width="1.6894%" height="15" fill="rgb(235,93,37)"/><text x="18.8463%" y="143.50"></text></g><g><title>trait_impls_of (533,986 samples, 0.10%)</title><rect x="20.1841%" y="117" width="0.1016%" height="15" fill="rgb(213,116,39)"/><text x="20.4341%" y="127.50"></text></g><g><title>coherence_checking (9,489,980 samples, 1.80%)</title><rect x="18.4905%" y="165" width="1.8048%" height="15" fill="rgb(222,207,29)"/><text x="18.7405%" y="175.50">c..</text></g><g><title>evaluate_obligation (1,528,935 samples, 0.29%)</title><rect x="23.3982%" y="117" width="0.2908%" height="15" fill="rgb(206,96,30)"/><text x="23.6482%" y="127.50"></text></g><g><title>associated_items (623,806 samples, 0.12%)</title><rect x="25.9877%" y="101" width="0.1186%" height="15" fill="rgb(218,138,4)"/><text x="26.2377%" y="111.50"></text></g><g><title>evaluate_obligation (1,466,554 samples, 0.28%)</title><rect x="26.1798%" y="101" width="0.2789%" height="15" fill="rgb(250,191,14)"/><text x="26.4298%" y="111.50"></text></g><g><title>typeck (14,671,086 samples, 2.79%)</title><rect x="23.8950%" y="117" width="2.7902%" height="15" fill="rgb(239,60,40)"/><text x="24.1450%" y="127.50">ty..</text></g><g><title>item_bodies_checking (33,602,257 samples, 6.39%)</title><rect x="20.3022%" y="165" width="6.3906%" height="15" fill="rgb(206,27,48)"/><text x="20.5522%" y="175.50">item_bod..</text></g><g><title>typeck_item_bodies (33,599,617 samples, 6.39%)</title><rect x="20.3027%" y="149" width="6.3901%" height="15" fill="rgb(225,35,8)"/><text x="20.5527%" y="159.50">typeck_i..</text></g><g><title>typeck (33,519,037 samples, 6.37%)</title><rect x="20.3180%" y="133" width="6.3748%" height="15" fill="rgb(250,213,24)"/><text x="20.5680%" y="143.50">typeck</text></g><g><title>mir_borrowck (1,157,832 samples, 0.22%)</title><rect x="26.9769%" y="101" width="0.2202%" height="15" fill="rgb(247,123,22)"/><text x="27.2269%" y="111.50"></text></g><g><title>mir_built (2,787,109 samples, 0.53%)</title><rect x="27.2255%" y="53" width="0.5301%" height="15" fill="rgb(231,138,38)"/><text x="27.4755%" y="63.50"></text></g><g><title>typeck (2,617,538 samples, 0.50%)</title><rect x="27.2578%" y="37" width="0.4978%" height="15" fill="rgb(231,145,46)"/><text x="27.5078%" y="47.50"></text></g><g><title>mir_const (3,230,244 samples, 0.61%)</title><rect x="27.2072%" y="85" width="0.6143%" height="15" fill="rgb(251,118,11)"/><text x="27.4572%" y="95.50"></text></g><g><title>unsafety_check_result (3,151,483 samples, 0.60%)</title><rect x="27.2222%" y="69" width="0.5994%" height="15" fill="rgb(217,147,25)"/><text x="27.4722%" y="79.50"></text></g><g><title>mir_promoted (3,288,145 samples, 0.63%)</title><rect x="27.1971%" y="101" width="0.6254%" height="15" fill="rgb(247,81,37)"/><text x="27.4471%" y="111.50"></text></g><g><title>type_of (4,980,873 samples, 0.95%)</title><rect x="26.8936%" y="133" width="0.9473%" height="15" fill="rgb(209,12,38)"/><text x="27.1436%" y="143.50"></text></g><g><title>mir_borrowck (4,971,313 samples, 0.95%)</title><rect x="26.8955%" y="117" width="0.9455%" height="15" fill="rgb(227,1,9)"/><text x="27.1455%" y="127.50"></text></g><g><title>impl_trait_ref (722,896 samples, 0.14%)</title><rect x="28.6829%" y="101" width="0.1375%" height="15" fill="rgb(248,47,43)"/><text x="28.9329%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (591,315 samples, 0.11%)</title><rect x="28.7079%" y="85" width="0.1125%" height="15" fill="rgb(221,10,30)"/><text x="28.9579%" y="95.50"></text></g><g><title>predicates_of (607,976 samples, 0.12%)</title><rect x="28.8267%" y="101" width="0.1156%" height="15" fill="rgb(210,229,1)"/><text x="29.0767%" y="111.50"></text></g><g><title>specializes (1,826,012 samples, 0.35%)</title><rect x="28.9423%" y="101" width="0.3473%" height="15" fill="rgb(222,148,37)"/><text x="29.1923%" y="111.50"></text></g><g><title>param_env (1,061,770 samples, 0.20%)</title><rect x="29.0877%" y="85" width="0.2019%" height="15" fill="rgb(234,67,33)"/><text x="29.3377%" y="95.50"></text></g><g><title>evaluate_obligation (6,042,603 samples, 1.15%)</title><rect x="28.1549%" y="117" width="1.1492%" height="15" fill="rgb(247,98,35)"/><text x="28.4049%" y="127.50"></text></g><g><title>item_types_checking (14,033,479 samples, 2.67%)</title><rect x="26.6928%" y="165" width="2.6689%" height="15" fill="rgb(247,138,52)"/><text x="26.9428%" y="175.50">it..</text></g><g><title>check_mod_item_types (14,025,559 samples, 2.67%)</title><rect x="26.6943%" y="149" width="2.6674%" height="15" fill="rgb(213,79,30)"/><text x="26.9443%" y="159.50">ch..</text></g><g><title>typeck (7,996,726 samples, 1.52%)</title><rect x="27.8409%" y="133" width="1.5209%" height="15" fill="rgb(246,177,23)"/><text x="28.0909%" y="143.50"></text></g><g><title>predicates_of (973,784 samples, 0.19%)</title><rect x="29.5214%" y="133" width="0.1852%" height="15" fill="rgb(230,62,27)"/><text x="29.7714%" y="143.50"></text></g><g><title>predicates_defined_on (924,582 samples, 0.18%)</title><rect x="29.5308%" y="117" width="0.1758%" height="15" fill="rgb(216,154,8)"/><text x="29.7808%" y="127.50"></text></g><g><title>type_collecting (1,925,940 samples, 0.37%)</title><rect x="29.3627%" y="165" width="0.3663%" height="15" fill="rgb(244,35,45)"/><text x="29.6127%" y="175.50"></text></g><g><title>collect_mod_item_types (1,912,639 samples, 0.36%)</title><rect x="29.3652%" y="149" width="0.3638%" height="15" fill="rgb(251,115,12)"/><text x="29.6152%" y="159.50"></text></g><g><title>check_impl_item_well_formed (2,953,874 samples, 0.56%)</title><rect x="29.7711%" y="149" width="0.5618%" height="15" fill="rgb(240,54,50)"/><text x="30.0211%" y="159.50"></text></g><g><title>analysis (105,307,530 samples, 20.03%)</title><rect x="10.8276%" y="197" width="20.0279%" height="15" fill="rgb(233,84,52)"/><text x="11.0776%" y="207.50">analysis</text></g><g><title>type_check_crate (65,102,231 samples, 12.38%)</title><rect x="18.4741%" y="181" width="12.3814%" height="15" fill="rgb(207,117,47)"/><text x="18.7241%" y="191.50">type_check_crate</text></g><g><title>wf_checking (5,916,113 samples, 1.13%)</title><rect x="29.7303%" y="165" width="1.1252%" height="15" fill="rgb(249,43,39)"/><text x="29.9803%" y="175.50"></text></g><g><title>check_item_well_formed (2,747,997 samples, 0.52%)</title><rect x="30.3329%" y="149" width="0.5226%" height="15" fill="rgb(209,38,44)"/><text x="30.5829%" y="159.50"></text></g><g><title>codegen_fn_attrs (549,543 samples, 0.10%)</title><rect x="35.1554%" y="149" width="0.1045%" height="15" fill="rgb(236,212,23)"/><text x="35.4054%" y="159.50"></text></g><g><title>is_freeze_raw (812,710 samples, 0.15%)</title><rect x="35.2719%" y="149" width="0.1546%" height="15" fill="rgb(242,79,21)"/><text x="35.5219%" y="159.50"></text></g><g><title>evaluate_obligation (719,599 samples, 0.14%)</title><rect x="35.2896%" y="133" width="0.1369%" height="15" fill="rgb(211,96,35)"/><text x="35.5396%" y="143.50"></text></g><g><title>is_unpin_raw (677,327 samples, 0.13%)</title><rect x="35.4265%" y="149" width="0.1288%" height="15" fill="rgb(253,215,40)"/><text x="35.6765%" y="159.50"></text></g><g><title>evaluate_obligation (590,624 samples, 0.11%)</title><rect x="35.4430%" y="133" width="0.1123%" height="15" fill="rgb(211,81,21)"/><text x="35.6930%" y="143.50"></text></g><g><title>layout_of (1,338,093 samples, 0.25%)</title><rect x="35.5553%" y="149" width="0.2545%" height="15" fill="rgb(208,190,38)"/><text x="35.8053%" y="159.50"></text></g><g><title>predicates_of (883,547 samples, 0.17%)</title><rect x="36.1132%" y="133" width="0.1680%" height="15" fill="rgb(235,213,38)"/><text x="36.3632%" y="143.50"></text></g><g><title>predicates_defined_on (630,725 samples, 0.12%)</title><rect x="36.1613%" y="117" width="0.1200%" height="15" fill="rgb(237,122,38)"/><text x="36.4113%" y="127.50"></text></g><g><title>param_env (2,484,987 samples, 0.47%)</title><rect x="35.8098%" y="149" width="0.4726%" height="15" fill="rgb(244,218,35)"/><text x="36.0598%" y="159.50"></text></g><g><title>fn_abi_of_instance (8,308,500 samples, 1.58%)</title><rect x="34.7664%" y="165" width="1.5801%" height="15" fill="rgb(240,68,47)"/><text x="35.0164%" y="175.50"></text></g><g><title>layout_of (574,585 samples, 0.11%)</title><rect x="36.3989%" y="165" width="0.1093%" height="15" fill="rgb(210,16,53)"/><text x="36.6489%" y="175.50"></text></g><g><title>codegen_module (28,095,667 samples, 5.34%)</title><rect x="31.2407%" y="181" width="5.3434%" height="15" fill="rgb(235,124,12)"/><text x="31.4907%" y="191.50">codegen..</text></g><g><title>item_attrs (614,001 samples, 0.12%)</title><rect x="36.8913%" y="117" width="0.1168%" height="15" fill="rgb(224,169,11)"/><text x="37.1413%" y="127.50"></text></g><g><title>metadata_decode_entry_item_attrs (592,340 samples, 0.11%)</title><rect x="36.8954%" y="101" width="0.1127%" height="15" fill="rgb(250,166,2)"/><text x="37.1454%" y="111.50"></text></g><g><title>codegen_fn_attrs (958,312 samples, 0.18%)</title><rect x="36.8620%" y="133" width="0.1823%" height="15" fill="rgb(242,216,29)"/><text x="37.1120%" y="143.50"></text></g><g><title>metadata_decode_entry_optimized_mir (1,042,901 samples, 0.20%)</title><rect x="37.3166%" y="117" width="0.1983%" height="15" fill="rgb(230,116,27)"/><text x="37.5666%" y="127.50"></text></g><g><title>optimized_mir (2,256,184 samples, 0.43%)</title><rect x="37.1930%" y="133" width="0.4291%" height="15" fill="rgb(228,99,48)"/><text x="37.4430%" y="143.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (563,438 samples, 0.11%)</title><rect x="37.5149%" y="117" width="0.1072%" height="15" fill="rgb(253,11,6)"/><text x="37.7649%" y="127.50"></text></g><g><title>codegen_fulfill_obligation (937,573 samples, 0.18%)</title><rect x="37.7185%" y="117" width="0.1783%" height="15" fill="rgb(247,143,39)"/><text x="37.9685%" y="127.50"></text></g><g><title>specialization_graph_of (1,717,438 samples, 0.33%)</title><rect x="37.9824%" y="117" width="0.3266%" height="15" fill="rgb(236,97,10)"/><text x="38.2324%" y="127.50"></text></g><g><title>impl_trait_ref (892,490 samples, 0.17%)</title><rect x="38.1393%" y="101" width="0.1697%" height="15" fill="rgb(233,208,19)"/><text x="38.3893%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (758,208 samples, 0.14%)</title><rect x="38.1649%" y="85" width="0.1442%" height="15" fill="rgb(216,164,2)"/><text x="38.4149%" y="95.50"></text></g><g><title>resolve_instance (3,831,141 samples, 0.73%)</title><rect x="37.6221%" y="133" width="0.7286%" height="15" fill="rgb(220,129,5)"/><text x="37.8721%" y="143.50"></text></g><g><title>monomorphization_collector_graph_walk (10,323,799 samples, 1.96%)</title><rect x="36.5920%" y="149" width="1.9634%" height="15" fill="rgb(242,17,10)"/><text x="36.8420%" y="159.50">m..</text></g><g><title>vtable_entries (633,215 samples, 0.12%)</title><rect x="38.4350%" y="133" width="0.1204%" height="15" fill="rgb(242,107,0)"/><text x="38.6850%" y="143.50"></text></g><g><title>monomorphization_collector (10,387,280 samples, 1.98%)</title><rect x="36.5914%" y="165" width="1.9755%" height="15" fill="rgb(251,28,31)"/><text x="36.8414%" y="175.50">m..</text></g><g><title>assert_symbols_are_distinct (933,480 samples, 0.18%)</title><rect x="38.5676%" y="149" width="0.1775%" height="15" fill="rgb(233,223,10)"/><text x="38.8176%" y="159.50"></text></g><g><title>symbol_name (832,409 samples, 0.16%)</title><rect x="38.5868%" y="133" width="0.1583%" height="15" fill="rgb(215,21,27)"/><text x="38.8368%" y="143.50"></text></g><g><title>collect_and_partition_mono_items (11,704,714 samples, 2.23%)</title><rect x="36.5857%" y="181" width="2.2261%" height="15" fill="rgb(232,23,21)"/><text x="36.8357%" y="191.50">c..</text></g><g><title>partition_and_assert_distinct_symbols (1,287,324 samples, 0.24%)</title><rect x="38.5669%" y="165" width="0.2448%" height="15" fill="rgb(244,5,23)"/><text x="38.8169%" y="175.50"></text></g><g><title>codegen_crate (41,885,175 samples, 7.97%)</title><rect x="30.8569%" y="197" width="7.9659%" height="15" fill="rgb(226,81,46)"/><text x="31.1069%" y="207.50">codegen_cra..</text></g><g><title>codegen_module_optimize (131,070,142 samples, 24.93%)</title><rect x="38.8228%" y="197" width="24.9275%" height="15" fill="rgb(247,70,30)"/><text x="39.0728%" y="207.50">codegen_module_optimize</text></g><g><title>LLVM_module_optimize (120,514,900 samples, 22.92%)</title><rect x="40.8302%" y="181" width="22.9201%" height="15" fill="rgb(212,68,19)"/><text x="41.0802%" y="191.50">LLVM_module_optimize</text></g><g><title>LLVM_lto_optimize (30,623,505 samples, 5.82%)</title><rect x="65.1280%" y="181" width="5.8241%" height="15" fill="rgb(240,187,13)"/><text x="65.3780%" y="191.50">LLVM_lt..</text></g><g><title>LLVM_module_codegen (65,114,578 samples, 12.38%)</title><rect x="70.9521%" y="181" width="12.3838%" height="15" fill="rgb(223,113,26)"/><text x="71.2021%" y="191.50">LLVM_module_codegen</text></g><g><title>LLVM_module_codegen_emit_obj (63,813,456 samples, 12.14%)</title><rect x="71.1996%" y="165" width="12.1363%" height="15" fill="rgb(206,192,2)"/><text x="71.4496%" y="175.50">LLVM_module_codege..</text></g><g><title>LLVM_thin_lto_import (1,560,637 samples, 0.30%)</title><rect x="83.3359%" y="181" width="0.2968%" height="15" fill="rgb(241,108,4)"/><text x="83.5859%" y="191.50"></text></g><g><title>codegen_module_perform_lto (104,946,071 samples, 19.96%)</title><rect x="63.7503%" y="197" width="19.9591%" height="15" fill="rgb(247,173,49)"/><text x="64.0003%" y="207.50">codegen_module_perform_lto</text></g><g><title>metadata_register_crate (2,346,995 samples, 0.45%)</title><rect x="88.6839%" y="149" width="0.4464%" height="15" fill="rgb(224,114,35)"/><text x="88.9339%" y="159.50"></text></g><g><title>metadata_register_crate (836,461 samples, 0.16%)</title><rect x="88.9712%" y="133" width="0.1591%" height="15" fill="rgb(245,159,27)"/><text x="89.2212%" y="143.50"></text></g><g><title>macro_expand_crate (28,470,323 samples, 5.41%)</title><rect x="83.8248%" y="181" width="5.4146%" height="15" fill="rgb(245,172,44)"/><text x="84.0748%" y="191.50">macro_e..</text></g><g><title>expand_crate (28,458,313 samples, 5.41%)</title><rect x="83.8271%" y="165" width="5.4123%" height="15" fill="rgb(236,23,11)"/><text x="84.0771%" y="175.50">expand_..</text></g><g><title>pre_AST_expansion_lint_checks (573,596 samples, 0.11%)</title><rect x="89.1303%" y="149" width="0.1091%" height="15" fill="rgb(205,117,38)"/><text x="89.3803%" y="159.50"></text></g><g><title>late_resolve_crate (2,401,085 samples, 0.46%)</title><rect x="89.3119%" y="165" width="0.4566%" height="15" fill="rgb(237,72,25)"/><text x="89.5619%" y="175.50"></text></g><g><title>configure_and_expand (32,009,620 samples, 6.09%)</title><rect x="83.7094%" y="197" width="6.0877%" height="15" fill="rgb(244,70,9)"/><text x="83.9594%" y="207.50">configur..</text></g><g><title>resolve_crate (2,871,330 samples, 0.55%)</title><rect x="89.2511%" y="181" width="0.5461%" height="15" fill="rgb(217,125,39)"/><text x="89.5011%" y="191.50"></text></g><g><title>free_global_ctxt (5,569,669 samples, 1.06%)</title><rect x="89.9369%" y="197" width="1.0593%" height="15" fill="rgb(235,36,10)"/><text x="90.1869%" y="207.50"></text></g><g><title>layout_of (1,027,949 samples, 0.20%)</title><rect x="92.4006%" y="165" width="0.1955%" height="15" fill="rgb(251,123,47)"/><text x="92.6506%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (5,655,916 samples, 1.08%)</title><rect x="92.5961%" y="165" width="1.0757%" height="15" fill="rgb(221,13,13)"/><text x="92.8461%" y="175.50"></text></g><g><title>optimized_mir (11,566,884 samples, 2.20%)</title><rect x="91.4913%" y="181" width="2.1998%" height="15" fill="rgb(238,131,9)"/><text x="91.7413%" y="191.50">o..</text></g><g><title>generate_crate_metadata (14,295,621 samples, 2.72%)</title><rect x="90.9961%" y="197" width="2.7188%" height="15" fill="rgb(211,50,8)"/><text x="91.2461%" y="207.50">ge..</text></g><g><title>hir_lowering (3,411,506 samples, 0.65%)</title><rect x="93.7149%" y="197" width="0.6488%" height="15" fill="rgb(245,182,24)"/><text x="93.9649%" y="207.50"></text></g><g><title>finish_ongoing_codegen (24,781,414 samples, 4.71%)</title><rect x="94.3666%" y="181" width="4.7130%" height="15" fill="rgb(242,14,37)"/><text x="94.6166%" y="191.50">finis..</text></g><g><title>link_crate (1,480,015 samples, 0.28%)</title><rect x="99.0796%" y="181" width="0.2815%" height="15" fill="rgb(246,228,12)"/><text x="99.3296%" y="191.50"></text></g><g><title>link_binary (1,446,945 samples, 0.28%)</title><rect x="99.0859%" y="165" width="0.2752%" height="15" fill="rgb(213,55,15)"/><text x="99.3359%" y="175.50"></text></g><g><title>link_rlib (917,349 samples, 0.17%)</title><rect x="99.1866%" y="149" width="0.1745%" height="15" fill="rgb(209,9,3)"/><text x="99.4366%" y="159.50"></text></g><g><title>link (26,284,309 samples, 5.00%)</title><rect x="94.3638%" y="197" width="4.9989%" height="15" fill="rgb(230,59,30)"/><text x="94.6138%" y="207.50">link</text></g><g><title>self_profile_alloc_query_strings (2,265,234 samples, 0.43%)</title><rect x="99.4703%" y="197" width="0.4308%" height="15" fill="rgb(209,121,21)"/><text x="99.7203%" y="207.50"></text></g><g><title>all (525,805,332 samples, 100%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(220,109,13)"/><text x="0.2500%" y="239.50"></text></g><g><title>rustc (525,805,332 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(232,18,1)"/><text x="0.2500%" y="223.50">rustc</text></g></svg></svg>