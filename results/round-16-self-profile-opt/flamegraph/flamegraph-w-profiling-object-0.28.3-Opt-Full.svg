<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (451,421,959 samples, 5.94%)</title><rect x="0.1137%" y="181" width="5.9400%" height="15" fill="rgb(227,0,7)"/><text x="0.3637%" y="191.50">LLVM_pas..</text></g><g><title>implied_outlives_bounds (19,693,556 samples, 0.26%)</title><rect x="15.0243%" y="133" width="0.2591%" height="15" fill="rgb(217,0,24)"/><text x="15.2743%" y="143.50"></text></g><g><title>is_late_bound_map (11,541,855 samples, 0.15%)</title><rect x="15.2834%" y="133" width="0.1519%" height="15" fill="rgb(221,193,54)"/><text x="15.5334%" y="143.50"></text></g><g><title>is_copy_raw (53,317,950 samples, 0.70%)</title><rect x="18.0456%" y="53" width="0.7016%" height="15" fill="rgb(248,212,6)"/><text x="18.2956%" y="63.50"></text></g><g><title>evaluate_obligation (45,205,539 samples, 0.59%)</title><rect x="18.1523%" y="37" width="0.5948%" height="15" fill="rgb(208,68,35)"/><text x="18.4023%" y="47.50"></text></g><g><title>needs_drop_raw (59,986,334 samples, 0.79%)</title><rect x="17.9602%" y="69" width="0.7893%" height="15" fill="rgb(232,128,0)"/><text x="18.2102%" y="79.50"></text></g><g><title>codegen_fulfill_obligation (11,098,845 samples, 0.15%)</title><rect x="18.8106%" y="53" width="0.1460%" height="15" fill="rgb(207,160,47)"/><text x="19.0606%" y="63.50"></text></g><g><title>resolve_instance (18,067,189 samples, 0.24%)</title><rect x="18.7502%" y="69" width="0.2377%" height="15" fill="rgb(228,23,34)"/><text x="19.0002%" y="79.50"></text></g><g><title>thir_body (50,523,407 samples, 0.66%)</title><rect x="18.9981%" y="69" width="0.6648%" height="15" fill="rgb(218,30,26)"/><text x="19.2481%" y="79.50"></text></g><g><title>mir_const (288,120,120 samples, 3.79%)</title><rect x="15.9139%" y="117" width="3.7912%" height="15" fill="rgb(220,122,19)"/><text x="16.1639%" y="127.50">mir_..</text></g><g><title>unsafety_check_result (262,733,923 samples, 3.46%)</title><rect x="16.2480%" y="101" width="3.4572%" height="15" fill="rgb(250,228,42)"/><text x="16.4980%" y="111.50">uns..</text></g><g><title>mir_built (243,322,879 samples, 3.20%)</title><rect x="16.5034%" y="85" width="3.2018%" height="15" fill="rgb(240,193,28)"/><text x="16.7534%" y="95.50">mir..</text></g><g><title>mir_const (57,538,967 samples, 0.76%)</title><rect x="19.8603%" y="101" width="0.7571%" height="15" fill="rgb(216,20,37)"/><text x="20.1103%" y="111.50"></text></g><g><title>unsafety_check_result (41,622,768 samples, 0.55%)</title><rect x="20.0698%" y="85" width="0.5477%" height="15" fill="rgb(206,188,39)"/><text x="20.3198%" y="95.50"></text></g><g><title>mir_built (36,543,236 samples, 0.48%)</title><rect x="20.1366%" y="69" width="0.4809%" height="15" fill="rgb(217,207,13)"/><text x="20.3866%" y="79.50"></text></g><g><title>mir_const_qualif (69,329,322 samples, 0.91%)</title><rect x="19.7052%" y="117" width="0.9123%" height="15" fill="rgb(231,73,38)"/><text x="19.9552%" y="127.50"></text></g><g><title>mir_promoted (392,259,282 samples, 5.16%)</title><rect x="15.4559%" y="133" width="5.1616%" height="15" fill="rgb(225,20,46)"/><text x="15.7059%" y="143.50">mir_pr..</text></g><g><title>type_op_ascribe_user_type (11,769,642 samples, 0.15%)</title><rect x="20.6179%" y="133" width="0.1549%" height="15" fill="rgb(210,31,41)"/><text x="20.8679%" y="143.50"></text></g><g><title>type_op_normalize_fn_sig (34,320,857 samples, 0.45%)</title><rect x="20.7727%" y="133" width="0.4516%" height="15" fill="rgb(221,200,47)"/><text x="21.0227%" y="143.50"></text></g><g><title>normalize_projection_ty (20,950,602 samples, 0.28%)</title><rect x="20.9487%" y="117" width="0.2757%" height="15" fill="rgb(226,26,5)"/><text x="21.1987%" y="127.50"></text></g><g><title>type_op_normalize_predicate (17,267,052 samples, 0.23%)</title><rect x="21.2244%" y="133" width="0.2272%" height="15" fill="rgb(249,33,26)"/><text x="21.4744%" y="143.50"></text></g><g><title>normalize_projection_ty (8,719,644 samples, 0.11%)</title><rect x="21.3368%" y="117" width="0.1147%" height="15" fill="rgb(235,183,28)"/><text x="21.5868%" y="127.50"></text></g><g><title>type_op_normalize_ty (9,005,664 samples, 0.12%)</title><rect x="21.4516%" y="133" width="0.1185%" height="15" fill="rgb(221,5,38)"/><text x="21.7016%" y="143.50"></text></g><g><title>type_op_prove_predicate (146,070,686 samples, 1.92%)</title><rect x="21.5701%" y="133" width="1.9221%" height="15" fill="rgb(247,18,42)"/><text x="21.8201%" y="143.50">t..</text></g><g><title>MIR_borrow_checking (1,315,435,113 samples, 17.31%)</title><rect x="6.1847%" y="165" width="17.3092%" height="15" fill="rgb(241,131,45)"/><text x="6.4347%" y="175.50">MIR_borrow_checking</text></g><g><title>mir_borrowck (1,302,853,522 samples, 17.14%)</title><rect x="6.3503%" y="149" width="17.1436%" height="15" fill="rgb(249,31,29)"/><text x="6.6003%" y="159.50">mir_borrowck</text></g><g><title>MIR_effect_checking (35,888,451 samples, 0.47%)</title><rect x="23.4939%" y="165" width="0.4722%" height="15" fill="rgb(225,111,53)"/><text x="23.7439%" y="175.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (29,928,579 samples, 0.39%)</title><rect x="23.5724%" y="149" width="0.3938%" height="15" fill="rgb(238,160,17)"/><text x="23.8224%" y="159.50"></text></g><g><title>hir_module_items (8,766,392 samples, 0.12%)</title><rect x="23.9662%" y="165" width="0.1154%" height="15" fill="rgb(214,148,48)"/><text x="24.2162%" y="175.50"></text></g><g><title>check_mod_attrs (17,383,262 samples, 0.23%)</title><rect x="24.0835%" y="149" width="0.2287%" height="15" fill="rgb(232,36,49)"/><text x="24.3335%" y="159.50"></text></g><g><title>lint_levels (10,359,666 samples, 0.14%)</title><rect x="24.4835%" y="133" width="0.1363%" height="15" fill="rgb(209,103,24)"/><text x="24.7335%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (21,993,329 samples, 0.29%)</title><rect x="24.4312%" y="149" width="0.2894%" height="15" fill="rgb(229,88,8)"/><text x="24.6812%" y="159.50"></text></g><g><title>misc_checking_1 (50,740,658 samples, 0.67%)</title><rect x="24.0815%" y="165" width="0.6677%" height="15" fill="rgb(213,181,19)"/><text x="24.3315%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (18,369,715 samples, 0.24%)</title><rect x="24.7492%" y="149" width="0.2417%" height="15" fill="rgb(254,191,54)"/><text x="24.9992%" y="159.50"></text></g><g><title>check_mod_liveness (14,417,548 samples, 0.19%)</title><rect x="24.8013%" y="133" width="0.1897%" height="15" fill="rgb(241,83,37)"/><text x="25.0513%" y="143.50"></text></g><g><title>mir_borrowck (12,173,606 samples, 0.16%)</title><rect x="25.5020%" y="37" width="0.1602%" height="15" fill="rgb(233,36,39)"/><text x="25.7520%" y="47.50"></text></g><g><title>mir_for_ctfe (18,897,119 samples, 0.25%)</title><rect x="25.4146%" y="69" width="0.2487%" height="15" fill="rgb(226,3,54)"/><text x="25.6646%" y="79.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (17,277,778 samples, 0.23%)</title><rect x="25.4359%" y="53" width="0.2274%" height="15" fill="rgb(245,192,40)"/><text x="25.6859%" y="63.50"></text></g><g><title>eval_to_const_value_raw (22,919,928 samples, 0.30%)</title><rect x="25.3647%" y="117" width="0.3016%" height="15" fill="rgb(238,167,29)"/><text x="25.6147%" y="127.50"></text></g><g><title>eval_to_const_value_raw (22,683,256 samples, 0.30%)</title><rect x="25.3678%" y="101" width="0.2985%" height="15" fill="rgb(232,182,51)"/><text x="25.6178%" y="111.50"></text></g><g><title>eval_to_allocation_raw (22,192,299 samples, 0.29%)</title><rect x="25.3742%" y="85" width="0.2920%" height="15" fill="rgb(231,60,39)"/><text x="25.6242%" y="95.50"></text></g><g><title>misc_checking_2 (78,672,269 samples, 1.04%)</title><rect x="24.7492%" y="165" width="1.0352%" height="15" fill="rgb(208,69,12)"/><text x="24.9992%" y="175.50"></text></g><g><title>match_checking (60,298,954 samples, 0.79%)</title><rect x="24.9910%" y="149" width="0.7934%" height="15" fill="rgb(235,93,37)"/><text x="25.2410%" y="159.50"></text></g><g><title>check_match (57,471,679 samples, 0.76%)</title><rect x="25.0282%" y="133" width="0.7562%" height="15" fill="rgb(213,116,39)"/><text x="25.2782%" y="143.50"></text></g><g><title>check_private_in_public (16,593,155 samples, 0.22%)</title><rect x="25.7848%" y="149" width="0.2183%" height="15" fill="rgb(222,207,29)"/><text x="26.0348%" y="159.50"></text></g><g><title>death_checking (25,703,378 samples, 0.34%)</title><rect x="26.0031%" y="149" width="0.3382%" height="15" fill="rgb(206,96,30)"/><text x="26.2531%" y="159.50"></text></g><g><title>mir_for_ctfe (11,087,081 samples, 0.15%)</title><rect x="26.9713%" y="69" width="0.1459%" height="15" fill="rgb(218,138,4)"/><text x="27.2213%" y="79.50"></text></g><g><title>eval_to_const_value_raw (33,161,911 samples, 0.44%)</title><rect x="26.6836%" y="117" width="0.4364%" height="15" fill="rgb(250,191,14)"/><text x="26.9336%" y="127.50"></text></g><g><title>eval_to_const_value_raw (30,459,251 samples, 0.40%)</title><rect x="26.7192%" y="101" width="0.4008%" height="15" fill="rgb(239,60,40)"/><text x="26.9692%" y="111.50"></text></g><g><title>eval_to_allocation_raw (27,519,621 samples, 0.36%)</title><rect x="26.7579%" y="85" width="0.3621%" height="15" fill="rgb(206,27,48)"/><text x="27.0079%" y="95.50"></text></g><g><title>crate_lints (66,499,403 samples, 0.88%)</title><rect x="26.3414%" y="133" width="0.8750%" height="15" fill="rgb(225,35,8)"/><text x="26.5914%" y="143.50"></text></g><g><title>lint_checking (91,553,664 samples, 1.20%)</title><rect x="26.3413%" y="149" width="1.2047%" height="15" fill="rgb(250,213,24)"/><text x="26.5913%" y="159.50"></text></g><g><title>module_lints (25,049,931 samples, 0.33%)</title><rect x="27.2164%" y="133" width="0.3296%" height="15" fill="rgb(247,123,22)"/><text x="27.4664%" y="143.50"></text></g><g><title>lint_mod (24,986,761 samples, 0.33%)</title><rect x="27.2172%" y="117" width="0.3288%" height="15" fill="rgb(231,138,38)"/><text x="27.4672%" y="127.50"></text></g><g><title>privacy_access_levels (29,399,049 samples, 0.39%)</title><rect x="27.5460%" y="149" width="0.3868%" height="15" fill="rgb(231,145,46)"/><text x="27.7960%" y="159.50"></text></g><g><title>privacy_checking_modules (42,790,629 samples, 0.56%)</title><rect x="27.9329%" y="149" width="0.5631%" height="15" fill="rgb(251,118,11)"/><text x="28.1829%" y="159.50"></text></g><g><title>check_mod_privacy (42,499,456 samples, 0.56%)</title><rect x="27.9367%" y="133" width="0.5592%" height="15" fill="rgb(217,147,25)"/><text x="28.1867%" y="143.50"></text></g><g><title>misc_checking_3 (206,634,301 samples, 2.72%)</title><rect x="25.7844%" y="165" width="2.7190%" height="15" fill="rgb(247,81,37)"/><text x="26.0344%" y="175.50">mi..</text></g><g><title>impl_trait_ref (7,727,230 samples, 0.10%)</title><rect x="28.7756%" y="101" width="0.1017%" height="15" fill="rgb(209,12,38)"/><text x="29.0256%" y="111.50"></text></g><g><title>coherent_trait (26,273,003 samples, 0.35%)</title><rect x="28.5540%" y="133" width="0.3457%" height="15" fill="rgb(227,1,9)"/><text x="28.8040%" y="143.50"></text></g><g><title>specialization_graph_of (18,657,055 samples, 0.25%)</title><rect x="28.6542%" y="117" width="0.2455%" height="15" fill="rgb(248,47,43)"/><text x="28.9042%" y="127.50"></text></g><g><title>coherence_checking (27,919,522 samples, 0.37%)</title><rect x="28.5533%" y="149" width="0.3674%" height="15" fill="rgb(221,10,30)"/><text x="28.8033%" y="159.50"></text></g><g><title>dropck_outlives (18,189,694 samples, 0.24%)</title><rect x="42.5916%" y="101" width="0.2393%" height="15" fill="rgb(210,229,1)"/><text x="42.8416%" y="111.50"></text></g><g><title>evaluate_obligation (52,151,435 samples, 0.69%)</title><rect x="42.8640%" y="101" width="0.6862%" height="15" fill="rgb(222,148,37)"/><text x="43.1140%" y="111.50"></text></g><g><title>method_autoderef_steps (12,029,306 samples, 0.16%)</title><rect x="43.6038%" y="101" width="0.1583%" height="15" fill="rgb(234,67,33)"/><text x="43.8538%" y="111.50"></text></g><g><title>evaluate_obligation (15,504,533 samples, 0.20%)</title><rect x="45.2981%" y="85" width="0.2040%" height="15" fill="rgb(247,98,35)"/><text x="45.5481%" y="95.50"></text></g><g><title>typeck (138,414,481 samples, 1.82%)</title><rect x="43.8377%" y="101" width="1.8213%" height="15" fill="rgb(247,138,52)"/><text x="44.0877%" y="111.50">t..</text></g><g><title>item_bodies_checking (1,270,976,885 samples, 16.72%)</title><rect x="28.9467%" y="149" width="16.7242%" height="15" fill="rgb(213,79,30)"/><text x="29.1967%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (1,270,972,765 samples, 16.72%)</title><rect x="28.9467%" y="133" width="16.7241%" height="15" fill="rgb(246,177,23)"/><text x="29.1967%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (1,266,592,751 samples, 16.67%)</title><rect x="29.0044%" y="117" width="16.6665%" height="15" fill="rgb(230,62,27)"/><text x="29.2544%" y="127.50">typeck</text></g><g><title>type_of (10,256,288 samples, 0.13%)</title><rect x="46.5562%" y="117" width="0.1350%" height="15" fill="rgb(216,154,8)"/><text x="46.8062%" y="127.50"></text></g><g><title>mir_borrowck (10,198,454 samples, 0.13%)</title><rect x="46.5569%" y="101" width="0.1342%" height="15" fill="rgb(244,35,45)"/><text x="46.8069%" y="111.50"></text></g><g><title>evaluate_obligation (9,115,941 samples, 0.12%)</title><rect x="47.2014%" y="101" width="0.1200%" height="15" fill="rgb(251,115,12)"/><text x="47.4514%" y="111.50"></text></g><g><title>item_types_checking (126,653,767 samples, 1.67%)</title><rect x="45.6708%" y="149" width="1.6666%" height="15" fill="rgb(240,54,50)"/><text x="45.9208%" y="159.50"></text></g><g><title>check_mod_item_types (126,579,147 samples, 1.67%)</title><rect x="45.6718%" y="133" width="1.6656%" height="15" fill="rgb(233,84,52)"/><text x="45.9218%" y="143.50"></text></g><g><title>typeck (49,116,470 samples, 0.65%)</title><rect x="46.6911%" y="117" width="0.6463%" height="15" fill="rgb(207,117,47)"/><text x="46.9411%" y="127.50"></text></g><g><title>fn_sig (8,106,077 samples, 0.11%)</title><rect x="47.5929%" y="117" width="0.1067%" height="15" fill="rgb(249,43,39)"/><text x="47.8429%" y="127.50"></text></g><g><title>is_late_bound_map (8,130,739 samples, 0.11%)</title><rect x="47.7761%" y="101" width="0.1070%" height="15" fill="rgb(209,38,44)"/><text x="48.0261%" y="111.50"></text></g><g><title>resolve_lifetimes (7,700,714 samples, 0.10%)</title><rect x="47.7817%" y="85" width="0.1013%" height="15" fill="rgb(236,212,23)"/><text x="48.0317%" y="95.50"></text></g><g><title>generics_of (18,508,708 samples, 0.24%)</title><rect x="47.6995%" y="117" width="0.2435%" height="15" fill="rgb(242,79,21)"/><text x="47.9495%" y="127.50"></text></g><g><title>explicit_predicates_of (12,164,156 samples, 0.16%)</title><rect x="48.1147%" y="85" width="0.1601%" height="15" fill="rgb(211,96,35)"/><text x="48.3647%" y="95.50"></text></g><g><title>predicates_of (34,910,770 samples, 0.46%)</title><rect x="47.9845%" y="117" width="0.4594%" height="15" fill="rgb(253,215,40)"/><text x="48.2345%" y="127.50"></text></g><g><title>predicates_defined_on (31,293,024 samples, 0.41%)</title><rect x="48.0321%" y="101" width="0.4118%" height="15" fill="rgb(211,81,21)"/><text x="48.2821%" y="111.50"></text></g><g><title>inferred_outlives_of (12,848,702 samples, 0.17%)</title><rect x="48.2748%" y="85" width="0.1691%" height="15" fill="rgb(208,190,38)"/><text x="48.5248%" y="95.50"></text></g><g><title>inferred_outlives_crate (11,770,971 samples, 0.15%)</title><rect x="48.2890%" y="69" width="0.1549%" height="15" fill="rgb(235,213,38)"/><text x="48.5390%" y="79.50"></text></g><g><title>type_collecting (88,401,199 samples, 1.16%)</title><rect x="47.3382%" y="149" width="1.1632%" height="15" fill="rgb(237,122,38)"/><text x="47.5882%" y="159.50"></text></g><g><title>collect_mod_item_types (88,328,996 samples, 1.16%)</title><rect x="47.3391%" y="133" width="1.1623%" height="15" fill="rgb(244,218,35)"/><text x="47.5891%" y="143.50"></text></g><g><title>evaluate_obligation (13,602,897 samples, 0.18%)</title><rect x="50.0510%" y="117" width="0.1790%" height="15" fill="rgb(240,68,47)"/><text x="50.3010%" y="127.50"></text></g><g><title>implied_outlives_bounds (15,379,410 samples, 0.20%)</title><rect x="50.2329%" y="117" width="0.2024%" height="15" fill="rgb(210,16,53)"/><text x="50.4829%" y="127.50"></text></g><g><title>param_env (17,540,224 samples, 0.23%)</title><rect x="50.4353%" y="117" width="0.2308%" height="15" fill="rgb(235,124,12)"/><text x="50.6853%" y="127.50"></text></g><g><title>region_scope_tree (14,143,349 samples, 0.19%)</title><rect x="50.6667%" y="117" width="0.1861%" height="15" fill="rgb(224,169,11)"/><text x="50.9167%" y="127.50"></text></g><g><title>check_impl_item_well_formed (167,175,628 samples, 2.20%)</title><rect x="48.6542%" y="133" width="2.1998%" height="15" fill="rgb(250,166,2)"/><text x="48.9042%" y="143.50">c..</text></g><g><title>param_env (24,318,691 samples, 0.32%)</title><rect x="52.3727%" y="117" width="0.3200%" height="15" fill="rgb(242,216,29)"/><text x="52.6227%" y="127.50"></text></g><g><title>check_item_well_formed (149,328,560 samples, 1.96%)</title><rect x="50.8540%" y="133" width="1.9649%" height="15" fill="rgb(230,116,27)"/><text x="51.1040%" y="143.50">c..</text></g><g><title>analysis (3,580,930,142 samples, 47.12%)</title><rect x="6.0538%" y="181" width="47.1198%" height="15" fill="rgb(228,99,48)"/><text x="6.3038%" y="191.50">analysis</text></g><g><title>type_check_crate (1,874,840,140 samples, 24.67%)</title><rect x="28.5034%" y="165" width="24.6701%" height="15" fill="rgb(253,11,6)"/><text x="28.7534%" y="175.50">type_check_crate</text></g><g><title>wf_checking (354,213,242 samples, 4.66%)</title><rect x="48.5126%" y="149" width="4.6609%" height="15" fill="rgb(247,143,39)"/><text x="48.7626%" y="159.50">wf_ch..</text></g><g><title>check_trait_item_well_formed (26,951,269 samples, 0.35%)</title><rect x="52.8189%" y="133" width="0.3546%" height="15" fill="rgb(236,97,10)"/><text x="53.0689%" y="143.50"></text></g><g><title>fn_abi_of_instance (24,826,218 samples, 0.33%)</title><rect x="54.8545%" y="149" width="0.3267%" height="15" fill="rgb(233,208,19)"/><text x="55.1045%" y="159.50"></text></g><g><title>codegen_module (154,149,381 samples, 2.03%)</title><rect x="53.2061%" y="165" width="2.0284%" height="15" fill="rgb(216,164,2)"/><text x="53.4561%" y="175.50">c..</text></g><g><title>mir_drops_elaborated_and_const_checked (17,371,026 samples, 0.23%)</title><rect x="55.6709%" y="101" width="0.2286%" height="15" fill="rgb(220,129,5)"/><text x="55.9209%" y="111.50"></text></g><g><title>optimized_mir (40,865,806 samples, 0.54%)</title><rect x="55.3742%" y="117" width="0.5377%" height="15" fill="rgb(242,17,10)"/><text x="55.6242%" y="127.50"></text></g><g><title>resolve_instance (13,393,329 samples, 0.18%)</title><rect x="55.9119%" y="117" width="0.1762%" height="15" fill="rgb(242,107,0)"/><text x="56.1619%" y="127.50"></text></g><g><title>monomorphization_collector_graph_walk (69,503,407 samples, 0.91%)</title><rect x="55.2358%" y="133" width="0.9146%" height="15" fill="rgb(251,28,31)"/><text x="55.4858%" y="143.50"></text></g><g><title>monomorphization_collector (72,275,038 samples, 0.95%)</title><rect x="55.2357%" y="149" width="0.9510%" height="15" fill="rgb(233,223,10)"/><text x="55.4857%" y="159.50"></text></g><g><title>collect_and_partition_mono_items (79,409,878 samples, 1.04%)</title><rect x="55.2347%" y="165" width="1.0449%" height="15" fill="rgb(215,21,27)"/><text x="55.4847%" y="175.50"></text></g><g><title>codegen_crate (236,352,213 samples, 3.11%)</title><rect x="53.1736%" y="181" width="3.1100%" height="15" fill="rgb(232,23,21)"/><text x="53.4236%" y="191.50">cod..</text></g><g><title>codegen_module_optimize (984,532,295 samples, 12.95%)</title><rect x="56.2837%" y="181" width="12.9550%" height="15" fill="rgb(244,5,23)"/><text x="56.5337%" y="191.50">codegen_module_opti..</text></g><g><title>LLVM_module_optimize (922,269,747 samples, 12.14%)</title><rect x="57.1030%" y="165" width="12.1357%" height="15" fill="rgb(226,81,46)"/><text x="57.3530%" y="175.50">LLVM_module_optimi..</text></g><g><title>LLVM_lto_optimize (528,432,914 samples, 6.95%)</title><rect x="69.5975%" y="165" width="6.9534%" height="15" fill="rgb(247,70,30)"/><text x="69.8475%" y="175.50">LLVM_lto_..</text></g><g><title>LLVM_module_codegen (631,864,256 samples, 8.31%)</title><rect x="76.5509%" y="165" width="8.3144%" height="15" fill="rgb(212,68,19)"/><text x="76.8009%" y="175.50">LLVM_module_..</text></g><g><title>LLVM_module_codegen_emit_obj (626,992,323 samples, 8.25%)</title><rect x="76.6150%" y="149" width="8.2503%" height="15" fill="rgb(240,187,13)"/><text x="76.8650%" y="159.50">LLVM_module..</text></g><g><title>LLVM_thin_lto_import (71,390,932 samples, 0.94%)</title><rect x="84.8653%" y="165" width="0.9394%" height="15" fill="rgb(223,113,26)"/><text x="85.1153%" y="175.50"></text></g><g><title>codegen_module_perform_lto (1,261,907,991 samples, 16.60%)</title><rect x="69.2387%" y="181" width="16.6048%" height="15" fill="rgb(206,192,2)"/><text x="69.4887%" y="191.50">codegen_module_perform_lto</text></g><g><title>AST_validation (8,507,736 samples, 0.11%)</title><rect x="85.8458%" y="165" width="0.1119%" height="15" fill="rgb(241,108,4)"/><text x="86.0958%" y="175.50"></text></g><g><title>macro_expand_crate (187,508,607 samples, 2.47%)</title><rect x="86.0266%" y="165" width="2.4673%" height="15" fill="rgb(247,173,49)"/><text x="86.2766%" y="175.50">ma..</text></g><g><title>expand_crate (187,492,687 samples, 2.47%)</title><rect x="86.0268%" y="149" width="2.4671%" height="15" fill="rgb(224,114,35)"/><text x="86.2768%" y="159.50">ex..</text></g><g><title>late_resolve_crate (52,309,275 samples, 0.69%)</title><rect x="88.5492%" y="149" width="0.6883%" height="15" fill="rgb(245,159,27)"/><text x="88.7992%" y="159.50"></text></g><g><title>configure_and_expand (267,359,201 samples, 3.52%)</title><rect x="85.8435%" y="181" width="3.5181%" height="15" fill="rgb(245,172,44)"/><text x="86.0935%" y="191.50">con..</text></g><g><title>resolve_crate (65,827,367 samples, 0.87%)</title><rect x="88.4954%" y="165" width="0.8662%" height="15" fill="rgb(236,23,11)"/><text x="88.7454%" y="175.50"></text></g><g><title>drop_ast (10,483,696 samples, 0.14%)</title><rect x="89.3616%" y="181" width="0.1379%" height="15" fill="rgb(205,117,38)"/><text x="89.6116%" y="191.50"></text></g><g><title>early_lint_checks (17,396,695 samples, 0.23%)</title><rect x="89.4999%" y="181" width="0.2289%" height="15" fill="rgb(237,72,25)"/><text x="89.7499%" y="191.50"></text></g><g><title>free_global_ctxt (48,423,082 samples, 0.64%)</title><rect x="89.7288%" y="181" width="0.6372%" height="15" fill="rgb(244,70,9)"/><text x="89.9788%" y="191.50"></text></g><g><title>reachable_non_generics (9,588,237 samples, 0.13%)</title><rect x="91.3835%" y="149" width="0.1262%" height="15" fill="rgb(217,125,39)"/><text x="91.6335%" y="159.50"></text></g><g><title>reachable_set (8,506,525 samples, 0.11%)</title><rect x="91.3977%" y="133" width="0.1119%" height="15" fill="rgb(235,36,10)"/><text x="91.6477%" y="143.50"></text></g><g><title>exported_symbols (11,187,525 samples, 0.15%)</title><rect x="91.3808%" y="165" width="0.1472%" height="15" fill="rgb(251,123,47)"/><text x="91.6308%" y="175.50"></text></g><g><title>layout_of (7,633,181 samples, 0.10%)</title><rect x="92.9915%" y="133" width="0.1004%" height="15" fill="rgb(221,13,13)"/><text x="93.2415%" y="143.50"></text></g><g><title>layout_of (25,562,408 samples, 0.34%)</title><rect x="92.7994%" y="149" width="0.3364%" height="15" fill="rgb(238,131,9)"/><text x="93.0494%" y="159.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (90,850,900 samples, 1.20%)</title><rect x="93.1358%" y="149" width="1.1955%" height="15" fill="rgb(211,50,8)"/><text x="93.3858%" y="159.50"></text></g><g><title>optimized_mir (217,720,056 samples, 2.86%)</title><rect x="91.5760%" y="165" width="2.8649%" height="15" fill="rgb(245,182,24)"/><text x="91.8260%" y="175.50">op..</text></g><g><title>generate_crate_metadata (314,060,962 samples, 4.13%)</title><rect x="90.3660%" y="181" width="4.1326%" height="15" fill="rgb(242,14,37)"/><text x="90.6160%" y="191.50">gener..</text></g><g><title>hir_lowering (125,367,672 samples, 1.65%)</title><rect x="94.4986%" y="181" width="1.6497%" height="15" fill="rgb(246,228,12)"/><text x="94.7486%" y="191.50"></text></g><g><title>finish_ongoing_codegen (259,716,205 samples, 3.42%)</title><rect x="96.1485%" y="165" width="3.4175%" height="15" fill="rgb(213,55,15)"/><text x="96.3985%" y="175.50">fin..</text></g><g><title>link_crate (13,946,046 samples, 0.18%)</title><rect x="99.5660%" y="165" width="0.1835%" height="15" fill="rgb(209,9,3)"/><text x="99.8160%" y="175.50"></text></g><g><title>link_binary (13,795,275 samples, 0.18%)</title><rect x="99.5680%" y="149" width="0.1815%" height="15" fill="rgb(230,59,30)"/><text x="99.8180%" y="159.50"></text></g><g><title>link_rlib (12,057,336 samples, 0.16%)</title><rect x="99.5908%" y="133" width="0.1587%" height="15" fill="rgb(209,121,21)"/><text x="99.8408%" y="143.50"></text></g><g><title>link (273,693,661 samples, 3.60%)</title><rect x="96.1482%" y="181" width="3.6014%" height="15" fill="rgb(220,109,13)"/><text x="96.3982%" y="191.50">link</text></g><g><title>self_profile_alloc_query_strings (13,532,041 samples, 0.18%)</title><rect x="99.7574%" y="181" width="0.1781%" height="15" fill="rgb(232,18,1)"/><text x="100.0074%" y="191.50"></text></g><g><title>all (7,599,635,530 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (7,599,635,530 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="207.50">rustc</text></g></svg></svg>