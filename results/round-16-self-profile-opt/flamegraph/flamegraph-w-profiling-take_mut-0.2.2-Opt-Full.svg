<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="262" onload="init(evt)" viewBox="0 0 1200 262" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="262" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="245.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="245.00"> </text><svg id="frames" x="10" width="1180"><g><title>LLVM_passes (6,389,582 samples, 7.56%)</title><rect x="0.8233%" y="181" width="7.5622%" height="15" fill="rgb(227,0,7)"/><text x="1.0733%" y="191.50">LLVM_passes</text></g><g><title>codegen_generate_lto_work (303,723 samples, 0.36%)</title><rect x="8.0261%" y="165" width="0.3595%" height="15" fill="rgb(217,0,24)"/><text x="8.2761%" y="175.50"></text></g><g><title>LLVM_thin_lto_global_analysis (293,053 samples, 0.35%)</title><rect x="8.0387%" y="149" width="0.3468%" height="15" fill="rgb(221,193,54)"/><text x="8.2887%" y="159.50"></text></g><g><title>implied_outlives_bounds (126,353 samples, 0.15%)</title><rect x="12.0771%" y="133" width="0.1495%" height="15" fill="rgb(248,212,6)"/><text x="12.3271%" y="143.50"></text></g><g><title>param_env (92,231 samples, 0.11%)</title><rect x="12.9101%" y="101" width="0.1092%" height="15" fill="rgb(208,68,35)"/><text x="13.1601%" y="111.50"></text></g><g><title>needs_drop_raw (532,856 samples, 0.63%)</title><rect x="14.1354%" y="69" width="0.6306%" height="15" fill="rgb(232,128,0)"/><text x="14.3854%" y="79.50"></text></g><g><title>is_copy_raw (403,646 samples, 0.48%)</title><rect x="14.2883%" y="53" width="0.4777%" height="15" fill="rgb(207,160,47)"/><text x="14.5383%" y="63.50"></text></g><g><title>evaluate_obligation (314,086 samples, 0.37%)</title><rect x="14.3943%" y="37" width="0.3717%" height="15" fill="rgb(228,23,34)"/><text x="14.6443%" y="47.50"></text></g><g><title>thir_body (237,091 samples, 0.28%)</title><rect x="14.8659%" y="69" width="0.2806%" height="15" fill="rgb(218,30,26)"/><text x="15.1159%" y="79.50"></text></g><g><title>mir_const (2,153,994 samples, 2.55%)</title><rect x="12.6065%" y="117" width="2.5493%" height="15" fill="rgb(220,122,19)"/><text x="12.8565%" y="127.50">mi..</text></g><g><title>unsafety_check_result (1,805,261 samples, 2.14%)</title><rect x="13.0192%" y="101" width="2.1366%" height="15" fill="rgb(250,228,42)"/><text x="13.2692%" y="111.50">u..</text></g><g><title>mir_built (1,580,795 samples, 1.87%)</title><rect x="13.2849%" y="85" width="1.8709%" height="15" fill="rgb(240,193,28)"/><text x="13.5349%" y="95.50">m..</text></g><g><title>mir_promoted (2,400,227 samples, 2.84%)</title><rect x="12.3295%" y="133" width="2.8407%" height="15" fill="rgb(216,20,37)"/><text x="12.5795%" y="143.50">mi..</text></g><g><title>type_op_normalize_fn_sig (121,771 samples, 0.14%)</title><rect x="15.2085%" y="133" width="0.1441%" height="15" fill="rgb(206,188,39)"/><text x="15.4585%" y="143.50"></text></g><g><title>MIR_borrow_checking (6,978,668 samples, 8.26%)</title><rect x="8.6687%" y="165" width="8.2594%" height="15" fill="rgb(217,207,13)"/><text x="8.9187%" y="175.50">MIR_borrow_..</text></g><g><title>mir_borrowck (6,953,198 samples, 8.23%)</title><rect x="8.6989%" y="149" width="8.2293%" height="15" fill="rgb(231,73,38)"/><text x="8.9489%" y="159.50">mir_borrowck</text></g><g><title>type_op_prove_predicate (1,331,184 samples, 1.58%)</title><rect x="15.3527%" y="133" width="1.5755%" height="15" fill="rgb(225,20,46)"/><text x="15.6027%" y="143.50"></text></g><g><title>hir_module_items (179,483 samples, 0.21%)</title><rect x="16.9379%" y="165" width="0.2124%" height="15" fill="rgb(210,31,41)"/><text x="17.1879%" y="175.50"></text></g><g><title>get_lang_items (108,011 samples, 0.13%)</title><rect x="17.5289%" y="117" width="0.1278%" height="15" fill="rgb(221,200,47)"/><text x="17.7789%" y="127.50"></text></g><g><title>should_inherit_track_caller (114,772 samples, 0.14%)</title><rect x="17.6567%" y="117" width="0.1358%" height="15" fill="rgb(226,26,5)"/><text x="17.9067%" y="127.50"></text></g><g><title>codegen_fn_attrs (356,115 samples, 0.42%)</title><rect x="17.4169%" y="133" width="0.4215%" height="15" fill="rgb(249,33,26)"/><text x="17.6669%" y="143.50"></text></g><g><title>check_mod_attrs (547,066 samples, 0.65%)</title><rect x="17.1911%" y="149" width="0.6475%" height="15" fill="rgb(235,183,28)"/><text x="17.4411%" y="159.50"></text></g><g><title>lookup_deprecation_entry (132,863 samples, 0.16%)</title><rect x="18.2725%" y="133" width="0.1572%" height="15" fill="rgb(221,5,38)"/><text x="18.5225%" y="143.50"></text></g><g><title>check_mod_unstable_api_usage (477,546 samples, 0.57%)</title><rect x="17.9902%" y="149" width="0.5652%" height="15" fill="rgb(247,18,42)"/><text x="18.2402%" y="159.50"></text></g><g><title>misc_checking_1 (1,235,944 samples, 1.46%)</title><rect x="17.1508%" y="165" width="1.4628%" height="15" fill="rgb(241,131,45)"/><text x="17.4008%" y="175.50"></text></g><g><title>liveness_and_intrinsic_checking (146,571 samples, 0.17%)</title><rect x="18.6156%" y="149" width="0.1735%" height="15" fill="rgb(249,31,29)"/><text x="18.8656%" y="159.50"></text></g><g><title>check_mod_liveness (118,000 samples, 0.14%)</title><rect x="18.6494%" y="133" width="0.1397%" height="15" fill="rgb(225,111,53)"/><text x="18.8994%" y="143.50"></text></g><g><title>misc_checking_2 (331,113 samples, 0.39%)</title><rect x="18.6135%" y="165" width="0.3919%" height="15" fill="rgb(238,160,17)"/><text x="18.8635%" y="175.50"></text></g><g><title>match_checking (182,802 samples, 0.22%)</title><rect x="18.7891%" y="149" width="0.2164%" height="15" fill="rgb(214,148,48)"/><text x="19.0391%" y="159.50"></text></g><g><title>check_match (174,832 samples, 0.21%)</title><rect x="18.7985%" y="133" width="0.2069%" height="15" fill="rgb(232,36,49)"/><text x="19.0485%" y="143.50"></text></g><g><title>death_checking (94,001 samples, 0.11%)</title><rect x="19.0881%" y="149" width="0.1113%" height="15" fill="rgb(209,103,24)"/><text x="19.3381%" y="159.50"></text></g><g><title>param_env (128,681 samples, 0.15%)</title><rect x="19.7259%" y="117" width="0.1523%" height="15" fill="rgb(229,88,8)"/><text x="19.9759%" y="127.50"></text></g><g><title>trait_impls_of (211,672 samples, 0.25%)</title><rect x="19.8782%" y="117" width="0.2505%" height="15" fill="rgb(213,181,19)"/><text x="20.1282%" y="127.50"></text></g><g><title>crate_lints (3,585,310 samples, 4.24%)</title><rect x="19.2014%" y="133" width="4.2433%" height="15" fill="rgb(254,191,54)"/><text x="19.4514%" y="143.50">crate..</text></g><g><title>type_of (2,801,843 samples, 3.32%)</title><rect x="20.1287%" y="117" width="3.3160%" height="15" fill="rgb(241,83,37)"/><text x="20.3787%" y="127.50">typ..</text></g><g><title>metadata_decode_entry_type_of (2,547,367 samples, 3.01%)</title><rect x="20.4299%" y="101" width="3.0149%" height="15" fill="rgb(233,36,39)"/><text x="20.6799%" y="111.50">met..</text></g><g><title>lint_checking (3,700,491 samples, 4.38%)</title><rect x="19.1994%" y="149" width="4.3796%" height="15" fill="rgb(226,3,54)"/><text x="19.4494%" y="159.50">lint_..</text></g><g><title>module_lints (113,441 samples, 0.13%)</title><rect x="23.4447%" y="133" width="0.1343%" height="15" fill="rgb(245,192,40)"/><text x="23.6947%" y="143.50"></text></g><g><title>lint_mod (109,791 samples, 0.13%)</title><rect x="23.4491%" y="117" width="0.1299%" height="15" fill="rgb(238,167,29)"/><text x="23.6991%" y="127.50"></text></g><g><title>privacy_checking_modules (183,812 samples, 0.22%)</title><rect x="23.6728%" y="149" width="0.2175%" height="15" fill="rgb(232,182,51)"/><text x="23.9228%" y="159.50"></text></g><g><title>check_mod_privacy (181,912 samples, 0.22%)</title><rect x="23.6751%" y="133" width="0.2153%" height="15" fill="rgb(231,60,39)"/><text x="23.9251%" y="143.50"></text></g><g><title>misc_checking_3 (4,137,186 samples, 4.90%)</title><rect x="19.0054%" y="165" width="4.8964%" height="15" fill="rgb(208,69,12)"/><text x="19.2554%" y="175.50">misc_c..</text></g><g><title>impl_parent (165,480 samples, 0.20%)</title><rect x="24.3203%" y="101" width="0.1958%" height="15" fill="rgb(235,93,37)"/><text x="24.5703%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_parent (113,980 samples, 0.13%)</title><rect x="24.3813%" y="85" width="0.1349%" height="15" fill="rgb(213,116,39)"/><text x="24.6313%" y="95.50"></text></g><g><title>impl_trait_ref (668,878 samples, 0.79%)</title><rect x="24.5162%" y="101" width="0.7916%" height="15" fill="rgb(222,207,29)"/><text x="24.7662%" y="111.50"></text></g><g><title>metadata_decode_entry_impl_trait_ref (616,678 samples, 0.73%)</title><rect x="24.5780%" y="85" width="0.7299%" height="15" fill="rgb(206,96,30)"/><text x="24.8280%" y="95.50"></text></g><g><title>coherent_trait (1,229,754 samples, 1.46%)</title><rect x="23.9763%" y="133" width="1.4554%" height="15" fill="rgb(218,138,4)"/><text x="24.2263%" y="143.50"></text></g><g><title>specialization_graph_of (1,220,864 samples, 1.44%)</title><rect x="23.9868%" y="117" width="1.4449%" height="15" fill="rgb(250,191,14)"/><text x="24.2368%" y="127.50"></text></g><g><title>trait_impls_of (104,722 samples, 0.12%)</title><rect x="25.3078%" y="101" width="0.1239%" height="15" fill="rgb(239,60,40)"/><text x="25.5578%" y="111.50"></text></g><g><title>coherence_checking (1,303,024 samples, 1.54%)</title><rect x="23.9562%" y="149" width="1.5422%" height="15" fill="rgb(206,27,48)"/><text x="24.2062%" y="159.50"></text></g><g><title>associated_item (220,314 samples, 0.26%)</title><rect x="31.8243%" y="85" width="0.2607%" height="15" fill="rgb(225,35,8)"/><text x="32.0743%" y="95.50"></text></g><g><title>metadata_decode_entry_associated_item (149,804 samples, 0.18%)</title><rect x="31.9077%" y="69" width="0.1773%" height="15" fill="rgb(250,213,24)"/><text x="32.1577%" y="79.50"></text></g><g><title>associated_items (344,135 samples, 0.41%)</title><rect x="31.6973%" y="101" width="0.4073%" height="15" fill="rgb(247,123,22)"/><text x="31.9473%" y="111.50"></text></g><g><title>dropck_outlives (172,121 samples, 0.20%)</title><rect x="32.1367%" y="101" width="0.2037%" height="15" fill="rgb(231,138,38)"/><text x="32.3867%" y="111.50"></text></g><g><title>predicates_of (96,801 samples, 0.11%)</title><rect x="33.2053%" y="85" width="0.1146%" height="15" fill="rgb(231,145,46)"/><text x="33.4553%" y="95.50"></text></g><g><title>specializes (297,634 samples, 0.35%)</title><rect x="33.3198%" y="85" width="0.3523%" height="15" fill="rgb(251,118,11)"/><text x="33.5698%" y="95.50"></text></g><g><title>param_env (261,264 samples, 0.31%)</title><rect x="33.3629%" y="69" width="0.3092%" height="15" fill="rgb(217,147,25)"/><text x="33.6129%" y="79.50"></text></g><g><title>def_span (215,562 samples, 0.26%)</title><rect x="33.4170%" y="53" width="0.2551%" height="15" fill="rgb(247,81,37)"/><text x="33.6670%" y="63.50"></text></g><g><title>metadata_decode_entry_def_span (212,372 samples, 0.25%)</title><rect x="33.4207%" y="37" width="0.2513%" height="15" fill="rgb(209,12,38)"/><text x="33.6707%" y="47.50"></text></g><g><title>evaluate_obligation (2,136,513 samples, 2.53%)</title><rect x="32.3404%" y="101" width="2.5286%" height="15" fill="rgb(227,1,9)"/><text x="32.5904%" y="111.50">ev..</text></g><g><title>trait_impls_of (998,192 samples, 1.18%)</title><rect x="33.6876%" y="85" width="1.1814%" height="15" fill="rgb(248,47,43)"/><text x="33.9376%" y="95.50"></text></g><g><title>implementations_of_trait (292,885 samples, 0.35%)</title><rect x="34.5224%" y="69" width="0.3466%" height="15" fill="rgb(221,10,30)"/><text x="34.7724%" y="79.50"></text></g><g><title>metadata_decode_entry_implementations_of_trait (216,423 samples, 0.26%)</title><rect x="34.6129%" y="53" width="0.2561%" height="15" fill="rgb(210,229,1)"/><text x="34.8629%" y="63.50"></text></g><g><title>generics_of (99,540 samples, 0.12%)</title><rect x="34.9785%" y="101" width="0.1178%" height="15" fill="rgb(222,148,37)"/><text x="35.2285%" y="111.50"></text></g><g><title>item_attrs (188,113 samples, 0.22%)</title><rect x="35.2443%" y="101" width="0.2226%" height="15" fill="rgb(234,67,33)"/><text x="35.4943%" y="111.50"></text></g><g><title>metadata_decode_entry_item_attrs (182,543 samples, 0.22%)</title><rect x="35.2508%" y="85" width="0.2160%" height="15" fill="rgb(247,98,35)"/><text x="35.5008%" y="95.50"></text></g><g><title>method_autoderef_steps (234,464 samples, 0.28%)</title><rect x="35.4877%" y="101" width="0.2775%" height="15" fill="rgb(247,138,52)"/><text x="35.7377%" y="111.50"></text></g><g><title>evaluate_obligation (145,902 samples, 0.17%)</title><rect x="35.5926%" y="85" width="0.1727%" height="15" fill="rgb(213,79,30)"/><text x="35.8426%" y="95.50"></text></g><g><title>explicit_predicates_of (116,371 samples, 0.14%)</title><rect x="35.9243%" y="69" width="0.1377%" height="15" fill="rgb(246,177,23)"/><text x="36.1743%" y="79.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (98,031 samples, 0.12%)</title><rect x="35.9460%" y="53" width="0.1160%" height="15" fill="rgb(230,62,27)"/><text x="36.1960%" y="63.50"></text></g><g><title>predicates_of (272,971 samples, 0.32%)</title><rect x="35.7839%" y="101" width="0.3231%" height="15" fill="rgb(216,154,8)"/><text x="36.0339%" y="111.50"></text></g><g><title>predicates_defined_on (203,391 samples, 0.24%)</title><rect x="35.8663%" y="85" width="0.2407%" height="15" fill="rgb(244,35,45)"/><text x="36.1163%" y="95.50"></text></g><g><title>adt_def (95,121 samples, 0.11%)</title><rect x="42.7251%" y="69" width="0.1126%" height="15" fill="rgb(251,115,12)"/><text x="42.9751%" y="79.50"></text></g><g><title>metadata_decode_entry_adt_def (92,891 samples, 0.11%)</title><rect x="42.7277%" y="53" width="0.1099%" height="15" fill="rgb(240,54,50)"/><text x="42.9777%" y="63.50"></text></g><g><title>adt_sized_constraint (114,101 samples, 0.14%)</title><rect x="42.7074%" y="85" width="0.1350%" height="15" fill="rgb(233,84,52)"/><text x="42.9574%" y="95.50"></text></g><g><title>associated_items (87,081 samples, 0.10%)</title><rect x="42.8425%" y="85" width="0.1031%" height="15" fill="rgb(207,117,47)"/><text x="43.0925%" y="95.50"></text></g><g><title>dropck_outlives (285,212 samples, 0.34%)</title><rect x="42.9600%" y="85" width="0.3376%" height="15" fill="rgb(249,43,39)"/><text x="43.2100%" y="95.50"></text></g><g><title>adt_dtorck_constraint (141,691 samples, 0.17%)</title><rect x="43.1299%" y="69" width="0.1677%" height="15" fill="rgb(209,38,44)"/><text x="43.3799%" y="79.50"></text></g><g><title>evaluate_obligation (953,661 samples, 1.13%)</title><rect x="43.2976%" y="85" width="1.1287%" height="15" fill="rgb(236,212,23)"/><text x="43.5476%" y="95.50"></text></g><g><title>trait_impls_of (162,331 samples, 0.19%)</title><rect x="44.2342%" y="69" width="0.1921%" height="15" fill="rgb(242,79,21)"/><text x="44.4842%" y="79.50"></text></g><g><title>is_copy_raw (129,902 samples, 0.15%)</title><rect x="44.6933%" y="85" width="0.1537%" height="15" fill="rgb(211,96,35)"/><text x="44.9433%" y="95.50"></text></g><g><title>evaluate_obligation (92,052 samples, 0.11%)</title><rect x="44.7381%" y="69" width="0.1089%" height="15" fill="rgb(253,215,40)"/><text x="44.9881%" y="79.50"></text></g><g><title>item_attrs (153,202 samples, 0.18%)</title><rect x="44.8470%" y="85" width="0.1813%" height="15" fill="rgb(211,81,21)"/><text x="45.0970%" y="95.50"></text></g><g><title>metadata_decode_entry_item_attrs (147,832 samples, 0.17%)</title><rect x="44.8534%" y="69" width="0.1750%" height="15" fill="rgb(208,190,38)"/><text x="45.1034%" y="79.50"></text></g><g><title>method_autoderef_steps (101,033 samples, 0.12%)</title><rect x="45.0440%" y="85" width="0.1196%" height="15" fill="rgb(235,213,38)"/><text x="45.2940%" y="95.50"></text></g><g><title>evaluate_obligation (120,221 samples, 0.14%)</title><rect x="45.2793%" y="69" width="0.1423%" height="15" fill="rgb(237,122,38)"/><text x="45.5293%" y="79.50"></text></g><g><title>layout_of (96,211 samples, 0.11%)</title><rect x="45.4311%" y="69" width="0.1139%" height="15" fill="rgb(244,218,35)"/><text x="45.6811%" y="79.50"></text></g><g><title>object_safety_violations (362,485 samples, 0.43%)</title><rect x="45.1636%" y="85" width="0.4290%" height="15" fill="rgb(240,68,47)"/><text x="45.4136%" y="95.50"></text></g><g><title>explicit_predicates_of (110,261 samples, 0.13%)</title><rect x="45.7522%" y="53" width="0.1305%" height="15" fill="rgb(210,16,53)"/><text x="46.0022%" y="63.50"></text></g><g><title>metadata_decode_entry_explicit_predicates_of (96,361 samples, 0.11%)</title><rect x="45.7687%" y="37" width="0.1140%" height="15" fill="rgb(235,124,12)"/><text x="46.0187%" y="47.50"></text></g><g><title>predicates_of (275,373 samples, 0.33%)</title><rect x="45.5982%" y="85" width="0.3259%" height="15" fill="rgb(224,169,11)"/><text x="45.8482%" y="95.50"></text></g><g><title>predicates_defined_on (198,382 samples, 0.23%)</title><rect x="45.6893%" y="69" width="0.2348%" height="15" fill="rgb(250,166,2)"/><text x="45.9393%" y="79.50"></text></g><g><title>typeck (8,281,273 samples, 9.80%)</title><rect x="36.2375%" y="101" width="9.8011%" height="15" fill="rgb(242,216,29)"/><text x="36.4875%" y="111.50">typeck</text></g><g><title>item_bodies_checking (17,334,914 samples, 20.52%)</title><rect x="25.5328%" y="149" width="20.5162%" height="15" fill="rgb(230,116,27)"/><text x="25.7828%" y="159.50">item_bodies_checking</text></g><g><title>typeck_item_bodies (17,332,294 samples, 20.51%)</title><rect x="25.5359%" y="133" width="20.5131%" height="15" fill="rgb(228,99,48)"/><text x="25.7859%" y="143.50">typeck_item_bodies</text></g><g><title>typeck (17,303,774 samples, 20.48%)</title><rect x="25.5697%" y="117" width="20.4794%" height="15" fill="rgb(253,11,6)"/><text x="25.8197%" y="127.50">typeck</text></g><g><title>item_types_checking (252,153 samples, 0.30%)</title><rect x="46.0491%" y="149" width="0.2984%" height="15" fill="rgb(247,143,39)"/><text x="46.2991%" y="159.50"></text></g><g><title>check_mod_item_types (247,603 samples, 0.29%)</title><rect x="46.0545%" y="133" width="0.2930%" height="15" fill="rgb(236,97,10)"/><text x="46.3045%" y="143.50"></text></g><g><title>fn_sig (127,131 samples, 0.15%)</title><rect x="46.5724%" y="117" width="0.1505%" height="15" fill="rgb(233,208,19)"/><text x="46.8224%" y="127.50"></text></g><g><title>is_late_bound_map (213,912 samples, 0.25%)</title><rect x="46.8661%" y="101" width="0.2532%" height="15" fill="rgb(216,164,2)"/><text x="47.1161%" y="111.50"></text></g><g><title>resolve_lifetimes (197,342 samples, 0.23%)</title><rect x="46.8857%" y="85" width="0.2336%" height="15" fill="rgb(220,129,5)"/><text x="47.1357%" y="95.50"></text></g><g><title>named_region_map (113,382 samples, 0.13%)</title><rect x="47.1192%" y="101" width="0.1342%" height="15" fill="rgb(242,17,10)"/><text x="47.3692%" y="111.50"></text></g><g><title>resolve_lifetimes (97,492 samples, 0.12%)</title><rect x="47.1380%" y="85" width="0.1154%" height="15" fill="rgb(242,107,0)"/><text x="47.3880%" y="95.50"></text></g><g><title>generics_of (462,244 samples, 0.55%)</title><rect x="46.7228%" y="117" width="0.5471%" height="15" fill="rgb(251,28,31)"/><text x="46.9728%" y="127.50"></text></g><g><title>explicit_predicates_of (415,306 samples, 0.49%)</title><rect x="47.3623%" y="85" width="0.4915%" height="15" fill="rgb(233,223,10)"/><text x="47.6123%" y="95.50"></text></g><g><title>predicates_of (779,040 samples, 0.92%)</title><rect x="47.2846%" y="117" width="0.9220%" height="15" fill="rgb(215,21,27)"/><text x="47.5346%" y="127.50"></text></g><g><title>predicates_defined_on (756,680 samples, 0.90%)</title><rect x="47.3110%" y="101" width="0.8955%" height="15" fill="rgb(232,23,21)"/><text x="47.5610%" y="111.50"></text></g><g><title>inferred_outlives_of (298,024 samples, 0.35%)</title><rect x="47.8539%" y="85" width="0.3527%" height="15" fill="rgb(244,5,23)"/><text x="48.1039%" y="95.50"></text></g><g><title>inferred_outlives_crate (284,053 samples, 0.34%)</title><rect x="47.8704%" y="69" width="0.3362%" height="15" fill="rgb(226,81,46)"/><text x="48.1204%" y="79.50"></text></g><g><title>type_of (123,680 samples, 0.15%)</title><rect x="48.0602%" y="53" width="0.1464%" height="15" fill="rgb(247,70,30)"/><text x="48.3102%" y="63.50"></text></g><g><title>type_collecting (1,697,109 samples, 2.01%)</title><rect x="46.3494%" y="149" width="2.0086%" height="15" fill="rgb(212,68,19)"/><text x="46.5994%" y="159.50">t..</text></g><g><title>collect_mod_item_types (1,683,409 samples, 1.99%)</title><rect x="46.3656%" y="133" width="1.9924%" height="15" fill="rgb(240,187,13)"/><text x="46.6156%" y="143.50">c..</text></g><g><title>type_of (127,881 samples, 0.15%)</title><rect x="48.2066%" y="117" width="0.1513%" height="15" fill="rgb(223,113,26)"/><text x="48.4566%" y="127.50"></text></g><g><title>evaluate_obligation (305,494 samples, 0.36%)</title><rect x="49.4040%" y="117" width="0.3616%" height="15" fill="rgb(206,192,2)"/><text x="49.6540%" y="127.50"></text></g><g><title>implied_outlives_bounds (170,123 samples, 0.20%)</title><rect x="49.7656%" y="117" width="0.2013%" height="15" fill="rgb(241,108,4)"/><text x="50.0156%" y="127.50"></text></g><g><title>param_env (117,232 samples, 0.14%)</title><rect x="49.9669%" y="117" width="0.1387%" height="15" fill="rgb(247,173,49)"/><text x="50.2169%" y="127.50"></text></g><g><title>region_scope_tree (85,940 samples, 0.10%)</title><rect x="50.1378%" y="117" width="0.1017%" height="15" fill="rgb(224,114,35)"/><text x="50.3878%" y="127.50"></text></g><g><title>check_impl_item_well_formed (1,534,337 samples, 1.82%)</title><rect x="48.4728%" y="133" width="1.8159%" height="15" fill="rgb(245,159,27)"/><text x="48.7228%" y="143.50">c..</text></g><g><title>adt_sized_constraint (115,691 samples, 0.14%)</title><rect x="52.0191%" y="101" width="0.1369%" height="15" fill="rgb(245,172,44)"/><text x="52.2691%" y="111.50"></text></g><g><title>evaluate_obligation (283,593 samples, 0.34%)</title><rect x="51.8232%" y="117" width="0.3356%" height="15" fill="rgb(236,23,11)"/><text x="52.0732%" y="127.50"></text></g><g><title>implied_outlives_bounds (185,662 samples, 0.22%)</title><rect x="52.1626%" y="117" width="0.2197%" height="15" fill="rgb(205,117,38)"/><text x="52.4126%" y="127.50"></text></g><g><title>param_env (321,074 samples, 0.38%)</title><rect x="52.3823%" y="117" width="0.3800%" height="15" fill="rgb(237,72,25)"/><text x="52.6323%" y="127.50"></text></g><g><title>region_scope_tree (89,290 samples, 0.11%)</title><rect x="52.7744%" y="117" width="0.1057%" height="15" fill="rgb(244,70,9)"/><text x="53.0244%" y="127.50"></text></g><g><title>analysis (37,677,490 samples, 44.59%)</title><rect x="8.3855%" y="181" width="44.5921%" height="15" fill="rgb(217,125,39)"/><text x="8.6355%" y="191.50">analysis</text></g><g><title>type_check_crate (24,567,195 samples, 29.08%)</title><rect x="23.9019%" y="165" width="29.0758%" height="15" fill="rgb(235,36,10)"/><text x="24.1519%" y="175.50">type_check_crate</text></g><g><title>wf_checking (3,902,273 samples, 4.62%)</title><rect x="48.3592%" y="149" width="4.6184%" height="15" fill="rgb(251,123,47)"/><text x="48.6092%" y="159.50">wf_ch..</text></g><g><title>check_item_well_formed (2,271,975 samples, 2.69%)</title><rect x="50.2887%" y="133" width="2.6889%" height="15" fill="rgb(221,13,13)"/><text x="50.5387%" y="143.50">ch..</text></g><g><title>codegen_module (229,033 samples, 0.27%)</title><rect x="53.7489%" y="165" width="0.2711%" height="15" fill="rgb(238,131,9)"/><text x="53.9989%" y="175.50"></text></g><g><title>codegen_crate (1,008,972 samples, 1.19%)</title><rect x="52.9908%" y="181" width="1.1941%" height="15" fill="rgb(211,50,8)"/><text x="53.2408%" y="191.50"></text></g><g><title>codegen_module_optimize (2,488,838 samples, 2.95%)</title><rect x="54.1849%" y="181" width="2.9456%" height="15" fill="rgb(245,182,24)"/><text x="54.4349%" y="191.50">co..</text></g><g><title>LLVM_module_optimize (434,655 samples, 0.51%)</title><rect x="56.6161%" y="165" width="0.5144%" height="15" fill="rgb(242,14,37)"/><text x="56.8661%" y="175.50"></text></g><g><title>LLVM_lto_optimize (238,283 samples, 0.28%)</title><rect x="57.5977%" y="165" width="0.2820%" height="15" fill="rgb(246,228,12)"/><text x="57.8477%" y="175.50"></text></g><g><title>LLVM_module_codegen (2,398,737 samples, 2.84%)</title><rect x="57.8798%" y="165" width="2.8390%" height="15" fill="rgb(213,55,15)"/><text x="58.1298%" y="175.50">LL..</text></g><g><title>LLVM_module_codegen_emit_obj (2,356,026 samples, 2.79%)</title><rect x="57.9303%" y="149" width="2.7884%" height="15" fill="rgb(209,9,3)"/><text x="58.1803%" y="159.50">LL..</text></g><g><title>codegen_module_perform_lto (3,071,895 samples, 3.64%)</title><rect x="57.1305%" y="181" width="3.6357%" height="15" fill="rgb(230,59,30)"/><text x="57.3805%" y="191.50">code..</text></g><g><title>AST_validation (130,201 samples, 0.15%)</title><rect x="61.0533%" y="165" width="0.1541%" height="15" fill="rgb(209,121,21)"/><text x="61.3033%" y="175.50"></text></g><g><title>crate_injection (106,001 samples, 0.13%)</title><rect x="61.2536%" y="165" width="0.1255%" height="15" fill="rgb(220,109,13)"/><text x="61.5036%" y="175.50"></text></g><g><title>metadata_load_macro (157,051 samples, 0.19%)</title><rect x="75.5455%" y="133" width="0.1859%" height="15" fill="rgb(232,18,1)"/><text x="75.7955%" y="143.50"></text></g><g><title>metadata_register_crate (2,672,600 samples, 3.16%)</title><rect x="75.7313%" y="133" width="3.1631%" height="15" fill="rgb(215,41,42)"/><text x="75.9813%" y="143.50">met..</text></g><g><title>metadata_register_crate (947,000 samples, 1.12%)</title><rect x="77.7736%" y="117" width="1.1208%" height="15" fill="rgb(224,123,36)"/><text x="78.0236%" y="127.50"></text></g><g><title>macro_expand_crate (14,933,687 samples, 17.67%)</title><rect x="61.3791%" y="165" width="17.6743%" height="15" fill="rgb(240,125,3)"/><text x="61.6291%" y="175.50">macro_expand_crate</text></g><g><title>expand_crate (14,906,706 samples, 17.64%)</title><rect x="61.4110%" y="149" width="17.6424%" height="15" fill="rgb(205,98,50)"/><text x="61.6610%" y="159.50">expand_crate</text></g><g><title>pre_AST_expansion_lint_checks (134,352 samples, 0.16%)</title><rect x="78.8944%" y="133" width="0.1590%" height="15" fill="rgb(205,185,37)"/><text x="79.1444%" y="143.50"></text></g><g><title>pre_AST_expansion_lint_checks (130,022 samples, 0.15%)</title><rect x="79.0595%" y="165" width="0.1539%" height="15" fill="rgb(238,207,15)"/><text x="79.3095%" y="175.50"></text></g><g><title>late_resolve_crate (2,172,394 samples, 2.57%)</title><rect x="79.3295%" y="149" width="2.5711%" height="15" fill="rgb(213,199,42)"/><text x="79.5795%" y="159.50">la..</text></g><g><title>configure_and_expand (17,947,680 samples, 21.24%)</title><rect x="60.7662%" y="181" width="21.2415%" height="15" fill="rgb(235,201,11)"/><text x="61.0162%" y="191.50">configure_and_expand</text></g><g><title>resolve_crate (2,360,917 samples, 2.79%)</title><rect x="79.2134%" y="165" width="2.7942%" height="15" fill="rgb(207,46,11)"/><text x="79.4634%" y="175.50">re..</text></g><g><title>drop_ast (109,161 samples, 0.13%)</title><rect x="82.0076%" y="181" width="0.1292%" height="15" fill="rgb(241,35,35)"/><text x="82.2576%" y="191.50"></text></g><g><title>early_lint_checks (240,933 samples, 0.29%)</title><rect x="82.1510%" y="181" width="0.2851%" height="15" fill="rgb(243,32,47)"/><text x="82.4010%" y="191.50"></text></g><g><title>free_global_ctxt (2,816,451 samples, 3.33%)</title><rect x="82.4362%" y="181" width="3.3333%" height="15" fill="rgb(247,202,23)"/><text x="82.6862%" y="191.50">fre..</text></g><g><title>layout_of (228,613 samples, 0.27%)</title><rect x="87.5973%" y="149" width="0.2706%" height="15" fill="rgb(219,102,11)"/><text x="87.8473%" y="159.50"></text></g><g><title>layout_of (88,520 samples, 0.10%)</title><rect x="87.7632%" y="133" width="0.1048%" height="15" fill="rgb(243,110,44)"/><text x="88.0132%" y="143.50"></text></g><g><title>needs_drop_raw (362,477 samples, 0.43%)</title><rect x="89.1335%" y="133" width="0.4290%" height="15" fill="rgb(222,74,54)"/><text x="89.3835%" y="143.50"></text></g><g><title>is_copy_raw (320,506 samples, 0.38%)</title><rect x="89.1832%" y="117" width="0.3793%" height="15" fill="rgb(216,99,12)"/><text x="89.4332%" y="127.50"></text></g><g><title>evaluate_obligation (242,472 samples, 0.29%)</title><rect x="89.2755%" y="101" width="0.2870%" height="15" fill="rgb(226,22,26)"/><text x="89.5255%" y="111.50"></text></g><g><title>mir_drops_elaborated_and_const_checked (1,449,667 samples, 1.72%)</title><rect x="87.8679%" y="149" width="1.7157%" height="15" fill="rgb(217,163,10)"/><text x="88.1179%" y="159.50"></text></g><g><title>eval_to_const_value_raw (150,612 samples, 0.18%)</title><rect x="89.5948%" y="133" width="0.1783%" height="15" fill="rgb(213,25,53)"/><text x="89.8448%" y="143.50"></text></g><g><title>eval_to_const_value_raw (143,822 samples, 0.17%)</title><rect x="89.6028%" y="117" width="0.1702%" height="15" fill="rgb(252,105,26)"/><text x="89.8528%" y="127.50"></text></g><g><title>eval_to_allocation_raw (141,772 samples, 0.17%)</title><rect x="89.6052%" y="101" width="0.1678%" height="15" fill="rgb(220,39,43)"/><text x="89.8552%" y="111.50"></text></g><g><title>try_normalize_mir_const_after_erasing_regions (88,771 samples, 0.11%)</title><rect x="89.6680%" y="85" width="0.1051%" height="15" fill="rgb(229,68,48)"/><text x="89.9180%" y="95.50"></text></g><g><title>optimized_mir (2,654,610 samples, 3.14%)</title><rect x="86.6368%" y="165" width="3.1418%" height="15" fill="rgb(252,8,32)"/><text x="86.8868%" y="175.50">opt..</text></g><g><title>try_normalize_mir_const_after_erasing_regions (164,722 samples, 0.19%)</title><rect x="89.5836%" y="149" width="0.1950%" height="15" fill="rgb(223,20,43)"/><text x="89.8336%" y="159.50"></text></g><g><title>generate_crate_metadata (3,407,048 samples, 4.03%)</title><rect x="85.7695%" y="181" width="4.0323%" height="15" fill="rgb(229,81,49)"/><text x="86.0195%" y="191.50">gene..</text></g><g><title>hir_lowering (1,833,290 samples, 2.17%)</title><rect x="89.8018%" y="181" width="2.1697%" height="15" fill="rgb(236,28,36)"/><text x="90.0518%" y="191.50">h..</text></g><g><title>finish_ongoing_codegen (3,185,376 samples, 3.77%)</title><rect x="91.9856%" y="165" width="3.7700%" height="15" fill="rgb(249,185,26)"/><text x="92.2356%" y="175.50">fini..</text></g><g><title>link_crate (672,147 samples, 0.80%)</title><rect x="95.7555%" y="165" width="0.7955%" height="15" fill="rgb(249,174,33)"/><text x="96.0055%" y="175.50"></text></g><g><title>link_binary (655,947 samples, 0.78%)</title><rect x="95.7747%" y="149" width="0.7763%" height="15" fill="rgb(233,201,37)"/><text x="96.0247%" y="159.50"></text></g><g><title>link_rlib (386,735 samples, 0.46%)</title><rect x="96.0933%" y="133" width="0.4577%" height="15" fill="rgb(221,78,26)"/><text x="96.3433%" y="143.50"></text></g><g><title>link (3,877,343 samples, 4.59%)</title><rect x="91.9715%" y="181" width="4.5889%" height="15" fill="rgb(250,127,30)"/><text x="92.2215%" y="191.50">link</text></g><g><title>parse_crate (1,574,667 samples, 1.86%)</title><rect x="96.5605%" y="181" width="1.8637%" height="15" fill="rgb(230,49,44)"/><text x="96.8105%" y="191.50">p..</text></g><g><title>prepare_outputs (377,565 samples, 0.45%)</title><rect x="98.4482%" y="181" width="0.4469%" height="15" fill="rgb(229,67,23)"/><text x="98.6982%" y="191.50"></text></g><g><title>self_profile_alloc_query_strings (432,015 samples, 0.51%)</title><rect x="98.8951%" y="181" width="0.5113%" height="15" fill="rgb(249,83,47)"/><text x="99.1451%" y="191.50"></text></g><g><title>setup_global_ctxt (155,822 samples, 0.18%)</title><rect x="99.4077%" y="181" width="0.1844%" height="15" fill="rgb(215,43,3)"/><text x="99.6577%" y="191.50"></text></g><g><title>all (84,493,605 samples, 100%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,154,13)"/><text x="0.2500%" y="223.50"></text></g><g><title>rustc (84,493,605 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(219,56,2)"/><text x="0.2500%" y="207.50">rustc</text></g><g><title>write_crate_metadata (344,604 samples, 0.41%)</title><rect x="99.5922%" y="181" width="0.4078%" height="15" fill="rgb(233,0,4)"/><text x="99.8422%" y="191.50"></text></g></svg></svg>